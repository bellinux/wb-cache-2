319|10000|Public
2500|$|The {{starting}} point in learning theory is typically a concept class, {{a set of}} possible concepts. Usually a concept is a function on some domain, such as [...] For example, the concept class could be the set of <b>disjunctive</b> <b>normal</b> <b>form</b> (DNF) formulas on n bits or the set of Boolean circuits of some constant depth. The goal for the learner is to learn ...|$|E
2500|$|Modern logic {{begins with}} {{what is known as}} the [...] "algebraic school", {{originating}} with Boole and including Peirce, Jevons, Schröder, and Venn. Their objective was to develop a calculus to formalise reasoning in the area of classes, propositions, and probabilities. [...] The school begins with Boole's seminal work Mathematical Analysis of Logic which appeared in 1847, although De Morgan (1847) is its immediate precursor. The fundamental idea of Boole's system is that algebraic formulae can be used to express logical relations. [...] This idea occurred to Boole in his teenage years, working as an usher in a private school in Lincoln, Lincolnshire. [...] For example, let x and y stand for classes let the symbol = signify that the classes have the same members, xy stand for the class containing all and only the members of x and y and so on. [...] Boole calls these elective symbols, i.e. symbols which select certain objects for consideration. [...] An expression in which elective symbols are used is called an elective function, and an equation of which the members are elective functions, is an elective equation. The theory of elective functions and their [...] "development" [...] is essentially the modern idea of truth-functions and their expression in <b>disjunctive</b> <b>normal</b> <b>form.</b>|$|E
5000|$|... #Subtitle level 3: Using the {{canonical}} <b>disjunctive</b> <b>normal</b> <b>form</b> ...|$|E
40|$|We study some {{structural}} and numerical properties of varieties for determinative <b>disjunctive</b> <b>normal</b> <b>forms,</b> introduced here for given propositional formula. We consider for classical and non-classical propositional logics some proof systems, which are constructed {{on the base}} of determinative <b>disjunctive</b> <b>normal</b> <b>forms.</b> We investigate also the relation between the proof complexities in some well-known classical and non-classical proof systems (Resolution, Cut-free sequent, Gentzen refutation, Cutting planes etc.) and numerical properties of varieties for determinative <b>disjunctive</b> <b>normal</b> <b>forms</b> for classical and non-classical tautologies...|$|R
40|$|Prediction of patient-centered {{outcomes}} in hospitals {{is useful for}} performance benchmarking, resource allocation, and guidance regarding active treatment and withdrawal of care. Yet, their use by clinicians {{is limited by the}} complexity of available tools and amount of data required. We propose to use <b>Disjunctive</b> <b>Normal</b> <b>Forms</b> as a novel approach to predict hospital and 90 -day mortality from instance-based patient data, comprising demographic, genetic, and physiologic information in a large cohort of patients admitted with severe community acquired pneumonia. We develop two algorithms to efficiently learn <b>Disjunctive</b> <b>Normal</b> <b>Forms,</b> which yield easy-to-interpret rules that explicitly map data to the outcome of interest. <b>Disjunctive</b> <b>Normal</b> <b>Forms</b> achieve higher prediction performance quality compared to a set of state-of-the-art machine learning models, and unveils insights unavailable with standard methods. <b>Disjunctive</b> <b>Normal</b> <b>Forms</b> constitute an intuitive set of prediction rules that could be easily implemented to predict outcomes and guide criteria-based clinical decision making and clinical trial execution, and thus of greater practical usefulness than currently available prediction tools. The Java implementation of the tool JavaDNF will be publicly available. © 2014 Wu et al...|$|R
50|$|The n-variable parity {{function}} and its negation {{are the only}} Boolean functions for which all <b>disjunctive</b> <b>normal</b> <b>forms</b> have the maximal number of 2 n &minus; 1 monomials of length n and all conjunctive <b>normal</b> <b>forms</b> have the maximal number of 2 n &minus; 1 clauses of length n.|$|R
50|$|An {{arbitrary}} propositional formula {{may have}} a very complicated structure. It is often convenient to work with formulas that have simpler forms, known as normal forms. Some common normal forms include conjunctive normal form and <b>disjunctive</b> <b>normal</b> <b>form.</b> Any propositional formula {{can be reduced to}} its conjunctive or <b>disjunctive</b> <b>normal</b> <b>form.</b>|$|E
50|$|<b>Disjunctive</b> <b>Normal</b> <b>Form</b> (DNF). By {{applying}} {{this tactic}} {{the operation is}} written in <b>Disjunctive</b> <b>Normal</b> <b>Form</b> and the test class is divided in as many test classes as terms are in the resulting operation's predicate. The predicate added to each new test class is the precondition {{of one of the}} terms in the operation's predicate.|$|E
5000|$|... #Caption: Karnaugh {{map of the}} <b>disjunctive</b> <b>normal</b> <b>form</b> [...] ∨ [...] ∨ [...] ∨ ...|$|E
40|$|All {{classical}} &lambda;-terms typable with <b>disjunctive</b> <b>normal</b> <b>forms</b> {{are shown}} {{to share a}} common computational behavior: they implement a local exception handling mechanism whose exact workings depend on the tautology. Equivalent and more efficient control combinators are described through a specialized sequent calculus and shown to be correct...|$|R
40|$|AbstractThis paper {{shows that}} O(logn) -term {{monotone}} <b>disjunctive</b> <b>normal</b> <b>forms</b> (DNFs) ϕ can be dualized in incremental polynomial time, where n {{is the number}} of variables in ϕ. This improves upon the trivial result that k-term monotone DNFs can be dualized in polynomial time, where k is bounded by some constant...|$|R
40|$|We {{consider}} {{classes of}} real-valued functions of Boolean variables defined by disjunctive analogues of the submodular and supermodular functional inequalities, obtained by replacing in these inequalities addition by disjunction (max operator). The disjunctive analogues of submodular and supermodular functions are completely {{characterized by the}} syntax of their <b>disjunctive</b> <b>normal</b> <b>forms...</b>|$|R
50|$|Using this method, the {{canonical}} <b>disjunctive</b> <b>normal</b> <b>form</b> (a fully expanded <b>disjunctive</b> <b>normal</b> <b>form)</b> is computed first. Then the negations in this expression {{are replaced by}} an equivalent expression using the mod 2 sum of the variable and 1. The disjunction signs are changed to addition mod 2, the brackets are opened, and the resulting Boolean expression is simplified. This simplification results in the Zhegalkin polynomial.|$|E
5000|$|... where [...] is quantifier-free, we {{transform}} [...] into <b>disjunctive</b> <b>normal</b> <b>form,</b> and use {{the fact}} that is equivalent to ...|$|E
50|$|A formula in {{negation}} {{normal form}} can be put into the stronger conjunctive normal form or <b>disjunctive</b> <b>normal</b> <b>form</b> by applying distributivity.|$|E
40|$|A pseudo-Boolean {{function}} (pBf) is {{a mapping}} from { 0, 1 }^n {{to the real}} numbers. It is known that pseudo-Boolean functions have polynomial representations, and it was recently shown that they also have <b>disjunctive</b> <b>normal</b> <b>forms</b> (DNFs). In this paper we relate the DNF syntax of the classes of monotone, quadratic and Horn pBfs to their characteristic inequalities...|$|R
40|$|We give results {{about the}} learnability and {{required}} complexity of logical formulae to solve classi cation problems. These results are obtained by linking rst order logic with kernel machines. In particular {{we show that}} decision trees and <b>disjunctive</b> <b>normal</b> <b>forms</b> (DNF) can be represented by {{the help of a}} special kernel, linking regularised risk to separation margin. Subsequentl...|$|R
40|$|Abstract|The {{design of}} {{self-testing}} synchronous automaton networks in {{a base of}} programm-able logical matrices is studied. Self-testability of the network component is ensured by encod-ing the automaton internal states by equilibrium codes and elongating the input state codes. Therefore, the microprogram description of {{the operation of the}} component is transformed into a positive monotonic system of <b>disjunctive</b> <b>normal</b> <b>forms,</b> i. e., design specication for the component. Precisely monotonic <b>disjunctive</b> <b>normal</b> <b>forms</b> ensure the monotonic generation of solitary constant faults in programmable logical matrices and input poles of the automaton component at the component outputs and steady propagation of the aftereects of a faults from its emergence point in some component up to the network outputs. Therefore, testers can be used only for external components, whose outputs are the network outputs, and only the output of these components can be observed without regard for their internal states. 1...|$|R
5000|$|Equivalently, Q can {{be given}} in a <b>disjunctive</b> <b>normal</b> <b>form,</b> too. An {{operation}} called retrieval, consisting of two steps, is defined as follows: ...|$|E
50|$|The graph {{can always}} be rearranged so {{there is only one}} node between any input and any output. See conjunctive normal form and <b>disjunctive</b> <b>normal</b> <b>form.</b>|$|E
5000|$|If all clauses, when {{converted}} to <b>disjunctive</b> <b>normal</b> <b>form,</b> have two terms, one consisting of all positive (unnegated) {{variables and the}} other all negated variables, it is in PO.|$|E
40|$|We {{show that}} the duality {{of a pair of}} {{monotone}} Boolean functions in <b>disjunctive</b> <b>normal</b> <b>forms</b> can be tested in polylogarithmic time using a quasi-polynomial number of processors. Our decomposition technique yields stronger bounds on the complexity of the problem than those currently known and also allows for generating all minimal transversals of a given hypergraph using only polynomial space...|$|R
40|$|In {{the present}} paper we {{consider}} symmetric Boolean functions with special property. We study properties of the maximal intervals of these functions. Later we show characteristics of corresponding interval graphs and simplified interval graphs. Specifically we prove, that these two graphs are isomorphic for symmetric Boolean function. Then we obtain the vertex degree of these graphs. We discuss also <b>disjunctive</b> <b>normal</b> <b>forms...</b>|$|R
40|$|Orthogonal {{forms of}} {{positive}} Boolean functions {{play an important}} role in reliability theory, since the probability that they take value 1 can be easily computed. However, few classes of <b>disjunctive</b> <b>normal</b> <b>forms</b> are known for which orthogonalization can be e#ciently performed. An interesting class with this property is the class of shellable <b>disjunctive</b> <b>normal</b> <b>forms</b> (DNFs). In this paper, we present some new results about shellability. We establish that every positive Boolean function can be represented by a shellable DNF, we propose a polynomial procedure to compute the dual of a shellable DNF, and we prove that testing the so-called lexico-exchange (LE) property (a strengthening of shellability) is NP-complete. Ke words. Boolean functions, orthogonal DNFs, dualization, shellability, reliability AMS sub je classifications. Primary, 90 B 25; Secondary, 05 C 65, 68 R 05 PII. S 089548019732180 X 1. Introduction. A classicalprobic of Boolean theory is to derive an orthogonal form, or disjoint pr [...] ...|$|R
50|$|The first {{example is}} also in conjunctive normal form and the last two are in both conjunctive normal form and <b>disjunctive</b> <b>normal</b> <b>form,</b> but the second example is in neither.|$|E
50|$|<b>Disjunctive</b> <b>Normal</b> <b>Form</b> (DNF). It is {{the only}} testing tactic applied by default (regardless of whether the user has added or not other testing tactics) {{and the first one}} to be applied.|$|E
5000|$|... #Caption: Karnaugh {{map of the}} <b>disjunctive</b> <b>normal</b> <b>form</b> [...] ∨ [...] ∨ [...] ∨ [...] Despite the {{different}} grouping, the same fields contain a [...] "1" [...] {{as in the previous}} map.|$|E
40|$|In {{this paper}} we {{establish}} some bounds on {{the complexity of}} <b>disjunctive</b> <b>normal</b> <b>forms</b> of boolean function from narrow subclasses (e. g. functions takes value 0 in {{a limited number of}} points). The bounds are obtained by reduction the initial problem to a simple set covering problem. The nature of the complexity bounds provided is tightly connected with Shannon effect and semi-effect for this classes. Comment: 8 pages, in Russia...|$|R
50|$|ANF is a <b>normal</b> <b>form,</b> {{which means}} that two {{equivalent}} formulas will convert to the same ANF, easily showing whether two formulas are equivalent for automated theorem proving. Unlike other <b>normal</b> <b>forms,</b> it can be represented as a simple list of lists of variable names. Conjunctive and <b>disjunctive</b> <b>normal</b> <b>forms</b> also require recording whether each variable is negated or not. Negation <b>normal</b> <b>form</b> is unsuitable for that purpose, since it doesn't use equality as its equivalence relation: a &or; &not;a isn't reduced {{to the same thing}} as 1, even though they're equal.|$|R
40|$|Within a {{classical}} call-by-name λ-calculus, we prove, using Krivine’s realizability, that all terms typable with <b>disjunctive</b> <b>normal</b> <b>forms</b> (disjunctions of conjunctions of literals) {{share a common}} computational behaviour: they implement a multi-exception handling mechanism whose exact geometry depends on the tautology. By using dynamic binding, {{we are able to}} define equivalent and more efficient primitive control combinators, which are neatly described through a specialized sequent calculus, and are correct {{in the sense that they}} realize the intended associated tautology. 1...|$|R
5000|$|The third {{formula is}} in {{conjunctive normal form}} {{because it can be}} seen as the {{conjunction}} of True and the clause (...) [...]Incidentally, the last two formulas are also in <b>disjunctive</b> <b>normal</b> <b>form.</b>|$|E
50|$|Theorem proving {{has been}} {{originally}} used for automated proving of logical formulas. For model-based testing approaches {{the system is}} modeled {{by a set of}} logical expressions (predicates) specifying the system's behavior. For selecting test cases the model is partitioned into equivalence classes over the valid interpretation of the set of the logical expressions describing the system under development. Each class is representing a certain system behavior and can therefore serve as a test case. The simplest partitioning is done by the <b>disjunctive</b> <b>normal</b> <b>form</b> approach. The logical expressions describing the system's behavior are transformed into the <b>disjunctive</b> <b>normal</b> <b>form.</b>|$|E
50|$|Any {{particular}} Boolean function can {{be represented}} by one and only one full <b>disjunctive</b> <b>normal</b> <b>form,</b> one of the canonical forms. In contrast, two different plain disjunctive normal forms may denote the same Boolean function, see pictures.|$|E
40|$|AbstractWe {{consider}} {{classes of}} real-valued functions of Boolean variables defined by disjunctive analogues of the submodular and supermodular functional inequalities, obtained by replacing in these inequalities addition by disjunction (max operator). The disjunctive analogues of submodular and supermodular functions are completely {{characterized by the}} syntax of their <b>disjunctive</b> <b>normal</b> <b>forms.</b> Classes of functions possessing combinations of these properties are also examined. A disjunctive representation theory based {{on one of these}} combination classes exhibits syntactic and algorithmic analogies with classical DNF theory...|$|R
40|$|We {{show that}} Boolean {{functions}} expressible as monotone <b>disjunctive</b> <b>normal</b> <b>forms</b> are PAC-evolvable under a uniform distribution on the Boolean cube if the hypothesis size {{is allowed to}} remain fixed. We further show that this result is insufficient to prove the PAC-learnability of monotone Boolean functions, thereby demonstrating a counter-example to a recent claim to the contrary. We further discuss scenarios wherein evolvability and learnability will coincide as well as scenarios under which they differ. The implications of the latter case on the prospects of learning in complex hypothesis spaces is briefly examined. ...|$|R
40|$|Logic Petri nets (LPN) can {{describe}} and analyze batch processing function and passing value indeterminacy in cooperative systems and its practical applications are shown with some nontrivial examples. This study {{focuses on the}} analysis of the modeling power of LPNs and the equivalency between LPNs and Petri nets with inhibitor arcs (IPN). The equivalency is proved formally and a constructing algorithm of equivalent IPNs from LPNs is proposed based on the <b>disjunctive</b> <b>normal</b> <b>forms</b> of logic input/output expressions. Moreover, the size of an LPN model is smaller than that of the equivalent IPN model...|$|R
