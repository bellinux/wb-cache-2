1062|10000|Public
5|$|Package {{management}} operations can {{be performed}} with different tools available on Debian, from the lowest level command dpkg to graphical <b>front-ends</b> like Synaptic. The recommended standard for administering packages on a Debian system is the apt toolset.|$|E
25|$|Octave {{comes with}} an {{official}} graphical user interface (GUI) and a integrated development environment (IDE) based on Qt. It is available since Octave 3.8, and has become the default interface (over the command line interface) {{with the release of}} Octave 4.0. Several 3rd-party graphical <b>front-ends</b> have been developed.|$|E
25|$|ODBC {{remains largely}} {{universal}} today, with drivers available for most platforms and most databases. It {{is not uncommon}} to find ODBC drivers for database engines that are meant to be embedded, like SQLite, as a way to allow existing tools to act as <b>front-ends</b> to these engines for testing and debugging.|$|E
5000|$|<b>Front-end</b> Code Standards: A list of best {{practices}} for <b>front-end</b> developers.|$|R
30|$|Because the <b>front-end</b> {{measurement}} module {{is installed}} on the user’s virtual machine, the user has full control over the entire virtual machine, thus ensuring that {{the integrity of the}} <b>front-end</b> measurement module is the <b>front-end</b> measurement basis for security. The integrity assurance protocol of <b>front-end</b> measurement module effectively ensures the integrity of the <b>front-end</b> measurement module. In the protocol, the security key and random numbers are generated by TPM of entity server and confused commands are mixed with normal commands.|$|R
5000|$|<b>Front-end</b> load or {{sales charge}}. A <b>front-end</b> load or sales charge is a {{commission}} paid to a broker by {{a mutual fund}} when shares are purchased. It is expressed {{as a percentage of}} the total amount invested or the [...] "public offering price", which equals the net asset value plus the <b>front-end</b> load per share. The <b>front-end</b> load often declines as the amount invested increases, through breakpoints. The <b>front-end</b> load is paid by the investor; it is deducted from the amount invested.|$|R
25|$|There are depletion-mode MOSFET devices, {{which are}} less {{commonly}} used {{than the standard}} enhancement-mode devices already described. These are MOSFET devices that are doped so that a channel exists even with zero voltage from gate to source. To control the channel, a negative voltage {{is applied to the}} gate (for an n-channel device), depleting the channel, which reduces the current flow through the device. In essence, the depletion-mode device is equivalent to a normally closed (on) switch, while the enhancement-mode device is equivalent to a normally open (off) switch. Due to their low noise figure in the RF region, and better gain, these devices are often preferred to bipolars in RF <b>front-ends</b> such as in TV sets. Depletion-mode MOSFET families include BF960 by Siemens and Telefunken, and the BF980 in the 1980s by Philips (later to become NXP Semiconductors), whose derivatives are still used in AGC and RF mixer <b>front-ends.</b>|$|E
25|$|With {{the rise}} of the World Wide Web (WWW), web <b>front-ends</b> (web2news) have become more common. Web front ends have lowered the {{technical}} entry barrier requirements to that of one application and no Usenet NNTP server account. There are numerous websites now offering web based gateways to Usenet groups, although some people have begun filtering messages made by some of the web interfaces for one reason or another. Google Groups is one such web based front end and some web browsers can access Google Groups via news: protocol links directly.|$|E
25|$|Besides {{externally}} visible components, such as X window managers, a non-obvious {{but quite}} central role {{is played by}} the programs hosted by freedesktop.org, such as D-Bus or PulseAudio; both major desktop environments (GNOME and KDE) include them, each offering graphical <b>front-ends</b> written using the corresponding toolkit (GTK+ or Qt). A display server is another component, which {{for the longest time}} has been communicating in the X11 display server protocol with its clients; prominent software talking X11 includes the X.Org Server and Xlib. Frustration over the cumbersome X11 core protocol, and especially over its numerous extensions, has {{led to the creation of}} a new display server protocol, Wayland.|$|E
5000|$|Supports {{testing of}} <b>front-end</b> code through a <b>front-end</b> {{extension}} of Jasmine called Jasmine-jQuery.|$|R
40|$|This paper {{describes}} a novel noise-robust {{automatic speech recognition}} (ASR) <b>front-end</b> that employs a combination of Mel-filterbank output compensation and cumulative distribution mapping of cepstral coefficients with truncated Gaussian distribution. Recognition experiments on the Aurora II connected digits database reveal that the proposed <b>front-end</b> achieves an average digit recognition accuracy of 84. 92 % for a model set trained from clean speech data. Compared with the ETSI standard Mel-cepstral <b>front-end,</b> the proposed <b>front-end</b> is found to obtain a relative error rate reduction of around 61 %. Moreover, the proposed <b>front-end</b> can provide comparable recognition accuracy with the ETSI advanced <b>front-end,</b> at {{less than half the}} computation load...|$|R
40|$|Low-noise, ultra-wideband (UWB) {{wireless}} receiver <b>front-end</b> circuits {{were presented in}} this study. A two-stage common-source low-noise amplifier with wideband input impedance matching network, an active-balun and a double-balanced down-conversion mixer were adopted in the UWB {{wireless receiver}} <b>front-end.</b> The proposed wireless receiver <b>front-end</b> circuits were implemented in 0. 18 μm radio-frequency-CMOS process. The maximum down-conversion power gain of the <b>front-end</b> is 25. 8 dB; minimum single-sideband noise figure of the <b>front-end</b> is 4. 9 dB over complete UWB band ranging from 3. 1 to 10. 6 GHz. Power consumption including buffers is 39. 2 mW...|$|R
25|$|Btrieve was modularized {{starting}} with version 6.15 {{and became one}} of two database <b>front-ends</b> that plugged into a standard software interface called the Micro-Kernel Database Engine. The Btrieve front-end supported the Btrieve API and the other front-end was called Scalable SQL, a relational database product based upon the MKDE that used its own variety of Structured Query Language, otherwise known as SQL. After these versions were released (Btrieve 6.15 and ScalableSQL v4) the company was renamed to Pervasive Software prior to their IPO. Shortly thereafter the Btrieve and ScalableSQL products were combined into the products now known and sold as Pervasive.SQL or PSQL. Btrieve continued for a few years while ScalableSQL was quickly dropped. Customers were encouraged to upgrade to Pervasive.SQL which supported both SQL and Btrieve applications.|$|E
500|$|Maloratsky, Leo G., Integrated Microwave <b>Front-ends</b> with Avionics Applications, Artech House, 2012 [...]|$|E
500|$|GDebi is an APT tool {{which can}} be used in {{command-line}} and on the GUI. GDebi can install a local [...]deb file via the command line like the dpkg command, but with access to repositories to resolve dependencies. Other graphical <b>front-ends</b> for APT include Software Center, Synaptic and Apper.|$|E
40|$|This paper {{presents}} the results of an empirical study examining the role of process formalization in the early phases of the innovation process - the so-called fuzzy <b>front-end</b> (FFE). First the pros and cons as well as the possible elements of a standardized <b>front-end</b> process will be discussed. Second success measures for the <b>front-end</b> will be developed as well as the hypothetical relation between <b>front-end</b> process and success. This conceptual model has been tested in an empirical study which supports the hypothesis that a clearly structured process promotes <b>front-end</b> success...|$|R
30|$|Two {{types of}} {{configurations}} are required: <b>front-end</b> and back-end. The <b>front-end</b> {{sets up the}} variables necessary for each module to function while the back-end configuration is responsible for allocating resources, balancing the load of workers, scheduling activities, and communicating between modules while providing feedback to the <b>front-end.</b>|$|R
40|$|The {{requirements}} on <b>front-end</b> electronics for the readout of photon detectors are discussed. Sources of {{noise in the}} <b>front-end</b> are discussed. Technology choices for given applications are considered. Implementations of analogue <b>front-end</b> chips are described. Applications for photon detectors to be use in Nuclear Medicine Imaging are presented. Results from prototype assemblies of <b>front-end</b> chips with silicon pad sensors used in a Compton camera and in a Hybrid Photon Detector are presented...|$|R
500|$|Weather {{conditions}} {{for the start of}} the race were sunny but partly cloudy with an air temperature between [...] and a track temperature ranging from [...] Approximately 73,628 people attended the event. The race started at 1:04p.m. de Ferran maintained his pole position advantage heading into the first turn. Kanaan was passed by Franchitti for fourth place on the backstretch. Entering the third corner, Andretti made contact with the side of Dixon which meant Andretti narrowly avoided hitting the outside wall. Fernández and Tracy made contact in turn five. The first caution of the race was prompted on the second lap when Andretti stalled and safety officials had to restart his car. Andretti chose to make a pit stop for fuel following a decision made by his team manager Kim Green. At the lap four restart, de Ferran maintained his lead over teammate Castroneves. On the following lap, Moreno spun in turn five and stalled in the centre of the track, triggering the second caution. Dixon spun to avoid hitting Moreno while da Matta and Vasser both stopped and made light contact with the <b>front-ends</b> of their cars. Vasser retired from the race because of the collision. de Ferran maintained his lead at the lap eight restart.|$|E
50|$|The xine project offers {{graphical}} <b>front-ends</b> for xine, {{including one}} based on Xlib and another on GTK+, along with a browser plugin. Other <b>front-ends</b> for xine are available from other projects.|$|E
5000|$|Analog optical {{interconnection}} technology for focal-plane array <b>front-ends.</b>|$|E
50|$|<b>Front-End</b> Engineering (FEE), or <b>Front-End</b> Engineering Design (FEED), is an {{engineering}} design approach {{used to control}} project expenses and thoroughly plan a project before a fix bid quote is submitted. It may also {{be referred to as}} Pre-project planning (PPP), <b>front-end</b> loading (FEL), feasibility analysis, or early project planning.|$|R
40|$|Abstract — A novel, broadband, inductorless, multi-standard {{receiver}} <b>front-end</b> {{in a digital}} CMOS 90 nm Low Power (LP) process is described. The <b>front-end</b> operates in the frequency range from 0. 8 GHz up to 1. 7 GHz. It achieves a voltage gain of 24 dB and a noise figure of 5. 5 dB. The measured IIP 3 and IIP 2 of the receiver are – 13 dBm and + 30 dBm, respectively. The input return loss is better than – 10 dB in the frequency band from 0. 8 GHz up to 1. 7 GHz. The <b>front-end</b> consumes 26 mA from 1. 2 V power supply and occupies a chip area of 1 mm 2. Index Terms — Multi-standard receiver, inductorless receiver <b>front-end,</b> low voltage receiver <b>front-end,</b> broadband receiver <b>front-end,</b> software-defined radio. I...|$|R
40|$|The diploma {{thesis on}} Development of <b>Front-end</b> Applications {{focuses on the}} design of {{computerization}} of enterprise processes covered by a unified <b>front-end</b> application. Exploratory research was used to suggest working methods to solve technological growth of the enterprise and how to evaluate business need of a <b>front-end</b> application. Later chapters present basic summary of development methodology used for automation of business processes. The diploma thesis innovatively proposes a role of a <b>front-end</b> specialist who does not need to create a program code and has closer relation to business departments. There are recommend analytical standards and development tools for automation of business processes as well as <b>front-end</b> implementation. Finally the work attaches a model example demonstrating relative simplicity and practical realization of new techniques for <b>front-end</b> application development. Powered by TCPDF (www. tcpdf. org...|$|R
50|$|The company's product {{portfolio}} included ADCs, DACs, PLLs and Synthesizers, Baseband Transmit and Receive Ports, RF <b>front-ends,</b> Analog and Digital Filters, Oversampling Modulators and Codec Analog <b>Front-Ends,</b> DC-DC Converters, Regulators, Digital Transceivers, Line Drivers, and other Physical Interfaces. Chipidea's application drivers were in Communications, Multimedia, and Consumer Electronics Applications.|$|E
50|$|Although {{the basic}} GnuPG program has a {{command-line}} interface, there exist various <b>front-ends</b> that provide {{it with a}} graphical user interface. For example, GnuPG encryption support has been integrated into KMail and Evolution, the graphical email clients found in KDE and GNOME, the most popular Linux desktops. There are also graphical GnuPG <b>front-ends,</b> for example Seahorse for GNOME and KGPG for KDE. For the macOS, the MacGPG project provides a number of Aqua <b>front-ends</b> for OS integration of encryption and key management as well as GnuPG installations via Installer packages.|$|E
5000|$|Open source <b>front-ends</b> {{and tools}} for {{administering}} PostgreSQL include: ...|$|E
40|$|The <b>front-end</b> {{phase is}} in the {{literature}} generally regarded as the most critical phase of the innovation process. <b>Front-end</b> management has a strategic nature since important decisions related e. g. to target markets and the main functionalities of products are done in the <b>front-end</b> phase. This article examines how the integration of strategic and operative level <b>front-end</b> activities is perceived by top managers in the product innovation context. The findings indicate that companies exploit different strategy-making processes, and that each strategy-making mode is prone to particular integration challenges. The {{results show that the}} effectiveness of integration of strategic and operative level <b>front-end</b> activities is dependent on the level of concreteness of the defined business strategies, the amount of business-minded decision making, and the balance between control and creativity. <b>Front-end</b> of innovation, innovation management, strategy implementation...|$|R
50|$|A single {{controller}} may {{use different}} protocols for back-end and for <b>front-end</b> communication. Many enterprise controllers use FC on <b>front-end</b> and SATA on back-end.|$|R
40|$|For {{automatic}} {{speech recognition}} (ASR) systems, robustness {{in the presence of}} various types and levels of environmental noise remains an important issue, despite the various advances of recent years. This paper describes a new noise-robust ASR <b>front-end</b> employing a combination of variable frame rate processing based on the sample-by-sample delta energy parameter, Melfilterbank output compensation and cumulative distribution mapping. Recognition experiments on the Aurora II connected digits database reveal that the proposed <b>front-end</b> achieves an average digit recognition accuracy of 84. 3 % for a model set trained from clean speech data. Compared with the ETSI standard Mel-cepstral <b>front-end,</b> the proposed <b>front-end</b> is found to obtain a relative error rate reduction of around 60 %. Moreover, the proposed <b>front-end</b> can provide almost comparable recognition accuracy with the ETSI advanced <b>front-end,</b> at roughly half the computational complexity. 1...|$|R
5000|$|... #Subtitle level 3: Graphical <b>front-ends</b> {{and command}} line {{interfaces}} ...|$|E
50|$|Recent {{versions}} of WinDbg {{have been and}} are being distributed {{as part of the}} free Debugging Tools for Windows suite, which shares a common debugging back-end between WinDbg and command line debugger <b>front-ends</b> like KD, CDB, and NTSD. Most commands can be used as is with all the included debugger <b>front-ends.</b>|$|E
50|$|Clean {{separation}} of <b>front-ends,</b> like JAX-WS, {{from the core}} code.|$|E
40|$|DESIGN AND IMPLEMENTATION OF THE <b>FRONT-END</b> FOR SDL' 92 COMPILER Doyuran, Ahmet Uygar M. S., Department of Electrical and Electronics Engineering Supervisor: Prof. Dr. Kemal Inan Co-Supervisor: Dr. Vladimir Levin May 1996, 144 pages In {{order to}} verify or {{simulate}} SDL specifications, the specifications should be translated to equivalent programs in various programming languages. For this purpose, a common <b>front-end</b> module for SDL' 92 compiler is constructed. The <b>front-end</b> takes an SDL specification as input and produces its equivalent treebased intermediate representation which {{is independent of}} the target language and is suitable for subsequent target code generation. The details of design {{and implementation of the}} <b>front-end</b> is discussed. Each phase of the <b>front-end</b> is described completely. The structure of the intermediate representation is given. The methods used to test the implemented modules are explained. Keywords: compiler, <b>front-end,</b> formal specification, software engineering, com [...] ...|$|R
40|$|A {{cloud server}} {{connection}} {{consists of an}} occurrence of shared database architecture server {{and at least one}} <b>front-end</b> network server. When users request data from cloud server, the cloud application, running on the <b>front-end</b> network server, retrieves all the relevant data from backend to handle the manipulator request. Although this guarantees that all manipulators always see and find out the most up-to-date data, he has the weakness of needful a sub-optimal quantity of statistics traffic betweencloud server and the <b>front-end</b> network servers and consequently hypothetically sub-optimal performance and responsiveness to user requests, in addition to imperfect scalability of the hardware to achieve higher throughput heights. The cloud server uses caches built information retrieval and caches run on the <b>front-end</b> network servers of your cloud server farm. Every cache upholds reproductions of data nearby on the <b>front-end</b> network server so that cloud manipulator supplies can be checked by using the cached data and wherever applicable, circumventing unnecessary circulation amid backend server and the <b>front-end</b> network servers and CPU data management on the <b>front-end</b> network server, thus refining performance and scalability...|$|R
50|$|From the start, Newi was {{targeted}} at both <b>front-end</b> GUI systems and back-end server systems. The <b>front-end</b> version had a GUI run-time framework implemented as components. The component concept fitted {{very well with}} the object-based UI provided. Hence a designer/programmer used the same technical code structure to implement both <b>front-end</b> and back-end business function.|$|R
