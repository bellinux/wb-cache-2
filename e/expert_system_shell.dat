428|10000|Public
5000|$|ART (Automated Reasoning Tool), an <b>expert</b> <b>system</b> <b>shell</b> from Inference Corporation ...|$|E
5000|$|... "KEE" [...] (Knowledge Engineering Environment), an <b>expert</b> <b>system</b> <b>shell,</b> from IntelliCorp ...|$|E
5000|$|Pujari A.K.:The KDDEN <b>Expert</b> <b>System</b> <b>Shell,</b> Proc. Of {{the seminar}} on AI and Expert Systems, {{conducted}} by M/s M. N. Dastur & Co. Ltd., 15-18 November 1989, Calcutta.|$|E
40|$|Abstract: Neural {{networks}} {{are useful for}} two dimensional picture processing ^ while induction type <b>expert</b> <b>system</b> <b>shells</b> are good at inducing rules from a large set of examples. This paper examines the differences and similarities of <b>expert</b> <b>systems</b> built with a neural network and those built with traditional <b>expert</b> <b>system</b> <b>shells.</b> Attempts are made to compare and contrast the behavior of each with that of humans. ...|$|R
50|$|Flex is {{implemented}} in, and has access to, Prolog. As opposed to most <b>expert</b> <b>system</b> <b>shells,</b> {{which tend to}} be constrained, Flex is an open toolkit.|$|R
50|$|Research on <b>expert</b> <b>systems</b> {{was also}} active in France. While in the US the focus {{tended to be}} on {{rule-based}} systems, first on systems hard coded on top of LISP programming environments and then on <b>expert</b> <b>system</b> <b>shells</b> developed by vendors such as Intellicorp, in France research focused more on systems developed in Prolog. The advantage of <b>expert</b> <b>system</b> <b>shells</b> {{was that they were}} somewhat easier for nonprogrammers to use. The advantage of Prolog environments was that they weren't focused only on if-then rules; Prolog environments provided a much fuller realization of a complete First Order Logic environment.|$|R
50|$|The Lisa {{project is}} a {{platform}} {{for the development of}} Lisp-based Intelligent Software Agents. Lisa is a production-rule system implemented in the Common Lisp Object System (CLOS), and is heavily influenced by CLIPS and the Java <b>Expert</b> <b>System</b> <b>Shell</b> (JESS).|$|E
50|$|Jess is a {{rule engine}} for the Java {{platform}} {{that was developed}} by Ernest Friedman-Hill of Sandia National Labs. It is a superset of the CLIPS programming language. It was first written in late 1995. The language provides rule-based programming for the automation of an expert system, and is frequently termed as an <b>expert</b> <b>system</b> <b>shell.</b> In recent years, intelligent agent systems have also developed, which depend on a similar capability.|$|E
5000|$|... eGanges (electronic Glossed {{adversarial}} nested graphical expert system) is an <b>expert</b> <b>system</b> <b>shell,</b> {{mainly for}} {{the domains of}} law, quality control management, and education. It represents and processes systems of mixed hypothetical and categorical syllogisms, no matter how large and complex. The hypothetical premises or rule systems are represented in River graphics that are tributary structures like Ishikawa diagrams that may be nested to any depth required by the expertise.|$|E
40|$|I n {{the fall}} of 1985, 25 {{students}} and 10 auditors (including three faculty members) attended our new course on expert systems-an introductory engineering course aimed at teaching useful technical skills and applying those skills to real problems. The course had three objectives: to share understanding, to impart techniques, and to apply these in practice. We wanted our students (1) To understand the nature, limitations, and suitable applications of expert systems; (2) To effectively use <b>expert</b> <b>system</b> <b>shells</b> (software packages allowing rapid prototyping of <b>expert</b> <b>systems,</b> <b>shells</b> can be considered special-purpose high-level languages designed to help write if-then production rules); and (3) To produce a small <b>expert</b> <b>system...</b>|$|R
40|$|The {{results of}} {{applications}} research directed at finding an improved method of storing and accessing information are presented. Twelve microcomputer-based <b>expert</b> <b>systems</b> <b>shells</b> and five laser-optical formats have been studied, {{and the general}} and specific methods of interfacing these technologies are being tested in prototype <b>systems.</b> <b>Shell</b> features and interfacing capabilities are discussed, and results {{from the study of}} five laser-optical formats are recounted including the video laser, compact, and WORM disks, and laser cards and film. Interfacing, including laser disk device driver interfacing, is discussed and it is pointed out that in order to control the laser device from within the <b>expert</b> <b>systems</b> application, the <b>expert</b> <b>systems</b> <b>shell</b> must be able to access the device driver software. Potential integrated applications are investigated and an initial list is provided including consumer services, travel, law enforcement, human resources, marketing, and education and training...|$|R
40|$|Building {{embedded}} {{languages in}} Prolog is considered, with special {{attention given to}} <b>expert</b> <b>system</b> <b>shells.</b> The paradigm of metaprogramming, of which building embedded languages is an example, is discussed. Interpreters for embedded languages are reviewed with emphasis on metainterpreters. Two applications, explanation and uncertainty reasoning, are presented, and the techniques {{that were used in}} their construction are discussed...|$|R
50|$|The few {{remaining}} <b>expert</b> <b>system</b> <b>shell</b> companies were eventually forced to downsize {{and search for}} new markets and software paradigms, like case based reasoning or universal database access. The maturation of Common Lisp saved many systems such as ICAD which found application in knowledge-based engineering. Other systems, such as Intellicorp's KEE, moved from Lisp to a C++ (variant) on the PC and helped establish object-oriented technology (including providing major support for the development of UML).|$|E
5000|$|DragonLord's Sequoia Consulting {{created the}} {{software}} for a humanoid robot for NASA JPLin 2006. [...] The robot {{was one of}} the first humanoid robots to integrate speech recognition of commands and speech generation of responses. It used a real-time <b>expert</b> <b>system</b> <b>shell</b> to plan and sequence actions.It used primitive model-based stereo vision to locate and track objects in its environment.It was able to turn, walk over to a spar, squat down, bend over,and pick the spar up, using an arm with no wrist joints.|$|E
50|$|Neuron Data is an American {{software}} development companythat was founded June 1985 by Alain Rappaport, Patrick Perez and Jean-Marie Chauvet. Their first product, Nexpert, was a C-based <b>expert</b> <b>system</b> <b>shell</b> for the Macintosh in 1985. The product was ported to the PC, {{one of the}} first programs to run under the then nascent Windows. Under the name Nexpert Object, it was ported to VAX VMS and all flavors of UNIX workstations, as well as on IBM mainframes. In 1991, Neuron Data released a GUI building tool named Open Interface. The Open Interface Elements development tool won the 1995 Editor's Choice Award from X Journal for the Best Cross-Platform Toolkit.|$|E
40|$|The {{representation}} languages {{found in}} many <b>expert</b> <b>system</b> <b>shells</b> are hybrids composed of a frame language and a rule language. Unfortunately, the frame and rule components in these systems are not well integrated, {{and as a result}} they miss important classes of inferences. In place of frames, LOOM combines a description language with a rule language, and uses an inference engine called a classifier to achieve a successful integration of framelike knowledge and rule-like knowledge. LOOM's ability to reason with descriptions enables us to implement a broader range of capabilities than those found in the current generation of <b>expert</b> <b>system</b> <b>shells.</b> For example, LOOM is able to detect inconsistencies in a rule base, to match against partially-specified (not fully-grounded) instances, and it implements a generalization of the traditional (e. g., CLOS-like) conception of object-oriented method dispatching. AI Topic: Knowledge Representation, Reasoning Status: KR system in use by more than 15 [...] ...|$|R
40|$|The {{purpose of}} this paper is to analyze the use of {{multiple}} criterion decision making (MCDM) in accounting <b>expert</b> <b>systems</b> (AES). Focusing on the MCDM nature of <b>expert</b> <b>system</b> evaluation functions leads towards a partial taxonomy of AES and a further understanding of "intelligence " in AES. The focus on the MCDM nature of the evaluation functions also serves to highlight the limitations of some of the <b>expert</b> <b>system</b> <b>shells</b> that are inherently designed for single criteria decision making...|$|R
40|$|IKAS (Intelligent Knowledge Acquisition <b>System)</b> is an <b>expert</b> <b>system</b> {{building}} <b>shell</b> with a machine-assisted concept checker {{for easy}} integrated rule-entry. Unlike most <b>expert</b> <b>system</b> <b>shells</b> currently available, IKAS not only performs rule syntax checking, but also maintains semantic {{integration of the}} knowledge base by using a Concept Base. The Concept Base is incrementally grown during the cycle of <b>expert</b> <b>system</b> application development and safeguards the whole domain from conceptually conflicting rules by finding possible inconsistencies or duplications of concepts and giving recommendations for possible solutions. Also automatic generalized concept forming using the Inductive Extension Generalization method gives IKAS a capability to discover new inductive hypotheses from the existing knowledge base. IKAS can be an advancement for the current <b>expert</b> <b>system</b> technology in terms of complex knowledge representation and utilization...|$|R
50|$|Ease of {{maintenance}} {{is the most}} obvious benefit. This was achieved in two ways. First, by removing the need to write conventional code, many of the normal problems that {{can be caused by}} even small changes to a system could be avoided with expert systems. Essentially, the logical flow of the program (at least at the highest level) was simply a given for the system, simply invoke the inference engine. This also was a reason for the second benefit: rapid prototyping. With an <b>expert</b> <b>system</b> <b>shell</b> it was possible to enter a few rules and have a prototype developed in days rather than the months or year typically associated with complex IT projects.|$|E
50|$|FuzzyCLIPS is a {{fuzzy logic}} {{extension}} of the CLIPS (C Language Integrated Production System) <b>expert</b> <b>system</b> <b>shell</b> from NASA. It {{was developed by the}} Integrated Reasoning Group of the Institute for Information Technology of the National Research Council of Canada and has been widely distributed for a number of years. It enhances CLIPS by providing a fuzzy reasoning capability that is fully integrated with CLIPS facts and inference engine allowing one to represent and manipulate fuzzy facts and rules. FuzzyCLIPS can deal with exact, fuzzy (or inexact), and combined reasoning, allowing fuzzy and normal terms to be freely mixed in the rules and facts of an expert system. The system uses two basic inexact concepts, fuzziness and uncertainty. It has provided a useful environment for developing fuzzy applications but it does require significant effort to update and maintain as new versions of CLIPS are released.|$|E
40|$|The Platform Management System (PMS) Resource Envelope Scheduling System (PRESS) {{expert system}} {{prototype}} developed for space station scheduling is described. The purpose {{of developing the}} prototype was too investigate the resource envelope concept in a practical scheduling application, using a commercially available <b>expert</b> <b>system</b> <b>shell.</b> PRESS is being developed on an IBM PC/AT using Teknowledge, Inc. 's M. 1 <b>expert</b> <b>system</b> <b>shell...</b>|$|E
40|$|The author {{provides}} an updated review of <b>expert</b> <b>systems</b> and languages available to so-cial scientists, emphasizing new programs and new implementations of well-estab-lished models. Practical recommendations {{are made for}} social scientists wishing to embark on this much-publicized but infrequently used type of research. Keywords: ex-pert systems, artificial intelligence, hypertext. This review emphasizes, primarily, new programs which are expanding the options for artificial intelligence (AI) programming in the social sci-ences, and secondarily, new implementations of well-established models for AI programming not yet reviewed in this journal. To under-stand {{the significance of these}} programs, {{it will be necessary to}} locate the new developments in the context of the earlier models. In particular, I refer the reader to the review of <b>expert</b> <b>systems</b> by Grafton and Per-maloff (1987) and to my comparative review of <b>expert</b> <b>systems</b> for Ms DOS computers (Brent, 1988). Reviewing <b>expert</b> <b>system</b> <b>shells</b> (and nonshells) and artificial intelli-gence languages for the social sciences is not just an academic exercise. While many social scientists are considering applications of these pro-grams to their work, others are already applying them to problems in po-litical science (e. g., Schrodt, in press; Garson, 1987; Cimbala, 1987) and sociology (Brent et al., in press; Brent, in press). Commercial expert sys-tems have been developed for selecting the appropriate statistic for em-pirical studies (STATISTICAL NAVIGATOR), determining sample size (EX-SAMPLE), and designing experiments (EXPERTIMENTAL DESIGN). Initially, I had expected to focus on new <b>expert</b> <b>system</b> <b>shells</b> and ar-tificial intelligence languages for the Macintosh. Some are included; several others have been announced but have not yet been released or were not available for review. In any case, many of the most important developments in <b>expert</b> <b>system</b> <b>shells</b> and AI programming are still oc...|$|R
5000|$|In <b>expert</b> <b>systems,</b> a <b>shell</b> is a {{piece of}} {{software}} that is an [...] "empty" [...] <b>expert</b> <b>system</b> without the knowledge base for any particular application.|$|R
40|$|This {{study was}} {{concerned}} with the computer automation of land evaluation. This is a broad subject with many issues to be resolved, so the study concentrated on three key problems: knowledge based programming; the integration of spatial information from remote sensing and other sources; and the inclusion of socio-economic information into the land evaluation analysis. Land evaluation and land use planning were considered {{in the context of}} overseas projects in the developing world. Knowledge based systems were found to provide significant advantages over conventional programming techniques for some aspects of the land evaluation process. Declarative languages, in particular Prolog, were ideally suited to integration of social information which changes with every situation. Rule-based <b>expert</b> <b>system</b> <b>shells</b> were also found to be suitable for this role, including knowledge acquisition at the interview stage. All the <b>expert</b> <b>system</b> <b>shells</b> examined suffered from very limited constraints to problem size, but new products now overcome this. Inductive <b>expert</b> <b>system</b> <b>shells</b> were useful as a guide to knowledge gaps and possible relationships, but the number of examples required was unrealistic for typical land use planning situations. The accuracy of classified satellite imagery was significantly enhanced by integrating spatial information on soil distribution for Thailand data. Estimates of the rice producing area were substantially improved (30 % change in area) by the addition of soil information. Image processing work on Mozambique showed that satellite remote sensing was a useful tool in stratifying vegetation cover at provincial level to identify key development areas, but its full utility could not be realised on typical planning projects, without treatment as part of a complete spatial information system...|$|R
40|$|In fault {{diagnostic}} expert systems, {{the knowledge}} can be either shallow (experience-based) or deep (function-based). This paper presents a deep-knowledge expert system for fault detection in process operations and control domain. The structure used for modelling deep-knowledge is called Goal-Tree Success Tree. An <b>expert</b> <b>system</b> <b>shell</b> has been built for applying this deep- knowledge model utilizing the logic based language PROLOG. An example, applying this deep-knowledge model and the developed <b>expert</b> <b>system</b> <b>shell,</b> is also presented...|$|E
40|$|We have {{developed}} an object-oriented <b>expert</b> <b>system</b> <b>shell</b> named Gestation Predictor. This <b>expert</b> <b>system</b> <b>shell</b> utilizes Level 5 Object v. 3. 5 for Microsoft Windows. This shell is designed for use by clinical professionals during the clinical encounter with pregnant women for preterm birth risk screening. The interactive electronic poster will offer a knowledge base mangment tool for predicting gestation in pregnant women. The goal of this project is to improve clinical outcomes for childbearing families with cost-effective expert system technology...|$|E
40|$|An {{introduction}} to knowledge based systems {{is presented to}} point out possibilities and limitations of the new software and hardware technology now beginning to be available. A pilot study {{on the use of}} an <b>expert</b> <b>system</b> <b>shell</b> (the ES/P Advisor), is briefly discussed. A part of the Swedish concrete building code was implemented in the <b>expert</b> <b>system</b> <b>shell</b> to demonstrate the use of an interactive consultation system. Ideas on how compact video-discs can be used in this type of systems are also put forwar...|$|E
40|$|Cognitive {{simulations}} are runnable {{computer programs}} for modeling human cognitive activities. Traditionally {{used to develop}} expert and learner models for intelligent tutoring systems, building simulations are also effective learning activities in psychology-related courses. Using inexpensive and easy-to-use <b>expert</b> <b>system</b> <b>shells,</b> students can develop simulations of cog-nitive processes. This article reports a case study where <b>expert</b> <b>systems</b> were used as a formalism for modeling metacognitive processes in a seminar. Building cognitive simulations engages intensive introspection, ownership, and meaning making in learners who build them...|$|R
40|$|Bibliography: pages 227 - 236. This thesis {{concentrates}} on several important issues in <b>expert</b> <b>system</b> research, namely - representation of knowledge - control of reasoning - implementation of non-monotonic logics via truth maintenance systems. There are three parts to this thesis. PART 1 covers the background {{research in the}} above mentioned topics. PART 2 discusses the WISE system {{and the way in}} which research from PART 1 was applied to the development of the WISE shell. PART 3 considers the features of other <b>expert</b> <b>system</b> <b>shells...</b>|$|R
40|$|<b>Expert</b> <b>systems</b> {{promise to}} {{revolutionize}} {{many aspects of}} library functions and services from technical processing to reference and administrative procedures. The first generation <b>expert</b> <b>systems,</b> which are already appearing, {{have the potential for}} replacing many of the repetitive tasks which now p 1 ague many library positions. In order to cope more effectively with the advent of these changes and help give them direction, it is necessary to understand what functions will be affected and how librarians, especially those without strong programming backgrounds, can best utilize <b>expert</b> <b>systems.</b> The use of <b>expert</b> <b>system</b> <b>shells</b> will be discussed in conjunction with demonstrations of applications developed within the Northwestern Science and Engineering Library...|$|R
40|$|In {{this paper}} we {{point out the}} reasons that lead us to {{distribute}} modular applications and how we distribute them. We illustrate our ideas with an example of <b>expert</b> <b>system</b> <b>shell.</b> 1 Introduction A modular system has the advantages of giving {{a clear view of}} its structure, highlighting its main functionalities and reusing them. The module autonomy is limited when we want to open complex tools, such as an <b>expert</b> <b>system</b> <b>shell,</b> to the external world. Distribution is then well adapted to answer to this need. With this architecture, the resulting parallel processing increases the system efficiency, the protocol definition clearly specifies how a component can be connected to another, and changing the version of one of the components becomes easier. Although many distribution constraints have to be managed. In the rest of this paper, we describe our smeci [1] experiment and we offer some guidelines for the design of such distributed application. 2 Smeci <b>expert</b> <b>system</b> <b>shell</b> smeci is an exper [...] ...|$|E
40|$|ABSTRACT: In {{this paper}} we {{describe}} role of expert {{systems in the}} natural resource management and present the utility of prolog based <b>expert</b> <b>system</b> <b>shell</b> ESTA (<b>Expert</b> <b>System</b> <b>shell</b> for Text Animation) {{in the development of}} such an expert system. ESTA programming is based on logic programming approach. The ESTA programme has some advantages compared to other available <b>expert</b> <b>system</b> <b>shell</b> such as the C Language Integrated Production Systems (CLIPS). It is easy to use, fast, and requires little programming experience. Expert system development for natural resource management has been explored through presenting in details development of knowledge base,using hypothetico-deductive diagnostic reasoning, for the visual image interpretation of IRS- 1 B based standard false color composite (FCC) image. The discipline of remote sensing is concerned with the collection of information related in some way to the earth’s natural resources or environment without coming into physical contact with them, through analysis of the acquired data [1]. In the modern age of computing our most of the activities is influenced directly or indirectl...|$|E
40|$|Abstract: This paper {{describes}} the prototype version of Sales Contractor, {{a computer system}} which produces standard or variable contracts {{for the sale of}} goods. Although built using an <b>expert</b> <b>system</b> <b>shell,</b> Sales Contractor operates as a decision support system, advising the user about which clauses to include in the contract, but leaving the final choice to him/her. Sales Contractor represents the first computer-based realisation of work on structuring the Law of Contract in a systematic and logical way which one of the authors has been carrying out for more than ten years. This work turned out to lend itself very easily to representation in a standard <b>expert</b> <b>system</b> <b>shell...</b>|$|E
40|$|Rule-based <b>expert</b> <b>system</b> <b>shells</b> are {{demonstrated}} {{to be useful}} in elementary design decision making. Two applications are presented which utilize the BUILD shell. The first {{is concerned with the}} selection and design of earth-retaining structures and makes use of passive graphics in descriptions. The second is concerned with the analysis and synthesis of kitchens and uses graphics to allow the user to interact with the system. Such systems are useful when the range of options is smal...|$|R
40|$|The <b>Expert</b> <b>Systems</b> Validation Associate (EVA), a {{validation}} {{system under}} {{development at the}} Lockheed Artificial Intelligence Center {{for more than a}} year, provides a wide range of validation tools to check the correctness, consistency and completeness of a knowledge-based system. A declarative meta-language (higher-order language), is used to create a generic version of EVA to validate applications written in arbitrary <b>expert</b> <b>system</b> <b>shells.</b> The architecture and functionality of EVA are presented. The functionality includes Structure Check, Logic Check, Extended Structure Check (using semantic information), Extended Logic Check, Semantic Check, Omission Check, Rule Refinement, Control Check, Test Case Generation, Error Localization, and Behavior Verification...|$|R
40|$|A minimal {{approach}} to risk assessment in reproductive toxicology involves four components: hazard identification, hazard characterization, exposure characterization, and risk characterization. In practice, risk assessment in reproductive toxicology {{has been reduced}} to arbitrary safety factors or mathematical models of the dose-response relationship. These approaches obscure biological differences across species rather than using this important and frequently accessible information. Two approaches that are formally capable of using biologically relevant information (pharmacokinetics and <b>expert</b> <b>system</b> <b>shells)</b> are explored as aids to risk assessment in reproductive toxicology...|$|R
