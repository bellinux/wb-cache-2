728|9595|Public
25|$|A bit set to 1 {{disables}} AutoRun on {{a particular}} drive. For example, if the <b>data</b> <b>value</b> is set to 0x8 (1000 binary), AutoRun is disabled on drive D.|$|E
25|$|A device may be {{the target}} of other {{transactions}} while completing one delayed transaction; it must remember the transaction type, address, byte selects and (if a write) <b>data</b> <b>value,</b> and only complete the correct transaction.|$|E
25|$|The {{simplest}} {{interpolation method}} is to locate the nearest <b>data</b> <b>value,</b> and assign the same value. In simple problems, this method {{is unlikely to be}} used, as linear interpolation (see below) is almost as easy, but in higher-dimensional multivariate interpolation, this could be a favourable choice for its speed and simplicity.|$|E
5000|$|Fields {{defining}} the <b>data</b> <b>values</b> that form messages, {{such as their}} length, codepoint and <b>data</b> <b>values.</b>|$|R
5000|$|Truncated mean or trimmed mean: the {{arithmetic}} mean of <b>data</b> <b>values</b> {{after a certain}} number or proportion of the highest and lowest <b>data</b> <b>values</b> have been discarded.|$|R
30|$|Due to {{the lack}} of normality, {{associations}} among <b>data</b> <b>values</b> were determined using nonparametric statistical techniques for single (Wilcoxon) and multiple (Kruskal–Wallis) comparisons (SAS Inc. 2013). Individual <b>data</b> <b>values</b> in the text were expressed as the mean and standard deviation.|$|R
25|$|This Registry entry {{disables}} or {{enables the}} AutoRun feature on individual drives. It is {{not associated with}} a Group Policy and does not exist by default. The <b>data</b> <b>value</b> is taken to be 0 if the entry is not present. An entry present in HKLM overrides any entry present in HKCU.|$|E
25|$|This Registry entry {{disables}} or {{enables the}} AutoRun feature on all drives {{of the type}} specified. It reflects {{the setting of the}} relevant Autoplay Group Policy. Valid data ranges from 0x00 to 0xFF in hexadecimal notation. If the entry is not present, the default <b>data</b> <b>value</b> is either 0x95 or 0x91 depending on the version of Windows used. An entry present in HKLM overrides any entry present in HKCU.|$|E
500|$|Because Null {{is not a}} <b>data</b> <b>value,</b> but {{a marker}} for an absent value, using {{mathematical}} operators on Null gives an unknown result, which is represented by Null. [...] In the following example, multiplying 10 by Null results in Null: ...|$|E
5000|$|View-serializability of a {{schedule}} {{is defined by}} equivalence to a serial schedule (no overlapping transactions) with the same transactions, such that respective transactions in the two schedules read and write the same <b>data</b> <b>values</b> ("view" [...] the same <b>data</b> <b>values).</b>|$|R
50|$|The mode of {{operation}} of any microprocessor is the execution of lists of instructions. Instructions typically include those to compute or manipulate <b>data</b> <b>values</b> using registers, change or retrieve values in read/write memory, perform relational tests between <b>data</b> <b>values</b> and to control program flow.|$|R
30|$|Real-time {{monitoring}} applications must {{react to}} outlier <b>data</b> <b>values.</b>|$|R
500|$|An 88 level-number {{declares}} a [...] (a so-called 88-level) {{which is}} true when its parent data item contains one of the values specified in its [...] clause. For example, the following code defines two 88-level condition-name items that are true or false depending on the current character <b>data</b> <b>value</b> of the [...] data item. When the data item contains a value of , the condition-name [...] is true, whereas when it contains a value of [...] or , the condition-name [...] is true. If the data item contains some other value, both of the condition-names are false.|$|E
500|$|Null (or NULL) is {{a special}} marker used in Structured Query Language to {{indicate}} that a <b>data</b> <b>value</b> {{does not exist in}} the database. [...] Introduced by the creator of the relational database model, E. F. Codd, SQL Null serves to fulfil the requirement that all true relational database management systems (RDBMS) support a representation of [...] "missing information and inapplicable information". [...] Codd also introduced the use of the lowercase Greek omega (ω) symbol to represent Null in database theory. [...] In SQL, NULL is a reserved word used to identify this marker.|$|E
500|$|The ISO SQL {{implementation}} of Null {{is the subject}} of criticism, debate and calls for change. [...] In The Relational Model for Database Management: Version 2, Codd suggested that the SQL {{implementation of}} Null was flawed and should be replaced by two distinct Null-type markers. [...] The markers he proposed were to stand for [...] "Missing but Applicable" [...] and [...] "Missing but Inapplicable", known as A-values and I-values, respectively. [...] Codd's recommendation, if accepted, would have required the implementation of a four-valued logic in SQL. [...] Others have suggested adding additional Null-type markers to Codd's recommendation to indicate even more reasons that a <b>data</b> <b>value</b> might be [...] "Missing", increasing the complexity of SQL's logic system. [...] At various times, proposals have also been put forth to implement multiple user-defined Null markers in SQL. [...] Because of the complexity of the Null-handling and logic systems required to support multiple Null markers, none of these proposals have gained widespread acceptance.|$|E
5000|$|It can read/write {{statistical}} <b>data</b> <b>values</b> from various/to sources including: ...|$|R
40|$|Median {{smoothing}} of {{a series}} of <b>data</b> <b>values</b> is considered. Naive programming of such an algorithm would result in large amount of computation, especially when the series of <b>data</b> <b>values</b> is long. By maintaining a heap structure that we update when moving along the data we obtain an optimal median smoothing algorithm...|$|R
30|$|Look-up {{database}} or secure enclave {{holds the}} anonymized <b>data</b> <b>values</b> and their associated original values. This database is typically secured on the enterprise/trustee network at highly restricted area. Using anonymized <b>data</b> <b>values,</b> the fund transfer transaction {{will be performed}} in the public cloud without exposing original <b>data</b> <b>values.</b> After successful transaction, the resultant values can be correlated to the real data elements using tokenization knowledge associated with account number and balance. A true fund transfer value can be protected {{as long as the}} tokenization knowledge remains confidential. Thus the online banking data can be protected in public cloud.|$|R
2500|$|... the <b>data</b> <b>value</b> {{taken for}} NoDriveAutoRun is 0x08, {{disabling}} drive D and the <b>data</b> <b>value</b> taken for NoDriveTypeAutoRun is 0x95, disabling removable and network drives. The per-user NoDriveAutoRun entry is never used.|$|E
2500|$|Every {{semantic}} annotation within SMW is a [...] "property" [...] {{connecting the}} page {{on which it}} resides to some other piece of data, either another page or a <b>data</b> <b>value</b> of some type, using triples of the form [...] "subject, predicate, object".|$|E
2500|$|If {{an address}} is not claimed by any device, the {{transaction}} initiator's address phase will time out causing the initiator to abort the operation. [...] In case of reads, it is customary to supply all-ones for the read <b>data</b> <b>value</b> (0xFFFFFFFF) in this case. PCI devices therefore generally {{attempt to avoid}} using the all-ones value in important status registers, so that such an error can be easily detected by software.|$|E
30|$|The {{protection}} gateway {{sends the}} updated obscured <b>data</b> <b>values</b> to CAPS.|$|R
50|$|Except {{the case}} of first level, all VCs in HCVC store partial <b>data</b> <b>values</b> only. 2^(i-1) {{segments}} are generated by partitioning the <b>data</b> <b>values,</b> and each VC stores one data segment. Similar to the HUVC, the incoming data is simultaneously checked with the VC on each level, with the uppermost VC hit getting encoded.|$|R
5000|$|Actual <b>data</b> <b>values</b> {{are stored}} only once and {{referenced}} by their token ...|$|R
2500|$|The {{measure of}} {{information}} entropy associated with each possible <b>data</b> <b>value</b> is the negative logarithm of the probability mass function for the value. Thus, when the data source has a lower-probability value (i.e., when a low-probability event occurs), the event carries more [...] "information" [...] ("surprisal") than when the source data has a higher-probability value. The amount of information conveyed by each event defined in this way becomes a random variable whose expected value is the information entropy. Generally, entropy refers to disorder or uncertainty, and the definition of entropy used in information theory is directly analogous to the definition used in statistical thermodynamics. The concept of information entropy was introduced by Claude Shannon in his 1948 paper [...] "A Mathematical Theory of Communication".|$|E
2500|$|Computer memory {{consists}} of a sequence of storage cells. Each cell is identified in hardware and software by its memory address. If {{the total number of}} storage cells in memory is n, then addresses are enumerated from 0 to n-1. Computer programs often use data structures of fields that may consist of more data than is stored in one memory cell. For {{the purpose of this article}} where its use as an operand of an instruction is relevant, a field {{consists of}} a consecutive sequence of bytes and represents a simple <b>data</b> <b>value.</b> In addition to that, it has to be of numeric type in some positional number system (mostly base-10 or base-2 — or base-256 in case of 8-bit bytes). In such a number system the [...] "value" [...] of a digit is determined not only by its value as a single digit, but also by the position it holds in the complete number, its [...] "significance". These positions can be mapped to memory mainly in two ways: ...|$|E
5000|$|... the <b>data</b> <b>value</b> {{taken for}} NoDriveAutoRun is 0x08, {{disabling}} drive D and the <b>data</b> <b>value</b> taken for NoDriveTypeAutoRun is 0x95, disabling removable and network drives. The per-user NoDriveAutoRun entry is never used.|$|E
5000|$|... #Caption: Modified by {{inserting}} <b>data</b> <b>values</b> {{on the map}} from Annu.Rev.Earth Planet.Sci.2010.38:161-187 ...|$|R
5000|$|... #Subtitle level 2: Displaying zero or {{negative}} <b>data</b> <b>values</b> in bubble charts ...|$|R
30|$|Data {{aggregation}} is a {{very important}} method to conserve energy by eliminating the inherent redundancy of raw data in wireless sensor networks (WSNs). In this article, we developed an automatic auto regressive-integrated moving averagemodeling-based data aggregation scheme in WSNs. The main idea behind this scheme is to decrease the number of transmitted <b>data</b> <b>values</b> between sensor nodes and aggregators by utilizing time series prediction model. The proposed scheme can effectively save the precious battery energy of wireless sensor nodes while keeping the predicted <b>data</b> <b>values</b> of aggregators within application-defined error threshold. We show through experiments with real data that the predicted <b>data</b> <b>values</b> of our proposed scheme fit the real sensed <b>data</b> <b>values</b> very well and fewer messages are transmitted between sensor nodes and aggregators than the native data aggregation scheme. Furthermore, the characteristics of the proposed data aggregation scheme are also discussed in this article.|$|R
50|$|The {{contents}} octets encode {{the element}} <b>data</b> <b>value.</b>|$|E
50|$|Coloured Petri Nets allow tokens {{to have a}} <b>data</b> <b>value</b> {{attached}} to them. This attached <b>data</b> <b>value</b> is called token color. Although the color can be of arbitrarily complex type, places in CPNs usually contain tokens of one type. This type is called color set of the place.|$|E
50|$|In {{addition}} to typical data values, the <b>data</b> <b>value</b> store contains a special {{type of data}} for storing relationships between tables. This functions similarly to foreign keys in RDBMS structures, but with a CDBMS, the relationship is known by the dictionary and stored as a <b>data</b> <b>value,</b> making navigation between tables completely automatic.|$|E
30|$|There is loss of {{information}} as it does not utilise all <b>data</b> <b>values.</b>|$|R
5000|$|Dataflow {{programming}} - forced recalculation of formulas when <b>data</b> <b>values</b> change (e.g. spreadsheets) ...|$|R
5000|$|... {{requiring}} that given <b>data</b> <b>values</b> {{be on the}} spline (giving us interpolating splines) ...|$|R
