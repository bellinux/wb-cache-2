1|6|Public
40|$|There is a {{multitude}} of seller-centric e-marketplaces in the Business-to-Business Electronic Commerce (B 2 B EC) environment. As the name implies, they are not organized from the buying organization 2 ̆ 7 s point of view. Thus, the buying organization needs to define a buyer-centric directory from the external e-marketplaces. This is particularly important in desk-top purchasing systems that use the internalized e-catalog. Recently, the one-to-one e-catalog approach is attempted to allow the buyer to select a sub-directory from a seller 2 ̆ 7 s directory. Although this is a helpful screening capability, there are still several problems to be resolved such as the mismatched level of details, directory depths unbalance, and changed category names. In addition, the integration with multiple sellers 2 ̆ 7 e-catalogs and maintaining consistency with the dynamically changing sellers 2 ̆ 7 e-catalogs should be supported. To overcome these problems, we adopt the logic programming approach because it can represent the structures of both buyers 2 ̆ 7 and sellers 2 ̆ 7 directories. Predicates as directory definition language can effectively represent the buyer 2 ̆ 7 s extraction of relevant parts from sellers 2 ̆ 7 directories. The crudely selected directory can be modified using five <b>directory</b> <b>modification</b> rules. To control the application of these rules, we devised a top-down control algorithm. The algorithm could improve the depth and balance of the directory significantly, which will result in automatically generating more effective buyer 2 ̆ 7 s directory...|$|E
50|$|In December 2010, ForgeRock {{released}} OpenDJ 2.4.0 including fixes {{and support}} for new features like Collective Attributes, Microsoft Active <b>Directory</b> Permissive <b>Modification</b> Control, and multiple objectclass inheritance.|$|R
5000|$|System Integrity Protection (SIP, {{sometimes}} referred to as rootless) is a security feature of Apple's macOS operating system introduced in OS X El Capitan. It comprises a number of mechanisms that are enforced by the kernel. A centerpiece is the protection of system-owned files and <b>directories</b> against <b>modifications</b> by processes without a specific [...] "entitlement", even when executed by the root user or a user with root privileges (sudo).|$|R
40|$|Abstract—Metadata {{distribution}} {{is important in}} mass storage system. Sub-tree partition and hash are two traditional metadata distribution algorithms used in file system. But they both have a defect in system scalability. This paper presents a new metadata management method, Directory Path Code Hash (“DPCH”). This method is to store directory and file metadata separately, and effectively solving the unbalanced metadata distribution and access hot point problems in Sub-tree partition and the excessive reading times and large metadata migration amount after <b>directory</b> property <b>modification</b> in hash algorithm. The experiment indicates that this method proposed significantly outweighs other algorithms in terms of throughput rate, metadata distribution, reading times, etc. Index Terms—metadata distribution, binary code, file system, directory path code hash(DPCH) I...|$|R
40|$|The {{problem of}} cache {{coherence}} in shared-memory multipre cessors has been addressed using two basic approaches: direc-tory schemes and snoopy cache schemes. Directory schemes {{have been given}} less attention {{in the past several}} years, while snoopy cache methods have become extremely popular. Di-rectory schemes for cache coherence are potentially attrac-tive in large multiprocessor systems that are beyond the scal-ing limits of the snoopy cache schemes. Slight <b>modifications</b> to <b>directory</b> schemes can make them competitive in perfor-mance with snoopy cache schemes for small multiprocessors. Trace driven simulation. using data collected from several real multiprocessor applications, is used to compare the perfor-mance of standard <b>directory</b> schemes, <b>modifications</b> to these schemes, and snoopy cache protocols. ...|$|R
40|$|Managing the {{hierarchical}} organization of data {{is starting to}} {{play a key role}} in the knowledge management community due to the great amount of human resources needed to create and maintain these organized repositories of information. Machine learning community has in part addressed this problem by developing hierarchical supervised classifiers that help maintainers to categorize new resources within given hierarchies. Although such learning models succeed in exploiting relational knowledge, they are highly demanding in terms of labeled examples, because the number of categories is related to the dimension of the corresponding hierarchy. Hence, the creation of new <b>directories</b> or the <b>modification</b> of existing ones require strong investments...|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2000). All Rights Reserved. This document describes a file format suitable for describing <b>directory</b> information or <b>modifications</b> made to <b>directory</b> information. The file format, known as LDIF, for LDAP Data Interchange Format, is typically used to import and export directory information between LDAP-based directory servers, or to describe a set of changes which are {{to be applied to}} a directory. Background and Intended Usage There are a number of situations where a common interchange format is desirable. For example, one might wish to export a copy of the contents of a directory server to a file, move that file to a different machine, and import the contents into a second directory server. Additionally, by using a well-defined interchange format, development of data import tools from legacy systems is facilitated. A fairly simple set of tools written in awk or perl can, for example, convert a database of personnel information into an LDIF file. This file can then be imported into a directory server, regardless of the internal database representation the target directory server uses. The LDIF format was originally developed and used in the University of Michigan LDAP implementation. The first use of LDIF was in describing directory entries. Later, the format was expanded to allow representation of changes to directory entries. Good Standards Track [Page 1] RFC 2849 LDAP Data Interchange Format June 2000 Relationship to the application/directory MIME content-type: The application/directory MIME content-type [1] is a general framework and format for conveying directory information, and is independent of any particular directory service. The LDIF format is a simpler format which is perhaps easier to create, and may also be used, as noted, to describe a set of changes to be applied to a directory...|$|R

