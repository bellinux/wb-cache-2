592|650|Public
25|$|DDR3 is a DRAM <b>interface</b> <b>specification.</b> The actual DRAM arrays {{that store}} {{the data are}} similar to earlier types, with similar performance.|$|E
25|$|The Serial Peripheral Interface bus (SPI) is a {{synchronous}} {{serial communication}} <b>interface</b> <b>specification</b> used for short distance communication, primarily in embedded systems. The interface {{was developed by}} Motorola in the late 1980s {{and has become a}} de facto standard. Typical applications include Secure Digital cards and liquid crystal displays.|$|E
500|$|Eric Bana {{commented that}} the shoot was, [...] "Ridiculously serious... a silent set, morbid {{in a lot of}} ways." [...] Lee told him that he was {{shooting}} a Greek tragedy: he would be making a [...] "whole other movie" [...] about the Hulk at Industrial Light & Magic. An example of Lee's art house approach to the film was taking Bana to watch a bare-knuckle boxing match. Visual effects supervisor Dennis Muren was on the set every day. One of the many visual images in the film that presented an acting challenge for Bana was a split screen technique employed by Lee to cinematically mimic the panels of a comic book page. This required many more takes of individual scenes than normal. Sound design was completed at Skywalker Sound. Muren and other ILM animators used previous technology from Harry Potter and the Chamber of Secrets (for the Dobby character) to create the Hulk with computer-generated imagery. Other software used included PowerAnimator, Softimage XSI, and RenderMan <b>Interface</b> <b>Specification.</b> ILM started computer animation work in 2001, and completed in May 2003, just one month before the film's release. Lee provided some motion capture work in post-production.|$|E
50|$|The CAPE-OPEN project {{ended in}} 2001 and {{delivered}} <b>interface</b> <b>specifications</b> for unit operations (in steady-state) and thermodynamic components. A non-profit organisation, CO-LaN, was subsequently established {{to maintain and}} support the existing specifications and to continue the development of additional CAPE-OPEN <b>interface</b> <b>specifications.</b>|$|R
5000|$|... {{design of}} {{functional}} and <b>interface</b> <b>specifications</b> for software components ...|$|R
40|$|We {{present a}} method for the {{compositional}} construction of the minimal transition system that represents the semantics of a given distributed system. Our aim is to control the state explosion caused by the interleavings of actions of communicating parallel components by reduction steps that exploit global communication constraints given in terms of <b>interface</b> <b>specifications.</b> The effect of the method, which is developed for bisimulation semantics here, depends {{on the structure of}} the distributed system under consideration, and the accuracy of the <b>interface</b> <b>specifications.</b> However, its correctness is independent of the correctness of the <b>interface</b> <b>specifications</b> provided by the program designer...|$|R
2500|$|Requires Java Modeling Language (JML) {{behavioral}} <b>interface</b> <b>specification</b> language.|$|E
2500|$|RenderMan <b>Interface</b> <b>Specification</b> (RISpec) – Pixar's open API for {{photorealistic}} off-line rendering ...|$|E
2500|$|Current Unified Extensible Firmware <b>Interface</b> <b>Specification</b> 2.4A, Section 21 Network Protocols — SNP, PXE, and BIS {{defines the}} {{protocols}} that {{provide access to}} network devices ...|$|E
5000|$|CAO (Controller Access Object), {{standard}} program <b>interface</b> <b>specifications</b> : Specifications {{to facilitate}} generalization of application software ...|$|R
40|$|<b>Interface</b> <b>specifications</b> play an {{important}} role in component-based software development. An inter-face theory is a formal framework supporting composition, refinement and compatibility of <b>interface</b> <b>specifications.</b> We present different interface theories which use modal I/O-transition systems as their underlying domain for interface specifications: synchronous interface theories, which employ a synchronous communication schema, as well as a novel interface theory for asynchronous commu-nication where components communicate via FIFO-buffers. ...|$|R
5000|$|An ICD is the {{umbrella}} document over the system interfaces; {{examples of what}} these <b>interface</b> <b>specifications</b> should describe include: ...|$|R
5000|$|<b>Interface</b> <b>specification,</b> {{that defines}} how HLA {{compliant}} simulators {{interact with the}} run-time infrastructure (RTI). The RTI provides a programming library and an application programming interface (API) compliant to the <b>interface</b> <b>specification.</b>|$|E
5000|$|Requires Java Modeling Language (JML) {{behavioral}} <b>interface</b> <b>specification</b> language.|$|E
5000|$|The XFI {{electrical}} <b>interface</b> <b>specification</b> was a 10 gigabit {{per second}} chip-to-chip electrical <b>interface</b> <b>specification</b> defined {{as part of}} the XFP multi-source agreement. It was also developed by the XFP MSA group. XFI is sometimes pronounced as [...] "X" [...] "F" [...] "I" [...] and other times as [...] "ziffie".|$|E
50|$|C-Bus <b>interface</b> <b>specifications</b> are {{available}} through the C-Bus Enabled Program, however {{it is necessary to}} agree to a license agreement.|$|R
50|$|MIP Mission: MIP is {{to further}} develop and improve <b>interface</b> <b>specifications</b> {{in order to}} reduce the {{interoperability}} gap between different C2IS.|$|R
50|$|The ESCON <b>interface</b> <b>specifications</b> {{were adopted}} in 1996 by ANSI X3T1 {{committee}} as the SBCON standard, {{which is now}} managed by X3T11.|$|R
50|$|Its {{standardized}} part {{is defined as}} a software <b>interface</b> <b>specification.</b>|$|E
5000|$|Image and Scanner <b>Interface</b> <b>Specification</b> (ISIS) - Open {{industry}} standard interface.|$|E
50|$|The <b>interface</b> <b>{{specific}}ation</b> is {{not limited}} to specific technology platforms or implementations.|$|E
5000|$|DOCSIS {{includes}} MAC layer {{security services}} in its Baseline Privacy <b>Interface</b> <b>specifications.</b> DOCSIS 1.0 used the initial Baseline Privacy <b>Interface</b> (BPI) <b>specification.</b> BPI was later improved {{with the release}} of the Baseline Privacy <b>Interface</b> Plus (BPI+) <b>specification</b> used by DOCSIS 1.1 and 2.0. Most recently, a number of enhancements to the Baseline Privacy Interface were added as part of DOCSIS 3.0, and the specification was renamed [...] "Security" [...] (SEC).|$|R
40|$|In {{this paper}} we develop a {{compositional}} method {{for the construction}} of the minimal transition system that represents the semantics of a given reactive system. The point of this method is that it exploits structural properties of the reactive system {{in order to avoid the}} consideration of large intermediate representations. Central is the use of <b>interface</b> <b>specifications</b> here, which express constraints on the components' communication behaviour, and therefore to control the state explosion caused by the interleavings of actions of communicating parallel components. The effect of the method, which is developed for bisimulation semantics here, depends on the structure of the reactive system under consideration, in particular on the accuracy of the <b>interface</b> <b>specifications.</b> However, its correctness does not: every "successful" construction is guaranteed to yield the desired minimal transition system, independently of the correctness of the <b>interface</b> <b>specifications</b> provided by the designer...|$|R
5000|$|Typical human-machine {{interface}} design {{consists of the}} following stages: interaction <b>specification,</b> <b>interface</b> software <b>specification</b> and prototyping: ...|$|R
5000|$|SISO-STD-004.1-2004: Dynamic Link Compatible HLA API Standard for the HLA <b>Interface</b> <b>Specification</b> ...|$|E
5000|$|Network Driver <b>Interface</b> <b>Specification</b> (NDIS) - a {{standard}} network card driver API ...|$|E
5000|$|RenderMan <b>Interface</b> <b>Specification</b> (RISpec) - Pixar's open API for {{photorealistic}} off-line rendering ...|$|E
2500|$|Mondrian OLAP server is an {{open-source}} OLAP server {{written in}} Java. It supports the MDX query language, the XML for Analysis and the [...] <b>interface</b> <b>specifications.</b>|$|R
40|$|Abstract. We {{propose a}} library based {{incremental}} design methodology for constructing hybrid controllers from a component library of models of hybrid controllers, such that global safety and stability properties are preserved. To this end, we propose hybrid <b>interface</b> <b>specifications</b> of components characterizing plant regions for which safety and stability properties are guaranteed, {{as well as}} exception mechanisms allowing safe and stability-preserving transfer of control whenever the plant evolves towards the boundary of controllable dynamics. We then propose a composition operatorforconstructinghybrid automatafromalibraryofsuch pre-characterized components supported by compositional and automatable proofs of hybrid <b>interface</b> <b>specifications.</b> ...|$|R
40|$|Abstract Traditional static type {{systems are}} very {{effective}} for verifying ba-sic <b>interface</b> <b>specifications,</b> but are somewhat limited {{in the kinds}} specifications they support. Dynamically-checked contracts can en-force more precise specifications, {{but these are not}} checked until run time, resulting in incomplete detection of defects. Hybrid type checking is a synthesis of these two approaches that enforces precise <b>interface</b> <b>specifications,</b> via static analysis wherepossible, but also via dynamic checks where necessary. This paper explores the key ideas and implications of hybrid type checking,in the context of the simply-typed *-calculus with arbitrary refine-ments of base types...|$|R
5000|$|Dynamic Link Compatible HLA API Standard for the HLA <b>Interface</b> <b>Specification</b> Version 1.3 ...|$|E
5000|$|Network Driver <b>Interface</b> <b>Specification</b> (NDIS) - {{developed}} by Microsoft and 3Com, free wrappers ...|$|E
5000|$|Kalra D, 2010, ISO/EN 13606 Electronic Health Record Communication Part 5: <b>Interface</b> <b>Specification</b> ...|$|E
40|$|Embedded {{software}} {{systems are}} increasingly constructed using interacting functionalities, {{leading to the}} development of networks of communicating software components distributed over connected processors. At the same time, the growing complexitiy of the functionality as well as the increase in variations caused by product lines requires a modular development process. As repeatedly witnessed, e. g., in embedded automotive applications, without a suitable notion of <b>interface</b> <b>specifications,</b> integration faults are often only detected after deployment. Here, timed <b>interface</b> <b>specifications</b> can be used to simplify a modular development process, including mechanic checks for consistent modular composition...|$|R
40|$|This {{technical}} report briefly describes 'L 3 DGEWorld 1. 0 'a plug-in modification to the Quake III Arena game engine to allow network {{monitoring and control}} of a live network to take place 'in-game'. This report then, in detail, outlines the initial <b>interface</b> <b>specifications</b> for conveying network activity from a greynet (or similar network monitoring system) to the 3 D game engine for real-time visualisation and representation It also defines the initial <b>interface</b> <b>specifications</b> for the signaling and control protocol that re-configures a standard Cisco enterprise router's ACLs based on the resulting in-game actions...|$|R
40|$|Traditional static type {{systems are}} {{effective}} for verifying basic <b>interface</b> <b>specifications.</b> Dynamicallychecked contracts support more precise specifications, {{but these are}} not checked until run time, resulting in incomplete detection of defects. Hybrid type checking is a synthesis of these two approaches that enforces precise <b>interface</b> <b>specifications,</b> via static analysis where possible, but also via dynamic checks where necessary. This paper explores the key ideas and implications of hybrid type checking, {{in the context of the}} λ-calculus extended with contract types, i. e., with dependent function types and with arbitrary refinements of base types...|$|R
