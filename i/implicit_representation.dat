408|451|Public
25|$|The Aanderaa–Karp–Rosenberg {{conjecture}} concerns implicit graphs {{given as}} a set of labeled vertices with a black-box rule for determining whether any two vertices are adjacent. This definition differs from an adjacency labeling scheme in that the rule may be specific to a particular graph rather than being a generic rule that applies to all graphs in a family. Because of this difference, every graph has an <b>implicit</b> <b>representation.</b> For instance, the rule could be to look up the pair of vertices in a separate adjacency matrix. However, an algorithm that is given as input an implicit graph of this type must operate on it only through the implicit adjacency test, without reference to how the test is implemented.|$|E
2500|$|Bounded degree graphs: If every vertex in [...] has at most [...] neighbors, one may number the {{vertices}} of [...] from 1 to [...] {{and let the}} identifier for a vertex be the -tuple of its own {{number and}} the numbers of its neighbors. Two vertices are adjacent when the first numbers in their identifiers appear later in the other vertex's identifier. More generally, the same approach {{can be used to}} provide an <b>implicit</b> <b>representation</b> for graphs with bounded arboricity or bounded degeneracy, including the planar graphs and the graphs in any minor-closed graph family.|$|E
2500|$|In {{the context}} of {{efficient}} representations of graphs, J. H. Muller defined a local structure or adjacency labeling scheme for a graph [...] in a given family [...] of graphs to be an assignment of an -bit identifier to each vertex of , together with an algorithm (that may depend on [...] but is independent of the individual graph [...] ) that takes as input two vertex identifiers and determines {{whether or not they}} are the endpoints of an edge in [...] That is, this type of <b>implicit</b> <b>representation</b> is analogous to an adjacency matrix: it is straightforward to check whether two vertices are adjacent but finding the neighbors of any vertex may involve looping through all vertices and testing which ones are neighbors.|$|E
40|$|Computer Aided Geometric Design (CAGD) is {{concerned}} with the representation and approximation of curves and surfaces when these objects have to be processed by a computer. Parametric representations are very popular because they allow considerable flexibility for shaping and design. <b>Implicit</b> <b>representations</b> are convenient for determining whether a point is inside, outside or on the surface. These representations offer many complimentary advantages. Therefore, it is desirable to build geometric models with surfaces which have both parametric and <b>implicit</b> <b>representations.</b> Maintaining the degree of the surfaces low is important for practical reasons. Both the size of the surface representation, as well as the difficulties encountered in the algorithms, e. g. root finding algorithms, grow quickly with increasing degree. This thesis introduces low degree surfaces with both parametric and <b>implicit</b> <b>representations</b> and investigates their properties. A new method is described for creating quadratic triangular Bezier surface patches which lie on implicit quadric surfaces. Another method is described for creating biquadratic tensor product Bezier surface patches which lie on implicit cubic surfaces. The resulting surface patches satisfy all of the standard properties of parametric Bezier surfaces, including interpolation of the corners of the control polyhedron and the convex hull property. The second half of this work describes a scheme for filling n-sided holes and for approximating the resulting smooth surface consisting of high degree parametric Bezier surface patches by a continuous surface consisting of low degree patches with both parametric and <b>implicit</b> <b>representations.</b> A new technique is described for filling an n-sided hole smoothly using a single parametric surface patch with a geometrically intuitive compact representation. Next, a new degree reduction algorithm is applied to approximate high degree parametric Bezier surfaces by low degree Bezier surfaces. Finally, a variant of the least squares technique is used to approximate parametric Bezier surfaces of low degree by low degree surfaces with both parametric and <b>implicit</b> <b>representations.</b> The resulting surfaces have boundary continuity and approximation properties...|$|R
40|$|This {{work was}} also {{published}} as a Rice University thesis/dissertation: [URL] Aided Geometric Design (CAGD) {{is concerned with}} the representation and approximation of curves and surfaces when these objects have to be processed by a computer. Parametric representations are very popular because they allow considerable flexibility for shaping and design. <b>Implicit</b> <b>representations</b> are convenient for determining whether a point is inside, outside or on the surface. These representations offer many complimentary advantages. Therefore, it is desirable to build geometric models with surfaces which have both parametric and <b>implicit</b> <b>representations.</b> Maintaining the degree of the surfaces low is important for practical reasons. Both the size of the surface representation, as well as the difficulties encountered in the algorithms, e. g. root finding algorithms, grow quickly with increasing degree. This thesis introduces low degree surfaces with both parametric and <b>implicit</b> <b>representations</b> and investigates their properties. A new method is described for creating quadratic triangular Bezier surface patches which lie on implicit quadric surfaces. Another method is described for creating biquadratic tensor product Bezier surface patches which lie on implicit cubic surfaces. The resulting surface patches satisfy all of the standard properties of parametric Bezier surfaces, including interpolation of the corners of the control polyhedron and the convex hull property. The second half of this work describes a scheme for filling n-sided holes and for approximating the resulting smooth surface consisting of high degree parametric Bezier surface patches by a continuous surface consisting of low degree patches with both parametric and <b>implicit</b> <b>representations.</b> A new technique is described for filling an n-sided hole smoothly using a single parametric surface patch with a geometrically intuitive compact representation. Next, a new degree reduction algorithm is applied to approximate high degree parametric Bezier surfaces by low degree Bezier surfaces. Finally, a variant of the least squares technique is used to approximate parametric Bezier surfaces of low degree by low degree surfaces with both parametric and <b>implicit</b> <b>representations.</b> The resulting surfaces have boundary continuity and approximation properties...|$|R
5000|$|One can map {{arbitrary}} surfaces by an inversion. The formulas above give in {{any case}} parametric or <b>implicit</b> <b>representations</b> of the image surface, if the surfaces are given parametrically or implicitly. In case of a parametric surface one gets: ...|$|R
2500|$|The {{notion of}} an {{implicit}} graph is common in various search algorithms which are {{described in terms of}} graphs. In this context, an implicit graph may be [...] defined as a set of rules to define all neighbors for any specified vertex. This type of implicit graph representation is analogous to an adjacency list, in that it provides easy access to the neighbors of each vertex. For instance, in searching for a solution to a puzzle such as Rubik's Cube, one may define an implicit graph in which each vertex represents one of the possible states of the cube, and each edge represents a move from one state to another. It is straightforward to generate the neighbors of any vertex by trying all possible moves in the puzzle and determining the states reached by each of these moves; however, an <b>implicit</b> <b>representation</b> is necessary, as the state space of Rubik's Cube is too large to allow an algorithm to list all of its states. states, and is too large to search exhaustively.}} ...|$|E
5000|$|... is an <b>implicit</b> <b>representation.</b> Hence {{the right}} {{circular}} conoid is a surface of degree 4.|$|E
5000|$|Inserting [...] and [...] {{into the}} {{equation}}shows: this equation is an <b>implicit</b> <b>representation</b> of the curve.|$|E
50|$|<b>Implicit</b> <b>representations</b> {{facilitate}} the computation of intersection points: If one curve is represented implicitly {{and the other}} parametrically the computation of intersection points needs only a simple (1-dimensional) Newton iteration, which {{is contrary to the}} cases implicit-implicit and parametric-parametric (see intersection).|$|R
40|$|We {{examine a}} dual-quaternion {{formulation}} for expressing the relative rigid body motion between two objects when incidence constraints {{are to be}} observed. The incidences are between points, lines and planes, of the two parts. Both parametric and <b>implicit</b> <b>representations</b> are investigated. Several examples illustrate the techniques...|$|R
40|$|<b>Implicit</b> <b>representations</b> of curves {{have certain}} {{advantages}} over explicit representation, {{one of them}} being the ability to determine with ease whether a point is inside or outside the curve (inside-outside functions). However, save for some special cases, {{it is not known}} how to construct <b>implicit</b> <b>representations</b> which are guaranteed to preserve the curve's topology. As a result, points may be erroneously classified with respect to the curve. The paper offers to overcome this problem by using a representation which is guaranteed to yield the correct topology of a simple closed curve by using homeomorphic mappings of the plane to itself. If such a map carries the curve onto the unit circle, then a point is inside the curve if and only if its image is inside the unit circle...|$|R
5000|$|Introducing the substitutions [...] and [...] {{one gets}} after {{removing}} the square root the <b>implicit</b> <b>representation</b> in ...|$|E
50|$|The cover tree uses <b>implicit</b> <b>representation</b> to {{keep track}} of {{repeated}} points. Thus, it only requires O(n) space.|$|E
50|$|The <b>implicit</b> <b>representation</b> is {{fulfilled}} by {{the points}} of the line , too. For these points there exist no tangent planes. Such points are called singular.|$|E
40|$|This {{tutorial}} paper {{discusses the}} known representations based on Binary Decision Diagrams (BDDs) for {{various types of}} discrete objects: incompletely specified functions, sets, finite state machines, binary and multi-valued relations, etc. While presenting the known material, {{the emphasis is on}} those aspects of <b>implicit</b> <b>representations</b> that are important to achieve speed-up in computation. The new material includes <b>implicit</b> <b>representations</b> for dichotomies, partitions, set systems, and information measures. The last type of objects, information measures, constitute a promising approach to problem solving in a number of areas, including decomposition of discrete functions and finite state machines. Multi-valued relations (MVRs) are presented as the most general representation for all the considered classes on discrete objects. Two complementary ways of representing MVRs are proposed: binary-encoded multivalued decision diagrams (BEMDDs) and labeled rough partitions (LRPs). The sizes of [...] ...|$|R
40|$|Most {{of science}} {{education}} research throughout many years, {{and the teaching}} models resulting fro this research, has been devoted, without much success, to promote the so-called conceptual change. In this paper students' alternative knowledge is interpreted as embodied <b>implicit</b> <b>representations</b> and {{it is argued that}} conceptual change must be interpreted as representational change...|$|R
40|$|In this chapter, {{we explore}} shape representation, {{registration}} and modeling through implicit functions. To this end, we propose novel techniques to global and local registration of shapes through the {{alignment of the}} corresponding distance transforms, that consists of defining objective functions that minimize metrics between the <b>implicit</b> <b>representations</b> of shapes. Registration methods [...] ...|$|R
5000|$|For any {{ellipsoid}} {{there exists}} an <b>implicit</b> <b>representation</b> [...] If for simplicity {{the center of}} the ellipsoid is the origin, i.e. , the following equation describes the ellipsoid above: ...|$|E
5000|$|Elimination of the {{parameter}} [...] {{yields the}} <b>implicit</b> <b>representation</b> Introducing the new parameter [...] one gets(The proof uses the angle sum and difference identities.) Hence {{we get the}} polar representation ...|$|E
5000|$|An <b>implicit</b> <b>representation</b> [...] {{gives the}} {{possibility}} of separating points not on the curve by the sign of [...] This may be helpful for example applying the false position method instead of a Newton iteration.|$|E
30|$|The aSDG method’s unique {{approach}} to adaptive spacetime meshing is sufficiently powerful {{that it can}} track dynamic fracture networks with spacetime element boundaries without introducing mesh-dependent constraints or artifacts. Thus, we address {{the main drawback of}} explicit geometry models, albeit at the cost of some algorithmic complexity, while avoiding the drawbacks of <b>implicit</b> <b>representations.</b>|$|R
40|$|Using a new {{formulation}} of the Bézout matrix, we construct bivariate matrix polynomials expressed in a tensor-product Lagrange basis. We use these matrix polynomials to solve common tasks in computer-aided geometric design. For example, we show that these bivariate polynomials can serve as stable and efficient <b>implicit</b> <b>representations</b> of plane curves {{for a variety of}} curve intersection problems. 1...|$|R
40|$|Abstract: This {{contribution}} {{explores the}} relationship between teaching practices, teaching discourses and teachers ´ <b>implicit</b> <b>representations</b> and mental models and the way these dimensions change through teacher education (T. E). In order to study these relationships, {{and based on the}} assumptions that representations underlie teaching practices and that T. E might affect these representations, a T. E course was designed and implemented in Argentina. The course focused on teacher intervention in personal narrative telling in kindergarten. It was based on a reflection-on-action process. The personal narrative activities of 10 in-service teachers before and after the course were analysed employing the Process of Constant Comparison (Glaser & Straus, 1967). A case study was then conducted in order to infer possible transformations in one of the teachers ´ <b>implicit</b> <b>representations</b> and mental models, through Content Analysis (Krippendorf, 1990) of in-depth interviews before, during and after the course...|$|R
50|$|Among {{the distinctions}} of dPNs from {{classical}} PNs is {{space and time}} (due to energy use) in both the place construct and transformation construct. This results in the simulation effect of marked transformations that allow for the explicit representation of parallel processing, multiprocessing, and the <b>implicit</b> <b>representation</b> of deterioration of objects - all unique to dualistic Petri nets.|$|E
50|$|An {{important}} {{example of}} an implicit data structure is representing a perfect binary tree as a list, in increasing order of depth, so root, first left child, first right child, first left child of first left child, etc. Such a tree occurs notably for an ancestry chart to a give depth, and the <b>implicit</b> <b>representation</b> is known as an Ahnentafel (ancestor table).|$|E
5000|$|Alexander Bain {{regarded}} Contiguity and Similarity logically, as perfectly distinct principles, {{though in}} actual psychological occurrence blending intimately with each other, contiguous trains being started by a first (it may be, <b>implicit)</b> <b>representation</b> through Similarity, while the express assimilation of present to past in consciousness is always, or tends to be, {{followed by the}} revival of what was presented in contiguity with that past.|$|E
40|$|This study investigates whether {{developmental}} dyslexia {{involves an}} impairment in <b>implicit</b> phonological <b>representations,</b> {{as distinct from}} orthographic representations and metaphonological skills. A group of adults with dyslexia was matched with a group with no history of speech/language/literacy impairment. Tasks varied in the demands made on (<b>implicit)</b> phonological <b>representations</b> versus metalinguistic analysis/manipulation, and controlled the contribution of phonological versus orthographic representations by including both a segmental and an equivalent suprasegmental (non-orthographic) version of each task. The findings show a dissociation between metaphonological skills and <b>implicit</b> phonological <b>representations,</b> with the dyslexic group impaired in metaphonological manipulation skills in both segmental and suprasegmental tasks, but not in implicit knowledge of phonological contrasts...|$|R
40|$|Developable {{surfaces}} are modelled {{with pieces of}} right circular cones. These cone spline {{surfaces are}} well-suited for applications: They possess degree two parametric and <b>implicit</b> <b>representations.</b> Bending sequences and the develop-ment can be explicitly computed and the offsets are of the same type. The algorithms are based on elementary analytic and constructive geometry. There appear interesting relations to planar and spherical arc splines...|$|R
40|$|In {{this talk}} we {{consider}} the role of common ground for some coordination problems in dialogue. There, we concentrate especially on the difference between explicit and <b>implicit</b> <b>representations.</b> A prototypical example for a coordination problem is the so-called coordinated attack problem 1 : (1) Two divisions of an army are camped on two hilltops. In the valley awaits the enemy. It i...|$|R
5000|$|These conic {{sections}} have no {{points with}} the y-axis in common and intersect the x-axis at [...] Their discriminants show that these curves are hyperbolas. A more detailed investigation {{reveals that the}} hyperbolas are rectangular. In order to get normals, which are independent from parameter [...] the following <b>implicit</b> <b>representation</b> is more convenient: A simple calculation shows, that [...] for all [...] Hence the Cassini ovals and the hyperbolas intersect orthogonally.|$|E
50|$|In {{the context}} of this article, all graphs will be simple and undirected, unless stated otherwise. This means that the edges of the graph form a set (and not a multiset) and each edge is a pair of {{distinct}} vertices. Graphs are assumed to have an <b>implicit</b> <b>representation</b> in which each vertex has a unique identifier or label and in which it is possible to test the adjacency of any two vertices, but for which adjacency testing is the only allowed primitive operation.|$|E
5000|$|Bounded degree graphs: If every vertex in [...] has at most [...] neighbors, one may number the {{vertices}} of [...] from 1 to [...] {{and let the}} identifier for a vertex be the -tuple of its own {{number and}} the numbers of its neighbors. Two vertices are adjacent when the first numbers in their identifiers appear later in the other vertex's identifier. More generally, the same approach {{can be used to}} provide an <b>implicit</b> <b>representation</b> for graphs with bounded arboricity or bounded degeneracy, including the planar graphs and the graphs in any minor-closed graph family.|$|E
30|$|To {{tackle the}} tag {{locality}} problem, one may employ local image features instead of holistic image features {{to describe the}} visual contents of a certain tag. The work in [7] considered each image as a bag of multiple segmented regions and predicted the tag of each region by a multiclass bag classifier. This method, however, heavily depends on the segmentation performance, which is very sensitive to the image noise. Recently, <b>implicit</b> image <b>representations</b> attract much attention on describing local regions. To reveal the tag locality, Bao et al. [8] introduced hidden concepts for decomposing holistic image representation into tag representations. Mesnil et al. [9] learned <b>implicit</b> <b>representations</b> for both the objects and their parts. Although these representations cannot explicitly describe the regions of a certain tag, they implicitly capture the tag’s local visual contents by learning from large amount of annotated images. Thus, <b>implicit</b> image <b>representation</b> is nontrivial for tackling the tag locality problem in large-scale datasets.|$|R
40|$|A {{navigation}} {{function is}} an artificial potential energy function on a robot configuration space (C-space) which encodes {{the task of}} moving to an arbitrary destination without hitting any obstacle. In particular, such a function possesses no spurious local minima. In this paper we construct navigation functions on forests of stars: geometrically complicated C-spaces that are topologically indistinguishable from a simple disc punctured by disjoint smaller discs, representing 2 ̆ 2 model 2 ̆ 2 obstacles. For reasons of mathematical tractability we approximate each C-space obstacle by a Boolean combination of linear and quadratic polynomial inequalities (with 2 ̆ 2 sharp corners 2 ̆ 2 allowed), and use a 2 ̆ 2 calculus 2 ̆ 2 of <b>implicit</b> <b>representations</b> to effectively represent such obstacles. We provide evidence {{of the effectiveness of}} this 2 ̆ 2 technology 2 ̆ 2 of <b>implicit</b> <b>representations</b> in the form of several simulation studies illustrated {{at the end of the}} paper...|$|R
40|$|International audienceWe {{propose a}} purely {{implicit}} {{solution to the}} contextual assumption generation problem in assume-guarantee reasoning. Instead of improving the L* algorithm — a learning algorithm for finite automata, our algorithm computes <b>implicit</b> <b>representations</b> of contextual assumptions by the CDNF algorithm — a learning algorithm for Boolean functions. We report three parametrized test cases where our solution outperforms the monolithic interpolation-based Model Checking algorithm...|$|R
