10000|10000|Public
5|$|C# {{supports}} strongly typed implicit variable declarations {{with the}} <b>keyword</b> var, and implicitly typed arrays with the <b>keyword</b> new {{followed by a}} collection initializer.|$|E
5|$|C# offers Java-like {{synchronized}} method calls, via the attribute , and has {{support for}} mutually-exclusive locks via the <b>keyword</b> lock.|$|E
5|$|In XML, {{the system}} {{identifier}} appearing after the SYSTEM <b>keyword</b> in a DTD is a fragmentless URI reference.|$|E
40|$|Headlines from 2, 000 {{news stories}} were {{analyzed}} {{for the presence}} of 727 <b>keywords</b> indicating an association, a causal connection or something in-between. 71 % had such <b>keywords.</b> Of those with such <b>keywords,</b> very few (6 %) had <b>keywords</b> clearly indicating causation or association. Most (94 %) had “between” keywords: <b>keywords</b> that described an association but had a causal connotation. "Between" <b>keywords</b> included action verb <b>keywords</b> such as ups or cuts (61 %), comparison <b>keywords</b> such as more or less (19 %), sufficient <b>keywords</b> such as prevent or stop (8 %) and temporal or quasi-causal <b>keywords</b> such as after and due to (7 %). A content analysis of three statistics textbooks indicates that statisticians may use effect without implying causation. This data may be useful for both statisticians and journalists in trying to understand how the other group distinguishes association from causation...|$|R
5000|$|In general {{reserved}} {{words and}} <b>keywords</b> need not coincide, {{but in most}} modern languages <b>keywords</b> are a subset of reserved words, as this makes parsing easier, since <b>keywords</b> cannot be confused with identifiers. In some languages, like C or Python, reserved words and <b>keywords</b> coincide, while in other languages, like Java, all <b>keywords</b> are reserved words, but some reserved words are not <b>keywords</b> - these are [...] "reserved for future use". In yet other languages, such as the older languages ALGOL, FORTRAN and PL/I, there are <b>keywords</b> but no reserved words, with <b>keywords</b> being distinguished from identifiers by other means. This makes parsing more difficult with look-ahead parsers necessary.|$|R
3000|$|In {{filtering}} {{based on}} the <b>keywords</b> relevant to concurrency step, we {{decided to use the}} <b>keywords</b> that could help us to include the bug reports were compatible with the scope of this study. In identifying such <b>keywords,</b> we reviewed the <b>keywords</b> utilized in similar previous studies [1, 14]. The <b>keywords</b> included in the search, i.e. the terms, were: [...]...|$|R
5|$|Like C++, {{and unlike}} Java, C# programmers must use the <b>keyword</b> virtual to allow methods to be {{overridden}} by subclasses.|$|E
5|$|C# has {{support for}} strongly-typed {{function}} pointers via the <b>keyword</b> delegate. Like the Qt framework's pseudo-C++ signal and slot, C# has semantics specifically surrounding publish-subscribe style events, though C# uses delegates to do so.|$|E
5|$|In the C++ {{programming}} language, decltype is a <b>keyword</b> used {{to query}} {{the type of}} an expression. Introduced in C++11, its primary intended use is in generic programming, where it is often difficult, or even impossible, to express types that depend on template parameters.|$|E
30|$|After data processing, 937, 923 <b>keywords</b> {{from those}} 78, 986 {{articles}} were merged into 150, 974 <b>keywords.</b> All of the <b>keywords</b> were sorted in reverse order {{based on their}} frequencies. The 100 most frequently used <b>keywords</b> {{became the focus of}} our study.|$|R
30|$|We further analyse the <b>keywords</b> that {{classify}} {{the previous}} set of abstracts in bibliography. These <b>keywords</b> {{have been set}} either by authors or in accordance with journals’ bibliographic lists. Different word frequencies and correspondences for the two different sets of <b>keywords</b> are compared. 2223 articles provide index <b>keywords</b> while 5151 articles are accompanied by author <b>keywords</b> (a set of 52, 738 <b>keywords).</b> Thus, 7177 different index <b>keywords</b> and 11, 715 author <b>keywords</b> were retrieved. Through text mining, using the KH coder tool, word frequencies and co-occurrence networks are calculated and compared for articles’ titles, <b>keywords</b> and abstracts. The goal {{is to examine the}} relative position of “education” and “learning” concepts amongst the rest key-concepts in entrepreneurial literature. In a further step, we retrieve and discuss citations per paper (cpp) as an indicative index for the academic impact of each concept in entrepreneurial research.|$|R
50|$|Search engine {{advertisements}} are purchased on {{the basis}} of <b>keywords.</b> Ad buyers engage in running actions for <b>keywords,</b> with popular <b>keywords</b> costing several dollars per click through.|$|R
5|$|The actual {{process of}} {{analysis}} can vary between investigations, but common methodologies include conducting <b>keyword</b> searches across the digital media (within files {{as well as}} unallocated and slack space), recovering deleted files and extraction of registry information (for example to list user accounts, or attached USB devices).|$|E
5|$|The key {{difference}} between QA technology and document search is that document search takes a <b>keyword</b> query and returns {{a list of}} documents, ranked in order of relevance to the query (often based on popularity and page ranking), while QA technology takes a question expressed in natural language, seeks to understand it in much greater detail, and returns a precise answer to the question.|$|E
5|$|A classic {{error is}} {{the attempt to}} use the equals {{operator}} = {{in combination with the}} <b>keyword</b> NULL to find rows with Nulls. According to the SQL standard this is an invalid syntax and shall lead to an error message or an exception. But most implementations accept the syntax and evaluate such expressions to UNKNOWN. The consequence is that no rows are found - regardless of whether rows with Nulls exist or not. The proposed way to retrieve rows with Nulls is the use of the predicate IS NULL instead of = NULL.|$|E
5000|$|Visual Basic and C# share most <b>keywords,</b> {{with the}} {{difference}} {{being that the}} default Visual Basic <b>keywords</b> are the capitalised versions of the C# <b>keywords,</b> e.g. [...] vs , [...] vs [...]|$|R
30|$|Furthermore, by {{comparing}} the number of two sets of reproduced and categorized bugs i.e., closed and fixed concurrency <b>keywords</b> matched and unreproducible concurrency <b>keywords</b> matched, our interpretation is here {{that the number of}} closed and fixed concurrency <b>keywords</b> matched bugs is two times bigger than the number of unreproducible concurrency <b>keywords</b> matched bugs.|$|R
30|$|Since Google’s {{search is}} driven by a list of <b>keywords,</b> {{it is crucial to}} choose the <b>keywords</b> properly. To make the {{collected}} questions comparable with the machine-generated questions, the <b>keywords</b> need to specify both the concept to be questioned and the type of question. Let us first discuss how <b>keywords</b> for concepts were generated.|$|R
5|$|The new {{keyboard}} did {{not include}} the BASIC <b>keyword</b> markings that were found on earlier Spectrums, except for the keywords LOAD, CODE and RUN which were useful for loading software. This was not a major issue, as the +2 boasted a menu system, almost identical to the ZX Spectrum 128, where one could switch between 48K BASIC programming with the keywords, and 128K BASIC programming in which all words (keywords and otherwise) must be typed out in full (although the keywords are still stored internally as one character each). Despite these changes, the layout remained identical to that of the 128.|$|E
5|$|Aspect weavers' {{performance}}, {{as well as}} {{the performance}} of the code that they produce, has been a subject of analysis. It is preferable that the improvement in modularity supplied by aspect weaving does not impact run-time performance. Aspect weavers are able to perform aspect-specific optimizations. While traditional optimizations such as the elimination of unused special variables from aspect code can be done at compile-time, some optimizations can only be performed by the aspect weaver. For example, AspectJ contains two similar but distinct keywords, thisJoinPoint, which contains information about this particular instance of woven code, and thisJoinPointStaticPart, which contains information common to all instances of code relevant to that set of advice. The optimization of replacing thisJoinPoint with the more efficient and static <b>keyword</b> thisJoinPointStaticPart can only be done by the aspect weaver. By performing this replacement, the woven program avoids the creation of a join point object on every execution. Studies have shown that the unnecessary creation of join point objects in AspectJ can lead to a performance overhead of 5% at run-time, while performance degradation is only approximately 1% when this object is not created.|$|E
25|$|As {{a general}} rule, GNU Octave recognizes as {{termination}} {{of a given}} block either the <b>keyword</b> 'end' (which {{is compatible with the}} Matlab language) or a more specific <b>keyword</b> 'end_block. As a consequence, an 'unwind_protect' block can be terminated either with the <b>keyword</b> 'end_unwind_protect' as in the example, or with the more portable <b>keyword</b> 'end'.|$|E
5000|$|Unlike ASN.1, ECN {{allows the}} user of the {{language}} to define synonyms of ECN constructor <b>keywords</b> (e.g., [...] ). Therefore in ECN there are user-defined ECN constructor <b>keywords</b> as well as built-in ECN constructor <b>keywords.</b>|$|R
5000|$|Around 84% apps in the {{app store}} {{did not have}} <b>keywords</b> in their titles. the other hand, only 16% apps used <b>keywords</b> in the app titles. While the app store search {{algorithm}} is always changing, {{some have suggested that}} <b>keywords</b> in the app title may have more impact on rankings than those entered in the <b>Keywords</b> field.|$|R
30|$|The {{reviewed}} {{papers are}} identified through <b>keywords</b> in referenced electronic databases, such as Google Scholar, Web of Science, ERIC, PsycInfo, PsycArticles Fulltext Search, InterDok, ProQuest, Scopus, BEI, and SearchPlus. The <b>keywords</b> for learning outcomes are {{a combination of}} the term games or simulations paired with the term higher education, employing the Boolean operator “AND”. Additional <b>keywords</b> for learning outcomes are learning objectives, learning goals, learning objectives and effects. <b>Keywords</b> for platform and delivery methods include computer-based, web-based, digital, virtual, online, and technology. <b>Keywords</b> for games and simulations are educational games, business simulations, role-playing simulations, game-based learning, video games, and serious games. Moreover, the Boolean operator “OR” is employed to combine all these <b>keywords.</b> The study sets the broadest range of <b>keywords,</b> so as not to limit the scope of related articles.|$|R
25|$|In the COBOL {{programming}} language, THRU {{is accepted}} as an abbreviation of the <b>keyword</b> THROUGH. Since programmers {{like to keep}} their code brief, THRU is generally the preferred form of this <b>keyword.</b>|$|E
25|$|Most {{programming}} languages {{with control}} structures have an initial <b>keyword</b> {{which indicates the}} type of control structure involved. Languages then divide {{as to whether or}} not control structures have a final <b>keyword.</b>|$|E
25|$|Finding {{information}} through <b>keyword</b> search.|$|E
5000|$|The app {{description}} {{has very}} different roles in ASO, when comparing the Apple App Store and the Google Play Store. <b>Keywords</b> in the description do not factor into the <b>keywords</b> that Apple associates with the app. However, <b>keywords</b> in the app description of Play Store apps are {{a primary source}} of <b>keywords</b> that Google uses to determine what an app is about.|$|R
5000|$|<b>Keywords</b> are not static. Some newfound censored <b>keywords</b> are in {{response}} to current news events; ...|$|R
30|$|Relevance: The {{candidate}} {{must contain}} {{one of the}} concept <b>keywords</b> {{and one of the}} question-type <b>keywords.</b>|$|R
25|$|This shows all {{the uses}} of the <b>keyword.</b>|$|E
25|$|If {{comparison}} compares {{two members}} directly after an if <b>keyword.</b>|$|E
25|$|Degrad {{takes its}} <b>keyword</b> L, {{which can be}} any noun, as its DSyntA I.|$|E
50|$|In fact, {{the current}} {{software}} filter contains about 85% political <b>keywords,</b> and only 15% pornography-related <b>keywords.</b>|$|R
5000|$|Meta-tag Stuffing - Repeating <b>keywords</b> in meta tags and/or using <b>keywords</b> {{unrelated}} to the site's content ...|$|R
50|$|Both C and Pascal use <b>keywords</b> (words {{reserved}} {{for use by}} the language itself). Examples are if, while, const, for and goto, which are <b>keywords</b> that happen to be common to both languages. In C, the basic built-in type names are also <b>keywords</b> (e.g. int, char) or combinations of <b>keywords</b> (e.g. unsigned char), while in Pascal the built-in type names are predefined normal identifiers.|$|R
