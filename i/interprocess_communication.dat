614|11|Public
2500|$|CNET {{journalist}} Declan McCullagh called [...] "series of tubes" [...] an [...] "entirely reasonable" [...] {{metaphor for}} the Internet, noting that some computer operating systems use the term 'pipes' to describe <b>interprocess</b> <b>communication.</b> McCullagh also suggested that ridicule of Ted Stevens was almost entirely political, espousing his belief that if Ted Stevens has spoken in a similar manner, yet in support of Net Neutrality, [...] "the online chortling would have been muted or nonexistent." ...|$|E
2500|$|Linear types, {{based on}} the theory of linear logic, and closely related to {{uniqueness}} types, are types assigned to values having the property that they have one and only one reference to them at all times. These are valuable for describing large immutable values such as files, strings, and so on, because any operation that simultaneously destroys a linear object and creates a similar object (such as 'str= str + [...] "a"') can be optimized [...] "under the hood" [...] into an in-place mutation. Normally this is not possible, as such mutations could cause side effects on parts of the program holding other references to the object, violating referential transparency. They are also used in the prototype operating system Singularity for <b>interprocess</b> <b>communication,</b> statically ensuring that processes cannot share objects in shared memory {{in order to prevent}} race conditions. The Clean language (a Haskell-like language) uses this type system in order to gain a lot of speed (compared to performing a deep copy) while remaining safe.|$|E
50|$|<b>Interprocess</b> <b>Communication</b> - The system {{provides}} the capability, through <b>interprocess</b> <b>communication</b> (IPC), for two programs (tasks) to exchange information.|$|E
50|$|PDO {{continues}} {{to be used by}} Mac OS X programmers as a method for <b>interprocess</b> and interapplication <b>communication,</b> and for communication between networked applications that only need compatibility with other Mac OS X applications.|$|R
40|$|On the Windows {{platform}} {{a standardized}} model for component services and <b>interprocess</b> and inter-machine <b>communication</b> {{has been established}} by Microsoft [...] -COM. As many applications provide their own or use third party COM services, extending R by means of COM interfaces is a natural way for integration of R into the user's desktop. This pape...|$|R
40|$|A well chosen, {{comprehensive}} set of kernel primitives {{is essential}} for the construction of higher levels of a computer's operating system. In particular, although many solutions to the classical operating system problems of <b>interprocess</b> synchronization and <b>communication</b> have been proposed in the past, difficulties with destination naming and language construct symmetry have continued to mar most proposed solutions. This thesis proposes a set of primitives, the Rendezvous primitives, that form the kernel of an operating system. It is argued that the Rendezvous primitives constitute a reasonable and practical set of operations on which to base an operating system. The Rendezvous primitive itself is presented as a solution to the <b>interprocess</b> synchronization and <b>communication</b> problems. A rendezvous occurs when two processes synchronize and subsequently exchange messages. Rendezvous is symmetric, in that processes that wish to communicate both use the same primitive; and processes invoke Rendezvous with class designations, not procedure names. Rendezvous is presented {{within the context of the}} other primitives, which support the restriction of access to Rendezvous, process creation and destruction, process scheduling, and stack resource management. A comparison of Rendezvous and existing primitives and language constructs to solve <b>interprocess</b> synchronization and <b>communication</b> is made. The full syntax and semantics of the Rendezvous primitives are presented, along with a discussion of their design rationale. The Crossbar Switch, a generalized virtual device interconnection and reconfiguration scheme, is presented as an example of the use to which the Rendezvous primitives might be put. A high level program description of the Crossbar Switch is presented as well. The thesis concludes with a description of the implementation of the Rendezvous kernel on a DEC PDP 11 / 60. The kernel code is given in an appendix...|$|R
5000|$|Language {{support of}} {{processes}} and <b>interprocess</b> <b>communication.</b>|$|E
5000|$|Component Object Model for in-process and <b>interprocess</b> <b>communication.</b>|$|E
5000|$|Support for <b>interprocess</b> <b>communication</b> {{and remote}} {{procedure}} calls.|$|E
40|$|In {{this study}} it is {{proposed}} a formal semantics for Basic LOTOS (Language Of Temporal Ordering Specification). The subset of LOTOS, where processes {{interact with each}} other by pure synchronizations, without exchanging values. In basic LOTOS the expressiveness of all the LOTOS process constructors (operators) can be appreciated without being distracted by <b>interprocess</b> value <b>communication.</b> LOTOS is an FDT generally applicable to distributed, concurrent information processing systems. During the last decade, a lot of works have been devoted to compilation and verification of LOTOS specifications. While using extended Petri nets as tool for compile a subset of LOTOS has already been pointed out. In this research it is proposed to extensively make use of a specific kind of high level Petri nets: the M-nets. Such nets, allowing for compositionality, appear particularly well-suited to give a formal semantics for basic LOTOS...|$|R
40|$|This paper {{describes}} a distributed software control structure {{developed for the}} CMU Rover, an advanced mobile robot equipped {{with a variety of}} sensors. Expert modules control the operation of the sensors and actuators, interpret sensory and feedback information, build an internal model of the robot's working environment, devise strategies to accomplish proposed tasks and execute these strategies. Each expert module is composed of a pair of (master, slave) processes, where the master process controls the scheduling and working of the slave process. Communication among expert modules occurs asynchronously over a blackboard structure. Information specific to the execution of a given task is provided through a control plan. The system is distributed over a network of processors. Real-time operating system kernels local to each processor and an <b>interprocess</b> message <b>communication</b> mechanism ensure transparency of the underlying network structure. The various parts of the system are presented in this paper and future work to be performed is mentione...|$|R
40|$|On the Windows {{platform}} {{a standardized}} model for component services and <b>interprocess</b> and inter-machine <b>communication</b> {{has been established}} by Microsoft—COM. As many applications provide their own or use third party COM services, extending R by means of COM interfaces is a natural way for integration of R into the user’s desktop. This paper discusses the mechanisms available to R users for integration of R into Windows applications and vice versa. As an example for this integration, we will show how to utilize the COM services provided by Excel from R {{and how to use}} R functionality from within the spreadsheet’s macro language VBA. ...|$|R
5000|$|Microsoft Message Queuing (MSMQ), which {{improved}} <b>interprocess</b> <b>communication</b> ...|$|E
5000|$|Named pipe - {{persistent}} pipes {{used for}} <b>interprocess</b> <b>communication</b> ...|$|E
5000|$|Anonymous pipe - a FIFO {{structure}} {{used for}} <b>interprocess</b> <b>communication</b> ...|$|E
40|$|The Common Object Request Broker Architecture (CORBA) is a {{software}} system {{to deal with}} distributed object computing. The release of CORBA version 2, and real implementations from numerous vendors (both freeware and payware) have made its use very attractive for <b>interprocess</b> and interprocessor <b>communication</b> within an object-oriented software system. Anumber of object request brokers (ORBs) were evaluated for possible use within the BABAR Online system. Given an expectation for a reasonable level of performance within the Online system, it was essential to characterize the behaviour and test the response of these products prior to their adoption. This paper summarizes {{the results of a}} systematic performance study of six ORB products. The products tested include: Visibroker, Orbix, DAIS, Omnibroker, OmniORB 2, and TAO. Performance results of ORB products, including a test of TCP/IP sockets, are compared. These tests resulted in the adoption of the TAO ORB for use within the BABAR Online system. ...|$|R
40|$|Power {{consumption}} is a troublesome design constraint for emergent {{systems such as}} IBM’s BlueGene /L. If current trends continue, future petaflop systems will require 100 megawatts of power to maintain high-performance. To address this problem the power and energy characteristics of highperformance systems must be characterized. To date, power-performance profiles for distributed systems have been limited to interactive commercial workloads. However, scientific workloads are typically non-interactive (batched) processes riddled with <b>interprocess</b> dependences and <b>communication.</b> We present a framework for direct, automatic profiling of power consumption for non-interactive, parallel scientific applications on high-performance distributed systems. Though our approach is general, we use our framework to study the power-performance efficiency of the NAS parallel benchmarks on a 32 -node Beowulf cluster. We provide profiles by component (CPU, memory, disk, and NIC), by node (for each of 32 nodes), and by system scale (2, 4, 8, 16, and 32 nodes). Our results indicate power profiles are often regular corresponding to application characteristics and for fixed problem size {{increasing the number of}} nodes always increases energy consumption but does not always improve performance. This finding suggests smart schedulers could be used to optimize for energy while maintaining performance. 1...|$|R
40|$|This paper {{describes}} a distributed software control structure developed describe a Distributed Control System {{designed for the}} Rover, and for the CMU Rover, an advanced mobile robot equipped with a variety present of one control configuration, which is being developed for obstacle-sensors. Expert modules are used to control {{the operation of the}} sensors avoidance tasks. and actuators, interpret sensory and feedback data, build an internal model of the robot's environment, devise strategies to accomplish proposed 2 Hardware tasks Structure and execute these strategies. Each expert module is composed of a master The CMU Rover Project is a continuation of research begun with the process and a slave process, where the master process controls the Stanford Cart [2. 4], a minimal computer controlled mobile camera scheduling and working of the slave process. Communication among platform. I&quot;hc Rover [1] is intended to support a variety of Al research in expert modules occurs asynchronously over a blackboard structure. the areas of perception (sensory data processing and understanding), Information specific to the execution of a given task is provided through control, a real-world modelling, problem-solving, planning and related control plan. The system is distributed over a network of processors. issues. Real- For this reason, the system is being designed along the following time operating system kernels local to each processor and an <b>interprocess</b> guidelines: message <b>communication</b> mechanism ensure transparency of the underlying network structure. The various parts of the system are presented in this • mechanical, sensor and controller flexibility; paper and future work to be performed is mentioned • enough onboard processing capabilities to enable it to function autonomously, but with connections to a remote...|$|R
5000|$|... port object {{represents}} a port and message queue for <b>interprocess</b> <b>communication</b> ...|$|E
50|$|Streams {{can be used}} as the {{underlying}} data type for channels in <b>interprocess</b> <b>communication.</b>|$|E
5000|$|Mathematica {{manages the}} <b>interprocess</b> <b>communication</b> such as queueing, virtual shared memory, and failure recovery.|$|E
40|$|A new {{programming}} language called TELOS is introduced through a complete specification of its syntax and an informal description of its semantics. The design of TELOS {{is discussed in}} view {{of a set of}} language design goals and the needs of artificial intelligence (AI) programming. TELOS is an attempt to provide powerful abstraction mechanisms and other structuring facilities within a language that provides the special capabilities needed for A 1 research. Like most other A 1 languages, TELOS includes facilities needed for experimentation with large stores of general knowledge, tentatively modifiable and associatively referencable, and with various planning and reasoning strategies. However, in contrast to other A 1 languages whose design has focused on building in certain powerful high-level constructs, the design of TELOS has focused on building in powerful abstraction mechanisms with which these particular high-level constructs, as well as numerous others, can be defined and implemented with reasonable ease. Recently, {{programming language}}s have begun to appear with features specifically designed to facilitate abstraction of the several different kinds needed in the programming process, in particular, data abstraction and control abstraction as well as procedural abstraction. TELOS implements a set of data, control, and procedural abstraction mechanisms specifically tailored to AI requirements. By emphasizing abstraction mechanisms rather than high-level constructs, it has been possible to minimize theoretical bias in the language, making TELOS potentially usable for investigation of competing theories. The data abstraction capabilities provided in TELOS add to the already powerful data type extension capabilities of PASCAL. A programmer may define a problem-specific data type by including details of representation and implementation within a definitional scoping called a "capsule". The procedures and functions which realize possible primitive operations on objects of the type being defined {{are an integral part of}} the definition, and the objects are characterized and used in terms of these defining operations. The control abstraction capabilities provided in TELOS enable convenient programmer definition of the novel kinds of control regimes which are investigated in AI research, that is, those which realize alternative problem-solving strategies. Just as TELOS capsules localize data representation details, TELOS "overseers" localize <b>interprocess</b> control-transfer and <b>communication</b> details needed to realize desired control regimes. Besides its abstraction mechanisms, TELOS contains other facilities which can contribute to the building of well-structured programs, starting with the rich set of program structuring facilities already available in PASCAL. If used correctly, these facilities can result in modularized, hierarchical programs with reasonably comprehensible control and data flows. The design of TELOS is based on many of the same goals as the design of PASCAL, though TELOS reflects a different, relative emphasis among the goals. There are conflicts between the need to include certain language capabilities seen as necessary to support effective AI programming and the goals of simplicity and minimality. The TELOS design attempts to m ediate the conflicts with compromises intended to provide support for programming effectiveness, ease of debugging, program comprehensibility and evolutionary program development. Several benefits should accrue for AI research from such a language design: (1) AI programs are highly complex. TELOS provides many aids to managing and containing program complexity. (2) Much of AI programming involves putting preliminary ideas and hypotheses into programs and then changing the programs as suggested by experience with them. The improved program comprehensibility possible with TELOS can make this kind of evolutionary programming easier and more efficient. (3) Improved AI programmer productivity, as is possible with the features TELOS provides, will mean improved AI research productivity...|$|R
50|$|In computing, Dynamic Data Exchange (DDE) is {{a method}} of <b>interprocess</b> <b>communication</b> under Microsoft Windows or OS/2. It allows one program to {{subscribe}} to items made available by another program, for example a cell in a Microsoft Excel spreadsheet, and be notified whenever that item changes. DDE was partially superseded by Object Linking and Embedding (OLE), but remains used for simple <b>interprocess</b> <b>communication</b> tasks.|$|E
5000|$|The ipcs command will list System V <b>InterProcess</b> <b>Communication</b> System's API kernel {{entities}} to stdout.System V IPC kernel entities are: ...|$|E
5000|$|Database-as-IPC: Using a {{database}} as the message queue for routine <b>interprocess</b> <b>communication</b> where {{a much more}} lightweight mechanism would be suitable ...|$|E
5000|$|<b>Interprocess</b> <b>communication</b> information: various flags, {{signals and}} {{messages}} {{associated with the}} communication among independent processes may be stored in the PCB.|$|E
50|$|In {{computing}} {{environments that}} support the pipes and filters model for <b>interprocess</b> <b>communication,</b> a FIFO is another name for a named pipe.|$|E
50|$|All <b>interprocess</b> <b>communication</b> in URLSA is {{conducted}} via web services, {{with the exception}} of updates, which are transmitted as UDP datagrams for reasons of efficiency.|$|E
50|$|PROIV has no inbuilt {{support for}} <b>Interprocess</b> <b>Communication</b> (IPC) mechanisms, {{although}} {{this can be}} added via the ability to extend the PROIV kernel in C.|$|E
5000|$|The ipcrm command {{will mark}} System V <b>interprocess</b> <b>communication</b> API kernel {{entities}} for removal,deferred {{until the last}} connected process detaches.System V IPC kernel entities are: ...|$|E
5000|$|Uniface Router—a multi-threaded process {{responsible}} for <b>interprocess</b> <b>communication</b> in Uniface applications. It starts and stops Uniface Server processes, performs load balancing, and passing messages between various Uniface processes.|$|E
50|$|Ecasound allows {{flexible}} interconnection {{of audio}} inputs, files, outputs, and effects algorithms, realtime-controllable by builtin oscillators, MIDI, or <b>interprocess</b> <b>communication</b> via GUI front-end. Ecasound supports JACK and LADSPA effects plug-ins.|$|E
5000|$|AMF Remoting - {{a binary}} {{protocol}} {{used to improve}} application performance through a more streamline communication path for <b>interprocess</b> <b>communication</b> (client-to-server, server-to-server, client-to-client and server-to-client). (See AMF vs Web Services.) ...|$|E
50|$|In computing, {{redirection}} {{is a form}} of <b>interprocess</b> <b>communication,</b> and is {{a function}} common to most command-line interpreters, including the various Unix shells that can redirect standard streams to user-specified locations.|$|E
5000|$|AppleEvents. Supporting AppleScript {{was a new}} <b>interprocess</b> <b>communication</b> {{model for}} [...] "high-level" [...] events to be sent into applications, along with support to allow this to take place over an AppleTalk network.|$|E
50|$|Parlog is a logic {{programming}} language designed for efficient utilization of parallel computer architectures. Its semantics {{is based on}} first order predicate logic. It expresses concurrency, <b>interprocess</b> <b>communication,</b> indeterminacy and synchronization within the declarative language framework.|$|E
