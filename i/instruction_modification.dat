4|56|Public
50|$|Code {{is written}} as an <b>Instruction</b> <b>Modification</b> Parameter (IMP) {{followed}} by the operation. The table below shows {{a list of all}} the IMPs in Whitespace.|$|E
40|$|In {{this paper}} we {{introduce}} {{the concept of}} a systolic control ring instruction processor (SCRIP). A SCRIP is a general purpose systolic computer which combines features of wavefront and systolic data flow for the execution of programs, while also being amenable to VLSI implementation. The main idea is to overcome the problems of large input-output bandwidths by boot-strapping an algorithm using a number of controlled bandwidth expansions. Delayed wavefront programs and dynamic <b>instruction</b> <b>modification</b> are introduced as mechanisms to simulate arbitrary wavefront programs and a number of different examples are discussed...|$|E
40|$|Strategies of {{classroom}} intervention for emotional/behavioral disordered (EBD) children were investigated. The definition of EBD is provided, {{in addition to}} background information concerning EBD, including manifestation of EBD, possible causes, racial and gender trends, and current levels of education achieved by EBD students. Through a review of literature, a number of intervention strategies {{were found to be}} effective, including behavior management systems, social skills <b>instruction,</b> <b>modification</b> of instruction and instructional materials, peer support, self-evaluation, and increased opportunity to respond. The collaborated information is intended to be used by educators in order to increase the EBD student 2 ̆ 7 s chance for academic success...|$|E
5000|$|Lack of {{versatility}} - Injecting code into {{an existing}} script {{means that the}} limited space given only allows for simple <b>instruction</b> <b>modifications</b> and the language used is only assembly.|$|R
25|$|Most {{of the new}} <b>instructions</b> are <b>modifications</b> of {{existing}} <b>instructions</b> to handle {{the existence of the}} additional registers, such as load, store, add, and the like. Genuine 6309 additions include inter-register arithmetic, block transfers, hardware division, and bit-level manipulations.|$|R
40|$|Most science {{educators}} {{report a}} willingness to teach students with learning and behavioral differences; however, they often also indi-cate having limited information {{about how to make}} the science classroom more accessible. One avenue of support is the modifi-cation of science instructional materials in order to reduce barriers that may exist as a result of poor reading, organization, or work-completion skills. Some suggestions for <b>instruction</b> <b>modifications</b> are provided in this article. Also included is a sample science activity that was redesigned to support students with learning and behavioral concerns. Inclusion of students with disabilities in general N classes is considered the best practice in today’s N schoots. ! his increased practice has resulted in t more and more students receiving the bulk of thei...|$|R
40|$|Smart {{cards are}} in the {{embedded}} world {{one of the few}} hardware devices that can be subject to targeted physical attacks from malicious and skilled people. These physical attacks can target any element of the chip resulting in unpredictable effects on the executed software. For an applicative developer who is more familiar with a high level language, it is a difficult task to predict the consequences of such low level attacks. Analysing the consequences of a physical attack and creating a realistic and plausible attack model is the first step that leads {{to a better understanding of}} the security of an application. But even with this model it is still difficult to pinpoint locations in the source code where physical attacks might lead to security vulnerabilities. Different approaches and techniques exist to simulate faults at hardware or software level. However most of them focus either on a high level of abstraction as with software fuzzing techniques or a precise description of the low level hardware as with a VHDL simulator. Since one of the developer's goals is to implement high level countermeasures to prevent low level attacks, both preceding approaches lack of expressiveness. Thus, the challenge is to simulate with additional C code the consequences of low level attacks such as register disruption, processor <b>instruction</b> <b>modification,</b> arbitrary jumps. The second difficulty is to deal with the number of possible attacks which is related to the code size, the size of variable domains and the persistence of the attack effect. As it is impossible to exhaustively simulate all the possible attacks, our study focuses on jump attacks. These are classical attacks that lead to a change in the control flow of the code and can be used to bypass security checks. In this talk we will present a cost effective methodology and a technical solution to simulate, at C level, the effects of physical jump attacks. Experimental results compare the effect of simulated high level attacks to physical low level attacks. In order to benchmark and validate the methodology, the experiments use the SPEC 2000 benchmarks with well- studied open source C codes. To make the analogy with the smart card, we consider that a successful attack against a SPEC 2000 software induces a termination with a wrong output. Crashes and non terminating executions are safe results from a security point of view. The results also show how to identify vulnerable functions in a complete application. The knowledge of potential vulnerable locations in the source code of a project will enable a software developer to implement his countermeasures accordingly with more precision and assurance...|$|E
40|$|MVP Forth is fig-FORTH modilied by 100 % of the FORTH- 79 Standard Required Word Set {{plus the}} {{vocabulary}} for the instructional book Sfarfrng FORTH Editor. assembler and utilities are included Transportabiity of programs is assured since the kernal of MVP-FORTH {{is the same}} for all computers to the machine dependent READlWRlTE <b>instructions</b> <b>Modification</b> and extension (up or down) is simplified by having the source code and through the use of MVP-FORTH Programming Aids and Cross Compilers The CP/MO are supplied on 8 ” SS/SD IBM 3740 format disks The include a track and sector calculation array for down loading to other sizes and formats Other disks are machine specific All Aboul FORTH is an annotated glossary of MVP-FORTH words as well as other dialects It is in 8080 code other MVP-FORTH implementations include documentation of the differences between it and olher CPU sand computer...|$|R
40|$|The {{purposes}} of this study were as follows: to provide an exhaustive review of the literature dealing with the notion of paragraph; to determine whether selected grade nine students were sufficiently cognizant of the concept of paragraph to be able to differentiate between units of print which were paragraphs and units of print which were not paragraphs; and to provide suggestions dealing with curriculum and instruction of the paragraph. [...] The subjects for this study were 331 grade nine students from four high schools in Newfoundland. The schools are located in four distinct geographical regions of the province. [...] A ten-item test was administered to the subjects. The test was comprised of five items that were paragraphs and five items that were non-paragraphs. [...] The results suggested that, in general, the subjects could not differentiate between paragraph and non-paragraph items. This inability was interpreted as reflecting a lack of knowledge {{on the part of the}} subjects as to what a paragraph is. [...] Recommendations for teacher training programs, curriculum and <b>instruction</b> <b>modifications,</b> and further research were proposed...|$|R
2500|$|There were <b>modification</b> <b>instructions</b> {{available}} for the A500 to solder or socket another 512RAM on the board, then run extra address lines to the trapdoor slot to accommodate an additional [...] of fast or chip RAM depending on the installed chipset.|$|R
50|$|There are {{different}} kinds of layers, {{and not all of}} them exist in all programs. They represent a part of a picture, either as pixels or as <b>modification</b> <b>instructions.</b> They are stacked on top of each other, and depending on the order, determine the appearance of the final picture.|$|R
40|$|Information {{flow control}} allows {{enforcement}} of end-to-end confidentiality policies {{but has been}} difficult to put in practice. This paper introduces a pragmatic new approach for tracking information flow while the process is running at the same time applying dynamic label binding. The underlying implementation mechanism uses machine code <b>instruction</b> stream <b>modification</b> to track individual data movements and manipulations within the address space of an application. This gives the ability to precisely determine all information flow causing operations and apply controls that do not overly restrict what computations can be performed...|$|R
40|$|Controlled Technology: 1) Design: {{preliminary}} or critical design data, schematics, technical flow charts, SNV code/diagnostics, logic flow diagrams, wirelist, ICDs, {{detailed specifications}} or requirements. 2) Development: constraints, computations, configurations, technical analyses, acceptance criteria, anomaly resolution, detailed test plans, detailed technical proposals. 3) Production: process or how-to: assemble, operated, repair, maintain, modify. 4) Manufacturing: technical instructions, specific parts, specific materials, specific qualities, specific processes, specific flow. 5) Operations: how-to operate, contingency or standard operating plans, Ops handbooks. 6) Repair: repair instructions, troubleshooting schemes, detailed schematics. 7) Test: specific procedures, data, analysis, detailed test plan and retest plans, detailed anomaly resolutions, detailed failure causes and corrective actions, troubleshooting, trended test data, flight readiness data. 8) Maintenance: maintenance schedules and plans, methods for regular upkeep, overhaul <b>instructions.</b> 9) Modification: <b>modification</b> <b>instructions,</b> upgrades kit parts, including softwar...|$|R
40|$|The {{instructions}} that transmit data between the index registers {{and the memory}} work only on the left half (address) portion of memory. These instructions are LDXn (load index n from address of storage word). And STXn (store the contents of index n in address of storage word). The effective address of both of these <b>instructions</b> includes <b>modification</b> by index registers. A corresponding set of instructions for transmitting data to or from the right half of memory would facilitate list structure operations. The present order code {{makes it impossible to}} so list-chaining operations (car or cdr) without disturbing the A or Q registers...|$|R
50|$|Instructions {{and data}} {{are based on}} a 39-bit word length with binary {{representation}} in 2's complement arithmetic. The instruction set operates on a single address and single accumulator register, with an additional auxiliary register for double length integer multiply and divide. Although it is believed that the single length divide and square root instructions were only enabled in 803s destined for process control applications, the one remaining operational 803B has been found to have these instructions enabled, probably because it was used by a software house to develop real time and process control applications. An instruction is composed of a 6-bit instruction (conventionally represented in octal) and a 13 bit address. This gives 64 instructions organised as 8 groups of 8 instructions. The 13 bit memory address field gives an addressable range of 8192 words. These 19-bit instructions are packed two to a word with an additional 39th bit between them, the so-called B-line or B digit (the term is a legacy from the Ferranti Mark 1 computer, where the A-line represented the accumulator and the B-line an instruction modifier, both displayed on a Williams tube). Setting the B digit has the effect of adding the contents of the memory address of the first instruction to the second instruction at execution time, enabling indirect addressing and other run-time <b>instruction</b> <b>modifications.</b> The bit time is 6 microseconds, jumps execute in 288 microseconds and simple arithmetic instructions in 576 microseconds. Floating point operations take several milliseconds. IO is direct and there are no interrupts.|$|R
40|$|We {{formally}} {{define the}} Self-Modifying Finite Automaton (SMFA), {{a model of}} computation introduced in [RS 93, RS 94, RS 95], as a subclass of a new more general model, the Self-Modifying Automaton (SMA). SMAs are similar to standard finite automata, but changes to the transition set are allowed during a computation. An SMFA is constrained in that it can have only finitely many different <b>modification</b> <b>instructions,</b> {{and the effect of}} each instruction must be computabl...|$|R
5000|$|The solution, {{which was}} {{provided}} to all aircraft already delivered at no cost, was known as Operation [...] "Cardinal Rule" [...] and included a series of 23 inspection, installation, and <b>modification</b> <b>instructions.</b> This Service Letter, SE68-14, consisted of modifying the stabilator to install slots just behind the leading edge (to delay the onset of stabilator stall) and installing full counterbalance (11 pounds versus the original 7 pounds) on the stabilator to eliminate the PIO problem.|$|R
40|$|Expressive arts therapies are a rich {{resource}} {{for use with}} children and adolescents, who are often unresponsive to traditional talk therapy, and highly useful to school counselors who must overcome cultural, language, and ability barriers that are increasingly present in diverse and multicultural school settings. This is the first book written specifically for school counselors about using creative and expressive arts counseling techniques in school settings. It presents over 100 interventions using art, drama, music, writing, dance, and movement that school counselors can easily incorporate into their practices with individual students and groups, and in classroom settings. These creative interventions, based on the American School Counselor Association (ASCA) National Model framework, support the key student domains of academic, career, and personal/social development. The text also meets the important demand for accountability in school counseling by providing guidelines for evaluating the effectiveness of each intervention. Addressing such issues as emotional expression, social skills development, managing anger/aggression, developing self-esteem, working well with diverse peers, career exploration, and academic skill development, the book is organized by specific types of expressive arts therapies {{and how they can}} be used to support different domains in the ASCA model. Each intervention outlines the presenting concerns for which it is most useful, appropriate grade levels, required materials, preparation needed, step-by-step <b>instructions,</b> <b>modifications</b> for special needs students, and an outcome assessment plan. A handy quick reference chart helps readers to quickly locate appropriate interventions for specific concerns. Ideal for the school counselor, social worker, or psychologist who may not have specific training in arts therapies, this book can also help trained arts therapists who will be working in a school setting to select appropriate interventions. [...] from Amazo...|$|R
40|$|A Dynamic Instruction Set Computer (DISC) {{has been}} {{developed}} to support demand-driven <b>instruction</b> set <b>modification.</b> Using partial reconfiguration, DISC pages instruction modules {{in and out of}} an FPGA as demanded by the executing program. Instructions occupy FPGA resources only when needed and FPGA resources can be reused to implement an arbitrary number of performance-enhancing application-specific instructions. DISC further enhances the functional density of FPGAs by physically relocating instruction modules to available FPGA space. An image processing application was developed on DISC to demonstrate the advantages of paging application-specific instruction modules. Keywords: FPGA processor, run-time reconfiguration, relocatable hardware, application-specific processor 1 INTRODUCTION For many digital systems, general purpose processors do not provide sufficient processing power to operate acceptably in real-time environments. Specialized computing resources, such as digital signal p [...] ...|$|R
40|$|Polymeric {{solution}} pendant at {{the outlet}} of a capillary can spray in {{the forms of}} single-jet, multi-jet, drop, and atomization under an actuated pulse voltage in near field. The electrohydrodynamic (EHD) spraying mode depends on electric and mechanical stresses, which are related to physical properties of applied solution and collector, on the liquid meniscus. Experimentally and analytically, the liquid meniscus emits the jet preferably under a solution with low electrical conductivity over a conducting or semi-conducting collector. Furthermore, the multi-jet comes from an applied solution with low surface tension; the atomization happens under the applications of a solution with high electrical conductivity and/or an isolated collector; and the big drop occurs under an applied solution with high viscosity. The results provide a significant <b>instruction</b> for <b>modifications</b> of solution and collector in pulsated EHD printing...|$|R
40|$|Although {{modeling}} of physical systems {{is a key}} engineering task, the educational literature provides little guidance on how to systematically include modeling exercises in instruction. To this end, this paper presents work-in-progress involving {{the introduction of a}} framework of modeling in an environmental geotechnics course. The framework unpacks the components of the modeling process, placing particular emphasis on the simplifications made when considering relevant phenomena, determining parameters and variables, specifying geometry and boundary conditions, selecting and solving governing equations. Explicit modeling <b>instruction</b> required <b>modification</b> of learning outcomes and corresponding revisions of instructional material, example problems and exam questions. The development of a larger-scale term project is underway, designed so that students gain confidence when selecting different levels of approximations, through comparisons of numerical solutions at different degrees of idealization with simplified analytical solutions. Copyright ASCE 2008...|$|R
40|$|This study {{considers}} children 2 ̆ 7 s mathematical {{learning in}} social context. In particular, {{the learning of}} place value concepts and the interpretation {{and use of the}} standard addition algorithm were studied in the context of third-grade textbook-based <b>instruction.</b> <b>Modifications</b> in the mathematical beliefs and constructions of three children from a second-grade Purdue Problem-Centered Mathematics Project class were studied as they were acculturated into the tradition of elementary school mathematics. Twenty-seven of the daily mathematics lessons were video-taped over an eight week period. Analysis of transcripts from a socioconstructivist perspective provides an empirically grounded description of the constitution of interaction patterns and of the process by which mathematical practices become institutionalized in a classroom community. Case studies based on Piagetian clinical interviews were used to document the children 2 ̆ 7 s mathematical constructions before and after instruction. Classroom transcripts were also analyzed for evidence of the children 2 ̆ 7 s mathematical activity during the observation period. ^ The analysis of interaction patterns showed that the mathematical discourse of this classroom community was characterized by a definition of mathematical activity as the following of procedural instructions set forth by the teacher, and by an absence of explanations and justifications on the part of either student or teacher. The case studies demonstrated that the influence of this type of discourse on the children 2 ̆ 7 s beliefs about mathematics and on their mathematical constructions was undesirable. One of the three children initially held instrumental beliefs compatible with those held by this community, and quickly learned to complete the tasks correctly despite her concept of ten as an abstract singleton. Another child was able to complete the assigned tasks appropriately because she did not try to please the teacher by following procedural instructions. Instead, she tried to interpret the school-taught procedures in terms of her personally meaningful methods. The third child was unable to complete tasks correctly despite his efficient self-generated algorithms. This occurred because he tried to please the teacher by following her procedural instructions, but without understanding them. ...|$|R
40|$|Array and pointer {{references}} are often ambiguous in that compile time analysis cannot always determine if distinct {{references are}} to the same object. Ambiguously aliased objects are not allocated to registers by conventional compilers due {{to the cost of}} the loads and stores required to keep register copies consistent with memory and each other. These instructions affect performance by generating memory traffic. There are several hardware and software strategies {{that can be used to}} solve the ambiguous alias problem; we have implemented one such scheme called CRegs in a compiler and instruction level simulator. We present a modification to Briggs' optimistic coloring algorithm that allows us to allocate local and parameter arrays to CRegs. The CRegs register file operation and <b>instruction</b> set <b>modifications</b> required to implement this scheme are discussed. Underlying hardware issues such as pipeline impact and chip area are briefly discussed. Several benchmarks are compared in [...] ...|$|R
40|$|This paper {{presents}} a general approach to automatically validate code-improving transformations on low-level program representations. The approach ensures the correctness of compiler and hand-specified optimizations at the machine instruction level. The method verifies the semantic equivalence {{of the program}} representation before and after a transformation to determine {{the validity of the}} transformation, i. e. whether the instance of the transformation is semantics preserving. To verify that the transformation is semantics preserving, the method derives semantic effects from the sequence of low-level instructions that span the execution paths affected by the transformation. The semantics are preserved if the normalized semantic effects derived from the code before and after the transformation are proven to be identical. A validating compilation system was implemented that is able to validate basic changes comprising <b>instruction</b> insertions, <b>modifications,</b> and deletions, to more powerful transformations that modify the branch structure of a function in a program. ...|$|R
30|$|Ten-gram {{specimens}} {{taken from}} each wood sample {{were placed in}} a stainless steel chamber and then ground with by TissueLyser (Qiagen, Venlo, The Netherlands). DNA was extracted from 1  g of the powdered wood sample by the modified benzyl chloride method [19] using the ISOPLANT II DNA extraction kit (Nippon Gene, Tokyo, Japan) following the manufacturer’s <b>instruction</b> with some <b>modifications.</b> Crude DNA was purified using PowerSoil®DNA Isolation Kit (Mo bio, CA, USA). Whole-genome amplification was conducted using illustra GenomiPhi V 2 Kit (GE Healthcare, WI, USA) when PCR amplicon was not obtained.|$|R
40|$|The {{purpose of}} this project was to design a concise weight loss and {{exercise}} program that could be incorporated into a typical family physician's office utilizing routine personnel and physician time commitments. The program was developed to include caloric restriction, diet <b>instructions,</b> behavioral <b>modification,</b> and patient education. It also included outlining an exercise program that was specific enough to allow patients to have a concrete amount of exercise to do but flexible enough to be applicable to all patients. The accompanying manual {{can serve as a}} general guide to all physicians who wish to instruct patients on weight loss and exercise. Where the physicians did not agree with the specific information offered in the manual they could substitute their own information but still follow the same general guidelines for use in handling patients. If used properly this program could be quite helpful for handling a very difficult and common problem for the busy family practitioner. "Are you really serious about losing weight?" (84 p.) inserted at back. Thesis (M. S. ...|$|R
5000|$|The [...] and [...] {{instructions}} {{mark the}} start and end of a transactional code region. Inside transactional code regions, the -prefixed , [...] and [...] instructions can mark up to four cache lines for protected memory access. Accesses from other processor cores to the protected cache lines result in exceptions, which in turn cause transaction aborts. Stores to protected cache lines must be performed using the [...] instructions. Marked cache lines can be released from protection with the [...] instruction. Transaction aborts generated by hardware or explicitly requested through the [...] <b>instruction</b> rolls back <b>modifications</b> to the protected cache lines and restarts execution from the instruction following the top-level [...] instruction.|$|R
40|$|Background and Purpose. In {{patients}} with patellofemoral pain syn-drome (PFPS), the authors determined which {{aspects of the}} examina-tion {{could be used to}} identify those patients most likely to respond to off-the-shelf foot orthoses and <b>instruction</b> in activity <b>modification.</b> Participants and Methods. Fifty participants were enrolled in the study, and data for 5 individuals were excluded from analysis. Thirty-four men and 11 women completed the study. Participants were given foot orthoses and instructed in activity modification for 3 weeks. A 50 % reduction in pain was considered a success. Likelihood ratios (LRs) were computed to determine which examination findings were most predictive of success. Results. The best predictors of improvement were forefoot valgus alignment of 2 degrees (LR 4. 0, 95 % confidence interval [CI] 0. 7 – 21. 9), great toe extension of 78 degrees (LR 4. 0, 95 % CI 0. 7 – 21. 9), and navicular drop of 3 mm (LR 2. 4, 95 % CI 1. 3 – 4. 3). Discussion and Conclusion. The results suggest that {{patients with}} PFPS who have forefoot valgus alignment of 2 degrees, passive great toe extension of 78 degrees, or navicular drop of 3 mm are most likely to respond favorably to initial intervention with an off-the-shelf foot orthosis and <b>instruction</b> in activity <b>modification.</b> [Sutlive TG, Mitchell SD, Maxfield SN, et al. Identification of individuals with patellofemoral pain whose symptoms improved after a combined program of foot orthosis use and modified activity: a preliminary investigation. Phys Ther. 2004; 84 : 49 – 61. ...|$|R
30|$|The cell {{proliferation}} {{was tested using}} the Cell Counting Kit- 8 (CCK- 8, Dojindo, Japan) according to the manufacturer’s <b>instructions</b> with slight <b>modification</b> (Eike et al. 2015). K 562 cells were seeded in 96 -well plates at a density of 1 [*]×[*] 104  cells per well with or without lipopeptide addition. At different growth periods, 10  μL CCK- 8 (Sigma, USA) solution in PBS was added to each well. Plates were incubated for an additional 2  h, and {{the viability of the}} cultured cells was determined. After incubating the cells with CCK- 8 solution, the light absorbance of the culture medium in each well was measured at 450  nm using a microplate reader (Bio-Tek, USA) (Prayong et al. 2008).|$|R
30|$|Prior to IgG purification, {{samples were}} {{concentrated}} to volumes of 200 μL using 15 [*]mL spin concentrators of 5 kDa {{molecular weight cutoff}} (Agilent Technologies). Then, the IgG from the concentrated samples was purified with Protein A spin plates (Thermo Scientific) according to manufacturer <b>instructions,</b> with slight <b>modifications.</b> Briefly, the wells of a spin plate were equilibrated with Binding Buffer (phosphate buffered saline, pH[*] 7.2), sample dilutions (50 %[*]v/v in Binding Buffer) were added, and the plates incubated for 30 [*]min with moderate agitation. The resin was then washed with Binding Buffer, and the purified IgG eluted (0.5 [*]M acetic acid, pH[*] 2.5) and neutralized (1 [*]M ammonium bicarbonate, pH[*] 7 – 8.5). The elutions containing the purified antibody were dried overnight.|$|R
40|$|A dynamic binary {{translation}} {{system for}} a co-designed virtual machine is described and evaluated. The underlying hardware directly executes an accumulator-oriented instruction set that exposes instruction dependence chains (strands) to a distributed microarchitecture containing a simple instruction pipeline. To support conventional program binaries, a source instruction set (Alpha in our study) is dynamically translated to the target accumulator instruction set. The binary translator identifies chains of inter-instruction dependences and assigns them to dependence -carrying accumulators. Because the underlying superscalar microarchitecture is capable of dynamic instruction scheduling, the binary translation system does not perform aggressive optimizations or re-schedule code; this significantly reduces binary translation overhead. Detailed timing simulation of the dynamically translated code running on an accumulator-based distributed microarchitecture shows the overall system is capable of achieving similar performance to an ideal out-of-order superscalar processor, ignoring the significant clock frequency advantages that the accumulator-based hardware is likely to have. As part of the study, we evaluate an <b>instruction</b> set <b>modification</b> that simplifies precise trap implementation. This approach significantly reduces the number of instructions required for register state copying, thereby improving performance. We also observe that translation chaining methods can have substantial impact on the performance, and we evaluate a number of chaining methods...|$|R
40|$|The primary {{outcome of}} this {{research}} project {{is the development of}} a methodology enabling fast automated early-stage power and energy analysis of configurable processors for system-on-chip platforms. Such capability is essential to the process of selecting energy efficient processors during design-space exploration, when potential savings are highest. This has been achieved by developing dynamic and static energy consumption models for the constituent blocks within the processors. Several optimisations have been identified, specifically targeting the most significant blocks in terms of energy consumption. Instruction encoding mechanism reduces both the energy and area requirements of the <b>instruction</b> cache; <b>modifications</b> to the multiplier unit reduce energy consumption during inactive cycles. Both techniques are demonstrated to offer substantial energy savings. The aforementioned techniques have undergone detailed evaluation and, based on the positive outcomes obtained, have been incorporated into Cascade, a system-on-chip coprocessor synthesis tool developed by Critical Blue, to provide automated analysis and optimisation of processor energy requirements. This thesis details the process of identifying and examining each method, along with the results obtained. Finally, a case study demonstrates the benefits of the developed functionality, from the perspective of someone using Cascade to automate the creation of an energy-efficient configurable processor for system-on-chip platforms. EThOS - Electronic Theses Online ServiceGBUnited Kingdo...|$|R
40|$|A commercially {{available}} latex agglutination test, Rotalex (Orion Diagnostics, Finland), for detecting rotaviruses was evaluated {{in comparison with}} four other tests (electron microscopy, immunofluorescence, polyacrylamide gel electrophoresis, and enzyme linked immunosorbent assay) routinely used in our laboratories. Although Rotalex was the least complex method, it showed lack of specificity and sensitivity when carried out according to the manufacturer's <b>instructions.</b> Four basic <b>modifications</b> of Rotalex are described. These {{include the use of}} Hank's balanced salt solution, increasing the incubation time to 20 min, reading the agglutination result by an experienced observer, and the use of 50 mm square glass plates. The modified procedure gave results which were comparable with those obtained by electron microscopy, immunofluorescence, polyacrylamide gel electrophoresis, and enzyme linked immunosorbent assay. The latter techniques, when used to detect rotavirus, all gave similar results...|$|R
40|$|Performance {{improvement}} solely through transistor scaling {{is becoming}} more and more difficult, thus it is increasingly common to see domain specific accelerators used in conjunction with general purpose processors to achieve future performance goals. There is a serious drawback to accelerators, though: binary compatibility. An application compiled to utilize an accelerator cannot run on a processor without that accelerator, and applications that do not utilize an accelerator will never use it. To overcome this problem, we propose decoupling the instruction set architecture from the underlying accelerators. Computation to be accelerated is expressed using a processor’s baseline instruction set, and light-weight dynamic translation maps the representation to whatever accelerators are available in the system. In this paper, we describe the changes to a compilation framework and processor system needed to support this abstraction for an important set of accelerator designs that support innermost loops. In this analysis, we investigate the dynamic overheads associated with abstraction as well as the static/dynamic tradeoffs to improve the dynamic mapping of loop-nests. As part of the exploration, we also provide a quantitative analysis of the hardware characteristics of effective loop accelerators. We conclude that using a hybrid static-dynamic compilation approach to map computation on to loop-level accelerators is an practical way to increase computation efficiency, without the overheads associated with <b>instruction</b> set <b>modification.</b> ...|$|R
40|$|Microprocessor {{designers}} commonly utilize SIMD accelerators {{and their}} associated instruction set extensions to provide substantial performance gains {{at a relatively}} low cost for media applications. One {{of the most difficult}} problems with using SIMD accelerators is forward migration to newer generations. With larger hardware budgets and more demands for performance, SIMD accelerators evolve with both larger data widths and increased functionality with each new generation. However, this causes difficult problems in terms of binary compatibility, software migration costs, and expensive redesign of the instruction set architecture. In this work, we propose Liquid SIMD to decouple the instruction set architecture from the SIMD accelerator. SIMD instructions are expressed using a processor’s baseline scalar instruction set, and light-weight dynamic translation maps the representation onto a broad family of SIMD accelerators. Liquid SIMD effectively bypasses the problems inherent to <b>instruction</b> set <b>modification</b> and binary compatibility across accelerator generations. We provide a detailed description of changes to a compilation framework and processor pipeline needed to support this abstraction. Additionally, we show that the hardware overhead of dynamic optimization is modest, hardware changes do not affect cycle time of the processor, and the performance impact of abstracting the SIMD accelerator is negligible. We conclude that using dynamic techniques to map instructions onto SIMD accelerators is an effective way to improve computation efficiency, without the overhead associated with modifying the instruction set. ...|$|R
40|$|Abstract — We {{present a}} {{methodology}} for enabling service robots to follow natural language commands from non-expert users, {{with and without}} user-specified constraints, with a particular focus on spatial language understanding. As part of our approach, we propose a novel extension to the semantic field model of spatial prepositions that enables the representation of dynamic spatial relations involving paths. The design, system modules, and implementation details of our robot software architecture are presented and {{the relevance of the}} proposed methodology to interactive <b>instruction</b> and task <b>modification</b> through the addition of constraints is discussed. The paper concludes with an evaluation of our robot software architecture implemented on a simulated mobile robot operating in both a 2 D home environment and in real world environment maps to demonstrate the generalizability and usefulness of our approach in real world applications. I...|$|R
