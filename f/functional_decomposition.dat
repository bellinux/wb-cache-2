555|116|Public
25|$|Axiomatic {{design is}} a top down {{hierarchical}} <b>functional</b> <b>decomposition</b> process used as a solution synthesis framework for the analysis, development, re-engineering, and integration of products, information systems, business processes or software engineering solutions. Its structure is suited mathematically to analyze coupling between functions in order to optimize the architectural robustness of potential functional solution models.|$|E
2500|$|<b>Functional</b> <b>decomposition</b> of {{engineering}} systems {{is a method}} for analyzing engineered systems. The basic idea {{is to try to}} divide a system {{in such a way that}} each block of the block diagram can be described without an [...] "and" [...] or [...] "or" [...] in the description.|$|E
2500|$|<b>Functional</b> <b>decomposition</b> has a {{prominent}} role in computer programming, where a major goal is to modularize processes to the greatest extent possible. For example, a library management system may be broken up into an inventory module, a patron information module, and a fee assessment module. In the early decades of computer programming, this was manifested as the [...] "art of subroutining," [...] as it was called by some prominent practitioners.|$|E
40|$|In {{the early}} problem-solution era of {{software}} programming, <b>functional</b> <b>decompositions</b> were mainly used {{to design and}} implement software solutions. In <b>functional</b> <b>decompositions,</b> functions and data are introduced as two separate entities during the design phase, and are followed as such in the implementation phase. <b>Functional</b> <b>decompositions</b> make use of refactoring through optimizing the algorithms, grouping similar functionalities into common reusable functions, and using abstract representations of data where possible; all these are done during the implementation phase. This paper advocates the usage of object-oriented methodologies and design patterns as the centerpieces of refactoring software solutions. Refactoring software is a method of changing software design while explicitly preserving its external functionalities. The combined usage of object-oriented methodologies and design patterns to refactor should also benefit the overall software life cycle cost with improved software...|$|R
40|$|AbstractIn {{the paper}} [J. Ritt, Prime and {{composite}} polynomials, Trans. Amer. Math. Soc. 23 (1922) 51 – 66] Ritt constructed {{the theory of}} <b>functional</b> <b>decompositions</b> of polynomials with complex coefficients. In particular, he described explicitly polynomial solutions of the functional equation f(p(z)) =g(q(z)). In this paper we study the equation above in the case where f,g,p,q are holomorphic functions on compact Riemann surfaces. We also construct a self-contained theory of <b>functional</b> <b>decompositions</b> of rational functions with at most two poles generalizing the Ritt theory. In particular, we give new proofs of the theorems of Ritt and of the theorem of Bilu and Tichy...|$|R
40|$|Abstract. In {{the paper}} [22] Ritt {{constructed}} {{the theory of}} <b>functional</b> <b>decompositions</b> of polynomials with complex coefficients. In particular, he described explicitly indecomposable polynomial solutions of the functional equation f(p(z)) = g(q(z)). In this paper we study the equation above in the case when f, g, p, q are holomorphic functions on compact Riemann surfaces. We also construct a self-contained theory of <b>functional</b> <b>decompositions</b> of rational functions with at most two poles generalizing the Ritt theory. In particular, we give new proofs of the theorems of Ritt and of the theorem of Bilu and Tichy. 1...|$|R
2500|$|<b>Functional</b> <b>decomposition</b> refers broadly to {{the process}} of resolving a {{functional}} relationship into its constituent parts {{in such a way that}} the original function can be reconstructed from those parts by function composition. In general, this process of decomposition is undertaken either for the purpose of gaining insight into the identity of the constituent components, or for the purpose of obtaining a compressed representation of the global function, a task which is feasible only when the constituent processes possess a certain level of modularity.|$|E
5000|$|... i.e. all {{the terms}} in the <b>functional</b> <b>decomposition</b> are orthogonal. This leads to {{definitions}} {{of the terms of}} the <b>functional</b> <b>decomposition</b> in terms of conditional expected values, ...|$|E
5000|$|The {{computational}} viewpoint, {{which enables}} distribution through <b>functional</b> <b>decomposition</b> {{on the system}} into objects which interact at interfaces. It describes the functionality provided by the system and its <b>functional</b> <b>decomposition.</b>|$|E
40|$|In 1922 Ritt {{constructed}} {{the theory of}} <b>functional</b> <b>decompositions</b> of polynomials with complex coefficients. In particular, he described explicitly indecomposable polynomial solutions of the functional equation f(p(z)) =g(q(z)). In this paper we study the equation above in the case when f,g,p,q are holomorphic functions on compact Riemann surfaces. We also construct a self-contained theory of <b>functional</b> <b>decompositions</b> of rational functions with at most two poles generalizing the Ritt theory. In particular, we give new proofs of the theorems of Ritt and of the theorem of Bilu and Tichy. Comment: Some of the proofs given in sections 6 - 8 are simplified. Some other small alterations were mad...|$|R
40|$|This thesis describes:  * a {{mechanism}} for structuring and indexing a design space, where  * {{the elements of the}} space are <b>functional</b> <b>decompositions,</b> and  * the generative operators are recursive type constraints.   The goal is to produce an index for design space that is based on cataloguing design decisions...|$|R
40|$|Finding simple {{disjoint}} <b>functional</b> <b>decompositions</b> {{is a basic}} problem, but {{is generally}} timeconsuming since there are nearly 2 n bipartitions of input variable. This paper introduces three parameters to find bipartitions of the input variables. It also defines "ideal random logic functions," and derives their properties. Experimental results using randomly generated functions and benchmark functions show {{the usefulness of the}} approach...|$|R
50|$|The {{philosophical}} antecedents and {{ramifications of}} <b>functional</b> <b>decomposition</b> are quite broad, as <b>functional</b> <b>decomposition</b> in one guise or another underlies all of modern science. Here we review {{just a few}} of these philosophical considerations.|$|E
50|$|Apply <b>functional</b> <b>decomposition.</b>|$|E
5000|$|... #Subtitle level 3: <b>Functional</b> <b>decomposition</b> and eigenfunctions ...|$|E
40|$|This paper surveys {{methods to}} {{represent}} logic functions by cascades. First, a design method for multi-rail cascades with redundant inputs is shown. It uses logic minimization of SOPs (sumof-products expressions) or ESOPs (EXOR sum-of-products expressions) of multiple-valued inputs. Then, a design method for multi-rail cascades with irredundant inputs is shown. It uses <b>functional</b> <b>decompositions</b> using BDDs. In both cases, extensions to multiple-output functions are shown...|$|R
40|$|Abstract — We {{present an}} {{efficient}} framework for synthesizing look-up table (LUT) networks. Some {{of the existing}} LUT network synthesis methods are based on <b>functional</b> (boolean) <b>decompositions.</b> Our method also uses <b>functional</b> <b>decompositions,</b> but we try to use various decomposition methods, which include algebraic decompositions. Therefore, this method {{can be thought of}} as a general framework for synthesizing LUT networks by integrating various decomposition methods. We use a cost database file which is a unique characteristic in our method. We also present comparisons between our method and some well-known LUT network synthesis methods, and evaluate the final results after placement and routing. Although our method is rather heuristic in nature, the experimental results are encouraging. I...|$|R
40|$|Abstract. In {{this paper}} we prove several results about the lattice of imprimitivity systems of a {{permutation}} group containing a cyclic subgroup with at most two orbits. As an application we generalize the first Ritt theorem about <b>functional</b> <b>decompositions</b> of polynomials, {{and some other}} related results. Besides, we discuss examples of rational functions, related to finite subgroups of Aut(CP 1), for which the first Ritt theorem fails to be true. 1...|$|R
5000|$|... #Subtitle level 4: Fourier {{analysis}} and <b>functional</b> <b>decomposition</b> ...|$|E
5000|$|... #Caption: Example of <b>functional</b> <b>decomposition</b> in {{a systems}} analysis.|$|E
5000|$|Part 1678 - <b>Functional</b> <b>decomposition</b> with nodal {{representation}} to packaged mapping ...|$|E
5000|$|... where [...] is {{some other}} function. Decompositions {{of this kind}} are {{interesting}} and important {{for a wide variety}} of reasons. In general, <b>functional</b> <b>decompositions</b> are worthwhile when there is a certain [...] "sparseness" [...] in the dependency structure; that is, when constituent functions are found to depend on approximately disjoint sets of variables. Thus, for example, if we can obtain a decomposition of [...] into a hierarchical composition of functions [...] such that , , , as shown in the figure at right, this would probably be considered a highly valuable decomposition.|$|R
40|$|ABSTRACT: New {{types of}} <b>functional</b> <b>decompositions</b> are {{presented}} {{which we call}} function-driven decompositions. Namely, it {{is shown in the}} paper that in the well-known Shannon formula it is possible to replace a variable by an arbitrary function having the property of self-duality with respect to a variable of the decomposed function. In this way a generalization of recently studied linear decompositions (used for constructing Linearly Transformed Binary Decision Diagrams) is obtained. Further extensions of functiondriven decompositions are also mentioned. These extensions can be defined by combining the functiondriven decompositions with other known decompositions, e. g. Reed-Muller (Davio) decompositions. It is also shown how to extend function-driven decompositions to multiple-valued functions. 1...|$|R
40|$|In {{this paper}} we prove several results about the lattice of imprimitivity systems of a {{permutation}} group containing a cyclic subgroup with at most two orbits. As an application we generalize the first Ritt theorem about <b>functional</b> <b>decompositions</b> of polynomials, {{and some other}} related results. Besides, we discuss examples of rational functions, related to finite subgroups of the automorphism group of the sphere for which the first Ritt theorem fails to be true. Comment: In the current version the approach was considerably simplified {{and a lot of}} new material was added (see e. g. Section 2. 2, Section 2. 3 and Section 3. 2). On the other hand, some results of rather calculating character were remove...|$|R
5000|$|... #Subtitle level 2: Afterword: Plane wave {{spectrum}} {{within the}} broader context of <b>functional</b> <b>decomposition</b> ...|$|E
50|$|Analysis level {{represents}} the abstract <b>functional</b> <b>decomposition</b> {{of the vehicle}} with the principal internal and external interfaces.|$|E
50|$|Practical {{applications}} of <b>functional</b> <b>decomposition</b> {{are found in}} Bayesian networks, structural equation modeling, linear systems, and database systems.|$|E
40|$|Capturing and reusing design {{experience}} holds {{great potential}} for improving designer effectiveness. The first step toward leveraging lessons from the past for design decision making is gaining access to them. Because decisions early in the design process largely determine its ultimate success, {{it is important to}} embrace the informal, unstructured information that is prevalent during conceptual design. Information retrieval is proposed as the basis for access to this informal design information. By creating hierarchical thesauri of life cycle design issues, design process terms, and component and system <b>functional</b> <b>decompositions,</b> we hope to establish an intermediate language in which design context can be captured. Experiments in design information retrieval exploiting design context for determining document similarity within design case studies and design notebooks demonstrate the value of this approach. ...|$|R
40|$|This paper {{presents}} a brief analysis of some approaches {{in the field}} of Hardware/Software (HW/SW) Co-Design. The main efforts in the design of these systems are focused on the HW/SW partitioning process, and little work is devoted to providing a modern system development environment in this field. In the design process, some changes to the architectures of the systems are needed to adopt these enhancements. In order to investigate and evaluate different architectures in this regard, i. e. non-functional qualities, an analysis method is required. SAAM, originally devised for the analysis of software architectures, is utilized to compare and evaluate three co-design systems, based on different task-scenarios and <b>functional</b> <b>decompositions.</b> Keywords. Software Architecture; Software Architecture Analysis Method; Hardware/Software Co-Design; Candidate Architectures; Applications of Scenarios; Evaluation of different Architectures. 1 Introduction Hardware/software co-design add [...] ...|$|R
40|$|Abstract. Almost sure {{asymptotic}} {{stability of}} stochastic difference and differential equations with non-anticipating memory terms is studied in R 1. Sufficient criteria are obtained {{with help of}} Lyapunov-Krasovskiǐ-type <b>functionals,</b> martingale <b>decomposition</b> and semi-martingale convergence theorems. The results allow numerical methods for stochastic differential equations with memory to be studied {{in terms of their}} ability to reproduce almost sure stability...|$|R
50|$|The {{level of}} <b>functional</b> <b>decomposition</b> {{is such that}} these {{benefits}} can be realized but without being over prescriptive.|$|E
5000|$|Now, further {{assuming}} that the f(X) is square-integrable, the <b>functional</b> <b>decomposition</b> may be squared and integrated to give, ...|$|E
5000|$|For {{a multivariate}} {{function}} , <b>functional</b> <b>decomposition</b> generally {{refers to a}} process of identifying a set of functions [...] such that ...|$|E
40|$|We present ecient {{algorithms}} for the bi-decomposition of arbitrary incompletely specied {{functions in}} variable-valued logic. Several special cases are discussed. The algorithms are especially applicable for Data Mining applications, because, {{in contrast to}} the general multi-valued approaches to function decomposition that decompose to arbitrary tables, we create a network from multi-valued two-input operators that are selected by the user. Such decompositions lead to decision rules that are easier to understand by humans. 1 Introduction Simple <b>Functional</b> <b>Decompositions.</b> Simple disjoint decompositions F = H(G(B);A) have been used for FPGA synthesis [13], synthesis for layoutdriven logic synthesis, Machine Learning and Data Mining [9, 10, 11, 6, 18, 19]. Larger block F of logic is split to smaller blocks G and H, and next blocks G and/or H are recursively split to smaller and smaller blocks, until they become non-decomposable, or until they can be directly realized with some other mean [...] ...|$|R
40|$|This paper extends {{previous}} {{work on the}} optimal size of government spend- ing by including nested <b>functional</b> <b>decompositions</b> of military spending into consumption and investment. Post World War II US data are then used to estimate nested non-linear growth models using semiparametric methods. As expected, investment in military and non-military expenditure are both found to be productive expenditures. Moreover {{there is little evidence}} to suggest that current military spending is having a negative impact on economic growth in the US, while civilian consumption only tends to have only a weak impact. This does not imply that society will necessarily bene?t from a reallocation of more spending to the military sector, nor that it {{is the best way to}} achieve economic growth. It does suggest that the US economy is not necessarily being hindered by its current military burden. Economic growth; productive state spending; military spending,semi-parametric estimation...|$|R
40|$|If, as we confront some task, {{a part of}} {{the world}} {{functions}} as a process which, were it done in the head, we would have no hesitation in recognizing as part of the cognitive process, then that part of the world is (so we claim) part of the cognitive process. ” (Clark & Chalmers, 1998, 8) Hardly measurable: counterfactual location change is not really very telling and might be confusing (Rupert 2009). Another problem: All people who regularly use Wikipedia might turn out to share the common extended mind. The principle might seem purely perspectival and being part of the system is ascribed in a slightly arbitrary fashion. <b>Functional</b> <b>decompositions</b> tend to be arbitrary when not accompanied by any structural/dynamical measures. The controversies about whether a system extends into environment or not are not neutrally judged. �Roman Ingarden (1973) : Relatively Isolated Systems Cognitive agents are relatively isolated systems: they retain autonomy fro...|$|R
