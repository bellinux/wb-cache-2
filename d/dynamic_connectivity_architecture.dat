0|440|Public
40|$|<b>Dynamic</b> <b>connectivity</b> {{is one of}} {{the most}} {{fundamental}} problems in dynamic graph algorithms. We present a new randomized <b>dynamic</b> <b>connectivity</b> structure with O(n (n) ^ 2) amortized expected update time and O(n/ n) query time, which comes within an O((n) ^ 2) factor of a lower bound due to and Demaine. The new structure is based on a <b>dynamic</b> <b>connectivity</b> algorithm proposed by Thorup in an extended abstract at STOC 2000, which left out some important details...|$|R
5000|$|<b>Dynamic</b> <b>connectivity,</b> Disjoint-set data structure, Partition {{refinement}} ...|$|R
50|$|We {{can add a}} cutset {{structure}} to a <b>dynamic</b> <b>connectivity</b> structure.|$|R
5000|$|Edges can {{be either}} added or deleted (this can be called fully <b>dynamic</b> <b>connectivity).</b>|$|R
40|$|We {{present a}} {{deterministic}} <b>dynamic</b> <b>connectivity</b> data structure for undirected graphs with worst case update time O(√(n(n) ^ 2 / n)) and constant query time. This improves {{on the previous}} best deterministic worst case algorithm of Frederickson (STOC 1983) and Eppstein Galil, Italiano, and Nissenzweig (J. ACM 1997), which had update time O(√(n)). All other algorithms for <b>dynamic</b> <b>connectivity</b> are either randomized (Monte Carlo) or have only amortized performance guarantees...|$|R
40|$|Hyvärinen 2, 1 Abstract—Analysis of the {{dynamics}} (non-stationarity) of functional connectivity patterns has recently {{received a lot of}} attention in the neuroimaging community. Most analysis has been using functional magnetic resonance imaging (fMRI), partly due to the inherent technical complexity of the electro- or magnetoencephalography (EEG/MEG) signals, but EEG/MEG holds great promise in analyzing fast changes in connectivity. Here, we propose a method for <b>dynamic</b> <b>connectivity</b> analysis of EEG/MEG, combining blind source separation with <b>dynamic</b> <b>connectivity</b> analysis in a single probabilistic model. Blind source separation is extremely useful for interpretation of the connectivity changes, and also enables rejection of artifacts. <b>Dynamic</b> <b>connectivity</b> analysis is performed by clustering the coactivation patterns of separated sources by modeling their variances. Experiments on resting-state EEG show that the obtained clusters correlate with physiologically meaningful quantities. I...|$|R
50|$|In {{computing}} and graph theory, a <b>dynamic</b> <b>connectivity</b> {{structure is}} a data structure that dynamically maintains {{information about the}} connected components of a graph.|$|R
40|$|A new {{learning}} {{scheme is}} proposed for neural network architectures like the Hopfield network and bidirectional associative memory. This scheme, which replaces the commonly used learning rules, {{follows from the}} proof of the result that learning in these <b>connectivity</b> <b>architectures</b> is equivalent to learning in the 2 -state perceptron. Consequently, optimal learning algorithms for the perceptron can be directly applied to learning in these <b>connectivity</b> <b>architectures.</b> Similar results are established for learning in the multistate perceptron, thereby leading to an optimal learning algorithm. Experimental results are provided to show {{the superiority of the}} proposed method...|$|R
40|$|This paper {{describes}} Intel's Internet <b>connectivity</b> <b>architecture,</b> {{including the}} business drivers {{that led to}} its creation and the technology developed to build and maintain it. Intel's first Internet connection was a 2400 bit per second modem used {{to pick up and}} deliver e-mail for a small community of engineers and researchers. With the advent of the Mosaic Web browser, Intel needed to develop a scalable, high speed, highly available Internet <b>connectivity</b> <b>architecture</b> that is secure, available, provides good performance, and minimizes the impact of Internet usage on Intel's internal network...|$|R
50|$|When an edge {{is deleted}} from the {{spanning}} forest {{used for the}} <b>dynamic</b> <b>connectivity</b> structure, the cutset structure is used to find a replacement edge.|$|R
40|$|Human brain {{dynamics}} and functional connectivity fluctuate over {{a range of}} temporal scales in coordination with internal states and environmental demands. However, the neurobiological significance and consequences of functional connectivity dynamics during rest {{have not yet been}} established. We show that the coarse-grained clustering of whole-brain <b>dynamic</b> <b>connectivity</b> measured with magnetic resonance imaging reveals discrete patterns (<b>dynamic</b> <b>connectivity</b> states) associated with wakefulness and sleep. We validate this using EEG in healthy subjects and patients with narcolepsy and by matching our results with previous findings in a large collaborative database. We also show that drowsiness may account for previous reports of metastable connectivity states associated with different levels of functional integration. This implies that future studies of transient functional connectivity must independently monitor wakefulness. We conclude that a possible neurobiological significance of <b>dynamic</b> <b>connectivity</b> states, computed at a sufficiently coarse temporal scale, is that of fluctuations in wakefulness...|$|R
40|$|National Taiwan University We {{present a}} method for {{progressive}} deforming meshes. Most existing mesh decimation methods focus on static meshes. However, {{there are more and}} more animation data today, and it is important to address the problem of simplifying deforming meshes. Our method is based on deformation oriented decimation (DOD) error metric and <b>dynamic</b> <b>connectivity</b> updating (DCU) algorithm. Deformation oriented decimation extends the deformation sensitivity decimation (DSD) error metric by augmenting an additional term to model the distortion introduced by deformation. This new metric preserves not only geometric features but also areas with large deformation. Using this metric, a static reference connectivity is extracted for the whole animation. <b>Dynamic</b> <b>connectivity</b> updating algorithm utilizes vertex trees to further reduce geometric distortion by allowing the connectivity to change. Temporal coherence in the <b>dynamic</b> <b>connectivity</b> between frames is achieved by penalizing large deviations from the reference connectivity. The combination of DOD and DCU demonstrates better simplification and triangulation performance than previous methods for deforming mesh simplification. 1...|$|R
40|$|In {{programmable}} embedded systems, {{the memory}} subsys-tem represents a major cost, performance and power bottle-neck. To optimize {{the system for}} such different goals, the designer would like to perform Design Space Exploration, evaluating different memory modules from a memory IP li-brary, and selecting the most promising designs. However, while the memory modules are important, {{the rate at which}} the memory system can produce the data for the CPU is sig-nificantly impacted by the <b>connectivity</b> <b>architecture</b> between the memory subsystem and the CPU. Thus, it is critical to consider the <b>connectivity</b> <b>architecture</b> early in the design flow, in conjunction with the memory architecture. We present a <b>connectivity</b> <b>architecture</b> exploration approach, evaluating a wide range of cost, performance, and energy connectivity ar-chitectures. When coupled with our memory modules explo-ration approach, we can significantly improve the system be-havior. We present experiments on a set of large real-life benchmarks, showing significant performance improvements for varied cost and power characteristics, allowing the de-signer to tailor the performance, cost and power of the pro-grammable embedded system. ...|$|R
40|$|In {{the last}} lecture we saw {{how to solve}} the <b>dynamic</b> <b>connectivity</b> problem in O(log 2 n) timeper operation. To recall, here we want a data {{structure}} {{to be able to}} dynamically handle queries as to whether two elements are in the same connected component in a graph. The data structure should support insert and delete operations on both edges and isolated vertices. In this lecture we show a lower bound on <b>dynamic</b> <b>connectivity,</b> {{that it is impossible to}} do better than Ω(log n) time per operation [1]. This is the first lower bound to be covered in this class...|$|R
50|$|PCI: Replaced the EISA, ISA, MCA and VESA buses from 1993 onwards. PCI allowed <b>dynamic</b> <b>connectivity</b> between devices, {{avoiding}} the manual adjustments required with jumpers. It is a 32-bit bus clocked 33 MHz.|$|R
30|$|Artificial neural {{networks}} are {{a reliable and}} effective method for an electrical power system transmission line fault classification and detection especially {{in view of the}} increasing <b>dynamic</b> <b>connectivity</b> of the modern electrical power transmission systems.|$|R
40|$|According to the {{solution}} of dual-porosity model, a diffusivity filter model of carbonate reservoir was established, which can effectively illustrate the injection signal attenuation and lag characteristic. The interwell <b>dynamic</b> <b>connectivity</b> inversion model combines a multivariate linear regression (MLR) analysis with a correction coefficient to eliminate the effect of fluctuating bottom-hole pressure (BHP). The modified MLR model was validated by synthetic field with fluctuating BHP. The method was applied to Tahe oilfield which showed that the inversion result was reliable. The interwell <b>dynamic</b> <b>connectivity</b> coefficients could reflect the real interwell connectivity of reservoir. The method is {{easy to use and}} proved to be effective in field applications...|$|R
50|$|This {{was based}} on the Transputer link protocol. Meiko {{developed}} its own switch silicon on and European Silicon Systems, ES2 Gate Array. This ASIC provided static <b>connectivity</b> and limited <b>dynamic</b> <b>connectivity</b> and was designed by Moray McLaren.|$|R
50|$|Link/cut trees {{can be used}} {{to solve}} the <b>dynamic</b> <b>connectivity</b> problem for acyclic graphs. Given two nodes x and y, they are {{connected}} if and only if FindRoot(x) = FindRoot(y). Another data structure {{that can be used for}} the same purpose is Euler tour tree.|$|R
40|$|Advanced {{topics in}} algorithms: {{bibliography}} list 3 The cost scaling method for minimum cost circulations {{is described in}} [2]. The dynamic minimum spanning tree algorithm for planar graphs is described in [1]. The <b>dynamic</b> <b>connectivity</b> and the <b>dynamic</b> minimum spanning tree algorithms for general graphs are from [3]...|$|R
5000|$|After each addition/deletion of an edge, the <b>dynamic</b> <b>connectivity</b> {{structure}} should adapt itself {{such that}} it can give quick answers to queries of the form [...] "is there a path between x and y?" [...] (equivalently: [...] "do vertices x and y {{belong to the same}} connected component?").|$|R
50|$|A forest can be {{represented}} using a collection of either Link-cut trees or Euler tour trees. Then the <b>dynamic</b> <b>connectivity</b> problem can be solved easily, as for every two nodes x,y, x is connected to y {{if and only if}} FindRoot(x)=FindRoot(y). The amortized update time and query time are both O(log(n)).|$|R
40|$|In {{the last}} lecture we {{introduced}} Euler tour trees [3], dynamic data structures that can perform link-cut tree operations in O(lg n) time. We then showed how to implement an efficient <b>dynamic</b> <b>connectivity</b> algorithm using a spanning forest of Euler tour trees, {{as demonstrated in}} [4]. This yielded an amortized time bound of O(lg 2 n) for update operations (such as edge insertion and deletion), and O(lg n / lg lg n) for querying the connectivity of two vertices. In this lecture, we switch to examining the lower bound of <b>dynamic</b> <b>connectivity</b> algorithms. Until recently, the best lower bound for <b>dynamic</b> <b>connectivity</b> operations was Ω(lg n / lg lg n), as described by Fredman and Henzinger in [1] and independently by Miltersen in [2]. However, we will show below {{that it is possible}} to prove Ω(lg n), using the method given by Pǎtra¸scu and Demaine in [6]. In fact, we prove this lower bound even if the connected components of our graph are always some paths. We use a weak assumption here that the word size is O(log n). This is equivalent to assuming that the space of our algorithm (our problem) is polynomial in the size of the input which is a reasonable assumption. Note that handling super-polynomial space probably needs a super-polynomial time algorithm. 2 Cell Probe Complexity Mode...|$|R
30|$|In this section, {{we present}} novel <b>connectivity</b> <b>architecture</b> with zeroconfiguration and {{advanced}} pairing approach based on RF 4 CE. The zero-configuration approach {{is required to}} provide simple and easy connection between various Wi-Fi supported devices. And the proposed pairing scheme is good alternative for complementing the vulnerabilities of the existing RF 4 CE key agreement scheme.|$|R
5000|$|Many network {{links to}} many {{monitoring}} tools (<b>dynamic</b> many-to-many <b>connectivity)</b> ...|$|R
40|$|Change point {{analysis}} fMRI fM kno tec ltiv ed <b>Dynamic</b> <b>Connectivity</b> Regression (DCR), detects temporal change {{points in}} estimates a graph, {{or set of}} relationships between ROIs, for data in the temporal aging basis o example, greater activity during an experimental task than during a approaches include using multivariate methods, such as Principa...|$|R
40|$|We {{conduct an}} {{empirical}} study on some dynamic graph algorithms which where developed recently. The following implementations were tested and compared with simple algorithms: <b>dynamic</b> <b>connectivity,</b> and <b>dynamic</b> {{minimum spanning tree}} based on sparsification by Eppstein et al.; <b>dynamic</b> <b>connectivity</b> based on a very recent paper by Henzinger and King. In our experiments, we considered both random and non-random inputs. Moreover, we present a simplified variant of the algorithm by Henzinger and King, which for random inputs was always faster than the original implementation. Indeed, this variant was among the fastest implementations for random inputs. For non-random inputs, sparsification was the fastest algorithm for small sequences of updates; for medium and large sequences of updates, the original algorithm by Henzinger and King was faster. Perhaps {{one of the main}} practical results of this paper is that our implem [...] ...|$|R
40|$|Key words. Data structures, <b>dynamic</b> graph algorithms, <b>connectivity,</b> {{computational}} geometry AMS subject classifications. 68 Q 25, 68 P 05, 68 U 05 Abbreviated title. <b>Dynamic</b> subgraph <b>connectivity</b> 1 Introduction Geometric motivation. <b>Dynamic</b> graph <b>connectivity</b> [...] maintaining an undirected graph under edge insertions and deletions, to answer queries of the form, &quot;are two vertices connected?&quot; [...] {{is a basic}} problem {{in the area of}} graph data structures. In the same way, connectivity problems concerning a dynamic collection of geometric objects are fundamental in {{computational geometry}}. However, unlike <b>dynamic</b> graph <b>connectivity,</b> which has been extensively studied and has enjoyed much recent success with the discovery of near-logarithmic algorithms [17, 21, 32], progress in <b>dynamic</b> geometric <b>connectivity</b> has been scarce. For this reason, we decide to start our investigation with a simple version of the problem: Maintain a set of n axis-parallel rectangles in the plane, under insertions and deletions, to answer queries of the form, &quot;given two points a and b, is there a path from a to b that lies inside the union of these rectangles?&quot...|$|R
40|$|Studying the brain’s {{structure}} and function as a network has provided insight about the brain’s activity in health and disease. Networks in the brain are often averaged over trials, frequency and time and this is called functional connectivity. This thesis aims to extend the analyses beyond these assumptions and simplifiations. Connectivity that varies over time has been called <b>dynamic</b> functional <b>connectivity.</b> This thesis considers diffrent ways to derive a <b>dynamic</b> functional <b>connectivity</b> representation {{of the brain and}} subsequently quantify this using temporal network theory. Paper I: discusses diffrent interpretations about what can be considered “interesting” or “high” <b>dynamic</b> functional <b>connectivity.</b> The choices made here can prioritize diffrent edges. Paper II: discusses how the stability of the variance of <b>dynamic</b> <b>connectivity</b> time series can be achieved. This is an important preprocessing step in <b>dynamic</b> functional <b>connectivity</b> as it can bias the subsequent analysis if done incorrectly. Paper III: quantifis the degree of burstiness, the distribution of temporal connections, between diffrent edges in fMRI data. Paper IV: provides an introduction and application of metrics from temporal network theory onto fMRI activity. Paper V: multi-layer network analysis of resting state networks over diffrent frequencies of the BOLD response. This work shows that a full analysis of the network structure of the brain in fMRI may require considering networks over frequency. Paper VI: Investigates whether the functional connectivity at time of trauma for patient with traumatic brain injury (TBI) correlates with features related to long term cognitive outcome. Paper VII: is a mass meta-analysis using Neurosynth to cluster diffrent brain networks from diffrent tasks into a hierarchical network structure. This provides the start of a data driven hierarchical network atlas for diffrent tasks. Paper VIII: is a conceptual overview of the diffrent assumptions made in many popular methods to compute <b>dynamic</b> functional <b>connectivity.</b> Paper IX: aims to evaluate diffrent <b>dynamic</b> functional <b>connectivity</b> methods based on several simulations designed to track a signal covariance that flctuates over time...|$|R
30|$|The {{absence of}} {{artificial}} stochastic model constraints permitted exposing the <b>dynamic</b> <b>connectivity</b> between the identified components. Figure 7 a summarizes the connectivity network estimated using PDC {{applied to the}} reconstructed system components. In addition, PDC also highlights that resting state connectivity is present mainly at low frequencies (Fig. 7 b), corroborating several studies of resting state brain connectivity [4].|$|R
40|$|Autism is {{a common}} {{developmental}} condition with a wide, variable range of co-occurring neuropsychiatric symptoms. Contrasting with most extant studies, we explored whole-brain functional organization at multiple levels simultaneously in a large subject group reflecting autism's clinical diversity, and present the first network-based analysis of transient brain states, or <b>dynamic</b> <b>connectivity,</b> in autism. Disruption to inter-network and inter-system connectivity, rather than within individual networks, predominated. We identified coupling disruption in the anterior-posterior default mode axis, and among specific control networks specialized for task start cues {{and the maintenance of}} domain-independent task positive status, specifically between the right fronto-parietal and cingulo-opercular networks and default mode network subsystems. These appear to propagate downstream in autism, with significantly dampened subject oscillations between brain states, and <b>dynamic</b> <b>connectivity</b> configuration differences. Our account proposes specific motifs that may provide candidates for neuroimaging biomarkers within heterogeneous clinical populations in this diverse condition...|$|R
40|$|Abstract: This paper {{presents}} a general framework for coordinated motion control of autonomous swarms {{in the presence}} of obstacles. The proposed framework judiciously combines concepts and techniques from potential flows, artificial potentials and <b>dynamic</b> <b>connectivity</b> to realize complex swarm behaviors. To begin with, existing concepts from potential flows in fluid mechanics are used to solve the single-agent navigation problem. As an extension, an analytical solution to the stagnation point problem is provided. The potential flow based framework is then modified significantly to facilitate the coordinated control of swarms navigating through multiple obstacles. Artificial potentials are employed for swarming as well as enhanced obstacle avoidance. A novel concept of <b>dynamic</b> <b>connectivity</b> is utilized to improve the performance of obstacle avoidance (Line of Sight Connectivity) and to organize diverse swarm behaviors (Random Connectivity). Simulation results with a set of developed algorithms are included to illustrate the viability the proposed framework...|$|R
40|$|In {{the last}} lecture we {{introduced}} Euler tour trees [3], dynamic data structures that can perform link-cut tree operations in O(lg n) time. We then showed how to implement an efficient <b>dynamic</b> <b>connectivity</b> algorithm using a spanning forest of Euler tour trees, {{as demonstrated in}} [4]. This yielded an amortized time bound of O(lg 2 n) for update operations (such as edge insertion and deletion), and O(lg n / lg lg n) for querying the connectivity of two vertices. In this lecture, we switch to examining the lower bound of <b>dynamic</b> <b>connectivity</b> algorithms. Until recently, the best lower bound for <b>dynamic</b> <b>connectivity</b> operations was Ω(lg n / lg lg n), as described by Fredman and Henzinger in [1] and independently by Miltersen in [2]. However, we will show below {{that it is possible}} to prove Ω(lg n), using the method given by Pǎtra¸scu and Demaine in [6]. 2 Cell Probe Complexity Model The Ω(lg n) bound relies on a model of computation called the cell probe complexity model, originally described in the context of proving dynamic lower bounds by Fredman and Saks in [5]. The cell probe model views a data structure as a sequence of cells, or words, each containing a w-bit field. The model calculates the complexity of an algorithm by counting the number of reads and writes to the cells; any additional computation is free. This makes the model comparable to a RAM mode...|$|R
40|$|Mobility Metrics of the {{connectivity}} graphs with fixed {{number of}} nodes {{have been presented}} in several research studies {{over the last three}} years. More realistic mobility models that are derived from real user traces challenge the assumption of the connectivity graph with fixed number of nodes, but they rather show that wireless nodes posses dynamic membership (nodes join and leave the simulation dynamically based on some random variable). In this paper, we evaluate the mobility metrics of the <b>dynamic</b> <b>connectivity</b> graph on both the nodes and the links. The contributions of this paper are two-fold. First, we introduce the algorithm that computes the Maximum Node Degree. We show that the Maximum Node Degree, which characterizes the dynamic membership property, impacts the connectivity mobility metrics of the Link and Path Durations of the <b>dynamic</b> <b>connectivity</b> graphs. Second, we provide the lower and the upper bounds for these mobility metrics. Peer ReviewedPostprint (published version...|$|R
40|$|Abstract. Mobility Metrics of the {{connectivity}} graphs with fixed {{number of}} nodes {{have been presented}} in several research studies {{over the last three}} years. More realistic mobility models that are derived from real user traces challenge the assumption of the connectivity graph with fixed number of nodes, but they rather show that wireless nodes posses dynamic membership (nodes join and leave the simulation dynamically based on some random variable). In this paper, we evaluate the mobility metrics of the <b>dynamic</b> <b>connectivity</b> graph on both the nodes and the links. The contributions of this paper are two-fold. First, we introduce the algorithm that computes the Maximum Node Degree. We show that the Maximum Node Degree, which characterizes the dynamic membership property, impacts the connectivity mobility metrics of the Link and Path Durations of the <b>dynamic</b> <b>connectivity</b> graphs. Second, we provide the lower and the upper bounds for these mobility metrics. Key words: wireless ad hoc networks, mobility metrics, connectivity, simulation. 1. Introduction. Man...|$|R
40|$|We present fully dynamic {{algorithms}} {{for maintaining}} the biconnected components in general and plane graphs and lower bounds for fully <b>dynamic</b> k-edge <b>connectivity,</b> k-vertex connectivity, and planarity testing. Fully dynamic algorithms maintain a graph during a sequence of insertions and deletions of edges or isolated vertices. Let m be the number of edges and n be the number of vertices in a graph. The time per operation {{of the best known}} algorithms are 0 (@) in general graphs and O(log n) in plane graphs for fully <b>dynamic</b> <b>connectivity</b> and O(min{m 2 / 3, n}) in general graphs and O(@) in plane graphs for fully dynamic biconnectivity. We improve the later running times to O(min{JiZlog n, n}) in general graphs and 0 (log 2 n) in plane graphs. In general graphs the update time is amortized and our algom”thm can also find the biconnected components of all vertices in time O(n). We also prove lower bounds for the complexity of maintaining fully dynamic k-edge or k-vertex connectivity in plane and in (k-l) -vertex connected graphs for any constant k and for fully dynamic planarity testing. We show an amortized lower bound of C 2 (log n/log log n) per operation in the cell probe model. These are the jirst lower bounds for <b>dynamic</b> <b>connectivity</b> problems. ...|$|R
