5|15|Public
5|$|Users {{must have}} either found {{decryption}} keys themselves or obtained them elsewhere for most versions of BackupHDDVD to work. The utility reads a text file containing volume or title keys {{and attempts to}} find a set of corresponding keys for the inserted disc. Through a standard AES library, it then decrypts each video file on the disc using the appropriate keys and writes the results to a location specified by the user. Direct <b>file</b> <b>decryption</b> allows the utility's functionality to remain unaffected by device key revocation and its performance unencumbered with AACS overhead.|$|E
5000|$|When {{the payment}} to the {{cybercriminal}} is made, the victim can download a PHP script to their computer. This script {{will use the}} RSA private key to recover the symmetric AES key and decrypt all the files with the [...] ".encrypted" [...] extension. Along with the <b>file</b> <b>decryption,</b> the decryption tool will also delete every [...] "readme_for_decryption.txt" [...] file on the hard drive.|$|E
50|$|Users {{must have}} either found {{decryption}} keys themselves or obtained them elsewhere for most versions of BackupHDDVD to work. The utility reads a text file containing volume or title keys {{and attempts to}} find a set of corresponding keys for the inserted disc. Through a standard AES library, it then decrypts each video file on the disc using the appropriate keys and writes the results to a location specified by the user. Direct <b>file</b> <b>decryption</b> allows the utility's functionality to remain unaffected by device key revocation and its performance unencumbered with AACS overhead.|$|E
50|$|There are {{a number}} of tools {{intended}} specifically to decrypt files locked by ransomware, although successful recovery may not be possible. If the same encryption key is used for all <b>files,</b> <b>decryption</b> tools use <b>files</b> for which there are both uncorrupted backups and encrypted copies (a known-plaintext attack in the jargon of cryptanalysis); recovery of the key, if it is possible, may take several days.|$|R
5|$|There are {{a number}} of tools {{intended}} specifically to decrypt files locked by ransomware, although successful recovery may not be possible. If the same encryption key is used for all <b>files,</b> <b>decryption</b> tools use <b>files</b> for which there are both uncorrupted backups and encrypted copies (a known-plaintext attack in the jargon of cryptanalysis); recovery of the key, if it is possible, may take several days. Free ransomware decryption tools can help decrypt files encrypted by the following forms of ransomware: AES_NI, Alcatraz Locker, Apocalypse, BadBlock, Bart, BTCWare, Crypt888, CryptoMix, CrySiS, EncrypTile, FindZip, Globe, Hidden Tear, Jigsaw, LambdaLocker, Legion, NoobCrypt, Stampado, SZFLocker, TeslaCrypt, XData.|$|R
50|$|Images {{stored on}} the server are being encrypted, {{and it is}} not {{possible}} to mass-decrypt images by an administrator. Unless presented with URL, that contains <b>file</b> pointer and <b>decryption</b> key, the <b>file</b> itself cannot be decrypted.|$|R
40|$|Internet is an {{important}} part in the daily life of people in many ways, allow the peo-ple in any corner of the world to share all types of information. Image encryption is used to transmit sensitive multimedia information in unsecured networks to provide high de-gree of confidentiality. In this paper, a new image encryption method is proposed based on novel implementation of pixel scan, utilizing the Knight‟s Travel Path, and true ran-dom number. The Knight‟s travel path is a pattern in which the path of a Knight around a chess board is taken without revisiting any node. This travel path pattern is used to per-mute the pixel positions of the original image to obtain the scrambled image. The scram-bled image is further XORed with the random key numbers to get the cipher image. To change the pixel values of the scrambled image, true random numbers are generated from the amplitude values of a chosen noise audio <b>file.</b> <b>Decryption</b> is performed to confirm the reception of the sent image. The proposed method resists the statistical, differential, and entropy attacks significantly which have been demonstrated with various standard im-ages...|$|E
40|$|The {{fundamental}} {{requirement of}} censorship resistance is content availability and discoverability — {{it should be}} easy for users to find and access documents. At the same time, participating storage providers should be unaware {{of what they are}} storing to preserve plausible deniability. Fulfilling these requirements simultaneously seems impossible — how does a system maintain a searchable index of content for users and yet hide it from storage providers? These paradoxical requirements have been previously reconciled by requiring out-of-band communication to either find ways to connect to the system, locate files, or learn <b>file</b> <b>decryption</b> keys — an unacceptable situation when easy content discovery is critical. This paper describes a design for a peer-to-peer, permanent, and unblockable content store which is easily searchable and yet self-contained, i. e. does not require out-of-band communication. To achieve this, we separate file data, metadata, and encryption keys such that someone searching for information about a specific topic can retrieve all three components and reconstruct the file, but someone who only stores at most two components can neither determine the nature of the file content nor locate the missing component. We begin by identifying the core requirements for unblockable storage systems to resist state-level Internet censorship, construct a system that fulfills those requirements, and analyze how it avoids the problem of prior attempts at censorship resistance. Finally, we present measurements of a deployed proof-of-concept implementation, demonstrating the feasibility of our design...|$|E
30|$|The numbers (OX, OY and OZ) {{are written}} into a file which forms the decrypted plain text <b>file.</b> Since the <b>decryption</b> process uses a {{separate}} set of operations compared to encryption unlike existing algorithms, this asymmetry of {{process is a}} unique feature.|$|R
40|$|Abstract: A file {{encryption}} {{system based on}} fingerprint-embedded storage is proposed in this paper. The system uses the MBF 200 {{to carry out the}} collection of fingerprints, uses the embedded chip ARM 2410 to process and store the fingerprints as a hardware platform, and customs the man-machine interfaces for the processes of <b>file</b> encryption and <b>decryption</b> on the host side in accordance with the needs of development. Experimental results show that the system is easy to operate, with high stability, versatility, fast speed and high precision in the fingerprint acquisition...|$|R
50|$|Palcrypt is an {{open source}} single <b>file</b> {{encryption}} and <b>decryption</b> program. The source code and the installer of the software were released by Pal Microsystems on April 24, 2008 on their website. As of 2009 it is developed and distributed by Machinescript, Inc. Palcrypt (along with AxCrypt) appealed to computer programmers/software developers and new users to file encryption by combining strong encryption methods and algorithms such as AES, the less common IDEA, MD5, SHA-1, and Blowfish with a clean graphical user interface and a simple design, fully integrated in Windows Explorer. Developers offer a forum providing information to novice users and on-line support as well.|$|R
50|$|Ransomware {{is a type}} of {{malicious}} software from cryptovirology that threatens to publish the victim's data or perpetually block access to it unless a ransom is paid. While some simple ransomware may lock the system in a way which is not difficult for a knowledgeable person to reverse, more advanced malware uses a technique called cryptoviral extortion, in which it encrypts the victim's files, making them inaccessible, and demands a ransom payment to decrypt them. In a properly implemented cryptoviral extortion attack, recovering the <b>files</b> without the <b>decryption</b> key is an intractable problem - and difficult to trace digital currencies such as Ukash and Bitcoin are used for the ransoms, making tracing and prosecuting the perpetrators difficult.|$|R
40|$|In {{this paper}} a session based {{symmetric}} key encryption {{system has been}} proposed and is termed as Permutated Cipher Technique (PCT). This technique is more fast, suitable and secure for larger files. In this technique the input file is broken down into blocks of various sizes (of 2 power n order) and encrypted by shifting the position of each bit by a certain value for {{a certain number of}} times. A key is generated randomly wherein the length of each block is determined. Each block length generates a unique value of number of bits to be skipped. This value determines the new position of the bits within the block that are to be shifted. After the shifting and inverting each block is XORed with SHA 512 digest of the key. The resultant blocks from the cipher text. The key is generated according to the binary value of the input <b>file</b> size. <b>Decryption</b> is done following the same process as the technique is symmetric. Comment: 7 Pages, International Journal of Computer Science and Information Security, IJCSIS July 2009, ISSN 1947 5500, Impact Factor 0. 42...|$|R
40|$|Abstract—The main {{application}} area for digital watermarking is copyright protection. We propose {{a method that}} increases the robustness of copyright protection watermarks by persuading users not to try attacking the watermark. The method embeds two watermarks into media; a robust one and fragile one. Copy protection information is embedded into the robust watermark. The fragile watermark contains some application specific information that the user {{do not want to}} lose. The fragile watermark is constructed so that it is destroyed, if the robust watermark is attacked. The proposed method is demonstrated with a audio encryption scenario that uses the mobile phone to play protected audio <b>files.</b> The audio <b>decryption</b> keys are embedded into the fragile watermark. Keywords—audio watermarking, digital rights management, content protection, audio encryption I...|$|R
40|$|This {{paper will}} try to {{demonstrate}} the importance of computer forensics by describing procedures, tools and differences in the use for individuals/small organizations vs. large organizations. The procedures described deal with how to collect evidence and the laws {{that need to be}} followed for admission of evidence into a court room. The tools used are the basis for all tools that are available. Tools include, backing up data, authentication, <b>decryption,</b> <b>file</b> auditing, IP tracking, and data recovery and document examination. Smaller organizations might use a variety of these or all of these. The discussion of larger organizations discusses the need for digital evidence bags (DEB) due to their extreme efficiency. A digital evidence bag is used to store information from various applications such as the tools mentioned above. Computer Forensics Procedures, Tools, and Digital Evidence Bags...|$|R
40|$|The one of {{the famous}} {{algorithm}} is Advanced Encryption Standard (AES) that is used Rijndael Algorithm. The cipher standard algorithms selected, by a Rijndael algorithm because of its high performance of security. In this paper used for file security three different kinds of algorithms i. e. RIJNDAEL, Initialization vector (IV), SHA 512 Hashing algorithm these three popular algorithms are used for <b>file</b> encryption and <b>decryption</b> approach. The first is the Rijndael algorithm used for file encryption/decryption it is using a key and Initialization vector (IV), the second Initialization vector algorithm is for encrypting the first portion of data to be encrypted and the third one is SHA 512 Hashing algorithm takes a string and transforms it into a fixed size the same or 512 bits of data string. The encryption and decryption operation used to increase the strength of security and high performance provides for file security...|$|R
5|$|Ransomware {{is a type}} of {{malicious}} software from cryptovirology that threatens to publish the victim's data or perpetually block access to it unless a ransom is paid. While some simple ransomware may lock the system in a way which is not difficult for a knowledgeable person to reverse, more advanced malware uses a technique called cryptoviral extortion, in which it encrypts the victim's files, making them inaccessible, and demands a ransom payment to decrypt them. In a properly implemented cryptoviral extortion attack, recovering the <b>files</b> without the <b>decryption</b> key is an intractable problem – and difficult to trace digital currencies such as Ukash and Bitcoin are used for the ransoms, making tracing and prosecuting the perpetrators difficult. Recent Ransomware attack in 2017 has caused a stir in the world as the attack caused many of the internet connected devices to not work and companies spent a large amount to recover from these attacks.|$|R
40|$|A {{cryptosystem}} {{describes the}} system where {{two or more}} individuals communicate in a secret manner over a public channel. The contents of information shared on a public network need to be protected against unauthorized access using a more secured technique of encryption and decryption. A cipher {{is the heart of}} a cryptosystem, which specifies the policy for encryption and decryption. The encryption policy takes the plaintext and a predetermined key, and produces a ciphertext which hides the true meaning of the original plaintext. The decryption policy takes another key, which may be different from the encryption key, and recovers the plaintext from the ciphertext. In this paper, a cryptosystem is developed using Elgamal algorithm for key exchange purpose during information sharing on a public network. The proposed system provides a secure platform for encrypting and decrypting user's key. This key could be used by a symmetric algorithm for <b>file</b> encryption and <b>decryption.</b> The system is found capable of securing user's key from illegal access by an unauthorized person...|$|R
40|$|Abstract—This paper {{describes}} one of {{the essential}} elements of Secure Workstation for Special Applications (SWSA) to cryptographic protection of removable storage devices with USB interface. SWSA is a system designed to process data classified to different security domains in which the multi-level security is used. The described method for protecting data on removable Flash RAM protects data against unau-thorized access in systems processing the data, belonging to different security domains (with different classification levels) in which channel the flow of data must be strictly controlled. Only user authenticated by the SWSA can use the removable medium in the system, and the data stored on such media can be read only by an authorized user by the SWSA. This solution uses both symmetric and asymmetric encryption al-gorithms. The following procedures are presented: creating protected a file (encryption), generating signatures for the <b>file</b> and reading (<b>decryption)</b> the <b>file.</b> Selected elements of the pro-tection systems implementation of removable Flash RAM and the mechanisms used in implementation the Windows have been described. Keywords—filter driver, removable media protection, symmetric and asymmetric encryption. 1...|$|R
40|$|Cloud {{storage is}} a model of {{networked}} online storage where data is stored in virtualized pools ofstorage which are generally hosted by third parties. Security is considered {{to be one of the}} most criticalaspects in a cloud computing environment due to the sensitive and important information stored inthe cloud for users. In order to protect data in cloud we use a secured system which is an extension of FADE(File Assured Deletion) system proposed earlier. In FADE system we associates policy to each file wheneverit is stored into the cloud and assured deletion makes the file completely unrecoverable upon the revocationof the policy associated with the file. All keys related to the <b>file</b> encryption and <b>decryption</b> operations are selfmaintainedby a quorum of key managers that are independent of third-party clouds, with this we alsoencrypt the file with long term secret key in order to provide an additional layer of protection for the file andalso we authenticate every user who request for the access to file. We implement this new FADE version andconduct evaluation atop windows azure cloud to demonstrate that FADE provides security protection foroutsourced data. In this paper, we would like to overcome weaker areas of FADE and design an even more security and alsoprovide solution for reducing the overhead in FADE...|$|R

