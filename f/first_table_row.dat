0|1786|Public
50|$|CROSS JOIN {{returns the}} Cartesian product of <b>rows</b> from <b>tables</b> in the join. In other words, it will produce rows which combine each <b>row</b> from the <b>first</b> <b>table</b> with each <b>row</b> {{from the second}} table.|$|R
40|$|The rates, {{and some}} derived parameters, of {{reaction}} of three heavy atom neutral nucleophiles (thiourea, N-acetylthiourea, and selenourea) with 1 -fluoro- and 1 -chloro- 2, 4 -dinitrobenzene are measured {{and used to}} estimate (a) the mobilities of fluorine relative to chlorine, an important mechanistic feature of the usual (addition-elimination) SNAr reactions; and (b) {{the strength of the}} reagents. Results are compared with those for a range of neutral and anionic light (Periodic <b>Table</b> <b>first</b> <b>row)</b> and heavy atom (Periodic Table second or higher row) nucleophiles. Results for 1 -iodo- 2, 4 -dinitrobenzene are included where available. A marked reduction in F:Cl mobility ratios (which are matched by F:heavy halogen ratios), well known in following a sequence from light to heavy atom anionic nucleophiles, is now shown to occur also with neutral nucleophiles...|$|R
5000|$|Basic functions: select database, select/edit <b>tables,</b> browse/insert/edit <b>table</b> <b>rows</b> ...|$|R
5000|$|Discretely valued (having {{only one}} value per {{dimension}} <b>table</b> <b>row)</b> ...|$|R
5000|$|... #Caption: Relation, tuple, and {{attribute}} {{represented as}} <b>table,</b> <b>row,</b> and column respectively.|$|R
5000|$|The cost is constant, {{as every}} time {{database}} system needs to scan full <b>table</b> <b>row</b> by row.|$|R
5000|$|... |= |= table |= header || a | <b>table</b> | <b>row</b> || b | <b>table</b> | <b>row</b> | ...|$|R
5000|$|<b>Table</b> <b>rows</b> 2 to 7 (except {{character}} 127, 7Fhex), codes 32 to 126 (20hex to 7Ehex), are {{the standard}} ASCII printable characters.|$|R
5000|$|<b>Table</b> <b>rows</b> 8 to 10 (8hex to Ahex), codes 128 to 175 (80hex to AFhex), are a {{selection}} of international text characters.|$|R
50|$|After {{defining}} the dimensions, {{the next step}} in the process is to make keys for the fact table. This step is to identify the numeric facts that will populate each fact <b>table</b> <b>row.</b> This step is closely related to the business users of the system, since this is where they get access to data stored in the data warehouse. Therefore, most of the fact <b>table</b> <b>rows</b> are numerical, additive figures such as quantity or cost per unit, etc.|$|R
5000|$|... {{function}} BWT (string s) {{create a}} <b>table,</b> <b>rows</b> are all possible rotations of s sort rows alphabetically return (last column of the table) ...|$|R
30|$|SQL++ can be {{used with}} datastores {{adopting}} different data models, thus, the term data unit is used to denote a <b>table</b> <b>row,</b> or a document.|$|R
5000|$|... random: AutoNumbers {{generated}} by this mechanism are assigned using a pseudo-random number generator that generates long integers and checks for collisions with existing <b>table</b> <b>rows.</b>|$|R
5000|$|... start value plus increment: AutoNumbers {{generated}} by this mechanism {{start with the}} start number and increment with the increment value, checking for collision with existing <b>table</b> <b>rows.</b>|$|R
50|$|Note {{that only}} step 4 {{of the above}} {{procedure}} produces reduce actions, and so all reduce actions must occupy an entire <b>table</b> <b>row,</b> causing the reduction to occur regardless of the next symbol in the input stream. This is why these are LR(0) parse tables: they don't do any lookahead (that is, they look ahead zero symbols) before deciding which reduction to perform. A grammar that needs lookahead to disambiguate reductions would require a parse <b>table</b> <b>row</b> containing different reduce actions in different columns, and the above procedure is not capable of creating such rows.|$|R
50|$|A single set of tables, for example, can be {{implemented}} in numerous ways, {{up to and including}} an architecture where <b>table</b> <b>rows</b> are maintained on computers in different countries.|$|R
5000|$|<b>Table</b> <b>rows</b> 0 and 1, codes 0 to 31 (00hex to 1Fhex), are {{assorted}} dingbats (complementary {{and decorative}} characters). The isolated character 127 (7Fhex) also belongs to this group.|$|R
3000|$|Categories and Occurrences: A {{combination}} of 1 and 2. As shown in (<b>Table</b> 10, <b>row</b> 4,), results equal those already obtained by our improved approach (<b>Table</b> 9, <b>row</b> 8) [...]...|$|R
5000|$|Document {{oriented}} databases also {{prevent the}} user {{from having to}} [...] "shred" [...] objects into <b>table</b> <b>rows.</b> Many of these systems also support the XQuery query language to retrieve datasets.|$|R
5000|$|... for x and y in {1, 2, 3}; such {{functions}} {{are in the}} same <b>table</b> <b>row.</b> Consequently, two {{functions are}} D-related if and only if their images are the same size.|$|R
50|$|According to PostgreSQL v.9 documentation, an SQL Window {{function}} {{performs a}} calculation across {{a set of}} <b>table</b> <b>rows</b> that are somehow related to the current row, in a way similar to aggregate functions.|$|R
5000|$|State minimization: As {{the name}} suggests, {{the number of}} states {{required}} to represent FSM is minimized. Various techniques and algorithms like implication <b>tables,</b> <b>row</b> matching, successive partitioning algorithm, identify and remove equivalent or redundant states.|$|R
3000|$|FGAC {{granularity}} Let us now {{start to}} consider why the FGAC solutions developed for RDBMSs cannot be reused for the NoSQL scenario. To make the discussion more concrete, {{let us consider}} Oracle VPD, {{one of the most}} popular FGAC solutions developed for RDBMSs. Oracle VPD considers <b>table</b> <b>rows</b> as the finest protection objects. From a data management perspective, <b>table</b> <b>rows</b> of relational databases correspond to documents of document-oriented NoSQL datastores, even though documents model data resources in a less abstract way than rows, as they do not abstract from the intrinsic structure of a resource, and thus they do not require one to flatten the resource content.|$|R
50|$|The joined table retains each rowâ€”even if {{no other}} {{matching}} row exists. Outer joins subdivide further into left outer joins, right outer joins, and full outer joins, {{depending on which}} <b>table's</b> <b>rows</b> are retained (left, right, or both).|$|R
5000|$|A wide column {{store is}} a type of {{key-value}} database. It uses <b>tables,</b> <b>rows,</b> and columns, but unlike a relational database, the names and format of the columns can vary from row to row in the same table.Examples: ...|$|R
40|$|Any {{auxiliary}} structure, {{such as a}} bitmap or a B +-tree index, that {{refers to}} <b>rows</b> of a <b>table</b> stored as a primary B +-tree (e. g., tables with clustered index in Microsoft SQL Server, or index-organized tables in Oracle) by their physical addresses would require updates due to inherent volatility of those addresses. To address this problem, we propose a mapping mechanism that 1) introduces asinglemapping <b>table,</b> with each <b>row</b> holding one key value from the primary B +-tree, as an intermediate structure between the primary B +-tree and the associated auxiliary structures, and 2) augments the primary B +-tree structure to include in each row the physical address of the corresponding mapping <b>table</b> <b>row.</b> The mapping <b>table</b> <b>row</b> addresses can then {{be used in the}} auxiliary structures to indirectly refer to the primary B +-tree rows. The two key benefits are: 1) the mapping table shields the auxiliar...|$|R
50|$|A table cell {{also must}} be nested within a tag and a (<b>table</b> <b>row)</b> tag. If there are more table cell tags in any given row than in any other, the {{particular}} must be given a colspan attribute declaring how many columns of cells wide it should be.|$|R
40|$|Pienaar (1974) {{showed the}} habitat {{preferences}} of South African antelope species in a two-way <b>table.</b> <b>Rows</b> represent species and columns represent habitats. Matrix entries link species to their preferred habitats (Table 1). Species in Table 1 are in taxonomic order, {{which has no}} apparent bearing on their habitat preferences...|$|R
50|$|DBIx::Class (often {{abbreviated}} as DBIC) is an object-relational mapper for Perl. It {{is used to}} map {{relational database}} <b>table</b> <b>rows</b> to Perl objects and generates SQL queries transparently to the application developer. It also implements the active record pattern. It is popular in Web application frameworks such as Catalyst and Dancer.|$|R
5000|$|Eloquent ORM (object-relational mapping) is an {{advanced}} PHP {{implementation of the}} active record pattern, providing {{at the same time}} internal methods for enforcing constraints on the relationships between database objects. Following the active record pattern, Eloquent ORM presents database tables as classes, with their object instances tied to single <b>table</b> <b>rows.</b>|$|R
5000|$|Distributed ACID {{transaction}} protection {{across multiple}} statements, <b>tables,</b> and <b>rows</b> ...|$|R
50|$|Athletic {{activities}} include football, cricket, badminton, <b>table</b> tennis, <b>rowing</b> and throwball.|$|R
5000|$|Note: The <b>table</b> <b>rows</b> {{shown in}} red {{represents}} data that was cited {{directly from the}} Des Moines Public Schools enrollment reports. Some of this data conflicts with data from the Iowa Department of Education annual reports. This is because the underlying data is complex, and the table above is {{a summary of the}} data collected from the two sources.|$|R
5000|$|... {{function}} inverseBWT (string s) create empty table repeat length(s) times // first insert creates first column insert s as {{a column}} of <b>table</b> before <b>first</b> column of the <b>table</b> sort <b>rows</b> of the <b>table</b> alphabetically return (<b>row</b> that ends with the 'EOF' character) ...|$|R
50|$|The {{following}} is the medal <b>table</b> for <b>rowing</b> at the 2013 Canada Summer Games.|$|R
3000|$|Performance {{overhead}} from atomic two-phase distributed transactions comes {{primarily from}} two sources: protocol overhead and lock contention. Protocol overhead {{is caused by}} the latency of prepare and commit messages in a databaseâ€™s two-phase commit protocol. Lock contention is caused by queuing delay which increases as transactions over common <b>table</b> <b>rows</b> become blocked. We provide two alternatives to account for such overhead: [...]...|$|R
