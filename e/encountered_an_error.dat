10|10000|Public
2500|$|The {{front of}} the console {{features}} a [...] "ring of light" [...] that displays four illuminated quadrants in either red or green (except the redesigned console which only has green lights). When the lights turn red, the console has <b>encountered</b> <b>an</b> <b>error,</b> {{with the number of}} sectors illuminated informing the user what category the error falls into. Since the redesign of the console removed the red LEDs, this error reporting system is no longer used.|$|E
5000|$|The {{simplest}} type of {{dialog box}} is the alert, which displays {{a message and}} may require an acknowledgment that the message has been read, usually by clicking [...] "OK", or a {{decision as to whether}} or not an action should proceed, by clicking [...] "OK" [...] or [...] "Cancel". Alerts are also used to display a [...] "termination notice" [...] - sometimes requesting confirmation that the notice has been read - in the event of either an intentional closing or unintentional closing ("crash") of an application or the operating system. (E.g., [...] "Gedit has <b>encountered</b> <b>an</b> <b>error</b> and must close.") Although this is a frequent interaction pattern for modal dialogs, it is also criticized by usability experts as being ineffective for its intended use, which is to protect against errors caused by destructive actions, and for which better alternatives exist.|$|E
5000|$|To {{deal with}} this problem, a number of file {{transfer}} protocols were introduced and implemented in various programs. In general, these protocols break down a file {{into a series of}} frames or packets containing a number of bytes from the original file. Some sort of additional data, normally a checksum or CRC, is added to each packet to indicate whether the packet <b>encountered</b> <b>an</b> <b>error</b> while being received [...] The packet is then sent to the remote system, which recomputes the checksum or CRC of the data and compares it to the received checksum or CRC to determine if it was received properly. If it was, the receiver sends back an ACK ( [...] acknowledgement [...] ) message, prompting the sender to send the next packet. If there was any problem, it instead sends a NAK (not-acknowledged) message, and the sender resends the damaged packet.|$|E
5000|$|Spam {{can also}} be hidden inside a fake [...] "Undelivered mail notification" [...] which looks like the failure notices sent by a mail {{transfer}} agent (a [...] "MAILER-DAEMON") when it <b>encounters</b> <b>an</b> <b>error.</b>|$|R
5000|$|April 4, 1949 - Ran a fifty-line {{program to}} fill memory and check all instructions. It ran for 2.5 hours before <b>encountering</b> <b>an</b> <b>error.</b> Shortly {{after that it}} ran for 31.5 hours without error.|$|R
50|$|A {{process which}} exceeds its per-process limit and then {{attempts}} to allocate further memory will <b>encounter</b> <b>an</b> <b>error</b> condition. For example, the C standard function for allocating memory, , will return NULL. A well-behaved application should handle this situation gracefully; however, many do not.|$|R
5000|$|When an {{operator}} keying {{data to be}} verified <b>encountered</b> <b>an</b> <b>error,</b> the operator was given a second and third try to re-enter the data {{that was supposed to}} be in the field. If the third try was incorrect an error notch was put on the top of the card over the column with the error and the [...] "OK" [...] punch at the end of the card was not enabled. The data on the card could actually be correct, since the verifier operator was just as likely to make an error as the keypunch operator. However, with three tries, the operator was less likely to repeatedly make the same error. Some verifier operators were able to guess the error on the card created by the previous keypunch operator, defeating the purpose of the verify procedure, and thus some machines were altered to allow only one entry and error notched on the second try.|$|E
5000|$|The Hiigarans are the playable race in {{the single}} player game. Their story began in the {{original}} [...] "Homeworld" [...] {{as a number of}} Kushan clans on a desert planet called Kharak. They detected a large metal formation in the Great Desert after a deep-space scanning satellite <b>encountered</b> <b>an</b> <b>error</b> in its propulsion system, which turned it around and scanned the planet's [...] "Great Desert". It was revealed to be an ancient space ship, turned into a city, known as the [...] "Khar-Toba". Inside was a stone with a galactic map and the text, [...] "Hiigara", which, despite other linguistic drifts, still meant [...] "Home" [...] in every dialect on Kharak. The discovery of the stone served as a powerful enough symbol to end all wars and unite the entire global population into an effort to travel into space to discover their origins. The technology discovered allowed the Kushan to build a massive Mothership which took 60 years, according to the opening cutscene. However, no computer was powerful enough to command the Mothership, as there would be too much data to be processed at any one time. A young scientist named Karan S'jet volunteered to become the living core of the Mothership after creating the technology to neurologically link her brain to the Mothership's systems (this action, however, led Karan to become inseparable from the core, but it is revealed at the end of Homeworld 1, she survived being disconnected from the vessel). Within the Khar-Toba was one of the three known Hyperspace Cores, which allowed the Mothership to perform its hyperspace jumps.|$|E
40|$|Society {{always need}} of {{information}} and education which update. Information obtained through the mass media on newspaper. Editing errors are errors that often occur in the print media that can be detrimental to the company. This study aimed to analyze the factors of news editing error in the print media journalists in PT X. This study is a descriptive qualitative research method with the calculation of reliability HEART and NASA TLx to measuring subjective mental workload journalist. The subjects of this research were 5 people as a key informants and 2 as an triangulation informants. For triangulation subjects taken from the Manager Editorial and Head Editorial. The results of this research from NASA TLx that editor jobs included in the heavy mental workload in which 60 % of informants. The HEP value by HEART method obtained is take and selection news (0. 825), distribution to desk (0. 821), editing news (0, 645). The {{results showed that the}} editing process is often experienced that the accuracy of the presentation of news, all of the informants claimed to have <b>encountered</b> <b>an</b> <b>error</b> editing, working time and training factors affecting journalistic editing capabilities while the pressure of time and means factors do not affect the ability of news editing. Analysis workloads including large editorial with the largest category is effort 294. Company X needs to provide regular evaluation and journalism training to increase the ability and capacity of editing news journalist...|$|E
50|$|When <b>a</b> {{compiler}} <b>encounters</b> <b>an</b> <b>error</b> when parsing <b>a</b> {{computer program}} {{it may be}} the first error of many. Hence it is better for the compiler to continue parsing, and output all errors it finds, rather than report one error and halt.|$|R
2500|$|Normally, the (non-placement) new {{functions}} throw an exception, of type std::bad_alloc, if they <b>encounter</b> <b>an</b> <b>error,</b> such as exhaustion of {{all available}} memory. This was not how the functions were defined by Stroustrup's Annotated C++ Reference Manual, {{but was a}} change made by the standardization committee when the C++ language was standardized. The original behaviour of the functions, which was to return a [...] pointer when <b>an</b> <b>error</b> occurred, is accessible via placement syntax.|$|R
5000|$|If [...] cannot find {{sufficient}} {{memory to}} service an allocation request, it can report its error in three distinct ways. Firstly, the ISO C++ standard allows programs to register a custom function called a [...] with the C++ runtime; if it does, then this function is called whenever [...] <b>encounters</b> <b>an</b> <b>error.</b> The [...] may {{attempt to make}} more memory available, or terminate the program if it can't.|$|R
40|$|In {{a recent}} paper by Mellor et al., {{it was found}} that, in {{two-dimensional}} (x, z) applications with finite horizontal viscosity and zero diffusivity, the velocity error, associated with the evaluation of horizontal density or pressure gradients on a sigma coordinate grid, prognostically disappeared, leaving behind a small and physically insig-nificant distortion in the density field. The initial error is numerically consistent in that it decreases as {{the square of the}} grid increment size. In this paper, we label this error as a sigma error of the first kind. In three-dimensional applications, the authors have <b>encountered</b> <b>an</b> <b>error</b> that did not disappear and that has not been understood by us or, apparently, others. This is a vorticity error that is labeled a sigma error of the second kind and is a subject of this paper. Although it does not prognostically disappear, it seems to be tolerably small. To evaluate these numerical errors, the authors have adopted the seamount problem initiated by Beckman and Haidvogel. It represents a stringent test case, as evidenced by their paper, wherein the model is initialized with horizontal isopycnals, zero velocity, and no forcing; then, any velocities that develop must be considered errors. Two appendices are important adjuncts to the paper, the first providing theoretical confirmation and under-standing of the numerical results, and the second delving into additional errors related to horizontal or isosigma diffusion. It is, however, shown that satisfactory numerical solutions are obtained with zero diffusivity. 1...|$|E
40|$|Numerical {{prediction}} through Computational Fluid Dynamic (CFD) for ship {{design and}} optimization {{has been applied}} {{in the recent years}} in the ship industries. Nowadays, there are several commercial software with Graphic User Interface (GUI) that is convenient to use. SHIPFLOW by FLOWTECH International AB is designed towards naval architect with an easy to use GUI for CFD predictions. There are three methods {{that can be used to}} predict ship’s resistance in SHIPFLOW, which are Panel method, Boundary layer method, and Reynolds-average Navier Stokes (RANS). In this thesis, all three methods are going to be used with some exceptions. The effect of free surface is neglected for viscous flow with RANS method and only one type of fluid being considered. This limitation will in turn neglect the wave breaking and spray (bulb effect) that are of a viscous effect. Turbulence model used to solve the equation in RANS method is only using Explicit Algebraic Stress Model (EASM). There are two type of ship that is considered for this study, which are tanker ship and RORO vessel. There was an issue with the software when running simulation for RORO vessel at draft lower than 7. 7 meter. Looking at the mesh, it seems that the software <b>encountered</b> <b>an</b> <b>error</b> when the bulb is not fully submerged or the top part of the bulb is too close with the surface. In general, CFD global RANS gives accurate resistance prediction compare to the model test at even keel. However, the trend for CFD result at speed below 15. 5 knot are not similar with model test. This is due the fact that the bulb effect is neglected for CFD calculation. As for tanker ship, zonal method CFD mostly failed to give similar propulsive power trend with experimental result. At 30 kilo Ton (kT) loading condition, however, the trend is similar on both zonal CFD and model test result. Global RANS was only succeeded to run at speed of 8, 9 and 14 knots...|$|E
40|$|Education {{is a means}} or {{a vehicle}} that works {{to improve the quality}} of both aspects of human ability, personality, and {{obligations}} as a good citizen. Education cored interaction between educators with students in an effort to help learners master the educational goals. In an effort to support the improvement of the quality of education the textbook procurement as a means of business education is very important. With regard to the importance of factors in the learning of mathematics textbooks in use in the teaching of mathematics in junior arises the question whether the textbooks used in the schools have met the quality standards of good views of curriculum benchmarks and relevant theories. Based on the background that has been described, it problem in this study is any misconceptions on the subject of geometry textbook seventh grade junior high school math ? In this study, respectively will be presented the research design, research procedures, research subjects, research instruments, and data analysis. Textbooks obtained by asking a few students in the seventh grade junior high school mathematics textbooks Malang about what they use at school. From the observations obtained two math textbooks used in some secondary schools in Malaysia, namely : MG and GE. This study aimed to describe the concept of fault geometry in junior high school mathematics textbooks VII. Based on the description of the junior high school math book study class VII geometry that is the subject of the disclosure of the concept fallacy in MG, GE, six consecutive errors, and the errors. In the book MGMPs Malang (MG) found that five of six error or error in defining the type 1 error and the error in the improper use of illustrations to explain concepts or definitions, mistakes or so-called type 3 and one of the errors are 1 errors editorial lead to misconceptions. At the exact Ganeca book (GE) <b>encountered</b> <b>an</b> <b>error</b> that is a mistake or error in defining the type 1...|$|E
5000|$|Some {{versions}} of the program (including 2.0 v3) have a bug where users are unable to save their work, <b>encountering</b> <b>an</b> <b>error</b> stating that <b>an</b> additional 1k of disk space is required. This {{is due to a}} limitation of saving to large size, HFS+ formatted disks. One can save to a floppy disk or small RAM disk as a workaround, or use the [...] "Save As..." [...] command, renaming the file in the process.|$|R
40|$|Abstract-In this paper, a novel {{reliable}} energy aware {{routing protocol}} is proposed, {{which is based}} on reliability and energy efficiency. Since in the wireless environment, link quality is difficult to guarantee, the reliable routing protocol is quite important issue to study. In this protocol, a backup path, alternative path and critical value is used for reliability and low energy conservation. MREAR attempts to take precaution against error, instead of finding <b>a</b> solution after <b>encountering</b> <b>an</b> <b>error...</b>|$|R
5000|$|Jerry Pournelle in 1985 asked, [...] "why {{do we need}} True BASIC at all? It doesn't seem to do {{anything}} regular BASIC doesn't do, {{and what it does}} do isn't attacked in a logical or intuitive manner." [...] He criticized the lack of output when <b>encountering</b> <b>an</b> <b>error,</b> preventing interactive debugging by [...] "inserting print statements as diagnostics". Pournelle concluded, [...] "I think I'll pass up the opportunity to become a born-again True BASIC believer. I'll enjoy my Microsoft and CBASIC heresies." ...|$|R
50|$|The Black Screen of Death is <b>an</b> <b>error</b> screen {{displayed}} by some operating systems after <b>encountering</b> <b>a</b> critical system <b>error</b> {{which can cause}} the system to shut down.|$|R
5000|$|In {{practice}} direct {{translation of}} color reads into base reads is not advised as the moment one <b>encounters</b> <b>an</b> <b>error</b> {{in the color}} calls it {{will result in a}} frameshift of the base calls. To best leverage the [...] "error correction" [...] properties of two base encoding it is best to convert your base reference sequence into color-space. There is one unambiguous conversion of a base reference sequence into color-space and while the reverse is also true the conversion can be wildly inaccurate if there are any sequencing errors.|$|R
5000|$|In Windows NT {{family of}} {{operating}} systems, the blue screen of death (officially known as <b>a</b> stop <b>error</b> {{and referred to}} as [...] "bug check" [...] in the Windows software development kit and driver development kit documentation) occurs when the kernel or a driver running in kernel mode <b>encounters</b> <b>an</b> <b>error</b> from which it cannot recover. This is usually caused by an illegal operation being performed. The only safe action the operating system can take in this situation is to restart the computer. As a result, data may be lost, as users are not {{given an opportunity to}} save data that has not yet been saved to the hard drive.|$|R
5000|$|The Bomb icon is {{a symbol}} that was {{displayed}} when a classic Mac OS program had an application crash. The bomb symbols were also used by the Atari ST line of computers when the system <b>encountered</b> <b>a</b> fatal <b>error.</b> The number of bombs indicated the exact cause of the error.|$|R
5000|$|Canon has {{acknowledged}} [...] that some PowerShot S100 digital cameras <b>encounter</b> <b>a</b> lens <b>error</b> caused by <b>a</b> disconnected part inside the camera. This makes the camera unusable. Canon offers free repairs {{well beyond the}} warranty date, even if the camera has a serial number outside the range mentioned in the product advisory.|$|R
40|$|Internal Server <b>Error</b> The server <b>encountered</b> <b>an</b> {{internal}} <b>error</b> or misconfiguration and {{was unable}} to complete your request. Please contact the server administrator, webmaster@rtu. lv and inform them of the time the error occurred, and anything you might have done that may have caused the error. More information about this error may be available in the server error log...|$|R
40|$|Many programmers, {{when they}} <b>encounter</b> <b>an</b> <b>error,</b> {{would like to}} have the benefit of {{automatic}} fix suggestions [...] -as long as they are, most of the time, adequate. Initial research in this direction has generally limited itself to specific areas, such as data structure classes with carefully designed interfaces, and relied on simple approaches. To provide high-quality fix suggestions in a broad area of applicability, the present work relies on the presence of contracts in the code, and on the availability of dynamic analysis to gather evidence on the values taken by expressions derived from the program text. The ideas have been built into the AutoFix-E 2 automatic fix generator. Applications of AutoFix-E 2 to general-purpose software, such as a library to manipulate documents, show that the approach provides an improvement over previous techniques, in particular purely model-based approaches...|$|R
5000|$|Some program {{debugging}} {{can only}} be performed (or is more efficient or accurate when performed) at runtime. Logic errors and array bounds checking are examples. For this reason, some programming bugs are not discovered until the program is tested in a production environment with real data, despite sophisticated compile-time checking and pre-release testing. In this case, the end user may <b>encounter</b> <b>a</b> runtime <b>error</b> message.|$|R
40|$|The file {{contains}} all Czech verbs {{included in the}} Retrograde Morphemic Dictionary of Czech Language (Slavíčková Eleonora, Academia 1975). The data was obtained by scanning {{a portion of the}} dictionary that contains words ending in -ci and -ti. Among them, there were 18 non-verbs, which were removed. Using OCR, the data was converted into the plain text format and the result was checked by two independent readers. However, if <b>a</b> user <b>encounters</b> <b>a</b> forgotten <b>error,</b> please report...|$|R
50|$|On April 13, 2007, NASA {{announced}} {{the loss of}} the spacecraft was caused by a flaw in a parameter update to the spacecraft's system software. The spacecraft was designed to hold two identical copies of the system software for redundancy and error checking. Subsequent updates to the software <b>encountered</b> <b>a</b> human <b>error</b> when two independent operators updated separate copies with differing parameters. This was followed by a corrective update that unknowingly included a memory fault which resulted in {{the loss of the}} spacecraft.|$|R
5000|$|On an {{absolutely}} stable system, Prime95 would run indefinitely. If <b>an</b> <b>error</b> occurs, {{at which point}} the stress test would terminate, this would indicate that the system may be unstable. There is an ongoing debate about terms [...] "stable" [...] and [...] "Prime-stable", as Prime95 often fails before the system becomes unstable or crashes in any other application. This is because Prime95 is designed to subject the CPU to an incredibly intense workload, and to halt when it encounters even one minor error, whereas most normal applications do not stress the CPU anywhere near as much, and will continue to operate unless they <b>encounter</b> <b>a</b> fatal <b>error.</b>|$|R
40|$|International audienceHuman motor {{behavior}} is constantly adapted {{through the process}} of error-based learning. When the motor system <b>encounters</b> <b>an</b> <b>error,</b> its estimate about the body and environment will change, and the next movement will be immediately modified to counteract the underlying perturbation. Here, we show that a second mechanism, use-dependent learning, simultaneously changes movements to become more similar to the last movement. In three experiments, participants made reaching movements toward a horizontally elongated target, such that errors in the initial movement direction {{did not have to be}} corrected. Along this task-redundant dimension, we were able to induce use-dependent learning by passively guiding movements in a direction angled by 8 degrees from the previous direction. In a second study, we show that error-based and use-dependent learning can change motor behavior simultaneously in opposing directions by physically constraining the direction of active movements. After removal of the constraint, participants briefly exhibit an error-based aftereffect against the direction of the constraint, followed by a longer-lasting use-dependent aftereffect in the direction of the constraint. In the third experiment, we show that these two learning mechanisms together determine the solution the motor system adopts when learning a motor task...|$|R
40|$|Humanmotor {{behavior}} is constantly adapted {{through the process}} of error-based learning. When themotor system <b>encounters</b> <b>an</b> <b>error,</b> its estimate about the body and environment will change, and the next movement will be immediately modified to counteract the underlying perturbation. Here, we show that a second mechanism, use-dependent learning, simultaneously changes movements to become more similar to the last movement. In three experiments, participants made reaching movements toward a horizontally elon-gated target, such that errors in the initial movement direction {{did not have to be}} corrected. Along this task-redundant dimension, we were able to induce use-dependent learning by passively guidingmovements in a direction angled by 8 ° from the previous direction. In a second study, we show that error-based and use-dependent learning can change motor behavior simultaneously in opposing directions by physically constraining the direction of activemovements. After removal of the constraint, participants briefly exhibit an error-based aftereffect against the direction of the constraint, followedby a longer-lasting use-dependent aftereffect in the direction of the constraint. In the third experiment, we show that these two learning mechanisms together determine the solution the motor system adopts when learning a motor task...|$|R
40|$|When <b>a</b> {{compiler}} <b>encounters</b> <b>a</b> syntax <b>error,</b> {{it usually}} attempts to restart parsing {{to check the}} remainder of the input for any further errors. One common method of recovering from syntax errors is to repair the incorrect input string, allowing parsing to continue. This research presents a language independent method for repairing the input string to an LALR(1) parser. The method results in much faster repairs in general than an existing method, enabling some errors to be repaired that were previously too costly. Results are based on repairing syntax errors in Java programs from first year computer science stu- dents...|$|R
40|$|This paper {{presents}} the design, implementation {{and evaluation of}} “dBug ” – a tool that leverages manual instrumentation for systematic evaluation of distributed and concurrent systems. Specifically, for a given distributed concurrent system, its initial state and a workload, the dBug tool systematically explores possible orders in which concurrent events triggered by the workload can happen. Further, dBug optionally uses the partial order reduction mechanism to avoid exploration of equivalent orders. Provided with a correctness check, the dBug tool is able to verify that all possible serializations of a given concurrent workload execute correctly. Upon <b>encountering</b> <b>an</b> <b>error,</b> the tool produces a trace that can be replayed to investigate the error. We applied the dBug tool {{to a couple of}} distributed systems – the Parallel Virtual File System (PVFS) implemented in C and the FAWN-based key-value storage (FAWN-KV) implemented in C++. In particular, we integrated both systems with dBug to expose the nondeterminism due to concurrency. This mechanism was used to verify that the result of concurrent execution of a number of basic operations from a fixed initial state meets the high-level specification of PVFS and FAWN-KV. The experimental evidence shows that the dBug tool is capable of systematically exploring behaviors of a distributed system in a modular, practical, and effective manner. ...|$|R
50|$|The XML {{specification}} clearly defines that a conforming {{user agent}} (such as a web browser) must not accept a document, and not continue parsing it, if any syntactical <b>error</b> is <b>encountered.</b> Thus, <b>a</b> browser interpreting a web page as XHTML will refuse {{to display the}} page if it <b>encounters</b> <b>a</b> formation <b>error.</b> This can help ensure that when authors test XHTML code against a conforming browser they will immediately be informed of malformation problems: perhaps the most severe problem facing web browsers. When code is malformed, {{the intent of the}} author is ambiguous. Without the directives of XML, HTML browsers must use complex algorithms to infer the author's intended meaning {{in a wide range of}} cases where invalid syntax is encountered.|$|R
40|$|We {{present a}} new {{technique}} for enabling computations to survive errors and faults while providing a bound on any resulting output distortion. A developer using the technique first partitions the computation into tasks. The execution platform then simply discards any task that <b>encounters</b> <b>an</b> <b>error</b> or <b>a</b> fault and completes the computation by executing any remaining tasks. This technique can substantially improve the robustness of the computation {{in the face of}} <b>errors</b> and faults. <b>A</b> potential concern is that discarding tasks may change the result that the computation produces. Our technique randomly samples executions of the program at varying task failure rates to obtain a quantitative, probabilistic model that characterizes the distortion of the output {{as a function of the}} task failure rates. By providing probabilistic bounds on the distortion, the model allows users to confidently accept results produced by executions with failures as long as the distortion falls within acceptable bounds. This approach may prove to be especially useful for enabling computations to successfully survive hardware failures in distributed computing environments. Our technique also produces a timing model that characterizes the execution time as a function of the task failure rates. The combination of the distortion and timing models quantifies an accuracy/execution time tradeoff. It therefore enables the development of techniques that purposefully fail tasks to reduce the execution time while keeping the distortion within acceptable bounds. 1...|$|R
40|$|In {{previous}} work [20], we introduced a comprehensive type debugging framework {{which has been}} implemented {{as part of the}} Chameleon system [21]. The basic idea is to map expressions to constraints. Upon <b>encountering</b> <b>a</b> type <b>error,</b> i. e. unsatisfiable constraint, we extract the minimal amount of information necessary for explaining those errors; we look for minimal unsatisfiable constraints. Values attached to individual constraints refer back to program locations that contributed to those constraints. Highlighting those locations allows us to identify expressions which contributed to the type error. Our approach naturally deals with type classes; we are able to highlight type class rules (such as instances and functional dependencies) which are part of the type error...|$|R
