751|5524|Public
5|$|All {{versions}} of Perl do automatic data-typing and automatic memory management. The interpreter knows {{the type and}} storage requirements of every <b>data</b> <b>object</b> in the program; it allocates and frees storage for them as necessary using reference counting (so it cannot deallocate circular data structures without manual intervention). Legal type conversions — for example, conversions from number to string — are done automatically at run time; illegal type conversions are fatal errors.|$|E
2500|$|... eq? evaluates to #f unless its {{parameters}} {{represent the}} same <b>data</b> <b>object</b> in memory; ...|$|E
5000|$|Content Information: this {{includes}} the <b>data</b> <b>object</b> and its representation information ...|$|E
5000|$|ActiveX <b>Data</b> <b>Objects</b> ActiveX <b>Data</b> <b>Objects</b> (ADO) (both 32-bit and 64-bit versions) ...|$|R
5000|$|Dynamic Data: {{provides}} the functionality to define <b>data</b> <b>objects</b> using metadata (stored in the database). The <b>data</b> <b>objects</b> {{can be used}} to extend existing <b>data</b> <b>objects</b> in most modules, or to provide all the database access required in a module. The dynamic <b>data</b> <b>objects</b> can map onto individual physical tables, a single shared table, text files or any other underlying storage mechanism by extending classes.|$|R
40|$|Most {{existing}} clustering algorithms cluster highly related <b>data</b> <b>objects</b> such as Web {{pages and}} Web users separately. The interrelation among {{different types of}} <b>data</b> <b>objects</b> is either not considered, or represented by a static feature space and treated in the same ways as other attributes of the objects. In this paper, we propose a novel clustering approach for clustering multi-type interrelated <b>data</b> <b>objects,</b> ReCoM (Reinforcement Clustering of Multi-type Interrelated <b>data</b> <b>objects).</b> Under this approach, relationships among <b>data</b> <b>objects</b> are used to improve the cluster quality of interrelated <b>data</b> <b>objects</b> through an iterative reinforcement clustering process. At the same time, the link structure derived from relationships of the interrelated <b>data</b> <b>objects</b> is used to differentiate the importance of objects and the learned importance is also used in the clustering process to further improve the clustering results. Experimental {{results show that the}} proposed approach not only effectively overcomes the problem of data sparseness caused by the high dimensional relationship space but also significantly improves the clustering accuracy. 1...|$|R
50|$|At each level, the {{algorithm}} needs to decide in which subtree to insert the new <b>data</b> <b>object.</b> When a <b>data</b> <b>object</b> is fully {{contained in a}} single rectangle, the choice is clear. When there are multiple options or rectangles in need of enlargement, the choice can {{have a significant impact}} on the performance of the tree.|$|E
5000|$|... evaluates to [...] unless its {{parameters}} {{represent the}} same <b>data</b> <b>object</b> in memory; ...|$|E
5000|$|<b>Data</b> <b>object</b> model, {{database}} generation through object-relational mapping, {{suite of}} customizable data input controls.|$|E
40|$|Multicluster {{architectures}} {{overcome the}} scaling problem of centralized resources by distributing the datapath, register file, and memory subsystem across multiple clusters {{connected by a}} communication network. Traditional compiler partitioning algorithms focus solely on distributing operations across the clusters to maximize instruction-level parallelism. The distribution of <b>data</b> <b>objects</b> is generally ignored. In this work, we examine explicit partitioning of <b>data</b> <b>objects</b> and its affects on operation partitioning. The partitioning of <b>data</b> <b>objects</b> must consider several factors: object size, access frequency/pattern, and dependence patterns between operations that manipulate the objects. This work proposes a compiler-directed approach to synergistically partition both <b>data</b> <b>objects</b> and computation across multiple clusters. First, a global view of the application determines the interaction between <b>data</b> memory <b>objects</b> and their associated computation. Next, <b>data</b> <b>objects</b> are partitioned across multiple clusters {{with knowledge of the}} associated computation required by the application. Finally, the resulting distribution of the <b>data</b> <b>objects</b> is relayed to a region-level computation partitioner, which carefully places computation operations in a performance -centric manner...|$|R
30|$|In {{order to}} {{reallocate}} numeric values of <b>data</b> <b>objects</b> among distributed nodes, {{it is necessary}} to compute additional slacks of <b>data</b> <b>objects</b> at each node.|$|R
50|$|The Service <b>Data</b> <b>Objects</b> (SDO) {{provides}} {{with the}} use of SDO API, use dynamic objects to customize and manipulate XML, use of static <b>data</b> <b>objects</b> and conversion of XML Schema.|$|R
5000|$|Terminal {{verification}} results (TVR) is an EMV <b>data</b> <b>object.</b> The TVR is {{a series}} of bits set by the terminal reading an EMV card, based on logical tests (for example has the card expired). This <b>data</b> <b>object</b> is used in the terminal's decision whether to accept, decline or go on-line for a payment transaction. The format of the TVR is as follows: ...|$|E
50|$|SDO: Service <b>Data</b> <b>Object</b> - Configuration settings, {{possibly}} node ID, baud rate, offset, gain, etc.|$|E
5000|$|... 1. A {{memory for}} storing data for access by an {{application}} program being executed on a data processing system, comprising:a data structure stored in said memory, said data structure including information resident in a database used by said application program and including:a plurality of attribute data objects stored in said memory, each of said attribute data objects containing different information from said database;a single holder attribute <b>data</b> <b>object</b> for each of said attribute data objects, each of said holder attribute data objects being one of said plurality of attribute data objects, a being-held relationship existing between each attribute <b>data</b> <b>object</b> and its holder attribute <b>data</b> <b>object,</b> and each of said attribute data objects having a being-held relationship with only a single other attribute <b>data</b> <b>object,</b> thereby establishing a hierarchy of said plurality of attribute data objects;a referent attribute <b>data</b> <b>object</b> {{for at least one}} of said attribute data objects, said referent attribute <b>data</b> <b>object</b> being nonhierarchically related to a holder attribute <b>data</b> <b>object</b> for the same at least one of said attribute data objects and also being one of said plurality of attribute data objects, attribute data objects for which there exist only holder attribute data objects being called element data objects, and attribute data objects for which there also exist referent attribute data objects being called relation data objects; andan apex <b>data</b> <b>object</b> stored in said memory and having no being-held relationship with any of said attribute data objects, however, at least one of said attribute data objects having a being-held relationship with said apex data object.The examiner rejected all of Lowry’s claims as so-called printed matter. That is, they were directed to information stored on a medium ("substrate") without any unobvious cooperation between the medium and the information to provide a useful function. The PTO Board of Appeals sustained the examiner’s rejection of all claims. The claimed data structures were stored into a computer memory, but they did not sufficiently interact with the memory to provide a functional relationship with it. Accordingly, the ADOs were not [...] "patentably distinguished" [...] from the prior art, [...] making them obvious or anticipated, and thus unpatentable.|$|E
30|$|In depth-based approaches, <b>data</b> <b>objects</b> are {{organized}} in layers {{in the data}} space, {{with the expectation that}} shallow layers are more likely to contain outlying <b>data</b> <b>objects</b> than the deep layers [25].|$|R
40|$|The Service <b>Data</b> <b>Objects</b> Specification {{is being}} {{provided}} by the copyright holders under the following license. By using and/or copying this work, you agree that you have read, understood and will comply with the following terms and conditions: Permission to copy and display the Service <b>Data</b> <b>Objects</b> Specification and/or portions thereof, without modification, in any medium without fee or royalty is hereby granted, provided that you include the following on ALL copies of the Service <b>Data</b> <b>Objects</b> Specification, or portions thereof, that you make: 1. A link or URL to the Service <b>Data</b> <b>Objects</b> Specification at this location...|$|R
40|$|In sparse and {{intermittently}} connected Mobile Sensor Networks (MSNs), {{the base}} station cannot easily get the <b>data</b> <b>objects</b> acquired by the mobile sensors in the field. When users query {{the base station}} for specific <b>data</b> <b>objects,</b> the base station may not have received the necessary <b>data</b> <b>objects</b> to answer the queries. In this paper, we propose to use a Mobile Data Collector (MDC) to collect the <b>data</b> <b>objects</b> from the mobile sensors that the base station needs for answering queries. To facilitate the MDC’s data collection, we design a location-based data forwarding protocol that exploits the location metadata of <b>data</b> <b>objects</b> and uses caching to improve data availability in the MSNs. Results of performance study show that our solution can reduce query response times on the base station. 1...|$|R
50|$|The resv message {{includes}} the flowspec <b>data</b> <b>object</b> that identifies {{the resources that}} the flow needs.|$|E
5000|$|The OAIS model also defines an {{information}} model. Physical or digital items which contain information {{are known as}} data objects. Members of the Designated Community for an archive {{should be able to}} interpret and understand the information contained in a <b>data</b> <b>object</b> either because of their established knowledge base or with the assistance of supplementary [...] "representation information" [...] that is included with the <b>data</b> <b>object.</b>|$|E
50|$|PDO: Process <b>Data</b> <b>Object</b> - Inputs and outputs. Values of type {{rotational}} speed, voltage, frequency, electric current, etc.|$|E
40|$|This paper {{presents}} an automated approach {{to detect and}} partition <b>data</b> <b>objects</b> or product description from complex Web pages. First, we derive the common page structure by comparing similar pages, and then identify data region covering the descriptions of <b>data</b> <b>objects.</b> Second, we partition the nodes belonging to different <b>data</b> <b>objects</b> in the <b>data</b> region and construct the selfexplainable XML output files. The experiments indicate that our technique is effective. 1...|$|R
40|$|Article No 12, short paperInternational audienceSimilarity {{search is}} a {{fundamental}} problem in information technology. The main difficulty of this problem is the high dimensionality of the <b>data</b> <b>objects.</b> In large time series databases, it's important to reduce the dimensionality of these <b>data</b> <b>objects,</b> {{so that we can}} manage them. Symbolic representation is a promising technique of dimensionality reduction. In this paper we propose a new distance metric, which is applied to symbolic sequential <b>data</b> <b>objects,</b> and we test it on time series databases in classification task experiments. We also compare it to other distances that are well known in the literature for symbolic <b>data</b> <b>objects,</b> and we prove that it's metric...|$|R
40|$|Similarity {{search is}} a {{fundamental}} problem in information technology. The main difficulty of this problem is the high dimensionality of the <b>data</b> <b>objects.</b> In large time series databases, it’s important to reduce the dimensionality of these <b>data</b> <b>objects,</b> {{so that we can}} manage them. Symbolic representation is a promising technique of dimensionality reduction. In this paper we propose a new distance metric, which is applied to symbolic sequential <b>data</b> <b>objects,</b> and we test it on time series databases in classification task experiments. We also compare it to other distances that are well known in the literature for symbolic <b>data</b> <b>objects,</b> and we prove that it’s metric...|$|R
50|$|Bound {{variables}} have values. A value, however, is an abstraction, an idea; in implementation, a {{value is}} represented by some <b>data</b> <b>object,</b> which is stored somewhere in computer memory. The program, or the runtime environment, must set aside memory for each <b>data</b> <b>object</b> and, since memory is finite, ensure that this memory is yielded for reuse when the object is no longer needed to represent some variable's value.|$|E
50|$|An {{associative}} {{container of}} unique keys, similar to NSDictionary, with the difference that members {{do not contain}} a <b>data</b> <b>object.</b>|$|E
5000|$|The way {{variables}} are implemented in stack-oriented languages such as PostScript usually involves a separate, specialized stack which holds dictionaries of key-value pairs. To create a variable, a key (the variable name) must be created first, with which a value is then associated. In PostScript, a name <b>data</b> <b>object</b> is prefixed with a , so [...] {{is a name}} <b>data</b> <b>object</b> which can be associated with, for example, the number [...] The [...] command is , so ...|$|E
50|$|<b>Data</b> <b>objects</b> {{defined by}} these and similar words are global in scope. The {{function}} provided by local variables in other languages {{is provided by}} the data stack in Forth (although Forth also has real local variables). Forth programming style uses very few named <b>data</b> <b>objects</b> compared with other languages; typically such <b>data</b> <b>objects</b> are used to contain data which is used by a number of words or tasks (in a multitasked implementation).|$|R
40|$|Abstract. The drastic {{increase}} in data volume strongly demands efficient search techniques for similar data to queries. It is sometimes useful to specify data of interest with fuzzy constraints. When <b>data</b> <b>objects</b> contain both numerical and categorical attributes, {{it is usually}} not easy to define commonly-accepted distance measures between <b>data</b> <b>objects.</b> With no efficient indexing structure, it costs much to search for specific <b>data</b> <b>objects</b> because a linear search needs to be conducted over the whole data set. This paper proposes a method to use locality sensitive hashing technique and fuzzy constrained queries to search for interesting ones from big data. The method builds up a locality sensitive hashing-based indexing structure only with constituting continuous attributes, collects {{a small number of}} candidate <b>data</b> <b>objects</b> to which query is examined, and then evaluates their satisfaction degree to fuzzy constrained query so that <b>data</b> <b>objects</b> satisfying the query are determined...|$|R
50|$|Service <b>Data</b> <b>Objects</b> (SDO).|$|R
50|$|In {{computer}} programming, a dope vector is a {{data structure}} {{used to hold}} information about a <b>data</b> <b>object,,</b> especially its memory layout.|$|E
5000|$|In {{order to}} {{accomplish}} this, the [...] "address-of" [...] operator (unary &) is used. It produces the memory {{location of the}} <b>data</b> <b>object</b> that follows.|$|E
5000|$|A {{procedure}} in a stack-based programming language {{is treated as}} a <b>data</b> <b>object</b> in its own right. In PostScript, procedures are denoted between [...] and [...]|$|E
40|$|Scripting {{languages}} {{are great for}} gluing together components, but they suffer as the complexity or size of data scales upward. <b>Data</b> <b>objects</b> solve this problem by marrying both high-level and low-level programming styles. <b>Data</b> <b>objects</b> are self-contained representations of data. They define both {{the structure of the}} data and the methods to access it. Data may be accessed through both Tcl and a C interface. This paper will describe two such <b>data</b> <b>objects,</b> a vector and table object...|$|R
3000|$|PB-tree adopts {{parallel}} lines {{to divide the}} spatial region. The selected location of {{parallel lines}} {{should be able to}} make the entire region divided into two almost equal parts in each division until the number of <b>data</b> <b>objects</b> contained in each region is between the pre-specified maximum and minimum values. <b>Data</b> <b>objects</b> intersecting with parallel lines are stored in the corresponding data lists of parent nodes. <b>Data</b> <b>objects</b> completely contained in a region are stored in corresponding leaf nodes. The restrictive parameters M is the maximum number of <b>data</b> <b>objects</b> contained in the leaf nodes of PB-tree, and m is minimum number of entity objects contained in the leaf nodes. The PB-tree has the following properties: [...]...|$|R
40|$|Advancements in {{technology}} have enabled many computer vendors to offer computer systems with gigabytes of memory at affordable prices. The availability of {{an abundance of}} real memory in a computer creates new opportunities for software designers [...] - very large <b>data</b> <b>objects</b> can be made memory resident to support very efficient processing. However, crash recovery becomes more time consuming {{because of the large}} amount of memory resident information that need to be saved and restored. In this paper, we propose an efficient recovery scheme based on mapping very large memory resident <b>data</b> <b>objects</b> to files. The underlying memory mapped file mechanism will propagate updates on the <b>data</b> <b>objects</b> to the mapped files automatically and checkpointing these <b>data</b> <b>objects</b> becomes a simple matter of forcing the operating system to write out all dirty buffers associated with them. Changes to <b>data</b> <b>objects</b> in between checkpoints are logged. Recovery is accomplished by restoring the most recent checkpoint [...] ...|$|R
