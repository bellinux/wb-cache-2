770|323|Public
25|$|The Andrey Pervozvanny {{class were}} {{a pair of}} predreadnought battleships built in the mid-1900s for the Baltic Fleet of the Imperial Russian Navy. They were {{conceived}} by the Naval Technical Committee in 1903 as an <b>incremental</b> <b>development</b> of the s with increased displacement and heavier secondary armament. Work on the lead ship, Andrey Pervozvanny (Saint Andrew), commenced at the New Admiralty, Saint Petersburg in March 1904; Imperator Pavel I trailed by six months.|$|E
500|$|The {{design of}} {{what became the}} O'Brien class {{was the result of}} discussions between the General Board of the United States Navy and the U.S. Navy's Bureau of Ordnance. What {{resulted}} was a design that was an <b>incremental</b> <b>development</b> of the , which itself was similar to the first of the thousand tonners, the [...] (which displaced about a third more than the preceding [...] ). The key difference in the O'Brien class was the increase in torpedo size, going up to [...] from the preceding classes' [...] torpedoes.|$|E
500|$|The {{design of}} {{what became the}} Tucker class {{was the result of}} compromises between the General Board of the United States Navy and the U.S. Navy's Bureau of Construction and Repair. The General Board, tasked with {{creating}} an integrated battle fleet, wanted a larger ship that could serve in a scouting role and proposed a ship larger than the unique British destroyer [...] of 1907, and more than twice the displacement of any previous U.S. destroyer. Input from Construction and Repair resulted in a design that was an <b>incremental</b> <b>development</b> of the , which itself was similar to the first of the thousand tonners, the [...] (which displaced about a third more than the preceding [...] ).|$|E
40|$|Abstract. Incremental {{addition}} of features into a product {{may not be}} an easy task, as its addition may cause changes to many parts of existing components. Aspect-oriented programming (AOP) provides effective mechanisms for encapsulating crosscutting concerns and integrating them without modifying existing components. However, it is not sufficient for <b>incremental</b> software <b>development.</b> Feature dependency analysis provides essential information for <b>incremental</b> software <b>development.</b> By tightly coupling feature dependency analysis with AOP, we can support <b>incremental</b> software <b>development.</b> In this paper, we provide specific guidelines on how feature dependency analysis and an AOP technique (i. e., AspectJ) can be combined to support <b>incremental</b> software <b>development.</b> ...|$|R
40|$|Movement is {{the human}} {{communicative}} tissue that weaves together our social anticipations and creative aspirations. When we consider movement as a fluid, dynamic process of transmission - from tacit sensations to more explicit, expressive bids for communication-it is possible to trace <b>incremental</b> <b>developments</b> of self, culture and futur...|$|R
40|$|This {{document}} {{provides an}} introduction {{to a series of}} HTML 5 case studies which were commissioned by the JISC. The document gives {{an introduction to}} HTML 5 and related standards developed by the W 3 C and explains why these developments represent a significant development to Web standards, which is of more significance than previous <b>incremental</b> <b>developments</b> to HTML and CSS...|$|R
2500|$|Khuda-ki-Basti <b>Incremental</b> <b>Development</b> Scheme (Hyderabad, Pakistan) ...|$|E
2500|$|The H.III {{series was}} an <b>incremental</b> <b>development</b> of the Horten H.II with reduced {{sweepback}} of 23°, span increased to 20 m (65ft 7 in) and modified lateral controls. [...] The wing trailing edges had three movable surfaces; the innermost was a landing flap, but the outer pair were geared differential elevons with the outer elevon having a large upward deflection and only slight downward movement, conversely, the inner elevon had large downward movement and slight upward movement.|$|E
2500|$|After the {{publication}} of Charles Darwin's On the Origin of Species in 1859, Thomson saw evidence of the relatively short habitable age of the Earth as tending to contradict Darwin's gradualist explanation of slow natural selection bringing about biological diversity. Thomson's own views favoured a version of theistic evolution sped up by divine guidance. His calculations showed that the Sun could not have possibly existed long enough to allow the slow <b>incremental</b> <b>development</b> by evolution – unless some energy source beyond what he or any other Victorian era person knew of was found. He was soon drawn into public disagreement with geologists, and with Darwin's supporters John Tyndall and T.H. Huxley. In his response to Huxley's address to the Geological Society of London (1868) he presented his address [...] "Of Geological Dynamics", (1869) which, among his other writings, challenged the geologists' acceptance that the earth must be of indefinite age.|$|E
50|$|Technological growth {{includes}} <b>incremental</b> <b>developments</b> {{and disruptive}} technologies. An {{example of the}} former was the gradual roll-out of DVD (digital video disc) as a development intended to follow on from the previous optical technology compact disc. By contrast, disruptive technologies are those where a new method replaces the previous technology and makes it redundant, for example, the replacement of horse-drawn carriages by automobiles.|$|R
40|$|Things don't just happen. A {{cascade of}} <b>incremental</b> <b>developments</b> and {{pressures}} coalesce {{and help to}} shape destiny. Basically, this article probes and describes "causes and effects. " Fully mapped out and deployed, this 22 -step rubric of change pattern strives to assemble an array of forces that cumulatively plot and reveal impending public policy change. These constructs of change manifest fundamental quantitatively measured components assembled into arrays of integral sub-set steps that drive change of most any sort. Many of the change drivers presented apply to forecasting matters other than public policy...|$|R
50|$|It is {{remarkable}} that these programming language implementations inherited {{some of the}} dynamic features of the Lisp system (like garbage collection and checked access to data) and supported <b>incremental</b> software <b>development.</b>|$|R
50|$|In {{an attempt}} to reach the lowest income groups in Hyderabad, HDA {{launched}} an <b>incremental</b> <b>development</b> scheme. The scheme {{is based on the}} idea that people should settle before houses and infrastructure are constructed and that, once settled, they can develop their housing and the infrastructure incrementally, as and when they have the resources. The <b>incremental</b> <b>development</b> scheme in Hyderabad imitates the approach followed by the illegal subdividers: it is characterized by ease of entry, immediate delivery of the plot and <b>incremental</b> <b>development</b> of the houses and the infrastructure. HDA initially recruited illegal subdividers to assist the agency in the identification and settling of low income families in the <b>incremental</b> <b>development</b> scheme.|$|E
5000|$|Khuda-ki-Basti <b>Incremental</b> <b>Development</b> Scheme (Hyderabad, Pakistan) ...|$|E
5000|$|Phase 5 - <b>Incremental</b> <b>Development,</b> Testing, Deployment and Improvement ...|$|E
5000|$|Use the Agile {{process of}} <b>incremental</b> and {{iterative}} <b>development</b> and deployment.|$|R
5000|$|Next Generation Electo-Optical (NGEO), modular system, {{designed}} for <b>incremental</b> improvements (in <b>development).</b>|$|R
50|$|The {{concept of}} {{enterprise}} life cycle {{aids in the}} implementation of an enterprise architecture, and the capital planning and investment control (CPIC) process that selects, controls, and evaluates investments. Overlying these processes are human capital management and information security management. When these processes work together effectively, the enterprise can effectively manage information technology as a strategic resource and business process enabler. When these processes are properly synchronized, systems migrate efficiently from legacy technology environments through evolutionary and <b>incremental</b> <b>developments,</b> and the Agency is able to demonstrate its return on investment (ROI). The figure on top illustrates the interaction of the dynamic and interactive cycles as they would occur over time.|$|R
50|$|Rapid {{development}} - An interpreter encourages prototyping and <b>incremental</b> <b>development.</b>|$|E
50|$|In 2012, Bulman and {{his brother}} founded <b>Incremental</b> <b>Development,</b> a Boston-based {{commercial}} real-estate acquisition company.|$|E
5000|$|... 2800 low-income {{families}} or {{a population of}} about 18000 obtained shelter through self-help and <b>incremental</b> <b>development.</b>|$|E
50|$|Goal-Driven Software Development Process (GDP) is an {{iterative}} and <b>incremental</b> software <b>development</b> technique. Although {{similar to}} other modern process models, GDP is primarily focusing on identifying goals before setting the requirements and explicitly utilizing the bottom-up design approach.|$|R
5000|$|The Unified Software Development Process or Unified Process is {{a popular}} {{iterative}} and <b>incremental</b> software <b>development</b> process framework. The best-known and extensively documented refinement of the Unified Process is the Rational Unified Process (RUP). Other examples are OpenUP and Agile Unified Process.|$|R
40|$|Agent Factory is a {{cohesive}} {{framework for the}} development and deployment of multi-agent systems. Since its inception in the mid 1990 s, Agent Factory {{has gone through a}} metamorphosis process, whereby several new extensions, revisions, and enhancements have been made. This chapter provides a discussion of the <b>incremental</b> <b>developments</b> in Agent Factory and provides motivations as to why such changes were necessary. Agent Factory distinguishes itself from other intentional agent platforms in several ways. It provides a practical and efficient approach to the development of intentional agent-oriented applications. This is combined with a methodology, integrated development environment support, and a suite of tools that aid the agent fabrication process. A detailed comparison to related work is provided. We include a tutorial on how to use the framework...|$|R
5000|$|The basic {{philosophy}} of his approach was <b>incremental</b> <b>development</b> and continuous review. <b>Incremental</b> <b>development</b> meant that larger concepts were {{broken down into}} smaller, more easily understood pieces that were introduced over time; continuous review refers {{to the practice of}} concepts in cumulative problem sets once they were introduced. As a student completed a new concept, a brief review of the previous chapters and concepts were also tested.|$|E
50|$|Endeavour Software Project Management is an {{open-source}} {{solution to}} manage large-scale enterprise software projects in an iterative and <b>incremental</b> <b>development</b> process.|$|E
50|$|Iterative and <b>incremental</b> <b>development</b> are {{essential}} {{parts of the}} Modified waterfall models, Rational Unified Process, Extreme Programming and generally the various agile software development frameworks.|$|E
40|$|Hidden Markov models play a {{critical}} role in the modelling and problem solving of important AI tasks such as speech recognition and natural language processing. However, the students often have difficulty in understanding the essence and applications of Hidden Markov models in the context of a cursory introductory coverage of the subject. In this paper, we describe an empirical approach to explore the subject of the Hidden Markov models. This approach focuses on a series of <b>incremental</b> <b>developments</b> of Hidden Markov models for automatic spelling recognition. The process of programming and experiments with these models cultivates the actual modelling and problem-solving capacity, and guides the students to a better understanding of the application of similar Hidden Markov models used in speech recognition. ...|$|R
40|$|The presentations will {{be given}} during the X-Prize symposium, {{exploring}} the multi-faceted dimensions of spaceflight ranging from the technical developments necessary to achieve safe routine flight to and from and through space to the new personal business opportunities and economic benefits that will open in space and here on Earth. The symposium will delve into the technical, regulatory, market and financial needs and challenges that must be met in charting and executing the <b>incremental</b> <b>developments</b> leading to Personal Spaceflight {{and the opening of}} a Place Called Space. The presentation covers facets of human space flight including descriptions of life in space, the challenges of delivering medical care in space, and the preparations needed for safe and productive human travel to the moon and Mars...|$|R
30|$|Overall impact {{analysis}} of reprioritization techniques on time, cost {{and quality of}} software <b>incremental</b> and overall <b>development</b> is interesting to watch.|$|R
50|$|Feature Oriented Programming (FOP) or Feature Oriented Software Development (FOSD) is a {{paradigm}} for program generation in software product lines and for <b>incremental</b> <b>development</b> of programs.|$|E
50|$|Most modern {{development}} processes can be vaguely {{described as}} agile. Other methodologies include waterfall, prototyping, iterative and <b>incremental</b> <b>development,</b> spiral development, rapid application development, and extreme programming.|$|E
5000|$|... 26 Kim, M. and Compton, P. <b>Incremental</b> <b>development</b> of domain-specific {{document}} retrieval systems. in Workshop on knowledge markup and semantic annotation. Victoria BC Canada, p. 69-77, 2001.|$|E
50|$|Genera {{supports}} <b>incremental</b> {{and interactive}} <b>development</b> of complex software using {{a mix of}} programming styles with extensive support for object-oriented programming.|$|R
40|$|This work {{presents}} an approach for combining reinforcement learning, learning by imitation, and <b>incremental</b> hierarchical <b>development.</b> The approach {{is used in}} a realistic simulated mobile robot that learns to perform a navigation task by imitating the movements of a teacher and then continues to learn by receiving reinforcement. The behaviours of the robot are represented as sensation-action rules in a constructive high-order neural network. Preliminary experiments are reported which show that <b>incremental,</b> hierarchical <b>development,</b> bootstrapped by imitative learning, allows the robot to adapt to changes in its environment during its entire lifetime very efficiently, even if only delayed reinforcements are given. The experimental results indicate that default hierarchies of sensation-action rules can be constructed solely by connectionist learning. Keywords: Mobile robotics, continual learning, reinforcement learning, learning by imitation, constructive neural networks. 1 Introduction T [...] ...|$|R
50|$|Courts must be astute {{to avoid}} the {{appropriation}} of the Legislature's role in law reform when developing the common law. The greater power given to the Courts to test legislation against the Constitution should not encourage them to adopt a method of common-law development which is closer to codification than <b>incremental,</b> fact-driven <b>development.</b>|$|R
