872|893|Public
25|$|The NPTG & NaPTAN data {{conforms}} {{to a family}} of consistent, interlocking data models. The models are described in the NPTG & NaPTAN Schema Guide <b>in</b> <b>UML</b> notation.|$|E
50|$|While <b>in</b> <b>UML</b> 1.x, {{activity}} diagrams were {{a specialized}} form of state diagrams, <b>in</b> <b>UML</b> 2.x, the activity diagrams were reformalized {{to be based}} on Petri net-like semantics, increasing the scope of situations that can be modeled using activity diagrams. These changes cause many UML 1.x activity diagrams to be interpreted differently <b>in</b> <b>UML</b> 2.x.|$|E
5000|$|<b>In</b> <b>UML,</b> {{there are}} two ways of {{modelling}} composition: Composition and aggregation. Beware that <b>in</b> <b>UML,</b> composition has a more narrow meaning than in ordinary language: ...|$|E
40|$|In {{this paper}} we analyze {{the concept of}} Generalization <b>in</b> the <b>UML</b> metamodel. We revise the kinds of generalization/specialization {{relations}} between UML model elements that can be expressed. We arrive {{to the conclusion that}} the Generalization relationship provided by the UML actually embraces two different generalization/specialization relations: an incremental relation and an overriding relation. Nature of each relation is very different, and it must be clearly distinguished <b>in</b> the <b>UML</b> <b>in</b> order to avoid wrong interpretation of UML models...|$|R
50|$|<b>In</b> 1997 <b>UML</b> {{was adopted}} as a {{standard}} by the Object Management Group (OMG), and has been managed by this organization ever since. <b>In</b> 2005 <b>UML</b> was also published by the International Organization for Standardization (ISO) as an approved ISO standard. Since then it has been periodically revised to cover the latest revision of UML.|$|R
5000|$|<b>In</b> the <b>UML</b> Superstructure 2.4.1 Specification Document [...] the {{following}} definition is given: ...|$|R
50|$|A message {{sent from}} outside the diagram can be {{represented}} by a message originating from a filled-in circle (found message <b>in</b> <b>UML)</b> or from a border of the sequence diagram (gate <b>in</b> <b>UML).</b>|$|E
50|$|Growing {{interest}} <b>in</b> <b>UML</b> {{from the}} embedded systems and realtime community.|$|E
5000|$|Use case {{diagrams}} {{created by}} Ivar Jacobson, 1992 (integrated <b>in</b> <b>UML)</b> ...|$|E
5000|$|Although UML 2.1 {{was never}} {{released}} as a formal specification, versions 2.1.1 and 2.1.2 appeared in 2007, followed by <b>UML</b> 2.2 <b>in</b> February 2009. <b>UML</b> 2.3 was formally released <b>in</b> May 2010. <b>UML</b> 2.4.1 was formally released <b>in</b> August 2011. <b>UML</b> 2.5 {{was released in}} October 2012 as an [...] "In process" [...] version and was officially released in June 2015.|$|R
50|$|The key {{composite}} structure entities identified <b>in</b> the <b>UML</b> 2.0 specification are structured classifiers, parts, ports, connectors, and collaborations.|$|R
40|$|This paper {{presents}} the XML/XSL {{approach to the}} developmentofaweb environment for the formal specification language Object-Z. The projection techniques and tools from Object-Z (<b>in</b> XML) to <b>UML</b> (<b>in</b> XMI) are developed using XSL Transformations (XSLT). Furthermore, Object-Z (itself) is used to specify and design the essential functionalities of the web environment and the projection tools to <b>UML.</b> <b>In</b> a sense, the paper also demonstrates a formal approach to modeling web applications. Keywords Object-Z, XML/XSL/XMI, UML 1...|$|R
50|$|Stereotypes <b>in</b> <b>UML</b> {{are used}} to define new {{semantics}} for modeling element.|$|E
50|$|Extension {{mechanisms}} <b>in</b> <b>UML</b> like profiles, stereotypes, tags, {{and constraints}} {{can be used}} for particular applications.|$|E
5000|$|It {{has been}} said that MSC has been {{considered}} as a candidate for the interaction diagrams <b>in</b> <b>UML.</b>|$|E
40|$|One of {{the most}} {{important}} approaches to requirements engineering of the last ten years is the KAOS model as presented in [5] and [8]. We introduce a profile that allows the KAOS model to be represented <b>in</b> the <b>UML.</b> The paper includes an informal presentation of the profile together with a full account of the new stereotypes and tags. We also outline an integration of requirements models with lower level design models <b>in</b> the <b>UML,</b> leading to a uniform and comprehensive specification document...|$|R
50|$|In the Unified Modeling Language (UML), an Element is an {{abstract}} class with no superclass. It {{is used as}} the superclass or base class, as known by object oriented programmers, for all the metaclasses <b>in</b> the <b>UML</b> infrastructure library. All other elements <b>in</b> the <b>UML</b> inherit, directly or indirectly from Element. An Element has a derived composition association to itself to support the general capability for elements to own other elements. As such, it has no additional attributes {{as part of its}} specification.|$|R
50|$|Classes have lifecycles {{which are}} modeled <b>in</b> Executable <b>UML</b> with a statechart diagram. The statechart diagram defines the states, transitions, events, and {{procedures}} that define a class' behaviour.|$|R
5000|$|... #Caption: A simple {{example of}} several {{software}} components - pictured within a hypothetical holiday-reservation system represented <b>in</b> <b>UML</b> 2.0.|$|E
50|$|Additional {{techniques}} including performance testing, UI Design, data engineering were included, and {{an update}} to reflect changes <b>in</b> <b>UML</b> 1.1.|$|E
50|$|StarUML {{supports}} most of {{the diagram}} types specified <b>in</b> <b>UML</b> 2.0. It is currently missing timing and interaction overview diagrams.|$|E
40|$|The e 3 value {{methodology}} is {{an approach}} for understanding networks of enterprises creating, distributing and consuming things of economic value. The methodology includes an ontology for representing e 3 value models, {{as well as}} software tool support for analyzing such models. For more information, see [1, 2] and the master-level course e-Business Innovation. Problem An e 3 value model shows from a syntactical point of view similarities with techniques used <b>in</b> the <b>UML.</b> <b>In</b> this assignment, we want to stereotype the e 3 value technique on constructs available <b>in</b> the <b>UML.</b> Additionally, elementary tool support for the e 3 value technique has to be developed using commercial UML tools Requirements- good understanding of e 3 value, preferably you have at least followed the course e-Business Innovation;- good UML skill...|$|R
40|$|Abstract. We present {{experience}} and assessment {{results for the}} use of <b>UML</b> <b>in</b> an undergraduate database design course. We employed an abbreviated iterative design methodology based on <b>UML</b> <b>in</b> a semester-long course project, with students learning about relational databases and SQL while simultaneously designing and implementing a simple system. UML replaced ER diagrams used in earlier versions of the course in order to support an effort to use UML across the curriculum. We found UML to be an adequate substitute for ER diagrams and that our thought processes <b>in</b> adopting <b>UML</b> led to enhancements of the course. We conclude that an undergraduate textbook employing UML to illustrate relational database design would be highly effective...|$|R
50|$|The Element class {{belongs to}} the base package <b>in</b> the <b>UML</b> called the Kernel. This is the package that {{contains}} the superclasses {{that make up the}} superstructure of the UML.|$|R
5000|$|... #Caption: Example of subtypes: where bird is the {{supertype}} and {{all others}} are subtypes as denoted by the arrow <b>in</b> <b>UML</b> notation ...|$|E
50|$|The NPTG & NaPTAN data {{conforms}} {{to a family}} of consistent, interlocking data models. The models are described in the NPTG & NaPTAN Schema Guide <b>in</b> <b>UML</b> notation.|$|E
5000|$|Software Ideas Modeler is a CASE and an UML tool. The modeler {{supports}} all 14 diagram types specified <b>in</b> <b>UML</b> 2.4. It {{also supports}} among others the following diagrams and standards: ...|$|E
50|$|The Clock Constraint Specification Language or CCSL, is a {{software}} language for modeling relations among so-called clocks. It {{is part of}} the time model defined <b>in</b> the <b>UML</b> Profile for MARTE.|$|R
5000|$|... "An {{artifact}} (<b>in</b> the <b>UML)</b> is the {{specification of}} a physical piece of information that is used or produced by a software development process, or by deployment and operation of a system." ...|$|R
40|$|This paper {{addresses}} two issues: how formal object modeling techniques {{facilitate the}} XML application development and how XML technology helps formal/graphical software design process. In particular, the paper presents a XML/XSL {{approach to the}} development of a web environment for Z family languages (Z/Object-Z/TCOZ). The projection techniques and tools from object-oriented Z (<b>in</b> XML) to <b>UML</b> (<b>in</b> XMI) are developed using XSL Transformations (XSLT). Furthermore, object-oriented Z is used to specify and design the essential functionalities of the web environment and the projection tools to <b>UML.</b> <b>In</b> a sense, the paper also demonstrates a formal object approach to modeling XML applications...|$|R
50|$|The Production Rule Representation (PRR) is a {{proposed}} standard of the Object Management Group (OMG) {{to provide a}} vendor-neutral rule-model representation <b>in</b> <b>UML</b> for production rules as used in forward-chaining rule engines.|$|E
50|$|<b>In</b> <b>UML</b> 2.x, a powertype is a {{metaclass}} whose instances are subclasses {{of a given}} class. The stereotype {{has been}} removed and the powertype is now indicated by typing the generalization set.|$|E
50|$|The profile diagram didn't exist <b>in</b> <b>UML</b> 1. It was {{introduced}} with UML 2 {{to display the}} usage of profiles. Before its introduction, other diagrams {{had been used to}} display this issue.|$|E
50|$|In MDA terms, {{the model}} {{compiler}} creates the PSM. The {{separation between the}} PIM and PSM <b>in</b> Executable <b>UML</b> disables the ability to round-trip engineer the model, and deters modifications to the PSM.|$|R
5000|$|In Dullea et al. {{one reads}} [...] "A 'look across' {{notation}} such as used <b>in</b> the <b>UML</b> does not effectively represent the semantics of participation constraints imposed on relationships where the degree {{is higher than}} binary." ...|$|R
40|$|Abstract: Since {{the first}} OMG {{specification}} of the Unified Modeling Lan-guage (UML), the Object Constraint Language (OCL) {{has been used}} for the definition of well-formedness rules <b>in</b> the <b>UML</b> specification. These rules have been specified within the early OCL years, when no appropriate tooling ex-isted. Thus, they could not be checked for syntactical and static semantics correctness. In this paper we present an analysis of the static correctness of all OCL rules specified <b>in</b> the <b>UML</b> 2. 3 superstructure document. We categorise found errors and propose changes for both the UML specification process and the OCL language to improve the <b>UML</b> specification’s correctness <b>in</b> future versions...|$|R
