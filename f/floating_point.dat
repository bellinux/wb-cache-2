4862|237|Public
5|$|<b>Floating</b> <b>point</b> {{numbers are}} also {{stored in a}} platform-specific range. They can be {{specified}} using <b>floating</b> <b>point</b> notation, or two forms of scientific notation. PHP has a native Boolean type {{that is similar to}} the native Boolean types in Java and C++. Using the Boolean type conversion rules, non-zero values are interpreted as true and zero as false, as in Perl and C++.|$|E
5|$|At the time, {{the general}} method {{to compute the}} inverse square root was to {{calculate}} an approximation for , then revise that approximation via another method until it came within an acceptable error range of the actual result. Common software methods in the early 1990s drew approximations from a lookup table. The key of the fast inverse square root was to directly compute an approximation by utilizing the structure of floating-point numbers, proving faster than table lookups. The algorithm was approximately four times faster than computing the square root with another method and calculating the reciprocal via <b>floating</b> <b>point</b> division. The algorithm was designed with the IEEE 754-1985 32-bit <b>floating</b> <b>point</b> specification in mind, but investigation from Chris Lomont showed {{that it could be}} implemented in other <b>floating</b> <b>point</b> specifications.|$|E
5|$|The integer part of {{a binary}} {{logarithm}} can be found using the find first set operation on an integer value, or by looking up the exponent of a <b>floating</b> <b>point</b> value.|$|E
5000|$|Shepherd has {{previously}} performed with a sixteen-piece live incarnation of <b>Floating</b> <b>Points,</b> entitled the <b>Floating</b> <b>Points</b> Ensemble. The group won {{an award for}} [...] "Best BBC Radio 1 Maida Vale Session".|$|R
5000|$|Plastic People Closing Party, London (with <b>Floating</b> <b>Points)</b> (Self-Released, 2015) ...|$|R
5000|$|... 7. <b>Floating</b> <b>Points</b> & Maalem Mahmoud Guinia - ‘Mimoun Marhaba’ ...|$|R
5|$|Reinterpreting {{this last}} bit pattern as a <b>floating</b> <b>point</b> number gives the {{approximation}} , {{which has an}} error of about 3.4%. After the single iteration of Newton's method, the final result is , an error of only 0.17%.|$|E
5|$|Each {{background}} processor {{consisted of}} a computation section, a control section and local memory. The computation section performed 64-bit scalar, <b>floating</b> <b>point</b> and vector arithmetic. The control section provided instruction buffers, memory management functions, and a real-time clock. 16 kwords (128 kbytes) of high-speed local memory was incorporated into each background processor for use as temporary scratch memory.|$|E
5|$|In {{addition}} to reporting active processors, Folding@home determines its computing performance as measured in <b>floating</b> <b>point</b> {{operations per second}} (FLOPS) based on the actual execution time of its calculations. Originally this was reported as native FLOPS: the raw performance from each given type of processing hardware. In March 2009 Folding@home began reporting the performance in native and x86 FLOPS, the latter being an estimation of how many FLOPS the calculation would take on a standard x86 CPU architecture, which is commonly used as a performance reference. Specialized hardware such as GPUs can efficiently perform some complex functions in one <b>floating</b> <b>point</b> operation which otherwise needs multiple operations on the x86 architecture. The x86 measurement attempts to even out these hardware differences. Despite conservative conversions, the GPU clients' x86 FLOPS are consistently greater than their native FLOPS and comprise {{a large majority of}} Folding@home's measured computing performance.|$|E
50|$|Values can be 64-bit integers, 64-bit <b>floating</b> <b>points,</b> strings, and booleans.|$|R
5000|$|Katy B - Calm Down (EMI, 2016) (co-produced with <b>Floating</b> <b>Points)</b> ...|$|R
5000|$|... "Post Suite" [...] / [...] "Almost in Profile" [...] (2010) (released under <b>Floating</b> <b>Points</b> Ensemble) ...|$|R
5|$|In {{computer}} science, integer sorting is the algorithmic {{problem of}} sorting {{a collection of}} data values by numeric keys, {{each of which is}} an integer. Algorithms designed for integer sorting may also often be applied to sorting problems in which the keys are <b>floating</b> <b>point</b> numbers, rational numbers, or text strings. The ability to perform integer arithmetic on the keys allows integer sorting algorithms to be faster than comparison sorting algorithms in many cases, depending on the details of which operations are allowed in the model of computing and how large the integers to be sorted are.|$|E
5|$|Kilburn and Williams {{concluded}} that computers {{would be used}} more in scientific roles than pure maths, and decided {{to develop a new}} machine that would include a <b>floating</b> <b>point</b> unit. Work began in 1951, and the resulting machine, which ran its first program in May 1954, was known as Meg, or the megacycle machine. It was smaller and simpler than the Mark 1, and much faster for maths problems. Ferranti produced a version of Meg with the Williams tubes replaced by the more reliable core memory, marketed as the Ferranti Mercury.|$|E
5|$|The inverse {{square root}} of a <b>floating</b> <b>point</b> number {{is used in}} calculating a {{normalized}} vector. Programs can use normalized vectors to determine angles of incidence and reflection. 3D graphics programs must perform millions of these calculations every second to simulate lighting. When the code {{was developed in the}} early 1990s, most floating-point processing power lagged behind the speed of integer processing. This was troublesome for 3D graphics programs before the advent of specialized hardware to handle transform and lighting.|$|E
5000|$|Sunday: DVBBS, Odezenne, Robert DeLong, <b>Floating</b> <b>Points,</b> Jackmaster, The Knocks, Gramatik, Tommy Trash, Disclosure, Pretty Lights ...|$|R
30|$|For simplicity, {{the number}} of <b>float</b> <b>point</b> {{operations}} is {{used to measure the}} computational complexity of the proposed algorithms.|$|R
50|$|Some languages, such as REXX and Java, provide decimal <b>floating</b> <b>points</b> operations, {{which provide}} {{rounding}} errors {{of a different}} form.|$|R
5|$|To fit {{the program}} into the 320 words {{available}} on the chip, some significant modification was used. By not using regular <b>floating</b> <b>point</b> numbers, which require lots of instructions to keep the decimal point in the right place, some space was freed up. Trigonometric functions were implemented in about 40 instructions, and inverse trigonometric functions are almost 30 more instructions. Logarithms are about 40 instructions, with anti-log about 20 on top of that. The code to normalize and display the computed values are roughly the same in both the TI and Sinclair programs.|$|E
5|$|As {{a result}} of {{experience}} gained from the Mark 1, the developers concluded that computers would be used more in scientific roles than pure maths. They therefore embarked {{on the design of}} a new machine which would include a <b>floating</b> <b>point</b> unit; work began in 1951. The resulting machine, which ran its first program in May 1954, was known as Meg, or the megacycle machine. It was smaller and simpler than the Mark 1, as well as quicker at solving maths problems. Ferranti produced a commercial version marketed as the Ferranti Mercury, in which the Williams tubes were replaced by the more reliable core memory.|$|E
5|$|Over {{the next}} three decades, Kilburn led the {{development}} of a succession of innovative Manchester computers. The first, commenced in 1951, was a development of the Mark I known as the megacycle machine or Meg, that replaced the vacuum tube diodes with solid state ones. This permitted an order of magnitude increase in the clock rate. To add further speed, Kilburn provided for 10-bit parallel CRT memory. It {{was also one of the}} first computers, if not the first, to have <b>floating</b> <b>point</b> arithmetic. Meg operated for the first time in 1954, and nineteen were sold by Ferranti, six of them to customers overseas.|$|E
5000|$|Another {{release that}} pushed Ninja to new sonic territories came from London-based artist <b>Floating</b> <b>Points</b> {{at the end}} of 2010 with ‘Post Suite / Almost In Profile’. The <b>Floating</b> <b>Points</b> Ensemble is an {{instrumental}} ensemble headed by himself on Fender Rhodes and Sequential Circuits Pro One and Prophet keyboards. The double A-side 10" [...] vinyl single featured two tracks by the full Ensemble, recorded and mixed at Abbey Road Studios for the Ninja Tune XX twentieth anniversary celebration.|$|R
3000|$|... [...]. The {{compiler}} used in {{this experiment}} was gcc.b The double-precision <b>floating</b> <b>points</b> were used for arithmetic processing of real numbers. The language was C.|$|R
50|$|Sam Shepherd is an English {{electronic}} {{musician and}} neuroscientist, who records and performs music {{under the name}} <b>Floating</b> <b>Points.</b> Shepherd is also a co-founder of the label Eglo Records.|$|R
5|$|Titan uses Jaguar's 200 cabinets, {{covering}} 404 square meters (4,352 ft2), with replaced internals and upgraded networking. Reusing Jaguar's {{power and}} cooling systems saved approximately $20 million. Power is provided to each cabinet at three-phase 480 V. This requires thinner cables than the US standard 208 V, saving $1 million in copper. At its peak, Titan draws 8.2 MW, 1.2 MW more than Jaguar, but runs almost {{ten times as}} fast in terms of <b>floating</b> <b>point</b> calculations. In {{the event of a}} power failure, carbon fiber flywheel power storage can keep the networking and storage infrastructure running for up to 16 seconds. After 2 seconds without power, diesel generators fire up, taking approximately 7 seconds to reach full power. They can provide power indefinitely. The generators are designed only to keep the networking and storage components powered so that a reboot is much quicker; the generators are not capable of powering the processing infrastructure.|$|E
5|$|The goal of Lost Coast was to {{demonstrate}} the new high-dynamic-range rendering implemented into the Source game engine. Valve first attempted to implement high-dynamic-range rendering in Source in late 2003. The first method stored textures in RGBA color space, allowing for multisample anti-aliasing and pixel shaders to be used, but this prevented alpha mapping and fog effects from working properly, as well as making textures appear sharp and jagged. The second method involved saving two versions of a texture: one with regular data, {{and the other with}} overbrightening data. However, this technique did not allow for multisample anti-aliasing and consumed twice as much video card memory, making it infeasible. The third method, shown at the E3 convention in 2005, used <b>floating</b> <b>point</b> data to define the RGB color space, allowing for reasonably efficient storage of the high-dynamic-range data. However, this method also did not allow for multisample anti-aliasing, and was only compatible with Nvidia video cards, leaving ATI cards unable to run high dynamic range. The fourth and final method compromised between the second and third methods, using overbrightening textures sparingly and allowing ATI cards to render HDR in a different way to the Nvidia ones while nearly producing the same end result.|$|E
25|$|All <b>floating</b> <b>point</b> {{operations}} are largely implemented in microcode across {{the family and}} thus and are fairly slow. On the V60/V70 the 32-bit <b>floating</b> <b>point</b> operations took 120/116/137 cycles for addition/multiplication/division, while the corresponding 64-bit <b>floating</b> <b>point</b> operations took 178/270/590 cycles. The V80 had some limited hardware assist for parts of the <b>floating</b> <b>point</b> operations, e.g. decomposition into sign, exponent and mantissa, thus its <b>floating</b> <b>point</b> unit was claimed up to 3 times {{as effective as the}} one of the V70, with 32-bit operations taking 36/44/74 cycles while 64-bit <b>floating</b> <b>point</b> operations taking 75/110/533 cycles on the V80 (again, for addition/multiplication/division).|$|E
50|$|In February 2012, Black Sands Remixed was {{released}} on Ninja Tune, featuring tracks from the original Black Sands record remixed by electronic producers such as Machinedrum, Lapalux, <b>Floating</b> <b>Points</b> and Mark Pritchard.|$|R
5000|$|... 2016Belle and Sebastian, James Blake, Laura Marling, Wild Beasts, Warpaint, Grandaddy, Tindersticks, Julia Holter, White Denim, Battles, BC Camplight, Unknown Mortal Orchestra, <b>Floating</b> <b>Points,</b> Ezra Furman, Michael Rother, Songhoy Blues, Jagwar Ma, Cate Le Bon, Fat White Family ...|$|R
50|$|The SECS-II {{standard}} also defines {{lists of}} allowed data types including ASCII, binary, boolean, 4 and 8 byte <b>floating</b> <b>points,</b> signed and unsigned integers of byte length 1, 2, 4, or 8 and a List; a container for other data elements including other lists.|$|R
25|$|Some keys, such as <b>floating</b> <b>point</b> numbers, {{can lead}} to long chains and prefixes that are not {{particularly}} meaningful. Nevertheless, a bitwise trie can handle standard IEEE single and double format <b>floating</b> <b>point</b> numbers.|$|E
25|$|Supports {{double-precision}} <b>floating</b> <b>point.</b>|$|E
25|$|<b>Floating</b> <b>point</b> {{instruction}} non-coherencies.|$|E
30|$|For workloads, we {{simulated}} the SPEC 2000 benchmark (13 <b>floating</b> <b>points</b> and 12 integer benchmarks) suite (Henning 2000), using Simple Scalar (Burger & Austin 1997) 3.0 e. The Simple Scalar simulates a superscalar {{processor with}} out-of-order issue and execution. For each application, we simulated 10 million instructions.|$|R
50|$|Hebden {{undertook}} a month long residency as Four Tet for online radio station NTS Radio in May 2014. He {{has since been}} an occasional DJ for NTS, playing in February, June and November 2015, and again alongside fellow DJ and producer <b>Floating</b> <b>Points</b> in June and October 2016, and March 2017.|$|R
5000|$|Wrackspurt: In {{an early}} {{scene in the}} Harry Potter and the Half-Blood Prince film, Luna wears a pair of [...] "Spectrespecs" [...] {{enabling}} her to see Wrackspurts — which in turn reveal Harry's prone form underneath his invisibility cloak, and allow her to rescue him. During {{a point of view}} scene, Wrackspurts resemble <b>floating</b> <b>points</b> of light.|$|R
