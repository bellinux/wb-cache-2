108|919|Public
25|$|To each {{variable}} in the primal space corresponds an inequality to satisfy in the dual space, both indexed by output type. To each inequality to satisfy in the primal space corresponds a {{variable in the}} dual space, both indexed by <b>input</b> <b>type.</b>|$|E
25|$|HTML 5 {{introduces}} {{a number of}} input tags that can be represented by other interface elements. Some are based upon text input fields and are intended to input and validate specific common data. These include email to enter email addresses, tel for telephone numbers, number for numeric values. There are additional attributes to specify required fields, fields that should have keyboard focus when the web page containing the form is loaded, and placeholder text that is displayed within the field but is not user input (such as the 'Search' text displayed in many search input fields before a search term is entered.) These tasks used to be handled with JavaScript, but had become so common that support for them {{was added to the}} standard. The date <b>input</b> <b>type</b> displays a calendar from which the user can select a date or date range. And the color <b>input</b> <b>type</b> can be represented as an input text simply checking the value entered is a correct hexadecimal representation of a color, according to the specification,color – color-well control | publisher=W3C | work=w3.org | accessdate=2014-10-31}} or a color picker widget (the latter being the solution used in most browsers which support this attribute).|$|E
50|$|Among programmers, {{to produce}} {{compatible}} functions, {{the principle is}} popularized in the form be contravariant in the <b>input</b> <b>type</b> and covariant in the output type.|$|E
5000|$|Touch support: Windows Embedded Compact 7 recognizes {{touch and}} gesture <b>input</b> <b>types</b> ...|$|R
50|$|Type {{families}} and type classes are closely related: normal type classes define partial functions from types to {{a collection of}} named values by pattern matching on the <b>input</b> <b>types,</b> while type families define partial functions from types to types by pattern matching on the <b>input</b> <b>types.</b> In fact, in many uses of type families {{there is a single}} type class which logically contains both values and types associated with each instance. A type family declared inside a type class is called an associated type.|$|R
5000|$|To {{make the}} above example work for any {{compatible}} <b>input</b> <b>types</b> automatically, {{we can create}} a function that specializes automatically: ...|$|R
5000|$|... where {{consequence}} {{contains the}} output value whereas premise includes {{one or more}} conditions on the inputs. According to the <b>input</b> <b>type,</b> conditions can have different forms: ...|$|E
50|$|The {{element type}} (called the <b>input</b> <b>type)</b> is indexed by shape and position, {{so it can}} vary by shape and position, and the {{extension}} (called the output type) is also indexed by shape.|$|E
50|$|In other words, the → type {{constructor}} is contravariant in the <b>input</b> <b>type</b> and covariant in {{the output}} type. This rule was first stated formally by John C. Reynolds, and further popularized {{in a paper}} by Luca Cardelli.|$|E
50|$|The Object-Oriented Input Library is {{a mostly}} C++ library for {{handling}} <b>input.</b> <b>Input</b> <b>types</b> include mouse, keyboard, joystick and Wii remote.|$|R
5000|$|Terminals {{can operate}} in various modes, {{relating}} {{to when they}} send <b>input</b> <b>typed</b> by the user on the keyboard to the receiving system (whatever that may be): ...|$|R
50|$|MetaboAnalyst {{supports}} {{a wide variety}} of data <b>input</b> <b>types</b> commonly generated by metabolomic studies including GC/LC-MS raw spectra, MS/NMR peak lists, NMR/MS peak intensity table, NMR/MS spectral bins, and metabolite concentrations.|$|R
50|$|To each {{variable}} in the primal space corresponds an inequality to satisfy in the dual space, both indexed by output type. To each inequality to satisfy in the primal space corresponds a {{variable in the}} dual space, both indexed by <b>input</b> <b>type.</b>|$|E
50|$|The column 'Connector Type' {{shows the}} number of trigger inputs with audio jack sockets and {{the number of}} trigger inputs with audio jack plugs on a {{proprietary}} wiring harness. If a module uses a wiring harness, inputs that feature an audio jack socket are indicated with an asterisk (*) next to the <b>input</b> <b>type.</b>|$|E
5000|$|HTML 5 {{introduces}} {{a number of}} input tags that can be represented by other interface elements. Some are based upon text input fields and are intended to input and validate specific common data. These include [...] to enter email addresses, [...] for telephone numbers, [...] for numeric values. There are additional attributes to specify required fields, fields that should have keyboard focus when the web page containing the form is loaded, and placeholder text that is displayed within the field but is not user input (such as the 'Search' text displayed in many search input fields before a search term is entered.) The [...] <b>input</b> <b>type</b> displays a calendar from which the user can select a date or date range. And the [...] <b>input</b> <b>type</b> can be represented as an input text simply checking the value entered is a correct hexadecimal representation of a color, according to the specification, or a color picker widget (the latter being the solution used in most browsers which support this attribute).|$|E
50|$|In {{computer}} science, a type family associates {{data types}} with other data types, using a type-level function defined by an open-ended collection of valid instances of <b>input</b> <b>types</b> {{and the corresponding}} output types.|$|R
5000|$|Numba compiles Python code with LLVM to code {{which can}} be {{natively}} executed at runtime. This happens by decorating Python functions, which allows users to create native functions for different <b>input</b> <b>types,</b> or to create them on the fly: ...|$|R
5000|$|Microarchitecture {{simulation}} can {{be classified}} into multiple categories according to <b>input</b> <b>types</b> and level of details. Specifically, the input can be a trace collected from an execution of program on a real microprocessor (so called trace-driven simulation) or a program itself (so called execution-driven simulation).|$|R
50|$|Suppose {{that the}} <b>input</b> <b>type</b> for the machine is: In ::= Command × Character × Position. This {{recognises}} that every interaction {{could be a}} simple character insertion, a menu command or a cursor placement. Any given interaction is a 3-tuple, but some places may be empty. For example, (Insert, 'a', ε) would represent typing the character 'a'; while (Position, ε, 32) would mean placing the cursor between characters 32 and 33; and (Select, ε, 32) would mean selecting the text between the current cursor position and the place between characters 32 and 33.|$|E
5000|$|The (RC)4558 {{is a low}} priced, {{general purpose}} dual {{operational}} amplifier, introduced mid 70's by Texas Instruments as an [...] "improved" [...] version of the early 741, and used in thousands of consumer and industrial designs. [...] In fact, JRC4558D is nothing else than the licensed product manufactured by Japan Radio Company (日本無線株式会社), and identical to any other 4558 chip. Other popular chips used included the TL072 (a JFET <b>input</b> <b>type,</b> highly popular in 80's), [...] "original" [...] TI RC4558P, and OPA2134. The TA75558 (yet another version, made by Toshiba), standard in the TS10 alongside the 4558, is strangely regarded as the [...] "ugly duckling of TS opamps".|$|E
40|$|AbstractThe well-definedness {{problem for}} a {{programming}} language consists of checking, given an expression and an <b>input</b> <b>type,</b> whether the semantics of the expression is defined for all inputs adhering to the <b>input</b> <b>type.</b> A related problem is the semantic type-checking problem which consists of checking, given an expression, an <b>input</b> <b>type,</b> and an output type whether the expression always returns outputs adhering to the output type on inputs adhering to the <b>input</b> <b>type.</b> Both problems are undecidable for general-purpose programming languages. In this paper we study these problems for the Nested Relational Calculus, a specific-purpose database query language. We also investigate how these problems behave {{in the presence of}} programming language features such as singleton coercion and type tests...|$|E
50|$|No {{complete}} list of <b>input</b> file <b>types.</b>|$|R
3000|$|... where h (t) is a {{concatenated}} vector {{of a word}} vector w (t) and a PM vector p (t), and s (t− 1) is {{the output}} from the hidden layer at time t− 1. By using the hybrid vector, the hybrid RNNLM can simultaneously integrate multiple <b>input</b> <b>types</b> in its <b>input</b> layer.|$|R
40|$|AbstractThis paper {{focuses on}} how {{terms of the}} {{polymorphic}} λ-calculus, which may take <b>types</b> as <b>inputs,</b> depend on <b>types.</b> These terms are generally understood, in all models, to have an “essentially” constant meaning on <b>input</b> <b>types.</b> We show the proof theory of polymorphic λ-calculus suggests a clear syntactic description of this phenomenon. Namely, under a reasonable condition, we show that if two polymorphic functions agree on a single type, then they agree on all types (equivalently, <b>types</b> are generic <b>inputs)</b> ...|$|R
40|$|International audienceWe give in {{this paper}} a purely syntactical {{definition}} of input and output types of system F. We define the syntactical data types as input and output types. We show that any type with positive quantifiers is a syntactical data type and that an <b>input</b> <b>type</b> is an output type. We give some restrictions on the ∀-elimination rule {{in order to prove}} that an output type is an <b>input</b> <b>type...</b>|$|E
40|$|Unlike in {{traditional}} query languages, expressions in XQuery {{can have an}} undefined meaning (i. e. these expressions produce a run-time error). It is hence natural to ask whether we can solve the well-definedness problem for XQuery: given an expression and an <b>input</b> <b>type,</b> check whether the semantics of the expression is defined for all inputs adhering to the <b>input</b> <b>type.</b> In this paper we investigate the well-definedness problem for non-recursive fragments of XQuery under a bounded-depth type system. We identify properties of base operations which can make the problem undecidable and give conditions which are sufficient to ensure decidability. info:eu-repo/semantics/publishe...|$|E
40|$|The well-definedness {{problem for}} a {{database}} query language con-sists of checking, given an expression and an <b>input</b> <b>type,</b> whether the semantics of the expression is defined for all inputs adhering to the <b>input</b> <b>type.</b> In this paper we study the well-definedness {{problem for a}} family of first-order, object-creating query languages which are evalu-ated in a tree-structured, list-based data model. We identify properties of base operations which can make the problem undecidable and give restrictions which are sufficient to ensure decidability. As a direct re-sult, we obtain a large fragment of XQuery for which well-definedness is decidable. ...|$|E
40|$|This paper {{focuses on}} how terms of second order -calculus, which may take <b>types</b> as <b>inputs,</b> depend on <b>types.</b> These terms are {{generally}} understood {{to have an}} "essentially" constant meaning, in all models, on <b>input</b> <b>types.</b> We show how the proof theory of second order -calculus suggests a clear syntactic description of this phenomenon. Namely, under a reasonable condition, we show that identity of two polymorphic functions on a single type implies identity of the functions (equivalently, every type is a generic input) ...|$|R
50|$|The Sense {{programming}} environment {{is designed to}} work {{in conjunction with the}} SenseBoard, a specialised piece of hardware which connects to a user's computer via a USB connection. The SenseBoard has different <b>input</b> <b>types</b> such as sensors for infrared, light, sound (microphone), and temperature (thermometer), and outputs such as a motor and light emitting diodes (LEDs).|$|R
5000|$|Each {{class is}} {{composed}} of ranges of characteristics. These characteristics are the <b>input</b> <b>types</b> or names which come from matter-element model. Weight values in extension neural network represent these ranges. In the learning algorithm, first weights are initialized by searching for the maximum and minimum values of inputs for each class as shown in equation 8 ...|$|R
40|$|The well-definedness {{problem for}} a {{database}} query language consists of checking, given an expression and an <b>input</b> <b>type,</b> that the expression never yields a runtime error on any input adhering to the <b>input</b> <b>type.</b> In this article we study the well-definedness problem for query languages on trees that are built from a finite set of partially-defined base operations by adding variables, constants, conditionals, let bindings, and iteration. We identify properties of base operations that can make the problem undecidable and give restrictions that are sufficient to ensure decidability. As a direct result, we obtain a large fragment of XQuery for which well-definedness is decidable...|$|E
40|$|In {{this study}} we {{examined}} how students pay attention to target items in written L 2 input in different instructional conditions and how attentional processing {{is related to the}} length of exposure. In an eye-tracking study, 45 undergraduate L 2 learners of English in Sri Lanka read a story containing seven examples of a grammatical construction on three separate sessions. The first group read the stories with no textual enhancement and the second with the examples of the target structure visually enhanced. These were considered implicit instructional conditions. The third group was exposed to enhanced input with a specific instruction {{to pay attention to the}} highlighted construction in the input. The fourth group also received explicit explanation of the target construction between the first and second exposures. The latter two exposures were considered explicit instructional conditions. Eye tracking was used to collect data on attentional processing, which we measured by the difference between observed and expected total fixation duration (DOE) on the target items. Using Linear Mixed-Effects Models, we examined how <b>input</b> <b>type,</b> text and item sequence influenced the changes in DOE values. We fitted our models with random effects to accurately estimate the fixed effects while accounting for random variation in DOE associated with the differences between participants. The findings indicate significant main effects of <b>input</b> <b>type</b> and target item and interactions between <b>input</b> <b>type</b> and text, between <b>input</b> <b>type</b> and items and three-way interactions between the examined factors. Participants paid most attention to the first two items in each three texts and in the explicit instructional conditions attention decreased significantly afterwards. In the implicit conditions this decrease could not be observed. Explicit explanation between the exposures was found to be effective in raising attention to target items...|$|E
40|$|What is the {{significance}} of the extensive variability observed in individual members of a single-cell phenotype? This question is particularly relevant to the highly differentiated organization of the brain. In this study, for the first time, we analyze the in vivo variability within a neuronal phenotype in terms of <b>input</b> <b>type.</b> We developed a large-scale gene-expression data set from several hundred single brainstem neurons {{selected on the basis of}} their specific synaptic input types. The results show a surprising organizational structure in which neuronal variability aligned with <b>input</b> <b>type</b> along a continuum of sub-phenotypes and corresponding gene regulatory modules. Correlations between these regulatory modules and specific cellular states were stratified by synaptic <b>input</b> <b>type.</b> Moreover, we found that the phenotype gradient and correlated regulatory modules were maintained across subjects. As these specific cellular states are a function of the inputs received, the stability of these states represents 2 ̆ 2 attractor 2 ̆ 2 -like states along a dynamic landscape that is influenced and shaped by inputs, enabling distinct state-dependent functional responses. We interpret the phenotype gradient as arising from analog tuning of underlying regulatory networks driven by distinct inputs to individual cells. Our results change the way we understand how a phenotypic population supports robust biological function by integrating the environmental experience of individual cells. Our results provide an explanation of the functional significance of the pervasive variability observed within a cell type and are broadly applicable to understanding the relationship between cellular input history and cell phenotype within all tissues...|$|E
5000|$|In {{addition}} to vehicles that use {{two or more}} different devices for propulsion, some also consider vehicles that use distinct energy sources or <b>input</b> <b>types</b> ("fuels") using the same engine to be hybrids, although to avoid confusion with hybrids as described above and to use correctly the terms, these are perhaps more correctly described as dual mode vehicles: ...|$|R
30|$|Emotion {{recognition}} methods utilize various <b>input</b> <b>types,</b> i.e., {{facial expressions}} [1], speech, gestures, and body language [2], and physical signals such as electrocardiogram (ECG), electromyography (EMG), electrodermal activity, skin temperature, galvanic resistance, blood volume pulse (BVP), and respiration [3]. Speech is most accessible from the aforementioned signals. Therefore, much {{research in the}} field of emotion recognition is focused on human voice.|$|R
40|$|A Hindley-Milner type system such as ML's {{seems to}} {{prohibit}} typeindexed values, i. e., functions that map {{a family of}} types to a family of values. Such functions generally perform case analysis on the <b>input</b> <b>types</b> and return values of possibly different types. The goal of our work is to demonstrate how to program with type-indexed values within a Hindley-Milner type system...|$|R
