285|10000|Public
25|$|The <b>Design</b> <b>structure</b> <b>matrix</b> (DSM) can model process relations, and be {{utilized}} for process planning. The DSM-nets are realization of DSM-based plans into workflow processes by Petri nets, and are equivalent to WRI-WF-nets. The DSM-net construction process ensures the soundness {{property of the}} resulting net.|$|E
5000|$|International <b>Design</b> <b>Structure</b> <b>Matrix</b> Conference: http://www.dsm-conference.org ...|$|E
5000|$|Delta <b>Design</b> <b>Structure</b> <b>Matrix</b> (Î”DSM) to {{quantify}} the impact of new technology on an underlying system ...|$|E
50|$|SC {{makes it}} {{possible}} to perform <b>Design</b> <b>Structure</b> <b>Matrixes</b> (DSM), change management, component-based cost management and impact analysis, and provides framework for capturing structural information and requirement traceability.|$|R
40|$|Modularization of {{crosscutting}} {{concerns is}} the main ben-efit provided by Aspect-Oriented constructs. In order to rig-orously assess the overall impact {{of this kind of}} modulariza-tion, we use <b>Design</b> <b>Structure</b> <b>Matrixes</b> (DSMs) to analyze different versions (OO and AO) of a system. This is sup-ported by the concept of semantic dependencies between classes and aspects, leading to a more faithful notion of coupling for AO systems. We also show how design rules can make those dependencies explicit and, consequently, yield a more modular design. ...|$|R
40|$|<b>Design</b> <b>structure</b> <b>matrices</b> (DSMs) {{are useful}} to {{represent}} high-level system structure, modeling interactions between design entities. DSMs {{are used for}} many visualization and abstraction activities. In this work, we propose {{the use of an}} existing DSM clustering algorithm to recover software architecture module views. To make it suitable to this domain, optimization has proved necessary. It was achieved through performance analysis and parameter tuning on the original algorithm. Results show that DSM clustering can be an alternative to other clustering algorithms. Comment: 10 page...|$|R
50|$|An {{alternative}} way {{of showing}} and analyzing the sequence of project work is the <b>design</b> <b>structure</b> <b>matrix.</b>|$|E
50|$|The <b>Design</b> <b>structure</b> <b>matrix</b> (DSM) can model process relations, and be {{utilized}} for process planning. The DSM-nets are realization of DSM-based plans into workflow processes by Petri nets, and are equivalent to WRI-WF-nets. The DSM-net construction process ensures the soundness {{property of the}} resulting net.|$|E
50|$|According to the {{definition}} of complexity by Eppinger, interdependencies increase organizational complexity. He illustrated this by means of a <b>design</b> <b>structure</b> <b>matrix.</b> The reason Eppinger gives for increased complexity is that many cross-unit interdependencies require frequent coordination and information exchange. Managers of sub-units need to manage these interdependencies.|$|E
40|$|Cycle time {{reduction}} {{is an important}} aspect of integrated product and process development (IPPD). This paper outlines some of the challenges that impede efforts to reduce cycle time for complex system development projects. Several facets of these challenges can be summarized using the general concept of design iterations. After reviewing this concept, the paper provides an overview of a process modeling approach utilizing dependency <b>structure</b> <b>matrices</b> (DSMs - also known as <b>design</b> <b>structure</b> <b>matrices).</b> DSMs allow a simple, visual representation of processes and highlight potential iterations. The paper concludes with a discussion of the ways DSM-based methods help manage some of the cycle time reduction challenges...|$|R
40|$|In this paper, we {{investigate}} {{the problem of}} designing resilience into a fleet for maritime emergency response operations. A broad set of events can trigger emergency response, requiring that a fleet of vessels for this purpose must contain a diverse set of functionalities. We can obtain significant gains in fleet resilience {{by taking advantage of}} functional overlaps between equipment installed on, or refitted onto the vessels. Combining <b>design</b> <b>structure</b> <b>matrices</b> and tradespace analyses with failure modes, we evaluate the performance of fleets for emergency response operations. The approach is illustrated with a small, qualitative case...|$|R
40|$|Abstract. Modularization of {{crosscutting}} {{concerns is}} the main benefit provided by Aspect-Oriented constructs. However, it does not address class modularity adequately. In order to assess both class and crosscutting modularity of AO systems, we use <b>Design</b> <b>Structure</b> <b>Matrixes</b> (DSMs) to analyze three different versions (OO, AO, and AO using design rules) of a real software application. We observed that, in the last version, coupling between classes and aspects is reduced, yielding a more modular design, specially when considering semantic dependencies between them. In addition, we apply new design parameters that represent a more realistic software development process. 1...|$|R
50|$|The <b>Design</b> <b>Structure</b> <b>Matrix</b> (DSM; also {{referred}} to as dependency structure matrix, dependency structure method, dependency source matrix, problem solving matrix (PSM), incidence matrix, N2 matrix, interaction matrix, dependency map or design precedence matrix) is a simple, compact and visual representation of a system or project {{in the form of a}} square matrix.|$|E
50|$|A <b>design</b> <b>structure</b> <b>matrix</b> lists all {{constituent}} subsystems/activities and {{the corresponding}} information exchange,interactions, and dependency patterns. For example, where the matrix elements represent activities, the matrix details what pieces of information are needed to start a particular activity, and shows where the information generated by that activity leads. In this way, one can quickly recognize which other activities are reliant upon information outputs generated by each activity.|$|E
50|$|Design process {{knowledge}} {{can be described in}} two levels: design activities and design rationale. The importance of representation for design rationale has been recognized but it is a more complex issue that extends beyond artifact function. The <b>design</b> <b>structure</b> <b>matrix</b> (DSM) has been used for modeling design process (activities) and some related research efforts have been conducted. For example, a web-based prototype system for modeling the product development process using a multi-tiered DSM is developed at MIT. However, few research endeavors have been found on design rationale.|$|E
40|$|Previous {{research}} shows that organization architecture relates to the architecture of a product under development, and recent studies compare proprietary versus open source software (OSS) as examples of integrated and distributed forms of software development, respectively. This study goes a step further to investigate the correspondence of organization and product architectures by comparing single-vendor with community OSS. Using a problem-solving perspective, the authors seek to explain when and why vendor firms use a community to solve their problems. Furthermore, the combination of literature-based insights with field interviews supports {{an exploration of the}} assumption that single-vendor OSS exhibits a less modular product architecture than community OSS. With <b>design</b> <b>structure</b> <b>matrices,</b> this study analyzes differences in software code architecture and specifies the studied relationship...|$|R
40|$|Modularity determines {{software}} quality {{in terms of}} evolveability, changeability, maintainability, etc. and a module could be a vertical slicing through source code directory structure or class boundary. Given a modularized design, we need to determine whether its implementation realizes the designed modularity. Manually comparing source code modular <b>structure</b> with abstracted <b>design</b> modular <b>structure</b> is tedious and error-prone. In this paper, we present an automated approach to check the conformance of source code modularity to the designed modularity. Our approach uses <b>design</b> <b>structure</b> <b>matrices</b> (DSMs) as a uniform representation; it uses existing tools to automatically derive DSMs from the source code and design, and uses a genetic algorithm to automatically cluster DSMs and check the conformance. We applied our approach to a small canonical software system as a proof of concept experiment. The results supported our hypothesis {{that it is possible}} to check the conformance between source code <b>structure</b> and <b>design</b> <b>structure</b> automatically, and this approach has the potential to be scaled for use in large software systems...|$|R
40|$|This paper reports {{results from}} an {{experimental}} case study {{that seeks to}} characterize essential and incidental complexity {{in the design of}} a complex software product using <b>design</b> <b>structure</b> <b>matrices</b> (DSMs). A DSM captures structural dependencies among the modules and can be used to identify parts of a system that lack cohesion and / or are highly coupled. We consider such parts as excessively complex. In the case study, we capture the complexity of an Internet-based collaborative system as it was originally designed and after it was redesigned using an architecture-centric development methodology. We find significant reduction in excessive complexity of the redesigned system suggesting that excessive complexity can be an incidental byproduct of a development methodology that lacks focus on the systemic properties of a system that strongly influence its architecture...|$|R
40|$|Abstract. Due to {{shortcomings}} {{existing in}} traditional overlapping model, a new extending activity overlapping model based on <b>design</b> <b>structure</b> <b>matrix</b> considering rework and iteration during activities execution is proposed in this article. Firstly, a tradional overlapping model presented by others is introduced. Sencondly, it is expanded {{to apply to}} more general situations using <b>design</b> <b>structure</b> <b>matrix.</b> Subsequently, an example deriving from a certain product development process is used in order to illustrate its effeciency and effectines...|$|E
40|$|International audienceThe {{modeling}} of effective {{product development process}} can help manage the overall process efficiently and help organize a multifunctional team to develop products in a concurrent and cooperative manner. In this article, a product development process {{is viewed as a}} dynamic system with feedback based on the feedback control theory, and a dynamic system model and its <b>design</b> <b>structure</b> <b>matrix</b> are developed. The model and its <b>design</b> <b>structure</b> <b>matrix</b> can be further divided to capture the interaction and feedback of design information. A fuzzy evaluation method is presented for the evaluation of the performance of a dynamic development process; this allows a development process to be optimized based on re-organizing design constraints, re-organizing design processes, and re-organizing designer's preferences. An example is provided to illustrate the proposed model...|$|E
40|$|Abstract: This study {{outlines}} {{a methodology}} for the valuation {{of the architecture}} of an integrated product or system through an appropriate level of modularization to maximize the societal value created. This method is developed {{through the application of}} the <b>design</b> <b>structure</b> <b>matrix</b> (DSM) and real options theory. The DSM method is utilized to develop an improved visibility estimate for non-hierarchic system architectures. A method is also proposed to account for different module sizes and system module level testing costs. Finally, a normalization procedure is proposed that allows comparing alternative modular arrangements of the same underlying system elements. The proposed method serves as the basis of an improved approach for architecture optimization. The proposed method is illustrated using a reference example of an industrial gas turbine. Key Words: <b>design</b> <b>structure</b> <b>matrix</b> (DSM), real options theory, modular and integral architectures, architectural optimization. 1...|$|E
40|$|The paper {{presents}} {{the findings of}} a survey of 40 microsystems companies that was carried out to determine the use and the purpose of use of media forms and information flow models within these companies. These companies as "product-service systems' delivered integrated products and services to realise customer solutions. Data collection was carried out by means of an online survey over 3 months. The survey revealed that 42. 5 % of respondents made use of data flow diagrams and 10 % made use of <b>design</b> <b>structure</b> <b>matrices.</b> The survey also suggests that a majority of companies (75 %) made use of textual and diagrammatic media forms for communication, analysis, documentation and representation during design and development processes. The paper also discusses the implications of the survey findings to product-service systems...|$|R
40|$|The {{structure}} of the coupling relation on design decisions is a key factor influencing the evolvability properties and the economic value of a design. The work of Baldwin and Clark {{is an important step}} toward a theory of the relationship between structure and value. A key step to enabling rigorous validation and perhaps the eventual use of their ideas for software engineering is formalization of their model. In this paper, we present a brief overview of such a formal model and a prototype software tool, Simon, implementing it. We present Simonâ€™s functions for deriving <b>design</b> <b>structure</b> <b>matrices</b> and computing impacts of changes in design decisions, and we sketch an initial experimental evaluation {{in the form of a}} replication study of our earlier analysis of Parnasâ€™s 1972 paper on information hiding modularity...|$|R
30|$|In parallel, {{there is}} an urgent need of {{standardisation}} and harmonisation of data representation for manufacturing information, for example: the product information (BoM, engineering-BoM and manufacturing-BoM [146]), the manufacturing processes (bill of processesâ€”BoP) including the manufacturing facilities layout, the associated relations (bill of relationsâ€”BoR), and related services (Bill of Servicesâ€”BoS) should be pursued through a shared data model. Moreover, the product complexity needs to be assessed based on functional product specifications using, for instance, <b>design</b> <b>structure</b> <b>matrices</b> (DSM) [147], which incorporate components (BoM), the required manufacturing and assembly processes (BoP) including sequences/plans, relationships (BoR), and the accompanying services (BoS). The complexity of the product {{in relation to the}} manufacturing network and service activities (impact on delivery time and cost, and effect on the overall reliability) will be quantified and will be incorporated in the decision-making process.|$|R
40|$|Managing the {{increasing}} complexity in product development requires describing and analyzing the dependencies {{within and between}} multiple domains, such as the customers â€™ requirements or the product components. The <b>Design</b> <b>Structure</b> <b>Matrix</b> (DSM) and the Domain Mapping Matrix (DMM) approach provide well-established methods and tools to address this challenge (e. g. [1, 2]). We clai...|$|E
40|$|The <b>design</b> <b>structure</b> <b>matrix</b> (DSM) [1] and {{the domain}} mapping matrix (DMM) [2] are well {{established}} methods {{for dealing with}} complex systems and situations. However, they only allow for a limited view on a certain problem. To manage even more complex system the multiple-domain matrix (MDM) which comprises DSM and DMM methods was developed [3]...|$|E
30|$|The product {{information}} clustering technologies based on DSM were also presented [21 â€“ 23], DSM was adopted to cluster product components into modules with minimum interfaces externally and maximum internal integration, but these model aimed for information interaction {{in the single}} product, lacked the research about the information difference and similarity among multiple products. Such as, E P Hong and G J Park proposed a new design method to design a modular product based on relationships among products functional requirements, to overcome the difficulty of modular design, with combining axiomatic design, the function-based design method and <b>design</b> <b>structure</b> <b>matrix</b> [21]. A H Tilstra et al. presented the high-definition <b>design</b> <b>structure</b> <b>matrix</b> (HDDSM) to captures a spectrum of interactions between components of a product [22]. T AlGeddawy and H ElMaraghy proposed a hierarchical clustering (cladistics) model to automatically build product hierarchical architecture from DSM [23].|$|E
40|$|International audienceToday, {{industry}} is under constant pressure to increase competitiveness and resource-efficiency. One possibility {{to cope with}} these challenges is industrial symbiosis. Industrial symbiosis is based on substituting a new resource by an undervalued resource such as waste. Thereby, industrial symbiosis reduces waste and saves resources. One of the practical challenges in developing industrial symbioses is the identification of symbiosis opportunities. In particular, the question how " new resource â€“ substitute " combinations can be identified {{has not yet been}} addressed in the literature. This paper presents a modeling approach for industrial symbioses in industrial parks, based on <b>design</b> <b>structure</b> <b>matrices</b> (DSM), which intends to support the identification of substitution opportunities. The approach is applied to a sample industrial park. Combined with an optimization algorithm, the symbiosis model is used for identifying not only symbiosis opportunities but also the most attractive combination (s) of symbioses within the industrial park...|$|R
40|$|Software {{modularization}} activities remain {{without the}} guidance of formal theories and models. According to Baldwin and Clarkâ€™s [1] design rule theory (DRT), modular architectures add value to system designs by creating options to improve the system by substituting or experimenting on individual modules. In this paper, we examine the design evolution of two software product platforms through the modeling lens of DRT and <b>design</b> <b>structure</b> <b>matrices</b> (DSMs). We show that DSM models and DRT precisely explain how realworld modularization activities in one case allowed for different rates of evolution in different software modules and in another case conferred distinct strategic advantages on a firm (by permitting substitution of an at-risk software module without substantial change {{to the rest of}} the system). Our results provide positive evidence that DSM and DRT can inform important aspects of large-scale software structure and evolution, having the potential to guide software architecture design activities. 1...|$|R
40|$|Abstractâ€”To {{address the}} problem that {{existing}} software dependency extraction methods do not work on higher-level software artifacts, do not express decisions explicitly, and do not reveal implicit or indirect dependencies, our recent work explored the possibility of formally defining and automatically deriving a pairwise dependence relation from an augmented constraint networks (ACN) that models the assumption relation among design decisions. The current approach is difficult to scale, requiring constraint solving and solution enumeration. We observe that the assumption relation among design decisions for most software systems can be abstractly modeled using a special form of ACN. For these more restrictive, but highly representative models, we present an O(n 3) algorithm to derive the dependency relation without solving the constraints. We evaluate our approach by computing <b>design</b> <b>structure</b> <b>matrices</b> for existing ACNs that model multiple versions of heterogenous real software designs, often reducing the running time from hours to seconds...|$|R
40|$|One of {{the most}} active areas of {{engineering}} design today is a modular design method to design and to produce a large variety of product in a limited time and a lower cost. Decomposition of system into modules is {{the most important part of}} the modular design method. <b>Design</b> <b>Structure</b> <b>Matrix</b> (DSM) has been proposed for efficient modularization. However, DSM does not indicate the design flow. It is well known that a good design flow can be defined by axiomatic design. In this paper, a rational method is presented to define modules considering relationships between functional requirements and design parameters and interactions of design parameters within. The Independence Axiom of Axiomatic design and <b>Design</b> <b>Structure</b> <b>Matrix</b> (DSM) are utilized for efficient modularization of a design system and the design flow without feedbacks. The method is applied to the ceiling type air conditioner and the results are analyzed...|$|E
40|$|Abstractâ€”This paper {{presents}} a process modeling and analysis technique for managing complex design projects using advanced simulation. The model computes the probability distribution of lead {{time in a}} stochastic, resource-constrained project network where iterations take place among sequential, parallel, and overlapped tasks. The model uses the <b>design</b> <b>structure</b> <b>matrix</b> representation to capture the information flows between tasks. We use a simulation-based analysis to account for many realistic aspects of design process behavior which were not possible in previous analytical models. We propose a heuristic for the stochastic, resource-constrained project scheduling problem in an iterative project network. The model {{can be used for}} better project planning and control by identifying leverage points for process improvements, and for evaluating alternative planning and execution strategies. An industrial example is provided to illustrate the utility of the model. Index Termsâ€”Design iteration, <b>design</b> <b>structure</b> <b>matrix,</b> process modeling, project management, project simulation...|$|E
40|$|Abstract: Axiomatic design (AD) is {{a popular}} {{creative}} design method, which provides a systematic and scientific basis for making design solutions. The AD method is concentrated on how to find suitable design parameters {{to meet the needs}} of functional requirements, while certain system interaction factors and constraints (such as physical connectivity) are not catered directly. As a structured modeling method, more recently the <b>design</b> <b>structure</b> <b>matrix</b> (DSM) model has been regarded as a good roadmap of system interactions. DSM is a good tool representing interactions among design objectives and facilitating analysis of these interactions. Based on the complementarities between AD and DSM, it is proposed to enhance the AD method with DSM. The underlying logic is transforming the ADâ€™s design matrix into corresponding DSM for system interaction evaluation, thereby improving the feasibility of AD result. A design example of friction drive conveyor is given to illustrate the proposed design method. Key Words: axiomatic design, <b>design</b> <b>structure</b> <b>matrix,</b> design theory. 1...|$|E
40|$|People have {{realized}} {{the importance of}} modularity for decades, and still grapple with modularity decay caused by unexpected dependencies. Given a design that is wellmodularized, {{it is difficult to}} determine whether its implementation realizes the designed modularity without introducing unexpected dependencies between modules. Manually comparing source code modular <b>structure</b> with abstracted <b>design</b> modular <b>structure</b> is tedious and errorprone. In this paper, we present an automated approach to check the conformance of source code modularity to the designed modularity. Our approach uses <b>design</b> <b>structure</b> <b>matrices</b> (DSMs) as a uniform representation. We use existing tools to automatically derive DSMs from the source code and design, and use a genetic algorithm to automatically cluster DSMs and check the conformance. We applied our approach both to a small, but canonical, software systems and to a real project. Our experiments show that automatically checking the conformance between source code and <b>design</b> <b>structure</b> has the potential to manifest the decoupling effects of design rules in source code, and to detect unexpected dependencies caused by incorrect implementation. We also show that the design model and implementation model together provide a comprehensive view of system modular structure. 1...|$|R
40|$|Adjacency <b>matrices</b> or DSMs (<b>design</b> <b>structure</b> <b>matrices)</b> and node-link {{diagrams}} {{are both}} visual representations of graphs, {{which are a}} common form of data in many disciplines. DSMs are used throughout the engineering community for various applications, such as process modelling or change prediction. However, outside this community, DSMs (and other matrix-based representations of graphs) are rarely applied and node-link diagrams are very popular. This paper will examine, which representation is more suitable for visualising graphs. For this purpose, several user experiments were conducted that aimed to answer this research question {{in the context of}} product models used, for example in engineering, but the results can be generalised to other applications. These experiments identify key factors on the readability of graph visualisations and confirm work on comparisons of different representations. This study widens the scope of readability comparisons between node-link and matrix-based representations by introducing new user tasks and replacing simulated, undirected graphs with directed ones employing real-world semantics. ...|$|R
40|$|According to Parnasâ€™s {{information}} hiding principle and Baldwin and Clarkâ€™s design rule theory, the key step to decomposing a system into modules {{is to determine}} the design rules (or in Parnasâ€™s terms, interfaces) that decouple otherwise coupled design decisions and to hide decisions that are likely to change in independent modules. Given a modular design, {{it is often difficult to}} determine whether and how its implementation realizes the designed modularity. Manually comparing code with abstract design is tedious and error-prone. We present an automated approach to check the conformance of implemented modularity to designed modularity, using <b>design</b> <b>structure</b> <b>matrices</b> as a uniform representation for both. Our experiments suggest that our approach has the potential to manifest the decoupling effects of design rules in code, and to detect modularity deviation caused by implementation faults. We also show that design and implementation models together provide a comprehensive view of modular structure that makes certain implicit dependencies within code explicit...|$|R
