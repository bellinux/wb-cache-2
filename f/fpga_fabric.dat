137|48|Public
50|$|Also, {{due to the}} {{increasing}} complexity of <b>FPGA</b> <b>fabric,</b> including memory blocks and I/O blocks, more complex synthesis algorithms were developed that separate unrelated modules into slices, reducing post-placement errors.|$|E
50|$|In 2005, Actel {{introduced}} a new technology known as Fusion to bring FPGA programmability to mixed-signal solutions. Fusion was the first technology to integrate mixed-signal analog capabilities with flash memory and <b>FPGA</b> <b>fabric</b> in a monolithic device.|$|E
50|$|SmartFusion is {{a family}} of {{microcontrollers}} with an integrated FPGA of Actel. The device includes an ARM Cortex-M3 hard processor core (with up to 512kB of flash and 64kB of RAM) and analog peripherals such as a multi-channel ADC and DACs {{in addition to their}} flash-based <b>FPGA</b> <b>fabric.</b>|$|E
40|$|Abstract. Increasing logic {{resources}} {{coupled with}} a proliferation of integrated performance enhancing primitives in high-end FPGAs results in an increased design complexity which requires new methodologies to overcome. This paper presents a structured system based design methodology, centred around the concept of architecture reuse, which aims to increase productivity and exploit the reconfigurability of high-end FP-GAs. The methodology is exemplified by the Sonic-on-a-Chip architecture. Preliminary experimental investigations reveal that while the proposed methodology is able to achieve the desired aims, its success would be enhanced if changes were made to existing <b>FPGA</b> <b>fabrics</b> {{in order to make}} them better suited to modular design. ...|$|R
40|$|In this paper, we {{introduce}} GroundHog 2009 benchmarking suite {{that can}} be used to evaluate the power consumption of reconfigurable technology implementing applications targeting the mobile computing domain. This benchmark suite includes seven designs; one design targets fine-grained <b>FPGA</b> <b>fabrics,</b> and six designs are specified at a high level, which allows them to target a range of reconfigurable technologies. Each of the six designs can be stimulated with synthetically generated input stimuli created by a tool included in the suite. Additionally, another tool can help verify the correctness of each implemented design. Finally, we use our benchmark suite to evaluate the power consumption of two modern FPGAs targeting the mobile domain. ...|$|R
40|$|Abstract – We present timing-driven {{partitioning}} and {{simulated annealing}} based placement algorithms {{together with a}} detailed routing tool for 3 D FPGA integration. The circuit is first divided into layers with limited number of inter-layer vias, and then placed on individual layers, while minimizing the delay of critical paths. We use our tool as a platform to explore the potential benefits in terms of delay and wire-length that 3 D technologies can offer for <b>FPGA</b> <b>fabrics.</b> Experimental results show on average a total decrease of 21 % in wire-length and 24 % in delay, can be achieved over traditional 2 D chips, when five layers are used in 3 D integration. I...|$|R
5000|$|Xilinx's {{approach}} stacks several (three or four) active FPGA die side-by-side on a silicon interposer - {{a single}} piece of silicon that carries passive interconnect. [...] The multi-die construction also allows different parts of the FPGA to be created with different process technologies, as the process requirements are different between the <b>FPGA</b> <b>fabric</b> itself and the very high speed 28 Gbit/s serial transceivers. An FPGA built in this way is called a heterogeneous FPGA.|$|E
5000|$|LP devices {{differ from}} the Ultra devices in {{that they do not}} include hard IP cores. Instead, any {{interface}} logic must be implemented in the <b>FPGA</b> <b>fabric.</b> This is generally less preferable, as so-called [...] "soft cores" [...] are less power-efficient than hard cores, and often are unable to operate at the same frequencies. A soft core also reduces the number of logic cells available to the application. LM devices integrate two I²C and two SPI hard cores, as well as two strobe generators. Most LP and LM devices integrate one or two phase-locked loops.|$|E
5000|$|To {{shrink the}} size and power {{consumption}} of FPGAs, vendors such as Tabula and Xilinx have introduced new 3D or stacked architectures. Following the introduction of its 28 nm 7-series FPGAs, Xilinx revealed {{that several of the}} highest-density parts in those FPGA product lines will be constructed using multiple dies in one package, employing technology developed for 3D construction and stacked-die assemblies. The technology stacks several (three or four) active FPGA dice side-by-side on a silicon interposer - a single piece of silicon that carries passive interconnect. [...] The multi-die construction also allows different parts of the FPGA to be created with different process technologies, as the process requirements are different between the <b>FPGA</b> <b>fabric</b> itself and the very high speed 28 Gbit/s serial transceivers. An FPGA built in this way is called a heterogeneous FPGA.|$|E
40|$|Abstract—We present timing-driven {{partitioning}} and {{simulated annealing}} based placement algorithms {{together with a}} detailed routing tool for 3 D FPGA integration. The circuit is first divided into layers with limited number of inter-layer vias, and then placed on individual layers, while minimizing the delay of critical paths. We use our tool as a platform to explore the potential benefits in terms of delay and wire-length that 3 D technologies can offer for <b>FPGA</b> <b>fabrics.</b> Experimental results show on average a total decrease of 25 % in wire-length and 35 % in delay, can be achieved over traditional 2 D chips, when 10 layers are used in 3 D integration. Index Terms—Field programmable gate arrays, threedimensional circuits, routing, timing-driven placement...|$|R
40|$|This paper {{discusses}} {{the use of}} transistor abstraction to enable the functional verification of <b>FPGA</b> <b>fabrics</b> with RTL models. It first describes the multiplexer structures that are used {{on a massive scale}} in FPGAs and the specific challenges that they pose to transistor abstraction tools. It then reviews previous approaches and shows that the cone model of the DESB system is particularly well suited to abstract FPGA logic because it makes pass-gate branches in multiplexer structures well apparent. Based on this model, methods are described to isolate multiplexer structures, take into account logic correlation between signals, and generate RTL models that are both simulation efficient and highly readable. Finally, Altera’s ABX tool that implements these concepts is briefly described...|$|R
40|$|Field-Programmable-Core-Arrays (FPCA) {{will include}} various {{computing}} cores {{for a wide}} variety of applications ranging from DSP to general purpose computing. With the increasing gap between core computing speeds and memory access latency, managing and orchestrating the movement of data across multiple cores will become increasingly important. In this paper we propose data reorganization engines that allow a wide variety of data reorganizations intra- as well as inter-memory modules for future FPCAs. We have experimented with a suite of data reorganizations pervasive in DSP applications. Our limited set of experiments reveals that the proposed designs for these engines are flexile and use little design area in current <b>FPGA</b> <b>fabrics,</b> making them amenable to be easily integrated in future FPCAs as either soft- or hard- macros...|$|R
50|$|When {{creating}} circuit partitions, engineers {{should first}} observe the available resources the FPGA offers, since the design {{will be placed}} onto the <b>FPGA</b> <b>fabric</b> The architecture of each FPGA {{is dependent on the}} manufacturer, but the main goal in design partitioning is to have an even balance of FPGA resource utilization. Various FPGA resources include Look-Up-Tables (LUTs), D Flip-Flops, block RAMs, digital signal processors (DSPs), clock buffers, etc. Prior to balancing the design partitions, it is also valuable to the user to perform global logic optimization to remove any redundant or unused logic. A typical problem that arises with creating balanced partitions is that it may lead to timing or resource conflict if the cut is on many signal lines. To have a fully optimized partitioning strategy, the engineer must consider issues such as timing/power constraints and placement and routing while still maintaining a balanced partition amongst the FPGAs. Strictly focusing on a single issue during a partition may create several issues in another.|$|E
5000|$|A recent {{trend has}} been to take the {{coarse-grained}} architectural approach a step further by combining the logic blocks and interconnects of traditional FPGAs with embedded microprocessors and related peripherals to form a complete [...] "system on a programmable chip". This work mirrors the architecture created by Ron Perlof and Hana Potash of Burroughs Advanced Systems Group in 1982 which combined a reconfigurable CPU architecture on a single chip called the SB24. Examples of such hybrid technologies {{can be found in}} the Xilinx Zynq-7000 All Programmable SoC, which includes a 1.0 GHz dual-core ARM Cortex-A9 MPCore processor embedded within the FPGA's logic fabric or in the Altera Arria V FPGA, which includes an 800 MHz dual-core ARM Cortex-A9 MPCore. The Atmel FPSLIC is another such device, which uses an AVR processor in combination with Atmel's programmable logic architecture. The Microsemi SmartFusion devices incorporate an ARM Cortex-M3 hard processor core (with up to 512 kB of flash and 64 kB of RAM) and analog peripherals such as a multi-channel ADC and DACs to their flash-based <b>FPGA</b> <b>fabric.</b>|$|E
40|$|This chapter {{describes}} the Arria ® II GX and GZ transceiver clocking architecture, including the input reference clocking, transceiver channel datapath clocking, FPGA fabric-transceiver interface clocking, and <b>FPGA</b> <b>fabric</b> phase-locked loop (PLL) -transceiver PLL cascading. This chapter {{includes the following}} sections...|$|E
40|$|It {{has been}} shown that FPGAs could {{outperform}} high-end microprocessors on floating-point compu-tations thanks to massive parallelism. However, most previous studies re-implement in the FPGA the operators present in a processor. This is a safe and relatively straightforward approach, but it doesn’t exploit the greater flexibility of the FPGA. This arti-cle is a survey of the many ways in which the FPGA implementation of a given floating-point compu-tation can be not only faster, but also more accu-rate than its microprocessor counterpart. Techniques studied here include custom precision, specific accu-mulator design, dedicated architectures for coarser operators which have to be implemented in software in processors, and others. A real-world biomedi-cal application illustrates these claims. This study also points to how current <b>FPGA</b> <b>fabrics</b> could be en-hanced for better floating-point support. ...|$|R
40|$|The {{development}} of sustainable and durable ultra- low-power SoC calls for flexibility {{integration in the}} design flow. Reconfigurable logic circumvents the intrinsic low speed performances of software processing in microcontrollers but <b>FPGA</b> <b>fabrics</b> to be embedded suffer from a high power overhead compared to dedicated ASICs. We show that, by combining a power-oriented implementation using multi-VT, a careful repar- tition of different MOS flavors, and an aggressive scaling of core voltage, the dynamic power consumption can be reduced below 6 μW/tile at 50 MHz switching target and the leakage power consumption can be brought down below 0. 5 μW/tile. Simulation results show that a 16 -bits multiplier, mapped onto the fabric developed with these techniques, is characterized by an energy per cycle as low as 2. 5 pJ...|$|R
40|$|With {{the growing}} {{capacities}} of modern <b>FPGA</b> <b>fabrics,</b> {{the use of}} FPGA-based computer system simulators has become an increasingly mainstream option to increase scalability and throughput. Current state-of-the-art simulation platforms typically require manual writing of custom FPGA-logic to implement the required simulation tasks leading to extensive development time. We evaluate the use of high-level synthesis tools (HLS) as applied to existing high-level simulation models {{as a means to}} reduce this development time. We find that after restructuring the model for FPGA-based computation, a straightforward C-to-gate HLS toolflow can still provide reasonable throughput compared to a pure software simulation model. Furthermore, such a strategy provides a means of quickly moving to a FPGA-based simulation platform, allowing researchers to concentrate their development effort on only the modules of interest while not entirely sacrificing fidelity on modules of less interest...|$|R
40|$|FPGAs {{have reached}} densities that can {{implement}} floatingpoint applications, but floating-point operations still require {{a large amount}} of FPGA resources. One major component of IEEE compliant floating-point computations is variable length shifters. They account for over 30 % of a doubleprecision floating-point adder and 25 % of a doubleprecision multiplier. This paper introduces two alternatives for implementing these shifters. One alternative is a coarsegrained approach: embedding variable length shifters in the <b>FPGA</b> <b>fabric.</b> These units provide significant area savings with a modest clock rate improvement over existing architectures. Another alternative is a fine-grained approach: adding a 4 : 1 multiplexer inside the slices, in parallel to the LUTs. While providing a more modest area savings, these multiplexers provide a significant boost in clock rate with a small impact on the <b>FPGA</b> <b>fabric.</b> 1...|$|E
40|$|Abstract. Physical Unclonable Functions promise cheap, efficient, {{and secure}} {{identification}} and authentication of devices. In FPGA devices, PUFs may be instantiated directly from <b>FPGA</b> <b>fabric</b> components {{in order to}} exploit the propagation delay differences of signals caused by manufacturing process variations. Multiple delay based PUF architec-tures have been proposed. However, we have observed inconsistent results among them. Ring Oscillator PUF works fine, while other delay based PUFs show a significantly lower quality. Rather than proposing complex system level solutions, {{we focus on the}} fundamental building blocks of the PUF. In our effort to compare the various delay based PUF archi-tectures, we have closely examined how each architecture maps into the <b>FPGA</b> <b>fabric.</b> Our conclusions are that arbiter and butterfly PUF ar-chitectures are ill suited for FPGAs, because delay skew due to routing asymmetry is over 10 times higher than the random variation due to manufacturing process. ...|$|E
40|$|Run-time {{assignment}} {{of a set}} of communicating tasks onto a heterogeneous multiprocessor system-on-chip (MP-SoC) platform is a challenging task. Having <b>FPGA</b> <b>fabric</b> tiles in such MPSoC platform increases performance and flexibility of the platform. Such FPGA tiles can not only run tasks in hardware but also instantiate a soft IP core that executes the task functionality. Thus fully exploiting the available <b>FPGA</b> <b>fabric</b> resources must include exploiting such a hierarchical configuration. This paper details the benefits of using a hierarchical configuration and illustrates how to incorporate it within a generic run-time task assignment heuristic. We show that adding a hierarchical configuration significantly improves task assignment performance (i. e. success rate and assignment quality). In several cases, the performance of a heuristic with a hierarchical configuration extends beyond the capabilities of a full solution space exploration without hierarchical configuration, at {{only a fraction of the}} computation time. 1...|$|E
40|$|In single {{processor}} architectures, computationally-intensive functions are typically accelerated using hard-ware accelerators, which exploit the concurrency in the function code {{to achieve a}} significant speedup over soft-ware. The increased design constraints from power den-sity and signal delay have shifted processor architectures in general towards multi-core designs. The migration to multi-core designs introduces the possibility of sharing hardware accelerators between cores. In this paper, we propose {{the concept of a}} hardware library, which is a pool of accel-erated functions that are accessible by multiple cores. We find that sharing provides significant reductions in the area, logic usage and leakage power required for hardware ac-celeration. Contention for these units may exist in certain cases; however, the savings in terms of chip area are more appealing to many applications, particularly the embedded domain. We study the performance implications for our pro-posal using various multi-core arrangements, with actual implementations in <b>FPGA</b> <b>fabrics.</b> <b>FPGAs</b> are particularly appealing due to their cost effectiveness and the attained area savings enable designers to easily add functionality without significant chip revision. Our results show that is possible to save up to 37 % of a chip’s available logic and interconnect resources at a negligible impact (< 3 %) to the performance. ...|$|R
40|$|This book {{comprises}} {{a set of}} five tutorials, {{and provides}} a practical introduction to working with Zynq- 7000 All Programmable System on Chip, the family of devices from Xilinx that combines an application-grade ARM Cortex-A 9 processor with traditional <b>FPGA</b> logic <b>fabric.</b> It is a companion text for 'The Zynq Book' (ISBN- 13 : 978 - 0992978709) ...|$|R
40|$|Power {{reduction}} is of growing importance for field-programmable gate arrays (FPGAs). In this paper, we apply programmable supply voltage (Vdd) to reduce FPGA power. We first design <b>FPGA</b> logic <b>fabrics</b> using dual-Vdd levels {{and show that}} field-programmable power supply is required to obtain a satisfactory power-versus-performance tradeoff. We further design <b>FPGA</b> interconnect <b>fabrics</b> for fine-grained Vdd programmability with minimal increase {{of the number of}} configuration static-random-access-memory cells. With a simple yet practical computer-aided design flow to leverage the field-programmable dual-Vdd logic and interconnect fabrics, we carry out a highly quantitative study using placed and routed benchmark circuits, and delay, power, and area models obtained from detailed circuit designs. Compared to single-Vdd FPGAs with the Vdd level suggested by the International Technology Roadmap for Semiconductors for 100 -nm technology, field-programmable dual-Vdd FPGAs reduce the total power by 47. 61 % and the energy-delay product by 27. 36 %...|$|R
40|$|Increasing power densities in Field Programmable Gate Arrays (FP-GAs) {{have made}} them {{susceptible}} to thermal problems. The advent of platform FPGAs has further exacerbated the problems by increasing the power density variations on the <b>FPGA</b> <b>fabric.</b> Therefore, we need to characterize the die temperature of platform FPGAs. In this paper, we first estimate the temperature distribution within a Virtex- 4 FPGA by feeding the block power numbers in an architecture-level temperature simulator calibrated to reflect a real FPGA package. We analyze the impact of different hard-wired blocks on the temperature profile, and observe that they introduce intra-die variation in temperature of up to 20 ◦ C. Next, we evaluate the influence of placement on temperature. Our experiments indicate a decrease in peak temperature by changing the placement of hard blocks, especially the high-speed transceivers. We further propose an iterative placement technique to reduce the peak temperature, and apply it on real designs. Finally, we propose alternate organizations of the hard blocks in the <b>FPGA</b> <b>fabric</b> to reduce temperature...|$|E
40|$|International audienceThe {{emergence}} of 2. 5 D and 3 D packaging technologies enables {{the integration of}} FPGA dice into more complex systems. Both heterogeneous manycore designs, which include an FPGA layer, and interposer-based multi-FPGA systems support the inclusion of reconfigurable hardware in 3 D-stacked integrated circuits. In these architectures, the communication between FPGA dice or between FPGA and fixed-function layers often takes place through dedicated communication interfaces spread over the FPGA logic fabric, {{as opposed to an}} I/O ring around the fabric. In this paper, we investigate the effect of organizing <b>FPGA</b> <b>fabric</b> I/O into coarse-grained interface blocks distributed throughout the <b>FPGA</b> <b>fabric.</b> Specifically, we consider the quality of results for the placement and routing phases of the FPGA physical design flow. We evaluate the routing of I/O signals of large applications through dedicated interface blocks at various granularities in the logic fabric, and study its implications on the critical path delay of routed designs. We show that the impact of such I/O routing is limited and can improve chip routability and circuit delay in many cases...|$|E
40|$|Field Programmable Gate-Arrays (FPGA) {{containing}} {{one or more}} {{embedded processor}} cores within the <b>FPGA</b> <b>fabric</b> (both hard & soft processor cores) are quickly becoming a mainstream architecture for high-performance signal processing. Design tools for these new architectures from FPGA vendors have steadily matured to provide a viable, if laborious, solution for designers. These tools merge software compilers, hardware compilers, and basic IP to support a manual SOC design process. Given the complexity of potential target systems, {{there is a need}} to design at a higher level. The current FPGA-plus-embedded processor core combination provides great opportunity for high-performance systems. The strengths of both the <b>FPGA</b> <b>fabric</b> to implement highly optimized hardware processing functions and a processor core to provide overall control and flexible processing tasks not suited for hardware implementation. In designing these systems, it is critical that bottlenecks in the control flow do not impact the time-critical data flow of the application. This paper describes the ongoing work in developing a high-level co-design design environment for the latest FPGA SOC architectures...|$|E
40|$|A new timing-driven partitioning-based {{placement}} {{tool for}} 3 D FPGA integration is presented. The circuit is first divided into layers with {{limited number of}} inter-layer vias, and then placement is performed on individual layers, while minimizing the delay of critical paths. We use our tool, which will be available on the web for the research community, as a platform for exploring potential benefits in terms of delay and wire-length that 3 D technologies have to offer for <b>FPGA</b> <b>fabrics.</b> We show that 3 D integration results in wire-length reduction for FPGA designs. However, unlike the ASIC case, wire-length reduction does not automatically translate to much smaller circuit delays, unless multi-segment lengths are employed between layers. Our empirical analysis shows that wire-length can be reduced by up to 50 % (20 % on average) using 5 layers. Delay reductions {{are estimated to be}} up to 30 % (15 % on average) using the same number of layers. 1...|$|R
40|$|Abstract — In this paper, {{proposed}} a novel {{implementation of a}} Soft-Core system using micro-blaze processor with virtex- 5 FPGA. Till now Hard-Core processors are used in FPGA processor cores. Hard cores are a fixed gate-level IP functions within the <b>FPGA</b> <b>fabrics.</b> Now the proposed processor is Soft-Core Processor, this is a microprocessor fully described in software, usually in an HDL. This can be implemented by using EDK tool. In this paper, developed a system which is having a micro-blaze processor is the combination of both hardware & Software. By using this system, user can control and communicate all the peripherals which are in the supported board by using Xilinx platform to develop an embedded system. Implementing of Soft-Core process system with different peripherals like UART interface, SPA flash interface, SRAM interface has to be designed using Xilinx Embedded Development Kit (EDK) tools. Index Terms — SOPC system, EDK tool, FPGA, Micro-Blaze, Soft-core processor. I...|$|R
40|$|We {{present the}} GroundHog 2009 {{benchmarking}} suite that evaluates the power consumption of reconfigurable technology for applications targeting the mobile computing domain. This benchmark suite includes seven designs; one design targets fine-grained <b>FPGA</b> <b>fabrics</b> allowing for quick stateof-the-art evaluation, and six designs are specified {{at a high}} level allowing them to target a range of existing and future reconfigurable technologies. Each of the six designs can be stimulated with the help of synthetically generated input stimuli created by an open-source tool included in the downloadable suite. Another tool is included to help verify the correctness of each implemented design. To demonstrate the potential of this benchmark suite, we evaluate the power consumption of two modern industrial FPGAs targeting the mobile domain. Also, we show how an academic FPGA framework, VPR 5. 0, that has been updated for power estimates can be used to estimates the power consumption of different FPGA architectures and an open-source CAD flow mapping to these architectures...|$|R
40|$|This chapter {{provides}} {{detailed information}} about the Stratix ® IV transceiver clocking architecture. For this chapter, the term “Stratix IV devices ” includes both Stratix IV GX and GT devices. Similarly, the term “Stratix IV transceivers ” includes both Stratix IV GX and GT transceivers. The clocking architecture chapter {{is divided into three}} main sections: “Input Reference Clocking ” on page 2 – 2 —describes how the reference clock is provided to the clock multiplier unit (CMU) /auxiliary transmit phase-locked loop (ATX PLL) to generate the clocks required for transceiver operation. “Transceiver Channel Datapath Clocking ” on page 2 – 20 —describes the clocking architecture internal to the transceiver block. “FPGA Fabric-Transceiver Interface Clocking ” on page 2 – 51 —describes the clocking options available when interfacing the transceiver with the <b>FPGA</b> <b>fabric.</b> Other sections in this chapter include: ■ “FPGA Fabric PLLs-Transceiver PLLs Cascading ” on page 2 – 9 “Using the CMU/ATX PLL for Clocking User Logic in the <b>FPGA</b> <b>Fabric</b> ” on page 2 – 7...|$|E
30|$|The ARM-FPGA {{platform}} {{is based on}} the Zynq- 7000 device. This SoC integrates both software (PS) and hardware (PL) parts within the same chip. The PL part, which is equivalent to a classic <b>FPGA</b> <b>fabric,</b> is ideal for implementing high-speed logic arithmetic and data flow subsystems. On the other hand, the PS part supports software algorithms and operating systems. A high-speed connection between both parts is achieved using the Advanced Extensible Interface (AXI) interconnection [28].|$|E
40|$|Placement of {{functional}} units on an <b>FPGA</b> <b>fabric</b> is a challenging problem for runtime reconfigurable computing systems. We introduce {{the concept of}} physical contexts to greatly reduce {{the complexity of the}} placement and routing problems. We have implemented static and dynamic linear placement methods for expression trees placed in physical contexts. Our placement algorithms are implemented in the JBits environment, creating a layer of a hardware operating system for future reconfigurable computing systems. 1...|$|E
30|$|The testbed is {{composed}} of a Nutaq (ex-Lyrtech) Perseus 6010 development board. Perseus 6010 is an advanced mezzanine card designed around a Virtex- 6 <b>FPGA</b> with <b>fabrics</b> flexibility and an external memory. It also benefits from multiple high-pin-count add-on FPGA mezzanine card (FMC)-based cards. An FMC-based Radio 420 x daughter board is used as full duplex SDR agile RF front-end with 12 bits ADC and DAC at up to 40 mega-samples per second.|$|R
40|$|Abstract — Platform FPGAs have {{introduced}} complex reconfigurable black-boxes for complete {{system on chip}} implementation. With rising expectations from these architectures {{there is a need}} to perform optimizations across the <b>FPGA</b> slice <b>fabric</b> and the newly introduced black boxes to maximize performance gains. In this paper, we discuss a timing driven reconfiguration technique to improve performance of DSP designs on platform FPGAs by (i) Optimal register placement algorithms within the DSP 48 block and (ii) Timing driven mechanism to have maximal pipeline depth. I...|$|R
40|$|The {{development}} of future <b>FPGA</b> <b>fabrics</b> with {{more sophisticated and}} complex logic blocks requires a new CAD flow that permits the expression of that complexity {{and the ability to}} synthesize to it. In this paper, we present a new logic block description language that can depict complex intrablock interconnect, hierarchy and modes of operation. These features are necessary to support modern and future FPGA complex soft logic blocks, memory and hard blocks. The key part of the CAD flow associated with this complexity is the packer, which takes the logical atomic pieces of the complex blocks and groups them into whole physical entities. We present an area-driven generic packing tool that can pack the logical atoms into any heterogeneous FPGA described in the new language, including many different kinds of soft and hard logic blocks. We gauge its area quality by comparing the results achieved with a lower bound on the number of blocks required, and then illustrate its explorative capability in two ways: on fracturable LUT soft logic architectures, and on hard block memory architectures. The new infrastructure attaches to a flow that begins with a Verilog front-end, permitting the use of benchmarks that are significantly larger than the usual ones, and can target heterogenous FPGAs...|$|R
