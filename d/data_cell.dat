103|3211|Public
2500|$|The {{starting}} point for calculating life expectancy is the age-specific death rates of the population members. If {{a large number of}} data is available, a statistical population can be created that allow the age-specific death rates to be simply taken as the mortality rates actually experienced at each age (the number of deaths divided by the number of years [...] "exposed to risk" [...] in each <b>data</b> <b>cell).</b> However, it is customary to apply smoothing to iron out, as much as possible, the random statistical fluctuations from one year of age to the next. In the past, a very simple model used for this purpose was the Gompertz function, but more sophisticated methods are now used.|$|E
50|$|IBM 2321 <b>Data</b> <b>Cell,</b> eight units maximum.|$|E
50|$|The IBM 2321 <b>Data</b> <b>Cell</b> {{announced}} in April 1964 {{was a direct}} access storage device for the IBM System/360. It could hold up to 400 million bytes of data, with an access time of 95 milliseconds to 600 milliseconds, depending on the addressed strip position and data arrangement in each <b>data</b> <b>cell..</b>|$|E
50|$|Every row {{must have}} {{the same number of}} table <b>data</b> <b>cells,</b> {{occasionally}} table <b>data</b> <b>cells</b> have to span more than one column or row. In this case the tags colspan and/or rowspan are used - where they are set to a number.|$|R
50|$|Individual <b>data</b> <b>cells</b> do {{not need}} a transistor, so packing density will be four times that of DRAM.|$|R
40|$|The map {{was created}} by Kristen LaBonte using ESRI's ArcGIS 9. 3 with data generously {{provided}} by the United States Geologic Survey. Null <b>Data</b> <b>Cells</b> in the SRTM DEM were filled using the focalmean function. The map {{was created by}} Kristen LaBonte using ESRI's ArcGIS 9. 3 with data generously provided by the United States Geologic Survey. Null <b>Data</b> <b>Cells</b> in the SRTM DEM were filled using the focalmean function...|$|R
50|$|SEQWL {{files were}} rarely used, {{and were not}} officially {{supported}} or {{were removed from the}} documentation by some MTS sites. Because line files did not work well with the <b>Data</b> <b>Cell,</b> SEQWL files were implemented as a way to allow the <b>Data</b> <b>Cell</b> to be used for longer term less expensive storage of files while still preserving line numbers.|$|E
5000|$|BB is zero. Previously this {{indicated}} the bin on an IBM 2321 <b>Data</b> <b>Cell.</b>|$|E
5000|$|... #Caption: IBM 2321 <b>data</b> <b>cell</b> at the University of Michigan Computing Center, c. 1968 ...|$|E
40|$|Colour 2 D barcodes, {{such as the}} MMCC barcode, {{have been}} {{developed}} recently to improve the data capacity of monochrome barcodes. However, the use of colour imposes greater challenges in decoding the symbols correctly as different lighting conditions on the barcode vary {{the values of the}} colours significantly. Hence, it is desirable to have an adaptive classification of the <b>data</b> <b>cells</b> so as to adapt to various lighting conditions. In this paper, we propose a classification method that is able to adapt to different lighting conditions during the classification of the MMCC <b>data</b> <b>cells</b> in a mobile environment. To highlight the effectiveness of this method, it is compared against the classification of the <b>data</b> <b>cells</b> performed in two different colour space representations, namely RGB and YCbCr...|$|R
40|$|Given any {{collection}} of <b>data</b> <b>cells</b> in a <b>data</b> space X, consider {{the problem of}} finding the optimal partition of the <b>data</b> <b>cells</b> into blocks which are unions of cells. The algorithms we describe {{can be used to}} find the optimal partition of a set of <b>data</b> <b>cells</b> in any dimension. These algorithms work for any objective function that is strictly convex and additive on the blocks of a partition. We describe an O(N 2) dynamic programming algorithm for finding the optimal partition of N cells into arbitrary blocks (not necessarily connected) and we also give a branch and bound algorithm for finding the optimal partition of N cells into connected blocks. These results can be used to search for clusters in data, signal processing, classification of data, image processing, density estimation, pattern recognition and in a variety of other applications. Subject headings: signal processing, galaxy clusters, data analysis, algorithms, dynamic programming, branch and bound – 2 – 1...|$|R
5000|$|As an {{integral}} part of the sample data set, with a unique or masking value that may or may not be outside the normal range of normally occurring values and which tags individual <b>data</b> <b>cells</b> ...|$|R
5000|$|... #Caption: IBM 2321 <b>Data</b> <b>Cell</b> at the University of Michigan Computing Center in {{the late}} 1960s ...|$|E
5000|$|PT bit 3 (msbit): Network {{management}} cell. If 0, user <b>data</b> <b>cell</b> and {{the following}} apply: ...|$|E
50|$|In {{comparison}} to the contemporary IBM 2311 Disk Device, the IBM 2321 <b>Data</b> <b>Cell</b> Device held 55 times more data, while being only 7 times slower (85ms and 600ms access times respectively). One fully loaded IBM 2841 Control Unit connected with eight IBM 2321 <b>Data</b> <b>Cell</b> Devices would require an equivalent of 441 IBM 2311 Disk Devices, connected to 56 IBM 2841 Control Units.|$|E
30|$|Input data {{requirements}} {{for each of}} the various mortality forecasting methods were assessed by compiling a table of both national-level and regional-level data inputs. At the regional scale the number of input <b>data</b> <b>cells</b> per subnational region was noted.|$|R
40|$|In {{asynchronous}} {{transfer mode}} (ATM) networks, fixed length cells of 53 bytes are transmitted. A cell may be discarded during transmission due to buffer overflow or a detection of errors. Cell discarding seriously degrades transmission quality. The quality degradation can be reduced by employing efficient forward error control (FEC) to recover discarded cells. In this paper, we present the design and implementation of decoding equipment for FEC in ATM networks based on a single parity check (SPC) product code using very-large-scale integration (VLSI) technology. FEC allows the destination to reconstruct missing <b>data</b> <b>cells</b> by using redundant parity cells that the source adds to each block of <b>data</b> <b>cells.</b> The functionality of the design has been tested using the Model Sim 5. 7 cXE Simulation Package. The design has been implemented for a 5 × 5 matrix of <b>data</b> <b>cells</b> in a Virtex-E XCV 3200 E FG 1156 device. The simulation and synthesis {{results show that the}} decoding function can be completed in 81 clock cycles with an optimum clock of 56. 8 MHz. A test bench was written to study the performance of the decoder, and the results are presented...|$|R
5000|$|Both {{drums and}} <b>data</b> <b>cells</b> have {{disappeared}} as products, so DASD remains as a synonym of disk and optical devices. Modern DASD used in mainframes only very rarely consist of single disk-drives. Most commonly [...] "DASD" [...] means large disk arrays utilizing RAID schemes.|$|R
5000|$|Rarely seen was the IBM 2321 <b>Data</b> <b>Cell,</b> a {{mechanically}} complex {{device that}} contained multiple magnetic strips to hold data; strips could be randomly accessed, placed upon a cylinder-shaped drum for read/write operations; {{then returned to}} an internal storage cartridge. The IBM <b>Data</b> <b>Cell</b> picker was among several IBM trademarked [...] "speedy" [...] mass online direct-access storage peripherals (reincarnated {{in recent years as}} [...] "virtual tape" [...] and automated tape librarian peripherals). The 2321 file had a capacity of 400 MB, at the time when the 2311 disk drive only had 7.2 MB. The IBM <b>Data</b> <b>Cell</b> was proposed to fill cost/capacity/speed gap between magnetic tapes—which had high capacity with relatively low cost per stored byte—and disks, which had higher expense per byte. Some installations also found the electromechanical operation less dependable and opted for less mechanical forms of direct-access storage.|$|E
50|$|When the 2321 <b>data</b> <b>cell</b> was {{discontinued}} in January 1975, the {{addressing scheme}} and the device itself {{was referred to}} as CHR or CTR for cylinder-track-record, as the bin number was always 0.|$|E
50|$|A {{number of}} former {{extensions}} have been deprecated and {{removed from the}} stable code base over time. Some notable examples include an XQuery extension removed in MonetDB version 5; a JAQL extension, and a streaming data extension called <b>Data</b> <b>Cell.</b>|$|E
5000|$|The {{standard}} offering was a 2841 SCU with {{a number}} of 2311 DASD up to eight. [...] With less than eight units of a single type other units can be intermixed, for example a 2841 with two 2303 Drum Storages supported up to six additional 2321 <b>Data</b> <b>Cells.</b>|$|R
40|$|Computer aided tests replace {{traditional}} written {{answers on}} paper sheets with electronic records. For subjective tests, computers {{are not able}} to do all grading jobs, due to limited comprehensive ability of computers. Subjective answers need be reviewed by different graders in order to improve justice. We propose a distributed computational model for grading electronic subjective answers. Answer data are divided into numerous independent <b>data</b> <b>cells.</b> Computational resources are automatically allocated by the system to do grading jobs and independently report grading results to the system. Since the grading results may vary slightly or magnificently, we assign computational factors to <b>data</b> <b>cells</b> and computational resources to minimize the variation. In addition, rules are defined to obtain a final result. We successfully apply the proposed model in our grading system in computer aided spoken English tests. 1...|$|R
5000|$|A direct-access {{storage device}} (DASD) {{pronounced}} [...] ) is a secondary storage device in which [...] "each physical record has a discrete location and a unique address." [...] IBM developed DASDs {{for use with}} mainframe computers and some minicomputers. Disk drives, magnetic drums, <b>data</b> <b>cells</b> and optical disc drives are all classified as DASDs.|$|R
50|$|Other {{forms of}} Direct Access Storage Device (DASD), such as drum memory devices or the IBM 2321 <b>Data</b> <b>Cell,</b> might give blocks {{addresses}} {{that include a}} cylinder address, although the cylinder address doesn't select a (geometric) cylindrical slice of the device.|$|E
5000|$|... eXpresso has {{multiple}} pending patents on its underlying technology. It transforms Excel data {{and creates a}} series of related database structures (tables) for <b>data,</b> <b>cell</b> references, formulas, macros, and formats. It then performs the specified operations on data, structure and formulas before reassembling the result and presenting it back in native Excel.|$|E
50|$|The CCWs were {{initially}} were executed by {{two types of}} SCU attached to the system's high speed Selector Channels. The 2820 SCU controlled the 2301 Drum while the 2841 SCU controlled combinations of the 2302 Disk Storage, 2311 Disk Drive, 2321 <b>Data</b> <b>Cell</b> and/or 7320 Drum Storage. IBM quickly replaced the 7320 with the faster and larger 2303.|$|E
30|$|This paper {{described}} a comparative analysis among four different spatial data structures for {{speeding up the}} marching cubes algorithm through graphics processing units, together with an approach using CUDA framework. Time complexity of the algorithm depends on the volume <b>data</b> <b>cells</b> that contain an isosurface, instead {{of the total number}} of cells, avoiding the processing of empty cells.|$|R
30|$|However, {{more than}} one cell can be mapped to a same point in the span-space. To {{overcome}} this problem, each node in the quadtree also stores a pointer {{to a list of}} the volume <b>data</b> <b>cells</b> that were mapped to this point. Then, the queries can be made as usual, traversing the nodes corresponding to the active cells.|$|R
3000|$|B-carrier were {{obtained}} as the cell survival curves for “neutron beams”. When reactor neutron beams were employed for irradiation, the <b>data</b> on <b>cell</b> survival following reactor neutron beam irradiation were normalized with the <b>data</b> on <b>cell</b> survival for γ-ray irradiation only {{by dividing the}} data for neutron beams by the data for γ-ray irradiation only {{in order to obtain}} the <b>data</b> on <b>cell</b> survival for irradiation with “neutrons only” (Hopewell et al. 2012; Hall 2012). At this normalization, the dose reduction factor for γ-rays of 0.45 was taken into consideration because the γ-ray dose rate of employed neutron beams was much less than 1 Gy·min [...]...|$|R
5000|$|The 8-level code {{used on the}} {{prototype}} systems is a convolutional code, storing about 2.5 bits per <b>data</b> <b>cell.</b> By using this code in combination with a smaller mark size and a more efficient error-correction code, the capacity of CD media was tripled. When applied to dual-layer DVD, ML-recording can increase capacity {{by a factor of}} 1.9.|$|E
5000|$|MTS {{files are}} stored as 4096 byte [...] "pages" [...] {{on one or}} more public or private disk volumes. Volumes have volume labels, volume numbers, and volume names (usually MTS001, MTS002, ..., MTSnnn). Disk volumes are stored on {{traditional}} cylinder-track-record and fixed block architecture (FBA) disk drives or at one time on the IBM 2321 <b>Data</b> <b>Cell.</b>|$|E
50|$|The first {{computer}} network and packet switching network deployed for computer resource sharing was the Octopus Network at the Lawrence Livermore National Laboratory that began connecting four Control Data 6600 computers to several shared storage devices (including an IBM 2321 <b>Data</b> <b>Cell</b> in 1968 and an IBM Photostore in 1970) and {{to several hundred}} Teletype Model 33 ASR terminals for time sharing use starting in 1968.|$|E
25|$|In 2005, Toshiba and SanDisk {{developed}} a NANDflash chip capable of storing 1GB of <b>data</b> using multi-level <b>cell</b> (MLC) technology, capable of storing two bits of <b>data</b> per <b>cell.</b> In September 2005, Samsung Electronics {{announced that it}} had developed the world’s first 2GB chip.|$|R
40|$|This paper {{focuses on}} two desired {{properties}} of cell-based switches for digital data networks: (1) <b>data</b> <b>cells</b> {{should not be}} detained inside the switch any longer than necessary (the work-conserving property) and (2) <b>data</b> <b>cells</b> {{that have been in}} the switch longer (older cells) should have priority over younger cells (the order-conserving property). A well-known, but expensive design of a work- and order-conserving switch is the outputqueued switch. A different switch design is the speedup crossbar switch, in which input buffers are connected to output buffers through a crossbar that runs at a multiple (called the speedup) of the external cell rate. A matching algorithm determines which cells are forwarded through the crossbar at any given time. Previous work has proposed a matching algorithm called the lowest output occupancy first algorithm (LOOFA). It is known that a LOOFA switch with speedup at least 2 is work-conserving. We propose a refinement of LOOFA called the lowest output oc [...] ...|$|R
50|$|In 2005, Toshiba and SanDisk {{developed}} a NAND flash chip capable of storing 1 GB of <b>data</b> using multi-level <b>cell</b> (MLC) technology, capable of storing two bits of <b>data</b> per <b>cell.</b> In September 2005, Samsung Electronics {{announced that it}} had developed the world’s first 2 GB chip.|$|R
