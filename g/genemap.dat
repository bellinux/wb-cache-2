2|3|Public
40|$|OMIM_CLI [version 1. 0. 0. 0] OMIM® - Online Mendelian Inheritance in Man® Welcome to OMIM®, Online Mendelian Inheritance in Man®. OMIM is a comprehensive, {{authoritative}} {{compendium of}} human genes and genetic phenotypes that is freely available and updated daily. The full-text, referenced overviews in OMIM contain information on all known mendelian disorders and over 15, 000 genes. OMIM {{focuses on the}} relationship between phenotype and genotype. It is updated daily, and the entries contain copious links to other genetics resources. This database was initiated in the early 1960 s by Dr. Victor A. McKusick as a catalog of mendelian traits and disorders, entitled Mendelian Inheritance in Man (MIM). Twelve book editions of MIM were published between 1966 and 1998. The online version, OMIM, was created in 1985 by a collaboration between the National Library of Medicine and the William H. Welch Medical Library at Johns Hopkins. It was made generally available on the internet starting in 1987. In 1995, OMIM was developed for the World Wide Web by NCBI, the National Center for Biotechnology Information. OMIM is authored and edited at the McKusick-Nathans Institute of Genetic Medicine, Johns Hopkins University School of Medicine, under the direction of Dr. Ada Hamosh. Copyright® 1966 - 2016 Johns Hopkins University. The OMIM® database including the collective data contained therein is the property of the Johns Hopkins University, which holds the copyright thereto. The OMIM database is made available to the general public subject to certain restrictions. You may use the OMIM database and data obtained from this site for your personal use, for educational or scholarly use, or for research purposes only. The OMIM database may not be copied, distributed, transmitted, duplicated, reduced or altered in any way for commercial purposes, or for the purpose of redistribution, without a license from the Johns Hopkins University. Requests for information regarding a license for commercial use or redistribution of the OMIM database may be sent via e-mail to JHTT-Communications@jhmi. edu. (OMIM) Online Mendelian Inheritance in Man CLI query tools SMRUCC Clinic tools for Online Mendelian Inheritance in Man CLI query Copyright © xie. guigang@gcmodeller. org 2016 All of the command that available in this program has been list below: 	/debug Displays the debugging information from the OMIM API server. 	/Query. clinicalSynopsis 	/Query. entryGets OMIM data by mim entry number. 	/Query. <b>geneMap.</b> entry 	/Query. <b>geneMap.</b> loci 	/Query. <b>geneMap.</b> seqID 	/Search. clinicalSynopsis OMIM searches for clinical Synopsis by using keyword. 	/Search. entry Search for OMIM entries by a specific term input. 	/Search. <b>geneMap</b> 	/Set Setup the OMIM API tools variables. 	/Set. Key Setup the OMIM API key for query the database. 	/vars Listing all of the variables for using the /Set command. CLI API list 1. /debug Displays the debugging information from the OMIM API server. Prototype: OMIM_CLI. CLI::Int 32 Debug() Usage OMIM /debug Example OMIM /debug 2. /Query. clinicalSynopsis Prototype: OMIM_CLI. CLI::Int 32 QueryclinicalSynopsis(Microsoft. VisualBasic. CommandLine. CommandLine) Usage OMIM /Query. clinicalSynopsis /id [/includes /out] Example OMIM /Query. clinicalSynopsis /id 100100 /includes externalLinks,clinicalSynopsis /out. / 100100 -clinicalSynopsis. json Parameters information: /id The OMIM database entry id or list of these id value. 	If the id list source is a text file, then this text file format required of each line is a mim id number. This makes more easy on large amount data query. 	If this parameter is a id list, then each id value should seperated by comma character. 	If this parameter is not represented, then the program will open the standard input as data source. (CLI pipeline mode) Example /id "~/entries. txt" [/out] The output stream pointer value of your query result. 	If this parameter value is not specific, then output will be the standard output pointer(CLI Pipeline mode) 	Otherwise the output will be redirect to your specific file. Example /out "/home/xieguigang/query_result. json" [/includes] Additional content can be retrieved using the ‘include’ parameter, the includes are as follows: ParameterDescriptionclinicalSynopsisInclude the clinical synopsis with the entry. existflagsInclude the ‘exists’ flags with the entry (clinical synopsis, allelic variant, gene map & phenotype map). externalLinksInclude the external links with the entry. contributorsInclude the contributors with the entry. creationDateInclude the creation date with the entry. editHistoryInclude the edit history with the entry. datesInclude the dates with the entry. allInclude the above data with the entry. Example Accepted Types /id Decalre: System. String Example: "System. String" Decalre: System. String[] Example: ["System. String"] /out Decalre: System. String Example: "System. String" /includes Decalre: System. String[] Example: ["System. String"] 3. /Query. entry Gets OMIM data by mim entry number. Prototype: OMIM_CLI. CLI::Int 32 QueryEntry(Microsoft. VisualBasic. CommandLine. CommandLine) Usage OMIM /Query. entry /id [/includes /text /out] Example OMIM /Query. entry /id 100100, 100200 /includes referenceList,clinicalSynopsis /text all /out ~/example. json Parameters information: /id The OMIM database entry id or list of these id value. 	If the id list source is a text file, then this text file format required of each line is a mim id number. This makes more easy on large amount data query. 	If this parameter is a id list, then each id value should seperated by comma character. 	If this parameter is not represented, then the program will open the standard input as data source. (CLI pipeline mode) Example /id "~/entries. txt" [/includes] Additional content can be retrieved using the ‘include’ parameter, the includes are as follows: ParameterDescriptiontextIncludes the text field sections with the entry. existflagsInclude the ‘exists’ flags with the entry (clinical synopsis, allelic variant, gene map & phenotype map). allelicVariantListIncludes the allelic variant list with the entry. clinicalSynopsisInclude the clinical synopsis with the entry. seeAlsoIncludes the ‘see also’ field with the entry. referenceListInclude the reference list with the entry. geneMapInclude the gene map/phenotype map data with the entry. externalLinksInclude the external links with the entry. contributorsIncludes the ‘contributors’ field with the entry. creationDateIncludes the ‘creation date’ field with the entry. editHistoryIncludes the ‘edit history’ field with the entry. datesInclude the dates data with the entry. allInclude the above data with the entry. Example /includes referenceList,clinicalSynopsis [/out] The output stream pointer value of your query result. 	If this parameter value is not specific, then output will be the standard output pointer(CLI Pipeline mode) 	Otherwise the output will be redirect to your specific file. Example /out "/home/xieguigang/query_result. json" Accepted Types /id Decalre: System. String Example: "System. String" Decalre: System. String[] Example: ["System. String"] /includes Decalre: System. String[] Example: ["System. String"] /out Decalre: System. String Example: "System. String" 4. /Query. <b>geneMap.</b> entry Prototype: OMIM_CLI. CLI::Int 32 QueryGeneMaps_entry(Microsoft. VisualBasic. CommandLine. CommandLine) Usage OMIM /Query. <b>geneMap.</b> entry /id [/out] Example OMIM Parameters information: /id The OMIM database entry id or list of these id value. 	If the id list source is a text file, then this text file format required of each line is a mim id number. This makes more easy on large amount data query. 	If this parameter is a id list, then each id value should seperated by comma character. 	If this parameter is not represented, then the program will open the standard input as data source. (CLI pipeline mode) Example /id "~/entries. txt" [/out] The output stream pointer value of your query result. 	If this parameter value is not specific, then output will be the standard output pointer(CLI Pipeline mode) 	Otherwise the output will be redirect to your specific file. Example /out "/home/xieguigang/query_result. json" Accepted Types /id Decalre: System. String Example: "System. String" Decalre: System. String[] Example: ["System. String"] /out Decalre: System. String Example: "System. String" 5. /Query. <b>geneMap.</b> loci Prototype: OMIM_CLI. CLI::Int 32 QueryGeneMaps_loci(Microsoft. VisualBasic. CommandLine. CommandLine) Usage OMIM /Query. <b>geneMap.</b> loci /chr /chr. Sort [/phenotypeExists /start /limit /out] Example OMIM Parameters information: [/out] The output stream pointer value of your query result. 	If this parameter value is not specific, then output will be the standard output pointer(CLI Pipeline mode) 	Otherwise the output will be redirect to your specific file. Example /out "/home/xieguigang/query_result. json" [/phenotypeExists] Additionally the phenotypeExists flag can be used to restrict the entries returned to those with or without phenotypes, the default is to return all entries: ParameterDescriptionphenotypeExiststrue will only return entries with phenotypes, false will only return entries without phenotypes Example Accepted Types /out Decalre: System. String Example: "System. String" /phenotypeExists Decalre: System. Boolean Example: true 6. /Query. <b>geneMap.</b> seqID Prototype: OMIM_CLI. CLI::Int 32 QueryGeneMaps_seqID(Microsoft. VisualBasic. CommandLine. CommandLine) Usage OMIM /Query. <b>geneMap.</b> seqID /seqid [/phenotypeExists /start /limit /out] Example OMIM Parameters information: /id The OMIM database entry id value. If this parameter is not represented, then the program will open the standard input as data source. (CLI pipeline mode), ortherwise program will accept this parameter value as seqID value. Example /id "~/entries. txt" [/out] The output stream pointer value of your query result. 	If this parameter value is not specific, then output will be the standard output pointer(CLI Pipeline mode) 	Otherwise the output will be redirect to your specific file. Example /out "/home/xieguigang/query_result. json" [/phenotypeExists] Additionally the phenotypeExists flag can be used to restrict the entries returned to those with or without phenotypes, the default is to return all entries: ParameterDescriptionphenotypeExiststrue will only return entries with phenotypes, false will only return entries without phenotypes Example Accepted Types /id Decalre: System. String Example: "System. String" Decalre: System. String[] Example: ["System. String"] /out Decalre: System. String Example: "System. String" /phenotypeExists Decalre: System. Boolean Example: true 7. /Search. clinicalSynopsis OMIM searches for clinical Synopsis by using keyword. Prototype: OMIM_CLI. CLI::Int 32 clinicalSynopsisSearch(Microsoft. VisualBasic. CommandLine. CommandLine) Usage OMIM /Search. clinicalSynopsis /term [/filter /fields /sort /out /start 0 /limit 10] Example OMIM 8. /Search. entry Search for OMIM entries by a specific term input. Prototype: OMIM_CLI. CLI::Int 32 EntrySearch(Microsoft. VisualBasic. CommandLine. CommandLine) Usage OMIM /Search. entry /term [/filter /fields /sort /out /start 0 /limit 10 /retrieve] Example OMIM Parameters information: /term The keyword for the searches. Example Accepted Types /term Decalre: System. String Example: "System. String" 9. /Search. <b>geneMap</b> Prototype: OMIM_CLI. CLI::Int 32 geneMapSearch(Microsoft. VisualBasic. CommandLine. CommandLine) Usage OMIM /Search. <b>geneMap</b> /term [/filter /fields /sort /out /start 0 /limit 10] Example OMIM 10. /Set Setup the OMIM API tools variables. Prototype: OMIM_CLI. CLI::Int 32 SetVar(Microsoft. VisualBasic. CommandLine. CommandLine) Usage OMIM /Set Example OMIM /Set "format" "json" 11. /Set. Key Setup the OMIM API key for query the database. Prototype: OMIM_CLI. CLI::Int 32 SetKey(Microsoft. VisualBasic. CommandLine. CommandLine) Usage OMIM /Set. Key Example OMIM /Set. Key " 039583 F 9182 AE 1 F 7 C 343746 B 9 B 54 C 1 F 1 BF 1678 A 9 " Parameters information: key The api key of this OMIM query client. Example 039583 F 9182 AE 1 F 7 C 343746 B 9 B 54 C 1 F 1 BF 1678 A 9 Accepted Types key Decalre: System. String Example: "System. String" 12. /vars Listing all of the variables for using the /Set command. Prototype: OMIM_CLI. CLI::Int 32 ListSettings(Microsoft. VisualBasic. CommandLine. CommandLine) Usage OMIM /vars Example OMIM /var...|$|E
40|$|ResumenEl síndrome de Rett (SR) es un trastorno del neurodesarrollo que afecta casi exclusivamente a niñas y cursa secundariamente con autismo. Es poco frecuente y consta de 5 formas clínicas, una clásica y el resto atípicas que comprometen de manera general la habilidad manual, el lenguaje y la motricidad amplia unida a la aparición de estereotipias y epilepsia precoz. Con el objetivo de actualizar la información sobre SR, se aplicaron los descriptores de búsqueda Síndrome de Rett, genes y «Síndrome de Rett», «Rett Syndrome gene», «Rett Syndrome», «Rett Syndrome gene therapy» y «Rett Syndrome review». Se investigó en los archivos digitales PubMed, Hinari, SCIELO y Medline, y se consultaron los sitios web OMIM, ORPHANET, <b>GeneMap,</b> Genetests, Proteins y Gene, entre otros. Entre 1. 348 artículos se seleccionaron 42, los cuales reportan 3 genes causantes del síndrome: MECP 2, CDKL 5 y FOXG. El gen MECP 2 está mutado en el 80 % de los pacientes con SR clásico así como en el 40 % de los afectados con alguna de sus formas atípicas. El SR con epilepsia precoz y la variante congénita se deben fundamentalmente a variaciones en los genes CDKL 5 y FOXG 1 respectivamente. ConclusionesEl diagnóstico del SR se basa en criterios clínicos, sin embargo, los avances en la biología {{molecular}} y en la genética en particular han abierto el abanico de posibilidades diagnósticas a las diferentes formas clínicas que antes quedaban sin clasificar, a la vez que el análisis molecular permite confirmar el criterio clínico y aportar información en cuanto al pronóstico del paciente. AbstractRett syndrome (RS) is a neurodevelopmental {{disorder that}} exclusively affects girls, and occurs along with autism. It is very uncommon, and has five distinct forms, one classic {{and the others}} atypical, which generally compromise manual skills, language, and mobility, and widely associated {{with the appearance of}} stereotypy and early epilepsy. With the aim of updating the information about RS, a search was performed in the computer data bases of PubMed, Hinari, SCIELO and Medline, as well as consulting other web sites including OMIM, ORPHANET, <b>GeneMap,</b> Genetests, Proteins and Gene, using the descriptors “Síndrome de Rett”, “genes y Síndrome de Rett”, “Rett Syndrome gene”, “Rett Syndrome”, “Rett Syndrome gene therapy”, and “Rett Syndrome review”. Of the 1, 348 articles found, 42 articles were selected, which reported 3 genes causing the syndrome: MECP 2, CDKL 5 and FOXG. The MECP 2 gene is mutated in 80 % of patients with classic RS, as well as in 40 % of those affected by any of its atypical forms. RS with early epilepsy and the congenital variant are mainly due to variations in the CDKL 5 and FOXG 1 genes, respectively. ConclusionsThe diagnosis of RS is based on clinical criteria. However, the advances in molecular biology and genetics have opened a wide range of possibilities for diagnosing the different clinical forms that could not be classified before. Molecular analysis can help confirm the clinical criteria and provided information as regards the prognosis of the patient...|$|E
40|$|Abstract Genetic markers {{are being}} {{increasingly}} utilized in <b>genemapping.</b> Discovery of associations between markers and patient phenotypes [...] {{such as a}} disease status [...] enablesthe identification of potential disease gene loci. The rationale is that in diseases with a reasonable genetic contri-bution, diseased individuals {{are more likely to}} have associated marker alleles near the disease susceptibility genethan control individuals. We describe a new gene mapping method, HaplotypePattern Mining (HPM), that is based on discovering recurrent marker patterns. We define a class of useful haplotypepatterns in genetic case-control data, give an algorithm for finding disease-associated haplotypes, and show how to usethem to identify disease susceptibility loci. Experimental studies show that the method has good lo-calization power in data sets with large degrees of phenocopies and with lots of missing and erroneous data. Wealso demonstrate how the method can be used to discover several genes simultaneously. 1...|$|R
40|$|Genome-wide {{association}} {{studies have}} become a standard tool fordisease gene discovery {{over the past few}} years. These studies havesuccessfully identified genetic variants attributed to complexdiseases, such as cardiovascular disease, diabetes and cancer. Various statistical methods have been developed with the goal ofimproving power to find disease causing variants. The major focus ofthis dissertation is to develop statistical methods related to <b>genemapping</b> studies with its application in real datasets to identifygenetic markers associated with complex human diseases. In my first project, I developed a method to detect gene-geneinteractions by incorporating linkage disequilibrium (LD) information provided by external datasets such as the InternationalHapMap or the 1000 Genomes Projects. The next two projects in mydissertation are related to the analysis of secondary phenotypes incase-control genetic association studies. In these studies, a set ofcorrelated secondary phenotypes that may share common geneticfactors with disease status are often collected. However, due tounequal sampling probabilities between cases and controls, thestandard regression approach for examination of these secondaryphenotype can yield inflated type I error rates when the test SNPsare associated with the disease. To solve this issue, I propose aGaussian copula approach to jointly model the disease status and thesecondary phenotype. In my second project, I consider only onemarker in the model and perform a test to access whether the markeris associated with the secondary phenotype in the Gaussian copulaframework. In my third project, I extend the copula-based approachto include a large number of candidate SNPs in the model. I proposea variable selection approach to select markers which are associatedwith the secondary phenotype by applying a lasso penalty to thelog-likelihood function...|$|R
40|$|International audienceABSTRACT: BACKGROUND: The Nile tilapia (Oreochromis niloticus) is {{the second}} most farmed fish species worldwide. Itis also an {{important}} model for studies of fish physiology, particularly because of its broadtolerance to an array of environments. It is a good model to study evolutionary mechanismsin vertebrates, because of its close relationship to haplochromine cichlids, which haveundergone rapid speciation in East Africa. The existing genomic resources for Nile tilapiainclude a genetic map, BAC end sequences and ESTs, but comparative genome analysis andmaps of quantitative trait loci (QTL) are still limited. RESULTS: We have constructed a high-resolution radiation hybrid (RH) panel for the Nile tilapia andgenotyped 1358 markers consisting of 850 genes, 82 markers corresponding to BAC endsequences, 154 microsatellites and 272 single nucleotide polymorphisms (SNPs). From these, 1296 markers could be associated in 81 RH groups, while 62 were not linked. The total sizeof the RH map is 34, 084 cR 3500 and 937, 310 kb. It covers 88 % of the entire genome with anestimated inter-marker distance of 742 Kb. Mapping of microsatellites enabled integration tothe genetic map. We have merged LG 8 and LG 24 into a single linkage group, and confirmedthat LG 16 -LG 21 are also merged. The orientation and association of RH groups to eachchromosome and LG was confirmed by chromosomal in situ hybridizations (FISH) of 55 BACs. Fifty RH groups were localized on the 22 chromosomes while 31 remained smallorphan groups. Synteny relationships were determined between Nile tilapia, stickleback,medaka and pufferfish. CONCLUSION: The RH map and associated FISH map provide a valuable gene-ordered resource for <b>genemapping</b> and QTL studies. All genetic linkage groups with their corresponding RH groupsnow have a corresponding chromosome which can be identified in the karyotype. Placementof conserved segments indicated that multiple inter-chromosomal rearrangements haveoccurred between Nile tilapia and the other model fishes. These maps represent a valuableresource for organizing the forthcoming genome sequence of Nile tilapia, and provide afoundation for evolutionary studies of East African cichlid fishes...|$|R

