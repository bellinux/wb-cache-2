74|169|Public
50|$|The Plessey TXK1 or 5005 design used an {{intermediate}} form, {{in which a}} clear path was marked through the switching fabric by <b>distributed</b> <b>logic,</b> and then closed through all at once.|$|E
5000|$|We {{wanted to}} present here the basic ideas of a <b>distributed</b> <b>logic</b> system with... the {{macroscopic}} concept of logical design, away from scanning, from searching, from addressing, and from counting, is equally important. We must, at all cost, free {{ourselves from the}} burdens of detailed local problems which only befit a machine low on the evolutionary scale of machines. Chung-Yeol (C. Y.) Lee ...|$|E
50|$|In principle, CBTC {{systems may}} be {{designed}} with centralized supervision systems {{in order to}} improve maintainability and reduce installation costs. If so, there is an increased risk of a single point of failure that could disrupt service over an entire system or line. Fixed block systems usually work with <b>distributed</b> <b>logic</b> that are normally more resistant to such outages. Therefore, a careful analysis of the benefits and risks of a given CBTC architecture (centralized vs. distributed) must be done during system design.|$|E
40|$|IEEE Comp Soc, Web Intelligence Consortium, Assoc Comp Machinery, Beijing Univ Technol, Natl Nat Sci Fdn China, Microsoft Res Asia, China Comp Federat, Hong Kong Baptist Univ, Maebashi Inst Technol, Tsinghua UnivDescription Logic is now {{an active}} {{research}} area, which is applied universally to knowledge representation, Semantic Web and Ontology language. Compared with Description <b>Logic,</b> <b>Distributed</b> Description <b>Logic</b> {{can be used to}} better establish dis...|$|R
40|$|LGR (Logic Gates as Repeater) {{technique}} is presented, providing a methodology for delay optimization of CMOS logic circuits with RC interconnects. The traditional interconnect segmentation by insertion of repeaters is generalized to segmentation by <b>distributing</b> <b>logic</b> gates over interconnect lines and adding a reduced number of repeaters. Expressions for optimal segment length, optimal number of additional repeaters and scaling factors for both gates and repeaters are derived. An iterative solution is presented. Optimization results for several circuits are presented, showing {{significant improvement in}} performance in comparison with traditional repeater insertion. I...|$|R
40|$|Abstract- LGR (Logic Gates as Repeaters) – a {{methodology}} for delay optimization of CMOS logic circuits with RC interconnects is described. The traditional interconnect segmentation by insertion of repeaters is generalized to segmentation by <b>distributing</b> <b>logic</b> gates over interconnect lines, {{reducing the number}} of additional, logically useless inverters. Expressions for optimal segment lengths and gate scaling are derived. Considerations are presented for integrating LGR into a VLSI design flow in conjunction with related methods. Several logic circuits have been implemented, optimized and verified by LGR. Analytical and simulation results were obtained, showing significant improvement in performance in comparison with traditional repeater insertion, while maintaining low complexity and small area. I...|$|R
50|$|Arista had {{an imprint}} label in the 1970s called Arista Novus, {{which focused on}} {{contemporary}} jazz artists. It distributed two other jazz labels, Arista Freedom, which specialized in avant-garde jazz and, until 1982, GRP Records, which specialized in contemporary jazz and {{what came to be}} known as smooth jazz. A country music division, Career Records, was merged into the Arista Nashville division in 1997. Arista Austin was used in the late 1990s as a country label. Additionally, Arista was the North American distributor of Jive Records from 1981 until 1987. During the 1990s, Arista also <b>distributed</b> <b>Logic,</b> Rowdy and Heavenly Recordings.|$|E
40|$|In this paper, {{we propose}} an {{approach}} to the programmability of intelligent agent avatars, supported by the <b>distributed</b> <b>logic</b> programming language DLP. Intelligent agent avatars {{can be considered as}} one of the applications of web agents. As one of the testbeds of 3 D web agents, we are developing and implementing soccer playing avatars. We discuss how the language DLP can be used to support soccer playing avatars using rules to guide their behaviors in networked virtual environments. Categories and Subject Descriptors I. 2 [Computing Methodologies]: Artificial Intelligence; H. 4. m [Information Systems]: Miscellaneous General Terms Intelligent Agent Keywords avatar, intelligent agent, <b>distributed</b> <b>logic</b> programming, networked virtual environment 1...|$|E
40|$|COMPILED CODE IN <b>DISTRIBUTED</b> <b>LOGIC</b> SIMULATION A logic {{simulation}} approach {{known as}} compiled-code eventdriven simulation {{was developed in}} the past for sequential logic simulation. It improves simulation performance by reducing the logic evaluation and propagation time. In this paper we describe the application of this approach to <b>distributed</b> <b>logic</b> simulation. Our experimental results show that using compiled code can greatly improve the stability and overall performance of a Time-Warp based logic simulator. We also present a technique called fanout aggregation that makes use of information on circuit partitions and considerably improves the run-time performance of our (distributed) compiled code simulator. It does not produce a similar improvement when used in conjunction with an interpreted simulator because of run-time overhead. ...|$|E
40|$|Abstract. Recently a <b>Distributed</b> Temporal Protocol <b>Logic</b> {{has been}} devised to capture {{reasoning}} in the distributed environment of security protocols. Elsewhere we have constructed a proof-based verification framework using <b>distributed</b> temporal protocol <b>logic</b> {{to verify the}} authentication property of security protocols. In this paper, we apply our verification framework to a well-known protocol. In particular, we analyze the authentication property of the public-key extension of Kerberos- 5 protocol. We demonstrate how {{we are able to}} identify a subtle design flaw in the protocol. This results into showing the applicability of our framework as well as demonstrating the ease with which <b>distributed</b> temporal protocol <b>logic</b> can be used to analyze authentication protocols...|$|R
40|$|We take {{a general}} {{perspective}} on alignment {{in order to}} develop common theoretical foundations for the subject. The deliverable comprises a comparative study of different mapping languages by means of <b>distributed</b> first-order <b>logic,</b> and a study on category-theoretical modelling of alignment and merging by means of pushout-combinations...|$|R
40|$|The paper {{suggests}} that fuzzy logic controllers present a computationally efficient and robust alternative to conventional controllers. The paper presents two possible structures for the <b>distributed</b> fuzzy <b>logic</b> controller of a single-link flexible manipulator. A linear quadratic regulator method {{is used to}} prove the effectiveness of fuzzy logic controllers...|$|R
40|$|Distributed Peer-to-Peer and Grid {{infrastructure}} require distributed {{access control}} mechanisms. These mechanisms {{can be implemented}} in distributed trust management infrastructures and usually require reasoning {{on more than one}} peer, as soon as authority is delegated or requests involve several authorities. Building on previous work of the authors which formalized such a distributed trust management infrastructure based on <b>distributed</b> <b>logic</b> programs, we describe in this paper how reasoning can be implemented as <b>distributed</b> <b>logic</b> evaluation and how loops during this evaluation can be handled with. Our solution is based on a loop tolerant distributed tabling algorithm which includes in the process protection of sensitive policies and generation of proofs without increasing the complexity of the system...|$|E
40|$|In {{the last}} years we have {{developed}} a platform for the realization of embodied (conversational) agents, in a <b>distributed</b> <b>logic</b> programming framework. In this paper we will present an overview of our work, by discussing the requirements that acted as our guidelines for design decisions during development, some of the applications that have served as target demonstrators for developing and testing new functionality, and the (<b>distributed</b> <b>logic</b> programming) technology which we used for {{the realization of the}} platform and the implementation of our STEP scripting language. Although the focus of our paper will primarily be our own DLP+X 3 D platform, we believe that our discussion along the perspectives of requirements, applications and technology might be more generally worthwhile in establishing th...|$|E
40|$|This paper {{presents}} a flexible and portable testbed that enables an unbiased comparison of different methods for <b>distributed</b> <b>logic</b> simulation. The {{great variety of}} algorithms for parallel discrete event simulation that have been proposed up to now is subdivided into {{a small number of}} fundamentally different approaches. Criteria for the classification are the distribution of functions and data structures and the way processes are synchronized. Based on this classification, a representative set of parallelizations has been selected and applied to a gate level logic simulator. Run-time measurements will be presented for the iPSC/ 2 and iPSC/ 860 distributed memory multiprocessors. KEYWORDS. <b>distributed</b> <b>logic</b> simulation, distributed memory multiprocessors. Introduction In recent years, simulation has become an indispensable tool in VLSI design. As system complexity increases, simulation is used not only for validation purposes but also helps to design system hardware and software in par [...] ...|$|E
40|$|Abstract—This paper studies runtime {{verification}} of distributed asynchronous systems and presents a moni-tor generation procedure for this purpose, which allows three-valued monitoring. The properties {{used in the}} monitors are specified in a logic that was newly created for this purpose and is called <b>Distributed</b> Temporal <b>Logic</b> (DTL). DTL combines the three-valued Linear Temporal Logic (LTL 3) with the past-time <b>Distributed</b> Temporal <b>Logic</b> (ptDTL), which allows to mark subfor-mulas for remote evaluation. The monitor generation {{presented in this paper}} is based on an adopted version of the LTL 3 monitor generation, which integrates the ptDTL monitor construction. The aim of this new pro-cedure is {{to increase the amount of}} monitorable prop-erties compared to the properties monitorable with ptDTL. Runtime verification using this new monitoring has been implemented on LEGO Mindstorms NXT robots communicating via Bluetooth. I...|$|R
40|$|Abstract. This paper {{proposed}} a new control system design scheme for three-phase inverter parallel. The scheme combined the <b>distribute</b> <b>logic</b> control method and the droop control method, {{which has been}} got from the talk about the traditional three-phase inverter parallel methods. The control system is based on TMS 320 F 2812 DSP, and the interface implementation method is presented. As the data exchange method between the inverters, the communication protocol for this system based on CANopen protocol has been given and the parameters for communication map and object dictionary is also given. The method proposed in this paper {{has been used in}} the lab, and the successful use has proved that this method can meet the requirements for the processing speed, communication speed, and flexibility of three-phase inverter parallel control system...|$|R
40|$|We {{introduce}} {{a version of}} <b>distributed</b> temporal <b>logic</b> that provides a new basis to rigorously investigate general metalevel properties of di#erent protocol models, by establishing modeling and analysis simplification techniques that {{may contribute to the}} sound design of protocol validation tools. As a first but significant example, we give a rigorous account of three such techniques...|$|R
40|$|Graduation date: 1969 An {{instruction}} set and programming examples are described for a <b>Distributed</b> <b>Logic</b> Memory computer organization. The computer {{is designed to}} take advantage of the economies of very large-scale circuit integration. In addition, the computer can grow in an orderly way. As it grows there is increased parallelism possible so that the amount of spare real time in a control application is not greatly reduced. Finally, such an organization should permit stored program control in relatively small applications where up to now control by a conventionally organized computer has been prohibitively expensive. The computer consists of a linear array of identical, small, sequential machines, or cells. The structure is similar to that of the <b>Distributed</b> <b>Logic</b> Memory originally proposed by C. Y. Lee. It was demonstrated by J. N. Sturman that the addition of sequential logic to each cell permits the memory to become a self-contained computing system. It is the purpose of this thesis to produce an application-oriented process control computer design based on the concepts of Lee and Sturman. It was found necessary to increase the length of the memory word in each cell. The ability to store instructions and data in cells is retained. Increasing the memory word length of each cell permits an expanded instruction repertoire. The low-ordered three bits of every memory word are arranged to identify a cell as one of eight possible types. A program instruction includes modifier bits which specify the types of cells on which the instruction is to operate. This facility enhances the efficiency of programs. The logic design of the cell is complete enough to permit estimating gate count per cell. An analysis of the sensitivity of gate count to changes in the {{instruction set}} is included. A program simulation of the <b>Distributed</b> <b>Logic</b> Memory computer assisted in its development and later permitted verification of programs written for the computer. The existence of a compiler permitted such programs to be written in a convenient, symbolic form. A data multiplexer is developed as a practical application for the <b>Distributed</b> <b>Logic</b> Memory computer structure. The necessary data multiplexer program, which consists of about 100 instructions, is shown...|$|E
40|$|We introduce, in this paper, Clustered Time Warp (CTW), an {{algorithm}} for {{the parallel}} simulation of discrete event models on a general purpose distributed memory architecture. CTW {{has its roots}} in the problem of <b>distributed</b> <b>logic</b> simulation. It is a hybrid algorithm which makes use of Time Warp between clusters of LPs and a sequential algorithm within the clusters whereas Time Warp is traditionally implemented between individual LPs...|$|E
40|$|THE SYSTEM LEVEL DESIGN OF THREE HIGH PERFORMANCE PARALLEL ASIC-LIKE SYSTEMS USING CELLULAR LOGIC IS PRESENTED. THE NECESSARY THEORETICAL CONCEPTS DEVELOPEDTO ACCOMPLISH THE DESIGN AND THE GENERALIZATIONS AND CONCLUSIONS DRAWN FROM BOTH THE DESIGN APPROACH ITSELF, AS WELL AS FROM THE FINAL SYSTEMS STRUCTURAL AND BEHAVIOURAL CHARACTERISTICS, ARE SYSTEMATISED IN SUCH AWAY AS TO FORM THE BASIS OF A MODEL BASED INTEGRATED DESIGN FRAMEWORK FOR <b>DISTRIBUTED</b> <b>LOGIC</b> VLSI SYSTEMS. ...|$|E
40|$|Abstract—In {{multi-core}} designs, <b>distributed</b> embedded <b>logic</b> an-alyzers {{with multiple}} trigger units and trace buffers with real-time offload capability through high-speed trace ports {{can be placed}} on-chip. This brings new challenges on how to connect the debug units together in such way that the limited storage space in the trace buffers can be used efficiently. This problem is further ag-gravated when shadow registers are used to capture data for some signals in the design. In this paper, we propose a new architecture that can dynamically allocate the trace buffers at runtime based on the needs for debug data acquisition coming from multiple data sources and user-programmable priorities. Experimental results show that using the proposed architecture, real-time observability can be improved using {{only a small amount}} of on-chip logic hard-ware, while avoiding excessive storage on-chip. Index Terms—Design-for-debug, <b>distributed</b> embedded <b>logic</b> analysis, post-silicon validation, real-time observability. I...|$|R
40|$|This paper {{describes}} a <b>distributed,</b> adaptive, first-order <b>logic</b> engine with exceptional performance characteris-tics. The system combines serial search reduction tech-niques such as bounded-overhead subgoal caching and intelligent backtracking {{with a novel}} parallelization strategy particularly well-suited to coarse-grained paral-lel execution on a network of workstations. We present empirical results that demonstrate our system’s perfor-mance using 100 workstations on over 1400 first-order logic problems drawn from the “Thousands of Prob-lems for Theorem Provers ” collection. utroduction We have developed an <b>distributed,</b> adaptive, first-order <b>logic</b> engine as {{the core of a}} planning system intended to solv...|$|R
40|$|Abstract. In {{an earlier}} paper, we {{presented}} a logical framework for representing and reasoning with modular ontologies {{with a special}} focus on supporting localized reasoning and integrity {{in the face of}} changes. This framework while being based on a formal semantics, was not specific to a particular logic used to specify ontologies and links between modules. As a result, no system was provided that implemented the ideas presented in that paper. In this work, we close this gap by explaining, how the general framework for modular ontologies can be mapped onto <b>distributed</b> description <b>logics</b> and implemented using the DRAGO reasoning system. In particular, we refine the notion of modular ontologies to the case where local ontologies are represented in SHIQ. We define a sound and complete inference rule for modular ontologies based <b>distributed</b> decsription <b>logic</b> and analyze the worst case complexity of reasoning in the framework. We also briefly discuss the DRAGO system and describe how our framework can be mapped on the representations supported by DRAGO. ...|$|R
40|$|We {{present a}} model for <b>distributed</b> <b>logic</b> {{programming}} based on ANDparallelism and on explicit message-passing primitives. The communication mechanism is inspired by Milner's CCS [31]. First, a simple calculus of communicating sequential logic processes is defined to formally introduce this notion of communication in a logic programming setting. Then, {{the definition of the}} language is completed by extending the calculus with an alternative command, as well as with mechanisms for the dynamic creation of AND-parallel processes. The resulting language is a variant of <b>Distributed</b> <b>Logic</b> defined by Monteiro [33]. The second part of the paper focuses on the study of the semantics of the language. We define a model-theoretic semantics by providing the various goal composition operators and the communication primitives with a clear logical meaning. On the other hand, an operational semantics is given in terms of the distributed model of Petri nets. The latter characterization is shown to provide several insights on the programming language, such as the ability of capturing fairness and liveness properties. The study of the semantics terminates with the proof of the equivalence (soundness and completeness) between the model-theoretic and the operational semantics...|$|E
40|$|Abstract. A {{reconfigurable}} architecture using <b>distributed</b> <b>logic</b> {{block processing}} elements (PEs) is presented. This distributed processor uses a lowcost interconnection network and local indirect VLIW memories to provide efficient algorithm implementations for portable battery operated products. In {{order to provide}} optimal algorithm performance, the VLIWs loaded to each PE configure that PE for processing. By reloading the local VLIW memories, each PE is reconfigured for a new algorithm. Different levels of flexibility are feasible by varying {{the complexity of the}} distributed PEs in this architecture. ...|$|E
40|$|Zhisheng Huang Anton Eliens Cees Visser Vrije University of Amsterdam, De Boelelaan 1081, Amsterdam In this paper, {{we propose}} an {{approach}} to the programmability of intelligent agent avatars, supported by the <b>Distributed</b> <b>Logic</b> Programming language DLP. The intelligent agent avatars {{can be considered as}} one of the applications of web agents. As one of the testbeds of the 3 D web agents, we are developing and implementing soccer playing avatars. In this paper, we discuss how DLP can be used to support soccer playing avatars using rules to guide their behaviors in networked virtual environments...|$|E
40|$|In {{the context}} of multi-agent {{hypothetical}} reasoning, agents typically have partial knowledge about their environments, and the union of such knowledge is still incomplete to represent the whole world. Thus, given a global query they need to collaborate {{with each other to}} make correct inferences and hypothesis, whilst maintaining global constraints. There are many real world applications in which the confidentiality of agent knowledge is of primary concern, and hence the agents may not share or communicate all their information during the collaboration. This extra constraint gives a new challenge to multi-agent reasoning. This paper shows how this dichotomy between ”open communication ” in collaborative reasoning and protection of confidentiality can be accommodated, by extending a general-purpose <b>distributed</b> abductive <b>logic</b> programming system for multi-agent hypothetical reasoning with confidentiality. Specifically, the system computes consistent conditional answers for a query over a set of <b>distributed</b> normal <b>logic</b> programs with possibly unbound domains and arithmetic constraints, preserving the private information within the logic programs...|$|R
40|$|This study puts {{forward the}} “Cluster” concept about service {{function}} points. For {{the uniform of}} timely information’s capturing, logical optimization and requirement implementation, service topology’s relationship is adaptively formed. Tracking architecture goal and building <b>distributed</b> clustering <b>logic</b> timely, “Cluster head” and “Cluster node” are serialized and optimal architecture-centric “Cluster group” is formed, it is to achieve the balance service adjustment of service topology network driven by goal...|$|R
40|$|The paper {{presents}} learning {{mechanisms for}} MAS based on <b>Distributed</b> Default <b>Logic</b> (DDL), the formalism for multi-agent knowledge representation and reasoning. In the distributed environment learning processes provide measures to order default rules, {{which gives the}} agent better use of its local and external knowledge. Such mechanisms allow the system to work effectively in a changing environment, where basic facts and sources of information are uncertain...|$|R
40|$|The {{following}} {{article describes}} and discusses {{the suitability of}} the particle swarm optimization (PSO) for the employment with blind adaptation of the directional characteristic of array antennas. By means of extensive simulations {{it was confirmed that}} the suggested PSO is able to follow dynamic changes in the environment. Based on these results a concept is discussed for a high-parallel optimizing procedure as <b>distributed</b> <b>logic</b> in Application-Specific Integrated Circuits (ASICs) or Field Programmable Gate Arrays (FPGAs). Thus an online procedure is available for time-critical applications of the adaptive beam forming...|$|E
40|$|Abstract. The paper {{discusses}} how <b>distributed</b> <b>logic</b> programming {{can be used}} {{to define}} and control the hand gestures of embodied agents in virtual worlds, by using the STEP language as an interface between the constructs of logic programming and the humanoid model defined in VRML. By using this framework, different gesture dictionaries can be defined and variants of a hand gesture, according to dynamically changing factors, can be generated on the fly. The approach is tested on the demanding demonstrator of conducting, providing experience, also on time performance of the animation. ...|$|E
40|$|In {{this paper}} we propose an XML-based markup language, called XSTEP, for {{embodied}} agents, based on the scripting language STEP. Thus, XSTEP is the XML-based successor of STEP. STEP is developed on the formal semantics of dynamic logic, and has been implemented in the <b>distributed</b> <b>logic</b> programming language DLP, a tool {{for the implementation of}} 3 D web agents. In this paper, we discuss the issues of markup language design for embodied agents and several aspects of the implementation and application of XSTEP. Keywords: embodied agents, avatars, humanoids, H-anim, STEP, XSTEP, XML...|$|E
40|$|The <b>Distributed</b> Temporal <b>Logic</b> DTL {{allows one}} to reason about {{temporal}} properties of a distributed system from the local {{point of view of}} the system's agents, which are assumed to execute independently and to interact by means of event sharing. In this paper, we introduce the Quantum Branching <b>Distributed</b> Temporal <b>Logic</b> QBDTL, a variant of DTL able to represent quantum state transformations in an abstract, qualitative way. In QBDTL, each agent represents a distinct quantum bit (the unit of quantum information theory), which evolves by means of quantum transformations and possibly interacts with other agents, and n-ary quantum operators act as communication/synchronization points between agents. We endow QBDTL with a DTL-style semantics, which fits the intrinsically distributed nature of quantum computing, we formalize a labeled deduction system for QBDTL, and we prove the soundness and completeness of this deduction system with respect to the given semantics. We give a number of examples and, finally, we discuss possible extensions of our logic in order to reason about entangle-ment phenomena...|$|R
40|$|Modular {{ontology}} languages, such as <b>Distributed</b> Description <b>Logics</b> (DDL), E-connections and Package-based Description Logics (P-DL) offer {{two broad}} classes of approaches to connect multiple ontology modules: {{the use of}} mappings or linkings between ontology modules e. g., DDL and E-connections; {{and the use of}} importing e. g., P-DL. The major difference between the two approaches is on the usage of 2 ̆ 2 foreign terms 2 ̆ 2 at the syntactic level, and on the local model disjointness at the semantic level. We compare the semantics of linking in DDL and E-connections, and importing in P-DL within the <b>Distributed</b> First Order <b>Logics</b> (DFOL) framework. Our investigation shows that the domain disjointness assumption adopted by the linking approach leads to several semantic di�culties. We explore the possibility of avoiding some of these difficulties using the importing approach to linking ontology modules...|$|R
40|$|In this paper, {{we compare}} various formalisms {{that have been}} {{recently}} introduced or used for distributed reasoning, ontology integration, and related topics; in particular, we focus on E-connections, <b>Distributed</b> Description <b>Logics,</b> and Package-based Description Logics. We then establish {{the relationship between these}} formalisms and various nonstandard reasoning services that have been recently proposed for assisting the modeler in ontology integration and knowledge reuse tasks, such as locality of an ontology and conservative extensions. ...|$|R
