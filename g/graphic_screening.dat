0|282|Public
5000|$|... #Caption: Fig. 3 4-Color BSAVED <b>Graphics</b> <b>Screen</b> {{displayed}} in Monochrome ...|$|R
5000|$|... #Caption: Fig. 5 Typical IBM 256-Color MCGA BSAVED <b>Graphics</b> <b>Screen</b> ...|$|R
5000|$|... #Caption: Fig. 4 Monochrome BSAVED <b>Graphics</b> <b>Screen</b> {{displayed}} in 4-Color CGA Mode ...|$|R
2500|$|Prototypes of an {{improved}} Engelbart mouse with an optical encoder were built at LAMI-EPFL in 1972 (...) , {{but there was}} no need for a mouse when <b>graphic</b> <b>screens</b> were not available. The LAMI-EPFL developed several microprocessor driven <b>graphic</b> <b>screens</b> since 1974 and André Guignard designed in 1977 a reliable mechanism for measuring the ball movement with optical encoders. This was the first modern computer mouse using an optical encoder.|$|R
50|$|The Virtual Diving bell {{incorporates}} {{images of}} underwater scenes displayed on three two metre diameter semi-spherical CG <b>graphics</b> <b>screens.</b>|$|R
50|$|The Nokia 1202 has a {{monochrome}} <b>graphic</b> <b>screen</b> that is 1.3 in {{tall and}} has 96 × 68 pixels.|$|R
5000|$|... #Caption: Fig. 6 Typical Commodore 128 BSAVED <b>Graphics</b> <b>Screen</b> in HIRES (320 x 200 x 2 color cell) format ...|$|R
5000|$|... #Caption: Fig. 7 Typical Commodore 128 BSAVED <b>Graphics</b> <b>Screen</b> in Multi-Color (160 x 200 x 4 color cell) format ...|$|R
5000|$|Functions PDL (...) to {{read the}} analog controllers, and SCRN (...) {{to read the}} low-resolution <b>graphics</b> <b>screen</b> (both {{accessing}} system ROM routines) ...|$|R
5000|$|... 3277 GA: a 3277 with an RS232C I/O, {{often used}} to drive a Tektronix 4013 or 4015 <b>graphic</b> <b>screen</b> (monochrome) ...|$|R
50|$|Prototypes of an {{improved}} Engelbart mouse with an optical encoder were built at LAMI-EPFL in 1972 (see EPFL mouse story), {{but there was}} no need for a mouse when <b>graphic</b> <b>screens</b> were not available. The LAMI-EPFL developed several microprocessor driven <b>graphic</b> <b>screens</b> since 1974 and André Guignard designed in 1977 a reliable mechanism for measuring the ball movement with optical encoders. This was the first modern computer mouse using an optical encoder.|$|R
5000|$|As {{the cursor}} moves over a point, a label, or {{variable}} value will {{appear at the}} top of the <b>graphic</b> <b>screen.</b>|$|R
50|$|In 1987, Casio {{launched}} the Casio PB-1000 pocket {{computer with a}} touchscreen consisting of a 4x4 matrix, resulting in 16 touch areas in its small LCD <b>graphic</b> <b>screen.</b>|$|R
5000|$|The Apple II had two [...] "high-resolution" [...] <b>graphics</b> <b>screen</b> pages: [...] "page 1" [...] (occupying the 8 kB {{of memory}} {{beginning}} at 0x2000) and [...] "page 2" [...] (immediately following at 0x4000). It also had two commonly used [...] "high-resolution" [...] graphics modes: [...] "graphics only" [...] ("pure" [...] graphics mode) and [...] "mixed text and graphics" [...] (only offering a partial display of a graphics image {{with the bottom}} 4 lines of the respective text [...] "page 1" [...] or [...] "page 2" [...] at the bottom, leaving only the first 160 lines of the <b>graphics</b> <b>screen</b> visible).|$|R
50|$|A RIPscrip aware {{terminal}} watches for lines {{beginning with}} a special RIPscrip escape character and interprets the following instructions, passing along non-escaped lines to the text output screen. RIPscrip used separate text and graphics displays, one each, and although it could draw text into the <b>graphics</b> <b>screen,</b> the speed of doing so was such {{that it was not}} useful for general text output or editing. Generally, a system using RIPscrip would use the <b>graphics</b> <b>screen</b> for presenting menus, with conventional editing and input taking place in the text screen. RIPscrip would not normally be used to build a conventional GUI with multiple windows or mouse-driven text editing, for instance.|$|R
5000|$|... #Caption: A DCS {{control room}} where plant {{information}} and controls are displayed on computer <b>graphics</b> <b>screens.</b> The operators are seated and can view and control {{any part of}} the process from their screens, whilst retaining a plant overview.|$|R
25|$|In December 1987, Compute!'s Gazette {{published}} Instant 80, {{a utility}} for the C64 version of SpeedScript that allowed 80-column document previewing (though not editing) {{on a standard}} C64. This was done by using half-width characters on a high-resolution <b>graphics</b> <b>screen.</b>|$|R
50|$|From {{the late}} 1950s and early '60s, {{mainframe}} digital computers were becoming commonplace within large organisations and universities, and increasingly {{these would be}} equipped with graphic plotting and <b>graphics</b> <b>screen</b> devices. Consequently, a new field of experimentation began to open up.|$|R
50|$|In December 1987, Compute!'s Gazette {{published}} Instant 80, {{a utility}} for the C64 version of SpeedScript that allowed 80-column document previewing (though not editing) {{on a standard}} C64. This was done by using half-width characters on a high-resolution <b>graphics</b> <b>screen.</b>|$|R
5000|$|Various prefixes and suffices (such as [...] "PIC", [...] "HPIC", or [...] "HGR") {{were used}} to {{indicate}} that the file was a <b>graphics</b> <b>screen</b> save. ProDOS had a special [...] "fotofile" [...] filetype (inherited from Apple SOS) of identical format. Unfortunately awareness of it was low, and few programs supported it.|$|R
50|$|The UMCS {{utilizes}} {{a set of}} core <b>graphic</b> <b>screens</b> with {{a variety}} of control pop-ups, trending screens, diagnostics, and alarm handling. Screens can be quickly configured to project-specific requirements using any off-the-shelf human-machine interface (HMI) software. Custom programming is minimized and is replaced by HMI screen configuration, making the UMCS extensible and easier to maintain.|$|R
50|$|The {{following}} Commodore BASIC 7 program loads a BSAVED HIRES Monochrome <b>Graphics</b> <b>Screen</b> on the C128 then sets each of {{the colors}} for the 1000 pixel blocks to black and white, waits for a keypress and ends. No colors are stored in the image. The load address in the image is {{at the start of}} display memory at $2000.|$|R
40|$|A {{software}} package for process and total site integration, as well as, utilities design (grass roots and retrofit) is presented. The system, operating under MS Windows (R), effectively integrates all functions of process integration, co-current simulation, and total site integration {{in a common}} environment, fully supported by interactive <b>graphics</b> <b>screens.</b> The functions of the system are demonstrated through large scale benchmark problems...|$|R
40|$|An {{information}} display system is described which uses eye-tracking to monitor user looking about its <b>graphics</b> <b>screen.</b> The system analyzes the user’s patterns of eye movements and fixations in real-time to make inferences about what item or collection of items shown holds most relative {{interest for the}} user. Material thus identified is zoomed-in for a closer look, and {{described in more detail}} via synthesized speech...|$|R
50|$|Vericut is {{standalone}} software but also integrates with CAD, CAM, and PLM systems including TopSolid, CATIA, Siemens NX, PowerMILL, EdgeCAM, Mastercam and Hypermill. It uses a three-axis through five-axis simulation motion to simulate milling and drilling operations. The simulation is {{displayed on a}} <b>graphics</b> <b>screen</b> as a solid 3D model of the raw stock, simulating the programmed cutting motions and then displaying the finished part.|$|R
50|$|The herbar {{specimens}} get scanned to RAW {{data with}} a scanner camera {{attached to a}} standard personal computer and stored on a server using SilverFast Ai software. Image opimization (color, contrast, and brightness) is done on a second computer with SilverFast HDR software. The post processed RAW files get converted in a suitable image format, controlled at a profiled <b>graphic</b> <b>screen</b> and stored back on the server.|$|R
40|$|A {{computer}} program {{was developed for}} data acquisition in capillary isotachophoresis. The program consists of two modules, one for data acquisition {{and the other for}} data analysis. The data analysis module calculates zone lengths and step heights automatically. This can also be done by the operator on a <b>graphics</b> <b>screen.</b> The program was tested on the analysis of both a thirteen-component standard mixture and a more complex sample...|$|R
50|$|The {{following}} Commodore BASIC 7 program loads a BSAVED HIRES Colored <b>Graphics</b> <b>Screen</b> in DOODLE uncompressed format on the C128, {{waits for}} a keypress and ends. The load address in the image is {{at the start of}} C128 videoram at $1C00 directly before screen memory at $2000. No color setting is required since the colors are stored in the image and are loaded directly into the C128's HIRES color memory (videoram).|$|R
5000|$|The BLOAD command did {{not exist}} on the C64. Instead a BASIC program could use a [...] "non-relocating" [...] LOAD command to load BSAVED Graphics if it was {{designed}} to restart after the load, as demonstrated in the following Commodore BASIC 2 program. It loads a colored BSAVED HIRES <b>Graphics</b> <b>Screen</b> on the C64 from 2 separate BSaved Files (a split image), waits for a keypress and ends.|$|R
50|$|Display: 8 lines, 40 {{characters}} LCD with 240 by 64 pixel addressable <b>graphics.</b> The <b>screen</b> is reflective, not backlit.|$|R
5000|$|The channel {{opted for}} a clean look and {{pleasant}} feel by avoiding unnecessary animation in its <b>graphics</b> on <b>screen.</b>|$|R
5000|$|... #Caption: The PET {{conversion}} changed most of {{the terminology}} back to Star Wars, and added this character <b>graphics</b> splash <b>screen.</b>|$|R
40|$|This thesis aims at {{development}} of a universal <b>graphic</b> <b>screen</b> editor for LCD devices made by Honeywell. The editor is one module of a complex application, which serves automated testing of thermostats and similar devices. In the editor a display layout can be designed, {{as well as the}} individual screens. The output is stored to an XML file. The application is written in C# and must be executable in the Microsoft. NET Framework...|$|R
50|$|The {{following}} Commodore BASIC 7 program loads a BSAVED Multi-Colored 4 Color <b>Graphics</b> <b>Screen</b> in 3 separate BSaved Files (a split image) on the C128, {{waits for}} a keypress and ends. The load address in the 3 files are $2000 for bitmap, $1C00 for videoram, and $D800 for colorram respectively. No color setting is required since the colors are stored in the videoram and colorram and are loaded directly into the C128's RAM.|$|R
5000|$|In {{the home}} {{computer}} era overlays were popular because {{the operating system}} {{and many of the}} computer systems it ran on lacked virtual memory and had very little RAM by current standards [...] - [...] the original IBM PC had between 16K and 64K depending on configuration. Overlays were a popular technique in Commodore BASIC to load <b>graphics</b> <b>screens.</b> In order to detect when an overlay was already loaded, a flag variable could be used.|$|R
50|$|Before {{switching}} power states, the $IDLE$ driver uses any available hardware assistance to detect if the application has been accessing other {{components in the}} system. For example, the application may be polling a serial port, or updating a <b>graphics</b> <b>screen.</b> If this is the case, the device driver determines that the application is not in fact idle and overrides the kernel's call to switch power states by passing information back up the layers and allowing application execution to resume.|$|R
