26|913|Public
5000|$|Convert the raw <b>data</b> <b>character</b> to its numeric {{equivalent}} (example ASCII 'A' ==> 65 decimal, 0x41 hexadecimal) ...|$|E
50|$|Data {{characters}} {{start with}} an odd parity, followed by a zero bit. This means that the character is a normal <b>data</b> <b>character,</b> followed by eight data bits.|$|E
5000|$|SYM {{records were}} added to allow for {{providing}} additional information about a symbol, such as the type of <b>data</b> (<b>character</b> or numerio) {{and the size of}} the item.|$|E
50|$|An FCC gives {{permission}} to send eight (8) normal <b>data</b> <b>characters.</b>|$|R
50|$|A {{flow control}} {{character}} (FCC) authorizes sending sixteen (16) normal <b>data</b> <b>characters.</b>|$|R
50|$|All {{primitives}} {{are four}} characters in length. They {{begin with the}} control character K28.5, followed by three <b>data</b> <b>characters.</b> In some primitives the three <b>data</b> <b>characters</b> are fixed, in others they can be varied to change the meaning or to act as parameters for the primitive. In some cases the last two parameter characters are identical.|$|R
50|$|Each packet {{traveling}} through a SpaceWire network can use path addressing (source routing) or logical addressing or some combination.The router examines the first <b>data</b> <b>character</b> of the packet; when it indicates some specific port of the router, the router discards that routing character and sends {{the rest of}} the packet out that port.|$|E
50|$|When the {{disparity}} of a character is zero (that is, {{it has the same}} number of ones and zeroes, and therefore will not transfer power), it can be transmitted either inverted or noninverted with no effect on the running disparity. Link control characters have a disparity of zero, and are inverted. This defines 126 possible link characters. Every other character is a normal <b>data</b> <b>character.</b>|$|E
50|$|Parity is {{a method}} of {{detecting}} errors in transmission. When parity is used with a serial port, an extra data bit is sent with each <b>data</b> <b>character,</b> arranged so {{that the number of}} 1 bits in each character, including the parity bit, is always odd or always even. If a byte is received with the wrong number of 1s, then it must have been corrupted. However, an even number of errors can pass the parity check.|$|E
50|$|A {{flow control}} {{character}} (FCC) authorizes {{the receiver to}} send thirty-two (32) <b>data</b> <b>characters.</b>|$|R
50|$|For example, many URI {{schemes and}} {{protocols}} based on RFCs 1738 and 2396 presume that the <b>data</b> <b>characters</b> will {{be converted to}} bytes according to some unspecified character encoding before being represented in a URI by unreserved characters or percent-encoded bytes. If the scheme does not allow the URI to provide a hint as to what encoding was used, or if the encoding conflicts {{with the use of}} ASCII to percent-encode reserved and unreserved characters, then the URI cannot be reliably interpreted. Some schemes fail to account for encoding at all, and instead just suggest that <b>data</b> <b>characters</b> map directly to URI characters, which leaves it up to implementations to decide whether and how to percent-encode <b>data</b> <b>characters</b> that are in neither the reserved nor unreserved sets.|$|R
50|$|<b>Data</b> <b>characters</b> {{are made}} of two 4-bit symbols. Bits 0..3 are {{transmitted}} in the first symbol, 4..7 in the second.|$|R
5000|$|Ol' Yellow Eyes Is Back is {{an album}} by Brent Spiner, {{best known for}} his role as Data in the American {{television}} series Star Trek: The Next Generation, first released in June 1991. The title is a parodic reference both to Frank Sinatra's Ol' Blue Eyes Is Back and the <b>Data</b> <b>character,</b> whose eyes are golden yellow. On the album, Spiner is backed by the orchestra from that series as he sings a number of old pop standards, mostly from the 1930s and 1940s.|$|E
5000|$|Note: the chunk size {{indicates}} {{the size of}} the chunk data and excludes the trailing CRLF ("\r\n"). In this particular example, the CRLF following [...] "in" [...] is counted toward the chunk size of 0xE (14). The CRLF in its own line is also counted toward the chunk size.The period character at the end of [...] "chunks" [...] is the 14th character, so it is thelast <b>data</b> <b>character</b> in that chunk. The CRLF following the period isthe trailing CRLF, so it is not counted toward the chunk size of 0xE (14).|$|E
5000|$|The {{cycle-stealing}} {{concept of}} the 1130permits the CPU program to start an operation on an I/O device and then continue the mainline program while the I/O device is performing its operation. Each I/O device that operates in this manner takes (steals) a cycle from the CPU when it is needed.The CPU is [...] "tied up" [...] only one cycle while a <b>data</b> <b>character</b> is being transferred. The frequency at which devices steal cycles depends {{on the type of}} device.Since the CPU is much faster than any I/O device on the system, the CPU may be performing another function, such as arithmetic, at the same time an I/O operation is being performed. In fact, several I/O operations may be overlapped {{with each other and with}} other CPU functions.|$|E
50|$|The term CDATA, meaning <b>character</b> <b>data,</b> is {{used for}} distinct, but related, {{purposes}} in the markup languages SGML and XML. The term indicates that a certain portion of the document is general <b>character</b> <b>data,</b> rather than non-character <b>data</b> or <b>character</b> <b>data</b> with a more specific, limited structure.|$|R
5000|$|Every slice defines 256 <b>data</b> <b>characters.</b> This {{is enough}} to {{represent}} 8 bits per character. These are called [...] "normal data" [...] or [...] "N-chars." ...|$|R
50|$|Control data is encoded {{using the}} {{values in the}} table below. Control <b>data</b> <b>characters</b> are {{designed}} to have a large number (7) of transitions to help the receiver synchronize its clock with the transmitter clock.|$|R
50|$|All {{of these}} new {{features}} were controlled through optional second characters added to the A and I commands. The first <b>data</b> <b>character</b> worked as it had under the VT55, and thus provided backward compatibility. The second turned on the new features. The second character sent to the A controlled shading lines and the strip-chart feature; least significant bit, bit 0, set the shade line data sent with @ to be loaded into graph 0 or graph 1, while bits 2 and 3 turned the shade line on or off for graph 0 or 1, respectively. Turning on bit 3 allowed strip charts to be used, while bit 4 turned it on for both graphs, the dual strip feature. The second character on the I command had only two values, ! or space; sending ! put the terminal into square mode, while space, or nothing, left it in the VT55 compatible rectangle format.|$|E
5000|$|New {{authors of}} XML {{documents}} often misunderstand {{the purpose of}} a CDATA section, mistakenly believing that its purpose is to [...] "protect" [...] data from being treated as ordinary character data during processing. Some APIs for working with XML documents do offer options for independent access to CDATA sections, but such options exist above and beyond the normal requirements of XML processing systems, and still do not change the implicit meaning of the <b>data.</b> <b>Character</b> data is character data, regardless of whether it is expressed via a CDATA section or ordinary markup. CDATA sections are useful for writing XML code as text data within an XML document. For example, if one wishes to typeset a book with XSL explaining the use of an XML application, the XML markup to appear in the book itself will be written in the source file in a CDATA section.|$|E
40|$|GPEDIT compares each {{character}} in data record to corresponding character in mask provided by user. Mask indicates that alphabetic or numeric character is allowed or that blank or punctuation mark is anticipated. Mask can {{also indicate that}} any <b>data</b> <b>character</b> other than some invalid character is allowed...|$|E
50|$|MO:DCA-P carries text, image, and {{graphics}} data objects, therefore {{the data is}} a mixture of binary <b>data</b> and <b>character</b> <b>data.</b> The recommended content-transfer-encoding is base64.|$|R
40|$|Artificial Neural Network (ANN) can {{be applied}} to recognice pattern, {{particularly}} at the stage of data classification. This study used a multilayer perceptron backpropagation ANN, an unsupervised learning algorithm, to recognize the pattern of uppercase handwriting on the answer sheet of multiple-choice exams. The application of this network involves mapping a set of input against a reference set of outputs. In this research, ANN was trained using 8000 handwritten uppercase characters (A, B, C, and D) consisting of 6000 training <b>data</b> <b>characters</b> (1500 characters for each letter) and 2000 testing <b>data</b> <b>characters</b> (500 characters for each letter). The result showed that for the most optimal performance, the architecture and network parameters were 10 neurons in hidden layer, learning rate of 0. 1 and 3000 iteration times. The accuracies of the result using the optimal network architecture and parameters were 90. 28 % for training data and 87. 35 % for testing data...|$|R
50|$|The IBM {{patented}} {{encoding method}} used for encoding 8-bit data bytes to 10-bit Transmission <b>Characters.</b> <b>Data</b> bytes are converted to Transmission Characters {{to improve the}} physical signal such that the following benefits are achieved: bit synchronization is more easily achieved, design of receivers and transmitters is simplified, error detection is improved, and control characters (i.e., the Special Character) can be distinguished from <b>data</b> <b>characters.</b>|$|R
40|$|In this paper, an {{iterative}} {{estimate of}} the multivariate density is proposed when the variables are binary in nature. Some properties of this estimate are also discussed. Finally, applications of this estimate {{are discussed in the}} areas of pattern recognition and reliability. Binary <b>data</b> <b>character</b> recognition estimation of density failure modes medical diagnosis pattern recognition and reliability...|$|E
40|$|Five {{species and}} a {{subspecies}} {{of the genus}} Conoclypus from Eocene formations of Croatia and Herzegovina are presented in this paper. Morphology of the genus is analysed. The given paleoecological conclusions are based on morphological <b>data,</b> <b>character</b> of sedimentary rocks containing Conoclypus, associated fauna and mechanical and biotic damages. Stratigraphic significance of this genus is emphasized, because it appeared, flourished, and disappeared in the Eocene period...|$|E
40|$|Abstract — Regular {{expressions}} {{are extremely}} useful, because they {{allow us to}} work with text in terms of patterns. They are considered the most sophisticated means of performing operations such as string searching, manipulation, validation, and formatting in all applications that deal with text <b>data.</b> <b>Character</b> recognition problem scenarios in sequence analysis that are ideally suited {{for the application of}} regular expression algorithms. This paper describes a use of regular expressions in this problem domain, and demonstrates how the effective use of regular expressions that can serve to facilitate more efficient and more effective character recognition. Index Terms — Regular expression, edit distance method, feature extraction, preprocessing I...|$|E
50|$|The {{film was}} funded by the Blender Foundation, {{donations}} from the Blender community, pre-sales of the film's DVD and commercial sponsorship. Both the final product and production data, including animation <b>data,</b> <b>characters</b> and textures are released under the Creative Commons Attribution License.|$|R
50|$|In telecommunication, a paired {{disparity}} code is a {{line code}} in which {{at least one of}} the <b>data</b> <b>characters</b> is represented by two codewords of opposite disparity that are used in sequence so as to minimize the total disparity of a longer sequence of digits.|$|R
5000|$|Octart superceeded Cromemco's TUART and QUADART and IOP boards. Unlike earlier boards, which merely {{formatted}} {{and exchanged}} individual <b>data</b> <b>characters,</b> the Octart featured a sophisticated DUART communications circuit plus an independent Z80A processor with 64 KB bytes of memory. This enabled the Octart to: ...|$|R
40|$|Extracting Linked Data {{following}} the Semantic Web principle from unstructured sources {{has become a}} key challenge for scientific research. Named Entity Recognition and Disambiguation are two basic operations in this extraction process. One step towards {{the realization of the}} Semantic Web vision and the development of highly accurate tools is the availability of data for validating the quality of processes for Named Entity Recognition and Disambiguation as well as for algorithm tuning. This article presents three novel, manually curated and annotated corpora (N 3). All of them are based on a free license and stored in the NLP Interchange Format to leverage the Linked <b>Data</b> <b>character</b> of our datasets...|$|E
40|$|SpaceWire time-codes {{provide a}} means of distributing time {{information}} across a SpaceWire system [1][2]. Time can be distributed across a large network with relatively low jitter. This time information can be provided as ticks or as an incrementing value which may be synchronized to spacecraft time. Time-codes provide a mechanism for supporting distributed system synchronization. They may {{also be used to}} implement isochronous communication channels, complementary to the asynchronous channels provided naturally with SpaceWire. A time-code comprises the SpaceWire ESC character followed by a single 8 -bit <b>data</b> <b>character.</b> The <b>data</b> <b>character</b> contains six-bits of system time (time-field) and two control flags. Each SpaceWire node or router [3] contains a six-bit time counter. A node or router acts as the time-code master and is responsible for distributing time. The time-master interface has a “tick ” input, which is asserted periodically (e. g. every millisecond) by its host system. When the timemaster link interface receives a tick, it increments its time counter and then immediately sends out a time-code with the 6 -bit time field set to the new value of the time counter. When the node or router {{at the other end of}} the link receives the time-code it updates its internal time counter with the new time and asserts a tick output signal. The new time should be one more than the time counter’s previous timevalue – this fact can be used for checking on time validity. If a node or router receives a time-code that is equal to it...|$|E
40|$|This paper proposes an {{innovative}} MIA (Misspelling Intelligent Analysis) approach for efficient detection and intelligent correction of misspelled words. An integrity spelling correction approach {{is needed to}} consider both non-word errors and real-word errors. The MIA approach takes advantage of word frequency statistics, lexicon <b>data,</b> <b>character</b> distance and conditional probability for ranking suggestions of each misspelling having non-word errors. Drawing upon the context information, the overall score or probability is calculated and regarded as an access key for real-word errors correction in the MIA approach. Especially, features compensation and combination are provided so as to improve the accuracy of real-word errors correction in the articles of Chinese students. Finally, the experiments show that the MIA approach is capable of providing a better performance of error detection, discrimination and correction than current methods of dealing with misspelled words...|$|E
5000|$|A more {{specialized}} definition of state {{is used in}} some computer programs that operate serially (sequentially) on streams of data, such as parsers, firewalls, communication protocols and encryption programs. Serial programs operate on the incoming <b>data</b> <b>characters</b> or packets sequentially, one at a time. In some of these programs, information about previous <b>data</b> <b>characters</b> or packets received is stored in variables and used to affect the processing of the current character or packet. This is called a [...] "stateful protocol" [...] and the data carried over from the previous processing cycle is called the [...] "state". In others, the program has no information about the previous data stream and starts [...] "fresh" [...] with each data input; {{this is called a}} [...] "stateless protocol".|$|R
50|$|A flow-control-character gives a node {{permission}} to transmit a few normal <b>data</b> <b>characters.</b> The number {{depends on the}} slice, with faster slices sending more characters per FCC. Building flow control in at a low level makes the link far more reliable, and removes much {{of the need to}} retransmit packets.|$|R
50|$|Poi Poi Ninja {{does not}} link {{with any other}} game, but rather links with other copies of Poi Poi Ninja. The manual {{indicates}} that this was designed to share save <b>data</b> or <b>character</b> <b>data</b> for vs. battles.|$|R
