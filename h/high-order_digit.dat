4|2|Public
5000|$|Another {{method for}} {{representing}} Unix permissions is an octal (base-8) notation {{as shown by}} stat -c %a. This notation consists {{of at least three}} digits. Each of the three rightmost digits represents a different component of the permissions: owner, group, and others. (If a fourth digit is present, the leftmost (<b>high-order)</b> <b>digit</b> addresses three additional attributes, the setuid bit, the setgid bit and the sticky bit.) ...|$|E
50|$|If {{fewer than}} 4 digits are entered, leading zeros are assumed. An error will result if the {{argument}} is not a valid octal number or if {{it has more than}} 4 digits. The three rightmost octal digits address the 'owner', 'group' and 'other' user classes, respectively. If a fourth digit is present, the leftmost (<b>high-order)</b> <b>digit</b> addresses three additional attributes, the setuid bit, the setgid bit and the sticky bit.|$|E
5000|$|The 930 {{offers a}} [...] "memory {{extension}} system" [...] that allows addressing more than 16284 words. Two 3-bit [...] "Extend Memory Registers", called EM2 and EM3, are provided {{which can be}} loaded with a value {{to be used as}} the high-order three bits of the effective address. Addresses 000008-177778 (the first 8192 words of memory) are always unmodified. If the high-order octal digit of the address in the instruction is two the contents of EM2 replaces the <b>high-order</b> <b>digit</b> in the effective address; when the digit is three the contents of EM3 are used.|$|E
5000|$|The sum is {{so large}} that only the <b>high-order</b> <b>digits</b> of the input numbers are being accumulated. But on the next step, c gives the error. y = 2.71828 - -.0415900 The {{shortfall}} from the previous stage gets included. = 2.75987 It is of a size similar to y: most digits meet. t = 10003.1 + 2.75987 But few meet the digits of sum. = 10005.85987 And the result is rounded = 10005.9 To six digits. c = (10005.9 - 10003.1) - 2.75987 This extracts whatever went in. = 2.80000 - 2.75987 In this case, too much. = [...]040130 But no matter, the excess would be subtracted off next time. sum = 10005.9 Exact result is 10005.85987, this is correctly rounded to 6 digits.|$|R
5000|$|The [...] and [...] bits are {{normally}} set with the command [...] by setting the <b>high-order</b> octal <b>digit</b> to 4 for [...] or 2 for [...] [...] "" [...] will set both the [...] and [...] bits (4+2=6), making the file read/write/executable for the owner (7), and executable {{by the group}} (first 1) and others (second 1). When a user other than the owner executes the file, the process will run with user and group permissions set upon it by its owner. For example, if the file is owned by user [...] and group , it will run as [...] no matter who executes the file.|$|R
5000|$|If the integer {{part of the}} {{adjusted}} mantissa is taken, there can only be the values 1 to 99, {{and that could be}} used as an index into a table of 99 pre-computed square roots to complete the estimate. A computer using base sixteen would require a larger table, but one using base two would require only three entries: the possible bits of the integer part of {{the adjusted}} mantissa are 01 (the power being even so there was no shift, remembering that a normalised floating point number always has a non-zero <b>high-order</b> <b>digit)</b> or if the power was odd, 10 or 11, these being the first two bits of the original mantissa. Thus, 6.25 = 110.01 in binary, normalised to 1.1001 x 22 an even power so the paired bits of the mantissa are 01, while [...]625 = 0.101 in binary normalises to 1.01 x 2−1 an odd power so the adjustment is to 10.1 x 2−2 and the paired bits are 10. Notice that the low order bit of the power is echoed in the high order bit of the pairwise mantissa. An even power has its low-order bit zero and the adjusted mantissa will start with 0, whereas for an odd power that bit is one and the adjusted mantissa will start with 1. Thus, when the power is halved, it is as if its low order bit is shifted out to become the first bit of the pairwise mantissa.|$|E

