266|222|Public
25|$|As in C, C++ {{supports}} {{four types}} of memory management: static storage duration objects, thread storage duration objects, automatic storage duration objects, and <b>dynamic</b> <b>storage</b> duration objects.|$|E
25|$|In principle, the Life {{field is}} infinite, but {{computers}} have finite memory. This leads to problems when the active area encroaches {{on the border}} of the array. Programmers have used several strategies to address these problems. The simplest strategy is simply to assume that every cell outside the array is dead. This is easy to program, but leads to inaccurate results when the active area crosses the boundary. A more sophisticated trick is to consider the left and right edges of the field to be stitched together, and the top and bottom edges also, yielding a toroidal array. The result is that active areas that move across a field edge reappear at the opposite edge. Inaccuracy can still result if the pattern grows too large, but at least there are no pathological edge effects. Techniques of <b>dynamic</b> <b>storage</b> allocation may also be used, creating ever-larger arrays to hold growing patterns.|$|E
5000|$|<b>Dynamic</b> <b>Storage</b> Technology, which {{provides}} Novell Shadow Volumes ...|$|E
5000|$|Electronic Calculator with <b>Dynamic</b> Recirculating <b>Storage</b> Register ...|$|R
50|$|Hi-tech storage - Modified {{atmosphere}} storage plus novel temperature manipulations and optimisation. Controlled atmosphere <b>storage</b> including <b>dynamic</b> CA <b>storage.</b>|$|R
5000|$|<b>Dynamic</b> patch <b>storage</b> in 9 {{banks with}} 99 memory locations. The number of patches {{which can be}} stored depends on their size (i.e. number of modules used).|$|R
5000|$|<b>Dynamic</b> <b>Storage</b> Technology (DST) by Novell on OES Linux Platform ...|$|E
5000|$|Version 7 extends {{support for}} {{multiple}} volumes to permit <b>Dynamic</b> <b>Storage</b> Tiering. <b>Dynamic</b> <b>Storage</b> Tiering allows root users to move files among different volumes, allocate files to different volumes at file creation time based on policy, and independently recover volumes, without altering the namespace of the file system. Version 7 {{was introduced in}} VxFS 5.0.|$|E
5000|$|... where [...] are the {{production}} terms, [...] are the terminal connections, and [...] are the <b>dynamic</b> <b>storage</b> terms for the extensive variables.|$|E
40|$|A dynamic {{positioning}} (DP) system on a diesel-electric ship applies electric power {{to keep the}} positioning and heading of the ship subject to dynamic disturbances due to the winds, waves and other external forces using electric thrusters. Vice versa, position and heading errors can be allowed in order to implement energy storage in the kinetic and potential energy of the ship motion using the DP control system to convert between mechanical and electrical power. New simple formulas are derived in order to relate the <b>dynamic</b> energy <b>storage</b> capacity to the maximum allowed ship position deviation, {{as a function of}} the frequency of the requested <b>dynamic</b> energy <b>storage.</b> The benefits of DP <b>dynamic</b> energy <b>storage</b> are found to be reduced diesel-generator maintenance need, reduced fuel consumption and emissions, reduced risk for blackout, and increased operational flexibility allowing power-consuming operations such as drilling and lifting to be safely prioritized over DP for short periods of time...|$|R
40|$|This article {{deals with}} the {{emulation}} of atomic read/write (R/W) <b>storage</b> in <b>dynamic</b> asynchronous message passing systems. In static settings, {{it is well known}} that atomic R/W storage can be implemented in a fault-tolerant manner even if the system is completely asynchronous, whereas consensus is not solvable. In contrast, all existing emulations of atomic <b>storage</b> in <b>dynamic</b> systems rely on consensus or stronger primitives, leading to a popular belief that <b>dynamic</b> R/W <b>storage</b> is unattainable without consensus. In this article, we specify the problem of <b>dynamic</b> atomic read/write <b>storage</b> in terms of the interface available to the users of such storage. We discover that, perhaps surprisingly, <b>dynamic</b> R/W <b>storage</b> is solvable in a completely asynchronous system: we present DynaStore, an algorithm that solves this problem. Our result implies that atomic R/W storage is in fact easier than consensus, even in dynamic systems...|$|R
40|$|This paper {{deals with}} the {{emulation}} of atomic read/write (R/W) <b>storage</b> in <b>dynamic</b> asynchronous message passing systems. In static settings, {{it is well known}} that atomic R/W storage can be implemented in a fault-tolerant manner even if the system is completely asynchronous, whereas consensus is not solvable. In contrast, all existing emulations of atomic <b>storage</b> in <b>dynamic</b> systems rely on consensus or stronger primitives, leading to a popular belief that <b>dynamic</b> R/W <b>storage</b> is unattainable without consensus. In this paper, we specify the problem of <b>dynamic</b> atomic R/W <b>storage</b> in terms of the interface available to the users of such storage. We discover that, perhaps surprisingly, <b>dynamic</b> R/W <b>storage</b> is solvable in a completely asynchronous system: we present DynaStore, an algorithm that solves this problem. Our result implies that atomic R/W storage is in fact easier than consensus, even in dynamic systems. Categories and Subject Descriptors B. 3. 2 [Memory Structures]: Design Stylesâ€”shared memory; C. 2. ...|$|R
50|$|These mapping {{settings}} {{needed a}} <b>dynamic</b> <b>storage</b> facility {{so this was}} created using a Microsoft Access database initially, later upgraded to SQL Server.|$|E
50|$|As in C, C++ {{supports}} {{four types}} of memory management: static storage duration objects, thread storage duration objects, automatic storage duration objects, and <b>dynamic</b> <b>storage</b> duration objects.|$|E
50|$|LRLTRAN was {{developed}} at the Lawrence Radiation Laboratory to provide support for vector arithmetic and <b>dynamic</b> <b>storage,</b> among other extensions to support systems programming. The distribution included the LTSS operating system.|$|E
50|$|Most VLMs offer <b>dynamic</b> space <b>storage</b> which {{measures}} the tray {{every time it}} is returned to the unit to optimize space, safety features and some offer tilt tray delivery for increased ergonomic accessibility, and laser pointers which indicate the exact item to be picked on each tray.|$|R
5000|$|Layered caching scheme, which {{supports}} data caching, page caching, fragment caching and <b>dynamic</b> content. The <b>storage</b> medium of caching can be changed.|$|R
50|$|The {{virtual disk}} can again be {{implemented}} using split or monolithic files, except that storage is allocated on demand. Several Virtual Machine Monitor implementations initialize the storage with zeros before providing {{it to the}} virtual machine that is in operation. The <b>dynamic</b> growth <b>storage</b> scheme is {{also referred to as}} a thin provisioning scheme.|$|R
5000|$|... daviX is used at CERN {{by several}} projects, {{including}} the ROOT data analysis framework, the File Transfer Services (FTS), the European Middleware Initiative gfal2 library [...] or the <b>dynamic</b> <b>storage</b> federation project.|$|E
50|$|Storm is a Python {{programming}} {{library for}} object-relational mapping between {{one or more}} SQL databases and Python objects. It allows Python developers to formulate complex queries spanning multiple database tables to support <b>dynamic</b> <b>storage</b> and retrieval of object information.|$|E
5000|$|Windows 2000 {{introduced}} the Logical Disk Manager and the diskpart command line tool for <b>dynamic</b> <b>storage.</b> All versions of Windows 2000 support {{three types of}} dynamic disk volumes (along with basic disks): simple volumes, spanned volumes and striped volumes: ...|$|E
40|$|Abstract. In this paper, we {{consider}} a {{neural network model}} consisting of four neurons with delayed self and nearest-neighbor connections. We provide a full classification of all equilibria and their stability in the connection weighter parameter space. Such a classification {{is essential for the}} description of spatio-temporal patterns of the model system and for the applications to <b>dynamic</b> memory <b>storage</b> and retrieval. 1...|$|R
50|$|Windows 2000 {{introduces}} NTFS 3.0, Encrypting File System, as well {{as basic}} and <b>dynamic</b> disk <b>storage.</b> Support {{for people with disabilities}} was improved over Windows NT 4.0 with a number of new assistive technologies, and Microsoft increased support for different languages and locale information. The Windows 2000 Server family has additional features including the ability to provide Active Directory services.|$|R
40|$|ABSTRACT: Understanding the <b>dynamic</b> charge <b>storage</b> in {{nanoporous}} electrodes with room-temperature {{ionic liquid}} electrolytes {{is essential for}} optimizing them to achieve supercapacitors with high energy and power densities. Herein, we report coarse-grained molecular dynamics simulations of the cyclic voltammetry of supercapacitors featuring subnan-ometer pores and model ionic liquids. We show that the cyclic charging and discharging of nanopores are governed by the interplay between the external field-driven ion transport and the sloshing dynamics of ions inside of the pore. The ion occupancy along the pore length depends strongly on the scan rate and varies cyclically during charging/discharging. Unlike that at equilibrium conditions or low scan rates, charge storage at high scan rates is dominated by counterions while the contribution by co-ions is marginal or negative. These observations help explain the perm-selective charge storage observed experimentally. We clarify the mechanisms underlying these dynamic phenomena and quantify their effects on {{the efficiency of the}} <b>dynamic</b> charge <b>storage</b> in nanopores...|$|R
50|$|In practice, HSM is {{typically}} performed by dedicated software, such as IBM Tivoli Storage Manager, Oracle's SAM-QFS, Versity Storage Manager, Quantum, Novell's <b>Dynamic</b> <b>Storage</b> Technology (DST) on Open Enterprise Server (OES) Linux Platform, SGI Data Migration Facility (DMF), StorNext, or EMC Legato OTG DiskXtender.|$|E
5000|$|Uniquely, the {{object-oriented}} paradigm involves {{dynamic memory}} allocation from heap storage for both object creation and message passing. A 1994 benchmark - [...] "Memory Allocation Costs in Large C and C++ Programs" [...] conducted by Digital Equipment Corporation {{on a variety}} of software, using an instruction-level profiling tool, measured how many instructions were required per <b>dynamic</b> <b>storage</b> allocation. The results showed that the lowest absolute number of instructions executed averaged around 50 but others reached as high as 611. See also [...] "Heap:Pleasures and pains" [...] by Murali R. Krishnan that states [...] "Heap implementations tend to stay general for all platforms, and hence have heavy overhead". The 1996 IBM paper [...] "Scalability of <b>Dynamic</b> <b>Storage</b> Allocation Algorithms" [...] by Arun Iyengar of IBM [...] demonstrates various <b>dynamic</b> <b>storage</b> algorithms and their respective instruction counts. Even the recommended MFLF I algorithm (H.S. Stone, RC 9674) shows instruction counts in a range between 200 and 400. The above pseudocode example does not include a realistic estimate of this memory allocation pathlength or the memory prefix overheads involved and the subsequent associated garbage collection overheads. Suggesting strongly that heap allocation is a nontrivial task, one open-source software microallocator, by game developer John W. Ratcliff, consists of nearly 1,000 lines of code.|$|E
50|$|The VT05's <b>dynamic</b> <b>storage</b> was a PMOS shift register; {{the delays}} {{associated}} with manipulating {{the data in}} the shift register resulted in the VT05 requiring fill characters after each line feed (as compared to contemporaneous hard copy terminals which required fill characters after each carriage return).|$|E
40|$|In {{this paper}} we first {{consider}} the one-dimensional bin-packing problem {{and show that}} a class of "any-fit" algorithms can bound the expected wasted space in the system under certain conditions. In {{the second part of}} the paper we consider a <b>dynamic</b> file- <b>storage</b> problem and show, under certain conditions, that a class of "any-fit" algorithms can bound the expected wasted space left by deleted files...|$|R
40|$|In {{computer}} information systems, {{some programs}} are used {{more frequently than}} others producing skewed distributions of program usages. We investigate the claim that static views of program usage frequencies are insufficient when they are used for storage allocation decisions making it necessary to study {{the implications of the}} use of <b>dynamic</b> frequencies in <b>storage</b> allocation. The use of dynamic frequencies provides a natural extension to previously presented static cost model literature for hierarchical storage allocation. In our work, we present the value of incorporating dynamic usage frequencies into program usage cost models. Thus, an optimization-based cost modeling methodology using Simon's Model for <b>dynamic</b> hierarchical <b>storage</b> allocation is presented. To illustrate, a simple example of program storage allocation is presented in both static and dynamic form. Cost-saving comparisons are then discussed...|$|R
5000|$|A similar {{system of}} rewritable kiosk {{distribution}} {{had previously been}} used with the [...] Famicom Disk Writer kiosks of the 1980s. Nintendo deployed another <b>dynamic</b> flash <b>storage</b> subsystem on the Satellaview peripheral of the late 1990s, for delivering {{a different set of}} unique Super Famicom games via the now defunct St.GIGA satellite network. In 2003, Nintendo launched another game delivery kiosk network for the iQue Player in China.|$|R
5000|$|One side {{benefit is}} that {{compilations}} are faster because the header file changes less often. Note, possible disadvantage of d-pointer pattern is indirect member access through pointer (in example, pointer to object in <b>dynamic</b> <b>storage),</b> which is sometimes slower than access to plain, not-a-pointer member. The d-pointer is heavily {{used in the}} Qt [...] and KDE libraries.|$|E
50|$|As {{early as}} the 1980s, {{researchers}} started viewing DNA or genomes as the <b>dynamic</b> <b>storage</b> of a language system with precise computable finite states represented as a finite state machine. Recent complex systems research has also suggested some far-reaching commonality {{in the organization of}} information in problems from biology, computer science, and physics, such as the Bose-Einstein condensate (a special state of matter).|$|E
5000|$|The PL/I D compiler, using 16 {{kilobytes}} of memory, {{was developed}} by IBM Germany for the DOS/360 low end operating system. It implements {{a subset of the}} PL/I language requiring all strings and arrays to have fixed extents, thus simplifying the run-time environment. Reflecting the underlying operating system, it lacks <b>dynamic</b> <b>storage</b> allocation and the controlled storage class. [...] It was shipped within a year of PL/I F.|$|E
40|$|A {{high-level}} language lor {{the description of}} inflectional morphology is presented, in which the organization of word lormation rules into an ii~herilance hierarchy of paradigms allows lo ra natural encoding {{of the kinds of}} nfles typically pre~uted in grammar txroks. We show how tim language, composed of orthographic rides, word formation rules, and paradigm inheritance, can be com-piled into a run-time data structure for efficient morpho-logical analysis and generation with a <b>dynamic</b> secondary <b>storage</b> lexicon. ...|$|R
40|$|Minist Informat & Commun, IEEE Commun Soc, IEEE Reg 10, Korean Inst Commun Sci, IEEK Commun Soc, Open Stand & Internet Assoc, Korea Inst Informat Scientists & Engineers, Inst Informat Technol Advancement, Korea Res Fdn, Elect & Telecommun ResTodays storage {{paradigm}} is shifting from the closed and managed mode {{to be more}} open and <b>dynamic.</b> Network <b>storage</b> system {{can be made up}} of a group of loosely coupled and heterogeneous storage resources. But this openness exposes the data dire...|$|R
40|$|Abstract. The {{morphology}} {{and dynamic}} mechanical properties of epoxy modified asphalt(EMB) were studied using dynamic mechanical analyzer (DMA) and fluorescent microscopy (FM). DMA {{results showed that}} <b>dynamic</b> modulus and <b>storage</b> modulus reached a maximum value when 5 wt % epoxy resins were added. However, the <b>dynamic</b> modulus and <b>storage</b> modulus decreased, when the contents of epoxy resin are more than 5 %. The FM analysis showed that epoxy asphalt has finished basically after the curing for 4 hours and has formed the epoxy network structure. The layered hydrotalcite and rubber powder are distributed evenly in the epoxy asphalt and form a stable continuous phase, when the epoxy resin content is more than 3 %. 1...|$|R
