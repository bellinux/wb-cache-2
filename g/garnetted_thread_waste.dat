0|18|Public
5000|$|Creating {{too many}} <b>threads</b> <b>wastes</b> {{resources}} and costs time creating the unused threads.|$|R
40|$|ABSTRACT: Latex waste {{products}} contain rubber hydrocarbon {{of very high}} quality, which is only lightly cross linked. Selected <b>wastes</b> such as <b>thread</b> <b>waste</b> and glove waste were modified into processable materials by a novel economic process and thermoplastic elastomers were prepared by blending these modified waste materials with high density polyethylene in various proportions. The mechanical properties {{as well as the}} rheological behaviour of these blends were evaluated and compared with those of the natural rubber–high density polyethylene blends. KEY WORDS: thermoplastic elastomer, latex product waste, high density polyethylene, mechanical properties, fracture mechanism, rheology, morphology...|$|R
5000|$|Damage to {{electrical}} and electronic equipment from floating <b>threads</b> of conducting <b>waste.</b>|$|R
5000|$|Busy-waiting {{itself can}} be made much less {{wasteful}} by using a delay function (e.g., sleep (...) [...] ) found in most operating systems. This puts a thread to sleep for a specified time, during which the <b>thread</b> will <b>waste</b> no CPU time. If the loop is checking something simple then it will spend most of its time asleep and will waste very little CPU time.|$|R
50|$|A lack of raw {{material}} forced the rayon industry to take new steps. Staple fiber as replacement for cotton {{was the new}} product, <b>waste</b> <b>threads</b> of man-made continuously spinnable filaments cut to staple length. In 1916, the first staple filament spinning machine was put into operation. It was developed by Emil Bronnert, a chemist and Eduard Boos, an engineer.|$|R
50|$|Fine {{spinning}} {{produced a}} lot of waste so naturally this was recycled. This waste was the raw material of a condensor spinning mill. It came in three forms, loose staple, unspun rovings and spun <b>thread</b> (hard <b>waste)</b> that had been pirned but rejected. No matter its source {{it had to be}} devilled (broken down) to staple, then scutched and carded in the normal way. After these processes the staple was very short, and the processing of the lap was different - a Derby Doubler was used to mix slivers into sliver lap. A notable feature of the mule was that the rovings weren't on individual bobbins but on a beam. As the fine spinning of cotton contracted so did the need for condensing.|$|R
5000|$|The Dictabelt, {{in early}} years {{and much less}} {{commonly}} also called a Memobelt, is an analog audio recording medium commercially introduced by the American Dictaphone company in 1947. Having been intended for recording dictation and other speech for later transcription, it is a write-once-read-many medium consisting of a [...] thick transparent vinyl plastic belt 3.5 in wide and 12 in around. The belt is loaded onto a pair of metal cylinders, put under tension, then rotated like a tank tread. It is inscribed with an audio-signal-modulated helical groove by a stylus which is slowly moved across the rotating belt. Unlike the stylus of a record cutter, the Dictabelt stylus is blunt and in recording mode it simply impresses a groove into the plastic rather than engraving it and throwing off a <b>thread</b> of <b>waste</b> material.|$|R
50|$|The warp {{is sized}} in a starch mixture for {{smoother}} running. The loom warped (loomed or dressed) by passing the sized warp threads through {{two or more}} heddles attached to harnesses. The power weavers loom is warped by separate workers. Most looms used for industrial purposes have a machine that ties new warps <b>threads</b> to the <b>waste</b> of previously used warps threads, while still on the loom, then an operator rolls {{the old and new}} threads back on the warp beam. The harnesses are controlled by cams, dobbies or a Jacquard head.|$|R
30|$|The {{convolution}} operation {{requires a}} neighborhood {{with the same}} width that the filter mask to calculate the result for each pixel. So, each thread transfers one datum from the global memory to the shared memory. In {{order to get the}} maximum precision and to avoid bank conflicts in shared memory, these data are stored as floating point data. Therefore, there are n- 1 threads per block that only load data, but do not calculate any filtered pixel. So, as to not <b>waste</b> too many <b>threads</b> in the loading stage, the block size must be large enough compared to the filter mask width. In this case, the block size is set to 1 × 128, and the filter width is 7, so only 6 <b>threads</b> are <b>wasted</b> per processing block. The block width is set to 128 to achieve the required alignment when accessing to global memory, and also to optimize the multiprocessor utilization.|$|R
40|$|Abstract—Work-stealing, as {{a common}} user-level task {{scheduler}} for managing and scheduling tasks of multithreaded applications, suffers from inefficiency in virtualized environments, because the steal attempts of thief <b>threads</b> may <b>waste</b> CPU cycles that could be otherwise used by busy threads. This paper contributes a novel scheduling framework named Robinhood. The basic idea of Robinhood {{is to use the}} time slices of thieves to accelerate busy threads with no available tasks (referred to as poor workers) at both the guest Operating System (OS) level and Virtual Machine Monitor (VMM) level. In this way, Robinhood can reduce the cost of steal attempts and accelerate the threads doing useful work, so as to put the CPU cycles to better use. We implement Robinhood based on BWS, Linux and Xen. Our evaluation with various benchmarks demonstrates that Robinhood paves a way to efficiently run work-stealing applications in virtualized environments. Compared to Cilk++ and BWS, Robinhood can reduce up to 90 % and 72 % execution time of work-stealing applications, respectively...|$|R
50|$|The seven {{panels of}} this wall hanging, in {{alternating}} crimson and emerald velvet, were sewn not by women, as {{was typical of}} Moroccan embroidery, but by professional male needleworkers. That is because this haiti represents the most prestigious and complicated form of textile. The men were under close supervision by the leatherworkers' guild, since the work was so complex it required custom-made leather templates. They stitched around the templates with a special technique known as underside couching that kept the precious gold <b>thread</b> from being <b>wasted</b> on the unseen underside. The interlaced mihrab motif, echoing a mosque's arch-shaped niche, makes this wall hanging a magnificent backdrop for special occasions.|$|R
40|$|SMT {{processors}} increase {{performance by}} executing instructions from several threads simultaneously. These threads use the processor’s resources better by sharing them, but, {{at the same}} time, threads are competing for these resources. The way critical resources are distributed among threads determines the final throughput and also the performance of each individual thread. Currently, the processor instruction fetch policy decides each cycle which threads enter the processor to compete for resources. However, these fetch policies only use indirect indicators of how resource allocation is carried out. This may cause resource monopolization by a single <b>thread,</b> or <b>wasted</b> resources when no thread can use them. Both situations can harm the processor performance and occur, for example, after an L 2 cache miss. This paper {{is a first step}} toward dynamic resource allocation for SMT processors. We show that being conscious about resource demand and directly controlling resource assignment significantly im-proves performance of SMTs. We introduce {{for the first time the}} concept of resource allocation policy in order to provide such a control. Our results show that our resource allocation policy outperforms the best published fetch policies for throughput and fairness, like FLUSH, by 7 % on average. In addition, our resource allocation policy does not need to squash instructions from the pipeline, like FLUSH, in order to get this performance improvement. As a result, it reduces dynamic power consumption and hardware complexity. ...|$|R
60|$|On the Sunday {{following}} this {{interview with the}} Truth Mr. Lavender, who ever found the day of rest irksome to his strenuous spirit, left his house after an early supper. It, had been raining all day, but the sinking sun had now emerged and struck its level light into the tree tops from a still cloudy distance. Followed by Blink, he <b>threaded</b> the puddled <b>waste</b> which lies {{to the west of}} the Spaniard's Road, nor was it long before the wild beauty of the scene infected his spirit, and he stood still to admire the world spread out. The smoke rack of misted rain was still drifting above the sunset radiance in an apple-green sky; and behind Mr. Lavender, as he gazed at those clouds symbolical of the world's unrest, a group of tall, dark pine-trees, wild and witch-like, had collected as if in audience of his cosmic mood. He formed a striking group for a painter, with the west wind flinging back his white hair, and fluttering his dark moustache along his cheeks, while Blink, a little in front of him, pointed at the prospect and emitted barks whose vigour tossed her charming head now to this side now to that.|$|R
40|$|In {{the present}} paper the authors {{investigated}} 9 cases of disseminated intravascular coagulation (DIC) syndrome (group I) and 32 cases not diagnosed as DIC (group II) in a clinical, hematological and pathohistological point of view. The results obtained are as follows : (1) The occurrence of bleeding considered {{to be caused by}} DIC were observed in all cases in group I and in half the cases of group II. (2) In group II, fibrin thrombi were demonstrated in 31. 3 % of cases, while fibrin thrombi were demonstrated in 89 % cases of group I. These results may suggest that DIG is not an uncommon complication. (3) In both groups the number of fibrin thrombi identified was high in lung and kidney, and their pathological properties and organ specificities were almost similar in both groups. (4) Fibrin thrombi observed in human DIC cases was susceptible to secondary fibrinolysis and their properties were almost identical to that experimentally induced in rabbits by endotoxin, reported in the preceding paper. (5) Morphologically the fibrin thrombi demonstrated in human DIC cases were mainly of a tangled or massed type. In autopsied specimens, the fibrin thrombi seemed to be changed from a tangled or massed type to spotty, amorphous, globular, reticular or <b>waste</b> <b>thread</b> type in the course of secondary fibrinolysis. Even in the cases not suspected as DIC, a careful observation is required to demonstrate fibrin thrombi, especially when they are suspected to have underlying diseases inclined to complicate with DIC...|$|R
40|$|Experimental DIC in rabbits {{induced by}} {{endotoxin}} was studied with special {{reference to the}} fibrin thrombi under light and electron microscope and histochemically. The results obtained were as follows; (1) The fibrin thrombi were classified into two distinct patterns, namely, uniform and fibrous patterns. (2) The thrombi of uniform pattern was subclassified into coating, bordering, spotty and massed types. These thrombi disappeared readily in the plasmin-treated preparations. In the electron microscopical findings, the structure of fibrin thrombi was significantly different from thrombi in general states. It was chiefly composed of materials of low density and showed a homogeneous appearance. (3) The fibrous pattern was subclassified into tangled, reticular and <b>waste</b> <b>thread</b> types which were digested only slightly by plasmin treatment. (4) The number of denionstratable fibrin thrombi in the present experiment decreased rapidly with the lapse of postmortem, especially the rate of decrease was more marked in cases left at room temperature as compared with cases kept in a refrigerator. In order to prove the presence of fibrin thrombi when DIC is suspected, {{it is necessary to}} autopsy and to fix the material immediately after death. (5) Up to 5 hours after injection {{there was no evidence of}} the detachment of the endothelium from the capillary walls. Therefore, for the formation of fibrin thrombus, the detachment of the endothelium from the capillary walls is not necessary in endotoxin induced DIC. In conclusion, the authors assumed that in experimental DIC the fibrin was a soluble fibrin monomer complex or its resembled substances of the uniform pattern, and the fibrous pattern was produced partly by the action of fibrin stabilizing factor...|$|R
40|$|Many {{enhancements}} {{have been}} made to the traditional general purpose load-store computer architectures. Among the enhancements are memory hierarchy improvements, branch prediction, and multiple issue processors. A major problem that exists with current microprocessor design is the disparity in the much larger increase in speed of the CPU versus the moderate increase in speed accessing main memory. The simultaneous multithreaded architecture is an extension of the single-threaded architecture that helps hide the performance penalty created by long-latency instructions, branch mispredictions, and memory accesses. Simultaneous multithreaded architectures use a more flexible parallelism, which takes advantage of both instruction-level, and thread-level parallelism. The goal of this project was to design, simulate, and analyze a model of a simultaneous multithreaded architecture in order to evaluate design alternatives. The simulator was created by modifying a version of the Simple Scalar toolset, developed at the University of Wisconsin. The simulations provide documentation for an overall system performance improvement of a simulta neous multithreaded architecture. In early simulation results, performed with the same number of functional units, an improvement in the number of instructions per cycle (IPC) of between 43 % and 58 % was found using four threads versus a single <b>thread.</b> The horizontal <b>waste</b> rate, which measures the number of unused issue slots, was reduced between 35 % and 46 %. The vertical waste rate, which measures the percentage- of unused issue cycles (no issue slots used in a cycle), was reduced between 46 % and 61 %. These results are derived from a set of four sample programs. It was also found that increasing the number of certain functional units did not improve performance, whereas increasing the number of other types of functional units did have a significant positive impact on performance...|$|R
40|$|The {{experience}} of operating oil wells {{showed that the}} weak point of tubing is a connecting thread. Currently, the pipe thread of the specified class is made using the technology of cutting. The process of cutting a <b>thread</b> leads to <b>waste</b> metal chips and cutting fibers. Therefore the idea arose to make a thread by the method of pressure shaping. The aim was to study the possibility for full filling of the threaded matrix profile. The study was conducted by means of mathematical modeling in the software complex DEFORM. The impact of technological and geometrical factors {{on the process of}} form change was in detail analyzed. Thus, a work-piece material was specified to be continuous, isotropic, homogeneous, viscous-plastic and a tool material was set as a hard one. The friction was speci-fied according to Prandtl-Siebel law with the friction factor of 0. 3. The thread profile has been replaced by the annular grooves of the similar profile. The task was considered to be axisymmetric. Scientific novelty of received results consists in revealed regularities of the plastic de-formation process of the work-piece when forming a profile of the conical thread on the pipe in the process of its expansion with a conical punch. The simulation allowed us to obtain information about the stress-strain state of the work-piece and tool, {{about the nature of the}} metal flow during deformation, and about the strength parameters of the process. In particular, it was found that the work-piece metal is displaced along the pipe axis both in punch movement direction and in the opposite one. Thus, a mechanical end burr is formed. The article shows that to remove a mechanical end burr requires insertion of extra limit stop housing. The article also analyses distribution of stresses arising in the matrix at the final moment of deformation. It was proved that the highest stresses occur in the hollows of the threaded part of matrix. Thus, their absolute value does not exceed 470 MPa that is quite acceptable for the materials used in the production of stamps. Research has been proven a principle possibility to have the external conical pipe thread by expansion with a conical punch. </p...|$|R
40|$|The {{importance}} of parallel programming is increasing {{year after year}} since the power wall popularized multi-core processors, and with them, shared memory parallel programming models. In particular, task-based programming models, like the standard OpenMP 4. 0, have {{become more and more}} important. They allow describing a set of data dependences per task that the runtime uses to order the execution of tasks. This order is calculated using shared graphs, which are updated by all threads but in exclusive access using synchronization mechanisms (locks) to ensure the dependences correctness. Although exclusive accesses are necessary to avoid data race conditions, those may imply contention that limits the application parallelism. This becomes critical in many-core systems because several <b>threads</b> may be <b>wasting</b> computation resources waiting to access the runtime structures. This master thesis introduces the concept of an asynchronous runtime management suitable for task-based programming model runtimes. The runtime proposal is based on the asynchronous management of the runtime structures like task dependence graphs. Therefore, the application threads request actions to the runtime instead of directly executing the needed modifications. The requests are then handled by a runtime manager which can be implemented in different ways. This master thesis presents an extension to a previously implemented centralized runtime manager and presents a novel implementation of a distributed runtime manager. On one hand, the runtime design based on a centralized manager [1] is extended to dynamically adapt the runtime behavior according to the manager load with the objective of being as fast as possible. On the other hand, a novel runtime design based on a distributed manager implementation is proposed to overcome the limitations observed in the centralized design. The distributed runtime implementation allows any thread to become a runtime manager thread if it helps to exploit the application parallelism. That is achieved using a new runtime feature, also implemented in this master thesis, for runtime functionality dispatching through a callback system. The proposals are evaluated in different many-core architectures and their performance is compared against the baseline runtimes used to implement the asynchronous versions. Results show that the centralized manager extension can overcome the hard limitations of the initial basic implementation, that the distributed manager fixes the observed problems in previous implementation, and the proposed asynchronous organization significantly outperforms the speedup obtained by the original runtime for real benchmarks...|$|R

