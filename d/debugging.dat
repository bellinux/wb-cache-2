10000|3155|Public
5|$|Another viable use {{of custom}} allocators is for <b>debugging</b> memory-related errors. This could be {{achieved}} by writing an allocator that allocates extra memory in which it places <b>debugging</b> information. Such an allocator {{could be used to}} ensure that memory is allocated and deallocated by the same type of allocator, and also provide limited protection against overruns.|$|E
5|$|The assert statement, {{used during}} <b>debugging</b> {{to check for}} {{conditions}} that ought to apply.|$|E
5|$|Independently of the ANSI committee, the CODASYL Programming Language Committee {{was working}} on {{improving}} the language. They described new versions in 1968, 1969, 1970 and 1973, including changes such as new inter-program communication, <b>debugging</b> and file merging facilities as well as improved string-handling and library inclusion features.|$|E
50|$|The {{following}} non-MIPI <b>debug</b> {{standards are}} well {{established in the}} embedded market: IEEE 1149.1 (5-pin) and ARM Serial Wire <b>Debug</b> (2-pin), both using single-ended pins. Thus, {{there was no need}} for the MIPI <b>Debug</b> Working Group to specify a stop mode <b>debug</b> protocol or to specify a <b>debug</b> interface.|$|R
5000|$|Board {{developers}} and <b>debug</b> tools vendors benefit from standard <b>debug</b> connectors and standard pin mappings. The MIPI Recommendation for <b>Debug</b> and Trace Connectors recommends 10-/20-/34-pin board-level connectors (1.27 mm 050"). Seven different pin mappings are specified that address {{a wide variety}} of <b>debug</b> scenarios. They include: standard JTAG (IEEE 1149.1), cJTAG (IEEE 1149.7) and 4-bit parallel trace interface (mainly used for system traces). Supplemented by the ARM-specific standard SWD (Serial Wire <b>Debug)</b> [...] MIPI10/20/34 <b>debug</b> connector became the standard <b>debug</b> connectors for ARM-based embedded designs.|$|R
50|$|The <b>debug</b> status {{register}} permits the debugger {{to determine which}} <b>debug</b> conditions have occurred.When the processor detects an enabled <b>debug</b> exception, it sets the low-order bits of this register (0,1,2,3) before entering the <b>debug</b> exception handler.|$|R
5|$|Web {{is based}} on the WebKit web browser engine, which {{provides}} support for HTML 4 and XHTML, CSS 1 and 2, substantial degree of implementation of HTML5 and CSS 3 features, Web Inspector (HTML and JavaScript <b>debugging</b> tool) and NPAPI, including Adobe Flash and IcedTea plug-ins support.|$|E
5|$|After {{writing down}} rules {{about how the}} music was to be used, such as {{specific}} scenes certain songs should be used in, or ways a certain song should not be used, the game's scripters implemented the music at points they found fitting. During <b>debugging,</b> Nakazawa would request fixes for songs {{that he did not}} think fit the scenes they were used in. For the PlayStation Portable release, Asami Imai performed the opening theme.|$|E
5|$|In 1983, the DPMA withdrew its {{opposition}} to the standard, citing the responsiveness of the committee to public concerns. In the same year, a National Bureau of Standards study concluded that the proposed standard would present few problems. A year later, a COBOL-80 compiler was released to DEC VAX users, who noted that conversion of COBOL-74 programs posed few problems. The new EVALUATE statement and inline PERFORM were particularly well received and improved productivity, thanks to simplified control flow and <b>debugging.</b>|$|E
40|$|Changelog v 3. 0. 1 (14 / 09 / 2017) webpack dump add details {{connectors}} sequelize <b>debug</b> sequelize mysql Sequelize. STRING(126). BINARY update outdated <b>debug</b> node 6 <b>debug</b> accees nodefony without app for cli usage clean error stack {{unit test}} accept header add detect accept request json for rest api style clean core update sequelize version <b>debug</b> finder findByNode <b>debug</b> memcached session <b>debug</b> config app webpack webpack new framework HMR from error 500 400 update webpack versio...|$|R
5000|$|Current <b>debug</b> solutions, such as JTAG and ARM CoreSight, are statically {{structured}} {{which leads}} to limited scalability regarding the accessibility of <b>debug</b> components/devices. MIPI <b>Debug</b> for I3C specifies a scalable, 2-pin, single-ended <b>debug</b> solution, which has the advantage that it is available for the entire product lifetime. I3C {{can be used as}} <b>debug</b> bus only or can be shared between <b>debug</b> and its native function as data acquisition bus for sensors.Debugging via I3C works in principal as follows: ...|$|R
5000|$|A <b>debug</b> adapter exits {{that connects}} the <b>debug</b> tool to the {{standard}} interface. The <b>debug</b> adapter has to assist the switching protocol if required.|$|R
5|$|Like {{the other}} BSD kernels (and those of most modern {{operating}} systems), DragonFly employs a built-in kernel debugger {{to help the}} developers find kernel bugs. Furthermore, , a debug kernel, which makes bug reports more useful for tracking down kernel-related problems, is installed by default, {{at the expense of}} a relatively small quantity of disk space. When a new kernel is installed, the backup copy of the previous kernel and its modules are stripped of their <b>debugging</b> symbols to further minimize disk space usage.|$|E
5|$|Following {{the end of}} the flyoff competition, the XSO2U-1 {{was used}} as a general utility {{aircraft}} and hack by the Navy, before being supplied to the Ranger Engine Corporation in July 1942 for use in tests of the V-770 engine. These tests were intended to assist in <b>debugging</b> the engine for the Bell XP-77 lightweight fighter and Edo XOSE floatplane, but the V-770 remained troublesome, and after two years of testing the XSO2U was returned to the Navy. Having no further use for the aircraft, the XSO2U-1 was removed from the Navy's rolls on 6 July 1944, being subsequently scrapped.|$|E
5|$|On graduation, Kilburn was {{recruited}} by C.P. Snow. He {{was given a}} quick course in electronics, and was posted to the Telecommunications Research Establishment (TRE) in Malvern, where he worked on radar in Group 19 under Frederic Calland Williams. The group was responsible for designing and <b>debugging</b> electronic circuitry. Although Williams was initially disappointed at being given someone with so little practical experience, Kilburn became a valued member of the team. On 14 August 1943, he married Irene Marsden, a shop assistant. They went on to raise a son, John, and a daughter, Anne.|$|E
50|$|<b>Debug</b> mode is also entered asynchronously by the <b>debug</b> module {{triggering}} a watchpoint or breakpoint, or by issuing a BKPT (breakpoint) instruction from the software being <b>debugged.</b> When {{it is not}} being used for instruction tracing, the ETM can also trigger entry to <b>debug</b> mode; it supports complex triggers sensitive to state and history, {{as well as the}} simple address comparisons exposed by the <b>debug</b> module. Asynchronous transitions to <b>debug</b> mode are detected by polling the DSCR register. This is how single stepping is implemented: HALT the core, set a temporary breakpoint at the next instruction or next high-level statement, RESTART, poll DSCR until you detect asynchronous entry to <b>debug</b> state, remove that temporary breakpoint, repeat.|$|R
40|$|The kernel is {{sprinkled}} with <b>debug</b> statements {{that are only}} available by individually re-compiling the various subsystems of the kernel. In addition, each subsys-tem has its own rules and methods for expressing these <b>debug</b> statements- dprintk(), DEBUGP(), pr_ <b>debug(),</b> etc. Dynamic <b>debug,</b> introduced in ker-nel 2. 6. 28, organizes these <b>debug</b> statements and makes them available at run-time. Statements can be enabled on an individual basis, or via higher level organizations such as per-module. Dynamic <b>debug</b> {{can be thought of}} as a verbose mode for the kernel. We explore the design, usage, and performance impact of this new feature. We also highlight issues that have been <b>debugged</b> with this methodology and future work. ...|$|R
5000|$|Readily-accessible <b>debug</b> {{interfaces}} are {{not available}} at the product’s final form factor. This hampers the identification of bugs and performance optimization in the end product. Since the <b>debug</b> logic is still present in the end product, an alternative access path is needed. An effective way is to equip a mobile terminal´s standard interface with a multiplexer that allows accessing the <b>debug</b> logic. The switching between the interface´s native function and the <b>debug</b> function can be initiated by the connected <b>debug</b> tool or by the mobile terminal’s software.Standard <b>debug</b> tools can be used under the following conditions: ...|$|R
5|$|While this happens, Mickey, Donald, Goofy, and Jiminy are {{imported}} into the datascape by an avatar of the journal's uncorrupted data, which {{takes the form}} of a virtual Riku, to better assist Data-Sora in <b>debugging</b> the journal. They discover that Pete and Maleficent have also entered the datascape to use it in their latest attempt at world domination. After Data-Sora has made significant headway into his mission, Maleficent destroys his Keyblade and kidnaps Data-Riku, but he continues through the datascape with the help of Donald and Goofy until he regains the ability to conjure the Keyblade. He then confronts Pete at the top of Hollow Bastion.|$|E
5|$|At Tabata's suggestion, Naora {{expanded}} the color palette {{to increase the}} game's realism and tie in with XVs art style. The original idea was to change the original red hue to a golden one to match the redone logo, but the graphics looked too dark on the large screen even with the adjustment, so blue tones were added to brighten up the scenery. Additional bass sounds {{were added to the}} sound effects, as the original platform's speaker system had previously limited the range and strength of sounds. The original camera behavior needed to be developed from scratch, as the camera angles used in the original looked out of place on the large screen. During the run-up to release, the team made modifications to the camera after receiving negative comments during demonstrations, addressing scenery collisions and the visibility of player and enemy characters during active gameplay. Because of these modifications, character speed and movement could be increased and improved. By December 2014, the game was in its final stages of development and undergoing <b>debugging.</b>|$|E
5|$|In January 2013, a {{privilege}} escalation exploit {{was discovered in}} the Windows kernel that can allow unsigned code to run under Windows RT; the exploit involved {{the use of a}} remote <b>debugging</b> tool (provided by Microsoft to debug WinRT apps on Windows RT devices) to execute code which changes the signing level stored in RAM to allow unsigned code to execute (by default, it is set to a level that only allows code signed by Microsoft to execute). Alongside his explanation of the exploit, the developer also included a personal appeal to Microsoft urging them to remove the restrictions on Windows RT devices, contending that their decision was not for technical reasons, and that the devices would be more valuable if this functionality were available. In a statement, a Microsoft spokesperson applauded the effort, indicating that the exploit does not pose a security threat because it requires administrative access to the device, advanced techniques, and would still require programs to be re-compiled for ARM. However, Microsoft has still indicated that the exploit would be patched in a future update.|$|E
5000|$|<b>Debug</b> data {{generation}} {{if required}} so the code can be <b>debugged.</b>|$|R
40|$|The size of on-chip trace buffers {{used for}} at-speed sili-con <b>debug</b> limits the {{observation}} window in any <b>debug</b> ses-sion. Whenever the <b>debug</b> experiment can be repeated, we propose a novel architecture for at-speed silicon <b>debug</b> that enables a methodology where the designer can iteratively zoom {{only in the}} intervals containing erroneous samples. When compared to increasing {{the size of the}} trace buffer, the proposed architecture has a small impact on silicon area, while signicantly reducing the number of <b>debug</b> sessions. 1...|$|R
5000|$|TEE TA <b>Debug</b> Specification v1.0 {{specifies}} the GlobalPlatform TEE <b>debug</b> interfaces and protocols.|$|R
5|$|Planning began a {{month before}} the {{original}} Dragon Quest was released. One major goal was the development of a more exciting combat system, which was inspired by similar multi-character party systems such as the one found in Wizardry. The artwork that was used {{as the basis for the}} characters and monsters was painted by Akira Toriyama and then translated into pixel art. The game was hit with delays due to game balance, which were only fully corrected in the early sections of the game. This, combined with a staff that included students not familiar with the coding and <b>debugging</b> process, pushed back the release by a month. The developers also had many ideas that had to be discarded due to the technical limitations of the Famicom system, though some were later incorporated into subsequent remakes and the game's sequel, Dragon Quest III.|$|E
5|$|The {{game was}} {{developed}} by KID, with direction by Takumi Nakazawa, planning and scenario writing by Kotaro Uchikoshi, character design by Yuu Takigawa, and music by Takeshi Abo. Nakazawa and Uchikoshi were appointed to their respective positions as they had worked on the previous game in the Infinity series, , which had been well received. As Ever 17 was to be released on consoles, it was required to be finished {{two months before the}} planned August release, meaning that after the scenario's completion in May, there was only time for <b>debugging</b> until late June. Uchikoshi and Nakazawa described this as a tight development schedule, and said that the game was only possible through the staff working very hard, and a lot of things being worked on at the same time.|$|E
5|$|When he proves {{unable to}} defeat Data-Sora himself, Pete infects Data-Riku's code with bugs and forces him to fight, putting the datascape {{in danger of}} being totally corrupted. Seeing no alternative, Data-Sora chooses to debug Data-Riku from inside, an act which will cause the datascape to reset if he succeeds, wiping his memories. The <b>debugging</b> process also {{activates}} the bug responsible for the data's corruption, which takes the form of Sora's Heartless. Data-Sora destroys the bug while Mickey and the others are returned to their world by Data-Riku before the reset occurs. In a scene exclusive to HD 2.5 ReMix, after Maleficent and Pete take their leave, Maleficent speaks with Pete about the Book of Prophecies, an ancient artifact capable of transcribing events that have yet to take place and even conjuring them, including entire worlds; she resolves to find it, believing it may hold a connection with the datascape and the journal.|$|E
40|$|Abstract—A {{large part}} of a modern SOC’s <b>debug</b> {{complexity}} resides in {{the interaction between the}} main system components. Transaction-level <b>debug</b> moves the abstraction level of the <b>debug</b> process up from the bit and cycle level to the transactions between IP blocks. In this paper we raise the <b>debug</b> abstraction level further, by utilising structural and temporal abstraction techniques, combined with <b>debug</b> data interpretation and logical communication views. The combination of these techniques and views allow us, among others, to single-step and observe the operation of the network on a per-connection basis. As an example, we show how these higher-level abstractions have been implemented in the <b>debug</b> environment for the Æthereal NOC architecture and present a generic <b>debug</b> API, which can be used to visualise an SOC’s state at the logical communication level. I...|$|R
5000|$|... <b>Debug</b> Status and Control Register (DSCR), 32 bits used {{to operate}} the <b>debug</b> {{facilities}} ...|$|R
40|$|Network-on-Chip (NoC) is {{generally}} regarded as the most promising solution for the future on-chip communication scheme in gigascale integrated circuits. As traditional <b>debug</b> architecture for busbased systems is not readily applicable to identify bugs in NoC-based systems, in this paper, we present a novel <b>debug</b> platform that supports concurrent <b>debug</b> access to the cores under <b>debug</b> (CUDs) and the NoC in a unified architecture. By introducing core-level <b>debug</b> probes in between the CUDs and their network interfaces and a system-level <b>debug</b> agent controlled by an off-chip multi-core <b>debug</b> controller, the proposed <b>debug</b> platform provides in-depth analysis features for NoC-based systems, such as NoC transaction analysis, multi-core cross-triggering and global synchronized timestamping. Therefore, the proposed solution is expected to facilitate the designers to identify bugs in NoC-based systems more effectively and efficiently. Experimental {{results show that the}} design-for-debug cost for the proposed technique in terms of area and traffic requirements is moderate 1. ...|$|R
5|$|At E3 2013, Sakurai {{stated that}} the {{tripping}} mechanic introduced in Brawl had been omitted, with him also stating that the gameplay was between the fast-paced and competitive style of Melee and the slower and more casual style of Brawl. While the game does not feature cross-platform play between the Wii U and 3DS, due to each version featuring certain exclusive stages and gamemodes, there is the option to transfer customized characters and items between the two versions. The game builds upon the previous game's third-party involvement {{with the addition of}} third-party characters such as Capcom's Mega Man and Bandai Namco's Pac-Man, as well as the return of Sega's Sonic the Hedgehog. This involvement expands beyond playable characters, as other third-party characters, such as Ubisoft's Rayman, are also included in the game as trophies. The addition of Mii characters was made in response to the growing number of requests from fans to have their dream characters included in the game. To prevent potential bullying, as well as to maintain game balance online, Mii Fighters cannot be used in online matches against strangers. The decision to release the Wii U version at a later date from the 3DS version was made to allow each version to receive a dedicated <b>debugging</b> period. Hardware limitations on the Nintendo 3DS led to various design choices, such as the removal of mid-match transformations, the lack of Circle Pad Pro support, and the absence of the Ice Climbers, from the NES game Ice Climber, who were previously playable in both Melee and Brawl.|$|E
5|$|At E3 2013, Sakurai {{stated that}} the {{tripping}} mechanic introduced in Brawl was removed, with him also stating that the gameplay was between the fast-paced and competitive style of Melee and the slower and more casual style of Brawl. While the games didn't feature cross-platform play between the Wii U and 3DS, due to each version featuring certain exclusive stages and gamemodes, there is an option to transfer customized characters and items between the two versions. The game builds upon the previous game's third-party involvement {{with the addition of}} third-party characters such as Capcom's Mega Man and Bandai Namco's Pac-Man, as well as the return of Sega's Sonic the Hedgehog. This involvement expands beyond playable characters, as other third-party characters, such as Ubisoft's Rayman, are also included in the game as trophies. The addition of Mii characters was made in response to the growing number of requests from fans to have their dream characters included in the game. To prevent potential bullying, as well as to maintain game balance online, Mii Fighters cannot be used in online matches against strangers. The decision to release the Wii U version at a later date from the 3DS version was made to allow each version to receive a dedicated <b>debugging</b> period. Hardware limitations on the Nintendo 3DS led to various design choices, such as the removal of mid-match transformations, the absence of the Ice Climbers, and the lack of Circle Pad Pro support.|$|E
5|$|In November 2008, after Sakurai {{was given}} the go-ahead to develop Uprising, he rented out an office in Takadanobaba, a {{district}} of Tokyo. At this stage, due to the game's platform still being in early development, there were no development tools available for Sakurai to use. Between November and March 2009, Sakurai finalized his vision for the game. During this period, to help design the game's settings and characters, Sakurai hired several outside illustrators to work on concept art: these artists were Toshio Noguchi, Akifumi Yamamoto and Masaki Hirooka. The art style was inspired by manga. In January 2009, development studio Project Sora was established for Uprisings development. At its inception, it had a staff of 30. With the start of active recruitment in March 2009, the game officially entered development: at the time, {{it was the very}} first game to be in development for the new platform. During this early stage, {{due to the lack of}} platform specific development tools, the team were developing the game on Wii hardware and personal computers. The changing specifications of the developing hardware resulted in multiple features undergoing major revisions. This hardware instability led to a protracted development cycle: in the event, the team managed to fully utilize the platform's capabilities, doing detailed work on how many enemies they could show on the screen at any one time. <b>Debugging</b> also took a long time due to the size and variability of gameplay built into Uprising.|$|E
5000|$|JTAG and 2-pin SWD <b>debug</b> {{interface}} with Serial Wire Trace and power <b>debug</b> and profiling ...|$|R
40|$|Abstract — On-chip <b>debug</b> is an {{important}} technique to detect and locate the faults in the practical software applications. Scalability and reusability are the essential features of Systemon-Chip (SoC). Therefore, the <b>debug</b> architecture should meet the requirement of those features. Furthermore, {{it is necessary for}} applications developers to communication with the SoC chip on-line. In this paper, we present the novel <b>debug</b> architecture to solve above problems. The <b>debug</b> architecture has been implemented in a typical SoC chip. The results of performance analysis show that the <b>debug</b> architecture has high performance at the cost of few resources and area. I...|$|R
5000|$|The <b>debug</b> {{protocol}} {{is wrapped}} into dedicated I3C CCC commands. Supported <b>debug</b> protocols are JTAG, ARM CoreSight and Intel EXI.|$|R
