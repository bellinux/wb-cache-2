3|1|Public
40|$|We study Differential Privacy in the {{abstract}} setting of Probability on metric spaces. Numerical, categorical and functional data can be handled {{in a uniform manner}} in this setting. We demonstrate how mechanisms based on <b>data</b> <b>sanitisation</b> and those that rely on adding noise to query responses fit within this framework. We prove that once the sanitisation is differentially private, then so is the query response for any query. We show how to construct sanitisations for high-dimensional databases using simple 1 -dimensional mechanisms. We also provide lower bounds on the expected error for differentially private sanitisations in the general metric space setting. Finally, we consider the question of sufficient sets for differ- ential privacy and show that for relaxed differential privacy, any algebra generating the Borel ơ-algebra is a sufficient set for relaxed differential privacy...|$|E
40|$|Despite {{the variety}} of tools and {{techniques}} deployed {{in order to protect}} sensitive data, ranging from security types in programming languages to anonymity protocols, <b>data</b> <b>sanitisation,</b> cryptographic algorithms,..., real-world systems tend to disclose part of the information they are meant to protect. This happens either by design - when the output of the system is public (e. g. a password checker) - or for reasons depending on their actual deployment and implementation (e. g. side-channel attacks against cryptographic devices). Our work aims to study methods for analysing from a quantitative point of view the behaviour of information flow in computing systems, that is, the leakage of sensible information via public outputs. In general, we are interested in studying systems with a probabilistic behaviour, in situations where the attacker is allowed to run these systems several times, while the secret is kept fixed. We analyse quantitative information flow in various scenarios characterised by an increasing power of the adversary. We start from the case of a single, passive attacker, attempting to break the system solely based upon observed data. Then we examine more complex settings, where we are faced with adversaries that collect sequential observations, up to considering active adversaries, capable of directly interacting with the system. In all cases, we consider one-try re-execution attacks, where the adversary can make a single guess after observing a certain number of independent executions of the system. In particular, we define suitable security metrics and study their asymptotic behaviour as the number of observations increases, as well as their rate of convergence. We also consider a number of applications of our analysis techniques...|$|E
40|$|Cloud {{computing}} can {{be considered}} as “Computing as Utility”, offering on-demand and “pay as you go” services that provides business benefits due to scalability and elasticity features. Nowadays, the cloud computing model is the focus of great attention since these benefits allow reduction in the user’s capital costs. Moreover, users only need to invest limited up-front costs (Armbrust et al., 2010) since it is better for users to outsource the additional resources required from the Cloud Service Provider (CSP) rather than develop their own IT infrastructure (Kim et al., 2009). As a result, cloud computing allows users to reduce their service costs and focus on their core business (Khorshed et al., 2012). Despite the aforementioned benefits, the Industry and IT user community have concerns about the security and privacy risks inherent in storing their valuable information on the CSP premises (Zardari and Bahsoon, 2011, CSA, 2011). Internal attacks in the public cloud are security threats affecting the customer data in terms of data confidentiality (Winkler, 2011). Malicious insiders such as the CSP itself or system administrators can abuse of their full privileged access to misuse customer data (Cong Wang et al., 2010). Therefore, {{it is important to consider}} protection mechanisms of valuable customer data whilst stored on the CSP premises (Yau and An, 2010). There are not available solution to protect customer data at rest on CSP premises similar than to protect data in transit (Rjaibi et al., June 2013). Actually, no documentation by Google has been found that suggests how to deploy a solution in GAE using Python to overcome the aforementioned problem. It has been found, as expected, that client-side encryption help to protect data confidentiality in the cloud because CSPs are not directly able to see customer data stored on their premises. In addition, it helps to prevent unauthorised disclosure of data when <b>data</b> <b>sanitisation</b> is not granted. On the other hand, the results also shown the critical importance of key management as well as the overhead created in terms of data stored on cloud premises and the computing resources consumed on the end-point device...|$|E
40|$|Fault-injection is an {{indispensable}} tool {{to measure the}} resilience of software systems and to assess the effectiveness of methods that aim to improve reliability and performance. In this paper we review several approaches for the generation of test-beds for service-oriented architectures (SOAs). We point out the type and amount of data needed to parameterise such test-beds and identify requirements on fault data. We argue that abstract fault models are more useful for fault-injection experiments than raw <b>data.</b> Consequently, <b>sanitisation</b> on <b>data</b> should be performed by deriving abstract models. 1...|$|R

