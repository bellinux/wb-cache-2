1|7979|Public
40|$|The {{owners of}} a house in today’s society do not know in {{real-time}} how much electricity they use. It could be beneficial for any residential consumer to have more control and overview in real-time over the electricity consumption. This could be done possible with a system that monitors the consumptions, micro renewables and the electricity prices from the grid and then makes a decision to either use or sell electricity to reduce the monthly electricity cost for the household and living a "Greener" life to reduce carbon emissions. In this thesis, estimations are made based on artificial neural network (ANN). The predictions are made for air temperature, solar insolation and wind speed in order {{to know how much}} energy will be produced in the next 24 hours from the solar panel and from the wind turbine. The predictions are made for electricity consumption in order to know how much energy the house will consume. These predictions are then used as an input to the system. The system has 3 controls, one to control the amount of sell or buy the energy, one to control the amount of energy to charge or discharge the fixed battery and one to control the amount of energy to charge or discharge the electric vehicle (EV). The output from the system will be the decision for the next 10 minutes for each of the 3 controls. To study the reliability of the ANN estimations, the ANN estimations (SANN) are compared with the real data (Sreal) and other estimation based on the mean values (Smean) of the previous week. The simulation during a day in January gave that the expenses are 0. 6285 € if using SANN, 0. 7788 € if using Smean and 0. 5974 € if using Sreal. Further, 3 different cases are considered to calculate the savings based on the ANN estimations. The first case is to have the system connected with <b>fixed</b> <b>storage</b> <b>device</b> and EV (Scon;batt). The second and third cases are to have the system disconnected (without fixed battery) using micro generation (Sdiscon;micro) and not using micro generation (Sdiscon) along with the EV. The savings are calculated as a difference between Scon;batt and Sdiscon, also between Sdiscon;micro and Sdiscon. The saving are 788. 68 € during a year if Scon;batt is used and 593. 90 € during a year if Sdiscon;micro is used. With the calculated savings and the cost for the equipment, the pay-back period is 15. 3 years for Scon;batt and 4. 5 years for Sdiscon;micro. It is profitable to only use micro generation, but then the owner of the household loses the opportunity to be part of helping the society to become "Greener". ...|$|E
50|$|XAM, or the eXtensible Access Method, is {{a storage}} {{standard}} developed and {{maintained by the}} Storage Networking Industry Association (SNIA). It {{is in the process}} of being ratified as an ANSI standard. XAM is an API for <b>fixed</b> content aware <b>storage</b> <b>devices.</b> XAM replaces the various proprietary interfaces that have been used for this purpose in the past. Content generating applications now have a standard means of saving and finding their content across a broad array of <b>storage</b> <b>devices.</b>|$|R
40|$|International audienceIn recent years, an {{increasing}} number of portable devices with large amounts of storage have become widely used. In this paper, we present the early design of the FEW system, a system that aims to ease file management in the new mobile environment. To this end, the system will manage file replicas stored in <b>fixed</b> and portable <b>storage</b> <b>devices.</b> It will provide an automatic mechanism to establish new file replicas by analyzing file system activity. The system will automatically and incrementally synchronize all file replicas exploring the available network connectivity and the availability of portable <b>storage</b> <b>devices.</b> To merge concurrent updates, operational transformation techniques will be used...|$|R
40|$|Comunicação apresentada ao International Workshop on Software Support for Portable Storage (IWSSPS), San Francisco, 2005. In recent years, an {{increasing}} number of portable devices with large amounts of storage have become widely used. In this paper, we present the early design of the FEW system, a system that aims to ease file management in the new mobile environment. To this end, the system will manage file replicas stored in <b>fixed</b> and portable <b>storage</b> <b>devices.</b> It will provide an automatic mechanism to establish new file replicas by analyzing file system activity. The system will automatically and incrementally synchronize all file replicas exploring the available network connectivity and the availability of portable <b>storage</b> <b>devices.</b> To merge concurrent updates, operational transformation techniques will be used. FCT/MCES POSI/FEDER - Project # 59064 / 2004...|$|R
40|$|Abstract. Seed-filling {{device of}} plot seeder is the {{research}} object. Influences {{of the four}} test factors (motion velocity (v), rotation speed of filling device (ω), generatrix length of seed-filling device (l), base angle of seed-filling device (α)) on the uniformity in seeding-filling process for wheat seed are analyzed by DPS 7. 05. The effect order of four test factors on wheat seed is obtained. Optimum parameters for wheat seed established are as follows: motion velocity of plot seeder 0. 4 m/s, rotation speed of seed-filling device 0. 25 rad/s, generatrix length of seed-filling device 0. 1 m, base angle of seed-filling device 50 º. The best plot length for the seed-filling device is 10 m and the best CV in seed-filling process for wheat seed is 7. 85 % when seeding rate for wheat seed are 180 g per plot. Working Process of Seed-Filling Device Main structure of plot seeder is as shown in Fig. 1. The operator places seed on the desk for supplying seed into <b>storage</b> <b>device</b> 3. With the vibration of plot seeder at work, seed in <b>storage</b> <b>device</b> by vibration gradually levels. <b>Storage</b> <b>device</b> 1 is lifted, and seed in <b>storage</b> <b>device</b> slides on conical surface of seed-filling device into every grids of grid plate when seed began to sow in the plot. Fig. 1 Main structure of plot seeder 1. lifting rod; 2. support <b>fixing</b> device; 3. <b>storage</b> <b>device...</b>|$|R
5000|$|For HDDs {{and similar}} {{electromechanical}} <b>storage</b> <b>devices,</b> the random IOPS numbers are primarily {{dependent upon the}} <b>storage</b> <b>device's</b> random seek time, whereas, for SSDs and similar solid state <b>storage</b> <b>devices,</b> the random IOPS numbers are primarily dependent upon the <b>storage</b> <b>device's</b> internal controller and memory interface speeds. On both types of <b>storage</b> <b>devices,</b> the sequential IOPS numbers (especially when using a large block size) typically indicate the maximum sustained bandwidth that the <b>storage</b> <b>device</b> can handle. Often sequential IOPS are reported as a simple MB/s number as follows: ...|$|R
40|$|Computer systems {{employ a}} storage {{hierarchy}} that {{is composed of}} many types of <b>storage</b> <b>devices</b> with dierent access costs. Upper level <b>storage</b> <b>devices</b> provide faster data accesses over lower level <b>storage</b> <b>devices.</b> Caching is a technique to place data on upper level <b>storage</b> <b>devices</b> to reduce data access latencies. Caching has been extensively applied to divers...|$|R
5000|$|GDPS/HyperSwap Manager: It {{is based}} on {{synchronous}} Peer to Peer Remote Copy (PPRC) technology for use within a single data center. Data is copied from the primary <b>storage</b> <b>device</b> to a secondary <b>storage</b> <b>device.</b> In {{the event of a}} failure on the primary <b>storage</b> <b>device,</b> the system automatically makes the secondary <b>storage</b> <b>device</b> the primary, usually without disrupting running applications.|$|R
50|$|SATA uses a {{point-to-point}} architecture. The {{physical connection}} between a controller and a <b>storage</b> <b>device</b> is not shared among other controllers and <b>storage</b> <b>devices.</b> SATA defines multipliers, which allows a single SATA controller port {{to drive up}} to fifteen <b>storage</b> <b>devices.</b> The multiplier performs the function of a hub; the controller and each <b>storage</b> <b>device</b> {{is connected to the}} hub. This is conceptually similar to SAS expanders.|$|R
40|$|Storage {{systems have}} <b>storage</b> <b>devices</b> which run real time {{embedded}} software. Most <b>storage</b> <b>devices</b> use C and occasionally C [...] {{to manage and}} control the <b>storage</b> <b>device.</b> Software for the <b>storage</b> <b>device</b> must meet the time and resource constraints of the <b>storage</b> <b>device.</b> The prevailing wisdom in the embedded world is that objects and in particular Java only work for simple problems and can not handle REAL problems, are too slow and can not handle time critical processing and are too big and can't fit in memory constrained systems...|$|R
40|$|Abstract – In {{a future}} {{electric}} power system, there will exist {{a lot of}} distributed energy resources such as energy <b>storage</b> <b>devices,</b> renewable generation and cogeneration in the demand side. A system operator can utilize the dis-tributed energy <b>storage</b> <b>devices</b> to control power flow of transmission networks and supply-demand balance con-cerned with bilateral transactions. For management of such distributed energy storage de-vices, a mobile agent which can migrate in computer net-works is available. This paper proposes an application of the mobile agent to management of the distributed <b>storage</b> <b>devices</b> for power flow control of transmission network. Management of distributed <b>storage</b> <b>devices</b> is done hierar-chically. On the transmission-level, the system operator controls power flows by using a lot of distributed <b>storage</b> <b>devices</b> connected in distribution networks. On distribu-tion-level, the mobile agent aggregates the information about such distributed <b>storage</b> <b>devices</b> and makes charge-discharge schedules of individual <b>storage</b> <b>devices.</b> The mobile agent is called <b>Storage</b> <b>Device</b> Management (SDM) Agent in this paper. A prototype of SDM Agent is devel-oped by using Java language...|$|R
40|$|An {{apparatus}} {{connected to}} an energy <b>storage</b> <b>device</b> for powering {{an electric motor}} and optionally providing a warming function for the energy <b>storage</b> <b>device</b> is disclosed. The apparatus includes a circuit connected to the electric motor and the energy <b>storage</b> <b>device</b> for generating a current. The apparatus also includes a switching device operably associated with the circuit for selectively directing the current {{to one of the}} electric motor and the energy <b>storage</b> <b>device...</b>|$|R
40|$|The lunar sample <b>storage</b> <b>device</b> {{is mainly}} {{used for the}} {{preparation}} of the lunar samples, observation, physical analysis and other work. The lunar samples and operating equipment are placed directly inside the <b>storage</b> <b>device.</b> The inside of the <b>storage</b> <b>device</b> is a high purity nitrogen environment to ensure that the sample is not contaminated by the Earth's environment. In order to ensure that the water and oxygen indicators in the <b>storage</b> <b>device</b> meet the sample requirements, a dynamic gas cycle is required between the <b>storage</b> <b>device</b> and the external purification equipment. However, the internal gas disturbance in the <b>storage</b> <b>device</b> can affect the operation of the sample. In this paper, the <b>storage</b> <b>device</b> model is established, and the tetrahedral mesh is established by Tetra/Mixed method. The influence of different inlet position and gas flow on the internal flow field disturbance is calculated, and the disturbed flow area should be avoided during the sampling operation...|$|R
5000|$|Object-based <b>storage</b> <b>devices</b> (OSD) {{as well as}} some {{software}} implementations (e.g., Caringo Swarm) manage metadata {{and data}} at the <b>storage</b> <b>device</b> level: ...|$|R
5000|$|Direct {{integration}} to {{any type}} and format of <b>storage</b> <b>device</b> typically categorized as IT-centric <b>storage</b> <b>devices</b> allowing limitless or near limitless storage expansion ...|$|R
50|$|A {{hardware}} write block (HWB) device {{shall not}} transmit a command to a protected <b>storage</b> <b>device</b> that modifies {{the data on}} the <b>storage</b> <b>device.</b>|$|R
5000|$|Secondary <b>storage</b> <b>device</b> versus {{tertiary}} <b>storage</b> <b>device</b> or nearline <b>storage</b> — storage {{that remains}} attached versus storage that is attached or detached as needed ...|$|R
40|$|A {{parabolic}} dish that concentrates sunlight into a thermal <b>storage</b> <b>device</b> may comprise an inexpensive, environmentally benign, clean cooking technology appropriate for developing countries. A Scheffler Solar reflector was constructed and a thermal <b>storage</b> <b>device</b> built to eventually be {{coupled with the}} Scheffler. We tested the heat flow in the thermal <b>storage</b> <b>device</b> with an electric heater, and wrote Python code that solves the heat diffusion in 1 D and 2 D in order to model heat flow in the thermal <b>storage</b> <b>device...</b>|$|R
40|$|Advances in {{mass storage}} {{technology}} are producing devices capable of holding terabytes of data. These new devices, often called tertiary <b>storage</b> <b>devices,</b> have dramatically different performance characteristics than magnetic disks. Conventional database systems include explicit dependen-cies on magnetic disk, {{and so are}} unsuited to manage tertiary <b>storage</b> <b>devices.</b> A layer of abstrac-tion has been introduced between the access methods and physical <b>storage</b> <b>devices</b> in POSTGRES. This abstraction layer supports the addition of tertiary storage. An example implementation of a tertiary <b>storage</b> <b>device</b> manager is presented. Finally, the architecture of a novel file system that takes advantage of POSTGRES database system services is discussed. This file system may use any of the <b>storage</b> <b>devices</b> managed by POSTGRES. 1...|$|R
50|$|With storage virtualization, {{multiple}} independent <b>storage</b> <b>devices,</b> even if {{scattered across}} a network, {{appear to be}} a single monolithic <b>storage</b> <b>device</b> and can be managed centrally.|$|R
30|$|The current {{world is}} {{in the age of}} big data where the total amount of global digital data is growing up at an {{incredible}} rate. This indeed necessitates a drastic enhancement on the capacity of conventional data <b>storage</b> <b>devices</b> that are, however, suffering from their respective physical drawbacks. Under this circumstance, it is essential to aggressively explore and develop alternative promising mass <b>storage</b> <b>devices,</b> leading to the presence of probe-based <b>storage</b> <b>devices.</b> In this paper, the physical principles and the current status of several different probe <b>storage</b> <b>devices,</b> including thermo-mechanical probe memory, magnetic probe memory, ferroelectric probe memory, and phase-change probe memory, are reviewed in details, as well as their respective merits and weakness. This paper provides an overview of the emerging probe memories potentially for next generation <b>storage</b> <b>device</b> so as to motivate the exploration of more innovative technologies to push forward the development of the probe <b>storage</b> <b>devices.</b>|$|R
40|$|An {{emerging}} storage technology, called MEMS-based storage, promises nonvolatile <b>storage</b> <b>devices</b> with ultrahigh density, high rigidity, a small form factor, and low cost. For these reasons, MEMS-based <b>storage</b> <b>devices</b> {{are suitable}} for battery-powered mobile systems such as PDAs. For deployment in such systems, MEMS-based <b>storage</b> <b>devices</b> must consume little energy. This work mainly targets reducing the energy consumption of this class of devices. We derive the operation modes of a MEMS-based <b>storage</b> <b>device</b> and systemically devise a policy in each mode for energy saving. Three types of policies are presented: power management, shutdown, and data-layout policy. Combined, these policies reduce the total energy consumed by a MEMS-based <b>storage</b> <b>device.</b> A MEMS-based <b>storage</b> <b>device</b> that enforces these policies comes close to Flash with respect to energy consumption and response time. However, enhancement on the device level is still needed; we present some suggestions to resolve this issue...|$|R
5000|$|Installed apps can {{be moved}} to a {{different}} <b>storage</b> <b>device</b> using the settings app. Furthermore, new apps can be set to automatically install on a selected <b>storage</b> <b>device.</b>|$|R
30|$|The above {{battery limits}} {{have been taken}} from [25], where SOCy(t) and SOCy(t −  1) are the state of charge of yth <b>storage</b> <b>device</b> at current and {{previous}} hour, respectively. Pchy(t) and Pdisy(t) are the charging and discharging rate during a defined interval Δt. Equation (12) and (13) represent the maximum and minimum charging limits of the <b>storage</b> <b>device</b> at hour t. mchy and mdisy are the binary variables and Eq. (14) indicates that charging and discharging of the <b>storage</b> <b>device</b> cannot take place simultaneously. ηchy and ηdisy are charging and discharging efficiencies of the <b>storage</b> <b>device.</b>|$|R
40|$|MEMS-based <b>storage</b> <b>devices</b> promise {{significant}} performance, reliability, {{and power}} improvements relative to disk drives. This paper compares and contrasts these two storage technologies and explores how the physical characteristics of MEMS-based <b>storage</b> <b>devices</b> change four aspects of operating system (OS) management: request scheduling, data placement, failure management, and power conservation. Straightforward adaptations of existing disk request scheduling algorithms {{are found to}} be appropriate for MEMS-based <b>storage</b> <b>devices.</b> A new bipartite data placement scheme is shown to better match these devices 2 ̆ 7 novel mechanical positioning characteristics. With aggressive internal redundancy, MEMS-based <b>storage</b> <b>devices</b> can mask and tolerate failure modes that halt operation or cause data loss for disks. In addition, MEMS-based <b>storage</b> <b>devices</b> simplify power management because the devices can be stopped and started rapidly...|$|R
40|$|We {{study the}} issues {{relating}} to coding for a proposed high-density storage system consisting of an array of <b>storage</b> <b>devices.</b> The <b>storage</b> <b>devices</b> store data in a two-dimensional (2 -D) manner. The data on each <b>storage</b> <b>device</b> is encoded using an inner code; coding across the devices uses an outer code. Array codes are {{shown to be a}} good choice for the outer codes and low-density parity-check codes for the inner codes. The read-back data from the <b>storage</b> <b>devices</b> has 2 -D intersymbol interference. Joint equalization and decoding methods are used for detection and decoding on each <b>storage</b> <b>device.</b> The issue of the trade o# between decoding performance and passing soft or hard information from the inner code to the outer code is also discussed...|$|R
50|$|The FireWire SBP-2 fabric module enables Linux {{to export}} local <b>storage</b> <b>devices</b> via IEEE 1394, so that other systems can mount {{them as an}} {{ordinary}} IEEE 1394 <b>storage</b> <b>device.</b>|$|R
50|$|The SAN is a {{dedicated}} network that enables multiple servers to access data {{from one or}} more <b>storage</b> <b>devices.</b> Enterprise <b>storage</b> uses the SAN to backup to secondary <b>storage</b> <b>devices</b> including disk arrays, tape libraries, and other backup while the storage is still accessible to the server. Servers may access storage from multiple <b>storage</b> <b>devices</b> over the network as well.|$|R
5000|$|... bcache (abbreviated from block cache) is a cache in the Linux kernel's block layer, {{which is}} used for {{accessing}} secondary <b>storage</b> <b>devices.</b> It allows one or more fast <b>storage</b> <b>devices,</b> such as flash-based solid-state drives (SSDs), {{to act as a}} cache for one or more slower <b>storage</b> <b>devices,</b> such as hard disk drives (HDDs); this effectively creates hybrid volumes and provides performance improvements.|$|R
40|$|The use of {{flash memory}} based <b>storage</b> <b>devices</b> is rapidly increasing, and user demands for high {{performance}} are also constantly increasing. The {{performance of the}} flash <b>storage</b> <b>device</b> is greatly influenced by cleaning operations of Flash Translation Layer (FTL). Various {{studies have been conducted}} to lower the cost of cleaning operations. However, there are limits to achieve sufficient performance improvement of flash storages without help of a host system, with only limited information in <b>storage</b> <b>devices.</b> Recently, SCSI, eMMC, and UFS standards provide an interface for sending semantic information from a host system to a <b>storage</b> <b>device.</b> In this paper, we analyze effects of semantic information on performance and lifetime of flash <b>storage</b> <b>devices.</b> We evaluate performance and lifetime improvement through SA-FTL (Semantic Aware Flash Translation Layer), which can take advantage of semantic information in <b>storage</b> <b>devices.</b> Experiments show that SA-FTL improves performance and lifetime of flash based storages by up to 30 and 35 %, respectively, compared to a simple page-level FTL...|$|R
50|$|The USB Gadget fabric module enables Linux {{to export}} local <b>storage</b> <b>devices</b> via the Universal Serial Bus (USB), so that other systems can mount {{them as an}} {{ordinary}} <b>storage</b> <b>device.</b>|$|R
50|$|In a multi-boot {{computer}} each of {{the multiple}} operating systems can reside on its own <b>storage</b> <b>device,</b> or some <b>storage</b> <b>devices</b> might contain more than one operating system in different partitions.|$|R
50|$|While most {{magnetic}} <b>storage</b> <b>devices</b> {{have been}} replaced by optical <b>storage</b> <b>devices</b> such as CDs and DVDs, some are still in use today. In fact, the floppy drive is one example of a magnetic <b>storage</b> <b>device</b> that became extremely popular in the 1970s through the 1990s. Floppy disks have for years been used by millions of people to back up the information on their hard drives.|$|R
40|$|A circuit {{for heating}} an energy <b>storage</b> <b>device</b> is disclosed. The circuit {{includes}} a switching device having a closed state {{and an open}} state. The circuit also includes a storage circuit for storing energy. The storage circuit has a resonating frequency. A controller is provided for operating the switching device. In operation, energy is transferred from the energy <b>storage</b> <b>device</b> to the <b>storage</b> circuit while the switching device is in the open state, and returned from the storage circuit to the energy <b>storage</b> <b>device</b> while the switching device is in the closed state. This energy transfer causes warming of the energy <b>storage</b> <b>device...</b>|$|R
5000|$|Multiplexing : When {{there are}} many more {{computers}} to be backed up than there are destination <b>storage</b> <b>devices,</b> the ability to use a single <b>storage</b> <b>device</b> with several simultaneous backups can be useful.|$|R
50|$|In RAID, the {{redundancy}} {{exists in}} a layer transparent to the storage-using application. While there are two <b>storage</b> <b>devices,</b> {{there is only one}} instance of the application and the application is not aware of multiple copies. When the application reads, the RAID layer chooses the <b>storage</b> <b>device</b> to read. When a <b>storage</b> <b>device</b> fails, the RAID layer chooses to read the other, without the application instance knowing of the failure.|$|R
