109|510|Public
5|$|WebObjects {{failed to}} achieve wide {{popularity}} {{partly because of the}} initial high price of US$50,000, but it remains the first and most prominent early example of a web application server that enabled <b>dynamic</b> <b>page</b> generation based on user interactions as opposed to static content. WebObjects is now bundled with macOS Server and Xcode.|$|E
5|$|NeXT later {{released}} {{much of the}} NeXTSTEP {{system as}} a programming environment standard called OpenStep. NeXT withdrew from the hardware business in 1993 to concentrate on marketing OPENSTEP for Mach, its own OpenStep implementation, for several OEMs. NeXT also developed WebObjects, {{one of the first}} enterprise Web application frameworks. WebObjects never became very popular because of its initial high price of $50,000, but it remains a prominent early example of a Web server based on <b>dynamic</b> <b>page</b> generation rather than on static content.|$|E
25|$|In France, {{where the}} SECAM {{standard}} {{is used in}} television broadcasting, a teletext system {{was developed in the}} late 1970s under the name Antiope. It had a higher data rate and was capable of <b>dynamic</b> <b>page</b> sizes, allowing more sophisticated graphics. It was phased out in favour of standard teletext in 1991.|$|E
40|$|Abstract — In {{order to}} improve system performance, many modern {{processors}} support superpage technology, which is also called variable page. It improves TLB coverage greatly without increasing TLB size. But superpaging is a great challenge for operating systems. In this paper we implement <b>dynamic</b> variable <b>page</b> technology. The <b>dynamic</b> <b>paging</b> choose proper size page according to the application program address space size. The number of TLB misses can reduced for large programs like large matrix multiplication. The performance of system can be improved by using <b>dynamic</b> variable <b>paging</b> by some number of percentage. The overall result {{will depend on the}} simulation process on a system using <b>dynamic</b> variable <b>page</b> sizes as 4 KB, 16 KB, 64 KB etc. Page size depend on the program code e. g. small page size for small code and large page size for a huge computation or instructions code. Keywords—TLB, superpage, <b>page</b> replacement, thrashing, <b>dynamic</b> <b>paging,</b> page fault. I...|$|R
40|$|Web server {{performance}} {{is a critical}} issue for sites which service a high volume of requests. This paper examines the performance of Web servers under high CPU loads. Simulations are {{used in conjunction with}} workloads which were obtained by analyzing Web logs and performance data from several real sites. Performance is significantly affected by the percentage of requests for dynamic HTML pages; <b>dynamic</b> HTML <b>pages</b> adversely affect server performance. In order to optimize performance, the number of <b>dynamic</b> <b>pages</b> should be kept as low as possible. When <b>dynamic</b> <b>pages</b> are required, techniques such as fast API's for invoking server programs and caching can be employed to keep the overhead of server programs generating the <b>dynamic</b> <b>pages</b> as low as possible. When the server is operating at or near peak capacity, there is a trade-off between average latencies and the percentage of requests rejected; {{performance is}} improved by rejecting a higher percentage of requests. For the real request distri [...] ...|$|R
5000|$|<b>Dynamic</b> <b>pages</b> {{that produce}} an {{unbounded}} number of documents for a web crawler to follow. Examples include calendars and algorithmically generated language poetry.|$|R
25|$|On the PC, {{efforts were}} more {{oriented}} to {{extensions of the}} original terminal concept, with the GUI being described in {{the information on the}} host. One example was the Remote Imaging Protocol, essentially a picture description system, which remained relatively obscure. Probably the ultimate development of this style of operation was the <b>dynamic</b> <b>page</b> implementation of the University of Southern California BBS (USCBBS) by Susan Biddlecomb, which predated the implementation of the HTML Dynamic web page. A complete Dynamic web page implementation was accomplished using TBBS with a TDBS add-on presenting a complete menu system individually customized for each user.|$|E
500|$|According to Ernesto Priego, {{while the}} work adapts a comic-book source, the {{painting}} is neither a comic nor a comics panel, and [...] "its meaning is solely referential and post hoc." [...] It directs the attention of its audience to features such as genre and printing methods. Visually and narratively, the original panel was the climactic element of a <b>dynamic</b> <b>page</b> composition. Lichtenstein emphasizes the onomatopoeia while playing down articulated speech by removing the speech balloon. According to Priego, [...] "by stripping the comics panel from its narrative context, Whaam! is representative {{in the realm of}} fine art of the preference of the image-icon over image-narrative".|$|E
50|$|Of {{particular}} note is {{its ability}} to load and manipulate JSON-encoded data sets, and MochiKit.DOM, a set of functions to easily create <b>dynamic</b> <b>page</b> components.|$|E
50|$|In {{the design}} process, <b>dynamic</b> <b>pages</b> are often mocked-up or wireframed using static pages. The skillset {{needed to develop}} <b>dynamic</b> web <b>pages</b> is much broader than for a static pages, {{involving}} server-side and database coding as well as client-side interface design. Even medium-sized dynamic projects are thus almost always a team effort.|$|R
50|$|Almost all {{websites}} {{have some}} static content, as supporting assets such as images and stylesheets are usually static, {{even on a}} website with highly <b>dynamic</b> <b>pages.</b>|$|R
40|$|Abstract. In {{this paper}} we propose a fragment-based caching system that aims at {{improving}} the performance of Webbased applications. The system fragments the <b>dynamic</b> <b>pages</b> automatically. Our approach consists in statically analyzing the programs that generate the <b>dynamic</b> <b>pages</b> rather than their output. This approach has the considerable advantage of optimizing the overhead due to fragmentation. Furthermore, we propose a mechanism that increases the reuse rate of the stored fragments, so that the site response time can be improved among other benefits. We validate our approach by using TPC-W as a benchmark. 1...|$|R
50|$|<b>Dynamic</b> <b>page</b> {{publishing}} is {{a method}} of designing publications in which layout templates are created which can contain different content in different publications. Using this method, page designers do not work on finished pages, but rather on various layout templates and pieces of content, which can then be combined to create a number of finished pages. In cases where the same content is being used in multiple layouts, the same layout is being used for several different sets of content, or both, <b>dynamic</b> <b>page</b> publishing can offer significant advantages of efficiency over a traditional system of page-by-page design.|$|E
50|$|Functional Testing: The tool {{provides}} test automation {{support for}} web and desktop applications - Silverlight, WPF, AJAX, HTML, WPF, and MVC, JavaScript calls, <b>dynamic</b> <b>page</b> synchronization, client-side behaviors, {{as well as}} support for Visual Studio 2010 and 2012.|$|E
5000|$|The [...] {{property}} (or write command) can {{illustrate the}} client-side <b>dynamic</b> <b>page</b> generation: two distinct pages, A and B, can be regenerated (by an [...] "event response dynamic") as [...] and or [...] "on load dynamic" [...] by [...] and [...]|$|E
40|$|A {{study from}} the Business Internet Group San Francisco (BIG-SF) [2, 3] found {{approximately}} 70 % of websites contain bugs and suffer some kind of failure; not only commercial websites but also US government managed websites. These faults reside in both static <b>pages</b> and <b>dynamic</b> <b>pages.</b> In this survey paper, we review how the existing web application testing methods test static and <b>dynamic</b> <b>pages.</b> It is our objective to better understand why testers are unable to reveal these faults. As a result, we suggest a novel approach for web applications testing...|$|R
5000|$|Crawler traps (e.g., calendars) {{may cause}} a crawler to {{download}} {{an infinite number}} of pages, so crawlers are usually configured {{to limit the number of}} <b>dynamic</b> <b>pages</b> they crawl.|$|R
40|$|Currently, {{information}} systems are usually supported by databases (DB) and accessed through a Web interface. Pages in such Web sites are not drawn from HTML files but are generated {{on the fly}} upon request. Indexing and searching such <b>dynamic</b> <b>pages</b> raises several extra difficulties not solved by most search engines, which were designed for static contents. In this paper we describe {{the development of a}} search engine that overcomes most of the problems for a specific Web site, how the limitations put to indexing <b>dynamic</b> Web <b>pages</b> were circumvented, and an evaluation of the results obtained. The solution involves using a locally developed crawler, the Oracle Text full text indexer, and meta-information automatically drawn from the DB or manually added to improve the relevance factor calculation. It has the advantage of uniformly covering the <b>dynamic</b> <b>pages</b> and the static Web pages of the site. Currently, {{information systems}} are usually supported by databases (DB) and accessed through a Web interface. Pages in such Web sites are not drawn from HTML files but are generated on the fly upon request. Indexing and searching such <b>dynamic</b> <b>pages</b> raises several extra difficulties not solved by most search engines, which were designed for static contents. In this paper we describe the development of a search engine that overcomes most of the problems for a specific Web site, how the limitations put to indexing <b>dynamic</b> Web <b>pages</b> were circumvented, and an evaluation of the results obtained. The solution involves using a locally developed crawler, the Oracle Text full text indexer, and meta-information automatically drawn from the DB or manually added to improve the relevance factor calculation. It has the advantage of uniformly covering the <b>dynamic</b> <b>pages</b> and the static Web pages of the site...|$|R
5000|$|Search {{results from}} social media such as Facebook and Tumblr {{are prone to}} link rot because of {{frequent}} changes in user privacy, the deletion of accounts, search result pointing to a <b>dynamic</b> <b>page</b> that has new results that differ from the cached result, or the deletion of links or photos.|$|E
50|$|In France, {{where the}} SECAM {{standard}} {{is used in}} television broadcasting, a teletext system {{was developed in the}} late 1970s under the name Antiope. It had a higher data rate and was capable of <b>dynamic</b> <b>page</b> sizes, allowing more sophisticated graphics. It was phased out in favour of standard teletext in 1991.|$|E
50|$|MantisBT {{is mainly}} written in PHP and uses SQL to {{interface}} with databases. The web-based user interface of MantisBT is written using HTML which is styled and presented using CSS. The UI also uses the jQuery client-side JavaScript library to provide optional features such as Ajax and JSON powered <b>dynamic</b> <b>page</b> content.|$|E
40|$|Many {{web sites}} {{incorporate}} <b>dynamic</b> web <b>pages</b> to deliver customized contents to their users. However, <b>dynamic</b> <b>pages</b> result in increased user response times {{due to their}} construction overheads. In this paper, we consider mechanisms for reducing these overheads by utilizing the excess capacity with which web servers are typically provisioned. Specifically, we present a caching technique that integrates fragment caching with anticipatory page pre-generation in order to deliver <b>dynamic</b> <b>pages</b> faster during normal operating situations. A feedback mechanism is used to tune the page pre-generation process to match the current system load. The experimental results from a detailed simulation study of our technique indicate that, given a fixed cache budget, page construction speedups of more than fifty percent can be consistently achieved as compared to a pure fragment caching approach...|$|R
40|$|More {{and more}} users use mobile devices to {{retrieve}} <b>dynamic</b> web <b>pages</b> in the wireless networks. Caching <b>dynamic</b> <b>pages</b> becomes very important {{due to the}} power constraint of mobile devices. In this paper, we first introduce a framework to cache and manage the <b>dynamic</b> web <b>pages</b> on the server side such that these <b>dynamic</b> <b>pages</b> can also be cached in the mobile devices. Then we propose a stateful IR-based approach which only records two numbers, the number of web pages updated {{and the number of}} web pages updated and also queried after they are updated on the server in an IR interval. Recording these two numbers dramatically reduces the IR size. The experiments show that our proposed approach combined with the Timestamp and UIR algorithms consumes the power around 40 ~ 47 % less than the original Timestamp and UIR. Also, our method performs better than the Perfect Server that has the full knowledge of the contents stored in all the mobile client’s caches in terms of power consumption...|$|R
5000|$|January 2012 - Teamwork 5.0 {{development}} started. Lighter interface, extensive {{usage of}} <b>dynamic</b> <b>pages,</b> easier installer and first time approach. Learning curve highly reduced. A jQuery Gantt editor included and released {{free for the}} community ...|$|R
50|$|WebObjects {{failed to}} achieve wide {{popularity}} {{partly because of the}} initial high price of US$50,000, but it remains the first and most prominent early example of a web application server that enabled <b>dynamic</b> <b>page</b> generation based on user interactions as opposed to static content. WebObjects is now bundled with macOS Server and Xcode.|$|E
50|$|The {{application}} supports {{static page}} generation (in which files for each page are updated whenever {{the content of}} the site is changed), <b>dynamic</b> <b>page</b> generation (in which pages are composited from the underlying data as the browser requests them), or {{a combination of the two}} techniques. Movable Type optionally supports LDAP for user and group management and automatic blog provisioning.|$|E
5000|$|Autodesk Toxik {{includes}} several {{features such as}} collaboration-based workflows, <b>dynamic</b> <b>page</b> zooming (that allows faster processing when working with larger video formats), a paint module, a motion path animation, and a [...] "Master Keyer" [...] module. Toxik is based on modules: small extensions that allow Toxik to be adaptive. All modules were installed in Toxik 2008 by default because the module selection system in Toxik 2007 was inefficient.|$|E
50|$|SPIP {{integrates}} a cache mechanism, an authentication system, {{an automatic}} setup module and an interface for administration and input of articles. SPIP can create <b>dynamic</b> <b>pages</b> without any PHP knowledge, using a web template system known as skeletons.|$|R
40|$|The Web has {{experienced}} phenomenal {{growth over the}} past few years, placing heavy load on Web servers. Today's Web servers also process an increasing number of requests for <b>dynamic</b> <b>pages,</b> making server load even more critical. The performance of Web servers delivering static pages is well-studied and well-understood. However, there has been little analytic or no empirical study of the performance of Web servers delivering <b>dynamic</b> <b>pages.</b> This paper focuses on experimentally measuring and analyzing the performance of the three <b>dynamic</b> Web <b>page</b> generation technologies: CGI, FastCGI and Servlets. In this paper, we present experimental results for Web server performance under CGI, Fast CGI and Servlets. Then, we develop an analytical model and predict Web server performance under some typical dynamic requests. We find that CGI and FastCGI perform effectively the same under most low-level benchmarks, while Servlets perform noticeably worse. Our analytic model shows the same deficiency in Serv [...] ...|$|R
5000|$|<b>Dynamic</b> content: <b>dynamic</b> <b>pages</b> {{which are}} {{returned}} {{in response to}} a submitted query or accessed only through a form, especially if open-domain input elements (such as text fields) are used; such fields are hard to navigate without domain knowledge.|$|R
50|$|NeXT later {{released}} {{much of the}} NeXTSTEP {{system as}} a programming environment standard called OpenStep. NeXT withdrew from the hardware business in 1993 to concentrate on marketing OPENSTEP for Mach, its own OpenStep implementation, for several OEMs. NeXT also developed WebObjects, {{one of the first}} enterprise Web application frameworks. WebObjects never became very popular because of its initial high price of $50,000, but it remains a prominent early example of a Web server based on <b>dynamic</b> <b>page</b> generation rather than on static content.|$|E
5000|$|Depending on {{the nature}} of the Ajax application, <b>dynamic</b> <b>page</b> updates may disrupt user interactions, {{particularly}} if the Internet connection is slow or unreliable. For example, editing a search field may trigger a query to the server for search completions, but the user may not know that a search completion popup is forthcoming, and if the Internet connection is slow, the popup list may show up at an inconvenient time, when the user has already proceeded to do something else.|$|E
50|$|With modern media content {{retrieval}} {{and output}} technology, {{there is much}} overlap between visual communications (front-end) and information technology (back-end). Large print publications (thick books, especially instructional in nature) and electronic pages (web pages) require meta data for automatic indexing, automatic reformatting, database publishing, <b>dynamic</b> <b>page</b> display and end-user interactivity. Much of the meta data (meta tags) must be hand coded or specified during the page layout process. This divides the task of page layout between artists and engineers, or tasks the artist/engineer to do both.|$|E
40|$|Representing web {{data into}} a machine {{understandable}} format is a curtail {{task for the}} next generation of the web. Most of current web <b>pages</b> are <b>dynamic</b> <b>pages.</b> A large percentage of these web pages get their contents from underlying database. This work proposes an approach to represent <b>dynamic</b> web <b>pages</b> into Concept Description Language (CDL) semantic format. This format does not depend on ontologies which are domain dependant. However, CDL describes semantic structure of web content based on a set of semantic relations. 1...|$|R
50|$|Rather than {{focusing}} on one programming style or paradigm, Falcon merges several different styles into a single framework. At the same time, it targets multiple application domains (stand-alone, embedded into other applications and server-side <b>dynamic</b> <b>pages),</b> merging them into a single hood of a common architectural design.|$|R
40|$|Abstract Haskell Server Pages (HSP) is {{a domain}} speci^c language, based on Haskell, for writing <b>dynamic</b> web <b>pages.</b> Its main {{features}} are concrete XML expressions as ^rst class values, pattern-matching on XML, and a runtime system for evaluating <b>dynamic</b> web <b>pages.</b> The ^rst design of HSP {{was made by}} Erik Meijer and Danny van Velzen in 2000, {{but it was never}} fully designed nor implemented. In this paper we re^ne, extend and improve their design of the language and describe how to implement HSP using <b>dynamic</b> loading of <b>pages.</b> Categories and Subject Descriptors D. 3. 2 [Language ClassiΘ cations]: Applicative (functional) languages General Terms Languages, Design Keywords Haskell, <b>dynamic</b> web <b>pages,</b> web server 1. Introduction Long {{gone are the days when}} the world wide web consisted mostly of static HTML <b>pages.</b> Today, <b>dynamic</b> web <b>pages,</b> i. e. programs that generate page contents on demand, are used for a multitude of purposes. They range from simple access counters to complete business applications built entirely on the web...|$|R
