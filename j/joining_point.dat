51|1231|Public
5|$|In addition, 'Adud al-Dawla is {{credited}} with sponsoring and patronizing other scientific projects during his time. An observatory was built by his orders in Isfahan where Azophi worked. Al-Muqaddasi also reports that he ordered {{the construction of a}} great dam between Shiraz and Estakhr in 960. The dam irrigated some 300 villages in Fars province and became known as Band-e Amir (Dam of the emir). Among his other major constructions was the digging of the Haffar channel, that joined the Karun river to the Shatt al-Arab river (the confluence of the Tigris and the Euphrates). The port of Khorramshahr was built on the Haffar, at its <b>joining</b> <b>point</b> with the Shatt al-Arab.|$|E
25|$|The {{diameter}} of the circle is the line <b>joining</b> <b>point</b> A and B. The centre of the circle is the intersection of this line with the -axis. Knowing both {{the location of the}} centre and length of the diameter, we are able to plot the Mohr circle for this particular state of stress.|$|E
50|$|The 89 sq. km. {{area between}} the western {{shoulder}} of the plateau and the <b>joining</b> <b>point</b> of the Doklam stream with the Amo Chu river is called Doklam ('rocky path').|$|E
40|$|<b>Join</b> <b>points</b> are the {{composition}} points where aspects are composed with the base system. In other words they are target hooks {{in the base}} system where aspect’s implementation is weaved in. <b>Join</b> <b>points</b> are not defined separately in aspect-oriented design rather a pointcut model is designed which consists of related <b>join</b> <b>points.</b> Grouping of related <b>join</b> <b>points</b> in a pointcut depends on designer’s intuition and corresponding aspect’s nature which makes some of the <b>join</b> <b>points</b> overlooked or not properly grouped with the related <b>join</b> <b>points.</b> This paper proposes {{a solution to this}} problem by providing design notations for representing <b>join</b> <b>points</b> in design. This kind of design of <b>join</b> <b>points</b> help designers design <b>join</b> <b>points</b> properly and group the related <b>join</b> <b>points</b> in one pointcut...|$|R
5000|$|... cflow poincuts {{identify}} <b>join</b> <b>points</b> {{based on}} whether they occur in the dynamic context of other <b>join</b> <b>points.</b> For example, in AspectJ syntax [...] picks out each <b>join</b> <b>point</b> that occurs in the dynamic context of the <b>join</b> <b>points</b> picked out by the move pointcut.|$|R
50|$|Join-point {{models can}} be {{compared}} based on the <b>join</b> <b>points</b> exposed, how <b>join</b> <b>points</b> are specified, the operations permitted at the <b>join</b> <b>points,</b> and the structural enhancements that can be expressed.|$|R
5000|$|Force fits are {{designed}} to maintain a controlled pressure between mating parts, and are used where forces or torques are being transmitted through the <b>joining</b> <b>point.</b> Like interference fits, force fits are achieved by applying a force during component assembly.FN 1 to FN 5 ...|$|E
50|$|Chowk Pindori, Sagri, and Kallar Syedan are {{the nearest}} towns. Rawat is also nearby town to reach GT road. Mankiala Joor Road {{is also an}} easy <b>joining</b> <b>point</b> for travel towards Gujar Khan. Bhatta, Aziz Pur Gujaran, Mohra Najar, Arazi Khas, Roopar, and Bishandot are nearby villages.|$|E
50|$|South Slavs {{are divided}} along {{linguistic}} lines into two groups: eastern (Bulgarian, Macedonian, Slavs of Greece) and western (Slovenes, Croats, Bosniaks, Serbs, Montenegrins). The Torlakian dialect is transitional and encompasses both sectors at the <b>joining</b> <b>point.</b> There {{are an estimated}} 35 million South Slavs and their descendants living worldwide.|$|E
40|$|In aspect-oriented programming, aspects require {{access to}} <b>join</b> <b>point</b> {{information}} for selecting <b>join</b> <b>points</b> within pointcuts {{as well as}} for specifying aspect-specific behavior at such <b>join</b> <b>points</b> within advice. Unfortunately, aspect-oriented systems typically provide only local information about <b>join</b> <b>points,</b> i. e. information that is directly accessible from the execution context at the corresponding <b>join</b> <b>points</b> like the target object within a method call. However, there are many situations where the needed information is not directly available and relies on object information that is non-local concerning the execution context at the corresponding <b>join</b> <b>points.</b> As a consequence, developers are forced to specify a number of work-arounds – pointcuts and advice that neither reflect on the conceptual <b>join</b> <b>point</b> selection nor purely on the conceptual aspect behavior. In this paper, we show recurring situations in which “local” <b>join</b> <b>point</b> information is not sufficient for specifying aspects. We propose so called “path expression pointcuts ” that permit to abstract over (non-local) object-relationships within pointcuts – and show that this overcomes the problem...|$|R
40|$|Aspect-oriented {{languages}} provide {{means to}} superimpose aspectual behavior {{on a given}} set of <b>join</b> <b>points.</b> It is possible that not just a single, but several units of aspectual behavior need to be superimposed on the same <b>join</b> <b>point.</b> Aspects that specify the superimposition of these units are said to "share" the same <b>join</b> <b>point.</b> Such shared <b>join</b> <b>points</b> may give rise to issues such as determining the exact execution order and the dependencies among the aspects. In this paper, we present {{a detailed analysis of}} the problem, and identify a set of requirements upon mechanisms for composing aspects at shared <b>join</b> <b>points.</b> To address the identified issues, we propose a general and declarative model for defining constraints upon the possible compositions of aspects at a shared <b>join</b> <b>point.</b> Finally, by using an extended notion of <b>join</b> <b>points,</b> we show how concrete aspectoriented programming languages, particularly AspectJ and Compose*, can adopt the proposed model...|$|R
5000|$|This {{effectively}} specifies: [...] "if the '''' pointcut {{matches the}} <b>join</b> <b>point,</b> run the code [...] after the <b>join</b> <b>point</b> completes." ...|$|R
5000|$|Hardin {{played in}} bands in Dallas, Oklahoma City and Tulsa {{in the late}} 1960s and early 1970s before <b>joining</b> <b>Point</b> Blank as a {{keyboard}} man in 1977. The band's next album release, Airplay, including his composition [...] "Mean to Your Queenie", which would become the band's trademark concert theme song.|$|E
50|$|Process-oriented sensors are {{acquiring}} their {{signals from}} the primary or secondary process parameters.Arc sensors are using the primary process parameters (weld current and/or voltage) of one moving or two unoscillated arcs for the generation of height and side/lateral correction signals.These sensors require, of course, also a scannable groove geometry; the measuring and the <b>joining</b> <b>point</b> are, however, compared with geometry-oriented sensors, located in the same position.|$|E
50|$|The {{representatives of}} Syrian Turkmen Assembly was {{constituted}} {{during the second}} organisation of Syrian Turkmen Platform on 30 March 2013, and that became the <b>joining</b> <b>point</b> of Syrian Turkmen National Bloc and Syrian Democratic Turkmen Movement, which are two different political movements of Syrian Turkmens. The assembly joined the two movements and with a joint agreement each movement {{have been given a}} region to focus.|$|E
40|$|Acharacteristic of aspect-oriented programming, as {{embodied}} in AspectJ, {{is the use}} of advice and pointcuts to define behavior that crosscuts the structure {{of the rest of the}} code. The events during execution at which advice may execute are called <b>join</b> <b>points.</b> Apointcut is a set of <b>join</b> <b>points.</b> An advice is an action to be taken at the <b>join</b> <b>points</b> in a particular pointcut. In this model of aspect-oriented programming, <b>join</b> <b>points</b> are dynamic in that they refer to events during the flow of execution of the program. We give a denotational semantics for a minilanguage that embodies the key features of dynamic <b>join</b> <b>points,</b> pointcuts, and advice. This is the first semantics for aspect-oriented programming that handles dynamic <b>join</b> <b>points</b> and recursive procedures. It is intended as a baseline semantics agains...|$|R
40|$|While aspect-oriented {{programming}} {{supports the}} modular definition of crosscutting concerns, most approaches to aspect-oriented programming fail to improve, or even preserve, mod-ular reasoning. The {{main problem is}} that aspects usually carry, through their pointcuts, explicit references to the base code. These dependencies make programs fragile. Changes in the base code can unwittingly break a pointcut definition, rendering the aspect ineffective or causing spurious matches. Conversely, a change in a pointcut definition may cause parts of the base code to be advised without notice. Therefore separate development of aspect-oriented programs is largely compromised, which in turns seriously hinders the adoption of aspect-oriented programming by practitioners. We propose to separate base code and aspects using <b>Join</b> <b>Point</b> Interfaces, which are contracts between aspects and base code. Base code can define pointcuts that expose se-lected <b>join</b> <b>points</b> through a <b>Join</b> <b>Point</b> Interface. Con-versely, an aspect can offer to advise <b>join</b> <b>points</b> that pro-vide a given <b>Join</b> <b>Point</b> Interface. Crucially, however, aspect themselves cannot contain pointcuts, and hence cannot re-fer to base code elements. In addition, because a given <b>join</b> <b>point</b> can provide several <b>Join</b> <b>Point</b> Interfaces, and <b>Join</b> <b>Point</b> Interfaces can be organized in a subtype hierarchy, our approach supports <b>join</b> <b>point</b> polymorphism. We describe a novel advice dispatch mechanism that offers a flexible and type-safe approach to aspect reuse...|$|R
40|$|Aspect-oriented {{languages}} mostly employ implicit language-defined <b>join</b> <b>point</b> models, where well-defined {{points in}} the program are called <b>join</b> <b>points</b> and declarative predicates are used to quantify them. The primary motivation for using an implicit <b>join</b> <b>point</b> model is obliviousness and ease of quantification. A design choice for aspect-oriented intermediate languages is to mirror the source language model. In this position paper, I argue that an explicit <b>join</b> <b>point</b> model is better suited at the intermediate language level and sketch a preliminary solutio...|$|R
50|$|The Hatfield Swamp floods {{several times}} a year, from heavy rain, snow melt in spring, or hurricanes passing through the area. The area is the <b>joining</b> <b>point</b> of three rivers. Due to the flooding, this makes it a {{difficult}} place to live for mammals such as deer, raccoons, possums, skunks and fox to live. Most of these animals live {{on the fringes of}} the swamp where the ground is higher.|$|E
5000|$|Crumlin Low Level (...) was sited in the Ebbw Valley in {{the town}} centre. It was the <b>joining</b> <b>point</b> of the Beaufort Ironworks Tramway running to Ebbw Vale in the north, and the Monmouthshire Canal Tramway running to Newport in the south. It was closed in 1962. In 2008 the {{low-level}} line running through Crumlin resumed passenger services as the Ebbw Valley Railway, with the nearest access being at Newbridge railway station.|$|E
50|$|All {{physical}} principles {{which are}} capable {{to provide information}} about the position of an object are suitable to serve as the starting basis for a sensor function. The ambient conditions prevailing during arc welding and also the requirements which are made by fully mechanised equipments have, however, many restrictions as a consequence. Figure 1 depicts the system overview. The monitoring strategy of the sensor (process or geometry) has been chosen as the superordinate criterion, the further subdivision is orientated on the measuring principle.A further distinctive feature of sensor systems is their design. Leading sensors are, thus, marked by the fact that measuring point and <b>joining</b> <b>point</b> are not located in the same position. Here, the measuring and joining process are mainly running in sequence. For making position-relevant statements about the welding process, those systems require calibration of the relative position. If process-oriented sensors are used, the measuring point and the <b>joining</b> <b>point</b> are identical.What the measuring principles all have in common is the fact that through the evaluation of the sensor signal, geometrical information about the joint and its relative position to the measuring head is provided. The individual active principles allow different processing speed for acquiring the information.|$|E
40|$|We {{propose a}} new <b>join</b> <b>point</b> model for aspect-oriented {{programming}} (AOP) languages. In most AOP languages including AspectJ, a <b>join</b> <b>point</b> {{is a time}} interval of an action in execution. While those languages are widely accepted, they have problems in aspects reusability, and awkwardness when designing advanced features such as tracematches. Our proposed <b>join</b> <b>point</b> model, namely the point-in-time <b>join</b> <b>point</b> model redefines <b>join</b> <b>points</b> as the moments both {{at the beginning and}} end of actions. Those finer-grained <b>join</b> <b>points</b> enable us to design AOP languages with better reusability and flexibility of aspects. In this paper, we designed an AspectJ-like language based on the point-in-time model. We also give a denotational semantics of a simplified language in a continuation passing style, and demonstrate that we can straightforwardly model advanced language features such as exception handling and cflow pointcuts...|$|R
40|$|<b>Join</b> <b>point</b> {{models are}} one of the key {{features}} in aspect-oriented programming languages and tools. They provide software engineers means to pinpoint the exact locations in programs (<b>join</b> <b>points)</b> to weave in advices. Our experi-ence in modularizing concerns in a large embedded system showed that existing <b>join</b> <b>point</b> models and their underlying program representations are not expressive enough. This prevents the selection of some <b>join</b> <b>points</b> of our interest. In this paper, we motivate the need for more fine-grained <b>join</b> <b>point</b> models within more expressive source code represen-tations. We propose a new program representation called a program graph, over which more fine-grained <b>join</b> <b>point</b> models can be defined. In addition, we present a simple lan-guage to manipulate program graphs to perform source code transformations. This language thus can be used for speci-fying complex weaving algorithms over program graphs. 1...|$|R
50|$|The dynamic {{interpretation}} of <b>join</b> <b>points</b> {{makes it possible}} to expose runtime information such as the caller or callee of a method from a <b>join</b> <b>point</b> to a matching pointcut. Nowadays, there are various <b>join</b> <b>point</b> models around and still more under development. They heavily depend on the underlying programming language and AO language.|$|R
50|$|Basauri {{is located}} in the {{metropolitan}} region of the Greater Bilbao, {{on both sides of the}} river Nervión and the lower valley of the river Nervión and Ibaizabal. Basauri is located at <b>joining</b> <b>point</b> of the two most important rivers of Biscay, forming a small river plain (in the border with Etxebarri) a series of meanders have been built, now engaged in their most industrial facilities. Basauri also joins the roads coming from Orduña-Urduña and Durango following the course of the two rivers. A neighborhood took its name from the joining of both paths: Bidebieta (two paths).|$|E
50|$|India's Sikkim state lies to {{the west}} of the Dongkya range, the western {{shoulder}} of the Doklam plateau and the 'southwest spur' of the Dongkya range at the south. The Zompelri ridge separates Bhutan's Haa District (to the north) and the Samtse (to the south). Bhutan's claimed border runs along the northern ridge of the Doklam plateau until Sinchela and then moves down the valley to the Amo Chu river. China's claim of the border includes the entire Doklam area within the Chumbi Valley, ending at the Zompelri ridge on the south and the <b>joining</b> <b>point</b> of the Doklam river on the east.|$|E
50|$|The current {{architectural}} decoration is {{that the}} two spans are vaulted with suspended lighting hanging from the apexes of the vault. The middle pillar row drops from the <b>joining</b> <b>point</b> of the vaults. The pillars are faced with wavy turquoise marble as are the walls. The floor is out of checkered black and grey granite, except in the future transfer poin where the floor is wholly grey. Also decorating the station are four medallions located in the four points above the pillar rows with views of Moscow and Bratislava (Bratislava Castle, Devín Castle, the residence of the Mayor of Moscow, and the Cathedral of Christ the Saviour.|$|E
50|$|Many AOP {{approaches}} implement aspect {{behavior by}} weaving hooks into <b>join</b> <b>point</b> shadows, {{which is the}} static projection of a <b>join</b> <b>point</b> onto the program code.|$|R
40|$|<b>Join</b> <b>points</b> {{represent}} the key concept in Aspect-Orientation. <b>Join</b> <b>points</b> define {{the places where}} two concerns crosscut one another. It is a major task for aspect-oriented designers to specify a set of <b>join</b> <b>points</b> at which two concern models are (inter) connected to each other. Hence, it is a primary task for an aspect-oriented modeling language to provide suitable representations for <b>join</b> <b>points.</b> In our Aspect-Oriented Design Model we have identified <b>join</b> <b>point</b> representations in the UML that {{serve the needs of}} aspect-oriented designers of aspect-oriented programs written in AspectJ. In this paper we evaluate if and to what extent these representations are apt to serve as hooks for crosscutting specified with Composition Filters, in Adaptive Programming, and in Hyper/J, as well. Based on the outcome of that investigation we present a graphical notation for the designation of <b>join</b> <b>points</b> and for their visualization in regular user models...|$|R
40|$|Abstract In Aspect-Oriented Software Development, the {{selection}} of <b>join</b> <b>points</b> is an essential part. <b>Join</b> <b>point</b> selections identify the points in a program (i. e. in its code, or during its execution) at which aspectual adaptations need to take place. In order to communicate such selections independent of the underlying aspect-oriented programming language, it is desirable to visualize <b>join</b> <b>point</b> selections in an appropriate way. In this paper {{we focus on the}} appropriateness of interaction diagram-based and state diagram-based visualizations of <b>join</b> <b>point</b> queries, exem-plified with help of two business rule examples. As a result, we discover that even if <b>join</b> <b>point</b> queries are based on interactions in the base application, state dia-gram-based representations are needed to appropriately capture {{the selection}} se-mantic of that query. ...|$|R
50|$|In addition, 'Adud al-Dawla is {{credited}} with sponsoring and patronizing other scientific projects during his time. An observatory was built by his orders in Isfahan where Azophi worked. Al-Muqaddasi also reports that he ordered {{the construction of a}} great dam between Shiraz and Estakhr in 960. The dam irrigated some 300 villages in Fars province and became known as Band-e Amir (Dam of the emir). Among his other major constructions was the digging of the Haffar channel, that joined the Karun river to the Shatt al-Arab river (the confluence of the Tigris and the Euphrates). The port of Khorramshahr was built on the Haffar, at its <b>joining</b> <b>point</b> with the Shatt al-Arab.|$|E
50|$|We then plot {{two points}} A(50,40) and B(-10,-40), {{representing}} {{the state of}} stress at plane A and B as show in both Figure 8 and Figure 9. These points follow the engineering mechanics sign convention for the Mohr-circle space (Figure 5), which assumes positive normals stresses outward from the material element, and positive shear stresses on each plane rotating the material element clockwise. This way, the shear stress acting on plane B is negative and the shear stress acting on plane A is positive.The diameter of the circle is the line <b>joining</b> <b>point</b> A and B. The centre of the circle is the intersection of this line with the -axis. Knowing both {{the location of the}} centre and length of the diameter, we are able to plot the Mohr circle for this particular state of stress.|$|E
50|$|Inside, {{the center}} {{point of the}} home is the {{approximately}} one meter square irori (囲炉裏 sunken floor hearth) which would usually stay alight with low embers at all times. To maintain the burn, four chestnut logs would be placed inward at each corner and a small, flameless charcoal fire within the <b>joining</b> <b>point</b> at the center would slowly burn on {{the tips of the}} logs, and as the logs burned out they would be pushed slightly more into the center. The irori would be used for cooking, either with an iron pot stand or with the suspended jizai-kagi (自在鈎) which consists of an adjustable hook connected to a ceiling beam above and from which a pot could be hung, with the height adjusted according to the temperature sought. Often the jizai-kagi would be made of a bamboo pole with a carved wooden fish used for the hook adjusting mechanism (with the fish serving as a water talisman to ward off the danger of fire).|$|E
40|$|Abstract. The {{implementation}} of crosscutting concerns in a safety-critical system needs constant system state monitoring {{and responding to}} particular (desirable or undesirable) system states. Such states and their transition cannot easily be captured by low-level fixed code-based behavioural <b>join</b> <b>points</b> exposed by current AOP <b>join</b> <b>point</b> models. In order {{to find ways to}} implement crosscutting concerns in such a system using current available <b>join</b> <b>point</b> models, a programmer is forced to write code that does not clearly represent the programmer’s intention or map to the system designs it is supposed to implement, e. g., statetransition models pertaining to fault tolerance. In this paper we present the fundamental basis for a high level <b>join</b> <b>point</b> model which is based on state transitions. By defining system states pertaining to a crosscutting concern as aspects and using the transitions of these states as <b>join</b> <b>points,</b> the proposed State-based <b>Join</b> <b>Point</b> Model offers a high-level means of defining and capturing crosscutting concerns of a safety-critical system. ...|$|R
40|$|In current aspect-oriented systems, aspects usually carry, {{through their}} pointcuts, {{explicit}} {{references to the}} base code. Those references are fragile and give up important software engineering properties such as modular reasoning and independent evolution of aspects and base code. In this work, we introduce a novel abstraction called <b>Join</b> <b>Point</b> Interfaces, which, by design, supports modular reasoning and independent evolution by decoupling aspects from base code and by providing a modular type-checking algorithm. <b>Join</b> <b>point</b> interfaces can be used both with implicit announcement through pointcuts, and with explicit announcement, using closure <b>join</b> <b>points.</b> <b>Join</b> <b>point</b> interfaces further offer polymorphic dispatch on <b>join</b> <b>points,</b> with an advice-dispatch semantics akin to multi-methods. In this work, we show how our proposal solves {{a large number of}} problems observed in previous related approaches. We have implemented <b>join</b> <b>point</b> interfaces as an open-source extension to AspectJ. A first study on existing aspect-oriented programs supports our initial design in general, but also highlights some limitations, which we then address by introducing parametric polymorphism and a more permissive quantification mechanism. As a result, <b>join</b> <b>point</b> interfaces are a safe and practical way of decoupling aspects...|$|R
50|$|The <b>join</b> <b>point</b> {{model of}} an aspect-oriented {{language}} defines {{the types of}} <b>join</b> <b>points</b> that are supported by the aspect-oriented language and the possible interaction points between aspects and base modules.|$|R
