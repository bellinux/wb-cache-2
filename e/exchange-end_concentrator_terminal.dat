0|13|Public
50|$|Crash carts are {{a method}} of last resort in data centers which employ various forms of {{out-of-band}} management. In those cases it is used for equipment which {{does not support the}} requisite out-of-band infrastructure (OOBI) features or in cases where the OOBI devices (<b>concentrators,</b> switches, <b>terminal</b> servers, etc.) or services themselves have failed.|$|R
50|$|Cleo {{originally}} {{began as}} a division of Phone 1 Inc., a voice data gathering systems manufacturer, and built data <b>concentrators</b> and <b>terminal</b> emulators — multi-bus computers, modems, and terminals to interface with IBM mainframes via bisynchronous communications. The company then began developing mainframe middleware in the 1980s, and {{with the rise of}} the PC, moved into B2B data communications and file transfer software.|$|R
50|$|A <b>terminal</b> <b>concentrator</b> {{was also}} {{developed}} that year, since time-sharing {{was still a}} prevalent mode of computer use. In 1975, the network shrank slightly due to budgetary constraints, but the setback was only temporary. At that point, the network provided remote login, remote batch and file transfer user application services.|$|R
50|$|The {{switching}} nodes {{were fed}} by Telenet Access Controller (TAC) <b>terminal</b> <b>concentrators</b> both colocated and {{remote from the}} switches. By 1980, there were over 1000 switches in the public network. At that time, the next largest network using Telenet switches was that of Southern Bell, which had approximately 250 switches.|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedMini and micro computers represent the newest {{developments in the}} computer field. Their small size, low cost, and wide ranging versatility make them valuable devices for use in communications systems. They {{can be used to}} perform many of the message handling functions previously performed by the main computer, thus freeing it for its more important application tasks. The use of mini and micro computers as front end processors, data <b>concentrators</b> and <b>terminal</b> controllers is investigated, as well as the general hardware and software features such small computers must have to perform communications functions. A cost comparison between minicomputers, microcomputers and hardwired devices is also presented. [URL]...|$|R
40|$|Given a {{collection}} of terminals, each with a demand, a col-lection of concentrators, each with a capacity, and costs of connecting the <b>terminals</b> to the <b>concentrators,</b> the <b>terminal</b> assignment problem seeks a set of such connections of mini-mum cost and without the total demand at any concentrator exceeding its capacity. One genetic algorithm for this prob-lem encodes candidate solutions as strings of concentrator labels; in three other GAs, chromosomes are permutations of terminal labels decoded by a greedy decoder. In comparisons on 40 instances of the problem, the string-coded GA consis-tently performs poorly, while among the three permutation-coded GAs, one that applies only mutation almost always outperforms the other two, which use crossover operators as well as mutation...|$|R
40|$|This paper {{presents}} a genetic algorithm for finding a constrained minimum spanning tree. The problem {{is of relevance}} {{in the design of}} minimum cost communication networks, where {{there is a need to}} connect all the terminals at a user site to a <b>terminal</b> <b>concentrator</b> in a multipoint (tree) configuration, while ensuring that link capacity constraints are not violated. The approach used maintains a distinction between genotype and phenotype, which produces superior results to those found using a direct representation in a previous study...|$|R
25|$|In IBM ESA/390 terminology, {{a channel}} is a {{parallel}} data connection inside the tree-like or hierarchically organized I/O subsystem. In System/390 I/O cages, channels either directly connect to devices which are installed inside the cage (communication adapter such as ESCON, FICON, Open Systems Adapter) or they run {{outside of the}} cage, below the raised floor as cables of the thickness of a thumb and directly connect to channel interfaces on bigger devices like tape subsystems, direct access storage devices (DASDs), <b>terminal</b> <b>concentrators</b> and other ESA/390 systems.|$|R
50|$|Interactive use of VS/9 {{was done}} through {{terminals}} {{connected to a}} <b>terminal</b> <b>concentrator</b> unit, which passed control signals {{to and from the}} terminals, {{in a manner similar to}} the way IBM would provide with its IBM 3270-style terminals. This provided, in general, for input to the terminal to be sent in response to an enter key, as opposed to the practice on PCs of taking input one character at a time. The concentrator unit was originally known as the Communications Control Module, or CCM. However, RCA had sold the patents and designs for its CCM terminal controller to Singer Corporation, so Univac developed an emulator device for the CCM which was known as the Multiterminal Connection Controller model 16, or MCC-16.|$|R
50|$|Strictly speaking, in Unices a {{terminal}} device comprises the underlying tty device driver, {{responsible for the}} physical control of the device hardware via I/O instructions and handling device interrupt requests for character input and output, and the line discipline. A line discipline is independent of the actual device hardware, and the same line discipline {{can be used for}} a <b>terminal</b> <b>concentrator</b> device responsible for multiple controlling terminals as for a pseudoterminal. In fact, the line discipline (or, in the case of BSD, AIX, and other systems, line disciplines) are the same across all terminal devices. It is the line discipline that is responsible for local echo, line editing, processing of input modes, processing of output modes, and character mapping. All these things are independent of the actual hardware, dealing as they do in the simple abstractions provided by tty device drivers: transmit a character, receive a character, set various hardware states.|$|R
40|$|The project {{objective}} was to design and implement a simulation model of a mail distribution system that communicated with the system’s hardware controller. Lockheed Martin Distribution Technologies (LMDT) sought to determine the feasibility of bridging this connection between a simulation and the hardware controller and producing an accurate simulation with real-time control. LMDT is ultimately interested in applying the connectivity methods described in this report to simulate, test, and develop future distribution products. The Capstone team considered four main options to obtain the desired connectivity. After careful examination of each alternative, the team decided to use MCM functions in AutoMod to send TCP/IP data from the simulation model through a <b>terminal</b> <b>concentrator</b> to convert the data to RS- 232 format, enabling the system controller to receive the information. As a first application of this simulation communication method, the team used the Desktop Tray Tagging System (DTTS), a mail distribution product manufactured by LMDT. Using MCM to connect the DTTS simulation to its system controller proved to be infeasible. Although the theory behind this connection method is sound, limitations in AutoMod’s MCM functionality prevented the final step of connection between the simulation and the system controller. This paper outlines the steps taken {{to come to this}} conclusion, and recommends additional routes LMDT may want to explore in the future...|$|R
40|$|The {{following}} {{problem is}} considered. Given {{the locations of}} the Central Processing Unit (ar;the terminals which have to communicate with it, to determine the number and locations of the concentrators and to assign the <b>terminals</b> to the <b>concentrators</b> {{in such a way that}} the total cost is minimized. There is alao a fixed cost associated with each concentrator. There is ail upper limit to the number of terminals which can be connected to a <b>concentrator.</b> The <b>terminals</b> can be connected directly to the CPU also In this paper it is assumed that the concentrators can bo located anywhere in the area A containing the CPU and the terminals. Then this becomes a multimodal optimization problem. In the proposed algorithm a stochastic automaton is used as a search device to locate the minimum of the multimodal cost function. The proposed algorithm involves the following. The area A containing the CPU and the terminals is divided into an arbitrary number of regions (say K). An approximate value for the number of concentrators is assumed (say m). The optimum number is determined by iteration later The m concentrators can be assigned to the K regions in (mk) ways (m > K) or (km) ways (K>m). (All possible assignments are feasible, i. e. a region can contain 0, 1,…, to concentrators). Each possible assignment is assumed to represent a state of the stochastic variable structure automaton. To start with, all the states are assigned equal probabilities. At each stage of the search the automaton visits a state according to the current probability distribution. At each visit the automaton selects a 'point' inside that state with uniform probability. The cost associated with that point is calculated and the average cost of that state is updated. Then the probabilities of all the states are updated. The probabilities are taken to bo inversely proportional to the average cost of the states After a certain number of searches the search probabilities become stationary and the automaton visits a particular state again and again. Then the automaton is said to have converged to that state Then by conducting a local gradient search within that state the exact locations of the concentrators are determined This algorithm was applied to a set of test problems and the results were compared with those given by Cooper's (1964, 1967) EAC algorithm and on the average it was found that the proposed algorithm performs better...|$|R

