67|2361|Public
5000|$|Microsoft Visio: {{a diagram}} and <b>flowcharting</b> app for Windows not bundled in any Office suite ...|$|E
5000|$|Swim lanes are {{a visual}} {{mechanism}} of organising and categorising activities, based on cross functional <b>flowcharting,</b> and in BPMN consist of two types: ...|$|E
50|$|A key {{assumption}} underlying all scientific workflow {{systems is}} that the scientists themselves {{will be able to}} use a workflow system to develop their applications based on visual <b>flowcharting,</b> logic diagramming, or, as a last resort, writing code to describe the workflow logic. Powerful workflow systems make it easy for non-programmers to first sketch out workflow steps using simple <b>flowcharting</b> tools, and then hook in various data acquisition, analysis, and reporting tools. For maximum productivity, details of the underlying programming code should normally be hidden.|$|E
5000|$|However, {{there are}} several of these classifications. For example, Andrew Veronis (1978) named three basic types of flowcharts: the system <b>flowchart,</b> the general <b>flowchart,</b> and the {{detailed}} <b>flowchart.</b> That same year Marilyn Bohl (1978) stated [...] "in practice, two kinds of <b>flowcharts</b> are used in solution planning: system <b>flowcharts</b> and program flowcharts...". More recently Mark A. Fryman (2001) stated {{that there are more}} differences: [...] "Decision <b>flowcharts,</b> logic <b>flowcharts,</b> systems <b>flowcharts,</b> product <b>flowcharts,</b> and process <b>flowcharts</b> {{are just a few of}} the different types of <b>flowcharts</b> that are used in business and government".|$|R
50|$|Even today's {{applications}} using today's {{techniques of}} object-oriented programming {{can have their}} execution logic represented using a <b>flowchart.</b> Now consider that the humble <b>flowchart</b> forms the basis of all processes in use today. Whether it's accounting, business, engineering, etc., the humble <b>flowchart</b> was the first, so to speak. All process models attribute their roots to the <b>flowchart.</b>|$|R
40|$|Based on the {{algebraic}} {{characterization of}} reducible graphical <b>flowcharts,</b> recursive <b>flowchart</b> schemes are introduced and studied. It is shown how to obtain interpretations of recursive <b>flowchart</b> schemes {{in the same}} mathematically elegant way {{as is well known}} in the case of recursive tree schemes. The results directly lead to algebraic fixed point semantics of recursive <b>flowchart</b> schemes...|$|R
50|$|Logicator {{is an easy}} to use {{shareware}} <b>flowcharting</b> program. The Logicator {{web page}} is out of date as the free version does support all commands but shows nag screens.|$|E
50|$|Vector editors tend to {{be better}} suited for graphic design, page layout, typography, logos, {{sharp-edged}} artistic illustrations, e.g., cartoons, clip art, complex geometric patterns, technical illustrations, diagramming and <b>flowcharting.</b>|$|E
50|$|PICAXE Programming Editor 6, the {{successor}} to PICAXE Programming Editor 5, has Logicator <b>flowcharting</b> merged into it so separate Logicator software is no longer required. Like PICAXE Programming Editor 5, PICAXE Programming Editor 6 is freeware.|$|E
50|$|Although our {{original}} {{intention was to}} ascertain under which conditions detailed <b>flowcharts</b> were most helpful, our repeated negative results have led us to a more skeptical opinion of the utility of detailed <b>flowcharts</b> under modern programming conditions. We repeatedly selected problems and tried to create test conditions which would favor the <b>flowchart</b> groups, but found {{no statistically significant differences}} between the <b>flowchart</b> and non-flowchart groups. In some cases the mean scores for the non-flowchart groups even surpassed the means for the <b>flowchart</b> groups. We conjecture that detailed <b>flowcharts</b> are merely a redundant presentation of the information contained in the programming language statements. The <b>flowcharts</b> may even be at a disadvantage because they are not as complete (omitting declarations, statement labels, and input/output formats) and require many more pages than do the concise programming language statements.|$|R
50|$|Nassi - Shneiderman {{diagrams}} {{are almost}} isomorphic with <b>flowcharts.</b> Everything {{that can be}} represented with a Nassi - Shneiderman diagram can also be represented with a <b>flowchart.</b> For <b>flowcharts</b> of programs, almost everything that can be represent with a <b>flowchart</b> can also be represented with a Nassi - Shneiderman diagram. The exceptions are constructs like goto and the C programming language break and continue statements for loops.|$|R
50|$|Six Sigma {{practitioners}} use {{the term}} Business Process Architecture to describe the mapping of business processes as series of cross-functional <b>flowcharts.</b> Under this school of thought, each <b>flowchart</b> is of a certain level (between 0 and 4) based {{on the amount of}} detail the <b>flowchart</b> contains. A level 0 <b>flowchart</b> represents the least amount of detail, and usually contains one or two steps. A level 4 <b>flowchart</b> represents the most amount of detail, and can include hundreds of steps. At this level every task, however minor, is represented.|$|R
50|$|Flow is a <b>flowcharting</b> and diagramming {{application}} for the Calligra Suite {{and has a}} user interface {{that is similar to}} Microsoft Visio. It is fully integrated into Calligra and can for example be embedded into Calligra Words.|$|E
50|$|Functions {{supported}} by the current COTS environment include: system specification/diagramming,process <b>flowcharting,</b> information modeling, computer-aided design of products, plant layout, material flow analysis, ergonomic workplace design, mathematical modeling, statistical analysis, line balancing, manufacturing simulation, investment analysis, project management, knowledge-based system development, spreadsheets, document preparation, user interface development, document illustration, forms and database management.|$|E
50|$|A1 and A2 have loose analogs in the {{properties}} of series and parallel electrical circuits, and in other ways of diagramming processes, including <b>flowcharting.</b> A1 corresponds to a parallel connection and A2 to a series connection, {{with the understanding that}} making a distinction corresponds to changing how two points in a circuit are connected, and not simply to adding wiring.|$|E
40|$|It is {{of great}} {{significance}} to automatically generate code from structured <b>flowchart.</b> There are some deficiencies in ex-isting researches, and their key algorithms and technologies are not elaborated, also {{there are very few}} full-featured integrated development platforms that can generate code automatically based on structured <b>flowchart.</b> By analyzing the characteristics of structured <b>flowchart,</b> a structure identification algorithm for structured <b>flowchart</b> is put forward. The correctness of algorithm is verified by enumeration iteration. Then taking the identified <b>flowchart</b> as input, an auto-matic code generation algorithm is proposed. Also the correctness is verified by enumeration iteration. Finally an inte-grated development platform is developed using those algorithms, including <b>flowchart</b> modeling, code automatic gen-eration, CDT etc. The correctness and effectiveness of algorithms proposed are verified through practical operations...|$|R
40|$|<b>Flowcharts</b> play an {{important}} role when learning to program by conveying algorithms graphically and making them easy to read and understand. When learning how to code with <b>flowcharts</b> and transitioning between the two, people often use computer based software to design and execute the algorithm conveyed by the <b>flowchart.</b> This requires the users {{to learn how to use}} the computer-based software first, which often leads to a steep learning curve. We claim that the learning curve can be decremented by using off-line sketch recognition and computer vision algorithms on a mobile device. This can be done by drawing the <b>flowchart</b> on a piece of paper and using a mobile device with a camera to capture an image of the <b>flowchart.</b> Flow 2 Code is a code <b>flowchart</b> recognizer that allows the users to code simple scripts on a piece of paper by drawing <b>flowcharts.</b> This approach attempts to be more intuitive since the user does not need to learn how to use a system to design the <b>flowchart.</b> Only a pencil, a notebook with white pages, and a mobile device are needed to achieve the same result. The main contribution of this thesis is to provide a more intuitive and easy-to-use tool for people to translate <b>flowcharts</b> into code and then execute the code...|$|R
40|$|Revision A 4 / 14 / 00 Update References, repair <b>flowchart</b> {{to replace}} dropped {{decision}} box and rearrange Section 7 to match order of quality records in <b>flowchart</b> Revision B 8 / 18 / 00 Revise References, <b>flowchart</b> and quality record table in Section 7. 0 to reflect findings of systemic analysis following scope expansion audit. Revision C 12 / 11 / 01 Revised <b>flowchart</b> and procedures to reflect streamlined newsroom process...|$|R
50|$|The logic for a FlexSim {{model can}} be built using very little or no {{computer}} code. Most standard objects contain an array of drop-down lists, properties windows, and triggers that allow the user to customize the logic required for an accurate model of the system. FlexSim also includes a <b>flowcharting</b> tool to create the logic for a model using pre-built activity blocks.|$|E
5000|$|Dia is a {{free and}} open source diagramming and vector {{graphics}} editor available for Windows, Linux and other Unix-based computer operating systems. Dia has a modular design and several shape packages for <b>flowcharting,</b> network diagrams and circuit diagrams. Its design was inspired by Microsoft Visio, although it uses a Single Document Interface similar to other GNOME software (such as GIMP).|$|E
50|$|Founded in 1959, ADR was {{originally}} a contract development company. ADR eventually built {{a series of}} its own products. ADR's widely used major packages included: Autoflow for automatic <b>flowcharting,</b> ROSCOE (Remote OS Conversational Operating Environment), and Librarian for source-code management. ADR later purchased the Datacom/DB database management system from Insyte Datacom and developed the companion product, IDEAL (Interactive Development Environment for an Application’s Life), a fourth-generation programming language.|$|E
50|$|Any {{drawing program}} {{can be used to}} create <b>flowchart</b> diagrams, but these will have no {{underlying}} data model to share data with databases or other programs such as project management systems or spreadsheet. Some tools such as yEd, Inkscape and Microsoft Visio offer special support for <b>flowchart</b> drawing. Many software packages exist that can create <b>flowcharts</b> automatically, either directly from a programming language source code, or from a <b>flowchart</b> description language. On-line web-based versions of such programs are available.|$|R
40|$|International audienceWe propose in {{this paper}} a new online {{handwritten}} <b>flowchart</b> database and perform some first experiments to have a baseline benchmark on this dataset. The collected database consists of 78 <b>flowcharts</b> labeled at the stroke and symbol levels. In addition, an isolated database of graphical and text symbols was extracted from these collected <b>flowcharts.</b> Then, we tackle the problem of online handwritten <b>flowchart</b> recognition from two different points of view. Firstly, we consider that <b>flowcharts</b> are correctly segmented, and we propose different classifiers to perform two tasks, text/non-text separation and graphical symbol recognition. Tested with the extracted isolated test database, we achieve up to 99 % and 96 % in text/non-text separation and up to 81. 3 % in graphical symbols recognition. Secondly, we propose a global approach to perform <b>flowchart</b> segmentation and recognition. For this latter, we adopt a global learning schema and a recognition architecture that considers a simultaneous segmentation and recognition. Global architecture is trained and tested directly with <b>flowcharts.</b> Results show the interest of such global approach, but regarding the complexity of <b>flowchart</b> segmentation problem, there is still lot of space to improve the global learning and recognition method...|$|R
40|$|AbstractReducible <b>flowcharts</b> as {{introduced}} by Hecht and Ullman have been algebraically characterized by Elgot and Shepherdson. They {{showed them to}} be freely generated from elementary <b>flowcharts</b> by means of composition, sum, and scalar iteration. In this paper the algebraic characterization is extended to the class of infinite almost accessible reducible <b>flowcharts...</b>|$|R
50|$|Grades 9-12 {{are given}} {{formally}} scheduled after-school enrichment courses and activities, and Saturday Academics. These include Web Club, Robotics, Tech Club, ACE Program, Aviation Club, Chess Club, Mock Trial, Yearbook, Studio Productions, Science Olympiad, and computer technology mini-courses such as <b>Flowcharting,</b> HTML, and Sketch Pad. Also, through work with scientists and experts in their field, students {{get a better}} understanding of what skills are needed and invested in certain careers.|$|E
5000|$|In his 1963 article [...] "Techniques of flow-charting," [...] Schultheiss {{described}} {{the process of}} creating flowcharts, and gave a series of eleven examples. About the origin of <b>flowcharting</b> Schultheiss stipulated:"Flow-charting* is a very broad term used to describe a number of charting and diagramming operations, many of them not peculiar to data processing. Decision flow charting and work flow charting and diagramming have been used in other fields for many years, although the concept seems to be a relatively new one among librarians.About the character of <b>flowcharting</b> he further explained:Flow charts... combine both physical actions and decision making in one logical flow. The type of operation (action, decision requirement, hold, etc.) is indicated by the shape of the box surrounding the written inscription. The choice of box shapes and sizes may become very elaborate and representational, and may be transcribed in a variety of formats; the Head of our Data Processing Department has often jokingly remarked that by using flow charts and magnetic tape reels we have rediscovered the pictogram and the scroll and are calling this progress.|$|E
5000|$|Heiliger (1963) expressed, {{that the}} then {{upcoming}} [...] "automation of libraries must come about through close cooperation between librarians and 'machine people'. Each must understand 'something of the other's specialty..." [...] Ín {{order to facilitate}} the cooperation <b>flowcharting</b> was adopted. Heiliger explained, that [...] "a good common language is provided by flow charts, which are simple workflow charts written in yes-no terms. They can be quickly understood by the 'machine people, and the technique of making them can be learned by a librarian {{in a very short}} time." ...|$|E
30|$|Life cycle <b>flowcharts</b> for {{comparison}} {{are shown in}} Fig.  1 along with the <b>flowchart</b> representing {{the life cycle of}} “certified wood in Kyoto Prefecture”.|$|R
5000|$|<b>Flowchart</b> is {{a primary}} type of {{business}} process mapping. It consists of some symbols such as arrows, circle, diamond, box, oval or rectangle. The type of <b>Flowchart</b> just described is {{sometimes referred to as}} a [...] "detailed" [...] <b>flowchart</b> because it includes in detail, the inputs, activities, decision points, and outputs of any process.|$|R
50|$|Nowadays <b>flowcharts</b> {{are still}} used for {{describing}} computer algorithms. Modern {{techniques such as}} UML activity diagrams and Drakon-charts can {{be considered to be}} extensions of the <b>flowchart.</b>|$|R
50|$|Business Process Model and Notation (BPMN) is a {{standard}} for business process modeling that provides a graphical notation for specifying business processes in a Business Process Diagram (BPD), based on a <b>flowcharting</b> technique very similar to activity diagrams from Unified Modeling Language (UML). The objective of BPMN is to support business process management, for both technical users and business users, by providing a notation that is intuitive to business users, yet able to represent complex process semantics. The BPMN specification also provides a mapping between the graphics of the notation and the underlying constructs of execution languages, particularly Business Process Execution Language (BPEL).|$|E
50|$|While Helix's visual {{programming}} is possibly easier for novices to learn (because {{it uses a}} <b>flowcharting</b> paradigm that is intuitively understood by non-technical individuals), it becomes tedious when the amount of code to be written becomes significant,especially for an individual who can write code much more easily and conveniently than if forced to drag icons from a palette. Helix has suffered {{from the lack of}} developer support and third-party applications. Originally, the 4th Dimension database software on the Macintosh also supported {{visual programming}}, but that as its programming language acquired more features, the visual programming capability was eventually dropped.|$|E
50|$|Vector editors {{are often}} contrasted with bitmap editors, and their {{capabilities}} complement each other. Vector editors are often better for page layout, typography, logos, sharp-edged artistic illustrations (e.g. cartoons, clip art, complex geometric patterns), technical illustrations, diagramming and <b>flowcharting.</b> Bitmap editors are {{more suitable for}} retouching, photo processing, photorealistic illustrations, collage, and illustrations drawn by hand with a pen tablet. Recent versions of bitmap editors such as GIMP and Adobe Photoshop support vector tools (e.g. editable paths), and vector editors such as Adobe Fireworks, Adobe FreeHand, Adobe Illustrator, Affinity Designer, Animatron, Artboard, Autodesk Graphic (formerly iDraw), CorelDRAW, Sketch, Inkscape, sK1 or Xara Photo & Graphic Designer have adopted raster effects that were once limited to bitmap editors (e.g. blurring).|$|E
50|$|A {{deployment}} <b>flowchart</b> (sometimes {{referred to}} as a cross functional <b>flowchart)</b> is a business process mapping tool used to articulate the steps and stakeholders of a given process.|$|R
50|$|Newcomers to {{the state}} machine {{formalism}} often confuse state diagrams with <b>flowcharts.</b> The figure below shows a comparison of a state diagram with a <b>flowchart.</b> A state machine (panel (a)) performs actions in response to explicit events. In contrast, the <b>flowchart</b> (panel (b)) does not need explicit events but rather transitions from node to node in its graph automatically upon completion of activities.|$|R
40|$|AbstractA “scalar” <b>flowchart</b> scheme, i. e. {{one with}} a single begin “instruction” is {{reducible}} iff its underlying flowgraph is reducible {{in the sense of}} Cocke and Allen or Hecht and Ullman. We characterize the class of reducible scalar <b>flowchart</b> schemes as the smallest class containing certain members and closed under certain operations (on and to <b>flowchart</b> schemes). These operations are “semantically meaningful’ in the sense tha operations of the same form are meaningful for “the” functions (or partial functions) computed by interpreted <b>flowchart</b> schemes; moreover, the schemes and the functions “are related by a homomorphism. ” By appropriately generalizing “flowgraph” to (possibly) several begins (i. e. entries) we obtain a class of reducible “vector” <b>flowchart</b> schemes which can be characterized in a manner analogous to the scalar case but involving simpler more basic operations (which are also semantically meaningful). A significant side effect of this semantic viewpoint is the treatment of multi-exit <b>flowchart</b> schemes on an equal footing with single exit ones...|$|R
