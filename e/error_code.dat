171|5845|Public
25|$|From {{the point}} of view of the author of a routine, raising an {{exception}} is a useful way to signal that a routine could not execute normally - for example, when an input argument is invalid (e.g. value is outside of the domain of a function) or when a resource it relies on is unavailable (like a missing file, a hard disk error, or out-of-memory errors). In systems without exceptions, routines would need to return some special <b>error</b> <b>code.</b> However, this is sometimes complicated by the semipredicate problem, in which users of the routine need to write extra code to distinguish normal return values from erroneous ones.|$|E
500|$|As {{reported}} on numerous {{sites on the}} internet (reference topic: AVG Turbo Mode System Restore Error), one of the Windows features, System Restore, is no longer accessible in this mode and provides an <b>error</b> <b>code</b> when attempting to access this feature requiring an AVG reset to [...] "Standard Mode" [...] to re-enable this feature. [...] Some have reported that prior restore points are deleted when [...] "Turbo Mode" [...] is activated; [...] However, this is not confirmed, and {{has been reported to}} AVG IT for correction for some time now.|$|E
2500|$|The <b>error</b> <b>code</b> {{displayed}} {{was typically}} 8001050F and affected users {{were unable to}} sign in, play games, use dynamic themes and view/sync trophies. The problem only resided within the 1st through to the 3rd generation original PS3 units while the newer [...] "Slim" [...] models were unaffected because of different internal hardware for the clock.|$|E
5000|$|In the [...]NET Framework, HRESULT/IErrorInfo <b>error</b> <b>codes</b> are {{translated}} into CLR exceptions when transitioning from native to managed code; and CLR exceptions are translated to HRESULT/IErrorInfo <b>error</b> <b>codes</b> when transitioning from managed to native COM code.|$|R
50|$|The {{original}} purpose of HRESULTs was to formally lay out ranges of <b>error</b> <b>codes</b> for {{both public and}} Microsoft internal use {{in order to prevent}} collisions between <b>error</b> <b>codes</b> in different subsystems of the OS/2 operating system.|$|R
40|$|The {{application}} of error-detecting or error-correcting codes in digital computer design requires studies of cost and effectiveness tradeoffs {{to supplement the}} knowledge of their theoretical properties. General criteria for cost and effectiveness studies of <b>error</b> <b>codes</b> are developed, and results are presented for arithmetic <b>error</b> <b>codes</b> with the low-cost check modulus 2 super a - 1. Both separate (residue) and nonseparate (AN) codes are considered. The class of multiple arithmetic <b>error</b> <b>codes</b> is developed {{as an extension of}} low-cost single codes...|$|R
2500|$|The {{simplest}} port scanners use {{the operating}} system's network functions and are generally the next option {{to go to}} when SYN is not a feasible option (described next). Nmap calls this mode connect scan, named after the Unix connect (...) system call. If a port is open, the operating system completes the TCP three-way handshake, and the port scanner immediately closes the connection to avoid performing a Denial-of-service attack. Otherwise an <b>error</b> <b>code</b> is returned. This scan mode has the advantage that the user does not require special privileges. However, using the OS network functions prevents low-level control, so this scan type is less common. This method is [...] "noisy", particularly if it is [...] a [...] "portsweep": the services can log the sender IP address and Intrusion detection systems can raise an alarm.|$|E
5000|$|... For MASM/TASM [...]MODEL SMALL [...]STACK [...]CODE main PROC NEAR MOV AH, 4Ch Service 4Ch - Terminate with <b>Error</b> <b>Code</b> MOV AL, 0 <b>Error</b> <b>code</b> INT 21h Interrupt 21h - DOS General Interrupts main ENDP END main Starts at main ...|$|E
50|$|Xbox 360 {{consoles}} {{which have}} a hardware failure will display a secondary <b>error</b> <b>code</b> by blinking a sequence of LED's when the correct button sequence is pushed. An <b>error</b> <b>code</b> of 0001 may represent a defect in the power supply, rather than the Xbox itself, or a short within the Xbox, or a blown capacitor.|$|E
50|$|The <b>error</b> <b>codes</b> {{returned}} are AFP result codes.|$|R
5000|$|<b>Error</b> <b>codes</b> were {{displayed}} on a two-digit seven-segment display (one of the first seen, and built with lamps rather than LEDs). The range of <b>error</b> <b>codes</b> included not only decimal and hexadecimal digits (as seven-segment displays are commonly used) but also a limited set of other letters; for example, [...] "P3" [...] {{was one of several}} printer <b>error</b> <b>codes.</b> A thick manual that came with the System/3 aided the operator in interpreting the <b>error</b> <b>codes</b> and suggested recovery procedures. The System/3 had no audible warning device, so a program that was not printing, reading cards, or causing other obvious activity could halt and the operator would not know it unless he or she happened to look at the status display. Models with the Dual Program Feature had two separate status displays.|$|R
50|$|<b>Error</b> <b>codes</b> {{are slowly}} disappearing from the programmer's {{environment}} as modern object-oriented programming languages {{replace them with}} exceptions. Exceptions {{have the advantage of}} being handled with explicit blocks of code, separate {{from the rest of the}} code. While it is considered poor practice in methodologies that use <b>error</b> <b>codes</b> and return codes to indicate failure, programmers often neglect to check return values for error conditions. That negligence can cause undesirable effects, as ignored error conditions often cause more severe problems later in the program. Exceptions are implemented in such a way as to separate the <b>error</b> handling <b>code</b> from the rest of the <b>code.</b> Separating the <b>error</b> handling <b>code</b> from the normal logic makes programs easier to write and understand, since one block of <b>error</b> handling <b>code</b> can service <b>errors</b> from any number of function calls. Exception handling also makes the code more readable than implementations with <b>error</b> <b>codes,</b> since exception handling does not disrupt the flow of the code with frequent checks for error conditions.|$|R
5000|$|Generic error-handling code (e.g. which {{displays}} the HTTP <b>Error</b> <b>Code</b> 500 page) ...|$|E
5000|$|... <b>error</b> <b>code</b> ({{parameter}} 1, parameter 2, parameter 3, parameter 4) error name ...|$|E
5000|$|... A {{specified}} <b>error</b> <b>code</b> {{if there}} was an error invoking the method, otherwise null.|$|E
5000|$|RFC 2034, SMTP Service Extension for Returning Enhanced <b>Error</b> <b>Codes,</b> ...|$|R
5000|$|... #Subtitle level 2: Microsoft Internet Server 404 substatus <b>error</b> <b>codes</b> ...|$|R
50|$|<b>Error</b> <b>coding</b> can {{be chosen}} to {{be more or less}} robust.|$|R
50|$|An HRESULT value has 32 bits {{divided into}} three fields: a {{severity}} code, a facility code, and an <b>error</b> <b>code.</b> The severity code indicates whether the return value represents information, warning, or error. The facility code identifies {{the area of the}} system responsible for the error. The <b>error</b> <b>code</b> is a unique number that is assigned to represent the exception. Each exception is mapped to a distinct HRESULT.|$|E
5000|$|The {{service is}} {{currently}} down. Both its [...] ".org" [...] website and its onion link return <b>error</b> <b>code</b> 500.|$|E
5000|$|... 550, the FTP <b>error</b> <b>code</b> meaning [...] "Requested action not taken. File {{unavailable}} (e.g., file not found, no access)." ...|$|E
5000|$|An XML-based {{specification}} {{format for}} projects, APIs, functions, types and <b>error</b> <b>codes</b> ...|$|R
5000|$|Check for any <b>Error</b> <b>codes</b> in the ECU {{and take}} {{corrective}} action.|$|R
5000|$|AIS implementers {{must also}} {{ensure that they}} respect the version numbers {{provided}} by the application when the library is initialized, with regard to new or modified <b>error</b> <b>codes</b> and do not expose <b>error</b> <b>codes</b> that only apply to functions {{in the most recent}} version of the specification to applications written to an older version of the specification.|$|R
5000|$|In the C {{programming}} language, [...] is {{a standard}} library function that terminates the current application and returns an <b>error</b> <b>code.</b>|$|E
50|$|The ITF {{facility}} code has subsequently been recycled as {{the range}} in which COM components can define their own component-specific <b>error</b> <b>code.</b>|$|E
50|$|HRESULTs are {{numerical}} error codes. Various bits {{within an}} HRESULT encode {{information about the}} nature of the <b>error</b> <b>code,</b> and where it came from.|$|E
5000|$|... #Caption: An image showing various <b>error</b> <b>codes</b> of the {{original}} model Xbox 360.|$|R
5000|$|The program {{interpreter}} on {{the models}} {{did not provide}} human-readable error information. Errors encountered either in program execution or calculation evaluation would be returned as one of 9 <b>error</b> <b>codes,</b> usually indicated by replacing the display with text such as [...] "ERROR 4". On the PC-7 model the list of <b>error</b> <b>codes</b> was printed above the text keypad, and was included {{on the case of}} the PC-8, but with other models users not familiar with the meaning of each code would have to refer to the manual. Like other characteristics of this line, the meanings of the <b>error</b> <b>codes</b> were not necessarily equivalent from model to model.|$|R
40|$|In deep {{sub-micron}} ICs, growing {{amounts of}} ondie memory and scaling effects make embedded memories increasingly vulnerable to reliability and yield problems. As scaling progresses, soft and hard {{errors in the}} memory system will increase and single error events {{are more likely to}} cause large-scale multibit errors. However, conventional memory protection techniques can neither detect nor correct large-scale multi-bit errors without incurring large performance, area, and power overheads. We propose two-dimensional (2 D) <b>error</b> <b>coding</b> in embedded memories, a scalable multi-bit error protection technique to improve memory reliability and yield. The key innovation is the use of vertical <b>error</b> <b>coding</b> across words that is used only for error correction in combination with conventional per-word horizontal <b>error</b> <b>coding.</b> We evaluate this scheme in the cache hierarchies of two representative chip multiprocessor designs and show that 2 D <b>error</b> <b>coding</b> can correct clustered errors up to 32 x 32 bits with significantly smaller performance, area, and power overheads than conventional techniques. 1...|$|R
5000|$|Usually, a [...] "DEW" [...] {{indicator}} or <b>error</b> <b>code</b> {{lights up}} on the display of most VCRs/camcorders, and on some, a buzzer may sound.|$|E
5000|$|The {{web server}} returns an HTTP <b>error</b> <b>code,</b> such as 500, 502, 503, 504, 408, or even 404, which is {{inappropriate}} for an overload condition.|$|E
50|$|On December 1, 2014, Xbox Live was {{apparently}} attacked by Lizard Squad, users attempting {{to connect to}} use the service would be given the 80151909 <b>error</b> <b>code.</b>|$|E
50|$|Request sense: Returns any <b>error</b> <b>codes</b> {{from the}} {{previous}} command that returned an error status.|$|R
5000|$|A wrapper {{converting}} Linux {{calls to}} Windows {{and the other}} way round, also managing results and <b>error</b> <b>codes</b> ...|$|R
40|$|Abstract — This paper generalizes {{parallel}} <b>error</b> correcting <b>codes</b> {{proposed by}} Alshwede et al. over {{a type of}} multiple access channels called a parallel chan-nel. The generalized parallel <b>error</b> correcting <b>codes</b> can handle with more errors compared with the orig-inal ones. We show construction methods of indepen-dent and non-independent parallel <b>error</b> correcting <b>code</b> and decoding methods. We derive some bounds {{about the size of}} respective parallel <b>error</b> correcting <b>code.</b> I...|$|R
