7|44|Public
25|$|The Load Immediate Upper {{instruction}} copies the 16-bit immediate {{into the}} high-order 16 bits of a GPR. It {{is used in}} conjunction with the Or <b>Immediate</b> <b>instruction</b> to load a 32-bit immediate into a register.|$|E
50|$|In general, math {{textbooks}} which {{focus on}} instruction in standard arithmetic methods {{can be categorized}} as a traditional math textbook. Reform math textbooks will often focus on conceptual understanding, usually avoiding <b>immediate</b> <b>instruction</b> of the standard algorithms and frequently promoting student exploration and discovery of the relevant mathematics. The following current texts are often cited as good for those wishing for a traditional approach, often also favored by homeschoolers.|$|E
50|$|The myth started around 1984 when {{comparing}} the Apple II with the IBM PC. The argument {{was that the}} PC was five {{times faster than the}} Apple II, as its Intel 8088 processor had a clock speed roughly 5x the clock speed of the MOS Technology 6502 used in the Apple. However, what really matters is not how finely divided a machine's instructions are, but {{how long it takes to}} complete a given task. Consider the LDA # (Load Accumulator <b>Immediate)</b> <b>instruction.</b> On a 6502 that instruction requires two clock cycles, or 2 μs at 1 MHz. Although the 4.77 MHz 8088's clock cycles are shorter, the LDA # needs 4 of them, so it takes 4 / 4.77 MHz = 0.84 μs. So that instruction runs only a little more than 2 times as fast on the original IBM PC than on the Apple II.|$|E
5000|$|The MIPS {{architecture}} {{provides a}} specific example for a machine code whose instructions are always 32 bits long. The general type of instruction {{is given by}} the op (operation) field, the highest 6 bits. J-type (jump) and I-type (<b>immediate)</b> <b>instructions</b> are fully specified by op. R-type (register) instructions include an additional field funct to determine the exact operation. The fields used in these types are: ...|$|R
5000|$|The guests {{arrive at}} the house party and go to their rooms to dress for dinner. Miss Kirby, sitting at Mrs. Wethersby’s desk as the hostess makes her preparations, is aware of a subtle {{delicate}} perfume, which is markedly different from the odor of the cologne with which Mrs. Wethersby is liberally spraying herself. Immediately, the girl’s suspicions are confirmed, and she sends <b>immediate</b> <b>instructions</b> to the police.|$|R
50|$|Thus, both compilers and interpreters {{generally}} turn {{source code}} (text files) into tokens, both may (or may not) generate a parse tree, and both may generate <b>immediate</b> <b>instructions</b> (for a stack machine, quadruple code, or by other means). The basic {{difference is that}} a compiler system, including a (built in or separate) linker, generates a stand-alone machine code program, while an interpreter system instead performs the actions described by the high level program.|$|R
40|$|This paper reviews {{experimental}} {{research on the}} pedagogical effects of three <b>immediate</b> <b>instruction</b> programs in oral communication. Formative evaluations indicate that students enjoyed the level-III interactive video instruction (IVI) programs. Results of an immediate posttest, delayed posttest, control group design indicate that the IVI program "Coping with Speech Fright " appears to be as effective on speech fright and recall measures as lecture/linear videotape instruction by two outstanding public speaking instructors. Furthermore, students in the IVI condition achieved significantly greater reduction of speech fright over a four-week period than did students in the control group. Results of two separate studies using an immediate posttest, control group, comparison group design indicate that students receiving IVI in "Constructing Speaking Outlines " and "Developing Key Ideas: The Four S's " achieved significantly higher immediate recall/application tes...|$|E
40|$|The {{performance}} of 27 a elementary school aged educable retarded children {{was used in}} the final evaluation of the five unit Money, Measurement and Time program. Criterion referenced pre- and posttests were administered to assess the effectiveness of each unit, and A Cognitive Abilities Test evaluated Ss ' general improvement in non-content-specific areas of functioning. Analysis of results indicated that the gains in the Money and Time with the Clock units were significant, while the gains on the Length and Measurement of Weight units were not as impressive. Item analyses of the unit tests demonstrated that Ss ' learning went beyond the <b>immediate</b> <b>instruction</b> they had received. Data on nonretarded children's performance provided normative information. Results suggested revisions in specific content for each unit. (CL). * Documents acquired by ERIC include many informal unpublished * * materials not available from other sources. ERIC every effort...|$|E
40|$|This paper {{describes}} future execution (FE), {{a simple}} hardware-only technique to accelerate indi-vidual program threads running on multicore microprocessors. Our approach uses available idle cores to prefetch important {{data for the}} threads executing on the active cores. FE {{is based on the}} observation that many cache misses are caused by loads that execute repeatedly and whose address-generating program slices do not change (much) between consecutive executions. To exploit this property, FE dynamically creates a prefetching thread for each active core by simply sending a copy of all committed, register-writing instructions to an otherwise idle core. The key innovation is that {{on the way to the}} second core, a value predictor replaces each predictable instruction in the prefetching thread with a load <b>immediate</b> <b>instruction,</b> where the immediate is the predicted result that the instruction is likely to produce during its nth next dynamic execution. Executing this mod-ified instruction stream (i. e., the prefetching thread) on another core allows to compute the future results of the instructions that are not directly predictable, issue prefetches into the shared memory hierarchy, and thus reduce the primary threads ’ memory access time. We demonstrate the viability and effectiveness of future execution by performing cycle-accurate simulations of a two-way CMP running the single-threaded SPECcpu 2000 benchmark suite. Our mechanism improves program performance by 12 %, on average, over a baseline that already includes an optimized hardware stream prefetcher. We further show that FE is complementary to runahead execution and that the combination of these two techniques raises the average speedup to 20 % above the performance of the baseline processor with the aggressive stream prefetcher...|$|E
40|$|This {{document}} {{gives an}} algorithmic specification {{that defines the}} compiler; it defines what AspAL statements are produced for each Pasp fragment. Throughout the definition, wherever {{there has been a}} choice between clarity and e#ciency, the latter has been sacrificed to the former, so that the correctness proofs will be made easier. The most obvious example of this is in the extensive use of indirect instructions (see the AspAL definition document) rather than <b>immediate</b> <b>instructions</b> in the definition of operator...|$|R
5000|$|It was {{recommended}} that emergency medical dispatchers receive better guidance on recognizing potential Cardiac Arrests and agonal breathing to promote more <b>immediate</b> CPR <b>instructions.</b>|$|R
50|$|Instructions are {{encoded in}} two-address form in several formats, usually they have 16-bit {{encoding}}, {{but there are}} two formats for medium <b>immediate</b> <b>instructions</b> with length of 32-bit. Typical opcode length is 4 bits (bits 9-12 of most encoding types. Basic encoding formats are: Register-to-Register, Short 5-bit immediate value to Register, Medium immediate of 16-bit value to Register (32 bit encoding), Load/Store relative with short 5-bit displacement (2 bit opcode), Load/Store relative with medium 18-bit displacement (32 bit encoding, 2 bit opcode).|$|R
50|$|The {{crash was}} {{heard in the}} town and the alarm was raised. By the time the townspeople reached the bridge the wounded {{passengers}} had {{made their way to the}} shore and the fire was burning fiercely. When the Ashtabula Fire Brigade arrived, the <b>immediate</b> <b>instructions</b> from railroad employees were to get the wounded out and to clear a pathway up the side of the ravine. After this no water was put onto the fire, even after reports of survivors still trapped in the wreck.|$|R
40|$|Keine Zusammenfassung in deutscher Sprache hinterlegt.) Günther Ludwig regards quantum {{mechanics}} to {{be a special}} theory between two types of macrosystems, {{one of these is}} preparation and the other one is registration. Macrosystems are objects which can be described by <b>immediate</b> <b>instructions</b> or by terms of classical physics. Thus {{quantum mechanics}} is grounded in a radical way on a realistic basis which refers entirely to the macroscopic- phenomenological reality. A microscopic reality is not assumed. The current thesis discusses the central aspects of Ludwig's approach towards a new foundation of quantum mechanics. This new foundation shows to be efficient in two fields. On the one hand it is possible to gain an axiomatic construction of quantum mechanics up to Hilbertspace and Schrödingers equation by physically motivated statements. On the other hand problems of interpretation can be circumvented...|$|R
5000|$|SHARC {{instructions}} {{may contain}} a 32-bit <b>immediate</b> operand. <b>Instructions</b> without this operand are generally {{able to perform}} two or more operations simultaneously. Many instructions are conditional, and may be preceded with [...] "if condition [...] " [...] in the assembly language. There {{are a number of}} condition choices, similar to the choices provided by the x86 flags register.|$|R
5000|$|For {{a typical}} {{instruction}} like [...] "Add," [...] the computer takes both operands from the topmost (most recent) {{values of the}} stack. The computer replaces those two values by the sum, calculated by the computer when it performs the [...] "Add" [...] instruction. The instruction's operands are 'popped' off the stack, and its result(s) are then 'pushed' back onto the stack, {{ready for the next}} instruction. Most stack instructions have only an opcode commanding an operation, with no additional fields to identify a constant, register or memory cell. The stack easily holds more than two inputs or more than one result, so a richer set of operations can be computed. Integer constant operands are often pushed by separate Load <b>Immediate</b> <b>instructions.</b> Memory is often accessed by separate Load or Store instructions containing a memory address or calculating the address from values in the stack.|$|R
5000|$|With four {{address mode}} {{selection}} bits (P, R, I and N - indexed, relative, indirect and <b>immediate),</b> NAR 2 <b>instructions</b> can specify 16 different addressing modes {{but not all}} make sense in all instructions. In the following table: ...|$|R
5000|$|Addressing modes include <b>Immediate</b> (operand in <b>instruction),</b> Direct or [...] "Symbolic" [...] (operand {{address in}} instruction), Register (operand in {{workspace}} register), Register Indirect (operand address in workspace register) {{with or without}} auto-increment, Indexed (operand address in instruction indexed with workspace register content), and Program Counter Relative.|$|R
25|$|Instructions {{are divided}} into three types: R, I and J. Every {{instruction}} starts with a 6-bit opcode. In addition to the opcode, R-type instructions specify three registers, a shift amount field, and a function field; I-type instructions specify two registers and a 16-bit <b>immediate</b> value; J-type <b>instructions</b> follow the opcode with a 26-bit jump target.|$|R
50|$|The Damascus Affair of 1840 {{marks the}} real {{beginning}} of the diplomatic or international phase {{in the history of}} American Jews (though a reference to the services which Mordecai M. Noah rendered his country as consul at Tunis (1813-16) should not be omitted). The persecutions and tortures to which some of the most prominent Jews of Damascus had been subjected were reported to the Department of State at Washington, D.C. by the United States consul at Damascus. <b>Immediate</b> <b>instructions,</b> under date of 14 August 1840, were thereupon issued to John Gliddon, the United States consul at Alexandria, Egypt, by Secretary of State John Forsyth, in which he directed that all good offices and efforts be employed to display the active sympathy of the United States in the attempts that the governments of Europe were making to mitigate the horrors of these persecutions. Three days later David Porter, the United States minister to the Ottoman Empire, was instructed by Forsyth to do everything in his power at the Porte to alleviate the condition of the unfortunates. In both these communications the reasons for the intervention of the United States are based upon sentiments of justice and humanity, no American citizens being involved; in the communication to Minister Porter stress was laid upon the peculiar propriety and right of the intervention of the United States, because its political and civil institutions make no distinction in favor of individuals by reason of race or creed, but treat all with absolute equality.|$|R
40|$|Choral {{responding}} is {{a teaching}} technique {{in which all}} students respond in unison to a teacher-posed question. Choral responding gives all students more opportunities to participate and receive <b>immediate</b> feedback during <b>instruction.</b> Research has demonstrated a strong relationship between frequent student response during instruction and improved learning outcomes. This article offers teachers practical suggestions for using choral responding as a viable and effective teaching tool...|$|R
50|$|Because of the 16-bit address bus, and the 8-bit data bus, {{the sixteen}} general purpose {{registers}} are 16 bits wide, but the accumulator D-register is only 8 bits wide. The accumulator, therefore, {{tends to be}} a bottleneck. Transferring the contents of one register to another involves four instructions (one Get and one Put on the HI byte of the register, and a similar pair for the LO byte: GHI R1; PHI R2; GLO R1; PLO R2). Similarly, loading a new constant into a register (such as a new address for a subroutine jump, or the address of a data variable) also involves four <b>instructions</b> (two load <b>immediate,</b> LDI, <b>instructions,</b> one for each half of the constant, each one followed by a Put instruction to the register, PHI and PLO).|$|R
40|$|The {{hardware}} cost {{of taking}} an interrupt is increasing as processors become more superscalar. Using FLIP, an aggressively superscalar processor {{which we have}} designed and tested in Verilog, we demonstrate that interrupts can be fast and inexpensive. We trace individual signals through FLIP's pipeline stages to show that fast interrupts require negligible new hardware. Except for linkage information, interrupts reuse existing branch mechanisms. An asynchronous interrupt acts as an <b>immediate</b> jump <b>instruction,</b> while a synchronous interrupt acts as a mispredicted branch. Although we concentrate on user-level interrupts, we show that kernel-level interrupts can be handled identically {{with the addition of}} protection mode bits to identify the protection mode of every outstanding instruction. In blending fast interrupts into the superscalar processor, we address two new problems. The first problem arises from fast synchronous interrupts. Because most instructions can cause an interrupt, the pr [...] ...|$|R
5000|$|Instructions {{were fixed}} length (12 decimal digits), {{consisting}} of a 2-digit [...] "op code", a 5-digit [...] "P Address" [...] (usually the destination address), and a 5-digit [...] "Q Address" [...] (usually the source address or the source <b>immediate</b> value). Some <b>instructions,</b> such as the B (branch) instruction, only used the P Address, and later smart assemblers included a [...] "B7" [...] instruction that generated a 7-digit branch instruction (op code, P address, and one extra digit because the next instruction had to start on an even-numbered digit).|$|R
40|$|Many {{young readers}} fail to {{construct}} a proper mental text representation, often {{due to a lack}} of higher-order skills such as making integrative and inferential links. In an eye-tracking experiment among 141 Dutch eighth graders, we tested whether coherence markers (moreover, after, because) improve students’ online processing and their off-line comprehension of narrative and expository texts. Eye-tracking results show that connectives lead to faster processing of subsequent information as well as shorter rereading times of previous text information. Connectives also trigger readers to make regressions to preceding information. These findings indicate that connectives function as <b>immediate</b> “processing <b>instructions.</b> ” Furthermore, all students performed better on local comprehension tasks (i. e., bridging inference questions) after reading texts containing connectives than after reading texts without these markers. These findings apply to both text types and to all students, regardless of reading proficiency. This study highlights the importance of comprehensible texts in which implicit coherence relations are avoided...|$|R
40|$|The study {{examines}} {{the effectiveness of}} using computer games for after-school remedial mastery learning. We incorporated instructional materials related to “area of a circle ” into the popular Monopoly game to enhance the performance of sixth-grade students learning mathematics. The program requires that students enter the answers to avoid the shortcomings of multiple-choice questions. Throughout the game, whenever students are unable to answer questions correctly they receive <b>immediate</b> remedial <b>instruction</b> specifically for that question. This study sought to compare the effectiveness of game-based and video-based remedial instruction incorporated with elements of mastery learning. The results demonstrate that (a) both instructional videos and the proposed Monopoly game enhance the learning of mathematical concepts; and (b) the Monopoly game {{is more effective than}} instructional videos at leveraging the benefits of mastery learning. The goal of the research was to integrate games and mastery learning into after-school remedial instruction and design a game to practice the steps o...|$|R
40|$|AbstractAn {{intelligent}} tutoring system aims {{to provide}} <b>immediate</b> and customized <b>instruction</b> and feedback to learners. In this context, existing tutoring systems have limitations {{in the areas}} of dialogue, feedback and emotion-motivation, which are important elements in the learning process. These aspects are related with the learner abilities, capacities, and motivations. To overcome these limitations, we propose to model the user characteristics that are involved in the learning process and in the human- machine interaction. In this paper we present a proposal to consider an integral user profile in order to gain effectiveness and to achieve more adaptability to the learner...|$|R
40|$|There exists {{substantial}} {{variation in}} how schools allocate instruction time to school subjects. The effectiveness of that allocation {{depends on the}} <b>immediate</b> effect of <b>instruction</b> in one subject on achievement in the same subject, on how skills further develop over time, and on possible spillover effects on achievement in other subjects. Exploiting a policy intervention in Dutch primary education, we find that effects of language instruction on language skills fade away quickly, while effects of (early) language instruction on several other skills are long-lasting. The results illustrate that spillover effects can arise {{in the context of}} skill acquisition...|$|R
50|$|In stack machine code, {{the most}} {{frequent}} instructions consist of just an opcode selecting the operation. This can easily fit in 6 bits or less. Branches, load <b>immediates,</b> and load/store <b>instructions</b> require an argument field, but stack machines often arrange that the frequent cases of these still fit together with the opcode into a compact group of bits. The selection of operands from prior results is done implicitly by ordering the instructions. In contrast, register machines require two or three register-number fields per ALU instruction to select operands; the densest register machines average about 16 bits per instruction.|$|R
5000|$|PIC cores have skip instructions, {{which are}} used for {{conditional}} execution and branching. The skip instructions are [...] "skip if bit set" [...] and [...] "skip if bit not set". Because cores before PIC18 had only unconditional branch instructions, conditional jumps are implemented by a conditional skip (with the opposite condition) followed by an unconditional branch. Skips are also of utility for conditional execution of any <b>immediate</b> single following <b>instruction.</b> It is possible to skip skip instructions. For example, the instruction sequence [...] "skip if A; skip if B; C" [...] will execute C if A is true or if B is false.|$|R
5000|$|Instructions {{were either}} 15 or 30 bits long, so {{there could be}} up to four {{instructions}} per 60-bit word. A 60-bit word could contain any combination of 15-bit and 30-bit instructions that fit within the word, but a 30-bit instruction could not wrap to the next word. The op codes were six bits long. The remainder of the instruction was either three three-bit register fields (two operands and one result), or two registers with an 18-bit <b>immediate</b> constant. All <b>instructions</b> were 'register to register'. For example, the following COMPASS code loads two values from memory, performs a 60-bit integer add, then stores the result: ...|$|R
40|$|The current {{standard}} two-path floating-point arithmetic algorithm's latency is on {{the order}} of 2 lg n. The normalization required by the standard two-path algorithm leaves outputs in a normalized non-redundant form, which constrains any new approaches that try to improve upon the floating-point adder architecture. Reducing the latency of floating-point addition would help in all floating-point operations, especially in conditional branches that are present in iterative methods. In this work, we propose two similar approaches that reduce the latency, increase the throughput, and minimize the critical path of the floating-point adder architecture by pipelining the two log 2 n operations of addition and a variable shift that inherently exist within both the far and near paths of the standard two-path algorithm. We leave the intermediate results in a redundant format in case they are needed by the <b>immediate</b> successor <b>instruction.</b> Whether or not the result is needed by the next instruction the intermediate redundant result has time to be converted to a normalized non-redundant form while the next addition occurs. We accomplish these goals while adhering to the input and output constraints of the IEEE standard for binary floating-point arithmetic...|$|R
2500|$|From this point, {{recruits}} experience [...] "Black Friday", {{where they}} meet their permanent Drill Instructors. They also meet their Company Commander, usually a captain, who orders their Drill Instructors to train {{them to become}} Marines and has them recite the Drill Instructor's Creed. At this point recruit training truly begins. Recruits are familiarized with incentive training {{as one of the}} consequences of disobedience or failure to perform to a Drill Instructor's expectations. The Drill Instructors physically, psychologically and mentally harass the recruits, including yelling at maximum volume and intimidation, to simulate stress of the battlefield and elicit <b>immediate</b> compliance to <b>instructions.</b> The remainder of receiving is made as confusing and disorienting for the recruits as possible to help distance the recruits from civilian habits and to prepare them for Marine Corps discipline.|$|R
50|$|German or Austrian {{residents}} of Queensland who were reservists in their national armies came under <b>immediate</b> suspicion, and <b>instructions</b> were issued for their {{arrest and detention}} - again, a role that the Queensland Police were undertaking within {{the second week of}} August. A small number of German passenger and merchant vessels in Queensland ports were not allowed to leave once war was declared. The crews were initially confined to their ships and later interned as prisoners of war. Dr Eugen Hirschfeld voluntarily resigned from the Queensland Legislative Council; the German-born medical practitioner had naturalised as a British subject in May 1893 but had continued to take {{a leading role in the}} German community of Queensland, including his appointment as German Consul in 1906. Although his loyalties were never in doubt in 1914, he was interned in February 1916.|$|R
40|$|Smart avatars are virtual human {{representations}} {{controlled by}} real people. Given instructions interactively, smart avatars {{can act as}} autonomous or reactive agents. During a real-time simulation, a user {{should be able to}} dynamically refine his or her avatar's behavior in reaction to simulated stimuli without having to undertake a lengthy off-line programming session. In this paper, we introduce an architecture, which allows users to input <b>immediate</b> or persistent <b>instructions</b> using natural language and see the agents' resulting behavioral changes in the graphical output of the simulation. Keywords Autonomous agents, natural language processing, smart avatars, virtual environments. 1. INTRODUCTION In this paper, we describe smart avatars [28, 34], which are virtual representations of humans controlled by real people. Given instructions interactively, smart avatars can act as autonomous or reactive agents. During a real-time simulation, a user should be able to dynamically refine his [...] ...|$|R
40|$|There is a {{critical}} need to identify primary level students experiencing difficulties in mathematics to provide <b>immediate</b> and targeted <b>instruction</b> that remediates their deficits. However, most early math screening instruments focus only {{on the concept of}} number, resulting in inadequate and incomplete information for teachers to design intervention efforts. We propose a mathematics assessment that screens and provides diagnostic information in six domains that are important to building a strong foundation in mathematics. This article describes the conceptual framework and psychometric qualities of a web-based assessment tool, the Primary Math Assessment (PMA). The PMA includes a screener to identify students at risk for poor math outcomes and a diagnostic tool to provide a more in-depth profile of children’s specific strengths and weaknesses in mathematics. The PMA allows teachers and school personnel to make better instructional decisions by providing more targeted analyses...|$|R
