140|84|Public
2500|$|Computations of the pushdown {{automaton}} are {{sequences of}} steps. The computation {{starts in the}} initial state [...] with the initial stack symbol [...] on the stack, and a string [...] on the <b>input</b> <b>tape,</b> thus with initial description [...]|$|E
2500|$|In {{order to}} formalize the {{semantics}} of the pushdown automaton {{a description of}} the current situation is introduced. Any 3-tuple [...] is called an instantaneous description (ID) of , which includes the current state, the part of the <b>input</b> <b>tape</b> that has not been read, and the contents of the stack (topmost symbol written first). The transition relation [...] defines the step-relation [...] of [...] on instantaneous descriptions. For instruction [...] there exists a step , for every [...] and every [...]|$|E
5000|$|An <b>input</b> <b>tape</b> {{containing}} all the ARGUS {{programs at}} the installation.|$|E
40|$|We {{investigate}} {{space complexity}} hierarchies of three-dimensional Turing machines whose <b>input</b> <b>tapes</b> {{are restricted to}} cubic ones, and show that there exists an infinite hierarchy among the classes of sets accepted by space-bounded three-dimensional deterministic or nondeterministic Turing machines with cubic inputs...|$|R
40|$|AbstractThe {{purpose of}} this paper is a {{comprehensive}} study of a family of rational relations, both of finite and infinite words, namely those that are computable by automata where the reading heads move simultaneously on the n <b>input</b> <b>tapes,</b> and that we thus propose to call synchronized rational relations...|$|R
5000|$|... {{external}} storage: 8-track punched <b>tape.</b> <b>Input</b> device: paper <b>tape</b> reader FS-1501 (up to 1500 symbols/second). Output device: {{tape punch}} PL-80 (up to 80 characters per second) ...|$|R
50|$|The two {{tapes of}} a {{transducer}} are typically {{viewed as an}} <b>input</b> <b>tape</b> and an output tape. On this view, a transducer is said to transduce (i.e., translate) the contents of its <b>input</b> <b>tape</b> to its output tape, by accepting a string on its <b>input</b> <b>tape</b> and generating another string on its output tape. It may do so nondeterministically and it may produce more than one output for each input string. A transducer may also produce no output for a given input string, in which case {{it is said to}} reject the input. In general, a transducer computes a relation between two formal languages.|$|E
5000|$|An <b>input</b> <b>tape</b> {{to contain}} all the machine {{language}} programs - unchanged, new or reassembled.|$|E
5000|$|The {{keyboard}} of the CPT 4200 had action keys for [...] "skip" [...] and [...] "read" [...] and mode keys for [...] "word", [...] "line", [...] "paragraph," [...] and [...] "page." [...] Pressing [...] "read" [...] transferred a word, line, paragraph, or page, {{depending on}} which mode key had been selected. from the <b>input</b> <b>tape</b> to both the paper and the output tape. Line boundaries recorded on the <b>input</b> <b>tape</b> were ignored or retained depending {{on whether or not}} an [...] "adjust" [...] key had been selected. Alternatively, pressing [...] "skip" [...] moved past the corresponding amount of text on the <b>input</b> <b>tape</b> without sending it to the typewriter or to the output tape. It acted like a delete key, though text was not actually deleted, only bypassed.|$|E
5000|$|LIS - Line <b>Input</b> Selector, <b>tape</b> {{loop and}} input/output {{expander}} for the DLC ...|$|R
40|$|AbstractWe {{show that}} n log n space is {{sufficient}} for three-way nondeterministic Turing machines (3 NTs) to simulate two-dimensional alternating finite automata (AFs), where n {{is the number of}} columns of rectangular <b>input</b> <b>tapes.</b> It is already known that n log n space is necessary for 3 NTs to simulate AFs. Thus, our algorithm is optimal in the sense of space complexity point of view...|$|R
40|$|We {{consider}} the previously defined notion of finite-state independence and we focus specifically on normal words. We characterize finite-state independence of normal words {{in three different}} ways, using three different kinds of finite automata running on infinite words (Büchi automata) : finite automata with two <b>input</b> <b>tapes,</b> selectors and shufflers. We give an algorithm to construct a pair of finite-state independent normal words. Unfortunately it has doubly exponential computational complexity...|$|R
5000|$|An <b>input</b> <b>tape</b> {{containing}} {{a library of}} macros. These macros would be added into the ARGUS code during assembly and before translation into machine code.|$|E
50|$|File 1 just emptied {{and became}} the new output file. One run is left on each <b>input</b> <b>tape,</b> and merging those runs {{together}} will make the sorted file.|$|E
5000|$|Projection to an automaton. There are two {{projection}} functions: [...] {{preserves the}} <b>input</b> <b>tape,</b> and [...] preserves the output tape. The first projection, [...] {{is defined as}} follows: ...|$|E
40|$|Abstract. Ultrametric {{algorithms}} {{are similar}} to probabilistic algorithms but they describe the degree of indeterminism by p-adic numbers instead of real numbers. No wonder that only very few examples of advantages for ultrametric algorithms over probabilistic ones have been published up to now, and all they are slightly artificial. This paper considers ultra-metric and probabilistic one-counter automata with two one-way <b>input</b> <b>tapes.</b> A language is found which is recognizable by ultrametric but not by probabilistic automata of this type. ...|$|R
40|$|This paper {{introduces}} a three-dimensional multicounter automaton whose <b>input</b> <b>tapes</b> {{are restricted to}} cubic ones, and investigates some of its properties. We first show {{the difference between the}} accepting powers of five-way and six-way three-dimensional multicounter automata, and between the accepting powers of deterministic and nondeterministic five-way three-dimensional multicounter automata. We then show that hierarchies can be obtained by varying the number of counters or the amount of space allowed, for classes of sets accepted by five-way three-dimensional multicounter automata...|$|R
40|$|We wish {{to use a}} given nondeterministic two-way multi-tape {{acceptor}} as a transducer {{by supplying}} the contents for only some of its <b>input</b> <b>tapes,</b> and asking it to generate the missing contents for the other tapes. We provide here an algorithm for assuring beforehand that this transduction always results in a finite set of answers. We also develop an algorithm for evaluating these answers whenever the previous algorithm indicated their finiteness. Furthermore, our algorithms {{can be used for}} speeding up the simulation of these acceptors even when not used as transducers...|$|R
50|$|A pushdown {{automaton}} that {{is allowed}} to move either way on its <b>input</b> <b>tape</b> is called two-way pushdown automaton (2PDA); it has been studied by Hartmanis, Lewis, and Stearns (1965).|$|E
50|$|A FST {{will read}} {{a set of}} strings on the <b>input</b> <b>tape</b> and generates a set of {{relations}} on the output tape. An FST {{can be thought of}} as a translator or relater between strings in a set.|$|E
50|$|An NTM has the {{property}} of bounded non-determinism, i.e., if an NTM always halts on a given <b>input</b> <b>tape</b> T then it halts in a bounded number of steps, and therefore can only have a bounded number of possible configurations.|$|E
40|$|AbstractThe paper {{develops}} {{the theory of}} Turing machines as recognizers of infinite (ω-type) <b>input</b> <b>tapes.</b> Various models of ω-type Turing acceptors are considered, varying mainly in their mechanism for recognizing ω-tapes. A comparative study of the models is made. It is shown that regardless of the ω-recognition model considered, non-deterministic ω-Turing acceptors are strictly more powerful than their deterministic counterparts. Canonical forms are obtained {{for each of the}} ω-Turing acceptor models. The corresponding families of ω-sets are studied; normal forms and algebraic characterizations are derived for each family...|$|R
40|$|AbstractWe wish {{to use a}} given nondeterministic two-way multi-tape {{acceptor}} as a transducer {{by supplying}} the contents for only some of its <b>input</b> <b>tapes,</b> and asking it to generate the missing contents for the other tapes. We provide here an algorithm for assuring beforehand that this transduction always results in a finite set of answers. We also develop an algorithm for evaluating these answers whenever the previous algorithm indicated their finiteness. Furthermore, our algorithms {{can be used for}} speeding up the simulation of these acceptors even when not used as transducers...|$|R
40|$|The program AECOPY {{can be used}} {{to inspect}} and copy IBM 360 / 370 {{magnetic}} tapes. The number and length of physical records on the tape and actual records may be printed, {{and a number of other}} typical magnetic tape operations performed. The record characteristics and format of <b>input</b> <b>tapes</b> need not be known beforehand, and the type of error handling required may be specified by the user. Input to AECOPY may also be given in free form English from a batch job submitted by the user or by the operator at the computer console...|$|R
50|$|The {{construction}} {{requires that}} each computation step in M' corresponds {{to at least}} 2 computation steps of M. So M' takes no more than f(n)/2 steps, after an initial linear number of steps to convert the <b>input</b> <b>tape</b> into the compressed representation.|$|E
5000|$|... will be {{designed}} to compute a log-space computable function [...] (where [...] is the alphabet of both the input and output tapes). If [...] is executed with [...] on its <b>input</b> <b>tape,</b> when the machine halts, it will have [...] remaining on its output tape.|$|E
50|$|A {{single edge}} weight might {{represent}} {{an array of}} impulse responses of a complex system (see figure to the right), or a character from an alphabet picked off the <b>input</b> <b>tape</b> of a finite automaton, while the graph might represent {{the flow of information}} or state transitions.|$|E
50|$|The main {{units of}} the system were: keyboard, controlling-reading unit, <b>input</b> punched <b>tape,</b> output punched tape, printer, {{magnetic}} tape memory, ferrite memory, ALU (arithmetical logical unit), CPU (central processing unit), and power supply.|$|R
5000|$|The MT/ ST was {{followed}} by the Magnetic Tape Selectric Composer, which differed only in output device, and for which it served as <b>input.</b> (<b>Tapes</b> prepared or edited on the MT/ST could be played back on the MT/SC.) Thus automated line justification, with three type sizes (10, 12, and 15 characters per inch), bold, italic, and a variety of type styles (implemented using type [...] "balls" [...] {{similar to those of the}} Selectric typewriter) were made available within the budget of a medium-sized office or publisher. When printing a document, the machine would pause printing at the stop code and wait for an operator to change the Selectric type ball and press a button telling the device to continue.|$|R
40|$|Computer program, SPAN, {{measures}} the dry heat thermal sterilization process {{applied to a}} planetary capsule and calculates the time required for heat application, steady state conditions, and cooling. The program {{is based on the}} logarithmic survival of micro-organisms. Temperature profiles must be <b>input</b> on <b>tape...</b>|$|R
50|$|A {{read-only}} Turing {{machine or}} Two-way deterministic finite-state automaton (2DFA) is class of models of computability that {{behave like a}} standard Turing machine and can move in both directions across input, except cannot write to its <b>input</b> <b>tape.</b> The machine in its bare form is equivalent to a Deterministic finite automaton in computational power, and therefore can only parse a regular language.|$|E
5000|$|... 21.28.58← newcopyin (123456) 21.32.21 0.06 CORE GIVEN 4736 WAITING FOR MT 123456 21.32.34 USED U31 AS *MT0, MT (123456,HELLOTAPE(0/0)) ← hello,hello(/plan) ← **** 21.32.52 FREE *CR0, 2 TRANSFERS DISPLAY : 1 PARAMETER ACCEPTED DISPLAY 0.08: MONITOR DISPLAY : <b>INPUT</b> <b>TAPE</b> * 123456. DISPLAY 0.08: MONITOR 21.32.52 FREE *FH0, 1 TRANSFERS 21.32.52 FREE U31,8 TRANSFERS 0.10 :DELETED : OK 21.32.52 0.10 DELETED,CLOCKED 0.00 END OF MACRO ...|$|E
50|$|The Z1 {{contained}} {{almost all}} the parts of a modern computer, i.e. control unit, memory, micro sequences, floating-point logic and input-output devices. The Z1 was freely programmable via punched tape and a punched tape reader. There was a clear separation between the punched tape reader, the control unit for supervising the whole machine and {{the execution of the}} instructions, the arithmetic unit, and the input and output devices.The <b>input</b> <b>tape</b> unit read perforations in 35-millimeter film.|$|E
50|$|Microphone <b>inputs</b> on <b>tape</b> and {{cassette}} recorders, {{sometimes with}} remote control switching on the ring, on early, monaural cassette recorders mostly a dual-pin version {{consisting of a}} 3.5 mm TS for the microphone and a 2.5 mm TS for remote control which switches the recorder's power supply.|$|R
40|$|An ω-language {{is a set}} {{consisting}} of ω-length strings over some alphabet; an ω-automaton is a device capable of recognizing ω-length <b>input</b> <b>tapes.</b> This paper introduces the basic notions concerning generation of ω-languages by means of ω-grammars and their recognition by ω-automata with various recognition modes. Attention is focused on ω-CFL's, the ω-languages generated by ω-context-free grammars. Two main characterizations {{of the family of}} ω-CFL's are obtained. (a) An ω-language is an ω-CFL if and only if it can be represented as Ui= 1 /nUiVi/ω, where for each i= 1,…, n, Ui and Vi are context-free languages. (b) ω-CFL's are precisely the ω-languages recognized by ω-pushdown automata of three distinct types. A few other characterizations and normal forms for the ω-CFL's are obtained and several decidability results are established...|$|R
40|$|Recently, due to {{the advance}} in dynamic image processing, {{computer}} animation, augmented reality (AR), and so forth, {{it has become increasingly}} apparent that the study of four-dimensional pattern processing (three-dimensional pattern processing with time axis) should be very important. Thus, the study of four-dimensional automata as the computational model of four-dimensional pattern processing has been meaningful. From this point of view, we first introduced a four-dimensional automaton in 2002. In the multi-dimensional pattern processing, designers often use a strategy whereby features are extracted by projecting high-dimensional space on low-dimensional space. In this paper, from this viewpoint, we introduce a new computational model, k-neighborhood template A-type three-dimensional bounded cellular acceptor (abbreviated as A- 3 BCA(k)) on four-dimensional <b>input</b> <b>tapes,</b> and discuss hierarchy based on neighborhood template about A- 3 BCA(k) ...|$|R
