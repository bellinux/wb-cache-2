15|189|Public
5000|$|ISO/IEC 24752-2:2014: Information technology—User interfaces—Universal remote console—Part 2: User <b>interface</b> <b>socket</b> {{description}} (revision of ISO/IEC 24752-2:2008) ...|$|E
50|$|Some DVB-S2 {{receivers}} with {{a standard}} CI (not CI+) common <b>interface</b> <b>socket</b> can also be fitted with a (different) HD+ CAM and receive HD+ channels when new firmware is downloaded to the receiver to imitate the CI+ content protection. CI CAMs (with the HD+ smart card) {{are expected to be}} available from stores in the Summer of 2010 for €100.|$|E
50|$|Existing {{receivers}} and TVs with integrated satellite tuners {{that are}} capable of tuning to the DVB-S2/MPEG4 HD+ signal can also be used provided they are equipped with a CI+ or CI 2.0 common <b>interface</b> <b>socket</b> (including content protection to allow the blocking of recording broadcast content) for a plug-in Nagravision HD+ CAM which will be available in Spring 2010 for a price of about €100, including the HD+ smart card.|$|E
5000|$|Event-driven <b>interface</b> to <b>sockets</b> and files. Time-based and {{user-defined}} {{events are}} also possible.|$|R
50|$|Note: various PCBs {{with the}} same model number were shipped with a {{different}} configuration regarding CD-ROM <b>interfaces,</b> <b>sockets</b> and presence/absence of the ASP/CSP chip. The following models were typically equipped with an ASP/CSP socket: CT1740, CT1750, CT1770, CT1790, CT2230, CT2740, CT2950, CT2290. The Sound Blaster Easy 16 (CT2750) was sold with the ASP/CSP chip and a parallel CD-ROM port and 1 audio out.|$|R
50|$|ScriptBasic has an open {{interface}} for module developers. There {{are several}} external modules {{developed by the}} developer of ScriptBasic {{as well as by}} other developers. These include data base connection handling for various database systems (MySQL, PostgreSQL, ODBC, Berkeley DB and others), binding to the library CURL, PNG graphics, GTK+ graphical user <b>interface,</b> <b>sockets,</b> regular expressions, thread support, data compression and CGI.|$|R
50|$|Link Layer Topology Discovery in Windows Vista {{consists}} of two components. The LLTD Mapper I/O component is the master module which controls the discovery process and generates the Network Map. Appropriate permissions for this may be configured with Group Policy settings. It can be allowed or disallowed for domains, and private and public networks. The Mapper sends discovery command packets onto the local network segment via a raw network <b>interface</b> <b>socket.</b> The second component of LLTD are the LLTD Responders which answer Mapper requests about their host and possibly other discovered network information.|$|E
5000|$|The Open Core Protocol International Partnership Association, Inc. (OCP-IP) was an independent, {{non-profit}} {{semiconductor industry}} consortium formed {{to administer the}} support, promotion and enhancement of the Open Core Protocol (OCP). OCP was the first fully supported, openly licensed, comprehensive, <b>interface</b> <b>socket</b> for semiconductor intellectual property (IP) cores. The mission of OCP-IP was to address problems relating to design, verification, and testing which are common to IP core reuse in [...] "plug and play" [...] {{system on a chip}} (SoC) products. This initiative comprehensively fulfills system-level integration requirements by promoting IP core reusability and reducing design time, risk and manufacturing costs for SoC designs. Design teams developing consumer, data processing, telecom (wireless or wired), datacom and mass storage applications can gain significant benefits from the OCP-IP solution.|$|E
5000|$|In 1992, a new {{range was}} produced, utilising the first ARM macrocell: the ARM250 microprocessor, a single-chip design {{including}} the functionality of an ARM3 chip without cache, the IOC1 (Input Output Controller), VIDC1a (VIDeo and sound Controller) and MEMC1 (MEMory Controller) chips all integrated into one chip. The increase in clock frequency, from 8 MHz to 12 MHz, gave {{a performance of}} 7 MIPS. The machines were supplied with RISC OS 3.10 or 3.11. The A30x0 series had a one-piece design, similar to the A3000 but far smaller, while the A4000 looked like a slightly slimmer A5000. The A3010 model {{was intended to be}} a home computing machine, featuring a TV modulator and standard 9-pin joystick ports, while the A3020 targeted the home office and educational markets, featuring a built-in 2.5" [...] hard drive and a dedicated network <b>interface</b> <b>socket.</b> Technically, the A4000 was almost identical to the A3020, only differing in hard disk size (3.5-inch in the A4000), though it sported a different appearance. All three ARM250-based machines could be upgraded to 4 MB with plug-in chips (though the A3010 was designed for 2 MB, third party upgrades overcame this) and one [...] "mini-podule" [...] slot as used for internal expansion in the A3000.|$|E
50|$|Expansion: System bus <b>interface</b> DIP <b>socket</b> (under a {{cover on}} the bottom of the machine).|$|R
50|$|Although XTI/TLI {{is similar}} to the BSD <b>socket</b> <b>interface,</b> neither is {{included}} or includes the other one and several functions having the same role have different behavior. Both, the TLI and BSD <b>sockets</b> <b>interfaces</b> in UNIX SVR 3 and SVR 4 operating systems releases are implemented using the same underlying STREAMS Transport Service Interface.|$|R
50|$|The lollipop, a {{small circle}} on a stick, {{represents}} an implemented or provided <b>interface.</b> The <b>socket</b> symbol is a semicircle on a stick that can fit around the lollipop. This socket is a dependency or needed interface.|$|R
40|$|Abstract. Converting {{a problem}} to run on a {{distributed}} system is not trivial and often involves many trade-offs. The Java api provides cross platform access to four distributed computing communication mechanisms (RMI with Serializable or Externalizable <b>Interface,</b> <b>socket</b> and datagram socket). Matrix multiplication is used as an experimental framework to present an analysis of performance and insights towards {{an understanding of the}} trade-offs encountered when adapting an algorithm to a distributed system...|$|E
40|$|In this paper, we {{describe}} the design and implementation of an UDP-based socket that utilizes multiple network interface units connected through one or more networks. network APIs to hide low-level technical details from users. Parallel message fragmentation and reconstruction techniques and a reliable UDP-based protocol are introduced. The proposed socket layer transparently provides an expandable high bandwidth solution, fault tolerance, and load balancing for transmitting large messages over multiple networks. A prototype socket based on this model, called MuniSocket (Multiple Network <b>Interface</b> <b>Socket),</b> has been implemented and evaluated...|$|E
40|$|Abstract. Distributed {{computing}} offers increased performance over single machine {{systems by}} spreading computations among several networked machines. Converting {{a problem to}} run on a distributed system is not trivial and often involves many trade-offs. Many higher level communication packages exist but {{for a variety of}} reasons(portability, performance, ease of development etc.), developers may choose to implement a distributed algorithm using one of the four Java API communication mechanisms (RMI with Serializable or Externalizable <b>Interface,</b> <b>socket</b> and datagram socket). This paper provides a performance programming complexity analysis of these communication mechanisms based upon experimental results using well known algorithms to provide data points. Numerical results and insights offer guidance towards understanding the communication and computational trade-offs as well as the programming complexities encountered when adapting an algorithm to a distributed system. 1. Introduction. Th...|$|E
50|$|Note: various PCBs {{with the}} same model number were shipped with a {{different}} configuration regarding CD-ROM <b>interfaces</b> and <b>sockets.</b> Even among the same models variations exist; for example, some OEM-specific cards were made without the TEA2025/TDA1517 amplifier to reduce costs.|$|R
40|$|International audienceWe {{describe}} {{in this paper}} the compilation scheme of the GNU Prolog system. This system is built on our previous experience of compiling Prolog to C in wamcc. The compilation scheme has been however redesigned to overcome drawbacks of the compilation to C. In particular, GNU-Prolog {{is based on a}} low-level miniassembly platform-independent language that makes it possible to avoid the phase of compiling C code, and thus speeds up drastically compilation time. It also makes it possible to produce small stand alone executable ﬁles {{as the result of the}} compilation process. Interestingly, GNU Prolog is now compliant to the ISO standard and includes several extensions (constraint solving, OS <b>interface,</b> <b>sockets,</b> global variables, etc). The overall system is eﬃcient and comparable in performances with commercial system...|$|R
5000|$|Gilligan, R. E., Thomson, S., Bound, J., and Stevens, W. R. 1999. [...] "Basic <b>Socket</b> <b>Interface</b> Extensions for IPv6," [...] RFC 2553 ...|$|R
40|$|This paper {{presents}} a new architecture to make today’s and next generation’s Television accessible for all. Our proposal {{is based on}} the ISO/IEC 24752 “Universal Remote Console Framework” standard [1]. This standard defines an abstract user interface layer called the “user <b>interface</b> <b>socket</b> ” and allows the development of pluggable user interfaces for any type of user. Since this architecture is standards based, the development of compatible pluggable interfaces is open to any third party. Besides, the Universal Control Hub (UCH) is a gateway oriented architecture for implementing the Universal Remote Console (URC) framework in the digital home [2]. The main features of the UCH are: • It acts as a bridge between targets and controllers: each with its own communication and control protocol, that otherwise would be unable to talk to one another...|$|E
40|$|Network {{middleware}} is {{a software}} layer that provides abstract network APIs {{to hide the}} low-level technical details from users. Existing network middleware support single network interface and link (channel) message transfers. In this paper, we describe a middleware-level parallel transfer technique that utilizes multiple network interface units that may be connected through multiple net-works. A prototype socket called MuniSocket (Multiple Network <b>Interface</b> <b>Socket)</b> has been implemented to provide this functionality. MuniSocket pro-vides parallel message fragmentation and reconstruction mechanisms in addi-tion to load balancing. It operates on any reliable transport protocol such as TCP and transparently provides an expandable high bandwidth solution that (1) re-duces message transfer time, (2) provides fault tolerance, and (3) facilitates dy-namic load balancing among the underlying multiple networks. The experimen-tal evaluation of MuniSocket illustrates good performance gains, where a peak bandwidth of 187 Mbps was achieved on two fast Ethernet networks. Key Words: Middleware, socket, parallel data transfer, and load balancing 1...|$|E
40|$|Socket is an {{important}} part of every prosthetic limb as an interface between the residual limb and prosthetic components. Biomechanics of socket-residual limb interface, especially the pressure and force distribution, have effect on patient satisfaction and function. This paper aimed to review and evaluate studies conducted in the last decades on the design of socket, in-socket interface pressure measurement, and socket biomechanics. Literature was searched to find related keywords with transtibial amputation, socket-residual limb <b>interface,</b> <b>socket</b> measurement, socket design, modeling, computational modeling, and suspension system. In accordance with the selection criteria, 19 articles were selected for further analysis. It was revealed that pressure and stress have been studied in the last decaeds, but quantitative evaluations remain inapplicable in clinical settings. This study also illustrates prevailing systems, which may facilitate improvements in socket design for improved quality of life for individuals ambulating with transtibial prosthesis. It is hoped that the review will better facilitate the understanding and determine the clinical relevance of quantitative evaluations...|$|E
50|$|In June 2004, AMD {{released}} Socket 939 as {{the mainstream}} Athlon 64 with dual-channel memory <b>interface,</b> leaving <b>Socket</b> 940 {{solely for the}} server market (Opterons), and relegating Socket 754 as a value/budget line, for Semprons and slower versions of the Athlon 64. Eventually Socket 754 replaced Socket A for Semprons.|$|R
5000|$|XTI {{provides}} similar functionality as the Berkeley <b>sockets</b> <b>interface,</b> {{however it}} is protocol independent {{in contrast to the}} <b>socket</b> <b>interface</b> which is heavily biased toward the Internet Protocols. [...] It is based on the UNIX System V Transport Layer Interface (TLI)., which is a transport service definition adhering to the Open Systems Interconnection (OSI) model.XTI consists of a cooperating STREAMS module, link library application programming interface (API), header files, and the rules and restrictions elaborating how XTI processes work and interact.|$|R
5000|$|The Berkeley <b>socket</b> <b>interface</b> {{is defined}} in several header files. The names and content of these files differ {{slightly}} between implementations. In general, they include: ...|$|R
40|$|Abstract. This paper {{introduces}} {{a kind of}} digital deep underground multi-point temperature and humidity detection device. The system consists of detecting casing, temperature and humidity acquisition ring and control system. Detection of casing pipe wall is provided with a plurality of fixed temperature, humidity collecting ring installation wiring hole. Temperature, humidity collecting ring comprises an annular casing, {{is located in the}} annular casing digital temperature acquisition board, digital humidity acquisition board, circular shell inner wall is provided with a threading hole, an air hole wall. The control system comprises the control switch, display, channel switching buttons and <b>interface</b> <b>socket,</b> arranged inside the shell. The power supplies module and the control processor. Compared with the existing technology, the system can be more accurate, convenient to complete the deep underground temperature, humidity signal acquisition, and it is more easy to change the signal acquisition position, at the same time, the system has low equipment cost, easy to assemble and use, has very high practicability...|$|E
40|$|Creative Commons Attribution License, which permits {{unrestricted}} use, distribution, {{and reproduction}} in any medium, provided the original work is properly cited. Socket {{is an important}} part of every prosthetic limb as an interface between the residual limb and prosthetic components. Biomechanics of socket-residual limb interface, especially the pressure and force distribution, have effect on patient satisfaction and function. This paper aimed to review and evaluate studies conducted in the last decades on the design of socket, in-socket interface pressure measurement, and socket biomechanics. Literature was searched to find related keywords with transtibial amputation, socket-residual limb <b>interface,</b> <b>socket</b> measurement, socket design, modeling, computational modeling, and suspension system. In accordance with the selection criteria, 19 articles were selected for further analysis. It was revealed that pressure and stress have been studied in the last decaeds, but quantitative evaluations remain inapplicable in clinical settings. This study also illustrates prevailing systems, whichmay facilitate improvements in socket design for improved quality of life for individuals ambulating with transtibial prosthesis. It is hoped that the review will better facilitate the understanding and determine the clinical relevance of quantitative evaluations. 1...|$|E
40|$|This thesis {{presents}} {{the development of}} an Intellectual Property (IP) core for a System-on-Chip (SoC) implementation of an integrated circuit tester. The resulting realization is called a Tester-on Chip (ToC). The ToC IP core is used in conjunction with a microelectromechanical (MEMS) interface that provides the necessary connectivity between the tester circuitry and the Device Under Test (DUT). Instead of using traditional Automatic Test Equipment (ATE) that includes a complex external test head, the DUT is placed in a MEMS fixture or socket and spring loaded MEMS contacts are used to probe the DUT as required. The ToC implementation can generate and apply a comprehensive set of test vectors at-speed. The resulting test response information is analyzed by the ToC and the corresponding test results are sent via a Universal Serial Bus (USB) interface to a host computer, such as a laptop computer, for visualization and decision making. A scalable vector RAM is used to store the test vectors and it is held as a separate module in the MEMS <b>interface</b> <b>socket.</b> (Abstract shortened by UMI.) Dept. of Electrical and Computer Engineering. Paper copy at Leddy Library: Theses 2 ̆ 6 Major Papers - Basement, West Bldg. / Call Number: Thesis 2003. R 37. Source: Masters Abstracts International, Volume: 42 - 02, page: 0649. Adviser: W. C. Miller. Thesis (M. A. Sc.) [...] University of Windsor (Canada), 2003...|$|E
40|$|Recently network-connected {{measurement}} {{instruments and}} controllers have increased. Today, Ethernet could {{be understood as}} a kind of a field bus for the front-end subsystems. The network-connected equipment uses the socket communication as a common software <b>interface.</b> The <b>socket</b> <b>interface</b> requires different handling from bus attached device access, that is, control application programmers have to understand the socket communication protocol in detail. It is inconvenient for them to develop the software efficiently. We developed a software framework, Device Masquerade, which handles a network-connected device as a pseudo device. The <b>socket</b> <b>interface</b> can be controlled through common equipment access libraries like bus-attached devices. The Device Masquerade consists of three parts; 1) API functions to access pseudo device, 2) a communication client software to access the server running on the remote equipment, 3) a pseudo device driver to interconnect between application programs linking the API library and the communication client. The pseudo device driver implements the exclusive access control. It is possible to replace the socket with other protocol. We applied the Device Masquerade for the installation of motor control units in the linac control system...|$|R
40|$|In {{this paper}} we {{describe}} the design and {{the implementation of the}} GNU Prolog system. This system draws on our previous experience of compiling Prolog to C in the wamcc system and of compiling finite domain constraints in the clp(FD) system. The compilation scheme has however been redesigned in order to overcome the drawbacks of compiling to C. In particular, GNU-Prolog is based on a low-level mini-assembly platform-independent language that makes it possible to avoid compiling C code, and thus drastically reduces compilation time. It also makes it possible to produce small stand-alone executable files {{as the result of the}} compilation process. Interestingly, GNU Prolog is now compliant to the ISO standard, includes several extensions (OS <b>interface,</b> <b>sockets,</b> global variables, etc) and integrates a powerful constraint solver over finite domains. The system is efficient and in terms of performance is comparable with commercial systems for both the Prolog and constraint aspects. ...|$|R
40|$|We {{describe}} {{in this paper}} the compilation scheme of the GNU Prolog system. This system is built on our previous experience of compiling Prolog to C in wamcc. The compilation scheme has been however redesigned to overcome drawbacks of the compilation to C. In particular, GNU-Prolog {{is based on a}} low-level miniassembly platform-independent language that makes it possible to avoid the phase of compiling C code, and thus speeds up drastically compilation time. It also makes it possible to produce small stand alone executable files {{as the result of the}} compilation process. Interestingly, GNU Prolog is now compliant to the ISO standard and includes several extensions (constraint solving, OS <b>interface,</b> <b>sockets,</b> global variables, etc). The overall system is efficient and comparable in performances with commercial systems. 1 Introduction GNU Prolog is a free Prolog compiler supported by the GNU organization ([URL] The development of GNU Prolog started in January [...] ...|$|R
40|$|Efficient load {{balancing}} {{is essential for}} parallel distributed computing. Many parallel computing environments use TCP or UDP through the <b>socket</b> <b>interface</b> as a communication mechanism. This paper presents the design and development of a prototype implementation of a network interface that can preserve communication between processes during process migration. This new communication library is a substitution for the well-known <b>socket</b> <b>interface.</b> It is implemented in user — space; it is portable, and no modifications of user applications are required. TCP/IP is applied for internal communication, which guarantees relatively high performance and portability...|$|R
30|$|Communication: To ensure {{generality}} of the modular components within Nanosurveyor, {{communication between}} modules {{and throughout the}} system is important. ZeroMQ, a communication interface [37], allows the internal architecture to communicate using common communication patterns while ensuring data are queued for processing and delivered to destination successfully. A core component of the communication <b>interface</b> is <b>sockets</b> acting as plugs between different modules.|$|R
40|$|The biomechanical {{interaction}} between the leg stump and the prosthetic socket is critical in achieving close-to-normal ambulation. Although many investigations have been performed to understand the biomechanics of trans-tibial sockets, few studies have measured the <b>socket</b> <b>interface</b> pressure for trans-femoral amputees. Furthermore, no report has examined how the residual muscle activities in the trans-femoral stump affect the <b>socket</b> <b>interface</b> pressure characteristics during gait. In this study, an experimental method was developed to measure the trans-femoral <b>socket</b> <b>interface</b> pressures and EMG of muscles in the stumps of two trans-femoral amputees. Also, the measurement of three-dimensional prosthetic locomotion was synchronized to understand detailed socket biomechanics. Based on the experimental results, a significant correlation (P 5 0. 05) {{was found between the}} measured temporal EMG amplitude and the interface pressure at the knee flexor (biceps femoris) and extensor (rectus femoris). Therefore, the residual muscle activity of a trans-femoral amputee’s stump could be an important factor affecting socket-interface pressure changes during ambulation...|$|R
50|$|CLISP {{includes}} an interpreter, a bytecode compiler, debugger, <b>socket</b> <b>interface,</b> high-level foreign language interface, strong internationalization support, and two object systems: Common Lisp Object System (CLOS) and metaobject protocol (MOP).|$|R
5000|$|One {{classic example}} of type punning {{is found in the}} Berkeley <b>sockets</b> <b>interface.</b> The {{function}} to bind an opened but uninitialized socket to an IP address is declared as follows: ...|$|R
5000|$|<b>Socket</b> <b>Interface</b> to NML : Describes how {{to connect}} to an NML server using sockets directly. This {{information}} should also be useful for other languages where the C++ NML client interface is not available.|$|R
