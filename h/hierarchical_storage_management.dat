76|2355|Public
5000|$|... #Subtitle level 2: Comparison to <b>hierarchical</b> <b>storage</b> <b>management</b> ...|$|E
5000|$|Automated tiered storage {{another name}} for <b>hierarchical</b> <b>storage</b> <b>management</b> ...|$|E
50|$|High Performance Storage System (HPSS) is a flexible, scalable, policy-based <b>Hierarchical</b> <b>Storage</b> <b>Management</b> product {{developed}} by IBM {{in collaboration with}} various DOE National Labs. It provides scalable <b>hierarchical</b> <b>storage</b> <b>management</b> (HSM), archive, and file system services using cluster, LAN and SAN technologies to aggregate the capacity and performance of many computers, disks, disk systems, tape drives and tape libraries.|$|E
40|$|Abstract. Large-scale {{scientific}} experiments or simulation programs often generate {{large amounts of}} multidimensional data. Data volume may reach hundreds of terabytes (up to petabytes). In {{the present and the}} near future, the only practicable way for storing such large volumes of multidimensional data are tertiary storage systems. But commercial (multidimensional) database systems are optimized for performance with primary and secondary memory access. So tertiary storage memory is only in an insufficient way supported for storing or retrieval of multidimensional array data. To combine the advantages of both techniques, storing large amounts of data on tertiary storage media and optimizing data access for retrieval with multidimensional database management systems is the intention of this paper. We introduce concepts for efficient <b>hierarchical</b> <b>storage</b> support and <b>management</b> for large-scale multidimensional array database management systems and their integration into the commercial array database management system RasDaMan. ...|$|R
40|$|The Goddard Space Flight Center (GSFC) Distributed Active Archive Center (DAAC) {{has been}} {{developed}} to enhance Earth Science research by improved access to remote sensor earth science data. Building and operating an archive, even one of a moderate size (a few Terabytes), is a challenging task. One of the critical components of this system is Unitree, the <b>Hierarchical</b> File <b>Storage</b> <b>Management</b> System. Unitree, selected two years ago as the best available solution, requires constant system administrative support. It is not always suitable as an archive and distribution data center, and has moderate performance. The Data Archive and Distribution System (DADS) software developed to monitor, manage, and automate the ingestion, archive, and distribution functions {{turned out to be}} more challenging than anticipated. Having the software and tools is not sufficient to succeed. Human interaction within the system must be fully understood to improve efficiency to improve efficiency and ensure that the right tools are developed. One of the lessons learned is that the operability, reliability, and performance aspects should be thoroughly addressed in the initial design. However, the GSFC DAAC has demonstrated that it is capable of distributing over 40 GB per day. A backup system to archive a second copy of all data ingested is under development. This backup system will be used not only for disaster recovery but will also replace the main archive when it is unavailable during maintenance or hardware replacement. The GSFC DAAC has put a strong emphasis on quality at all level of its organization. A Quality team has also been formed to identify quality issues and to propose improvements. The DAAC has conducted numerous tests to benchmark the performance of the system. These tests proved to be extremely useful in identifying bottlenecks and deficiencies in operational procedures...|$|R
5000|$|... sound groups allow <b>hierarchical</b> <b>storage</b> and {{operations}} on multiple sounds at once ...|$|R
50|$|File stubbing, {{the act of}} {{creating}} stub files, is a <b>Hierarchical</b> <b>storage</b> <b>management</b> (HSM) concept.|$|E
50|$|A hybrid array {{is a form}} of <b>hierarchical</b> <b>storage</b> <b>management</b> that {{combines}} hard disk drives (HDDs) with solid-state drives (SSDs) for I/O speed improvements.|$|E
5000|$|Caminosoft Managed Server HSM, Tivoli Edition - <b>Hierarchical</b> <b>Storage</b> <b>Management</b> {{software}} for file system archiving of seldom accessed files to TSM. Supports N series, NetApp, Windows, Linux, and NetWare.|$|E
40|$|Big {{data storage}} and high speed data access {{have become the}} main {{performance}} bottleneck for many big data applications. The higher speed data access and lower cost for storage must be required than some applications having small-scale data. Distributed <b>hierarchical</b> <b>storage</b> provides a good storage way to speed data access and lower cost. But it a data migration method which you choose decide the performance of distributed <b>hierarchical</b> <b>storage</b> system because data migration occurs frequently in <b>hierarchical</b> <b>storage</b> systems. There are many data migration methods, which most of those cannot ensure data utterly integrity after data migration. In this paper, we invent a reliable and efficient data migration method to ensure the utterly integrity of migrated data by MD 5 checksum and improve performance of data migration by the pipeline technology. Through adjusting parameters, we get the best performance of data migration by using pipeline in our storage system which is a <b>hierarchical</b> <b>storage</b> system based on GlusterFS...|$|R
40|$|The input/output {{performance}} {{has always been}} the bottleneck problem of computer systems, and with multimedia applications, the problem has been intensified. <b>Hierarchical</b> <b>storage</b> systems provide extensive storage capacity for multimedia data at very economical cost, but the long access latency of tertiary storage devices makes them not attractive for multimedia systems. In this thesis, we present new storage and retrieval methods to handle multimedia data on <b>hierarchical</b> <b>storage</b> systems efficiently. First, we create a novel <b>hierarchical</b> <b>storage</b> organization to increase the storage system throughput. Second, we enhance the data migration method to reduce the multimedia stream response time. Third, we design a new bandwidth based placement method to store heterogeneous objects. Fourth, we demonstrate that disk performance is significantly enhanced using constant density recording disks. We have quantitatively analysed and compared the performance of magnetic disks and <b>hierarchical</b> <b>storage</b> systems in serving multimedia streams of requests. We have also earned out empirical studies which confirm our findings. Our new storage and retrieval methods are able to offer significant advantages and flexibility over existing methods...|$|R
30|$|In general, a <b>hierarchical</b> <b>storage</b> management [33] {{could be}} {{considered}} as a DLMS tool. In recent times, cognitive data management (CDM) has gained industrial support for automated data management together with high-grade efficiency. The CDM (e.g., Stronglink 1) is generally the amalgamation of intelligent (artificial-intelligence 2 /machine learning-based approach) distributed <b>storage</b> including resource <b>management</b> together with a more sophisticated DLMS component. The CDM works on the database-as-a-service (DBaaS) layer which instructs the data to be used by the scheduler with an efficient management approach including the exploitation of the data catalogue via data modelling.|$|R
5000|$|<b>Hierarchical</b> <b>Storage</b> <b>Management</b> support {{including}} remote storage, {{a service}} that runs with NTFS and automatically transfers files that are not used {{for some time to}} less expensive storage media ...|$|E
5000|$|Data Management API (DMAPI) is the {{interface}} {{defined in the}} X/Open document [...] "Systems Management: Data Storage Management (XDSM) API" [...] dated February 1997. XFS, IBM JFS, VxFS, AdvFS, StorNext and GPFS file systems support DMAPI for <b>Hierarchical</b> <b>Storage</b> <b>Management</b> (HSM).|$|E
50|$|EMC DiskXtender (also {{known as}} DX) was an automated, policy-based, file system-centric product for {{migrating}} inactive data off higher-cost storage to lower-cost disk, tape, or optical devices (<b>hierarchical</b> <b>storage</b> <b>management).</b> DiskXtender {{was produced by}} EMC Corporation and supported on Windows, Linux, and Unix environments.|$|E
40|$|Abstract. With {{the rapid}} {{development}} of data science and computer technology, <b>hierarchical</b> <b>storage</b> {{system based on}} Hadoop is being research. In this paper, we propose a novel methodology of <b>hierarchical</b> <b>storage</b> system based on Hadoop framework. This way the Hadoop cluster will not reach the stage where the NameNode becomes irresponsive due to excessive JVM garbage collection as the HDFS will not be heavily loaded. The experimental result illustrates the effectiveness and feasibility of proposed framework, further modification areas of research are proposed in the end...|$|R
40|$|On-demand video servers {{based on}} <b>hierarchical</b> <b>storage</b> system offer {{high-capacity}} and low-cost video storage. In such a system, video files {{are stored in}} the tertiary level and transferred to the secondary level to be displayed. We have studied the architecture and performance of a <b>hierarchical</b> <b>storage</b> system for an on-demand video server. Our objectives are to understand its performance characteristics, and to design such a server to meet specific application requirements. The secondary level in the <b>hierarchical</b> <b>storage</b> system is characterized by its bandwidth and storage capacity, while the tertiary level is characterized by its number of drives, drive bandwidth and exchange latency. The performance measure we mainly consider here is user delay. We show that, given a certain delay requirement, non-uniform video popularity can reduce the secondary storage requirement tremendously compared with the uniform-popularity case. We also found that secondary bandwidth, secondary storage capaci [...] ...|$|R
40|$|We {{study the}} cost of <b>storage</b> <b>management</b> for garbagecollected {{programs}} compiled with the Standard ML of New Jersey compiler. We show that {{the cost of}} <b>storage</b> <b>management</b> {{is not the same as}} the time spent garbage collecting. For many of the programs, the time spent garbage collecting is less than the time spent doing other <b>storage</b> <b>management</b> tasks. 1 Introduction We study the cost of <b>storage</b> <b>management</b> for garbagecollected programs compiled with the Standard ML of New Jersey compiler [3]. There are two motivations for conducting this study. First, we want to better understand the cost of <b>storage</b> <b>management.</b> Since costs due to <b>storage</b> <b>management</b> occur throughout the entire execution of a program, it is not adequate to measure only the time spent garbage collecting. Moreover, since memory-system performance has an increasing effect on program performance, it is important to understand the memory-system cost of <b>storage</b> <b>management.</b> Second, we want to identify bottlenecks in the storage-manag [...] ...|$|R
50|$|<b>Hierarchical</b> <b>Storage</b> <b>Management</b> is a {{means of}} {{transferring}} files that are not used for some period of time to less expensive storage media. When the file is next accessed, the reparse point on that file determines that it is needed and retrieves it from storage.|$|E
5000|$|Infinite Disk was a <b>hierarchical</b> <b>storage</b> <b>management</b> and backup utility for Microsoft Windows first {{published}} by Chili Pepper Software in 1992. [...] The {{company and the}} software were acquired by Cheyenne Software in 1995, which was in turn purchased by Computer Associates in 1996.|$|E
50|$|Other data {{injectors}} include policy-based <b>hierarchical</b> <b>storage</b> <b>management</b> (HSM) {{components for}} AIX, Linux and Windows. These allow migration {{of data from}} production disk into {{one or more of}} the TSM storage hierarchies while maintaining transparent access to that data by the use of DMAPI or NTFS reparse points.|$|E
40|$|<b>Storage</b> <b>management</b> {{is an area}} of {{sensor network}} {{research}} that is starting to attract attention. The need for <b>storage</b> <b>management</b> arises primarily in the class of sensor networks where information collected by the sensors is not relayed to observers in real-time (e. g., scientific monitoring applications). In such applications, the data must be stored, at least temporarily, within the network until it is later collected by an observer (or until it ceases to be useful). Therefore, storage becomes a primary resource which, in addition to energy, determines the useful lifetime and coverage of the network. This chapter overviews issues and opportunities in <b>storage</b> <b>management</b> for sensor networks. We first motivate the need for <b>storage</b> <b>management</b> by overviewing sensor network applications that require <b>storage</b> <b>management.</b> We then discuss how the application characteristics and various resource constraints influence the design of <b>storage</b> <b>management</b> techniques. More specifically, we break down the <b>storage</b> <b>management</b> problem into the following components: (1) system support for storage management; (2) collaborative storage; and (3) indexing and retrieval. We then highlight the problems and issues in each of these components of <b>storage</b> <b>management,</b> and we describe proposed solutions...|$|R
5000|$|<b>Storage</b> <b>Management.</b> <b>Storage</b> <b>management</b> {{software}} {{allows the}} configuration, day-to-day operation, performance tuning, and monitoring of Hitachi <b>storage</b> environments. Many <b>management</b> processes can be automated based on policies {{set by the}} storage administrator.|$|R
40|$|In this article, we {{investigate}} the performance {{behavior of a}} <b>hierarchical</b> <b>storage</b> architecture. Considering both the size of video files and the skewed file access patterns over the available files, it is not cost-effective to store all video files on secondary storage such as disk arrays, since most users may access only a small subset of the available video files. Using tertiary storage, such as a tape library, is a promising solution for achieving the desired cost effectiveness. Though a <b>hierarchical</b> <b>storage</b> structure is desirable, an unbalanced configuration of the storage hierarchy may result in waste of resources and thus degrade overall server throughput. Our effort is focused on investigating {{the effect of the}} various system parameters to obtain an optimal configuration of the <b>hierarchical</b> <b>storage.</b> Throughput of the server is defined along with two orthogonal performance metrics, namely expected service time and system congestion and blocking probability. We establish an analy [...] ...|$|R
50|$|Tiles and tile index {{are stored}} as BLOBs in a {{relational}} database which also holds the data dictionary needed by rasdaman’s dynamic type system. Adapters {{are available for}} several relational systems, among them open-source PostgreSQL.For arrays larger than disk space, <b>hierarchical</b> <b>storage</b> <b>management</b> (HSM) support has been developed.|$|E
50|$|Robotic {{storage is}} used for backups, and for {{high-capacity}} archives in imaging, medical, and video industries. <b>Hierarchical</b> <b>storage</b> <b>management</b> is a most known archiving strategy of automatically migrating long-unused files from fast hard disk storage to libraries or jukeboxes. If the files are needed, they are retrieved back to disk.|$|E
50|$|Lustre 2.5, {{released}} in October 2013, added the highly anticipated feature, <b>Hierarchical</b> <b>Storage</b> <b>Management</b> (HSM). A core requirement in enterprise environments, HSM allows customers to easily implement tiered storage solutions in their operational environment. This release {{is the current}} OpenSFS-designated Maintenance Release branch of Lustre. The most recent maintenance version is 2.5.3 and was {{released in}} September 2014.|$|E
40|$|We {{study the}} cost of <b>storage</b> <b>management</b> for garbagecollected {{programs}} compiled with the Standard ML of New Jersey compiler. We show that {{the cost of}} <b>storage</b> <b>management</b> {{is not the same as}} the time spent garbage collecting. For many of the programs, the time spent garbage collecting is less than the time spent doing other <b>storage</b> <b>management</b> tasks. ...|$|R
40|$|Storage-oriented {{clusters}} present unique {{challenges to}} the implementation of <b>storage</b> <b>management.</b> Such clusters manage a vast amount of data, most of which is located on secondary <b>storage.</b> Manual <b>storage</b> <b>management</b> in storage-oriented cluster environments is complex, error-prone and tedious. As a result there is a clear need for automatic <b>storage</b> <b>management</b> (garbage collection) for such clusters. The goals o...|$|R
40|$|Abstract:- This paper {{focus on}} {{analysing}} and explaining structure of data pooling, online data pooling and partition Storage model, enterprise Cloud Storage System structure proposes {{the design for}} data control and Storage in Cloud. <b>Storage</b> <b>Management</b> Control is an effective method that will reduce the working time to large-scale in data <b>Storage</b> <b>management.</b> Combining both <b>Storage</b> devices and control management software will provide system data sharing and system high applicable. By using Cloud <b>Storage</b> <b>Management</b> control mechanism, most of those business enterprises could be benefited. Keywords:- Data pooling, <b>Storage</b> <b>Management,</b> partition I...|$|R
50|$|Because {{of their}} slow {{sequential}} access and huge capacity, tape libraries are primarily used for backups {{and as the}} final stage of digital archiving. A typical application of the latter would be an organization's extensive transaction record for legal or auditing purposes. Another example is <b>hierarchical</b> <b>storage</b> <b>management</b> (HSM), in which tape library is used to hold rarely used files from file systems.|$|E
50|$|Compared to RAID technology, MAID has {{increased}} storage density, and decreased cost, electrical power, and cooling requirements. However, these advantages {{are at the}} cost of much increased latency, significantly lower throughput, and decreased redundancy. Drives designed for multiple spin-up/down cycles (e.g. laptop drives) are significantly more expensive. Latency may be as high as tens of seconds. MAID can supplement or replace tape libraries in <b>hierarchical</b> <b>storage</b> <b>management.</b>|$|E
50|$|In 1992, Davoli was {{recruited}} to become CEO of Epoch Systems, a Sigma Partners portfolio {{company with a}} <b>hierarchical</b> <b>storage</b> <b>management</b> product. In 1993 Davoli sold Epoch Systems to EMC Corporation for $140 million. This solidified Davoli’s reputation as a successful entrepreneur and CEO. Davoli left Epoch / EMC {{about a year after}} the acquisition, and started doing angel investing and advising local startups.|$|E
50|$|QFS (Quick File System) is a {{filesystem}} from Oracle. It is tightly {{integrated with}} SAM, the Storage and Archive Manager, and hence {{is often referred}} to as SAM-QFS. SAM provides the functionality of a <b>hierarchical</b> <b>storage</b> manager.|$|R
40|$|Abstract. <b>Storage</b> <b>management</b> is {{the core}} of the {{material}} management. The design rules of <b>storage</b> <b>management</b> system are presented as such that the usability, reliability, progress, openness, data integrality and unity, and security must be ensured. Demand analysis is performed for the <b>storage</b> <b>management</b> system of Huachen Xinguang Engine Plant. The functions and the corresponding subsystems are scheduled. The configurations of data flow in supply management, stored. It took positive effect on raising the productivity...|$|R
40|$|With {{the data}} {{generation}} rates growing exponentially, businesses {{are having a}} difficult time maintaining data center infrastructure. <b>Hierarchical</b> <b>storage</b> systems has evolved as a better alternate to managing data, as frequently accessed data is placed on higher tiers and the least frequently accessed data on lower tiers. But the data arrangement is not always static. Data Migration is an operation in which the selected data is physically moved, or migrated, to different storage components. The existing method of data migration in <b>hierarchical</b> <b>storage</b> systems has several shortcomings – reactive, heuristic policies and proprietary software. This paper attempts to overcome the above limitations by applying a reinforcement learning (RL) agent in the data migration of <b>hierarchical</b> <b>storage</b> systems. By the addition of RL agent the data migration which earlier was responsive, is made proactive and adaptive. Experimental results demonstrate {{the effectiveness of the}} proposed RL agent. The results indicate that: (i) the average queue size of storage devices is reduced to almost zero as the RL agent proactively migrates data and (ii) at 95 % confidence level the RL agent has no affect on the read and write operation of certain file sizes...|$|R
