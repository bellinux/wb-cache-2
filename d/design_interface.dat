183|9543|Public
25|$|Through {{its history}} {{several aspects of}} Game-Maker's engine, <b>design</b> <b>interface,</b> and feature set have {{experienced}} scrutiny from its user base.|$|E
2500|$|Adventure Classic Gaming's Patrick Talbot scored it 4 out of 5, {{arguing the}} game to be [...] "amongst the most {{atmospheric}} and terrifyingly creepy games I have ever played." [...] He praised the graphics, sound <b>design,</b> <b>interface</b> and voice acting, concluding [...] "Dark Fall: Lost Souls delivers an unforgettable horror adventure experience. Boakes is clearly passionate about his created world, and his passion shows readily in the game's design, script, sound, and music." ...|$|E
2500|$|Several updates {{followed}} {{over the}} next three years, adding Sound Blaster support, improving the <b>design</b> <b>interface,</b> and refining the game engine—yet many features kept being pushed back. Although his brother Oliver Jr. spent a summer on the project, and wrote the code for the sound and Monster editor, Andrew handled the bulk of the coding and updates — a task that, thanks to the lack of standardized drivers or libraries at that time, became all-encompassing and difficult to maintain. Over the software's lifetime Andrew found himself so [...] "waylaid by video driver and [...] problems" [...] that he was unable to focus as much as he wanted on adding and refining features.|$|E
5000|$|<b>Designing</b> <b>interfaces</b> for {{artifacts}} {{in view of}} their usability and meanings in use ...|$|R
40|$|The study {{presents}} a longitudinal examination about dynamics {{and consequences of}} fit and misfit between formally ascribed <b>design</b> <b>interfaces</b> and informal communication networks in two large multi-institutional product development collaborations in space industry. Findings: (1) formally ascribed <b>design</b> <b>interfaces</b> and informal communication networks correlate only marginally. The main reason is that informal communication is much more dense than ascribed: (2) although the formally ascribed <b>design</b> <b>interfaces</b> change, the structure of informal communication remains largely stable throughout time; (3) the most intriguing finding is that this communicational misfit is associated with higher effectiveness, but, it negatively impacts the institutional unit's efficiency. (C) 2008 Elsevier B. V. All rights reserved...|$|R
5000|$|... 2. That an {{understanding}} of human perception, cognition, and behavior is critical to <b>designing</b> <b>interfaces.</b>|$|R
50|$|On August 10, 2016, Quizlet {{introduced}} a revamp to their website {{with a new}} <b>design</b> <b>interface,</b> along with a new logo and home page. Their mobile apps for iOS and Android also received a <b>design</b> <b>interface</b> update.|$|E
5000|$|<b>Design</b> <b>interface</b> {{objects and}} actions that metaphorically {{map to the}} real world {{universe}} ...|$|E
50|$|Version 2.1 {{introduced}} a fully customizable <b>design</b> <b>interface</b> based on HTML, CSS and a JavaScript SDK.|$|E
3000|$|Drafting (or <b>designing)</b> <b>interfaces</b> {{with the}} {{impaired}} user by performing the strategies defined with the therapists [...]...|$|R
50|$|Within {{object-oriented}} <b>design,</b> <b>interfaces</b> provide {{layers of}} abstraction that facilitate conceptual {{explanation of the}} code and create a barrier preventing coupling to dependencies.|$|R
40|$|Nowadays, {{information}} system creation process consists of several different actions, {{one of those}} actions – web <b>interface</b> <b>design.</b> Web <b>interface</b> <b>design</b> process requires a good methodology, to make web interface process better, quicker, flexible and satisfy other web <b>interface</b> <b>design</b> criterions. RUP (Rational Unified Process) don’t present any special creation process of internet web interface. Frequently web <b>interface</b> <b>design</b> process lies in the head of it’s designers. There are no full methodology of web <b>interface</b> <b>design</b> process in one place, only some web interface advices or articles about one or other web interface process steps could be found. The goal of this work {{is to make a}} methodology of web <b>interface</b> <b>design</b> and implement it for internet service provider system. Methodology also would be useful for companies which participate in web <b>interface</b> <b>design</b> process, also in school or university study process, or like a guide for any web interface designer. The developed methodology for web <b>interface</b> <b>design</b> was used for implementing internet service provider system web <b>interface,</b> system <b>design</b> process and redesign above-mentioned system web interface for measuring process times. Methodology of web <b>interface</b> <b>design,</b> reduce web <b>interface</b> <b>design</b> process time, help to make web <b>interface</b> <b>design</b> process easier, more flexible and understandable for web interface designer, also certain better web interface appearance independence from system functional part, with possibility to change web interface appearance without changing rest of system parts...|$|R
50|$|Through {{its history}} {{several aspects of}} Game-Maker's engine, <b>design</b> <b>interface,</b> and feature set have {{experienced}} scrutiny from its user base.|$|E
50|$|XVT DSC {{includes}} the PTK, or Portability ToolKit, and the XVT <b>Design</b> <b>interface</b> designer. It {{is designed for}} use with C.|$|E
5000|$|<b>Design</b> <b>interface</b> is the {{relationship}} of logistics-related design parameters of the system to its projected or actual support resource requirements. These design parameters are expressed in operational terms rather than as inherent values and specifically relate to system requirements and support costs of the system. Programs such as [...] "design for testability" [...] and [...] "design for discard" [...] must be considered during system design. The basic requirements {{that need to be}} considered as part of <b>design</b> <b>interface</b> include: ...|$|E
40|$|The video shows {{different}} interaction methods, interfaces {{and representative}} motor disabled users. There are {{three categories of}} wheelchair users based on their degree of disability identified in this thesis. The <b>designed</b> <b>interfaces</b> and interaction methods are tested and validated by number of wheelchair users, {{some of them are}} shown in this video. They performed experiments and used our <b>designed</b> <b>interfaces.</b> Experiments include qualitative and quantitative evaluation. Based on the evaluation with the representative users we concluded the success of our research and interfaces...|$|R
40|$|Effective {{communication}} in product development organizations {{has been identified}} as a key factor of product development performance. Furthermore, understanding how the development organization manages the knowledge associated with the product architecture is broadly recognized as a critical challenge for established firms facing architectural innovation. This thesis presents a research method and statistical analyses intended to enhance understanding of the coupling between the product architecture and the development organization. The research method is summarized by three steps: 1) capture the product architecture by documenting <b>design</b> <b>interfaces,</b> 2) capture the development organization by documenting team interactions, and 3) couple the product architecture with the development organization by comparing <b>design</b> <b>interfaces</b> with team interactions. Our approach is illustrated by analyzing the development of a large commercial aircraft engine. Several hypotheses are formulated to explain the mismatch between <b>design</b> <b>interfaces</b> an...|$|R
50|$|The {{competition}} awards design from Furniture design, Interior design, Electronic Devices, Architecture, Packaging, Graphic design, Ready-Made, Jewelry <b>design,</b> <b>Interfaces,</b> Web Sites, Transportation, Yacht Design and others.|$|R
50|$|The use of {{data stored}} in {{transaction}} logs of Web search engines, Intranets, and Web sites can provide valuable insight into understanding the information-searching process of online searchers. This understanding can enlighten information system <b>design,</b> <b>interface</b> development, and devising the information architecture for content collections.|$|E
50|$|In {{software}} <b>design,</b> <b>interface</b> bloat (also called fat interfaces by Bjarne Stroustrup and Refused Bequests by Martin Fowler) is when {{a computer}} interface incorporates too many operations on some data into an interface, {{only to find that}} most of the objects cannot perform the given operations.|$|E
5000|$|HyperNext Creator {{is similar}} to Hypercard and enables users {{to create their own}} software, both {{cross-platform}} standalone applications and stacks for the freeware HyperNext Player. The <b>design</b> <b>interface</b> of Creator has just a design window, one toolbar and a mode switcher. Its three modes of Design, Preview and Run enable rapid switching between the creation/editing and running of programs.|$|E
40|$|This paper {{describes}} {{a method that}} allows us to enhance our understanding of the difference between designing modular systems and integrative systems. Modular systems are those whose interfaces are well defined and shared with only a few other systems. Integrative systems are those whose interfaces may be more complex and shared across the product. Our approach is illustrated by analyzing the development of a large commercial aircraft engine. We document both the product's <b>design</b> <b>interfaces</b> and the technical interactions between design teams. We found statistically significant differences in the ways modular and integrative design teams handle <b>design</b> <b>interfaces.</b> We focus our analysis on studying the effects due to organizational and system boundaries, and to the existence of various types of <b>design</b> <b>interfaces.</b> By identifying modular and integrative systems and by understanding the differences in designing those systems, development organizations can improve the integration process for complex designs...|$|R
40|$|This thesis {{describes}} {{the process of}} creating a calendar application featuring an effective and user friendly interface. The first step is an analysis of existing calendar applications on various platforms. Then the calendar data standard is explored, together with good practices for user <b>interface</b> <b>design.</b> The analysis is followed by designing the calendar application. The design process consists of calendar library <b>design,</b> graphical <b>interface</b> <b>design</b> and structural <b>interface</b> <b>design.</b> The resulting application, implemented in C++ using Qt framework, is tested...|$|R
50|$|The <b>interface</b> <b>design</b> {{describes}} {{internal and}} external program interfaces, {{as well as the}} <b>design</b> of human <b>interface.</b> Internal and external <b>interface</b> <b>designs</b> are based on the information obtained from the analysis model.|$|R
50|$|NeuroSolutions is a {{neural network}} {{development}} environment developed by NeuroDimension. It combines a modular, icon-based (component-based) network <b>design</b> <b>interface</b> with an implementation of advanced learning procedures, such as conjugate gradients, Levenberg-Marquardt and backpropagation through time. The software {{is used to}} design, train and deploy neural network (supervised learning and unsupervised learning) models to perform {{a wide variety of}} tasks such as data mining, classification, function approximation, multivariate regression and time-series prediction.|$|E
5000|$|Adventure Classic Gaming's Patrick Talbot scored it 4 out of 5, {{arguing the}} game to be [...] "amongst the most {{atmospheric}} and terrifyingly creepy games I have ever played." [...] He praised the graphics, sound <b>design,</b> <b>interface</b> and voice acting, concluding [...] "Dark Fall: Lost Souls delivers an unforgettable horror adventure experience. Boakes is clearly passionate about his created world, and his passion shows readily in the game's design, script, sound, and music." ...|$|E
50|$|Webydo's DMS has a WYSIWYG <b>design</b> <b>interface</b> {{that allows}} {{designers}} to {{drag and drop}} into the online canvas design elements such as images, texts, videos, flash, galleries, menus, custom designed forms, widgets, or custom HTML code. In July 2013, Webydo's partnership with Ecwid added a built-in e-commerce functionality. Designers can start their clients' sites from scratch on a blank canvas, choose a layout or from pre-made designs (in which each element can be modified later).|$|E
40|$|International audienceDespite being {{a set of}} proven, well-documented, contextualized {{recommendations}} for solving frequently occurring user <b>interface</b> <b>design</b> problems, user <b>interface</b> <b>design</b> patterns are still not widely used. We believe {{this is due to}} the lack of tools to help designers find patterns and identify how they can be combined to solve user <b>interface</b> <b>design</b> problems. This paper proposes to classify and make explicit the relationships between user <b>interface</b> <b>design</b> patterns. We conducted a small-scale study that indicated that this proposal is more efficient and better accepted by the participants than browsing through a user <b>interface</b> <b>design</b> library...|$|R
40|$|The typical {{approach}} to developing complex products is to decompose the product into systems, and these into components. We {{introduce a new}} notion of system modularity based upon the way components share <b>design</b> <b>interfaces</b> across systems. Modular systems are those whose <b>design</b> <b>interfaces</b> with other systems are clustered among physically adjacent systems, whereas integrative systems are those whose interfaces are physically distributed or functionally integrative across all or most other systems. Our research method allows us to study how system modularity impacts design team interactions. Our approach is illustrated by analyzing {{the development of an}} aircraft engine...|$|R
5000|$|<b>Design</b> - {{including}} <b>interface</b> <b>design,</b> sequencing, lesson design, and learner control ...|$|R
50|$|Situated conceptually and {{physically}} between studio and shop, academy and industry, the lab focuses on multi-robot cooperation and collaboration using six state-of-the-art Staübli robotic systems. The Robot House {{offers a new}} <b>design</b> <b>interface</b> extending beyond a production facility. It creates unprecedented emulation, simulation and animation environments in which computational geometry, material agency and fabrication logistics merge. The introduction of video, vision and sensing technologies with the lab's robotic systems support feedback and exchanges between matter, data and form.|$|E
50|$|Interface Synthesis {{refers to}} the ability to accept pure C/C++ {{description}} as its input, then use automated interface synthesis technology to control the timing and communications protocol on the <b>design</b> <b>interface.</b> This enables interface analysis and exploration of a full range of hardware interface options such as streaming, single- or dual-port RAM plus various handshaking mechanisms. With interface synthesis the designer does not embed interface protocols in the source description. Examples might be: direct connection, one line, 2 line handshake, FIFO.|$|E
50|$|In 2010, Inductive Automation {{consolidated}} FactorySQL and FactoryPMI with Ignition by Inductive Automation. It {{created a}} modular frameworks, providing a central <b>design</b> <b>interface</b> for FactorySQL and FactoryPMI. Ignition became the platform, and FactorySQL and FactoryPMI were refactored as modules. FactorySQL became the SQL Bridge Module, and FactoryPMI became the Vision Module. Two other modules {{included with the}} initial release were: the Ignition Reporting Module, and the Ignition OPC-UA Module. The OPC-UA module can also be downloaded for free, and used as a stand-alone OPC-UA server.|$|E
40|$|Improperly <b>designed</b> <b>interfaces</b> {{can make}} modular {{programs}} almost indistinguishable from monoliths. An <b>interface</b> encapsulates <b>design</b> decisions {{only if it}} need not be changed when those design decisions are changed. This talk presents a principle for <b>interface</b> <b>design</b> and a procedure for applying that principle. The principle and procedure are illustrated {{with a variety of}} examples...|$|R
40|$|It is {{recommended}} that standard digital and along interfaces be adopted. These include: (1) define interfaces compatible with NASA/DOD/industry-accepted design standards; (2) investigate costs of modifying orbiter sybsystem interfaces, (3) investigate cost of <b>designing</b> attached payload <b>interface</b> unit for NASA and commercial payloads and (4) investigate costs of <b>designing</b> <b>interface</b> circuits that {{can be incorporated into}} each payload design...|$|R
40|$|Interface {{builders}} are popular tools for designing and developing graphical user interfaces. These tools, however, are engineering-centered; they operate mainly on windows and widgets. A typical interface builder {{does not offer}} any specific support for user-centered <b>interface</b> <b>design,</b> a methodology recognized as critical for effective user <b>interface</b> <b>design.</b> We present MOBILE (Model-Based Interface Layout Editor) an interface building tool that fully supports user-centered design and that guides the interface building process by using user-task models and a knowledge base of <b>interface</b> <b>design</b> guidelines. The approach in MOBILE has the important added benefit of being useful in both top-down and bottom-up <b>interface</b> <b>design</b> strategies. Keywords Model-based interface development, task models, interface builders, user-centered <b>interface</b> <b>design,</b> user <b>interface</b> development tools...|$|R
