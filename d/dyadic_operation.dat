1|13|Public
40|$|It {{is shown}} {{that if a}} formula is {{constructed}} from noisy 2 -input NAND gates, with each gate failing independently with probability ", then reliable computation can or cannot take place according as " is less than or greater than " 0 = (3 Γ p 7) = 4 = 0 : 08856 : : :. * This {{research was supported by}} an NSERC Canada International Fellowship. ** This research was supported by an NSERC Research Grant. 1. Introduction By a Boolean function we shall mean an element of the free Boolean algebra on countably many generators X 1; X 2; : : :. We shall identify a Boolean function f that belongs to the free Boolean algebra on X 1; : : :; Xn with the function f : f 0; 1 g n ! f 0; 1 g in the customary way. By a formula we shall mean an element of the free algebra with one <b>dyadic</b> <b>operation</b> j and two constants 0 and 1, generated by countably many variables X 1; X 2; : : :. A formula F may be regarded as computing a Boolean function F 0 by interpreting the <b>dyadic</b> <b>operation</b> j as the Boo [...] ...|$|E
5000|$|The <b>dyadic</b> <b>operations</b> can be {{translated}} to this polynomial format when the coefficients f take the values indicated in the respective truth tables. For instance: the NAND operation requires that: ...|$|R
50|$|Vector {{logic is}} an {{algebraic}} model of elementary logic based on matrix algebra. Vector logic {{assumes that the}} truth values map on vectors, and that the monadic and <b>dyadic</b> <b>operations</b> are executed by matrix operators.|$|R
5000|$|The 16 two-valued dyadic {{operators}} {{correspond to}} {{functions of the}} type the dyadic matrices have q rows and q2 columns.The matrices that execute these <b>dyadic</b> <b>operations</b> {{are based on the}} properties of the Kronecker product.|$|R
50|$|There are {{instructions}} to push, calculate, and pop values {{on top of}} this stack; monadic operations (FSQRT, FPTAN etc.) then implicitly address the topmost ST(0) while <b>dyadic</b> <b>operations</b> (FADD, FMUL, FCOM, etc.) implicitly address ST(0) and ST(1). The non-strict stack-model also allows <b>dyadic</b> <b>operations</b> to use ST(0) together with a direct memory operand or with an explicitly specified stack-register, ST(x), in a role similar to a traditional accumulator (a combined destination and left operand). This can also be reversed on an instruction-by-instruction basis with ST(0) as the unmodified operand and ST(x) as the destination. Furthermore, the contents in ST(0) can be exchanged with another stack register using an instruction called FXCH ST(x).|$|R
2500|$|Early IBM APL interpreters for IBM 360 and IBM 370 {{hardware}} implemented {{their own}} multi-user management instead {{of relying on}} the host services, thus they were timesharing systems in their own right. First introduced in 1966, the APL\360 system was a multi-user interpreter. The ability to programmatically communicate with the operating system for information and setting interpreter system variables was done through special privileged [...] "I-beam" [...] functions, using both monadic and <b>dyadic</b> <b>operations.</b>|$|R
40|$|We {{describe}} NC algorithms {{for doing}} exact arithmetic with real algebraic {{numbers in the}} signcoded representation introduced by Coste and Roy [CoR 19881. W e p resent polynomial sized circuits of depth O(log 3 N) for the monadic operations-LY, l/o, as well as (Y+ P, cy- r, and sgn(cr- P), where T is rational and cx is real algebraic. We also present polynomial sized circuits of depth O(log 7 N) for the <b>dyadic</b> <b>operations</b> cr+p, cr. p, and sgn(o- / 3), where (Y and p are both real algebraic. Our algorithms employ a strengthened form of the NC polynomial-consistency algorithm of Ben-Or, Kozen, and Reif [BKR 19861. ...|$|R
50|$|The x87 {{family does}} not use a {{directly}} addressable register set such as the main registers of the x86 processors; instead, the x87 registers form an eight-level deep stack structure ranging from st0 to st7, where st0 is the top. The x87 instructions operate by pushing, calculating, and popping values on this stack. However, <b>dyadic</b> <b>operations</b> such as FADD, FMUL, FCMP, and so on may either implicitly use the topmost st0 and st1, or may use st0 together with an explicit memory operand or register; the st0 register may thus {{be used as an}} accumulator (i.e. as a combined destination and left operand) and can also be exchanged with any of the eight stack registers using an instruction called FXCH stX (codes D9C8..D9CFh). This makes the x87 stack usable as seven freely addressable registers plus an accumulator. This is especially applicable on superscalar x86 processors (Pentium of 1993 and later) where these exchange instructions are optimized down to a zero clock penalty.|$|R
40|$|Vector {{logic is}} a matrix-vector {{representation}} of the logical calculus inspired in neural network models. In this algebraic formalism, the truth values map on orthonormal Q-dimensional vectors, the monadic operations are represented by square matrices, and the <b>dyadic</b> <b>operations</b> produce rectangular matrices that act on the Kronecker product of the vector truth values. In this formalism, the theorems and tautologies of classical logic are demonstrated using the rules of matrix algebra. In the present work, we analyze a three-valued vector logic that adds to the “yes ” and “no ” vectors, a third “uncertain ” vector that represents the truth value corresponding to undecidable propositions. Fuzziness is produced both via linear combinations of “yes ” and “no ” vectors, and by the supplementary dimension of the logical vector subspace. We describe the basic matrix operators, and we show that for this three-valued vector logic, the modalities “possibility ” and “necessity ” are simple square matrices instead of infinite recursive processes. Finally, we explore the application of this formalism to represent the complex valued operator NOT, and the usefulness of vector logic to understand the powers and limitations of some reversible logical computations. ...|$|R
40|$|The Powell [...] Sabin (PS) {{piecewise}} quadratic C^ 1 {{finite element}} on the PS 12 -split of a triangulation {{is a common}} choice {{for the construction of}} a BPX-type preconditioner for the biharmonic equation. In this note we investigate the related Powell [...] Sabin element on the PS 6 -split instead of the PS 12 -split for the construction of such preconditioners. For the PS 6 -split element multilevel spaces can be created using a √ 3 -refinement scheme instead of the traditional dyadic scheme. Topologically √ 3 -refinement has many advantages: it is a slower refinement than the <b>dyadic</b> split <b>operation,</b> and it alternates the orientation of the refined triangles. Therefore we expect a reduction of the amount of work when compared to the PS 12 -split element BPX preconditioner, although both methods have the same asymptotical complexity. Numerical experiments confirm this statement. status: publishe...|$|R
40|$|A new {{stationary}} subdivision {{scheme is}} presented which performs slower topological refinement {{than the usual}} <b>dyadic</b> split <b>operation.</b> The number of triangles increases in every step {{by a factor of}} 3 instead of 4. Applying the subdivision operator twice causes a uniform refinement with tri-section of every original edge (hence the name 3 -subdivision) while two dyadic splits would quad-sect every original edge. Besides the finer gradation of the hierarchy levels, the new scheme has several important properties: The stencils for the subdivision rules have minimum size and maximum symmetry. The smoothness of the limit surface is C 2 everywhere except for the extraordinary points where it is C 1. The convergence analysis of the scheme is presented based on a new general technique which also applies to the analysis of other subdivision schemes. The new splitting operation enables locally adaptive refinement under builtin preservation of the mesh consistency without temporary crackfixin [...] ...|$|R
40|$|The {{notion of}} symmetrization, {{also known as}} Davenport's {{reflection}} principle, {{is well known in}} the area of the discrepancy theory and quasi-Monte Carlo (QMC) integration. In this paper we consider applying a symmetrization technique to a certain class of QMC point sets called digital nets over Z_b. Although symmetrization has been recognized as a geometric technique in the multi-dimensional unit cube, we give another look at symmetrization as a geometric technique in a compact totally disconnected abelian group with <b>dyadic</b> arithmetic <b>operations.</b> Based on this observation we generalize the notion of symmetrization from base 2 to an arbitrary base b∈N, b> 2. Subsequently, we study the QMC integration error of symmetrized digital nets over Z_b in a reproducing kernel Hilbert space. The result can be applied to component-by-component construction or Korobov construction for finding good symmetrized (higher order) polynomial lattice rules which achieve high order convergence of the integration error for smooth integrands at the expense of an exponential growth of the number of points with the dimension. Moreover, we consider two-dimensional symmetrized Hammersley point sets in prime base b, and prove that the minimum Dick weight is large enough to achieve the best possible order of L_p discrepancy for all 1 < p< ∞...|$|R
40|$|Although Fourier {{transform}} {{techniques have}} seen wide use in image processing since the de-velopment of the Fast Fourier Transform algorithm in 1965, the process remains computation in-tensive and is normally used only {{by those with}} large computers or specialized hardware. This work describes the development of code which takes advantage of recent advancements in trans-form algorithms and microprocessor technology to make frequency domain image manipulation available and convenient for the personal computer user. Specifically, a one dimensional, deci-mation-in-time Fast Hartley Transform algorithm {{and a host of}} support routines have been coded and optimized in MC 68000 assembly language using integer arithmetic. This code was then in-corporated into Image, a full-featured image processing program for the Macintosh II developed at the National Institutes of Health. The resulting program can compute and display the power spectrum of a 256 x 256 pixel image in 10 seconds and allows frequency domain editing and in-verse transformation. <b>Dyadic</b> frequency domain <b>operations</b> are also supported, providing convo-lution and correlation capability. All of these features are made particularly accessible through a consistent implementation of the Macintosh user interface. To illustrate Image’s utility i...|$|R

