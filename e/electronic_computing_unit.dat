3|1299|Public
40|$|This paper {{describes}} a new {{modeling and simulation}} approach {{in order to enhance}} the diagnosis ability of an electronic embedded system, including in the automotive field. Our modeling approach integrates the hardware specifications to the functional model in order to establish better system observation. It is based on hardware/software (HW/SW) co-modeling with multilevel of granularity. To reach this objective, we have set up a relationship between the desired diagnosis accuracy and the level of granularity of the HW/SW co-model, for every <b>Electronic</b> <b>Computing</b> <b>Unit</b> (ECU). Our contribution allows the attribution of the right co-simulation hierarchical level by attributing the right simulation accuracy, for each function under observation...|$|E
40|$|Abstract- This paper {{describes}} a new {{modeling and simulation}} approach {{in order to enhance}} the diagnosis ability of an electronic embedded system, including in the automotive field. Our modeling approach integrates the hardware specifications to the functional model in order to establish better system observation. It is based on hardware/software (HW/SW) comodeling with multilevel of granularity. To reach this objective, we have set up a relationship between the desired diagnosis accuracy and the level of granularity of the HW/SW co-model, for every <b>Electronic</b> <b>Computing</b> <b>Unit</b> (ECU). Our contribution allows the attribution of the right co-simulation hierarchical level by attributing the right simulation accuracy, for each function under observation. Index Terms- hierarchical modeling, HW/SW co-modeling, real time simulation. I...|$|E
40|$|DE 102008052223 A 1 UPAB: 20100506 NOVELTY - The scanner (1) has a {{single-line}} {{lighting unit}} for excitation of luminescence in a semiconductor device. A detector (4) i. e. indium gallium arsenide {{charge coupled device}} (CCD) camera, is provided for spatially resolved detection of luminescence emitted by a semiconductor component. An analyzing unit i. e. <b>electronic</b> <b>computing</b> <b>unit,</b> determines physical properties of the semiconductor component from the detected spatially resolved luminescence. A lighting unit (3 a) illuminates the semiconductor device with light. DETAILED DESCRIPTION - An INDEPENDENT CLAIM is also included for a method for detecting physical characteristics of a semiconductor component by a luminescence scanner. USE - Luminescence scanner for spatially resolved determination of physical characteristics of a semiconductor component. ADVANTAGE - The indium gallium arsenide charge coupled device (CCD) camera increases the spatial resolution of a picture, achieves a higher quantum efficiency and reduces the time for determining the physical characteristics of the semiconductor component. The camera has long life span...|$|E
40|$|International audienceThis paper {{describes}} a new modelling and simulation approach {{in order to}} observe the system behaviour and eventual faults. It is based on hardware-software co-modelling with multi-level of granularity to get multi-level of simulation speed. Our modelling approach let integrate the hardware specifications to the functional model {{in order to establish}} also hardware supervision models after HW/SW co-modelling and simulation. To reach this objective {{we have to have a}} relationship between the desired accuracy of the supervision and the level of granularity of the hardware-software model, for every ECU (<b>Electronic</b> <b>Computing</b> <b>Units)</b> that belongs to an automotive embedded architecture...|$|R
40|$|The {{ever-increasing}} {{demand for}} faster information transport and processing capabilities is undeniable. Our data-hungry society has driven enormous {{progress in the}} Si electronics industry and we have witnessed a continuous progression towards smaller, faster, and more efficient electronic devices {{over the last five}} decades. The scaling of these devices has also brought about a myriad of challenges. Currently, two of the most daunting problems preventing significant increases in processor speed are thermal and signal delay issues associated with electronic interconnection 1 - 3. Optical interconnects, on the other hand, possess an almost unimaginably large data carrying capacity, and may offer interesting new solutions for circumventing these problems 4, 5. Optical alternatives may be particularly attractive for future chips with more distributed architectures in which a multitude of fast <b>electronic</b> <b>computing</b> <b>units</b> (cores) need to b...|$|R
40|$|A {{method and}} system for {{redundancy}} management is provided for a distributed and recoverable digital control system. The method uses unique redundancy management techniques to achieve recovery and restoration of redundant elements to full operation in an asynchronous environment. The system includes a first <b>computing</b> <b>unit</b> comprising {{a pair of}} redundant computational lanes for generating redundant control commands. One or more internal monitors detect data errors in the control commands, and provide a recovery trigger to the first <b>computing</b> <b>unit.</b> A second redundant <b>computing</b> <b>unit</b> provides the same features as the first <b>computing</b> <b>unit.</b> A first actuator control unit is configured to provide blending and monitoring of the control commands from {{the first and second}} <b>computing</b> <b>units,</b> and to provide a recovery trigger to each of the first and second <b>computing</b> <b>units.</b> A second actuator control unit provides the same features as the first actuator control unit...|$|R
5000|$|... #Subtitle level 2: Wartime {{computing}} and {{the invention}} of <b>electronic</b> <b>computing</b> ...|$|R
40|$|The paper {{introduces}} {{our current}} research {{framework for the}} transition of functional <b>computing</b> <b>units</b> from legacy systems to a component-based software development environment. In this respect we discuss how various <b>computing</b> <b>units</b> from legacy information systems could be converted into independent software components. Based on this we formulate a framework within which extracted <b>computing</b> <b>units</b> could be gradually migrated as independent commercial off-the-shelf (COTS) ...|$|R
5000|$|The term EC2 <b>compute</b> <b>unit</b> (ECU) was {{introduced}} by Amazon EC2 as an abstraction of computer resources. Amazon's definition of an ECU notes that the company [...] "uses several benchmarks and tests to manage the consistency and predictability {{of the performance of}} an EC2 <b>Compute</b> <b>Unit.</b> One EC2 <b>Compute</b> <b>Unit</b> provides the equivalent CPU capacity of a 1.0-1.2 GHz 2007 Opteron or 2007 Xeon processor." ...|$|R
5000|$|Three {{to eight}} <b>Compute</b> <b>Units</b> (CUs) {{based on the}} revised GCN 2nd gen microarchitecture; 1 <b>Compute</b> <b>Unit</b> (CU) {{consists}} of 64 Unified Shader Processors : 4 Texture Mapping Units (TMUs) : 1 Render Output Unit (ROP) ...|$|R
5000|$|... #Caption: Flow chart from [...] "Planning and coding of {{problems}} for an <b>electronic</b> <b>computing</b> instrument," [...] 1947 ...|$|R
30|$|Each Amazon Elastic Compute Cloud (EC 2) node {{provisioned}} has {{equivalent of}} 7.5 [*]GB of memory, 4 EC 2 <b>Compute</b> <b>Units</b> (2 virtual cores with 2 EC 2 <b>Compute</b> <b>Units</b> each), 850 [*]GB of local instance storage, 64 -bit platform.|$|R
50|$|Plurix was {{developed}} in the Federal University of Rio de Janeiro (UFRJ), at the <b>Electronic</b> <b>Computing</b> Center (NCE).|$|R
5000|$|BESM (БЭСМ) is {{the name}} of a series of Soviet {{mainframe}} computers built in 1950-60s. The name is an acronym for [...] "Bolshaya Elektronno-Schetnaya Mashina" [...] ("Большая Электронно-Счётная Машина"), literally [...] "Large <b>Electronic</b> <b>Computing</b> Machine". The series began as a successor to MESM ("Malaya Elektronno-Schetnaya Mashina", [...] "Small <b>Electronic</b> <b>Computing</b> Machine"). MESM was built between 1948 and 1951 {{and was one of the}} first electronic computers produced in continental Europe.|$|R
40|$|While {{for single}} {{processor}} and SMP machines, memory is the allocatable quantity, for machines {{made up of}} large amounts of parallel <b>computing</b> <b>units,</b> {{each with its own}} local memory, the allocatable quantity is a single <b>computing</b> <b>unit.</b> Where virtual address management is used to keep memory coherent and allow allocation of more than physical memory is actually available, virtual communication channel references {{can be used to make}} <b>computing</b> <b>units</b> stay connected across allocation and swapping. Comment: 5 pages, 4 figure...|$|R
30|$|Tegra K 1 {{contains}} a recent GPGPU that adopts a unified shader architecture (Fig. 4). Unified shading architecture hardware {{is composed of}} an array of <b>computing</b> <b>units</b> (192 CUDA cores) which are capable of handling any type of shading tasks instead of dedicated vertex and fragment processor as in old GPUs. All <b>computing</b> <b>units</b> have the same characteristics. They can run either a fragment shader or a vertex shader. With a heavy vertex workload, we could allocate most <b>computing</b> <b>units</b> to run a vertex shader. In {{the case of a}} low vertex workload and a heavy fragment load, more <b>computing</b> <b>units</b> could be allocated to run fragment shader. In our work, we allocate more processing units to run the fragment shader to perform the desired parallel processing.|$|R
50|$|One <b>compute</b> <b>unit</b> {{combines}} 64 shader processors with 4 TMUs. The <b>compute</b> <b>unit</b> {{is separate}} from, but feed into, the Render output <b>units</b> (ROPs). Each <b>Compute</b> <b>Unit</b> {{consists of a}} CU Scheduler, a Branch & Message Unit, 4 SIMD Vector Units (each 16-lane wide), 4 64KiB VGPR files, 1 scalar unit, a 4 KiB GPR file, a local data share of 64 KiB, 4 Texture Filter Units, 16 Texture Fetch Load/Store Units and a 16 KiB L1 Cache. Four <b>Compute</b> <b>units</b> are wired to share an Instruction Cache 16 KiB in size and a scalar data cache 32KiB in size. These are backed by the L2 cache. A SIMD-VU operates on 16 elements at a time (per cycle), while a SU can operate on one a time (one/cycle). In addition the SU handles some other operations like branching.|$|R
50|$|Unified Shader Architecture allows more {{flexible}} {{use of the}} graphics rendering hardware. For example, in a situation with a heavy geometry workload the system could allocate most <b>computing</b> <b>units</b> to run vertex and geometry shaders. In cases with less vertex workload and heavy pixel load, more <b>computing</b> <b>units</b> could be allocated to run pixel shaders.|$|R
50|$|Tile {{processors}} are multicore or manycore {{chips that}} contain one-dimensional, or more commonly, two-dimensional arrays of identical tiles. Each tile comprises a <b>compute</b> <b>unit</b> (or a processing engine or CPU), caches and a switch. Tiles {{can be viewed}} as adding a switch to each core, where a core comprises a <b>compute</b> <b>unit</b> and caches.|$|R
50|$|The 1999 Mercedes-Benz CL-Class (C215) {{introduced}} Active Body Control, where {{high pressure}} hydraulic servos {{are controlled by}} <b>electronic</b> <b>computing,</b> and this feature is still available.|$|R
5000|$|In fully active {{electronically}} controlled production cars, {{the application}} of electric servos and motors married to <b>electronic</b> <b>computing</b> allows for flat cornering and instant reactions to road conditions.|$|R
40|$|Adaptive {{computers}} combine conventional software programmable processors with reconfigurable <b>compute</b> <b>units.</b> We present {{techniques that}} allow the high-performance realization of demand-paged, virtually addressed main memory shared between both of these processing elements. Furthermore, we have achieved low-latency communication between software running on the CPU and the reconfigurable <b>compute</b> <b>unit,</b> allowing even fine-grained hardware/software partitioning. A system-level evaluation quantifies the advantages of our approach...|$|R
5000|$|OpenCL views a {{computing}} system as {{consisting of a}} number of compute devices, which might be central processing units (CPUs) or [...] "accelerators" [...] such as graphics processing units (GPUs), attached to a host processor (a CPU). It defines a C-like language for writing programs. Functions executed on an OpenCL device are called [...] "kernels". A single compute device typically consists of several <b>compute</b> <b>units,</b> which in turn comprise multiple processing elements (PEs). A single kernel execution can run on all or many of the PEs in parallel. How a compute device is subdivided into <b>compute</b> <b>units</b> and PEs is up to the vendor; a <b>compute</b> <b>unit</b> {{can be thought of as}} a [...] "core", but the notion of core is hard to define across all the types of devices supported by OpenCL (or even within the category of [...] "CPUs"), and the number of <b>compute</b> <b>units</b> may not correspond to the number of cores claimed in vendors' marketing literature (which may actually be counting SIMD lanes).|$|R
50|$|As for the Soviet times, {{there is}} <b>electronic</b> <b>computing</b> machine Rūta-110 {{manufactured}} in Lithuania by Sigma company in 1970. In Lithuania was produced also {{a personal computer}} called Santaka.|$|R
5000|$|NVIDIA Tesla M2090 Graphical an {{emerging}} paradigm of parallel computing which uses GPUs as <b>computing</b> <b>units</b> ...|$|R
40|$|This paper accelerates a {{scalable}} GF(p) Montgomery inversion hardware. The hardware {{is made of}} {{two parts}} a memory and a <b>computing</b> <b>unit.</b> We modified the original memory unit to include parallel shifting of all bits which was a task handled by the <b>computing</b> <b>unit.</b> The new hardware modeling, simulating, and synthesizing is performed through VHDL for several 160 -bits designs showing interesting speedup to the inverse computation...|$|R
5000|$|... the Arctic Region Supercomputing Center, {{located within}} the Geophysical Institute, is the {{high-performance}} <b>computing</b> <b>unit</b> of UAF.|$|R
40|$|This paper {{presents}} {{implementation of}} one pulse coupled neural network (PCNN) neuron into Virtex 4 FPGA device on ML 403 development board. The implementation {{consists of three}} main units: <b>Computing</b> <b>unit</b> (CU), convolution <b>computing</b> <b>unit</b> (CCU) and MicroBlaze soft microprocessor. Neuron works with fixed point arithmetic, and is designed with the accent to effective utilization of the FPGA. The data transfer is effectively made by using DMA transfer unit...|$|R
30|$|Classical SLAM {{algorithms}} are too computationally intensive {{to run on}} an embedded <b>computing</b> <b>unit.</b> They require {{at least}} laptop-level performances. Gifford et al.[11] present a low-cost approach to autonomous multi-robot mapping and exploration for unstructured environments. The robot hosts a Gumstix <b>computing</b> <b>unit</b> (600 Mhz), 6 IR scanning range arrays, a 3 -axis gyroscope and odometers. Running DP-SLAM alone on the Gumstix with 15 particles takes on average 3 s per update. While using 25 particles, {{it takes more than}} 10 s per update. Authors have underlined the difficulty to find the right SLAM parameters to fit within the available computing power and the real-time processing. Magnenat et al.[12] present a system based on the co-design of a low-cost sensor (a slim rotating scanner), a SLAM algorithm, a <b>computing</b> <b>unit,</b> and an optimization methodology. The <b>computing</b> <b>unit</b> is based on an ARM processor (533 Mhz) running a FASTSLAM 2.0 algorithm[13]. Magnenat et al.[12] use an evolution strategy to find the best configuration of the algorithm and setting of the parameters.|$|R
40|$|The {{design of}} {{embedded}} systems {{is a complex}} activity that involves a lot of decisions. With high performance demands of present day usage scenarios and software, they often involve energy hungry state-of-the-art <b>computing</b> <b>units.</b> While focusing on power consumption of <b>computing</b> <b>units,</b> the physical properties of software are often ignored. Recently, {{there has been a}} growing interest to quantify and model the physical footprint of software (e. g. consumed power, generated heat, execution time, etc.), and a component based approach facilitates methods for describing such properties. Based on these, software architects can make energy-efficient software design solutions. This paper presents power consumption and execution time profiling of a component software that can be allocated on heterogeneous <b>computing</b> <b>units</b> (CPU, GPU, FPGA) of a tracked robot...|$|R
40|$|We present {{original}} {{approach to}} the design {{and implementation of the}} convolution <b>computing</b> <b>unit</b> in this article. Convolution <b>computing</b> <b>unit</b> (further CCU) is the part of the digital neuron structure and limits the speed of the computation cycle. For that reason we have designed the architecture of the CCU with high computing rate. System CCU was implemented in to the Virtex- 4 FX 12 FPGA. The convolution computing can work up to 200 MHz...|$|R
50|$|Ofek was {{established}} in December 2005, by merging two former IAF <b>computing</b> <b>units,</b> Unit 180 (founded 1959) and Mamdas (founded 1967).|$|R
2500|$|John Mauchly {{has also}} been {{credited}} for being the first one using the verb [...] "to program" [...] in his 1942 paper on <b>electronic</b> <b>computing,</b> although {{in the context of}} ENIAC, not in its current meaning.|$|R
5000|$|However, {{prior to}} 1946, {{software}} {{as we now}} understand it—programs stored {{in the memory of}} stored-program digital computers—did not yet exist. The first <b>electronic</b> <b>computing</b> devices were instead rewired in order to [...] "reprogram" [...] them.|$|R
5000|$|John Mauchly {{has also}} been {{credited}} for being the first one using the verb [...] "to program" [...] in his 1942 paper on <b>electronic</b> <b>computing,</b> although {{in the context of}} ENIAC, not in its current meaning.|$|R
5000|$|The A10-7850K [...] "Kaveri" [...] {{contains}} 8 CUs (<b>compute</b> <b>units)</b> and 8 Asynchronous Compute Engines {{for independent}} scheduling and work item dispatching.|$|R
