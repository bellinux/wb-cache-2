984|852|Public
25|$|Directed {{complete}} partial orders (dcpos), that {{guarantee the}} existence of suprema of all directed subsets and that are studied in <b>domain</b> <b>theory.</b>|$|E
25|$|The set of compact {{elements}} of an arithmetic complete lattice is a lattice with a least element, where the lattice operations are given by restricting the respective {{operations of the}} arithmetic lattice. This is the specific property which distinguishes arithmetic lattices from algebraic lattices, for which the compacts do only form a join-semilattice. Both of these classes of complete lattices are studied in <b>domain</b> <b>theory.</b>|$|E
25|$|Finally, one can invert the view, {{switching}} from functions of orders to orders of functions. Indeed, the functions between two posets P and Q {{can be ordered}} via the pointwise order. For two functions f and g, we have f ≤ g if f(x) ≤ g(x) for all elements x of P. This occurs for example in <b>domain</b> <b>theory,</b> where function spaces play an important role.|$|E
40|$|The KBANN {{system uses}} neural {{networks}} to refine <b>domain</b> <b>theories.</b> Currently, <b>domain</b> knowledge in KBANN is expressed as nonrecursive, propositional rules. We extend KBANN to <b>domain</b> <b>theories</b> expressed as finite-state automata. We apply finite-state KBANN {{to the task}} of predicting how proteins fold, producing a small but statistically significant gain in accuracy over both a standard neural network approach and a non-learning algorithm from the biological literature. Our method shows promise at solving this and other real-world problems that can be described in terms of statedependent decisions. ...|$|R
40|$|Current {{planners}} show impressive {{performance in}} many {{real world and}} artificial domains by using planning (either domain dependent or independent) heuristics. But, on one hand, domain dependent planners still outperform domain independent planners by re-defining <b>domain</b> <b>theories,</b> also including control knowledge. On the other hand, these domain dependent planners require a careful and manual refinement of <b>domain</b> <b>theories</b> to incorporate <b>domain</b> and control knowledge. Here, we present a tool that automatically generates domain and control knowledge as a middle ground solution {{to the definition of}} efficient quality-based planners...|$|R
40|$|Abstract The KBANN {{system uses}} neural {{networks}} torefine <b>domain</b> <b>theories.</b> Currently, <b>domain</b> knowledge in KBANN is expressed as non-recursive, propositional rules. We extend KBANN to <b>domain</b> <b>theories</b> expressed asfinite-state automata. We apply finite-state KBANN {{to the task}} of predicting how proteinsfold, producing a small but statistically significant gain in accuracy over both astandard neural network approach and a non-learning algorithm from the biologicalliterature. Our method shows promise at solving this and other real-world problemsthat can be described in terms of statedependent decisions. 1 INTRODUCTION Research in artificial neural networks (ANNs) has untilrecently largely ignored preexisting knowledge about th...|$|R
2500|$|<b>Domain</b> <b>theory</b> – Study {{of certain}} posets giving denotational {{semantics}} for lambda calculus ...|$|E
2500|$|Elliot Turiel, {{founder of}} <b>domain</b> <b>theory</b> (primary {{challenge}} to Kohlberg's stages of moral development) ...|$|E
2500|$|Categorical {{logic is}} now a {{well-defined}} field based on type theory for intuitionistic logics, with applications in functional programming and <b>domain</b> <b>theory,</b> where a cartesian closed category is taken as a non-syntactic description of a lambda calculus. At the very least, category theoretic language clarifies what exactly these related areas have in common (in some [...] sense).|$|E
40|$|When explanation-based {{learning}} (EBL) is {{used for}} knowledge level learning (KLL), training examples are essential, and EBL is not simply reducible to partial evaluation. A key enabling factor in this behavior {{is the use of}} <b>domain</b> <b>theories</b> in which not every element is believed a priori. When used with such <b>domain</b> <b>theories</b> EBL provides a basis for rote learning (deductive KLL) and induction from multiple examples (nondeductive KLL). This article lays the groundwork for using EBL in KLL, by describing how EBL can lead to increased belief, and describes new results from using Soar’s chunking mechanism- a variation on EBL- as the basis for a task-independent rote learning capability and...|$|R
40|$|Inquiry-based science {{teaching}} demands {{a set of}} teaching practices quite different from typical didactic science instruction. Two of the central challenges in teaching science through inquiry are that a) students' inquiry must productively engage them in exploration and reasoning about central issues in the domain; and b) {{students need to be}} able to generalize such specific inquiry experiences to broader, formal <b>domain</b> <b>theories.</b> These challenges reflect a tension in inquiry-based science learning between students' inquiry goals and instructional goals that students master formal <b>domain</b> concepts and <b>theories.</b> This paper explores how two teachers concurrently enacting the same inquiry-based unit on evolution structure activity and discourse in their classroom activities to connect students' computer-based inquiry experiences to formal <b>domain</b> <b>theories.</b> our analyses shows that each teacher uses whole-class discussions as a major vehicle for connecting students' understanding to formal doma [...] ...|$|R
40|$|Using a {{semantic}} definition of ontologies, we provide a characterization of ontologies {{with respect to}} reusabil-ity, merging, and integration. This definition also pro-vides a model-theoretic approach to distinguishing on-tologies from the <b>domain</b> <b>theories</b> which use them, and the relationships among ontologies within an ontology library...|$|R
2500|$|In <b>domain</b> <b>theory,</b> it {{is natural}} to seek to {{approximate}} the elements in a partial order by [...] "much simpler" [...] elements. This leads to the class of continuous posets, consisting of posets where every element can be obtained as the supremum of a directed set of elements that are way-below the element. If one can additionally restrict these to the compact elements of a poset for obtaining these directed sets, then the poset is even algebraic. Both concepts {{can be applied to}} lattices as follows: ...|$|E
2500|$|Continuity of {{functions}} {{is one of}} the core concepts of topology, which is treated in full generality below. The introductory portion of this article focuses on the special case where the inputs and outputs {{of functions}} are real numbers. [...] A stronger form of continuity is uniform continuity. In addition, this article discusses the definition for the more general case of functions between two metric spaces. In order theory, especially in <b>domain</b> <b>theory,</b> one considers a notion of continuity known as Scott continuity. Other forms of continuity do exist but they are not discussed in this article.|$|E
50|$|A <b>domain</b> <b>theory</b> {{is perfect}} or {{complete}} if it contains, in principle, all {{information needed to}} decide any question about the domain. For example, the <b>domain</b> <b>theory</b> for chess is simply the rules of chess. Knowing the rules, in principle, {{it is possible to}} deduce the best move in any situation. However, actually making such a deduction is impossible in practice due to combinatoric explosion. EBL uses training examples to make searching for deductive consequences of a <b>domain</b> <b>theory</b> efficient in practice.|$|E
40|$|Recent work in {{the field}} of machine {{learning}} has demon-strated the utility of explanation formation as a guide to gen-eralization. Most of these investigations have concentrated on the formation of explanations from consistent <b>domain</b> <b>theories.</b> I present an approach to forming explanations from domain the-ories which are inconsistent due to the presence of abstractions which suppress potentially relevant detail. In this approach, ex-planations are constructed to support reasoning tasks and are refined in a failure-driven manner. The elaboration of explana-tions is guided by the structuring of <b>domain</b> <b>theories</b> into layers of abstractions. This work {{is part of a larger}} effort to develop a causal mod-elling system which forms explanations of the underlying causal relations in physical systems. This system utilizes an inconsis...|$|R
40|$|AbstractConfiguration and {{diagnosis}} problem-solvers {{are commonly}} championed as successes of applied artificial intelligence techniques. A common {{problem is that}} problem-solvers typically encode task-specific representation assumptions and simplifications in their <b>domain</b> <b>theories,</b> hindering the reuse of the <b>domain</b> <b>theories</b> between the problem-solvers. While model-based reasoning techniques {{have been shown to}} provide an interesting approach to sharing component and device specifications, their respective mechanisations are generally too inefficient. We show how constraint logic programming languages provide a flexible environment in which constraint-based specifications can be effectively shared and efficiently mechanised by exploiting constraint solving and propagation techniques tightly integrated with the backtracking search mechanism of logic programming languages. A component specification language is presented and the mappings from the language to the constraint system and strategies for guiding the search are defined for the respective problem-solvers...|$|R
40|$|Knowledge {{intensive}} engineering aims at flexible {{applications of}} a variety of product life cycle knowledge, such as design, manufacturing, operations, maintenance, and recycling. Many engineering <b>domain</b> <b>theories</b> are organized and embedded within CAD and CAE tools and engineering activities can be formalized as modeling operations to them. Since most of <b>domain</b> <b>theories</b> deal with the physical world and can be associated with physical concepts, a physical concept ontology can form a common ontology to integrate engineering models that are formed based on <b>domain</b> <b>theories.</b> This paper reports a physical ontology-based support system for knowledge intensive engineering called Knowledge Intensive Engineering Framework (KIEF) to integrate multiple engineering models and to allow more flexible use of them. First, the paper describes the physical ontology as the core of KIEF and an ontology-based reasoning system, called a pluggable metamodel mechanism, to integrate and maintain relationships among these models. The pluggable metamodel mechanism uses a metamodel that represents the designer’s mental model about a design object as a concept network model. The designer builds and decomposes a functional hierarchy from functional specifications with an FBS (Function-Behavior-State) modeler. He/She then maps the functional hierarchy into a metamodel using physical features that are building blocks for conceptual design. Then, the pluggable metamodel mechanism enriches the information contained in the metamodel by using causal dependency knowledge about the physical world and by building and analyzing various engineering models. We demonstrate the power of KIEF by illustrating a design case performed on KIEF...|$|R
50|$|See the {{literature}} given for <b>domain</b> <b>theory.</b>|$|E
5000|$|... #Subtitle level 2: Mathematical {{characterization}} using <b>domain</b> <b>theory</b> ...|$|E
50|$|<b>Domain</b> <b>theory</b> is {{a branch}} of {{mathematics}} that studies special kinds of partially ordered sets (posets) commonly called domains. Consequently, <b>domain</b> <b>theory</b> {{can be considered as}} {{a branch of}} order theory. The field has major applications in computer science, where it is used to specify denotational semantics, especially for functional programming languages. <b>Domain</b> <b>theory</b> formalizes the intuitive ideas of approximation and convergence in a very general way and has close relations to topology. An alternative important approach to denotational semantics in computer science is that of metric spaces.|$|E
40|$|In {{this paper}} we extend RPBL, a Relational Paths Based Learning {{approach}} for first order theories in three directions. We apply <b>domain</b> <b>theories</b> to expand structured instance space, learn recursive theories by {{an example of}} learningmember relationship of lists, and analyze the performance as well as time complexity theoretically. In addition, we give the details of our experimental results. 1...|$|R
5000|$|... 'The <b>Domain</b> Wall <b>Theory</b> of Two-Dimensional Commensurate-Incommensurate Phase Transition', by M. P. M. den Nijs.|$|R
40|$|We {{present a}} model for the {{resolution}} of plural references on groupings based on Reference <b>Domains</b> <b>Theory.</b> While the original theory does not take plural reference into account, this paper shows how several entities can be grouped together by building a new domain and how they can be accessed later on. We introduce the notion of super-domain representing the access structure to all the plural referents of a given type...|$|R
50|$|See the {{literature}} given for order theory and <b>domain</b> <b>theory.</b>|$|E
50|$|See: <b>domain</b> <b>theory</b> for the {{mathematical}} discipline {{related to these}} issues.|$|E
50|$|His {{research}} interests include categorical logic, <b>domain</b> <b>theory</b> and Martin-Löf type theory.|$|E
40|$|Planning systems {{which make}} use of <b>domain</b> <b>theories</b> can produce more {{accurate}} plans and achieve more goals as {{the quality of their}} domain knowledge improves. MTR, a multi-strategy learning system, was designed to learn from system failures and improve domain knowledge used in planning. However, augmented domain knowledge can decrease planning efficiency. We describe how improved knowledge that becomes expensive to use can be approximated to yield calculated tradeoffs in accuracy and efficiency...|$|R
40|$|Abstract. Errors {{occur in}} {{mathematical}} <b>domain</b> <b>theories.</b> In this paper we investigate {{the problem of}} detecting these errors. Some errors result in inconsistent theories. Many, however, do not result inconsistent theories and so cannot be detected by inconsistency checking. We propose two solutions to this problem: a methodology of theory testing in which a prover is used to verify positive and negative test cases, {{and the addition of}} axioms to a suspect theory in order to encode its intended meaning. ...|$|R
40|$|Context-aware {{systems that}} {{make use of}} sensor {{information}} to reason about their context have been proposed in many domains. However, it is still hard to design effective context-aware applications, due {{to the absence of}} suitable <b>domain</b> <b>theories</b> that consider dynamic context and associated user requirements as a precursor of system development. In this paper, we discuss a theory for the well-being domain and propose a model-driven development process that exploits the proposed theory to build effective, i. e. user-centric, context-aware applications...|$|R
5000|$|<b>Domain</b> <b>theory</b> - Study {{of certain}} posets giving denotational {{semantics}} for lambda calculus ...|$|E
5000|$|... p. 7 THE TECHNOLOGY OF EDUCATION - <b>domain</b> <b>theory,</b> operant span, long {{division}} ...|$|E
5000|$|... 1994. <b>Domain</b> <b>Theory.</b> (with A Jung). in Handbook of Logic in Computer Science 3.|$|E
30|$|By use of space-frequency <b>domain</b> {{coherence}} <b>theory,</b> we {{establish a}} rigorous classification for the electricfield vector to oscillate in one, two, or three spatial dimensions.|$|R
40|$|Computational {{support in}} the domain of {{building}} design is hampered by the need to control generation and search processes both of which are elusive {{due to the lack of}} strong <b>domain</b> <b>theories.</b> Case based reasoning paradigm may be useful to overcome some of these difficulties. A case based design system is presented here that enables case adaptation and case combination of design cases to generate new design solutions more efficiently. Some issues in our approach that are different from other projects with similar aims are also discussed...|$|R
40|$|In a Bayesian framework, we give {{a principled}} {{account of how}} domain-specific prior {{knowledge}} such as imperfect analytic <b>domain</b> <b>theories</b> can be optimally incorporated into networks of locally-tuned units: by choosing a specific architecture and by applying a specific training regimen. Our method proved successful in overcoming the data deficiency problem in a large-scale application to devise a neural control for a hot line rolling mill. It achieves in this application significantly higher accuracy than optimally-tuned standard algorithms such as sigmoidal backpropagation, and outperforms the state-of-the-art solution. ...|$|R
