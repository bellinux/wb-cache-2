1|533|Public
40|$|A 4 -bit and a 3 -bit adder are {{described}} {{which can be}} implemented under special hardware restrictions. The chip to be used is <b>field-programmable</b> <b>logic</b> <b>array</b> (<b>FPLA)</b> with 12 input lines, 50 AND gates inside, and output through only 6 OR gates. The context {{in which it is}} being used requires an enable function which can suppress one of the two numbers to be added. The 3 -bit enabled adder is compatible with lookahead-carry mechanizations using the 74 S 182...|$|E
50|$|PALs {{were not}} the first {{commercial}} programmable logic devices; Signetics had been selling its field programmable <b>logic</b> <b>array</b> (<b>FPLA)</b> since 1975. These devices were completely unfamiliar to most circuit designers and were perceived to be too difficult to use. The FPLA had a relatively slow maximum operating speed (due to having both programmable-AND and programmable-OR arrays), was expensive, and had a poor reputation for testability. Another factor limiting {{the acceptance of the}} FPLA was the large package, a 600-mil (0.6", or 15.24 mm) wide 28-pin dual in-line package (DIP).|$|R
5000|$|Note {{that the}} use of the word [...] "programmable" [...] does not {{indicate}} that all PLAs are field-programmable; in fact many are mask-programmed during manufacture in the same manner as a mask ROM. This is particularly true of PLAs that are embedded in more complex and numerous integrated circuits such as microprocessors. PLAs that can be programmed after manufacture are called FPGA (Field-programmable gate array), or less frequently <b>FPLA</b> (<b>Field-programmable</b> <b>logic</b> <b>array)..</b>|$|R
40|$|To {{accelerate}} {{the execution of}} an application, repetitive logic and arithmetic computation tasks may be mapped to reconfigurable hardware, since dedicated hardware can deliver much higher speeds than those of a general-purpose processor. However, this is only feasible if the run-time reconfiguration of new tasks is fast enough, {{so as not to}} delay application execution. Currently, this is opposed by architectural constraints intrinsic to current <b>Field-Programmable</b> <b>Logic</b> <b>Array</b> (FPGA) architectures. Despite all new features exhibited by current FPGAs, architecturally they are still largely based on general-purpose architectures that are inadequate for the demands of reconfigurabl...|$|R
40|$|Dynamic {{reconfigurable}} <b>field-programmable</b> <b>logic</b> <b>arrays</b> (FPGAs) {{are receiving}} notable attention {{because of their}} much shorter reconfiguration time as compared with traditional FPGAs. The short reconfiguration time is vital to applications such as reconfigurable computing and emulation. We show in this paper that testing and diagnosis of the FPGA also {{can take advantage of}} its dynamic reconfigurability. We first propose an efficient methodology for testing the interconnects of the FPGA, then present several universal test and diagnosis approaches which cover all functional units of the FPGA. Experimental results show that our approach significantly reduces the testing time, without additional cost for diagnosis...|$|R
40|$|High-Level Synthesis (HLS) for <b>Field-Programmable</b> <b>Logic</b> <b>Array</b> (FPGA) {{programming}} {{is becoming a}} practical alternative to well-established VHDL and Verilog languages. This paper describes {{a case study in}} the use of HLS tools to design FPGA-based data acquisition systems (DAQ). We will present the implementation of the CERN CMS detector ECAL Data Concentrator Card (DCC) functionality in HLS and lessons learned from using HLS design flow. The DCC functionality and a definition of the initial system-level performance requirements (latency, bandwidth, and throughput) will be presented. We will describe how its packet processing control centric algorithm was implemented with VHDL and Verilog languages. We will then show how the HLS flow could speed up design-space exploration by providing loose coupling between functions interface design and functions algorithm implementation. We conclude with results of real-life hardware tests performed with the HLS flow-generated design with a DCC Tester system...|$|R
40|$|Considerable {{research}} has been recently directed towards building flexible and reconfigurable network infrastructures, which promise to provide better functionality and allow faster evolution in services. Two classes of reconfigurable networks have been investigated: adaptive protocols and programmable (active) networks. An adaptive protocol can modify itself and dynamically optimize its structure {{in the face of}} changing network conditions. A second technology, programmable (or active) networks have been proposed as a way of accelerating the deployment and support of new network services. Several software-only prototypes of each technology (adaptive protocols and active networks) have been built. Performance limitations and a tacit assumption that protocol flexibility requires software has generated a considerable amount of skepticism towards these approaches. We make three major contributions in this thesis. First, we demonstrate how results in the field of Reconfigurable Computing can be applied in constructing a reconfigurable network protocol, improving the performance by delegating “bit-intensive” functions to hardware. Second, we extract the safety and security issues discovered in prototyping and generalize them to any architecture using programmable logic. Third, this thesis completes the research in Protocol Boosters, a project in the field of adaptive protocols, which was considered incomplete prior to this work. The methodology we use is evaluation of a proof-of-concept through design and implementation. Our experimental platform, the Programmable Protocol Processing Pipeline (P 4) is optimized for network processing and composes a set of <b>field-programmable</b> <b>logic</b> <b>arrays</b> (FPGA) into a processing engine achieving the processing performance of special purpose hardware with the software-like flexibility. Using the P 4 and one of the proposed frameworks for building adaptive and programmable protocols, we demonstrate that reconfigurable hardware can be used for building reconfigurable networks. This demonstrates that on-the-fly hardware programmability can be applied in many settings such as line cards, switches and routers. ...|$|R
40|$|This paper {{presents}} a novel <b>field-programmable</b> gate <b>array</b> <b>logic</b> block architecture which incorporates support for digit-serial DSP architectures on a digit wide basis, without diminishing {{the support for}} random and control logic applications. To efficiently realize a digit-serial DSP design on FPGAs, one must create an FPGA architecture optimized for those types of systems. Key to the suitability of the FPGA for these applications {{is the fact that}} each of its basic blocks is capable of processing a digit-size of up to 4 -bits. A novel digit-serial FPGA logic block architecture has been proposed to satisfy the requirement of rapid prototyping and efficient implementation of digit-serial DSP applications. Digit-serial DSP designs using the digit-serial FPGA are compared to those implemented on a Xilinx FPGA chip. The results show that the normalized area of digit-serial circuits on the DS-FPGA is only 33 ¸ 54 % of the number required on the Xilinx FPGA. INTRODUCTION Field-Programmable Gat [...] ...|$|R
40|$|Recent {{years have}} {{witnessed}} a massive growth of global data generated from web services, social media networks, and science experiments, {{as well as}} the 　“tsunami" of Internet-of-Things devices. According to a Cisco forecast, total data center traffic is projected to hit 15. 3 zettabytes (ZB) by the end of 2020. Gaining insight into a vast amount of data is highly important because valuable data are the driving force for business decisions and processes, as well as scientists 2 ̆ 7 exploration and discovery. To facilitate analytics, data are usually indexed in advance. Depending on the workloads, such as online transaction processing (OLTP) workloads and online analytics processing (OLAP) workloads, several indexing frameworks have been proposed. Specifically, B+-tree and hash are two common indexing methods in OLTP, where the number of querying and updating processes are nearly similar. Unlike OLTP, OLAP concentrates on querying in a huge historical storage, where updating processes are irregular. Most queries in OLAP are also highly complex and involve aggregations, while the execution time is often limited. To address these challenges, a bitmap index (BI) was proposed and has been proven as a promising candidate for OLAP-like workloads. A BI is a bit-level matrix, whose number of rows and columns are the length and cardinality of the datasets, respectively. With a BI, answering multi-dimensional queries becomes a series of bitwise operators, e. g. AND, OR, XOR, and NOT, on bit columns. As a result, a BI has proven profitable for solving complex queries in large enterprise databases and scientific databases. More significantly, because of the usage of low-hardware logical operators, a BI appears to be suitable for advanced parallel-processing platforms, such as multi-core CPUs, graphics processing units (GPUs), <b>field-programmable</b> <b>logic</b> <b>arrays</b> (FPGAs), and application-specific integrated circuits (ASIC). Modern FPGAs and ASICs have become increasingly important in data analytics because they can confront both data-intensive and computing-intensive tasks effectively. Furthermore, FPGAs and ASICs can provide higher energy efficiency, compared to CPUs and GPUs. As a result, since 2010, Microsoft has been working on the so-called Catapult project, where FPGAs were integrated into datacenter servers to accelerate their search engine as well as AI applications. In 2016, Oracle for the first time introduced SPARC S 7 and M 7 processors that are used for accelerating the OLTP databases. Nonetheless, a study on the feasibility of BI-based analytics systems using FPGAs and ASICs has not yet been developed. This dissertation, therefore, focuses on implementing the data analytics systems, in both FPGAs and ASICs, using BI. The advantages of the proposed systems include scalability, low data input/output cost, high processing throughput, and high energy efficiency. Three main modules are proposed: (1) a BI creator that indexes the given records by a list of keys and outputs the BI vectors to the external memory; (2) a BI-based query processor that employs the given BI vectors to answer users 2 ̆ 7 queries and outputs the results to the external memory; and (3) an BI encoder that returns the positions of one-bits of bitmap results to the external memory. Six hardware systems based on those three modules are implemented in an FPGA in advance for functional verification and then partially in two ASICs| 180 -nm bulk complementary metal-oxide-semiconductor (CMOS) and 65 -nm Silicon-On-Thin-Buried-Oxide (SOTB) CMOS technology―for physical design verification. Based on the experimental results, these proposed systems outperform other CPU-based and GPU-based designs, especially in terms of energy efficiency. 電気通信大学 201...|$|R
5000|$|... "Processing Models for the Next Generation Network" [...] FPL '01 Proceedings of the 11th International Conference on <b>Field-Programmable</b> <b>Logic</b> and Applications, August 28, 2001 ...|$|R
40|$|Abstract—This paper {{describes}} a new digital design laboratory developed for undergraduate {{students in this}} electrical and computer engineering curriculum. A top-down rapid prototyping approach with commercial computer-aided design tools and <b>field-programmable</b> <b>logic</b> devices (FPLDs) is used for laboratory projects. Students begin with traditional transistor–transistor logic-based projects containing a few gates and progress to designing a simple 16 -bit computer, using very high-speed integrated circuits hardware description language (VHDL) synthesis tools and an FPLD. To help motivate students, the simple computer design is programmed to control a small autonomous robot with two servo drive motors and several sensors. The laboratory concludes with a team-based design project using the robot. Index Terms—Autonomous robot, digital design, <b>field-programmable</b> <b>logic</b> device (FPLD), sequential logic, very high-speed integrated circuits hardware description language (VHDL) synthesis. I...|$|R
40|$|Special Section on Field Programmable Logic and Applications 2015 and Regular PapersThe list of {{significant}} papers {{from the first}} 25 years of the <b>Field-Programmable</b> <b>Logic</b> and Applications conference (FPL) is presented in this paper. These 27 papers represent those which have most strongly influenced theory and practice in the field...|$|R
40|$|In-memory {{computation}} {{is one of}} {{the most}} promising features of memristive memory arrays. In this paper, we propose an array architecture that supports in-memory computation based on a <b>logic</b> <b>array</b> first proposed in 1972 by Sheldon Akers. The Akers <b>logic</b> <b>array</b> satisfies this objective since this array can realize any Boolean function, including bit sorting. We present a hardware version of a modified Akers <b>logic</b> <b>array,</b> where the values stored within the array serve as primary inputs. The proposed <b>logic</b> <b>array</b> uses memristors, which are nonvolatile memory devices with noteworthy properties. An Akers <b>logic</b> <b>array</b> with memristors combines memory and logic operations, where the same array stores data and performs computation. This combination opens opportunities for novel non-von Neumann computer architectures, while reducing power and enhancing memory bandwidth...|$|R
40|$|Several theorems {{exist that}} allow the {{identification}} of undetectable faults in synchronous sequential circuits by applying combinational ATPG to an iterative <b>logic</b> <b>array</b> of limited length. In this paper, we consider the theorem that resulted {{in one of the}} most effective procedures for identifying undetectable faults. We show conditions on fault free sequential circuits under which the only undetectable faults that can be identified by this theorem using an iterative <b>logic</b> <b>array</b> of any length are combinationally redundant faults. Such faults can be identified using an iterative <b>logic</b> <b>array</b> of length one, or techniques specifically developed for combinationally redundant faults. Whereas for a general circuit, increasing the length of the iterative <b>logic</b> <b>array</b> may help identify additional undetectable faults, this is not the case for circuits with the properties identified here. We demonstrate the existence of benchmark circuits that satisfy these conditions. ...|$|R
40|$|An {{approach}} {{was developed to}} create asynchronous recurrent <b>logic</b> <b>arrays</b> for the binary neural networks used as parallel distributed knowledge models. This approach converts the neurons in a neural network model into recurrent switching functions. These recurrent switching functions are then mapped onto an asynchronous recurrent <b>logic</b> <b>array</b> which completely captures {{the characteristics of the}} original knowledge model. Two modified programmable <b>logic</b> <b>array</b> (PLA) structures were devised for the physical implementation of these asynchronous recurrent <b>logic</b> <b>arrays.</b> Index Terms - Knowledge representation, constraint satisfaction, parallel distributed processing, neural networks, expert systems. I. Introduction A parallel distributed model that uses binary neural networks to represent qualitative knowledge was proposed by Vai and Xu [1]. In this knowledge model, the neuron thresholds and interconnection weights of a neural network are determined so that the stable states of the neural netw [...] ...|$|R
5000|$|Manhattan wiring {{is often}} used to {{represent}} a programmable <b>logic</b> <b>array.</b>|$|R
5000|$|The C65 also {{contains}} {{one or two}} programmable <b>logic</b> <b>arrays</b> depending on the version: ...|$|R
40|$|A {{description}} is presented of hardware concepts {{for building a}} massively parallel processing system for two-dimensional data. The processing system is to use <b>logic</b> <b>arrays</b> of 128 x 128 elements which perform over 16 thousand operations simultaneously. Attention is given to image data, <b>logic</b> <b>arrays,</b> basic image <b>logic</b> functions, a prototype negator, an interleaver device, image logic circuits, and an image memory circuit...|$|R
5000|$|Ferranti Electronics Ltd of Chadderton, Oldham, Greater Manchester for {{uncommitted}} <b>logic</b> <b>arrays</b> for microelectronics applications.|$|R
40|$|ABSTRACT. This paper {{introduces}} {{a new high}} level programming language for a novel class of computational devices namely data-procedural machines. These machines are by up to several orders of magnitude more efficient than the von Neumann paradigm of computers and are as flexible and as universal as computers. Their efficiency and flexibility is achieved by using <b>field-programmable</b> <b>logic</b> as the essential technology platform. The paper briefly summarizes and illustrates the essential new features of this language by means of two example programs. ...|$|R
40|$|This paper {{describes}} {{our experiences}} using a SOC approach to develop capstone design projects for undergraduate {{students in our}} electrical and computer engineering curriculum. A commercial FPGA-based SOC development board with a RISC processor IP core is used to support {{a wide variety of}} student design projects. A top-down rapid prototyping approach with commercial CAD tools, a C compiler targeted for the RISC processor IP core, and a large <b>field-programmable</b> <b>logic</b> device (FPLD) is used for team-based design projects. 1...|$|R
40|$|ISSN: 0141 - 9331 Self-checking blocks {{may be used}} {{to ensure}} {{concurrent}} error detection in integrated circuits. On the other hand, <b>logic</b> <b>arrays</b> such as PLAs, ROMs and RAMs are essential to circumvent the increasing complexity of VLSI circuits. Efficient self-checking schemes for <b>logic</b> <b>arrays</b> are therefore essential for concurrent error detection in VLSI circuits. The paper describes schemes that incur low area overhead...|$|R
50|$|The input for ESPRESSO is a {{function}} table of the desired functionality; {{the result is a}} minimized table, describing either the ON-cover or the OFF-cover of the function, depending on the selected options. By default, the product terms will be shared as much as possible by the several output functions, but the program can be instructed to handle each of the output functions separately. This allows for efficient implementation in two-level <b>logic</b> <b>arrays</b> such as a PLA (Programmable <b>Logic</b> <b>Array)</b> or a PAL (Programmable <b>Array</b> <b>Logic).</b>|$|R
40|$|This paper {{illustrates}} {{a new high}} level programming language which is important for a novel class of computational devices called Xputers, which are by up to several orders of magnitude more efficient than the von Neumann paradigm of computers. Xputers are as flexible and as universal as computers. The flexibility of Xputers is achieved by using <b>field-programmable</b> <b>logic</b> (interconnect-reprogrammable media) as the essential technology platform. The paper first briefly illustrates the Xputer paradigm as a prerequisite needed to understand the fundamental issues of this new language. 1...|$|R
40|$|<b>Field-Programmable</b> <b>Logic</b> (FPL) is on {{the verge}} of revolutionizing digital signal {{processing}} (DSP) in the manner that programmable DSP microprocessors did nearly two decades ago. While FPL densities and performance have steadily improved to the point where some DSP solutions can be integrated into a single FPL chip, they still have limited use in high-precision high-bandwidth applications. In this paper it is shown that in such cases, the residue number system (RNS) can be an enabling technology. The design of a high-decimation rate digital filter is presented which demonstrates the RNS-FPL synergy...|$|R
40|$|This paper {{introduces}} {{an innovative}} compilation technique which {{is essential to}} a novel class of computational devices called Xputers, being by up to several orders of magnitude more efficient than von Neumann paradigm of computers. Xputers areas flexible and as universal as computers. But the central technology platform of flexibility is <b>field-programmable</b> <b>logic</b> (we would prefer the term interconnect-reprogrammable media), rather than the RAM which gives the flexibility of computers. The paper first briefly summarizes the Xputer paradigm as a prerequisite needed to understand the fundamental issues of this new compilation technology...|$|R
5000|$|The Signetics 82S100 <b>FPLA</b> (Field Programmable <b>Logic</b> <b>Array)</b> was {{the first}} commercially {{successful}} user programmable logic device, the forerunner of the modern FPGA.|$|R
40|$|The {{architecture}} of various programmable <b>logic</b> <b>arrays</b> such as PAL (Programmable <b>Array</b> <b>Logic),</b> PLA (Programmable <b>Logic</b> <b>Array)</b> and MAPL (Multiple <b>Array</b> Programmable <b>Logic)</b> differ slightly in interconnection. The introduced types of devices are called PLD (Programmable Logic Devices). It is a bulk of programmable AND functions (product terms), and OR functions. The whole circuit structure is completed by input/output or dedicated output macrocells allowing {{to do the}} minimization of product term number. PLD's internal AND-array, and OR-array differs from the discrete logic AND, and OR devices whereas the functions are similar. The troubleshooting of these devices differs too...|$|R
40|$|E�cient {{parallel}} {{schemes for}} carry-propagation-free addition of modi®ed signed-digit trinary numbers are presented. The necessary minterms for implementation using an optical programmable <b>logic</b> <b>array</b> area are derived. The proposed schemes require only a truth table of 25 entries {{compared with an}} earlier scheme of 625 entries. The proposed schemes are amenable to optical implementation. Experimental results using an optical programmable <b>logic</b> <b>array</b> are demonstrated. The experiments show the problems of noise and crosstalk. This suggests some dc bias is necessary to increase the signal-to-noise ratio of th...|$|R
40|$|Iterative <b>Logic</b> <b>Arrays</b> (ILAs) {{are ideal}} as VLSI sub-systems {{because of their}} regular {{structure}} and its close resemblance with FPGAs (Field Programmable Gate Arrays). AND-EXOR based circuits are {{of interest in the}} design of very low power circuits where energy loss implied by high frequency switching is of much consideration. This paper examines the testability of AND-EXOR based Iterative <b>Logic</b> <b>Arrays</b> (ILAs). For certain ILAs it is possible to find a test set whose size remains constant irrespective {{of the size of the}} ILA, while for others it varies with array size. Former type of ILAs is known as Constant-Testable (C-Testable). It has been shown that AND-EXOR based <b>Logic</b> <b>Arrays</b> are C-Testable and size of test set is equal to number of entries in cell truth table. The test generation problem has been shown to be related to certain properties of cycles in a set of graphs derived from cell truth table. By careful analysis of these cycles an efficient test generation technique that can be easily converted to an ATPG program has been presented for both 1 D and 2 D ILAs. How this property of ILAs can be used for testing FPGAs has also been discussed. Keywords - C-Testable, Iterative <b>Logic</b> <b>Arrays,</b> Bijective, Test Generation, ATP...|$|R
40|$|ABSTRACT. This paper {{illustrates}} {{an innovative}} compilation technique {{which is important}} for a novel class of computational devices called Xputers, which are by up to several orders of magnitude more efficient than the von Neumann paradigm of computers. Xputers are as flexible and as universal as computers. The flexibility of Xputers is achieved by using <b>field-programmable</b> <b>logic</b> (interconnectreprogrammable media) as the essential technology platform (whereas the universality of computers stems from using the RAM). The paper first briefly illustrates the Xputer paradigm as a prerequisite needed to understand the fundamental issues of this new compilation technology. 1...|$|R
40|$|This paper {{introduces}} {{a new high}} level programming language for a novel class of computational devices namely data-procedural machines. These machines are by up to several orders of magnitude more efficient than the von Neumann paradigm of computers and are as flexible and as universal as computers. Their efficiency and flexibility is achieved by using <b>field-programmable</b> <b>logic</b> as the essential technology platform. The paper briefly summarizes and illustrates the essential new features of this language by means of two example programs. (orig.) SIGLEAvailable from TIB Hannover: RN 7281 (264) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekDEGerman...|$|R
50|$|A {{programmable}} <b>logic</b> <b>array</b> (PLA) has a programmable AND gate array, which {{links to}} a programmable OR gate array, which {{can then be}} conditionally complemented to produce an output.|$|R
50|$|Some of the industry's {{foundational}} {{concepts and}} technologies for programmable <b>logic</b> <b>arrays,</b> gates, and <b>logic</b> blocks are founded in patents awarded to David W. Page and LuVerne R. Peterson in 1985.|$|R
40|$|Abstract: The {{programmable}} <b>logic</b> <b>array</b> (PLA) is a {{basic and}} important building circuit for VLSI chips. After recent improvement techniques on PLA, PLA becomes more attractive for designers especially in GHz technology with deep sub-micron sizing. In this paper {{we will try to}} introduce the cross-talk problem solution in DSM, in PLA Network and also try to give the usage of PLA in GHz technology and the advantage of PLA as a solution of Timing Closure. Since their introduction in 1970, programmable <b>logic</b> <b>arrays</b> have been used in large-scale integration and very large-scale integration (LSI/VLSI) chips. Because its regularity and programmability. Th...|$|R
40|$|To {{compose the}} {{complicated}} systems using algorithmically specialized logic circuits or processors, one {{solution is to}} perform relational computations such as union, division and intersection directly on hardware. These relations can be pipelined efficiently on a network of processors having an array configuration. These processors can be designed and implemented with a few simple cells. In {{order to determine the}} state-of-the-art in Electrically Reconfigurable <b>Logic</b> <b>Array</b> (ERLA), a survey of the available programmable <b>logic</b> <b>array</b> (PLA) and the logic circuit elements used in such arrays was conducted. Based on this survey some recommendations are made for ERLA devices...|$|R
