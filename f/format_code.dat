18|797|Public
25|$|JSON was {{originally}} {{intended to be a}} subset of the JavaScript scripting language (specifically, Standard ECMA-262 3rd Edition—December 1999) and is commonly used with Javascript, but it is a language-independent data <b>format.</b> <b>Code</b> for parsing and generating JSON data is readily available in many programming languages. JSON's Web site lists JSON libraries by language.|$|E
5000|$|FC : <b>Format</b> <b>code</b> [...] "B" [...] (The format {{described}} here. Format [...] "A" [...] {{is reserved}} for proprietary use.) ...|$|E
50|$|Y′UV422 {{can also}} be {{expressed}} in YUY2 FourCC <b>format</b> <b>code.</b> That means 2 pixels will be defined in each macropixel (four bytes) treated in the image..|$|E
5000|$|Both {{ordinary}} paragraphs and {{the contents}} of command paragraphs are parsed for <b>formatting</b> <b>codes.</b> <b>Formatting</b> in pod is very plain; it's mainly limited to bold, italic, underlined, monospaced, {{and a few other}} formats. There is also a code for linking between pod documents or to another section within the same document. <b>Formatting</b> <b>codes</b> consist of either: ...|$|R
50|$|Rich Text Format (RTF) - another <b>formatting</b> <b>code</b> {{system that}} is {{sometimes}} confused with RFT.|$|R
50|$|Customizable <b>code</b> <b>formatting</b> <b>formats</b> your <b>code</b> to {{standards}} with Code Sweeper or HTML Tidy.|$|R
50|$|Field Sequential Color: A video <b>format</b> <b>code</b> {{was added}} to support field {{sequential}} color. The color field-sequential mode will typically send each color component in a separate container.|$|E
50|$|JSON was {{originally}} {{intended to be a}} subset of the JavaScript scripting language (specifically, Standard ECMA-262 3rd Edition—December 1999) and is commonly used with Javascript, but it is a language-independent data <b>format.</b> <b>Code</b> for parsing and generating JSON data is readily available in many programming languages. JSON's Web site lists JSON libraries by language.|$|E
50|$|CodeRush Classic {{provides}} solution-wide static code analysis (detecting {{errors in}} code at design time), and additional functionality {{to make it}} easier to correct code smells, complete code, navigate, search for symbols, highlight the structural elements of the code, <b>format</b> <b>code,</b> and generate and optimize code. CodeRush Classic includes 180 automated refactorings, and streamlines unit testing using NUnit, XUnit, MbUnit and MSTest, among other functionality.|$|E
50|$|A set of text <b>formatting</b> <b>codes</b> {{similar to}} BBCode (people who don't use Messenger Plus! will still see {{standard}} unformatted text with the BBCode still in place).|$|R
5000|$|ClearWin+ is {{a library}} {{built into the}} FTN95 {{run-time}} system. It offers an easy to use interface to the Windows API and is not available when producing [...]NET code. It makes use {{of a set of}} <b>format</b> <b>codes</b> and call-backs. The <b>format</b> <b>codes</b> resemble C style printf codes. ClearWin+ is used to power the UI for Simfit. From FTN95 version 7.00 a 64-bit version of ClearWin+ is included. This can be used with existing, free, 64-bit compilers. From version 8.00 on-wards FTN95 can compile to 32- or 64-bits.|$|R
40|$|Synonym: <b>Coding</b> <b>format</b> {{independent}} {{multimedia content}} adaptation; <b>coding</b> <b>format</b> agnostic multimedia content adaptation; XML metadata-based adaptation of multimedia content {{independent of the}} <b>coding</b> <b>format</b> Definition: Generic multimedia content adaptation {{is referred to as}} the customization of multimedia content to various usage contexts without being aware of the actual <b>coding</b> <b>format</b> used...|$|R
5000|$|In fixed <b>format</b> <b>code,</b> line {{indentation}} is significant. Columns 1-6 {{and columns}} from 73 onwards are ignored. If a [...] or [...] is in column 7, then that {{line is a}} comment. Until COBOL 2002, if a [...] or [...] was in column 7, it would define a [...] "debugging line" [...] which would be ignored unless the compiler was instructed to compile it.|$|E
5000|$|Class {{files are}} {{identified}} by the following 4 byte header (in hexadecimal): [...] (the first 4 entries in the table below). The history of this magic number was explained by James Gosling referring to a restaurant in Palo Alto:"We {{used to go to}} lunch at a place called St Michael's Alley. According to local legend, in the deep dark past, the Grateful Dead used to perform there before they made it big. It was a pretty funky place that was definitely a Grateful Dead Kinda Place. When Jerry died, they even put up a little Buddhist-esque shrine. When we used to go there, we referred to the place as Cafe Dead. Somewhere along the line it was noticed that this was a HEX number. I was re-vamping some file <b>format</b> <b>code</b> and needed a couple of magic numbers: one for the persistent object file, and one for classes. I used CAFEDEAD for the object file format, and in grepping for 4 character hex words that fit after [...] "CAFE" [...] (it seemed to be a good theme) I hit on BABE and decided to use it.At that time, it didn't seem terribly important or destined to go anywhere but the trash-can of history. So CAFEBABE became the class file format, and CAFEDEAD was the persistent object format. But the persistent object facility went away, and along with it went the use of CAFEDEAD - it was eventually replaced by RMI.|$|E
40|$|My {{notes from}} the June 19 - 20 SRP working group include {{substantial}} changes requested to the description of data buffer descriptors. However I can find no mention of these in the official minutes of that meeting (01 - 195). Since the minutes do spell out much more trivial changes, I hesitate to include these changes without approval. Revision 0 of this document is the affected portions of SRP with change bars from SRP revision 07. Revision 1 of this document incorporates changes from the July 19 - 20 SRP working group, including the changes described by 01 - 227 r 1 (SRP Buffer Descriptor Formats). Revision 2 of this document incorporates changes from the August 21 SRP teleconference. 5. 4. 2 Data buffer descriptors 5. 4. 2. 1 Overview An SRP_CMD request (see 6. 8) may contain a data-out buffer descriptor, a data-in buffer descriptor, both or neither, depending upon the data transfer(s) requested by the SCSI command. The format of each data buffer descriptor is specified by a <b>format</b> <b>code</b> value. Some data buffer descriptor <b>format</b> <b>code</b> values use {{the contents of a}} count field to further specify the data buffer descriptor format. Table 2 defines data buffer descriptor <b>format</b> <b>code</b> values. Table 2 - Data buffer descriptor formats Data buffer descriptor format cod...|$|E
25|$|The {{format of}} trade plate numbers {{comprises}} three digits (with leading zeros if necessary) followed by one, {{two or three}} letters denoting the location of issue, using pre-2001 <b>format</b> <b>codes.</b>|$|R
50|$|Lexicon {{could produce}} and edit plain text files; {{at the same}} time, it could enrich them with various <b>formatting</b> <b>codes</b> (which all started with the {{character}} 255 (0xFF)). Lexicon also included a spell checker.|$|R
5000|$|Saskatchewan Consular Corps plates {{maintain}} the colour scheme of standard plates (green on white). [...] "Land of Living Skies" [...] is replaced with [...] "Consular Corps." [...] The plates have a 2-letter, 3-number <b>format,</b> <b>coded</b> as follows: ...|$|R
40|$|PostMorph is a {{tool that}} {{converts}} an executable file into SUIF intermediate format. In the cases where we have an executable program available without the source code or intermediate <b>format</b> <b>code,</b> PostMorph {{can be used to}} recover the information needed for compiler optimizations, and bring the program back to the cycle of recompilation and optimization. A primitive version of PostMorph has been implemented on the Digital Alpha architecture using the Machine SUIF library. It uses static analysis on the executable image to perform the conversion. 1. Introduction Most program optimizations are performed during the process of compilation from the source code to the executable file. An important {{reason for this is that}} these optimizations require certain information that is not included in the final executable file. However, there are situations in which we have only the executable file available, and neither the source code nor any compiler intermediate <b>format</b> <b>code.</b> This can happen with l [...] ...|$|E
40|$|The {{universal}} {{matrix of}} structural-logic transformations of the discrete {{information in the}} terms of n-measuring cube En, intended for construction of a uniform coding <b>format,</b> <b>code</b> combination of a structural-logic code (SLC), and correction of mistakes of transformation in code combinations SLC is developed. The matrix can be realized on the basis of modern microcontrollers at the appropriate software, that defines an opportunity of its wide use in computing structures for maintenance of a necessary noise stability of the processable discrete data...|$|E
40|$|Proper {{formatting}} {{makes the}} structure of a program apparent and aids program comprehension. The need to <b>format</b> <b>code</b> arises in code generation and transformation, as well as in normal reading and editing situations. Commonly used pretty-printing tools in transformation frameworks provide an easy way to produce indented code that is fairly readable for humans, without reaching the level of purpose-built reformatting tools, such as those built into IDEs. This paper presents a library of pluggable components, built to support style-based formatting and reformatting of code, and to enable further experimentation with code formatting...|$|E
5000|$|Unlike many word {{processing}} <b>formats,</b> RTF <b>code</b> can be human-readable: when an RTF file {{is viewed as}} a plain text file, the contained ASCII text is legible. The <b>formatting</b> <b>code</b> is not too distracting nor counter-intuitive, provided that the document's creator kept formatting concise. At the time of RTF's initial release, this was rare among document formats. Today, XML-based formats, which are human-readable, are more common. In contrast, MS Word's [...] format is binary, with only a few scraps of legible text.|$|R
50|$|The Burroughs MCP {{running on}} the B5000 {{was one of the}} {{earliest}} systems to automatically read tape labels. When designed in 1961 it used a proprietary <b>format</b> <b>coded</b> in BCD (strictly, Burroughs Interchange Code or BIC), but was later able to read standard 7-track ANSI (then styled USASI) labels.|$|R
50|$|According to its abstract, it {{specifies}} the Data Elements (DEs) {{used for}} interindustry interchange based on integrated circuit cards (ICCs) both with contacts and without contacts. It gives the identifier, name, description, <b>format,</b> <b>coding</b> and layout of each DE and defines {{the means of}} retrieval of DEs from the card.|$|R
40|$|The {{universe}} {{has always been}} object of our fascination. Because the Sun is our nearest star naturally {{a long time ago}} it became an object of our extensive observations. Nowadays, investigations of the Sun are carried by means of observations and theoretical modeling. Unfortunately, due to their intrinsic complexity most of theoretical models cannot be solved analytically. As a consequence, we adopt FLASH which is a modular parallel computation, adaptive mesh refinement, hierarchical data <b>format</b> <b>code</b> capable of solving magnetohydrodynamic equations. In this paper the FLASH code is applied to simulate oscillations in coronal loops. 1...|$|E
40|$|This {{document}} is currently unavailable pending {{completion of a}} larger research project. In traditional software development, the developer would use a compiler to translate a high-level language program (Java, C++, etc.) into a binary executable program. In recent years, new research has introduced a new concept called the Binary Rewriter. The Binary Rewriter takes a binary executable program as input, performs some form of optimization, and then outputs an improved binary executable program. The improved binary executable program performs the same function as the original, but {{some aspect of the}} new executable is able to perform better than the original. The Binary Rewriter can optimize programs to improve security, to improve runtime and real-time bounds, to reduce energy use, or to improve reliability. The Binary Rewriter has three main components: the reader, the optimizer, and the writer. The reader reads in a binary executable program and translates it into an ISA-independent Intermediate Format (IF). The optimizer then takes the Intermediate <b>Format</b> <b>code</b> and enhances it for increased security, reliability, etc. Once the optimization stage is complete, the writer uses the improved Intermediate <b>Format</b> <b>code</b> to produce an improved binary executable file. During my ten week internship with The Institute for Systems Research, it was my duty to begin the implementation of the third component, the writer. This manual will provide you with {{a detailed description of the}} writer section of the Binary Rewriter. NOTE: This {{document is}} currently unavailable pending completion of a larger research projec...|$|E
40|$|Low density {{parity check}} (LDPC) codes, {{a class of}} linear block code has the {{superior}} performance closer to the Shannon’s limit. Non-binary LDPC (NB-LDPC) {{is an extension of}} the binary LDPC, works on the higher order Galois field. The design of efficient hardware architecture for the NB-LDPC code depends on various factors like input message <b>format,</b> <b>code</b> length, kind of modulation and the type of channel. Non-Binary LDPC codes are designed with the better performance metrics using stochastic computation. The increased computation complexity of the NB-LDPC put forth the major challenge on the hardware realization of the decoder architecture. This paper presents the design of efficient hardware architecture for NB-LDPC decoder based on stochastic computation. The designed architecture is targeted to Xilinx VIrtex device and the synthesis reports are tabulated...|$|E
5000|$|... #Caption: The {{program on}} the left uses a WYSIWYG editor to produce a Lorem Ipsum document. The {{program on the}} right {{contains}} LaTeX code, which when compiled will produce a document that will look {{very similar to the}} document on the left. Compilation of <b>formatting</b> <b>code</b> is not a WYSIWYG process.|$|R
5000|$|Postal address <b>format,</b> postal <b>codes,</b> {{and choice}} of {{delivery}} services ...|$|R
5000|$|Although {{the content}} can be read, the often very {{extensive}} <b>formatting</b> <b>code</b> {{makes it hard}} to read. The files produced by most programs, such as Microsoft Word, contain large amounts of <b>formatting</b> <b>code.</b> Such files are easily ten or more times larger than the corresponding plain text. They are not legible. [...] Also, non-ASCII characters must be escaped in standard-compliant RTF. Thus, even with concise formatting, text that uses certain dashes and quotation marks is less legible. Latin languages that make heavy use of characters with diacritics, such as \'f1 for ñ and \'e9 for é are particularly difficult to read in RTF. Non-Latin scripts, consisting of characters such as \u21563 for 吻, areillegible in RTF. Finally, from its beginnings, RTF has supported Microsoft OLE embedded objects and Macintosh Edition Manager subscriber objects, which are not human-readable.|$|R
40|$|I was {{assigned}} to mentor high school students for the 2017 First Robotics Competition. Using a team based approach, I worked with the students to program the robot and applied my electrical background to build the robot from start to finish. I worked with students who {{had an interest in}} electrical engineering to teach them about voltage, current, pulse width modulation, solenoids, electromagnets, relays, DC motors, DC motor controllers, crimping and soldering electrical components, Java programming, and robotic simulation. For the simulation, we worked together to generate graphics files, write simulator description <b>format</b> <b>code,</b> operate Linux, and operate SOLIDWORKS. Upon completion of the FRC season, I transitioned over to providing full time support for the LCS hardware team. During this phase of my internship I helped my co-intern write test steps for two networking hardware DVTs, as well as run cables and update cable running lists...|$|E
40|$|Data {{analysis}} and presentation in SAS is made much easier by the formatting and labeling of variables, but {{this can be}} time-consuming for {{a large number of}} variables with numerous response options. Often data values, their corresponding formats, and variable labels are created during the data collection phase of a research project. These formats and labels may be available from a codebook or directly from the database into which data were entered, which can be easily imported into SAS. The {{purpose of this paper is}} to demonstrate how variable descriptions and lookup tables from a Microsoft Access database created at the outset of a study can be imported into SAS data sets. These data sets will then be used to automatically write PROC <b>FORMAT</b> <b>code</b> and LABEL and FORMAT statements within the DATA step. All code will be presented in a macro designed to assist researchers as they move from the data collection phase to the analysis phase of a study...|$|E
40|$|Input data, code, output data, summary plots, and run logs for {{investigation}} of the population genetics of the Drosophila melanogaster Sussex LHM sample. For output graphs, see popgen_plots. png Input data are 'plink binary' <b>format.</b> <b>Code</b> is a unix/linux shell script containing commands for Plink to perform population genetic tests. The two R scripts contain i. a short command for making a subpopulation file, ii. commands for plotting the output data. Both are initated in the shell script. Platform and version information {{are available in the}} log files. Other information available in the shell and R scripts. Broad observations are that the allele frequency disibribution is normal except a few humps around MAF 0. 2 - 0. 3 in the autosomes. Linkage disequilbrium, on average, levels-out after ~ 200 bp but there can still be some at distances of 300 Kb. The population appears to be divided into four genetically distinct groups (on the IBD-PCA scatter plot), with Fst analysis indicating that this is caused by genetic variation around the centromeres. This is possibly caused by historic admixture, and low centromeric recombination...|$|E
5000|$|Ontario {{plates are}} colour-coded. Car, {{motorcycle}} and trailer plates use blue letters {{on a white}} background. Commercial vehicle, bus and farm plates use black on white; diplomat plates are white on red; dealer plates are red on white; and green plates are for electric vehicles and have a 3-number, 3-letter <b>format,</b> <b>coded</b> as follows: ...|$|R
50|$|Most of the {{interface}} {{is dedicated to}} the centrally positioned code editor. The editor automatically recognizes most programming languages and will highlight the text accordingly. When a version control system is used, colored bars next to the line numbers indicate changes to those lines. For supported languages, additional symbols highlight lines that contain errors or poorly <b>formatted</b> <b>code.</b>|$|R
5000|$|... hbformat - <b>Formats</b> source <b>code</b> {{written on}} Harbour or another dialect {{according}} defined rules ...|$|R
