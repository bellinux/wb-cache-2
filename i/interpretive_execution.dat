14|0|Public
50|$|The toolkit {{makes the}} data base and {{function}} set available as C++ classes and also permits <b>interpretive</b> <b>execution</b> of legacy Mumps scripts. To use the toolkit, {{you install the}} MDH and Mumps distribution kit and related code.|$|E
50|$|IBM {{developed}} {{the concept of}} hypervisors in their CP-40 and CP-67, and in 1972 provided it for the S/370 as Virtual Machine Facility/370. IBM introduced the Start <b>Interpretive</b> <b>Execution</b> (SIE) instruction as part of 370-XA on the 3081, and VM/XA versions of VM to exploit it. PR/SM is a type-1 Hypervisor based on the CP component of VM/XA that runs directly on the machine level and allocates system resources across LPARs to share physical resources. It is a standard feature on IBM System z machines.|$|E
50|$|When IBM {{introduced}} System/370 Extended Architecture on the 3081, {{customers were}} faced {{with the need to}} run a production MVS/370 system while testing MVS/XA on the same machine. IBM's solution was VM/XA Migration Aid, which used the new Start <b>Interpretive</b> <b>Execution</b> (SIE) instruction to run the virtual machine. SIE automatically handled some privileged instructions and returned to CP for cases that it couldn't handle. The Processor Resource/System Manager (PR/SM) of the later 3090 also used SIE.There were several VM/XA products before it was eventually supplanted by VM/ESA and z/VM.|$|E
5000|$|Some stack machine {{instruction}} sets {{are intended for}} <b>interpretive</b> <b>execution</b> of a virtual machine, rather than driving hardware directly. Interpreters for virtual stack machines are easier to build than interpreters for register or memory-to-memory machines; the logic for handling memory address modes is in just one place rather than repeated in many instructions. Stack machines also tend to have fewer variations of an opcode; one generalized opcode will handle both frequent cases and obscure corner cases of memory references or function call setup. (But code density is often improved by adding short and long forms for the same operation.) ...|$|E
5000|$|VM/370 was {{followed}} by a series of upgrades: VM/SEPP ("Systems Extensions Program Product"), VM/BSEPP ("Basic Systems Extensions Program Product"), VM/SP (System Product), VM/SP HPO ("High Performance Option"), VM/XA MA ("Extended Architecture Migration Aid"), VM/XA SF ("Extended Architecture System Facility"), VM/XA SP ("Extended Architecture System Product"), VM/ESA ("Enterprise Systems Architecture"), and z/VM. IBM also produced optional microcode assists for VM and successors, to speed up the hypervisor's emulation of privileged instructions (those which only operating systems can use) on behalf of [...] "guest" [...] operating systems. As part of 370/Extended Architecture, IBM added the Start <b>Interpretive</b> <b>Execution</b> (SIE) instruction to allow a further speedup of the CP hypervisor.|$|E
50|$|IBM {{developed}} {{the concept of}} hypervisors (virtual machines in CP-40 and CP-67) and in 1972 provided it for the S/370 as Virtual Machine Facility/370. IBM introduced the Start <b>Interpretive</b> <b>Execution</b> (SIE) instruction (designed specifically for the execution of virtual machines) as part of 370-XA architecture on the 3081, as well as VM/XA versions of VM to exploit it. PR/SM is a type-1 Hypervisor based on the CP component of VM/XA that runs directly on the machine level and allocates system resources across LPARs to share physical resources. It is a standard feature on IBM System z only. An IBM POWER system uses PHYP (the POWER Hypervisor) to enable its LPAR functionalities for System p and System i since approximately 2000 in POWER4 systems.|$|E
40|$|In {{concurrent}} object-oriented languages, customizable meta-objects {{are powerful}} abstraction for extending and optimizing crucial implementation mechanisms such as method dispatch and mutual exclusion. However, <b>interpretive</b> <b>execution</b> of meta-objects causes severe performance penalty. Our previous {{study shows that}} applying partial evaluation to meta-interpreters is useful for alleviating the problem, but partial evaluation of existing meta-objects virtually fails, because they are concurrent objects and designed as state-transition machines. This paper proposes a new meta-object design for our reflective language ABCL/R 3, which can be effectively optimized using partial evaulation. The crux of the meta-object design is separation of state-related operations, which is realized by using the reader/writer methods in our concurrent object-oriented language Schematic. Our benchmarks showed that a non-trivial program with partially evaluated meta-objects runs (1) 6. 8 times faster th [...] ...|$|E
40|$|Customizable meta-objects are a {{powerful}} abstraction for extending language features and implementation mechanisms, but <b>interpretive</b> <b>execution</b> suffers from severe performance penalty. Some of this penalty {{can be reduced}} by applying partial evaluation to meta- interpreters, but partial evaluation of meta-objects in existing concurrent object-oriented languages is ineffective. This paper proposes a new meta-object design for our reflective language ABCL/R 3. It yields metaobjects that can be optimized effectively using partial evaluation. The crux of the design is the separation of state-related operations from other operations, and this separation is accomplished by using reader/writer methods in our concurrent object-oriented language called Schematic. Our benchmark trials show that non-trivial programs with partially evaluated meta-objects run more than six times faster than ones that are interpreted by meta-objects. In addition, a partially evaluated program that uses a customized [...] ...|$|E
40|$|Parallel and {{distributed}} programs often have hardware/problem specific optimizations for improving {{quality of the}} program such as efficiency and robustness. Those optimizations, unfortunately, degrade portability and re-usability as they are intertwined with the original algorithm description. Reflective languages, which provide the application programmer extensible and abstract implementation of the language, can describe such optimizations as extensions to the language. The separation of optimization descriptions gains portability and re-usability of both application programs and optimizations. However, the <b>interpretive</b> <b>execution</b> model of reflective languages imposes {{a large amount of}} performance overhead, which sometimes outweighs benefits of optimizations. Previous reflective languages prohibit some of operations being modified via reflection, so as {{to reduce the amount of}} interpretation overhead. The imperfection of this approach is that it still leaves a considerable amount of overhead, and it yields less flexible, unclear re ective architecture. This dissertation investigates design and compilation framework of meta-interpreters and meta-objects in an object-oriented concurrent language ABCL/R 3. By usin...|$|E
40|$|This paper {{presents}} x 86 Sim, an <b>interpretive</b> <b>execution</b> engine {{designed to}} functionally model the Intel x 86 Architecture. First, {{some of the}} details of the x 86 Architecture are outlined along with their respective implementations in x 86 Sim. This includes the instruction format, instruction set and virtual memory. This is followed by a description of x 86 Sim's simulated operating system. Next, the operation of x 86 Sim as a stand alone execution engine is presented followed by the interface specification used when it is compiled with the x 86 MW simulation tool[4]. When used in conjunction with x 86 MW, x 86 Sim provides a solid launching point for x 86 microarchitecture research. 1. 0 Introduction Over the past two decades, the Intel x 86 Architecture has established itself as the dominant PC platform. Due to backwards compatibility going as far back as 1978, 8086 object code, today an unparalleled code base exists[1]. Despite this, academic research has predominantly focused around tools desi [...] ...|$|E
40|$|This {{specification}} identifies {{and describes}} the principal functions and {{elements of the}} Interpretive Code Translator which has been developed for use with the GOAL Compiler. This translator enables the user to convert a compliled GOAL program to a highly general binary format {{which is designed to}} enable <b>interpretive</b> <b>execution.</b> The translator program provides user controls which are designed to enable the selection of various output types and formats. These controls provide a means for accommodating many of the implementation options which are discussed in the Interpretive Code Guideline document. The technical design approach is given. The relationship between the translator and the GOAL compiler is explained and the principal functions performed by the Translator are described. Specific constraints regarding the use of the Translator are discussed. The control options are described. These options enable the user to select outputs to be generated by the translator and to control vrious aspects of the translation processing...|$|E
40|$|ABSTRACT! Music Performance Anxiety (MPA) is a {{widespread}} epidemic {{in the world of}} instrumental and vocal performance. While traditional music education provides a solid training in terms of technical and <b>interpretive</b> <b>execution,</b> attention is rarely given to managing the very symptoms that may challenge oneâ€™s ability to perform at an optimum level. As both collegiate study in music performance and the process of acquiring employment as a performer often require the presentation of skill in an evaluative setting, it is imperative that more light be shed on the management of Music Performance Anxiety. Equipping the next generation of musicians with the skills to handle fear, adrenaline, tension, and other threats to their concentration in demanding situations may not only improve the quality of the performing arts henceforward, but also their success and satisfaction onstage. ! This dissertation highlights findings from an extensive review of the current literature and research on the methods by which Music Performance Anxiety has been and is currently being treated among amateur musicians, conservatory students, and professional instrumentalists. Cognitive-Behavioral Therapies (e. g., Rational Emotiv...|$|E
40|$|Wireless sensor {{networks}} are shifting to application platforms that poses several challenges on reprogramming efficiency. To better support the efficient reprogramming, this paper proposes a systematic approach named ReLog {{which consists of}} a programming language, a compiler, and a virtual machine. To make application programs concise and easy to modify, the ReLog language extends from a traditional logical programming language and makes the extension part have the similar coding style. To {{reduce the size of}} data for reprogramming, the compiler first produces extremely compact executable code by compiling application programs into high-level representations. It also implements efficient incremental reprogramming to diminish differences between the current and new executable code. To mitigate the energy consumption incurred by <b>interpretive</b> <b>execution,</b> the virtual machine optimizes the executable code as well as the execution process to improve the runtime efficiency. We have implemented ReLog and evaluated it with respect to real reprogramming cases. Our experimental results show that it is easy to modify ReLog programs to satisfy new application requirements. Meanwhile, the compiler reduces the size of executable code by 61. 4 %- 83. 2 % compared to the existing work. In addition, the lifetime of sensors running the ReLog virtual machine is close (97. 04 %- 98. 31 %) to that running the native code...|$|E
40|$|Several highly {{versatile}} mobile robots {{have been}} introduced during the last ten years. Some of these robots are working among people in exhibitions and other public places, such as museums and shopping centers. Unlike industrial robots, which are typically found only in manufacturing environments, service robots {{can be found in}} a variety of places, ranging from homes to offices, and from hospitals to restaurants. Developing mobile robots working co-operatively with humans raises not only interaction problems but problems in getting tasks accomplished. In an unstructured and dynamic environment this is not readily achievable because of the high degree of complexity of perception and motion of the robots. Such tasks require high-level perception and locomotion systems, not to mention control systems for all levels of task control. The lowest levels are controlling the motors and sensors of the robots and the highest are sophisticated task planners for complex and useful tasks. Human-friendly communication can be seen as an important factor in getting robots into our homes. In this work a new task configuration concept is proposed for multipurpose service robots. The concept gives guidelines for a software architecture and task managing system. Task configuration process presents a new method which makes it easier to configure a new task for a robot. The idea is the same as when a person tells another how a task should be performed. Novel method for executing tasks with service robots is also presented. <b>Interpretive</b> <b>execution,</b> keeping the focus on only one micro task at a time, makes it possible to modify plans during their execution. Multimodal interaction is important feature to provide collaboration between humans and robots. Multimodal interaction reduces the workload of the user by administering task configuration and execution. A novel solution for using multimodal human-robot interaction (HRI) as a part of the task description is presented. This thesis is a case study reporting the results when developing a task managing (from configuring to execution) platform for multipurpose service robots and studying its performance and use with several test cases. The platform that was developed has been implemented with the WorkPartner multipurpose service robot. The structure and operation of the platform have proved to be useful and several tasks have been carried out successfully...|$|E

