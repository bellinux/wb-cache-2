80|35|Public
25|$|X's design {{requires}} the clients and server to operate separately, and <b>device</b> <b>independence</b> and {{the separation of}} client and server incur overhead. Most of the overhead comes from network round-trip delay time between client and server (latency) {{rather than from the}} protocol itself: the best solutions to performance issues depend on efficient application design. A common criticism of X is that its network features result in excessive complexity and decreased performance if only used locally.|$|E
50|$|The {{sheer number}} {{and variety of}} Web-enabled devices poses {{significant}} challenges for authors of Web sites who want to support access from mobile devices. The W3C <b>Device</b> <b>Independence</b> Working Group described {{many of the issues}} in its report Authoring Challenges for <b>Device</b> <b>Independence.</b>|$|E
5000|$|The {{improved}} security, reliability, and <b>device</b> <b>independence</b> {{possible from}} hypervisor architectures ...|$|E
25|$|The {{quality of}} life for {{patients}} with Becker muscular dystrophy can be impacted by the symptoms of the disorder. But with assistive <b>devices,</b> <b>independence</b> can be maintained. People affected by Becker muscular dystrophy can still maintain active lifestyles.|$|R
40|$|While the {{worldwide}} spread of smartphones continues, developing countries have become important markets for these <b>devices.</b> Smartphones' <b>independence</b> of landline networks qualifies them for communication and Internet access {{in rural areas}} of developing countries. Drawing upon rural Southeast Asian survey data, this paper provides probably the first empirical evidence for smartphones' contribution to households' income...|$|R
40|$|While Mark Weiser's {{vision of}} {{ubiquitous}} computing is {{getting closer to}} reality, a fundamental part of it- the interconnection of devices into a "ubiquitous network "-is not achieved yet. Differences in hardware, architecture, and missing standardizations are just some reasons for this. We think that existing research is not versatile enough and too tailored to either single applications, hardware, or location. We contribute Connichiwa – a versatile framework for creating web applications across multiple devices. We base Connichiwa on four key goals: integration of existing <b>devices,</b> <b>independence</b> of network infrastructure, versatility of application scenario, and usability of its API. Connichiwa runs web applications on off-the-shelf consumer devices. With no external dependencies, such as a server, it enables {{a great variety of}} possible scenarios. We tested the technical feasibility of Connichiwa in seven example applications and plan to evaluate the framework and the usability of its API in a one-week Hackathon. Author Keyword...|$|R
50|$|One key {{publication}} of the <b>Device</b> <b>Independence</b> Working Group is the Composite Capability/Preference Profiles recommendation.|$|E
5000|$|Tim Berners-Lee of the World Wide Web Consortium, {{claims that}} dotMobi breaks the <b>device</b> <b>independence</b> of the web: ...|$|E
50|$|The TOPS-10 {{scheduler}} supported prioritized run queues, and appended {{a process}} onto a queue depending on its priority. The system also included User file and <b>Device</b> <b>independence.</b>|$|E
25|$|Although human {{morphology}} is {{not necessarily}} the ideal form for working robots, the fascination in developing robots that can mimic it can be found historically in the assimilation of two concepts: simulacra (devices that exhibit likeness) and automata (<b>devices</b> that have <b>independence).</b>|$|R
5000|$|<b>Device</b> and {{location}} <b>independence</b> enable users to access systems using {{a web browser}} regardless of their location or what device they use (e.g., PC, mobile phone). As infrastructure is off-site (typically provided by a third-party) and accessed via the Internet, users can connect to it from anywhere.|$|R
40|$|Engineering collaborations {{received}} {{a new global}} dimension with the omnipotent access to Internet. Several approaches have been introduced to support communication between collaborating engineers but {{little attention has been}} paid to enhance remote access to distributed services from mobile devices. In this paper, we propose a framework for remote tool monitoring and control (RTMC), which can be extended by the user through the definition of application specific plug-ins. The main properties of our RTMC framework are extensibility, interconnection with mobile <b>devices,</b> and <b>independence</b> from any operating systems and devices. To achieve mobile monitoring and control, we applied JXTA, which supports direct communication between stationary PCs and Java enabled mobile phones. We also introduce a so-called user-tracking layer for user location dependent message relay. ...|$|R
50|$|<b>Device</b> <b>independence</b> is {{the process}} of making a {{software}} application be able to function {{on a wide variety of}} devices regardless of the local hardware on which the software is used.|$|E
50|$|She {{published}} on {{topics such as}} dyslexia and society, the semantic web, web accessibility, and <b>device</b> <b>independence.</b> She frequently gives presentations at conferences and venues such as W3C events, standards organizations, colleges, universities and NGOs.|$|E
50|$|GSInnovate became GLOVIA G2 OnDemand, an ERP system. FUJITSU GLOVIA’s latest ERP software, GLOVIA G2 v3, {{launched}} in 2014, enhanced capabilities for full cloud computing, <b>device</b> <b>independence,</b> full database support on SQL Server 2014 and Oracle Database 12c, with 75 ERP modules.|$|E
30|$|Implementation {{the filter}} between two fibers (Fig. 9) will induce more than 3  dB signal loss due to {{insertion}} loss. However, this configuration {{is only for}} simplification of the idea. For low loss applications the integration {{will have to be}} implemented in different ways. One way is to use collimators at the input and output of the fibers. Another way is shown in [8], in which they propose a compact all-fiber integrated modulator in which a free space cavity is replaced with a section of the fiber and constructed from a silicon core waveguide surrounded by a silica cladding and present a 1  dB insertion loss. They also discuss the <b>device</b> polarization <b>independence</b> {{as is the case in}} this paper. Therefore, there is no loss due to varying polarizations.|$|R
5000|$|Assistive eating {{devices are}} {{utensils}} people use {{when they have}} difficulty with feeding or drinking independently. These devices are typically used for people with disabilities, but {{have been used for}} children or people that have low dexterity. These <b>devices</b> can promote <b>independence</b> during meal times, but in many cases also help a caregiver during meals. [...] "Assistive eating devices can increase self-care…increase self-esteem associated with increased independence, increase safety during meals, and make meal-time better for staff…" ...|$|R
40|$|In this paper, we {{describe}} a non-adhoc approach to building an SNMP protocol object for the Protocol Independent Management Information Base (PIMIB). In [5], {{the design of}} a protocol independent MIB agent is proposed which can support both SNMPandCMIP. Then, in [9], we present the implementation of PIMIB, which provides not only management protocol independence (i. e., SNMP and CMIP) but also network <b>device</b> protocol <b>independence.</b> In practice, for SNMP management applications talking to the PIMIB, an SNMP protocol object with the knowledge of a MIB specification is needed to transform the SNMP requests into the PIMIB generic interface. In [7, 6], MOSY (Managed Object Syntax-compiler Yacc-based) is introduced as a tool to build an SNMP protocol object. However, in the normal building process of an SNMP subagent, a certain amount of knowledge about the implementation of network resources is still necessary for connecting the MIB with the real network environment. Thus, for a specific MIB de [...] ...|$|R
50|$|The domain {{has been}} the target of {{criticism}} due to allegedly breaking the principles of <b>device</b> <b>independence.</b> Providing content tailored to particular devices can be done by other means than a specific TLD, such as using hostnames within an existing domain, HTTP content negotiation, cascading style sheets, or other forms of adaptation.|$|E
50|$|The web {{accessible}} by any device under any circumstance {{and by all}} people. The World Wide Web Consortium (W3C) has initiated the <b>Device</b> <b>Independence</b> Working Group, which aims to unify the web, making it accessible from many types of Internet appliances. Its mission is to avoid the breaking up of the web into spaces which only subsets of devices can access.|$|E
5000|$|From {{the very}} beginning, the JCL for the OS family of {{operating}} systems offered {{a high degree}} of <b>device</b> <b>independence.</b> Even for new files which were to be kept {{after the end of the}} job one could specify the device type in generic terms, e.g., [...] or [...] Of course, if it mattered one could specify a model number or even a specific device address.|$|E
40|$|Nowadays {{computers}} {{have taken the}} dominant role in our society. Most jobs now require access to computers and the Internet. But what happens {{if a person is}} blind, deaf or physically disabled? The latest technologies are designed to help them use computers, do their jobs in the office, attend school and university or interact with their families at home. Technologies offers many different ways that can lead to normal life for those people. Computers helpthe disabled people get what they want more than anything else - <b>independence.</b> <b>Devices</b> that help them to perform any activity are called assistive technology...|$|R
50|$|Robin Francis Cavendish (12 March 1930 - 8 August 1994), was a British {{advocate}} for the disabled, medical aid developer, {{and one of the}} longest-lived responauts in Britain. Born in Middleton, Derbyshire, Cavendish was affected by polio at the age of 28. Despite being initially given only three months to live, Cavendish, paralysed from the neck down and able to breathe only {{with the use of a}} mechanical ventilator, became a tireless {{advocate for}} the disabled, instrumental in organising the first records of the number of responauts in Britain and helping to develop numerous <b>devices</b> to provide <b>independence</b> to the paralysed.|$|R
40|$|In {{the last}} decade a new {{paradigm}} in computer networks gained a lot of popularity, especially in the wireless network research community: mobile ad hoc networks. The main difference between this new and the existing conventional networking paradigm lies in {{the architecture of the}} network {{and the role of the}} different network components. In the conventional paradigm, a person with a computer connects to a pre-established network infrastructure, which consists of dedicated device to transport and deliver information among computers. In ad hoc networks, the pre-existing infrastructure is missing. Instead, the network is created on demand, with the help of each person and her/his computer. Thus, the computers of individuals take the role of the networking <b>devices.</b> The <b>independence</b> from any pre-installed network infrastructure allows these networks to be ad hoc deployable and to operate at low costs. However, the ad hoc communication paradigm also raises many questions, on if which is how to ensure the participation of the individual persons in the network. If the network participants do not cooperate b...|$|R
50|$|X's design {{requires}} the clients and server to operate separately, and <b>device</b> <b>independence</b> and {{the separation of}} client and server incur overhead. Most of the overhead comes from network round-trip delay time between client and server (latency) {{rather than from the}} protocol itself: the best solutions to performance issues depend on efficient application design. A common criticism of X is that its network features result in excessive complexity and decreased performance if only used locally.|$|E
50|$|This {{issue was}} known by cross {{browsing}} in browser war between Internet Explorer and Netscape. Windows Internet Explorer was the dominant browser after that, but modern web browsers such as Mozilla Firefox, Opera and Safari have supported web standards. Because of backward compatibility of Internet Explorer, many web pages have supported non-standard HTML tags and DOM handling script yet as well platform-dependent {{techniques such as}} ActiveX. These are very harmful for Web accessibility and <b>device</b> <b>independence.</b>|$|E
50|$|HDOS 2.0 {{is notable}} {{because it was}} one of the first {{microcomputer}} operating systems to use loadable device drivers to achieve a degree of <b>device</b> <b>independence</b> and extensibility. Device names followed the RSX-11-style convention of DKn: where the first two letters were the device driver file name and n was a number (DK0:, DK1:, and so on would all be handled by DK.SYS). Other similarities to RSX included the use of PIP for file transfer, and the use of EOT for file termination.|$|E
40|$|User Interface Management System (UIMS) called MIKE {{that does}} not use the {{syntactic}} specifications found in most UIMSs is described. Instead, MIKE provides a default syntax that is automatically generated from {{the definition of the}} semantic commands that the interaction is to support. The default syntax is refined using an interface editor that allows modification of the representation of the interface. It is shown how active pictures can be created by adding action expressions to the viewports of MIKE's windowing system. The implications of MIKE's command based dialogue description are discussed in terms of extensible interfaces, <b>device</b> and dialogue-style <b>independence,</b> and system support function...|$|R
40|$|The {{advances}} in mobile telecommunication networks {{as well as}} in mobile device technology have stimulated the development {{of a wide range of}} mobile applications. While it is sensible to install at least some components of applications on mobile <b>devices</b> to gain <b>independence</b> of rather unreliable mobile network connections, it is difficult to decide about the suitable application components and the amount of data to be provided. Because the environment of a mobile device can change and mobile business processes evolve over time, the mobile system should adapt to these changes dynamically to ensure productivity. In this paper, we present a mobile middleware that targets typical problems of mobile applications and dynamically adapts to context changes at runtime by utilizing reconfiguration triggers. ...|$|R
40|$|Abstract—Flash-based {{devices are}} {{cost-competitive}} to traditional hard disks in {{both personal and}} industrial environments and offer the potential for large performance gains. However, as flash-based devices have a high bit-error rate and a relatively short lifetime, reliability issues remain a major problem. One possible solution is redundancy; using techniques such as mirroring, data reliability and availability can be greatly enhanced. All standard RAID approaches assume that devices do not wear out, and hence distribute work equally among them; unfortunately, for flash, this approach is not appropriate as the life of flash cell depends {{on the number of}} times it is written and cleaned. Hence, identical write patterns to mirrored flash drives introduce a failure dependency in the storage system, increasing the probability of concurrent device failure and hence data loss. We propose Warped Mirrors as a solution to this endurance problem for mirrored flash devices. By carefully inducing a slight imbalance into write traffic across devices, we intentionally increase the workload of one device in the mirror pair, and thus increase the odds that it will fail first. Thus, with our approach, <b>device</b> failure <b>independence</b> is preserved. Our simulation results show that across both synthetic and traced workloads, little performance overhead is induced. I...|$|R
5000|$|The Common Lisp Interface Manager (CLIM) is a Common Lisp-based {{programming}} interface {{for creating}} user interfaces [...] - [...] i.e., GUIs. It {{is a completely}} object-oriented User Interface Management System, using the Common Lisp Object System {{and is based on}} the idea of stream input and output. There are also facilities for output <b>device</b> <b>independence.</b> It is descended from the GUI system Dynamic Windows of Symbolics's Lisp machines Main development was between 1988 and 1993. CLIM 2.0 was released in 1993.|$|E
5000|$|Open XML Paper Specification (also {{referred}} to as OpenXPS) is an open specification for a page description language and a fixed-document format. Microsoft developed it as the XML Paper Specification (XPS). In June 2009, Ecma International adopted it as international standard ECMA-388. [...] It is an XML-based (more precisely XAML-based) specification, based on a new print path (print processing data representation and data flow) and a color-managed vector-based document format that supports <b>device</b> <b>independence</b> and resolution independence. In Windows 8 [...] was replaced with the ECMA standard [...] format which is not natively supported in older Windows versions.|$|E
50|$|In the Unix {{operating}} system, most {{types of}} {{input and output}} operations {{are considered to be}} streams of bytes read from a device or written to a device. This stream of bytes model is used for file I/O, socket I/O, and terminal I/O in order to provide <b>device</b> <b>independence.</b> In order to read and write to a device at the application level, the program calls a function to open the device which may be a real device such as a terminal or a virtual device such as a network port or a file in a file system. The device's physical characteristics are mediated by the operating system which in turn presents an abstract interface that allows the programmer to read and write bytes from/to the device. The operating system then performs the actual transformation needed to read and write the stream of bytes to the device.|$|E
40|$|The {{implementation}} of user interfaces of small mobile devices is particularly difficult. Contrary to the desktop-systems mobile devices differ {{much in the}} reference to representation and interaction with the user interface. The adaptation of the user interfaces to the characteristics of mobile devices is necessary to improve {{the usability of an}} application for mobile devices. In order to use specified user interfaces on all mobile <b>devices,</b> platform <b>independence</b> is necessary. In this work the characteristics of mobile devices are examined. The possibilities of adaptation of the user interface at mobiles devices are examined {{on the basis of these}} characteristics and refined according to the characteristics. Next in this work user some interface definition languages are analysed regarding platform independence and the adaptation to mobile devices. According to this analysis an own user interface definition language is developed, which allow the adaptation of the user interface to the characteristics of mobile devices and which is platform independent. In order not to commit itself rigidly to interface definition language, some different ways to adapt a user interface to mobile devices are examined. This results take part of the development of own user interface definition language. The conclusion in this work forms a prototype {{implementation of}} the developed user interface definition language...|$|R
30|$|Mere {{analysis}} of the caching strategies for contextual data provisioning is insufficient {{in the absence of}} a platform where their benefits can be fully utilized. The evolving technological landscape, characterized by increasing technological capabilities of smart devices and their adoption by everyday users, the greater availability of digital information services and the emergence of smart environments with embedded digital artifacts point towards an emerging digital ecosystem where a significantly large number of users in inter-connected smart environments will be utilizing context-based services through different computational interfaces. The success of context-aware systems will depend on accommodating these emerging scenarios and meeting their wide-spectrum requirements will greatly influence their adoption. Specifically, these requirements include <b>device</b> and location <b>independence</b> during utilization of contextual services, reliability of the system infrastructure, scalability in terms of load, administration and geographic scale, and the performance of the overall system in terms of query-response times and quality of service. A cloud based context provisioning system will 1) allow access to context information through standardised and interoperable interfaces, which will facilitate <b>device</b> and location <b>independence,</b> and 2) provide reliability and scalability through elastic and redundant resources. However, simply enabling Cloud based provisioning will not utilize the temporal validity characteristic of the context data, which can exploit the principle of locality to improve query-response times and therefore positively influence the quality of service of the context-aware system as a whole. Keeping these expectations in view, this paper relates the delivery of the caching functionality through a Cloud based context provisioning system, but focuses primarily on establishing the suitability and relative effectiveness of different caching strategies for different types of contextual data. Once such effectiveness is established through experimental analysis, we analyse the performance of the caching strategies in a prototype Cloud-based context provisioning system.|$|R
40|$|Abstract. The {{increasing}} need {{to access}} information everywhere and {{at any time}} leads {{us to believe that}} future user interfaces, through which users interact with pervasive computing systems, must enable both <b>device</b> and modality <b>independence.</b> The pervasive computing paradigm sees almost every object in the everyday environment as a system able to communicate with users and other systems in their own languages. The interaction between users and systems is therefore typically multimodal. In this paper, features and computational issues of the multimodal interaction are analyzed in order to examine methodological aspects for the definition of multimodal interaction languages and usable multimodal interfaces for pervasive applications. Its main objective is thus to explore multimodal interaction for pervasive applications through use of a multimodal language rather than through the integration of several unimodal languages...|$|R
