37|268|Public
5|$|When {{referring}} to the language, the name is normally capitalized (Perl) as a proper noun. When {{referring to}} the <b>interpreter</b> <b>program</b> itself, the name is often uncapitalized (perl) because most Unix-like file systems are case-sensitive. Before {{the release of the}} first edition of Programming Perl, it was common to refer to the language as perl; Randal L. Schwartz, however, capitalized the language's name in the book to make it stand out better when typeset. This case distinction was subsequently documented as canonical.|$|E
50|$|In 2000 he {{suggests}} implementing an emulation-based preservation approach in which emulator specification are expressed as programs and interpreted by an emulator specification <b>interpreter</b> <b>program</b> written for an emulation virtual machine.|$|E
50|$|The <b>interpreter</b> <b>program</b> can {{optionally}} {{save the}} program counter (and other relevant details depending upon instruction type) {{at each stage}} to record a full or partial trace of the actual program flow for debugging purposes, hot spot detection, code coverage analysis and performance analysis (see examples CT3 & CT4 above).|$|E
50|$|It has {{close links}} with {{other areas of}} {{computer}} science such as programming language design, type theory, compilers and <b>interpreters,</b> <b>program</b> verification and model checking.|$|R
50|$|The wide {{adoption}} of Unicode, and UTF-8 on the web, resolved {{most of these}} historical limitations. ASCII remains the de facto standard for command <b>interpreters,</b> <b>programming</b> languages and text-based communication protocols.|$|R
50|$|State Court <b>Interpreter</b> Grant <b>Program</b> Act - Provides {{state courts}} grants to assist {{individuals}} with limited English proficiency to access and understand court proceedings, and allocates {{funds for a}} related court <b>interpreter</b> technical assistance <b>program.</b>|$|R
50|$|The {{following}} table gives {{a partial}} list of the commands of the virtual machine in which the first Tiny BASIC interpreter was written. The length of the whole <b>interpreter</b> <b>program</b> was only 120 virtual machine operations. Thus {{the choice of a}} virtual machine approach economized on memory space and implementation effort, although the BASIC programs run thereon were executed somewhat slowly.|$|E
50|$|BASIC-E {{and early}} {{versions}} of CBASIC compiled source code into an intermediate p-code file, {{which was then}} executed by a separate run-time <b>interpreter</b> <b>program.</b> CBASIC could execute in a minimum of 24 KB of memory. Line numbers in the program source were optional, unless needed as a label for a program jump. CBASIC proved very popular because it incorporated 14-digit binary-coded decimal (BCD) math which eliminated MBASIC's rounding errors that were sometimes troublesome for accounting.|$|E
5000|$|Daniel Meyer and Gary Kay of Southwest Technical Products {{arranged}} for Robert Uiterwyk to provide his 4K BASIC <b>interpreter</b> <b>program</b> for the 6800 microprocessor. The {{idea was to}} record the program on audio tape in the [...] "Kansas City" [...] standard format and then make a master record from the tape. Eva-Tone made Soundsheets on thin vinyl that would hold one song. These were inexpensive and could be bound in a magazine.|$|E
50|$|The TV-Computer (or TVC in short) is an 8-bit home {{computer}} which was mmanufactured by the Hungarian company Videoton around 1986. The computer {{was based on}} the Enterprise (computer) and had a built-in BASIC <b>interpreter.</b> <b>Programs</b> could be loaded via tape or floppy. It had a built-in joystick and a keyboard with Hungarian letters and nine function keys.|$|R
50|$|The park {{includes}} {{approximately two}} miles of nature trails, which are admission-free. The trails {{are part of}} the Bowling Green-Warren County Greenways program. Other activities include a seasonal butterfly habitat, gem mining, geocaching, bird watching, and bird bingo. Binoculars can be checked out in the visitor's center. The park includes a Young <b>Interpreters</b> <b>program,</b> an outdoor classroom, and children's activities.|$|R
50|$|Fant led the Seattle Central Community College <b>Interpreter</b> Training <b>Program</b> from 1989 to 2000, {{until his}} retirement.|$|R
50|$|McCarthy {{had planned}} to develop an {{automatic}} Lisp compiler using M-expressions as the language syntax and S-expressions to describe the compiler's internal processes. Stephen B. Russell read the paper and suggested to him that S-expressions were a more convenient syntax. Although McCarthy disapproved of the idea, Russell and colleague Daniel J. Edwards hand-coded an <b>interpreter</b> <b>program</b> that could execute S-expressions. This program was adopted by McCarthy's research group, establishing S-expressions as the dominant form of Lisp.|$|E
50|$|The Azure Mountain Friends {{conduct a}} yearly Summit <b>Interpreter</b> <b>program,</b> {{scheduling}} volunteers {{on the summit}} most weekends between Memorial and Columbus days, {{as well as a}} High School/College Scholarship program. Local students, high school and college, are encouraged to apply. One or more recipients receive scholarships each year in the amount of $500 and in return volunteer on the summit as an interpreter for five days. The Azure Mountain Friends have an Adopt-a-Natural-Resource agreement with the New York State Department of Environmental Conservation.|$|E
50|$|When {{referring}} to the language, the name is normally capitalized (Perl) as a proper noun. When {{referring to}} the <b>interpreter</b> <b>program</b> itself, the name is often uncapitalized (perl) because most Unix-like file systems are case-sensitive. Before {{the release of the}} first edition of Programming Perl, it was common to refer to the language as perl; Randal L. Schwartz, however, capitalized the language's name in the book to make it stand out better when typeset. This case distinction was subsequently documented as canonical.|$|E
5000|$|The {{existence}} of the Glk API has made possible the creation of [...] "universal translator" [...] IF <b>interpreters,</b> <b>programs</b> such as Gargoyle and Spatterlight which can run all popular IF formats {{and almost all of}} the more obscure ones. Such programs are very useful for newcomers to the medium who are unsure of which interpreter to choose, and to experienced players who may possess games in a variety of formats.|$|R
40|$|The {{goal of the}} {{proposed}} work is to explore possibilities of enriching command line <b>interpreter</b> <b>programming</b> by an object oriented approach. Author studies options of harmonizing concepts of the OOP and the batch processing and designs appropriate compromise between these two concepts. The main goal {{of the work is}} to create an implementation of the chosen design in the Unix and Microsoft Windows operating system families. This work describes decisions during the implementation and also include user manual of the resulting application...|$|R
50|$|In the 2013-14 {{academic}} year, MacMurray {{offered a}} 26-major, 16-minor liberal arts curriculum with both associate and bachelor's degrees. The school reinforces {{the liberal arts}} {{with an emphasis on}} professional preparation through academic majors that are career-focused. Some of the college's top majors include nursing, criminal justice, homeland security, deaf and hard-of-hearing education and American Sign Language interpreting, teacher preparation and social work. MacMurray’s deaf education and <b>interpreter</b> <b>programs</b> benefit from the College’s proximity to the Illinois School for the Deaf, also located in Jacksonville.|$|R
5000|$|The {{computer}} was {{sold as a}} [...] "short form" [...] kit for A$289.50. For this, the purchaser received the computer PCB, an assembly manual (a copy of the construction articles from Electronics Australia) and basic components, including 16kB of RAM and a 2kB EPROM containing a machine code monitor program. The technical manual and power transformer were sold separately, as were a kit of I.C. sockets, a BASIC <b>interpreter</b> <b>program</b> and from mid-1982 onwards, a metal case to house the computer.|$|E
50|$|In {{the days}} when games were {{distributed}} only on disk, {{there was no problem}} in associating a game with its resources: the resources were simply shipped on the same disk. Since all Z-machine games were produced by Infocom, there was also no chance that resources would be shipped in a format which a user's <b>interpreter</b> <b>program</b> could not handle. Blorb is needed because neither of these assumptions hold true in modern times: games are typically downloaded as single files, and a user may be using any {{of a large number of}} interpreters.|$|E
50|$|Under Unix-like {{operating}} systems, when {{a script}} with a shebang is {{run as a}} program, the program loader parses {{the rest of the}} script's initial line as an interpreter directive; the specified <b>interpreter</b> <b>program</b> is run instead, passing to it as an argument the path that was initially used when attempting to run the script. For example, if a script is named with the path path/to/script, and it starts with the following line: #!/bin/shthen the program loader is instructed to run the program /bin/sh instead, passing path/to/script as the first argument.|$|E
50|$|Most interpreters {{have been}} {{formally}} trained in an <b>Interpreter</b> Training <b>Program</b> (ITP). ITP lengths vary, {{and are usually}} two or four years to obtain a degree or certificate. Graduate programs are also available.|$|R
40|$|Executing {{computer}} programs means interpreting the instructions coded in a programming language. Most implementations of high-level languages, such as DFKI Oz, use an intermediate step of compilation: The source code is compiled to a machine code {{which is then}} interpreted by the hardware or a more abstract machine. We show the advantages and problems that occur when one tries to directly interprete Oz source code. We present an implementation of a meta-circular Oz interpreter, i. e. an interpreter for Oz written in Oz and demonstrate its application to source-level profiling, execution visualization and language design. Keywords [...] - Oz, <b>interpreter,</b> <b>programming</b> environments, profiling 1. Introduction <b>Interpreters</b> are computer <b>programs</b> that execute a suitable representation of a source <b>program.</b> Examples of <b>interpreters</b> are (1) every computer itself since it executes source programs in form of binary code, and (2) a BASIC interpreter that executes a given BASIC program line-by-line. Meta [...] ...|$|R
5000|$|It is {{not clear}} what the sign {{language}} or languages are in Rwanda. In 2006, a dictionary project was started to standardize Rwandan Sign Language (Amarenga y'Ikinyarwanda AKR [...] "Kinyarwanda Sign Language", also Amarenga yo mu Rwanda AMR [...] "Sign Language of Rwanda"), published in 2009. It was an incomplete effort, and an expanded dictionary, based on signs common throughout the country, was started in 2013. The latter project description implies that these are dialects of a single language, but that is uncertain. <b>Interpreter</b> <b>programs</b> are available in Uganda; it is unknown whether this means that Rwandan Sign Language is related to Ugandan Sign Language.|$|R
50|$|Tidbinbilla Nature Reserve, part of Parks Conservation and Lands (PCL) {{within the}} Department of Territory and Municipal Services (ACT Government), and Conservation Volunteers {{have formed a}} highly {{innovative}} and mutually beneficial partnership to deliver visitor management and interpretation services using professionally trained and managed volunteers. The five-year partnership was established in 2007 and Conservation Volunteers now employ full-time staff based at Tidbinbilla Nature Reserve to manage the volunteer <b>interpreter</b> <b>program</b> and the visitor centre on behalf of PCL. Volunteers complete a formal training program facilitated by environmental and interpretation experts, plus ongoing professional development. The ACT National Parks Association was critical of the handover to a volunteer organisation, accusing the state government or neglecting its responsibilities.|$|E
5000|$|MBASIC is an <b>interpreter.</b> <b>Program</b> {{source text}} was stored in memory in {{tokenized}} form, with BASIC keywords replaced by one-byte tokens which saved memory space and speeded execution. Any line prefixed {{with a line}} number was stored as program text; BASIC statements not prefixed with a line number were executed immediately as commands. Programs could be listed on the screen for editing, or saved to disk in either a compressed binary format or as plain ASCII text. Every source line was identified with a number, {{which could be used}} as the target of a GOTO or GOSUB transfer. Only line editing commands were provided. It was often beneficial to save a program as plain text and edit it with a full featured editor.|$|E
50|$|A {{command-line}} interface (CLI) is {{an operating}} system shell that uses alphanumeric characters typed on a keyboard to provide instructions and {{data to the}} operating system, interactively. For example, a teletypewriter can send codes representing keystrokes to a command <b>interpreter</b> <b>program</b> running on the computer; the command interpreter parses the sequence of keystrokes and responds with an error message if it cannot recognize the sequence of characters, or it may carry out some other program action such as loading an application program, listing files, logging in a user and many others. Operating systems such as UNIX have a large variety of shell programs with different commands, syntax and capabilities. Some operating systems had only a single style of command interface; commodity operating systems such as MS-DOS came with a standard command interface but third-party interfaces were also often available, providing additional features or functions such as menuing or remote program execution.|$|E
5000|$|... the {{invocation}} of an <b>interpreter</b> together with <b>program</b> {{source for the}} interpreter to run; ...|$|R
5000|$|Logo toolbar and <b>interpreter</b> was <b>programmed</b> by László Németh, {{and help}} with {{integration}} was provided by András Tímár. [...] It was released as an extension to LibreOffice before code was merged into LibreOffice 4.2.3.3 main code in 2014.|$|R
5000|$|... <b>interpreter</b> is a <b>program</b> {{that is to}} be {{run with}} the {{matching}} file as an argument.|$|R
5000|$|The [...] "Z" [...] of Z-machine {{stands for}} Zork, Infocom's first {{adventure}} game. Z-code files usually have names ending in [...]z1, [...]z2, [...]z3, [...]z4, [...]z5, [...]z6, [...]z7 or [...]z8, where {{the number is}} the version number of the Z-machine on which the file {{is intended to be}} run, as given by the first byte of the story file. Version# and specification. This is a modern convention, however. Infocom itself used extensions of [...]dat (Data) and [...]zip (ZIP = Z-machine <b>Interpreter</b> <b>Program),</b> but the latter clashes with the present widespread use of [...]zip for PKZIP-compatible archive files starting in the 1990s, after Activision had shut down Infocom. Infocom produced six versions of the Z-machine. Files using versions 1 and 2 are very rare. Only two version 1 files are known to have been released by Infocom, and only two of version 2. Version 3 covers the vast majority of Infocom's released games. The later versions had more capabilities, culminating in some graphic support in version 6.|$|E
5000|$|SCUMM was {{developed}} to be a tool that converted human-readable commands into byte-sized tokens that then would be read by an executable <b>interpreter</b> <b>program</b> that presented the game to the player. For example, the SCUMM command [...] would be tokenized to a 4-byte command. They {{did not want to}} have specific details about a game hard-coded into the script, so the tokenizer would be able to recognize actors by their name from the script instead of by internal numbers. The only exception was to display a character's dialog in a different text color for Maniac Mansion in which they had to include the number, but this was subsequently revised by the time Zak McKracken was released. The scripts included the ability to multitask, such as having background actors enact behavior while waiting for foreground actions to complete. The combined tools enabled for rapid prototyping of a game. Scripters could work with preliminary character and background art drawn by the artists to hone their scripts while providing feedback to the artists.|$|E
5000|$|UCSD p-System {{achieved}} machine independence {{by defining}} a virtual machine, called the p-Machine (or pseudo-machine, which many users {{began to call}} the [...] "Pascal-machine" [...] like the OS - although UCSD documentation always used [...] "pseudo-machine") with its own instruction set called p-code (or pseudo-code). Urs Ammann, a student of Niklaus Wirth, originally presented a p-code in his PhD thesis, from which the UCSD implementation was derived, the Zurich Pascal-P implementation. The UCSD implementation changed the Zurich implementation to be [...] "byte oriented". The UCSD p-code was optimized for execution of the Pascal programming language. Each hardware platform then only needed a p-code <b>interpreter</b> <b>program</b> written for it to port the entire p-System and all the tools to run on it. Later versions also included additional languages that compiled to the p-code base. For example, Apple Computer offered a Fortran Compiler (written by Silicon Valley Software, Sunnyvale California) producing p-code that ran on the Apple version of the p-system. Later, TeleSoft (also located in San Diego) offered an early Ada development environment that used p-code and was therefore able to run {{on a number of}} hardware platforms including the Motorola 68000, the System/370, and the Pascal MicroEngine.|$|E
5000|$|Third-party {{developers}} created improved shells {{because the}} console-handler standard command line device driver (or [...] "handler" [...] in Amiga technical language) {{is independent of}} the command-line <b>interpreter.</b> This <b>program</b> controlled text-based interfaces into Amiga. Console-handler replacements include KingCON, ViNCEd, and Conman.|$|R
50|$|The game {{received}} mixed reviews, it was {{commended for}} having entertaining, humorous and descriptive narratives but also criticized for its short length {{and use of}} a menu system in dialogue. Earth and Sky made its competition debut in 2001 finishing eighth at the 7th annual Interactive Fiction Competition making it the least successful game of the series. The game is entirely text based and players type commands {{to move through the}} story. The story file can be downloaded for free online and though O'Brian recommended using Frotz, Earth and Sky is compatible with several <b>interpreter</b> <b>programs</b> which are available as freeware. The game is also available for online play through O'Brian's web page.|$|R
40|$|This chapter {{presents}} {{data from}} two related studies concerning signed language interpreter education in Australia. In the first study, 110 signed language interpreters were surveyed on {{their perceptions of}} the efficacy of <b>interpreter</b> education <b>programs</b> in Australia in preparing graduates for work as an interpreter. The second study was designed by drawing on the qualitative survey findings of the first study, coupled with previously published results from the survey (Bontempo & Napier 2007), which identified the skills gaps of interpreters {{that need to be addressed}} in <b>interpreter</b> education <b>programs.</b> To this end, a program admission test was designed to include six elements considered potentially predictive of performance, and was piloted with a cohort of applicants to a signed language <b>interpreter</b> education <b>program</b> in Australia. Eleven out of 18 screened students were accepted into the program. The exit outcomes showed however that only 55 % of the students successfully completed the program; thus the screening test results were not predictive of student performance. We present discussion of the relationship between admission testing and achievement in signed language interpreter education, and make recommendations for researchers and interpreter educators. 49 page(s...|$|R
