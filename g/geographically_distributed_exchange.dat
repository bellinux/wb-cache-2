0|3424|Public
40|$|Distributed {{processing}} {{implies that}} many separate {{components of a}} distributed application execute on different end-systems which are interconnected by a network. Distributed applications have gained a significant importance as low-priced personal computers, workstations and servers became available, and {{with the emergence of}} TCP/IP technology, which provides a ubiquitous means for the exchange of information between autonomous computers. This new technology enables <b>geographically</b> <b>distributed</b> companies to <b>exchange</b> information fast and efficiently, and therefore answers their needs to cooperate tightly. Fast access to data, resource sharing, load balancing, availability, and fault tolerance are the primary reasons for using distributed approaches. Generally, a request-response type of communication is established between two processes in a distributed system. The requesting side is called the client and the responding one is called server. Client/server applications and appropriate communication paradigms are related closely. Due to heterogeneous hardware and software of clients and servers, a direct (bit-by-bit) exchange of information between participants is often not possible. However, transparently hiding away these differences from applications themselves is feasible by providing appropriate high-level interfaces and interoperabl...|$|R
40|$|Abstract—With {{more data}} {{generated}} and {{collected in a}} <b>geographically</b> <b>distributed</b> manner, combined by the increased computational requirements for large scale data-intensive analysis, we have witnessed the growing demand for <b>geographically</b> <b>distributed</b> Cloud datacenters and hybrid Cloud service provisioning, enabling organizations to support instantaneous demand of additional computational resources and to expand in-house resources to maintain peak service demands by utilizing cloud resources. A key challenge for running applications in such a <b>geographically</b> <b>distributed</b> computing environment is how to efficiently schedule and perform analysis over data that is <b>geographically</b> <b>distributed</b> across multiple datacenters. In this paper, we first compare multi-datacenter Hadoop deployment with single-datacenter Hadoop deployment to identify the performance issues inherent in a <b>geographically</b> <b>distributed</b> cloud. A generalization of the problem characterization {{in the context of}} <b>geographically</b> <b>distributed</b> cloud datacenters is also provided with discussions on general optimization strategies. Then we describe the design and implementation of a suite of system-level optimizations for improving performance of Hadoop service provisioning in a geo-distributed cloud, including prediction-based job localization, configurable HDFS data placement, and data pre-fetching. Our experimental evaluation shows that our prediction based localization has very low error ratio, smaller than 5 %, and our optimization can improve the execution time of Reduce phase by 48. 6 %...|$|R
5000|$|... 11) Closed-loop Statistical Multiplexing of <b>Geographically</b> <b>Distributed</b> Encoders ...|$|R
2500|$|A data {{dissemination}} network between all <b>geographically</b> <b>distributed</b> locations ...|$|R
50|$|Distributed: {{full support}} for multi-master {{replication}} including <b>geographically</b> <b>distributed</b> clusters.|$|R
50|$|<b>Geographically</b> <b>distributed</b> objects: {{emergency}} services, municipalities, public transport, security services, etc.|$|R
40|$|Historically, {{builders}} of CSCW tools have {{not focused on}} the creation of trust among users as a critical design goal. Yet, high levels of trust produce a number of benefits, including reduced coordination and communication costs. These benefits are particularly salient and desirable for <b>geographically</b> <b>distributed</b> workers. Therefore, to the extent that support for <b>geographically</b> <b>distributed</b> work is a key CSCW goal, CSCW tools should include features that enhance trust. This paper draws on the experience of a <b>geographically</b> <b>distributed</b> organization to identify aspects of long distance relationships associated with increased trust. Survey data collected within the organization showed that non-work interaction was positively correlated with trust to the same degree as more predictable factors, such as personal familiarity with distant sites and level of overarching shared group identity. In addition, interactive communication media had an unexpectedly positive relationship to non-work interaction, compared to less interactive media, which were negatively related. We conclude with a discussion of how CSCW tools can use these findings to improve production and maintenance of trust in <b>geographically</b> <b>distributed</b> organizations. Keywords <b>Geographically</b> <b>distributed</b> work; trust; design of CSCW application...|$|R
50|$|The Intute {{service was}} <b>geographically</b> <b>distributed,</b> with staff based at several UK universities.|$|R
40|$|We observe {{increasing}} interest in aggregating <b>geographically</b> <b>distributed,</b> heterogeneous resources to perform large scale computations. MPI {{remains the most}} popular programming paradigm for such applications; however, as the size of computing environments increases, fault tolerance aspects become critically important. We argue that the fault tolerance model proposed by FT-MPI fits well in <b>geographically</b> <b>distributed</b> environments, even though its current implementation is confined to a single administrative domain. We propose to overcome these limitations by combining FT-MPI with the H 2 O resource sharing framework. Our approach allows users to run fault tolerant MPI programs on heterogeneous, <b>geographically</b> <b>distributed</b> shared machines, without sacrificing performance and with minimal involvement of resource providers. ...|$|R
40|$|AbstractBig {{data has}} become one of the major areas of {{research}} for cloud service providers. Big data with its characteristics such as size, complexity etc. requires efficient methods for migration from one location to the geographically distant other location. Also, processing the big data located at different <b>geographically</b> <b>distributed</b> data centers using MapReduce like frameworks consume a lot of bandwidth. One of the solutions for reducing the cost of processing such <b>geographically</b> <b>distributed</b> big data is data aggregation. In this paper, we propose an online algorithm to find out optimal cost data aggregation site among the <b>geographically</b> <b>distributed</b> data centers. This proposed approach gives an optimal cost solution for the data aggregation from different <b>geographically</b> <b>distributed</b> data centers which can be efficiently processed at a single site using distributed frameworks. We propose a graph model of Geo-distributed data centers. Results are obtained in the online cloud environment, which show that proposed approach gives better results...|$|R
50|$|Ilesfay had {{resources}} in six <b>geographically</b> <b>distributed</b> regions: California, Virginia, Brazil, Ireland, Singapore and Tokyo.|$|R
5000|$|Features {{for local}} and <b>geographically</b> <b>distributed</b> content storage for {{file-based}} distribution {{as well as}} disaster recovery applications ...|$|R
5000|$|In 2009 O'Rourke {{delivered}} the 49th Rankine Lecture at Imperial College London, entitled [...] "Geohazards & Large <b>Geographically</b> <b>Distributed</b> Systems".|$|R
40|$|Large, {{multinational}} {{software development}} organizations face {{a number of}} issues in supporting software design and modeling by <b>geographically</b> <b>distributed</b> architects. To address these issues, we present CoDesign, an extensible, collaborative, event-based software modeling framework developed in a distributed, collaborative setting by our two organizations. CoDesign’s core capabilities include real-time model synchronization between <b>geographically</b> <b>distributed</b> architects, as well as detection and resolution of a range of modeling conflicts via several off-the-shelf conflict detection engines. 1...|$|R
3000|$|... in (4 b) {{comprises}} scalar measurements from N <b>geographically</b> <b>distributed</b> sensors {{per time}} k, {{it is possible}} to form y [...]...|$|R
40|$|Hadoop and Spark {{are widely}} used {{distributed}} processing frameworks for large-scale data processing in an efficient and fault-tolerant manner on private or public clouds. These big-data processing systems are extensively used by many industries, e. g., Google, Facebook, and Amazon, for solving a large class of problems, e. g., search, clustering, log analysis, different types of join operations, matrix multiplication, pattern matching, and social network analysis. However, all these popular systems have a major drawback in terms of locally distributed computations, which prevent them in implementing <b>geographically</b> <b>distributed</b> data processing. The increasing amount of <b>geographically</b> <b>distributed</b> massive data is pushing industries and academia to rethink the current big-data processing systems. The novel frameworks, which will be beyond state-of-the-art architectures and technologies involved in the current system, are expected to process <b>geographically</b> <b>distributed</b> data at their locations without moving entire raw datasets to a single location. In this paper, we investigate and discuss challenges and requirements in designing <b>geographically</b> <b>distributed</b> data processing frameworks and protocols. We classify and study batch processing (MapReduce-based systems), stream processing (Spark-based systems), and SQL-style processing geo-distributed frameworks, models, and algorithms with their overhead issues. Comment: IEEE Transactions on Big Data; Accepted June 2017. 20 page...|$|R
30|$|<b>Geographically</b> <b>distributed</b> agile {{development}} (GDAD): Agile {{development that}} includes a number of teams or/and team members distributed over different locations and time zones.|$|R
50|$|Flexible Management {{facilitates}} {{administration of}} a large number of WebSphere Application Server base edition and Network Deployment topologies that might be <b>geographically</b> <b>distributed.</b>|$|R
50|$|Repatriation was not evenly <b>geographically</b> <b>distributed,</b> with midwestern Mexicans {{being only}} 3% {{of the overall}} US Mexican {{population}} but perhaps 10% of repatriates.|$|R
50|$|User stories {{written on}} small {{physical}} cards {{are hard to}} maintain, difficult to scale to large projects and troublesome for <b>geographically</b> <b>distributed</b> teams.|$|R
50|$|Yin et al. {{introduced}} a topic model for <b>geographically</b> <b>distributed</b> documents, where document positions are explained by latent regions which are detected during inference.|$|R
50|$|To achieve {{responsiveness}} {{the game}} is partitioned across a number of datacenters, <b>geographically</b> <b>distributed</b> across the globe, offering high-bandwidth, low-latency network access for the players.|$|R
40|$|In this paper, {{we seek to}} {{shed light}} on how {{communication}} networks in <b>geographically</b> <b>distributed</b> projects evolve in order to address the limits of the modular design strategy. We collected data from a <b>geographically</b> <b>distributed</b> software development project covering 39 months of activity. Our analysis showed that over time a group of developers emerge as the liaisons between formal teams and geographical locations. In addition to handling the communication and coordination load across teams and locations, those engineers contributed the most to the development effort...|$|R
40|$|This study {{examines}} tacit knowledge sharing in designing, constructing, {{and testing of}} ERP Systems in a <b>geographically</b> <b>distributed</b> environment. To mitigate the risks in implementing ERP systems, a knowledge based approach is followed. The ERP implementation team depends upon knowledge to understand the business rules and processes required for the ERP systems. The value of ERP implementation is increased when tacit knowledge has been integrated into ERP systems. This paper attempts to understand how Canadian organizations are sharing the tacit knowledge in <b>geographically</b> <b>distributed</b> ERP implementation environment. A case study methodology is followed to accomplish the research objective. Three organizations from telecommunication, government, and retail sectors participated in the study. For data collection, semi-structured {{interviews were conducted with}} four to six respondents from each firm. The findings about tacit knowledge sharing in three firms that have implemented ERP systems are presented. The findings are categorized into three phases: tacit knowledge sharing in design, construction and testing of ERP systems. The lessons learned are given by presenting a cross-comparison of the three case studies. Based on the case analysis, the activities for tacit knowledge sharing in <b>geographically</b> <b>distributed</b> ERP implementation environment are given. Key words: Enterprise Resources Planning, <b>Geographically</b> <b>Distributed</b> environment, tacit knowledge sharing, ERP design...|$|R
40|$|Association rule mining is {{an active}} data mining {{research}} area. However, most ARM algorithms cater to a centralized environment. In contrast to previous ARM algorithms, ODAM is a <b>distributed</b> algorithm for <b>geographically</b> <b>distributed</b> data set that reduces communication costs. Modern organizations are <b>geographically</b> <b>distributed.</b> Typically, each site locally stores its ever increasing amount of day-to-day data. Using centralized data mining to discover useful patterns in such organizations' data isn't always feasible because merging data sets from different sites into a centralized site incurs huge network communication costs. Distributed data mining has thus emerged as an active sub area of data mining research. In this project we develop and implement a distributed algorithm, called Optimized Distributed Association Mining, for <b>geographically</b> <b>distributed</b> data sets. ODAM generates support counts of candidate item sets quicker than other DARM algorithms and reduces the size of average transactions, data sets, and message exchanges...|$|R
40|$|<b>Geographically</b> <b>distributed</b> {{software}} development holds much promise for increasing market penetration and speeding up development cycles. However, it {{also comes with}} a set of new challenges for those developing the software, bought about by the distance among colleagues. This paper outlines a new research project underway to explore those issues and their implications for organizing <b>geographically</b> <b>distributed</b> {{software development}} efforts. We also describe the approaches we are taking towards providing solutions [...] - in the form of processes and technology [...] - to address the challenges of working remotely. INTRODUCTION <b>Geographically</b> <b>distributed</b> development has {{become a way of life}} for many divisions of Lucent Technologies, and all indications are that it will be increasingly prevalent in the future. There are at least three compelling motivations. First, there is increased global demand for telecommunications products and services due to deregulation and innovations such as digital wir [...] ...|$|R
5000|$|Evaristo, J. Roberto, et al. [...] "A {{dimensional}} analysis of <b>geographically</b> <b>distributed</b> project teams: a case study." [...] Journal of Engineering and technology Management 21.3 (2004): 175-189.|$|R
6000|$|... “Curious thing {{happened}} to my aunt, the one who lives in Paris,” he began. He had several aunts, {{but they were all}} <b>geographically</b> <b>distributed</b> over Greater London.|$|R
50|$|The Banda {{people speak}} {{languages}} {{belonging to the}} Niger-Congo family, known as Banda or Ubangian languages. The Banda languages have variations; nine distinct <b>geographically</b> <b>distributed</b> vernaculars are known.|$|R
40|$|Working <b>geographically</b> <b>distributed</b> in agile teams {{becomes more}} common and the {{challenges}} encountered, do largely alternate compared to normal agile challenges. This paper presents previous research, regarding both challenges and improvements of <b>geographically</b> <b>distributed</b> agile teams, and supplements it with interview data. Interview and questionnaire were conducted with employees of a multinational company, in order to explore the area of concern. The eight challenges discovered were: communication and collaboration, cultural, documentation, knowledge management, management, risk management, time zone and tools. Results from the literature review then used to produce improvement suggestions, regarding the common challenges...|$|R
40|$|Scholars have {{recently}} argued for flatter, organic organizational structures that enable workers to deal more effectively with dynamic and uncertain environments. In a correlational study of 33 R&D teams, {{we find that}} although this network form is associated with more smooth coordination in collocated teams, {{the opposite is true}} for <b>geographically</b> <b>distributed</b> teams. In fact, an informal hierarchical structure was associated with more smooth coordination on distributed teams. These results add to the scant literature on networks in teams and provide insight into important differences in the structure of <b>geographically</b> <b>distributed</b> and collocated teams...|$|R
40|$|CIFE Working Paper # 78 The {{purpose of}} this paper is to report the results of the CIFE {{research}} study of trust in cross-functional, <b>geographically</b> <b>distributed</b> A/E/C teams. Cross-functional, <b>geographically</b> <b>distributed</b> teams provide the construction industry with great advantages by bringing diverse skills to bear on problems and projects that span traditional organizational functions. Although companies are quickly adopting the model of cross-functional, <b>geographically</b> <b>distributed</b> teams, little is known about the new social environment that this creates for team members. A major challenge in such teams is the development of interpersonal trust between team members. The objective of this research is to determine the influence of geographic distribution, cross-functionality on communication, interpersonal trust and individual performance between two team members, called a dyad, in an Architecture, Engineering and Construction (A/E/C) industry setting. Our research questions were: What are the key predictors of interpersonal trust in distributed A/E/C teams? And how does interpersonal trust influence individual performance? We hypothesized that trust is more difficult in cross-functional, <b>geographically</b> <b>distributed</b> dyads because of the different disciplinary perspectives and the lack of face-to-face interaction available when working at a distance. We also hypothesize that trust improves the work process performance of both members of the dyad, i. e. the trustor and the trustee, leading to greater work outputs, such as less time, less cost and higher quality...|$|R
50|$|Complex network: an enterprise-wide {{network that}} uses {{multiple}} communication media and communication protocols to interconnect <b>geographically</b> <b>distributed</b> networks with dissimilar {{hardware and software}} platforms would be classified as a complex network.|$|R
50|$|TransLattice is a {{software}} {{company based in}} Santa Clara, California. It <b>geographically</b> <b>distributes</b> databases and applications for enterprise, cloud and hybrid environments. TransLattice offers a NewSQL database and an application platform.|$|R
50|$|Last data {{available}} referred to year 2011 and indicate 43.957 members <b>geographically</b> <b>distributed</b> as follows:24.862 north Italy, 10.067 center Italy and 9.028 southern Italy.When a member retires became member of UIL Pensionati.|$|R
40|$|Abstract — Main {{characteristics}} of large–scale, <b>geographically</b> <b>distributed</b> grid systems are resource heterogeneity and network latency. In this paper, we use queuing network models to analyze data–parallel grid applications and we show {{the effects of}} resource heterogeneity, communications delays, network bandwidths and synchronization overheads on the applicationlevel performance. The proposed models rely on the statistical pattern of computation, communication, and I/O operations in the parallel applications, {{as well as on}} measurable infrastructure characteristics. We finally show how the high variability in the execution and communication times must be considered when modeling applications on <b>geographically</b> <b>distributed</b> grid infrastructures. 1 I...|$|R
