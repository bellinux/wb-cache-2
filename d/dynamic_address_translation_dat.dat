14|1830|Public
2500|$|The IBM System/360 Model 67, {{which was}} {{introduced}} Aug. 1965, included an MMU that {{was called a}} <b>dynamic</b> <b>address</b> <b>translation</b> (<b>DAT)</b> box. [...] It had the unusual feature of storing accessed and dirty bits outside of the page table. [...] They refer to physical memory rather than virtual memory, and are accessed by special-purpose instructions. [...] This reduces overhead for the OS, which would otherwise need to propagate accessed and dirty bits from the page tables to a more physically oriented data structure. [...] This makes OS-level virtualization easier.|$|E
5000|$|The use of Virtual {{memory and}} <b>Dynamic</b> <b>Address</b> <b>Translation</b> (<b>DAT)</b> on the IBM S/360-67 in 1967.|$|E
50|$|It {{included}} <b>Dynamic</b> <b>address</b> <b>translation</b> (<b>DAT)</b> hardware, a pre-requisite {{for the new}} {{virtual memory}} operating systems (OS/VS1, OS/VS2).|$|E
5000|$|The S/360-67 design {{included}} a radical new component for implementing virtual memory, the [...] "DAT box" [...] (<b>Dynamic</b> <b>Address</b> <b>Translation</b> box). <b>DAT</b> on the 360/67 {{was based on}} the architecture outlined in a 1966 JACM paper by Arden, Galler, Westervelt, and O'Brien and included both segment and page tables. The Model 67's virtual memory support was very similar to the virtual memory support that eventually became standard on the entire System/370 line.|$|R
5000|$|Optional MMU {{supporting}} both {{memory protection}} and <b>dynamic</b> <b>address</b> <b>translation.</b>|$|R
5000|$|A <b>Dynamic</b> <b>Address</b> <b>Translation</b> {{mechanism}} {{that can be}} used to implement a virtual memory system ...|$|R
5000|$|<b>Dynamic</b> <b>Address</b> <b>Translation</b> (<b>DAT)</b> {{with support}} for 24 or 32-bit virtual {{addresses}} using segment and page tables (up to 16 segments each containing up to 256 4096 byte pages) ...|$|E
50|$|Virtual Memory (VM) {{and demand}} paging support {{were added to}} UMMPS in November 1967, making MTS the first {{operating}} system to use the <b>Dynamic</b> <b>Address</b> <b>Translation</b> (<b>DAT)</b> features that {{were added to the}} IBM S/360-67.|$|E
5000|$|... full {{virtual memory}} {{through a new}} {{microcode}} floppy disk on the 370/145 and a hardware upgrade to include a DAT box on the 370/155 and 370/165. A <b>Dynamic</b> <b>Address</b> <b>Translation</b> (<b>DAT)</b> option was not announced until 1972; ...|$|E
5000|$|The [...] "DAT Box" [...] (<b>Dynamic</b> <b>Address</b> <b>Translation),</b> {{announced}} as {{an addition to}} the S/370 series in 1972 ...|$|R
50|$|The {{invention}} of <b>dynamic</b> <b>address</b> <b>translation</b> (the function provided by an MMU) originally reduced {{the need for}} position-independent code because every process could have its own independent address space (range of addresses). However, multiple simultaneous jobs using the same code created a waste of physical memory. If two jobs run entirely identical programs, <b>dynamic</b> <b>address</b> <b>translation</b> provides a solution by allowing the system simply to map two different jobs' address 32K to the same bytes of real memory, containing the single copy of the program.|$|R
5000|$|It offered [...] "dynamic {{relocation}} of problem programs using the <b>dynamic</b> <b>address</b> <b>translation</b> facilities of the 2067 Processing Unit, permitting response, within seconds, to many simultaneous users" ...|$|R
50|$|After {{a year of}} {{negotiations}} and design studies, IBM agreed to make a one-of-a-kind version of its S/360-65 mainframe computer for the University of Michigan. The S/360-65M would include <b>dynamic</b> <b>address</b> <b>translation</b> (<b>DAT)</b> features that would support virtual memory and allow support for time-sharing. Initially IBM decided not to supply a time-sharing operating system for the new machine.|$|E
50|$|A paper titled Program and Addressing Structure in a Time-Sharing Environment by Bruce Arden, Bernard Galler, Frank Westervelt (all {{associate}} directors at UM's academic Computing Center), and Tom O'Brian building {{upon some}} basic ideas {{developed at the}} Massachusetts Institute of Technology (MIT) was published in January 1966. The paper outlined a virtual memory architecture using <b>dynamic</b> <b>address</b> <b>translation</b> (<b>DAT)</b> {{that could be used}} to implement time-sharing.|$|E
5000|$|Virtual {{memory and}} timesharing: [...] "In June 1964...was adamant that hardware-aided <b>dynamic</b> <b>address</b> <b>translation</b> (<b>DAT)</b> was essential" [...] for time-sharing, a [...] "still-experimental mode of {{operation}} whereby users at several consoles could share the facilities of a computer.... The most fundamental problem....was that of reallocating memory areas to user programs dynamically." [...] MIT wouldn't back down on this position, felt betrayed by IBM, and ultimiately turned away from IBM to GE for a MULTICS platform.|$|E
5000|$|... thereby {{permitting}} {{operations on}} up to 2^24-1 bytes (16 MB), vs. the 256-byte limits on the 360's MVC and CLC, but lacked a <b>DAT</b> (<b>Dynamic</b> <b>Address</b> <b>Translation)</b> box.|$|R
5000|$|... "Unifying the {{architecture}} and control programs {{of business and}} scientific computers both large and small" [...] (championed by Brooks/Amdahl; this group rejected <b>dynamic</b> <b>address</b> <b>translation,</b> fearing [...] "unevaluated techniques or technologies" [...] {{as the basis of}} an entire product line), versus ...|$|R
5000|$|The Model 135 was {{the last}} of the 370s to be {{introduced}} without Virtual memory. Four of the five could be upgraded. Unlike the 155 & 165, which required an expensive hardware upgrade to add a <b>DAT</b> box (<b>Dynamic</b> <b>Address</b> <b>Translation),</b> the 135 & 145 [...] could get obtain their virtual memory upgrade from a floppy disk.|$|R
5000|$|The IBM System/360 Model 67, {{which was}} {{introduced}} Aug. 1965, included an MMU that {{was called a}} <b>dynamic</b> <b>address</b> <b>translation</b> (<b>DAT)</b> box. [...] It had the unusual feature of storing accessed and dirty bits outside of the page table. They refer to physical memory rather than virtual memory, and are accessed by special-purpose instructions. [...] This reduces overhead for the OS, which would otherwise need to propagate accessed and dirty bits from the page tables to a more physically oriented data structure. This makes OS-level virtualization easier.|$|E
50|$|Amdahl {{launched}} its first product in 1975, the Amdahl 470/6, which competed directly against high-end models in IBM's then-current System/370 family. When IBM announced th introduction of <b>Dynamic</b> <b>Address</b> <b>Translation</b> (<b>DAT),</b> Amdahl announced the 470V/6 {{and dropped the}} 470/6. At {{the time of its}} introduction, the 470V/6 was less expensive but still faster than IBM's comparable offerings. The first two 470V/6 machines were delivered to NASA (Serial Number 00001) and the University of Michigan (Serial Number 00002). For the next quarter century Amdahl and IBM competed aggressively against one another in the high-end mainframe market. At its peak, Amdahl had a 24% market share. Amdahl owed some of its success to antitrust settlements between IBM and the U.S. Department of Justice, which ensured that Amdahl's customers could license IBM's mainframe software under reasonable terms.|$|E
5000|$|Blaauw also {{designed}} a revolutionary address translation system, the [...] "Blaauw Box", which {{was removed from}} the original System/360 design, but was later used in IBM's unsuccessful proposal to MIT's Project MAC. Subsequently, <b>Dynamic</b> <b>Address</b> <b>Translation</b> (<b>DAT)</b> hardware of a somewhat different design was incorporated in the important IBM System/360-67 computer. As implemented on the Model 67, DAT hardware allowed the implementation of some of the first practical paged virtual memory systems [...] - [...] perhaps the first to be commercially successful. The Model 67 was being used in commercial applications by 1968. The earlier Ferranti Atlas Computer was a seminal platform for paging research, but suffered from well-studied performance issues such as thrashing. Virtual memory address translation capabilities similar to those on the S/360-67 were subsequently included in all models of the IBM System/370 computer line that followed.|$|E
5000|$|The [...] and its sibling [...] {{can be used}} as {{replacements}} for fork and exec, but does not provide the same flexibility as using fork and exec separately. They may be efficient {{replacements for}} fork and exec, but their purpose is to provide process creation primitives in embedded environments where fork is not supported due to lack of <b>dynamic</b> <b>address</b> <b>translation.</b>|$|R
50|$|A {{succession}} of high-end machines included the Model 67 (1966, mentioned below, briefly anticipated as the 64 and 66), 85 (1969), 91 (1967, anticipated as the 92), 95 (1968), and 195 (1971). The 85 design was intermediate between the System/360 {{line and the}} follow-on System/370 and {{was the basis for}} the 370/165. There was a System/370 version of the 195, but it did not include <b>Dynamic</b> <b>Address</b> <b>Translation.</b>|$|R
5000|$|These {{systems were}} all different, but bore a family resemblance. CP-40's CAT box {{was a key}} milestone. Pugh et al. cite an IEEE paper about the CP-40 virtual memory hardware, and states that it was [...] "unique in that it {{included}} a parallel-search register bank to speed <b>dynamic</b> <b>address</b> <b>translation.</b> With funds supplied by Cambridge, IBM engineers...built a 64-register associative memory and integrated it into a 360/40. The one-of-a-kind result was shipped to Cambridge early in 1966." ...|$|R
5000|$|After {{a year of}} {{negotiations}} and design studies, IBM agreed to make a one-of-a-kind version of its S/360-65 mainframe computer with <b>dynamic</b> <b>address</b> <b>translation</b> (<b>DAT)</b> features that would support virtual memory and accommodate UM's desire to support time-sharing. The computer was dubbed the Model S/360-65M. The [...] "M" [...] stood for Michigan. But IBM initially decided not to supply a time-sharing operating system for the machine. Meanwhile, {{a number of other}} institutions heard about the project, including General Motors, the Massachusetts Institute of Technology's (MIT) Lincoln Laboratory, Princeton University, and Carnegie Institute of Technology (later Carnegie Mellon University). They were all intrigued by the time-sharing idea and expressed interest in ordering the modified IBM S/360 series machines. With this demonstrated interest IBM changed the computer's model number to S/360-67 and made it a supported product. With requests for over 100 new model S/360-67s IBM realized there was a market for time-sharing, and agreed to develop a new time-sharing operating system called TSS/360 (TSS stood for Time-sharing System) for delivery at roughly {{the same time as the}} first model S/360-67.|$|E
5000|$|<b>Dynamic</b> <b>Address</b> <b>Translation</b> {{hardware}} (sometimes {{called a}} [...] "DAT box" [...] in early systems {{because of its}} separate enclosure) is integrated into the CPU itself and participates in every memory reference. If the Page Table shows the page in a real-memory page frame, DAT translates the virtual address to a real one and allows the memory access to complete. If, on the other hand, the referenced page is not in real memory, the DAT hardware generates an interrupt (internal signal) which calls the Paging Supervisor into action.|$|R
2500|$|APL gained its {{foothold}} on mainframe timesharing {{systems from}} the late 1960s through the early 1980s, {{in part because it}} would run on lower-specification systems that were not equipped with <b>Dynamic</b> <b>Address</b> <b>Translation</b> hardware. Additional improvements in performance for selected IBM System/370 mainframe systems included the [...] "APL Assist Microcode" [...] in which some support for APL execution was included in the actual firmware as opposed to APL being exclusively a software product. Somewhat later, as suitably performing hardware was finally becoming available in the mid- to late-1980s, many users migrated their applications to the personal computer environment.|$|R
50|$|The first hypervisors {{providing}} full virtualization {{were the}} test tool SIMMON and IBM's one-off research CP-40 system, which began production use in January 1967, {{and became the}} first version of IBM's CP/CMS operating system. CP-40 ran on a S/360-40 that was modified at the IBM Cambridge Scientific Center to support <b>Dynamic</b> <b>Address</b> <b>Translation,</b> a key feature that allowed virtualization. Prior to this time, computer hardware had only been virtualized enough to allow multiple user applications to run concurrently (see CTSS and IBM M44/44X). With CP-40, the hardware's supervisor state was virtualized as well, allowing multiple operating systems to run concurrently in separate virtual machine contexts.|$|R
5000|$|The Model 67, {{announced}} in August 1965, {{was the first}} production IBM system to offer <b>dynamic</b> <b>address</b> <b>translation</b> hardware to support time-sharing. [...] "DAT" [...] is now more {{commonly referred to as}} an MMU. An experimental one-off unit was built based on a model 40. Before the 67, IBM had announced models 64 and 66, DAT versions of the 60 and 62, but they were almost immediately replaced by the 67 {{at the same time that}} the 60 and 62 were replaced by the 65. DAT hardware would reappear in the S/370 series in 1972, though it was initially absent from the series. Like its close relative, the 65, the 67 also offered dual CPUs.|$|R
40|$|In modern processors, the <b>dynamic</b> <b>translation</b> {{of virtual}} <b>addresses</b> to support virtual memory is done before or in {{parallel}} with the first-level cache access. As processor technology improves at a rapid pace and the working sets of new applications grow insatiably the latency and bandwidth demands on the TLB (Translation Lookaside Buffer) are {{getting more and more}} difficult to meet. The situation is worse in multiprocessor systems, which run larger applications and are plagued by the TLB consistency problem. We evaluate and compare five options for virtual <b>address</b> <b>translation</b> in the context of COMAs (Cache Only Memory Architectures). The <b>dynamic</b> <b>address</b> <b>translation</b> mechanism can be located after the cache access provided the cache is virtual. In a particular design, which we call V-COMA for Virtual COMA, the physical address concept and the traditional TLB are eliminated. While still supporting virtual memory, V-COMA reduces the <b>address</b> <b>translation</b> overhead to a minimum. V-COMA scales w [...] ...|$|R
40|$|We {{introduce}} {{a simple solution}} {{for the support of}} host mobility in the Internet called DIME (Dynamic Internet Mobility for End-Systems). DIME is based on <b>dynamic</b> <b>address</b> <b>translation</b> between the transport and network layers of end hosts, combined with a new out-of-band protocol that updates host-address bindings between communicating hosts opportunistically. It does not require modifications to the end-host operating systems, end-user applications, existing communication protocols or hardware, or the domain name system and any host-identifier namespace. A number of experiments based on a Linux daemon implementation of DIME are used to show that DIME is deployable {{on a wide range of}} hardware, and that it outperforms existing mobility proposals such as MIPv 6 and HIP across a wide range of performance metrics...|$|R
50|$|Before {{virtual memory}} could be {{implemented}} in mainstream operating systems, many problems had to be <b>addressed.</b> <b>Dynamic</b> <b>address</b> <b>translation</b> required expensive and difficult-to-build specialized hardware; initial implementations slowed down access to memory slightly. There were worries that new system-wide algorithms utilizing secondary storage would be less effective than previously used application-specific algorithms. By 1969, the debate over virtual memory for commercial computers was over; an IBM research team led by David Sayre showed that their virtual memory overlay system consistently worked better than the best manually controlled systems. Throughout the 1970s, the IBM 370 series running their virtual-storage based operating systems provided a means for business users to migrate multiple older systems into fewer, more powerful, mainframes that had improved price/performance. The first minicomputer to introduce virtual memory was the Norwegian NORD-1; during the 1970s, other minicomputers implemented virtual memory, notably VAX models running VMS.|$|R
40|$|Despite {{the vast}} set of prior work on identifier-locator split architectures, no one {{approach}} has seen much success, adoption, or deployment in the Internet at large. We identify the key set of challenges that have inhibited {{the deployment of}} these proposals to date, and introduce the Dynamic Internet Mobility for End-Systems (DIME) approach. DIME is based on <b>dynamic</b> <b>address</b> <b>translation</b> between the transport and network layers of end hosts, combined with a simple out-of-band protocol that updates host-address bindings as needed. DIME is {{the first and only}} proposal that achieves a clean identifier-locator split without  requiring modifications to the end-host OS or applications; modifications to existing network protocols, security mechanisms, or hardware; or  a new host-identifier namespace. We  evaluate a Linux daemon implementation of DIME, and show that it i outperforms existing mobility proposals such as mobile IP (MIPv 6), multipath TCP (MPTCP), and the Host Identity Protocol  (HIP) across a wide range of performance metrics...|$|R
40|$|The DARPA Information Assurance Program did initial {{research}} in the area of dynamic network defense, trying to prove that dynamic network reconfiguration would inhibit an adversary’s ability to gather intelligence, and thus degrade the ability to successfully launch an attack. A technique that enabled <b>dynamic</b> network <b>address</b> <b>translation</b> of the IP address and TCP port number combinations in packet headers was implemented in an experimental network. Two tests were conducted: one to demonstrate that it is possible to disrupt an adversary’s ability to sniff network traffic effectively, and another to show that the ability of intrusion detection tools to detect an adversary can be improved. The tests were successful...|$|R
40|$|A new {{protocol}} {{technology is}} just starting {{to emerge from the}} laboratory environment. Its stated purpose is to provide an additional means in which networks, and the services that reside on them, can be protected from adversarial compromise. This report has a two-fold objective. First is to provide the reader with an overview of this emerging Dynamic Defenses technology using <b>Dynamic</b> Network <b>Address</b> <b>Translation</b> (Dynat). This ''structure overview'' is concentrated {{in the body of the}} report, and describes the important attributes of the technology. The second objective is to provide a framework that can be used to help in the classification and assessment of the different types of dynamic defense technologies along with some related capabilities and limitations. This information is primarily contained in the appendices...|$|R
40|$|A new {{protocol}} {{technology is}} just starting {{to emerge from the}} laboratory environment. Its stated purpose is to provide a means whereby networks, and the services that reside on them, can be protected from adversarial compromise. This protocol called <b>Dynamic</b> Network <b>Address</b> <b>Translation</b> (Dynat) is designed to protect computer networks against cyber attacks. Briefly, Dynat changes network parameters, such as the IP address and port numbers, between communication sessions and even during sessions. As a result, an adversary cannot associate activity on a given port of a given IP address with an application on a particular computer, thereby presenting a significant barrier to network attacks. This paper identifies the major components or attributes that are associated with the Dynat protocol and describes some of the potential implementations and associated network architectures that can deploy Dynat. It examines inter-operability issues associated with Dynat's interaction with other network protocols along with its impact on standard security implementations, such as IPSec and Intrusion Detection Systems. <b>dynamic</b> <b>address</b> translation; protocol obfuscation; IDS enhancement; network security; network mapping protection; cyber attack; network protocols; interoperability; network architectures; network protection; critical infrastructures...|$|R
