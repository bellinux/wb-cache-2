10000|10000|Public
5|$|Dynamic DNA {{nanotechnology}} {{focuses on}} forming nucleic acid systems with designed dynamic <b>functionalities</b> {{related to their}} overall structures, such as computation and mechanical motion. There is some overlap between structural and dynamic DNA nanotechnology, as structures can be formed through annealing and then reconfigured dynamically, or {{can be made to}} form dynamically in the first place.|$|E
5|$|Non-nucleoside phosphoramidites are the phosphoramidite {{reagents}} {{designed to}} introduce various <b>functionalities</b> at the termini of synthetic oligonucleotides or between nucleotide residues {{in the middle}} of the sequence. In order to be introduced inside the sequence, a non-nucleosidic modifier has to possess at least two hydroxy groups, one of which is often protected with the DMT group while the other bears the reactive phosphoramidite moiety.|$|E
5|$|The Students' Building on {{the campus}} of Vassar College in the town of Poughkeepsie, New York, U.S., houses the school's All Campus Dining Center (ACDC or Deece) as well as {{additional}} multifunctional student space on its second floor. Designed by Joseph Herenden Clark of McKim, Mead & White and built in 1913, the structure originally housed a variety of different student organizations and school functions. In 1973, it was converted into a campuswide dining hall; it underwent a second renovation in 2003 that returned multipurpose student <b>functionalities</b> to its upper floors.|$|E
2500|$|NuBus-based Macintoshes: 6100/60, 6100/60AV (no AV <b>functionality),</b> 6100/66, 6100/66 AV (no AV <b>functionality),</b> 6100/66 DOS (no DOS <b>functionality),</b> 7100/66, 7100/66 AV (no AV <b>functionality),</b> 7100/80, 7100/80 AV (no AV <b>functionality),</b> 8100/80/ 8100/100/ 8100/100 AV (no AV <b>functionality),</b> 8100/110 ...|$|R
50|$|Core <b>functionality</b> and {{ancillary}} <b>functionality</b> requirements: Murali Chemuturi defined requirements into core <b>functionality</b> and ancillary <b>functionality</b> requirements. Core <b>functionality</b> {{requirements are}} those without fulfilling which the product cannot be useful at all. Ancillary <b>functionality</b> requirements {{are those that}} are supportive to core <b>functionality.</b> The product can continue to work even if {{some or all of the}} ancillary <b>functionality</b> requirements are fulfilled but with some side effects. Security, safety, user friendliness and so on are examples of ancillary <b>functionality</b> requirements.|$|R
50|$|An {{authoring}} system usually includes an authoring language, {{a programming language}} built (or extended) with <b>functionality</b> for representing the tutoring system. The <b>functionality</b> offered by the authoring language may be programming <b>functionality</b> for use by programmers or domain representation <b>functionality</b> for use by subject experts. There is overlap between authoring languages with domain representation <b>functionality</b> and domain-specific languages.|$|R
5|$|At Imageworks, as per Leon, he {{was asked}} to develop an {{improved}} digital film review software as an alternative to a then existing software. Leon released the initial version within two months of having been assigned the job; after receiving positive feedback from the artists using the software, Leon kept updating various <b>functionalities</b> of the software over the years. This digital 3D film review software, itView, led Leon to get an Academy Award in 2016. Leon mentions working alone on the project for many years, and that he was over time given a team when the project achieved significant growth. In a 2016 media interview, Leon says that he worked on the itView technology for eight years as the chief contributor.|$|E
5|$|Norton Internet Security 2000, {{released}} January 10, 2000, was Symantec's {{first foray}} beyond virus protection and content control filters. Its release followed an alliance between Internet provider Excite@Home and antivirus vendor McAfee.com to provide Internet subscribers with McAfee's new firewall software, McAfee Personal Firewall. Version 2000s firewall, based on AtGuard from WRQ, filters traffic at the packet level. It can block ActiveX controls and Java applets. Other <b>functionalities</b> include cookie removal, and banner ad blocking. ZDNet found the ad blocker removed graphics {{that were not}} ads, breaking pages. Adjusting the settings fixed the problem, however the process was complicated. ZDNet noted {{the lack of information}} presented concerning attacks the firewall blocked. Norton LiveUpdate downloads and installs program updates.|$|E
5|$|The {{bulk of the}} {{remastering}} {{work was}} outsourced to the Shanghai-based studio Virtuos. Square Enix's internal staff was responsible for reassembling the original assets, and helped with a part of redoing the high-definition data. Among the returning original team members were Motomu Toriyama, Yusuke Naora, Toshitaka Matsuda and Masaki Kobayashi who supervised the production. X-2 art director Shintaro Takai remained in the same role for both remastered games. The Chinese side of development was headed by managing director Pan Feng. The team encountered problems in porting the games to PlayStation 3 and Vita as their graphics used many <b>functionalities</b> unique to the PlayStation 2 hardware. The loss and repair {{of some of the}} original assets posed another hurdle, with Kitase commenting that it might have been easier to recreate the data from the ground up.|$|E
5000|$|Specific functionality: {{this is the}} <b>functionality</b> that {{is created}} based upon the {{business}} requirements. With it {{you can create a}} wide variety of <b>functionality.</b> SPADE users can use a library of off-the-shelf requirements for example CRM, HR, profile matching and financial <b>functionality.</b> This can be inserted and adjusted to fit the specific needs of the client. The specific <b>functionality</b> can use all plug-ins as well as all generic <b>functionality</b> to extend the domain of available <b>functionality.</b>|$|R
50|$|Graceful {{degradation}} {{attempts to}} provide the same or similar <b>functionality</b> to all users and platforms, while diminishing that <b>functionality</b> to a least common denominator for more limited client browsers. For example, a user attempting to use a limited-feature browser to access Gmail may notice that Gmail switches to basic mode, with reduced <b>functionality.</b> This differs from other cross-platform techniques, which attempt to provide equivalent <b>functionality,</b> not just adequate <b>functionality,</b> across platforms.|$|R
40|$|AbstractWe are {{interested}} in evolution scenarios for language-based <b>functionality.</b> We identify different dimensions along which such <b>functionality</b> can evolve, including the following: (i) coding style; (ii) coding details; (iii) data model; (iv) crosscutting concerns; and (v) patches. We focus at language interpreters as examples of language-based <b>functionality,</b> but similar scenarios exist for type checkers, static analyses, program transformations, and other sorts of language-based <b>functionality.</b> Our experiences are based on using rule-based programming (with Prolog) {{for the implementation of}} language-based <b>functionality,</b> while evolutionary transformations of the <b>functionality</b> are perceived as meta-programs...|$|R
25|$|ShDocVw.dll {{provides}} the navigation, local caching and history <b>functionalities</b> for the browser.|$|E
25|$|Auto Insurance {{companies}} have utilised ad hoc solutions to support eCall and behavioural tracking <b>functionalities</b> {{in the form}} of Telematics 2.0.|$|E
25|$|The SD {{specification}} envisioned {{capacities and}} transfer rates exceeding those of MMC, {{and both of}} these <b>functionalities</b> have grown over time. For a comparison table, see below.|$|E
40|$|In {{this paper}} we use {{findings}} {{from a number}} of empirical studies involving different emergency response actors to identify shared or overlapping needs for user interfaces <b>functionality.</b> By analyzing the findings from these studies, we have identified 11 categories of <b>functionality</b> supporting shared needs, including <b>functionality</b> for handling incident information, logging facilities, and <b>functionality</b> for managing human resources and equipment. After presenting our research method, we give an overview of the identified categories of shared <b>functionality.</b> We also describe one of the categories, namely resource management, in some more detail including giving examples of concrete user interface <b>functionality.</b> We have validated the conclusions of our findings through observations and interviews in a training exercise. The validation supported our prediction that the exercise would not reveal major additional categories of <b>functionality,</b> and it also supplemented the earlier findings regarding which actors that need which categories of <b>functionality.</b> We conclude by discussing pros and cons of using generic solutions supporting shared <b>functionality</b> across emergency response actors...|$|R
40|$|In {{comparison}} to <b>functionality</b> doctrine in trade dress cases, scholars have paid relatively {{little attention to}} the role of <b>functionality</b> doctrine in design protection systems such as the U. S. design patent system and the EU Community Design regime. Yet <b>functionality</b> considerations potentially affect many validity and scope determinations in the design protection area. In this Article, we critically evaluate judicial application of the <b>functionality</b> doctrine in design protection systems, focusing on the U. S. design patent and EU design protection regimes. We argue that the doctrine as applied in these settings is too often aimless and inconsistent. Some simple doctrinal refinements would help, particularly in the U. S., where the Federal Circuit should definitively adopt the “dictated by” standard and should distinguish explicitly between <b>functionality</b> for invalidity purposes and <b>functionality</b> for scope purposes. Ultimately, a more carefully-considered theoretical justification for the <b>functionality</b> doctrine in design protection systems is needed, one that recognizes that trade dress <b>functionality</b> and design protection <b>functionality</b> serve different goals...|$|R
40|$|This project {{focuses on}} the {{implementation}} of the LTE Listen Mode <b>functionality</b> for a femtocell. The Listen Mode <b>functionality</b> is part of any LTE femtocell capabilities. The Listen Mode <b>Functionality</b> is the <b>functionality</b> by which a femtocell obtains information about all the LTE base stations that lie in the neighborhood...|$|R
25|$|During 1998–99, UEFA rated Camp Nou a five-star {{stadium for}} its {{services}} and <b>functionalities.</b> However, as per the 2010 regulations, UEFA does not publish {{a list of}} the top venues.|$|E
25|$|Constrained FBA-ready {{metabolic}} {{models can}} be analyzed using software such as the COBRA toolbox(requires MATLAB), SurreyFBA, or the web-based FAME. Additional software packages have been listed elsewhere. A comprehensive review of all such software and their <b>functionalities</b> has been recently reviewed.|$|E
25|$|Support for {{programming}} languages is added {{by using a}} specific VSPackage called a Language Service. A language service defines various interfaces which the VSPackage implementation can implement to add support for various <b>functionalities.</b> <b>Functionalities</b> that can be added this way include syntax coloring, statement completion, brace matching, parameter information tooltips, member lists and error markers for background compilation. If the interface is implemented, the functionality {{will be available for}} the language. Language services are implemented on a per-language basis. The implementations can reuse code from the parser or the compiler for the language. Language services can be implemented either in native code or managed code. For native code, either the native COM interfaces or the Babel Framework (part of Visual Studio SDK) can be used. For managed code, the MPF includes wrappers for writing managed language services.|$|E
40|$|Designs are {{conceptualized}} {{in terms}} of the functions they need to accomplish. The need for a new product design arises {{as a result of the}} identification of a new <b>functionality</b> to be accomplished by the product. That is, design is <b>functionality</b> driven. However, existing CAD tools are not equipped to capture <b>functionality</b> or reason in such a fashion to support design for product <b>functionality.</b> This research proposes a new design formalism to enable functionality-driven design of mechanically engineered products. This procedure provides a methodology that allows a designer to model product <b>functionality</b> and to carry out conceptual design with the aid of a computer. It also serves as a bridging tool between the conceptual design phase and detailed design phase of a product. Thus, the primary objective of this research is to develop a methodology that will support the following activities in CAD systems: <b>functionality</b> modeling, <b>functionality</b> data structuring, and form conceptualization. The <b>functionality</b> modeling methodology developed in this work includes the use of operands, operators, and coupling bonds to describe product <b>functionality</b> in CAD systems. The Universal Modeling Language (an object-oriented programming technique) is used to model product <b>functionality</b> in computer systems. The tools developed in this research provide a means of modeling and propagating product <b>functionality</b> information to downstream design activities. The propagation of <b>functionality</b> as a constraint is achieved using Extensible Markup Language (XML) data files. These tools also provide a mechanism for verifying and enforcing constraints on solid CAD models. The <b>functionality</b> definition interface is implemented with a customized Microsoft Visio graphics engine. The tools developed in this research provide a means of modeling and propagating product <b>functionality</b> information to downstream design activities. It also provides a mechanism for verifying and enforcing constraints on solid CAD models. The <b>functionality</b> definition interface is implemented with a customized Microsoft Visio graphics engine...|$|R
30|$|Up to this point, the {{described}} <b>functionality</b> {{replaces the}} autosuggest <b>functionality</b> {{that has been}} recently added to major large-scale web search engines such as Google and Yahoo! with autosuggest <b>functionality</b> powered by Wikipedia.|$|R
5000|$|The <b>functionality</b> part {{implements}} the <b>functionality</b> of {{the language}} (its functions, etc.).|$|R
25|$|Libraries {{specified}} by the environment variable LD_PRELOAD and then those listed in /etc/ld.so.preload are loaded before the search begins. A preload can thus be used to replace some (or all) of the requested library's normal <b>functionalities,</b> or it can simply be used to supply a library that would otherwise not be found.|$|E
25|$|Exokernels in {{themselves}} are extremely small. However, they {{are accompanied by}} library operating systems (see also unikernel), providing application developers with the <b>functionalities</b> of a conventional operating system. A major advantage of exokernel-based systems {{is that they can}} incorporate multiple library operating systems, each exporting a different API, for example one for high level UI development and one for real-time control.|$|E
25|$|In March 2015, It {{introduced}} Act-On Anywhere, a Chrome application allowing users {{access to}} marketing automation data and <b>functionalities</b> across any web-based browser. Allowing users to embed calls-to-action in web pages and blogs from any web-based content management system, this extension along with Act-On’s open APIs, supports a larger vision {{for an open}} marketing ecosystem, in which third-party applications can plug and play with Act-On – ensuring that end-users can continue to leverage their current systems and augment the use of those systems using engagement data collected within marketing automation.|$|E
40|$|In {{this article}} a {{semantic}} framework is developed {{that provides a}} logical description of the <b>functionality</b> of an interactive reasoning process. The concept of <b>functionality</b> description defines the <b>functionality</b> of a reasoning process abstracted from specific inference relations or knowledge bases. Moreover, a domain description is formalized. A number of properties of a <b>functionality</b> description are identified and related to properties of the domain. It is established under which conditions a <b>functionality</b> can be implemented by an inference relation and a knowledge base...|$|R
5000|$|... 9. The Necessity of Expanding the <b>Functionality</b> of <b>Functionality</b> in Religion Studies. Hamshahri Newspaper ...|$|R
40|$|In the {{universal}} composability framework, we define an ideal <b>functionality</b> for blind signatures, {{as an alternative}} to a <b>functionality</b> recently proposed by Fischlin. Fischlin proves that his <b>functionality</b> cannot be realized in the plain model, but this result does not apply to our <b>functionality.</b> We show that our <b>functionality</b> is realized in the plain model by a blind signature protocol if and only if the corresponding blind signature scheme is secure with respect to blindness and non-forgeability, as defined by Juels, Luby and Ostrovsky...|$|R
25|$|It is {{a general}} {{description}} of what the product and its <b>functionalities.</b> In addition it will also describe of what components, the product consists and how these are related to other product software already in place. In case of a software update it will for example describe how the previous version of the software is modified by this product. Besides this, it will also describe the requirements needed to run the software product properly. For example what other products and configurations {{need to be in}} place in order to let this product run properly.|$|E
25|$|The {{polymers}} in the PLGA family include poly (lactic acid) (PLA), poly (glycolic acid) (PGA), {{and their}} copolymer poly (lactic-co-glycolic acid) (PLGA). All three polymers {{have been approved}} by the Food and Drug Administration for employment in various devices. These polymers are brittle and they do not have regions for permissible chemical modification; in addition, they degrade by bulk rather than by surface, which is not a smooth and ideal degradation process. In an attempt to overcome the lack of <b>functionalities,</b> free amines have been incorporated into their structures from which peptides can be tethered to control cell attachment and behavior.|$|E
25|$|The {{susceptibility}} of a polymer to degradation {{depends on}} its structure. Epoxies and chains containing aromatic <b>functionalities</b> are especially susceptible to UV degradation while polyesters are susceptible to degradation by hydrolysis, while polymers containing an unsaturated backbone are especially susceptible to ozone cracking. Carbon based polymers {{are more susceptible to}} thermal degradation than inorganic polymers such as polydimethylsiloxane and are therefore not ideal for most high-temperature applications. High-temperature matrices such as bismaleimides (BMI), condensation polyimides (with an O-C-N bond), triazines (with a nitrogen (N) containing ring), and blends thereof are susceptible to polymer degradation in the form of galvanic corrosion when bare carbon fiber reinforced polymer CFRP is in contact with an active metal such as aluminium in salt water environments.|$|E
5000|$|Monetization: <b>functionality</b> {{to support}} {{charging}} {{for access to}} commercial APIs. This <b>functionality</b> can include support for setting up pricing rules, based on usage, load and <b>functionality,</b> issuing invoices and collecting payments including multiple types of credit card payments.|$|R
25|$|Non-execute <b>functionality</b> {{has also}} been present for other non-x86 {{processors}} supporting this <b>functionality</b> for many releases.|$|R
50|$|With LTE {{scenario}} the GGSN <b>functionality</b> {{moves to}} SAE gateway (with SGSN <b>functionality</b> working in MME).|$|R
