629|601|Public
5000|$|Sunil R Das, Chittoor V Ramamoorthy, Mansour H Assaf, Emil M Petriu, Wen-Ben Jone, and Mehmet Sahinoglu. <b>Fault</b> <b>simulation</b> and {{response}} compaction in full scan circuits using HOPE. IEEE T. Instrumentation and Measurement (...) , 54(6):2310-2328, 2005.|$|E
50|$|Pseudorandom test {{generation}} is the simplest method of creating tests. It uses a pseudorandom number generator to generate test vectors, and relies on logic simulation to compute good machine results, and <b>fault</b> <b>simulation</b> {{to calculate the}} fault coverage of the generated vectors.|$|E
40|$|Industrial {{circuit designs}} {{commonly}} contain three-state elements, such as buses and drivers, transmission gates, and bidirectional I/O. A 5 -valued fast <b>fault</b> <b>simulation</b> method and a 4 -valued parallel pattern version {{that can handle}} these circuits are presented. Results demonstrate {{the effectiveness of the}} proposed methods in the presence of three-state elements, and show but a small performance degradation compared to 2 - or 3 -valued <b>fault</b> <b>simulation.</b> Keywords: <b>Fault</b> <b>simulation,</b> three-state circuits, bidirectional I/O. 1 Introduction State-of-the-art combinational/full-scan ATPG systems [1] [2] commonly incorporate fast <b>fault</b> <b>simulation</b> (FFS) algorithms [7]Γ[10], for fault dropping, random test generation, and test set compaction by reverse <b>fault</b> <b>simulation.</b> These algorithms exploit circuit structure characteristics (fanout free regions, dominators, independent branches) to minimize the amount of explicit <b>fault</b> <b>simulation</b> carried out. Often they exploit the bitwise parallel compu [...] ...|$|E
30|$|Based on the {{proposed}} simulation model in Section 3, large numbers of <b>fault</b> <b>simulations</b> are performed at different locations of the system model. The typical simulation results for three-phase faults and phase-to-phase faults at location f 4 are presented in this section.|$|R
40|$|As {{the demand}} on Computer-Aided Testing Systems (CATS) —Automatic Test Pattern Generation (ATPG) and logic and <b>fault</b> <b>simulations</b> {{as well as}} {{testability}} analysis—increases and the choice becomes more varied, a need to compare {{the merits of the}} different systems emerges. Benchmark circuits are used to carry out the comparisons...|$|R
40|$|This paper {{focuses on}} fault {{tolerant}} control allocation for overactuated systems with actuator dynamics. The proposed scheme for fault detection and isolation {{is based on}} unknown input observers and the main contribution of the paper consists in the presentation of a finite-time control reconfiguration technique which provides a successful recovering of system performances in spite of actuator <b>faults.</b> <b>Simulation</b> results support theoretical development...|$|R
40|$|The {{evaluation}} of analogue and mixed-signal test strategies and design for test techniques requires the <b>fault</b> <b>simulation</b> of analogue circuits. The {{need to reduce}} <b>fault</b> <b>simulation</b> time for {{has resulted in the}} research into concurrent analogue <b>fault</b> <b>simulation,</b> analogous to digital <b>fault</b> <b>simulation.</b> Concurrent simulation can reduce the simulation time by avoiding repeated construction of the circuit matrix. Fault collapsing and dropping is also desirable. A robust, fast algorithm for concurrent analogue <b>fault</b> <b>simulation</b> is presented in this paper. Three techniques for the automatic dropping of faults have been addressed: a robust closeness measurement technique; a late start rule and an early stop rule. The algorithm has been successfully applied to both DC and transient analyses. A significant increase in the speed of analogue <b>fault</b> <b>simulation</b> has been obtained. 1...|$|E
40|$|This paper {{presents}} a <b>fault</b> <b>simulation</b> environment which accepts pure switch level or mixed switch/RT level {{descriptions of the}} design under test. Switch level fault injection strategies for the stuckat, transition and logic bridge models are presented. A <b>fault</b> <b>simulation</b> algorithm is presented, along with design issues and optimizations. The <b>fault</b> <b>simulation</b> algorithm places no restrictions on the circuit styles used to implement designs. Mixed level simulation issues are discussed. <b>Fault</b> <b>simulation</b> performance numbers on large industrial benchmarks are reported. 1...|$|E
40|$|<b>Fault</b> <b>simulation</b> is an {{essential}} tool for developing test patterns for circuits. Because the potential number of faults in a circuit is potentially very large, computational efficiency is an important consideration. In the digital domain, concurrent <b>fault</b> <b>simulation</b> is well-established as an efficient tool. For analogue circuits, <b>fault</b> <b>simulation</b> is often performed by repeated insertion of possible faults and resimulation of the circuit. Consequently, methods for efficient concurrent analogue <b>fault</b> <b>simulation</b> are attracting attention. A review of existing methods of concurrent analogue <b>fault</b> <b>simulation</b> shows that most {{are based on a}} similar fundamental perturbation of the original fault-free circuit equations, although the methods differ in the procedure applied after the circuit equations are formulated. We develop here a comprehensive set of element stamps, describing faulty elements, enabling effective and routine equation formulation for faulty circuits. These may be used no matter what method of <b>fault</b> <b>simulation</b> is later applied. These stamps are used in a new technique for concurrent analogue <b>fault</b> <b>simulation,</b> based on modified nodal analysis. A significant improvement in efficiency, compared with other methods, is demonstrated...|$|E
40|$|Abstract：In this paper, {{a series}} of {{recursive}} fault-tolerant (FT) fitting algorithms are built for the trajectories of a SISO process when some pulse-type faults arise from output components of the process. Based on the recursive FT fitting, {{a series of}} practical program are given to online detect pulse-type faults in process and to identify magnitudes of these <b>faults.</b> <b>Simulation</b> results show that these new methods are efficient. Copyright © 2006 IFA...|$|R
40|$|Abstract. MEMS {{structures}} rendered defective by {{particles are}} modeled at the schematic-level using existing models of fault-free MEMS primitives within the nodal simulator NODAS. We have compared {{the results of}} schematic-level <b>fault</b> <b>simulations</b> with low-level finite element analysis (FEA) and demonstrated the efficacy of such an approach. Analysis shows that NODAS achieves a 60 X speedup over FEA with little accuracy loss in modeling defects caused by particles...|$|R
40|$|This letter {{describes}} the transient stability {{analysis of a}} 10 -kV distribution network with wind generators, microturbines, and CHP plants. The network being modeled in Matlab/Simulink takes into account detailed dynamic models of the generators. <b>Fault</b> <b>simulations</b> at various locations are investigated. For the studied cases, the critical clearing times are calculated. Results obtained from several case studies are presented and discussed. Electrical Sustainable EnergyElectrical Engineering, Mathematics and Computer Scienc...|$|R
40|$|Abstract. This paper {{describes}} an environment to accelerate <b>fault</b> <b>simulation</b> by hardware emulation on FPGA. <b>Fault</b> <b>simulation</b> {{is an important}} subtask in test pattern generation and it is frequently used throughout the test generation process. The problems associated with <b>fault</b> <b>simulation</b> of digital circuits are explained. The proposed approach allows simulation speed-up of 40 to 500 times {{as compared to the}} state-of-the-art in software-based <b>fault</b> <b>simulation.</b> Based on the experiments, it can be concluded that it is beneficial to use emulation for circuits that require large numbers of test vectors while using simple but flexible algorithmic test vector generating circuits, e. g. built-in self-test. Key words: <b>fault</b> <b>simulation,</b> acceleration, emulation, field-programmable logic. 1...|$|E
40|$|The {{evaluation}} of testing and design for test strategies for analogue and mixed-signal circuits requires efficient analogue <b>fault</b> <b>simulation.</b> By analogy with digital <b>fault</b> <b>simulation,</b> concurrent analogue <b>fault</b> <b>simulation</b> {{has been proposed}} to reduce simulation times by avoiding repeated construction of the circuit matrix. Simulation efficiency can be improved by dropping non-convergent faults and by fault collapsing. A robust, fast algorithm for concurrent analogue <b>fault</b> <b>simulation</b> is presented in this paper. Three techniques for automatic fault collapsing and dropping are addressed: a robust closeness measurement technique; a late start rule and an early stop rule. The algorithm has been successfully applied to both DC and transient analyses. A {{significant increase in the}} speed of analogue <b>fault</b> <b>simulation</b> has been obtained. 1...|$|E
40|$|Abstract—Efficient dc <b>fault</b> <b>simulation</b> of {{nonlinear}} analog circuits {{is addressed}} in this paper. Two techniques, one-step relaxation and adaptive simulation continuation, are proposed. By one-step relaxation, only one Newton–Raphson iteration is performed for each faulty circuit with the dc solution of the good circuit as the initial point, and the approximate solution is used for detecting the fault. The paper shows experimentally and justifies theoretically that approximate dc <b>fault</b> <b>simulation</b> by one-step relaxation can accomplish almost the same fault coverage as exact dc <b>fault</b> <b>simulation.</b> Exact dc <b>fault</b> <b>simulation</b> by adaptive simulation continuation is first to order faulty circuits {{based on the results}} of one-step relaxation, and then to use the solution of the previous faulty circuit as the initial point for the Newton–Raphson iteration of the next faulty circuit. Experiments on a set of 29 MCNC Circuit Simulation and Modeling Workshop bench-mark circuits show that exact dc <b>fault</b> <b>simulation</b> by adaptive simulation continuation can achieve an average speedup of 4. 4 and as high as 15 over traditional stand-alone <b>fault</b> <b>simulation.</b> Index Terms—Analog testing, dc <b>fault</b> <b>simulation,</b> fault cover-age, fault ordering, first-order approximation, simulation continuation, Newton–Raphson iteration. I...|$|E
30|$|In this paper, single inverter-based DG {{is modeled}} firstly based on RTDS. Then, a {{simulation}} {{model for a}} distribution network with two inverter-based DGs is developed. After that, <b>fault</b> <b>simulations</b> are performed using the simulation model {{and the results are}} analyzed briefly. Theoretical analyses are conducted to justify the correctness of simulation results and the effectiveness of control strategy for inverters under fault conditions. A brief summary is presented in the end.|$|R
40|$|International audienceThis paper {{presents}} tLIFTING, an open-source fault simulator able {{to perform}} both logic and <b>fault</b> <b>simulations</b> for stuck-at <b>faults,</b> Single/Multiple Event Transient (SET/MET), and Single Event Upset (SEU) and Multiple Bit Upset (MBU) on digital circuits described in Verilog. tLIFTING allows delay-annotated simulation and it can deals with Standard Delay Format (SDF) files. It provides several features for accurate selection of fault location, time and period, with extensive log results meaningful for research purposes...|$|R
40|$|Abstract—This letter {{describes}} the transient stability {{analysis of a}} 10 -kV distribution network with wind generators, microturbines, and CHP plants. The network being modeled in Matlab/Simulink takes into account detailed dynamic models of the generators. <b>Fault</b> <b>simulations</b> at various locations are investigated. For the studied cases, the critical clearing times are calculated. Results obtained from several case studies are presented and discussed. Index Terms—Critical clearing time, distributed generation, dis-tribution network, power system protection. I...|$|R
40|$|Abstract- This paper {{demonstrates}} how <b>fault</b> <b>simulation</b> of building blocks found in data-path architectures can be per-formed extremely efficiently and accurately by {{taking advantage of}} their simple functional models and structural regularity. This technique can be used to accelerate the simulation of those blocks in virtually any <b>fault</b> <b>simulation</b> environment, resulting in <b>fault</b> <b>simulation</b> algorithms that can perform fault grading in a very demanding BIST environment. I...|$|E
40|$|<b>Fault</b> <b>simulation</b> and {{testability}} {{analysis are}} major concerns in design flows employing intellectual-property (IP) protected virtual components. In this {{paper we propose}} a paradigm for the <b>fault</b> <b>simulation</b> of IP-based designs that enables testability analysis without requiring IP disclosure, implemented within the JavaCAD framework for distributed design [1, 2]. As a proof of concept, stuck-at <b>fault</b> <b>simulation</b> has been performed for combinational circuits containing virtual components. 1...|$|E
40|$|The main {{difficulty}} in generating test patterns for analogue and mixed-signal circuits is <b>fault</b> <b>simulation.</b> Analogue <b>fault</b> <b>simulation</b> is much {{slower than the}} digital equivalent. Two of the techniques {{to speed up the}} analogue <b>fault</b> <b>simulation</b> process are: fault dropping/collapsing, in which faults that have similar circuit responses compared with the fault-free circuit response and/or with another faulty circuit response are considered equivalent; and behavioural/macro modelling, whereby parts of the circuit are modelled at a more abstract level, therefore reducing the complexity and the simulation time. This paper discusses behavioural/macro modelling in order to speed-up <b>fault</b> <b>simulation</b> for analogue circuits. I...|$|E
40|$|International audienceFault {{diagnosis}} for a closed-loop controlled aeronautical {{system is}} considered. The {{geometry of the}} problem, the nonlinear model of the aircraft and two guidance laws are described. A new approach to perform fault detection, based {{on the study of}} the control signals, is then introduced. The method proposed allows the detection and isolation of actuator <b>faults.</b> <b>Simulation</b> results with measurement uncertainty illustrate the relevance of the approach. The influence of the guidance law and perspectives are discussed...|$|R
40|$|This paper {{presents}} a fault model, called node-break fault model, to effectively account for broken connections inside CMOS circuits. The proposed model is very general since it allows to generate test vectors for broken connections that cannot be detected {{by means of}} test sequences for stuck-open faults. In addition, the detection of a broken connection in a node ensures the detection of all stuck-open faults of the transistors connected to that node, thus superseding the stuck-open fault model. The model {{can be used to}} derive tests and to perform <b>fault</b> <b>simulations</b> independent of the actual layout of the circuit. Conditions for the detection of broken connections are derived from electrical considerations (aimed at verifying the presence of electrical continuity between the terminals of transistors connected to a node) while the minimum number of input vectors to test for broken connections in a node is determined by graph theory. <b>Fault</b> <b>simulations</b> performed on benchmark circuits using test sequences oriented to the detection of stuck-open faults show their inadequacy in detecting node-break faults, thus claiming for considering such a fault model in the test pattern generatio...|$|R
40|$|A {{low-cost}} {{on-line test}} scheme for digital filters that additionally provides an off-line BIST solution is proposed. The scheme utilizes an invariant {{of the digital}} filter in order to detect on-line possible circuit malfunctions. The on-line checking hardware is shared with off-line BIST. The analysis performed indicates that exact 100 % fault secureness is attained when the digital filter is designed according to design criteria that we identify in the paper. Furthermore, <b>fault</b> <b>simulations</b> show near 100 % fault coverage for off-line BIST...|$|R
40|$|A novel {{method for}} {{analogue}} high-level <b>fault</b> <b>simulation</b> (HLFS) using linear and non-linear high-level fault models is presented. Our approach uses automated fault model synthesis and automated model selection for <b>fault</b> <b>simulation.</b> A speed up compared with transistor-level <b>fault</b> <b>simulation</b> can be achieved, whilst retaining both behavioural and fault coverage accuracy. The suggested method was verified in detail using short faults in a 10 k state variable bandpass filter...|$|E
40|$|Described is {{a method}} of {{parallel}} pattern <b>fault</b> <b>simulation</b> for synchronous sequential circuits {{that is based on}} parallel pattern single fault propagation for combinational circuits as described in [1]. This method of <b>fault</b> <b>simulation</b> was proposed in two independent works published in 1991 [2] and 1992 [3] that were a mere three months apart. In this paper this method shall be referred to as PARIS (PARallel Iterative Simulator) as it is known in [2]. The method exploits the inherent parallelism present in modern microprocessors to speed up <b>fault</b> <b>simulation</b> times using clever techniques and utilizing methods to lookahead during <b>fault</b> <b>simulation</b> to further decrease total simulation time...|$|E
40|$|A new <b>fault</b> <b>simulation</b> {{method is}} {{presented}} here. The method relies on simulation cycle timing of event-driven simulators (delta delays in VHDL). This timing {{is used for}} propagation of faulty values in faulty sections of a circuit. This method is based on concurrent <b>fault</b> <b>simulation</b> and is implemented in VHDL. VHDL gate models {{that are capable of}} propagating faults in fault queues perform this <b>fault</b> <b>simulation.</b> Gate models process their fault queues and propagate them in delta time units. In these models, gates with faulty input values are expanded in delta time to evaluate faulty output values and propagate them to other sections of the circuit. Using ISCAS benchmarks, a performance improvement of up to 500 X over serial <b>fault</b> <b>simulation</b> has been obtained. This work is useful for <b>fault</b> <b>simulation</b> of post-synthesis VHDL outputs. <b>Fault</b> <b>simulation</b> methodology The VHDL-based <b>fault</b> <b>simulation</b> method discussed here is referred to as Sequentially Propagated Concurrent <b>Fault</b> <b>Simulation</b> (SPC-FS). Implementing <b>fault</b> <b>simulation</b> in an event-driven simulation environment like VHDL requires circuit components or primitive gates to be sensitive to faults on their inputs as they are sensitive to changing like values in an ordinary simulation. A primitive gate that receives a fault on its input propagates the fault to its output unless it is masked by its good value or by faults on gate’s other inputs (the latter situation occurs when gate is on a reconvergent point of a fanout). Each gates receives a list of faults on its inputs and processes each fault independently and sends a list of propagatable faults to its output. These lists are referred to as fault queues. A queue contains a begin marker (that also contains the line good value), fault elements, and an end marker. A fault element consists of a faulty value and fault’s unique id. In addition to propagating faults at its inputs, a <b>fault</b> <b>simulation</b> gate model adds its own faults (the faults that are injected on gate’s inputs) to the queue of faults on its output. This i...|$|E
40|$|In {{this paper}} we show, that the {{statistical}} qualities of cryptographic basic operations {{are the reason}} for the excellent pseudorandom testability of cryptographic processor cores. For the examination typical basic operations of modern cryptographic algorithms are categorized in classes and analyzed regarding their pseudorandom properties. Exemplary, a global BIST for a cryptographic processor core based on the symmetric block encryption algorithm 3 WAY is developed and analyzed. Finally, the quality of the proposed test architecture is determined by <b>fault</b> <b>simulations.</b> 1...|$|R
40|$|This paper {{describes}} {{the flow of}} defect-oriented testing from beginning to end, based on the industrial test development for a commercial mixed-signal class-D amplifier. A software tool called DOTSS (Defect-Oriented Test Simulation System) was used to perform the <b>fault</b> <b>simulations.</b> The greatest benefit of using defect-oriented testing {{turns out to be}} that it gives more insight in the underlying fault mechanisms. This information can be used to generate complementary tests or to take design-for-testability measures to achieve a high fault coverag...|$|R
40|$|Abstract A model-based fault {{tolerant}} control approach for hybrid linear dynamic systems is proposed in this paper. The proposed method, {{taking advantage of}} reliable control, can maintain {{the performance of the}} faulty system during the time delay of fault detection and diagnosis (FDD) and fault accommodation (FA), which can be regarded as the first line of defence against sensor <b>faults.</b> <b>Simulation</b> results of a three-tank system with sensor fault are given to show the efficiency of the method. Key words Hybrid system, bond graph, reliable control, {{fault tolerant}} control...|$|R
40|$|<b>Fault</b> <b>simulation</b> for {{sequential}} circuits numbers {{among the}} highly compute-intensive tasks in the integrated circuit design process. In {{the quest for}} rapid design turn-around, parallelization has been proposed to speed <b>fault</b> <b>simulation.</b> In this paper, we introduce ProperPROOFS, a parallel extension of the PROOFS <b>fault</b> <b>simulation</b> package. ProperPROOFS exploits parallelism based on fault partitioning, incorporating static and dynamic partitioning schemes and a new asynchronous and distributed method of fault redistribution. We present results for circuits in the ISCAS 89 benchmark set across several parallel architectures. A detailed evaluation of results provides new insight into the use of fault partitioning to parallelize high performance serial <b>fault</b> <b>simulation</b> applications. 1 Introduction <b>Fault</b> <b>simulation</b> is {{used to determine the}} set of faults in a circuit that are covered by a set of test vectors. It is typically used during automatic test pattern generation in order to minimize te [...] ...|$|E
40|$|One of {{the main}} {{requirements}} for generating test patterns for analog and mixed-signal circuits is fast <b>fault</b> <b>simulation.</b> Analog <b>fault</b> <b>simulation</b> is much slower than the digital equivalent. This {{is due to the}} fact that digital circuit simulators use less complex algorithms compared with transistor-level simulators. Two of the techniques to speed up analog <b>fault</b> <b>simulation</b> are: fault dropping/collapsing, in which faults that have similar circuit responses compared with the fault-free circuit response and/or with another faulty circuit response are considered equivalent; and behavioral/macro modeling, whereby parts of the circuit are modeled at a more abstract level, therefore reducing the complexity and the simulation time. This paper discusses behavioral fault modeling to speed-up <b>fault</b> <b>simulation</b> for analog circuits...|$|E
40|$|The growing {{size and}} {{complexity}} of VLSI circuits is creating {{a need for more}} efficient design automation tools. As the performance of general-purpose tools reaches practical limitations, specialized solutions are sought to achieve higher performance by targeting classes of circuits and exploring features particular to them. Circuits based on data-path architectures have proliferated due to the widespread use of embedded cores and high-performance computing systems, such as those used for digital signal processing (DSP). Furthermore, the growing acceptance of architectural-level synthesis as an effective design methodology is expected to significantly change the design paradigm for computing circuits. Consequently, an increasing number of circuits containing data paths will require fast <b>fault</b> <b>simulation</b> to be performed at the register transfer (RT) level to allow early estimates for fault coverage before the circuit is completely synthesized. Furthermore, efficient fault simulators are often required when designing tests for those large circuits. In addition, emerging built-in self test techniques can require <b>fault</b> <b>simulation</b> to always be performed for the entire fault list, i. e. with no fault dropping, which is very computationally intensive. A novel, highly efficient <b>fault</b> <b>simulation</b> technique is proposed for circuits based on data-path architectures. This technique performs functional <b>fault</b> <b>simulation</b> of arithmetic and logic building blocks commonly found in those circuit. It exploits the functionality and structural regularity of those blocks such that the output of a faulty module can be computed functionally, but with gate-level accuracy. This methodology is implemented in a hierarchial <b>fault</b> <b>simulation</b> framework that exploits the behavioral models to efficiently propagate faults through fault-free modules. Consequently, structural simulation is reduced or eliminated without loss of accuracy. Furthermore, since functional <b>fault</b> <b>simulation</b> is performed on the building blocks, it is possible to perform <b>fault</b> <b>simulation</b> of a circuit at the RT level, which is not possible with gate-level simulators. Analysis and experiments show that the computational requirements of <b>fault</b> <b>simulation</b> as a function of circuit size increase at a slower rate for the proposed functional technique than for gate-level <b>fault</b> <b>simulation.</b> Therefore, the efficiency of the functional method compared to structural simulation increases for larger data-path blocks. Furthermore, analysis is performed to determine the benefits of incorporating a variant of the concurrent <b>fault</b> <b>simulation</b> methodology into this framework. Conditions are presented depicting when concurrent simulation should be used. Experimental results show that the speedup over gate-level <b>fault</b> <b>simulation</b> is in most cases two to three orders of magnitude, making it feasible to perform <b>fault</b> <b>simulation</b> of large circuits for a large number of vectors even with no fault dropping...|$|E
40|$|In {{this work}} {{essential}} {{parts of a}} DRAM circuit are studied {{with respect to their}} transient behavior in the presence of defects. A certain dynamic failure mechanism resulting in timing mismatches of signals is addressed. The necessary fault lists for the analog <b>fault</b> <b>simulations</b> take the circuit's layout geometry into consideration. The fault lists are generated with the aid of parasitic element extraction tools. The establishment of a mapping between the circuit layout and the electrical network reveals new facts about the robustness of design and the efficiency of existing test solutions...|$|R
40|$|This paper expands {{previously}} developed {{assembly fixture}} fault diagnosis methodology (Ceglarek and Shi, 1996) {{by considering the}} impact of measurement noise on the diagnostic results. The proposed solution provides a new analytical tool to address the diagnosability issue during the assembly process design stage. An evaluation of fault diagnosis index {{as a function of}} noise, fixture geometry, and sensor location is presented. The index is derived from the general class of covariance matrices describing tooling <b>faults.</b> <b>Simulation</b> based on the real fixture is presented to illustrate the proposed method...|$|R
40|$|Abstract—We {{propose a}} low {{complexity}} algorithm to diagnose non-classical faults in combinational circuits using classic single stuck-at faults as surrogates. The algorithm {{is based on}} effectcause analysis and uses information from both passing and failing patterns as well as knowledge about the outputs where error is detected or not detected. A set of candidate single stuck-at faults is identified after performing minimal <b>fault</b> <b>simulations.</b> Considering that a real defect is hardly ever a single stuck-at fault, the diagnosed set is called “the surrogate”. The proposed procedure was evaluated by experiments on ISCAS 85 benchmark circuits and its effectiveness is demonstrated...|$|R
