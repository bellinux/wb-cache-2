27|244|Public
25|$|Automatic {{synchronization}} can {{be turned}} off in favor of manually copying individual songs or complete playlists. iTunes supports copying music to an iPod; however, only music and videos purchased from the iTunes Store can be transferred from the iPod back to iTunes. This functionality was added after third-party software was written which allowed users to copy all content back to their computer. It is also possible to copy from the iPod using ordinary Unix command line tools, or by enabling <b>hidden</b> <b>file</b> viewing in Windows Explorer, then copying music from the iPod drive to a local disk for backup. Doing this can be confusing because the files are arranged {{in such a way}} that their folders and (depending on iPod and iTunes versions) file names are seemingly picked at random as they are put on the iPod. It is worth noting, however, that the files (along with their embedded title and artist information) remain unchanged. It is therefore less confusing to let iTunes reimport, reorganize, and rename all of the files after they are backed up.|$|E
5000|$|In Unix-like {{operating}} systems, dot-file {{is synonymous}} with <b>hidden</b> <b>file.</b>|$|E
5000|$|... macOS stores {{resource}} {{forks and}} metadata (file attributes, other ADS) using AppleDouble format in a <b>hidden</b> <b>file</b> {{with a name}} constructed from the owner filename prefixed with [...] "", and Finder stores some folder and file metadata in a <b>hidden</b> <b>file</b> called [...] "" [...] (but note that Finder uses [...] even on macOS' native filesystem, HFS+).|$|E
50|$|All these <b>files</b> may be <b>hidden</b> <b>files</b> in a {{directory}} (with the directory name being {{the name of}} the mailbox). Thus {{a directory}}with gigabytes of mail in it may appear to be empty if examined with tools that don't show <b>hidden</b> <b>files.</b> This is a common source of confusion for system administrators encountering MIX for the first time.|$|R
50|$|The {{injected}} DLLs hooks the Windows API {{functions to}} <b>hide</b> <b>files,</b> processes and registry.|$|R
50|$|AFX Windows Rootkit 2003 is a {{user mode}} rootkit that <b>hides</b> <b>files,</b> {{processes}} and registry.|$|R
50|$|The 'dot' (period or full stop) {{before the}} file name makes it a <b>hidden</b> <b>file</b> in Unix based environments.|$|E
50|$|It is also {{mentioned}} in the video game Assassin's Creed IV Black Flag as a <b>hidden</b> <b>file</b> found in a hacked computer at Abstergo Entertainment.|$|E
5000|$|Cora Shotwell Grahm’s wife. While {{working for}} American Milk Company {{she finds a}} <b>hidden</b> <b>file</b> cabinet {{containing}} documents that prove the company is stealing from farmers.|$|E
5000|$|Maximal {{supported}} <b>hidden</b> <b>file's</b> size is 2Gb, {{number of}} cover {{images in the}} set up to 65536 ...|$|R
5000|$|...DS_Store {{files are}} {{included}} in archives, such as ZIP, created by OS X users, along with other <b>hidden</b> <b>files</b> and directories.|$|R
5000|$|Sum of {{directories}} (-s) in kilobytes (-k):$ du -sk *152304 directoryOne1856548 directoryTwoSum of directories (-s) in human-readable format (-h : Byte, Kilobyte, Megabyte, Gigabyte, Terabyte and Petabyte):$ du -sh *149M directoryOne1.8G directoryTwodisk {{usage of}} all subdirectories and <b>files</b> including <b>hidden</b> <b>files</b> within the current directory (sorted by filesize) : $ du -sk [...]!.* *| sort -ndisk usage of all subdirectories and <b>files</b> including <b>hidden</b> <b>files</b> within the current directory (sorted by reverse filesize) : $ du -sk [...]!.* *| sort -nr ...|$|R
5000|$|In MS-DOS {{and other}} DOS systems, file {{directory}} entries include a <b>Hidden</b> <b>File</b> attribute which is manipulated using the attrib command. Use the command line command [...] {{to display the}} files with the attribute of hidden.|$|E
5000|$|Currently, OS X {{supports}} resource forks on Windows SMB shares {{by creating}} a <b>hidden</b> <b>file</b> in the same directory with the data fork file, with the characters [...] "._" [...] {{at the beginning of}} the file name.|$|E
5000|$|Most special folders in Windows (such as Briefcase folders) have a <b>hidden</b> <b>file</b> (with [...] "system" [...] attribute) called Desktop.ini. They {{may also}} have Windows Registry entries {{describing}} them. The Desktop.ini for a Briefcase contains the following lines: ...|$|E
30|$|To further improve {{efficiency}} and reliability, Pang et al. designed another steganographic file system (Pang et al. 2003; 2004). They use a bitmap {{to mark the}} blocks {{being used by the}} <b>hidden</b> <b>files,</b> and thus eliminate the need of storing multiple copies of a file, alleviating the reliability issues and I/O inefficiencies. However, the adversary may be able to identify existence of <b>hidden</b> <b>files,</b> because the <b>hidden</b> blocks, being marked as used, do not possess a directory record. Three approaches are used to mitigate the aforementioned compromise. First, a few blocks, which do not store hidden data, are abandoned and marked as being used during initialization. Second, when the system creates a new file, several additional blocks are allocated and filled with random noise. Third, to prevent adversaries from identifying whether a block stores hidden data, the system maintains a few dummy <b>hidden</b> <b>files</b> and periodically updates them in the background. These mitigation approaches however, increase overhead of disk space usage.|$|R
40|$|Abstract. The goal of Steganographic File Systems (SFSs) is {{to protect}} users from {{coercion}} attacks by providing plausible deniability {{on the existence of}} <b>hidden</b> <b>files.</b> We consider an adversary who can monitor changes in the file store and use this information to look for <b>hidden</b> <b>files</b> when coercing the user. We outline a high-level SFS architecture that uses a local mix to relocate files in the remote store, and thus prevent known attacks [TDDP 07] that rely on low-entropy relocations. We define probabilistic metrics for unobservability and (plausible) deniability, present an analytical framework to extract evidence of <b>hidden</b> <b>files</b> from the adversary’s observation (before and after coercion,) and show in a experimental setup how this evidence can be used to reduce deniability. This work is a first step towards understanding and addressing the security requirements of SFSs operating under the considered threat model, of relevance in scenarios such as remote stores managed by semi-trusted parties, or distributed peer-to-peer SFSs. ...|$|R
5000|$|...a lists all {{files in}} the given directory, {{including}} those whose names start with [...] "." [...] (which are <b>hidden</b> <b>files</b> in Unix). By default, these files {{are excluded from}} the list.|$|R
50|$|Early {{copies of}} the PlayStation version {{contained}} a <b>hidden</b> <b>file</b> called ZZDUMMY.DAT which was an unauthorized copy of the South Park episode Jesus vs. Santa. The file was not actually viewable in game, but could be viewed by placing the disc in a PC. The game was recalled and subsequent versions did not contain the file.|$|E
5000|$|The dot {{command is}} not to be {{confused}} with a dot file, which is a dot-prefixed <b>hidden</b> <b>file</b> or hidden directory. Nor is it to be confused with the [...] notation for running commands, which is simply a relative path pointing to the current directory (notated in Unix as a '.' character, and typically outside of the Path variable).|$|E
5000|$|... macOS {{revived the}} use of AppleDouble; on file systems such as NFS and WebDAV that don't {{natively}} support resource forks, Finder information, or extended attributes, that information is stored in AppleDouble format, with the second file having a name generated by prepending [...] "._" [...] to {{the name of the}} first file (thus, this information acts as a <b>hidden</b> <b>file</b> when viewed from a non-Apple Unix-based operating system).|$|E
5000|$|Hidden: When set, {{indicates}} that the hosting <b>file</b> is <b>hidden.</b> MS-DOS commands like [...] and Windows apps like File Explorer do not show <b>hidden</b> <b>files</b> by default, unless asked to do so.|$|R
50|$|Sun Microsystems {{introduced}} the first {{implementation of a}} stacked, layered file system with copy-on-write, whiteouts (<b>hiding</b> <b>files</b> in lower layers from higher layers), etc. as the Translucent File Service in SunOS 3, circa 1986.|$|R
50|$|Byte and block-level copying offer speed {{advantages}} over traditional file-copying used by most duplication and backup software. It also maintains {{every detail of}} the duplicated device such as icon placement, <b>file</b> permissions, and <b>hidden</b> <b>files</b> that file-copying often misses.|$|R
50|$|Lovelock {{begins to}} {{long for a}} mate, and {{children}} of his own. After learning about a supply of cryogenically frozen capuchin monkeys, he steals a young female monkey and hides her in the low-gravity poles that support the Ark. Unfortunately, she grows up stunted and sickly. Lovelock, realizing that should his actions be discovered he would be put to death, begins to write his story in a <b>hidden</b> <b>file</b> on the Ark's computer.|$|E
5000|$|Mac OS using PC Exchange stores {{its various}} dates, file {{attributes}} and long filenames in a <b>hidden</b> <b>file</b> called [...] "", and resource forks (a common Mac OS ADS) in a subdirectory called [...] "", in every directory {{where they are}} used. From PC Exchange 2.1 onwards, they store the Mac OS long filenames as standard FAT long filenames and convert FAT filenames longer than 31 characters to unique 31-character filenames, which can then be made visible to Macintosh applications.|$|E
5000|$|OS/2 heavily {{depends on}} {{extended}} attributes (EAs) and stores {{them in a}} <b>hidden</b> <b>file</b> called [...] "" [...] in the root directory of the FAT12 or FAT16 volume. This file is indexed by two previously reserved bytes in the file's (or directory's) directory entry at offset 0x14. In the FAT32 format, these bytes hold the upper 16 bits of the starting cluster number of the file or directory, hence {{making it impossible to}} store OS/2 EAs on FAT32 using this method.|$|E
50|$|The {{application}} allows automatic filtering for unwanted <b>files,</b> including <b>hidden</b> <b>files,</b> {{broken and}} recursive symlinks and files not conforming to the Joliet CD standard. Brasero supports multisessions, the Joliet extension and can create {{an image of}} the user's hard drive.|$|R
50|$|Improved filehandling - The Finder was {{enhanced}} to optionally <b>hide</b> <b>file</b> extensions on a per-file basis. The Cocoa API was enhanced {{to allow}} developers to set traditional Mac type and creator information directly without relying on Carbon to do it.|$|R
5000|$|The H-bit {{has often}} been {{misunderstood}} to mean [...] "Hide". In Smart File System (SFS) files and directories with H-bit set are hidden from the system. It is still possible access <b>hidden</b> <b>files</b> but they don't appear in any directory listings.|$|R
50|$|One {{issue that}} Internet {{wiretapping}} {{is yet to}} overcome is that of steganography, whereby a user encodes, or “hides”, one file inside another (usually a larger, dense file like a MP3 or JPEG image). With modern advancements in encoding technologies, the resulting combined file is essentially indistinguishable to anyone attempting to view it, unless they have the necessary protocol to extract the <b>hidden</b> <b>file.</b> US News reported that this technique was commonly used by Osama bin Laden {{as a way to}} communicate with his terrorist cells.|$|E
50|$|Some file systems {{allow the}} journal to grow, shrink and be re-allocated {{just as a}} regular file, while others put the journal in a {{contiguous}} area or a <b>hidden</b> <b>file</b> that is guaranteed not to move or change size while the file system is mounted. Some file systems may also allow external journals on a separate device, such as a solid-state drive or battery-backed non-volatile RAM. Changes to the journal may themselves be journaled for additional redundancy, or the journal may be distributed across multiple physical volumes to protect against device failure.|$|E
5000|$|In computing, {{a hidden}} folder (sometimes hidden directory) or <b>hidden</b> <b>file</b> is a folder or file which {{filesystem}} utilities do not display by default when showing a directory listing. They {{are commonly used}} for storing user preferences or preserving the state of a utility, and are frequently created implicitly by using various utilities. They are not a security mechanism because access is not restricted - usually the intent is simply not [...] "clutter" [...] the display {{of the contents of}} a directory listing with files the user did not directly create.|$|E
5000|$|Box : Performance degrades after 10,000 {{files in}} sync folder. Technical limit of 40,000 files in sync folder. Does not sync [...]tmp files, Outlook PST <b>files,</b> <b>hidden</b> <b>files</b> (<b>hidden</b> folders are synced), or any file or folder with \/*?":<>| in the name.|$|R
40|$|Abstract: In this paper, {{we present}} DupeFile, a simple yet {{critical}} security vulnerability in numerous file systems. By exploiting DupeFile, adversary can store {{two or more}} files with the same name/path, with different contents, inside the same volume. Consequently, data-exfiltration exploiting DupeFile vulnerability, hereafter called DupeFile Hiding, becomes simple and easy to execute. In DupeFile Hiding, a known good file is chosen, whose name serves as the cover for <b>hiding</b> the malicious <b>file.</b> Hence we classify DupeFile Hiding as a steganography technique. This vulnerability can also be exploited for legitimate applications- hiding product license, DRM, etc. DupeFile was first uncovered on a FAT 12 -formatted disk on Win- 98 VM. Nonetheless, the vulnerability exists in numerous file systems, including NTFS, HFS+, and HFS+ Journaled. We have developed two tools: DupeFile Detector and DupeFile Extractor for detecting and recovering <b>hidden</b> <b>files</b> respectively. We have also developed DupeFile Creator for <b>hiding</b> <b>file...</b>|$|R
5000|$|In the GNOME desktop {{environment}} (as {{well as all}} programs written using GLib), filenames {{listed in}} a file named [...]hidden in each directory are also excluded from display. In GNOME's file manager, the keyboard shortcut + enables the display of both kinds of <b>hidden</b> <b>files.</b>|$|R
