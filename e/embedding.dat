10000|10000|Public
5|$|An arc diagram or linear <b>embedding</b> places {{vertices}} of a graph along a line, {{and draws}} {{the edges of}} the graph as semicircles either above or below this line, sometimes also allowing edges to be drawn on segments of the line. This drawing style corresponds to a book <b>embedding</b> with either one page (if all semicircles are above the line) or two pages (if both sides of the line are used), and was originally introduced as a way of studying the crossing numbers of graphs. Planar graphs that do not have two-page book embeddings may also be drawn in a similar way, by allowing their edges to be represented by multiple semicircles above and below the line. Such a drawing is not a book <b>embedding</b> by the usual definition, but has been called a topological book <b>embedding.</b> For every planar graph, it is always possible to find such an <b>embedding</b> in which each edge crosses the spine at most once.|$|E
5|$|Book <b>embedding</b> {{has also}} been {{frequently}} applied in the visualization of network data. Two of the standard layouts in graph drawing, arc diagrams and circular layouts, {{can be viewed as}} book embeddings, and book <b>embedding</b> {{has also been}} applied in the construction of clustered layouts, simultaneous embeddings, and three-dimensional graph drawings.|$|E
5|$|Hassler Whitney {{showed that}} if the graph is 3-connected then the <b>embedding,</b> and thus the dual graph, is unique. By Steinitz's theorem, these graphs are exactly the {{polyhedral}} graphs, the graphs of convex polyhedra. A planar graph is 3-vertex-connected {{if and only if}} its dual graph is 3-vertex-connected. More generally, a planar graph has a unique <b>embedding,</b> and therefore also a unique dual, if and only if it is a subdivision of a 3-vertex-connected planar graph (a graph formed from a 3-vertex-connected planar graph by replacing some of its edges by paths). For some planar graphs that are not 3-vertex-connected, such as the complete bipartite graph , the <b>embedding</b> is not unique, but all embeddings are isomorphic. When this happens, correspondingly, all dual graphs are isomorphic.|$|E
50|$|Some of the {{products}} included General Software <b>Embedded</b> DOS, <b>Embedded</b> DOS-ROM, <b>Embedded</b> DOS-XL and <b>Embedded</b> BIOS.|$|R
50|$|Windows <b>Embedded</b> Industry, {{formerly}} Windows <b>Embedded</b> POSReady and Windows <b>Embedded</b> for Point of Service, is {{an operating}} system subfamily developed by Microsoft {{as part of}} its Windows <b>Embedded</b> family of products. Based on Windows NT; Windows <b>Embedded</b> Industry is designed for use in Industrial Devices such as cash registers, automated teller machines, and self service checkouts. Windows <b>Embedded</b> 8.1 Industry was the last release, with Windows 10 IoT Enterprise superseding both Windows <b>Embedded</b> Industry and Windows <b>Embedded</b> Standard.|$|R
5000|$|Windows <b>Embedded</b> Industry is {{the brand}} of Windows <b>Embedded</b> {{operating}} systems for industry devices and once only for {{point of sale}} systems. This brand {{was limited to the}} Windows <b>Embedded</b> for Point of Service operating system released in 2006, which is based on Windows XP <b>Embedded.</b> Microsoft also has an updated version of Windows <b>Embedded</b> for Point of service, named Windows <b>embedded</b> POSReady 2009. However, Windows <b>Embedded</b> POSReady 7 based on Windows 7 SP1 was released in 2011 which succeeded POSReady 2009. Microsoft has since changed the name of this product from [...] "Windows <b>Embedded</b> POSReady" [...] to [...] "Windows <b>Embedded</b> Industry". Microsoft released Windows <b>Embedded</b> 8 Industry in April 2013, followed by 8.1 Industry in October 2013.|$|R
5|$|However, it is NP-complete {{to find a}} 2-page <b>embedding</b> when {{neither the}} spine {{ordering}} nor the edge partition is known.|$|E
5|$|In graph theory, a book <b>embedding</b> is a {{generalization}} of planar <b>embedding</b> of a graph to embeddings into a book, {{a collection of}} half-planes all having the same line as their boundary. Usually, the vertices of the graph are required to lie on this boundary line, called the spine, and the edges are required to stay within a single half-plane. The book thickness of a graph is the smallest possible number of half-planes for any book <b>embedding</b> of the graph. Book thickness is also called pagenumber, stacknumber or fixed outerthickness. Book embeddings have also been used to define several other graph invariants including the pagewidth and book crossing number.|$|E
5|$|Testing the {{existence}} of a three-page book <b>embedding</b> of a graph, given a fixed ordering of the vertices along the spine of the <b>embedding,</b> has unknown computational complexity: it is neither known to be solvable in polynomial time nor known to be NP-hard. And, although every planar graph has book thickness at most four, it is unknown whether there exists a planar graph whose book thickness is exactly four.|$|E
40|$|Abstract. Because {{the absence}} of {{hardware}} support, almost all of <b>embedded</b> operating system are based on SDRAM in past time. With progress of <b>embedded</b> system hardware, <b>embedded</b> system can provide more substrative supports for <b>embedded</b> operating systems. In this paper we present an operating system microkernel for <b>embedded</b> system which can reside in the SRAM on chip. With progress of <b>embedded</b> system hardware, <b>embedded</b> system can provide more substrative supports for <b>embedded</b> operating systems. In this paper we present an operating system microkernel named SRAMOS for <b>embedded</b> system which can reside in the SRAM on chip. This microkernel can {{make the most of}} low power consumption of SRAM. The experiment results show that this microkernel performs better than the traditional <b>embedded</b> operating systems. ...|$|R
25|$|Windows Embedded: Initially, Microsoft {{developed}} Windows CE as a general-purpose {{operating system}} for every device that was too resource-limited {{to be called a}} full-fledged computer. Eventually, however, Windows CE was renamed Windows <b>Embedded</b> Compact and was folded under Windows Compact trademark which also consists of Windows <b>Embedded</b> Industry, Windows <b>Embedded</b> Professional, Windows <b>Embedded</b> Standard, Windows <b>Embedded</b> Handheld and Windows <b>Embedded</b> Automotive.|$|R
40|$|An <b>embedded</b> {{system is}} a hybrid of {{hardware}} and software, which combines softwareâ€™s flexibility and hardware real-time performance. <b>Embedded</b> systems {{can be considered as}} assemblies of hardware and software components. An Open <b>Embedded</b> System Model (OESM) is currently being developed at NIST to provide a standard representation and exchange protocol for <b>embedded</b> systems and system-level design, simulation, and testing information. This paper proposes an approach to representing an <b>embedded</b> system feature-based model in OESM, i. e., Open <b>Embedded</b> System Feature Model (OESFM), addressing models of <b>embedded</b> system artifacts, <b>embedded</b> system components, <b>embedded</b> system features, and <b>embedded</b> system configuration/assembly. The approach provides an object-oriented UML (Unified Modeling Language) representation for the <b>embedded</b> system feature model and defines an extension to the NIST Core Product Model. The model provides a feature-based component framework allowing the designer to develop a virtual <b>embedded</b> system prototype through assembling virtual components. The framework not only provides a formal precise model of the <b>embedded</b> system prototype but also offers the possibility of designing variation of prototypes whose members are derived by changing certain virtual components with different features. A case study example is discussed to illustrate the <b>embedded</b> system model...|$|R
5|$|At an intersection, the {{incoming}} and outgoing lanes of traffic (including {{the ends of}} pedestrian crosswalks and bicycle lanes as well as lanes for motor vehicles) may be represented as the vertices of a graph, placed on the spine of a book <b>embedding</b> in their clockwise order around the junction. The paths through the intersection taken by traffic to get from an incoming lane to an outgoing lane may be represented as the edges of an undirected graph. For instance, this graph might have an edge from an incoming to an outgoing lane of traffic that both {{belong to the same}} segment of road, representing a U-turn from that segment back to that segment, only if U-turns are allowed at the junction. For a given subset of these edges, the subset represents a collection of paths that can all be traversed without interference from each other if and only if the subset does not include any pair of edges that would cross if the two edges were placed in a single page of a book <b>embedding.</b> Thus, a book <b>embedding</b> of this graph describes a partition of the paths into non-interfering subsets, and the book thickness of this graph (with its fixed <b>embedding</b> on the spine) gives the minimum number of distinct phases needed for a signalling schedule that includes all possible traffic paths through the junction.|$|E
5|$|Book <b>embedding</b> {{also has}} {{applications}} in graph drawing, where {{two of the}} standard visualization styles for graphs, arc diagrams and circular layouts, can be constructed using book embeddings.|$|E
5|$|Book <b>embedding</b> {{may also}} be used to model the {{placement}} of wires connecting VLSI components into the layers of a circuit.|$|E
2500|$|... : Windows 7 is also {{currently}} {{available as a}} form of Windows <b>Embedded</b> to developers, named as Windows <b>Embedded</b> Standard 7 (previously known as Windows <b>Embedded</b> 2011, the newest being Windows <b>Embedded</b> Standard 7 with Service Pack 1). Windows <b>Embedded</b> Standard 7 is supported until October 13, 2020.|$|R
30|$|In summary, G 3 can be <b>embedded</b> more secret information, G 2 is the second, and G 1 is <b>embedded</b> less secret information, <b>embedded</b> {{capacity}} G 3 > G 2 > G 1; H 1 and H 3 can be <b>embedded</b> more secret information, and H 2 is <b>embedded</b> less secret information, <b>embedded</b> capacity H 1 > H 2 and H 3 > H 2.|$|R
40|$|This {{paper is}} {{motivated}} by two essential characteristics of <b>embedded</b> systems: the increasing amount of software that is used for implementing <b>embedded</b> systems {{and the need for}} implementing <b>embedded</b> systems efficiently. As a consequence, <b>embedded</b> software has to be efficient. In the following, we will present techniques for generating efficient machine code for architectures which are typically found in <b>embedded</b> systems. We will demonstrate, using examples, how compilers for <b>embedded</b> processors can exploit features that are found in <b>embedded</b> processors...|$|R
5|$|Every finite graph has a book <b>embedding</b> onto a {{book with}} a large enough number of pages. For instance, it is always {{possible}} to embed each edge of the graph on its own separate page.|$|E
5|$|One of the {{original}} motivations for studying book embeddings involved applications in VLSI design, in which the vertices of a book <b>embedding</b> represent components of a circuit and the wires represent connections between them.|$|E
5|$|From {{a modern}} perspective, {{we say that}} QED is not well defined as a quantum field theory to {{arbitrarily}} high energy. The coupling constant runs to infinity at finite energy, signalling a Landau pole. The problem is essentially that QED appears to suffer from quantum triviality issues. This {{is one of the}} motivations for <b>embedding</b> QED within a Grand Unified Theory.|$|E
50|$|Variants of Windows XP for <b>embedded</b> {{systems have}} {{different}} support policies: Windows XP <b>Embedded</b> SP3 and Windows <b>Embedded</b> for Point of Service SP3 were supported until January and April 2016, respectively. Windows <b>Embedded</b> Standard 2009 and Windows <b>Embedded</b> POSReady 2009 {{continue to receive}} Extended support through January and April 2019, respectively.|$|R
40|$|Advancements in silicon technology, micro-electro-mechanical systems (MEMS), {{wireless}} communications, computer networking, {{and digital}} electronics {{have led to}} the proliferation of <b>embedded</b> systems in a plethora of application domains (e. g., industrial and home automation, automotive, space, medical, defense, etc.). To meet the diverse application requirements of these application domains, novel trends have emerged in <b>embedded</b> systems. Many times, the <b>embedded</b> systems in an application domain are networked together to form a multi-unit <b>embedded</b> system, also referred to as a distributed <b>embedded</b> system, which permits sophisticated applications of greater value as compared to an isolated single-unit <b>embedded</b> system. An emerging trend is to connect these distributed <b>embedded</b> systems via a wireless network instead of a bulky, wired networking infrastructure. Another emerging trend in <b>embedded</b> systems is to leverage multi-core (many-core) architectures to meet the continuously increasing performance demands of many application domains (e. g., medical imaging, mobile signal processing). Both single-unit and multi-unit distributed <b>embedded</b> systems can leverage multi-core architectures for attaining high performance and energy efficiency. The burgeoning of multi-core architectures in <b>embedded</b> systems induces parallel computing in <b>embedded</b> domain, which was previously used predominantly in supercomputing domain only. For both parallel and distributed <b>embedded</b> systems, modeling and optimization at various design levels (e. g., verification, simulation, analysis) is of paramount significance. Considering the short time-to-market for many <b>embedded</b> systems, <b>embedded</b> systems designers often resort to modeling approaches for evaluation of design alternatives in terms of performance, power, reliability, and/or scalability. In this dissertation, we focus on modeling, analysis, and optimization of parallel and distributed <b>embedded</b> systems. To illustrate the modeling and optimization of distributed <b>embedded</b> systems, we present our work on modeling and optimization of <b>embedded</b> sensor nodes in an <b>embedded</b> wireless sensor network (EWSN). We elaborate additional modeling issues in parallel <b>embedded</b> systems by our performance modeling of multi-core <b>embedded</b> systems. Finally, we conduct performance analysis of parallel <b>embedded</b> systems based on symmetric multi-processors (SMPs) and tiled multi-core architectures (TMAs) ...|$|R
50|$|The <b>Embedded</b> Language Island Trigger Hypothesis {{states that}} when an <b>Embedded</b> Language {{morpheme}} appears {{which is not}} permitted under either the Matrix Language Hypothesis or Blocking Hypothesis, it triggers the inhibition of all Matrix Language accessing procedures and completes the current constituent as an <b>Embedded</b> Language island. <b>Embedded</b> Language islands consist only of <b>Embedded</b> Language morphemes and are well-formed by <b>Embedded</b> Language grammar, but they are inserted in the Matrix Language frame. Therefore, <b>Embedded</b> Language islands are under the constraint of Matrix Language grammar.|$|R
5|$|The {{concept of}} duality applies {{as well to}} {{infinite}} graphs embedded in the plane {{as it does to}} finite graphs. However, care is needed to avoid topological complications such as points of the plane that are neither part of an open region disjoint from the graph nor part of an edge or vertex of the graph. When all faces are bounded regions surrounded by a cycle of the graph, an infinite planar graph <b>embedding</b> can also be viewed as a tessellation of the plane, a covering of the plane by closed disks (the tiles of the tessellation) whose interiors (the faces of the <b>embedding)</b> are disjoint open disks. Planar duality gives rise to the notion of a dual tessellation, a tessellation formed by placing a vertex at the center of each tile and connecting the centers of adjacent tiles.|$|E
25|$|A linkless <b>embedding</b> of an {{undirected graph}} is an <b>embedding</b> into {{three-dimensional}} space such that every two cycles have zero linking number. The graphs {{that have a}} linkless <b>embedding</b> have a forbidden minor characterization as the graphs with no Petersen family minor.|$|E
25|$|If a graph has a cycle double cover, {{the cycles}} of the cover {{can be used to}} form the 2-cells of a graph <b>embedding</b> onto a {{two-dimensional}} cell complex. In the case of a cubic graph, this complex always forms a manifold. The graph is said to be circularly embedded onto the manifold, in that every face of the <b>embedding</b> is a simple cycle in the graph. However, a cycle double cover of a graph with degree greater than three may not correspond to an <b>embedding</b> on a manifold: the cell complex formed by {{the cycles of}} the cover may have non-manifold topology at its vertices. The circular <b>embedding</b> conjecture or strong <b>embedding</b> conjecture states that every biconnected graph has a circular <b>embedding</b> onto a manifold. If so, the graph also has a cycle double cover, formed by the faces of the <b>embedding.</b>|$|E
40|$|The work {{deals with}} {{intelligent}} <b>embedded</b> systems, {{particularly with the}} problem of application of expert systems in <b>embedded</b> architectures. It summarizes the state of art and challenges in areas of <b>embedded</b> systems and rule-based expert systems, and gives motivations for implementing expert systems in <b>embedded</b> architectures. We design architecture of expert system and hardware architecture of <b>embedded</b> system suitable for implementation of <b>embedded</b> expert systems. We also devise a universal representation for knowledge bases of <b>embedded</b> expert systems. We propose two methods of hardware acceleration of inference in <b>embedded</b> expert systems. One of the devised methods we experimentally evaluate and claim its remarkable contribution to inference process of expert systems and its suitability for utilization in <b>embedded</b> expert systems. Based on the performed experiments and acquired experience we synthesize a set of rules for implementation of expert systems in <b>embedded</b> architectures which contribute to the problem area of intelligent <b>embedded</b> systems development. The devised method for hardware accelerated inference enables implementation of expert systems even in <b>embedded</b> architectures where it has not been possible with the current state of art, thus facilitating further adoption of intelligent <b>embedded</b> systems...|$|R
50|$|RDM <b>Embedded,</b> {{produced}} by Raima, {{was one of}} the first database management systems to be categorized as an <b>embedded</b> database. According to Raima's definition, the product is <b>embedded</b> in two senses: first, it is <b>embedded</b> within an application, becoming an extension to the application, and second, it is possible to use it in <b>embedded</b> computer/OS or real-time environments because of its small footprint and efficient operation. Its APIs (for C/C++ and SQL) have been designed to support the limited resources of <b>embedded</b> environments. Since its initial release, RDM <b>Embedded</b> has been continually evolving and is currently released as version 12.1. Today Raima produces two products under the product names RDM <b>Embedded.</b>|$|R
40|$|In this paper, we {{consider}} computational aspects of <b>embedded</b> systems and analyze briefly <b>embedded</b> processor characteristics, design styles, and project some possible design trends. We begin the presentation {{with a general}} discussion regarding <b>embedded</b> systems in general and provide a definition of <b>embedded</b> systems. We continue by describing <b>embedded</b> processor characteristics and discuss some future research directions...|$|R
25|$|Related to {{the concept}} of linkless <b>embedding</b> is the concept of knotless <b>embedding,</b> an <b>embedding</b> of a graph {{in such a way that}} none of its simple cycles form a nontrivial knot. The graphs that do not have knotless embeddings include K7 and K3,3,1,1. However, there also exist minimal {{forbidden}} minors for knotless <b>embedding</b> that are not formed (as these two graphs are) by adding one vertex to an intrinsically linked graph.|$|E
25|$|<b>Embedding</b> {{documents}} in notes.|$|E
25|$|<b>Embedding,</b> {{materials}} â€“ after <b>embedding</b> in resin, {{the specimen}} is usually ground and polished to a mirror-like finish using ultra-fine abrasives. The polishing process must be performed carefully to minimize scratches and other polishing artifacts that reduce image quality.|$|E
5000|$|<b>Embedded</b> {{middleware}} provides {{communication services}} and software/firmware integration interface that operates between <b>embedded</b> applications, the <b>embedded</b> operating system, and external applications.|$|R
40|$|Abstract. The <b>embedded</b> {{file system}} is an {{important}} part of <b>embedded</b> operating system. Due to the particularity of <b>embedded</b> devices storage medium, the instability of power supply and the security of mobile storage, the <b>embedded</b> file system has increasingly obvious importance in the <b>embedded</b> operating system. Based on the analysis of the realization plan of traditional Li ~ file system and several current popular <b>embedded</b> file systems, the paper proposed the realization plan of <b>embedded</b> Linux file system. The paper took the IntelDBPXA 250 experiment and development platform as the hardware platform. The main part of the paper described the realization of one <b>embedded</b> Linux operating system on the hardware platform, and laid the background for later file system realization. Then, this paper analyzed the design logic of the three levels, VFS, JFFSZ and MTD, and proposed the overall design frame of <b>embedded</b> file system. Afterwards, the paper desc ribed the practice details of Flash file system based on MTD equipment in <b>embedded</b> Linux. Considering the limitation of <b>embedded</b> devices storage space, on the basis of the <b>embedded</b> Linux file system, the paper simplified the corresponding virtual file systems and physical file systems that construct the file system, and made them more satisfactory to the requirement of <b>embedded</b> equipment...|$|R
50|$|EEM is {{a member}} of a family of <b>embedded</b> {{management}} technologies in Cisco IOS including SNMP, NetFlow, IP SLA, Web Services Management Agent, Syslog, ESM (<b>Embedded</b> Syslog Manager), ERM (<b>Embedded</b> Resource Manager), EMM (<b>Embedded</b> Menu Manager), Tcl and Service Diagnostics.|$|R
