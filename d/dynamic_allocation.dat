784|2744|Public
2500|$|The {{original}} {{source code}} {{for the current}} TeX software is written in WEB, a mixture of documentation written in TeX and a Pascal subset {{in order to ensure}} portability. For example, TeX does all of its <b>dynamic</b> <b>allocation</b> itself from fixed-size arrays and uses only fixed-point arithmetic for its internal calculations. As a result, TeX has been ported to almost all operating systems, usually by using the web2c program to convert the source code into C instead of directly compiling the Pascal code. Knuth has kept a very detailed log of all the bugs he has corrected and changes he has made in the program since 1982; , the list contains 427 entries, not including the version modification that should be done after his death as the final change in TeX. Donald Knuth offers monetary awards to people who find and report a bug in TeX. The award per bug started at US$2.56 (one [...] "hexadecimal dollar") and doubled every year until it was frozen at its current value of $327.68. Knuth has lost relatively little money as there have been very few bugs claimed. In addition, recipients have been known to frame their check as proof that they found a bug in TeX rather than cashing it.|$|E
5000|$|ISO/IEC TR 24731-2:2010, on library {{extensions}} {{to support}} <b>dynamic</b> <b>allocation</b> functions ...|$|E
5000|$|... vmps {{helps with}} the <b>dynamic</b> <b>allocation</b> of vlan across the network.|$|E
40|$|An {{integrated}} system approach to <b>dynamic</b> resource <b>allocation</b> is proposed. Some {{of the problems}} in <b>dynamic</b> resource <b>allocation</b> and the relationship of these problems to system structures are examined. A general <b>dynamic</b> resource <b>allocation</b> scheme is presented. A hierarchial system architecture which dynamically maps between processor structure and programs at multiple levels of instantiations is described. Simulation experiments were conducted to study <b>dynamic</b> resource <b>allocation</b> on the proposed system. Preliminary evaluation based on simple <b>dynamic</b> resource <b>allocation</b> algorithms indicates that with the proposed system approach, the complexity of dynamic resource management could be significantly reduced while achieving reasonable effective <b>dynamic</b> resource <b>allocation...</b>|$|R
40|$|<b>Dynamic</b> storage <b>allocation</b> is an {{important}} part of a large class of computer programs written in C and C��. High-performance algorithms for <b>dynamic</b> storage <b>allocation</b> have been, and will continue to be, of considerable interest. This paper presents detailed measurements of the cost of <b>dynamic</b> storage <b>allocation</b> in 11 diverse C and C� � programs using five very different <b>dynamic</b> storage <b>allocation</b> implementations, including a conservative garbage collection algorithm. Four of the allocator implementations measured are publicly available on the Internet. A number of the programs used in these measurements are also available on the Internet to facilitate further research in <b>dynamic</b> storage <b>allocation.</b> Finally, the data presented in this paper is an abbreviated version of more extensive statistics that are also publicly available on the Internet. key words: Garbage collection <b>Dynamic</b> storage <b>allocation</b> Performance evaluation Conservative collection Dynamic memory managemen...|$|R
5000|$|C <b>dynamic</b> memory <b>allocation</b> {{refers to}} {{performing}} manual memory management for <b>dynamic</b> memory <b>allocation</b> in the C programming language via {{a group of}} functions in the C standard library, namely , , [...] and [...]|$|R
5000|$|Memory {{allocation}} {{services for}} <b>dynamic</b> <b>allocation</b> and freeing of fixed-size or variable-size memory blocks.|$|E
50|$|Linking {{can be done}} in {{two ways}} using <b>dynamic</b> <b>allocation</b> and using array index linking.|$|E
50|$|In 1992, Katehakis {{was awarded}} the Wolfowitz Prize for “introducing <b>dynamic</b> <b>allocation</b> in survey {{sampling}} for the first time”.|$|E
25|$|Seizing {{an entry}} from a pre-allocated array is faster than using <b>dynamic</b> memory <b>allocation</b> for each node, since <b>dynamic</b> memory <b>allocation</b> {{typically}} requires {{a search for}} a free memory block of the desired size.|$|R
3000|$|<b>Dynamic</b> {{bandwidth}} <b>allocation</b> in WCDMA networks involves dynamic {{assignment of}} OVSF codes. When <b>dynamic</b> bandwidth <b>allocation</b> is not used, code reassignments {{are needed to}} eliminate code blocking only. When <b>dynamic</b> bandwidth <b>allocation</b> is used, code reassignments are needed to dynamically change the data rates assigned to mobile stations as well. The computational overhead can be reduced if the <b>dynamic</b> bandwidth <b>allocation</b> algorithm can easily determine the code to be reassigned for supporting a higher data rate. The control signaling overhead is reduced if fewer number of bits are used to inform the mobile station about the reassigned code. To reduce the code reassignment overhead for a given code, this paper introduces the concept of [...]...|$|R
40|$|Optical {{networks}} {{are poised to}} dominate the access network space in coming years. Ethernet passive optical networks, which leverage the ubiquity of Ethernet at subscriber locations seem destined {{for success in the}} optical access network. In this paper, we first provide a brief introduction to Ethernet passive optical networks, followed by a discussion of the problem of <b>dynamic</b> bandwidth <b>allocation.</b> We then introduce a framework for classifying <b>dynamic</b> bandwidth <b>allocation</b> schemes and provide a comprehensive survey of the <b>dynamic</b> bandwidth <b>allocation</b> methods proposed to date. We conclude with a side by side comparison of the schemes, based on their most prominent characteristics, and outline future developments of <b>dynamic</b> bandwidth <b>allocation</b> schemes. I...|$|R
5000|$|Enables both memory {{profiling}} {{to assess}} memory usage and <b>dynamic</b> <b>allocation</b> leaks and CPU profiling to assess thread conflicts.|$|E
5000|$|<b>Dynamic</b> <b>allocation</b> in survey sampling, with Z. Govindarajulu in [...] "American Journal of Mathematical and Management Sciences", Vol. 11 (3), 1991.|$|E
50|$|Dynamic {{video memory}} {{technology}} (DVMT) allows <b>dynamic</b> <b>allocation</b> of system memory {{for use as}} video memory to ensure the most efficient use of available resources for maximum 2D/3D graphics performance.|$|E
40|$|This paper aims to {{identify}} factors, which affect both group formation and role allocation. Also to investigate evidence {{of cultural and}} personality differences {{and its effect on}} teamwork in software engineering groups. Introduce requirements for computer support for <b>dynamic</b> role <b>allocation,</b> and provide a core model for understanding the factors affecting role allocation over time. Finally to describe the development and evaluation of a prototype that demonstrates if it is feasible to consider and computationally model cultural differences between individuals while building software engineering groups and/or allocating roles between group members. The outcomes of this paper contribute within the context of computer-supported distributed team working. This paper explains <b>dynamic</b> role <b>allocation</b> and its importance in industry. It also lists the factors affecting <b>dynamic</b> role <b>allocation,</b> provides a requirement analysis for <b>dynamic</b> role <b>allocation,</b> suggests a design for support in <b>dynamic</b> role <b>allocation</b> using object-oriented methodology, and discusses the implemented and evaluated prototype...|$|R
40|$|This SpringerBrief {{presents}} {{a survey of}} <b>dynamic</b> resource <b>allocation</b> schemes in Cognitive Radio (CR) Systems, focusing on the spectral-efficiency and energy-efficiency in wireless networks. It also introduces a variety of <b>dynamic</b> resource <b>allocation</b> schemes for CR networks and provides a concise introduction of the landscape of CR technology. The author covers in detail the <b>dynamic</b> resource <b>allocation</b> problem for the motivations and challenges in CR systems. The Spectral- and Energy-Efficient resource allocation schemes are comprehensively investigated, including {{new insights into the}} trade-of...|$|R
40|$|For hard {{real-time}} applications, tight provable bounds on the application’s worst-case {{execution time}} must be derivable. Employing <b>dynamic</b> memory <b>allocation,</b> in general, significantly decreases an application’s timing predictability. In conse-quence, current hard real-time applications rely on static memory management. This thesis studies how the predictability issues of <b>dynamic</b> memory <b>allocation</b> {{can be overcome}} and <b>dynamic</b> memory <b>allocation</b> be enabled for hard real-time applications. We give {{a detailed analysis of}} the predictability challenges imposed on current state-of-the-art timing analyses by <b>dynamic</b> memory <b>allocation.</b> We propose two approaches to overcome these issues and enable <b>dynamic</b> memory <b>allocation</b> for hard real-time systems: automatically transforming <b>dynamic</b> into static <b>allocation</b> and using a novel, cache-aware and predictable memory allo-cator. Statically transforming dynamic into static memory allocation allows for very precise WCET bounds as all accessed memory addresses are completely known. However, this approach requires much information about the applica-tion’s allocation behavior to be available statically. For programs where a static precomputation of a suitable allocation scheme is not applicable, we investigate approaches to construct predictable dynamic memory allocators to replace the stan-dard, general-purpose allocators in real-time applications. We present evaluations of the proposed approaches to evidence their practical applicability. ...|$|R
5000|$|Some {{platforms}} provide library calls {{which allow}} run-time <b>dynamic</b> <b>allocation</b> from the C stack {{rather than the}} heap (e.g. [...] ). This memory is automatically freed when the calling function ends.|$|E
50|$|Custom {{programs}} can access VSAM datasets through Data Definition (DD) statements in Job Control Language (JCL), via <b>dynamic</b> <b>allocation</b> or in online regions {{such as in}} Customer Information Control System (CICS).|$|E
5000|$|Fortran {{provides}} <b>dynamic</b> <b>allocation</b> of storage; {{it relies}} on a heap storage mechanism (and replaces another use of [...] ). An example for establishing a work array for a whole program is ...|$|E
40|$|This paper {{presents}} a simulation {{of a new}} <b>dynamic</b> buffer <b>allocation</b> management scheme in ATM networks. To achieve this objective, an algorithm that detects congestion and updates the <b>dynamic</b> buffer <b>allocation</b> scheme was developed for the OPNET simulation package via {{the creation of a}} new ATM module...|$|R
40|$|This paper {{focuses on}} the {{building}} of the <b>dynamic</b> spectrum <b>allocation</b> model in wireless networks. Considering the utilization of spectrum resources, base stations satisfaction and combining with the Coordinated Dynamic Spectrum Access modelit proposes a profit-driven <b>dynamic</b> spectrum <b>allocation</b> model and uses the genetic algorithm to get an approximate optimal solutio...|$|R
40|$|AbstractWe use {{an on-line}} {{algorithm}} for coloring interval graphs {{to construct a}} polynomial time approximation algorithm WIC for <b>Dynamic</b> Storage <b>Allocation.</b> The performance ratio for WIC is at most six; the best previous upper bound on the performance ratio for a polynomial time approximation algorithm for <b>Dynamic</b> Storage <b>Allocation</b> had been 80...|$|R
50|$|The tool is {{tailored}} towards safety-critical embedded code: source {{programs are}} assumed not to contain <b>dynamic</b> <b>allocation</b> (malloc); specific analysis techniques {{are used for}} common control theory constructs (filters, rate limiters...) and floating-point numbers.|$|E
50|$|The {{model has}} also been used to control <b>dynamic</b> <b>allocation</b> of {{resources}} to different projects, answering the question of which project to work on, given uncertainty about the difficulty and payoff of each possibility.|$|E
5000|$|Gittins {{says that}} [...] "Both the {{problems}} described above involve {{a sequence of}} decisions, {{each of which is}} based on more information than its predecessors, and these both problems may be tackled by <b>dynamic</b> <b>allocation</b> indices." ...|$|E
40|$|Abstract—We {{present an}} {{analytical}} model {{to compute the}} blocking probability in channelized cellular systems with <b>dynamic</b> channel <b>allocation.</b> We model the channel occupancy in a cell by a two-dimensional (2 -D) Markov chain, which can be solved to obtain the blocking probability in each cell. We apply our analytical model to linear highway systems with and without lognormal shadowing and then extend it to 2 -D cellular systems with lognormal shadowing. We show that, for linear highway systems, distributed dynamic channel-allocation schemes perform similarly to the centralized dynamic channel-allocation schemes in terms of blocking probability. However, for 2 -D cellular systems, the improvement in the performance is significant and {{the reduction in the}} blocking probability in systems with distributed <b>dynamic</b> channel <b>allocation</b> is by almost one order of magnitude, when compared to that in systems with centralized <b>dynamic</b> channel <b>allocation.</b> In practice, our analysis of linear highway systems is applicable to digital European cordless telephony (DECT) and that of 2 -D cellular systems is applicable to global systems for mobile communications (GSM). Index Terms—Centralized <b>dynamic</b> channel <b>allocation,</b> channelized cellular systems, distributed <b>dynamic</b> channel <b>allocation.</b> I...|$|R
40|$|Abstract—Current WCET {{analyses}} do {{not support}} <b>dynamic</b> memory <b>allocation.</b> This is mainly due to the unpredictability of the cache performance if standard memory allocators are used. We present a novel dynamic memory allocator that makes cache performance predictable and (de) allocates memory in constant time. It thereby enables WCET analysis {{in the presence of}} <b>dynamic</b> memory <b>allocation.</b> I...|$|R
40|$|We {{address the}} problem of maximizing {{application}} speedup through runtime, self-selection of an appropriate number of processors on which to run. Automatic, runtime selection of processor allocations is important because many parallel applications exhibit peak speedups at allocations that are data or time dependent. We propose the use of a runtime system that: (a) dynamically measures job efficiencies at different allocations, (b) uses these measurements to calculate speedups, and (c) automatically adjusts a job's processor allocation to maximize its speedup. Using a set of 10 applications that includes both hand-coded parallel programs and compiler-parallelized sequential programs, we show that our runtime system can reliably determine <b>dynamic</b> <b>allocations</b> that match the best possible static allocation, and that {{it has the potential to}} find <b>dynamic</b> <b>allocations</b> that outperform any static allocation. 1. Introduction We consider the problem of maximizing the speedup of an individual paral [...] ...|$|R
50|$|Some systems avoid <b>dynamic</b> <b>allocation</b> entirely, pre-allocating (contiguous) {{space for}} all {{possible}} files they will need—for example, MultiFinder pre-allocated {{a chunk of}} RAM to each application as it was started according to how much RAM that application's programmer claimed it would need.|$|E
50|$|Depending on {{programming}} language and precise data type used, a variable declared to be a string may either cause storage in memory to be statically allocated for a predetermined maximum length or employ <b>dynamic</b> <b>allocation</b> {{to allow it}} to hold a variable number of elements.|$|E
50|$|Each {{implementation}} varies {{slightly in}} how threads synchronize, if at all. In addition, parallel tasks must somehow be mapped to a process. These tasks {{can either be}} allocated statically or dynamically. Research has shown that load-balancing can be better achieved through some <b>dynamic</b> <b>allocation</b> algorithms than when done statically.|$|E
40|$|Advances in network {{management}} and switching technologies make <b>dynamic</b> bandwidth <b>allocation</b> of logical networks built {{on top of}} a physical network possible. Previous proposed <b>dynamic</b> bandwidth <b>allocation</b> algorithms are based on simplified network model. The analytical model is valid only under restrictive assumptions. Infinitesimal Perturbation Analysis, a technique which estimates the gradients of the functions in discrete event dynamic systems by passively observing the system, is used to estimate delay sensitivities under general traffic patterns. A new <b>dynamic</b> bandwidth <b>allocation</b> algorithm using on-line sensitivity estimation is proposed. Simulation results show that the approach further improves network performance. Implementation of the proposed algorithm in operational networks is also discussed. published_or_final_versio...|$|R
40|$|Abstract—In this work, we {{investigate}} {{the performance of}} distributed admission control with QoS provisioning and dynamical channel allocation for mobile/wireless networks. We first provide a QoS metric feasible for admission control with dynamically allocated channels. We then derive a criterion analytically using the QoS measure for distributed call admission cent rol with <b>dynamic</b> channel <b>allocation.</b> When maximum packing is used as the <b>dynamic</b> channel <b>allocation</b> scheme, the results obtained are independent of any particular algorithm which implements dynamic channel assignments. Our results thereby provide the optimal performance achievable for the distributed admission control with the QoS provisioning by the best <b>dynamic</b> channel <b>allocation</b> scheme in the given setting. I...|$|R
5000|$|<b>Dynamic</b> Channel <b>Allocation</b> (DCA) or <b>Dynamic</b> Frequency Selection (DFS) algorithms, {{allowing}} [...] "cell breathing" ...|$|R
