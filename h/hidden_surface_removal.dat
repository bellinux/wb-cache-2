100|998|Public
25|$|In early {{displays}} only vectors {{could be}} drawn e.g. (Fig. 7) which {{are easy to}} draw because no rendering or <b>hidden</b> <b>surface</b> <b>removal</b> is required.|$|E
25|$|Since {{the atomic}} radii (e.g. in Fig. 4) are only {{slightly}} less than the distance between bonded atoms, the iconic spheres intersect, and in the CPK models, this was achieved by planar truncations along the bonding directions, the section being circular. When raster graphics became affordable, {{one of the common}} approaches was to replicate CPK models in silico. It is relatively straightforward to calculate the circles of intersection, but more complex to represent a model with <b>hidden</b> <b>surface</b> <b>removal.</b> A useful side product is that a conventional value for the molecular volume can be calculated.|$|E
5000|$|Ray tracing {{attempts}} {{to model the}} path of light rays to a viewpoint by tracing rays from the viewpoint into the scene. Although not a <b>hidden</b> <b>surface</b> <b>removal</b> algorithm as such, it implicitly solves the <b>hidden</b> <b>surface</b> <b>removal</b> problem by finding the nearest surface along each view-ray. Effectively this is equivalent to sorting all the geometry on a per pixel basis.|$|E
40|$|Using {{algorithms}} {{from computer}} graphics, namely <b>hidden</b> line and <b>surface</b> <b>removal,</b> techniques {{have been constructed}} to derive the 3 -axis visible or millable set of a computer model from a given orientation or simulate and verify machining toolpaths. In this paper, an approach that reduces the accessibility problem of 5 -axis milling using a flat end tool into a 3 -axis accessibility problem is discussed. Using this approach, global detection of possible gouging into other parts, while a 5 -axis flat end mill is in use, is made feasible and collisions can be avoided. Key Words: NURBs, accessibility, 5 -axis machining. 1 Introduction Several methods are in use, when freeform computer models are realized using milling machines. Possibly the most common approach utilizes a ball end tool with three degrees of freedom, namely translation in x, y, and z [1, 2, 4, 5, 6, 7]. The ball end center of the tool follows an offset [8] to the model by the tool radius while the ball end surface is tangent to [...] ...|$|R
50|$|Carpenter {{invented the}} A-buffer <b>hidden</b> <b>surface</b> {{determination}} algorithm.|$|R
50|$|Advanced {{features}} include draw call batching, <b>hidden</b> <b>surface</b> determination, threaded physics simulation and ocean simulation.|$|R
50|$|In early {{displays}} only vectors {{could be}} drawn e.g. (Fig. 7) which {{are easy to}} draw because no rendering or <b>hidden</b> <b>surface</b> <b>removal</b> is required.|$|E
5000|$|... a {{technique}} for <b>hidden</b> <b>surface</b> <b>removal</b> based on finding the first intersection of a ray cast from the eye through each pixel of an image, ...|$|E
50|$|Output-sensitive {{algorithms}} arise {{frequently in}} computational geometry applications {{and have been}} described for problems such as <b>hidden</b> <b>surface</b> <b>removal</b> and resolving range filter conflicts in router tables.|$|E
40|$|All of the {{information}} necessary to perform the polygon set operations (union, intersection, and difference) and therefore polygon clipping can be generated by a single application of a process called polygon comparison. This process accepts two or more input polygons and generates one or more polygons as output. These output polygons contain unique homogenous areas, each falling within the domain {{of one or more}} input polygons. Each output polygon is classified by the list of input polygons in which its area may be found. The union contour of all input is also generated, completing all of {{the information}} necessary to perform the polygon set operations. This paper introduces a polygon comparison algorithm which features reduced complexity due to its use of a graph data representation. The paper briefly introduces some of the possible approaches to the general problem of polygon comparison including the polygon set and clipping problems. The new algorithm is then introduced and explained in detail. The algorithm is sufficiently general to compare sets of concave polygons with holes. More than two polygons can be compared at one time, all information for future comparisons of subsets of the original input polygon sets is available from the results of the initial application of the process. The algorithm represents polygons using a graph of the boundaries of the polygons. These graphs are imbedded in a two dimensional geometric space. The use of the graph representation simplifies the comparison process considerably by eliminating many special cases from explicit consideration. Polygon operations like the ones described above are useful in a variety of application areas, especially those which deal with problems involving two dimensional or projected two dimensional geometric areas. Examples include VLSI circuit design, cartographic and demographic applications, and polygon clipping for graphic applications such as viewport clipping, <b>hidden</b> <b>surface</b> and line <b>removal,</b> detailing, and shadowin...|$|R
500|$|The {{bottom side}} of a bird's wing; the <b>hidden</b> <b>surface</b> of the wing when it is folded. Compare: [...]|$|R
2500|$|Ray traced {{images with}} <b>hidden</b> <b>surface</b> elimination. This site {{provides}} a good description of methods of visualizing 4D solids.|$|R
5000|$|However, the log n {{factor was}} {{eliminated}} by Devai, who raised the open problem if the same, optimal O(n2) upper bound existed for <b>hidden</b> <b>surface</b> <b>removal.</b> This problem was solved by McKenna [...] in 1987.|$|E
50|$|Intel uses {{a similar}} concept in their {{integrated}} graphics solutions. However, their method, coined zone rendering, does not perform full <b>hidden</b> <b>surface</b> <b>removal</b> (HSR) and deferred texturing, therefore wasting fillrate and texture bandwidth on pixels {{that are not}} visible in the final image.|$|E
50|$|Newell's Algorithm is a 3D {{computer}} graphics procedure for elimination of polygon cycles in the depth sorting required in <b>hidden</b> <b>surface</b> <b>removal.</b> It was proposed in 1972 by brothers Martin Newell and Dick Newell, and Tom Sancha, while {{all three were}} working at CADCentre.|$|E
40|$|The {{hidden line}} and <b>hidden</b> <b>surface</b> {{problems}} are simpler when restricted to special classes of objects. An {{example is the}} class of grid surfaces, that is, graphs of bivariate functions represented by their values {{on a set of}} grid points. Projected grid surfaces have geometric properties which permit hidden line or <b>hidden</b> <b>surface</b> elimination to be done more easily than in the general case. These properties are discussed in this paper, and an algorithm is given which exploits the...|$|R
5000|$|If ice (or other contaminants) {{are present}} on an {{aircraft}} prior to takeoff, {{they must be}} removed from critical <b>surfaces.</b> <b>Removal</b> can take many forms: ...|$|R
40|$|Two new {{techniques}} are presented {{for reducing the}} number of depth calculations in <b>hidden</b> <b>surface</b> elimination. Two new algorithms using the techniques are compared with three existing algorithms and it is shown by examples that the {{new techniques}} reduce the number of multiplications involved in the depth calculations. A technique for increasing the parallelism of operations is also presented. This allows the calculation to be done more rapidly in hardware and is particularly useful for generating line drawings rather than the usual TV raster scan images in the common raster-scan <b>hidden</b> <b>surface</b> algorithms...|$|R
50|$|In {{the depth}} sorting phase of <b>hidden</b> <b>surface</b> <b>removal,</b> if two polygons have no {{overlapping}} extents or extreme minimum and maximum {{values in the}} x, y, and z directions, then they can be easily sorted. If two polygons, Q and P, do have overlapping extents in the Z direction, then {{it is possible that}} cutting is necessary.|$|E
50|$|One of the {{advantages}} of the Radiosity algorithm is that it is relatively simple to explain and implement. This makes it a useful algorithm for teaching students about global illumination algorithms. A typical direct illumination renderer already contains nearly all of the algorithms (perspective transformations, texture mapping, <b>hidden</b> <b>surface</b> <b>removal)</b> required to implement radiosity. A strong grasp of mathematics is not required to understand or implement this algorithm.|$|E
50|$|In {{a typical}} tiled renderer, {{geometry}} {{must first be}} transformed into screen space and assigned to screen-space tiles. This requires some storage for the lists of geometry for each tile. In early tiled systems, this was performed by the CPU, but all modern hardware contains hardware to accelerate this step. The list of geometry can also be sorted front to back, allowing the GPU to use <b>hidden</b> <b>surface</b> <b>removal</b> to avoid processing pixels that are hidden behind others, saving on memory bandwidth for unnecessary texture lookups.|$|E
40|$|This paper {{describes}} a new algorithm for solving the <b>hidden</b> <b>surface</b> (or line) problem, to more rapidly generate realistic images of 3 -D scenes composed of polygons, and presents {{the development of}} theoretical foundations in the area as well as additional related algorithms. As in many applications the environment to be displayed consists of polygons many of whose relative geometric relations are static. It is attempted to capitalize on this by preprocessing the environment's database so as to decrease the run-time computations required to generate a scene. This preprocessing is based on generating a 'binary space partitioning' tree whose inorder traversal of visibility priority at run-time will produce a linear order, dependent upon the viewing position, on (parts of) the polygons, which can then be used to easily solve the <b>hidden</b> <b>surface</b> problem. In the application where the entire environment is static with only the viewing-position changing, as is common in simulation, the results presented will be sufficient to solve completely the <b>hidden</b> <b>surface</b> problem...|$|R
30|$|Macro-pitting over 50 %– 100 % of the {{pinion tooth}} <b>surface.</b> <b>Removal</b> of metal thins the teeth and {{disrupts}} load sharing between teeth. Gear unit has greatly increased noise and vibration.|$|R
50|$|In {{computer}} graphics the viewing frustum is the three-dimensional region which is {{visible on the}} screen. It is formed by a clipped pyramid; in particular, frustum culling is a method of <b>hidden</b> <b>surface</b> determination.|$|R
50|$|Since {{the atomic}} radii (e.g. in Fig. 4) are only {{slightly}} less than the distance between bonded atoms, the iconic spheres intersect, and in the CPK models, this was achieved by planar truncations along the bonding directions, the section being circular. When raster graphics became affordable, {{one of the common}} approaches was to replicate CPK models in silico. It is relatively straightforward to calculate the circles of intersection, but more complex to represent a model with <b>hidden</b> <b>surface</b> <b>removal.</b> A useful side product is that a conventional value for the molecular volume can be calculated.|$|E
50|$|MAGI {{developed}} {{a software program}} called Synthavision to create CGI images and films. Synthavision {{was one of the}} first systems to implement a ray-tracing algorithmic approach to <b>hidden</b> <b>surface</b> <b>removal</b> in rendering images. The software was a constructive solid geometry (CSG) system, in that the geometry was solid primitives with combinatorial operators (such as Boolean operators). Synthavision's modeling method does not use polygons or wireframe meshes that most CGI companies use today. The combination of the solids modeling and ray tracing (later to become plane firing) made it a very robust system that could generate high quality images.|$|E
50|$|The PowerVR chipset uses {{a method}} of 3D {{rendering}} known as tile-based deferred rendering (often abbreviated as TBDR) which is tile-based rendering combined with PowerVR's proprietary method of <b>Hidden</b> <b>Surface</b> <b>Removal</b> (HSR) and Hierarchical Scheduling Technology (HST). As the polygon generating program feeds triangles to the PowerVR (driver), it stores them in memory in a triangle strip or an indexed format. Unlike other architectures, polygon rendering is (usually) not performed until all polygon information has been collated for the current frame. Furthermore, the expensive operations of texturing and shading of pixels (or fragments) is delayed, whenever possible, until the visible surface at a pixel is determined — hence rendering is deferred.|$|E
50|$|The {{engine is}} also {{an example of a}} portal engine. Level {{geometry}} is rendered as a series of negative-space convex polyhedrons connected by adjoining polygons. Levels require no preprocessing and <b>hidden</b> <b>surface</b> determination is computed at run-time.|$|R
50|$|Recently, {{the term}} glabrousness {{also has been}} applied to human fashions, wherein some {{participate}} in culturally motivated hair <b>removal</b> by depilation (<b>surface</b> <b>removal</b> by shaving, dissolving), or epilation (removal of the entire hair, such as waxing or plucking).|$|R
50|$|Diasporus anthrax {{are small}} frogs, {{with a body}} size of 14 - 19 mm. It is easily {{distinguished}} from related species by its white belly with dark spots and red spots on the <b>hidden</b> <b>surface</b> of the extremities.|$|R
50|$|In 3D {{computer}} graphics, shown surface determination (also {{known as}} <b>hidden</b> <b>surface</b> <b>removal</b> (HSR), occlusion culling (OC) or visible surface determination (VSD)) {{is the process}} used to determine which surfaces and parts of surfaces are not visible from a certain viewpoint. A hidden surface determination algorithm is {{a solution to the}} visibility problem, {{which was one of the}} first major problems in the field of 3D computer graphics. The process of hidden surface determination is sometimes called hiding, and such an algorithm is sometimes called a hider. The analogue for line rendering is hidden line removal. Hidden surface determination is necessary to render an image correctly, so that one may not view features hidden behind the model itself, allowing only the naturally viewable portion of the graphic to be visible.|$|E
40|$|Traditional <b>hidden</b> <b>surface</b> <b>removal</b> {{algorithm}} {{based on}} hardware Z-Buffer technique cannot give attention to precision or efficiency {{at the same}} time when dealing with the non-uniform triangulated SAR scene model. A novel high-precision <b>hidden</b> <b>surface</b> <b>removal</b> approach using fast ray-tube splitting algorithm is proposed, where the SAR scene <b>hidden</b> <b>surface</b> <b>removal</b> problem is decomposed into two simple procedures, i. e. a Delaunay triangulator is used to generate the initial ray tubes from the projected point clouds of all incident visible vertices, then an adaptive ray-tube splitting method is adopted to carry out the complex scene shading situations and resultant visible model reconstruction. Simulation results of typical aircraft and T- 72 tank show that, the new approach is feasible and effective...|$|E
40|$|We {{present a}} {{solution}} {{to one of the}} fundamental problems in computer graphics, the <b>hidden</b> <b>surface</b> <b>removal.</b> In most 3 D-graphics systems the <b>hidden</b> <b>surface</b> <b>removal</b> is done using the Z-Buffer algorithm. This method, however, requires to perform a read-modify-write memory access for each visible pixel, what represents a severe performance limit. We introduce a novel SRAM cell, which incorporates the needed logical units to perform the Z-Buffer algorithm on its own. Placed into the page register of conventional DRAMs, almost any pixel rate can be achieved. ...|$|E
40|$|The {{biodiversity}} of hard-bottom substrata comprises species {{growing on}} exposed rock and in hidden microhabitats, such as cracks and crevices. This study examines {{the succession of}} epibenthic organisms colonizing an artificial substratum with one surface exposed and one <b>surface</b> <b>hidden</b> on a vertical wall off northern Chile. On each sampling date species coverage of three replicate panels on both surfaces was assessed. The <b>hidden</b> <b>surface</b> was dominated in terms of coverage by the bryozoans Membranipora isabelleana and Lagenicella variabilis, while algae were absent. In contrast, the exposed surface was dominated by encrusting red corallines and the red alga Rhodymenia corallina. At {{the end of the}} experimental period both surfaces were dominated by colonial suspension feeders, but showed a different community structure and successional pattern. On the exposed surface, competitive exclusion was identified as an important aspect of succession, whereas on the <b>hidden</b> <b>surface</b> this pattern was not observed. These findings have implications for overall biodiversity, because pioneer species that are not able to survive long periods on exposed surfaces become restricted to <b>hidden</b> <b>surfaces,</b> from where they spread laterally. Thus, hidden microhabitats provide refuges for certain species, and may {{play an important role in}} the overall succession on rock faces. We conclude that examination of hidden microhabitats is necessary in order to fully understand succession in hard-bottom habitats...|$|R
40|$|A new {{comprehensive}} {{modeling system}} for urban air pollution, including three-dimensional, grid-based {{as well as}} Lagrangian trajectory, vertically integrated and single cell formulations, is described. Recent developments in photochemistry, turbulent diffusion, <b>surface</b> <b>removal</b> processes, objective analysis procedures and numerical solution techniques are incorporated and described...|$|R
2500|$|Atoms can {{be drawn}} as circles, but these should be sorted so that those with the largest z-coordinates (nearest the screen) are drawn last. Although imperfect, this often gives a {{reasonably}} attractive display. Other simple tricks which do not include <b>hidden</b> <b>surface</b> algorithms are: ...|$|R
