5887|8960|Public
5|$|To {{ensure that}} there are enough signal {{transitions}} for clock recovery {{to occur in the}} bitstream, a bit stuffing technique is applied to the data stream: an extra 0bit is insert into the <b>data</b> <b>stream</b> after any occurrence of six consecutive 1bits. (Thus ensuring that there is a 0bit to cause a transmission state transition.) Seven consecutively received 1bits are always an error. For USB3.0, additional data transmission encoding is used to handle the higher data rates required.|$|E
25|$|Additional vehicle-specific {{diagnostic}} and control circuits {{are also available}} on this connector. For instance, on the Corvette there are interfaces for the Class 2 serial <b>data</b> <b>stream</b> from the PCM, the CCM diagnostic terminal, the radio <b>data</b> <b>stream,</b> the airbag system, the selective ride control system, the low tire pressure warning system, and the passive keyless entry system.|$|E
25|$|Massive Online Analysis (MOA): a {{real-time}} big <b>data</b> <b>stream</b> mining with {{concept drift}} {{tool in the}} Java programming language.|$|E
40|$|Abstract: Online mining {{changes over}} <b>data</b> <b>streams</b> has been {{recognized}} {{to be an important}} task in data mining. Mining changes over <b>data</b> <b>streams</b> is both compelling and challenging. In this paper, we propose a new, single-pass algorithm, called MFC-append (Mining Frequency Changes of append-only <b>data</b> <b>streams),</b> for discovering the frequent frequency-changed items, vibrated frequency changed items, and stable frequency changed items over continuous append-only <b>data</b> <b>streams.</b> A new summary data structure, called Change-Sketch, is developed to compute the frequency changes between two continuous <b>data</b> <b>streams</b> as fast as possible. Moreover, a MFC-append-based algorithm, called MFC-dynamic (Mining Frequency Changes of dynamic <b>data</b> <b>streams),</b> is proposed to find the frequency changes over dynamic <b>data</b> <b>streams.</b> Theoretical analysis and experimental results show that our algorithms meet the major performance requirements, namely single-pass, bounded space requirement, and real-time computing, in mining <b>data</b> <b>streams...</b>|$|R
5000|$|Encrypted-by-NTFS, sparse <b>data</b> <b>streams,</b> or {{compressed}} <b>data</b> <b>streams</b> {{cannot be}} made resident.|$|R
40|$|Abstract. The sensor networks, web {{click stream}} and astronomical {{applications}} generate a continuous flow of <b>data</b> <b>streams.</b> Most likely <b>data</b> <b>streams</b> are generated in a wireless environment. These <b>data</b> <b>streams</b> challenge {{our ability to}} store and process them in real-time with limited computing capabilities of the wireless environment. Querying and mining <b>data</b> <b>streams</b> have attracted attention {{in the past two}} years. The main idea behind the proposed techniques in mining <b>data</b> <b>streams</b> in to develop efficient approximate algorithms with an acceptable accuracy. Recently, we have proposed algorithm output granularity as an approach in mining <b>data</b> <b>streams.</b> This approach has the advantage of being resource-aware in addition to its generality. In this paper, a model for mining <b>data</b> <b>streams</b> in a wireless environment has been proposed. The model contains two novel contributions; a ubiquitous data mining system architecture and algorithm output granularity approach in mining <b>data</b> <b>streams.</b> ...|$|R
25|$|The 10GBASE-LX4 10 Gbit/s {{physical}} layer standard {{is an example}} of a CWDM system in which four wavelengths near 1310nm, each carrying a 3.125gigabit-per-second (Gbit/s) <b>data</b> <b>stream,</b> are used to carry 10Gbit/s of aggregate data.|$|E
25|$|Another {{possibility}} is when using FTP the data connection {{can have a}} false FIN in the <b>data</b> <b>stream,</b> and if the protocol rules for exchanging close_notify alerts is not adhered to a file can be truncated.|$|E
25|$|The German {{time signal}} DCF77, in {{addition}} to amplitude keying, employs phase-shift keying driven by a 9-stage LFSR to increase the accuracy of received time and the robustness of the <b>data</b> <b>stream</b> {{in the presence of}} noise.|$|E
40|$|Massive <b>data</b> <b>streams</b> are now {{fundamental}} to many data processing applications. For example, Internet routers produce large scale diagnostic <b>data</b> <b>streams.</b> Such streams are rarely stored in traditional databases, and instead must be processed "on the fly" {{as they are}} produced. Similarly, sensor networks produce multiple <b>data</b> <b>streams</b> of observations from their sensors. There is growing focus on manipulating <b>data</b> <b>streams,</b> and hence, {{there is a need}} to identify basic operations of interest in managing <b>data</b> <b>streams,</b> and to support them efficiently...|$|R
40|$|Abstract]: The {{explosion}} of <b>data</b> <b>streams</b> has sparked {{a lot of}} research interests in <b>data</b> mining on <b>streaming</b> <b>data</b> flow in recent years. Many <b>data</b> <b>streams</b> are inherently high dimensional and outlier detection from these <b>data</b> <b>streams</b> can potentially lead to discovery of useful abnormal and irregular patterns hidden in the streams. Outlier detection in <b>data</b> <b>streams</b> can be useful in many fields such as analysis and monitoring of network traffic data, web log, sensor networks and financial transactions...|$|R
40|$|In this paper, {{we propose}} an online {{single-pass}} algorithm MFC-append (Mining Frequency Change patterns in append-only <b>data</b> <b>streams)</b> for online mining frequent frequency change items in continuous append-only <b>data</b> <b>streams.</b> An online space-efficient data structure called Change-Sketch is developed for providing fast response time to compute dynamic frequency changes between <b>data</b> <b>streams.</b> A modified approach MFCdynamic (Mining Frequency Change patterns in dynamic <b>data</b> <b>streams)</b> is also presented to mine frequency changes in dynamic <b>data</b> <b>streams.</b> The theoretic analyses show that our algorithms meet the major performance requirements of single-pass, bounded storage, and real time for <b>streaming</b> <b>data</b> mining. 1...|$|R
25|$|The {{full-duplex}} capability makes SPI {{very simple}} and efficient for single master/single slave applications. Some devices use the full-duplex mode to implement an efficient, swift <b>data</b> <b>stream</b> for {{applications such as}} digital audio, digital signal processing, or telecommunications channels, but most off-the-shelf chips stick to half-duplex request/response protocols.|$|E
25|$|The Line 21 <b>data</b> <b>stream</b> can {{consist of}} data from several data {{channels}} multiplexed together. Odd field 1 can have four data channels: two separate synchronized captions (CC1, CC2) with caption-related text, such as website URLs (T1, T2). Even field 2 can have five additional data channels: two separate synchronized captions (CC3, CC4) with caption related text (T3, T4), and Extended Data Services (XDS) for Now/Next EPG details. XDS data structure is defined in CEA-608.|$|E
25|$|On T-carrier digital {{transmission}} systems, bits within the T-1 <b>data</b> <b>stream</b> {{were used to}} transmit supervision. By careful design, the appropriated bits did not change voice quality appreciably. Robbed bits were translated to changes in contact states (opens and closures) by electronics in the channel bank hardware. This allowed direct current E and M signaling, or dial pulses, to be sent between electromechanical switches over a digital carrier which did not have DC continuity.|$|E
40|$|As <b>data</b> <b>streams</b> {{are gaining}} {{prominence}} {{in a growing}} number of emerging applications, advanced analysis and mining of <b>data</b> <b>streams</b> is becoming increasingly important. While there are some recent studies on mining <b>data</b> <b>streams,</b> we would like to ask the following essential question: What are the distinct features of mining <b>data</b> <b>streams</b> compared to mining other kinds of data? In this paper, we take the following position: online mining of the changes in <b>data</b> <b>streams</b> is one of the core issues. We propose some interesting research problems and highlight the inherent challenges. Moreover, we sketch some preliminary results...|$|R
30|$|Previous work on {{monitoring}} distributed <b>data</b> <b>streams</b> can {{be classified}} into two categories. One category is monitoring functions over the union of distributed <b>data</b> <b>streams,</b> {{and the other one}} is monitoring a ranking function, which is based on the dominance relationship of data objects over distributed <b>data</b> <b>streams.</b>|$|R
40|$|Abstractâ€”Uncertainty is {{inherent}} in <b>data</b> <b>streams,</b> and present new challenges to <b>data</b> <b>streams</b> mining. For continuous arriving and large size of <b>data</b> <b>streams,</b> modeling sequences of uncertain time series <b>data</b> <b>streams</b> require significantly more space. Therefore, {{it is important to}} construct compressed representation for storing uncertain time series data. Based on granules, sequential sketches are created to store hash-compressed granules. And based on sliding windows, a sketch update strategy is given to store most resent granules. As the sequential sketches may be saturated with the increasing of <b>data</b> <b>streams,</b> this paper presents an optimization strategy to delete the absolute sparse patterns. Based on the sequential sketches, a sequential pattern mining algorithm is proposed for mining uncertain <b>data</b> <b>streams.</b> The experimental results illustrate the effectiveness of the pattern mining algorithm...|$|R
25|$|In normal {{operation}} the spacecraft transmits a continuous 200 kbit/s <b>data</b> <b>stream</b> of photographs and other measurements via the NASA Deep Space Network of ground stations. SOHOs data about solar activity {{are used to}} predict coronal mass ejection (CME) arrival times at earth, so electrical grids and satellites can be protected from their damaging effects. CMEs directed toward the earth may produce geomagnetic storms, which in turn produce geomagnetically induced currents, in the most extreme cases creating black-outs, etc.|$|E
25|$|PLLs are ubiquitousâ€”they tune clocks {{in systems}} several feet across, {{as well as}} clocks in small {{portions}} of individual chips. Sometimes the reference clock may not actually be a pure clock at all, but rather a <b>data</b> <b>stream</b> with enough transitions that the PLL is able to recover a regular clock from that stream. Sometimes the reference clock is the same frequency as the clock driven through the clock distribution, other times the distributed clock may be some rational multiple of the reference.|$|E
25|$|RISC {{designs are}} also more likely to feature a Harvard memory model, where the {{instruction}} stream and the <b>data</b> <b>stream</b> are conceptually separated; this means that modifying the memory where code is held might not have any effect on the instructions executed by the processor (because the CPU has a separate instruction and data cache), at least until a special synchronization instruction is issued. On the upside, this allows both caches to be accessed simultaneously, which can often improve performance.|$|E
3000|$|... <b>data</b> <b>streams.</b> The two <b>data</b> <b>streams</b> to be superposed {{are changed}} in each BC phase, {{in such a}} way that after [...]...|$|R
40|$|Abstract Massive <b>data</b> <b>streams</b> are now {{fundamental}} tomany {{data processing}} applications. For example, Internet routers produce large scale diagnosticdata streams. Such streams are rarely stored in traditional databases, and instead must be processed&quot;on the fly &quot; {{as they are}} produced. Similarly, sensor networks produce multiple <b>data</b> <b>streams</b> of ob-servations from their sensors. There is growing focus on manipulating <b>data</b> <b>streams,</b> and hence,there {{is a need to}} identify basic operations of interest in managing <b>data</b> <b>streams,</b> and to supportthem efficiently...|$|R
3000|$|... is the {{independent}} <b>data</b> <b>streams.</b> We also {{assume that the}} <b>data</b> <b>streams</b> for different SUs are independent {{of each other and}} E[|s [...]...|$|R
25|$|When {{performing}} lossy audio encoding, such {{as creating}} an MP3 <b>data</b> <b>stream,</b> {{there is a}} trade-off {{between the amount of}} data generated and the sound quality of the results. The person generating an MP3 selects a bit rate, which specifies how many kilobits per second of audio are desired. The higher the bit rate, the larger the MP3 <b>data</b> <b>stream</b> will be, and, generally, the closer it will sound to the original recording. With too low a bit rate, compression artifacts (i.e., sounds that were not present in the original recording) may be audible in the reproduction. Some audio is hard to compress because of its randomness and sharp attacks. When this type of audio is compressed, artifacts such as ringing or pre-echo are usually heard. A sample of applause compressed or an excerpt of triangle instrument with a relatively low bit rate provides a good example of compression artifacts. Most subjective testings on perceptual codecs tend to avoid using this type of extremely critical sound materials however this type of artifacts generated by percussive sounds is barely perceptible on the MP3 format due to the specific temporal masking feature of the 32 sub-band filterbank of Layer II on which the MP3 format is based.|$|E
25|$|Many {{software}} {{programs have been}} developed that intercept the <b>data</b> <b>stream</b> as it is decrypted out of the DRM-restricted file, and then use this data to construct a DRM-free file. These programs require a decryption key. Programs that do this for Blu-ray Discs, DVDs, and HD DVDs include universal decryption keys in the software itself. Programs that do this for iTunes audio, PlaysForSure songs, and TiVo ToGo recordings, however, rely on the user's own key â€“ that is, they can only process content the user has legally acquired under {{his or her own}} account.|$|E
25|$|Although Windows Driver Model (WDM) was {{available}} starting with Windows 98, few audio card manufacturers used it. Due to internal buffering, KMixer introduced significant processing latency (30 ms on then-current systems). Windows 98 {{also includes a}} WDM streaming class driver (Stream.sys) to address these real time multimedia <b>data</b> <b>stream</b> processing requirements. When the sound card uses a custom driver for use with the system supplied port class driver PortCls.sys or implements a mini-driver for use with the streaming class driver, applications can bypass the KMixer completely and use the kernel streaming interfaces instead to reduce latency.|$|E
40|$|Abstractâ€”Data streams are massive, fast-changing, and infinite. Applications of <b>data</b> <b>streams</b> {{can vary}} from {{critical}} scientific and astronomical applications to important business and financial ones. They need algorithms to make a single pass with limited time and memory. Mining <b>data</b> <b>streams</b> is concerned with extracting knowledge structures represented in models and patterns in non-stopping <b>data</b> <b>streams.</b> Clustering is a prominent task in mining <b>data</b> <b>streams,</b> which group similar objects in a cluster. Several clustering algorithms have been introduced in recent years for <b>data</b> <b>streams</b> {{that are based on}} distance, so they can find only spherical shapes. Therefore, density-based clustering algorithms are adopted for <b>data</b> <b>streams</b> with ability for not only discovering the arbitrary shape clusters, but also for providing protection against the outliers. In fact, in density-based clustering algorithms, dense areas of objects in the data space are considered as clusters, which are segregated by low density area (noise). However, in the clustering <b>data</b> <b>streams,</b> due to certain characteristics, it is impossible to record all the data. Micro-clusters are a technique in stream clustering that maintains the compact information about the data objects in <b>data</b> <b>streams.</b> Microcluster is a temporal extension of the cluster feature, which compresses the data effectively. In this paper, we intend to review the outstanding density-based clustering algorithms on <b>data</b> <b>streams</b> using micro-clusters. We will explore algorithm characteristics and analyze their merits and limitations...|$|R
50|$|Malware {{has used}} {{alternate}} <b>data</b> <b>streams</b> to hide code. As a result, malware scanners {{and other special}} tools now check for alternate <b>data</b> <b>streams.</b>|$|R
40|$|The {{development}} of sensor devices and ubiquitous computing have increased time-series <b>data</b> <b>streams.</b> With <b>data</b> <b>streams,</b> current <b>data</b> arrives continuously {{and must be}} monitored. This paper presents outlier detection over <b>data</b> <b>streams</b> by continuous monitoring. Outlier detection is an important data mining issue and discovers outliers, which have features that differ profoundly from other objects or values. Most existing outlier detection techniques, however, deal with static data, which is computationally expensive. Specifically, for outlier detection over <b>data</b> <b>streams,</b> real-time response is very important. Existing techniques for static data, however, are fraught with many meaningless processes over <b>data</b> <b>streams,</b> and the calculation cost is too high. This paper introduces a technique that provides effective outlier detection over <b>data</b> <b>streams</b> using differential processing, and confirms effectiveness. Database and Expert Systems Applications 19 th International Conference, DEXA 2008, Turin, Italy, September 1 - 5, 2008...|$|R
25|$|The {{sequence}} {{has since}} seen several remixes {{to the music}} and a change in visuals {{to focus more on}} the well-known journalists, with less footage of camera crews and production teams. Changes have also seen the channel logo included during the sequences and at the end, as well as the fonts used for the time. The conclusion of the countdown was altered in 2008 to feature the new presentation style, rather than a <b>data</b> <b>stream</b> moving in towards the camera. Also in 2008, the graphic for the countdown changed, resembling BBC One Rhythm and Movement Idents, due to the logo being in a red square in inferior-left corner.|$|E
25|$|SQL Native Client is {{the native}} client side data access library for Microsoft SQL Server, version 2005 onwards. It {{natively}} implements {{support for the}} SQL Server features including the Tabular <b>Data</b> <b>Stream</b> implementation, support for mirrored SQL Server databases, full support for all data types supported by SQL Server, asynchronous operations, query notifications, encryption support, as well as receiving multiple result sets in a single database session. SQL Native Client is used under the hood by SQL Server plug-ins for other data access technologies, including ADO or OLE DB. The SQL Native Client can also be directly used, bypassing the generic data access layers.|$|E
25|$|Very large {{radio telescopes}} on Earth were also {{listening}} to Huygens 10-watt transmission using {{the technique of}} very long baseline interferometry and aperture synthesis mode. At 11:25 CET on January 14, the Robert C. Byrd Green Bank Telescope (GBT) in West Virginia detected the carrier signal from Huygens. The GBT continued to detect the carrier signal well after Cassini stopped listening to the incoming <b>data</b> <b>stream.</b> In addition to the GBT, eight of the ten telescopes of the continent-wide VLBA in North America, located at Pie Town and Los Alamos, New Mexico; Fort Davis, Texas; North Liberty, Iowa; Kitt Peak, Arizona; Brewster, Washington; Owens Valley, California; and Mauna Kea, Hawaii, also listened for the Huygens signal.|$|E
50|$|Determines if the filesystems {{supports}} multiple <b>data</b> <b>streams.</b> NTFS {{refers to}} these as alternate <b>data</b> <b>streams,</b> HPFS as extended attributes and HFS calls them forks.|$|R
40|$|Abstractâ€”Related <b>data</b> <b>streams</b> {{refer to}} <b>data</b> <b>streams</b> {{that can be}} joined {{together}} by matching their join attributes. Existing research on learning from related <b>data</b> <b>streams</b> {{is based on an}} assumption that all streams arrive at a central processing unit in a synchronous way, such that in an arbitrary sliding window, all tuples of the streams can be perfectly joined together. This assumption, however, does not hold when related <b>data</b> <b>streams</b> are generated or transferred at different speeds, and thus may arrive in the central processing unit in an asynchronous manner. In this paper, we argue that for asynchronous <b>data</b> <b>streams,</b> there exist a small portion of perfectly joined examples (i. e., complete examples) and a large portion of partially joined examples (i. e., incomplete examples). Accordingly, we present a new Learning from Complete and Fixed Examples (LCFE) framework that can fix incomplete examples to boost the learning. Experiments on both synthetic and real-world <b>data</b> <b>streams</b> demonstrate that LCFE is able to achieve a higher prediction accuracy for learning from related <b>data</b> <b>streams</b> than other simple solutions can offer. I...|$|R
40|$|Mining {{frequent}} itemsets in <b>data</b> <b>streams</b> {{is beneficial}} to many real-world applications {{but is also}} a challenging task since <b>data</b> <b>streams</b> are unbounded and have high arrival rates. Moreover, the distribution of <b>data</b> <b>streams</b> can change over time, which makes the task of maintaining frequent itemsets even harder. In this paper, we propose a falsenegative oriented algorithm, called TWIM, that can find most of the frequent itemsets, detect distribution changes, and update the mining results accordingly. Experimental results show that our algorithm performs as good as other false-negative algorithms on <b>data</b> <b>streams</b> without distribution change, and {{has the ability to}} detect changes over time-varying <b>data</b> <b>streams</b> in real-time with a high accuracy rate...|$|R
