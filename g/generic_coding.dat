23|355|Public
25|$|The first {{well-known}} public {{presentation of}} markup languages in computer text processing {{was made by}} William W. Tunnicliffe {{at a conference in}} 1967, although he preferred to call it <b>generic</b> <b>coding.</b> It {{can be seen as a}} response to the emergence of programs such as RUNOFF that each used their own control notations, often specific to the target typesetting device. In the 1970s, Tunnicliffe led the development of a standard called GenCode for the publishing industry and later was the first chair of the International Organization for Standardization committee that created SGML, the first standard descriptive markup language. Book designer Stanley Rice published speculation along similar lines in 1970. Brian Reid, in his 1980 dissertation at Carnegie Mellon University, developed the theory and a working implementation of descriptive markup in actual use.|$|E
50|$|MPEG-2 (1995): <b>Generic</b> <b>coding</b> {{of moving}} {{pictures}} and associated audio information (ISO/IEC 13818). Transport, {{video and audio}} standards for broadcast-quality television. MPEG-2 standard was considerably broader in scope and of wider appeal - supporting interlacing and high definition. MPEG-2 is considered important {{because it has been}} chosen as the compression scheme for over-the-air digital television ATSC, DVB and ISDB, digital satellite TV services like Dish Network, digital cable television signals, SVCD and DVD Video. It is also used on Blu-ray Discs, but these normally use MPEG-4 Part 10 or SMPTE VC-1 for high-definition content.|$|E
5000|$|MPEG-2 (a.k.a. H.222/H.262 {{as defined}} by the ITU) is a {{standard}} for [...] "the <b>generic</b> <b>coding</b> of moving pictures and associated audio information". It describes a combination of lossy video compression and lossy audio data compression methods, which permit storage and transmission of movies using currently available storage media and transmission bandwidth. While MPEG-2 is not as efficient as newer standards such as H.264/AVC and H.265/HEVC, backwards compatibility with existing hardware and software means it is still widely used, for example in over-the-air digital television broadcasting and in the DVD-Video standard.|$|E
5000|$|Remove {{shortcut}} code (see {{the strategy}} pattern): A simplified code path may hide bugs {{in a more}} <b>generic</b> <b>code</b> path if the <b>generic</b> <b>code</b> almost never gets to run. Since the two are supposed to produce the same result, the simplified one can be eliminated.|$|R
5000|$|Prior to 2015, the <b>Generic</b> <b>Code</b> of Good Practice {{consisted}} of the following breakdown: ...|$|R
40|$|With the {{introduction}} of support for “generic” style programming in mainstream languages, {{it is possible to}} write generic algorithms by using parametric polymor-phism. Parametric polymorphism can be expressed with templates in C++, generics in Java and C# and dependent types in Aldor. <b>Generic</b> <b>code</b> is not as fast as specialized code, because the compilers usually do not make any optimizations based on the specific properties of the data used by the generic algorithm. In order to make <b>generic</b> <b>code</b> appealing, the performance of <b>generic</b> <b>code</b> must be similar to that of specialized code. First goal of this thesis is to understand what is the performance penalty for using <b>generic</b> <b>code</b> for scientific computing. Ideally, programmers should be able to write expressive programs while compilers should do the optimization. Most benchmarks implement algorithms as efficiently as possible by specializing the code for particular data sets and even performing some hand optimizations in the source code to eliminate the impact of wether certain optimizations are performed. We have implemented SciGMark, a benchmark with both <b>generic</b> and specialized <b>code</b> that shows us th...|$|R
50|$|The first {{well-known}} public {{presentation of}} markup languages in computer text processing {{was made by}} William W. Tunnicliffe {{at a conference in}} 1967, although he preferred to call it <b>generic</b> <b>coding.</b> It {{can be seen as a}} response to the emergence of programs such as RUNOFF that each used their own control notations, often specific to the target typesetting device. In the 1970s, Tunnicliffe led the development of a standard called GenCode for the publishing industry and later was the first chair of the International Organization for Standardization committee that created SGML, the first standard descriptive markup language. Book designer Stanley Rice published speculation along similar lines in 1970. Brian Reid, in his 1980 dissertation at Carnegie Mellon University, developed the theory and a working implementation of descriptive markup in actual use.|$|E
5000|$|The {{system was}} an IBM 1130 computer, a machine {{the size of}} a desk with 8KB of main memory, a 512KB disk drive, a Teletype CX paper tape reader and BRPE paper tape punch, and a Photon 713 photomechanical typesetter. The {{assignment}} was my first experience with managing a machine-readable document database: I learned to roll the punched paper tape carefully so that it could be stored neatly in cylindrical waste paper baskets.In the meantime, though I didn't know about it, the roots of generalized markup were being planted. Historically, electronic manuscripts contained control codes or macros that caused the document to be formatted in a particular way ("specific coding"). In contrast, <b>generic</b> <b>coding,</b> which began in the late 1960s, uses descriptive tags (for example, [...] "heading", rather than [...] "format-17").|$|E
40|$|This paper {{reports on}} the results of using an ontologically-based generic {{approach}} to carry out protocol analyses of designers. The Function-Behavior-Structure (FBS) ontology has been proposed as the basis of a <b>generic</b> <b>coding</b> scheme that transcends the domain of application, the task being studied, and the number of designers being studied. This paper presents results of testing this <b>generic</b> <b>coding</b> scheme in both in vitro and in situ conditions. After coding, these protocols was analyzed using descriptive statistics and Markov chains and the results compared. This work demonstrates the applicability of using the FBS coding scheme as a foundation for studying human design activities...|$|E
5000|$|<b>Generic</b> <b>code</b> {{for making}} network connections, {{transmitting}} {{objects to the}} database, parsing user input via HTTP POST events, etc.|$|R
50|$|When we {{transmit}} an NYT symbol, we have {{to transmit}} code for the NYT node, then for its <b>generic</b> <b>code.</b>|$|R
5000|$|Generic {{programming}} : Template metaprogramming {{allows the}} programmer {{to focus on}} architecture and delegate to the compiler the generation of any implementation required by client code. Thus, template metaprogramming can accomplish truly <b>generic</b> <b>code,</b> facilitating code minimization and better maintainability.|$|R
40|$|This thesis {{deals with}} human {{auditory}} system and psychoacoustics. Deals with psychoacoustic model of standard MPEG following the norm ISO/IEC 13818 - 3, Information technology - <b>Generic</b> <b>coding</b> of moving pictures and associated audio information Part 3 : Audio. Closer look {{is given to}} determination of PAM, to methods of masking and what potential of masking it has. Next the simple computation of psychoacoustic values is~done in Matlab environment...|$|E
40|$|Abstract. In {{this paper}} {{we present a}} method for {{preparation}} of technical drawings {{in the domain of}} electroplating lines. We treat the method as the combination of two tasks: configuration and doc-ument preparation. The proposed method combines the basic concepts of these domains: <b>generic</b> <b>coding</b> introduced in document preparation task and component oriented approach used in the con-figuration task. We show how both concepts are implemented in our configurator SyntheCAD. Key words: knowledge-based configuration, document preparation, silicon compilation. 1...|$|E
40|$|Abstract—This paper {{presents}} the results of utilizing a <b>generic</b> <b>coding</b> scheme in the protocol analysis of a professional software design team. The paper commences by introducing the notion that the fundamental processes of designing are the same irrespective of the domain and of the artifact being designed. The Function-Behavior-Structure (FBS) ontology is proposed as the basis of a generic protocol analysis coding scheme. The rich set of results obtained indicates the utility of using an ontologically-based coding scheme in studying software designers. The results from this case study are compared with those from another case study involving designers from the domain of architecture...|$|E
5000|$|The Hong Kong {{television}} {{rating system}} is since by <b>generic</b> <b>code</b> of television programs standard of the Broadcasting Ordinance (Cap.562) on December 11, 1995. The current ratings are: ...|$|R
50|$|During World war I, White Cross {{was also}} a <b>generic</b> <b>code</b> name used by the German Army for {{artillery}} shells with an irritant chemical payload affecting the eyes and mucous membranes.|$|R
50|$|Reflection {{can be used}} {{to adapt}} a given program to {{different}} situations dynamically. Reflection-oriented programming almost always requires additional knowledge, framework, relational mapping, and object relevance in order to take advantage of more <b>generic</b> <b>code</b> execution.|$|R
40|$|Abstract. In this paper, we {{describe}} a biological motivated image representa-tion {{in terms of}} local multi–modal primitives. These primitives are functional abstractions of hypercolumns in V 1 [13]. The efficient and <b>generic</b> <b>coding</b> of vi-sual information in terms of local symbolic descriptiones allows {{for a wide range}} of applications. For example, they have been used to investigate the multi–modal character of Gestalt laws in natural scenes [14], to code a multi–modal stereo matching and to investigate the role of different visual modalities for stereo [11], and to use a combination of stereo and grouping as well as Rigid Body Motion to acquire reliable 3 D information as demonstrated in this publication. ...|$|E
40|$|The {{standardization}} body ISO/IEC/JTC 1 /SC 29 /WG 11 (Moving Pictures Expert Group, MPEG), was {{drafting a}} standard for compressing the high bit rate of moving pictures and associated audio down to 1. 5 Mbit/s. The audio part of the proposed standard is described. Three layers of the audio coding scheme with increasing complexity and performance were defined. These layers were developed in collaboration mainly with AT&T, CCETT, FhG/University of Erlangen, Philips, IRT, and Thomson Consumer Electronics. The <b>generic</b> <b>coding</b> system is suitable for different applications, such as storage on inexpensive storage media or transmission over channels with limited capacity (such as digital audio broadcasting or ISDN audio transmission) ...|$|E
40|$|This Operational Practice will {{be valid}} during the interim {{transitional}} period, until the implementation by Australian broadcasters of the MXF file format. The document outlines the file format specifications {{to be used}} for the delivery of a commercial as a file on either a physical or electronic medium. If a physical medium is used then this document also specifies the number of commercials on each medium. All other aspects of digital delivery of commercials are defined by OP- 29. This includes video, audio and closed caption requirements, quality considerations, commercial timing, alignment signals, commercial identification and the delivery system requirements. 2. REFERENCES This Operational Practice references the following documents: AS/NZS 13818. 1 : 2002 Information technology – <b>Generic</b> <b>coding</b> of moving picture...|$|E
40|$|Erlang {{processes}} run {{independently of}} each other, each using separate memory and communicating {{with each other}} by message passing. These processes, while executing different code, do so following a number of common patterns. By examining different examples of Erlang-style concurrency in client/server architectures, we identify the generic and specific parts of the code and extract the <b>generic</b> <b>code</b> to form a process skeleton. In Erlang, {{the most commonly used}} patterns have been implemented in library modules, commonly referred to as OTP behaviours. They contain the <b>generic</b> <b>code</b> framework for concurrency and error handling, simplifying the complexity of concurrent programming and protecting the developer from many common pitfalls...|$|R
40|$|Code clone is {{a common}} term used to refer codes that have been {{repeated}} multiple times in a program. There are four types of code clone which are type I, type II, type III and type IV. Code clone detection models {{have been used to}} detect clones apart from code clone detection approaches by applying the protected access modifier rule and weightage. The major challenge faced in detecting code clone using models is the lack of generality in detecting all clone types. This is due to the use of different code clone detection approaches in the models that represents different representation of the source codes; hence it affecting the type of code clones detected. Based on this weakness, it is essential to propose a code clone detection model that can support different type of code. To overcome this weakness, <b>Generic</b> <b>Code</b> Clone Detection model that consists of five processes which are Pre-processing, Transformation, Parameterization, Categorization or called as pooling and Match Detection process has been proposed. A prototype has been developed to detect all code clone types in Java. The proposed method was evaluated in two case studies comprised of three Java applications. The result shows the <b>Generic</b> <b>Code</b> Clone Model prototype was able to detect Type I, Type II, Type III and Type IV clone pairs. The results imply that the <b>Generic</b> <b>Code</b> Clone Model was able to detect all code clone types in Java applications and the generated <b>Generic</b> <b>Code</b> Clone Model have better visualization of the code clone detection results...|$|R
40|$|AUTOBAYES is a fully automatic, schema-based program {{synthesis}} system for statistical data analysis applications. Its core component is a schema library, i. e., {{a collection of}} <b>generic</b> <b>code</b> templates with associated applicability constraints which are instantiated in a problem-specific way during synthesis. Currently...|$|R
40|$|Abstract—This paper {{presents}} a <b>generic</b> <b>coding</b> scheme utilized in a protocol analysis to study professional software designers. The paper commences by presenting {{the hypothesis that}} the fundamental processes of designing are the same irrespective of the domain and of the artifact being designed. The Function-Behavior-Structure (FBS) ontology has been proposed as the basis of a generic protocol analysis coding scheme. We compare the design processes of the beginning, middle and end of the design session. We also compare the beginning design processes with an architectural design session. The results obtained from using this coding scheme show that a generic method allows for the comparison of designing between different design disciplines. It shows there are differences in designing in terms of design processes between {{the beginning and the end}} of the design session. The results indicate that the mix of the design processes involved in architectural design and software design are different. I...|$|E
40|$|In this paper, we {{describe}} {{a new kind}} of image representation in terms of local multimodal Primitives. Our Primitives can be characterized by three properties: (1) They describe visual information by different modalities. (2) They are essentially adaptable according to the spatial and temporal context. (3) They give a condensed representation of local image structure that make use of meaningful attributes. Our Primitives are motivated by human visual processing. They are functional abstractions of hypercolumns in V 1 [1]. The efcient and <b>generic</b> <b>coding</b> of visual information allows {{for a wide range of}} applications. For example, they have been used to investigate the multimodal character of Gestalt laws in natural scenes [2], to code a multimodal stereo matching and to investigate the role of different visual modalities for stereo [3], and to use the regularity Rigid Body Motion to acquire reliable 3 D information. In addition, they have been applied to crossconnect vision and sound in an installation that encourages people to explore their soundmaking capabilities [4]. ...|$|E
40|$|A goal {{of sensory}} coding is to capture {{features}} of sensory input that are behaviorally relevant. Therefore, a generic principle of sensory coding should {{take into account}} the motor capabilities of an agent. Up to now, unsupervised learning of sensory representations with respect to <b>generic</b> <b>coding</b> principles has been limited to passively received sensory input. Here we propose an algorithm that reorganizes an agent’s representation of sensory space by maximizing the predictability of sensory state transitions given a motor action. We applied the algorithm to the sensory spaces of a number of simple, simulated agents with different motor parameters, moving in two-dimensional mazes. We find that the optimization algorithm generates compact, isotropic representations of space, comparable to hippocampal place fields. As expected, the size and spatial distribution of these place fields-like representations adapt to the motor parameters of the agent as well as to its environment. The representations prove to be well suited as a basis for path planning and navigation. They not only possess a high degree of state-transition predictability, but also are temporally stable. We conclude that the coding principle of predictability is a promising candidate for understanding place field formation as the result of sensorimoto...|$|E
5000|$|Since {{the classes}} are {{themselves}} objects, {{they can be}} asked questions such as [...] "what methods do you implement?" [...] or [...] "what fields/slots/instance variables do you define?". So objects can easily be inspected, copied, (de)serialized and so on with <b>generic</b> <b>code</b> that applies to any object in the system.|$|R
40|$|Adaptable {{applications}} are becoming the main drivers of the perva-sive computing paradigm. The {{development and the}} context-aware execution of such applications on mobile devices, often character-ized by their heterogeneity and limitedness, is a big challenge and it is far to be solved. The main difficulty is to provide (i) an easy-to-use and powerful programming technique for developers to actually code adaptable applications, and (ii) a context-aware run-time sup-port to properly handle contextual situations. This paper presents a programming model that provides developers {{with a set of}} agile and user-friendly extensions to Java for easily specifying <b>generic</b> <b>code</b> in a flexible and declarative way. The <b>generic</b> <b>code</b> specifies both the invariant semantics and the degree of variability of the application. Variability is expressed in terms of adaptable classes that declare adaptable methods, and alternative classes that define them. Then, an ad-hoc preprocessor resolves variability by generat-ing standard Java methods within standard Java classes that, oppor-tunely combined with the core code, make-up different application alternatives, i. e., standard Java applications that represent different ways of implementing an adaptable application specification. The programming model and the <b>generic</b> <b>code</b> preprocessor have been fully implemented in and for Java as Eclipse plugins. They are part of CHAMELEON, a framework that provides both an integrated de-velopment environment and a proper context-aware run-time sup-port to adaptable Java applications for limited devices...|$|R
5000|$|TEC-IT <b>Generic</b> QR <b>code</b> {{generator}} also {{supporting the}} EPC guidelines ...|$|R
40|$|This paper {{presents}} novel {{techniques for}} source controlled variable rate wideband speech coding. These techniques {{have been used}} in the variable-rate multimode wideband (VMR-WB) speech codec recently selected by 3 GPP 2 for wideband (WB) speech telephony, streaming, and multimedia messaging services in the cdma 2000 third generation wireless system. The coding algorithm contains several innovations that enable very good performance at average bit rates as low as 4. 0 kbit/s in typical conversational operating conditions. These innovations include: Efficient noise suppression algorithm, signal classification and rate selection algorithm that enables high quality operation at low average bit rates, efficient post-processing techniques tailored for wideband signals, and novel frame erasure concealment techniques including supplementary information for reconstruction of lost onsets and improving decoder convergence. Further, the coder utilizes efficient coding types optimized for different classes of speech signal including a <b>generic</b> <b>coding</b> type based on AMR-WB for transients and onsets, voiced coding type optimized for stable voiced signals and utilizing novel signal modification procedure resulting in good wideband quality at 6. 2 kbit/s, unvoiced coding types optimized for unvoiced segments, and efficient comfort noise generation coding. The article describes in detail some of the codec novel features. 1...|$|E
40|$|U. S. {{business}} leaders are experiencing a deficiency within STEM skill sets in newly hired employees, resulting in challenges to business sustainability. The {{purpose of this}} case {{study was to identify}} strategies used to develop new STEM employees for business sustainability. Participants included 5 IT {{business leaders}} who had experience developing new STEM employees in a technology organization in New York. The 3 -part theory of knowledge management, knowledge creation, and knowledge transfer was the conceptual framework for this study. Data collection included face-to-face interviews and analyses of company training plans, videos, and internal websites. Methodological triangulation of the analysis technique included organizing, collecting, and comparing data. Data analysis included a <b>generic</b> <b>coding</b> process to identify 3 themes: (a) strategies for organizational effectiveness, (b) strategies for new IT employee enrichment, and (c) strategies for improving business productivity. The results of the study indicated strategies to deliver employee training and development systems leveraging internal knowledge management and transfer could provide business leaders with effective ways to increase productivity and maintain organizational effectiveness. The social implications of the study include the potential to improve the economic strength of the local community because new insights on the development of STEM employees may lead to increased hiring and business sustainability...|$|E
40|$|The {{escalating}} rate {{of overweight}} and obesity {{is a global}} issue contributing to increasing numbers of overweight and obese women in pregnancy. Obesity in pregnancy increases the risk for adverse complications for both mother and baby. This small qualitative study describes the experiences of pregnant women, who were considered by their maternity care provider to be overweight or obese {{and the degree to}} which they felt that they had been treated differently. The study was conducted using a descriptive qualitative method using in-depth interviewing to record participants' experiences. Online anonymous participation via online forum discussions was the main source of participants with only one woman agreeing to a face-to-face interview. Thematic analysis and <b>generic</b> <b>coding</b> processes were employed resulting in four main themes. Findings from this study illustrated the extent to which these women were exposed to stress and anxiety associated with being labelled as being high risk and consequently being treated differently to other healthy pregnant women. Continuity of maternity care was the source of more positive experiences where women felt safe and supported. A one size fits all approach to the use of medical technology in pregnancy and labour should be questioned in light of the experiences reported by the women in this study...|$|E
40|$|Parametric {{polymorphism}} in Scala {{suffers from}} the usual drawback of erasure on the Java Virtual Machine: primitive values are boxed, leading to indirect access, wasteful use of heap memory and lack of cache locality. For performancecritical parts of the code, the Scala compiler introduces specialization, a transformation that duplicates and adapts the bodies of classes and methods for primitive types. Specializing code can speed up execution by an order of magnitude, {{but only if the}} code is called from monomorphic sites or from other specialized code. Still, if these “islands ” of specialized code are called from <b>generic</b> <b>code,</b> their performance becomes similar to that of <b>generic</b> <b>code,</b> losing optimality. To address this, our project builds high performance “bridges” between “islands ” of specialized code, removing the requirement that full traces need to be specialized: We use macros to delimit performance-critical “gaps ” between specialized code, which we also specialize. We then use reified types to dispatch the correct specialized variant, thus recovering performance across the “islands”. Our transformation 1 obtains speedups up to 30 x and around 12 x in average compared to <b>generic</b> only <b>code,</b> by enabling specialization to completely remove boxing and reach its full potential...|$|R
5000|$|<b>Generic</b> error-handling <b>code</b> (e.g. which {{displays}} the HTTP Error Code 500 page) ...|$|R
50|$|The {{control table}} entries are then much {{more similar to}} {{conditional}} statements in procedural languages but, crucially, without the actual (language dependent) conditional statements (i.e. instructions) being present (the <b>generic</b> <b>code</b> is physically in the interpreter that processes the table entries, not in the table itself - which simply embodies the program logic via its structure and values).|$|R
