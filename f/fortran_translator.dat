5|13|Public
40|$|This paper {{reports on}} the status of the <b>Fortran</b> <b>translator</b> for the Cedar {{computer}} at the end of March, 1991. A brief description of the Cedar Fortran language is followed by a discussion of the fortran 77 to Cedar Fortran parallelizer that describes the techniques currently being implemented. A collection of experiments illustrate the effectiveness of the current implementation, and point toward new approaches to be incorporated into the system in the near future...|$|E
40|$|The {{evolution}} of a compiler: PUFFT 1964 - 1972. The Purdue University Fast <b>Fortran</b> <b>Translator</b> PUFFT went into operation on a 7090 in 1964. It has since then been used in many environments and subject to many extensions and improvements. These changes and improvements are described, along with the reasons for making them. The use of PUFFT demonstrates that second-generation equipment may find its useful life prolonged, particularly at educational institutions seeking low cost processing {{of large numbers of}} jobs...|$|E
40|$|Cetus is a {{compiler}} {{infrastructure for}} the source-to-source transformation of programs. We created Cetus {{out of the}} need for a compiler research environment that facilitates the development of interprocedural analysis and parallelization techniques for C, C++, and Java programs. We will describe our rationale for creating a new compiler infrastructure and give an overview of the Cetus architecture. The design is intended to be extensible for multiple languages and will become more flexible as we incorporate feedback from any di#culties we encounter introducing other languages. We will characterize Cetus' runtime behavior of parsing and IR generation in terms of execution time, memory usage, and parallel speedup of parsing, as well as motivate its usefulness through examples of projects that use Cetus. We will then compare these results with those of the Polaris <b>Fortran</b> <b>translator...</b>|$|E
5000|$|<b>FORTRAN</b> (FORmula <b>TRANslator),</b> a compiler, runtime package, and [...] "load and go" [...] OS for the {{scientific}} language compiler.|$|R
40|$|The <b>FORTRAN</b> CEP <b>translator</b> {{converts}} {{a source}} program {{written in the}} FORTRAN CEP language [l] into an object program written {{in the language of}} the CEP computer [2] It is the result of the work done by O. G. Mancino, M. Morandi Cecchi, L, Spanedda, N. Wolkenstein, with the further cooperation of A. Andronico and M. Martelli, in order to modify, complete and programme a preceding draft of the <b>FORTRAN</b> CEP <b>translator</b> [3]...|$|R
5000|$|... 1957: FORTRANIBM revolutionizes {{programming}} {{with the}} introduction of <b>FORTRAN</b> (Formula <b>Translator),</b> which soon becomes the most widely used computer programming language for technical work. FORTRAN is still the basis for many important numerical analysis programs.|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThis paper presents a computer language translator {{which allows the}} IBM FORTRAN G (or higher level) user to solve directly problems in which the variables may be n-tuples and/or the FORTRAN arithmetic and relational operations may be defined by the user. The translator, called the NSFORT (for Nonstandard <b>FORTRAN)</b> <b>translator,</b> will (1) decompose all expressions {{to a series of}} binary arithmetic operations, relational operations, or user defined functions; (2) generate CALL statements to user supplied subprograms to perform the above operations; and (3) produce a new source program that is in every respect acceptable to the FORTRAN compiler. While using the NSFORT translator the user has virtually unrestricted use of FORTRAN. The translator's applications include n-precision arithmetic, vector and matrix operations, numerically evaluated analytic derivatives, interval arithmetic, and others. The paper describes completely the use and operation of the translator, provides examples, indicates applications, and discusses,, programming techniques. [URL] United States Marine Corp...|$|E
40|$|This paper {{reports on}} the status of the <b>Fortran</b> <b>translator</b> for the Cedar {{computer}} at the end of March, 1991. A brief description of the Cedar Fortran language is followed by a discussion of the fortran 77 to Cedar Fortran parallelizer that describes the techniques currently being implemented. A collection of experiments illustrate the effectiveness of the current implementation, and point toward new approaches to be incorporated into the system in the near future. 1 Introduction The University of Illinois has been a pioneer in the development of program translation techniques for vector and parallel computers since the late 1960 s, when Illiac IV was developed. It is therefore natural that automatic parallelization {{has become one of the}} major concerns of the Cedar project, the latest machine building effort of the University of Illinois. The Cedar machine is a hierarchical multi-processor. It supports several levels of parallelism and provides data storage at the processor, cluster, an [...] ...|$|E
40|$|Discussion of a {{translator}} designed {{to simplify the}} programming of problems involving the TRIGMAN formula manipulation system. The translator allows for {{the introduction of a}} new data type, SERIES, into a FORTRAN program and translates a user's program into legal <b>FORTRAN.</b> The <b>translator</b> is adaptable to other formula manipulation systems presently used in celestial mechanics...|$|R
40|$|This {{dissertation}} {{describes the}} efforts to design and implement the Generalized Portable SHMEM library, GPSHMEM, as well as supplementary tools. There are two major components of the GPSHMEM project: the GPSHMEM library itself and the <b>Fortran</b> 77 source-to-source <b>translator.</b> The rest of this thesis {{is divided into two}} parts. Part I introduces the shared memory model and the distributed shared memory model. It explains the motivation behind GPSHMEM and presents its functionality and performance results. Part II is entirely devoted to the <b>Fortran</b> 77 <b>translator</b> call fgpp. The need for such a tool is demonstrated, functionality goals are stated, and the design issues are presented along with the development of the solutions...|$|R
40|$|The <b>FORTRAN</b> CEP <b>translator</b> {{converts}} {{a source}} program {{written in the}} FORTRAN CEP language into an object program written {{in the language of}} the CEP computer. In this paper, after an outline of the CEP computer, the internal structure of the translator is described. Emphasis is on the compilation of expressions, of input/output lists, and of subscripted variables...|$|R
50|$|COMTRAN (COMmercial TRANslator) is {{an early}} {{programming}} language developed at IBM. It was intended as the business programming equivalent of the scientific programming language <b>FORTRAN</b> (FORmula <b>TRANslator).</b> It served {{as one of the}} forerunners to the COBOL language. Developed by Bob Bemer, in 1957, the language was the first to feature the programming language element known as a picture clause.|$|R
40|$|The FORTRAN CEP Ianguage {{differs from}} FORTRAN II, as {{described}} in [l], mainly because : (1) it extends the variety of the modes for real quantities; (2) it allows the addressing of {{a greater number of}} iput-output equipments; 3) it removes the limitations on the list of quantities to be transmitted between the magnetic core memory and the drum or the magnetic tape units. A program, written in FORTRAN II language, maybe compiled by the <b>FORTRAN</b> CEP <b>translator,</b> which has been already realized, with only a few modification. The definition of the FORTRAN CEP language is the object of the present paper...|$|R
40|$|The <b>Fortran</b> {{simulation}} <b>translator</b> (FST) is {{a simulation}} language, {{that enables the}} researcher to develop concepts, in terms of mathematical equations, e. g. about agro-ecological systems, that are converted in a Fortran program with data files (Fortran simulation environment, FSE). This generated Fortran program is well-structured and can be executed using both user developed and standard mathematical library subroutines (e. g. IMSL). The possibility to use the generated Fortran program {{as a starting point}} for further model development makes FST a valuable tool, both for research and education. (C) 2002 Elsevier Science B. V. All rights reserved...|$|R
40|$|To {{address the}} {{difficulties}} associated with computer programming, this article first looks at some reasons why students, especially engineering students, find programming such a daunting pros-pect, and it proposes a programming learning tool managed by a Deterministic Finite Automaton (DFA). The DFA machine used a graphical environment provided by Simulink {{to teach the}} FOR-mula <b>TRANslator</b> (<b>FORTRAN)</b> programming language to science students. The proposed programming learning tool and the traditional method of teaching were compared and evaluated. The results of evaluation {{indicated that there was}} an improvement in learning ef-fectiveness of the proposed learning tool...|$|R
40|$|This book {{presents}} a generic process-based crop growth model, GECROS (Genotype-by-Environment interaction on CROp growth Simulator), developed in Wageningen. The model uses robust yet simple algorithms {{to summarize the}} current knowledge of individual physiological processes and their interactions and feedback mechanisms. It was structured from the basics of whole-crop systems dynamics to embody the physiological causes rather than descriptive algorithms of the emergent consequences. It also attempts to model each process at a consistent level of detail, so that no area is overemphasized and similarly no area is treated in a trivial manner. Main {{attention has been paid}} to interactive aspects in crop growth such as photosynthesis-transpiration coupling via stomatal conductance, carbon-nitrogen interaction on leaf area index, functional balance between shoot and root activities, and interplay between source supply and sink demand on reserve formation and remobilization. GECROS is presented here in an open style, rather than as a ‘black-box’. Model theories are described in individual chapters, and their supporting texts (notably model derivations) are given in Appendices. The model source code, written in the simulation language FST (<b>FORTRAN</b> Simulation <b>Translator),</b> and the definition of variables are provided...|$|R
40|$|Automatic {{differentiation}} {{provides the}} foundation for sensitivity analysis and subsequent design optimization of complex systems by reliably computing derivatives of large computer codes, with the potential of doing it many times faster compared to current approaches. This paper describes the ADIFOR (Automatic DIfferentiation of <b>FORtran)</b> system, a <b>translator</b> that augments <b>Fortran</b> programs with statements for the computation of derivatives. ADIFOR accepts arbitrary Fortran 77 code defining the computation of a function and writes portable Fortran 77 code for the computation of its derivatives. Our goal is to free the computational scientist from worrying about the accurate and efficient computation of derivatives, even for complicated "functions", thereby enabling him {{to concentrate on the}} more important issues of system modeling and algorithm design. This paper gives an overview of the principles underlying the ADIFOR system, and comments on the power of automatic differentiation for c [...] ...|$|R
40|$|Crop growth models could stimulate {{growth and}} {{development}} based on science principles and mathematical equations. They also able to evaluate effects of climate, soil, water and agronomic management practices on crop yield. In the present study, an eco-physiological simulation model developed to assess wild oat damage to winter wheat growth and yield. The general structure of this model is derived from LINTUL 1 model which modified to wild oat competition against winter wheat. LINTUL 1 model was developed for simulation of spring wheat potential production level. In this study, first, we added development stage (DVS) and vernalization to LINTUL 1 for simulation of winter wheat {{growth and development}} and then the model calibrated for potential production level. Finally, we incorporate harmful effects of wild oat to winter wheat growth and yield. Weather data used as input were average daily minimum and maximum temperature (°C) and daily global radiation (MJ m- 2) in Mashhad, Iran. Parameter values were derived from the literature. The model is written in <b>Fortran</b> Simulation <b>Translator</b> (FST) programming language and then validated based on an experiment data. For these purposes different wild oat plant densities were arranged. The data of this experiment does not use for calibration. The results showed that this model was in general able to simulate the temporal changes in DVS of winter wheat and wild oat, total dry matter (TDM) of winter wheat and wild oat and yield loss of wheat due to wild oat competition in all treatments, satisfactorily. Root mean square error (RMSE) for winter wheat DVS, wild oat DVS, average winter wheat TDM, average wild oat TDM, and yield loss of winter wheat was 10. 4, 14. 5, 5. 8, 7. 6 and 7. 5, respectively...|$|R

