2|7|Public
40|$|IRMCF 143 S {{is a high}} {{performance}} Flash based motion control IC designed primarily for position servo applications based on an incremental encoder. IRMCF 143 S is designed to achieve low cost yet {{high performance}} control solutions for advanced inverterized servo motor control. IRMCF 143 S contains two computation engines. One is the Flexible Motion Control Engine (MCETM) for sinusoidal Field Oriented Control (FOC) of servo motors; the other is an 8 -bit high-speed microcontroller (8051). Both computation engines are integrated into one monolithic chip. The MCETM contains a collection of control elements implemented in a dedicated computation engine such as Proportional plus Integral, Vector rotator, Angle estimator, Multiply/Divide, and Low loss SVPWM. The user can program a motion control algorithm by connecting these control elements using a <b>graphic</b> <b>compiler.</b> A unique analog/digital circuit and algorithm to fully support two leg shunt current sensing is also provided. The 8051 microcontroller performs 2 -cycle instruction execution (15 MIPS at 30 MHz 8051 CLK). The MCE and 8051 microcontroller are connected via dual port RAM for signal monitoring and command input. An advanced <b>graphic</b> <b>compiler</b> for the MCETM is seamlessly integrated into the MATLAB/Simulink environment, while third party JTAG-based emulator tools are supported for 8051 software development. IRMCF 143 S comes in a 64 pin QFP package...|$|E
40|$|IRMCF 188 {{is a high}} {{performance}} Flash based motion control IC designed and optimized for complete air conditioner control which contains two computation engines integrated into one monolithic chip. One is the Flexible Motion Control Engine (MCETM) for sensorless control of permanent magnet motors or induction motors; the other is an 8 -bit high-speed microcontroller (8051). The user can program a motion control algorithm by connecting these control elements using a <b>graphic</b> <b>compiler.</b> Key components of the complex sensorless control algorithms, such as the Angle Estimator, are provided as complete pre-defined control blocks. A unique analog/digital circuit and algorithm fully supports single shunt or leg shunt current reconstruction. IRMCF 188 performs a PFC (Power Factor Correction) function {{in addition to the}} motor control. IRMCF 188 comes in a 64 pin QFP package...|$|E
40|$|A {{graphical}} {{process control}} language {{has been developed}} {{as a means of}} defining process control software. The user configures a block diagram describing the required control system, from a menu of functional blocks, using a graphics software system with graphics terminal. Additions may be made to the menu of functional blocks, to extend the system capability, and a group of blocks may be defined as a composite block. This latter feature provides for segmentation of the overall system diagram and the repeated use of the same group of blocks within the system. The completed diagram is analyzed by a <b>graphics</b> <b>compiler</b> which generates the programs and data structure to realise the run-time software. The run-time software has been designed as a data-driven system which allows for modifications at the run-time level in both parameters and system configuration. Data structures have been specified to ensure efficient execution and minimal storage requirements in the final control software. Machine independence has been accomodated as far as possible using CORAL 66 as the high level language throughout the entire system; the final run-time code being generated by a CORAL 66 compiler appropriate to the target processor...|$|R
40|$|Inferno is an {{operating}} system for creating and supporting distributed services. It was originally {{developed by the}} Computing Science Research Center of Bell Labs, the R&D arm of Lucent Technologies, and further developed by other groups in Lucent. Inferno was designed specifically as a commercial product, both for licensing in the mar-ketplace and for use within new Lucent offerings. It encapsulates many years of Bell Labs research in operating systems, languages, on-the-fly <b>compilers,</b> <b>graphics,</b> security, net-working and portability...|$|R
50|$|Inferno is a {{distributed}} {{operating system}} started at Bell Labs, {{but is now}} developed and maintained by Vita Nuova Holdings as free software. Inferno {{was based on the}} experience gained with Plan 9 from Bell Labs, and the further research of Bell Labs into operating systems, languages, on-the-fly <b>compilers,</b> <b>graphics,</b> security, networking and portability. The name of the operating system and many of its associated programs, {{as well as that of}} the current company, were inspired by Dante Alighieri's Divine Comedy.|$|R
40|$|This report {{introduces}} translucent procedures {{as a new}} {{mechanism for}} implementing behavioral abstractions. Like an ordinary procedure, a translucent procedure can be invoked, and thus provides an obvious way to capture a behavior. Translucent procedures, like ordinary procedures, can be manipulated as first-class objects and combined using functional composition. But unlike ordinary procedures, translucent procedures have structure that can be examined in well-specified non-destructive ways, without invoking the procedure. I have developed an experimental implementation of a normal-order lambda calculus evaluator augmented with novel reflection mechanisms for controlled violation of the opacity of procedures. I demonstrate the utility of translucent procedures by using this evaluator to develop large application examples from the domains of <b>graphics,</b> computer algebra, <b>compiler</b> design, and numerical analysis...|$|R
40|$|The {{description}} of the control task is achieved by modules and corresponds to the classical structural top-down hardware design. For notation of module structures and module functions the process language ANDL has been developed. Realization was carried out on a transputer cluster coupled with PC's and workstations. In the frame of this project a programming system has been developed consisting of the components ANDL <b>compiler,</b> <b>graphic</b> ANDL-front-end, routing system, modelling tool, visualization tool and process model coupling. Design methodology is demonstrated at an example, and verification {{has been carried out}} by prototype implementation. (WEN) Available from TIB Hannover: F 94 B 1457 +a / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekSIGLEBundesministerium fuer Forschung und Technologie (BMFT), Bonn (Germany) DEGerman...|$|R
5000|$|... iOS Application Development - course {{introduces}} {{students to}} the programming language Objective-C and application development for mobile devices based on iOS. At {{the end of the}} course, students will be able to develop applications and programs in Objective-C for iPhone, iPad, and other iOS devices, as well as working in a development environment XCode. The course includes an introduction to the language of Objective-C, the application of the concepts of object-oriented programming {{in the development of the}} language, study of the development paradigm of MVC, the work of the various components in the development environment Xcode. Before the start of the course the student should be familiar with object-oriented programming, be familiar with the syntax of C-like languages and have a basic knowledge of <b>graphic</b> design tools, <b>compilers</b> and debuggers.|$|R
40|$|We {{present an}} {{automated}} technique for finding defects in <b>compilers</b> for <b>graphics</b> shading languages. key challenge in compiler testing {{is the lack}} of an oracle that classifies an output as correct or incorrect; this is particularly pertinent in <b>graphics</b> shader <b>compilers</b> where the output is a rendered image that is typically under-specified. Our method builds on recent successful techniques for compiler validation based on metamorphic testing, and leverages existing high-value graphics shaders to create sets of transformed shaders that should be semantically equivalent. Rendering mismatches are then indicative of shader compilation bugs. Deviant shaders are automatically minimized to identify, in each case, a minimal change to an original high-value shader that induces a shader compiler bug. We have implemented the approach as a tool, GLFuzz, targeting the OpenGL shading language, GLSL. Our experiments over a set of 17 GPU and driver configurations, spanning the main 7 GPU designers, have led to us finding and reporting more than 60 distinct bugs, covering all tested configurations. As well as defective rendering, these issues identify security-critical vulnerabilities that affect WebGL, including a significant remote information leak security bug where a malicious web page can capture the contents of other browser tabs, and a bug whereby visiting a malicious web page can lead to a ``blue screen of death'' under Windows 10. Our findings show that shader compiler defects are prevalent, and that metamorphic testing provides an effective means for detecting them automatically...|$|R

