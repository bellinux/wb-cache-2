2|555|Public
5000|$|Printing to <b>File</b> (<b>Remote),</b> using LPR or USB PictBridge-compatible printer ...|$|E
40|$|Almost all {{computer}} users know Windows Explorer. With the windows explorer, a user {{could do the}} operation file/directory, such as seeing {{the structure of the}} hierarchy from the directory, copied some files et cetera. In other words, a window explorer had file manager facilities. This research will discuss the development of the application of the data storage based on web that had file manager facilities (remote virtual the data storage) with the previleges. This research could be applied for the management of the lectures data in the class or in the computer laboratory of a institution. Abstract in Bahasa Indonesia : Hampir setiap pengguna komputer mengenal Windows Explorer. Karena dengan Windows Explorer, user dapat melakukan operasi file/direktori, seperti melihat struktur hirarki dari direktori, menyalin file dan lain sebagainya. Dengan kata lain, window explorer memiliki fasilitas pengaturan file (file manager). Penelitian ini akan membahas pembangunan aplikasi penyimpanan data berbasis web yang mempunyai fasilitas pengaturan <b>file</b> (<b>remote</b> virtual the data storage) dengan hak akses yang berbeda (previleges). Penelitian ini dapat diimplementasikan untuk manajemen data perkuliahan di kelas maupun di laboratorium komputer suatu perguruan tinggi. Kata kunci: remote virtual the data storage, file manager, web, NAS...|$|E
50|$|<b>Remote</b> <b>File</b> Inclusion (RFI) {{occurs when}} the web {{application}} downloads and executes a <b>remote</b> <b>file.</b> These <b>remote</b> <b>files</b> are usually obtained {{in the form of}} an HTTP or FTP URI as a user-supplied parameter to the web application.|$|R
50|$|The {{messages}} may {{be directed}} to various destinations, tuned by facility and severity, including console, <b>files,</b> <b>remote</b> syslog servers, or relays.|$|R
50|$|If {{both local}} <b>files</b> and <b>remote</b> <b>files</b> offers the same {{abstract}} interfaces, any high-level module using local files and fully implementing the dependency inversion pattern {{will be able}} to access local and <b>remote</b> <b>files</b> indiscriminately.|$|R
40|$|This paper {{describes}} a file {{system for a}} programmer's workstation that has access both to a local disk and to <b>remote</b> <b>file</b> servers. The file system {{is designed to help}} programmers manage their local naming environments and share consistent versions of collections of software. It names multiple versions of local and <b>remote</b> <b>files</b> in a hier-archy. Local names can refer to local files or be attached to <b>remote</b> <b>files.</b> <b>Remote</b> <b>files</b> also may be referred to di-rectly. <b>Remote</b> <b>files</b> are immutable and cached on the lo-cal disk. The file system is part of the Cedar experimental programming environment at Xerox PARC and has been in use since late 1983...|$|R
50|$|Compared to the SCP {{protocol}}, {{which only}} allows file transfers, the SFTP protocol {{allows for a}} range of operations on <b>remote</b> <b>files</b> which make it more like a <b>remote</b> <b>file</b> system protocol. An SFTP client's extra capabilities include resuming interrupted transfers, directory listings, and <b>remote</b> <b>file</b> removal.|$|R
50|$|On <b>remote</b> <b>file</b> we {{may have}} to use only create or replace: <b>remote</b> <b>files</b> update do not {{necessarily}} make sense because random update is too slow comparing local file random update and may be very complicated to implement). On <b>remote</b> <b>file</b> we may need partial read and write (at least inside the <b>remote</b> <b>file</b> module to allow download or upload to resume after a communication interruption), but random read isn't adapted (except if a local cache is used).|$|R
5000|$|File Transfer facilities, {{enabling}} {{the transfer of}} <b>files</b> between <b>remote</b> and local machines.|$|R
50|$|Creating Thumbs.db <b>files</b> on <b>remote</b> shares can be {{disabled}} with a Group Policy setting.|$|R
5000|$|... #Caption: A {{command-line}} session showing repository creation, {{addition of}} a <b>file,</b> and <b>remote</b> synchronization ...|$|R
5000|$|File Transfer - Transfer <b>files</b> between <b>remote</b> computers, tablets or {{smartphones}} during {{remote support}} sessions ...|$|R
5000|$|TextMate has no {{built-in}} support for editing <b>files</b> on <b>remote</b> servers. There are workarounds on the TextMate Wiki.|$|R
50|$|When {{designing}} the <b>remote</b> <b>file</b> server client for each conceptual interface {{you have to}} ask yourself the level of service your high level modules require (not necessary all of them) and not only how to implement the <b>remote</b> <b>file</b> server functionalities but maybe how to make the file services in your application compatibles between already implemented file services (local files, existing cloud clients) and your new <b>remote</b> <b>file</b> server client.|$|R
40|$|The system Spacewalk is a managment {{tool for}} the linux {{operating}} systems based on RPM package manager. The aim of thesis is adding support to Spacewalk for DEB package managment system, which is connected with Debian, a distribution of linux operating system. The result is native support of managing Debian system by the Spacewalk, what includes a registration of system, distribution of configuration <b>files,</b> <b>remote</b> scripts running and managment of DEB packages...|$|R
5000|$|... raccess (<b>remote</b> <b>file</b> access via /net/machine/path/from/raccess/root...) ...|$|R
50|$|A network {{file system}} is a file system {{that acts as a}} client for a <b>remote</b> <b>file</b> access protocol, {{providing}} access to files on a server. Programs using local interfaces can transparently create, manage and access hierarchical directories and <b>files</b> in <b>remote</b> network-connected computers. Examples of network file systems include clients for the NFS, AFS, SMB protocols, and file-system-like clients for FTP and WebDAV.|$|R
5000|$|In contrast, WebDAV is a [...] "set of {{extensions}} to the HTTP protocol {{which allows}} users to collaboratively edit and manage <b>files</b> on <b>remote</b> web servers".|$|R
5000|$|<b>Remote</b> <b>file</b> transfer/synchronization: ftp, scp, rsync, unison, rtorrent ...|$|R
40|$|Block {{devices in}} {{computer}} operating systems typically correspond to disks or disk partitions, {{and are used}} to store files in a filesystem. Disks {{are not the only}} real or virtual device which adhere to the block accessible stream of bytes block device model. <b>Files,</b> <b>remote</b> devices, or even RAM may be used as a virtual disks. This article examines several common combinations of block device layers used as virtual disks in the Linux operating system: disk partitions, loopback files, software RAID, Logical Volume Manager, and Network Block Devices. It measures their relative performance using different filesystems: Ext 2, Ext 3, ReiserFS, JFS, XFS,NFS...|$|R
50|$|Laptop Cop - <b>Remote</b> <b>file</b> {{retrieval}} & deletion and geolocation software.|$|R
40|$|This paper {{presents}} {{the implementation of}} the ORFA client. ORFA aims at providing an efficient access to <b>remote</b> <b>file</b> systems through high-speed local networks such as MYRINET. The ORFA client is a lightweight shared library that may be pre-loaded to override standard file access routines to allow <b>remote</b> <b>file</b> access for any legacy application...|$|R
50|$|Approx is a caching {{proxy server}} for Debian archive files.It is an HTTP-based proxy server for Debian-style package archives. It fetches <b>files</b> from <b>remote</b> {{repositories}} on demand, and caches them for local use.|$|R
5000|$|... injects a {{remotely}} hosted file {{containing a}} malicious code (<b>remote</b> <b>file</b> include) ...|$|R
5000|$|... {{real-time}} <b>remote</b> <b>file</b> access, replication, collaboration & {{sharing with}} automatic file synchronization ...|$|R
50|$|Local File Inclusion (LFI) {{is similar}} to a <b>Remote</b> <b>File</b> Inclusion {{vulnerability}} except instead of including <b>remote</b> <b>files,</b> only local files i.e. files on the current server can be included for execution. This issue can still lead to remote code execution by including a file that contains attacker-controlled data such as the web server's access logs.|$|R
50|$|SFTP {{provides}} secure {{file transfer}} and a secure <b>remote</b> <b>file</b> system. While SFTP clients may transfer files and directories, the related file system {{may not be}} mounted locally using SFTP alone. Using SSHFS, a <b>remote</b> <b>file</b> system may be treated {{in the same way}} as other volumes (such as CDs, DVDs, USB flash drives and shared disks).|$|R
5000|$|The rsync <b>remote</b> <b>file</b> synchronizer, {{which uses}} zlib to {{implement}} optional protocol compression.|$|R
5000|$|The NetCDF-Java library {{currently}} {{reads the}} following <b>file</b> formats and <b>remote</b> access protocols: ...|$|R
40|$|This paper {{describes}} a workstation file system that supports {{a group of}} cooperating programmers by allowing them both to manage local naming environments and to share consistent versions of collections of software. The file system {{has access to the}} workstation's local disk and to remote fie servers, and provides a hierarchical name space that includes the files on both. Local names can refer to local files or be attached to <b>remote</b> <b>files.</b> <b>Remote</b> <b>files,</b> which also may be referred to directly, are immutable and cached on the local disk. The file system is part of the Cedar experimental programming environment at Xerox PARC and has been in use since late 1983...|$|R
40|$|<b>Remote</b> <b>file</b> {{synchronization}} {{has been}} studied extensively over the last decade, and the existing approaches {{can be divided into}} single-round and multi-round protocols. Single-round protocols are preferable in scenarios involving small files and large network latencies (e. g., web access over slow links) due protocol complexity and computing and I/O overheads. The best-known algorithms which are used for synchronization of file systems across machines are rsync, set reconciliation, Remote Differential Compression & RSYNC based on erasure codes. In this paper we will discuss the <b>remote</b> <b>file</b> synchronization protocols and compare the performance of all these protocols on different data sets. Index Terms — <b>Remote</b> <b>files</b> synchronization (RSYNC) ...|$|R
5000|$|Document management, <b>remote</b> <b>file</b> systems {{link with}} NTFS, FTP, SVN, S3 (Dropbox, Google drive) ...|$|R
5000|$|Inclusion protection: Uploaded and <b>remote</b> <b>files</b> can't be included, {{mitigating}} arbitrary file inclusion attacks.|$|R
5000|$|Integrating in {{the same}} view both local (<b>files,</b> databases) and <b>remote</b> data through OGC standards.|$|R
5000|$|File {{attachments}} - {{this field}} type also allows <b>remote</b> <b>files</b> to be referenced through a URL ...|$|R
5000|$|File {{inclusion}} functions, e.g. (in PHP): [...] is {{an example}} of a <b>Remote</b> <b>File</b> Inclusion vulnerability ...|$|R
