0|1897|Public
40|$|We {{separated}} isoenzymes of {{creatine kinase}} by anion-exchange chromatography, {{with use of}} an elution gradient containing lithium acetate (0. 1 to 0. 6 mol/L). A <b>stream</b> <b>splitter</b> was used to divert a 5 % side stream of column effluent, which was subsequently mixed with the reagents necessary for bioluminescence assay of the separated isoenzymes. The use of the <b>stream</b> <b>splitter</b> greatly de-creased the rate of consumption of reagent and, when combined with a peristaltic pumping system, permitted independent control of the side-stream flow rate. Thus both the residence interval in a delay coil in which the AlP reaction product is formed and the bioluminescence re-sponse could be increased. Bioluminescence emission was monitored in a flow-through fluorometer without use of an external light source or filters. Separation and de...|$|R
5000|$|The {{standard}} commands are [...] {{with the}} normal <b>input</b> <b>stream</b> being the keyboard. In Unix tradition the <b>input</b> <b>stream</b> can be changed, so input {{can come from}} a disk file. Similarly, output can be redirected.|$|R
50|$|The {{lookahead}} and <b>input</b> <b>stream</b> remain unchanged.|$|R
50|$|In each step, the parser {{reads the}} next-available symbol from the <b>input</b> <b>stream,</b> and the top-most symbol from the stack. If the input symbol and the stack-top symbol match, the parser {{discards}} them both, {{leaving only the}} unmatched symbols in the <b>input</b> <b>stream</b> and on the stack.|$|R
50|$|In {{a related}} and more general method, a {{dictionary}} is built from redundancy extracted from a data environment (various <b>input</b> <b>streams)</b> which dictionary is then used statically to compress a further <b>input</b> <b>stream.</b> For example, a dictionary is built from old English texts then {{is used to}} compress a book.|$|R
5000|$|I/O mode {{indicator}} (<b>input</b> <b>stream,</b> output stream, or update stream) ...|$|R
5000|$|In {{object-oriented}} programming, <b>input</b> <b>streams</b> {{are generally}} implemented as iterators.|$|R
5000|$|Optional <b>input</b> <b>stream</b> {{synchronization}} {{to provide}} a constant end-to-end delay.|$|R
5000|$|... {{generate}} stereo audio stream {{from two}} mono audio <b>input</b> <b>streams</b> ...|$|R
50|$|In {{the next}} three steps the parser will replace ''''F'''' on the stack by ''''a'''', write the rule number 3 to the output stream and remove the ''''a'''' and '''')'''' from both the stack and the <b>input</b> <b>stream.</b> The parser thus ends with ''''$'''' on both its stack and its <b>input</b> <b>stream.</b>|$|R
2500|$|Example: The <b>input</b> <b>stream</b> from above, 10011011, is {{processed}} this way: ...|$|R
2500|$|Scanner {{class for}} parsing data from various <b>input</b> <b>streams</b> and buffers ...|$|R
5000|$|Example: The <b>input</b> <b>stream</b> from above, 10011011, is {{processed}} this way: ...|$|R
5000|$|Scanner {{class for}} parsing data from various <b>input</b> <b>streams</b> and buffers ...|$|R
5000|$|Streams API - This API {{converts}} the <b>input</b> <b>streams</b> {{to output}} and produces the result.|$|R
5000|$|Up to 8 {{outbound}} {{streams and}} 8 simultaneous <b>input</b> <b>streams</b> (depending on the model) ...|$|R
40|$|International audienceIn recent years, {{shrinking}} size in {{integrated circuits}} has imposed {{a big challenge}} in maintaining the reliability in conventional computing. Stochastic computing {{has been seen as}} a reliable, low-cost, and low-power alternative to overcome such issues. Stochastic Computing (SC) computes data in the form of bit streams of 1 s and 0 s. Therefore, SC outperforms conventional computing in terms of tolerance to soft error and uncertainty at the cost of increased computational time. Stochastic Computing with uncorrelated <b>input</b> <b>streams</b> requires streams to be highly independent for better accuracy. This results in more hardware consumption for conversion of binary numbers to stochastic streams. Correlation can be used to design Stochastic Computation Elements (SCE) with correlated <b>input</b> <b>streams.</b> These designs have higher accuracy and less hardware consumption. In this paper, we propose new SC designs to implement image processing algorithms with correlated <b>input</b> <b>streams.</b> Experimental results of proposed SC with correlated <b>input</b> <b>streams</b> show on average 37 % improvement in accuracy with reduction of 50 - 90 % in area and 20 - 85 % in delay over existing stochastic designs...|$|R
5000|$|At initial step 0, the <b>input</b> <b>stream</b> [...] "A*2 + 1" [...] {{is divided}} into ...|$|R
5000|$|Specifying <b>input</b> <b>stream</b> {{information}} that is temperature, pressure, Composition type and flow rate of the components ...|$|R
40|$|The {{design and}} {{implementation}} of hybrid symbolic/statistical architectures is a major area of interest in current multimodal system development. Such an architecture attempts to improve multimodal recognition and disambiguation rates by using corpus-based statistics to weight the contributions from various <b>input</b> <b>streams.</b> This {{is in contrast to}} current architectures that assume independence between <b>input</b> <b>streams,</b> and combine un-weighted posterior probabilities simply by taking their cross product...|$|R
5000|$|... accept, {{which is}} written as 'acc' and {{indicates}} that the parser accepts the string in the <b>input</b> <b>stream.</b>|$|R
30|$|The GNSS {{application}} {{can also}} be used with a lower rate <b>input</b> <b>stream</b> without a significant loss in application performance. For this paper, we analyzed the effect of the <b>input</b> <b>stream</b> decimation to the complexity of the main baseband processes. The other parameters, such as acquisition time and number of frequency bins for acquisition and number of active correlators per channel for tracking, remained the same as in [36].|$|R
30|$|The pipelined {{inner join}} {{requires}} a memory space that grows proportionally {{to the size}} of the <b>input</b> <b>streams.</b> The operator is implemented using one hash table per stream. When a new item x is received from an <b>input</b> <b>stream,</b> the operator checks if it is present in the tables of the other streams. If it is, the item is written in the output stream and stored in the related table.|$|R
40|$|Leaky bucket is a {{flow control}} {{mechanism}} {{that is designed}} to reduce the effect of the inevitable variability in the <b>input</b> <b>stream</b> into a node of a communication network. In this paper we study what happens when an <b>input</b> <b>stream</b> with heavy tailed work sessions arrives to a server protected by such a leaky bucket. Heavy tailed sessions produce long range dependence in the <b>input</b> <b>stream.</b> Previous studies of the systems without flow control suggested that such long range dependence can have dramatic effect on the system performance. By concentrating on the expected time till overflow of a large finite buffer we show that leaky bucket flow control does make the system overflow less often, but long range dependence still makes its presence felt. 1...|$|R
5000|$|Get name of {{the data}}, data-type name (content type), and the data itself as <b>Input</b> <b>Stream</b> or Output Stream ...|$|R
5000|$|Superior data {{compression}} - loaded databases typically use only about 1.5 times the <b>input</b> <b>stream</b> size in disk space ...|$|R
50|$|FBP and JSP {{share the}} concept of {{treating}} a program (or some components) as a parser of an <b>input</b> <b>stream.</b>|$|R
5000|$|A Shift step {{advances}} in the <b>input</b> <b>stream</b> by one symbol. That shifted symbol becomes a new single-node parse tree.|$|R
5000|$|A {{convolutional}} encoder is called so because it performs a convolution of the <b>input</b> <b>stream</b> with the encoder's impulse responses: ...|$|R
5000|$|Java <b>input</b> <b>streams</b> {{can support}} zero-copy through the java.nio.channels.FileChannel's transferTo (...) method if the {{underlying}} operating system also supports zero copy.|$|R
30|$|In {{this paper}} we {{separate}} operators in two classes: processing operators and windows. Processing operators apply a function to {{each and every}} element of their <b>input</b> <b>streams.</b> For instance, a filter operator selects or discards input elements based on a user-defined predicate, and a map operator converts each element of the <b>input</b> <b>stream</b> into an element of the output stream based on a user-defined function. We represent them in Fig.  1 as white circles.|$|R
50|$|Collate is a {{reusable}} {{black box}} which only {{needs to know}} where the control fields are in its incoming IPs (even this is not strictly necessary as transformer processes can be inserted upstream to place the control fields in standard locations), and can in fact be generalized to any number of <b>input</b> <b>streams,</b> and any depth of bracket nesting. Collate uses an array-type port for input, allowing a variable number of <b>input</b> <b>streams.</b>|$|R
5000|$|... #Caption: The two gates AND and XOR in one module. The bucket in {{the center}} {{collects}} the AND output, and the output at the bottom is A XOR B. When exactly one <b>input</b> <b>stream</b> is on, then the stream hits {{the other side of}} the tank and falls towards the bottom. When both <b>input</b> <b>streams</b> are on, then they collide in the middle and fall down to be collected by the bucket.|$|R
40|$|The {{widespread}} use of stainless steel for sample probes, connectors, and sample <b>stream</b> <b>splitters</b> in autoanalyser systems can lead to {{significant differences in the}} amount of calcium available for analysis. At alkaline pH calcium can be adsorbed onto the metallic components of the sampling system, and under more acidic conditions calcium can be released. Thus an alkaline sample will have an apparently reduced calcium content, while a more acidic sample may have an apparently increased concentration of calcium. By using non-metallic components in the sampling system this source of error an be eliminated...|$|R
3000|$|..., which after {{suitable}} de-interleaving {{and spatial}} de-parsing, {{results in the}} <b>input</b> <b>stream</b> to the maximum a posteriori (MAP) decoder ([...] [...]...|$|R
50|$|Lex reads an <b>input</b> <b>stream</b> {{specifying the}} lexical {{analyzer}} and outputs source code implementing the lexer in the C programming language.|$|R
