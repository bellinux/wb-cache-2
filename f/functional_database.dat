59|268|Public
25|$|Other MOLAP tools, {{particularly}} those that implement the <b>functional</b> <b>database</b> model do not pre-compute derived data but make all calculations on demand other than those that were previously requested and stored in a cache.|$|E
50|$|The <b>functional</b> <b>database</b> {{model is}} used to support {{analytics}} applications such as financial planning and performance management. The <b>functional</b> <b>database</b> model, or the functional model for short, is different from but complementary to the relational model. The functional model is also distinct from other similarly named concepts, including the DAPLEX <b>functional</b> <b>database</b> model and functional language databases.|$|E
50|$|A <b>functional</b> <b>database</b> {{does not}} only provide a common {{interactive}} data store. It also brings together models developed by analysts {{with knowledge of}} a particular area of the business that can be shared by all users. To facilitate this, a <b>functional</b> <b>database</b> retains the spreadsheet’s interactive cell-based modelling capability. This makes possible models that more closely reflect the complexities of business reality.|$|E
5000|$|... #Subtitle level 2: <b>Functional</b> <b>databases</b> and {{prospective}} analytics ...|$|R
50|$|Biological {{databases}} can be broadly {{classified into}} sequence, structure and <b>functional</b> <b>databases.</b> Nucleic acid and protein sequences {{are stored in}} sequence databases and structure databases store solved structures of RNA and proteins. <b>Functional</b> <b>databases</b> provide information on the physiological role of gene products, for example enzyme activities, mutant phenotypes, or biological pathways. Model Organism <b>Databases</b> are <b>functional</b> <b>databases</b> that provide species-specific data. Databases are important tools in assisting scientists to analyze and explain a host of biological phenomena from the structure of biomolecules and their interaction, to the whole metabolism of organisms and to understanding the evolution of species. This knowledge helps facilitate the fight against diseases, assists {{in the development of}} medications, predicting certain genetic diseases and in discovering basic relationships among species in the history of life.|$|R
30|$|Thus, a <b>functional</b> graph <b>database</b> schema {{is a set}} of {{variables}} of types from T restricted to attribute types. A <b>functional</b> graph <b>database</b> is any evaluation of these variables. Thus, certain variables serve for referencing the associated database. For convenience, we denote the variables from the <b>functional</b> graph <b>database</b> schema by names remaining entity and relationship types in the associated traditional GDB schema or at least their abbreviations.|$|R
50|$|Other MOLAP tools, {{particularly}} those that implement the <b>functional</b> <b>database</b> model do not pre-compute derived data but make all calculations on demand other than those that were previously requested and stored in a cache.|$|E
50|$|A <b>functional</b> <b>database</b> brings {{together}} data from multiple disparate sources and ties the disparate data sets into coherent consumable models. It also brings data scattered over multiple spreadsheets under control. This lets users see a summary picture that combines multiple components, e.g., to roll manpower planning into a complete financial picture automatically. It {{gives them a}} single point of entry to develop global insights based on various sources.|$|E
5000|$|A <b>functional</b> <b>database,</b> like spreadsheets, {{also lets}} users change input values while all {{dependent}} values {{are up to}} date. This facilitates what-if experimentation and creating and comparing multiple scenarios. Users can then see the scenarios side by side and choose the most appropriate. When planning, users can converge on a most advantageous course of action by repeatedly recycling and interacting with results. Actionable insights come from this intimate interaction with data that users normally do with spreadsheets ...|$|E
3000|$|... where La, Te, Tw, Teaches, Is_Born_in and Lives_in are typed {{variables}}. The use {{of variables}} correspond to a “database view” of the modelled world. Since {{we do not}} consider temporal <b>functional</b> <b>databases</b> here, {{it is not necessary}} to use time explicitly.|$|R
5000|$|ConsensusPathDB, a {{molecular}} <b>functional</b> interaction <b>database,</b> integrating information from KEGG ...|$|R
50|$|AmoebaDB is a <b>functional</b> {{genomics}} <b>database</b> for {{the genetics}} of amoebozoa.|$|R
50|$|A <b>functional</b> <b>database</b> {{consists}} {{of a set of}} dimensions which are used to construct a set of cubes. A dimension is a finite set of elements, or members, that identify business data, e.g., time periods, products, areas or regions, line items, etc. Cubes are built using any number of dimensions. A cube is a collection of cells, each of which is identified by a tuple of elements, one from each dimension of the cube. Each cell in a cube contains a value. A cube is effectively a function that assigns a value to each n-tuple of the cartesian product of the dimensions.|$|E
50|$|Another {{advantage}} of the functional model {{is that it is}} a database with features such as data independence, concurrent multiuser access, integrity, scalability, security, audit trail, backup/recovery, and data integration.Data independence is of particularly high value for analytics. Data need no longer reside in spreadsheets. Instead the <b>functional</b> <b>database</b> acts as a central information resource. The spreadsheet acts as a user interface to the database, so the same data can be shared by multiple spreadsheets and multiple users. Updates submitted by multiple users are available to all users subject to security rules. Accordingly, there is always a single consistent shared version of the data.|$|E
40|$|A <b>Functional</b> <b>Database</b> Phil Trinder D. Phil. Thesis Wolfson College Michaelmas Term, 1989 This thesis {{explores the}} use of {{functional}} languages to implement, manipulate and query databases. Implementing databases. A functional language is used to construct a database manager that allows efficient and concurrent access to shared data. In contrast to the locking mechanism found in conventional databases, the <b>functional</b> <b>database</b> uses data dependency to provide exclusion. Results obtained from a prototype database demonstrate that data dependency permits an unusual degree of concurrency between operations on the data. The prototype database is used to exhibit some problems that seriously restrict concurrency and also to demonstrate the resolution of these problems using a new primitive. The design of a more realistic database is outlined. Some restrictions on the data structures {{that can be used}} in a <b>functional</b> <b>database</b> are also uncovered. Manipulating databases. Functions over the database a [...] ...|$|E
30|$|Raw {{data were}} {{processed}} by KnowItAll software, (Bio-Rad, USA) and Raman spectra were calculated by Savitzky–Golay smoothing. Raman spectra assignment was performed using KnowItAll software <b>functional</b> group <b>database</b> and references.|$|R
40|$|Functional {{analysis}} of a clinical microbiome facilitates the elucidation of mechanisms by which microbiome perturbation can cause a phenotypic change in the patient. The direct approach for the {{analysis of}} the functional capacity of the microbiome is via shotgun metagenomics. An inexpensive method to estimate the functional capacity of a microbial community is through collecting 16 S rRNA gene profiles then indirectly inferring the abundance of functional genes. This inference approach has been implemented in the PICRUSt and Tax 4 Fun software tools. However, those tools have important limitations since they rely on outdated <b>functional</b> <b>databases</b> and uncertain phylogenetic trees and require very specific data pre-processing protocols. Here we introduce Piphillin, a straightforward algorithm independent of any proposed phylogenetic tree, leveraging contemporary <b>functional</b> <b>databases</b> and not obliged to any singular data pre-processing protocol. When all three inference tools were evaluated against actual shotgun metagenomics, Piphillin was superior in predicting gene composition in human clinical samples compared to both PICRUSt and Tax 4 Fun (p< 0. 01 and p< 0. 001, respectively) and Piphillin's ability to predict disease associations with specific gene orthologs exhibited a 15 % increase in balanced accuracy compared to PICRUSt. From laboratory animal samples, no performance advantage was observed for any one of the tools over the others and for environmental samples all produced unsatisfactory predictions. Our results demonstrate that functional inference using the direct method implemented in Piphillin is preferable for clinical biospecimens. Piphillin is publicly available for academic use at [URL]...|$|R
50|$|Perhaps a <b>functional</b> <b>database’s</b> {{largest single}} {{contribution}} to analytics comes from promoting collaboration. It lets multiple {{individuals and organizations}} not only share a single version of the truth, but a truth that is dynamic and constantly changing. Its automatic calculations quickly consolidate and reconcile inputs from multiple sources. This promotes interaction of various departments, facilitates multiple iterations of thought processes and {{makes it possible for}} differing viewpoints to converge and be reconciled. Also, since each portion of the model is developed by the people that are more experts in their particular area, it is able to leverage experience and insights that exist up and down the organization.|$|R
40|$|We {{describe}} how a <b>functional</b> <b>database</b> programming language {{can be extended}} with transactions and ECA-rules. Fundamental requirements of such an extension are that the declarative semantics of the language not be compromised, that the syntax of the language not be disrupted unduly, and that impedance mismatch problems be avoided. We define {{what we mean by}} events, conditions and actions and describe the semantics of ECA-rules with reference to event detection, parameter-binding, transaction scheduling and abort handling. We define the execution semantics for the ECA System in the language itself. These semantics form the basis of our implementation of the ECA System. Keywords. ECA-rules, deductive databases, <b>functional</b> <b>database</b> languages, PFL. 1 Introduction This paper describes how ECA-rules can be added to PFL, a <b>functional</b> <b>database</b> programming language. PFL is "declarative" in the sense that expression evaluation is confluent i. e. the order in which the sub-expressions of an expre [...] ...|$|E
40|$|We de ned {{the protein}} inverse folding problem with an object {{oriented}} database and an empirical hydrophobic penalty function, which {{was derived from}} the number of residues around each residue in a protein three dimensional structure. Under the database management system, we compiled the known structures of proteins and the evaluation function into one <b>functional</b> <b>database.</b> In order to compare our approach with the methods proposed by other groups, the <b>functional</b> <b>database</b> was applied to the problem of globin family recognition. Although the penalty function itself is simple and non-optimized, it gave considerably good results. ...|$|E
40|$|We {{describe}} how the <b>functional</b> <b>database</b> programming language PFL is extended with an active component without compromising either its declarative semantics or its syntax. We give a formal specification {{of the active}} component using PFL itself, including event specification and detection, parameter-binding, reaction scheduling and abort handling. We {{describe how}} a user-specified function can be cast as a primitive event, and discuss the expressiveness of events and the optimisation of event detection. Keywords: ECA-rules, deductive databases, <b>functional</b> <b>database</b> languages, PFL. 1. Introduction Recently there has been considerable interest in the integration of active and deductive database technologies - see, for example, [25, 13]. Deductive databases provide mechanisms for defining intentional relations in terms of extensional relations, enforcing constraints over these relations, and updating relations. Active databases support Event-Condition-Action (ECA) rules which respond to [...] ...|$|E
5000|$|Used in Network Analysis: Metabolic Pathway Databases (KEGG, BioCyc), Interaction Analysis <b>Databases,</b> <b>Functional</b> Networks ...|$|R
40|$|Analysis of {{simultaneous}} clustering of {{gene expression}} with biological knowledge {{has now become}} an importanttechnique and standard practice to present a proper interpretation of the data and its underlying biology. However, commonclustering algorithms do not provide a comprehensive approach that look into the three categories of annotations; biologicalprocess, molecular function, and cellular component, and were not tested with different <b>functional</b> annotation <b>database</b> formats. Furthermore, the traditional clustering algorithms use random initialization which causes inconsistent cluster generation and areunable {{to determine the number}} of clusters involved. In this paper, we present a novel computational framework called CluFA(Clustering Functional Annotation) for semi-supervised clustering of gene expression data. The framework consists of threestages: (i) preparation of Gene Ontology (GO) datasets, <b>functional</b> annotation <b>databases,</b> and testing datasets, (ii) a fuzzy c -means clustering to find the optimal clusters; and (iii) analysis of computational evaluation and biological validation from theresults obtained. With combination of the three GO term categories (biological process, molecular function, and cellularcomponent) and <b>functional</b> annotation <b>databases</b> (Saccharomyces Genome Database (SGD), the Yeast Database at MunichInformation Centre for Protein Sequences (MIPS), and Entrez), the CluFA is able to determine the number of clusters andreduce random initialization. In addition, CluFA is more comprehensive in its capability to predict the functions of unknowngenes. We tested our new computational framework for semi-supervised clustering of yeast gene expression data based onmultiple <b>functional</b> annotation <b>databases.</b> Experimental results show that 76 clusters have been identified via GO slim dataset. By applying SGD, Entrez, and MIPS <b>functional</b> annotation <b>database</b> to reduce random initialization, performance on bothcomputational evaluation and biological validation were improved. By the usage of comprehensive GO term categories, thelowest compactness and separation values were achieved. Therefore, from this experiment, we can conclude that CluFA hadimproved the gene function prediction through the utilization of GO and gene expression values using the fuzzy c -meansclustering algorithm by cross referencing it with the latest SGD annotation...|$|R
40|$|Programmers need {{mechanisms}} to store application specific data that persists multiple program runs. To accomplish this task, they usually {{have to deal}} with storage specific code to access files or relational <b>databases.</b> <b>Functional</b> logic programming provides a natural framework to transparent persistent storage through persistent predicates, i. e., predicates with externally stored facts. We describe a <b>functional</b> logic <b>database</b> library, based on persistent predicates, for Curry. Our library supports functional logic programming with databases in the background, i. e., the programmer can access a database without storage specific code employing functional logic programming techniques...|$|R
40|$|GRIP is a shared-memory {{multiprocessor}} {{designed for}} efficient parallel evaluation of functional languages, using compiled graph reduction. In this paper, {{we consider the}} feasibility of implementing a database manager on GRIP, and present results obtained from a pilot implementation. A database implemented in a pure functional language must be modified non-destructively, i. e. the original database must be preserved and a new copy constructed. The naive implementation provides evidence for the feasibility of a pure <b>functional</b> <b>database</b> {{in the form of}} modest real-time speed-ups, and acceptable real-time performance. The <b>functional</b> <b>database</b> is also used to investigate the GRIP architecture, compared with an idealised machine. The particular features investigated are the thread-creation costs and caching of GRIP's distributed memory. 1 Introduction Multiprocessor machines potentially provide considerable computing power cheaply. Because they typically have large memories, multiprocessors a [...] ...|$|E
40|$|We {{consider}} {{extending a}} <b>functional</b> <b>database</b> language to support subtyping, inheritance and method overloading. We {{do so by}} extending previous work on type inference with subtypes for the pure calculus to cater for structured types, ML-style parametric polymorphism and overloaded function definitions. We attach semantics to overloaded functions by developing a generalisation of best-fit pattern-matching. Although developed for a specific language, our approach is applicable to other <b>functional</b> <b>database</b> languages, for example languages with a functional data model. 1 Introduction Two major trends in recent database research have been deductive databases and object-oriented databases. Deductive databases extend the relational data model with rules that enable the derivation of intentional relations from the stored, extensional, relations. Object-oriented databases typically start off with a semantic data model [HK 87] supporting object identity and complex objects, and extend it with f [...] ...|$|E
40|$|We {{defined the}} protein inverse folding problem with an object {{oriented}} database and an empirical hydrophobic penalty function, which {{was derived from}} the number of residues around each residue in a protein three dimensional structure. Under the database management system, we compiled the known structures of proteins and the evaluation function into one <b>functional</b> <b>database.</b> In order to compare our approach with the methods proposed by other groups, the <b>functional</b> <b>database</b> was applied to the problem of globin family recognition. Although the penalty function itself is simple and non-optimized, it gave considerably good results. 1 Introduction The function of predicting protein 3 D structures from amino acid sequences {{is one of the most}} important requirements of the genome-informatics system. Although there have been much efforts in the field over 30 years, no practical method has been found. One of the emerging methods is the inverse-folding approach(1). We would like to present a novel [...] ...|$|E
40|$|This paper {{presents}} {{the development and}} implementation of an automatic sustainable assessment prototype using <b>functional</b> <b>databases.</b> For the practical purpose, we use Leadership in Energy and Environmental Design (LEED) as the exemplar standard to demonstrate the integrative process from building information aggregation to final evaluation. We start with a Building Information model, and use Construction Operations Building Information Exchange (COBie) as a bridge to integrate LEED requirements. At present, the process of sustainable building assessment requires information exchange from various building professionals. However, there is no procedure to manage, or use, information pertaining to sustainability. In our research, we translate rules from LEED into computable formulas and develop a prototype application to produce templates for LEED submission...|$|R
40|$|Genome {{scale models}} (GEMs) have enabled {{remarkable}} advances in systems biology, acting as <b>functional</b> <b>databases</b> of metabolism, and as scaffolds for the contextualization of high-throughput data. In {{the case of}} Saccharomyces cerevisiae (budding yeast), several GEMs have been published and are currently used for metabolic engineering and elucidating biological interactions. Here we review the history of yeast's GEMs, focusing on recent developments. We study how these models are typically evaluated, using both descriptive and predictive metrics. Additionally, we analyze the {{different ways in which}} all levels of omics data (from gene expression to flux) have been integrated in yeast GEMs. Relevant conclusions and current challenges for both GEM evaluation and omic integration are highlighted...|$|R
40|$|MicroRNAs (miRNAs) {{are small}} noncoding RNAs (ncRNAs, RNAs {{that do not}} code for proteins) that {{regulate}} the expression of target genes. MiRNAs can act as tumor suppressor genes or oncogenes in human cancers. Moreover, a large fraction of genomic ultraconserved regions (UCRs) encode {{a particular set of}} ncRNAs whose expression is altered in human cancers. Bioinformatics studies are emerging as important tools to identify associations between miRNAs/ncRNAs and CAGRs (Cancer Associated Genomic Regions). ncRNA profiling, the use of highly parallel devices like microarrays for expression, public resources like mapping, expression, <b>functional</b> <b>databases,</b> and prediction algorithms have allowed the identification of specific signatures associated with diagnosis, prognosis and response to treatment of human tumors...|$|R
40|$|This paper {{presents}} an experimental <b>functional</b> <b>database</b> language Fudal {{which is a}} further development of our group's work on persistent <b>functional</b> <b>database</b> languages. In this latest work we consider how unknown or partially known information can be treated in the functional context. The language we have implemented, Fudal, includes certainty and possibility operators. We outline the problems that are caused {{by the use of}} null values and truth functional logic in conventional database languages, and show how these problems can be overcome by defining the semantics of queries of a database containing partial information in terms of its 'completions'. If D is a database containing partial information then a completion of D is a database which is consistent with D and contains no partial information. We demonstrate that, even when a database has a large number of completions, sensible queries can be constructed using certainty and possibility operators. Finally we show how these operators can be implemented and discuss the use of Fudal in practical contexts...|$|E
30|$|Instead of the {{position}} notation we can use more readable dot notation for components. Consider the Prague object (entity, node). Then instead of Tw (Prague) [2], where Prague/Town, we can write Tw (Prague).Population. The real effect of this convention is that we approach Population property independently on {{its position in the}} tuple described by the associated <b>functional</b> <b>database</b> schema. In the case that the population is not present between properties of the town Prague, the function will be undefined.|$|E
40|$|OR-SML: A <b>Functional</b> <b>Database</b> Programming Language for Disjunctive Information We {{describe}} a <b>functional</b> <b>database</b> language OR-SML for handling disjunctive information in database queries, and its implementation {{on top of}} Standard ML. The core language has {{the power of the}} nested relational algebra, and it is augmented with or-sets which are used to deal with disjunctive information. Sets, or-sets and tuples can be freely combined to create objects, which gives the language a greater flexibility. We give examples of queries which require disjunctive information (such as querying incomplete or independent databases) and show how to use the language to answer these queries. Since the system runs on top of Standard ML and all database objects are values in the latter, the system benefits from combining a sophisticated query language with the full power of a programming language. OR-SML includes a number of primitives that deal with bags and aggregate functions. It is also configurable by user-defined base types. The language has been implemented as a library of modules in Standard ML. This allows the user to build just the database language as an independent system, or to interface it to other systems built in Standard ML. We give an example of connecting OR-SML with an already existing interactive theorem prover...|$|E
40|$|The plant organelles {{database}} (PODB; [URL] {{was built}} to promote a comprehensive understanding of organelle dynamics, including organelle function, biogenesis, differentiation, movement and interactions with other organelles. This database consists of three individual parts, the organellome <b>database,</b> the <b>functional</b> analysis <b>database</b> and external links to other databases and homepages. The organellome database provides images of various plant organelles that were visualized with fluorescent and nonfluorescent probes in various tissues of several plant species at different developmental stages. The <b>functional</b> analysis <b>database</b> {{is a collection of}} protocols for plant organelle research. External links give access primarily to other databases and Web pages with information on transcriptomes and proteomes. All the data and protocols in the organellome <b>database</b> and the <b>functional</b> analysis <b>database</b> are populated by direct submission of experimentally determined data from plant researchers and can be freely downloaded. Our database promotes the exchange of information between plant organelle researchers for the comprehensive study of the organelle dynamics that support integrated functions in higher plants. We would also appreciate contributions of data and protocols from all plant researchers to maximize the usefulness of the database...|$|R
50|$|The Address {{language}} affected {{not only}} the Soviet Union's economical development, but information technology and programming. APL's proposed and implemented ideas and tools {{can be found in}} many programming-related fields, such as abstract data types, object-oriented programming, <b>functional</b> programming, <b>database</b> and artificial intelligence.|$|R
50|$|The ConsensusPathDB is a {{molecular}} <b>functional</b> interaction <b>database,</b> integrating information on protein interactions, genetic interactions signaling, metabolism, gene regulation, and drug-target interactions in humans. ConsensusPathDB currently (release 30) includes such interactions from 32 databases. ConsensusPathDB is freely available for academic use under http://ConsensusPathDB.org.|$|R
