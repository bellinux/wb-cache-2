10000|1817|Public
5|$|Calculating a {{greatest}} common divisor is {{an essential}} step in several integer <b>factorization</b> algorithms, such as Pollard's rho algorithm, Shor's algorithm, Dixon's <b>factorization</b> method and the Lenstra elliptic curve <b>factorization.</b> The Euclidean algorithm {{may be used to}} find this GCD efficiently. Continued fraction <b>factorization</b> uses continued fractions, which are determined using Euclid's algorithm.|$|E
5|$|The unique <b>factorization</b> of Euclidean domains {{is useful}} in many applications. For example, the unique <b>factorization</b> of the Gaussian {{integers}} is convenient in deriving formulae for all Pythagorean triples and in proving Fermat's theorem on sums of two squares. Unique <b>factorization</b> was also {{a key element in}} an attempted proof of Fermat's Last Theorem published in 1847 by Gabriel Lamé, the same mathematician who analyzed the efficiency of Euclid's algorithm, based on a suggestion of Joseph Liouville. + Bn + Cn = 0 | journal = J. Math. Pures Appl. | volume = 12 | pages = 172–184}} Lamé's approach required the unique <b>factorization</b> of numbers of the form x + ωy, where x and y are integers, and ω = e2iπ/n is an nth root of 1, that is, ωn = 1. Although this approach succeeds for some values of n (such as n=3, the Eisenstein integers), in general such numbers do not factor uniquely. This failure of unique <b>factorization</b> in some cyclotomic fields led Ernst Kummer to the concept of ideal numbers and, later, Richard Dedekind to ideals.|$|E
5|$|Although the Euclidean {{algorithm}} {{is used to}} find the greatest common divisor of two natural numbers (positive integers), it may be generalized to the real numbers, and to other mathematical objects, such as polynomials, quadratic integers and Hurwitz quaternions. In the latter cases, the Euclidean {{algorithm is}} used to demonstrate the crucial property of unique <b>factorization,</b> i.e., that such numbers can be factored uniquely into irreducible elements, the counterparts of prime numbers. Unique <b>factorization</b> is essential to many proofs of number theory.|$|E
5000|$|OF - {{orthogonal}} <b>factorizations</b> (QR, QL, generalized <b>factorizations)</b> ...|$|R
40|$|AbstractIn {{practice}} <b>factorizations</b> of {{a generalized}} inverse often arise from <b>factorizations</b> {{of the matrix}} {{which is to be}} inverted. In addition to full rank <b>factorizations,</b> normal <b>factorizations,</b> and singular value decompositions (SVD) there are other <b>factorizations</b> of particular matrices that are natural to certain problems, for instance in statistics. Answers to questions like “when is B− A− a generalized inverse of AB?” may thus be a computational tool. Besides, they are of significant interest because they provide us with insights into the g-inversion of matrix products...|$|R
40|$|Two <b>factorizations</b> of a {{permutation}} into {{products of}} cycles are equivalent {{if one can}} be obtained from the other by repeatedly interchanging adjacent disjoint factors. This paper studies the enumeration of equivalence classes under this relation. We obtain closed form expressions for generating series of inequivalent minimal transitive <b>factorizations</b> of permutations having up to three cycles, and also of permutations with four cycles when factors are restricted to be transpositions. Our derivations rely on a new correspondence between inequivalent <b>factorizations</b> and acyclic alternating digraphs. Strong similarities between the enumerative results derived here and analogous ones for "ordinary" <b>factorizations</b> suggest that a unified theory remains to be discovered. We also establish connections between inequivalent <b>factorizations</b> and other well-studied classes of permutation <b>factorizations.</b> In particular, a relationship with monotone <b>factorizations</b> allows us to recover an exact counting formula for the latter due to Goulden, Guay-Paquet and Novak. Comment: 28 pages, 13 figure...|$|R
5|$|Much {{remains unknown}} about the <b>factorization</b> {{of the numbers}} in the Sylvester's {{sequence}}. For instance, {{it is not known}} if all numbers in the sequence are squarefree, although all the known terms are.|$|E
5|$|In the 19th century, the Euclidean {{algorithm}} led to {{the development}} of new number systems, such as Gaussian integers and Eisenstein integers. In 1815, Carl Gauss used the Euclidean algorithm to demonstrate unique <b>factorization</b> of Gaussian integers, although his work was first published in 1832. Gauss mentioned the algorithm in his Disquisitiones Arithmeticae (published 1801), but only as a method for continued fractions. Peter Gustav Lejeune Dirichlet seems to have been the first to describe the Euclidean algorithm as the basis for much of number theory. Lejeune Dirichlet noted that many results of number theory, such as unique <b>factorization,</b> would hold true for any other system of numbers to which the Euclidean algorithm could be applied. Lejeune Dirichlet's lectures on number theory were edited and extended by Richard Dedekind, who used Euclid's algorithm to study algebraic integers, a new general type of number. For example, Dedekind was the first to prove Fermat's two-square theorem using the unique <b>factorization</b> of Gaussian integers. Dedekind also defined the concept of a Euclidean domain, a number system in which a generalized version of the Euclidean algorithm can be defined (as described below). In the closing decades of the 19th century, the Euclidean algorithm gradually became eclipsed by Dedekind's more general theory of ideals.|$|E
5|$|The {{powers of}} {{two have been}} known since antiquity; for {{instance}} they appear in Euclid's Elements, Props. IX.32 (on the <b>factorization</b> of powers of two) and IX.36 (half of the Euclid–Euler theorem, {{on the structure of}} even perfect numbers).|$|E
40|$|AbstractPLUS <b>factorizations,</b> or {{customizable}} triangular <b>factorizations,</b> of nonsingular matrices {{have found}} applications in source coding and computer graphics. However, {{there are still}} some open problems. In this paper, we present a new necessary condition and a sufficient condition for the existence of generic PLUS <b>factorizations...</b>|$|R
40|$|This paper {{presents}} a self-adapting distributed memory package for computing the Walsh-Hadamard transform (WHT), a prototypical fast signal transform, {{similar to the}} fast Fourier transform. A family of distributed memory algorithms are derived from different <b>factorizations</b> of the WHT matrix. Different <b>factorizations</b> correspond to different data distributions and communication patterns. Thus, searching over the space of <b>factorizations</b> leads to the best data distribution and communication pattern for a given platform. The distributed memory WHT package provides a framework for converting <b>factorizations</b> of the WHT matrix into MPI programs and exploring their performance by searching the space of <b>factorizations...</b>|$|R
40|$|Two {{different}} <b>factorizations</b> of the Fibonacci infinite word {{were given}} independently in [10] and [6]. In a certain sense, these <b>factorizations</b> reveal a self-similarity {{property of the}} Fibonacci word. We first describe the intimate links between these two <b>factorizations.</b> We then propose a generalization to characteristic sturmian words...|$|R
5|$|Dividing a(x) by b(x) {{yields a}} {{remainder}} r0(x) = x3 + (2/3) x2 + (5/3) x − (2/3). In the next step, b(x) is divided by r0(x) yielding a remainder r1(x) = x2 + x + 2. Finally, dividing r0(x) by r1(x) yields a zero remainder, indicating that r1(x) {{is the greatest}} common divisor polynomial of a(x) and b(x), consistent with their <b>factorization.</b>|$|E
5|$|Noether's work Abstrakter Aufbau der Idealtheorie in algebraischen Zahl- und Funktionenkörpern (Abstract Structure of the Theory of Ideals in Algebraic Number and Function Fields, 1927) {{characterized}} the rings {{in which the}} ideals have unique <b>factorization</b> into prime ideals as the Dedekind domains: integral domains that are Noetherian, 0 or 1-dimensional, and integrally closed in their quotient fields. This paper also contains what now are called the isomorphism theorems, which describe some fundamental natural isomorphisms, and some other basic results on Noetherian and Artinian modules.|$|E
5|$|Since each prime p divides L by assumption, it {{must also}} divide one of the q factors; since each q is prime as well, it must be that p=q. Iteratively {{dividing}} by the p factors shows that each p has an equal counterpart q; the two prime factorizations are identical except for their order. The unique <b>factorization</b> of numbers into primes has many applications in mathematical proofs, as shown below.|$|E
50|$|Some Binomial numbers' {{underlying}} binomials have Aurifeuillian <b>factorizations,</b> {{which can}} assist in finding prime factors. Cyclotomic polynomials are also helpful in finding <b>factorizations.</b>|$|R
40|$|AbstractTwo {{different}} <b>factorizations</b> of the Fibonacci infinite word {{were given}} independently in Wen and Wen (1994) and Melançon (1996). In a certain sense, these <b>factorizations</b> reveal a selfsimilarity {{property of the}} Fibonacci word. We first describe the intimate links between these two <b>factorizations.</b> We then propose a generalization to characteristic sturmian words...|$|R
40|$|Numerically {{reliable}} {{state space}} algorithms are proposed for computing the following stable coprime <b>factorizations</b> of rational matrices: 1) <b>factorizations</b> with least order denominators; 2) <b>factorizations</b> with inner denominators; and 3) <b>factorizations</b> with proper stable factors. The new algorithms {{are based on}} a recursive generalized Schur algorithm for pole assignment. They are generally applicable regardless the original descriptor state space representation is minimal or not, or is stabilizable/detectable or not. The proposed algorithms are useful in solving various computational problems for both standard and descriptor system representations...|$|R
5|$|The Gaussian {{integers}} {{are complex}} {{numbers of the}} form α=u+vi, where u and v are ordinary integers and i is the square root of negative one. By defining an analog of the Euclidean algorithm, Gaussian integers can {{be shown to be}} uniquely factorizable, by the argument above. This unique <b>factorization</b> is helpful in many applications, such as deriving all Pythagorean triples or proving Fermat's theorem on sums of two squares. In general, the Euclidean algorithm is convenient in such applications, but not essential; for example, the theorems can often be proven by other arguments.|$|E
5|$|There {{are several}} methods to render {{matrices}} {{into a more}} easily accessible form. They are generally referred to as matrix decomposition or matrix <b>factorization</b> techniques. The interest of all these techniques is that they preserve certain properties of the matrices in question, such as determinant, rank or inverse, so that these quantities can be calculated after applying the transformation, or that certain matrix operations are algorithmically easier to carry out for some types of matrices.|$|E
25|$|The {{computation}} of the factored form, called <b>factorization</b> is, in general, {{too difficult}} {{to be done by}} hand-written computation. However, efficient polynomial <b>factorization</b> algorithms are available in most computer algebra systems.|$|E
40|$|Abstract. Two <b>factorizations</b> of a {{permutation}} into {{products of}} cycles are equivalent {{if one can}} be obtained from the other by repeatedly interchanging adjacent disjoint factors. This paper studies the enumeration of equivalence classes under this relation. We obtain closed form expressions for generating series of inequivalent minimal transitive <b>factorizations</b> of permutations having up to three cycles, and also of permutations with four cycles when factors are restricted to be transpositions. Our derivations rely on a new correspondence between inequivalent <b>factorizations</b> and acyclic alternating digraphs. Strong similarities between the enumerative results derived here and analogous ones for “ordinary ” <b>factorizations</b> suggest that a unified theory remains to be discovered. We also establish connections between inequivalent <b>factorizations</b> and other well-studied classes of permutation <b>factorizations.</b> In particular, a relationship with monotone fac-torizations allows us to recover an exact counting formula for the latter due to Goulden, Guay-Paquet and Novak. 1...|$|R
40|$|AbstractWe propose numerically {{reliable}} state-space algorithms for computing several coprime <b>factorizations</b> {{of rational}} matrices: (1) <b>factorizations</b> with factors having poles {{in a given}} stability domain; (2) <b>factorizations</b> with proper stable factors; (3) <b>factorizations</b> with inner and J-inner denominators. The new algorithms {{are based on a}} recursive generalized Schur algorithm for pole dislocation. They are generally applicable whether the underlying descriptor state-space representation is minimal or not, and whether it is stabilizable/detectable or not. The proposed algorithms are useful in solving various computational problems for both standard and descriptor system representations...|$|R
40|$|For single input single output systems, we give a {{refinement}} of the generalized chordal metric. Our metric {{is given in}} terms of coprime <b>factorizations,</b> but it coincides with the extension of Vinnicombe's nu-metric given in earlier work by Ball and Sasane if the coprime <b>factorizations</b> happens to be normalized. The advantage of the metric introduced {{in this article is}} its easy computability (since it relies only on coprime <b>factorizations,</b> and does not require normalized coprime <b>factorizations).</b> We also give concrete formulations of our abstract metric for standard classes of stable transfer functions. Comment: 13 page...|$|R
25|$|In number theory, integer <b>factorization</b> is the {{decomposition}} of a composite number into {{a product of}} smaller integers. If these integers are further restricted to prime numbers, the process is called prime <b>factorization.</b>|$|E
25|$|The {{rings in}} which <b>factorization</b> into irreducibles is {{essentially}} unique are called unique <b>factorization</b> domains. Important examples are polynomial rings over the integers or over a field, Euclidean domains and principal ideal domains.|$|E
25|$|Given a {{composite}} integer n, {{the task of}} providing one (or all) prime factors {{is referred to as}} <b>factorization</b> of n. Elliptic curve <b>factorization</b> is an algorithm relying on arithmetic on an elliptic curve.|$|E
40|$|Tensors are {{becoming}} increasingly common in data mining, and con-sequently, tensor <b>factorizations</b> {{are becoming}} more and more important tools for data miners. When the data is binary, it is natural to ask if we can factorize it into binary factors while simultaneously making sure that the reconstructed tensor is still binary. Such <b>factorizations,</b> called Boolean tensor <b>factorizations,</b> can provide improved interpretability and find Boolean structure that is hard to express using normal <b>factorizations.</b> Unfortunately the algorithms for computing Boolean tensor <b>factorizations</b> do not usually scale well. In this paper we present a novel algorithm for finding Boolean CP and Tucker decompositions of large and sparse binary tensors. In our experimental evaluation we show that our algorithm can handle large tensors and accurately reconstructs the latent Boolean structure. ...|$|R
40|$|We {{present a}} determinization {{construction}} for weighted tree automata using <b>factorizations.</b> Among others, this result subsumes a previous result for determinization of weighted string automata using <b>factorizations</b> (Kirsten and Mäurer, 2005) and two previous results for weighted tree automata, {{one of them}} not using <b>factorizations</b> (Borchardt, 2004) {{and one of them}} restricted to nonrecursive automata over the nonnegative reals (May and Knight, 2006) ...|$|R
40|$|AbstractThe {{number of}} minimal {{transitive}} star <b>factorizations</b> of a permutation was shown by Irving and Rattan to depend {{only on the}} conjugacy class of the permutation, a surprising result given that the pivot plays a very particular role in such <b>factorizations.</b> Here, we explain this symmetry and provide a bijection between minimal transitive star <b>factorizations</b> of a permutation π having pivot k and those having pivot k′...|$|R
25|$|The {{opposite}} of integer <b>factorization</b> is integer multiplication {{to obtain a}} product. The {{opposite of}} polynomial <b>factorization</b> is expansion, the multiplying together of polynomial factors to an “expanded” polynomial, written as just a sum of terms.|$|E
25|$|Not all {{numbers of}} a given length are equally hard to factor. The hardest {{instances}} of these problems (for currently known techniques) are semiprimes, the product of two prime numbers. When they are both large, for instance more than two thousand bits long, randomly chosen, and {{about the same size}} (but not too close, e.g., to avoid efficient <b>factorization</b> by Fermat's <b>factorization</b> method), even the fastest prime <b>factorization</b> algorithms on the fastest computers can take enough time to make the search impractical; that is, as the number of digits of the primes being factored increases, the number of operations required to perform the <b>factorization</b> on any computer increases drastically.|$|E
25|$|There are general {{algorithms}} {{which always}} produce the complete <b>factorization</b> of any polynomial, in either one variable (the univariate case) or several variables (the multivariate case); see <b>Factorization</b> of polynomials. These algorithms are implemented {{and are available}} in most computer algebra systems. They involve advanced properties of polynomials, and are too complicated for hand-written computation. There are also a few elementary methods which are well–suited for hand-written computation, and do not always allow finding the complete <b>factorization</b> in degree higher than four.|$|E
40|$|The {{purpose of}} this paper is to give new {{necessary}} and su#cient conditions for internal stabilizability and existence of left/right/doubly coprime <b>factorizations</b> for linear MIMO systems. In particular, we generalize the YoulaKu cera parametrization of all stabilizing controllers for every internally stabilizable MIMO plant which does not necessarily admit doubly coprime <b>factorizations.</b> Keywords: Youla-Kucera parametrization of all stabilizing controllers, internal stabilizability, left/right/doubly coprime <b>factorizations,</b> lattices. 1...|$|R
40|$|Abstract—Tensors are {{becoming}} increasingly common in data mining, and consequently, tensor <b>factorizations</b> {{are becoming}} more important tools for data miners. When the data is binary, it is natural to ask if we can factorize it into binary factors while simultaneously {{making sure that the}} reconstructed tensor is still binary. Such <b>factorizations,</b> called Boolean tensor <b>factorizations,</b> can provide improved interpretability and find Boolean structure that is hard to express using normal <b>factorizations.</b> Unfortunately the algorithms for computing Boolean tensor <b>factorizations</b> do not usually scale well. In this paper we present a novel algorithm for finding Boolean CP and Tucker decompositions of large and sparse binary tensors. In our experimental evaluation we show that our algorithm can handle large tensors and accurately reconstructs the latent Boolean structure. Keywords—Tensor factorizations; Boolean tensors; Random walks; MDL principl...|$|R
40|$|We {{study the}} {{connection}} between quadratic Strebel differentials on punctured surfaces {{and the construction of}} moduli spaces of matrix <b>factorizations</b> for dimer models using GIT-quotients. We show that for each consistent dimer model and each nondegenerate stability condition θ we can find a Strebel differential for which the horizontal trajectories correspond to the θ-stable matrix <b>factorizations</b> and the vertical trajectories correspond to the arrows of the dimer quiver. We give explicit expressions for the θ-stable matrix <b>factorizations</b> that can be deduced from these horizontal trajectories. Following ideas by Pascaleff and Sybilla we show that each nondegenerate stability condition gives rise to a sheaf of curved algebras coming from consistent dimer models. The corresponding categories of matrix <b>factorizations</b> can be glued together to form the category of matrix <b>factorizations</b> of the original dimer...|$|R
