2|3|Public
2500|$|In the European context, safety {{effectiveness}} and quality is ensured through the [...] "Conformity Assessment" [...] that {{is defined as}} [...] "the method by which a manufacturer demonstrates that its device complies {{with the requirements of}} the European Medical Device Directive". The directive specifies different procedures according to the class of the device ranging from the simple Declaration of Conformity (Annex VII) for Class I devices to <b>EC</b> <b>verification</b> (Annex IV), Production quality assurance (Annex V), Product quality assurance (Annex VI) and Full quality assurance (Annex II). The Medical Device Directive specifies detailed procedures for Certification. In general terms, these procedures include tests and verifications that are to be contained in specific deliveries such as the risk management file, [...] the technical file and the quality system deliveries. [...] The risk management file is the first deliverable that conditions the following design and manufacturing steps. Risk management stage shall drive the product so that product risks are reduced at an acceptable level with respect to the benefits expected for the patients {{for the use of the}} device. The technical file contains all the documentation data and records supporting medical device certification. FDA technical file has similar content although organized in different structure. [...] The Quality System deliverables usually includes procedures that ensure quality throughout all product life cycle. The same standard (ISO EN 13485) is usually applied for quality management systems in US and worldwide.|$|E
40|$|We {{report on}} the use of the SPIN model checker for both the {{verification}} of a process control program and the derivation of optimal control schedules. This work was carried out as part of a case study for the <b>EC</b> VHS project (<b>Verification</b> of Hybrid Systems), in which the program for a Programmable Logic Controller (PLC) of an experimental chemical plant had to be designed and verified. The intention of our approach was to see how much could be achieved here using the standard model checking environment of SPIN/Promela. As the symbolic calculations of real-time model checkers can be quite expensive it is interesting to try and exploit the efficiency of established non-real-time model checkers like SPIN in those cases where promising work-arounds seem to exist. In our case we handled the relevant real-time properties of the PLC controller using a time-abstraction technique; for the scheduling we implemented in Promela a so-called variable time advance procedure. For this cas [...] ...|$|R
40|$|This article {{reports on}} the {{systematic}} design and validation of a PLC control program for the batch plant that has been selected {{as a case study}} for the <b>EC</b> project on <b>Verification</b> of Hybrid Systems (VHS). We show how a correct design of the control program can be obtained in a stepwise manner using the technique of systematic specification weakening. In this technique the system specification is structured as a logical implication whose conclusion represents the desired behaviour of the plant. The premise of the implication characterises the assumptions under which this behaviour is realised. Our design procedure strengthens the premise in a step by step fashion, reecting the accumulated design decisions, until the premise yields a sufficiently detailed description of the required program and the implication holds true. In our elaborations we show that using this procedure the code for a PLC controller can be obtained in a straightforward and natural way. Whilst the design steps [...] ...|$|R
40|$|This article {{reports on}} the {{systematic}} design and validation of a PLC control program for the batch plant that has been selected {{as a case study}} for the <b>EC</b> project on <b>Verification</b> of Hybrid Systems (VHS). We show how a correct design of the control program can be obtained in an incremental manner using a real-time logical formalism. This is done by systematically strengthening the premise of an implication whose conclusion represents the required behaviour of the plant. The premise specifies the assumptions under which this behaviour is realised. The formal proof of correctness was obtained using formal verification tools. We used both theorem-proving (PVS) and model checking (Spin) as verification strategies. With PVS we could show the correctness of the final implication directly by a semantic embedding of the realtime logic in PVS, but only for a limited operational scenario (a single batch load). With Spin we could show the correctness for all relevant operational scenarios, but only indirectly, viz. on the basis of an abstract verification model (written in Promela). This model was obtained as a straightforward translation of the premise of {{the final version of the}} formal design and the PLC code derived from it. We conclude that the judicious use of standard formal methods and tools suces for the systematic development of correct control programmes for this kind of application...|$|R

