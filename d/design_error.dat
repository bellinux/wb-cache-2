274|1757|Public
25|$|The main {{causes of}} dam failure include {{inadequate}} spillway capacity, piping through the embankment, foundation or abutments, spillway <b>design</b> <b>error</b> (South Fork Dam), geological instability caused by changes to water levels during filling or poor surveying (Vajont, Malpasset, Testalinden Creek dams), poor maintenance, especially of outlet pipes (Lawn Lake Dam, Val di Stava Dam collapse), extreme rainfall (Shakidor Dam), earthquakes, and human, computer or <b>design</b> <b>error</b> (Buffalo Creek Flood, Dale Dike Reservoir, Taum Sauk pumped storage plant).|$|E
25|$|CA {{have been}} applied to <b>design</b> <b>error</b> {{correction}} codes in a paper by D. Roy Chowdhury, S. Basu, I. Sen Gupta, and P. Pal Chaudhuri. The paper defines a new scheme of building single bit error correction and double bit error detection (SEC-DED) codes using CA, and also reports a fast hardware decoder for the code.|$|E
25|$|During a heavy-weather ocean {{trial in}} February 2011, the ship sprung a six-inch crack in its hull that leaked 5 {{gallons of water}} an hour. The Navy is investigating. The problem {{appeared}} {{to be due to}} faulty welds rather than a <b>design</b> <b>error.</b> The repairs were scheduled to begin on 27 June 2011, and last until 19 September.|$|E
40|$|AbstractDesign {{errors are}} {{unavoidable}} in any construction projects and can negatively affect cost, schedule and safety performance. The {{different types of}} design drawings may have various levels of <b>design</b> <b>errors</b> due to many factors such as unclear overview of the designs, lack of coordination process, and human mistakes. Civil engineers, both designers and contractors, have limited understanding {{of the importance of}} <b>design</b> <b>errors</b> that occur in construction phases. This paper attempts to evaluate the impact level of groups of <b>design</b> <b>errors</b> in structural and other building components and also the impact level of their cases which occur in building construction projects in Cambodia. Respondents were asked to provide the impact score for <b>design</b> <b>errors</b> based on the five-point Likert scale, ranked from 1 -negligible to 5 -disastrous. The average impact score was determined in order to rank the impact of <b>design</b> <b>errors.</b> As a result, <b>design</b> <b>errors</b> in structural and mechanical works are found as the first group to be focused due to its impact, followed by <b>design</b> <b>errors</b> in structural and plumbing works. The top three cases under the group of <b>design</b> <b>errors</b> in structural and mechanical works are those in reinforced concrete walls and lift systems, footing and lift systems, and slab and HVAC systems. These results are significant for engineers {{to be aware of the}} possible high impact of <b>design</b> <b>errors,</b> and also to determine which group of <b>design</b> <b>errors</b> should be considered first. Further studies should look at the combination of such occurrence and impact of <b>design</b> <b>errors</b> in order to efficiently identify the most critical and significant <b>design</b> <b>errors</b> in terms of not only their impact, but also their occurrence in building construction projects...|$|R
40|$|<b>Design</b> <b>errors</b> is {{the cause}} to {{a large part of}} the defects {{occurring}} in building production and maintenance. Earlier research have shown that the most common cause for <b>design</b> <b>errors</b> is lack of knowledge. Product-model based CAD-systems are increasingly used in structural engineering practice and it is well known that these systems reduce the <b>design</b> <b>errors,</b> mostly through better visualization and collision checks. The <b>design</b> <b>errors</b> caused by lack of knowledge are not prevented using product-model based CAD-systems as we do today. This paper describes two case studies of <b>design</b> <b>errors</b> where the structural engineer is involved. The aim of the study was to find new ways to prevent <b>design</b> <b>errors</b> using the product-model based technique. The study supports earlier findings that the use of product-model based CAD-systems have a great potential in preventing <b>design</b> <b>errors.</b> The study also argue that many of the <b>design</b> <b>errors</b> caused by lack of knowledge could be prevented in future projects if the <b>design</b> <b>errors</b> from earlier projects were systematically documented and made available to the structural engineer in the design process. In the case studies many of the <b>design</b> <b>errors</b> were caused by lack of information. That is, the information transferred to the structural engineer and from the structural engineer to the building production was not sufficient. It is argued in this paper tha...|$|R
40|$|<b>Design</b> <b>errors</b> are {{claimed to}} account for 26 % {{of the cost of}} defects, these in turn are stated to {{encompass}} 2 - 9 % of production cost for building and constructions. Lack of knowledge and information has been identified as a major reasons for <b>design</b> <b>errors.</b> Recently Building Information Modelling (BIM) has been considered as a mean for reducing <b>design</b> <b>errors.</b> However, limited research has been conducted on the role of BIM as a means for transfer and sharing knowledge in order to reduce <b>design</b> <b>errors.</b> The aim of the paper is to analyse BIM’s role of facilitating knowledge and expertise sharing in order to prevent <b>design</b> <b>errors.</b> The aim is achieved by analysing a case study of <b>design</b> <b>errors</b> in a construction project. By drawing on the concept of boundary object it is confirmed that BIM can serve a mean for preventing <b>design</b> <b>errors</b> by facilitating knowledge and expertise sharing, across discipline, time and space, and professional boundaries. Depending the kind of boundary knowledge and expertise should be shared across, different challenges emerge in organizing the knowledge and expertise sharing...|$|R
25|$|As {{with other}} safety-critical systems, the {{development}} of the A330/A340 flight control system during 1991 and 1992 had many elements to minimise the risk of a <b>design</b> <b>error.</b> These included peer reviews, a system safety assessment (SSA), and testing and simulations to verify and validate the system requirements. None of these activities identified the design limitation in the FCPC’s AOA algorithm.|$|E
25|$|Cassini never {{listened to}} channel A {{because of a}} {{software}} <b>design</b> <b>error.</b> The receiver on the orbiter was never commanded to turn on, according to officials with the European Space Agency. ESA announced that the program error was a mistake on their part, the missing command {{was part of a}} software program developed by ESA for the Huygens mission, and that it was executed by Cassini as delivered.|$|E
25|$|After Buckingham {{retired in}} 1676, Lady Charlotte Fitzroy, Charles II's daughter, moved in {{when she married}} Edward Lee, 1st Earl of Lichfield. The Crown {{authorised}} extensive rebuilding that included adding a storey, giving it three main floors, an attic and basement. This structure can be seen today as the rear section of Number 10. (See Plan of the Premises Granted to the Earl and Countess of Lichfield in 1677) The likely reason that repair was required is that the house had settled in the swampy ground near the Thames, causing structural damage. Like Downing Street, it rested on a shallow foundation, a <b>design</b> <b>error</b> that caused problems until 1960 when the modern Number 10 was rebuilt on deep pilings.|$|E
40|$|Architects and {{engineers}} {{have found it}} increasingly difficult to learn from their mistakes and in particular, the identification and prevention of <b>design</b> <b>errors.</b> In addition to the extensively documented negative influence that <b>design</b> <b>errors</b> have upon organisational and project performance, they can also result in a plethora of catastrophic building and engineering failures. In some extreme cases, death and injury to workers and/or members of the public have occurred but in either scenario, <b>design</b> <b>errors</b> are an endemic feature of building and engineering projects. Despite efforts to improve project performance, errors remain a significant problem because of recurrent error-traps. To address the issue, a project life cycle model is developed {{that can be used to}} prevent <b>design</b> <b>errors.</b> The research is grounded in the aggregated views of 46 practitioners who were interviewed about the nature and prevention of <b>design</b> <b>errors.</b> Model features include a unique inherent ability to identify and mitigate <b>design</b> <b>errors.</b> Model features include a unique inherent ability to identify and mitigate <b>design</b> <b>errors</b> as well as stimulate learning throughout a project 2 ̆ 7 s life cycle. Such a model represents a significant step forward in current knowledge as it provides an invaluable resource for both practitioners and academics who seek to stem the occurrence of <b>design</b> <b>errors</b> and improve project safety...|$|R
40|$|Rework that is {{experienced}} in construction projects is often caused by errors {{made during the}} design process. Factors that contribute to <b>design</b> <b>errors</b> are identified and used to design and develop a systems dynamics model, {{which is used to}} simulate a number of practical scenarios {{that can be used to}} reduce <b>design</b> <b>errors</b> and rework. The model presented in this paper can enable design and project managers to understand better the process of design documentation and how <b>design</b> <b>errors</b> occur in construction projects. System Dynamics Design Management Time Boxing <b>Design</b> <b>Errors</b> Rework,...|$|R
40|$|Abstract—After {{functional}} verification detects a failure, design debugging aims {{to find all}} locations in the design that could {{be responsible for the}} observed error. The task of debugging becomes more difficult in modern designs {{because of the presence of}} multiple <b>design</b> <b>errors.</b> Multiple <b>design</b> <b>errors</b> exponentially increase the solution space of the debugging problem, leading to an intractable problem. This work aims to manage the complexity of multiple <b>design</b> <b>errors</b> within existing automated design debugging frameworks by using unsatisfiable cores to reduce the solution space. It builds upon previous work to generalize the generation and application of unsatisfiable cores for this purpose. An iterative debugging algorithm is presented in which unsatisfiable cores are generated as a by-product of the solving process to aid in reducing the search space for multiple <b>design</b> <b>errors.</b> Experiments on large <b>designs</b> for multiple <b>errors</b> show an average reduction in run-time of 22 % with minimal impact to peak memory. I...|$|R
25|$|Subsequently, Yūbari and her destroyers {{participated in}} the capture of Rabaul and New Ireland in the Solomon Islands, {{followed}} by the Invasion of Salamaua–Lae on 8 March 1942. On 10 March, she was attacked by two Douglas SBD-3 Dauntless dive bombers from the aircraft carrier , who score severe near-misses which killed {{a number of the}} anti-aircraft gun crews. She was then strafed by four Grumman F4F-3 Wildcat fighters from Lexington, which killed her executive officer and several crewmen on her bridge. The following morning, she was again attacked, with Yorktown’s SBD-3s managing to detonate gunpowder bags near her No.2 turret, causing a fire which sets the protective mattresses around the bridge on fire. The F4F-3 strafing run detonated gasoline drums stored on her port lifeboat. Firefighting teams realize to their dismay that due to a <b>design</b> <b>error,</b> the fire hoses were too short, and the fire threatened the forward torpedo mount. The captain ordered the torpedoes jettisoned, but the mount would not rotate due to a power failure, forcing the crew to use pulleys and ropes and to dump the torpedoes manually. During this battle, Yūbari evaded 67 bombs and 12 torpedoes, suffering 13 killed and 49 wounded. Returned to Rabaul, she was then bombed on 10 March by four USAAF B-17 Flying Fortress bombers, with four near-misses opening three large holes in her stern. She returned to Truk for repairs on 25 March.|$|E
500|$|The highly popular [...] is {{considered}} one of the most important hi-fi components in the history of home audio. Sonically, it benefited from a <b>design</b> <b>error</b> where crosstalk between left and right channels presented better detail and more ambiance; the error was corrected in a later guise. Its sound is described by reviewers as dark and warm, with a [...] "sweet and sensual midrange"; some reviewers observed a very noticeable rolling off at frequency extremes that may detract from sonic neutrality, and that its soundstage lacked precision but it was universally praised for its value for money. The amplifier was a hot seller, and the [...] alone achieved a record 1.1 million units in its lifetime. The figure would be much higher if the sales of other amplifiers derived directly from its design are included. The quality made possible at a £79 (US$133) price tag opened up the market for budget yet quality amplifiers, and spawned similarly low-priced competitors such as ARCAM Alpha, Rotel 840, Mission , Pioneer A400, Denon [...] and Marantz [...] In 2002 it ranked No. 19 in list of [...] "The Hot 100 Products" [...] by Stereophile. In 2011, The Absolute Sound placed it at No. 9 in their list of [...] "The Ten Most Significant Amplifiers of All Time". The Absolute Sound remarked that this [...] "iconic gem could embarrass amplifiers costing 10 times more with its big, warm and detailed sound and best of all, its affordable price made it available to a wider audience." ...|$|E
2500|$|... to {{identify}} and fix bugs in the system (e.g. logical or synchronization problems in the code, or a <b>design</b> <b>error</b> in the hardware); ...|$|E
50|$|Functional <b>design</b> <b>errors</b> (logical {{function}} {{that had to}} be implemented, is designed incorrectly).|$|R
40|$|Hardware-software covalidation {{involves}} the cosimulation {{of a system}} description with a functional test sequence. Functional test generation is heavily dependent on manual interaction, making it a time-consuming and expensive process. We present an automatic test generation technique to detect <b>design</b> <b>errors</b> in hardwaresoftware systems. The <b>design</b> <b>errors</b> targeted are those caused by incorrect synchronization between concurrent tasks/processes whose detection is dependent on event timing. We formulate the test generation problem as a non-linear program on integer variables and we use a public domain finite domain solver to solve the problem. We present the formulation and show the results of test generation {{for a number of}} potential <b>design</b> <b>errors...</b>|$|R
40|$|<b>Design</b> <b>errors</b> have {{resulted}} in a plethora of catastrophic building and engineering failures, and some cases have caused death and injury to workers and members of the public. Despite continued efforts to improve project performance, errors remain a significant problem due to recurrent error- traps that prevail at the people, organisational and project levels. In addressing the need to reduce error, a systemic model that is grounded in practice and the aggregated views of 46 practitioners who were interviewed about the nature and prevention of <b>design</b> <b>errors</b> is proposed. The developed model can be used to identify and mitigate <b>design</b> <b>errors</b> as well as stimulate learning throughout a project’s life cycle...|$|R
2500|$|Gnat F.1 proved {{initially}} {{problematic in}} the harsh Finnish conditions. Finland was the first operational user of Gnat F.1, and the plane still had many issues yet to be resolved. All Gnats were grounded for half a year on 26 August 1958 [...] after the destruction of GN-102 due to a technical <b>design</b> <b>error</b> in its hydraulic system, and the aircraft soon {{became the subject of}} severe criticism. Three other aircraft were also destroyed in other accidents, with two pilots ejecting and one being killed. Once the initial problems were ironed out, the plane proved to be extremely manouevreable and had good performance in the air, but also to be very maintenance intensive. The availability of spare parts was always an issue, and its maintenance a challenge to the conscript mechanics. The Gnats were removed from active service in 1972 when the Häme Wing moved to Rovaniemi, and when the new Saab 35 Drakens were brought into use.|$|E
2500|$|The default IEEE 754 {{exception}} handling behaviour of resumption following pre-substitution of a default value avoids the risks inherent in changing flow of program control on numerical exceptions. For example, in 1996 the maiden {{flight of the}} Ariane 5 (Flight 501) ended in a catastrophic explosion {{due in part to}} the Ada programming language {{exception handling}} policy of aborting computation on arithmetic error, which in this case was a 64-bit floating point to 16-bit integer conversion overflow. In the Ariane Flight 501 case, the programmers protected only four out of seven critical variables against overflow due to concerns about the computational constraints of the on-board computer and relied on what turned out to be incorrect assumptions about the possible range of values for the three unprotected variables because they reused code from the Ariane 4, for which their assumptions were correct. According to William Kahan, the loss of Flight 501 would have been avoided if the IEEE 754 exception-handling policy of default substitution had been used because the overflowing 64-bit to 16-bit conversion that caused the software to abort occurred in a piece of code that turned out to be completely unnecessary on the Ariane 5. The official report on the crash (conducted by an inquiry board headed by Jacques-Louis Lions) noted that [...] "An underlying theme in the development of Ariane 5 is the bias towards the mitigation of random failure. The supplier of the inertial navigation system (SRI) was only following the specification given to it, which stipulated that in the event of any detected exception the processor was to be stopped. The exception which occurred was not due to random failure but a <b>design</b> <b>error.</b> The exception was detected, but inappropriately handled because the view had been taken that software should be considered correct until it is shown to be at fault. [...] Although the failure was due to a systematic software <b>design</b> <b>error,</b> mechanisms can be introduced to mitigate this type of problem. For example the computers within the SRIs could have continued to provide their best estimates of the required attitude information. There is reason for concern that a software exception should be allowed, or even required, to cause a processor to halt while handling mission-critical equipment. Indeed, the loss of a proper software function is hazardous because the same software runs in both SRI units. In the case of Ariane 501, this resulted in the switch-off of two still healthy critical units of equipment." ...|$|E
5000|$|Spillway <b>design</b> <b>error</b> (South Fork Dam, near {{failure of}} Glen Canyon Dam) ...|$|E
40|$|The paper {{discusses}} the <b>design</b> <b>errors</b> in chemical process industry (CPI) by analyzing major equipment related accident cases from Failure Knowledge Database (FKD). The {{aim is to}} recognize the contribution of design to chemical process accidents and to evaluate the time of occurrence of the errors in a plant design project. The analysis of accident cases {{found out that the}} contribution of design to accidents is very significant: 79 % of accident cases analyzed were contributed by <b>design</b> <b>errors.</b> The most critical <b>design</b> <b>errors</b> were poor layout (17 %), insufficient consideration of chemical reactivity and incompatibility (16 %) and incorrectly chosen process conditions (16 %). The <b>design</b> <b>errors</b> were initiated at basic (32 %), detailed (32 %) and preliminary (22 %) design phases of the project. Errors in fundamental aspects of chemical processes e. g. route selections are more severe (as compared to others errors class) and might creates many similar errors in later phases of design project. Based on the accident information gathered, a straightforward point-to-look list for error detection and elimination was suggested for process lifecycle stages...|$|R
40|$|Trace-based debug {{solutions}} facilitate {{to eliminate}} <b>design</b> <b>errors</b> escaped from pre-silicon verification and have gained wide acceptance in the industry. Existing techniques typically trace {{the same set}} of signals throughout each debug run, which is not quite effective for catching <b>design</b> <b>errors.</b> In this work, we propose a multiplexed signal tracing strategy that is able to significantly increase debuggability of the circuit. That is, we divide the tracing procedure in each debug run into a few periods and trace different sets of signals in each period. A novel trace signal grouping algorithm is presented to maximize the probability of catching the propagated evidences from <b>design</b> <b>errors,</b> considering the trace interconnection fabric design constraints. Experimental results on benchmark circuits demonstrate the effectiveness of proposed solution. 1...|$|R
40|$|In this paper, an {{efficient}} algorithm to diagnose <b>design</b> <b>errors</b> in RTL description is proposed. The diagnosis algorithm exploits the hierarchy available in RTL designs to locate <b>design</b> <b>errors.</b> Using data path {{to reduce the}} number of error candidates and ensure that true errors are included in. According to the estimated probability, the most suspected error candidates would be reported first in the display. The advantages of the proposed method are simple and available...|$|R
5000|$|Human, {{computer}} or <b>design</b> <b>error</b> (Buffalo Creek Flood, Dale Dike Reservoir, Taum Sauk pumped storage plant) ...|$|E
5000|$|Correction of a <b>design</b> <b>error</b> that doesn't {{become evident}} until testing and modeling, or {{customer}} use reveals it.|$|E
50|$|The main {{causes of}} dam failure include {{inadequate}} spillway capacity, piping through the embankment, foundation or abutments, spillway <b>design</b> <b>error</b> (South Fork Dam), geological instability caused by changes to water levels during filling or poor surveying (Vajont, Malpasset, Testalinden Creek dams), poor maintenance, especially of outlet pipes (Lawn Lake Dam, Val di Stava Dam collapse), extreme rainfall (Shakidor Dam), earthquakes, and human, computer or <b>design</b> <b>error</b> (Buffalo Creek Flood, Dale Dike Reservoir, Taum Sauk pumped storage plant).|$|E
50|$|Shadow Data Systems often {{suffer from}} poor <b>design.</b> <b>Errors</b> {{may be hard}} to find, {{modifications}} may be difficult, and long-term support may be troublesome.|$|R
40|$|An {{advocated}} panacea {{for reducing}} <b>design</b> <b>errors</b> and rework in construction and engineering projects is building information modeling (BIM). Yet, {{it would appear}} that advocates of BIM have overlooked why and how <b>design</b> <b>errors</b> occur. In this article, the nature of error is explained and the principal underlying causes identified with reference to the normative literature and the authors phenomenological research. A systemic model for reducing esign errors is presented and the enabling role of BIM discussed. © 2010 Springer-Verlag London Limited...|$|R
40|$|Abstract—Current system {{development}} techniques still rely on integration labs and manual integration of system components, typically occurring after {{the design and}} development of the subsystems is largely complete. Discovery of <b>design</b> <b>errors</b> late in the development life cycle during system integration testing often results in large budget and schedule overruns. Technologies that enable virtual integration of embedded electronics and the mechanical systems with which they are coupled allow discovery of <b>design</b> <b>errors</b> earlier in the product development life cycle. Th...|$|R
5000|$|... to {{identify}} and fix bugs in the system (e.g. logical or synchronization problems in the code, or a <b>design</b> <b>error</b> in the hardware); ...|$|E
50|$|In {{the classic}} first-person shooter Doom, an effect {{known as the}} 'Hall of Mirrors' can occur {{as a result of}} <b>design</b> <b>error</b> or player experimentation.|$|E
5000|$|A {{change in}} {{material}} or manufacturing method. This {{can be caused}} by a lack of material availability, a change in vendor, or to compensate for a <b>design</b> <b>error.</b>|$|E
40|$|We {{present a}} simulation-based method for combinational design {{verification}} that aims at complete coverage of specified <b>design</b> <b>errors</b> using conventional ATPG tools. The error models used in prior research are examined and reduced to four types: gate substitution errors (GSEs), gate count errors (GCEs), input count errors (ICEs), and wrong input errors (WIEs). Conditions are derived for a gate {{to be completely}} testable for GSEs; These conditions lead to small test sets for GSEs. Near-minimal test sets are also derived for GCEs. We analyze redundancy in <b>design</b> <b>errors</b> and relate this to single stuck-line (SSL) redundancy. We show how to map all the foregoing error types into SSL faults, and describe an extensive set of experiments to evaluate the proposed method. Our experiments demonstrate that high coverage of the modeled <b>design</b> <b>errors</b> can be achieved with small test sets. ...|$|R
40|$|This paper {{describes}} a diagnosis technique for locating <b>design</b> <b>errors</b> in circuit implementations {{which do not}} match their functional specification. The method efficiently propagates mismatched patterns from erroneous outputs backward into the network and calculates circuit regions which most likely contain the error(s). In contrast to previous approaches, the described technique {{does not depend on}} a fixed set of error models. Therefore, it is more general and especially suitable for transistor-level circuits, which have a broader variety of possible <b>design</b> <b>errors</b> than gate-level implementations. Furthermore, the proposed method is also applicable for incomplete sets of mismatched patterns and hence can be used not only as a debugging aid for formal verification techniques but also for simulationbased approaches. Experiments with industrial CMOS circuits show that for most <b>design</b> <b>errors</b> the identified problem region is less than 3 % of the overall circuit...|$|R
40|$|The {{evaluation}} of a metal gate PMOS op amp, including verification of the integrated circuit layout and {{a check of the}} PMOS design rules, was performed. The SPICE deck was modified to include a mask error which was discovered and the resulting simulation compared to DC measurements. The results indicate <b>design</b> <b>errors</b> at the input stage of the op amp. Open loop simulations performed by SPICE also show <b>design</b> <b>errors</b> within the gain stage. Suggestions for a more thorough investigation of the design are given...|$|R
