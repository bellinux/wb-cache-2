2196|2437|Public
5|$|The {{most widely}} used {{approach}} to multiple sequence alignments uses a <b>heuristic</b> <b>search</b> known as progressive technique (also known as the hierarchical or tree method) developed by Paulien Hogeweg and Ben Hesper in 1984. Progressive alignment builds up a final MSA by combining pairwise alignments beginning with the most similar pair and progressing to the most distantly related. All progressive alignment methods require two stages: a first stage in which {{the relationships between the}} sequences are represented as a tree, called a guide tree, and a second step in which the MSA is built by adding the sequences sequentially to the growing MSA according to the guide tree. The initial guide tree is determined by an efficient clustering method such as neighbor-joining or UPGMA, and may use distances {{based on the number of}} identical two letter sub-sequences (as in FASTA rather than a dynamic programming alignment).|$|E
25|$|In {{addition}} to rapid <b>heuristic</b> <b>search</b> methods, the FASTA package provides SSEARCH, an {{implementation of the}} optimal Smith-Waterman algorithm.|$|E
25|$|A* solves {{only one}} search problem {{rather than a}} series of similar search problems. Otherwise, A* is not {{guaranteed}} to expand fewer nodes than incremental <b>heuristic</b> <b>search</b> algorithms.|$|E
40|$|Abstract. Previously, {{intelligent}} transportation {{control systems}} {{have been widely used}} to improve traffic safety on roadways. Among them, dynamic speed control is a novel technique that has been increasingly used for reducing collision risks. However, previous studies did not consider using any <b>heuristic</b> <b>searching</b> algorithm to obtain the optimal solution to improve traffic safety. The objective {{of this study is to}} evaluate the application of using <b>heuristic</b> <b>searching</b> algorithm to optimize the safety effects of dynamic speed control system. The results showed that the evolution process in the <b>heuristic</b> <b>searching</b> algorithm can promote the strategy towards better solutions for the optimization of the safety effects of dynamic speed control. The optimal control reduces collision risks by 12. 7 % and increased travel time only by 1. 4 %...|$|R
3000|$|... [...]. The {{input weight}} and the pattern can be {{computed}} via <b>heuristic</b> <b>searching</b> of the trellis of G. The following result {{is important for}} further analysis: [...]...|$|R
40|$|Abstract—Due to the {{immensity of}} phylogenetic tree space for large data sets, {{researches}} must rely on <b>heuristic</b> <b>searches</b> to infer reasonable phylogenies. By designing meta-searches which appropriately combine a variety of heuristics and parameter settings, researchers can significantly improve the performance of <b>heuristic</b> <b>searches.</b> Advanced language constructs in the open-source PSODA project—including variables, mathematical and logical expressions, conditional statements, and user-defined commands—give researchers a better framework for the exploration and exploitation of phylogenetic meta-search algorithms. PSODA’s approach to scripting meta-search algorithms is unique among open-source packages and addresses several limitations of other phylogenetic applications. Index Terms—meta-searching, phylogenetic analysis, scripting languages I...|$|R
25|$|Phylogenetic trees {{composed}} with a nontrivial number of input sequences {{are constructed using}} computational phylogenetics methods. Distance-matrix methods such as neighbor-joining or UPGMA, which calculate genetic distance from multiple sequence alignments, are simplest to implement, but do not invoke an evolutionary model. Many sequence alignment methods such as ClustalW also create trees by using the simpler algorithms (i.e. those based on distance) of tree construction. Maximum parsimony is another simple method of estimating phylogenetic trees, but implies an implicit model of evolution (i.e. parsimony). More advanced methods use the optimality criterion of maximum likelihood, often within a Bayesian Framework, and apply an explicit model of evolution to phylogenetic tree estimation. Identifying the optimal tree using many of these techniques is NP-hard, so <b>heuristic</b> <b>search</b> and optimization methods are used in combination with tree-scoring functions to identify a reasonably good tree that fits the data.|$|E
2500|$|Aε' – an {{efficient}} near admissible <b>heuristic</b> <b>search</b> algorithm ...|$|E
5000|$|D* Lite is an {{incremental}} <b>heuristic</b> <b>search</b> algorithm by Sven Koenig and Maxim Likhachev that builds on LPA*, {{an incremental}} <b>heuristic</b> <b>search</b> algorithm that combines ideas of A* and Dynamic SWSF-FP.|$|E
40|$|Abstract — In this paper, {{the effect}} of <b>heuristic</b> graph <b>search</b> {{algorithms}} like best first and A * best first search on the offline browsing efficiency is studied. A web crawler based multithreaded web archiving system is designed using these <b>heuristic</b> graph <b>search</b> algorithms and the offline browsing efficiency of the web archiving system is estimated. Index Terms — Offline browsing efficiency, <b>heuristic</b> graph <b>search</b> algorithms, multithreaded, web archiving system. I...|$|R
40|$|Incremental <b>heuristic</b> <b>searches</b> try {{to reuse}} their {{previous}} search efforts whenever these are available. As a result, they can often solve {{a sequence of}} similar planning problems much faster than planning from scratch. State-of-the-art incremental <b>heuristic</b> <b>searches</b> such as LPA*, D * and D * Lite all work by propagating cost changes to all the states on the search tree whose g-values (the costs of computed paths from the start) are no longer optimal. While such a complete propagation of cost changes is required to ensure optimality, the propagations can be stopped much earlier if {{we are looking for}} solutions within a given suboptimality bound. We present a framework called Truncated Incremental Search that builds on this observation, and uses a target suboptimality bound to efficiently restrict the cost propagations. Using this framework, we develop two algorithms, Truncated LPA * (TLPA*) and Truncated D * Lite (TD * Lite). We discuss their analytical properties and present experimental results for 2 D and 3 D (x, y, heading) path planning that show significant improvement in runtime over existing incremental <b>heuristic</b> <b>searches</b> when searching for close-to-optimal solutions. In addition, unlike typical incremental searches, Truncated Incremental Search is much less dependent on the proximity of the cost changes to the goal of the search due to the early termination of the cost change propagation...|$|R
40|$|FIGURE 1. Phylogenetic {{topology}} for {{the major}} groups of Libelluloidea and species of Libellula. Strict consensus of 18 trees of 256. 59 steps with bootstrap values (Felsenstein, 1985). Bootstrap analysis was performed with 1000 <b>heuristic</b> <b>searches,</b> including all trees compatible with a 50 % majority­ rule consensus...|$|R
50|$|Incremental <b>heuristic</b> <b>search</b> {{has been}} {{extensively}} used in robotics, where {{a larger number of}} path planning systems are based on either D* (typicallyearlier systems) or D* Lite (current systems), two different incremental <b>heuristic</b> <b>search</b> algorithms.|$|E
50|$|Incremental <b>heuristic</b> <b>search</b> {{algorithms}} combine both incremental and <b>heuristic</b> <b>search</b> {{to speed}} up searches of sequences of similar search problems, which is important in domains that are only incompletely known or change dynamically. Incremental search has been studied {{at least since the}} late 1960s. Incremental search algorithms reuse information from previous searches {{to speed up}} the current search and solve search problems potentially much faster than solving them repeatedly from scratch. Similarly, <b>heuristic</b> <b>search</b> has also been studied at least since the late 1960s.|$|E
5000|$|... #Subtitle level 2: Approaches for Bidirectional <b>Heuristic</b> <b>Search</b> ...|$|E
40|$|In this paper, {{the effect}} of <b>heuristic</b> graph <b>search</b> {{algorithms}} like best first and A* best first search on the offline browsing efficiency is studied. A web crawler based multithreaded web archiving system is designed using these <b>heuristic</b> graph <b>search</b> algorithms and the offline browsing efficiency of the web archiving system is estimated...|$|R
40|$|Local <b>search</b> <b>heuristics</b> are an {{important}} class of algorithms for obtaining good solutions for hard combinatorial optimization problems. Important issues for these heuristics are solution quality and {{the time needed to}} obtain a good solution. Roughly speaking, a local <b>search</b> <b>heuristic</b> starts with an initial solution, e. g. obtained {{with the help of a}} constructive <b>heuristic.</b> The local <b>search</b> <b>heuristic</b> then iteratively explores a neighborhood of the current solution and chooses a new solution out of this neighborhood to become the next current solution. Often, only new solutions are considered, which improve on the current one. The local <b>search</b> <b>heuristic</b> halts if some stopping criterion is met, e. g. there exists no better solution in the neighborhood...|$|R
40|$|FIGURE 1. A, model-constrained maximum-likelihood {{phylogeny}} {{inferred from}} the partial COI sequences. <b>Heuristic</b> <b>searches</b> retained one tree (- ln = 2264. 2673). Numbers on nodes, indicate bootstrap {{support for that}} node. B, geographical distribution of the specimens analysed. Coloured dots correspond with the samples analysed for COI and the dotted lines to the distributions of the only widespread species...|$|R
5000|$|... #Subtitle level 3: Newell and Simon: <b>heuristic</b> <b>search</b> {{hypothesis}} ...|$|E
5000|$|In {{the case}} of <b>Heuristic</b> <b>Search,</b> ILOG has {{developed}} {{a large number of}} applications including deriving job shop schedules for many manufacturing installations. [...] Many telecommunications companies also make use of this technology in the management of their workforces, for example BT Group has deployed <b>heuristic</b> <b>search</b> in a scheduling application that provides the work schedules of 20,000 engineers.|$|E
5000|$|So far, {{three main}} classes of {{incremental}} <b>heuristic</b> <b>search</b> algorithms have been developed: ...|$|E
40|$|In {{this paper}} we propose an {{approach}} to improve the performance of existing flood based routing algorithm Ad-hoc on demand Distance Vector Routing [2] for mobile Ad-hoc wireless networks based on <b>heuristic</b> <b>searching</b> technique. Flooding technique is often used for route discovery in on demand mechanism in MANET such as AODV, DSR. To avoid the problem of wireless broadcast storm, the <b>heuristic</b> <b>searching</b> approach {{was introduced in the}} process of finding route from source node to destination node. Heuristic function considers the characteristics of MANET (Bandwidth, number of nodes in the given range). If a node S wants to send a packet to D in the flooding method S sends packet to all its neighbor nodes, but in the proposed scheme tries to reduce broadcasting by finding heuristic measures of the neighbors of S. The heuristic measures are evaluated by applying a function to al...|$|R
40|$|This paper {{presents}} an Optimised <b>Search</b> <b>Heuristic</b> that combines a tabu search method with the verification of violated valid inequalities. The solution {{delivered by the}} tabu search is partially destroyed by a randomised greedy procedure, and then the valid inequalities are used to guide the reconstruction of a complete solution. An application of the new method to the Job-Shop Scheduling problem is presented. Optimised <b>Search</b> <b>Heuristic,</b> Tabu <b>Search,</b> GRASP, Valid Inequalities, Job Shop Scheduling...|$|R
40|$|Randomized <b>Search</b> <b>heuristics</b> are {{frequently}} applied to NP-hard combinatorial optimization problems. The runtime analysis of randomized <b>search</b> <b>heuristics</b> has contributed tremendously to their theoretical understanding. Recently, randomized <b>search</b> <b>heuristics</b> {{have been examined}} regarding their achievable progress within a fixed time budget. We follow this approach and present a first fixed budget runtime analysis for a NP-hard combinatorial optimization problem. We consider the well-known Traveling Salesperson problem (TSP) and analyze the fitness increase that randomized <b>search</b> <b>heuristics</b> are able to achieve within a given fixed budget. Samadhi Nallaperuma, Frank Neumann, Dirk Sudhol...|$|R
5000|$|See also Incremental <b>heuristic</b> <b>search,</b> a {{class of}} search {{techniques}} in artificial intelligence and robotics ...|$|E
50|$|In {{addition}} to rapid <b>heuristic</b> <b>search</b> methods, the FASTA package provides SSEARCH, an {{implementation of the}} optimal Smith-Waterman algorithm.|$|E
50|$|After his dissertation, Koenig laid a broad {{foundation}} for incremental <b>heuristic</b> <b>search</b> in artificial intelligence {{with the development}} of search algorithms such as Lifelong Planning A* (LPA*), D* Lite, Adaptive A* (AA*) and Fringe-Saving A* (FSA*). The ideas behind his incremental <b>heuristic</b> <b>search</b> algorithm D* Lite, for example, have been incorporated by others into a variety of path planning systems in robotics, including Carnegie Mellon University's winning entry in the DARPA Urban Challenge.|$|E
30|$|In the MP phylogenetic analysis, indels {{were treated}} as missing data. The {{characters}} {{were treated as}} unordered, and the character transformations were equally weighted. The branch collapse option was set to collapse at a minimum length of zero. A <b>heuristic</b> parsimony <b>search</b> was performed with 1, 000 replicates of random additions of sequences with ACCTRAN character optimization, tree bisection– reconnection (TBR) branch swapping, and MULTREES and STEEPEST DESCENT options on. Statistical support for each clade was assessed by bootstrap analysis (Felsenstein [1985]). Ten thousand replicates of <b>heuristic</b> <b>searches,</b> with the TBR branch swapping switched on and MULTREES options off, were performed to calculate bootstrap percentages (BP).|$|R
40|$|This paper {{summarizes}} the theoretical foundations and basic methodology of automated theorem-proving. The material presented includes {{a review of}} the predicate calculus, the transformation of a first-order wff into clause normal form, J. A. Robinson's resolution principle, semantic resolution, significant resolution <b>heuristics</b> (<b>search</b> strategies), and paramodulation. The application of theorem-proving techniques to the problem of program correctness is also briefly discussed...|$|R
30|$|Phylogenetic {{analyses}} were performed with PAUP* 4.0 b 10 (Swofford [2002]) for maximum parsimony (MP) reconstruction with all characters equally weighted. The most parsimonious trees were obtained with <b>heuristic</b> <b>searches</b> of 1, 000 replicates with random stepwise sequences addition, tree bisection-reconnection (TBR) branch swapping, collapse of zero-length branches, with the multiple-tree option in effect, and saving up to 10, 000 trees from each random sequence addition.|$|R
50|$|S. Koenig, M. Likhachev, Y. Liu and D. Furcy. Incremental <b>Heuristic</b> <b>Search</b> in Artificial Intelligence. Artificial Intelligence Magazine, 25, (2), 99-112, 2004.|$|E
5000|$|A* solves {{only one}} search problem {{rather than a}} series of similar search problems. Otherwise, A* is not {{guaranteed}} to expand fewer nodes than incremental <b>heuristic</b> <b>search</b> algorithms.|$|E
5000|$|D* {{a family}} of {{incremental}} <b>heuristic</b> <b>search</b> algorithms for problems in which constraints vary over time or are not completely known when the agent first plans its path ...|$|E
40|$|This paper {{focuses on}} the study of a hybrid of two <b>search</b> <b>heuristics,</b> Tabu <b>Search</b> (TS) and Genetic Algorithm (CA) on VRPTW. TS is a local search {{technique}} that has been successfully applied to many NP-complete problems. On the other hand, GA which is capable of searching multiple search areas in a search space is good in diversification. In this paper, we create a hybrid that combines the strengths of the two <b>search</b> <b>heuristics.</b> Experimental results indicate that such a hybrid outperforms the individual heuristics alon...|$|R
40|$|Optimal <b>heuristic</b> <b>searches</b> such as A * search {{are widely}} used for {{planning}} but can rarely scale to large complex prob-lems. The suboptimal versions of <b>heuristic</b> <b>searches</b> such as weighted A * search can often scale to much larger planning problems by trading off {{the quality of the}} solution for effi-ciency. They do so by relying more on the ability of the heuristic function to guide them well towards the goal. For complex planning problems, however, the heuristic function may often guide the search into a large local minimum and make the search examine most of the states in the minimum before proceeding. In this paper, we propose a novel heuris-tic search, called R * search, which depends much less {{on the quality of the}} <b>heuristic</b> function. The <b>search</b> avoids local min-ima by solving the whole planning problem with a series of short-range and easy-to-solve searches, each guided by the heuristic function towards a randomly chosen goal. In ad-dition, R * scales much better in terms of memory because it can discard a search state-space after each of its searches. On the theoretical side, we derive probabilistic guarantees on the sub-optimality of the solution returned by R*. On the ex-perimental side, we show that R * can scale to large complex problems...|$|R
40|$|Automation of the {{mechanical}} design process has attracted much attention over the last decade. This paper reports a method of computational synthesis of the conceptual design of mechanisms. The design algorithm employs best-first <b>heuristic</b> <b>searches</b> in a library of mechanical devices, represented and classified qualitatively from various perspectives. A number of design alternatives can be generated from a specification. The suggested design solutions are compact and compatible with general engineering design principles. link_to_subscribed_fulltex...|$|R
