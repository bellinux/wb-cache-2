1167|9016|Public
5|$|Unlike C++, C# {{does not}} support {{multiple}} inheritance, although a class can implement any number of interfaces. This was a <b>design</b> <b>decision</b> by the language's lead architect to avoid complication and simplify architectural requirements throughout CLI. When implementing multiple interfaces that contain a method with the same signature, C# allows implementing each method depending on which interface that method is being called through, or, like Java, allows implementing the method once, and have that be the one invocation on a call through any of the class's interfaces.|$|E
5|$|After the United States Army Corps of Engineers {{took over}} the Manhattan Project, it gave {{responsibility}} for the detailed design and construction of the reactors to DuPont. There was friction between the company and Wigner and his team. Major differences between Wigner's reactor design and DuPont's included {{increasing the number of}} process tubes from 1,500 in a circular array to 2,004 in a square array, and cutting the power from 500 MW to 250 MW. As it turned out, the <b>design</b> <b>decision</b> by DuPont to give the reactor additional tubes came in handy when neutron poisoning became a problem for the B Reactor at the Hanford Site. The extra tubes allowed a greater fuel load to overcome the poisoning. Without them the reactor would have had to be run at low power until enough of the boron impurities in the graphite had been burned up to allow it to reach full power, which would have delayed full operation by up to a year.|$|E
5|$|Another key <b>design</b> <b>decision</b> was {{to develop}} the concept car based on a new family of common {{powertrain}} components for electric propulsion, which initially was called the E-Flex Systems, “E” stands for electric drive and “Flex” for the different sources of electricity, but later was renamed Voltec drive system. The E-Flex or Voltec powertrain {{is an attempt to}} standardize many components of possible future electrically propelled vehicles, and to allow multiple interchangeable electricity-generating systems. The E-Flex powertrain has the potential to adapt the vehicles to pure battery electric, to fuel cell-powered or to several other sources of energy to create electricity on board, such as engine-generator sets (genset) fueled by gasoline, diesel, biodiesel, ethanol fuel (E100), or flex-fuel (E85). Regenerative braking would also contribute to the on-board electricity generation. In October 2006 the E-flex powertrain was selected for the new propulsion architecture and the name Volt was chosen by General Motors.|$|E
40|$|The course "Methods of {{decision-making}} in projects " reveals {{the essence of}} project management through the mechanism of making <b>design</b> <b>decisions.</b> To make <b>design</b> <b>decisions</b> using different approaches: expert techniques Multicriteria methods, methods of group decision-making <b>design</b> <b>decisions</b> under uncertainty, decision making under the project risk...|$|R
40|$|Software {{architecture}} documentation {{helps people}} {{in understanding the}} software architecture of a system. In practice, software architectures are often documented after the fact, i. e. they are maintained or created after most of the <b>design</b> <b>decisions</b> have been made and implemented. To keep the architecture documentation up-to-date an architect needs to recover and describe these decisions. This paper presents ADDRA, an approach an architect can use for recovering architectural <b>design</b> <b>decisions</b> after the fact. ADDRA uses architectural deltas to provide the architect with clues about these <b>design</b> <b>decisions.</b> This allows the architect to systematically recover and document relevant architectural <b>design</b> <b>decisions.</b> The recovered architectural <b>design</b> <b>decisions</b> improve the documentation of the architecture, which increases traceability, communication, and general understanding of a system. ...|$|R
40|$|Abstract—Software {{architectures}} {{represent the}} design of a system for describing its main relevant parts. Recently, recording and documenting architectural <b>design</b> <b>decisions</b> has attracted the attention of the software architecture community. <b>Design</b> <b>decisions</b> are an important piece during the architecting process that must be explicitly documented, but there is little evidence of successful reuse of this architectural knowledge. This work focuses on the reuse of <b>design</b> <b>decisions</b> in order to customize architectures. Specifically, we explore extensibility ideas from software product lines to show how architectures can be extended on the basis of <b>design</b> <b>decisions.</b> The documentation of synthesis architectures has received so far little attention, and particularly its reuse. This ongoing research describes an approach for product line synthesis architecture, where <b>design</b> <b>decisions</b> are introduced to promote its reuse. I...|$|R
5|$|The {{original}} USB1.0 specification, {{which was}} introduced in January 1996, defined data transfer rates of 1.5Mbit/s Low Speed and 12Mbit/s Full Speed. Microsoft Windows 95, OSR 2.1 provided OEM support for the devices. The first widely used version of USB was 1.1, which was released in September 1998. The 12Mbit/s data rate was intended for higher-speed devices such as disk drives, and the lower 1.5Mbit/s rate for low data rate devices such as joysticks. Apple Inc.'s iMac was the first mainstream product with USB and the iMac's success popularized USB itself. Following Apple's <b>design</b> <b>decision</b> to remove all legacy ports from the iMac, many PC manufacturers began building legacy-free PCs, {{which led to the}} broader PC market using USB as a standard.|$|E
5|$|Wigner was {{disappointed}} that DuPont was given responsibility for the detailed design of the reactors, not just their construction. He threatened to resign in February 1943, but was talked out of it {{by the head of}} the Metallurgical Laboratory, Arthur Compton, who sent him on vacation instead. As it turned out, a <b>design</b> <b>decision</b> by DuPont to give the reactor additional load tubes for more uranium saved the project when neutron poisoning became a problem. Without the additional tubes, the reactor could have been run at 35% power until the boron impurities in the graphite were burned up and enough plutonium produced to run the reactor at full power; but this would have set the project back a year. During the 1950s, he would even work for DuPont on the Savannah River Site. Wigner did not regret working on the Manhattan Project, and sometimes wished the atomic bomb had been ready a year earlier.|$|E
25|$|An {{important}} kernel <b>design</b> <b>decision</b> is {{the choice}} of the abstraction levels where the security mechanisms and policies should be implemented. Kernel security mechanisms {{play a critical role in}} supporting security at higher levels.|$|E
40|$|Many <b>design</b> <b>decisions</b> must be {{made and}} {{repeatedly}} evaluated during the development process to form {{a nuclear power plant}} control room system that supports safe operation. The {{purpose of this paper is}} to compare utilised approaches to evaluate nuclear power plant control room systems and explore how they relate to <b>design</b> <b>decisions</b> at different levels of specificity. The method used was a review of academic literature. The result showed that evaluation of more specific <b>design</b> <b>decisions</b> is largely addressed. However, there is a need to further develop methodologies and methods for formative evaluation of more general <b>design</b> <b>decisions</b> to support assessment earlier in the development process...|$|R
40|$|Abstract. An {{increased}} attention to documenting architectural <b>design</b> <b>decisions</b> and their rationale {{has resulted in}} several approaches and prototype tools for capturing and managing architectural knowledge. However, {{most of them are}} focused on architecting single products and little {{attention has been paid to}} include <b>design</b> <b>decisions</b> in the context of product line architectures. This paper studies two similar research tools that capture architecture <b>design</b> <b>decisions</b> and how these can be extended to include product line specific features. We report the improvements needed by the data models of the two tools and we provide a unified data model as a research agenda to support both the relationships between <b>design</b> <b>decisions</b> and variability models in a product line context...|$|R
40|$|Software {{architectures}} {{have high}} costs for change, are complex, and erode during evolution. We believe {{these problems are}} partially due to knowledge vaporization. Currently, almost all the knowledge and information about the <b>design</b> <b>decisions</b> the architecture is based on are implicitly embedded in the architecture, but lack a first-class representation. Consequently, knowledge about these <b>design</b> <b>decisions</b> disappears into the architecture, {{which leads to the}} aforementioned problems. In this paper, anew perspective on software architecture is presented, which views software architecture as a composition of a set of explicit <b>design</b> <b>decisions.</b> This perspective makes architectural <b>design</b> <b>decisions</b> an explicit part of a software architecture. Consequently, knowledge vaporization is reduced, thereby alleviating some of the fundamental problems of software architecture...|$|R
25|$|This approach, {{which is}} not {{compatible}} with Windows Group Policy, was repeated in Windows XP. The reasons for this <b>design</b> <b>decision</b> by Microsoft are not known, and it has resulted in heavy criticism. Microsoft significantly improved this in Windows Vista by redesigning the power management system to allow basic configuration by Group Policy. The support offered {{is limited to a}} single per-computer policy. The most recent release, Windows 7 retains these limitations but does include refinements for timer coalescing, processor power management, and display panel brightness. The most significant change in Windows 7 is in the user experience. The prominence of the default High Performance power plan has been reduced with the aim of encouraging users to save power.|$|E
25|$|The {{first major}} <b>design</b> <b>decision</b> Wertich made {{related to the}} {{complexity}} of the game's economic system. Due to the innovations he planned to introduce to the mechanics, and because the supply and demand-based gameplay of Settlers III was going to be more intricate than in previous titles, he felt that forcing players to concentrate too much on logistics would serve as an unwelcome distraction, and so decided to remove the need for a road network. Instead, settlers would have the freedom to move anywhere within the player's settlement, with the AI handling pathfinding. Another early decision was that the different races in Settlers III wouldn't just look different, they would have different abilities, different economic models and certain buildings unique to each one. Wertich, in consultation with Hertzler, also decided to create the game in high color, a first for the series, which had used 8-bit color for previous titles.|$|E
25|$|At Lindbergh's request, {{the large}} main and forward fuel tanks {{were placed in}} the forward section of the fuselage, in front of the pilot, with the oil tank acting as a firewall. This {{arrangement}} improved the center of gravity and reduced the risk of the pilot being crushed to death between the main tank and the engine {{in the event of a}} crash. This <b>design</b> <b>decision</b> meant that there could be no front windshield, and that forward visibility would be limited to the side windows. This did not concern Lindbergh as he was used to flying in the rear cockpit of mail planes with mail bags in the front. When he wanted to see forward, he would slightly yaw the aircraft and look out the side. To provide some forward vision as a precaution against hitting ship masts, trees, or structures while flying at low altitude, a Ryan employee who had served in the submarine service installed a periscope which Lindbergh helped design. It is unclear whether the periscope was used during the flight. The instrument panel housed fuel pressure, oil pressure and temperature gauges, a clock, altimeter, tachometer, airspeed indicator, bank and turn indicator, and a liquid magnetic compass. The main compass was mounted behind Lindbergh in the cockpit, and he read it using the mirror from a women's makeup case which was mounted to the ceiling using chewing gum. Lindbergh also installed a newly developed Earth Inductor Compass made by the Pioneer Instrument Company which allowed him to more accurately navigate while taking account of the magnetic declination of the earth. Lindbergh's ultimate arrival in Ireland deviated from his flight plan by just a few miles.|$|E
40|$|Abstract. Managing {{architectural}} <b>design</b> <b>decisions</b> {{in software}} development process {{is an essential}} task for architectural knowledge management. As software ecosystem approaches become a new software development paradigm in software engineering processes, it is important and necessary to capture and represent architectural <b>design</b> <b>decisions</b> in open software development. So far, little {{work has been done}} on it in current architecture research and practice. In this research challenge paper, we discuss the main characteristics of software ecosystems which influence the architecture decision-making process, and identify several key aspects that architectural <b>design</b> <b>decisions</b> should include {{in the context of a}} software ecosystem. In addition, we propose major challenges of managing architectural <b>design</b> <b>decisions</b> for software ecosystems both in theory and practice...|$|R
40|$|In {{software}} architecture design, we explore design alternatives {{and make decisions}} about adoption or rejection of a design from a web of complex and often uncertain information. Different architectural <b>design</b> <b>decisions</b> may lead to systems that satisfy {{the same set of}} functional requirements but differ in certain quality attributes. In this paper, we propose a Bayesian Network based approach to rational architectural design. Our Bayesian Network helps software architects record and make <b>design</b> <b>decisions.</b> We can perform both qualitative and quantitative analysis over the Bayesian Network to understand how the <b>design</b> <b>decisions</b> influence system quality attributes, and to reason about rational <b>design</b> <b>decisions.</b> We use the KWIC (Key Word In Context) example to illustrate the principles of our approach...|$|R
40|$|<b>Design</b> <b>decisions</b> crucially {{influence}} {{the success of}} every software development project. Consequently, {{a considerable amount of}} time in the development activities is usually spent to discuss <b>design</b> <b>decisions</b> and their possible outcomes. While the results of the <b>design</b> <b>decisions</b> are often documented quite well, the situation is usually different for the decision making processes themselves. Usually, little or no effort is spent to track the decision process and its findings, although this could be relevant and helpful information for future decisions in related projects. This report deals with the question, how to document <b>design</b> <b>decisions</b> in software development projects in general and within the demonstrator development in the BelAmi project in special. Usually <b>design</b> <b>decisions</b> have to consider the interests of various stakeholders. This holds especially in the Ambient Intelligence domain. Consequently, a design documentation activity focusing on the avoidance of misunderstandings and shortcomings in the stakeholders' intercommunication is, in our context, mandatory. The aim of the presented work in this report is to provide a framework for documenting <b>design</b> <b>decisions</b> in a sound way and to analyze recurring patterns in decision making, i. e. importance, location, and conflicts of quality attributes...|$|R
25|$|The {{additional}} funding, though significant, {{expanded the}} scope of the game and causes some setbacks, and for some periods, the Greens lived off loans and donations during the development. Following Joel's death March 2014, Ryan was further committed to completing the game to honor Joel's memory and as a way to cope with his loss, and turned back to work a few days after Joel's funeral. The game, up to that point, had been written based on unknowing of Joel's fate, but with his death, the team recognized that much of what they had in place was more focused on the narrative from Ryan and Amy's side, and made it feel more of a selfish work. There were also concerns from investors about the interactivity of the title. They rewrote about 70% of the game to make it more focused on the interactions with Joel. Originally, the game would have ended with the player witnessing a machine with numerous levers that could be pulled, giving the player some sense of control, but when they examined the machine's internals, found that all of the levers were disconnected, and that they had no control of the situation. Following Joel's death, they felt this scene was no longer applicable, and instead replaced it with the players interacting a final time with Joel in a cathedral in an afterlife-type setting as to bring closure to their story. With the change, Ryan hoped that the game would help others to cope and open up with others with the loss of loved ones. One <b>design</b> <b>decision</b> made was to represent the characters in the game with feature-less faces. Ryan stated that this was both that being a small team they did not have the technical capability to fully program and animate the character's faces, and that by leaving the faces feature-less, it would help players engage by imagining themselves in the place of the game's characters.|$|E
500|$|Some of {{the graphic}} {{capabilities}} of BioShock were also criticised by players. The initial {{release of the}} game was found to use a field of view (FOV) in widescreen that presented a smaller view compared to the game running at a 4:3 screen resolution, conflicting with original reports from a developer on how widescreen would have been handled. Though the choice of FOV was a <b>design</b> <b>decision</b> made during development, Irrational included an option for [...] "Horizontal FOV Lock" [...] in the December 2007 patch that allows widescreen users a wider field of view, without cutting anything off the image vertically. BioShock was also criticized for not supporting pixel shader 2.0b video cards (such as the Radeon X800/X850), which were considered high-end graphics cards in 2004–2005, and accounted for about 24% of surveyed hardware collected through Valve's Steam platform {{at the time of}} BioShock release.|$|E
500|$|Grim Fandango {{development}} {{was led by}} project leader Tim Schafer, co-designer of Day of the Tentacle and creator of Full Throttle and the more recent Psychonauts and Brütal Legend. Schafer had begun work on the game soon after completing Full Throttle in June , though he conceived {{the idea of a}} Day of the Dead-themed adventure before production on the latter began. Grim Fandango was an attempt by LucasArts to rejuvenate the graphic adventure genre, in decline by 1998. According to Schafer, the game was developed on a $3 million budget. It was the first LucasArts adventure since [...] not to use the SCUMM engine, instead using the Sith engine, pioneered by , as the basis of the new GrimE engine. The GrimE engine was built using the scripting language Lua. This <b>design</b> <b>decision</b> was due to LucasArts programmer Bret Mogilefsky's interest in the language, and {{is considered one of the}} first uses of Lua in gaming applications. The game's success led to the language's use in many other games and applications, including Escape from Monkey Island and Baldur's Gate.|$|E
40|$|This {{position}} paper makes the following claims that, in our opinion, are worthwhile to discuss at the workshop. 1) The {{first phase of}} software architecture research, where the key concepts are components and connectors, has matured the technology to a level where industry adoption is wide-spread and few fundamental issues remain. 2) The traditional view on software architecture suffers {{from a number of}} key problems that cannot be solved without changing our perspective on the notion of software architecture. These problems include the lack of first-class representation of <b>design</b> <b>decisions,</b> the fact that these <b>design</b> <b>decisions</b> are cross-cutting and intertwined, that these problems lead to high maintenance cost, because of which design rules and constraints are easily violated and obsolete <b>design</b> <b>decisions</b> are not removed. 3) As a community, we need {{to take the next step}} and adopt the perspective that a software architecture is, fundamentally, a composition of architectural <b>design</b> <b>decisions.</b> These <b>design</b> <b>decisions</b> should be represented as first-class entities in the software architecture and it should, at least before system deployment, be possible to add, remove and change architectural <b>design</b> <b>decisions</b> against limited effort...|$|R
50|$|EBD {{is closely}} related to performance-based {{building}} design practices. As an approach to design, PBBD tries to create clear statistical relationships between <b>design</b> <b>decisions</b> and satisfaction levels demonstrated by the building systems. Like EBD, PBBD uses research evidence to predict performance related to <b>design</b> <b>decisions.</b>|$|R
5000|$|... "An {{architectural}} style is a named collection of architectural <b>design</b> <b>decisions</b> that (1) are applicable {{in a given}} development context, (2) constrain architectural <b>design</b> <b>decisions</b> that are specific to a particular system within that context, and (3) elicit beneficial qualities in each resulting system." ...|$|R
2500|$|Stronger stack {{protection}} is possible by splitting the stack in two: one for data {{and one for}} function returns. [...] This split {{is present in the}} Forth language, though it was not a security-based <b>design</b> <b>decision.</b> [...] Regardless, this is not a complete solution to buffer overflows, as sensitive data other than the return address may still be overwritten.|$|E
2500|$|In DOS memory management, {{conventional}} memory, {{also called}} base memory, {{is the first}} 640 kilobytes (...) of the memory on IBM PC or compatible systems. It is the read-write memory directly addressable by the processor {{for use by the}} operating system and application programs. As memory prices rapidly declined, this <b>design</b> <b>decision</b> became a limitation in the use of large memory capacities until the introduction of operating systems and processors that made it irrelevant.|$|E
2500|$|Because of this <b>design</b> <b>decision,</b> {{the first}} row of seats is [...] from the {{sideline}} in a football configuration, considerably more distant than {{the first row}} of seats in most football stadiums (the closest seats at the new Soldier Field, for instance, are [...] from the sideline at the 50-yard line). This resulted in a less intimate venue for football compared to other football facilities built around this time, {{as well as to}} the Orange Bowl.|$|E
3000|$|... fit-for-purpose water use, {{which may}} be {{regulated}} by state or federal governments or health agencies and affects which water sources [D 1] and water uses [D 4] can be combined in the <b>design</b> <b>decisions</b> sub-component. It may also guide which <b>design</b> <b>decisions</b> (for example, treatment) are appropriate.|$|R
40|$|Our work aims to {{rationalize}} Enterprise Architectures (EA) {{by providing the}} reasoning behind the designs, in terms of selection criteria, design alternatives and more. Its major contribution is a formal metamodel that captures the reasoning and the inter-relationships of <b>design</b> <b>decisions.</b> This paper extends our approach {{in order to provide}} an explicit bridging between the Problem space that is defined by the different requirements and the Solution space that is described by specific <b>design</b> <b>decisions.</b> In doing so, EA Anamnesis also supports traceability from specific <b>design</b> <b>decisions</b> to the given requirements...|$|R
40|$|Given {{the diverse}} multi-agent system (MAS) {{implementations}} developed for specific domains, {{there has been}} a lack of a comprehensive method for analyzing and evaluating the various multi-agent systems. With a formal method to investigate agent architectures, MAS designers can answer 1) how performance criteria affect <b>design</b> <b>decisions,</b> 2) how <b>design</b> <b>decisions</b> affect MAS behavior, and 3) which combinations of <b>design</b> <b>decisions</b> are best suited for the system. The first step in answering these questions is to decompose an agent into its core competencies (CC), such as agent organizatio...|$|R
2500|$|While the x86 {{architecture}} supports {{four different}} privilege levels (numbered 0 to 3), {{only the two}} extreme privilege levels are used. Usermode programs are run with CPL 3, and the kernel runs with CPL 0. These two levels are {{often referred to as}} [...] "ring 3" [...] and [...] "ring 0", respectively. Such a <b>design</b> <b>decision</b> had been done to achieve code portability to RISC platforms that only support two privilege levels, though this breaks compatibility with OS/2 applications that contain I/O privilege segments that attempt to directly access hardware.|$|E
2500|$|... iOS 11 {{received}} mostly positive reviews. Critics significantly {{praised the}} application dock and new multitasking interface on the iPad, with some {{calling it a}} revolution for the iPad user experience. Further praise was directed at the redesigned Control Center offering customizable toggles, though it was criticized for lack of third-party app support, lack of Wi-Fi network selection ability and for difficult usage on small screen sizes. The introduction of augmented reality development tools {{was seen as a}} potentially major debut, though critics noted the full potential would depend on third-party apps and how quickly developers adopt the new technology. The operating system was also praised for the App Store redesign, for updating Siri's voice, and for introducing the screen-recording utility and the Files app for file management. Shortly after release, it was discovered that disabling Wi-Fi and Bluetooth connections through the Control Center does not disable the respective chips in the device in order to remain functional for background connectivity, a <b>design</b> <b>decision</b> sparking criticism for [...] "misleading" [...] users and reducing security due to potential vulnerabilities in inactive open connections.|$|E
50|$|The <b>design</b> <b>decision</b> {{to reduce}} the number of image pixels from 144 to 100 to lower cost {{resulted}} in Optacon II not being successful.|$|E
40|$|When {{creating}} new application programming interfaces (APIs), designers must make many decisions. These decisions affect {{the quality of}} the resulting APIs in terms of performance (such as speed and memory usage), power (expressiveness, extensibility and evolvability) and usability (learnability, productivity and error prevention). Experienced API designers have written recommendations on how to design APIs, offering their opinions on various API <b>design</b> <b>decisions.</b> Additionally, empirical research has begun to measure the usability tradeoffs of specific <b>design</b> <b>decisions.</b> While previous work has offered specific suggestions, {{there has not been a}} clear description of the design space of all possible API <b>design</b> <b>decisions,</b> or the quality attributes that these decisions affect. This paper puts existing API design recommendations into context by mapping out the space of API <b>design</b> <b>decisions</b> and API quality attributes. 1...|$|R
40|$|Architectural design {{practice}} is a collective work of {{different levels of}} expertise. Collaborative design relies on seamless meshing of specialists with different levels of expertise, skills and views. Research oncollaborative design suggests various methodologies for supporting synchronous or asynchronous communicative practices of designers in reviewing and analyzing <b>design</b> <b>decisions</b> {{at different stages of}} thedesign process. However, they do not address the provision of an action platform that would enable collaborative group decision making in architectural design. There are four requirements for this platform: 1) sharing of <b>design</b> <b>decisions</b> among designers, 2) sharing of design rationale among designers, 3) detecting conflicts among <b>design</b> <b>decisions,</b> and 4) sharing of designers responses to <b>design</b> <b>decisions.</b> This paper presents a conceptual model of an asynchronous collaborative design environment that implements methodologies for addressing these requirements...|$|R
50|$|In {{software}} engineering and software architecture <b>design,</b> architectural <b>decisions</b> (ADs) are <b>design</b> <b>decisions</b> that address architecturally significant requirements; they {{are perceived as}} hard to make and/or costly to change.|$|R
