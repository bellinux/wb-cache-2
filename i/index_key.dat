108|998|Public
5000|$|... #Caption: Index map of Atlantic County (click to see <b>index</b> <b>key)</b> ...|$|E
5000|$|... #Caption: Index map of Cape May County Municipalities (click to see <b>index</b> <b>key)</b> ...|$|E
5000|$|... #Caption: Index map of Ocean County {{municipalities}} (see <b>index</b> <b>key</b> {{in table}} below) ...|$|E
40|$|We use {{region growing}} {{technique}} to segment the images. Based on the segmented region, we then select {{the size of}} the region to construct <b>indexing</b> <b>keys.</b> By using region growing technique on DCT image we reduce the number of region which is on the segmented regions only. Based on these regions, we then construct the <b>indexing</b> <b>keys</b> to match the images. Our technique will reduce the process time of constructing <b>indexing</b> <b>keys.</b> The <b>indexing</b> <b>keys</b> will then be constructed by calculating the regions distance. Our proposed of recursive region growing is not a new technique but its application on DCT images to build <b>indexing</b> <b>keys</b> is quite new and has not been presented by many other authors. © 2007 Taylor & Francis Group...|$|R
40|$|In this letter, {{we propose}} a data hiding {{approach}} to embed the <b>indexing</b> <b>keys</b> inside the JPEG compressed images for their retrieval, inspired from {{the spirit of}} digital watermarking. At the stage of database population, the existing approach is to compress all images by standard JPEG {{in order to save}} their storage space, but ignored the compression of their <b>indexing</b> <b>keys</b> under the notion that the size of each <b>indexing</b> <b>key</b> is negligible. When a large image database is established, however, this part of storage space becomes non-trivial. By hiding the <b>indexing</b> <b>keys</b> inside the JPEG compressed codes, significant advantages are gained that the <b>indexing</b> <b>keys</b> can be compressed naturally by JPEG without any additional cost. Our experiments on hiding an <b>indexing</b> <b>key</b> of 256 bytes illustrate that: (a) no noticeable distortion is introduced in comparison with non-watermarked images; and (b) their storage space is reduced into the region of 7 %~ 27 % of their original size...|$|R
40|$|Given {{an image}} with N blocks of 8 x 8 pixels, we {{construct}} an <b>indexing</b> <b>key</b> by overlapping the N blocks into one combinational block and each block acting as one single plane inside the combinational block. Specific construction of each element inside the <b>indexing</b> <b>key</b> {{can have a}} range of alternatives based on such a common platform. These include: (i) average DCT value (ii) energy distributed in DCT domain to construct the <b>indexing</b> <b>key,</b> and (iii) DCT coefficients that can be polarized via exploiting their directional properties, and thus can be processed to construct an energy magnitude to highlight the texture of the input image. In this way, the dimension of the <b>indexing</b> <b>key</b> can be significantly reduced. In this paper we represent DCT descriptors as tools of generating <b>indexing</b> <b>key</b> in compress domain...|$|R
50|$|A BRIN is {{applicable}} to an index {{on a table}} that is large and where the <b>index</b> <b>key</b> value is easily sorted and evaluated with a MinMax function.|$|E
5000|$|Finally, {{with the}} {{combination}} of the partition number (time information) and the linear order (location information), an object is indexed in Bx-tree with a one-dimensional <b>index</b> <b>key</b> Bxvalue: ...|$|E
50|$|A Central <b>Index</b> <b>Key</b> or CIK {{number is}} a number given to an {{individual}} or company by the United States Securities and Exchange Commission. The number is used to identify the filings of a company, person, or entity in several online databases, including EDGAR.|$|E
5000|$|A central directory—i.e., {{a secure}} {{location}} {{in which to}} store and <b>index</b> <b>keys</b> ...|$|R
5000|$|<b>Index</b> <b>keys</b> {{are stored}} in {{normalized}} form which can be, in many cases, denormalized to the original column value. Normalization is not always reversible. For example, Text and Long Text column types cannot be denormalized [...] In addition, <b>index</b> <b>keys</b> may be truncated when column data is very long. In cases where columns cannot be retrieved directly from secondary indexes, the record can always be accessed to retrieve the necessary data.|$|R
5000|$|Specialized {{versions}} of collections for thick indexes (indexes with many duplicates) and bit <b>indexes</b> (<b>keys</b> with a restricted {{number of possible}} values) ...|$|R
50|$|Given a new object, its <b>index</b> <b>key</b> is {{computed}} {{and then}} the object is inserted into the Bx-tree as in the B+ tree. An update consists of a deletion followed by an insertion. An auxiliary structure is employed to keep the latest key of each index so that an object can be deleted by searching for the key. The indexing key is computed before affecting the tree. In this way, the Bx-tree directly inherits the good properties of the B+ tree, and achieves efficient update performance.|$|E
50|$|Tables {{have one}} or more indexes. There {{must be at least}} one {{clustered}} index for record data. When no clustered index is defined by the application, an artificial index is used which orders and clusters records by the chronological order of record insertion. Indexes are defined to persist interesting orders of data, and allow both sequential access to records in index order, and direct access to records by index column values. Clustered indexes in ESE must also be primary, meaning that the <b>index</b> <b>key</b> must be unique.|$|E
50|$|Indexes {{can also}} be defined to be sparse. Sparse indexes do not {{have at least one}} entry for each record in the table. There are a number of options in {{defining}} a sparse index. Options exist to exclude records from indexes when an entire <b>index</b> <b>key</b> is NULL, when any key segment is NULL or when just the first key segment is NULL. Indexes can also have conditional columns. These columns never appear within an index but can cause a record not to be indexed when the conditional column is either NULL or non-NULL.|$|E
500|$|Some SQL {{products}} do not <b>index</b> <b>keys</b> containing NULLs. For instance, PostgreSQL [...] versions {{prior to}} 8.3 did not, with the documentation for a B-tree index stating that ...|$|R
50|$|GIS uses spatio-temporal (space-time) {{location}} as the <b>key</b> <b>index</b> {{variable for}} all other information. Just as a relational database containing text or numbers can relate many different tables using common <b>key</b> <b>index</b> variables, GIS can relate otherwise unrelated information by using location as the <b>key</b> <b>index</b> variable. The <b>key</b> is the location and/or extent in space-time.|$|R
50|$|Also like CP-V, {{the design}} was an {{integrated}} file management system. Files were equally and compatibly available to programs executing in any mode. The files could be sorted in <b>indexed,</b> <b>keyed,</b> relative, or consecutive order.|$|R
50|$|An {{index is}} a persisted {{ordering}} of records in a table. Indexes {{are used for}} both sequential access to rows in the order defined, and for direct record navigation based on indexed column values. The order defined by an index is {{described in terms of}} an array of columns, in precedence order. This array of columns is also called the <b>index</b> <b>key.</b> Each column is called an index segment. Each index segment may be either ascending or descending, in terms of its ordering contribution. Any number of indexes may be defined for a table. ESE provides a rich set of indexing features.|$|E
50|$|Btrieve {{allows for}} {{duplicate}} key values in an index. Btrieve handles duplicate keys using either a linked duplicate method, or {{by using a}} repeating duplicate method (this terminology started being used when version 6.0 was released). The linked duplicate method used a pair of record pointers in the index page itself {{to point to the}} head and tail of a doubly linked list of duplicate keys. This meant that the order of the duplicate keys in the list was in the order they were entered. The duplicate key method did not use a linked list, but rather made all the keys unique by creating a new <b>index</b> <b>key</b> and appending the address of the record pointer {{to the end of the}} key. This means that the key is retrieved via its position order.|$|E
50|$|Structured {{data are}} {{available}} in a plethora of formats. Lifting the data to a common data format is thus the first step. But even if all data is available in a common format, in practice sources differ in how they state what {{is essentially the same}} fact. The differences exist both on the level of individual objects and the schema level. As an example for a mismatch on the object level, consider the following: the SEC uses a so-called Central <b>Index</b> <b>Key</b> (CIK) to identify people (CEOs, CFOs), companies, and financial instruments while other sources, such as DBpedia (a structured data version of Wikipedia), use URIs to identify entities. In addition, each source typically uses its own schema and idiosyncrasies for stating what is essentially the same fact. Thus, Methods have to be in place for reconciling different representations of objects and schemata.|$|E
3000|$|TrapGen([...] w, ik [...]). This {{algorithm}} takes {{a keyword}} w and <b>index</b> generation <b>key</b> ik. It encrypts the keyword w with <b>index</b> generation <b>key</b> ik and returns the encryption value, {{which is the}} trapdoor T [...]...|$|R
50|$|A reverse <b>key</b> <b>index</b> {{reverses the}} <b>key</b> value before {{entering}} {{it in the}} index. E.g., the value 24538 becomes 83542 in the <b>index.</b> Reversing the <b>key</b> value is particularly useful for indexing data such as sequence numbers, where new key values monotonically increase.|$|R
3000|$|... combine <b>key</b> <b>indices</b> with {{auxiliary}} indices (direction {{of change}} as <b>key</b> <b>indices,</b> {{rate of change}} as auxiliary indices); and [...]...|$|R
50|$|If line {{numbers are}} {{not present in}} the {{original}} file, the editor supplies a pseudo-line number for use in editing each line. Because of the ISAM file format which supports an 8-character <b>index</b> <b>key,</b> line numbers consist of a floating-point number {{in the range of}} 0.0000 to 9999.9999. The usual line number supplied by EDT starts at 1.000 and is incremented by 1 as each new line was added. Lines can be inserted between other lines by using a fractional number as a command prefix. For example, line 1 of a file would be 1.0000, line 2 would be 2.0000, and to insert a line between 1 and 2, one could type @1.5: followed by the text of the line; the colon would be discarded and the line would be inserted at 1.5000, between 1 and 2. A renumber command is available to renumber {{all or part of the}} file.|$|E
50|$|One simple {{version of}} the LSM tree is a {{two-level}} LSM tree.As described by Patrick O'Neil, a two-level LSM tree comprises two tree-like structures, called C0 and C1. C0 is smaller and entirely resident in memory, whereas C1 is resident on disk. New records are inserted into the memory-resident C0 component. If the insertion causes the C0 component to exceed a certain size threshold, a contiguous segment of entries is removed from C0 and merged into C1 on disk. The performance characteristics of LSM trees stem {{from the fact that}} each component is tuned to the characteristics of its underlying storage medium, and that data is efficiently migrated across media in rolling batches, using an algorithm reminiscent of merge sort.Most LSM trees used in practice employ multiple levels. Level 0 is kept in main memory, and might be represented using a tree. The on-disk data is organized into sorted runs of data. Each run contains data sorted by the <b>index</b> <b>key.</b> A run can be represented on disk as a single file, or alternatively as a collection of files with non-overlapping key ranges. To perform a query on a particular key to get its associated value, one must search in the Level 0 tree, as well as each run.|$|E
40|$|In this paper, a quick table look-up {{optimization}} algorithm {{is presented to}} solve the problems of long table look-up time for CAVLC decoding in H. 264 /AVC. The achievement of the new algorithm rests that we make full use of the hash table query and index technology to improve the table look-up speed for CAVLC decoding. The basic idea of the new algorithm is that we take the number of zero in code prefix calculated from input bit-stream as <b>index</b> <b>key</b> of the first level, the value of codeword suffix as <b>index</b> <b>key</b> of the second level, then through <b>index</b> <b>key</b> of the one and second <b>index</b> <b>key</b> above, we can quickly get the decoded codeword located in the third level in a hash table built, which can reduce a lot of table look-up time for CAVLC decoding in H. 264 /AVC. The simulation results show that our proposed schemes based on hash-index method can reduce about 40 % table look up time for CAVLC decoding compared with TLSS method, without degrading video quality...|$|E
30|$|For convenience, we {{will call}} {{a person who}} authors or retransmits an MBP a sender. For each MBP, we will include in one string its sender’s {{location}} and gender, the posting time, and the OSN this MBP is transmitting within. This string is used as the <b>indexing</b> <b>key</b> of the MBP.|$|R
40|$|Abstract. A new {{algorithm}} for compressed image retrieval {{is proposed}} {{in this paper}} based on DCT block edge patterns. This algorithm directly extract three edge patterns from compressed image data to construct an edge pattern histo-gram as an <b>indexing</b> <b>key</b> to retrieve images based on their content features. Three feature-based <b>indexing</b> <b>keys</b> are described, which include: (i) the first two features are represented by 3 -D and 4 -D histograms respectively; and (ii) the third feature is constructed by following the spirit of run-length coding, which is performed on consecutive horizontal and vertical edges. To test and evaluate the proposed algorithms, we carried out two-stage experiments. The results show that our proposed methods are robust to color changes and varied noise. In comparison with existing representative techniques, the proposed algorithms achieves superior performances in terms of retrieval precision and processing speed. ...|$|R
50|$|Sub <b>key</b> <b>index</b> {{additions}} are cyclic {{so that if}} i+j {{is greater}} than 8one has to subtract 8 from the result to get the actual sub <b>key</b> <b>index.</b>|$|R
40|$|Index data {{structures}} {{are used in}} databases to get scalable access to rows in large tables for search conditions over indexed attributes. For each value of an indexed attribute, called the <b>index</b> <b>key,</b> the index associates a set of pointers, called the index list, to the rows where {{the value of the}} indexed attribute matches the key. If an <b>index</b> <b>key</b> over a very large collection has many duplicated values the index list can also become large. To make the indexes smaller and save space in main memory these index lists can be compressed. This thesis explores the benefits of using the state-of-the-art compression algorithm PForDelta to represent main-memory index lists compactly. PFordelta is used with two different implementations based on sequences of compressed arrays. The PForDelta implementations are compared with a naive linked list and a linked array implementation of index lists...|$|E
40|$|ISAM {{refers to}} Indexed Sequential Access Mode. Under this 13; records can be created/accussed modified, based on any {{particular}} data field called <b>index</b> <b>key.</b> This facility {{is not available}} as a built-in procedure in C language. 13; 13; This highly useful feature is implemented in C as an enhancement keeping in mind the users who need this facility...|$|E
40|$|Panel title: Forest visitor guide, {{national}} forests in Florida. Includes recreation <b>index,</b> <b>key</b> maps, and ill. On verso: text and ill. (Funding) Funded {{in part by}} the University of Florida, the Florida Heritage Project of the State University Libraries of Florida, the Institute for Museum and Library Services, and the U. S. Department of Education's TICFIA granting program...|$|E
30|$|In addition, each <b>key</b> <b>index</b> {{appended}} {{to the end}} of each native packet requires log 2 |l| bits. Therefore, the bit-length of l <b>key</b> <b>indexes</b> is l∗(log 2 |l|) bits. However, {{similar to}} [24], {{in order to reduce the}} length of the coded packets in our scheme, only one <b>key</b> <b>index</b> can be appended {{to the end of}} each native packet.|$|R
40|$|In this paper, {{we propose}} {{a model for}} the fast {{retrieval}} image data using multiple features based on multiresolution processing. We demonstrate our performance results by searching an image database of approximately 30, 000 24 -bit color photographic images. We use identical structures to build the <b>index</b> <b>keys</b> from the two features using histogram generation and wavelet transform. The experiments show tha...|$|R
40|$|The paper {{proposes a}} general {{approach}} {{of interaction between}} players or attributes. It generalizes the notion of interaction defined for players modeled by games, by considering functions defined on distributive lattices. A general definition of the interaction transform is provided, {{as well as the}} construction of operators establishing transforms between games, their Möbius transforms and their interaction <b>indices.</b> <b>Key</b> words: lattice function, Möbius transform, interaction transform, group actio...|$|R
