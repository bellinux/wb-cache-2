0|10000|Public
5000|$|Generic Power Level Server & Generic Power Level Setup Server, {{including}} <b>a</b> <b>Generic</b> Power Actual state, <b>a</b> <b>Generic</b> Power Last state, <b>a</b> <b>Generic</b> Power Default {{state and}} <b>a</b> <b>Generic</b> Power Range state ...|$|R
50|$|Note: C, V, and VV {{are used}} {{in some of the}} tables below to {{indicate}} <b>a</b> <b>generic</b> consonant, <b>a</b> <b>generic</b> short vowel, and <b>a</b> <b>generic</b> long vowel, respectively.|$|R
60|$|There <b>ensued</b> <b>a</b> brief pause, {{during which}} Mr. Caryll fell again into his abstraction.|$|R
40|$|This paper {{introduces}} a task model for redesign of compositional knowledge-based systems based on <b>a</b> <b>generic</b> task model of design. <b>A</b> <b>generic</b> task model of design provides an abstract {{description of a}} design task and <b>a</b> <b>generic</b> structure which can be refined for design tasks in specific domains of application. <b>A</b> <b>generic</b> task model of design, shown to incorporate redesign, is presented and refined to a task model for redesign of compositional knowledge-based systems. The applicability of this task model will be illustrated for the redesign of a diagnostic knowledge-based system...|$|R
50|$|<b>A</b> <b>generic</b> IRAC on <b>a</b> {{law school}} exam {{would consist of}} an answer to a question. The {{following}} example demonstrates <b>a</b> <b>generic</b> IRAC as <b>an</b> answer to a question.|$|R
60|$|Then <b>ensued</b> <b>a</b> chase {{which was}} quickly ended, {{owing to the}} {{precaution}} taken by the Britishers themselves.|$|R
60|$|There <b>ensued</b> <b>a</b> long pause. In {{the dying}} fire both were busy {{visioning}} the farm to be.|$|R
50|$|A further success {{guarantor}} was {{the music}} of Carsten Bohn. Bohn {{felt that he was}} not sufficiently paid for his compositions and <b>a</b> legal dispute <b>ensued.</b> <b>As</b> a consequence, the Europa label has been unable to use his compositions since the mid-1980s.|$|R
5000|$|Otherwise, do not {{capitalize}} <b>a</b> <b>generic</b> {{term that}} follows <b>a</b> capitalized <b>generic</b> term (Yangtze River valley) ...|$|R
5|$|Clindamycin is {{available}} as <b>a</b> <b>generic</b> drug, for both systemic (oral and intravenous) and topical use (The {{exception is the}} vaginal suppository, which is not available as <b>a</b> <b>generic</b> in the USA).|$|R
50|$|Novopharm (later renamed Teva Canada), <b>a</b> <b>generic</b> drug {{manufacture}}r, {{filed an}} Abbreviated New Drug Submission with Health Canada in December 2006 {{to allow for}} the manufacture of <b>a</b> <b>generic</b> version of sildenafil.|$|R
5000|$|Generic: <b>a</b> <b>generic</b> word {{or phrase}} that is used as the anchor. [...] "Click here" [...] is <b>a</b> <b>generic</b> anchor. Other {{variations}} may include [...] "go here", [...] "visit this website", etc.|$|R
2500|$|The {{existence}} of <b>a</b> <b>generic</b> filter [...] {{follows from the}} Rasiowa–Sikorski lemma. In fact, slightly more is true: Given a condition , one can find <b>a</b> <b>generic</b> filter [...] such that [...] Due to the splitting condition, if [...] is a filter, then [...] is dense. If , then [...] because [...] {{is a model of}} [...] For this reason, <b>a</b> <b>generic</b> filter is never in [...]|$|R
50|$|A Verilog module {{may take}} {{one or more}} parameters, to which their actual values are {{assigned}} upon the instantiation of the module. One example is <b>a</b> <b>generic</b> register array where the array width is given via a parameter. Such the array, combined with <b>a</b> <b>generic</b> wire vector, can make <b>a</b> <b>generic</b> buffer or memory module with an arbitrary bit width out of a single module implementation.|$|R
5000|$|The {{existence}} of <b>a</b> <b>generic</b> filter [...] {{follows from the}} Rasiowa-Sikorski Lemma. In fact, slightly more is true: Given a condition , one can find <b>a</b> <b>generic</b> filter [...] such that [...] Due to the splitting condition, if [...] is a filter, then [...] is dense. If , then [...] because [...] {{is a model of}} [...] For this reason, <b>a</b> <b>generic</b> filter is never in [...]|$|R
5000|$|... is <b>a</b> <b>generic</b> {{function}} with one argument {{that uses the}} [...] method combination. This combination determines that all applicable methods for <b>a</b> <b>generic</b> function will be called and {{the results will be}} added.|$|R
60|$|Daughtry nodded, and thereupon <b>ensued</b> <b>a</b> loud-voiced {{discussion}} that drew Michael's earnest attention from one talker to the other.|$|R
50|$|Following Goudarzi’s arrest <b>ensued</b> <b>an</b> {{international}} outcry {{from various}} individuals, states, {{and human rights}} organizations demanding his immediate release.|$|R
40|$|We {{consider}} object detection using <b>a</b> <b>generic</b> {{model for}} natural shapes. A common approach for object recognition involves matching object models directly to images. Another approach involves building intermediate representations via <b>a</b> <b>generic</b> grouping processes. We {{argue that these}} two processes (model-based recognition and grouping) may use similar computational mechanisms. By defining <b>a</b> <b>generic</b> model for shapes we can use model-based techniques to implement a mid-level vision grouping process. ...|$|R
50|$|In {{algebraic}} geometry, <b>a</b> <b>generic</b> point P of an algebraic variety X is, roughly speaking, a {{point at}} which all generic properties are true, <b>a</b> <b>generic</b> property being <b>a</b> property which is true for almost every point.|$|R
40|$|We {{compute the}} primary {{decomposition}} of certain ideals generated by subsets of minors in <b>a</b> <b>generic</b> matrix or in <b>a</b> <b>generic</b> symmetric matrix, or subsets of Pfaffians in <b>a</b> <b>generic</b> skew-symmetric matrix. Specifically, the ideals we consider are generated by minors that {{have at least}} some given number of rows and columns in certain submatrices. Comment: 10 pages. v 2 : minor corrections. v 3 : minor changes, final version to appear in Comm. Al...|$|R
40|$|The paper {{deals with}} a dynamic {{simulation}} of the behaviour of <b>a</b> <b>generic</b> composition train set, which runs <b>a</b> <b>generic</b> layout line according to <b>a</b> <b>generic</b> control sequence. The simulation code utilises rigid body dynamic techniques. In the hereby described Real Time version there is a correspondence between a single train and a single rigid body; anyway the code modular structure {{makes it possible to}} include more detailed sub-models such as truck and/or axle...|$|R
40|$|We {{introduce}} <b>a</b> <b>generic</b> {{framework for}} hybrid logics, i. e. modal logics additionally featuring nominals and satisfaction operators, thus providing the necessary facilities for reasoning about individual {{states in a}} model. This framework, coalgebraic hybrid logic, works {{at the same level}} of generality as coalgebraic modal logic, and in particular subsumes, besides normal hybrid logics such as hybrid K, a wide variety of logics with non-normal modal operators such as probabilistic, graded, or coalitional modalities and non-monotonic conditionals. We prove <b>a</b> <b>generic</b> finite model property and <b>an</b> <b>ensuing</b> weak completeness result, and we give a semantic criterion for decidability in PSPACE. Moreover, we present a fully internalised PSPACE tableau calculus. These generic results are easily instantiated to particular hybrid logics and thus yield a wide range of new results, including e. g. decidability in PSPACE of probabilistic and graded hybrid logics...|$|R
60|$|Again there <b>ensued</b> <b>a</b> brief silence {{while the}} onlookers waited for Lu-don to thus consummate the {{destruction}} of this presumptuous impostor.|$|R
60|$|So Cary went, {{and then}} <b>ensued</b> <b>an</b> argument, {{as to what}} should be done with the prisoners in case of a surrender.|$|R
2500|$|This {{command is}} {{identical}} to <b>a</b> <b>generic</b> memory read, but includes the hint that the read will continue {{to the end of}} the cache line. [...] A target is always permitted to consider this a synonym for <b>a</b> <b>generic</b> memory read.|$|R
50|$|<b>A</b> <b>Generic</b> Device is <b>a</b> Device {{other than}} a Manager, Framer, or Interface. <b>A</b> <b>Generic</b> Device is {{generally}} considered to be the device to provide certain application functionality, for example, conversion from digital audio to analog (DAC) and vice versa (ADC).|$|R
5000|$|This {{command is}} {{identical}} to <b>a</b> <b>generic</b> memory read, but includes the hint that the read will continue {{to the end of}} the cache line. A target is always permitted to consider this a synonym for <b>a</b> <b>generic</b> memory read.|$|R
25|$|We {{have seen}} that forcing can be done using Boolean-valued models, by {{constructing}} a Boolean algebra with ultrafilter from a poset with <b>a</b> <b>generic</b> subset. It is also possible to go back the other way: given a Boolean algebra B, we can form a poset P of all the nonzero elements of B, and <b>a</b> <b>generic</b> ultrafilter on B restricts to <b>a</b> <b>generic</b> set on P. So the techniques of forcing and Boolean-valued models are essentially equivalent.|$|R
40|$|We {{prove the}} {{conjecture}} of Sfetsos, Siampos and Thompson that suitable analytic continuations of the Poisson-Lie T-duals of the bi-Yang-Baxter sigma models {{coincide with the}} recently introduced generalized lambda models. We then generalize this result by showing that the analytic continuation of <b>a</b> <b>generic</b> sigma model of "universal WZW-type" introduced by Tseytlin in 1993 is nothing but the Poisson-Lie T-dual of <b>a</b> <b>generic</b> Poisson-Lie symmetric sigma model introduced by Klimcik and Severa in 1995. Comment: 15 pages, we present an additional result that the analytic continuation of <b>a</b> <b>generic</b> sigma model of "universal WZW-type" introduced by Tseytlin in 1993 is nothing but the Poisson-Lie T-dual of <b>a</b> <b>generic</b> Poisson-Lie symmetric sigma model introduced by Klimcik and Severa in 199...|$|R
60|$|Then <b>ensued</b> <b>a</b> {{long time}} of silence, and Isaac was well content, for each moment of delay lessened the danger, as he believed.|$|R
60|$|There now <b>ensued</b> <b>a</b> {{conversation}} between the three, {{in the course}} of which reference was made to America, and the Warden's visit there.|$|R
50|$|One year later, in 1969 Soisson {{joined the}} Société d’Art Brut, having been founded by Jean Dubuffet. It <b>ensued</b> <b>an</b> {{acquaintance}} between both.|$|R
50|$|Zime is <b>a</b> <b>generic</b> name.|$|R
40|$|The Generic Haskell {{programming}} language allows functions {{to be defined}} by induction {{on the structure of}} data types. This gives rise to generic functions which can be applied to values of any conceivable data type. Compiling <b>a</b> <b>Generic</b> Haskell program amounts to generating a Haskell program in which all generic functions have been translated to ordinary Haskell functions. Since the Haskell language only allows functions to be defined on the values of a data type, translating generic functions defined on the structure of data types is not straightforward. The application of <b>a</b> <b>generic</b> function to <b>a</b> value involves specializing the function to the type of its parameter. For every distinct specialization of <b>a</b> <b>generic</b> function in <b>a</b> <b>Generic</b> Haskell program, <b>an</b> ordinary Haskell function is generated in the compilation process. Hence, the compilation of <b>a</b> <b>generic</b> function will typically yield several ordinary functions. The current method that is used to translate specializations is rather unsophisticated...|$|R
5000|$|In Dutch {{the brand}} Spa has {{historically}} been so pervasive {{that it has become}} <b>a</b> <b>generic</b> term for mineral water. Spa rood (pronounced [...] "spah rote" [...] and meaning [...] "Spa red") is <b>a</b> <b>generic</b> term for sparkling water, as the label for sparkling Spa is red. Likewise, Spa blauw (pronounced [...] "spah blow" [...] (rhyming with [...] "cow"), and meaning [...] "Spa blue") is <b>a</b> <b>generic</b> term for still (non-carbonated) mineral water, as the label for non-carbonated Spa is blue.|$|R
