7|90|Public
50|$|Provides {{enterprise}} messaging {{capabilities that}} combines {{the features of}} Oracle MessageQ with Tuxedo. This extends the existing /Q message queuing facility of Tuxedo by providing things like <b>delivery</b> <b>notification,</b> offline messaging, and store and forward capability.|$|E
5000|$|... # THE PRODUCT INFORMATION FILE# THE PRICE INFORMATION FILE# THE CUSTOMER INFORMATION FILE# THE ORDER FILE# THE PICKING INSTRUCTIONS FILE# THE <b>DELIVERY</b> <b>NOTIFICATION</b> FILE# THE DELIVERY CONFIRMATION FILE# THE INVOICE FILE# THE CREDIT NOTE FILE# THE STATEMENT/REMITTANCE DETAILS FILE# THE UPLIFT INSTRUCTION FILE# THE UPLIFT CONFIRMATION FILE# THE STOCK SNAPSHOT FILE# THE STOCK ADJUSTMENT FILE# THE AVAILABILITY REPORT FILE # THE GENERAL COMMUNICATIONS FILE# THE COMPLEX ORDER FILE# THE ACKNOWLEDGEMENT OF ORDER FILE# THE PRODUCT PLANNING REPORT FILE# THE PAYMENT ORDER FILE# THE DEBIT ADVICE FILE# THE CREDIT ADVICE FILE# THE EXCEPTION CONDITION FILE# THE LOCATION PLANNING REPORT FILE# THE UTILITY BILL FILE ...|$|E
5000|$|The main {{advantage}} to using an LTL carrier {{is that a}} shipment may be transported {{for a fraction of}} the cost of hiring an entire truck and trailer for an exclusive shipment. Also, a number of accessory services are available from LTL carriers, which are not typically offered by FTL carriers. These optional services include liftgate service at pickup or delivery, residential (also known as [...] "non-commercial") service at pickup or delivery, inside <b>delivery,</b> <b>notification</b> prior to delivery, freeze protection, and others. These services are usually billed at a predetermined flat fee or for a weight based surcharge calculated as a rate per pound or per hundredweight.|$|E
5000|$|... SMTP Service Extension for <b>Delivery</b> Status <b>Notifications</b> (obsoletes [...] ) ...|$|R
5000|$|... An Extensible Message Format for <b>Delivery</b> Status <b>Notifications</b> (obsoletes [...] ) ...|$|R
5000|$|... — <b>Delivery</b> status <b>notification,</b> RFC 3461 (See Variable {{envelope}} return path) ...|$|R
40|$|Service look like? In today’s world {{distributed}} message queues {{is used in}} many {{systems and}} play different roles such as content <b>delivery,</b> <b>notification</b> system and message delivery tools Distributed Queue Service • Multiple Client are connected to this Service. • Each client is flooding the queue with the messages. • Each messages is stored on multiple nodes for reliability. • Each message is at least delivered once. • It {{is important for the}} queue services to be able to deliver messages in larger scales, {{at the same time it}} must be highly scalable and provide parallel access...|$|E
40|$|<b>Delivery</b> <b>Notification</b> System is {{designed}} to enhanced the current system that already exist in Kolej Kediaman 1 (KK 1) in Universiti Malaysia Pahang by implementing a notification of incoming parcel/mail to the students’ e-mail {{as well as to}} improve the management of mailing at the KK 1 office. This system is developed by using web based technique where all the programming and data store are using Hypertext Preprocessor (PHP) and MySql respectively. Besides, barcode technology is applied which could enhance the security level of the system. The results of this implementation are the students of KK 1 will get an e-mail notification when their parcel/mail is arrived at the university thus the problem of time wasting for unnecessary checking for the parcel that has not arrived has been solved. Furthermore, the management of the mailing system at the KK 1 can be improved and save times to record the incoming parcels. Lastly, DNS is a system that could improve the existing mailing system in UMP and hope that the system could be enhanced in the future...|$|E
40|$|Abstract: In today’s world {{distributed}} message queues {{is used in}} many {{systems and}} play different roles such as content <b>delivery,</b> <b>notification</b> system and message delivery tools. It {{is important for the}} queue services to be able to deliver messages in larger scales, {{at the same time it}} must be highly scalable and provide parallel access at the same time. An example of a commercial state of the art distributed message queue is Amazon Simple Queuing Service (SQS). SQS is a distributed message delivery fabric that is highly scalable. It can queue unlimited number of short messages (maximum size: 256 KB) and deliver them to multiple users in parallel. In order to be able to provide such high throughput at large scales, SQS confines some of the features that are provided by traditional queues. SQS does not guarantee the order of the messages. Furthermore, it also does not guarantee the exactly once delivery as duplicate messages can be delivered. This paper addresses these limitations through the design and implementation of HDMQ, a hierarchical distributed message queue. HDMQ consist of collection of area message nodes that can be used to store messages up to 512 KB. It utilized round robin local load balancer to save the message and scale across the area region accordingly. HDMQ provides 1 replica for high reliability of messages. HDMQ provides SQS-like APIs in order to provide compatibility with current systems that currently use SQS. We performed a detailed performance evaluation and compared HDMQ to SQS measuring throughput, latency and price per request. We found HDMQ to outperform SQS by up to 10 - 20 % in throughput, 100 % in latency, and 50 % less in costs...|$|E
5000|$|RFC 3464 - An Extensible Message Format for <b>Delivery</b> Status <b>Notifications</b> ...|$|R
5000|$|RFC 6009, Sieve Email Filtering: <b>Delivery</b> Status <b>Notifications</b> and Deliver-By Extensions, ...|$|R
5000|$|RFC 3461 - Simple Mail Transfer Protocol (SMTP) Service Extension for <b>Delivery</b> Status <b>Notifications</b> (DSNs) ...|$|R
40|$|Abstract: In today’s world, {{distributed}} message queues {{are used}} in many systems and play different roles (e. g. content <b>delivery,</b> <b>notification</b> system and message delivery tools). It {{is important for the}} queue services to be able to deliver messages at large scales with a variety of message sizes with high concurrency. An example of a commercial state of the art distributed message queue is Amazon Simple Queuing Service (SQS). SQS is a distributed message delivery fabric that is highly scalable. It can queue unlimited number of short messages (maximum size: 256 KB) and deliver them to multiple users in parallel. In {{order to be able to}} provide such high throughput at large scales, SQS omits some of features that are provided by traditional queues. SQS does not guarantee the order of the messages, nor does it guarantee the exactly once delivery. This paper addresses these limitations through the design and implementation of HDMQ, a hierarchical distributed message queue. HDMQ consist of collection of area message nodes that can be used to store messages up to 512 KB. It utilizes a round robin local load balancer to save the message and scale across the area region accordingly. HDMQ provides replication for high reliability of messages. It also provides SQS-like APIs in order to provide compatibility with current systems that currently use SQS. We performed a detailed performance evaluation and compared HDMQ to the commonly used commercial distributed queues measuring throughput, latency and price per request. We found HDMQ to outperform SQS, Windows Azure Service bus, and IronMQ by up to 2 - 15 x times in throughput, 1. 6 - 39 x times in latency, and all this for 13 %- 80 % less costs. Keywords-distributed message queues, FIFO message delivery, exactly-once delivery I...|$|E
40|$|<b>Delivery</b> status <b>notifications</b> (DSNs) are {{critical}} to the correct operation of an email system. However, the existing Draft Standards (RFC 3461, RFC 3464, RFC 6522) are presently limited to ASCII text in the machine-readable portions of the protocol. This specification adds a new address type for international email addresses so an original recipient address with non-ASCII characters can be correctly preserved even after downgrading. This also provides updated content return media types for <b>delivery</b> status <b>notifications</b> and message disposition notifications to support use of the new address type...|$|R
5000|$|OnePush - a <b>notification</b> <b>delivery</b> system {{developed}} by OneSignal ...|$|R
40|$|The {{research}} {{aim is to}} examine the effect of the addition of corporate taxpayers, the <b>delivery</b> of <b>notification</b> period letter, the publication of tax bill and tax audit to the corporate income tax receipts. This research used probability sampling method and multiple linear regression analysis test {{with the help of the}} program SPSS version 16. 0. The source of data in this research is a secondary data from KPP Pratama Pekanbaru Senapelan period 2010 - 2014. The results of research indicated that the addition of corporate taxpayers, the <b>delivery</b> of <b>notification</b> period letter, the publication of tax bill and tax audit have a simultaneous significant effect to the corporate income tax receipts. Partially, only the <b>delivery</b> of <b>notification</b> period letter of corporate income tax has no significant effect to the corporate income tax receipts. While the addition of corporate taxpayers, the publication of tax bill and tax audit have a significant effect to the corporate income tax receipts...|$|R
50|$|However, two {{notification}} services {{similar to}} those available for physical delivery are available for e-mail. One is called <b>Delivery</b> Status <b>Notifications</b> or DSNs, {{and the other is}} termed Message Disposition Notifications or MDNs.|$|R
40|$|This {{document}} {{describes the}} "envelope-dsn", "redirect-dsn", "envelope-deliverby", and "redirect-deliverby " extensions to the Sieve email filtering language. The "envelope-dsn " and "envelopedeliverby" extensions {{provide access to}} additional envelope {{information provided by the}} <b>delivery</b> status <b>notification</b> (DSN) and Deliver-By SMTP extensions, respectively. The "redirect-dsn " and "redirect-deliverby " extensions extend Sieve’s redirect action to provide control over <b>delivery</b> status <b>notification</b> and Deliver-By parameters, respectively. Status of This Memo This is an Internet Standards Track document. This document {{is a product of the}} Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by th...|$|R
40|$|This memo defines an Experimental Protocol for the Internet community. It {{does not}} specify an Internet {{standard}} of any kind. Discussion {{and suggestions for}} improvement are requested. Distribution of this memo is unlimited. <b>Delivery</b> status <b>notifications</b> (DSNs) are critical to the correct operation of an email system. However, the existing Draft Standards (RFC 3461, RFC 3462, RFC 3464) are presently limited to US-ASCII text in the machine-readable portions of the protocol. This specification adds a new address type for international email addresses so an original recipient address with non-US-ASCII characters can be correctly preserved even after downgrading. This also provides updated content return media types for <b>delivery</b> status <b>notifications</b> and message disposition notifications to support use of the ne...|$|R
40|$|Notifications {{may have}} a {{disruptive}} effect on users and {{the vision of a}} smart <b>notification</b> <b>delivery</b> is still an open question. Alternatively to existing user-opaque solutions, we identify the lack of significant end-user personalization features as one of the main issues in the "traditional" notification management. In this paper, we explore a preference-based approach towards smart <b>notification</b> <b>delivery.</b> By considering existing in-the-wild studies that directly involve users, we defined a set of preferences to customize the <b>notification</b> <b>delivery,</b> and we built a mobile application for their set up. We evaluated the understandability of such preferences, and the acceptance of our preference-based approach in a user study with 10 participants. Preliminary results show that the preferences were easily understood, and that users are willing to set them up...|$|R
5000|$|The {{original}} SMTP {{mail service}} provides limited mechanisms for tracking a transmitted message, and none for verifying {{that it has}} been delivered or read. It requires that each mail server must either deliver it onward or return a failure notice (bounce message), but both software bugs and system failures can cause messages to be lost. To remedy this, the IETF introduced <b>Delivery</b> Status <b>Notifications</b> (<b>delivery</b> receipts) and Message Disposition Notifications (return receipts); however, these are not universally deployed in production. (A complete Message Tracking mechanism was also defined, but it never gained traction; see RFCs 3885 through 3888.) ...|$|R
5000|$|Some {{legitimate}} e-mail gets sent {{with empty}} return address {{that is not}} a bounce and therefore will not have the special tokens. For example, the <b>Delivery</b> Status <b>Notification</b> extension defined in [...] requires a null return path when sending email with a [...] "NOTIFY=NEVER" [...] option to a non-conforming server.|$|R
40|$|Previous {{research}} has shown that the strategy chosen by server applications for managing multiple simultaneous connections may {{have a significant impact on}} a server's behavior. This thesis examines commonly used mechanisms for communicating state and event information between the kernel and application and their effect on application structure and behavior. From this examination we find that there is potential for improving application scalability characteristics through the use of an improved event <b>delivery</b> and <b>notification</b> mechanism. We propose a new mechanism for event <b>delivery</b> and <b>notification</b> in Linux that is designed with efficiency and scalability in mind. We proceed to apply this new mechanism to a web-server and present a series of experiments demonstrating that our web-server is capable of nearly doubling the throughput of a similar server based on polling mechanisms when the request rate exceeds what the server can handle...|$|R
50|$|The {{remaining}} bounces with {{an empty}} Return-Path are non-delivery reports (NDRs) or <b>delivery</b> status <b>notifications</b> (DSNs). DSNs can be explicitly solicited with an SMTP Service Extension (ESMTP), however it is not widely used. Explicit requests for delivery failure details is much more commonly implemented with variable envelope return path (VERP), while explicit requests for them are rarely implemented.|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards" (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. 1. Overview There currently is not a standard mechanism for the reporting of mail system errors except for the limited set offered by SMTP and the system specific text descriptions sent in mail messages. There is a pressing need for a rich machine readable status code for use in <b>delivery</b> status <b>notifications</b> [DSN]. This document proposes {{a new set of}} status codes for this purpose. SMTP [SMTP] error codes have historically been used for reporting mail system errors. Because of limitations in the SMTP code design, these are not suitable for use in <b>delivery</b> status <b>notifications.</b> SMTP provides about 12 useful codes for delivery reports. The majority of the co...|$|R
50|$|Finally, Notification Services can {{communicate}} {{with a wide variety}} of Microsoft, third-party, and custom-built event providers and <b>delivery</b> protocols, enabling <b>Notification</b> Services to communicate with existing systems in heterogeneous environments.|$|R
5000|$|... qmail was not {{designed}} to replace Sendmail, and does not behave exactly as Sendmail did in all situations. In some cases, these differences in behavior have become grounds for criticism. For instance, qmail's approach to bounce messages (a format called QSBMF) differs from the standard format of <b>delivery</b> status <b>notifications</b> specified by the IETF in RFC 1894, meanwhile advanced to draft standard as RFC 3464, and recommended in the SMTP specification.|$|R
40|$|Event {{channels}} in the CORBA Common Object Services specification are an abstraction {{designed to provide}} asynchronous event <b>delivery</b> and <b>notification</b> for distributed object-oriented programs. However, the COS specification leaves open a variety of event channel implementation and optimization options. This report examines and evaluates possible options for implementing event channels. To provide additional requirements and drive the discussion it examines {{the manner in which}} event channels might be used to implement an online distributed monitoring and steering system...|$|R
40|$|This memo {{defines a}} {{mechanism}} whereby a SMTP client can request, when transmitting {{a message to}} a SMTP server, that the server deliver the message within a prescribed period of time. A client making such a request also specifies the message handling which is to occur if the message cannot be delivered within the specified time period: either the message is to be returned as undeliverable with no further processing, or a "delayed" <b>delivery</b> status <b>notification</b> (DSN) [6] is to be issued...|$|R
40|$|The {{focus of}} my {{dissertation}} research {{is on the}} examination of notification systems that harness different presentation formats for <b>notification</b> <b>delivery,</b> the preferences that individuals express for these various types of notifications, and how these preferences are affected by contextual information surrounding <b>notification</b> <b>delivery.</b> My research is unique from other work in the literature in two primary ways. First, {{while the majority of}} prior work addressing <b>notification</b> <b>delivery,</b> both in terms of format and timing, has focused on the effects of a notification on an individual’s performance on a given task or set of tasks, my focus is the individual’s perception of notifications, and particularly on that individual’s preferences for different notification formats delivered within different contextual scenarios. An interest in this question is motivated by prior studies that have shown that annoyance with computer-human interactions is a primary reason behind user abandonment of interactive software systems. Second, my preliminary findings suggest that different people prefer different types of notifications in different contexts, which motivates a change of focus in the development of such systems toward customizing notifications not only to the features of an individual’s context but also to the individual him- or herself. An additional element of novelty in my work is that my final study was conducted in a purely naturalistic office environment, in which the notifications evaluated were precisely those notifications being delivered to study participants throughout their workday. The primary contribution of this dissertation is twofold: a detailed analysis of the methodology for the design, data collection, and analysis of a study of notification preferences in a naturalistic setting {{with a great deal of}} inherent complexity; and a set of results, based on the analysis of preference data acquired in various settings, about how an individual’s contextual environment, and the content of a given notification, can affect that individual’s preferences for <b>notification</b> <b>delivery...</b>|$|R
40|$|The use of {{computing}} artefacts for collaboration is problematic since the artefacts often are designed mainly for individual purposes. We identify some sources of intrusion on the collaborative task {{imposed by the}} trends towards more and more computer dense environments and we put forward some general design principles to diminish them. Based on these principles we have designed a non-intrusive system for the <b>delivery</b> of <b>notifications.</b> A prototype {{of the system is}} presented where we explore different design aspects of the output terminals, such as personal vs. public and in focus vs. peripheral...|$|R
2500|$|On February 7, 2017, the USACE sent {{a notice}} {{of intent to}} the United States Congress to grant an {{easement}} under Lake Oahe 24 hours following <b>notification</b> of the <b>delivery</b> of the <b>notification.</b> [...] On February 9, 2017, the Cheyenne River Sioux sued the easement decision, citing an 1851 treaty and interference with the religious practices of the tribe.|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2003). All Rights Reserved. This document defines a set of extended status codes for use within the mail system for delivery status reports, tracking, and improved diagnostics. In combination with other information provided in the <b>Delivery</b> Status <b>Notification</b> (DSN) <b>delivery</b> report, these codes facilitate media and language independent rendering of message delivery status...|$|R
40|$|This {{document}} specifies an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " (STD 1) for the standardization state and status of this protocol. Distribution of this memo is unlimited. This memo defines an extension to the SMTP service [RFC- 821, RFC- 1869] whereby an SMTP server augments its responses with the enhanced mail system status codes defined in RFC 1893. These codes can then be used to provide more informative explanations of error conditions, especially {{in the context of}} the <b>delivery</b> status <b>notifications</b> format defined in RFC 1894. 2...|$|R
40|$|Provides {{supporting}} data for {{report on a}} randomised trial {{of the impact of}} timing and frequency of <b>notification</b> <b>delivery</b> in a smartphone-based stress management intervention. Includes: database to support report of quantitative analyses and verbatim interview transcripts to support report of qualitative analysis. Bona fide researchers, subject to registration may request {{supporting data}} from the University of Southampton repository via [URL]...|$|R
40|$|Abstract — Publish/subscribe (pub/sub) is {{a popular}} {{communication}} paradigm {{in the design of}} large-scale distributed systems. A fundamental challenge in de-ploying pub/sub systems on a data center or a cloud infrastructure is efficient and cost-effective resource allocation that would allow <b>delivery</b> of <b>notifications</b> to all subscribers. In this paper, we provide answers to the following three fundamental questions: Given a pub/sub workload, (1) what is the minimum amount of resources needed to satisfy all the subscribers, (2) what is a cost-effective way to allocate resources for the given workload, and (3) what is the cost of hosting it on a public Infrastructure-as-a-Service (IaaS) provider like Amazon EC 2. To answer these questions, we formulate a proble...|$|R
