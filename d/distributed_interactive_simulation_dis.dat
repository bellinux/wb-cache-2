121|2476|Public
5000|$|... #Subtitle level 2: <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS)</b> {{protocols}} ...|$|E
5000|$|Used in: [...] <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS),</b> Repo-3D, DIV, DOOM ...|$|E
5000|$|Link — Introperability {{tools for}} {{interconnecting}} simulators and simulation components within a <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS)</b> compliant with the High-level architecture.|$|E
40|$|A key {{component}} in <b>Distributed</b> <b>Interactive</b> <b>Simulations</b> (<b>DIS)</b> {{is the number}} of data packets transmitted across the connected networks. To reduce the number of packets transmitted, DIS applications employ client-side predictive contracts. One widespread client-side predictive contract technique is dead reckoning. This paper proposes a hybrid predictive contract technique, which chooses either the deterministic dead reckoning model or a statistically based model. This results in a more accurate representation of the entity's movement and a consequent {{reduction in the number of}} packets that must be communicated to track that movement remotely. The paper describes the hybrid technique and presents results that illustrate the reduction in packet transmissions. This hybrid technique is compared to the standard dead reckoning method...|$|R
40|$|Introduction 1. 1. Problem Statement Complex {{distributed}} applications, including groupware[22], virtual environments (eg., DIVE[10, 28]), <b>distributed</b> games[50], <b>distributed</b> <b>interactive</b> <b>simulations</b> (<b>DIS)</b> [39], real-time multimedia, tele-medicine, {{and scientific}} applications (eg., atmospheric modeling), require {{quality of service}} (QoS) guarantees on the end-to-end transfer of information across a network. These QoS requirements are typically dynamic; they may change from one object invocation to the next[42], they may change at intervals determined by simulation speed[50], by reaction rates of human participants, or by the rates of change in input behavior. For example, to avoid collision, a virtual flight navigation system might require one user piloting a plane to be updated frequently with complete, detailed (loss-free) state information about other planes in the nearby air-space. When two plane entities are sufficiently far apart, however, their state-updates with res...|$|R
40|$|<b>Distributed</b> <b>Interactive</b> Applications (DIAs) such as {{networked}} {{games or}} <b>Distributed</b> <b>Interactive</b> <b>Simulations</b> (<b>DIS)</b> {{depend on the}} underlying network. An important aspect {{is the number of}} data packets transmitted across the connected networks. To reduce the number of packets transmitted, DIAs employ client-side predictive contracts. The most commonly used client side predictive contract technique is pure dead reckoning. In this paper an alternative method {{in the form of a}} novel hybrid multi-strategy technique is proposed. This technique chooses one of several models, either a deterministic dead reckoning model or one of numerous strategy-based models. This new approach is compared to the first order dead reckoning method using two game-type environments. It is shown that the proposed technique results in a significant reduction in the number of entity packets that need to be transmitted to maintain entit-state fidelity across the networked application...|$|R
50|$|<b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS)</b> is an IEEE {{standard}} for conducting real-time platform-level wargaming across multiple host computers {{and is used}} worldwide, especially by military organizations but also by other agencies such as those involved in space exploration and medicine.|$|E
50|$|The {{framework}} {{embraces the}} model-view-controller (MVC) software design pattern by partitioning functional components into packages. This concept is taken {{a step further}} by providing an abstract network interface so custom protocols can be implemented without affecting system models. Examples include the <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS)</b> protocol interface.|$|E
50|$|There was a NATO {{standardisation}} agreement (STANAG 4482, Standardised Information Technology Protocols for <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS),</b> adopted in 1995) on DIS for modelling and simulation interoperability. This was retired {{in favour of}} HLA in 1998 and officially cancelled in 2010 by the NATO Standardization Agency (NSA).|$|E
40|$|This paper {{describes}} the design, implementation, {{and evaluation of}} MiMaze, a distributed multiplayer game on the Internet. The major contribution of this work is to have designed and implemented a completely distributed communication architecture based on IP multicast. MiMaze uses multicast communication system based on RTP/UDP/ IP, and a distributed synchronization mechanisms to guarantee {{the consistency of the}} game, regardless network delay. This paper provides evaluation results on the Mbone 1. Introduction This article {{describes the}} design and the evaluation of a multi-player (distributed) game over the Internet. MiMaze is a distributed (i. e. serverless) game that uses an unreliable communication system (MiMaze transmission control is based on RTP [7] over UDP/IP multicast [11]). Multi-player games are representative of the new generation of interactive multimedia applications, that also includes <b>Distributed</b> <b>Interactive</b> <b>Simulations</b> (<b>DIS),</b> digital battle fields and Air Traffic Con [...] ...|$|R
40|$|Maximum 200 words) 14. SUBJECT TERMS 17. SECURITY CLASSIFICATION OF REPORT 18. SECURITY CLASSIFICATION OF THIS PAGE 19. SECURITY CLASSIFICATION OF ABSTRACT 15. NUMBER OF PAGES 16. PRICE CODE 20. LIMITATION OF ABSTRACT 5. FUNDING NUMBERS i Stone, Steven Walter June 1996 Master's Thesis Unclassified Unclassified UL Unclassified 123 A RAPIDLY RECONFIGURABLE, APPLICATION LAYER, VIRTUAL ENVIRONMENT NETWORK PROTOCOL Naval Postgraduate School Monterey, CA 93943 - 5000 The views {{expressed}} in this thesis {{are those of the}} author and do not reflect the official policy or position of the Department of Defense or the United States Government. Approved for public release; distribution is unlimited. The current <b>Distributed</b> <b>Interactive</b> <b>Simulations</b> (<b>DIS)</b> Protocol has a limited ability to support real-time, simulated engagements of more than 1000 entities because of its excessive use of network resources. It also lacks the extensibility to add new protocol data units to support [...] ...|$|R
40|$|This paper {{discusses}} the design, development, {{and use of}} a performance monitoring tool for <b>Distributed</b> <b>Interactive</b> <b>Simulations</b> (<b>DIS).</b> A typical DIS environment consists of hundreds of simulations distributed on both local and wide area networks. The adoption of the High Level Architecture (HLA) by the U. S. Department of Defense (DoD) creates even larger and more complex simulation environments and since DIS continues to interoperate within HLA, the resource demands continue to cause performance bottlenecks that limit its effectiveness. The monitoring tool described in this paper can provide meaningful performance information used as a guide in making decisions about the configuration {{and control of the}} available hardware and software resources used in DIS. This information {{can also be used to}} support DIS modeling requirements and design. Results are presented from tests comparing alternative implementations of the performance monitor; the goal is to achieve a balance between the amount and types of performance data collected and the intrusiveness of the instrumentation code. Testing, analysis, and use of the monitoring system during DIS exercises has demonstrated the utility of a tool that provides high-level performance information to support persons making inferences about dynamic system and simulation behavior. ...|$|R
50|$|BFTT {{uses the}} current Department of Defense {{standard}} <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS)</b> interface, and is evolving to the newer High Level Architecture (simulation) (HLA). The system connects to other ships, Joint Forces, and Coalition Forces for large scale force level training events via the Navy Continuous Training Environment (NCTE).|$|E
50|$|At {{about the}} same time, the SIMNET {{protocol}} evolved and matured into the <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS)</b> Standard. DIS allowed an increased number of simulation types to interact in distributed events, but was primarily focused on the platform-level training community. DIS provided an open network protocol standard for linking real-time platform-level wargaming simulations.|$|E
50|$|VT MÄK {{also holds}} several United States {{software}} patents including: A computer-implemented method {{for use in}} a <b>distributed</b> <b>interactive</b> <b>simulation</b> (<b>DIS)</b> type network protocol for simulating sustained contact of first and second computer-implemented objects on each other in a virtual environment, as well as two patents for high speed eye tracking device and method.|$|E
40|$|The current <b>Distributed</b> <b>Interactive</b> <b>Simulations</b> (<b>DIS)</b> Protocol has {{a limited}} ability to support real time, {{simulated}} engagements {{of more than}} 1000 entities because of its excessive use of network resources. It also lacks the extensibility to add new protocol data units to support new simulation requirements. To solve these problems {{it is necessary to}} design an implement a rapidly reconfigurable network protocol that can be easily changed and distributed to all entities in a large scale simulation. This protocol must be highly flexible and allow for the optimization of data content during execution. The approach used was to design and build a rapidly reconfigurable network protocol and the tools necessary to use it. This was accomplished in four phases. First, a protocol using the concepts of Self-defined Messages with Multiple Presentations was developed. Second, a formal grammar to describe the protocol was designed. Third, an existing protocol development tool, the DIS protocol Support Utility, was modified to use the new protocol and grammar. Fourth, the protocol was tested to determine its effect on network resource utilization. As a result of this effort, a network protocol for distributed simulations that can be optimized at run-time and easily modified has been developed. Testing shows that the protocol can reduce the network bandwidth necessary for a large-scale distributed simulation by up to 70 %. NAU. S. Army (USA) autho...|$|R
40|$|AbstractAt present, {{it exists}} that the {{information}} level of coal mine production and management is low. On the basis of modeling the typical system for mine production, it simulates typical production accidents and establishes databases of mine safety production. Based on the High Level Architecture (abbr. HLA) and <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (abbr. <b>DIS),</b> {{it is able to}} design a set of simulation system for mine safety production, with the function of visualization network and integration. The system is able to model actual production process, educate and train the miners. It can also provide disaster early-warning for mine production. This paper analyses crucial technical problems and technology...|$|R
40|$|Simulators {{have been}} used as a tool for {{training}} for many decades, and they are still gaining importance. Originally built for stand-alone use, the emergence of (global) network communication allowed these simulators to be connected with other simulators. This introduced the possibility of practicing large, complex exercises with multiple participants. Networked simulation started with SIMNET (Miller & Thorpe, 1995), the first interconnection test bed, and the <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> protocol (<b>DIS),</b> the first generally accepted protocol for data communication between simulators. To minimize the effects of network communication (limited bandwidth, delay), the DIS protocol allows the use of dead reckoning. Using dead reckoning, network load and the effects of delay can be reduced...|$|R
50|$|The STTC traces its lineage to 1983 {{when the}} Defense Advanced Projects Research Agency (DARPA) started {{work on a}} {{technology}} to network {{a large number of}} manned simulators, emulators and semi-automated force simulations to form a <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS)</b> of a battlefield. DARPA ran the project from 1983-1989 and convinced the Army to use DIS technology.|$|E
5000|$|Distributed models run on {{a network}} of {{interconnected}} computers, possibly through the Internet. Simulations dispersed across multiple host computers like this are {{often referred to as}} [...] "distributed simulations". There are several standards for distributed simulation, including Aggregate Level Simulation Protocol (ALSP), <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS),</b> the High Level Architecture (simulation) (HLA) and the Test and Training Enabling Architecture (TENA).|$|E
50|$|In {{regards to}} the Distributed Modeling and Simulation (DM&S) {{industry}} the most often used alternative to the HLA is clearly <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS),</b> IEEE 1278.1-2012, a recently updated simulation protocol. Most HLA RTI vendors also feature DIS in their products. As for middleware applications that most closely match HLA features, such asthe publish and subscribe feature (P&S) see Data Distribution Service (DDS) which shares {{many of the same}} characteristics but with the distinct advantage of having an open on-the-wire protocol for system interoperability.|$|E
50|$|The Army Science Board {{studied the}} {{technology}} in 1991 and found a central management structure was necessary to ensure an integrated system. The Board’s recommendation resulted in the U.S. Army Training and Doctrine Command (TRADOC) and United States Army Materiel Command (AMC) sharing management responsibility for the new system. TRADOC designated its National Simulation Center (NSC) as its functional manager for controlling the requirements process. AMC created a new major subordinate command in 1992, the U.S. Army Simulation, Training and Instrumentation Command (STRICOM) (its current name is PEO STRI), headquartered in Orlando, FL, {{to serve as the}} technical manager for system execution. STRICOM consisted of two existing organizations, Project Manager Training Devices (PM TRADE) and Project Manager Instrumentation, Targets and Threat Simulators (PM ITTS), and two new organizations, Project Manager for Combined Arms Tactical Training (PM CATT) and Project Manager for <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (PM <b>DIS).</b>|$|R
40|$|One of the "lessons Learned" {{from the}} Environmental Effects for <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (E 2 <b>DIS)</b> {{program is that}} {{instrumentation}} oriented terrain databases are {{required in order to}} integrate the operations of space, airborne, and ground based sensor simulators with meteorologic data and environmental effects models. A prototype global terrain database containing material properties descriptors has been designed to illuminate the requirements of interoperability of sensor simulators and provide directions for future standards and products addressing these requirements. This database specifically addresses the needs of rapid computer data retrieval by providing a hierarchical global reference scheme capable of addressing elements down to 1 centimeter resolution. The discussion presents a case for a small but standardized scalable material properties descriptors. A sample database has been integrated from a subset of available data sets to cover the southern California region [...] ...|$|R
40|$|Simulations are {{powerful}} computational tools to comprehend complex systems {{in a large}} number of scientific domains. Even with the advance of computational power, the capability to model the real-world in full detail is still far in the future. But at every step forward in computational power, more can be done with discrete simulations to predict and explain physical systems in domains where continuous mathematical representations are insufficient or unknown. The field of distributed simulations was born to leverage simulation capabilities past what a singular computer can perform. Furthermore, distributed simulation frameworks enables a collaborative development environment, where multiple developers can work in independent parts of the same problem – similarly to large software problems being solved by the collaborative effort of software developers working on semi-independent modules. Unfortunately, like in most distributed system applications, distributed simulations are very complex to design and develop. While there are supporting frameworks, like the High Level Architecture (HLA), there is room for improvement in reducing the technical knowledge required to develop for such frameworks. The goal of this dissertation is to expand the expressiveness of distributed simulation frameworks while reducing the technical complexity to develop integrated distributed simulations independently. This dissertation presents a novel architecture for <b>distributed</b> <b>interactive</b> <b>simulations</b> (<b>DIS)</b> called Collaborative Aspect-oriented DIS (CADIS). The architecture is divided in two frameworks called PCC and spacetime. PCC (Predicate Collection Classes) is an object-oriented programming model for representing collections of objects. These collections of objects are called relational data types – types that are reclassified based on runtime values. Relational types allows the expressiveness of queries that are common to relational databases to be defined as abstract data types. Spacetime adds automatic synchronization and recalculation of PCC data types in discrete time distributed simulations. Through a simple push, update, and pull process, simulations operate with newly reclassified objects, and any modifications are automatically pushed to the server. CADIS is evaluated in four different ways. First, a benchmark measures the performance impact of each individual relational operation, demonstrating the many performance improvements in the implementation required to reduce the data exchange between simulation and servers to an acceptable level. Second, a feasibility evaluation using a realistic urban simulation scenario is presented, demonstrating effectiveness in a real-world problem. Third, a case study using CADIS in a graduate course is presented, demonstrating how CADIS can be taught to developers with little simulation background in a small period of time. Finally, a parallel between HLA and CADIS is presented, by analyzing a converted urban simulation event routing system to HLA. The architecture of CADIS provides two major contributions to the field of distributed simulations: a) it allows the development effort to be partitioned and split among independent groups of developers; b) thanks to relational data types in PCC, simulations can join at runtime with new data models without affecting existing simulations. Furthermore, existing simulations can handle and use new data models that are related to known ones. The larger impact of CADIS is creating a scalable service-oriented development environment, where simulations are providers of data types with specific features, allowing developers to add complexity to data models based off previous implementations...|$|R
50|$|The SMODIM {{maintains}} a dynamic position database through player-to-player network communications. The onboard telemetry radio supports simultaneous distribution to multiple locations. The radio {{acts as a}} message repeater to overcome line of sight (LOS) interruptions. The SMODIM interfaces with <b>distributed</b> <b>interactive</b> <b>simulation</b> (<b>DIS)</b> networks using SMODIM tracking analysis and recording (SMOTAR), an advanced software suite that provides visual display and tracking of SMODIM instrumented players. GPS provides real-time position data as players are dynamically simulated, tracked and recorded over tactical maps and aerial photos for after-action review (AAR).|$|E
50|$|VT MÄK {{develops}} COTS {{software for}} distributed simulation. MÄK works with customers {{to build and}} populate 3D simulated environments where modeling and simulation is needed to train, plan, analyze, experiment, prototype, and demonstrate.VT MÄK uses open standards {{as a base for}} its product line, which is natively compliant with both High Level Architecture (HLA) and <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS)</b> IEEE standards. The company has also drafted and submitted the WebLVC protocol for review to the Simulation Interoperability Standards Organization (SISO), in an effort to bring live, virtual, and constructive simulation to web browsers.|$|E
50|$|The SIMPLE {{standard}} specifies the distributed {{transfer of}} a simulated scenario/synthetic environment using the IEEE <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS)</b> protocols. DIS is a government/industry initiative to define an infrastructure for linking simulations {{of various types}} at multiple locations to create realistic, complex, virtual worlds for the simulation of highly interactive activities. A new Protocol Data Unit (PDU) definition, the DIS PDU {{was added to the}} baseline protocol to support the exchange of DIS PDUs for simulated entities. The content of the SIMPLE DIS PDU packet is related to the DIS PDUs defined in the IEEE 1278.1 standard. As such, most Transmitter and Signal PDU fields require no translation.|$|E
40|$|Internet {{communications}} {{have traditionally}} been based on point-to-point connections. This technique is called unicast and allows one sender and one receiver to communicate. The Internet saw the appearance of multicast protocols in the early 90 's. Multicast enables point-to-multipoint and multipoint-to-multipoint connections and is suitable for applications with several receivers. Multicast packets are transmitted from each sender to the receivers through a certain multicast tree. Multicast routing protocols are responsible for building such trees. There are different types of multicast routing protocols and each builds a specific kind of multicast tree. The main advantages of applying multicast in multiple-receiver applications are a more rational use of network resources and the minimization of processing in hosts. There {{are two types of}} multicast models: Source-Specific Multicast (SSM) and Any-Source Multicast (ASM). The former is suitable for single-source applications like Internet TV and news distribution. The latter supports multiple-source applications like videoconferencing, <b>Distributed</b> <b>Interactive</b> <b>Simulations</b> (<b>DIS),</b> multi-player gaming and interactive distance learning. The Internet multicast research community assumes that both models must co-exist. Protocol Independent Multicast - Sparse Mode (PIM-SM) is the ASM standard basis for intra-domain multicast routing in Wide-Area Networks (WANs). This protocol builds Shared Trees (STs) rooted at certain routers called Rendezvous Points (RPs). These types of trees bring some drawbacks, the most important being traffic concentration, sub-optimal forwarding of multicast packets and slow convergence when an active RP fails. Two proposals arose to alleviate these drawbacks. The first, Bidir-PIM, constructs Bi-directional Shared Trees (BSTs). However, this variant neglects the problem of having a single point of failure. The second assembles Multiple Core Trees (MCTs) and is based on two protocols, PIM-SM and Multicast Source Discovery Protocol (MSDP), used in combination with anycast. MSDP has been adapted from inter-domain multicast to enable PIM-SM to use several RPs per group. On the other side, anycast allows senders and receivers to send data and control packets to the closest RP. If a RP fails, anycast also provides an automatic backup to the next closest RP. However, this proposal is complex and is not suitable for bursty sources and the next generation Internet Protocol (IPv 6). Furthermore, it suffers from high join latencies and poor multicast state scalability with the number of sources. The first purpose of this dissertation is to provide a comparison on the ìqualityî for the different sorts of multicast trees built in the ASM model by multicast routing protocols suitable to run in WANs. This study concludes that MCTs give the best performance in terms of traffic concentration and link cost of multicast trees in sparse groups and end-to-end delay. Furthermore,it is the only type of tree that does not suffer from a single point of failure, called core or RP. The main purpose of this dissertation is the design of an extension to PIM-SM that allows the building of MCTs without MSDP. The extension to the register mechanism in PIM-SM allows the construction of channels encompassing the Access Routers (ARs) and any number RPs. These channels enable sources to directly reach all the RPs, thus avoiding the exchange of data packets between RPs, which generates additional processing in the RPs and the suboptimal routing of multicast packets coming from new sources. Furthermore, these channels may improve the multicast routing state scalability with the number of sources. This approach, called Protocol Independent Multicast - Multiple Core Mode (PIM-MCM), enables PIM having the advantages of anycast RP without using MSDP. In addition, it conforms to the PIM-SM design philosophy and alleviates all the drawbacks of MSDP while minimizing the added complexity...|$|R
40|$|Recently {{there is}} an {{emergence}} of many Internet applications such as multimedia, video conferencing, <b>distributed</b> <b>interactive</b> <b>simulations</b> (<b>DIS),</b> and high-performance scientific computations like Grid computing. These applications require huge amount of bandwidth and a viable communication paradigm to coordinate with multiple sources and destinations. Optical networks are the potential candidates for providing high bandwidth requirement. Existing communication paradigms include broadcast, and multicast. Hence supporting these paradigms over optical networks is necessary. Multicasting over optical networks has been well investigated in the literature. QoS policies implemented in IP does not apply for Wavelength division multiplexed (WDM) or optical burst switched (OBS) networks, as the optical counterpart for store-and-forward model does not exist. Hence {{there is a need}} to provision QoS over optical networks. These QoS requirements can include contention, optical signal quality, reliability and delay. To support these diverse requirements, optical networks must be able to manage the available resources effectively. Destinations participating in the multicast session are fixed (or rather static). Due to the random contention in the network, if at least one or more destination(s) is not reachable, requested multicast session cannot be established. This results in loss of multicast request with high probability of blocking. Incorporating wavelength converters (WCs) at the core nodes can decrease the contention loss, however WCs require optical-electrical-optical (O/E/O) conversion. This increases the delay incurred by optical signal. On the other hand all-optical WCs are expensive and increase the cost of the network if deployed. Goal of this thesis is, to provide hop-to-hop QoS on an existing all-optical network (AON) with no WC and optical regeneration capability. In order to minimize the request vi Abstract vii lost due to contention in AON, we propose a variation of multicasting called Quorumcasting or Manycasting. In Quorumcasting destinations can join (or leave) to (or from) the group depending on whether they are reachable or not. In other words destinations have to be determined rather than knowing them prior, as in the case of multicasting. Quorum pool is minimum number of destinations that are required to be participated in the session for successful accomplishment of the job (k be the size of quorum pool). Providing QoS for manycasting over OBS has not been addressed in the literature. Given the multicast group (with cardinality m > k) and the number of destinations required to be participated, the contribution of this work is based on providing necessary QoS. In this thesis we study the behavior of manycasting over OBS networks. In OBS networks, packets from the upper-layer (such as IP, ATM, STM) are assembled and a burst is created at the edge router. By using O/E/O conversion at the edge nodes, these optical bursts are scheduled to the core node. Control header packet or burst header packet (BHP) is sent to prior to the transmission of burst. The BHP configures the core nodes and the burst is scheduled on the channel after certain offset time. In the first part of the thesis, we explain the different distributed applications with primary focus on Grid over OBS (GoOBS). We study the loss scenario due contention and inadequate signal quality for an unicast case in OBS network. We further extend this to manycasting. We modify the BHP header fields to make the burst aware of not only contention on the next-hop link, but also bit-error rate (BER). By using recursive signal and noise power relations, we calculate the BER (or q-factor) of the link and schedule the burst only if the required BER threshold is met. Thus all the bursts that reach the next-hop node ensure that contention and BER constraint are met. This are called “Impairment-Aware (IA) Scheduling”. Burst loss in the network increases due to BER constraint. Hence we propose algorithms to decrease the burst loss and simultaneously providing the sufficient optical signal quality. We propose three algorithms called IA-shortest path tree (IA-SPT), IA-static over provisioning (IA-SOP), and IA-dynamic membership (IA-DM). In IA-SPT destination set is sorted in the non-decreasing order of the hop-distance from source. First k of them are selected and bursts are scheduled to Abstract viii these destinations along the shortest path. In IA-SOP we select additional k 0 (_ m − k) destinations where k 0 is the over provisioning factor. Over provisioning ensures that burst at least reach k of them, decreasing the contention blocking. However as the burst has to span more destinations, the fan-out of the multicast capable switch will be more and the BER could be high. In IA-DM destinations are dynamically added or removed, depending on contention and BER. Destination is removed and new destination is added based on the two constraints. Our simulation results shows that IA-DM out performs the other two algorithms in terms of request blocking. We show that IP-based many casting has poor performance and hence there is a need for supporting many casting over OBS networks. We verify our simulation results with the proposed analytical method. In the next part, we focus on provisioning QoS in many casting. QoS parameters considered for analysis include, signal quality i. e., optical signal to noise ratio (OSNR), reliability of the link and, propagation delay. In this work we consider application based QoS provisioning. In other words, given the threshold requirements of an application, our aim is to successfully schedule the burst to the quorum pool satisfying the threshold conditions. We use a de-centralized way of the scheduling the burst, using BHP. With the help of local-network state information, the burst is scheduled only if it satisfies multiple set of constraints. Corresponding reception of burst at the node ensures that all the QoS constraints are met and burst is forwarded to the next hop. QoS attributes are either multiplicative or additive. Noise factor of the optical signal and reliability factor are multiplicative constraints, where as propagation delay is additive. We define a path information vector, which provides the QoS information of the burst at every node. Using lattice theory we define an ordering, such that noise factor and propagation delay are minimum and reliability is maximum. Using path algebra we compute the overall QoS attributes. Due to multiple set of constraints, the request blocking could be high. We propose algorithms to minimize request blocking for Multiple Constrained Many cast Problem (MCMP). We propose two algorithms MCM-SPT and MCM-DM. We consider different set of service thresholds, such as real time and data service thresholds. Real time services impose restriction on signal quality and the propagation delay. On the other hand Abstract ix data services require high reliability and signal quality. Our simulation study shows that MCM-SPT performs better than MCM-DM for real-time services and the data services can be provisioned using MCM-DM...|$|R
40|$|Abstract: This paper briefs the architecture, characteristics, key {{technology}} of <b>distributed</b> <b>interactive</b> <b>simulation,</b> {{and the research}} and application of <b>distributed</b> <b>interactive</b> <b>simulation</b> in US armed forces. In combination with the practice of combat simulation of PLA army forces, it has explored the application of <b>distributed</b> <b>interactive</b> <b>simulation</b> technology in army combat simulation, and brought forwards the basic concept of realizing combat simulation of army forces with <b>distributed</b> <b>interactive</b> system...|$|R
50|$|In 2003, the U.S.Army Research Laboratory (ARL) {{released}} documentation {{related to}} their Dynamic Terrain Server (DTServer). DTServer computes structural effects of detonations and collisions and transmits the result to client simulations, making sure that all simulators share a unified terrain database. DTServer also uses a table look-up to compute the effects of blasts and collisions. The DTServer provides terrain updates by issuing <b>distributed</b> <b>interactive</b> <b>simulation</b> (<b>DIS)</b> protocol data units (PDUs). DTServer sends DIS Set Data PDUs of the following types: Breach Subtract, Breach vertices, and Ding messages. DTServer also provides a graphical user interface (GUI) to inspect {{the state of the}} database. DTServer runs on three different databases: the terrain database, the object database, and the munitions database. The DIS interface has been successfully tested in the Soldier Visualization System (SVS), the After Action Review (AAR) system from IST, and the ARL DIS.|$|E
50|$|In early February 98, {{and prior}} to its {{official}} activation (16 Oct 98), the 32d AAMDC deployed to support Combined Task Force-Kuwait during Operation Desert Thunder. The 32nd AAMDC performs critical theater-level air and missile defense planning, integration, coordination and execution functions. The unit coordinates and integrates the operational elements of theater missile defense {{in support of the}} ground maneuver forces. The unit commanded the Echelon Above Corps ADA brigades, which in this case are TF 1-1 ADA and TF 3-43 ADA. After successfully deploying into Kuwait with little notice, the 32d AAMDC assumed command of one Patriot Task Force, conducted RSOI and assumed command of a second patriot task force, wrote the air and missile defense plan for Operation Desert Thunder and executed the TAMD mission in a contingency theater. Further, the 32d AAMDC played the pivotal role in developing procedures for combined U.S. and Kuwaiti theater air and missile defense, interoperability, and training; expanding the TBM alert and warning architecture within CTF-Kuwait; and conducting <b>distributed</b> <b>interactive</b> <b>simulation</b> (<b>DIS)</b> training while performing its mission in a contingency environment.|$|E
40|$|Approved {{for public}} release; {{distribution}} is unlimited. The Computer Science Department at the Naval Postgraduate School in Monterey, California {{has developed a}} low-cost real-time interactive simulation system using the <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> (<b>DIS)</b> Protocol, known as NPSNET, that works on commerciaLieutenant, United States Nav...|$|E
40|$|Next-generation <b>distributed</b> <b>interactive</b> <b>simulations</b> have {{stringent}} {{quality of}} service (QoS) requirements for throughput, latency, and scalability, as well as requirements for a flexible communication infrastructure to reduce software lifecycle costs. The CORBA Events Service provides a flexible model for asynchronous communication among distributed and collocated objects. However, the standard CORBA Events Service specification lacks important features and QoS optimizations required by <b>distributed</b> <b>interactive</b> <b>simulation</b> systems. This paper makes five contributions to the design, implementation and performance measurement of <b>distributed</b> <b>interactive</b> <b>simulation</b> systems. First, it describes how the CORBA Events Service can be implemented to support key QoS features. Second, it illustrates how to extend the CORBA Events Service {{so that it is}} better suited for <b>distributed</b> <b>interactive</b> <b>simulations.</b> Third, it describes how to develop efficient event dispatching and scheduling mechanisms that c [...] ...|$|R
5000|$|IEEE 1278.1-1995 - Standard for <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> - Application {{protocols}} ...|$|R
5000|$|IEEE-1278.2-1995 - Standard for <b>Distributed</b> <b>Interactive</b> <b>Simulation</b> - Communication Services and Profiles ...|$|R
