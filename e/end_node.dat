196|675|Public
500|$|Hitman Go is a turn-based puzzle {{video game}} {{part of the}} Hitman video game series. In the game each level is set on a grid-based board {{composed}} of interconnected nodes and lines. Nodes are positions that the player or enemies can occupy and lines are used for moving between nodes during a turn. Players {{take control of the}} series' protagonist, Agent 47. Using touchscreen controls, during a turn the player swipes along a line in the direction they want Agent 47 to move. In the [...] "Definitive Edition" [...] on PC, swiping is replaced by a click, hold, and drag interaction with a mouse. Once the player completes a turn, all enemies on the board will simultaneously move. Each level has a main objective for completion, some levels require the player to guide Agent 47 to the <b>end</b> <b>node</b> and others will require the player to assassinate a specific target. The player can assassinate enemies by moving onto the target's node, and similarly the player can be killed by enemies that move onto the player's node.|$|E
50|$|A Secure <b>End</b> <b>Node</b> solves/mitigates <b>end</b> <b>node</b> problem.|$|E
5000|$|Within a vast {{computer}} network, {{the individual}} computers {{on the periphery}} of the network, those that do not also connect other networks, and those that often connect transiently to one or more clouds are called end nodes. Typically, within the cloud computing construct, the individual user / customer computer that connects into one well-managed cloud is called an <b>end</b> <b>node.</b> Since these computers are a part of the network yet unmanaged by the cloud's host, they present significant risks to the entire cloud. This is called the <b>End</b> <b>Node</b> Problem. [...] There are several means to remedy this problem but all require instilling trust in the <b>end</b> <b>node</b> computer.|$|E
40|$|Abstract. This paper {{investigates the}} {{capacity}} of a wireless two-way relay channel in which two <b>end</b> <b>nodes</b> exchange information via a relay node. The capacity is defined in the information-theoretic sense as the maximum information exchange rate between the two <b>end</b> <b>nodes.</b> We give an upper bound of the capacity by ap-plying the cut-set theorem. We prove that this upper bound can be approached in low SNR region using “separated ” multiple access for uplinks from the <b>end</b> <b>nodes</b> to the relay in which {{the data from the}} <b>end</b> <b>nodes</b> are individually decoded at the relay; and network-coding broadcast for downlinks from the relay to the <b>end</b> <b>nodes</b> in which the relay mixes the information from <b>end</b> <b>nodes</b> before forwarding. We further prove that the capacity is approachable in high SNR region using physi-cal-layer network coding (PNC) multiple access for uplinks, and network-coding broadcast for downlinks. From our proof and observations, we conjecture that the upper bound may be achieved with PNC in all SNR regions. ...|$|R
30|$|An edge-ego-network is the induced {{subgraph}} {{that contains the}} two <b>end</b> <b>nodes</b> of an edge, all neighboring nodes of these two <b>end</b> <b>nodes</b> and all edges that link these nodes.|$|R
40|$|This paper {{investigates the}} {{capacity}} of a wireless two way relay channel in which two <b>end</b> <b>nodes</b> exchange information via a relay node. The capacity is defined in the information-theoretic sense as the maximum information exchange rate between the two <b>end</b> <b>nodes.</b> We give an upper bound of the capacity by applying the cut-set theorem. We prove that this upper bound can be approached in low SNR region using "separated" multiple access for uplinks from the <b>end</b> <b>nodes</b> to the relay in which {{the data from the}} <b>end</b> <b>nodes</b> are individually decoded at the relay; and network-coding broadcast for downlinks from the relay to the <b>end</b> <b>nodes</b> in which the relay mixes the information from <b>end</b> <b>nodes</b> before forwarding. We further prove that the capacity is approachable in high SNR region using physical-layer network coding (PNC) multiple access for uplinks, and network-coding broadcast for downlinks. From our proof and observations, we conjecture that the upper bound may be achieved with PNC in all SNR regions. Comment: 6 pages, submitted to Globecom 200...|$|R
5000|$|PRP {{does not}} cover <b>end</b> <b>node</b> failures, but {{redundant}} nodes may be connected via a PRP network.|$|E
50|$|Lightweight Portable Security (LPS) is a Linux LiveCD, (or LiveUSB), {{developed}} and publicly {{distributed by the}} United States Department of Defense’s Software Protection Initiative {{that is designed to}} serve as a secure <b>end</b> <b>node.</b> It can run on almost any Intel-based computer (PC or Mac). LPS boots only in RAM, creating a pristine, non-persistent <b>end</b> <b>node.</b> It supports DoD-approved Common Access Card (CAC) readers, as required for authenticating users on DoD networks.|$|E
50|$|A rule flow is constructed, from a start node to the {{different}} rules that must be considered and finishing at the <b>end</b> <b>node.</b>|$|E
30|$|Analog network coding (e.g., [1 – 16]), {{also known}} as two-way amplify-and-forward relaying, is a {{bi-directional}} relaying technique. Its data transmission takes half the time of conventional bi-directional relaying. Moreover, it accomplishes this feat with simpler relay processing than another network coding technique, decode-and-forward network coding [1]. In analog network coding, both <b>end</b> <b>nodes</b> transmit simultaneously to the relay. The relay then processes its received signal and transmits {{it back to the}} <b>end</b> <b>nodes.</b> Finally, the <b>end</b> <b>nodes</b> then subtract their self-interference and decode their desired data.|$|R
30|$|Intermediate node: nodes {{that relate}} parent <b>nodes</b> to <b>end</b> <b>nodes.</b>|$|R
30|$|<b>End</b> node: a <b>node</b> {{that does}} not have any successor. Nodes CC 33, CC 14, CC 24, CC 34 are <b>end</b> <b>nodes</b> in Figure 3.|$|R
5000|$|On an {{electrically}} shared medium (10BASE5, 10BASE2, 1BASE5), jabber {{can only}} be detected by each <b>end</b> <b>node,</b> stopping reception. No further remedy is possible.|$|E
5000|$|... 4,873,517 “Method for Selecting Least Weight <b>End</b> <b>Node</b> to Ned Node Route in a Data Communications Network” with Baratz et al., Issued October 10, 1989 ...|$|E
50|$|As of version 1.7, the {{distribution}} was rebranded as Trusted <b>End</b> <b>Node</b> Security, or TENS, though the site still uses the LPS name in many places.|$|E
40|$|We {{introduce}} a flux recovery scheme for the computed solution of a quadratic immersed finite element method. The recovery is done at nodes and interface point first and by interpolation at the remaining points. We {{show that the}} <b>end</b> <b>nodes</b> are superconvergence points for both the primary variable $p$ and its flux $u$. Furthermore, {{in the case of}} piecewise constant diffusion coefficient without the absorption term the errors at <b>end</b> <b>nodes</b> and interface point in the approximation of $u$ and $p$ are zero. In the general case, flux error at <b>end</b> <b>nodes</b> and interface point is third order. Numerical results are provided to confirm the theory...|$|R
50|$|HSR {{does not}} cover the failure of <b>end</b> <b>nodes,</b> but {{redundant}} nodes can be connected via HSR.|$|R
30|$|Let us {{assume that}} the relay is unable to {{calculate}} γ before the <b>end</b> <b>nodes</b> design their precoders. Certainly, {{this means that the}} relay is unable to know what precoders the <b>end</b> <b>nodes</b> will choose without some signaling from the end nodes—if it knew the precoders, it could simply solve (3) and get γ. Consequently, γ or the information needed to calculate γ must be signaled to the relay.|$|R
5000|$|... #Caption: A level within Hitman Go. Agent 47 {{is located}} on the left and must be {{directed}} past enemies to the <b>end</b> <b>node</b> located in the upper right.|$|E
5000|$|Non-overlapping segment {{protection}} {{does not}} provide node protection at every node. This scheme is only able to recover from a node failure that is not at the segment <b>end</b> <b>node.</b> In the diagram, [...] "Non-overlapping protection", if node D fails a path cannot be provisioned from node A, the source, to node F, the Destination. Non-overlapping segment protection is a more cost efficient solution because only the <b>end</b> <b>node</b> of every segment requires to have extra ports. In the long term it is more cost efficient to implement overlapping segment protection because the a provisioned circuit's availability would be much higher.|$|E
50|$|BYOD {{security}} relates {{strongly to}} the <b>end</b> <b>node</b> problem, wherein a device {{is used to}} access both sensitive and risky networks/service risk-averse organizations issue devices specifically for Internet use (this is termed Inverse-BYOD).|$|E
40|$|ABSTRACT * In {{this paper}} we {{introduce}} simple metrics for the slew rate of an RC circuit {{based on the}} first two circuit moments. We develop two new slew metrics, S 2 M (slew with 2 moments) and scaled S 2 M, that provide high accuracy with the advantage of simple closed form expressions. S 2 M is very accurate for middle and far <b>end</b> <b>nodes</b> but it does not perform as well for near <b>end</b> <b>nodes.</b> Scaled S 2 M is developed to improve upon S 2 M for near <b>end</b> <b>nodes</b> and is shown to be highly accurate for near as well as far <b>end</b> <b>nodes.</b> For a large set of nets from an industrial 0. 18 µm microprocessor, S 2 M matches SPICE within 2 % on average with 78 % of the sinks having less than 1 % error. For the same test cases, the average error for scaled S 2 M is less than 3 % with 99. 4 % of the nodes showing less than 5 % error. Categories and Subject Descriptor...|$|R
5000|$|A {{non-uniform}} {{frame size}} configuration {{in the network}} using jumbo frames may be detected as jabber by <b>end</b> <b>nodes.</b>|$|R
3000|$|However, packet losses {{occur when}} route {{bypassing}} does not work, specifically when {{the distance between}} broken links <b>end</b> <b>nodes</b> is [...]...|$|R
50|$|Others suggest metrics which {{explicitly}} encode {{the dynamics}} of a specified process unfolding on the network.The dynamic influence is the proportion of infinite walks starting from each node, where walk steps are scaled such that the linear dynamics of the system are expected to converge to a non-null steady state. The Impact sums, over increasing walk lengths, the probability of transmission to the <b>end</b> <b>node</b> of the walk and that the <b>end</b> <b>node</b> has not been previously visited by a shorter walk.While both measures well predict {{the outcome of the}} dynamical systems they encode, in each case the authors admit that results from one dynamic do not translate to other dynamics.|$|E
50|$|To {{eliminate}} the <b>end</b> <b>node</b> problem, only allow authenticated users on trusted remote computers in safe environments {{to connect to}} your network/cloud. There {{are many ways to}} accomplish this with existing technology, each with different levels of trust.|$|E
50|$|The Coxeter group 3i,j,k can {{generate}} up to 3 unique uniform Gosset-Elte figures with Coxeter-Dynkin diagrams with one <b>end</b> <b>node</b> ringed. By Coxeter's notation, each figure {{is represented by}} kij to mean the end-node on the k-length sequence is ringed.|$|E
5000|$|<b>End</b> <b>nodes</b> {{utilizing}} a MAC layer will usually detect an oversized Ethernet frame and cease receiving. A bridge/switch will not forward the frame.|$|R
30|$|Example {{generated}} by Xiong and Wang (2012) used in case 2, for multimodal {{part of the}} problem. The authors defined a multimodal network with 35 nodes and three modes including truck, rail and barges transportation. Five <b>ending</b> <b>nodes</b> (nodes 31 – 35) considered as potential DCs and node 1 defined as supplier location.|$|R
30|$|The PAI {{value is}} the product of the degrees of the two <b>end</b> <b>nodes</b> of an edge. Sorting edges with their PAI values just puts the edges with low degree <b>end</b> <b>nodes</b> to the front. The figure shows that the PAI value can detect outlier edges with fairly good performance. This {{indicates}} that most of the injected edges connecting the nodes with low degrees. Considering most of the nodes in a real-world graph are low degree nodes, this is an expected behavior.|$|R
50|$|Visualization of the Network Topology - VPFM is able {{to perform}} autodiscovery of the Wireless, WAN, LAN and VoIP network {{infrastructure}} as well as Servers, <b>End</b> <b>Node</b> Devices, Printers. VPFM has a Path Trace Capability that provides functionality to see the physical network connectivity from the <b>End</b> <b>Node</b> Device to the server it {{may be trying to}} access. This provides more functionality than a traceroute in that the graphical path trace functionality {{is able to}} show Split Multilink Trunk physical connections and related statistics down the path being diagnosed. The diagnostic tools such as trending can be used to observe errors and traffic levels down each link in the Split Multilink Trunk.|$|E
50|$|Within {{the vast}} cyber-ecosystem, these end nodes often attach transiently {{to one or}} more clouds/networks, some {{trustworthy}} and others not. A few examples: a corporate desktop browsing the Internet, a corporate laptop checking company webmail via a coffee shop's open Wi-Fi access point, a personal computer used to telecommute during the day and gaming at night, or app within a smartphone/tablet (or any of the previous use/device combinations). Even if fully updated and tightly locked down, these nodes may ferry malware from one network (e.g. a corrupted webpage or an infected email message) into another, sensitive network. Likewise, the end nodes may exfiltrate sensitive data (e.g. log keystrokes or screen-capture). Assuming the device is fully trustworthy, the <b>end</b> <b>node</b> must provide the means to properly authenticate the user. Other nodes may impersonate trusted computers, thus requiring device authentication. The device and user may be trusted but within an untrustworthy environment (as determined by inboard sensors' feedback). Collectively, these risks are called the <b>End</b> <b>Node</b> Problem. There are several remedies but all require instilling trust in the <b>end</b> <b>node</b> and conveying that trust to the network/cloud.|$|E
50|$|For {{call setup}} and control (and other {{administrative}} purposes), {{it is possible}} to use a separate dedicated signalling channel from the <b>end</b> <b>node</b> to the network. ISDN is one such service that uses a separate signalling channel while plain old telephone service (POTS) does not.|$|E
30|$|In networks, all <b>end</b> <b>nodes</b> must send {{field data}} to the gateway. The gateway then exchanges {{management}} messages with all the <b>end</b> <b>nodes.</b> After the initialization of the network, the enhanced Dijkstra’s algorithm is adopted for first route setup with low calculation complexity and low overhead. The operation is executed by the network manager rather than allowing each node to launch its own search process. In addition, the enhanced Dijkstra’s algorithm utilized Fibonacci heap[23] to implement Dijkstra’s algorithm to increase searching efficiency.|$|R
30|$|For a ego-network, Coscia and Rossetti {{showed the}} {{importance}} of removing the focal node and all edges that link to it when studying the properties of ego-networks [20]. It is more complicate to study the properties of an edge-ego-network since there are two <b>ending</b> <b>nodes</b> and two sets of neighboring nodes involved. Considering the common nodes of the neighboring <b>nodes</b> and the <b>end</b> <b>nodes</b> of the edge being investigated, we now define four schemes that capture different configurations of these two sets.|$|R
30|$|The RWP, RW, and RDM {{models are}} used to {{evaluate}} the performance of Bypass-AODV and AODV. Our objective is to study the performance of Bypass-AODV on both long and short TCP connections (in terms of hop counts) To achieve this objective, we make the TCP connection's <b>end</b> <b>nodes</b> static, while other nodes are allowed to move in accordance with the assumed mobility model with a maximum speed of 20 [*]m/s. Hence, the physical distance (the physical distance between the source and the destination of a TCP connection remains relatively unchanged during a simulation run. It is worth to note that the minimum distance between TCP connection <b>end</b> <b>nodes</b> {{in terms of the number}} of hops, assuming nodes use their maximum transmission range (180 [*]m)) between the connection's <b>end</b> <b>nodes</b> remains relatively unchanged during a simulation run.|$|R
