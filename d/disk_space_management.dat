8|2838|Public
40|$|We {{introduce}} elastic quotas, a <b>disk</b> <b>space</b> <b>management</b> {{technique that}} makes disk space an elastic resource like CPU and memory. Elastic quotas allow all users to use unlimited amounts of available disk space while still providing system administrators {{the ability to}} control how the disk space is allocated among users. Elastic quotas maintain existing persistent file semantics while supporting user-controlled policies for removing files when the file system becomes too full. We have implemented an elastic quota system in Solaris and measured its performance. The system is simple to implement, requires no kernel modifications, and is compatible with existing <b>disk</b> <b>space</b> <b>management</b> methods. Our results show that elastic quotas are an effective, low-overhead solution for flexible file system management. ...|$|E
40|$|This paper {{examines}} the architectural issues in building storage systems for object-oriented database management systems #OO DBMSs# and persistent languages. We survey techniques for placing {{small and large}} objects on disk and <b>disk</b> <b>space</b> <b>management,</b> and we present client-server architectures for OO DBMSs. We describe alternatives in making a programming language persistent and in particular, we discuss pointers and three pointer dereference mechanisms: import#export, software dereference, and hardware dereference. ...|$|E
40|$|The {{standard}} MVS {{operating system}} supplied {{for use on}} IBM 370 computers does not erase or protect data residing on areas of disk that have been released for reuse. This report discusses the problem and describes efficient techniques {{that have been developed}} and installed at the DRCS which automatically erase all data when disk space is released by its owner. This has involved modifying the <b>disk</b> <b>space</b> <b>management</b> software and included some restructuring to eliminate contention for system resource...|$|E
50|$|Tiles and tile index {{are stored}} as BLOBs in a {{relational}} database which also holds the data dictionary needed by rasdaman’s dynamic type system. Adapters {{are available for}} several relational systems, among them open-source PostgreSQL.For arrays larger than <b>disk</b> <b>space,</b> hierarchical storage <b>management</b> (HSM) support has been developed.|$|R
50|$|Scanner is a <b>disk</b> <b>space</b> {{analyzing}} and <b>management</b> {{tool for}} Microsoft Windows operating systems. It displays the <b>disk</b> <b>space</b> usage of any drive or directory {{in the form}} of a multilevel pie chart which can be navigated up and down through the directory tree. When the mouse cursor is placed above a pie the program displays which directory the pie represents, how many files it contains and the overall <b>disk</b> <b>space</b> occupied by it. A context menu allows to open the directory inside the Windows Explorer, hide and un-hide it from the diagram as well as deleting the pie from the disk either via the Recycle Bin or permanently.|$|R
40|$|Based on the Motorola 6800, this {{multiplexer}} {{is designed}} to provide a microprocessor development tool in the specific environment of a high- energy physics laboratory. The basic philosophy of this device is to allow communication of a target (prototype) processor with a host computer under control of a human operator. The host can be an experimental online computer or any remote machine with a time-sharing network. It is thus possible to speed up design and debugging of a physics application program by taking advantage of the sophisticated resources usually available in a computer centre (powerful editor, large <b>disk</b> <b>space,</b> source <b>management</b> via 'Patchy', etc.). In addition to the classical cross-macroassembler, a loader is available on the host for down-line loading binary code, via the multiplexer, into the prototype memory. Such a scheme is easily extended to the communication of any host interactive processing program with a data acquisition microprocessor, and provides the latter with a convenient and easily portable extension of its computing power. (8 refs) ...|$|R
40|$|Includes bibliographical {{references}} (page 26) The {{main goal}} of this Computer Aided Instruction program is to represent the UNIX file system graphically. File management {{is one of the}} most visible services of an operating system. A programmer or user needs to understand the file management of the system in order to take better advantage of it. The file management of the UNIX operating system is unique, and is discussed in many books and articles. It is, however, a difficult concept to understand without the help of graphics. This program is designed, by means of an interactive tutorial involving many graphic displays, to simulate the way in which UNIX manages disk space, and thereby to enable users to attain a better understanding of the system than they would from a text. This program simulates some basic <b>disk</b> <b>space</b> <b>management</b> functions of the UNIX file system. The commands implemented in this program are: mkdir, rmdir, cd, cp, mv, rm, pwd and Is. The program will show, step by step, how <b>disk</b> <b>space</b> <b>management</b> is accomplished internally. Users can issue an implemented command as they would on an actual UNIX operating system, and at their own pace. This program can help users understand the basic principles of UNIX file system management...|$|E
40|$|This paper {{examines}} the architectural issues in building storage systems for object-oriented database management systems (OO DBMSs) and persistent languages. We survey techniques for placing {{small and large}} objects on disk and <b>disk</b> <b>space</b> <b>management,</b> and we present client-server architectures for OO DBMSs. We describe alternatives in making a programming language persistent and in particular, we discuss pointers and three pointer dereference mechanisms: import/export, software dereference, and hardware dereference. 1 Introduction Relational database systems cannot {{meet the requirements of}} advanced database applications such as electronic CAD, mechanical CAD, geographic information systems and computer-aided publishing [28]. These applications are characterized by extremely complex data structures, and complex patterns of computation and navigation. They are implemented in 3 GLs such as FORTRAN, C, and C++, and because these applications are both computationally intensive and interacti [...] ...|$|E
40|$|This paper {{presents}} {{storage structures}} and algorithms for the efficient manipulation of general-purpose large unstructured objects in a database system. The large object {{is stored in}} a sequence of variable-size segments, each of which consists {{of a large number}} of physically contiguous disk blocks. A tree structure indexes byte positions within the object. <b>Disk</b> <b>space</b> <b>management</b> is based on the binary buddy system. The scheme supports operations that replace, insert, delete bytes at arbitrary positions within the object, and append bytes at the end of the object. 1. INTRODUCTION The manipulation of large objects is becoming an increasingly important issue of many so called unconventional database applications such as geographical, image analysis, computeraided design (VLSI, mechanical, software engineering), office automation for document processing and publishing, and multimedia presentation. The latter are perhaps the most noticeable applications that demand efficient storage and ret [...] ...|$|E
5000|$|... for <b>Space</b> <b>Management</b> - (HSM) for Linux and AIX. Automatically moves {{inactive}} data to {{less expensive}} media and frees online <b>disk</b> <b>space</b> for important active data. The Windows product ("IBM TSM HSM for Windows") is OpenStore for File Servers produced by INTERCOPE GmbH.|$|R
5|$|The Gain <b>disk</b> <b>space</b> section {{itself is}} a disk cleanup {{component}} which replaces Windows Disk Cleanup. It also gives access to TuneUp <b>Disk</b> <b>Space</b> Explorer (a <b>disk</b> <b>space</b> analyzer) and TuneUp Shredder (a data erasure tool).|$|R
50|$|The {{amount of}} <b>disk</b> <b>space</b> System Restore consumes can be configured. Starting with Windows XP, the <b>disk</b> <b>space</b> allotted is {{configurable}} per volume {{and the data}} stores are also stored per volume. File are stored using NTFS compression and a Disk Cleanup handler allows deleting {{all but the most}} recent Restore Point to free up <b>disk</b> <b>space.</b> System Restore can be disabled completely to regain <b>disk</b> <b>space.</b> It automatically disables itself if the <b>disk</b> free <b>space</b> is too low for it to operate.|$|R
40|$|Large {{objects are}} used in many {{unconventional}} database applications; pictures, digitized video and sound recordings are {{a few examples of}} large objects that need to be stored in a database. This paper discribes the large object manager of the EOS object store. We present the storage structures and algorithms used for the efficient manipulation of general-purpose large unstructured objects. The large object is stored in a sequence of variable-size segments, each of which consists {{of a large number of}} physically contiguous disk blocks. <b>Disk</b> <b>space</b> <b>management</b> is based on the binary buddy system. The scheme supports operations that replace, insert, delete bytes at arbitrary positions within the object, and append bytes at the end of the object. We analyze the performance of our scheme and compare it with the corresponding ones employed in two other experimental database storage systems. Keywords: database storage organization, object-oriented databases, computer-aided design, mul [...] ...|$|E
40|$|Abstract—This {{paper is}} mainly studied {{on one of}} key {{technologies}} of cloud computing: virtualization. From previous researches, most of the virtualized environment configurations {{are focused on the}} host hard <b>disk</b> <b>space</b> <b>management,</b> memory configuration, CPU usage, but seldom studied in terms of network bandwidth, therefore there isn’t a good mechanism can provide efficient bandwidth allocation. In the absence of efficient control in bandwidth allocation, often because the number of users of the system began to grow and causes the virtual machine not offer the bandwidth, that will make the user longer wait time, and also degrade the Quality of Service of Cloud platform or system. Based on NETSHARE method, we enhance NETSHARE to propose a new virtualized bandwidth resources allocation scheme called VBRAS in this paper. The purposes of VBRAS are to dynamically allocate server’s bandwidth for users and take into account the large amount number of users as well as network speed on the Client and Server. Also, the experimental results indicate that the VBRAS can obtain 20 % lower convergence frequency and 8 % higher throughput than the NETSHARE. Consequently, the VBRAS will offer real-time adjustment and fair allocation of bandwidth resource to improve the transmission performance under a large amount of users into the cloud platform...|$|E
5000|$|... 12 MB of hard <b>disk</b> <b>space</b> for IE4 and 8.5 MB of hard <b>disk</b> <b>space</b> for Java VM.|$|R
25|$|DOS 3.0 {{and higher}} will not {{immediately}} reuse <b>disk</b> <b>space</b> of deleted files for new allocations but instead seek for previously unused space before starting to use <b>disk</b> <b>space</b> of previously deleted files as well. This not only helps {{to maintain the}} integrity of deleted files {{for as long as}} possible but also speeds up file allocations and avoids fragmentation, since never before allocated <b>disk</b> <b>space</b> is always unfragmented.|$|R
50|$|The {{required}} <b>disk</b> <b>space</b> may {{be easily}} allocated on systems with more recent specifications (i.e. {{a system with}} 3 GB of memory having a 6 GB fixed-size pagefile on a 750 GB disk drive, or a system with 6 GB of memory and a 16 GB fixed-size pagefile and 2 TB of <b>disk</b> <b>space).</b> In both examples the system is using about 0.8% of the <b>disk</b> <b>space</b> with the pagefile pre-extended to its maximum.|$|R
50|$|In Windows XP, a 300 {{megahertz}} processor, 256 {{megabytes of}} RAM, and 300 MB of hard <b>disk</b> <b>space</b> is required. Under Vista, an 800 MHz processor, 512 MB of RAM, and 300 MB of hard <b>disk</b> <b>space</b> is required.|$|R
30|$|In append-only mode, {{after writing}} {{the value of}} a key, the old value will be unused, so the <b>disk</b> <b>space</b> for old values is wasteful. Compacting {{operation}} is used to cleanup the old values and get more free <b>disk</b> <b>space.</b>|$|R
5000|$|<b>Disk</b> <b>space</b> on the System/34 was {{organized}} by [...] "blocks." [...] One block = 2560 bytes. A high-end system would ship with about 90,000 blocks of <b>disk</b> <b>space</b> available. System objects could be allocated in blocks or records, but internally it was always blocks.|$|R
50|$|The <b>disks</b> <b>space</b> usage {{status is}} visualized {{in real time}} by CleanGenius. When <b>disk</b> free <b>space</b> is lower than 10%, the visualiser will show {{colorful}} alert.|$|R
5000|$|... #Caption: TreeSize Treemap {{visualizing}} hard <b>disk</b> <b>space</b> usage.|$|R
50|$|The minimum {{hardware}} specification {{required to}} run each {{release of the}} professional workstation version of Windows NT has been fairly slow-moving until the 6.0 Vista release, which requires a minimum of 15 GB of free <b>disk</b> <b>space,</b> a 10-fold increase in free <b>disk</b> <b>space</b> alone over the previous version.|$|R
5000|$|Arbitrary long {{mathematical}} expressions (limited only by <b>disk</b> <b>space)</b> ...|$|R
5000|$|HDD: minimum 100 MB <b>disk</b> <b>space</b> available. Recommended: 200MB.|$|R
5000|$|Copy-on-write file systems, {{allowing}} to economize on <b>disk</b> <b>space</b> usage.|$|R
50|$|Many of the backup-to-disk {{technologies}} advertise up to 15 to 1 compression ratios. This {{also allows}} {{the information technology}} department to store more data on less <b>disk</b> <b>space.</b> With de-duplication a disk appliance with 5 terabytes of raw <b>disk</b> <b>space</b> can store as much as 30 terabytes of compressed and de-duplicated data.|$|R
50|$|There are {{warnings}} on startup when <b>disk</b> <b>space</b> is low (provided {{the user}} has not turned that warning off) and during recording the status bar shows {{the amount of}} recording time left available. If the user chooses to ignore those and runs out of <b>disk</b> <b>space</b> during editing, audio will be corrupted.|$|R
5000|$|... 1994: Microsoft {{specified}} {{the minimum}} hardware requirements for Access v2.0 as: Microsoft Windows v3.1 with 4 MB of RAM required, 6 MB RAM recommended; 8 MB of available hard <b>disk</b> <b>space</b> required, 14 MB hard <b>disk</b> <b>space</b> recommended. The product shipped on seven 1.44 MB diskettes. The manual shows a 1994 copyright date.|$|R
50|$|An {{installation}} of UltraEdit takes about 100 MB of <b>disk</b> <b>space.</b>|$|R
5000|$|Accounting - allocating shared {{resources}} like <b>disk</b> <b>space</b> and network bandwidth ...|$|R
5000|$|... #Caption: Filelight, a <b>disk</b> <b>space</b> {{analyzer}} {{that uses}} sliced pie charts ...|$|R
5000|$|Shredding {{files and}} wiping {{unallocated}} <b>disk</b> <b>space</b> to minimize data remanence ...|$|R
25|$|Minimum Requirements: 486DX/66MHz or higher, Windows 95/98, 12MB RAM, 56MB <b>disk</b> <b>space.</b>|$|R
50|$|Space Gremlin is a <b>disk</b> <b>space</b> {{analysis}} {{tool for}} Mac OS X.|$|R
5000|$|Normally {{less than}} 40MB <b>disk</b> <b>space</b> (depending on amount of notes stored) ...|$|R
