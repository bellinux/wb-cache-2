558|3|Public
5|$|The {{computational}} {{difficulty of}} the clique problem has led it {{to be used to}} prove several lower bounds in circuit complexity. The existence of a clique of a given size is a monotone graph property, meaning that, if a clique exists in a given graph, it will exist in any supergraph. Because this property is monotone, there must exist a monotone circuit, using only and gates and or gates, to solve the clique decision problem for a given fixed clique size. However, the size of these circuits can be proven to be a super-polynomial function of the number of vertices and the clique size, exponential in the cube root of the number of vertices. Even if a small number of NOT gates are allowed, the complexity remains superpolynomial. Additionally, the depth of a monotone circuit for the clique problem using gates of bounded <b>fan-in</b> must be at least a polynomial in the clique size.|$|E
50|$|<b>Fan-in</b> is {{the number}} of inputs a gate can handle. For {{instance}} the <b>fan-in</b> for the AND gate shown in the figure is 3. Physical logic gates with a large <b>fan-in</b> tend to be slower than those with a small <b>fan-in.</b> This is because the complexity of the input circuitry increases the input capacitance of the device. Using logic gates with higher <b>fan-in</b> will help reducing the depth of a logic circuit.|$|E
5000|$|... r: {{number of}} modules calling the module under {{consideration}} (<b>fan-in)</b> ...|$|E
50|$|The {{smallest}} AC {{class is}} AC0, consisting of constant-depth unlimited <b>fan-in</b> circuits.|$|E
50|$|Many circuit {{complexity}} {{classes are}} {{defined in terms}} of class hierarchies. For each nonnegative integer i, there is a class NCi, consisting of polynomial-size circuits of depth , using bounded <b>fan-in</b> AND, OR, and NOT gates. We can talk about the union NC of all of these classes. By considering unbounded <b>fan-in</b> gates, we construct the classes ACi and AC. We construct many other circuit complexity classes with the same size and depth restrictions by allowing different sets of gates.|$|E
50|$|A major {{advantage}} over the earlier resistor-transistor logic is increased <b>fan-in.</b> Additionally, to increase fan-out, an additional transistor and diode may be used.|$|E
50|$|Connects nodes in a fan-out / <b>fan-in</b> {{pattern that}} can have {{multiple}} steps, and loops. This is a parallel task distribution and collection pattern.|$|E
5000|$|The NC {{classes are}} related to the AC classes, which are defined similarly, but with gates having {{unbounded}} <b>fan-in.</b> For each i, we have ...|$|E
50|$|Push-pull connects nodes in a fan-out / <b>fan-in</b> {{pattern that}} can have {{multiple}} steps, and loops. This is a parallel task distribution and collection pattern.|$|E
5000|$|If {{a module}} has 5 {{input and output}} data parameters, {{an equal number of}} control parameters, and accesses 10 items of global data, with a <b>fan-in</b> of 3 and a fan-out of 4, ...|$|E
5000|$|In circuit {{complexity}}, AC is a complexity class hierarchy. Each class, ACi, {{consists of}} the languages recognized by Boolean circuits with depth [...] and a polynomial number of unlimited <b>fan-in</b> AND and OR gates.|$|E
5000|$|More formally, a {{language}} belongs to AC0m {{if it can}} be computed by a family of circuits C1, C2, ..., where Cn takes n inputs, the depth of every circuit is constant, the size of Cn is a polynomial function of n, and the circuit uses the following gates: AND gates and OR gates of unbounded <b>fan-in,</b> computing the conjunction and disjunction of their inputs; NOT gates computing the negation of their single input; and unbounded <b>fan-in</b> MOD-m gates, which compute 1 if the number of input 1s is a multiple of m. A language belongs to ACC0 if it belongs to AC0m for some m.|$|E
5000|$|The W {{hierarchy}} is {{a collection}} of computational complexity classes. A parameterised problem is in the class Wi, if every instance [...] can be transformed (in fpt-time) to a combinatorial circuit that has weft at most i, such that [...] if and only if there is a satisfying assignment to the inputs, which assigns 1 to at most k inputs. The height thereby is the largest number of logical units with unbounded <b>fan-in</b> on any path from an input to the output. The number of logical units with bounded <b>fan-in</b> on the paths must be limited by a constant that holds for all instances of the problem.|$|E
5000|$|... #Caption: Sketch of an ACC-circuit: For a fixed number m, {{the circuit}} {{consists}} of NOT-, AND-, OR-, and (Mod m)-Gates. The <b>fan-in</b> of each gate is bounded by a polynomial {{and the depth}} of the circuit is bounded by a constant.|$|E
5000|$|... #Caption: Diagram of an AC0 circuit: The n input bits are on {{the bottom}} and the top gate {{produces}} the output; the circuit consists of AND- and OR-gates of polynomial <b>fan-in</b> each, and the alternation depth is bounded by a constant.|$|E
50|$|Every {{problem in}} ACC0 {{can be solved}} by {{circuits}} of depth 2, with AND gates of polylogarithmic <b>fan-in</b> at the inputs, connected to a single gate computing a symmetric function. These circuits are called SYM+-circuits. The proof follows ideas of the proof of Toda's theorem.|$|E
5000|$|Henry and Kafura {{introduced}} Software Structure Metrics Based on Information Flow in 1981 {{which measures}} complexity {{as a function}} of fan in and fan out. They define <b>fan-in</b> of a procedure as the number of local flows into that procedure plus the number of data structures from which that procedure retrieves information. Fan-out is defined as the number of local flows out of that procedure plus the number of data structures that the procedure updates. Local flows relate to data passed to and from procedures that call or are called by, the procedure in question. Henry and Kafura's complexity value is defined as [...] "the procedure length multiplied by the square of <b>fan-in</b> multiplied by fan-out" [...] (Length ×(fan-in × fan-out)²).|$|E
50|$|Scribe servers are {{arranged}} in a directed graph, with each server knowing only about the next server in the graph. This network topology allows for adding extra layers of <b>fan-in</b> as a system grows, and batching messages before sending them between datacenters, without having any code that explicitly needs to understand datacenter topology, only a simple configuration.|$|E
5000|$|Input: A Boolean {{formula of}} depth at most [...] and weft at most , {{and a number}} [...] The depth is the maximal number of gates on any path from the root to a leaf, and the weft is the maximal number of gates of <b>fan-in</b> at least three on any path from the root to a leaf.|$|E
50|$|The first {{semiconductor}} logic {{family was}} resistor-transistor logic. This was {{a thousand times}} more reliable than tubes, ran cooler, and used less power, but had a very low <b>fan-in</b> of 3. Diode-transistor logic improved the fanout up to about 7, and reduced the power. Some DTL designs used two power-supplies with alternating layers of NPN and PNP transistors to increase the fanout.|$|E
5000|$|The {{standard}} {{definition of}} NP-completeness involves polynomial time many-one reductions: {{a problem in}} NP is by definition NP-complete if every other problem in NP has a reduction of this type to it, and the standard way of proving that a problem in NP is NP-complete {{is to find a}} polynomial time many-one reduction from a known NP-complete problem to it. But (in what Agrawal et al. called [...] "a curious, often observed fact") all sets known to be NP-complete at that time could be proved complete using the stronger notion of AC0 many-one reductions: that is, reductions that can be computed by circuits of polynomial size, constant depth, and unbounded <b>fan-in.</b> Agrawal et al. proved that every set that is NP-complete under AC0 reductions is complete under an even more restricted type of reduction, NC0 many-one reductions, using circuits of polynomial size, constant depth, and bounded <b>fan-in.</b> In an NC0 reduction, each output bit of the reduction can depend only on a constant number of input bits, ...|$|E
50|$|Reminiscent of radix economy, one {{estimate}} {{for the total}} delay of such a tree -- {{the total number of}} stages by the delay of each stage - gives an optimum (minimum delay) when each stage of the tree is scaled by e, approximately 2.7. People who design digital integrated circuits typically insert trees whenever necessary such that the <b>fan-in</b> and fan-out of each and every gate on the chip is between 2 and 10.|$|E
50|$|All process {{steps for}} the {{generation}} of the package are performed on the wafer. This allows, in comparison to classical packaging technologies (e. g. ball grid array), {{the generation of}} very small and flat packages with excellent electrical and thermal performance at lowest cost. It is common for all WLB technologies, which are built on a silicon wafer, that the interconnects (typically solder balls) fit on the chip (so called <b>fan-in</b> design). Therefore only chips with a restricted number of interconnects can be packaged.|$|E
50|$|Neeraj Kayal {{was given}} the Distinguished Alumnus Award of the IITK, {{for his work in}} {{computational}} complexity theory. He is also a recipient of the Gödel prize and the Fulkerson Prize for the same along with his co-authors. In 2012, he was awarded the Young Scientist Award from the Indian National Science Academy (INSA) for contributions to the development of arithmetic complexity theory including the development of a deterministic algorithm for primality testing, the resolution of the constant <b>fan-in</b> conjecture for depth three circuits, and a reconstruction algorithm for arithmetic formulas.|$|E
5000|$|ACC0, {{sometimes}} called ACC, is {{a class of}} computational models and problems defined in circuit complexity, a field of theoretical computer science. The class is defined by augmenting the class AC0 of constant-depth [...] "alternating circuits" [...] {{with the ability to}} count; the acronym ACC stands for [...] "AC with counters". Specifically, a problem belongs to ACC0 if it can be solved by polynomial-size, constant-depth circuits of unbounded <b>fan-in</b> gates, including gates that count modulo a fixed integer. ACC0 corresponds to computation in any solvable monoid. The class is very well studied in theoretical computer science because of the algebraic connections and because {{it is one of the}} largest concrete computational models for which computational impossibility results, so-called circuit lower bounds, can be proved.|$|E
50|$|The {{computational}} {{difficulty of}} the clique problem has led it {{to be used to}} prove several lower bounds in circuit complexity. The existence of a clique of a given size is a monotone graph property, meaning that, if a clique exists in a given graph, it will exist in any supergraph. Because this property is monotone, there must exist a monotone circuit, using only and gates and or gates, to solve the clique decision problem for a given fixed clique size. However, the size of these circuits can be proven to be a super-polynomial function of the number of vertices and the clique size, exponential in the cube root of the number of vertices. Even if a small number of NOT gates are allowed, the complexity remains superpolynomial. Additionally, the depth of a monotone circuit for the clique problem using gates of bounded <b>fan-in</b> must be at least a polynomial in the clique size.|$|E
5000|$|More complex {{analysis}} than <b>fan-in</b> and fan-out {{is required}} when two different logic families are interconnected. Fan-out is ultimately {{determined by the}} maximum source and sink currents of an output and the maximum source and sink currents of the connected inputs; the driving device {{must be able to}} supply or sink at its output the sum of the currents needed or provided (depending on whether the output is a logic high or low voltage level) by all of the connected inputs, while maintaining the output voltage specifications. For each logic family, typically a [...] "standard" [...] input is defined by the manufacturer with maximum input currents at each logic level, and the fan-out for an output is computed as the number of these standard inputs that can be driven in the worst case. (Therefore, it is possible that an output can actually drive more inputs than specified by fan-out, even of devices within the same family, if the particular devices being driven sink and/or source less current, as reported on their data sheets, than a [...] "standard" [...] device of that family.) Ultimately, whether a device has the fan-out capability to drive (with guaranteed reliability) a set of inputs is determined by adding up all the input-low (max.) source currents specified on the datasheets of the driven devices, adding up all the input-high (max.) sink currents of those same devices, and comparing those sums to the driving device's guaranteed maximum output-low sink current and output-high source current specifications, respectively. If both totals are within the driving device's limits, then it has the DC fan-out capacity to drive those inputs on those devices as a group, and otherwise it doesn't, regardless of the manufacturer's given fan-out number. However, for any reputable manufacturer, if this current analysis reveals that the device cannot drive the inputs, the fan-out number will agree.|$|E
40|$|We {{investigate}} {{the relationship between}} circuit bottom <b>fan-in</b> and circuit size when circuit depth is fixed. We show {{that in order to}} compute certain functions, a moderate reduction in circuit bottom <b>fan-in</b> will cause significant increase in circuit size. In particular, we prove that there are functions that are computable by circuits of linear size and depth k with bottom <b>fan-in</b> 2 but require exponential size for circuits of depth k with bottom <b>fan-in</b> 1. A general scheme is established to study the trade-off between circuit bottom <b>fan-in</b> and circuit size. Based on this scheme, we are able to prove, for example, that for any integer c, there are functions that are computable by circuits of linear size and depth k with bottom <b>fan-in</b> O(log n) but require exponential size for circuits of depth k with bottom <b>fan-in</b> c, and that for any constant ffl ? 0, there are functions that are computable by circuits of linear size and depth k with bottom <b>fan-in</b> log n but require superpolynomial size for [...] ...|$|E
40|$|AbstractTwo properties, called semi-unboundedness and {{polynomial}} proof-size, {{are identified}} as key properties shared by the definitions of LOGCFL on several models of computations. The semi-unboundedness property leads {{to the definition of}} semi-unbounded <b>fan-in</b> circuit families. These are circuits obtained from unbounded <b>fan-in</b> circuits by restricting the <b>fan-in</b> of gates of one type. A new characterization of LOGCFL is obtained on such a model in which the <b>fan-in</b> of the AND gates are bounded by a constant. This property also suggests new characterizations of LOGCFL on the following models: alternating Turing machines, nondeterministic auxiliary pushdown automata, and bounded <b>fan-in</b> Boolean circuits...|$|E
40|$|It {{is shown}} {{that in a}} {{standard}} discrete neural network model with small <b>fan-in,</b> tolerance to random malicious faults can be achieved with a log-linear {{increase in the number}} of neurons and a constant factor increase in parallel time, provided <b>fan-in</b> can increase arbitrarily. A similar result is obtained for a nonstandard but closely related model with no restriction on <b>fan-in.</b> ...|$|E
40|$|Addition and prefix {{computation}} {{are among}} the most fun-damental problems in arithmetic and algebraic computa-tion. In this paper, we present efficient circuits for perform-ing prefix computation and addition with small depth and size and flexible <b>fan-in</b> (i. e., the maximum <b>fan-in</b> can be se-lected as a small constant or a larger constant/nonconstant number). In particular, we show that any prefix operation of n inputs can be computed using a circuit of <b>fan-in</b> k, depth logkn + o(logkn) + O(1), gate complexity O(n), and edge d-I complexity O(n log * *&quot; &quot; * n), for any constant integer d. We show that the sum of two n-bit numbers can be found using an AND-OR circuit of <b>fan-in</b> k, depth logkn + o(logkn) + d-I O(1), and edge complexity O(n(log* * &quot;&quot;*n) 2), for any constant integer d. In particular, the depths of our circuits for prefix computation and addition are optimal within a fac-torofl + o(1), for any <b>fan-in</b> k = n °(l). ...|$|E
40|$|We give {{results on}} the strong {{connectivity}} for spaces of sparse random digraphs specified by degree sequence. A full characterization is provided, in probability, of the <b>fan-in</b> and fan-out of all vertices including the number of vertices with small (o(n)) and large (cn) <b>fan-in</b> or fan-out. We also give {{the size of the}} giant strongly connected component, if any, and the structure of the bowtie digraph induced by the vertices with large <b>fan-in</b> or fan-out. Our results follow a direct analogy of the extinction probabilities of classical branching processes...|$|E
40|$|Abstract—The {{starting}} points {{of this paper}} are two size-optimal solutions: (i) one for implementing arbitrary Boolean functions (Horne, 1994); and (ii) another one for implementing a particular sub-class of Boolean functions (Red’kin, 1970). Because VLSI implementations do not cope well with highly interconnected nets—the area of a chip grows with the cube of the <b>fan-in</b> (Hammerstrom, 1988) —this paper will analyse the influence of limited <b>fan-in</b> on the size optimality for the two solutions mentioned. First, we will extend a result from Horne & Hush (1994) valid for <b>fan-in</b> Δ = 2 to arbitrary <b>fan-in.</b> Second, we will prove that size-optimal solutions are obtained for small constant <b>fan-in</b> for both constructions, while relative minimum size solutions can be obtained for fan-ins strictly lower that linear. These results are in agreement with similar ones proving that for small constant fan-ins (Δ = 6 … 9) there exist VLSI-optimal (i. e., minimising AT 2) solutions (Beiu, 1997 c), and with the small constants (5 … 9) relating to our capacity of processing information (Miller, 1956) ...|$|E
40|$|The {{starting}} points {{of this paper}} are two size-optimal solutions: (1) one for implementing arbitrary Boolean functions (Home and Hush, 1994); and (2) another one for implementing certain sub-classes of Boolean functions (Red`kin, 1970). Because VLSI implementations do not cope well with highly interconnected nets [...] the area of a chip grows with the cube of the <b>fan-in</b> (Hammerstrom, 1988) [...] this paper will analyze the influence of limited <b>fan-in</b> on the size optimality for the two solutions mentioned. First, the authors will extend a result from Home and Hush (1994) valid for <b>fan-in</b> {Delta} = 2 to arbitrary <b>fan-in.</b> Second, they will prove that size-optimal solutions are obtained for small constant <b>fan-in</b> for both constructions, while relative minimum size solutions can be obtained for fan-ins strictly lower that linear. These results are in agreement with similar ones proving that for small constant fan-ins ({Delta} = 6 [...] . 9) there exist VLSI-optimal (i. e., minimizing AT{sup 2 }) solutions (Beiu, 1997 a), while there are similar small constants relating to the capacity of processing information (Miller 1956) ...|$|E
40|$|We {{propose a}} new model for exact {{learning}} of acyclic circuits using experiments in which chosen values may be assigned to an arbitrary subset of wires internal to the circuit, but only {{the value of the}} circuit’s single output wire may be observed. We give polynomial time algorithms to learn (1) arbitrary circuits with logarithmic depth and constant <b>fan-in</b> and (2) boolean circuits of constant depth and unbounded <b>fan-in</b> over AND, OR, and NOT gates. Thus, both AC 0 and NC 1 circuits are learnable in polynomial time in this model. Negative results show that some restrictions on depth, <b>fan-in</b> and gate types are necessary: exponentially many experiments are required to learn AND/OR circuits of unbounded depth and fan-in; it is NP-hard to learn AND/OR circuits of unbounded depth and <b>fan-in</b> 2; and it is NP-hard to learn circuits of bounded depth and unbounded <b>fan-in</b> over AND, OR, and threshold gates, even when the target circuit is known to contain at most one threshold gate and that threshold gate has threshold 2. We also consider the effect of adding an oracle for behavioral equivalence. In this case there are polynomial-time algorithms to learn arbitrary circuits of constant <b>fan-in</b> and unbounded depth and to learn boolean circuits with arbitrary <b>fan-in</b> and unbounded depth over AND, OR, and NOT gates. A corollary is that these two classes are PAC-learnable if experiments are available. Finally, we consider an extension of the model called the synchronous model. We show that an even more general class of circuits are learnable in this model. In particular, we are able to learn circuits with cycles. ...|$|E
40|$|We {{propose a}} Current Mirror Evaluation Logic (CMEL) and show (for O. 131 xm technology) {{that this new}} logic {{achieves}} 28 -to- 47 % (10 -to- 27 %) delay reduction against high <b>fan-in</b> single/multi-stage domino (conditional keeper domino [1]) OR gates at an affordable power and area penalty. In addition, CMEL shows 54 -to- 95 % (18 -to 45 %) delay reduction against high <b>fan-in</b> single stage (multi-stage) domino AND gates. Consequently, the proposed logic achieves high performance and noise immunity for high <b>fan-in</b> dynamic AND and OR gates, respectively, {{compared to that of}} conventional domino and conditional keeper domino circuits...|$|E
