164|211|Public
25|$|LocalDB: Introduced in SQL Server Express 2012, LocalDB is a minimal, on-demand, {{version of}} SQL Server that is {{designed}} for application developers. It {{can also be used}} as an <b>embedded</b> <b>database.</b>|$|E
25|$|Informix is {{generally}} considered to be optimized for environments with very low or no database administration, including use as an <b>embedded</b> <b>database.</b> It has a long track record of supporting very high transaction rates and providing uptime characteristics needed for mission critical applications such as manufacturing lines and reservation systems. Informix has been widely deployed in the retail sector, where the low administration overhead makes it useful for in-store deployments.|$|E
25|$|To gain {{performance}} and determinism, some systems place functions that {{would likely be}} viewed as application logic, rather than as device drivers, in kernel mode; security applications (access control, firewalls, etc.) and operating system monitors are cited as examples. At least one <b>embedded</b> <b>database</b> management system, eXtremeDB Kernel Mode, has been developed specifically for kernel mode deployment, to provide a local database for kernel-based application functions, and to eliminate the context switches that would otherwise occur when kernel functions interact with a database system running in user mode.|$|E
40|$|Manipulating {{data and}} storing it for easy {{retrieval}} {{has always been an}} interesting problem in computing. <b>Embedded</b> <b>databases</b> are &quot;small &quot; databases that give database functionality to applications that carry them. <b>Embedded</b> <b>databases</b> usually lack the standard features of a full-fledged DBMS (Database Management System) such a...|$|R
5000|$|April 2015: Airtable {{launches}} its API and <b>embedded</b> <b>databases.</b>|$|R
40|$|This paper investigates <b>embedded</b> <b>databases</b> for the MicroBaseJ project. The paper aims at the {{development}} of an integrated database and a user interface for a typical 3 G mobile phone with Java MIDP 2 capability. One of the key objectives is to target a generic solution. A number of commercial sectors could benefit from this solution such as horticulture, building management, pollution/water management, industry etc. Four <b>embedded</b> <b>databases</b> based on J 2 ME have been investigated. Two of the four have been evaluated and analyzed. The size of processed data is limited to 20000 records when using the wireless toolkit simulator and 11000 records when using a mobile phone. 1...|$|R
25|$|Compact (SQL CE): The compact edition is an <b>embedded</b> <b>database</b> engine. Unlike {{the other}} editions of SQL Server, the SQL CE engine {{is based on}} SQL Mobile (initially {{designed}} for use with hand-held devices) and does not share the same binaries. Due to its small size (1MB DLL footprint), it has a markedly reduced feature set {{compared to the other}} editions. For example, it supports a subset of the standard data types, does not support stored procedures or Views or multiple-statement batches (among other limitations). It is limited to 4GB maximum database size and cannot be run as a Windows service, Compact Edition must be hosted by the application using it. The 3.5 version includes support for ADO.NET Synchronization Services. SQL CE does not support ODBC connectivity, unlike SQL Server proper.|$|E
500|$|PHP {{includes}} various {{free and}} open-source libraries in its source distribution, or uses them in resulting PHP binary builds. PHP is fundamentally an Internet-aware system with built-in modules for accessing File Transfer Protocol (FTP) servers and many database servers, including PostgreSQL, MySQL, Microsoft SQL Server and SQLite (which is an <b>embedded</b> <b>database),</b> LDAP servers, and others. [...] Numerous functions familiar to C programmers, {{such as those}} in the stdio family, are available in standard PHP builds.|$|E
50|$|The default Plastic {{database}} on {{a regular}} installation is a SQL Server Compact <b>embedded</b> <b>database</b> on Windows systems and an SQLite <b>embedded</b> <b>database</b> on Linux and Mac OS X (since Plastic 3.0).|$|E
50|$|The Mobipocket e-book {{format is}} based on the Open eBook {{standard}} using XHTML and can include JavaScript and frames. It also supports native SQL queries to be used with <b>embedded</b> <b>databases.</b> There is a corresponding e-book reader.|$|R
50|$|In computing, the Perl DBI (Perl Database Interface) {{offers a}} {{standardized}} way for programmers using the Perl programming language to <b>embed</b> <b>database</b> communication within their programs. The latest DBI module for Perl from CPAN can {{run on a}} range of operating systems.|$|R
50|$|ODBO is {{the most}} widely supported, multi-dimensional API to date. Platform-specific to Microsoft Windows, ODBO was {{specifically}} designed for Online Analytical Processing (OLAP) systems by Microsoft as an extension to Object Linking and <b>Embedding</b> <b>Database</b> (OLE DB). ODBO uses Microsoft’s Component Object Model.|$|R
5000|$|The term <b>embedded</b> <b>database</b> can be {{confusing}} because {{only a small}} subset of <b>embedded</b> <b>database</b> products are used in real-time embedded systems such as telecommunications switches and consumer electronics devices. (See mobile database for small-footprint databases {{that could be used}} on embedded devices.) ...|$|E
5000|$|Major <b>embedded</b> <b>database</b> {{products}} include, {{in alphabetical}} order: ...|$|E
50|$|<b>Embedded</b> <b>Database</b> {{access is}} ISAM-based. Can be used royalty free.|$|E
50|$|All of {{the above}} {{functions}} must occur at high speeds in advanced networks. Knowledge-based processors contain <b>embedded</b> <b>databases</b> that store information required to process packets that travelthrough a network at wireline speeds. Knowledge based processors are a new addition to intelligent networking that allow these functions to occur at high speeds {{and at the same}} time provide for lower power consumption.|$|R
5000|$|The {{third part}} of the name refers to {{primitive}} functions that are not defined in R5RS (the official definition of the programming language Scheme) but are nevertheless important for real world programming like functions allowing to work with regular expressions, with TCP/IP networks, with <b>embedded</b> <b>databases</b> (e.g. Berkeley DB, GNU database manager) and a few that provide an interface with the operating system.|$|R
50|$|OLE DB for OLAP (Object Linking and <b>Embedding</b> <b>Database</b> for Online Analytical Processing {{abbreviated}} ODBO) is a Microsoft published specification and {{an industry}} standard for multi-dimensional data processing. ODBO {{is the standard}} application programming interface (API) for exchanging metadata and data between an OLAP server and a client on a Windows platform. ODBO extends the ability of OLE DB to access multi-dimensional (OLAP) data stores.|$|R
50|$|As {{the name}} implies, Oracle’s <b>embedded</b> <b>database</b> is {{actually}} Berkeley DB, which Oracle acquired from Sleepycat Software. It was originally {{developed at the}} University of California. Berkeley DB is a fast, open-source <b>embedded</b> <b>database</b> and is used in several well-known open-source products, including the Linux and BSD Unix operating systems, Apache Web server, OpenLDAP directory, OpenOffice productivity suite.|$|E
50|$|InterBase {{offers the}} option to run as an <b>embedded</b> <b>database</b> or regular server.|$|E
50|$|Empress Software, Inc., {{developer}} of the Empress <b>Embedded</b> <b>Database,</b> is a privately held company founded in 1979. Empress <b>Embedded</b> <b>Database</b> is a full-function, relational database {{that has been}} embedded into applications by organizations small to large, with deployment environments including medical systems, network routers, nuclear power plant monitors, satellite management systems, and other embedded system applications that require reliability and power. Empress is an ACID compliant, SQL database engine with C, C++, Java, JDBC, ODBC, SQL, ADO.NET and kernel level APIs. Applications developed using these APIs may be run in standalone and/or server modes. Empress <b>Embedded</b> <b>Database</b> runs on Linux, Unix, Microsoft Windows and real-time operating systems.|$|E
40|$|Provenance of a file is {{metadata}} {{pertaining to}} the history of the file. Provenance, unlike normal metadata stored in file systems, is retrieved primarily by running queries. This implies that provenance has to be indexed and should have a query interface. We believe that databases are the most appropriate place to store provenance as they provide both indexing and query capabilities. The goal {{of this paper is to}} explore the most appropriate schema and database technology for storing provenance. In the paper we discuss the different possible schemas for storing provenance and the tradeoffs in choosing each of the schemas. We then characterize the behavior of some of the popular database architectures under provenance recording/querying workloads. The database architectures that we considered are: RDBMS, Schemaless <b>Embedded</b> <b>Databases</b> (Berkeley DB), XML, and LDAP. Finally, we present preliminary performance results for the database architecture for provenance recording and some common provenance queries. Our results indicate that schemaless <b>embedded</b> <b>databases</b> have the best performance under most provenance workloads. The results also indicate that RDBMS has the best space utilization under most provenance workloads. ...|$|R
40|$|The {{tremendous}} {{growth of}} system memories {{has increased the}} capacities and capabilities of memory-resident <b>embedded</b> <b>databases,</b> yet current <b>embedded</b> <b>databases</b> need to be tuned {{in order to take}} advantage of new memory technologies. In this paper, we study the implications of hosting memory resident databases, and propose hardware and software (query-driven) techniques to improve their performance and energy consumption. We exploit the structured organization of memories, which enables a selective mode of operation in which banks are accessed selectively. Unused banks are placed in a lower power mode based on access pattern information. We propose hardware techniques that dynamically control the memory by making the system adapt to the access patterns that arise from queries. We also propose a software (query-directed) scheme that directly modifies the queries to reduce the energy consumption by ensuring uniform bank accesses. Our results show that these optimizations could lead to at the least 40 % reduction in memory energy. We also show that query-directed schemes better utilize the low-power modes, achieving up to 68 % improvement...|$|R
40|$|In the {{normalization}} ways in {{the universal}} frame of the relational databases and the topology of these ways are investigated. Theorem about closure of normalization ways in a relational frame has been proved. The theorem allows using a relational frame as a unique database schemes carrier, normalized to the higher forms. It also allows analyzing the existing and <b>embedded</b> <b>databases</b> for their anomalies and {{the impact on the}} software usage during the operation. ??????????? ???? ???????????? ? ????????????? ??????? ??????????? ??? ?????? (??) ? ????????? ???? ?????. ???????? ??????? ??????????? ????? ???????????? ? ??????????? ???????. ??????? ????????? ????????? ??????????? ?????? ??? ?????????? ???????? ???? ??, ??????????????? ?? ??????? ????, ? ????? ????????????? ???????????? ? ?????????? ?? ?? ??????? ?? ???????? ? ??????? ?? ?????????? ? ???????? ????????????...|$|R
50|$|As an <b>embedded</b> <b>database</b> db4o can be run in {{application}} process. It {{is distributed}} as a library (jar/dll).|$|E
5000|$|Embedded database: ADO.NET Entity Framework {{includes}} a lightweight <b>embedded</b> <b>database</b> for client-side caching and querying of relational data.|$|E
5000|$|... nessDB, a {{very fast}} {{key-value}} <b>embedded</b> <b>Database</b> Storage Engine (Using log-structured-merge (LSM) trees), uses skip lists for its memtable.|$|E
50|$|Because Pervasive PSQL is {{used for}} <b>{{embedded}}</b> <b>databases,</b> and sold indirectly, it is not well known.Pervasive PSQL is embedded by OEMs like Sage, maestro* Technologies, ABACUS Research AG (Switzerland), and Unikum (Sweden) in packaged software applications that address the accounting, finance, retail, point-of-sale, entertainment, reservation system, and medical and pharmaceutical industry segments. “Users include Novell, Microsoft, PeachTree Software, Fair Isaac, Disney World, Radio Shack, Cardiff and others.” The accounting industry formed {{a large part of}} its market in 2007.|$|R
40|$|A {{database}} {{approach to}} data of arbitrary types {{has shown that}} the architecture of a universal database machine is restricting in a number of cases. There appear special-purpose data servers using now types of hardware devices. Data is moving toward the user, who exploits mobile devices equipped with database functionality. The goal of the paper is to present new trends in databases, particularly in their architectures and to show on cloud computing, data streams, mobile and <b>embedded</b> <b>databases,</b> and databases supporting Web. 2. 0 some new ideas and possibilities of solution of associated problems. The other goal of the paper is also to point out on actual problems associated with database research...|$|R
40|$|Recently, {{cheap and}} large {{capacity}} non-volatile memory such as flash memory is rapidly replacing disks in embedded systems. While the access time of flash memory is highly predictable, deadline misses may occur if data objects in flash memory are not properly managed in real-time <b>embedded</b> <b>databases.</b> Buffer cache {{can be used}} to mitigate this problem. However, since the workload of a real-time database cannot be precisely predicted, it may not be feasible to provide enough buffer space to satisfy all timing constraints. Several deadline miss ratio management schemes have been proposed, but they do not consider I/O activities. In this paper, we present an I/O-aware deadline miss ratio management scheme in real-time <b>embedded</b> <b>databases</b> whose secondary storage is flash memory. We propose an adaptive I/O deadline assignment scheme, in which I/O deadlines are derived from up-to-date system status. We also present a deadline miss ratio management architecture where a control theory-based feedback control loop prevents resource overload both in I/O and CPU. A simulation study shows that our approach can effectively cope with both I/O and CPU overload to achieve the desired deadline miss ratio...|$|R
5000|$|QDBM (Quick Database Manager): [...] "an <b>embedded</b> <b>database</b> library {{compatible}} with GDBM and NDBM. It features hash database and B+ tree database." ...|$|E
50|$|An <b>embedded</b> <b>database</b> can be {{configured}} {{to act as}} {{a hybrid}} server/embedded RDBMS; to also accept TCP/IP connections from other clients in addition to clients in the same JVM.|$|E
5000|$|LocalDB: Introduced in SQL Server Express 2012, LocalDB is a minimal, on-demand, {{version of}} SQL Server that is {{designed}} for application developers. It {{can also be used}} as an <b>embedded</b> <b>database.</b>|$|E
40|$|Recent {{developments}} in portable devices and growing wireless communication networks have evolved pervasive computing {{during the last}} few years. Pervasive computing enlarges the usability of computers by allowing low powered mobile devices to query the database over the wireless network, but also raises some demanding challenges such as slow expensive connection, frequent line disconnection, limited host bandwidth, location dependent data. This paper addresses the above issues of the <b>embedded</b> <b>databases</b> of pervasive computing systems. Solutions for each of the issues have been described in this paper...|$|R
5000|$|... "db4o" [...] is an {{open source}} <b>embedded</b> object <b>database</b> for Java and [...]NET. db4o is coded in Java and {{translated}} to C# by an open-source tool called Sharpen.|$|R
50|$|OLE DB (Object Linking and <b>Embedding,</b> <b>Database,</b> {{sometimes}} {{written as}} OLEDB or OLE-DB), an API designed by Microsoft, allows accessing {{data from a}} variety of sources in a uniform manner. The API provides a set of interfaces implemented using the Component Object Model (COM); it is otherwise unrelated to OLE. Microsoft originally intended OLE DB as a higher-level replacement for, and successor to, ODBC, extending its feature set to support a wider variety of non-relational databases, such as object databases and spreadsheets that do not necessarily implement SQL.|$|R
