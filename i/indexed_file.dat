23|761|Public
5000|$|KEYSORT, {{to reorganize}} an <b>indexed</b> <b>file,</b> {{rebuilding}} the key index area for greater efficiency.|$|E
50|$|An <b>indexed</b> <b>file</b> is a {{computer}} file with an index that allows easy random access to any record given its file key.|$|E
50|$|CHAIN {{retrieves}} {{the record}} in the <b>indexed</b> <b>file</b> named in Factor 2 that matches the exact key specified by the value in Factor 1.|$|E
40|$|Abstract:- In this paper, a novel {{scheme for}} vector {{quantization}} (VQ) is proposed. A <b>file</b> called visible <b>index</b> <b>file</b> {{is used to}} record the coding result. The decompressed image reconstructed from the visible <b>index</b> <b>file</b> {{is the same as}} the one recovered using traditional VQ index file; however, the visible <b>index</b> <b>file</b> looks like the original image, and is therefore more convenient for the management of <b>index</b> <b>files.</b> Also, note that the size of the visible <b>index</b> <b>file</b> is the same as that of the traditional <b>index</b> <b>file.</b> Key-words: vector quantization, sorted codebook, visible <b>index</b> <b>files.</b> ...|$|R
40|$|An {{indexing}} system, {{including a}} server for {{providing access to}} at least one site, a server agent for creating an <b>index</b> <b>file</b> of data relating to the site, and a central index for storing index information from the <b>index</b> <b>file.</b> The server agent initiates communication with the central index to transfer the <b>index</b> <b>file</b> from the server agent to the central index...|$|R
50|$|Support for <b>indexed</b> <b>files</b> {{is built}} into COBOL and PL/I. Other {{languages}} with more limited I/O facilities such as C support <b>indexed</b> <b>files</b> through add-on packages in a runtime library such as C-ISAM.|$|R
50|$|The {{system was}} mainly used for {{key-to-disk}} operations {{to replace the}} previously popular IBM card punches and more advanced key-to-tape systems manufactured for example by Mohawk Data Sciences (MDS) or Singer. In addition to the basic key-to-disk function, the proprietary operating system, called XLOS, supported <b>indexed</b> <b>file</b> operations for on-line transaction processing even with data journaling. The system was programmed in two different ways. The data entry was either described in several tables that specified {{the format of the}} input record with optional automatic data validation procedures or the <b>indexed</b> <b>file</b> operations were programmed in a special COBOL dialect with IDX and SEQ file support.|$|E
50|$|SSP ("System Support Program") was {{the only}} {{operating}} system of the S/34. It contained support for multiprogramming, multiple processors, 36 devices, job queues, printer queues, security, <b>indexed</b> <b>file</b> support, and fully installed, it was about 5 MB.|$|E
50|$|Many {{computer}} systems were written using C-ISAM, which was fast and efficient and flexible, while providing effective mechanisms for maintaining data integrity. C-ISAM was also licensed by other software suppliers, for example as the <b>indexed</b> <b>file</b> handler in early versions of Micro Focus COBOL.|$|E
50|$|Sitemap files have a {{limit of}} 50,000 URLs and 50MiB per sitemap. Sitemaps can be {{compressed}} using gzip, reducing bandwidth consumption. Multiple sitemap files are supported, with a Sitemap <b>index</b> <b>file</b> serving as an entry point. Sitemap <b>index</b> <b>files</b> may not list more than 50,000 Sitemaps and must be no larger than 50MiB (52,428,800 bytes) and can be compressed. You can {{have more than one}} Sitemap <b>index</b> <b>file.</b>|$|R
50|$|Because the <b>index</b> <b>files</b> were so small, they {{minimized}} {{the amount of}} extra data {{that had to be}} downloaded from Usenet to verify that the data files were all present and undamaged, or to determine how many parity volumes were required to repair any damage or reconstruct any missing files. They were most useful in version 1 where the parity volumes were much larger than the short <b>index</b> <b>files.</b> These larger parity volumes contain the actual recovery data along with a duplicate copy of the information in the <b>index</b> <b>files</b> (which allows them to be used on their own to verify the integrity of the data files if there is no small <b>index</b> <b>file</b> available).|$|R
5000|$|Handy Backup stores {{information}} about each backup task in <b>index</b> <b>files</b> {{of its own}} [...]HBI format. Each <b>index</b> <b>file</b> contains the list of files, their sizes, time of creation, time of last modification, file attributes, and other data. It also includes {{a reference to the}} previous <b>index</b> <b>file</b> and is renewed with each execution of the task, which enables doing incremental and differential backup and save only changes. In Handy Backup, incremental backup is made on file level and differential backup is made on byte level.|$|R
50|$|In {{order to}} support the data dictionary, PowerHouse was tightly coupled to the {{underlying}} database management system and/or file system {{on each of the}} target platforms. In the case of the HP3000 this was the IMAGE shallow-network DBMS and KSAM <b>indexed</b> <b>file</b> system, and the entire PowerHouse language reflected its origins.|$|E
50|$|Files on the S/36 may be Sequential (S), Direct (D), or Indexed (I). An <b>indexed</b> <b>file</b> {{can have}} {{multiple}} alternate indexes (X), and in fact, a sequential file may have alternate indexes placed on it {{so there is}} no primary index. An <b>indexed</b> <b>file</b> contains a key, which must be contiguous and may be up to 60 characters long; however, alternate indexes may have three-part keys which are not contiguous with one another. Duplicate keys in indexed or alternate index files may be allowed or disallowed. A file with direct organization is built with all records added and cannot auto-extend. A file with sequential or indexed organization is built with no records added. An alternate index always has as many records as its parent, as opposed to a System/38-style logical file which is built with conditions to filter records from the parent.|$|E
5000|$|SSP ("System Support Program") was {{the only}} {{operating}} system of the S/36. It contained support for multiprogramming, multiple processors, 80 devices, job queues, printer queues, security, <b>indexed</b> <b>file</b> support, and fully installed, it was about 10MB. On the advanced/36, the number of workstations/printers was increased to 160. And with the [...] "guest/36" [...] which was the SSP operating system operating as a [...] "guest" [...] on OS/400 (V3R6 thru V4R4), you could have up to 216 devices.|$|E
50|$|Creates an <b>index</b> <b>file,</b> sorted.bam.bai for the sorted.bam file.|$|R
5000|$|The search option {{allows a}} simple {{search of a}} central <b>INDEX</b> <b>file.</b> This <b>INDEX</b> <b>file</b> is one-line-per-resource, and is a flat file that the Hytelnet client {{searches}} directly. After entering a term, the client returns a new menu with the list of selectable items, for example this query [...] "library": ...|$|R
50|$|Creates an <b>index</b> <b>file</b> for the macOS {{built-in}} Help Viewer.|$|R
50|$|Business Basic is a {{category}} of variants of the BASIC computer programming language which were specialised for business use on minicomputers in the 1970s and 1980s. Business Basics added <b>indexed</b> <b>file</b> access methods to the normal set of BASIC commands, and were optimised for other input/output access, especially display terminal control. The two major families of Business Basic are MAI Basic Four and Data General Business Basic. In addition the Point 4 company, which developed the IRIS operating system, had {{their own version of}} BASIC. The UniBASIC owned by Dynamic Concepts of Irvine is a derivative of the Point 4 BASIC.|$|E
50|$|The B32 {{interpreter}} {{was highly}} compatible with Data General Business Basic (DGBB), {{but it also}} enhanced and extended that language in many ways. Like DGBB, B32 could access Data General's INFOS II database and it could use DGBB's lock server or its own improved version. B32 was over twice as fast for number crunching, string manipulation, and disk I/O. Many of the internal restrictions of DGBB were removed. B32 allowed 32,767 line numbers (65,535 in later versions), compared with DGBB's 9,999. B32 allowed more memory for programs, more simultaneous locks, and more files to be open at once. Language enhancements included a high-speed internal sort routine, do-while blocks, {{and the ability to}} step backwards through an <b>indexed</b> <b>file.</b> Debugging facilities were also significantly improved over DGBB.|$|E
50|$|Other {{than the}} {{operating}} system itself, all system software was coded in BPL (Burroughs Programming Language), a systems programming language derived from ALGOL and Large System's ESPOL systems language. The initial COBOL compiler supported the ANSI 68 specification and supported the ENTER SYMBOLIC syntax to allow inline assembler coding, but lacked support for RELATIVE and <b>INDEXED</b> <b>file</b> support; these were later added into the ANSI 74 version of the compiler, which was released in 1982. MCP allowed programs {{to communicate with each}} other via core-to-core transmissions (CRCR) or by using storage queues (STOQ), implemented as OS supervisor calls using the BCT instruction and exposed to the languages (COBOL FILL FROM/INTO). This was unheard of except on the very largest IBM S/360 systems of the time, and even then it was a major operational headache to manage the interactions of the multiple program streams.|$|E
5000|$|Handling {{of static}} <b>files,</b> <b>index</b> <b>files,</b> auto-indexing and content {{negotiation}} ...|$|R
50|$|Par2 files {{generally}} {{use this}} naming/extension system: filename.vol000+01.PAR2, filename.vol001+02.PAR2, filename.vol003+04.PAR2, filename.vol007+06.PAR2, etc. The +01, +02, etc. in the filename indicates how many blocks it contains, and the vol000, vol001, vol003 etc. indicates {{the number of}} the first recovery block within the PAR2 <b>file.</b> If an <b>index</b> <b>file</b> of a download states that 4 blocks are missing, the easiest way to repair the files would be by downloading filename.vol003+04.PAR2. However, due to the redundancy, filename.vol007+06.PAR2 is also acceptable. There is also an <b>index</b> <b>file</b> filename.PAR2, it is identical in function to the small <b>index</b> <b>file</b> used in PAR1.|$|R
5000|$|Tag <b>index</b> <b>files</b> are {{supported}} by many source code editors, including: ...|$|R
40|$|Data {{storage and}} {{information}} retrieval {{are some of}} the most important aspects when it comes to the development of a language corpus. Currently most corpora use either relational databases or <b>indexed</b> <b>file</b> systems. When selecting a data storage system, most important facts to consider are the speeds of data insertion and information retrieval. Other than the aforementioned two approaches, currently there are various database systems which have different strengths that can be more useful. This paper compares the performance of data storage and retrieval mechanisms which use relational databases, graph databases, column store databases and <b>indexed</b> <b>file</b> systems for various steps such as inserting data into corpus and retrieving information from it, and tries to suggest an optimal storage architecture for a language corpus...|$|E
40|$|XENO is a {{suite of}} {{programs}} which assist {{in the creation of}} crossword puzzles. It is an extension of a diagram filling program presented earlier. 1 Complete puzzles can be produced under the control of a small number of parameters, clues being selected from an <b>indexed</b> <b>file.</b> It is possible to generate thematic puzzles by including keywords in the input parameters. Use of a tree searching method results in a puzzle being generated efficiently...|$|E
40|$|Increasing work loads, {{changes in}} the nature of data {{obtained}} from biopsies, and the use of laboratory statistics in determining financial provision for pathological services combine to enhance the value of computer generated results and indexing in histopathology. The system described here depends on an <b>indexed</b> <b>file</b> system using the Basic Plus- 2 language with a PDP- 11 computer and SNOP. Error traps are included. The system is designed for secretarial use, SNOP coding being carried out by medical staff...|$|E
40|$|An {{assessment}} of alternative methods of filing histopathology report forms {{in alphabetical order}} showed that orthodox card <b>index</b> <b>filing</b> is satisfactory up to about 100000 reports but, {{because of the need}} for long-term retrieval, when the reports filed exceed this number they should be copied on jacketed microfilm and a new card <b>index</b> <b>file</b> begun...|$|R
40|$|A {{parallel}} database {{is developed}} {{to improve the}} DR-LINK information retrieval system. DR-LINK is a system which finds the documents most relevant to a user's natural language queries. Relevant documents are found by analyzing <b>index</b> <b>files.</b> <b>Index</b> <b>files</b> contain weighted lists of key words and phrases and other characteristics of the document. The distinguishing information of the queries are matched with the <b>index</b> <b>files</b> {{in order to find}} the most relevant documents to the user. The work requires transforming the current vector-implementation of <b>index</b> <b>files</b> into a parallel database, an innovation which should have several positive effects on the system. Results include a test on performance and a test to find whether this new implementation is a better way to add new documents to the system. Future work will include testing on whether the database provides a way to detect new information about linguistic patterns...|$|R
50|$|In recent systems {{relational}} databases {{are often}} used in place of <b>indexed</b> <b>files.</b>|$|R
40|$|Multilevel indexes {{have long}} been used for {{accessing}} records in sorted files. Given the access cost at each level, {{the total cost of}} retrieving a record from the file can be substantially reduced by selecting the proper size of the index at each level. Organizations involving a variable number of levels are covered and binary searching is compared to sequential searching. The literature on the organization of file structures is largely qualitative, rather than quantitative, in nature. A number of books and survey articles give thorough discussions of possible <b>indexed</b> <b>file</b> organization strategies (e. g., Refs. 1 - 4). However, the development of techniques for comparin...|$|E
40|$|The {{essence of}} {{bioinformatics}} {{is dealing with}} large quantities of information. Whether it be sequencing data, microarray data files, mass spectrometric data (e. g., fingerprints), the catalog of strains arising from an insertional mutagenesis project, or even large numbers of PDF files, there inevitably {{comes a time when}} the information can simply no longer be managed with files and directories. This is where databases come into play. This unit briefly reviews the characteristics of several database management systems, including flat file, <b>indexed</b> <b>file,</b> and relational databases, as well as ACeDB. It compares their strengths and weaknesses and offers some general guidelines for selecting an appropriate database management system...|$|E
40|$|We {{propose a}} new method for {{homology}} search of nucleic acids or proteins in databanks. All the possible subsequences {{of a specific}} length in a sequence are converted into a code and stored in an <b>indexed</b> <b>file</b> (hash-coding). This preliminary work of codifying an entire bank is rather long but it enables an immediate {{access to all the}} sequence fragments of a given type. With our method a strict homology pattern of twenty nucleotides can be found for example in the Los Alamos bank (GENBANK) in less than 2 seconds. We can also use this data storage to considerably speed up the non-strict homology search programs and to write a program to help in the selection of nucleic acid hybridization probes...|$|E
50|$|The <b>index</b> <b>file</b> {{contains}} {{the most basic}} information about a Files-11 volume set.|$|R
5000|$|The COBOL {{language}} supports <b>indexed</b> <b>files</b> {{with the}} following command in the [...] section ...|$|R
40|$|Stackable file {{systems can}} provide {{extensible}} file system functionality with minimal performance overhead and development cost. However, previous approaches {{are limited in}} the functionality they provide. In particular, they do not support size-changing algorithms, which are important and useful for many applications, such as compression and security. We propose fast <b>index</b> <b>files,</b> a technique for efficient support of size-changing algorithms in stackable <b>file</b> systems. Fast <b>index</b> <b>files</b> provide a page mapping between file system layers {{in a way that}} can be used with any size-changing algorithm. <b>Index</b> <b>files</b> are designed to be recoverable if lost and add less than 0. 1 % disk space overhead. We have implemented fast indexing using portable stackable templates, and we have used this system to build several example file systems with size-changing algorithms. We demonstrate that fast <b>index</b> <b>files</b> have very low overhead for typical workloads, only 2. 3 % over other stacked file systems. Our system ca [...] ...|$|R
