1245|3|Public
5|$|The PC version {{also has}} both <b>DirectX</b> 9 and <b>DirectX</b> 10 mode. It is labeled Games for Windows and runs on XP, Vista and 7. It assumes a Gamepad is present and only uses the mouse in the menus, {{providing}} the same interface as the Xbox 360 version.|$|E
5|$|In early November 2011, Rocksteady {{confirmed}} {{that it was}} investigating reports by numerous users that save files for the Xbox 360 version of the game were being erased without prompting, resulting in players losing their progress and being unable to complete the game. On launch, performance issues arose for the PC version when <b>DirectX</b> 11 features were enabled; the developer acknowledged the inconvenience and recommended running the game with <b>DirectX</b> 9 until a title update was released to address this matter.|$|E
5|$|In 2015, {{during the}} 15th {{anniversary of the}} game's release, Square Enix (who had {{acquired}} Eidos earlier) endorsed a free fan-created mod, Deus Ex: Revision which was released through Steam. The mod, created by Caustic Creative, is a graphical overhaul of the original game, adding in support for newer versions of <b>DirectX,</b> improving the textures and the soundtrack from the original game, and adding in more world-building aesthetics.|$|E
5|$|Max Payne 2 {{uses the}} same game engine as the one used in Max Payne, but with several {{significant}} upgrades. Even though the game only supports <b>DirectX</b> 8.1, the graphics in Max Payne 2 mimic those generated by <b>DirectX</b> 9 by making optimal use of effects such as reflection, refraction, shaders, and ghosting. The developers considered one particular scene in which effects are used well: When Max has lucid dreams, the screen appears fuzzy and out of focus. Since Max Payne, the polygon count (the number of polygons rendered per frame) has been increased, which smooths out the edges of character models. In addition, characters have a much greater range of expressions. Previously, Max had only one expression available; in Max Payne 2, he often smirks and moves his eyebrows to react to different scenarios.|$|E
5|$|The {{developers}} aim to {{make the}} kernel and usermode APIs more compatible with Windows NT version 5.2 (Windows Server 2003) and to add support for more applications and hardware with plans to target newer versions of Windows as development matures. <b>DirectX</b> support is undertaken through ReactX, an in-house implementation. 2D hardware-accelerated rendering is done natively, while other drawing functionality is redirected to OpenGL as a stopgap solution.|$|E
5|$|It was {{reported}} that 3GB of RAM would be reserved for the operating system and utility software, leaving 5GB for games. With <b>DirectX</b> 11.2 as the console's API, the graphics processing unit (GPU) {{is based on an}} AMD GCN architecture with 12 compute units, which have a total of 768 cores, running at 853MHz providing an estimated peak theoretical power of 1.31 TFLOPS. For networking, Xbox One supports Gigabit Ethernet, 802.11n wireless, and Wi-Fi Direct.|$|E
5|$|Multi-platform {{releases}} {{were common}} {{in the early days}} of RPGs, but there was a period during the 1990s when this was not generally the case. The sixth generation of home gaming consoles led many game developers to resume the practice, and some opted to develop primarily or exclusively for consoles. The combination of the Xbox and <b>DirectX</b> technologies proved especially popular due to the two systems' architectural similarities, as well as their common set of programming tools. Multimedia and art assets, which account for a greater proportion of the development budget than in the past, are easily transferable between multiple platforms.|$|E
5|$|The {{graphics}} engine used {{to power the}} game was christened the Diesel Engine. Grin developed this engine for flexibility and scalability, allowing the engine to be easily upgraded with new features. Based on <b>DirectX,</b> this meant the engine could be used across Windows and Xbox platforms. Grin worked closely with NVIDIA to incorporate then new technologies such as pixel and vertex shaders to render complex scenes. Ballistics was marketed by NVIDIA as a flagship title for their new series of GeForce 3 graphics cards. The game came bundled with various versions of the GeForce 3, with distribution of the bundled game handled by Interplay OEM. Later versions of the Diesel Engine would be used in Grin games such as the Windows version of Tom Clancy's Ghost Recon Advanced Warfighter.|$|E
5|$|The game's water effects {{received}} substantial upgrades {{because of}} the large role naval battles play in The Battle for Middle-earth II. The developers endeavored to make the surface of oceans and lakes look realistic by using techniques similar to those applied in films when creating computer-generated ocean water. The digital water simulates deep ocean water by reflecting its surroundings on the surface, and wave technology was used to create large waves along coastlines to immerse the player in the game experience. Lost towns, corals, and fish were added underwater to add to the effect. Water was chosen as the first graphical component of The Battle for Middle-earth II to take advantage of <b>DirectX</b> 9 programmable shaders. These additions were part of an overall Electronic Arts strategy to continue the Lord of the Rings experience that began with the trilogy film series.|$|E
5|$|BioWare {{provided}} its Aurora Engine from Neverwinter Nights for the sequel. One of {{the decisions}} to use Aurora rather than build a new engine from scratch was the toolset—Obsidian wanted players {{to continue to be}} able to make content for the game, which may not have been possible with a new engine. BioWare made itself available to Obsidian with technical support on the engine, but Obsidian planned on completely overhauling Aurora, including its code. The designers wanted to improve the visuals of the first game with additions such as better lighting and textures, which required significant changes to the engine. The upgraded engine was referred to as Electron. Electron was designed to incorporate <b>DirectX</b> to make it compatible for a potential Xbox 360 release, but Obsidian eventually abandoned plans for a port to the system for financial reasons. The toolset that was used to create the game was also revamped, and included several additions like a customizable interface, a new dialogue format, and building assistants—similar to the wizards found in Microsoft Word and Excel. Like Neverwinter Nights, the toolset was included in the game's release for players to use.|$|E
5|$|Due to {{the growing}} scale of the project, talks about {{changing}} Versus XIII into the next numbered entry in the series were appearing as early as 2007. When Type-0, originally titled Final Fantasy Agito XIII, was renamed, and the PlayStation 4 and Xbox One were presented to Square Enix in 2011, {{it was decided to}} shift the game onto those consoles. For a time, a PlayStation 3 version continued development, but after a title change announcement could not be made in 2012, the shortening lifespan of the console caused concern for the company and team. After some trial and error, the PlayStation 3 was abandoned as lead platform in favor of a <b>DirectX</b> 11-based development structure that allowed for easy porting to the next-generation systems. Another presumed reason for the shift was due to the game's protracted development and escalating budget. The game was rebranded as Final Fantasy XV and began development in this form in July 2012. At the beginning of development, the new team reviewed the content of Versus XIII and decided what could be sensibly carried over to the new project. While many design elements were retained, some needed to be changed or removed. Tabata's new position as co-director and eventually as director was related to this change. Intentions to turn the game into a musical after Nomura had seen the 2012 film adaptation of Les Misérables were vetoed by the higher-ups at Square Enix.|$|E
5|$|The PC port was {{outsourced}} by Eidos Montréal by Nixxes Software, {{who also}} worked with Eidos on multiple projects including the PC port of Lara Croft and the Guardian of Light. The decision to outsource the PC port was made because the team {{wanted to make a}} quality port, but their team could not handle the three different versions. Nixxes were chosen as they had already been collaborating with the project, were a trusted port developer, and had a deep understanding of the game's engine. The two teams kept in constant contact, working from the same code base so the PC and console versions were as close as possible in terms of content and graphics. To create the port, Nixxes developed a <b>DirectX</b> 11 that the PC version would use, which enabled the inclusion of multiple graphical tweaks and extra touches such as adding tessellation and extra anti-aliasing options. The controls and HUD were customized to work with a computer keyboard. The initial response to the announcement of the PC port's outsourcing was mixed, which made the teams more determined to deliver a high-quality port. Further technical assistance was provided by Advanced Micro Devices. The game was also ported to Apple Inc.'s OS X platform. First announced in September 2011 after the other versions were released, the porting was handled by Feral Interactive, who had made a name for themselves porting titles such as Bioshock and Max Payne to the platform.|$|E
5|$|The first {{generation}} of Folding@home's GPU client (GPU1) was {{released to the public}} on October2, 2006, delivering a 20-30X speedup for some calculations over its CPU-based GROMACS counterparts. It was the first time GPUs had been used for either distributed computing or major molecular dynamics calculations. GPU1 gave researchers significant knowledge and experience with the development of GPGPU software, but in response to scientific inaccuracies with <b>DirectX,</b> on April10, 2008 it was succeeded by GPU2, the second generation of the client. Following the introduction of GPU2, GPU1 was officially retired on June6. Compared to GPU1, GPU2 was more scientifically reliable and productive, ran on ATI and CUDA-enabled Nvidia GPUs, and supported more advanced algorithms, larger proteins, and real-time visualization of the protein simulation. Following this, the third generation of Folding@home's GPU client (GPU3) was released on May25, 2010. While backward compatible with GPU2, GPU3 was more stable, efficient, and flexibile in its scientific abilities, and used OpenMM on top of an OpenCL framework. Although these GPU3 clients did not natively support the operating systems Linux and macOS, Linux users with Nvidia graphics cards were able to run them through the Wine software application. GPUs remain Folding@home's most powerful platform in FLOPS. As of November 2012, GPU clients account for 87% of the entire project's x86 FLOPS throughput.|$|E
5|$|The head of {{the project}} was Yoshihisa Hashimoto, Square Enix's Chief Technology Officer, who had moved over to the company from Sonic Team in 2009 and became {{involved}} with development in 2011. Other key Square Enix staff members working on Luminous Studio include Takeshi Nozue, Akira Iwata and Hiroshi Iwasaki. While ground work was being laid for Luminous, members of the team traveled to look at engine technology being developed by IO Interactive, Crystal Dynamics and Eidos Montréal, western video game developers who became subsidiaries after the company bought out Eidos Interactive. Square Enix's western subsidiaries shared information about game engine development from their experience developing the CDC and Glacier 2 game engines and shared their source code with the Luminous Studio team. During 2012, one third of the final development team was from western subsidiaries of the company. Luminous was developed based on high-end <b>DirectX</b> 11 technology. While designed for eighth-generation video games, it was said to also be compatible with any console and hardware that could handle shaders, such as PlayStation 3 and Xbox 360. Its compatibility with Nintendo's seventh-gen hardware such as the Wii and Nintendo 3DS was doubted, as those consoles did not support shaders. During this early stage, they were looking into the possibility of adjusting the engine for use on Wii U. The company were hoping to promote Luminous as a kind of brand, showing off the logo and tech demo when they were ready.|$|E
5|$|The macOS client debuted on June 23, 2015 to {{coincide}} with the release of the first expansion pack. The port was handled by TransGaming. Unlike console and Microsoft Windows PC versions of the expansion, the Mac release is only available in a two-in-one bundle containing the base game and the Heavensward expansion, titled Final Fantasy XIV Online. Current players of other versions of the game, including Mac players running the PC version via Boot Camp, are required to purchase this bundle in order to play using the native Mac client. On July 3, 2015, Square Enix suspended sales of the Mac version because of widespread reports of poor technical performance and offered refunds to those who purchased it. Yoshida observed that the performance issues could be attributed to difficulties in transposing the game from Microsoft's proprietary <b>DirectX</b> graphical rendering libraries to OpenGL as well as a clerical error resulting in publishing the wrong minimum system requirements, both compounded by the hectic work schedule demanded by the release of an expansion pack. After new rounds of testing and optimization, sales of the Mac version resumed on February 23, 2016, accompanying the release of Patch 3.2.|$|E
25|$|Ashes of the Singularity was {{the first}} {{publicly}} available game to utilize <b>DirectX</b> 12. Testing by Ars Technica in August 2015 revealed slight performance regressions in <b>DirectX</b> 12 over <b>DirectX</b> 11 mode for the Nvidia GeForce 980 Ti, whereas the AMD Radeon R9 290x achieved consistent performance improvements of up to 70% under <b>DirectX</b> 12, in some scenarios the AMD outperformed the more powerful Nvidia under <b>DirectX</b> 12. The performance discrepancies {{may be due to}} poor Nvidia driver optimizations for <b>DirectX</b> 12, or even hardware limitations of the card which was optimized for <b>DirectX</b> 11 serial execution, however the exact cause remains unclear.|$|E
25|$|<b>DirectX</b> 12 was {{announced}} by Microsoft at GDC on March 20, 2014, and was officially launched alongside Windows 10 on July 29, 2015. <b>DirectX</b> 12 APIs are {{also expected to}} feature on the Xbox One and Windows Phone. The version of <b>DirectX</b> that runs on the Xbox One, <b>DirectX</b> 11.X, already includes {{a subset of the}} features in <b>DirectX</b> 12. However, the <b>DirectX</b> 12 code is not intended to be directly portable between PC and Xbox One due to inherent differences between the two platforms. Microsoft has stated that the performance improvements of <b>DirectX</b> 12 on the Xbox One will not be as substantial as that on the PC.|$|E
25|$|A major {{update to}} <b>DirectX</b> API, <b>DirectX</b> 10 ships with {{and is only}} {{available}} with Windows Vista and later; previous versions of Windows such as Windows XP {{are not able to}} run <b>DirectX</b> 10-exclusive applications. Rather, programs that are run on a Windows XP system with <b>DirectX</b> 10 hardware simply resort to the <b>DirectX</b> 9.0c code path, the latest available for Windows XP computers.|$|E
25|$|<b>DirectX</b> 11.3 was {{announced}} along with <b>DirectX</b> 12 at GDC and released in 2015. It {{is meant to}} complement <b>DirectX</b> 12 as a higher-level alternative. It is included with Windows 10.|$|E
25|$|<b>DirectX</b> 11.X is a superset of <b>DirectX</b> 11.2 {{running on}} the Xbox One. It {{actually}} includes some features, such as draw bundles, that were later announced as part of <b>DirectX</b> 12.|$|E
25|$|<b>DirectX</b> Media: {{comprising}} DirectAnimation for 2D/3D web animation, DirectShow for multimedia playback and streaming media, <b>DirectX</b> Transform for web interactivity, and Direct3D Retained Mode {{for higher}} level 3D graphics. It also contained <b>DirectX</b> plugins for audio signal processing and <b>DirectX</b> Video Acceleration for accelerated video playback. Deprecated {{in favor of}} Media Foundation.|$|E
25|$|In October 2004, DirectShow {{was removed}} from the main <b>DirectX</b> {{distribution}} and relocated to the <b>DirectX</b> Extras download. In April 2005, DirectShow was removed entirely from <b>DirectX</b> and moved to the Windows SDK starting with the Windows Server 2003 SP1 version of the SDK. The <b>DirectX</b> SDK was, however, still required to build some of the DirectShow samples.|$|E
25|$|DirectSetup: for the {{installation}} of <b>DirectX</b> components, and the detection of the current <b>DirectX</b> version.|$|E
25|$|<b>DirectX</b> {{functionality}} {{is provided}} {{in the form of}} COM-style objects and interfaces. Additionally, while not <b>DirectX</b> components themselves, managed objects have been built on top of some parts of <b>DirectX,</b> such as Managed Direct3D and the XNA graphics library on top of Direct3D 9.|$|E
25|$|The <b>DirectX</b> team {{faced the}} {{challenging}} task of testing each <b>DirectX</b> release against {{an array of}} computer hardware and software. A variety of different graphics cards, audio cards, motherboards, CPUs, input devices, games, and other multimedia applications were tested with each beta and final release. The <b>DirectX</b> team also built and distributed tests that allowed the hardware industry to confirm that new hardware designs and driver releases would be compatible with <b>DirectX.</b>|$|E
25|$|In 2002, Microsoft {{released}} <b>DirectX</b> 9 {{with support}} {{for the use of}} much longer shader programs than before with pixel and vertex shader version 2.0. Microsoft has continued to update the <b>DirectX</b> suite since then, introducing Shader Model 3.0 in <b>DirectX</b> 9.0c, released in August 2004.|$|E
25|$|<b>DirectX</b> Diagnostics (DxDiag): a {{tool for}} {{diagnosing}} and generating reports on components related to <b>DirectX,</b> such as audio, video, and input drivers.|$|E
25|$|The {{first version}} of <b>DirectX</b> was {{released}} in September 1995 as the Windows Games SDK. It was the Win32 replacement for the DCI and WinG APIs for Windows 3.1. <b>DirectX</b> allowed all versions of Microsoft Windows, starting with Windows 95, to incorporate high-performance multimedia. Eisler wrote about the frenzy to build <b>DirectX</b> 1 through 5 in his blog.|$|E
25|$|During the GDC 2006, Microsoft {{presented}} the XNA Framework, a new managed version of <b>DirectX</b> (similar but not identical to Managed <b>DirectX)</b> that {{is intended to}} assist development of games by {{making it easier to}} integrate <b>DirectX,</b> High-Level Shader Language (HLSL) and other tools in one package. It also supports the execution of managed code on the Xbox 360. The XNA Game Studio Express RTM was made available on December 11, 2006, as a free download for Windows XP. Unlike the <b>DirectX</b> runtime, Managed <b>DirectX,</b> XNA Framework or the Xbox 360 APIs (XInput, XACT etc.) have not shipped as part of Windows. Developers are expected to redistribute the runtime components along with their games or applications.|$|E
25|$|In <b>DirectX</b> 8, DirectSound and DirectSound3D (DS3D) were officially merged {{and given}} the name <b>DirectX</b> Audio, however the API is still {{commonly}} referred to as DirectSound.|$|E
25|$|ActiveMovie was {{announced}} in March 1996, and released in May 1996, bundled with the beta version of Internet Explorer 3.0. In March 1997, Microsoft announced that ActiveMovie would {{become part of the}} <b>DirectX</b> 5 suite of technologies, and around July started referring to it as DirectShow, reflecting Microsoft's efforts at the time to consolidate technologies that worked directly with hardware under a common naming scheme. DirectShow became a standard component of all Windows operating systems starting with Windows 98; however it is available on Windows 95 by installing the latest available <b>DirectX</b> redistributable. In <b>DirectX</b> version 8.0, DirectShow became part of the mainline distribution of the <b>DirectX</b> SDK and was placed alongside other <b>DirectX</b> APIs.|$|E
25|$|The <b>DirectX</b> {{software}} development kit (SDK) consists of runtime libraries in redistributable binary form, along with accompanying documentation and headers for use in coding. Originally, the runtimes were only installed by games or explicitly by the user. Windows 95 did not launch with <b>DirectX,</b> but <b>DirectX</b> was included with Windows 95 OEM Service Release 2. Windows 98 and Windows NT 4.0 both shipped with <b>DirectX,</b> as has every version of Windows released since. The SDK is available as a free download. While the runtimes are proprietary, closed-source software, source code is provided {{for most of the}} SDK samples. Starting with the release of Windows 8 Developer Preview, <b>DirectX</b> SDK has been integrated into Windows SDK.|$|E
25|$|Another {{major focus}} of the {{expansion}} is to update the game with <b>DirectX</b> 11 support. The <b>DirectX</b> 11 version of the game includes improvements to water physics, light refraction in water, reflections, and visual quality of shadows and textures over the <b>DirectX</b> 9 client. In addition, the new client is less resource-intensive on the graphical processing unit and may improve frame rates. However, there are no current plans to upgrade to <b>DirectX</b> 12. For consoles, the development team committed to maintaining support for the PlayStation 3 client {{through the end of}} the Heavensward patch cycle.|$|E
25|$|Microsoft <b>DirectX,</b> {{a set of}} {{standard}} gaming APIs, stopped being updated on Windows 95 at Version 8.0a. The last version of <b>DirectX</b> supported for Windows 98 and ME is 9.0.|$|E
25|$|At SIGGRAPH 2014, Intel {{released}} a demo showing a computer generated asteroid field, in which <b>DirectX</b> 12 was {{claimed to be}} 50%-70% more efficient than <b>DirectX</b> 11 in rendering speed and CPU power consumption.|$|E
25|$|Various {{releases}} of Windows have included and supported various versions of <b>DirectX,</b> allowing newer {{versions of the}} operating system to continue running applications designed for earlier versions of <b>DirectX</b> until those versions can be gradually phased {{out in favor of}} newer APIs, drivers, and hardware.|$|E
