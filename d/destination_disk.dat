4|4|Public
50|$|Linux systems usually boot {{using either}} the LILO or GRUB bootloaders. These contain lists of {{absolute}} disk sectors in their MBR, {{which must be}} altered by the cloning program if the files they refer to {{are not in the}} same location of the <b>destination</b> <b>disk.</b> For example, if the original boot loader script points to the system being on a disk on channel 0 and the system being of the second partition, the target computer will need to have the same configuration.|$|E
50|$|A disk cloning program {{needs to}} be able to read even {{protected}} operating system files on the source disk, and must guarantee that the system is in a consistent state at the time of reading. It must also overwrite any operating system already present on the <b>destination</b> <b>disk.</b> To simplify these tasks, most disk cloning programs can run under an operating system different from the native operating system of the host computer, for example, MS-DOS or an equivalent such as PC DOS or DR-DOS, or Linux. The computer is booted from this operating system, the cloning program is loaded and copies the computer's file system. Many programs (e.g. Acronis True Image, MiniTool Partition Wizard, Paragon Partition Manager or AOMEI Backupper) can clone a disk, or make an image, from within the running system, with special provision for copying open files; but an image cannot be restored onto the Windows System Drive under Windows.|$|E
5000|$|Pournelle disliked copy {{protection}} and, except for games, refused to review software that used it. He {{did not believe}} that it was useful, writing [...] "For every {{copy protection}} scheme there's a hacker ready to defeat it. Most involve so-called nybble copiers, which try to analyze the original disk and then make a copy". By 1980, the first 'nibble' copier, Locksmith, was introduced for the Apple II. These copiers reproduced copy protected floppy disks an entire track at a time, ignoring how the sectors were marked. This was harder to do than it sounds for two reasons: firstly, Apple disks did not use the index hole to mark the start of a track; their drives could not even detect the index hole. Tracks could thus start anywhere, but the copied track had to have this [...] "write splice", which always caused some bits to be lost or duplicated due to speed variations, roughly in the same (unused for payload data) place as the original, or it would not work. Secondly, Apple used special [...] "self-sync" [...] bytes to achieve agreement between drive controller and computer about where any byte ended and the next one started on the disk. These bytes were written as normal data bytes followed by a slightly longer than normal pause, which was notoriously unreliable to detect on read-back; still, you had to get the self-sync bytes roughly right as without them being present in the right places, the copy would not work, and with them present in too many places, the track would not fit on the <b>destination</b> <b>disk.</b>|$|E
5000|$|An {{attempt to}} copy the entire disk using [...] may omit the final block if it is of an {{unexpected}} length; whereas [...] may succeed. The source and <b>destination</b> <b>disks</b> {{should have the same}} size.|$|R
50|$|The {{simplest}} {{method of}} cloning a disk {{is to have}} both the source and <b>destination</b> <b>disks</b> present in the same machine, but this is often not possible. Disk cloning programs can link two computers by a parallel cable, or save and load images to an external USB drive or network drive. As disk images {{tend to be very}} large (usually a minimum of several hundred MB), performing several clones at a time puts excessive stress on a network. The solution is to use multicast technology. This allows a single image to be sent simultaneously to many machines without putting greater stress on the network than sending an image to a single machine.|$|R
40|$|Writing to disk in a rotationally-optimal {{manner is}} challenging. Much {{of the problem}} arises from the {{traditional}} interface, which demands an exact address for each write. In this project, I change this traditional interface by building what we call Range Writes. A range write takes a data block {{and a list of}} possible <b>destination</b> addresses; the <b>disk</b> then internally chooses the best possible address and writes the data to it, returning the address to the caller when finished. In this project, I explore range writes via a system level storage subsystem simulator â€“ DiskSim. I introduce two type...|$|R
5000|$|By 1980, {{the first}} 'nibble' copier, Locksmith, was introduced. These copiers {{reproduced}} copy protected floppy disks an entire track at a time, ignoring how the sectors were marked. This was {{harder to do}} than it sounds for two reasons: firstly, Apple disks {{did not use the}} index hole to mark the start of a track; their drives could not even detect the index hole. Tracks could thus start anywhere, but the copied track had to have this [...] "write splice", which always caused some bits to be lost or duplicated due to speed variations, roughly in the same (unused for payload data) place as the original, or it would not work. Secondly, Apple used special [...] "self-sync" [...] bytes to achieve agreement between drive controller and computer about where any byte ended and the next one started on the disk. These bytes were written as normal data bytes followed by a slightly longer than normal pause, which was notoriously unreliable to detect on read-back; still, you had to get the self-sync bytes roughly right as without them being present in the right places, the copy would not work, and with them present in too many places, the track would not fit on the <b>destination</b> <b>disk.</b> Locksmith copied Apple II disks by taking advantage of the fact that these sync fields between sectors almost always consisted of a long string of FF (hex) bytes. It found the longest string of FFs, which usually occurred between the last and first sectors on each track, and began writing the track in the middle of that; also it assumed that any long string of FF bytes was a sync sequence and introduced the necessary short pauses after writing each of them to the copy. Ironically, Locksmith would not copy itself. The first Locksmith measured the distance between sector 1 of each track. Copy protection engineers quickly figured out what Locksmith was doing and began to use the same technique to defeat it. Locksmith countered by introducing the ability to reproduce track alignment and prevented itself from being copied by embedding a special sequence of nibbles, that if found, would stop the copy process. Henry Roberts (CTO of Nalpeiron), a graduate student in computer science at the University of South Carolina, reverse engineered Locksmith, found the sequence and distributed the information to some of the 7 or 8 people producing copy protection at the time.|$|E
40|$|Context. Mass {{transfer}} due to Roche lobe overflow {{leads to}} the formation of an accretion disk around a weakly magnetized white dwarf (WD) in cataclysmic variables. At the inner edge of the disk, the gas comes upon the surface of the WD and has to get rid of its excess kinetic energy in order to settle down on the more slowly rotating outer stellar layers. This region is known as the boundary layer (BL). Aims. In this work we investigate the vertical structure of the BL, which is still poorly understood. We shall provide details of the basic structure of the two-dimensional (2 D) BL and how it depends on parameters such as stellar mass and rotation rate, as well as the mass-accretion rate. We further investigate the <b>destination</b> of the <b>disk</b> material and compare our results with previous one-dimensional (1 D) simulations. Methods. We solve the 2 D equations of radiation hydrodynamics in a spherical geometry using a parallel grid-based code that employs a Riemann solver. The radiation energy is considered in the two-temperature approach with a radiative flux given by the flux-limited diffusion approximation. Results. The BL around a non-rotating WD is characterized by a steep drop in angular velocity over a width of only 1 % of the stellar radius, a heavy depletion of mass, and a high temperature (500 000 K) {{as a consequence of the}} strong shear. Variations in Om_star, M_star, and M_dot influence the extent of the changes of the variables in the BL but not the general structure. Depending on Om_star, the disk material travels up to the poles or is halted at a certain latitude. The extent of mixing with the stellar material also depends on Om_star. We find that the 1 D approximation matches the 2 D data well, apart from an underestimated temperature. Comment: 15 pages, 9 figures, accepted for publication in Astronomy & Astrophysic...|$|R

