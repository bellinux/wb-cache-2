8|30|Public
5000|$|Acopia Networks (<b>file</b> <b>virtualization)</b> for USD $210 {{million in}} 2007 ...|$|E
50|$|Similarly, {{application}} virtualization redirects all of an application's invalid Registry {{operations to}} a location {{such as a}} file. Used together with <b>file</b> <b>virtualization,</b> this allows applications to run on a machine without being installed on it.|$|E
50|$|Network file {{management}} (NFM) is a data storage management-related category that was identified and defined in 2004 by several prominent data storage analysts. The term is used interchangeably with NAS virtualization and <b>file</b> <b>virtualization</b> among data storage industry press, analysts and system administrators.|$|E
5000|$|Microsoft Application <b>Virtualization</b> <b>File</b> Format Specification v1 ...|$|R
5000|$|QNAP Systems, Inc. (...) is a Taiwanese {{corporation}} {{that specializes in}} providing networked solutions for <b>file</b> sharing, <b>virtualization,</b> storage management and surveillance applications to address corporate, SMB, SOHO and home user needs.|$|R
50|$|Bromium's {{technology}} is called micro-virtualization, and it's {{designed to protect}} computers from malicious code execution initiated by the end user, including rogue web links, email attachments and other <b>files.</b> Its <b>virtualization</b> technology relies on hardware isolation for protection.|$|R
5000|$|<b>File</b> <b>virtualization</b> {{addresses}} the NAS challenges {{by eliminating the}} dependencies between the data accessed at the file level and the location where the files are physically stored. This provides opportunities to optimize storage use and server consolidation and to perform non-disruptive file migrations.|$|E
5000|$|As {{with most}} other {{virtualization}} designs, [...] "a primary driver behind <b>file</b> <b>virtualization</b> {{is the desire}} to shield users and administrators from {{the complexity of the}} underlying storage environment. Other goals include simplified management, more efficient capacity usage and allocation, and reduced management costs".|$|E
50|$|In computing, <b>file</b> <b>{{virtualization}}</b> is a {{field of}} storage virtualization operating on computer file level. It involves uniting multiple storage devices into a single logical pool of file. It is {{a vital part of}} both file area network (FAN) and network file management (NFM) concepts.|$|E
40|$|Abstract—Traditional file systems made it {{possible}} for administrators to create file volumes, on a one-file-volume-per-disk basis. With the advent of RAID algorithms and their integration at the block level, this “one file volume per disk ” bond forced administrators to create a single, shared file volume across all users to maximize storage efficiency, thereby complicating administration. To simplify administration, and to introduce new functionalities, <b>file</b> volume <b>virtualization</b> support was added at the block level. This new virtualization engine is commonly referred to as the volume manager, and the resulting arrangement, with volume managers operating below file systems, has been referred to as the traditional storage stack. In this paper, we present several problems associated with the compatibility-driven integration of <b>file</b> volume <b>virtualization</b> at the block level. In earlier work, we presented Loris, a reliable, modular storage stack, that solved several problems with the traditional storage stack by design. In this paper, we extend Loris to support <b>file</b> volume <b>virtualization.</b> In doing so, we first present “File pools”, our novel storage model to simplify storage administration, and support efficient <b>file</b> volume <b>virtualization.</b> Following this, we will describe how our single unified virtualization infrastructure, with a modular division of labor, is used to support several new functionalities like 1) instantaneous snapshoting of both files and file volumes, 2) efficient snapshot deletion through information sharing, and 3) open-close versioning of files. We then present “Version directories, ” our unified interface for browsing file history information. Finally, we will evaluate the infrastructure, and provide an in-depth comparison of our approach with other competing approaches. I...|$|R
50|$|The data defined storage {{term was}} used for object storage with open {{protocol}} access for <b>file</b> system <b>virtualization,</b> such as CIFS, NFS, FTP as well as REST APIs and other cloud protocols such as Amazon S3, CDMI and OpenStack.|$|R
40|$|Welcome to ECE 353 ! The goal of {{this course}} is to have {{students}} understand and appreciate the principles {{in the design and}} implementation of operating systems software. Topics include: Introduction to operating systems concepts, process management, memory management, <b>file</b> systems, <b>virtualization,</b> fault tolerance, atomicity and consistency. The laboratory exercises will require implementing a simple operatin...|$|R
50|$|In 2002 Lynch left Cisco {{to found}} Acopia Networks with Chin-Cheng Wu. Acopia {{would go on}} to become a leading {{provider}} of high-performance intelligent <b>file</b> <b>virtualization</b> services. The company focused on storage virtualization and the eliminating time and disruption associated with storage-related tasks. Lynch served as CEO and the company was acquired by F5 Networks in 2007 for $210 million. At F5 he was Senior Vice President of Data Solutions.|$|E
40|$|Faster {{deployments}} · �Dynamic {{data management}} · �Secure and scalable virtualization · �Improved performance and availability As a Dell Global Preferred Partner, F 5 technologies are integrated into key Dell enterprise solutions. Both F 5 and Dell have strong partnerships with Microsoft, Oracle, and VMware, {{and continue to}} invest in joint development of total enterprise application solutions. Simplified Data Management, Improved Availability F 5 and Dell keep your data center productive and flexible enough to support virtualization on your existing IT infrastructure, without added complexity. F 5 technologies are {{a critical component of}} the Dell Enterprise solution portfolio, and optimize network, server, and storage environments to ensure the highest performance, security, and availability at the lowest possible cost. For example, F 5 ® BIG-IP ® Application Delivery Networking systems and F 5 ARX ® Series intelligent <b>file</b> <b>virtualization</b> devices work with Dell server and storage platforms. Together, these technologies help organizations securely and cost-effectively provide the <b>file</b> <b>virtualization</b> that supports flexible data mobility—and the necessary business continuity for high enterprise-application availability. Automated and intelligent management policies support simplified data management. ...|$|E
5000|$|A [...] "Services" [...] tab to {{view and}} modify {{currently}} running Windows services and {{start and stop}} any service as well as enable/disable the User Account Control (UAC) <b>file</b> and registry <b>virtualization</b> of a process.|$|R
40|$|This is an {{introductory}} course to cloud computing. In this course, we will explore a few aspects of cloud computing: distributed data crunching with MapReduce, cloud and datacenter <b>file</b> systems, <b>virtualization,</b> cloud security and privacy, Amazon Web Services, Google App Engine and interactive web applications. Students {{are expected to}} read extra materials including papers and online resources, finish a number of mini projects, and take the final exam. Participation in the class discussion is strongly encouraged. Guest speakers might be invited for some particular topics...|$|R
40|$|At The Aerospace Corporation, we run a large FreeBSD based {{computing}} {{cluster to}} support engineering applications. These applications {{come in all}} shapes, sizes, and qualities of implementation. To support them and our diverse userbase we have been searching for ways to isolate jobs from one another {{in ways that are}} more effective than Unix time sharing and more fine grained than allocating whole nodes to jobs. In this paper we discuss the problem space and our efforts so far. These efforts include implementation of partial <b>file</b> systems <b>virtualization</b> and CPU isolation using CPU sets...|$|R
40|$|Virtualization {{has been}} widely adopted in current {{computer}} systems. A key part of virtualization is a hypervisor, which virtualizes physical resources to be shared among multiple guest virtual machines (VMs). Configuration files and security policy files used by the hypervisor control VMs' behavior. If these critical files are tampered with, all the VMs that run on the same hypervisor will be affected. This paper presents hGuard, a framework to measure hypervisor critical files. Each time a critical file is updated, its hash is stored into a non-volatile storage of the trusted chip. When a critical file is loaded into memory, a measurement module computes its hash and a validation module checks its integrity by comparing this hash with that stored in the non-volatile storage. Only if {{they are the same}} could the files be used and continuous operation will be allowed. The experiment shows that hGuard can detect illegal modification of hypervisor critical <b>files.</b> <b>Virtualization</b> {{has been widely}} adopted in current computer systems. A key part of virtualization is a hypervisor, which virtualizes physical resources to be shared among multiple guest virtual machines (VMs). Configuration files and security policy files used by the hypervisor control VMs' behavior. If these critical files are tampered with, all the VMs that run on the same hypervisor will be affected. This paper presents hGuard, a framework to measure hypervisor critical files. Each time a critical file is updated, its hash is stored into a non-volatile storage of the trusted chip. When a critical file is loaded into memory, a measurement module computes its hash and a validation module checks its integrity by comparing this hash with that stored in the non-volatile storage. Only if they are the same could the files be used and continuous operation will be allowed. The experiment shows that hGuard can detect illegal modification of hypervisor critical files...|$|R
5000|$|Windows Task Manager {{has a new}} [...] "Services" [...] tab {{which gives}} access {{to the list of}} all Windows services, and offers the ability to start and stop any service as well as enable/disable the UAC <b>file</b> and {{registry}} <b>virtualization</b> of a process. Additionally, file properties, the full path and command line of started processes, and DEP status of processes can be viewed. It also allows creating a dump file which can be useful for debugging.|$|R
50|$|If Windows is {{installed}} on an NTFS volume, by default, the 'Program Files' folder {{can only be}} modified {{by members of the}} 'Administrators' user groups. This can be an issue for programs created for Windows 9x. Those operating systems had no file system security, and programs could therefore also store their data in 'Program Files'. Programs that store their data in 'Program Files' will usually not run correctly on Windows NT systems with normal user privileges unless security is lowered for the affected subdirectories. Windows Vista addressed this issue by introducing <b>File</b> and Registry <b>Virtualization.</b>|$|R
50|$|With {{its various}} tracer plugins, ftrace can be {{targeted}} at different static tracepoints, such as scheduling events, interrupts, memory-mapped I/O, CPU power state transitions, and operations related to <b>file</b> systems and <b>virtualization.</b> Also, dynamic tracking of kernel function calls is available, optionally restrictable to {{a subset of}} functions by using globs, and with the possibility to generate call graphs and provide stack usage reports. At the same time, ftrace {{can be used to}} measure various latencies within the Linux kernel, such as for how long interrupts or preemption are disabled.|$|R
40|$|This paper {{presents}} a data management solution which allows fast Virtual Machine (VM) instantiation and efficient run-time execution to support VMs as execution environments in Grid computing. It {{is based on}} novel distributed <b>file</b> system <b>virtualization</b> techniques and is unique in that: 1) it provides on-demand access to VM state for unmodified VM monitors; 2) it supports user-level and write-back disk caches, per-application caching policies and middleware-driven consistency models; and 3) it supports the use of meta-data associated with files to expedite data transfers. The paper reports on its performance in a WAN setup using VMware-based VMs. Results show that the solution delivers performance over 30 % better than native NFS and can bring application-perceived overheads below 10 % relatively to a local disk setup. The solution also allows a VM with 1. 6 GB virtual disk and 320 MB virtual memory to be cloned within 160 seconds when it is first instantiated (and within 25 seconds for subsequent clones). 1...|$|R
5000|$|Applications {{written with}} the {{assumption}} that the user will be running with administrator privileges experienced problems in earlier versions of Windows when run from limited user accounts, often because they attempted to write to machine-wide or system directories (such as Program Files) or registry keys (notably HKLM) UAC attempts to alleviate this using <b>File</b> and Registry <b>Virtualization,</b> which redirects writes (and subsequent reads) to a per-user location within the user’s profile. For example, if an application attempts to write to “C:\program files\appname\settings.ini” and the user doesn’t have permissions to write to that directory, the write will get redirected to “C:\Users\username\AppData\Local\VirtualStore\Program Files\appname\.” ...|$|R
40|$|As users {{interact}} with the world and their peers through their computers, it is becoming important to archive and later search {{the information that they}} have viewed. We present DejaView, a personal virtual computer recorder that provides a complete record of a desktop computing experience that a user can playback, browse, search, and revive seamlessly. DejaView records visual output, checkpoints corresponding application and file system state, and captures displayed text with contextual information to index the record. A user can then browse and search the record for any visual information that has been displayed on the desktop, and revive and {{interact with}} the desktop computing state corresponding to any point in the record. DejaView combines display, operating system, and <b>file</b> system <b>virtualization</b> to provide its functionality transparently without any modifications to applications, window systems, or operating system kernels. We have implemented DejaView and evaluated its performance on real-world desktop applications. Our results demonstrate that DejaView can provide continuous low-overhead recording without any user noticeable performance degradation, and allows browsing, search and playback of records fast enough for interactive use...|$|R
40|$|Abstract. This paper {{presents}} a data management solution which allows fast Virtual Machine (VM) instantiation and efficient run-time execution to support VMs as execution environments in Grid computing. It {{is based on}} novel distributed <b>file</b> system <b>virtualization</b> techniques and is unique in that: (1) it provides on-demand cross-domain access to VM state for unmodified VM monitors; (2) it enables private file system channels for VM instantiation by secure tunneling and session-key based authentication; (3) it supports user-level and write-back disk caches, per-application caching policies and middleware-driven consistency models; and (4) it leverages application-specific meta-data associated with files to expedite data transfers. The paper reports on its performance in wide-area setups using VMware-based VMs. Results show that the solution delivers performance over 30 % better than native NFS and with warm caches it can bring the application-perceived overheads below 10 % compared to a local-disk setup. The solution also allows a VM with 1. 6 GB virtual disk and 320 MB virtual memory to be cloned within 160 seconds for the first clone and within 25 seconds for subsequent clones...|$|R
40|$|MBA Professional ReportApproved {{for public}} release, {{distribution}} unlimitedVirtualization {{is the use}} of a software application to emulate the physical performance of a computer, including the Central Processing Unit (CPU), storage, network device, Random Access Memory (RAM), and Operating System (OS) through executable data <b>files.</b> The <b>virtualization</b> software application allows for multiple virtual machines to exist on a single set of physical hardware. This technology can increase the flexibility of the hardware while reducing hardware configuration time. Virtualization technology will improve the Department of Defense (DoD) system of systems (SoS) Test and Evaluation (T and E) process. The implementation of virtualized systems within SoS will create three primary benefits. First, test personnel can improve configuration management for all component systems. Second, test personnel can reduce test environment setup time. Third, test personnel can improve the scalability of SoS architectures. The success of a DoD information system depends on its ability to meet the established criteria of cost, schedule, and performance. By appropriately integrating virtualization technology into the SoS T and E process, system program managers can improve the likelihood of meeting these criteria. Major, United States Marine Corp...|$|R
5000|$|There {{have been}} {{complaints}} that UAC notifications slow down various tasks {{on the computer}} such as the initial installation of software onto Windows Vista. [...] It is possible to turn off UAC while installing software, and re-enable it at a later time. [...] However, this is not recommended since, as <b>File</b> & Registry <b>Virtualization</b> is only active when UAC is turned on, user settings and configuration files may be installed to a different place (a system directory rather than a user-specific directory) if UAC is switched off {{than they would be}} otherwise. [...] Also Internet Explorer 7's [...] "Protected Mode", whereby the browser runs in a sandbox with lower privileges than the standard user, relies on UAC; and will not function if UAC is disabled.|$|R
40|$|Abstract — The aim of Orion is to {{implement}} a solution that provides file-level host-based virtualization that provides for better aggregation of content/information based on semantics and properties. File-system organization today very closely mirrors storage paradigms rather than useraccess paradigms and semantic grouping. All file-system hierarchies are containers that are expressed based on their physical presence (a separate drive letter on Windows, or a particular mount point based on the volume in Unix). We have implemented a solution that will allow users to organize their files based on their convenience. We define this convenience in the following forms: * The ability to organize the namespace based on certain attribute properties (file-system metadata virtualization) * The ability to de-link position of a file in the hierarchy from its actual storage (<b>file</b> metadata <b>virtualization)</b> * The ability to create and manipulate namespaces using well-known metaphors (XML schema descriptions and schema editors) * The ability to continue using the standard metaphors for manipulation and access to information (file-system kernel API’s), thus maintaining current large body of applications unbroken) Currently, no other solution allows users to organize their files using convenient semantic groupings while continuing to use standard applications. This solution is unique {{in the sense that}} it allows flexible namespace construction using XML. 1...|$|R
2500|$|Applications {{written with}} the {{assumption}} that the user will be running with administrator privileges experienced problems in earlier versions of Windows when run from limited user accounts, often because they attempted to write to machine-wide or system directories (such as Program Files) or registry keys (notably HKLM). UAC attempts to alleviate this using <b>File</b> and Registry <b>Virtualization,</b> which redirects writes (and subsequent reads) to a per-user location within the user's profile. For example, if an application attempts to write to a directory such as [...] "C:\Program Files\appname\settings.ini" [...] to which the user does not have write permission, the write will be redirected to [...] "C:\Users\username\AppData\Local\VirtualStore\Program Files\appname\settings.ini". The redirection feature is only provided for non-elevated 32-bit applications, and only if they do not include a manifest that requests specific privileges.|$|R
40|$|Abstract—Desktop Cloud {{can enhance}} {{business}} agility {{and reduce the}} total-cost-of-ownership, it introduces long network latencies {{and the power of}} local PCs cannot be utilized fully. This paper presents a light-weight mode for desktop cloud, which stores legacy desktop software in the cloud storage while streaming and running them on the user’s PC locally. In details, based on the light-weight virtualization, software can be converted into portable counterparts and stored in the cloud. Moreover, a run-time system is implemented, including a user-space file-system for cloud, to stream and run the remote software on local machines. Local cache and data pre-fetch mechanisms are also adjusted to suit the file-access-pattern of software. This prototype has been implemented and tests show it is practical for much daily-used software. Keywords- Cloud computing; user-space <b>file</b> system; OS-level <b>virtualization</b> I...|$|R
5000|$|Applications {{written with}} the {{assumption}} that the user will be running with administrator privileges experienced problems in earlier versions of Windows when run from limited user accounts, often because they attempted to write to machine-wide or system directories (such as Program Files) or registry keys (notably HKLM). UAC attempts to alleviate this using <b>File</b> and Registry <b>Virtualization,</b> which redirects writes (and subsequent reads) to a per-user location within the user's profile. For example, if an application attempts to write to a directory such as [...] "C:\Program Files\appname\settings.ini" [...] to which the user does not have write permission, the write will be redirected to [...] "C:\Users\username\AppData\Local\VirtualStore\Program Files\appname\settings.ini". The redirection feature is only provided for non-elevated 32-bit applications, and only if they do not include a manifest that requests specific privileges.|$|R
40|$|Personal {{computers}} have diverse and fast-evolving I/O devices, making their I/O virtualization {{different from that}} of servers and data centers. In this paper, we present our recent endeavors in simplifying I/O virtu-alization for personal computers. Our key insight is that many operating systems, including Unix-like ones, abstract I/O devices as device files. There is a small and stable set of operations on device <b>files,</b> therefore, I/O <b>virtualization</b> at the device file boundary requires a one-time effort to support various I/O devices. We present devirtualization, our design of I/O virtu-alization at the device file boundary and its implemen-tation for Linux/x 86 systems. We are able to virtualize various GPUs, input devices, cameras, and audio de-vices with fewer than 4900 LoC, of which only about 300 are specific to I/O device classes. Our measure-ments show that devirtualized devices achieve interac-tive performance indistinguishable from native ones by human users, even when running 3 D HD games. ...|$|R
40|$|Mobile {{virtualization}} introduces extra layers {{in software}} stacks, {{which leads to}} performance degradation. Especially, each I/O operation has to pass through several software layers to reach the NAND-flash-based storage systems. This paper targets at optimizing I/O for mobile virtualization, since I/O becomes one of major performance bottlenecks that seriously affects the performance of mobile devices. Among all the I/O operations, a large percentage is updating metadata. Frequent updating metadata not only degrades overall I/O performance but also severely reduces flash memory lifetime. In this paper, we propose a novel I/O optimization techniqueto identify the metadata of a guest file system which is storedin a VM (Virtual Machine) image file and frequently updated. Then, these metadata are stored in a small additional NVM(Non-Volatile Memory) which is faster and more endurableto greatly improve flash memory's performance and lifetime. To {{the best of our}} knowledge, this is the first work to identifythe file system metadata from regular data in a guest OS VMimage <b>file</b> under mobile <b>virtualization.</b> The proposed schemeis evaluated on a real hardware embedded platform. Theexperimental results show that the proposed techniques canimprove write performance to 45. 21 % in mobile devices withvirtualization. Department of Computin...|$|R
40|$|Cloud {{computing}} is {{the delivery}} of computer resources over a network through web services, while the actual physical location and organization of the equipment hosting these resources are unknown to the users. Cloud computing strategy is subjected to many enablers. Interpretive structural modeling is a well proven tool for finding the interrelationship among the enablers. Total Interpretive structural model is an essential innovative version of interpretive structural modeling technique(ISM). In Total Interpretive Structural Modeling (TISM), influence/enhancement of enablers and their interrelationship is considered. Total interpretive structural model steps are identification of elements, pair-wise comparison, level partition, interaction formation, diagraph representation and formation of total interpretive structural model. The methodology of TISM is used to delineate the hierarchical relationship of enablers of cloud computing. Cloud computing {{is based on the}} concept of virtual machines. Hardware cost can be reduced by using virtualization. Different types of virtualization are operating system –level virtualization, application virtualization, service virtualization, memory virtualization, storage <b>virtualization,</b> virtual <b>file</b> system, data <b>virtualization</b> etc. Lack of trust between cloud users and providers has hindered the universal acceptance of cloud as outsourced computing services. T...|$|R
5000|$|Yankee Group analyst Andrew Jaquith said, {{six months}} before Vista was released, that [...] "while the new {{security}} system shows promise, it is far too chatty and annoying." [...] By the time Windows Vista was released in November 2006, Microsoft had drastically {{reduced the number of}} operating system tasks that triggered UAC prompts, and added <b>file</b> and registry <b>virtualization</b> {{to reduce the number of}} legacy applications that triggered UAC prompts. However, David Cross, a product unit manager at Microsoft, stated during the RSA Conference 2008 that UAC was in fact designed to [...] "annoy users," [...] and force independent software vendors to make their programs more secure so that UAC prompts would not be triggered. Software written for Windows XP, and many peripherals, would no longer work in Windows Vista or 7 due to the extensive changes made in the introduction of UAC. The compatibility options were also insufficient. In response to these criticisms, Microsoft altered UAC activity in Windows 7. For example, by default users are not prompted to confirm many actions initiated with the mouse and keyboard alone such as operating Control Panel applets.|$|R
40|$|Continuing {{advances}} in hardware technology have enabled {{the proliferation of}} faster, cheaper, and more capable personal computers. Users of all backgrounds rely on their computers to handle ever-expanding information, communication, and computation needs. As users spend more time interacting with their computers, {{it is becoming increasingly}} important to archive and later search the knowledge, ideas and information that they have viewed through their computers. However, existing state-of-the-art web and desktop search tools fail to provide a suitable solution, as they focus on static, accessible documents in isolation. Thus, finding the information one has viewed among the ever-increasing and chaotic sea of data available from a computer remains a challenge. This dissertation introduces DejaView, a personal virtual computer recorder that enhances personal computers with the ability to process display-centric content to help users with all the information they see through their computers. DejaView continuously records a user's session to provide a complete WYSIWYS (What You Search Is What You've Seen) record of a desktop computing experience, enabling users to playback, browse, search, and revive records, making it easier to retrieve and interact with information they have seen before. DejaView records visual output, checkpoints corresponding application and file system states, and captures onscreen text with contextual information to index the record. A user can then browse and search the record for any visual information that has been previously displayed on the desktop, and revive and interact with the desktop computing state corresponding to any point in the record. DejaView introduces new, transparent operating system, display and <b>file</b> system <b>virtualization</b> techniques and novel semantic display-centric information recording, and combines them to provide its functionality without any modifications to applications, window systems, or operating system kernels. Our results demonstrate that DejaView can provide continuous low-overhead recording without any user-noticeable performance degradation, and allows users to playback, browse, search, and time-travel back to records fast enough for interactive use. This dissertation also demonstrates how DejaView's execution virtualization and recording extend beyond the desktop recorder context. We introduce a coordinated, parallel checkpoint-restart mechanism for distributed applications that minimizes synchronization overhead and uniquely supports complete checkpoint and restart of network state in a transport protocol independent manner, for both reliable and unreliable protocols. We introduce a scalable system that enables significant energy saving by migrating network state and applications off of idle hosts allowing the hosts to enter low-power suspend state, while preserving their network presence. Finally, we show how our techniques can be integrated into a commodity operating system, mainline Linux, thereby allowing the entire operating systems community to benefit from mature checkpoint-restart that is transparent, secure, reliable, efficient, and integral to the Linux kernel...|$|R
