281|6087|Public
25|$|Alpha, {{originally}} {{known as}} Alpha AXP, is a 64-bit reduced instruction set computing (RISC) <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA)</b> developed by Digital Equipment Corporation (DEC), designed to replace their 32-bit VAX {{complex instruction set computer}} (CISC) ISA. Alpha was implemented in microprocessors originally developed and fabricated by DEC. These microprocessors were most prominently {{used in a}} variety of DEC workstations and servers, which eventually formed the basis for almost all of their mid-to-upper-scale lineup. Several third-party vendors also produced Alpha systems, including PC form factor motherboards.|$|E
25|$|MIPS is {{a reduced}} {{instruction}} set computer (RISC) <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA)</b> developed by MIPS Technologies (formerly MIPS Computer Systems). The early MIPS architectures were 32-bit, with 64-bit versions added later. There are multiple versions of MIPS: including MIPS I, II, III, IV, and V; {{as well as}} five releases of MIPS32/64 (for 32- and 64-bit implementations, respectively). As of April 2017, the current version is MIPS32/64 Release 6. MIPS32/64 primarily differs from MIPS IV by defining the privileged kernel mode System Control Coprocessor in addition to the user mode architecture.|$|E
2500|$|Since 2010 a new {{open source}} <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA),</b> RISC-V, {{has been under}} {{development}} at the University of California, Berkeley, for research purposes and as a free alternative to proprietary ISAs. As of 2014, version 2 of the user space ISA is fixed. [...] The ISA {{is designed to be}} extensible from a barebones core sufficient for a small embedded processor to supercomputer and cloud computing use with standard and chip designer defined extensions and coprocessors. It has been tested in silicon design with the ROCKET SoC which is also available as an open source processor generator in the CHISEL language.|$|E
50|$|As {{with the}} entire Java Development Kit (JDK), HotSpot is {{supported}} by Oracle Corporation on Windows, Linux, macOS, and Solaris. Supported <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISAs)</b> are IA-32, x86-64, ARMv7 VFP, ARMv8 and SPARC (Solaris only).|$|R
50|$|On Windows NT {{operating}} systems, PE currently {{supports the}} IA-32, IA-64, x86-64 (AMD64/Intel 64), and ARM <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISAs).</b> Prior to Windows 2000, Windows NT (and thus PE) supported the MIPS, Alpha, and PowerPC ISAs. Because PE {{is used on}} Windows CE, it continues to support several variants of the MIPS, ARM (including Thumb), and SuperH ISAs.|$|R
40|$|Previous {{research}} has shown that Explicit Data Graph Execution (EDGE) <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISA)</b> allow for power efficient performance scaling. In this paper we describe the preliminary design of a new dynamic multicore processor called E 2 that utilizes an EDGE ISA to allow for the dynamic composition of physical cores into logical processors. We provide details of E 2 â€™s support for dynamic reconfigurability and show how the EDGE ISA facilities outof-order vector execution...|$|R
2500|$|A reduced {{instruction}} set computer, or RISC (pronounced 'risk', [...] ), is one whose <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA)</b> has {{a set of}} attributes that allows it to have a lower cycles per instruction (CPI) than a complex {{instruction set}} computer (CISC). Various suggestions have been made regarding a precise definition of RISC, but the general concept is that of a computer that has a small set of simple and general instructions, rather than a large set of complex and specialized instructions. Another common RISC trait is their load/store architecture, where memory is only accessed through specific instructions, rather than as a part of most instructions.|$|E
5000|$|MIL-STD-1750A, an <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA)</b> for {{airborne}} computers ...|$|E
50|$|These {{microprocessors}} {{implement the}} MIPS IV <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA).</b>|$|E
50|$|The Crusoe is {{a family}} of x86-compatible {{microprocessors}} developed by Transmeta and introduced in 2000. Crusoe was notable for its method of achieving x86 compatibility. Instead of the <b>instruction</b> <b>set</b> <b>architecture</b> being implemented in hardware, or translated by specialized hardware, the Crusoe runs a software abstraction layer, or a virtual machine, known as the Code Morphing Software (CMS). The CMS translates machine code instructions received from programs into native instructions for the microprocessor. In this way, the Crusoe can emulate other <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISAs).</b>|$|R
50|$|Buildroot is {{primarily}} {{intended to be}} used with small or embedded systems based on various computer <b>architectures</b> and <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISAs),</b> including x86, ARM, MIPS and PowerPC. Numerous architectures and their variants are supported; Buildroot also comes with default configurations for several off-the-shelf available embedded boards, such as Cubieboard, Raspberry Pi and SheevaPlug. Several third-party projects and products use Buildroot as the basis for their build systems, including the OpenWrt project that creates an embedded operating system, and firmware for the customer-premises equipment (CPE) used by the Google Fiber broadband service.|$|R
5000|$|<b>Instruction</b> <b>Set</b> <b>Architecture,</b> or <b>ISA.</b> The ISA {{defines the}} machine code that a {{processor}} reads and acts upon {{as well as}} the word size, memory address modes, processor registers, and data type.|$|R
5000|$|... compact {{baseline}} <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA),</b> including freely-mixed 16-bit and 32-bit encodings {{for maximum}} code density ...|$|E
50|$|The Multimedia Acceleration eXtensions or MAX are {{instruction}} set extensions to the Hewlett-Packard PA-RISC <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA).</b>|$|E
5000|$|Can provide {{emulated}} hardware environments {{different from}} the host's <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA),</b> through emulation or by using just-in-time compilation.|$|E
40|$|Advancements in {{multi-core}} {{have created}} interest among many research groups {{in finding out}} ways to harness the true power of processor cores. Recent research suggests that on-board component such as cache memory {{plays a crucial role}} in deciding the performance of multi-core systems. In this paper, performance of cache memory is evaluated through the parameters such as cache access time, miss rate and miss penalty. The influence of cache parameters over execution time is also discussed. Results obtained from simulated studies of multi-core environments with different <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISA)</b> like ALPHA and X 86 are produced. Comment: 13 pages, 8 figure...|$|R
40|$|The use of code {{compression}} in {{embedded systems}} based on standard RISC <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISA)</b> {{has been shown}} in the past to be of benefit in reducing overall system cost. The 16 -bit THUMB ISA from ARM Ltd has a significantly higher density than the original 32 -bits ARM ISA. In this paper we propose a new memory compression architecture, which employs a lossless data compression algorithm to achieve a further size reduction of around 20 % on the THUMB code. We show that in some applications, the decompression can be performed in software on the main system processor without excessive processing time overheads...|$|R
40|$|The {{increasing}} {{gap between}} CPU and memory performance {{forces us to}} reevaluate design choices {{made in the past}} to optimize the CPU-memory interface. Ideally, all CPU operand traffic would remain on-chip. It is obviously not feasible to have the number of registers be on the order of main memory size and {{it is not clear that}} increasing L 1 cache sizes has significant benefit. [10] Current <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISAs)</b> provide at most 32 registers for the software to explicitly manage. There have been proposals to increase the number of registers, but it is not clear that more registers are useful, as traditional optimizations/transformations and register allocators were not designed to take advantage of a large number of registers...|$|R
5000|$|RISC-V (pronounced [...] "risk-five") {{is an open}} <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA)</b> {{based on}} {{established}} reduced instruction set computing (RISC) principles.|$|E
50|$|The Alpha 21264 is a Digital Equipment Corporation RISC {{microprocessor}} {{introduced in}} October, 1996. The 21264 implemented the Alpha <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA).</b>|$|E
50|$|The Amber project {{provides}} {{two versions}} of the core. Both cores implement the same <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA)</b> and are fully software compatible.|$|E
40|$|The HOL 4 {{interactive}} {{theorem prover}} provides a sound logical environment for reasoning about machine-code programs. The rigour of HOL's LCF-style kernel naturally guarantees {{very high levels}} of assurance, but it does present challenges when it comes implementing efficient proof tools. This paper presents improvements {{that have been made}} to our methodology for soundly decompiling machine-code programs to functions expressed in HOL logic. These advancements have been facilitated by the development of a domain specific language, called L 3, for the specification of <b>Instruction</b> <b>Set</b> <b>Architectures</b> (<b>ISAs).</b> As a result of these improvements, decompilation is faster (on average by one to two orders of magnitude), the <b>instruction</b> <b>set</b> specifications are easier to write, and the proof tools are easier to maintain...|$|R
40|$|We {{propose a}} method to {{precisely}} model implementations of <b>Instruction</b> <b>Set</b> <b>Architectures</b> (<b>ISA)</b> using term rewriting systems (TRS). Our method facilitates understanding of important micro-architectural differences without delving into low-level implementation details. More importantly, the use of TRS allows us to prove rigorously the equivalence of different implementations. We first define AX, a simple RISC ISA, by specifying its operational semantics using a simple in-order execution model. We then give an AX implementation which uses register renaming and permits out-of-order instruction execution. The equivalence of the two models is proved by showing that the two TRS's can simulate each other. 1 Introduction Modern microprocessors embody increasingly complex micro-architectures to achieve high performance. Optimization techniques such as out-of-order and speculative execution, write buffers and split-phase bus transactions, can make the semantics of certain instructions difficult [...] ...|$|R
40|$|We {{study the}} {{applicability}} of the logic of Positive Equality with Uninterpreted Functions (PEUF) [2][3] to the verification of pipelined microprocessors with very large <b>Instruction</b> <b>Set</b> <b>Architectures</b> (<b>ISAs).</b> Abstraction of memory arrays and functional units is employed, while the control logic of the processors is kept intact from the original gate-level designs. PEUF is an extension of the logic of Equality with Uninterpreted Functions, introduced by Burch and Dill [4], that allows us to use distinct constants for the data operands and instruction addresses needed in the symbolic expression for the correctness criterion. We present several techniques that make PEUF scale very efficiently for the verification of pipelined microprocessors with large ISAs. These techniques are based on allowing a limited form of non-consistency in the uninterpreted functions, representin...|$|R
5000|$|The hyperSPARC, code-named [...] "Pinnacle", is a {{microprocessor}} that implements the SPARC Version 8 <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA)</b> developed by Ross Technology for Cypress Semiconductor.|$|E
50|$|The VAX 8000 is a {{discontinued}} {{family of}} minicomputers developed and manufactured by Digital Equipment Corporation (DEC) using processors implementing the VAX <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA).</b>|$|E
50|$|POWER is {{a reduced}} {{instruction}} set computer (RISC) <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA)</b> developed by IBM. The name is {{an acronym for}} Performance Optimization With Enhanced RISC.|$|E
50|$|A general {{protection}} fault (GPF) in the Intel x86 and AMD x86-64 <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISAs),</b> {{as well as}} other ISAs, is a fault (a type of interrupt) initiated by ISA-defined protection mechanisms in response to an access violation caused by some running code, either in the kernel or a user program. The mechanism is first described in Intel manuals and datasheets for the 80286 CPU, which was introduced in 1983; it is also described in section 9.8.13 in the Intel 80386 programmer's reference manual from 1986. A {{general protection}} fault is implemented as an interrupt (vector number 13 in decimal) in both the x86 and the AMD64 architectures. Some operating systems may also classify some exceptions not related to access violations, such as illegal opcode exceptions, as general protection faults, even though they {{have nothing to do with}} memory protection.|$|R
30|$|The {{recently}} proposed reactive processing architectures {{are characterized}} by <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISAs)</b> that directly support reactive control fow including concurrency and preemption. These architectures provide efficient execution platforms for reactive synchronous programs; however, they do require novel compiler technologies, notably {{with respect to the}} handling of concurrency. Another key quality of the reactive architectures is that they have very predictable timing properties, which make it feasible to analyze their worst-case reaction time (WCRT). We present an approach to compile programs written in the synchronous language Esterel onto a reactive processing architecture that handles concurrency via priority-based multithreading. Building on this compilation approach, we also present a procedure for statically determining tight, safe upper bounds on the WCRT. Experimental results indicate the practicality of this approach, with WCRT estimates to be accurate within 22 % on average.|$|R
40|$|Binary {{translation}} {{acts as a}} main {{method used}} to solve software compatibility among different <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISAs),</b> yet the main objects that the binary translator deals with are serial programs but not parallel programs. We propose a hybrid method combining local library replacement and instruction translation based on a formal model built to describe the equivalent when migrating MPI programs between different clusters. The shared codes in a MPI program (MPI library function call) are treated by executing local libraries, and the other parts are done by dynamic binary translation. Also, {{during the course of}} dealing with local library functions, we propose a method of program flow redirection by designing two algorithms along with hierarchically encapsulating local libraries. A framework called MPI-QEMU is designed to implement migrating MPI program of 64 bits from X 86 - 64 /Linux platform to the domestic SW platform which is verified by experiment...|$|R
5000|$|The V-11, code-named [...] "Scorpio", is a miniprocessor {{chip set}} {{implementation}} of the VAX <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA)</b> developed and fabricated by Digital Equipment Corporation (DEC).|$|E
50|$|Intel ADX (Multi-Precision Add-Carry Instruction Extensions) is Intel's arbitrary-precision {{arithmetic}} {{extension to}} the x86 <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA).</b> Intel ADX was first supported in the Broadwell microarchitecture.|$|E
5000|$|Elbrus-90micro (1998-2010) is a {{computer}} line based on SPARC <b>instruction</b> <b>set</b> <b>architecture</b> (<b>ISA)</b> microprocessors: MCST R80, R150, R500, R500S and MCST-4R working at 80, 150, 500 and 1000MHz.|$|E
40|$|Introduction The {{importance}} of multimedia processing on generalpurpose computing platforms has prompted processor designers to add multimedia instructions to microprocessor <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISAs).</b> These include MAX- 2 for the PA-RISC architecture [1], MMX, SSE and SSE- 2 for the Intel IA- 32 architecture [2], and a superset of these to the Itanium IA- 64 architecture [3]. Although these multimedia instructions {{may be very}} effective, they still incur the overhead of their base microprocessor ISA. PLX [4] is a new ISA designed from scratch for fast and efficient multimedia processing. Prior work has demonstrated its effectiveness for integer media applications [4]. This paper describes the new floating-point ISA for PLX version 1. 3, designed to enable support for very fast 3 D graphics. With the proliferation of 3 D games, it is highly desirable to support fast 3 D graphics with the same media processor used for integer media types like images, video and audio...|$|R
40|$|Many {{embedded}} {{systems such as}} digital cameras, digital radios, high resolution printers, cellular phones, etc. involve heavy use of signal processing and are thus based on Digital Signal Processors (DSPs). DSPs such as the TMS 320 C 2 x and the DSP 5600 x have irregular data-paths that typically result due to application specic needs (such as chaining multiply-accumulate operations, etc). Efficient code generation for such embedded DSP processors is a challenging problem. The stringent requirements such as tight memory constraints and fast response time result in the need for compact and efficient code. In this work, we {{address the problem of}} generating compact and efficient code for embedded DSP processors. Most of the DSP <b>instruction</b> <b>set</b> <b>architectures</b> (<b>ISAs)</b> feature intra <b>instruction</b> parallelism (IIP) enabling individual operations to be executed in parallel by generating a complex instruction. A reduction in generated code-size and improved performance can be achieved by exploiting this [...] ...|$|R
40|$|Abstract. Microfluidic {{devices are}} {{emerging}} as an attractive technology for automatically orchestrating the reactions needed in a biological computer. Thousands of microfluidic primitives {{have already been}} integrated on a single chip, and recent trends indicate that the hardware complexity is increasing at rates comparable to Mooreâ€™s Law. As {{in the case of}} silicon, it will be critical to develop abstraction layersâ€”such as programming languages and <b>Instruction</b> <b>Set</b> <b>Architectures</b> (<b>ISAs)</b> â€”that decouple software development from changes in the underlying device technology. Towards this end, this paper presents BioStream, a portable language for describing biology protocols, and the Fluidic ISA, a stable interface for microfluidic chip designers. A novel algorithm translates microfluidic mixing operations from the BioStream layer to the Fluidic ISA. To demonstrate the benefits of these abstraction layers, we build two microfluidic chips that can both execute BioStream code despite significant differences at the device level. We consider this to be an important step towards building scalable biological computers. ...|$|R
