551|1090|Public
5|$|V7 {{consists}} of four integrated elements. The user typically interacts with V7's open-source GUI, named FAHControl. This has Novice, Advanced, and Expert user interface modes, and {{has the ability to}} monitor, configure, and control many remote folding clients from one computer. FAHControl directs FAHClient, a back-end application that in turn manages each FAHSlot (or slot). <b>Each</b> <b>slot</b> acts as replacement for the formerly distinct Folding@home v6 uniprocessor, SMP, or GPU computer clients, as it can download, process, and upload work units independently. The FAHViewer function, modeled after the PS3's viewer, displays a real-time 3-D rendering, if available, of the protein currently being processed.|$|E
25|$|<b>Each</b> <b>slot</b> {{has its own}} IDSEL line, usually {{connected}} to a specific AD line.|$|E
25|$|<b>Each</b> <b>slot</b> {{has its own}} REQ# output to, and GNT# {{input from}} the {{motherboard}} arbiter.|$|E
3000|$|... = 2, two {{vehicles}} {{are assigned to}} <b>each</b> single time <b>slot.</b> However, to prevent nearly simultaneous rebroadcasts among the two vehicles in <b>each</b> time <b>slot,</b> the vehicle with higher S [...]...|$|R
30|$|The {{network code}} {{is such that}} in <b>each</b> time <b>slot</b> a new source symbol from each session is transmitted. Also, one symbol of each session is decoded by its {{destination}} in <b>each</b> time <b>slot.</b> After successfully decoding a symbol, it is retransmitted by the destination in the next time slot. Nodes at the border will, therefore, transmit twice in <b>each</b> time <b>slot.</b> Nodes {{in the interior of}} the network transmit only once. The symbol that they transmit is a linear combination of one symbol from each of the sessions for which the shortest path between source and destination includes that node.|$|R
30|$|The static {{stage is}} {{executed}} offline in the centralized manager {{which can be}} a node with the high computational capability such as Stargate ([URL] In this stage, the centralized manager runs the prediction algorithm to extrapolate information about the harvested energy in the next harvesting period. It then allocates an energy budget in terms of the harvesting rate for <b>each</b> time <b>slot</b> of the next period. The predicted information and the task graph are the inputs to our static allocation algorithm. The allocation outcomes and energy budget for <b>each</b> <b>slots</b> are then communicated to sensor nodes.|$|R
25|$|Rectilinear-coordinate outputs (both sine and cosine, typically) {{came from}} two slotted plates, <b>each</b> <b>slot</b> fitting {{on the block}} just mentioned. The plates moved in {{straight}} lines, the movement of one plate {{at right angles to}} that of the other. The slots were at right angles to the direction of movement. Each plate, by itself, was like a Scotch yoke, known to steam engine enthusiasts.|$|E
25|$|Addresses for PCI {{configuration}} space access are decoded specially. For these, the low-order address lines {{specify the}} offset {{of the desired}} PCI configuration register, and the high-order address lines are ignored. Instead, an additional address signal, the IDSEL input, must be high before a device may assert DEVSEL#. <b>Each</b> <b>slot</b> connects a different high-order address line to the IDSEL pin, and is selected using one-hot encoding on the upper address lines.|$|E
25|$|Line markers are {{generally}} used on permanent guidelines to provide critical information to divers following the line. The slots and notches provided {{are used to}} wrap the line to secure the marker in place. A simple passage of the line through the enlarged area {{at the base of}} the two slots will allow the marker to slide along the line, or even fall off if brushed by a diver. To more securely fasten the marker, an extra wrap may be added at <b>each</b> <b>slot.</b> The basic function of these markers is fairly consistent internationally, but procedures may differ by region, and between teams. The protocol for placement and removal should be well understood by the members of a specific team. Temporary line markers are only for the use of the team who placed them and are removed during exit to avoid littering a cave system with irrelevant and potentially confusing information.|$|E
3000|$|... and L is {{the link}} capacity, with B≤L. This is because, we divide the {{communication}} cycle into time <b>slots</b> and <b>each</b> time <b>slot</b> can be {{occupied by a}} message according to our scheduling generation policy. Since <b>each</b> time <b>slot</b> can be assigned if needed, the worst-case usage of the communication link will be B/L.|$|R
30|$|The PU’s {{state is}} assumed to keep {{invariant}} in <b>each</b> sensing <b>slot.</b>|$|R
30|$|Every MILP {{solution}} {{yields a}} feasible transmission scenario at <b>each</b> time <b>slot.</b>|$|R
500|$|Absorption filters {{dissipate}} {{the energy}} in unwanted frequencies internally as heat. [...] This {{is in contrast}} to a conventional filter design where the unwanted frequencies are reflected back from the input port of the filter. [...] Such filters are used where it is undesirable for power to be sent back towards the source. [...] This is the case with high power transmitters where returning power can be high enough to damage the transmitter. [...] An absorption filter may be used to remove transmitter spurious emissions such as harmonics or spurious sidebands. [...] A design that has been in use for some time has slots cut in the walls of the feed waveguide at regular intervals. [...] This design is known as a leaky-wave filter. [...] <b>Each</b> <b>slot</b> is connected to a smaller gauge waveguide which is too small to support propagation of frequencies in the wanted band. [...] Thus those frequencies are unaffected by the filter. [...] Higher frequencies in the unwanted band, however, readily propagate along the side guides which are terminated with a matched load where the power is absorbed. [...] These loads are usually a wedge shaped piece of microwave absorbent material. [...] Another, more compact, design of absorption filter uses resonators with a lossy dielectric.|$|E
2500|$|Most {{lines are}} {{connected}} to <b>each</b> <b>slot</b> in parallel. [...] The exceptions are: ...|$|E
2500|$|MCell uses an ad-hoc {{formalism}} within MCell {{itself to}} specify a multi-state model: In MCell, {{it is possible}} to assign [...] "slots" [...] to any molecular species. [...] <b>Each</b> <b>slot</b> stands for a particular modification, and any number of slots can be assigned to a molecule. [...] <b>Each</b> <b>slot</b> can be occupied by a particular state. The states are not necessarily binary. For instance, a slot describing binding of a particular ligand to a protein of interest could take the states [...] "unbound", [...] "partially bound", [...] and [...] "fully bound".|$|E
3000|$|To {{decrease}} {{the effects of}} interference, a slotted ALOHA scheme is used in which, for <b>each</b> time <b>slot,</b> <b>each</b> node transmits independently with a certain transmission probability [39]. In Equation 1, I is the accumulated interference power at the receiver given by [...]...|$|R
50|$|GFSK {{modulation}} uses a {{bit rate}} of 1152 Kbit/s, with {{a frame of}} 10 ms (11520 bits) which contains 24 time <b>slots.</b> <b>Each</b> <b>slots</b> contains 480 bits, {{some of which are}} reserved for physical packets and the rest is guard space. Slots 0-11 are always used for downlink (FP to PP) and slots 12-23 are used for uplink (PP to FP).|$|R
3000|$|The time {{is divided}} into equal-sized <b>slots,</b> <b>each</b> of which {{corresponds}} to one packet. Every node is synchronized with these time slots. At the beginning of <b>each</b> time <b>slot,</b> every outer node transmits a packet with transmission probability p, and the center node transmits with p [...]...|$|R
2500|$|PRSNT1# and PRSNT2# for <b>each</b> <b>slot</b> {{have their}} own pull-up {{resistors}} on the motherboard. [...] The motherboard may (but does not have to) sense these pins to determine the presence of PCI cards and their power requirements.|$|E
2500|$|A slotted {{waveguide}} {{is generally}} used for radar {{and other similar}} applications. The waveguide serves as a feed path, and <b>each</b> <b>slot</b> is a separate radiator, thus forming an antenna. [...] This structure has the capability of generating a radiation pattern to launch an electromagnetic wave in a specific relatively narrow and controllable direction.|$|E
5000|$|Most {{lines are}} {{connected}} to <b>each</b> <b>slot</b> in parallel. The exceptions are: ...|$|E
40|$|We {{consider}} {{the problem of}} dynamic spectrum access for network utility maximization in multichannel wireless networks. The shared bandwidth is divided into K orthogonal channels. In the beginning of <b>each</b> time <b>slot,</b> <b>each</b> user selects a channel and transmits a packet with a certain attempt probability. After <b>each</b> time <b>slot,</b> <b>each</b> user that has transmitted a packet receives a local observation indicating whether its packet was successfully delivered or not (i. e., ACK signal). The objective is a multi-user strategy for accessing the spectrum that maximizes a certain network utility in a distributed manner without online coordination or message exchanges between users. Obtaining an optimal solution for the spectrum access problem is computationally expensive in general due to the large state space and partial observability of the states. To tackle this problem, we develop a novel distributed dynamic spectrum access algorithm based on deep multi-user reinforcement leaning. Specifically, at <b>each</b> time <b>slot,</b> <b>each</b> user maps its current state to spectrum access actions based on a trained deep-Q network used to maximize the objective function. Game theoretic analysis of the system dynamic is developed for establishing design principles {{for the implementation of}} the algorithm. Experimental results demonstrate strong performance of the algorithm. Comment: This work has been submitted to the IEEE for possible publication. Copyright may be transferred without notice, after which this version may no longer be accessibl...|$|R
30|$|Then, at <b>each</b> time <b>slot,</b> {{to assign}} a {{reputation}} {{score for each}} user, the following algorithm is used.|$|R
30|$|Threshold λ {{enables a}} {{tradeoff}} between the mean decoded video layers and the minimum decoded video layers {{in making decisions}} in <b>each</b> time <b>slot.</b> In fact, a large threshold value λ (close to 1) results in making a decision over the smallest feasible window and increasing the minimum number of decoded video layers in <b>each</b> time <b>slot.</b> On the other hand, a small threshold value λ (close to 0) results in making a decision over the largest feasible window and increasing {{the mean number of}} decoded video layers in <b>each</b> time <b>slot.</b> An intermediate threshold value λ (i.e., 0 <λ< 1) enables a tradeoff between these two objectives. As a result, the service provider can adopt a threshold value λ based on its prioritized strategies.|$|R
5000|$|<b>Each</b> <b>slot</b> {{has its own}} IDSEL line, usually {{connected}} to a specific AD line.|$|E
5000|$|<b>Each</b> <b>slot</b> {{has its own}} REQ# output to, and GNT# {{input from}} the {{motherboard}} arbiter.|$|E
50|$|We scan left {{looking for}} a slot with is_shifted is false. This {{indicates}} {{the start of the}} cluster. Then we scan right keeping a running count of the number of runs we must skip over. <b>Each</b> <b>slot</b> {{to the left of the}} canonical slot having is_occupied set indicates another run to be skipped, so we increment the running count. <b>Each</b> <b>slot</b> having is_continuation clear indicates the start of another run, thus the end of the previous run, so we decrement the running count. When the running count reaches zero, we are scanning the quotient's run. We can compare the remainder in <b>each</b> <b>slot</b> in the run with dR. If found, we report that the key is (probably) in the filter otherwise we report that the key is definitely not in the filter.|$|E
3000|$|... {{stands for}} the total {{additive}} interference/noise caused by the underlying primary system at <b>each</b> time <b>slot</b> t. Similarly, [...]...|$|R
30|$|BaseSuperframeDuration = 960 symbols = 15.36 ms, <b>each</b> time <b>slot</b> has a {{duration}} of 15.36 / 16 = 0.96 ms.|$|R
5000|$|... #Caption: An Ethernet frame {{including}} the EtherType field. <b>Each</b> lower <b>slot</b> designates an octet; the EtherType is two octets long.|$|R
50|$|This {{is usually}} a {{function}} designed into the protocol that allows this to happen - most notably how the transmission is structured - for example in slots with headers containing address details so that devices can listen to these headers in <b>each</b> <b>slot</b> {{to decide whether the}} transmission is relevant to them or not. In this case, the receiver only has to be active at the beginning of <b>each</b> <b>slot</b> to receive the header, conserving battery life.|$|E
5000|$|For <b>each</b> <b>slot</b> t, define L(t) as {{the sum of}} {{the squares}} of the current queue {{backlogs}} (divided by 2 for convenience later): ...|$|E
5000|$|Classes {{can have}} {{multiple}} superclasses, {{a list of}} slots (member variables in C++/Java parlance) and a special meta class. Slots can be allocated by class (all {{instances of a class}} share the slot) or by instance. <b>Each</b> <b>slot</b> has a name and the value of a slot can be accessed by that name using the function [...] Additionally special generic functions can be defined to write or read values of slots. <b>Each</b> <b>slot</b> in a CLOS class must have a unique name.|$|E
3000|$|To {{demonstrate}} {{the advantage of}} our coding scheme, we introduce two baseline algorithms, namely, dissemination without coding algorithm and dissemination with random_coding algorithm. Dissemination without coding algorithm randomly transmits a native [...] "wanted" [...] packet at <b>each</b> time <b>slot</b> until all receivers obtain their [...] "wanted" [...] data packets while dissemination with random_coding algorithm transmits an XORs packet which is randomly generated at <b>each</b> time <b>slot</b> until all receivers obtain their [...] "wanted" [...] packets.|$|R
3000|$|According to {{the above}} system model, we {{determine}} a policy to allocate N subcarriers to M SUs. Both PU and SU systems use the OFDMA sheme, and we assume that one subcarrier can only be used by one SU at <b>each</b> time <b>slot,</b> which means the interference between SUs is not considered. We consider that each SU can use multiple subcarriers at <b>each</b> time <b>slot,</b> the subcarriers occupied by the m [...]...|$|R
3000|$|We assume time is <b>slotted.</b> <b>Each</b> time <b>slot</b> {{is assumed}} to be of {{sufficient}} duration to transmit or receive a broadcast message. To this end, the network is locally synchronized at the slot level. As shown in [25], this can be achieved by local synchronization techniques, such as FTSP [26], which can yield an accuracy of 2.24 μ [...]...|$|R
