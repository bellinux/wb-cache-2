68|351|Public
25|$|When using Bit-Encoded-Notation, {{quantities}} like C4 means bit 4 from <b>data</b> <b>byte</b> C. Each bit is numerated from 0 to 7, so 7 is {{the most}} significant bit and 0 is the least significant bit.|$|E
2500|$|A {{request for}} this PID returns a single byte of data which {{describes}} which OBD standards this ECU {{was designed to}} comply with. [...] The different values the <b>data</b> <b>byte</b> can hold are shown below, next to what they mean: ...|$|E
2500|$|ECC memory, {{which has}} an extra <b>data</b> <b>byte</b> lane used for {{correcting}} minor errors and detecting major errors for better reliability. Modules with ECC are identified by an additional ECC or E in their designation. For example: [...] "PC3-6400 ECC", or PC3-8500E.|$|E
50|$|Specifies {{the number}} of {{communication}} <b>data</b> <b>bytes</b> to follow.|$|R
50|$|The cdp_checksum is a summed 256 modulus of all cdp <b>data</b> <b>bytes.</b>|$|R
5000|$|This byte {{stream is}} stored in the file {{as a series of}} [...] "{{sub-block}}s". Each sub-block has a maximum length 255 bytes and is prefixed with a byte indicating the number of <b>data</b> <b>bytes</b> in the sub-block. The series of sub-blocks is terminated by an empty sub-block (a single 0 byte, indicating a sub-block with 0 <b>data</b> <b>bytes).</b>|$|R
5000|$|If DBI on writes is enabled, a {{low level}} on DMI, {{combined}} with a <b>data</b> <b>byte</b> with 5 or more bits set, indicates a <b>data</b> <b>byte</b> to be ignored and not written.|$|E
5000|$|... (If slave {{transmitting}} to master) The master wishes {{the transfer}} to stop after this <b>data</b> <b>byte.</b>|$|E
5000|$|Bold {{indicates}} a <b>data</b> <b>byte</b> {{that has not}} been altered by encoding. All non-zero data bytes remain unaltered.|$|E
5000|$|Attempting to read as <b>data</b> <b>bytes</b> {{in memory}} which are {{designated}} as instructions ...|$|R
2500|$|This byte {{stream is}} stored in the file {{as a series of}} [...] "{{sub-block}}s". [...] Each sub-block has a maximum length 255 bytes and is prefixed with a byte indicating the number of <b>data</b> <b>bytes</b> in the sub-block. [...] The series of sub-blocks is terminated by an empty sub-block (a single 0 byte, indicating a sub-block with 0 <b>data</b> <b>bytes).</b>|$|R
3000|$|... [*]Throughput: {{average number}} of <b>data</b> <b>bytes</b> {{successfully}} received by the destination node per time unit.|$|R
5000|$|If DBI on writes is disabled, a {{high level}} on DMI {{indicates}} that the corresponding <b>data</b> <b>byte</b> is to be ignored and not written ...|$|E
50|$|If the SYN flag {{is clear}} (0), {{then this is}} the {{accumulated}} sequence number of the first <b>data</b> <b>byte</b> of this segment for the current session.|$|E
5000|$|Urgent pointer (16 bits):if the URG flag is set, {{then this}} 16-bit field is an offset from the {{sequence}} number indicating the last urgent <b>data</b> <b>byte</b> ...|$|E
30|$|<b>Data</b> <b>Bytes</b> - <b>Data</b> for {{response}} or commands (data {{which was}} read {{or to be}} written).|$|R
50|$|Messages on the CSDB {{consist of}} one address byte {{followed}} by {{any number of}} <b>data</b> <b>bytes.</b>|$|R
50|$|The IBM {{patented}} {{encoding method}} used for encoding 8-bit <b>data</b> <b>bytes</b> to 10-bit Transmission Characters. <b>Data</b> <b>bytes</b> are converted to Transmission Characters {{to improve the}} physical signal such that the following benefits are achieved: bit synchronization is more easily achieved, design of receivers and transmitters is simplified, error detection is improved, and control characters (i.e., the Special Character) can be distinguished from data characters.|$|R
5000|$|... {{indicates}} a zero <b>data</b> <b>byte</b> that was altered by encoding. All zero data bytes are replaced during encoding by one plus {{the number of}} non-zero bytes that follow.|$|E
50|$|There is an Inter Byte Space {{between the}} BREAK and SYNC field, one between the SYNC and IDENTIFIER, one between the payload and Checksum and one between every <b>Data</b> <b>byte</b> in the payload.|$|E
50|$|When using Bit-Encoded-Notation, {{quantities}} like C4 means bit 4 from <b>data</b> <b>byte</b> C. Each bit is numerated from 0 to 7, so 7 is {{the most}} significant bit and 0 is the least significant bit.|$|E
5000|$|Byte/m-tuple conversion: <b>data</b> <b>bytes</b> are encoded into bit m-tuples (m = 4, 5, 6, 7, or 8).|$|R
50|$|The 204 is {{the number}} of bytes in a packet {{including}} the 16 trailing Reed-Solomon error checking and correction bytes. The 188 {{is the number}} of <b>data</b> <b>bytes</b> (187 bytes) plus the leading packet sync byte (0x47).|$|R
5000|$|A message {{consists}} of a start bit, followed {{by a series of}} <b>data</b> <b>bytes.</b> Each byte is actually transmitted as 10 bits: ...|$|R
5000|$|Once a full device address {{has been}} {{transmitted}} (and a valid slave has been selected), if the previous <b>data</b> <b>byte</b> and subsequent MAK bit were received correctly, the slave transmits a 1 bit (a SAK).|$|E
5000|$|For minimum latency, AES47 uses [...] "raw" [...] ATM cells, ATM {{adaptation}} layer 0. Each ATM virtual circuit negotiates {{the parameters of}} a stream at connection time. In addition to the same rate and number of channels (which {{may be more than}} the 2 supported by AES3), the negotiation covers the number of bits per sample and the presence of an optional <b>data</b> <b>byte.</b> The total must be 1, 2, 3, 4 or 6 bytes per sample, so it evenly divides the ATM cell size. [...] AES3 uses 4 bytes per sample (24 bits of sample plus the optional <b>data</b> <b>byte),</b> but AES47 supports additional formats.|$|E
50|$|If the SYN flag is set (1), {{then this}} is the initial {{sequence}} number. The sequence number of the actual first <b>data</b> <b>byte</b> and the acknowledged number in the corresponding ACK are then this sequence number plus 1.|$|E
5000|$|To {{calculate}} {{the number of}} raw <b>data</b> <b>bytes</b> that a scanned image will take up, {{you can use the}} follow formula : ...|$|R
5000|$|The {{start of}} a packet is {{signified}} by a break followed by a [...] "mark" [...] (a logical one), known as the [...] "Mark After Break" [...] (MAB). The break, which signals {{the end of one}} packet and the {{start of a}}nother, causes receivers to start reception and also serves as a frame (position reference) for <b>data</b> <b>bytes</b> within the packet. Framed <b>data</b> <b>bytes</b> are known as slots. Following the break, up to 513 slots are sent.|$|R
2500|$|The {{functional}} PID query {{is sent to}} {{the vehicle}} on the CAN bus at ID 7DFh, using 8 <b>data</b> <b>bytes.</b> The bytes are: ...|$|R
5000|$|A {{request for}} this PID returns a single byte of data which {{describes}} which OBD standards this ECU {{was designed to}} comply with. The different values the <b>data</b> <b>byte</b> can hold are shown below, next to what they mean: ...|$|E
5000|$|An offset {{can have}} a minimum value of 1, maximum value of 2047. A value of 1 refers {{to the most recent}} byte in the history buffer, {{immediately}} preceding the next <b>data</b> <b>byte</b> to be processed. An offset is encoded as: ...|$|E
50|$|Consistent Overhead Byte Stuffing (COBS) is an {{algorithm}} for encoding data bytes {{that results}} in efficient, reliable, unambiguous packet framing regardless of packet content, thus making it easy for receiving applications to recover from malformed packets. It employs a particular byte value, typically zero, {{to serve as a}} packet delimiter (a special value that indicates the boundary between packets). When zero is used as a delimiter, the algorithm replaces each zero <b>data</b> <b>byte</b> with a non-zero value so that no zero data bytes will appear in the packet and thus be misinterpreted as packet boundaries. The value substituted for each zero <b>data</b> <b>byte</b> is equal to one plus the number of non-zero data bytes that follow.|$|E
50|$|In {{the compact}} disc system, cross-interleaved Reed-Solomon code (CIRC) {{provides}} error detection and error correction. CIRC adds to every three <b>data</b> <b>bytes</b> one redundant parity byte.|$|R
5000|$|The {{following}} 8008 assembler {{source code}} {{is for a}} subroutine named [...] that copies a block of <b>data</b> <b>bytes</b> of a given size from one location to another.|$|R
25|$|The vehicle {{responds}} to the PID query on the CAN bus with message IDs that depend on which module responded. Typically the engine or main ECU responds at ID 7E8h. Other modules, like the hybrid controller or battery controller in a Prius, respond at 07E9h, 07EAh, 07EBh, etc. These are 8h higher than the physical address the module {{responds to}}. Even though the number of bytes in the returned value is variable, the message uses 8 <b>data</b> <b>bytes</b> regardless (CAN bus protocol form Frameformat with 8 <b>data</b> <b>bytes).</b>|$|R
