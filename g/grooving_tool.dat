4|57|Public
50|$|Nominal {{values for}} the {{presetting}} serve as a default in the measuring process with a tool presetting machine. The exact position of the tool and the measuring method can be specified, {{in addition to the}} nominal values of the geometry, so that, for example, the left or right corner has to be measured for a <b>grooving</b> <b>tool.</b>|$|E
40|$|The {{apparatus}} for {{liquid limit}} determination by the dynamic method, {{is made for}} trial in our laboratory. The apparatus is shown in Fig. 1. The clay at several water content are contained in the vessel of apparatus and are grooved by the <b>grooving</b> <b>tool.</b> We defined that clay is in the dynamic liquid limit if 30 seconds vibration (Acc. 1400 gal) just closes the groove. The results obtained by this dynamic method are compared {{to the results of}} the standard liquid limits test...|$|E
40|$|Mechanical micro-cutting (e. g. micro-grooving, micro-milling) is {{emerging}} as a viable alterna-tive to lithography based micromachining techniques for various applications {{in the fields of}} micro molding, biomedical devices, optics, and semiconductors. However, certain factors limit the work-piece materials that can be processed using mechanical micromachining methods. For difficult-to-machine materials such as mold and die steels and ceramics, limitations in cutting tool and stage stiffness and strength of the micro-tool are significant problems facing the successful application of mechanical micromachining methods. In addition, in microscale cutting, the effects of tool and pre-cision motion stage deflections on part dimensional accuracy can be significant. This paper presents a novel hybrid Laser Assisted Mechanical Micromachining (LAMM) process that makes use of highly localized thermal softening of the hard material by continuous wave laser irradiation (2 - 35 W Yb-fiber laser, wavelength 1064 nm) in front of a miniature (100 - 500 Âµm wide) TiAlN-coated tung-sten carbide <b>grooving</b> <b>tool.</b> By suitably controlling the laser power, location, and spot size, it is pos-sible to bring about a sufficiently large decrease in the work material strength and thereby minimize catastrophic tool failure, and lower the tool forces and deflection. Despite these advantages, the LAMM process may produce a heat affected zone (HAZ) that can result in potentially undesirabl...|$|E
40|$|In {{this paper}} {{we present a}} {{solution}} of a model transformation between two standard languages for business process modeling BPMN and BPEL, using the <b>GROOVE</b> <b>tool</b> set. <b>GROOVE</b> is a <b>tool</b> for graph transformations that uses directed, edge labelled simple graphs and the SPO approach [7]. Given a graph grammar (G, P), composed o...|$|R
40|$|Machining {{simulations}} of orthogonal cutting are performed using the {{finite element method}} to predict chip formation in <b>grooved</b> <b>tool</b> cutting. A flat-faced cutting tool is first simulated to check {{the validity of the}} model, and the results obtained are used as a basis for comparison in <b>grooved</b> <b>tool</b> cutting simulation. <b>Grooved</b> <b>tool</b> simulations are modeled next to investigate the effect of a groove on the chip formation process. Groove depth and width were the two parameters changed for the purpose of analyzing the chip flow characteristics, stress and strain distributions found in the chip.;For all simulated cases, it is observed that a groove definitely impart more curl on the chip, and more tensile and/or compressive near the chip root, a condition conducive to chip breaking. More curling is observed when the groove radius of curvature is reduced by increasing the groove depth or decreasing the groove width. It is also observed that the increase in normal tensile stress at the chip root next to the tool tip is proportional to the amount of curl displayed in the chip. However, the increase in normal compressive stress is related to the increase in chip thickness, a variable that depends on the effective rake angle of cutting...|$|R
25|$|As swaging is a {{technique}} in which cold metal is formed over a <b>grooved</b> <b>tool</b> or swage, the term was adopted {{in the field of}} automotive styling to describe when two panels were brought together, an edge of one panel was swaged so to overlap the other to create the impression of one continuous surface.|$|R
40|$|This work {{documents}} {{an investigation}} of the degradation of a variety of different tools whilst conducting milling operations on a computer numerical controlled (CNC) milling machine. The potential of a range of sensors to detect tool degradation has been investigated and the outputs have been incorporated into a monitoring system. Progressive degradation under nominal rough and finish face milling and rough groove milling has been investigated using a two point <b>grooving</b> <b>tool</b> and four and eight point face milling tools on En 8, En 24 and En 24 T workpiece materials. Rapid degradation of the cutting tool has also been observed under rough milling conditions using four and eight point face milling tools, whilst machining n 8 and En 24 T materials in a variety of simulated and actual tool breakage situations. A limited investigation of the effect of the individual wear geometries associated with both progressive and instantaneous tool degradation has been conducted by simulating these geometries and carrying out rough miffing tests using a four point face milling tool on a workpiece of En 8 material. Similarly, a limited investigation of the effect of machining on different machines has also been undertaken. A number of different sensing technologies have been used, including conventional sensors such as spindle current and cutting force but also novel sensing techniques such as Acoustic Emission. These have been combined using artificial intelligence techniques to provide automatic recognition of the tool wear state. Similarly, the feasibility of breakage detection/prediction has also been demonstrated. CEC - BRITE EURAM Programm...|$|E
40|$|In {{this paper}} we present how the leader {{election}} protocol specified in [1] was modelled with the <b>GROOVE</b> <b>tool</b> set. The {{goal of this}} protocol {{is to find the}} smallest of a set of uniquely numbered processes arranged in a ring, without having a central controller available. GROOVE is a graph transformation tool, which uses directed simple graphs with labelled edges. In the remainde...|$|R
25|$|By mid-1873 he had granted 20 {{licences}} {{and received}} a further 50 applications. This was boosted further by a Trade Show held in London in the same year. By 1874 the licence was free to bottle manufacturers {{as long as they}} purchased the marbles, sealing rings and used his <b>groove</b> <b>tool,</b> and the mineral water firms they traded with had already bought a licence to use his bottle.|$|R
40|$|In {{this study}} the weld {{characteristics}} of AA 6061 -T 6 Aluminum alloy during Friction Stir Welding (FSW) {{has been studied}} experimentally. The work {{has been carried out}} to study the tensile properties of the weldments like tensile strength, hardness and measurements of temperature at various distances along the weld zone on the weldments. The exp erimental work has been carried out with different tool shapes like taper threaded <b>tool</b> and half <b>grooved</b> <b>tool</b> at various weld parameters...|$|R
40|$|In {{this paper}} {{we present a}} {{solution}} of a model transformation between two standard languages for business process modeling BPMN and BPEL, using the <b>GROOVE</b> <b>tool</b> set. <b>GROOVE</b> is a <b>tool</b> for graph transformations that uses directed, edge labelled simple graphs and the SPO approach [Ren 04]. Given a graph grammar (G, P), composed of a start graph G {{and a set of}} production rules P, the tool allows to compute a labelled transition system (LTS) corresponding to all possible derivations in this grammar. The tool is freely available for download. The latest version and documentation {{can be found on the}} website [URL] The graph grammar presented here as well as detailed description of the sample realization to the case study is available in the attachment...|$|R
40|$|We {{present a}} formal {{specification}} of the Gafni-Bertsekas algorithm, a Link Reversal Routing protocol, via Graph Transformation Systems (GTS) as {{provided in the}} <b>GROOVE</b> <b>tool.</b> Validation <b>tools</b> like <b>GROOVE</b> can naturally exploit systems symmetries both at the specification and state-exploration level. To exploit the most recent features of the tool like data fields, we study a height-based version of Gafni-Bertsekas that requires both graph transformation and comparison and updates of tuple of integers. Our case-study {{can be used as}} test-case to compare graph-based <b>tools</b> like <b>GROOVE</b> with other validation methods based on emunerative or symbolic search like SPIN and UPPAAL...|$|R
40|$|In {{this paper}} we discuss the {{implementation}} of neighbourhood graph abstraction in the <b>GROOVE</b> <b>tool</b> set. Important classes of graph grammars may have unbounded state spaces and therefore cannot be verified with traditional model checking techniques. One way {{to address this problem}} is to perform graph abstraction, which allows us to generate a finite abstract state space that over-approximates the original one. In previous work we presented the theory of neighbourhood abstraction. In this paper, we present the implementation of this theory in GROOVE and illustrate its applicability with a case study that models a single-linked list...|$|R
40|$|Abstract. Recently, many {{researchers}} {{are working on}} semantics preserving model transformation. In the field of graph transformation one can think of translating graph grammars written in one approach to a behaviourally equivalent graph grammar in another approach. In this paper we translate graph grammars developed with the <b>GROOVE</b> <b>tool</b> to AGG graph grammars by first investigating the set of core graph transformation concepts supported by both tools. Then, we define {{what it means for}} two graph grammars to be behaviourally equivalent, and for the regarded approaches we actually show how to handle different definitions of both- application conditions and graph structures. The translation itself is explained by means of intuitive examples...|$|R
40|$|Abstract. Self-adaptation allows {{systems to}} modify their {{structure}} and/or their behaviour depending {{on the environment and}} the system itself. Since reconfigurations must not happen at any but in suitable cir-cumstances, guiding and controlling dynamic reconfigurations at runtime is an important issue. This paper contributes to two essential topics of the self-adaptationâa runtime temporal properties evaluation, and a decentralization of control loops. It extends the work on the adaptation of component-based systems at runtime via policies with temporal patterns by providing a) a specific progressive semantics of temporal patterns and b) a decentralised method which is suitable to deal with temporal patterns of component-based systems at runtime. The implementation with the <b>GROOVE</b> <b>tool</b> constitutes a practical contribution. ...|$|R
40|$|Abstract. Based on the {{electrode}} finishing technique in {{electrical discharge machining}} (EDM), a new method is proposed in the article to fabricate minitype cutting tool efficiently. The research on the techniques to attain the minitype cutting tool was based on analyzing the feature of EDM on minitype cutter. The process of fabrication for minitype cutting tool is determined, and the minitype <b>grooving</b> <b>tools</b> with the characteristic sizes of 70 Âµm were made of two types of materials. This fabrication method proved to be applicable to high efficiency fabrication of minitype cutting tool. The factors affecting precision of minitype cutter were analyzed, the causes for worse shape precision and surface roughness were described specifically, and the suggestions to improve the machining quality were proposed...|$|R
40|$|Abstract: Application of graph transformations for {{software}} verification and model transformation is an emergent field of research. In particular, graph transformation approaches provide a natural way of modelling object oriented systems and seman-tics of object-oriented languages. There exist {{a number of}} tools for graph transformations that are often specialised in {{a particular kind of}} graphs and/or graph transformation approaches, depending on the desired application domain. The main drawback of this diversity is the lack of interoperability. In this paper we show how (typed) multigraph production systems can be translated into (typed) simple-graph production systems. The presented construction enables the use of multigraphs with DPO transformation approach in tools that only support simple graphs with SPO transformation approach, e. g. the <b>GROOVE</b> <b>tool...</b>|$|R
50|$|Mineral water soda {{manufacturers}} {{who wanted}} to use Codd's Globe Stopper bottles had to pay a yearly fee for a licence to use his patent bottle. By mid-1873 he had granted 20 licences and received a further 50 applications. This was boosted further by a Trade Show held in London in the same year. By 1874 the licence was free to bottle manufacturers {{as long as they}} purchased the marbles, sealing rings and used his <b>groove</b> <b>tool,</b> and the mineral water firms they traded with had already bought a licence to use his bottle. Codd had two factories in London solely producing marbles, one in Kennington and the other in Camberwell, which was run by F. Barrett, the son of his financial backer.|$|R
5000|$|Sole {{markings}} - Many beds deposited by density underflows, such as turbidites, have erosional bases. Although {{there is}} no clear angular uncomformity developed in most cases, there are characteristic structures formed {{at the base of the}} bed. Also includes are flute casts, <b>grooves,</b> and <b>tool</b> marks.|$|R
40|$|Key words: broaching; {{simulation}} test; cutting depth; tool condition; {{surface quality}} Abstract. Reasonable tool condition has crucial importance to prevent tool malfunction such as abnormal wear, chipping and cutting teech breakage when broaching expensive components i. e. gas turbine engines disks. This paper proposes a broaching simulation test method of using customized single tooth <b>groove</b> <b>tools</b> {{with a variety}} of rake angle and clearance angle to simulate broaching processing at shaper machine under different cutting depth. The effects of tool condition and cutting depth on cutting forces, surface roughness analyzed by Response Surface Methodology and surface morphology of machined surface were discussed, which revealed that the changes of cutting depth play a dominate role in processing quality, followed by tool rake angle, and tool clearance is subordinate. Good tool edge strength should be assured from prevent shock and vibration during the selection of tool condition...|$|R
40|$|Many {{manufacturers}} are gradually {{moving away from}} high speed steel and carbide cutting tools in favor of Polycrystalline Diamond and Cubic Boron Nitride tools. These tools, on average, tend to cost more; however, they can increase productivity and lower unit cost per part because of their higher cutting speeds and improved tool life. Additionally, these tools are an attractive alternative to conventional cutting tools due the better surface finish and high tolerance to heat; therefore, in most cases, {{eliminating the need for}} coolants. However, erratic and unexplained tool failure with CBN <b>grooving</b> <b>tools</b> have been encountered. In the particular application investigated, the problem was thought to arise from the tool manufacturing process rather than the tool design. An experimental design was conducted to analyze the tool fabrication process and uncover factors effecting the tool strength. Five such factors were identified and an "Analysis of Variance" study based on a fixed-effect mo [...] ...|$|R
40|$|Abstract: Graph pattern {{matching}} {{lies at the}} heart of any graph transformation-based system. Incremental {{pattern matching}} is one approach proposed for reducing the overall cost of pattern matching over successive transformations by preserving the matches that stay relevant after a rule application. An important issue in any matching scheme, is the ability to properly and consistently deal with various facil-ities that add to the expressiveness of a GT-toolâs rule language. One such feature is the support for regular path expressions, which would let two nodes to be con-sidered as a âmatchâ, if a certain path of edges exists between them. In this paper, the incorporation of regular expression support into incremental pattern matching is discussed within the context of the <b>GROOVE</b> <b>tool</b> set. This includes laying down a formal foundation for incremental pattern matching for regular expressions which is then used to justify the extension proposed to add regular expression support to a well-known pattern matching algorithm...|$|R
5000|$|<b>GROOVE,</b> a Java-based <b>tool</b> set for editing graphs and graph {{transformation}} rules, {{exploring the}} state spaces of graph grammars, and model checking those state spaces; {{can also be}} used as a graph transformation engine.|$|R
40|$|A {{number of}} novel {{programming}} languages and libraries {{have been proposed}} that offer simpler-to-use models of concurrency than threads. It is challenging, however, to devise execution models that successfully realise their abstractions without forfeiting performance or introducing unintended behaviours. This is exemplified by SCOOP [...] -a concurrent object-oriented message-passing language [...] -which has seen multiple semantics proposed and implemented over its evolution. We propose a "semantics workbench" with fully and semi-automatic tools for SCOOP, {{that can be used}} to analyse and compare programs with respect to different execution models. We demonstrate its use in checking the consistency of semantics by applying it to a set of representative programs, and highlighting a deadlock-related discrepancy between the principal execution models of the language. Our workbench is based on a modular and parameterisable graph transformation semantics implemented in the <b>GROOVE</b> <b>tool.</b> We discuss how graph transformations are leveraged to atomically model intricate language abstractions, and how the visual yet algebraic nature of the model can be used to ascertain soundness. Comment: Accepted for publication in the proceedings of FASE 2016 (to appear...|$|R
50|$|Correct {{installation}} {{is critical}} to the performance of the product; this includes utilzing the correct <b>tool</b> <b>groove</b> and/or die, number of presses/bites, press sequence and gauging. Adhering to the manufacturer's instructions will avoid catastrophic failure.|$|R
40|$|The thesis {{focuses on}} the {{technology}} of production of the turbine-type component in Edwards company. It specifically {{focuses on the}} part of the turning production, in which in the first part an analysis of the component and the technologicity of its construction is created. Problematic aspects are analysed in terms of material structure and procedure technology. An evaluation of the former and the new supplier is made in terms of rationalization of material structure and their statistical evaluation of rationalization improvement towards keeping to geometrical tolerances. <b>Grooving</b> <b>tools</b> greatly influence the overall machining time during turning. An experiment is made to find out the measured values of the radial forces, the process of chip formation and surface roughness during grooving. The technology of procedure further deals with rationalization of the current machine OKUMA LU 25 -M and purchase of a new machine Mori Seiki NTX 2000, for which new tool equipment is made in cooperation with Walter company. The final technical-economical evaluation sums up all findings from the research of the given issue. In the discussion, further continuation is suggested for the research in the development and for the continuously controlled component productivity...|$|R
40|$|<b>GROOVE</b> is a <b>tool</b> for the {{automatic}} generation of graph transition systems from graph grammars. In {{this type of}} tool, both memory and time performance are of prime importance. In this paper we discuss the implementation techniques used for optimising the tool in this regard, and we list possible future improvements...|$|R
40|$|A {{number of}} {{high-level}} languages and libraries {{have been proposed}} that offer novel and simple to use abstractions for concurrent, asynchronous, and distributed programming. The execution models that realise them, however, often change over time [...] -whether to improve performance, or to extend them to new language features [...] -potentially affecting behavioural and safety properties of existing programs. This is exemplified by SCOOP, a message-passing approach to concurrent object-oriented programming that has seen multiple changes proposed and implemented, with demonstrable consequences for an idiomatic usage of its core abstraction. We propose a semantics comparison workbench for SCOOP with fully and semi-automatic tools for analysing and comparing the state spaces of programs with respect to different execution models or semantics. We demonstrate its use in checking the consistency of properties across semantics by applying it {{to a set of}} representative programs, and highlighting a deadlock-related discrepancy between the principal execution models of SCOOP. Furthermore, we demonstrate the extensibility of the workbench by generalising the formalisation of an execution model to support recently proposed extensions for distributed programming. Our workbench is based on a modular and parameterisable graph transformation semantics implemented in the <b>GROOVE</b> <b>tool.</b> We discuss how graph transformations are leveraged to atomically model intricate language abstractions, how the visual yet algebraic nature of the model can be used to ascertain soundness, and highlight how the approach could be applied to similar languages. Comment: Accepted by Formal Aspects of Computin...|$|R
40|$|In {{this paper}} we present case studies that {{describe}} how the graph transformation <b>tool</b> <b>GROOVE</b> {{has been used}} to model problems {{from a wide variety of}} domains. These case studies highlight the wide applicability of GROOVE in particular, and of graph transformation in general. They also give concrete templates for using GROOVE in practice. Furthermore, we use the case studies to analyse the main strong and weak points of GROOVE. ...|$|R
40|$|This report {{presents}} {{a solution to}} the Hello World case study [2] using GROOVE. We provide and explain the grammar that we used to solve the case study. Every requested question of the case study was solved by a single rule application. 1 GROOVE GROOVE 1 [1] is a general purpose graph transformation tool set that uses simple labelled graphs. The core functionality of GROOVE is to recursively apply all rules from a predefined set (the graph production system â GPS) to a given start graph, and to all graphs generated by such applications. This results in a state space consisting of the generated graphs. The main component of the <b>GROOVE</b> <b>tool</b> set is the Simulator, a graphical tool that integrates (among others) the functionalities of rule and host graph editing, and of interactive or automatic state space exploration. 1. 1 Host Graphs In GROOVE, the host graphs, i. e., the graphs to be transformed, are simple graphs with nodes and directed labelled edges. In simple graphs, edges do not have an identity, and therefore parallel edges (i. e., edges with same label, and source and target nodes) are not allowed. Also, for the same reason, edges may not have attributes. In the graphical representation, nodes are depicted as rectangles and edges as binary arrows between two nodes. Node labels can be either node types or flags. Node types [resp. flags] are displayed in bold [resp. italic] inside a node rectangle. 1. 2 Rules The transformation rules in GROOVE are represented by a single graph and colours and shapes are used to distinguish different elements. Figure 1 shows a small example rule. â¢ Readers. The black (continuous thin) nodes and edges must be present in the host graph for the rule to be applicable and are preserved by the rule application; â¢ Embargoes. The red (dashed fat) nodes and edges must be absent in the host graph for the rule to be applicable...|$|R
40|$|AbstractA 6061 and {{low carbon}} steel sheets, SPCC, whose {{thicknesses}} were 2 mm, were welded by a friction stir spot welding (FSSW) technique using a scrolled <b>groove</b> shoulder <b>tool</b> without a probe (scroll tool). Tensile-shear fatigue tests were performed using lap-shear specimens at a stress ratio R= 0. 1 in order to figure out fatigue behaviour of dissimilar welds. The tensile-shear strength of the dissimilar welds was {{higher than that of}} the A 6061 similar ones. Furthermore, the dissimilar welds exhibited nearly the same fatigue strengths as the A 6061 similar ones, indicating that FSSW by a scroll tool was effective technique for joining aluminium to steel sheet. The fatigue fracture modes of the dissimilar welds were dependent on load levels, where shear fracture through the interface between A 6061 and steel occurred at high load levels, while a fatigue crack grew through A 6061 sheet at low load levels...|$|R
40|$|This paper {{addresses}} the question how {{to verify that}} the local workflow of an organisation participating in a cross-organisational collaboration is {{in compliance with the}} globally specified rules of that collaboration. We assume that the collaborative workflow is specified as a BPMN Collaboration Diagram and the local workflows as BPMN Process Diagrams. We then employ existing LTL semantics of the former and token semantics of the latter to verify conformance. We use the graph transformation <b>tool</b> <b>GROOVE</b> to automate the verification, and exemplify our approach with a case study from the financial markets domain...|$|R
40|$|SUPREM {{simulations}} {{were run}} {{to determine a}} junction depth of 3 um and a sheet resistance of approximately 5 kohms/square {{to be used in}} wells for CMOS fabrication. From these results an experiment involving an implant energy of SO KeV, doses of 4 E 12 /cm 2, and 8 E 12 /cm 2, drive-in temperatures of 1100 C and 1150 C, and drive-in times between 2 and B hours was performed. Sheet resistances, measured using a four point probe, and junction depth, measured using a <b>groove</b> and stain <b>tool,</b> correlated well to SUPREM simulations...|$|R
50|$|Tools are mini-applications {{that rely}} on Groove's {{underlying}} functionality to disseminate and synchronize their contents with other members' copies of the workspace. <b>Groove</b> provides various <b>tools</b> that {{can be added to}} (and removed from) a workspace to customize the functionality of each space (for example a calendar, discussion, file sharing, an outliner, pictures, notepad, sketchpad, web browser, etc.).Tools that members use in a workspace often drive the nature of the person-to-person collaboration that ensues. In Groove 2007, the SharePoint Files tools can be used to take Sharepoint 2007 document libraries offline.|$|R
40|$|The (in) correct {{functioning}} of many software systems heavily influences {{the way we}} qualify our daily lives. Software companies as well as academic computer science research groups spend much effort on applying and developing techniques for improving the correctness of software systems. In this dissertation we focus on using and developing graph-based techniques to specify and verify the behaviour of software systems in general, and object-oriented systems more specifically. We elaborate on two {{ways to improve the}} correctness (and thereby the quality) of such systems. On the one hand, we investigate the potential of using the graph transformation technique to formally specify the dynamic semantics of (object-oriented) programming languages. On the other hand, we develop techniques to verify systems of which the behaviour is specified as graph production systems. Most of the techniques developed in this work have been implemented in the <b>Groove</b> <b>Tool</b> Set. Typically, a systemâs state is identified by the values assigned to the systemâs state variables (often of primitive types such as integer and Boolean). In the object-oriented paradigm, objects (i. e., instances of classes) can be seen as state variables of which the internal state depends on the values of its attributes (or fields). We start with introducing a uniform framework for the specification and transformation of attributed graphs. In this framework, attributed graphs and their transformations are specified in terms of graph structures and graph morphisms only. One of the main advantages of such an approach is that it reduces the effort to implement a graph transformation engine for attributed graphs when compared to existing approaches. Additionally, we show that our uniform framework provides a natural way to deal with abstraction over the supported data domains, without the need to restrict to algebra homomorphisms. Once a system has been designed it must be implemented in some programming language that best fits to the type of system to be produced. Examples of popular programming languages are Java, C, and Câ¯. The semantics of such programming languages are typically specified in natural language. Unfortunately, such specifications are often hard to understand. More importantly, they often leave room for multiple interpretations. That is to say, they are ambiguous. In this work we show how the graph transformation framework provides formal and intuitive means to specify operational semantics of programming languages. For that, we introduce an artificial, object-oriented programming language called Taal, and define its control flow and execution semantics in terms of graph transformation rules. We also provide the necessary tool support to actually simulate the behaviour of any Taal-program. Once a system has been specified as a graph production system, its behaviour must be verified for correctness. Therefore, we introduce an algorithm that combines a well-known on-the-fly model checking algorithm with ideas from bounded model checking. We aim at verifying the temporal behaviour of such systems. This means that the properties to be verified are expressed as formulae in some (linear) temporal logic, e. g., LTL; the names of the graph transformation rules form the set of atomic propositions. We have extended the <b>Groove</b> <b>Tool</b> Set with verification functionality instead of performing the model checking procedure using an existing model checking tool. The main motivation for this is the ability to investigate how to optimally benefit from the potential of the graph transformation framework, especially in the context of combating the state-explosion problem using partial order reduction techniques. Unfortunately, many such existing techniques are based on assumptions that do not hold in our setting, e. g., regarding the number of actions (or operations) that can be performed. Therefore, we have developed a new dynamic partial order reduction algorithm based on selecting so-called probe sets. The algorithm is based on asymmetric stimulation and disabling relations. We have developed the algorithm in the context of entity-based systems in which states are uniquely characterized as sets of entities and actions can read, delete, create entities and forbid the existence of entities. This setting has been chosen because of its nice match with the graph transformation framework. In fact, we describe how graphs can be encoded as set of entities and how rule applications can be translated to corresponding entity-manipulating actions. We show that our algorithm produces a correctly reduced state space in the sense that all possible system executions are preserved. As yet, our algorithm is not accompanied with an implementation and therefore we have no figures on the reduction that can be obtained for different types of systems...|$|R
40|$|Abstract. The {{research}} {{focused on}} the finite element simulation of the surface residual stress and took an experiment to get cutting temperature and cutting force by changing different <b>groove</b> and coated <b>tools.</b> Then it analyzed the influence of cutting and tool parameters on cutting force and temperature. Finally, the results reached a conclusion about {{the way that the}} <b>tools</b> with different <b>groove</b> and coating influenced the residual stress. The coated tools reduced the residual tensile stress in the machined surface. The axial and tangential residual stress was tensile stress and the tangential residual stress was larger than the axial in machining...|$|R
