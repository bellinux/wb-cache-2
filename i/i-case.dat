17|0|Public
40|$|This paper {{reports on}} a multi-year field study {{conducted}} at the First Boston Corporation to investigate the performance of its object and repository-based integrated computer aided software engineering (<b>I-CASE)</b> tool called High Productivity Systems (HPS). We present productivity and software reuse results for: * three closely monitored small-scale <b>I-CASE</b> pilot projects; and, * twenty large-scale investment banking projects built {{during the first two}} years of the <b>I-CASE</b> tool's deployment. Our results offer perspective on the potential for order of magnitude gains in software development productivity when reusable software development approaches are applied. They also suggest the need for new measurement and management approaches to foster improved software development performance in the <b>I-CASE</b> world...|$|E
3000|$|... where P_p,out^(i,j) is the outage {{probability}} of the PN in Scenario <b>i-Case</b> j, i.e., P_p,out^(i,j)=F_γ _p^(i,j)(γ _th). Here, F_γ _p^(i,j)(γ) is the CDF of the instantaneous SINR of the PN in Scenario <b>i-Case</b> j. Specifically, F_γ _p^(1, 1)(γ), F_γ _p^(2, 2)(γ), and F_γ _p^(3, 1)(γ) are, respectively, given as follows: [...]...|$|E
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThe Department of Defense (DoD) is plagues with severe cost overruns and delays in developing software systems. Existing software within Dod, some developed 15 -to 20 years ago, require continual maintenance and modification. Major difficulties arise with maintaining older systems due to cryptic source code {{and a lack}} of adequate documentation. To remedy this situation, the DoD, is pursuing the integrated computer aided software engineering (<b>I-CASE)</b> procurement as a means to improve DoD's development and maintenance of software systems. This study focuses on the concepts ad theory behind software re-engineering. In particular, it studies the current state of <b>I-CASE</b> technology, and the feasibility of reengineering existing software systems for migration to an <b>I-CASE</b> environment. [URL] United States Nav...|$|E
40|$|Problems and {{requirements}} regarding integration of methods and tools across {{phases of the}} software-development life cycle are discussed. Information engineering (IE) methodology and <b>I-CASE</b> (integrated CASE) tools supporting IE claim to have an integrated view across major stages of enterprise-wide information-system development: information strategy planning, business area analysis, system design, and construction. In {{the main part of}} this paper, two comprehensive <b>I-CASE</b> tools, ADW (Application Development Workbench) and IEF (Information Engineering Facility), are analyzed and compared with regard to integration issues. - 1 The "I" of <b>I-CASE</b> 1. 1 Missing Integration in Software Development The so-called "software crisis", for the first time addressed in 1968, seems to have continued until today. Many of the problems of software development are still present: Complexity of large systems is still not sufficiently mastered. Software contains errors and is unreliable. Development take [...] ...|$|E
30|$|Here, P_s,out^(i,j) is the outage {{probability}} of the SN in Scenario <b>i-Case</b> j, i.e., P_s,out^(i,j) = F_γ _s^(i,j)(γ _th) where F_γ _s^(i,j)(γ) is the CDF of the instantaneous SINR γ _s^(i,j).|$|E
30|$|Substituting (82), (83), and (84) into (79), we {{obtain the}} outage {{capacity}} C_p,ϵ^(i,j) of the PN in Scenario <b>i-Case</b> j. Then, substituting these outcomes together with (9), (36), and (48) into (81) {{allows us to}} obtain the outage capacity for the PN.|$|E
40|$|The First Boston Corporation, a large {{investment}} bank in New York City, {{began to build}} its own integrated computer aided software engineering (<b>I-CASE)</b> tool in 1986. This decision was made following a comprehensive survey {{of the market for}} CASE tools available at that time. This resulted in a determination tha...|$|E
40|$|Automated {{collection}} of software metrics in computer aided software engineering (CASE) environments opens up new avenues {{for improving the}} management of software development operations, as well as shifting the focus of management's control efforts from "software projectâ to "software assets" stored in a centralized repository. Repository evaluation, a new direction for software metrics research in the 1990 s, promises a fresh view of software development performance {{for a range of}} responsibility levels. We discuss the automation of function point and code reuse analysis {{in the context of an}} integrated CASE (<b>I-CASE)</b> environment deployed at a large investment bank in New York City. The development of an automated code reuse analysis tool prompted us to re-think how to measure and interpret code reuse in the <b>I-CASE</b> environment. The metrics we propose describe three dimensions of code reuse [...] leverage, value and classification [...] and we examine the value of applying them on a project and a repository-wide basis. ...|$|E
40|$|Citation: Eaton, R. (1994). <b>I-Case</b> Best Solution for 401 K Team: Quick and Effective Impressed Twentieth Century Users. Application Development Trends: Business & Technology Solutions for Software Development, 1 (5), 21 - 24 The {{solution}} {{was not exactly}} gift-wrapped, but our investment management company was {{able to respond to}} a competitive market effectively {{with the help of an}} integrated CASE tool. By effectively, I mean the solution satisfied the user's requirements at the time it was implemented...|$|E
40|$|This paper {{describes}} the conceptual integration and computer-based support of two important groups of conceptual data models, Entity Relationship Models and Object Role Models (e. g. NIAM). We perform conceptual integration using the conceptual data modelling language CoCoA to specify separate data models of individual notations. We then merge these into an integrated conceptual data model for both notations. These data models {{form the basis}} of the repository for an <b>I-CASE</b> tool supporting modelling with both notations, with full consistency management between the two notation data models...|$|E
40|$|This {{study is}} a more {{detailed}} follow-up to a preliminary investigation of the practices of software engineers in New Zealand. The focus {{of this study is}} on the methods and tools used by software developers in their current organisation. The project involved detailed questionnaires being piloted and sent out to several hundred software developers. A central part of the research involved the identification of factors affecting the use and take-up of existing software development tools in the workplace. The full spectrum of tools from fully integrated <b>I-CASE</b> tools to individual software applications, such as drawing tools was investigated. This paper describes the project and presents the findings...|$|E
40|$|Approved {{for public}} release, {{distribution}} unlimitedThe advent of personal computers, workstations, and multiple interconnected Local Area Networks at the Naval Postgraduate School (NPS), Monterey, California, {{has resulted in}} significant distribution, redundancy, and fragmentation of the data elements and databases necessary to effectively manage the organization. This thesis addresses this issue by accomplishing the following two goals. First, it develops a high-level model of the organization's information architecture {{through the use of}} the Information Engineering methodology, with· automated support from the Texas Instruments' Integrated Computer Aided Software Engineering (<b>I-CASE)</b> tool Information Engineering FacilityTM (IEFTM). Based on the high-level model it then provides an analysis of data management architecture alternatives to address the current problems. The thesis main recommendation is for the implementation of a client/server information processing architecture at NPS. The enterprise and information architecture analyses provide additional recommendations to improve the current NPS organizational structure. U. S. Navy (USN) autho...|$|E
40|$|Abstract. To {{solve the}} problem of {{establishment}} for Secure communication trust engender and the problem of mixed cloud secure communications need to relay on the IAAS to transmit the trust, it presents a new trust root function drive by a trust root-alternate array and image root divisions function made of multiple Logistic function, which are used to built the self-consult model and image root module; it design a adapt alternately independent of the trust engender and transform module, achieve alternating transmission process by multi-threaded code;it makes a trust engender with transformation ranks and wheel trust method of IRICP and <b>I-case</b> of Liu, which makes the sub-trust and the trust engenders internal station become a insufficient condition that does not need to depend on the IAAS, the model achieves a exponential growth in the trust space and the equal application scope of traditional mixed cloud model. The new protocol model features can be seen under the actual operation of modifying SPGSP arithmetic...|$|E
40|$|The First Boston Corporation, a large {{investment}} bank in New York City, {{began to build}} its own integrated computer aided software engineering (<b>I-CASE)</b> tool in 1986. This decision was made following a comprehensive survey {{of the market for}} CASE tools available at that time. This resulted in a determination {{that there would be no}} tools commercially available within the next few years that would: (1) enable cost-effective expansion of the firm’s current applications to support the demand for increased financial market trades processing in a 24 -hour a day, global market; (2) create high functionality, multi-tiered cooperative processing applications that efficiently utilize the power and flexibility of [...] microcomputers and engineering workstations on the trading platform; fault-tolerant minicomputers for intraday trades processing and a link to the financial markets; mainframe computers for current account and firm securities inventory management, and historical database queries to support trading analytics; and, (3) further control costs by paring down the overall level of developer expertise that needed to be brought together to create the firm’s applications...|$|E
40|$|The growing {{complexity}} of the software systems being developed {{and the use of}} different methodologies indicate the need for more computer support for automating software development process and evolution activity. Currently, Computer-Aided Software Engineering (CASE), which is a set of software systems aimed to support set of software process activities, does this automation. While CASE tools prove its importance to develop high quality software, unfortunately CASE tools doesn’t cover all software development activities. This is because some activities need intellectual human skills, which are not currently available as computer software. To solve this shortcoming, Artificial Intelligence (AI) approaches are the ones {{that can be used to}} develop software tools imitating these intellectual skills. This paper presents the definition of Intelligent Computer Aided Software Engineering (<b>I-CASE).</b> The definition encompasses two steps. The first step is a clear decomposition of each basic software development activity to sub activities, and classify each one of them whether it is an intellectual or procedural job. The second step is the addressing of each intellectual (un-automated) one to proper AI-based approach. These tools may be integrated into a package as an Integrated Development Environment (IDE) or could be used individually. The discussion and the next implementation step are reported...|$|E
40|$|This {{dissertation}} explored four denotative measurement discriminators {{to examine}} how these discriminators interrelate with the CASE/I-CASE technologies. The purpose of studying this interrelationship was to show how these discriminators can be key {{in the assessment of}} a CASEII-CASE environment in a software developing organization. The measurement discriminators presented in this study were: software metrics, usability evaluations, software maturity levels, and organizational change indicators. One of the largest users and developers of software is the Department of Defense (DOD). Compounding the DOD 2 ̆ 7 s principal mission is the maintenance, reliability, quality, and procurement of complex software that has forced DOD to search out innovative software development environments. DOD had ventured to investigate the promises of these technologies. To assist DOD and the software industry at large, this dissertation postulated that using the four measurement discriminators will assist a software developing organization to determine its readiness to use CASEII-CASE. Using the nineteen DOD <b>I-CASE</b> pilot sites as its sample population, the procedure involved collecting measurement data on software (metrics), software maturity, organizational change, and usability of the software development environment. Software measurement data included 2 ̆ 2 raw data 2 ̆ 2 on such items as effort (staff-hours), schedules, defects, and software size. The remaining measurement discriminators data collection vehicles were in the form of questionnaires. The results of this study were ascertained using descriptive statistics, correlation analysis, and multiple regression analysis. A strong correlation was determined within the questionnaires indicating that the questionnaires were reliable. The multiple regression analysis indicated that there was an interrelationship between CASE/I-CASE and organizational/software measurements. Implications of the study on the field and its contribution to knowledge included areas, such as, software engineering, decision support systems, measurement theory, and human-computer interface. Recommendations for future research were in the areas of computer supported cooperative work, software engineering teamwork and group problem-solving, object-oriented paradigm, and the multiple discipline fields of the measurement discriminators...|$|E
40|$|M. Sc. (Computer Science) Since {{the late}} 1980 's CASE ("Computer-Aided Software Engineering") {{is a common}} concept {{in the world of}} {{information}} technology. Nevertheless, many people in the information technology environment do not know what CASE is, or have different concepts about CASE. The author also found a variety of definitions for CASE in literature. This variety of concepts and definitions was the first problem the author investigated. Although many people know about CASE, companies are slow in adopting CASE and the tools are not used to their full potential. This was the second problem the author investigated. To address these problems, the research is divided in two logical parts. The author initiated this study with literature research regarding CASE in which the above mentioned problems were identified. The author found the solution to the first problem in literature and by attending CASE conferences. Guidelines to help with the second problem was derived from bits and pieces of information found in literature regarding the installation and use of CASE tools. It was also derived from practical experience during the last six months of study at a company busy with the installation of a CASE tool. To address the first problem, the different aspects surrounding CASE was investigated. The author tried to provide answers to the following questions: What is CASE? What is the logical components and functions of CASE? How can CASE be classified? CASE and integration - {{what is the difference between}} CASE, <b>I-CASE</b> and IPSE? Where does CASE fit in the software environment? In the last chapter of this first part, AD/Cycle from IBM (ISM in South Africa) is discussed as an industry standard for the CASE environment. To address the second problem, the author proposed a methodology covering the initiation phase to the maintenance phase of the implementation of CASE tools in a company. The methodology consists of four phases, namely, initiation, evaluation and selection, installation and training, and maintenance. In the initiation phase, the use of CASE tools to solve system development problems like the system backlog, bad productivity and poor system quality, are initiated. In the evaluation and selection phase, the different vendors and products on the market are evaluated against the needs of the company. The product which was the best suited for those needs was selected and acquired. In the installation and training phase, that product was installed in the information technology environment [...] ...|$|E

