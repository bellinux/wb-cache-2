953|443|Public
25|$|Drupal 7 {{extends the}} <b>data</b> <b>abstraction</b> layer {{so that a}} {{programmer}} no longer needs to write SQL queries as text strings. It uses PHP Data Objects to abstract the database. Microsoft has written a database driver for their SQL Server. Drupal 7 supports the file-based SQLite database engine, {{which is part of}} the standard PHP distribution.|$|E
50|$|Apply <b>data</b> <b>abstraction</b> and encapsulation.|$|E
50|$|<b>Data</b> <b>abstraction</b> is {{the process}} by which data and {{programs}} are defined with a representation similar in form to its meaning, while hiding away the implementation details. Academic research showed that <b>data</b> <b>abstraction</b> makes programs about 30% easier to understand than functional programs.|$|E
50|$|A yield {{statement}} {{is used to}} implement iterators over user-defined <b>data</b> <b>abstractions.</b>|$|R
40|$|Phalanx is a {{software}} system {{for building a}} persistent, survivable data repository that supports shared <b>data</b> <b>abstractions</b> (e. g., variables, mutual exclusion) for clients. Phalanx implements <b>data</b> <b>abstractions</b> that ensure useful properties without trusting the servers supporting these abstractions or the clients accessing them, i. e., Phalanx can survive even the arbitrarily malicious corruption of clients and (some number of) servers. At {{the core of the}} system are survivable replication techniques that enable efficient scaling to hundreds of Phalanx servers. In this paper we describe the implementation of some of the <b>data</b> <b>abstractions</b> provided by Phalanx, discuss their ability to scale to large systems, and describe an example application...|$|R
40|$|We {{report on}} a case study on the {{verification}} of the Bounded Retransmission Protocol in which the inductive theorem prover INKA was used to justify <b>data</b> <b>abstractions.</b> These abstractions arose in building a finite-state verification model, to be submitted to a model checker. Our initial experiments led us to equip INKA with new heuristics, after which the proofs went through without user interaction. We discuss the idea behind these heuristics and argue why {{we expect them to}} work as well in other cases of <b>data</b> <b>abstractions...</b>|$|R
5000|$|The Geospatial <b>Data</b> <b>Abstraction</b> Library {{provides}} {{support for}} {{read and write}} access to netCDF data.|$|E
50|$|In {{artificial}} intelligence, Action {{description language}} (ADL) is an automated planning and scheduling system in particular for robots. It {{is considered an}} advancement of STRIPS. Edwin Pednault (a specialist {{in the field of}} <b>Data</b> <b>abstraction</b> and modelling who has been an IBM Research Staff Member in the <b>Data</b> <b>Abstraction</b> Research Group since 1996) proposed this language in 1987. It is an example of an action language.|$|E
5000|$|<b>Data</b> <b>Abstraction</b> and Problem Solving with C++: Walls and Mirrors, Fifth edition, (2007), Frank M. Carrano[...] (Pearson Education, Inc.) ...|$|E
40|$|Dahlia Malkhi Michael K. Reiter AT&T Labs Research, Florham Park, NJ, USA fdalia,reiterg@research. att. com Abstract Phalanx is a {{software}} system {{for building a}} persistent, survivable data repository that supports shared <b>data</b> <b>abstractions</b> (e. g., variables, mutual exclusion) for clients. Phalanx implements <b>data</b> <b>abstractions</b> that ensure useful properties without trusting the servers supporting these abstractions or the clients accessing them, i. e., Phalanx can survive even the arbitrarily malicious corruption of clients and (some number of) servers. At {{the core of the}} system are survivable replication techniques that enable efficient scaling to hundreds of Phalanx servers. In this paper we describe the implementation of some of the <b>data</b> <b>abstractions</b> provided by Phalanx, discuss their ability to scale to large systems, and describe an example application. 1. Introduction In this paper we introduce Phalanx, {{a software}} system for building persistent services that support shared data ab [...] ...|$|R
50|$|High-level {{assemblers}} {{also provide}} <b>data</b> <b>abstractions</b> normally found in high-level languages. Examples include structures, unions, classes, and sets. Some high-level assemblers (e.g., TASM and HLA) support object-oriented programming.|$|R
40|$|Abstract. Weakly-typed {{languages}} such as Cobol often force program-mers {{to represent}} distinct <b>data</b> <b>abstractions</b> {{using the same}} low-level physical type. In this paper, we describe a technique to recover implicitly-de ned <b>data</b> <b>abstractions</b> from programs using type inference. We present a novel system of guarded types, a path-sensitive algorithm for inferring guarded types for Cobol programs, and a semantic characterization of correct guarded typings. The results of our inference technique {{can be used to}} enhance program understanding for legacy applications, and to enable a number of type-based program transformations. ...|$|R
50|$|The data {{independence}} and operation independence together gives the feature of <b>data</b> <b>abstraction.</b> There are {{two levels of}} {{data independence}}.|$|E
5000|$|<b>Data</b> <b>abstraction</b> allows {{handling}} {{pieces of}} data in meaningful ways. For example, {{it is the}} basic motivation behind the datatype.|$|E
5000|$|<b>Data</b> <b>Abstraction</b> and Problem Solving with C++: Walls and Mirrors, Fourth edition, (2005), Frank M. Carrano. [...] (Pearson Education, Inc.) ...|$|E
50|$|CLU {{supported}} type parameterized user-defined <b>data</b> <b>abstractions.</b> It was {{the first}} language to offer type-safe bounded parameterized types, using structure where clauses to express constraints on actual type arguments.|$|R
40|$|Abstract: This paper proposes an {{approach}} for the specification {{of the behavior}} of software components that implement <b>data</b> <b>abstractions.</b> By generalizing the ap-proach of behavior models using graph transformation, we provide a concise spec-ification for <b>data</b> <b>abstractions</b> that describes the relationship between the internal state, represented in a canonical form, and the observers of the component. Graph transformation also supports the generation of behavior models that are amenable to verification. To this end, we provide a translation approach into an LTL model on which we can express useful properties that can be model-checked with a SAT solver...|$|R
40|$|Unifying {{programming}} and command languages is a promising idea {{that has yet}} to be thoroughly exploited. Most attempts at such unification have used Lisp or traditional languages, such as Pascal. This paper describes the command and programming language EZ, which attempts to unify command-and programming languages by using high-level string-processing concepts, such as those in SNOBOL 4 and Icon. EZ has particularly simple <b>data</b> <b>abstractions</b> that attempt to bridge the gap between the <b>data</b> <b>abstractions</b> of command languages and those of programming languages. This is accomplished by type fusion, which pushes the differences between some classes of types, such as strings and text files, out of the language and into the implementation. The language, its use, and its implementation are described...|$|R
5000|$|Ingres 10S and 10.2 include native {{comprehensive}} spatial support. Ingres {{includes the}} Geospatial <b>Data</b> <b>Abstraction</b> Library cross-platform spatial data translator.|$|E
5000|$|<b>Data</b> <b>Abstraction</b> and Problem Solving with Java: Walls and Mirrors, Updated edition (2004), Frank M. Carrano and Janet J. Prichard. [...] (.) ...|$|E
5000|$|<b>Data</b> <b>Abstraction</b> and Problem Solving with Java: Walls and Mirrors, (2001), Frank M. Carrano and Janet J. Prichard[...] (Addison Wesley Longman, Inc.) ...|$|E
40|$|<b>Data</b> <b>abstractions</b> such as {{hash tables}} are {{included}} in most runtime libraries because of their widespread use and straightforward implementation. While operating systems and programming languages continue to improve their real-time features, {{much of what is}} offered by a runtime library is not yet suitable for real-time or embedded-systems...|$|R
40|$|ICC++ {{is a new}} C++ {{concurrent}} dialect {{which allows}} sequential/parallel program versions to be maintained with single source, the construction of concurrent <b>data</b> <b>abstractions,</b> convenient expression of irregular and fine-grained concurrency, and supports high performance implementations. ICC++ provides annotations for potential concurrency, facilitating both sharing source with sequential programs and grain size tuning for efficient execution. ICC++ has a notion of object consistency which can be extended structurally and procedurally to implement larger <b>data</b> <b>abstractions.</b> Finally, ICC++ integrates arrays into the object system and hence the concurrency model. In short, ICC++ addresses concurrency {{and its relation to}} abstractions [...] whether they are implemented by single objects, several objects, or object collections. The design of the language, its rationale, and current status are all described. Keywords concurrent object-oriented programming, concurrent languages, parallel [...] ...|$|R
50|$|The {{abstraction}} {{principle is}} often {{stated in the}} context of some mechanism intended to facilitate abstraction. The basic mechanism of control abstraction is a function or subroutine. <b>Data</b> <b>abstractions</b> include various forms of type polymorphism. More elaborate mechanisms that may combine <b>data</b> and control <b>abstractions</b> include: abstract <b>data</b> types, including classes, polytypism etc. The quest for richer abstractions that allow less duplication in complex scenarios is one of the driving forces in programming language research and design.|$|R
5000|$|<b>Data</b> <b>Abstraction</b> and Problem Solving with Java: Walls and Mirrors, Second edition, (2006), Frank M. Carrano and Janet J. Prichard[...] (Pearson/Addison Wesley) ...|$|E
50|$|Abstraction {{can apply}} to control or to data: Control {{abstraction}} is the abstraction of actions while <b>data</b> <b>abstraction</b> is that of data structures.|$|E
5000|$|<b>Data</b> <b>Abstraction</b> and Problem Solving with C++: Walls and Mirrors, Seventh edition, (2017), Frank M. Carrano and Timothy M. Henry[...] (Pearson Education, Inc.) ...|$|E
40|$|Control of {{complexity}} in large programming systems. Building abstractions: computational processes; higher-order procedures; compound data; and <b>data</b> <b>abstractions.</b> Controlling interactions: generic operations; self-describing data; message passing; streams and infinite data structures; and object-oriented programming. Meta-linguistic abstraction: interpretation of programming languages; machine model; compilation; and embedded languages. Substantial weekly programming assignments {{are an integral}} part of the course. Enrollment may be limited...|$|R
40|$|This review {{provides}} an overview of the placement function within automatic layout systems. The automatic placement problem is defined and the <b>data</b> <b>abstractions</b> are described. The discussion divides placement algorithms into two classes: constructive and iterative. Applications of the algorithms within layout systems are described. A large number of references is provided to allow use as a guide to placement literature. 1...|$|R
40|$|The {{following}} fundamental theorem {{about the}} adequacy of the algebraic specification methods for <b>data</b> <b>abstractions</b> is proved. Let A be a data type with n subtypes. Then A is computable if, and only if, A possesses an equational specification, involving at most 3 (n + 1) hidden operators and 2 (n + 1) axioms, which defines it under initial and final algebra semantics simultaneously...|$|R
5000|$|<b>Data</b> <b>Abstraction</b> and Problem Solving with C++: Walls and Mirrors, (1995), Frank M. Carrano, Paul Helman, and Robert Veroff. [...] (Benjamin Cummings Publishing Co.) ...|$|E
5000|$|<b>Data</b> <b>Abstraction</b> and Problem Solving with C++: Walls and Mirrors, Third edition, (2002), Frank M. Carrano and Janet J. Prichard. [...] (Pearson Education, Inc.) ...|$|E
50|$|Object-oriented {{languages}} {{support a}} series of runtime mechanisms that increase the flexibility and adaptability of the programs like <b>data</b> <b>abstraction,</b> encapsulation, modularity, inheritance, polymorphism, and reflection.|$|E
40|$|Introduction The Spec # {{programming}} language {{is an extension}} of the. NET {{programming language}} C#, consisting of speci cation constructs like pre- and postconditions, non-null types and some facilities for higher-level <b>data</b> <b>abstractions</b> [1]. Function objects are used to express higher-order features in object-oriented programs [3]; the C # delegate construct simpli es the implementation of such objects. A delegate instance represents a method together with a possibl...|$|R
40|$|The Psyche {{project at}} the University of Rochester aims to develop a high {{performance}} operating system to support {{a wide variety of}} models for parallel programming on a shared-memory multiprocessor. It is predicated on the assumption that no one model of process state or style of communication will prove appropriate for all applications, but that a shared-memory machine can and should support all models. Conventional approaches, such as shared memory or message passing, can be regarded as points on a continuum that reflects the degree of sharing between processes. Psyche enables fully dynamic sharing by providing a user interface based on passive <b>data</b> <b>abstractions</b> in a uniform virtual address space. It ensures that users pay for protection only when it is required by permitting lazy evaluation of protection using keys and access lists. The <b>data</b> <b>abstractions</b> define conventions for sharing the uniform address space; the tradeoff between protection and performance determines the degree to which those conventions are enforced. In the absence of protection boundaries, access to a shared abstraction can be as efficient as a procedure call or a pointer dereference...|$|R
40|$|It is {{well-known}} that <b>data</b> <b>abstractions</b> {{are crucial to}} good software engineering practice. We argue that algorithmic abstractions, or generic algorithms, are perhaps even more important for software reusabil-i ty. Generic algorithms are parameterized procedural schemata that are completely independent of the un-derlying data representation and are derived from con-crete, efficient algorithms. We discuss this notion with illustrations from the structure of an Ada library of reusable software components we are presently devel-oping. ...|$|R
