46|101|Public
25|$|Since at {{a minimum}} the {{starting}} code address vector must always be valid on reset, systems commonly included some nonvolatile memory (e.g. ROM) starting at address zero to contain the vectors and bootstrap code. However, for a general purpose system it is desirable for the operating system {{to be able to}} change the vectors at runtime. This was often accomplished by either pointing the vectors in ROM to a <b>jump</b> <b>table</b> in RAM, or through use of bank switching to allow the ROM to be replaced by RAM at runtime.|$|E
50|$|The <b>jump</b> <b>table</b> can be {{modified}} to point to user-written routines, for example rewriting the screen display routines to display animated graphics or copying the character set into RAM. This use of a <b>jump</b> <b>table</b> was new to small computers at the time.|$|E
50|$|This feature {{can be used}} to {{implement}} a <b>jump</b> <b>table.</b>|$|E
30|$|DTrace sets up all <b>jump</b> <b>tables</b> in {{user mode}} before the {{application}} starts execution. The application then sends the base addresses of the <b>jump</b> <b>tables</b> to the Trace Analyzer. The user mode runtime talks with kernel to enable and stop Intel PT {{before and after}} application execution. These operations are implemented in constructor and destructor, declared with GCC constructor and destructor attributes and invoked automatically by C runtimes.|$|R
50|$|Yet another bit {{operating}} machine, {{similar to}} BitBitJump, copies several bits {{at the same}} time. The problem of computational universality is solved in this case by keeping predefined <b>jump</b> <b>tables</b> in the memory.|$|R
50|$|The 220 {{trail is}} a more {{advanced}} slope style trail which starts with a drop off of a ladder bridge. The trail has large banked turns, gap <b>jumps,</b> <b>table</b> tops, and double jumps.|$|R
50|$|Many compilers will {{optimize}} the switch into a <b>jump</b> <b>table</b> just {{as would be}} done in an assembly implementation.|$|E
50|$|All {{matching}} {{applications are}} then infected by appending {{the virus to}} the CODE 1 resource and adding a corresponding entry to the application's <b>jump</b> <b>table.</b>|$|E
5000|$|ANTI-A: 1,344 bytes plus 8 byte <b>jump</b> <b>table</b> entry. The {{first version}} to be isolated, in France in February 1989. Searches for ANTI-B strains and {{converts}} them into ANTI-Variant.|$|E
50|$|Every {{application}} contains al least a Code #0 resource with size {{information and}} <b>jump</b> <b>tables,</b> a Code #1 resource with executable code and data resources containing pre-initialized values of global variables in compressed form. Other resources {{that may be}} contained are forms, form objects, alerts and multimedia data, e. g. images and sounds.|$|R
3000|$|We {{leverage}} {{the instruction}} pointer filter (IP filter) mechanism provided by Intel PT to trace only the indirect jumps DTrace inserted in application. The i 7 - 7700 platform supports two different IP filters. We set two ranges. One for the primitive functions like dtrace_storeX and dtrace_loadX. The {{other for the}} <b>jump</b> <b>tables.</b> All primitive functions are assembled into [...].text section closely together. The first IP filter range {{is determined by the}} address of the first function and the address of the last instruction in the last function. The filter for <b>jump</b> <b>tables</b> is determined in a similar way. We compare all jump tables’ base addresses for the lowest one before setting the filter, as compilers provide no guarantee for the address order of different global data objects. Global variables may be allocated in a reversed order than what they are defined in the source program.|$|R
50|$|While PL360 {{is at the}} {{semantic}} level of assembly language, another kind of system programming language operates at a higher semantic level, but has specific extensions designed to make the language suitable for system programming. An early example {{of this kind of}} language is LRLTRAN, which extended Fortran with features for character and bit manipulation, pointers, and directly addressed <b>jump</b> <b>tables.</b>|$|R
5000|$|ANTI-B: 1,144 bytes plus 8 byte <b>jump</b> <b>table</b> entry. Discovered in France in September 1990. Despite {{the later}} {{discovery}} date, {{it is believed}} to be the earliest version of the virus. Also known as ANTI-0.|$|E
50|$|The Adventure International games {{published}} for the VIC-20 on cartridge are {{an example}} of software that uses the KERNAL. Because they only use the <b>jump</b> <b>table,</b> the games can be memory dumped to disk, loaded into a Commodore 64, and run without modification.|$|E
50|$|Facilities {{into one}} {{building}} stadiums with tracks including the track Manahan / international-standard athletics, dressing room, heating room, health room, a secretariat, {{a journalist and}} a press conference room, other facilities {{are located in the}} stadium track long <b>jump,</b> <b>table</b> tennis, judo training, fight training degrees, etc..|$|E
30|$|In the runtime files, we declare {{three large}} arrays {{according}} to the sizes of the three <b>jump</b> <b>tables.</b> The arrays are not initialized {{so that they do}} not account for disk space in the linked binary file. During executing the application’s constructor, we unmap all virtual pages assigned for them and map the same physical page at each virtual page base address in the range.|$|R
50|$|The 65CE02 uses a superset of the Rockwell 65SC02 {{instruction}} set. In {{addition to}} the enhancements and bug fixes included in the 65SC02, the 65CE02 includes new instructions for indirect jumps (allows the use of <b>jump</b> <b>tables),</b> 16-bit branches, bit shifting (ASR) and stack relative loads/stores. Several read-modify-write memory instructions (ASL/DEC/INC/PSH/ROR) were enhanced to support 16-bit values. Lastly, instructions supporting the new registers were added.|$|R
5000|$|In computing, {{a dynamic}} linker {{is the part}} of an {{operating}} system that loads and links the shared libraries needed by an executable when it is executed (at [...] "run time"), by copying the content of libraries from persistent storage to RAM, and filling <b>jump</b> <b>tables</b> and relocating pointers. The specific operating system and executable format determine how the dynamic linker functions and how it is implemented.|$|R
5000|$|The {{canonical}} implementation [...] is a <b>jump</b> <b>table</b> {{which consists}} of a preamble that derives the type of the receiver {{and a series of}} constant compares and conditional jumps that jump to the code following the preamble in the relevant method for each receiver type. The <b>jump</b> <b>table</b> is typically allocated for a particular call-site when a monomorphic call-site encounters a different type. The jump-table will have a fixed size and be able to grow, adding cases as new types are encountered up to some small maximum number of cases such as 4, 6 or 8. Once it reaches its maximum size execution for a new receiver type will [...] "fall-off" [...] the end and enter the run-time, typically to perform a method lookup starting with the first-level method cache.|$|E
5000|$|The warning {{is issued}} by the {{compiler}} because it can statically determine that in [...] the expression [...] evaluates always to true, because it contains an ELF <b>jump</b> <b>table</b> entry. The error message is {{issued by the}} linker. The build for [...] includes the same warning but no link error.|$|E
5000|$|Jump tables can be {{especially}} efficient if the range tests can be omitted. For example, if the control value is an enumerated type (or a character) then it can only contain a small fixed range of values and a range test is redundant provided the <b>jump</b> <b>table</b> {{is large enough to}} handle all possible values David.A. SPULER ...|$|E
25|$|An {{internet}} {{survey found that}} declawed cats {{were more likely to}} <b>jump</b> on <b>tables</b> and counters and house-soiled more than non-declawed cats (25% vs. 15%).|$|R
50|$|The branch {{instructions}} include conditional and unconditional relativebranches. A branch {{using the}} address in a register is provided; arelative branch which adds a scaled register operand to the programcounter is provided to support <b>jump</b> <b>tables.</b> Branches {{to up to}} instructions distance are encoded in a single word.The procedure calling instructions include relative calls, calls via theconstant pool, indexed calls via a dedicated register and calls via aregister. Most calls within a single program module can be encoded in asingle instruction; inter-module calling requires at most two instructions.It {{is up to the}} callee to save the link-register if it is not a leaf-function, a single instruction extends the stack and saves the link register.|$|R
5000|$|... 1 ABAP has no {{distinct}} boolean type.2 When overloaded, {{the operators}} [...] and [...] are eager and can return any type.3 This only applies to runtime-evaluated expressions, [...] and [...] Expressions in static initializers or manifest constants use eager evaluation.4 Fortran operators are neither short-circuit nor eager: the language specification allows the compiler {{to select the}} method for optimization.5 ISO/IEC 10206:1990 Extended Pascal allows, but does not require, short-circuiting.6 ISO/IEC 10206:1990 Extended Pascal supports [...] and [...]7 Smalltalk uses short-circuit semantics {{as long as the}} argument to [...] is a block (e.g., [...] ).8 BASIC languages that supported CASE statements did so by using the conditional evaluation system, rather than as <b>jump</b> <b>tables</b> limited to fixed labels.9 Delphi_(programming_language) and Free_Pascal default to short circuit evaluation. This may be changed by compiler options but {{does not seem to be}} used widely.|$|R
50|$|From {{a modern}} {{programming}} point of view, the {{earlier versions of}} Commodore BASIC presented a host of bad programming traps for the programmer. As most of these issues derived from Microsoft BASIC, virtually every home computer BASIC of the era suffered from similar deficiencies. Every line of a Microsoft BASIC program was assigned a line number by the programmer. It was common practice to increment numbers by some value (5, 10 or 100) to make inserting lines during program editing or debugging easier, but bad planning meant that inserting large sections into a program often required restructuring the entire code. A common technique was to start a program at some low line number with an ON...GOSUB <b>jump</b> <b>table,</b> with {{the body of the}} program structured into sections starting at a designated line number like 1000, 2000, and so on. If a large section needed to be added, it could just be assigned the next available major line number and inserted to the <b>jump</b> <b>table.</b>|$|E
50|$|PL/I {{implements}} a <b>jump</b> <b>table</b> as {{an array}} of label variables. These may be initialized in an unusual way by using a subscripted statement label. PL/I label variables are not simply {{the address of the}} statement, but usually contain additional information {{on the state of the}} code block to which they belong. Without the unusual initialization, this could also be coded with calls and {{an array of}} entry variables.|$|E
5000|$|... {{depending}} on the compiler and used optimization level, the compiler may interpret the conditional as always true (because [...] {{can be seen as}} undefined from a standards point of view). An alternative to the above construct is using a system API to check if [...] is defined (e.g. dlsym with [...] ). The above check may also fail for other reasons, e.g. when func contains an elf <b>jump</b> <b>table</b> entry.|$|E
50|$|During a {{show with}} the Avengers at Iguana Studios, during which Sandy Pearlman was in {{attendance}} (although {{he was really}} only there to watch the Avengers performance), Rezabek broke his arm while performing on stage after tripping over a microphone cord. Rezabek was notorious for his electrifying performances, oftentimes <b>jumping</b> onto <b>tables</b> and throwing drinks onto the floor.|$|R
50|$|Molony won six {{consecutive}} Irish jump racing Champion Jockeys titles between 1946 and 1951. He finished runner-up to his elder brother, Tim, in the British <b>jump</b> jockeys <b>table</b> 1949-50. Molony rode 186 winners (in Ireland, Britain and US) in 1949, including 94 jumps winners. The latter {{was a record}} that stood until broken by Charlie Swan in 1992.|$|R
50|$|LPSSS {{offers the}} {{standard}} ICSE curriculum. It has two sessions per day, {{one in the}} morning (0700-1200 hrs) and one in the afternoon (1230-1730 hrs). The campus includes a five floored main building, the Ramniranjan Podar Hall and a field equipped with modern sporting equipment and basketball courts, cricket nets, long <b>jump</b> pits, <b>table</b> tennis halls and football arrangements.|$|R
5000|$|The Lt. Kernal {{hard drive}} {{subsystem}} included a push {{button on the}} host adapter called ICQUB (pronounced [...] "ice cube"), {{which could be used}} to halt a running program and capture a RAM image to disk. This would work with most copy-protected software that did not do disk overlays and/or bypass the KERNAL ROM <b>jump</b> <b>table.</b> The RAM image was runnable only on the Lt. Kernal system on which it was captured, thus preventing the process from being used to distribute unlicensed software.|$|E
5000|$|The [...] "predefined" [...] method loads {{the program}} counter (PC) {{directly}} with the address of some entry inside the interrupt vector table. The <b>jump</b> <b>table</b> itself contains executable code. While in principle an extremely short interrupt handler could be stored entirely inside the interrupt vector table, in practice the code at each entry is a single jump instruction that jumps to the full interrupt service routine (ISR) for that interrupt. The Atmel AVR and all 8051 and Microchip microcontrollers use the predefined approach.|$|E
50|$|The Commodore 8-bit machines' KERNAL {{consists}} of the low-level, close-to-the-hardware OS routines roughly equivalent to the BIOS in IBM PC compatibles (in contrast to the BASIC interpreter routines, also located in ROM) as well as higher-level, device-independent I/O functionality, and is user-callable via a <b>jump</b> <b>table</b> whose central (oldest) part, for reasons of backwards compatibility, remains largely identical throughout the whole 8-bit series. The KERNAL ROM occupies the last 8 KB of the 8-bit CPU's 64 KB address space ($E000-$FFFF).|$|E
60|$|The rabbit <b>jumped</b> {{from the}} <b>table</b> and ran--or rather hopped--to the further wall, where {{he opened a}} door so tiny that even Toto could {{scarcely}} have crawled through it.|$|R
50|$|Johnson {{was born}} in Des Moines, Iowa, the {{daughter}} of Doug and Teri Johnson. Her parents enrolled her in a gymnastics class at age three after they noticed her climbing cabinets and <b>jumping</b> off <b>tables.</b> At age six, Johnson was one of Liang Chow's first students when he opened a gymnastics school in West Des Moines. She is a devout Christian.|$|R
5000|$|Parkour burpee : Following one burpee on the ground, {{the athlete}} <b>jumps</b> upon a <b>table</b> and {{performs}} the second burpee on the <b>table,</b> then <b>jumps</b> {{back to the}} initial position.|$|R
