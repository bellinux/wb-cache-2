40|3994|Public
2500|$|Much of the {{reduction}} of the landing precision error was accomplished by an entry guidance algorithm, derived from the algorithm used for guidance of the Apollo Command Modules returning to Earth in the Apollo program. This guidance uses the lifting force experienced by the aeroshell to [...] "fly out" [...] any <b>detected</b> <b>error</b> in range and thereby arrive at the targeted landing site. In order for the aeroshell to have lift, its center of mass is offset from the axial centerline that results in an off-center trim angle in atmospheric flight. This is accomplished by a series of ejectable ballast masses consisting of two [...] tungsten weights that were jettisoned minutes before atmospheric entry. The lift vector was controlled by four sets of two reaction control system (RCS) thrusters that produced approximately [...] of thrust per pair. This ability to change the pointing of the direction of lift allowed the spacecraft to react to the ambient environment, and steer toward the landing zone. Prior to parachute deployment the entry vehicle ejected more ballast mass consisting of six [...] tungsten weights such that the center of gravity offset was removed.|$|E
5000|$|Error correction: {{to replace}} a <b>detected</b> <b>error</b> with a correct {{statement}} ...|$|E
5000|$|By adding bits to each encoded unit, {{redundancy}} {{allows the}} computer to both detect errors in coded data and correct them based on mathematical algorithms. Errors generally occur in low probabilities due to random bit value flipping, or [...] "physical bit fatigue", loss of the physical bit in storage {{of its ability to}} maintain a distinguishable value (0 or 1), or due to errors in inter or intra-computer communication. A random bit flip (e.g., due to random radiation) is typically corrected upon detection. A bit, or a group of malfunctioning physical bits (not always the specific defective bit is known; group definition depends on specific storage device) is typically automatically fenced-out, taken out of use by the device, and replaced with another functioning equivalent group in the device, where the corrected bit values are restored (if possible). The cyclic redundancy check (CRC) method is typically used in communications and storage for error detection. A <b>detected</b> <b>error</b> is then retried.|$|E
40|$|Memory-interface {{integrated}} circuit not only <b>detects</b> <b>errors</b> in data from other circuits but also <b>detects</b> <b>errors</b> within itself. Memory-interface chip encodes 16 -bit words with Hamming code for single-error correction or double-error detection. Chip used in fault-tolerant computers under development by NASA...|$|R
40|$|Programs can be {{composed}} by successively applying transformations that add features to a code base. These transformations must apply without errors but we cannot test every combination of them. We must <b>detect</b> <b>errors</b> automatically to encapsulate single transformations and scale them. Prior work focused on transformations that monotonically add code {{in order to}} produce program variants. We generalized their work in that we automatically <b>detect</b> composition <b>errors</b> for transformations that add and remove code. Specifically, we <b>detect</b> <b>errors</b> for automated refactorings that transform a program when selected. The generalization is important to <b>detect</b> <b>errors</b> for modules that add and remove code. As a result, we can now guarantee that refactorings and sequences of refactorings compose without errors in featureoriented designs. 1...|$|R
30|$|The {{results of}} this work show that NemoViz reduced the time that users spent {{defining}} the inputs of a NEMO 5 simulation. When using NemoViz, Expert NEMO 5 users <b>detected</b> <b>errors</b> {{twice as fast as}} when NemoViz was not used, and non-expert NEMO 5 users were able to <b>detect</b> <b>errors</b> as effectively and efficiently as expert users.|$|R
50|$|When {{the beta}} {{cells in the}} {{pancreatic}} islets detect lower than normal blood glucose levels, insulin secretion into the blood ceases and the alpha cells are stimulated to secrete glucagon into the blood. This inhibits the uptake of glucose from the blood by the liver, fats cells and muscle. Instead the liver is strongly stimulated to manufacture glucose from glycogen (through glycogenolysis) and from non-carbohydrate sources (such as lactate and de-aminated amino acids) using {{a process known as}} gluconeogenesis. The glucose thus produced is discharged into the blood correcting the <b>detected</b> <b>error</b> (hypoglycemia). The glycogen stored in muscles remains in the muscles, and is only broken down, during exercise, to glucose-6-phosphate and thence to pyruvate to be fed into the citric acid cycle or turned into lactate. It is only the lactate and the waste products of the citric acid cycle that are returned to the blood. The liver can take up only the lactate, and by the process of energy consuming gluconeogenesis convert it back to glucose.|$|E
5000|$|Much of the {{reduction}} of the landing precision error was accomplished by an entry guidance algorithm, derived from the algorithm used for guidance of the Apollo Command Modules returning to Earth in the Apollo program. This guidance uses the lifting force experienced by the aeroshell to [...] "fly out" [...] any <b>detected</b> <b>error</b> in range and thereby arrive at the targeted landing site. In order for the aeroshell to have lift, its center of mass is offset from the axial centerline that results in an off-center trim angle in atmospheric flight. This is accomplished by a series of ejectable ballast masses consisting of two 75 kg tungsten weights that were jettisoned minutes before atmospheric entry. The lift vector was controlled by four sets of two reaction control system (RCS) thrusters that produced approximately 500 N of thrust per pair. This ability to change the pointing of the direction of lift allowed the spacecraft to react to the ambient environment, and steer toward the landing zone. Prior to parachute deployment the entry vehicle ejected more ballast mass consisting of six 25 kg tungsten weights such that the center of gravity offset was removed.|$|E
30|$|There {{are three}} {{possible}} decoding outcomes. The first outcome is a correct decoding where x̃=x. Second is a <b>detected</b> <b>error</b> where some {{maximum number of}} iterations is reached with x̃x because H x̃ 0. The last case is an undetected error where the decoder terminates because H x̃= 0, but x̃≠x.|$|E
40|$|To detect, diagnose, and {{eliminate}} defects as efficiently and {{early as possible}} Why Specification-based Analysis and Testing? » Specification states what system should do- this information {{should be used to}} drive testing- code-based testing <b>detects</b> <b>errors</b> of omission only by chance- specification-based testing is more likely to <b>detect</b> <b>errors</b> of omission » Specifications enable formalized automation 4 SEA Grou...|$|R
50|$|The Parity bit {{is used to}} <b>detect</b> <b>error</b> in the OSF and SN fields.|$|R
5000|$|States {{that do not}} use {{electronic}} equipment to assist voters with <b>detecting</b> <b>errors</b> must: ...|$|R
30|$|In the GitHub repository, {{there is}} a file named “Erros.dat” 2 {{containing}} all the seeds that exposed an error along with a message describing the <b>detected</b> <b>error.</b> The file contains 236 rows, each row being a seed that was stored, so during the algorithm’s development, 236 errors were detected and corrected.|$|E
40|$|Test trap {{consists}} of logic nest of five printed circuit boards, plus power supply within the unit. Device monitors {{more than one}} logic area simultaneously, gives visual display of <b>detected</b> <b>error,</b> operates at computer speed, maintains readily available logic description of cards used, and is compatible with existing computer circuitry...|$|E
30|$|Complexity can {{be reduced}} by resorting to a hybrid solution, which {{combines}} MRB with IAs. More precisely, the hybrid approach consists of performing low-complexity decoding through an IA, at first, and invoking the MRB algorithm only when the IA {{is not able to}} find any valid codeword (<b>detected</b> <b>error).</b> The hybrid decoder has recently been used to decode also LDPC codes constructed on non-binary finite fields [15], which represent another option for space TC links [16, 17]. Due to their higher decoding complexity, however, non-binary LDPC codes are less attractive than their binary counterparts.|$|E
30|$|Possible {{dropping}} on RLC {{might be due}} to <b>detected</b> <b>errors</b> or exceeded retransmissions of certain packets.|$|R
50|$|A cyclic {{redundancy}} check uses the remainder of polynomial division to <b>detect</b> <b>errors</b> in transmitted messages.|$|R
50|$|Runtime error {{detection}} tools can only <b>detect</b> <b>errors</b> in the executed control {{flow of the}} application.|$|R
3000|$|One of {{the most}} {{important}} metrics for safety-critical applications is the time between a <b>detected</b> <b>error</b> and the transition to a safe state. In Profisafe, the Safety Function Response Time (SFRT [...]) specifies the worst-case time before a safe state is achieved in the presence of errors or failures in the safety function [38]. Depending on the application, the requirements of SFRT range from milliseconds to seconds. The SFRT for our approach can be described and derived, using the same notation as in IEC 61784 - 3 - 3, as follows.|$|E
30|$|The {{occurrence}} of failure is generally assumed on detecting some {{error in the}} system state (Haider et al. 2011). A failure {{can also be considered}} as a noticeable deviation from accepted specifications (Siva Sathya and Syam Babu 2010). Failures may be obvious in case of a <b>detected</b> <b>error.</b> Failure is actually observed when a deviated behavior is produced by the system instead of a normal or expected one. We have identified categories of failures that are, omission, hardware, response, network, software, crash, and miscellaneous failures, which we detail below.|$|E
40|$|Abstract. The {{quality of}} decoded video in {{erroneous}} environment depends on efficient detection and concealment of errors. In this paper, an improved error detection technique and a novel temporal error concealment technique for MPEG- 4 video are proposed. The proposed detection technique can detect efficiently some transmission error as well locate the exact {{position of the}} first error. The proposed temporal concealment method can mask the impairments caused by the <b>detected</b> <b>error</b> significantly with very low computation complexity. Experimental results show the improved detection technique combining with the proposed temporal concealment method can increase the video quality efficiently...|$|E
5000|$|Check {{character}} {{allows a}} computer to <b>detect</b> <b>errors</b> in the code, similar to ISBN's check digit ...|$|R
50|$|Thus, frames with <b>detected</b> <b>errors</b> {{would be}} {{essentially}} unusable {{even if they}} were not deleted by the frame processor.|$|R
5000|$|A value (the error number) {{is stored}} in [...] by certain library {{functions}} when they <b>detect</b> <b>errors.</b> At program startup, the value stored is zero. Library functions store only values greater than zero. Any library function can alter the value stored before return, {{whether or not they}} <b>detect</b> <b>errors.</b> Most functions indicate that they <b>detected</b> an <b>error</b> by returning a special value, typically NULL for functions that return pointers, and &minus;1 for functions that return integers. A few functions require the caller to preset [...] to zero and test it afterwards to see if an <b>error</b> was <b>detected.</b>|$|R
40|$|A {{photonic}} {{integrated circuit}} that performs 40 -Gb/s payload-envelope detection (PED) and MGM label detection for asynchronous variable-length optical-packet switching is demonstrated. The circuit {{consists of an}} InP photonic integrated device combined with electronic GaAs and InP devices on a carrier. Asynchronous variable-length optical packets with 40 -Gb/s returnto-zero (RZ) payloads and 10 -Gb/s non-RZ (NRZ) labels are processed by the circuit. The circuit outputs a PED electrical signal that represents the temporal location of the payload and a 10 -Gb/s electrical signal representing the optical label. The optical label is <b>detected</b> <b>error</b> free. The PED signal has a rise/fall time of 3 -ns and 150 -ps jitter. The PED signal was also used to erase and rewrite the optical labels error free...|$|E
40|$|Abstract. A {{method for}} {{predicting}} software failures to critical information in-frastructures {{is presented in}} this paper. Software failures in critical infrastruc-tures can stem from logical errors in the source code which manipulates con-trollers that handle machinery; i. e. Remote Terminal Units and Programmable Logic Controllers in SCADA systems. Since these controllers are often respon-sible for handling hardware in critical infrastructures, detecting such logical er-rors in the software controlling their functionality implies detecting possible failures in the machine itself and, consequently, predicting single or cascading infrastructure failures. Our method may also be tweaked to provide estimates of the impact and likelihood of each <b>detected</b> <b>error.</b> An existing source code analy-sis method is adjusted to analyze code able to send commands to SCADA sys-tems. A practical implementation of the method is presented and discussed. Ex-amples are given using open-source SCADA operating interfaces. ...|$|E
40|$|A sensitivity-based {{methodology}} {{for improving the}} finite element model of a given structure using test modal data and a few sensors is presented. The proposed method searches for both the location and sources of the mass and stiffness errors and does {{not interfere with the}} theory behind the finite element model while correcting these errors. The updating algorithm is derived from the unconstrained minimization of the squared L sub 2 norms of the modal dynamic residuals via an iterative two-step staggered procedure. At each iteration, the measured mode shapes are first expanded assuming that the model is error free, then the model parameters are corrected assuming that the expanded mode shapes are exact. The numerical algorithm is implemented in an element-by-element fashion and is capable of 'zooming' on the <b>detected</b> <b>error</b> locations. Several simulation examples which demonstate the potential of the proposed methodology are discussed...|$|E
40|$|Abstract. This paper proposes {{an on-line}} <b>error</b> <b>detecting</b> method for a {{manually}} annotated corpus using min-max modular (M 3) neural net-works. The basic {{idea of the}} method is to use guaranteed convergence of the M 3 network to <b>detect</b> <b>errors</b> in learning data. To confirm the ef-fectiveness of the method, a preliminary computer experiment was per-formed on a small Japanese corpus containing 217 sentences. The {{results show that the}} method can not only <b>detect</b> <b>errors</b> within a corpus, but may also discover some kinds of knowledge or rules useful for natural language processing. ...|$|R
5000|$|A Proposal to <b>Detect</b> <b>Errors</b> in Enterprise Application Integration Solutions, Journal of Systems and Software (JSS). First {{published}} online. - http://www.guarana-project.net/rzfrantz/publications/jss-2011.pdf ...|$|R
5000|$|A {{checksum}} or error-correcting code can be {{kept for}} each block or sector in order to <b>detect</b> <b>errors</b> or correct errors.|$|R
40|$|Numerous {{populations of}} wild Atlantic salmon have {{declined}} in recent years. The Atlantic salmon in Girnock Burn, an upland spate {{tributary of the}} River Dee, Scotland have been monitored intensely by government scientists since 1966. The burn is equipped with upstream and downstream traps, which have enabled monitoring of juveniles leaving the burn and adults returning to it since 1966. Recently, due {{to a decline in}} numbers of female returns, a supportive breeding program was instigated. Using microsatellite-based DNA profiling, this study exploited existing and novel tissue samples to investigate aspects of Atlantic salmon biology and conservation. A panel of up to 12, mainly highly polymorphic, microsatellite loci were employed to derive allele frequency data and to resolve parentage in egg, parr, smolt and anadromous adult samples taken between 1991 and 2004. Genotyping error was investigated and rectified where possible. Overall, the <b>detected</b> <b>error</b> was low (c. 0. 5...|$|E
40|$|Large-scale {{automated}} assembly {{systems are}} widely used in automotive, aerospace and consumer electronics industries to obtain high quality products in less time. However, one disadvantage of these automated systems {{is that they are}} composed of too many working parameters. Since {{it is not possible to}} monitor all these parameters during the assembly process, an undetected error may propagate and result in a more critical <b>detected</b> <b>error.</b> In this paper, a unique way of detecting and diagnosing these types of failures by using Virtual Factories is discussed. A Virtual Factory was developed by building and linking several software modules to predict and diagnose propagated errors. A multi-station assembly system was modeled and a previously discussed ÔÔoff-line prediction and recoveryÕÕ method was applied. The obtained results showed that this method is capable of predicting propagated errors, which are too complex to solve for a human expert...|$|E
40|$|Since their dawning, space {{communications}} {{have been}} among the strongest driving applications for the development of error correcting codes. Indeed, space-to-Earth telemetry (TM) links have extensively exploited advanced coding schemes, from convolutional codes to Reed-Solomon codes (also in concatenated form) and, more recently, from turbo codes to low-density parity-check (LDPC) codes. The efficiency of these schemes has been extensively proved in several papers and reports. The situation is a bit different for Earth-to-space telecommand (TC) links. Space TCs must reliably convey control information as well as software patches from Earth control centers to scientific payload instruments and engineering equipment onboard (O/B) spacecraft. The success of a mission may be compromised because of an error corrupting a TC message: a <b>detected</b> <b>error</b> causing no execution or, even worse, an undetected error causing a wrong execution. This imposes strict constraints on the maximum acceptable detected and undetected error rates...|$|E
50|$|As {{a result}} of this, failure to <b>detect</b> <b>errors</b> and roll back the {{enclosing}} transaction may cause failures of isolation and consistency.|$|R
50|$|To {{compensate}} mistakes or intentional failures {{by following}} a prescribed procedure, independent reviews are recommended. Such reviews can help <b>detect</b> <b>errors</b> and irregularities.|$|R
40|$|We {{describe}} a novel method for <b>detecting</b> <b>errors</b> in task-based human-computer (HC) dialogues by automatically deriving them from semantic tags. We examined 27 HC dialogues from the DARPA Communicator air travel domain, comparing user inputs to system responses {{to look for}} slot value discrepancies, both automatically and manually. For the automatic method, we labeled the dialogues with semantic tags corresponding to &quot;slots &quot; that would be filled in &quot;frames &quot; {{in the course of}} the travel task. We then applied an automatic algorithm to <b>detect</b> <b>errors</b> in the dialogues. The same dialogues were also manually tagged (by a different annotator) to label errors directly. An analysis of the results of the two tagging methods indicates that it may be possible to <b>detect</b> <b>errors</b> automatically in this way, but our method needs further work to reduce the number of false <b>errors</b> <b>detected.</b> Finally, we present a discussion of the differing results from the two tagging methods...|$|R
