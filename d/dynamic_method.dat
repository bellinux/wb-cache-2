738|5666|Public
5000|$|Using sub maximal weights {{accompanied}} by maximal speed (<b>dynamic</b> <b>method).</b>|$|E
50|$|Other {{methods include}} the Vapor Pressure Method, Gravity-Equilibrium Method, <b>Dynamic</b> <b>Method,</b> Semi-dynamic Method, and the Transient Method.|$|E
5000|$|ASTM D5169-98 (2010) Standard Test Method for Shear Strength (<b>Dynamic</b> <b>Method)</b> of Hook and Loop Touch Fasteners ...|$|E
5000|$|These <b>dynamic</b> <b>methods</b> allow {{developers}} to perform operations {{without having to}} implement interfaces or extend base classes. Grails provides <b>dynamic</b> <b>methods</b> based {{on the type of}} class. For example, domain classes have methods to automate persistence operations like save, delete and find ...|$|R
30|$|Related {{work has}} several static and <b>dynamic</b> <b>methods</b> for {{performance}} evaluation of parallel computer systems. A comprehensive survey on methods and tools used for design-space exploration {{is presented in}} [8]. Our focus is on <b>dynamic</b> <b>methods</b> {{and some of the}} closest related research to our work are examined in the following.|$|R
30|$|Static {{methods are}} faster and provide {{significantly}} larger {{coverage of the}} design-space than <b>dynamic</b> <b>methods.</b> However, static methods are less accurate as they cannot take into account dynamic performance aspects of a multiprocessor system. Furthermore, <b>dynamic</b> <b>methods</b> are better suited for spotting delayed task response times due to blocking of shared resources.|$|R
5000|$|<b>Dynamic</b> <b>method</b> {{calls are}} {{triggered}} by a value of type [...] as any implicit or explicit parameter (and not just a receiver). For example: ...|$|E
50|$|The {{main current}} {{implementation}} is OCaml, which added class inheritance and <b>dynamic</b> <b>method</b> dispatch to Caml the Categorical Abstract Machine Language, {{these are a}} variants of MetaLanguage ML notable for type-inference.|$|E
50|$|Product {{development}} {{methods can}} be classified according to whether they are focused on handling stable or unstable conditions. Lean product development is a <b>dynamic</b> <b>method</b> of product development that handles unstable conditions.|$|E
40|$|We study {{stationary}} {{states in}} a diluted asymmetric (kinetic) Ising model. We apply the recently introduced <b>dynamic</b> cavity <b>method</b> to compute magnetizations of these stationary states. Depending on the update rule, {{different versions of the}} <b>dynamic</b> cavity <b>method</b> apply. We here study synchronous updates and random sequential updates, and compare local properties computed by the <b>dynamic</b> cavity <b>method</b> to numerical simulations. Using both types of updates, the <b>dynamic</b> cavity <b>method</b> is highly accurate at high enough temperatures. At low enough temperatures, for sequential updates the <b>dynamic</b> cavity <b>method</b> tends to a fixed point, but which does not agree with numerical simulations, while for parallel updates, the <b>dynamic</b> cavity <b>method</b> may display cyclic behavior. When it converges and is accurate, the <b>dynamic</b> cavity <b>method</b> offers a huge speed-up compared to Monte Carlo, particularly for large systems. Comment: 12 pages, 5 figure...|$|R
3000|$|... values. From the {{comparisons}} between mean values by <b>dynamic</b> and static <b>methods,</b> {{it can be}} seen that all three <b>dynamic</b> <b>methods</b> show the same trends of measured values, though the differences with static values varied.|$|R
40|$|The book {{presents}} an updated state-of-the-art overview of <b>dynamic</b> <b>methods</b> for structural health monitoring and damage detection in structures, with {{special emphasis on}} advanced {{research in the field}} today. The topic is treated as a series of lessons, explaining both theoretical and experimental aspects of <b>dynamic</b> non-destructive <b>methods</b> and their connection with inverse and identification problems in structural dynamics...|$|R
5000|$|IronRuby [...] is an {{implementation}} of the Ruby programming language targeting Microsoft [...]NET framework. It is implemented {{on top of the}} Dynamic Language Runtime (DLR), a library running on top of the Common Language Infrastructure that provides dynamic typing and <b>dynamic</b> <b>method</b> dispatch, among other things, for dynamic languages.|$|E
50|$|One use of {{this method}} is in the {{determination}} of asteroid masses via the <b>dynamic</b> <b>method.</b> In this procedure Gauss' method is used twice, {{both before and after}} a close interaction between two asteroids. After both orbits have been determined the mass of {{one or both of the}} asteroids can be worked out.|$|E
50|$|A {{qualitative}} {{finding of}} the <b>dynamic</b> <b>method</b> is {{the similarity of}} a coherence policy of economic integration and a mixture of previously separate liquids in a retort: they finally get one colour and become one liquid. Economic space (tax, insurance and financial policies, customs tariffs, etc.) all finally become the same along with the stages of economic integration.|$|E
50|$|Grails {{features}} <b>dynamic</b> <b>methods</b> {{on several}} classes through mixins. A mixin {{is a method}} that is added to a class dynamically, as if the functionality had been compiled into the program.|$|R
40|$|The Geodesic <b>Dynamic</b> Relaxation <b>method</b> 1 is an {{extension}} of the existing <b>Dynamic</b> Relaxation <b>method</b> that allows the user to incorporate equality constraint conditions to minimization problems of strain energy functions. The existing <b>Dynamic</b> Relaxation <b>method</b> has been widely adopted as a form-finding method for mechanically and pneumatic pre-stressed tensile and bending active systems. While each structural component is usually modelled using an elastic material in the <b>Dynamic</b> Relaxation <b>method,</b> equality constraint conditions are introduced in the Geodesic <b>Dynamic</b> Relaxation <b>Method</b> as an alternative way to model some of the structural components in form-finding problems. While the Geodesic <b>Dynamic</b> Relaxation <b>method</b> directly relates to the structural behavior of systems, the algorithm can also be used in a purely geometric context. More specifically, it allows the user to construct a geodesic line on an implicit surface. his paper explains the Geodesic <b>Dynamic</b> Relaxation <b>method</b> briefly, and demonstrates both its structural and geometric applications. The structural applications relate to pre-stressed tensile structures, whereas the geometric application demonstrates the generation of fractal trees with geodesic branches on given implicit surfaces. The paper concludes and makes suggestions for future works. This paper will be of interest to structural and architectural engineers with an interest in computational design as well as computer scientists...|$|R
50|$|Some {{implementations}} {{do not use}} {{a mapping}} table, and instead calculate locations using an algorithm. These implementations utilize <b>dynamic</b> <b>methods</b> to calculate the location on access, rather than storing the information in a mapping table.|$|R
50|$|Domestic savings {{rates of}} the member states were {{observed}} to strive to one magnitude, and the <b>dynamic</b> <b>method</b> of forecasting this phenomenon has also been developed. Overall dynamic picture of economic integration {{has been found to}} look quite similar to unification of previously separate basins after opening intraboundary sluices, where instead of water the value added (revenues) of entities of member states interact.|$|E
50|$|Some approaches, such as Scrum {{and extreme}} programming, make {{the need for}} method {{adaptation}} explicit. With these less-prescriptive frameworks, one of the principles is that no single process fits every product development, but rather that practices should be tailored {{to the needs of}} the product. Mehdi Mirakhorli proposes a tailoring practice that provides a sufficient road-map and guidelines for adapting all the practices. RDP Practice is designed for customizing XP. This practice, first proposed as a long research paper in the APSO workshop at the ICSE 2008 conference, is currently the only proposed and applicable method for customizing XP. Although it is specifically a solution for XP, this practice has the capability of extending to other methodologies. At first glance, this practice seems to be in the category of static method adaptation but experiences with RDP Practice says that it can be treated like <b>dynamic</b> <b>method</b> adaptation. The distinction between static method adaptation and <b>dynamic</b> <b>method</b> adaptation is subtle.|$|E
50|$|The dynamic architect-led {{design-build}} workflow reintroduces discursive coordination, {{collaboration and}} consistent, reflexive managerial oversight over {{the arc of}} a project schedule, maximizing project efficiency (time, cost, functionality) without compromising design performance or the quality of project outcomes. Design-build can be an iterative and <b>dynamic</b> <b>method,</b> reflecting an emergent design process in which decisions are made holistically and progressively refined as interdependencies are prioritized, identified and coordinated.|$|E
40|$|The paper {{describes}} {{the use of}} <b>dynamic</b> <b>methods</b> of laser ranging of a low altitude satellite along with proposed experiments involving both <b>dynamic</b> and geodetic <b>methods</b> of laser ranging of the Lageos satellite. Particular attention {{is given to the}} testing of laser ranging techniques across the San Andreas Fault in California where it is hoped that plate motion will be observable after several years of measurements...|$|R
40|$|Abstract. Calculate {{and analyze}} the {{frequency}} of the simple box girder based on the unfinished Ba gong River Bridge. The frequency values which were obtained by <b>dynamic</b> test <b>method</b> and theoretical analysis method were compared in this paper. The results showed that the measured values of <b>dynamic</b> test <b>method</b> are close to the results of theoretical analysis, the error is within permissible range, so <b>dynamic</b> test <b>method</b> is suitable for measuring the frequency of simply-supported box girder...|$|R
40|$|When thermal {{generating}} {{units were}} constrained {{with the total}} nitrogen oxides emissions, we determined the optimum operative pattern by the <b>dynamic</b> programming <b>method</b> in the previous paper. However, using the <b>dynamic</b> programming <b>method,</b> memory requirement will increase more in case of many grids requirement or many informations given to these girds (in our previous example, when we gave informations of the operative pattern to the girds, memory requirement increased from 17 kW to 98 kW). In this time, we present the other method which decides the optimum operative pattern than the <b>dynamic</b> programming <b>method.</b> And we apply our method to model system, and report that our method requires less memory domain and computing time than the <b>dynamic</b> programming <b>method.</b> ...|$|R
5000|$|In contrast, Q-guidance is a <b>dynamic</b> <b>method,</b> {{reminiscent}} of the theories dynamic programming or state based feedback. In essence, it says [...] "never mind where {{we were supposed to}} be, given where we are what should we do to make progress towards the goal of reaching the required target at the required time". To do this it relies on the concept of [...] "velocity to be gained".|$|E
5000|$|In case of <b>dynamic</b> <b>method</b> and indexer calls, {{overload}} resolution {{happens at}} run-time {{according to the}} actual types of the values passed as arguments, but otherwise according to the usual C# overloading resolution rules. Furthermore, {{in cases where the}} receiver in a dynamic call is not itself dynamic, run-time overload resolution will only consider the methods that are exposed on the declared compile-time type of the receiver. For example: ...|$|E
5000|$|IronPython is {{implemented}} {{on top of}} the Dynamic Language Runtime (DLR), a library running {{on top of the}} Common Language Infrastructure that provides dynamic typing and <b>dynamic</b> <b>method</b> dispatch, among other things, for dynamic languages. The DLR is part of the [...]NET Framework 4.0 and is also a part of Mono since version 2.4 from 2009. The DLR can also be used as a library on older CLI implementations.|$|E
50|$|Considering the {{importance}} of elastic properties for design and engineering applications, a number of experimental techniques are developed and these can be classified into 2 groups; static and <b>dynamic</b> <b>methods.</b> Statics methods (like the four-point bending test and nanoindentation) are based on direct measurements of stresses and strains during mechanical tests. <b>Dynamic</b> <b>methods</b> (like ultrasound spectroscopy and impulse excitation technique) provide an advantage over static methods because the measurements are relatively quick and simple and involve small elastic strains. Therefore, IET is very suitable for porous and brittle materials like ceramics, refractories,… The technique can also be easily modified for high temperature experiments and {{only a small amount}} of material needs to be available.|$|R
40|$|The <b>Dynamic</b> Testing <b>Method</b> {{has been}} shown to {{accurately}} characterize the electromagnetic model of Permanent Magnet Synchronous Machines by describing the relationship between the phase currents and the linked magnetic flux. Within this work, a performance evaluation of the <b>Dynamic</b> Testing <b>Method</b> applied to the Synchronous Reluctance Machine is presented. This paper discusses the difficulties of a dynamic test of a nonlinear synchronous machine and suggests a Fuzzy PD+I controller for improved control performance and measurements. Finally, the <b>Dynamic</b> Testing <b>Method</b> measurements are compared to results of the Constant Speed Method. The Constant Speed Method measurements of flux linkage and torque curves confirm the validity of the <b>Dynamic</b> Testing <b>Method</b> measurements for this machine...|$|R
40|$|International audienceThis paper aims at {{presenting}} {{a method to}} optimize the maintenance planning for a commercial heavy vehicle. Such a vehicle may {{be considered as a}} multi-components system. Grouping maintenance operations related to each component reduces the global maintenance cost of the system. Classically, the optimization problem is solved using a priori reliability characteristics of components. Two types of methods may be used, i. e. static or <b>dynamic</b> <b>methods.</b> Static methods provide a fixed maintenance planning, whereas <b>dynamic</b> <b>methods</b> redefine the groups of maintenance operations at each decision time. Dynamic procedures can incorporate component information such as component states or detected failures. For deteriorating systems, reliability characteristics of each component may be estimated thanks to deterioration models and may be updated when a degradation measure is available. This additional information on degradation features allows to better follow the real state of each component and to improve the maintenance planning...|$|R
50|$|The PRQP Protocol {{addresses}} these interoperability {{and trust}} building issues among separate PKI islands.In fact, {{it provides a}} <b>dynamic</b> <b>method</b> capable to provide more timely information about provided services and available PKI resources. It {{can also be used}} to help in painless rollover between services, e.g. switching fromCRLs to OCSP for certificate validation.Moreover, PRQP allows PKI management to dynamically choose which services are to be provided based on the facedchallenges during infrastructure deployment. In other words, PRQP can be thought to be similar (in concept) toa DNS for PKI resources.|$|E
50|$|The {{surface of}} the mould can be covered in {{coloured}} glass powders or frits to give a surface colour to the sand cast glass object. When the mould preparation is complete hot glass is ladled from the furnace at temperatures of about 1200 Celsius F {{to allow it to}} freely pour. The hot glass is poured directly into the mould. During the pouring process, glass or compatible objects may be placed to later give the appearance of floating in the solid glass object. This very immediate and <b>dynamic</b> <b>method</b> was pioneered and perfected in the 1980s by the Swedish artist Bertil Vallien.|$|E
50|$|A BSM {{approach}} {{can be used to}} understand the impact of business needs on IT Services and infrastructure, helping in the process of planning to ensure the portfolio of Business Services and IT Services aim to support these changing needs and objectives. This approach also helps to understand how technology, including incidents, changes and new developments, impact the business and customers. BSM can provide a <b>dynamic</b> <b>method</b> for linking key service components and capabilities to the goals of the business. It can help prioritize the activity and response of IT staff and service providers based on business priorities, and identify the impact and cost of service outages.|$|E
40|$|Nowadays, up to 98 % of all {{manufactured}} computer processors worldwide {{are used}} in embedded systems. Most of the embedded systems have time constraints, {{which means that the}} computer that controls such a system not only has to compute the correct result, but is also required to produce the correct result in a specific time interval. The time constraints are often expressed by temporal deadlines that must be met by the software tasks in the system. It is therefore important to know how long time the system needs to execute each individual task. The worst-case execution time (WCET) is an upper bound for all the possible execution times of such a task. The WCET can be obtained by various kinds of methods. Generally, they can be divided into two categories: <b>dynamic</b> <b>methods</b> and static <b>methods.</b> <b>Dynamic</b> <b>methods</b> derive the WCET by measurements. The program code executes, and the execution time is measured by hardware or software, such as a logic analyzer and time-functions provided by the operating system. Static methods obtain WCET without executing the program, instead a WCET analysis tool is used to calculate the execution time for the longest execution path. In this thesis the WCET was measured by <b>dynamic</b> <b>methods.</b> An oscilloscope and a logic analyze...|$|R
30|$|Finally, it {{is worth}} {{mentioning}} {{that none of the}} ranging methods described in this paper need any calibration of the environment since they are <b>dynamic</b> <b>methods</b> that try to adapt themselves to the dynamic nature of radiofrequency signals in cluttered environments, such as the indoor one.|$|R
40|$|After a brief {{introduction}} and work motivation, static and <b>dynamic</b> <b>methods</b> for minority carrier lifetime measurements will be compared. Data on recombination velocity at heterointerfaces for both p-type and n-type quaternaries will be summarized. Radiative recombination and effect of photon recycling {{will be considered}} in detail...|$|R
