41|51|Public
50|$|The {{additional}} {{wait time}} {{introduced by the}} <b>delayed</b> <b>ACK</b> can cause further delays when interacting with certain applications and configurations. If Nagle's algorithm is {{being used by the}} sending party, data will be queued by the sender until an ACK is received. If the sender does not send enough data to fill the maximum segment size (for example, if it performs two small writes followed by a blocking read) then the transfer will pause up to the ACK delay timeout.|$|E
30|$|TCP-DDA [39] is {{a simple}} {{receiver}} modification introduced by Altman and Jiménez. In this approach, the authors investigated the impact of producing delayed ACKs {{for more than two}} received packets on TCP performance in multi-hop wireless networks. They proposed a limited dynamic <b>delayed</b> <b>ACK</b> scheme, in which the receiver begins delaying one ACK (sending one ACK for two in order packets received) and keeps increasing until four based on the sequence number of the acknowledged packet. For instance, when the <b>delayed</b> <b>ACK</b> is set to four, the receiver may send a single ACK for packet (Pi) implying that packets (Pi- 1), (Pi- 2) and (Pi- 3) have also been successfully received, without sending separate ACKs for each. The receiver keeps delaying four ACKs except at session start-up it decreases the <b>delayed</b> <b>ACK</b> to one again.|$|E
30|$|Targeting at {{reducing}} the number of ACKs in the network, we combine the ideas of selective ACK (SACK) and <b>delayed</b> <b>ACK</b> schemes to design an adaptive ACK scheme for the joint scheme. SACK [24] allows the destination to acknowledge out-of-order segments and retransmit lost packets selectively. SACK makes the TCP source node retransmit multiple lost packets in time, reducing unnecessary ACKs and retransmissions. Consequently, the TCP source node can empty more acknowledged packets in the sending buffer, which are indicated by SACK. For mobile nodes, emptying sending buffer timely is helpful and efficient because they are usually storage capacity limited. <b>Delayed</b> <b>ACK</b> [25] does not need to acknowledge every TCP packet. It is designed to delay an interval of time to collect in-order segments and acknowledge them at one time. The ideas of SACK and <b>delayed</b> <b>ACK</b> are introduced into the joint scheme to not only improve the ratio of acknowledged TCP packets but also to provide more schedulable space for the real-time traffic.|$|E
50|$|<b>Delayed</b> <b>ACKs</b> {{can give}} the {{application}} the opportunity to update the TCP receive window and also possibly to send an immediate response along with the ACK. For certain protocols such as Telnet, <b>delayed</b> <b>ACKs</b> can {{reduce the number of}} responses sent by the server by a factor of 3, by combining the ACK, window update and the response data into one segment.|$|R
40|$|A general mechansim of <b>delaying</b> <b>ACKs</b> of TCP {{traffic in}} {{congested}} node is presented. The primary idea {{arises from the}} fact that controlled ACK flow can indirectly affect the dynamics of TCP behavior. <b>ACK</b> <b>delay</b> mechanism can be easily implemented in various network nodes, where information of link utilization or buffer occupancy may be employed to notify the congestion. In this paper, we present the performance evaluation works and simulation results in OPNET to show that this policy achieves good TCP throughput as well as fairness of connections and reduces the buffer requirement...|$|R
30|$|The {{simulation}} results show a throughput improvement over TCP-DAA {{and much more}} over the regular TCP in different scenarios. TCP-MDA shows that the optimal number of <b>delayed</b> <b>ACKs</b> {{is based on the}} path length of a TCP connection and a large delay window may solely improve TCP. In addition, the results show that an optimal number of <b>delayed</b> <b>ACKs</b> exists, which produces the best throughput in different ranges. Therefore, TCP-MDA shows that a large optimal number can solely improve TCP throughput in short scenarios of less than five hops. However, a longer path congestion window limit provides more throughput gain. However, as TCP-MDA has been designed to perform well in static networks, evaluating TCP-MDA over mobile networks is required. In addition, TCP-MDA requires intermediate nodes to notify TCP about channel conditions and this makes its deployment and implementation complicated. Moreover, limiting the cwnd to four may affect the performance of TCP in case of high transmutation rate and low BER.|$|R
40|$|In this paper, {{we study}} TCP {{performance}} over multi-hop wireless networks that use IEEE 802. 11 protocol for access. For such networks NewReno {{is the most}} deployed TCP variant that handles multiple packet losses efficiently. It is shown that the <b>delayed</b> <b>ACK</b> scheme substantially increases the TCP throughput. We propose an approach to improve the performance of half-duplex and asymmetric multi hop networks widely employed for mobile communication. Our approach is based on optimizing the timer duration of the <b>delayed</b> <b>ACK</b> scheme and varying the window size. Simulations have been carried on NS 2 for TCP-NewReno variant using DSDV and AODV routing protocols...|$|E
30|$|The first {{optimization}} of {{this nature}} has been introduced through the standard TCP with <b>delayed</b> <b>ACK</b> option in (RFC 1122 [14], RFC 2581 [40]). With the standard <b>delayed</b> <b>ACK</b> option, TCP can generate one ACK upon receiving two in-order data packets (Figure 4 b). It has been reported through extensive simulations [41, 42] that TCP variants like Reno, New Reno, SACK and Vegas perform better by employing the delayed ACKs {{in the case of}} throughput, bandwidth and energy consumption. However, in 802.11 networks, the interference problem between ACK and data packets may still persist and the benefit of standard TCP with <b>delayed</b> <b>ACK</b> can be further improved. (Figure 4 c) shows the case of delaying ACK for more than two packets. In fact, lowering the number of ACKs may improve TCP performance, however, the large cumulative ACKs will induce packet loss due to retransmission time out at the sender side of TCP. To address this problem, numerous enhancements and optimizations have been proposed to reduce traffic overhead caused by generating more ACKs than necessary.|$|E
40|$|Abstract — ACK {{thinning}} {{refers to}} the technique to discard or reduce TCP acknowledgements (ACKs) {{for the purpose of}} diverting scarce bandwidth to TCP data traffic. <b>Delayed</b> <b>ACK</b> and ACK filtering fall into the category. It has been shown that under some circumstances the technique is effective to boost the TCP throughput on wireless links, in particular the IEEE 802. 11 wireless LAN (WLAN). In this paper, however, we show that ACK thinning backfires under congestion due to its cross-layer impact on the 802. 11 MAC dynamics. With the ACK filtering example, we demonstrate the phenomenon and analyze the cause. Based on the analysis, we show how the IEEE 802. 11 contention window size control solves the problem. Although only the ACK filtering and <b>Delayed</b> <b>ACK</b> are considered in this paper, any other techniques to save on TCP ACK bandwidth usage share the same fundamental issues. I...|$|E
40|$|In {{this work}} we study the eect of TCP {{feedback}} trac in IEEE 802. 11 bbased WLANs. In particular, we present an analytical model which allows {{to evaluate the}} impact of the delayed acknowledgments option on TCP throughput. Furthermore, we investigate the impact of such mechanism on the session delay for short TCP transfers. We show that, by carefully tuning some system parameters, both bulk TCP throughput and session delay may benet from the use of <b>delayed</b> <b>ACKs...</b>|$|R
5000|$|For example, {{consider}} {{a situation where}} Bob is sending data to Carol. Bob's socket layer has less than a complete packet's worth of data remaining to send. Per Nagle's algorithm, {{it will not be}} sent until he receives an ACK for the data that has already been sent. At the same time, Carol's application layer will not send a response until it gets all of the data. If Carol is using <b>delayed</b> <b>ACKs,</b> her socket layer will not send an ACK until the timeout is reached.|$|R
30|$|In {{wireless}} networks especially multi-hop ad hoc[*]networks, {{many new}} issues arise for TCP. One {{problem is that}} TCP cannot distinguish between congestive losses and other losses caused by channel unreliability and terminal mobility. This problem causes the TCP source to unnecessarily decrease its congestion control window once a retransmission timeout (RTO) occurs, resulting in low network throughput. Furthermore, lost and <b>delayed</b> <b>ACKs</b> in the reverse route may also cause the source not to receive ACKs in time, which is also regarded as congestive losses on the forward route by the source node.|$|R
40|$|Abstract — This paper {{studies the}} TCP {{performance}} with <b>delayed</b> <b>ack</b> in wireless networks (including ad hoc and WLANs) which use IEEE 802. 11 MAC protocol as the underlying medium access control. Our analysis and simulations show that TCP throughput {{does not always}} benefit from an unrestricted delay policy. In fact, for a given topology and flow pattern, there exists an optimal delay window size at the receiver that produces best TCP throughput. If the window is set too small, the receiver generates too many acks and causes channel contention; on the other hand, if set the window too high, the bursty transmission at the sender triggered by large cumulative acks will induce interference and packet losses, thus degrading the throughout. In wireless networks, packet losses are also related {{to the length of}} TCP path; when traveling through a longer path, a packet is more likely to suffer interference. Therefore, path length is an important factor to consider when choosing appropriate delay window sizes. In this paper, we first propose an adaptive <b>delayed</b> <b>ack</b> mechanism which is suitable for ad hoc networks, then we propose a more general adaptive <b>delayed</b> <b>ack</b> scheme for ad hoc and hybrid networks. The simulated results show that our schemes can effectively improve TCP throughput by up to 30 % in static networks, and provide more significant gain in mobile networks. The proposed schemes are simple and easy to deploy. I...|$|E
40|$|Abstract. It is {{reported}} in the literature that a TCP connection with small window size achieves high throughput in wireless multihop net-works. In this paper, we claim that TCP can benefit more from delay-ing ACK rather than limiting the window size. Since the induced delay may result in lengthy transfer time for short connections, we propose an adaptive <b>delayed</b> <b>ACK</b> algorithm at the receiver to enhance TCP performance. ...|$|E
40|$|This note {{outlines}} two bugs {{found in}} the BSD 4. 4 Lite TCP implementation, {{as well as the}} implications of these bugs and possible ways to correct them. The first problem encountered in this particular TCP implementation is the use of a 2 segment initial congestion window, rather than the standard 1 segment initial window. The second problem is that the receiver delays ACKs in violation of the <b>delayed</b> <b>ACK</b> rules...|$|E
30|$|TCP-ADA {{states that}} the best option is to {{generate}} ACK after one cwnd. The problem with TCP-ADA is that, if there is ACK loss, then generating another ACK after receiving another cwnd will lead to retransmission timeout. TCP-DAA also generates ACK after four packets if the channel condition is good, {{but in the case}} of a packet loss it has a mechanism to generate ACK after two packets to avoid unnecessary delay. TCP-DCA is based on TCP-DAA, but its novelty is to <b>delay</b> <b>ACK</b> on the basis of hop counts.|$|R
30|$|TCP-DCA is a TCP receiver-based scheme {{introduced}} by Chen et al. [43]. In this scheme, the authors show that TCP {{does not always}} get throughput gain by <b>delaying</b> unlimited <b>ACKs.</b> In addition, there exists an optimal delay window size at the receiver that produces best TCP throughput. In TCP-DCA, path length {{is an important factor}} to be considered when choosing appropriate delay window sizes. Therefore, TCP-DCA selected different size of delay window to adapt TCP ACK generation {{based on the number of}} hops. When the number of hops between the sender and the receiver is less or equal to three hops, the delay window is set to be equal to the cwnd size. For path lengths between four and nine hops, the delay window is set to be fixed with five packets. In case of long paths, more than ten hops, the receiver will set the delay window to three packets. TCP-DCA has shown good performance in multi-hop wireless networks. In conclusion, <b>delaying</b> <b>ACKs</b> for large numbers of data packets, a large delay window is always beneficial in connection with short-paths, but may be inappropriate for long-path networks. The longer the end-to-end path the longer the time for TCP sender to detect lost packets caused by <b>delaying</b> more <b>ACKs.</b> In addition, when travelling a longer path, a packet is more likely to suffer interference.|$|R
40|$|Real-time {{transmission}} over asymmetric satellite IP links is challenging, since {{satellite systems}} commonly exhibit long propagation delays, while bandwidth asymmetry often enforces a variable and infrequent rate of acknowledgment packets (ACKs) across the upstream channel with several undesirable implications. In this context, we formulate an analytical model {{in order to}} quantify the impact of satellite systems and link asymmetry on TCP performance and real-time delivery. We emphasize {{on the effects of}} asymmetric links, and especially on the implications that cause interruptions in the sending rate, and eventually disturb smooth delivery. Since TCP performance is in part throttled by the rate of arriving ACKs, we additionally investigate the impact of <b>delayed</b> <b>ACKs.</b> Although <b>delayed</b> <b>ACKs</b> occasionally diminish the transmission rate, we uncover notable gains in terms of smoothness and real-time delivery. Furthermore, we demonstrate conclusive performance studies tackling the supportive role of selective acknowledgments (SACK) and the effect of varying bit error rates. Our simulation results illustrate that most existing end-to-end solutions do not comply with the stringent Quality of Service (QoS) provisions of time-sensitive applications, resulting in ineffective bandwidth utilization and varying delays in data delivery. Finally, with the absence of a satellite-optimized TCP implementation for real-time transmission, we identify the most prominent end-to-end solutions that manage to alleviate most of the impairments induced by asymmetric satellite links, sustaining a relatively smooth transmission rate...|$|R
40|$|In this paper, the {{performance}} of IEEE 802. 11 MAC protocol is analysed in terms of efficiency and reliability in wireless networks. In the IEEE 802. 11, an exponential backoff has been adopted, which means whenever a collision occurs, the contention window (CW) of the station is doubled until it reaches the maximum value. The purpose of increasing CW {{is to reduce the}} collision probability by distributing the traffic into a larger time space. In this paper, fixed contention window scheme is used and then correlate the CW size and network size. The interaction of TCP with the MAC protocol is also analysed. For static multi hop network that uses IEEE 802. 11 protocol for access, TCP performance is mainly determined by hidden terminal effects (and not by drop probabilities at buffers) which limits the number of packets that can be transmitted simultaneously in the network. TCP throughput is improved by decreasing the ACKs flows, using <b>delayed</b> <b>ACK,</b> with d= 2. Simulation results shows when choosing large maximum window, the <b>delayed</b> <b>ACK</b> considerably outperform standard TCP...|$|E
40|$|Abstract—In this paper, the {{performance}} of IEEE 802. 11 MAC protocol is analysed in terms of efficiency and reliability in wireless networks. In the IEEE 802. 11, an exponential backoff has been adopted, which means whenever a collision occurs, the contention window (CW) of the station is doubled until it reaches the maximum value. The purpose of increasing CW {{is to reduce the}} collision probability by distributing the traffic into a larger time space. In this paper, fixed contention window scheme is used and then correlate the CW size and network size. The interaction of TCP with the MAC protocol is also analysed. For static multi hop network that uses IEEE 802. 11 protocol for access, TCP performance is mainly determined by hidden terminal effects (and not by drop probabilities at buffers) which limits the number of packets that can be transmitted simultaneously in the network. TCP throughput is improved by decreasing the ACKs flows, using <b>delayed</b> <b>ACK,</b> with d= 2. Simulation results shows when choosing large maximum window, the <b>delayed</b> <b>ACK</b> considerably outperform standard TCP. Index Terms- contention window size, MAC protocols, maximum window size, spatial reuse, TCP I...|$|E
30|$|Improvements to DQS and Semi-TCP for {{the joint}} scheme: We propose some {{algorithms}} to improve {{the performance of the}} integrated scheme, including the following: (i) a fast estimation for a packet’s latest departure time, which is a key step for the implementation of DQS in multi-hop wireless networks; (ii) a method to handle these packets whose lifetimes have expired, which improves bandwidth resource utilization; (iii) an adaptive acknowledgement (ACK) scheme that combines the ideas of SACK [24] and <b>delayed</b> <b>ACK</b> [25] to further decrease the ACK contention in the opposite flow direction.|$|E
30|$|TCP-DAA [41] is a sender/receiver {{modification}} {{introduced by}} Oliveira and Braun. In TCP-DAA, the receiver reduces {{the number of}} ACKs {{by taking advantage of}} the cumulative property of TCP. TCP-DAA dictates changes to the sender as well as the receiver. In this approach, the receiver may combine up to four ACK packets when the wireless channel is in good condition and less for lossy channels. The limit of four packets is imposed by the sender's congestion window limit that is also fixed at four packets. The authors report that the low limit of the sender's cwnd is proper for minimizing collisions and more than enough for scenarios having up to 10 hops. The <b>delay</b> of <b>ACK</b> responses are performed in a dynamic manner based on packet loss event. When there is no packet loss, TCP-DAA <b>delays</b> <b>ACKs</b> until it receives more data packets up to four, but reduces the number to two in case of out-of-order packet delivery. These concepts lead this approach to outperform a regular TCP whenever the channel is able to provide higher bandwidth.|$|R
40|$|This paper {{describes}} {{a method of}} extending TCP so that TCP connections can effectively carry hierarchically-encoded layered video streams, while being friendly to other competing connections. We call the method Receiver-based Delay Control (RDC). Under RDC, a TCP connection can slow down its transmission rate to avoid congestion by <b>delaying</b> <b>ACK</b> packet generation at the TCP receiver based on congestion notifications from routers. We present the principle behind RDC, {{argue that it is}} TCP-friendly, describe an implementation that uses 1 -bit congestion notification from routers, and demonstrate by simulations its effectiveness in streaming hierarchically-encoded layered video. key words: video streaming, layered video, TCP, retransmission timeout, delay control 1...|$|R
30|$|Although {{the size}} of an ACK packet is much smaller than that of a data segment, it needs to go through the same MAC {{contention}} procedure as for a data segment to access the wireless channel. Therefore, reducing the number of ACK transmitted along the reverse route can lessen the MAC contention on the forward route since the wireless channel is a shared media. Therefore, <b>delaying</b> <b>ACK</b> transmission to make one ACK to acknowledge more segments can significantly improve TCP performance [23, 24]. However, reducing the number of ACK to be sent by the destination will slow down the growth of the congestion window at the TCP source, thus decreasing the network throughput.|$|R
40|$|We {{describe}} {{a new technique}} for improving TCP performance in an ad hoc network that uses a table-driven type of routing protocol paying attention to short-duration link failure. We took {{as the object of}} research a Flexible Radio Network (FRN) which is an ad hoc network for data collection. We also evaluated the case in which the effect of the collision of a data packet and an ACK packet is suppressed by <b>Delayed</b> <b>ACK</b> and resending the ACK packet preferentially. We showed through simulation the combination of these improvements can increase TCP throughput about 20 %...|$|E
30|$|Although the <b>delayed</b> <b>ACK</b> option {{decreases}} {{the frequency of}} RTT samples measurable by the TCP sender, this reduction of feedback has {{a significant impact on}} the RTO expiration. As a result, the TCP may retransmit all the packets that their ACKs delayed, even though the packets are received. Therefore, TCP should precisely select the optimal value of the ACK delay window. Although TCP-DDA has shown a good performance in static ad hoc networks compared to the standard TCP, it may be inefficient in high traffic scenarios with considerable packet loss. Moreover, TCP-DDA has been obtained for only a single flow in static networks, multiple flows and mobility are good issues for further improvement.|$|E
40|$|International audienceA common {{feature of}} {{congestion}} control protocols {{is the presence}} of information packets used to signal congestion. We address here the question of how frequently such protocols need to generate information packets in order to optimize their performance. Through a number of congestion control models, we identify and quantify different types of effects of the frequency of generating information packets. We consider both TCP-type protocols, in which controlling the frequency of information packets is done through static or dynamic <b>delayed</b> <b>ACK</b> options, as well as ATM type flow control, where the optimal time spacing between the generation of network management packets is computed. We show how the spacing between information packets influences the throughput and the stability of the system...|$|E
40|$|Unicasting {{video streams}} over TCP {{connections}} is a challenging problem because video sources cannot normally adapt to delay and throughput variations of TCP connections. This paper {{points out a}} direction on how TCP can be modified such that TCP connections can carry hierarchically-encoded layered video streams well, while being friendly to other competing flows. The method is called Receiver-based Delay Control (RDC). Under RDC, a TCP connection can slow down its transmission rate to avoid congestion by <b>delaying</b> <b>ACK</b> packet generation at the TCP receiver based on notifications from routers. The paper presents the principle behind RDC, {{argue that it is}} TCP-friendly, describe an implementation that uses 1 -bit congestion notification from routers, and give our simulation results. 1...|$|R
40|$|Transport {{connections}} {{set up in}} wireless ad hoc {{networks are}} plagued by problems such as high bit error rates (BER), frequent route changes and partitions. If we run TCP over such connections, the throughput of the connection is observed to be extremely poor because TCP treats lost or <b>delayed</b> <b>ACKs</b> as congestion. In this paper we present an approach where we implement a thin layer between IP and standard TCP that corrects these problems and maintains high end-to-end TCP throughput. We have implemented our protocol in FreeBSD and {{in this paper we}} present results from extensive experimentation done in an ad hoc network. We show that our solution improves TCP's throughput by a factor of 2 { 3. ...|$|R
30|$|MDA is across-layer-based {{modification}} {{introduced by}} Armaghani et al. [45]. TCP-MDA proposed a dynamic interaction strategy between TCP and MAC layers, which reduces {{the number of}} ACKs by monitoring the channel condition. To properly set the number of <b>delayed</b> <b>ACKs</b> in TCP, TCP-MDA uses a mechanism to collect collision probability along the path from sender to receiver in MAC layer. Based on the estimated collision probability, TCP adjusts itself to the channel condition by <b>delaying</b> less <b>ACKs</b> in high traffic conditions and more ACKs in low traffic conditions. If the channel is in a good condition, when the estimated collision probability {{is less than a}} predefined threshold, the TCP receiver may combine up to four ACKs. However, when a high collision in the MAC layer is observed, the TCP receiver generates more ACKs to avoid unnecessary retransmission caused by time-out in the sender side. The limit of four ACKs is imposed by the sender's cwnd, which is defined as the maximum number of data packets a TCP sender may inject into the network at any time without waiting for an ACK from the receiver. This low limit of four packets for cwnd is proper to minimize the channel contention in short range scenarios [46].|$|R
40|$|Abstract—A common {{feature of}} {{congestion}} control protocols {{is the presence}} of information packets used to signal congestion. We address here the question of how frequently such protocols need to generate information packets in order to optimize their performance. Through a number of congestion control models, we identify and quantify different types of effects of the frequency of generating information packets. We consider both TCP-type protocols, in which controlling the frequency of information packets is done through static or dynamic <b>delayed</b> <b>ACK</b> options, as well as ATM type flow control, where the optimal time spacing between the generation of network management packets is computed. We show how the spacing between information packets influences the throughput and the stability of the system. Index Terms—Congestion control, flow control, information rates...|$|E
40|$|Abstract. We {{study in}} this paper TCP {{performance}} over a static multihop network that uses IEEE 802. 11 protocol for access. For such networks {{it has been shown}} in [6] that TCP performance is mainly determined by the hidden terminal effects (and not by drop probabilities at buffers) which limits the number of packets that can be transmitted simultaneously in the network. We propose new approaches for improving the performance based on thinning the ACK streams that competes over the same radio resources as the TCP packets. In particular, we propose a new <b>delayed</b> <b>ACK</b> scheme in which the delay coefficient varies with the sequence number of the TCP packet. Through simulations we show that the ACK thinning allows to increase TCP throughput substantially more than previous improvement methods. ...|$|E
40|$|Abstract—In this paper, {{we focus}} on the effect of random access delay of TDMA MAC on the TCP {{performance}} over IEEE 802. 16 d/e. The random access protocol of IEEE 802. 16 d/e is based on orthogonal frequency-division-multiple-access (OFDMA) -code-division-multiple-access (CDMA) with time-division-duplexing (TDD) mode and increases round-trip-time (RTT) of TCP flows over uplink transmission. And to speed TCP throughput up without revising existing TCP implementations, RTT of wireless portion in the wired-cum-wireless environment among many factors needs to be reduced by the MAC layer. In this paper, we analyze the delay factor of the random access protocol of IEEE 802. 16 d/e considering the implementation complexity and show that it is closely related to TCP performance. And we propose the algorithm to minimize that delay factor using the characteristic of TCP <b>delayed</b> <b>ACK</b> which is generally adopted by most of the TCP versions. Keywords-TCP; Random Access; TDMA; 802. 16; MA...|$|E
40|$|Nowadays, Transmission Control Protocol (TCP) {{is widely}} used in 802. 11 Wireless Local Area Networks (WLANs) because it can provide {{reliable}} communication connection between two hosts. This thesis discusses whether a base station in some 802. 11 WLAN may be a bottleneck for uplink TCP flows because of <b>delay</b> of acknowledgements (<b>ACKs)</b> in downlink flows when this base station {{is the only one}} in the network. The conclusion can be obtained by comparing throughputs of different versions of TCP in 802. 11 WLAN. The method is to examine whether there is big difference between the throughputs of different versions of TCP with more or less ACKs. So, the throughputs of normal TCP and TCP with <b>delayed</b> <b>ACKs</b> are compared. The thesis is composed of six parts. The first part is introduction. The second part is introduction to theoretical background. Some essential background knowledge about TCP and 802. 11 protocols are introduced. The third part is problem statement. The question concerned in the thesis is introduced. The fourth part is description of simulations and throughput calculation. The simulations are designed by using the software called Network Simulator 2 (NS 2). The throughputs are calculated by using an AWK file. Then, the next part is to show the results, including result figures and discussion. The last part is conclusion. In the scenarios of this paper, the conclusion indicates that there is no big difference between the throughputs of different versions of TCP with more or less ACKs even though the difference exists statistically. With the number of sources increase, the throughputs of compared versions of TCP decrease and the difference of their throughputs is not as big as some users have expected. So, it is clear that the only base station in some 802. 11 WLANs does not become a bottleneck for the uplink TCP flows because of <b>delayed</b> <b>ACKs</b> in the downlink flows. The results of this study indicate that it is not necessary for users to use TCP with less ACKs. In most of cases in daily life, it is enough to use normal version of TCP in 802. 11 WLANs which only have one base station...|$|R
30|$|The Low-Power Distributed Queue (LPDQ) [58] scheme uses LPL, Distributed Queue (DQ) and Channel Hopping (CH) for {{ensuring}} the collision-free transmission, minimize the delay and reduce energy consumption. The suggested protocol comprises of network synchronization and data transmission phases [58]. In the network synchronization phase, all nodes are in LPL state whereas they periodically {{wake up and}} turn-on their radios to assure activities in the network. The DQ and CH are employed in the data transmission phase. The data transmission phase provides a fixed time structure where all nodes must transmit their packets by using an access request period (ARP). However, each sensor transmits an ARP message and waits to occupy channel which reduces the performance of MAC in terms of higher <b>delay,</b> <b>ACK,</b> retransmission of the lost packets, and high energy consumption. Another limitation of this scheme does not concentrate on a patient’s data.|$|R
40|$|Probing the {{communication}} protocol stack in Linux PCbased clusters to investigate erratic TCP/IP performance {{has led to}} a new metric, data stream stall, which is analogous to instruction stream stall in CPUs. Data stream stalling correlates well with unexpected throughput performance dips; the dips are usually due to <b>delayed</b> <b>ACKs</b> or questionable handling of them. We illustrate the use of this data stream stall metric by isolating and correcting the cause of these communication throughput dips in our version of Linux (2. 0. 29). The availability of this data stream stall metric would provide useful feedback to users by indicating deficient communications performance. Keywords [...] - ATM, Communication Protocols, Fast Ethernet, Linux, Performance Measurement, TCP/IP. I. INTRODUCTION While evaluating the performance of MPI based applications [IND 98] on commodity clusters [BEC 95], using both ATM and Fast Ethernet communications, we encountered a communications performance anomaly. This anom [...] ...|$|R
