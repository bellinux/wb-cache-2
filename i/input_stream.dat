728|1168|Public
25|$|Each SPE runs a {{distinct}} program. Data {{comes from an}} <b>input</b> <b>stream,</b> and is sent to SPEs. When an SPE has terminated the processing, the output data is sent to an output stream.|$|E
25|$|Most {{advanced}} pinyin method implementations {{allow the}} mixing of English into an <b>input</b> <b>stream</b> without requiring the user to change the language mode. However, it often comes with some limitations such as requiring the input to be uppercase.|$|E
25|$|Those {{models that}} {{emphasize}} on lexical processes {{can be further}} {{divided into two groups}} based on how attention is allocated in the reading model. The mainstream model E-Z Reader (Reichle, Rayner, & Pollatsek, 2003), along with older ones like Reader (Just & Carpenter, 1980) and EMMA (Salvucci, 2001) assumes that attention is allocated to only one word sequentially. On the contrary, the SWIFT model assumes that attention in reading is distributed among the currently fixated word and its neighbours. Since attention allocation determines the <b>input</b> <b>stream</b> in these models, difference in attention allocation results in fundamental difference in the subsequent processing and simulation output. E-Z Reader incorporates various lexical properties into a complex structure of interaction between lexical processing, saccade programming and attention shifting; it reproduces the widest range of phenomena in reading behaviours and can be generalised to reading behaviours in elder people, in different languages and in different types of text presentation (Reichle, 2011). In contrast, SWIFT resorts to a dynamic field of parallel activation that stochastically triggers saccade programming, yielding parsimonious simulations of refixation, regression (fixate back to a previous word), and neighbouring effects (how neighbouring words affect the current fixation) (Engbert & Kliegl, 2011). The debate is still on whether attention in reading should be relaxed to more than one word.|$|E
5000|$|In {{object-oriented}} programming, <b>input</b> <b>streams</b> {{are generally}} implemented as iterators.|$|R
5000|$|... {{generate}} stereo audio stream {{from two}} mono audio <b>input</b> <b>streams</b> ...|$|R
2500|$|Scanner {{class for}} parsing data from various <b>input</b> <b>streams</b> and buffers ...|$|R
2500|$|Example: The <b>input</b> <b>stream</b> from above, 10011011, is {{processed}} this way: ...|$|E
2500|$|Represent the {{observed}} {{process as a}} sequence of zeroes and ones, or bits, and group that <b>input</b> <b>stream</b> in non-overlapping pairs of successive bits, such as (11)(00)(10)... Then for each pair, ...|$|E
2500|$|For example, an <b>input</b> <b>stream</b> {{of eight}} bits 10011011 would by grouped into pairs as (10)(01)(10)(11). Then, {{according}} to the table above, these pairs are translated into the output of the procedure: ...|$|E
5000|$|Streams APIÂ - This API {{converts}} the <b>input</b> <b>streams</b> {{to output}} and produces the result.|$|R
5000|$|Up to 8 {{outbound}} {{streams and}} 8 simultaneous <b>input</b> <b>streams</b> (depending on the model) ...|$|R
40|$|International audienceIn recent years, {{shrinking}} size in {{integrated circuits}} has imposed {{a big challenge}} in maintaining the reliability in conventional computing. Stochastic computing {{has been seen as}} a reliable, low-cost, and low-power alternative to overcome such issues. Stochastic Computing (SC) computes data in the form of bit streams of 1 s and 0 s. Therefore, SC outperforms conventional computing in terms of tolerance to soft error and uncertainty at the cost of increased computational time. Stochastic Computing with uncorrelated <b>input</b> <b>streams</b> requires streams to be highly independent for better accuracy. This results in more hardware consumption for conversion of binary numbers to stochastic streams. Correlation can be used to design Stochastic Computation Elements (SCE) with correlated <b>input</b> <b>streams.</b> These designs have higher accuracy and less hardware consumption. In this paper, we propose new SC designs to implement image processing algorithms with correlated <b>input</b> <b>streams.</b> Experimental results of proposed SC with correlated <b>input</b> <b>streams</b> show on average 37 % improvement in accuracy with reduction of 50 - 90 % in area and 20 - 85 % in delay over existing stochastic designs...|$|R
2500|$|This {{decrease}} in efficiency, or waste of randomness {{present in the}} <b>input</b> <b>stream,</b> can be mitigated by iterating the algorithm over the input data. This way the output {{can be made to}} be [...] "arbitrarily close to the entropy bound".|$|E
2500|$|As {{with other}} types of LR parsers, an LALR parser is quite {{efficient}} at finding the single correct bottom-up parse in a single left-to-right scan over the <b>input</b> <b>stream,</b> because it does not need to use backtracking. Being a lookahead parser by definition, it always uses a lookahead, with [...] being the most-common case.|$|E
2500|$|The {{pipeline}} {{structure of}} the bind operator ensures that the [...] and [...] operations get evaluated only once and in the given order, so that the side-effects of extracting text from the <b>input</b> <b>stream</b> and writing to the output stream are correctly handled in the functional pipeline. This remains true even if the language performs out-of-order or lazy evaluation of functions.|$|E
40|$|The {{design and}} {{implementation}} of hybrid symbolic/statistical architectures is a major area of interest in current multimodal system development. Such an architecture attempts to improve multimodal recognition and disambiguation rates by using corpus-based statistics to weight the contributions from various <b>input</b> <b>streams.</b> This {{is in contrast to}} current architectures that assume independence between <b>input</b> <b>streams,</b> and combine un-weighted posterior probabilities simply by taking their cross product...|$|R
5000|$|Java <b>input</b> <b>streams</b> {{can support}} zero-copy through the java.nio.channels.FileChannel's transferTo (...) method if the {{underlying}} operating system also supports zero copy.|$|R
50|$|Collate is a {{reusable}} {{black box}} which only {{needs to know}} where the control fields are in its incoming IPs (even this is not strictly necessary as transformer processes can be inserted upstream to place the control fields in standard locations), and can in fact be generalized to any number of <b>input</b> <b>streams,</b> and any depth of bracket nesting. Collate uses an array-type port for input, allowing a variable number of <b>input</b> <b>streams.</b>|$|R
2500|$|Two {{types of}} ethanol are {{produced}} from corn {{and other plants}} such as sugar cane. The residual product (DDGS) is about 33% of the <b>input</b> <b>stream</b> and is used as livestock feed. Ethanol is blended with gasoline to produce E10 and E85 fuels for automobile vehicles. Its manufacture has created 400,000 jobs in the US and its environmental friendliness is recorded {{in the form of}} reduced gas emissions of 25.3 million metric tons. [...] One bushel of corn can produce 2.8 gallons of ethanol, 17.5lbs of livestock feed and 18lbs of carbon dioxide. It is also reported that every acre of corn ultimately results in reducing [...] of greenhouse gas emission. [...] On account of great demand for ethanol corn is fetching higher prices. This has resulted in farmers increasing acreage under corn by adopting crop rotations between corn and soybeans; the latter crop's production has thus declined. Further more acreage under corn has also been allowed to be increased under the Federal Agriculture Improvement and Reform Act of 1996 overriding the act of 1983, which had been fixed at [...]|$|E
5000|$|The {{standard}} commands are [...] {{with the}} normal <b>input</b> <b>stream</b> being the keyboard. In Unix tradition the <b>input</b> <b>stream</b> can be changed, so input {{can come from}} a disk file. Similarly, output can be redirected.|$|E
50|$|The {{lookahead}} and <b>input</b> <b>stream</b> remain unchanged.|$|E
40|$|An {{apparatus}} for mixing {{a plurality}} of <b>input</b> data <b>streams</b> is described, which has a processing unit adapted to compare the frames of the plurality of <b>input</b> data <b>streams,</b> and determine, based on the comparison, for a spectral component of an output frame of an output data <b>stream,</b> exactly one <b>input</b> data <b>stream</b> of the plurality of <b>input</b> data <b>streams.</b> The output data stream is generated by copying at least a part of an information of a corresponding spectral component of {{the frame of the}} determined data stream. Further or alternatively, the control values of the frames of the first and second <b>input</b> data <b>streams</b> are compared, and, if so, the control value is adopted...|$|R
30|$|However, in some cases, {{the output}} schema must be built {{dynamically}} at deployment-time by the task, {{based on the}} actual schemas of the <b>input</b> <b>streams.</b> For example, the output schema could be identical {{to one of the}} input schema, or the output schema could be composed from some attributes of each input schemas. The following JSON snippet presents an example of contract for an inner join operator on two <b>input</b> <b>streams.</b> This operator admits a string parameter (called attribute) used for performing the join on one attribute of the input schemas.|$|R
40|$|Abstract. Multimodal systems must process several <b>input</b> <b>streams</b> {{efficiently}} {{and represent the}} input {{in a way that}} allows the establishment of connections between modalities. This paper describes a multimodal system that uses Combinatory Categorial Grammars to parse several <b>input</b> <b>streams</b> and translate them into logical formulas. These logical formulas are expressed in Hybrid Logic, which is very suitable for multimodal integration because it can represent temporal relationships between modes in an abstract way. This level of abstraction makes it possible to define rules for multimodal processing in a straightforward way. ...|$|R
50|$|In each step, the parser {{reads the}} next-available symbol from the <b>input</b> <b>stream,</b> and the top-most symbol from the stack. If the input symbol and the stack-top symbol match, the parser {{discards}} them both, {{leaving only the}} unmatched symbols in the <b>input</b> <b>stream</b> and on the stack.|$|E
5000|$|I/O mode {{indicator}} (<b>input</b> <b>stream,</b> output stream, or update stream) ...|$|E
5000|$|Optional <b>input</b> <b>stream</b> {{synchronization}} {{to provide}} a constant end-to-end delay.|$|E
40|$|For low {{complexity}} error correction, a decoder modifies each reliability metric of an <b>input</b> data <b>stream</b> with {{a random}} perturbation value. The reliability metric comprises a weighted sum of a channel measurement for the <b>input</b> data <b>stream</b> and parity check {{results for the}} <b>input</b> data <b>stream.</b> In addition, the decoder may generate an output data stream {{as a function of}} the reliability metrics...|$|R
50|$|The null {{device is}} {{typically}} used for disposing of unwanted output streams of a process, or as a convenient empty file for <b>input</b> <b>streams.</b> This is usually done by redirection.|$|R
5000|$|An FBP {{component}} can {{be regarded}} as a function transforming its <b>input</b> <b>stream(s)</b> into its output stream(s). These functions are then combined to make more complex transformations, as shown here: ...|$|R
50|$|In {{the next}} three steps the parser will replace ''''F'''' on the stack by ''''a'''', write the rule number 3 to the output stream and remove the ''''a'''' and '''')'''' from both the stack and the <b>input</b> <b>stream.</b> The parser thus ends with ''''$'''' on both its stack and its <b>input</b> <b>stream.</b>|$|E
5000|$|Example: The <b>input</b> <b>stream</b> from above, 10011011, is {{processed}} this way: ...|$|E
5000|$|At initial step 0, the <b>input</b> <b>stream</b> [...] "A*2 + 1" [...] {{is divided}} into ...|$|E
50|$|Imagine {{a website}} has 100 text input boxes. A few are {{vulnerable}} to SQL injections on certain strings. Submitting random strings to those boxes for a while hopefully hits the bugged code path. The error shows itself as a broken HTML page half rendered because of an SQL error. In this case, only text boxes are treated as <b>input</b> <b>streams.</b> However, software systems have many possible <b>input</b> <b>streams,</b> such as cookie and session data, the uploaded file stream, RPC channels, or memory. Errors can happen {{in any of these}} <b>input</b> <b>streams.</b> The test goal is to first get an un-handled error, and then understand the flaw based on the failed test case. Testers write an automated tool to test their understanding of the flaw until it is correct. After that, it may become obvious how to package the payload so that the target system triggers its execution. If this is not viable, one can hope that another error produced by the fuzzer yields more fruit. The use of a fuzzer saves time by not checking adequate code paths where exploits are unlikely.|$|R
40|$|AbstractâThis note {{presents}} a concurrent estimation technique that broadens {{the set of}} queueing systems where concurrent estimation techniques are applicable. Our technique utilizes a proportional relation and concurrently estimates performance measures with respect to various buffer capacity values in a queueing system. Our technique applies to a queueing system that characterizes a router/switch in packet networks, and unlike existing concurrent estimation techniques, it also works with correlated and feedback controlled <b>input</b> <b>streams.</b> Simulation examples show that our technique concurrently estimates performances of the queueing system with superior accuracy and efficiency. Index TermsâConcurrent estimation, correlated and feedback controlled <b>input</b> <b>streams,</b> dynamic buffer allocation, proportional relation, queueing systems. I...|$|R
50|$|An RTU {{monitors}} the field digital and analog parameters and transmits {{data to the}} Central Monitoring Station. It contains setup software to connect data <b>input</b> <b>streams</b> to data output streams, define communication protocols, and troubleshoot installation problems.|$|R
