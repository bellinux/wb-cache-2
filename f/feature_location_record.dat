0|3654|Public
40|$|Developers {{often have}} to locate the parts of source code that {{contribute}} to a specific feature during software maintenance tasks. This activity, referred to as <b>feature</b> <b>location</b> in software engineering, is a human-intensive and knowledge-intensive process. Researchers have investigated (semi-) automatic analysis-based techniques to assist developers in such <b>feature</b> <b>location</b> activities. However, little work {{has been carried out}} on better understanding how developers perform <b>feature</b> <b>location</b> tasks. In this paper, we report an exploratory study of <b>feature</b> <b>location</b> process, consisting of three experiments in which developers were given unfamiliar systems and asked to complete six <b>feature</b> <b>location</b> tasks. Our study suggests that <b>feature</b> <b>location</b> process can be understood hierarchically at three levels of granularity: phase, pattern, and action. Furthermore, our statistical analysis shows that these <b>feature</b> <b>location</b> phases, patterns, and actions can be effectively imparted to junior developers and consequently improve their performance on <b>feature</b> <b>location</b> tasks. Our qualitative observations and interviews also suggest that external factors, for example, human factors, task properties, and in-process feedbacks, affect the choices and usage of different <b>feature</b> <b>location</b> patterns and actions. Our results open up new opportunities to <b>feature</b> <b>location</b> research, which could lead to better tool suppor...|$|R
40|$|Abstract—Developers {{often have}} to locate {{the parts of the}} source code that {{contribute}} to a specific feature during software maintenance tasks. This activity, referred to as <b>feature</b> <b>location</b> in software engineering, is a human- and knowledge-intensive process. Researchers have investigated information retrieval, static/dynamic analysis based techniques to assist developers in such <b>feature</b> <b>location</b> activities. However, little work has been done on better understanding how developers perform <b>feature</b> <b>location</b> tasks. In this paper, we report an exploratory study of <b>feature</b> <b>location</b> process, consisting of two experiments in which developers were given unfamiliar systems and asked to complete six <b>feature</b> <b>location</b> tasks in two hours. Our study suggests that <b>feature</b> <b>location</b> process can be understood hierarchically at three levels of granularities: phase, pattern, and action. Furthermore, our study suggests that these feature-location phases, patterns and actions can be effectively imparted to junior developers and consequently improve their performance on <b>feature</b> <b>location</b> tasks. Our results open up new opportunities to <b>feature</b> <b>location</b> research, which could lead to better tool support and more rigorous <b>feature</b> <b>location</b> process. Keywords-feature location human study conceputal framework I...|$|R
40|$|<b>Feature</b> <b>location</b> is the {{activity}} of identifying an initial location in the source code that implements functionality in a software system. Many <b>feature</b> <b>location</b> techniques have been introduced that automate {{some or all of}} this process, and a comprehensive overview of this large body of work would be beneficial to researchers and practitioners. This paper presents a systematic literature survey of <b>feature</b> <b>location</b> techniques. Eighty-nine articles from 25 venues have been reviewed and classified within the taxonomy in order to organize and structure existing work in the field of <b>feature</b> <b>location.</b> The paper also discusses open issues and defines future directions in the field of <b>feature</b> <b>location...</b>|$|R
40|$|Abstract. Due to the {{increasing}} of software requirements and software features, modern software systems continue to grow in size and complexity. Locating source code entities that required to implement a feature in millions lines of code is labor and cost intensive for developers. To this end, several studies have pro-posed the use of Information Retrieval (IR) to rank source code entities based on their textual similarity to an issue report. The ranked source code entities could be at a class or function granularity level. Source code entities at the class-level are usually large in size and might contain a lot of functions that are not implemented for the feature. Hence, we conjecture that the class-level <b>feature</b> <b>location</b> tech-nique requires more effort than function-level <b>feature</b> <b>location</b> technique. In this paper, we investigate the impact of granularity levels on a <b>feature</b> <b>location</b> tech-nique. We also presented a new evaluation method using effort-based evaluation. The results indicated that function-level <b>feature</b> <b>location</b> technique outperforms class-level <b>feature</b> <b>location</b> technique. Moreover, function-level <b>feature</b> <b>location</b> technique also required 7 times less effort than class-level <b>feature</b> <b>location</b> tech-nique to localize the first relevant source code entity. Therefore, we conclude that <b>feature</b> <b>location</b> technique at the function-level of program elements is effective in practice...|$|R
40|$|Abstract—Many {{software}} maintenance tasks require locating code units that implement a certain feature (termed as <b>feature</b> <b>location).</b> <b>Feature</b> <b>location</b> {{has been an}} active research area {{for more than two}} decades. However, there is lack of publicly available, large scale benchmarks for evaluating and comparing <b>feature</b> <b>location</b> approaches. In this paper, we present a Linux-Kernel based benchmark for <b>feature</b> <b>location</b> research. This benchmark is large scale and extensible. By providing rich feature and program information and accurate ground-truth links between features and code units, it supports the evaluation {{of a wide range of}} <b>feature</b> <b>location</b> approaches. It allows researchers to gain deeper insights into existing approaches and how they can be improved. It also enables communication and collaboration among different researchers. (video...|$|R
40|$|Abstract—Automated <b>feature</b> <b>location</b> {{techniques}} {{have been proposed}} to extract program elements {{that are likely to}} be relevant to a given feature. A more accurate result is expected to enable developers to perform more accurate <b>feature</b> <b>location.</b> However, several experiments assessing traceability recovery have shown that analysts cannot utilize an accurate traceability matrix for their tasks. Because <b>feature</b> <b>location</b> deals with a certain type of traceability links, it is an important question whether the same phenomena are visible in <b>feature</b> <b>location</b> or not. To answer that question, we have conducted a controlled experiment. We have asked 20 subjects to locate features using lists of methods of which the accuracy is controlled artificially. The result differs from the traceability recovery experiments. Subjects given an accurate list would be able to locate a feature more accurately. However, subjects could not locate the complete implementation of features in 83 % of tasks. Results show that the accuracy of automated <b>feature</b> <b>location</b> techniques is effective, but it might be insufficient for perfect <b>feature</b> <b>location.</b> Index Terms—feature location, impact analysis, program com-prehension, human factor I...|$|R
40|$|Abstract. Data fusion is {{the process}} of {{integrating}} multiple sources of information such that their combination yields better results than if the data sources are used individually. This paper applies the idea of data fusion to <b>feature</b> <b>location,</b> the process of identifying the source code that implements specific functionality in software. A data fusion model for <b>feature</b> <b>location</b> is presented which defines new <b>feature</b> <b>location</b> techniques based on combining information from textual, dynamic, and web mining or link analyses algorithms applied to software. A novel contribution of the proposed model is the use of advanced web mining algorithms to analyze execution information during <b>feature</b> <b>location.</b> The results of an extensive evaluation on three Java systems indicate that the new <b>feature</b> <b>location</b> techniques based on web mining improve the effectiveness of existing approaches by as much as 87 %...|$|R
40|$|Abstract—Feature {{location}} is a human-oriented and information-intensive process. When performing <b>feature</b> <b>location</b> tasks with existing tools, developers often feel {{it difficult to}} formulate an accurate feature query (e. g., keywords) and determine the relevance of returned results. In this paper, we propose a <b>feature</b> <b>location</b> approach that supports multi-faceted interactive program exploration. Our approach automatically extracts and mines multiple syntactic and semantic facets from candidate program elements. Furthermore, it allows developers to interactively group, sort, and filter <b>feature</b> <b>location</b> results in a centralized, multi-faceted, and intelligent search User Interface (UI). We have implemented our approach as a web-based tool MFIE and conducted an experimental study. The {{results show that the}} developers using MFIE can accomplish their <b>feature</b> <b>location</b> tasks 32 % faster and the quality of their <b>feature</b> <b>location</b> results (in terms of F-measure) is 51 % higher than that of the developers using regular Eclipse IDE. I...|$|R
50|$|Eddie Baltimore: <b>Location</b> <b>recording</b> engineer.|$|R
40|$|Abstract <b>Feature</b> <b>location</b> {{techniques}} aim at locating software {{artifacts that}} implement a specific program functionality, a. k. a. a feature. These techniques support developers during various {{activities such as}} software maintenance, aspect- or featureoriented refactoring, and others. For example, detecting artifacts that correspond to product line features can assist the transition from unstructured to systematic reuse approaches promoted by software product line engineering (SPLE). Managing features, {{as well as the}} traceability between these features and the artifacts that implement them, is an essential task of the SPLE domain engineering phase, during which the product line resources are specified, designed and implemented. In this chapter, we provide an overview of existing <b>feature</b> <b>location</b> techniques. We describe their implementation strategies and exemplify the techniques on a realistic use-case. We also discuss their properties, strengths and weaknesses and provide guidelines that can be used by practitioners when deciding which <b>feature</b> <b>location</b> technique to choose. Our survey shows that none of the existing <b>feature</b> <b>location</b> techniques are designed to consider families of related products and only treat different products of a product line as individual, unrelated entities. We thus discuss possible directions for leveraging SPLE architectures in order to improve the <b>feature</b> <b>location</b> process. Key words: Software product lines, software maintenance, <b>feature</b> <b>location.</b> ...|$|R
40|$|SEMERU Goals of {{our work}} • Investigate {{approaches}} that use textual, dynamic, and static analyses for <b>feature</b> <b>location</b> • Evaluate in terms of ability to find near-complete feature implementations • Develop guidelines for assessment of <b>feature</b> <b>location</b> techniques • Report results and observations from exploratory stud...|$|R
5000|$|Additional <b>location</b> <b>recording</b> at Remote Control (Seattle, WA).|$|R
40|$|We {{present a}} {{technique}} for facial feature localization using a two-level hierarchical wavelet network. The first level wavelet network {{is used for}} face matching, and yields an affine transformation used for a rough approximation of <b>feature</b> <b>locations.</b> Second level wavelet networks for each feature are then used to fine-tune the <b>feature</b> <b>locations...</b>|$|R
40|$|Abstract—A novel {{approach}} to improve <b>feature</b> <b>location</b> by enhancing the corpus (i. e., source code) with static information is presented. An information retrieval method, namely Latent Semantic Indexing (LSI), {{is used for}} <b>feature</b> <b>location.</b> Adding stereotype information to each method/function enhances the corpus. Stereotypes are terms that describe the abstract role of a method, for example get, set, and predicate are well-known method stereotypes. Each method in the system is automatically stereotyped via a static-analysis approach. Experimental comparisons of using LSI for <b>feature</b> <b>location</b> with, and without, stereotype information are conducted {{on a set of}} open-source systems. The results show that the added information improves the recall and precision in the context of <b>feature</b> <b>location.</b> Moreover, the use of stereotype information decreases the total effort that a developer would need to expend to locate relevant methods of the feature...|$|R
40|$|Abstract—Deep {{learning}} {{models are}} {{a class of}} neural networks. Relative to n-gram models, deep learning models can capture more complex statistical patterns based on smaller training corpora. In this paper we explore {{the use of a}} particular deep learning model, document vectors (DVs), for <b>feature</b> <b>location.</b> DVs seem well suited to use with source code, because they both capture the influence of context on each term in a corpus and map terms into a continuous semantic space that encodes semantic relationships such as synonymy. We present preliminary results that show that a <b>feature</b> <b>location</b> technique (FLT) based on DVs can outperform an analogous FLT based on latent Dirichlet allocation (LDA) and then suggest several directions for future work on the use of deep learning models to improve developer effectiveness in <b>feature</b> <b>location.</b> Index Terms—deep learning; neural networks; document vec-tors; <b>feature</b> <b>location</b> I...|$|R
5000|$|Additional <b>Location</b> <b>Recording</b> - Steve Culp, Matt Shaw & Steve Smith ...|$|R
5000|$|Use of Medium - sound design, <b>location</b> <b>recording,</b> [...] "audio art." ...|$|R
40|$|This work {{presents}} the Generic Network Location Service {{based on the}} Chord implementation utilizing data structures called distributed hash tables (DHT) or structured overlay networks, which are used to build scalable self-managing distributed systems. The provided algorithms guarantee resilience {{in the presence of}} dynamism: they guarantee consistent lookup results in the presence of nodes failing and leaving. Generic Network Location Service provides a Location Service system based on DHT technology, which is storing device <b>location</b> <b>records</b> in nodes within a Chord DHT. <b>Location</b> <b>records</b> are consisting of network device identification keys as attributes, which are used to create replicas of additional <b>location</b> <b>records</b> through established Chord hashing mechanisms. Storing device <b>location</b> <b>records,</b> in places address-able (using the DHT lookup) by individual <b>location</b> <b>record</b> keys provides a simple way of implementing transla¬tion functions similar to well¬ known network services (e. g. ARP, DNS, ENUM). The generic network location ser¬vice presented in the paper is not supposed to be a substitu¬tion of the existing translation techniques (e. g. ARP, DNS, ENUM), but it is considered as an overlay service that uses data available in existing systems and provides some translations currently unavailable...|$|R
5000|$|Side Trip! - <b>Features</b> <b>locations</b> and sights that {{is uniquely}} Bicol.|$|R
5000|$|Surgeon - Intro - <b>Location</b> <b>recording</b> from Kuramae Subway Station, Tokyo, Japan ...|$|R
50|$|Although not {{featured}} in the Domesday the closest <b>featured</b> <b>location</b> is Milton Regis.|$|R
50|$|Cobra Island is a <b>featured</b> <b>location</b> in the G.I. Joe novel 'Fool's Gold'.|$|R
5000|$|Rob Ellis - drums, <b>location</b> <b>recording,</b> Moog synthesizer, percussion, producer, stylophone, synthesizer, {{background}} vocals ...|$|R
5000|$|Mark Custom Recording Service [...] - [...] 2 to 32 track digital <b>location</b> <b>recording</b> service ...|$|R
5000|$|It was a <b>featured</b> <b>location</b> in {{the game}} Tomb Raider: The Angel of Darkness (2003).|$|R
50|$|Nye County was a <b>featured</b> <b>location</b> in two {{episodes of}} Studio 60 on the Sunset Strip.|$|R
50|$|The Byberry {{facility}} is a <b>featured</b> <b>location</b> the Haunted Philadelphia pop-up books series by photographer Colette Fu.|$|R
50|$|The Hall of Justice is a <b>featured</b> <b>location</b> {{as part of}} the Robot Chicken DC Comics Special.|$|R
5000|$|... #Caption: Cafetaria 't Pleintje in Den Dungen, often <b>featured</b> <b>location</b> in comedy {{sketches}} by the New Kids ...|$|R
40|$|Most Software Product Lines {{are built}} from {{a set of}} {{existing}} products, that is re-engineered into reusable assets following <b>feature</b> <b>location</b> approaches. Traditional <b>feature</b> <b>location</b> approaches target program code, neglecting other software artifacts as models. We present FLiMEA, an approach for <b>Feature</b> <b>Location</b> in Models by an Evolutionary Algorithm. FLiMEA capitalizes on experts domain knowledge to boost the <b>feature</b> <b>location</b> process and produces model fragments that properly capture the reusable units of the domain. FLiMEA performs a search (guided by a fitness function) over alternative feature realizations (generated through genetic operations). Features and their realizations must evolve over time. We propose Variable MetaModel (VMM), an approach based on variability modeling ideas applied at metamodel level to enable the co-evolution of the model fragments and the language used to create them. FLiMEA and VMM have been evaluated in our industrial partners, BSH and CAF. We explore different genetic operations and fitness functions so FLiMEA can be tailored to work under different industrial scenarios and we check that VMM is {{able to cope with}} the evolution of the features...|$|R
5000|$|The Dugout Studio, Nashville, Tennessee - {{tracking}} <b>location,</b> overdub <b>recording</b> <b>location</b> ...|$|R
50|$|The film <b>featured</b> <b>location</b> {{shooting}} {{in and around}} Moss Vale, Mount Kosciuszko, Kiandra, Adaminaby, Leura and the Blue Mountains.|$|R
5000|$|The theatre was {{utilised}} as the <b>feature</b> <b>location</b> of the 1985 INXS {{music video}} for [...] "Listen Like Thieves" ...|$|R
25|$|Baekje Historic Areas, which <b>feature</b> <b>locations</b> with {{remains of}} the period, was {{designated}} a UNESCO World Heritage site in 2015.|$|R
5000|$|In the straight-to-DVD film Superman/Batman: Apocalypse, Apokolips was a <b>featured</b> <b>location</b> where Darkseid {{had placed}} Kara Zor-El under his command.|$|R
5000|$|Tunnel was the <b>featured</b> <b>location</b> in Johnny Kemp's {{video for}} his classic hit single [...] "Just Got Paid" [...] (1987) ...|$|R
