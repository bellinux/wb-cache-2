2|0|Public
50|$|As {{one might}} imagine, this makes {{blitting}} significantly slower than sprite manipulation. However, blitting has one very big advantage: {{there is no}} physical limit {{to the number of}} patterns you can blit, or {{to the size of the}} patterns. Thus you can use blitting to display anything on the screen, including simulating sprites (through the <b>double-write</b> pattern noted above), or even text.|$|E
40|$|Over {{the past}} decade, mobile devices, such as {{smartphones}} and tablets, have become ubiquitous. The persistent storage options in smartphones employ journaling or <b>double-write</b> to enforce atomicity, consistency and durability, which introduces significant overhead to system performance. Our in-depth {{examination of the}} issue leads {{us to believe that}} much of the overhead would be unnecessary if we rethink the volatility of memory considering the battery-backed characteristics of DRAM in modern-day smartphones. ^ We propose quasi Non-Volatile Memory (qNVRAM) with this rethinking, a new design that makes the DRAM in smartphones quasi non-volatile, to help remove the performance overhead of enforcing persistency. We assess the feasibility and effectiveness of our design by implementing two of the many possible qNVRAM use cases, a persistent page cache, called pPCache, for SQLite, a widely-used relational database in smartphones, and a fast transaction logging service, called xLog, for LevelDB, a popular embedded NoSQL key-value database. From our experimental results, pPCache speeds up SQLite transactions by up to 16. 33 × over the state-of-the-art approaches and xLog speeds up the LevelDB Put operation by up to 10. 7 ×. ^ So far, the prevailing trends in performance studies of mobile devices have been an exclusive focus on the storage stack of the system, including {{the first part of this}} dissertation. As important as this focus is, we believe that what really matters for performance of mobile devices is that perceived by the actual users and applications. To obtain a fundamental understanding of this issue, in the second part of the dissertation, we revisit the impact of storage on application performance, and look at this from the user’s perspective. We develop a methodology for quantifying user-perceived latency and use it to evaluate four application benchmarks from past works with the SQLite and the Ext 4 file system optimization. Our evaluation shows that the storage performance benefits seen by the applications largely depend on how they manage their data, and the application performance of the four applications under test have only improved by up to 11. 8 % with the best known optimizations on the storage stack alone. ...|$|E

