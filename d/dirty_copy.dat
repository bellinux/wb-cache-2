1|3|Public
40|$|The Bible was {{a lifelong}} {{companion}} for Dostoevsky, who often {{read it and}} sometimes annotated it. But what meaning lies in the marking of a text? The first critic to examine the markings in Dostoevsky’s Bible was the Norwegian professor in Russian literary history, Geir Kjetsaa. He did so in the early 1980 s and wrote {{a book on the}} subject. This essay will discuss Kjetsaa’s method of reading Dostoevsky {{on the basis of the}} annotations. Kjetsaa’s analyses are intriguing but not immune to criticism, as too much focus on the markings tends to neglect the significance of the randomly read passages. After a short introduction (1) I will closely examine Kjetsaa’s analysis of Dostoevsky’s novels (2), and then add my own critical remarks (3). Finally I will compare Kjetsaa’s reading of Dostoevsky with theological readings of him (Romano Guardini and Karl Barth/Eduard Thurneysen). Unlike Kjetsaa, the theologians were unaware of the markings in Dostoevsky’s Bible. The overall question of the essay is, then: how do we approach Dostoevsky's use of the Bible in the light of his annotations to the New Testament, and when numerous voices clamour to inform us how they should be read? 1. THE <b>DIRTY</b> <b>COPY</b> OF THE NEW TESTAMENT In 1982, the Norwegian Dostoevsky scholar Geir Kjetsaa (1937 - 2008) was invited by the Gorki...|$|E
6000|$|The waiter (it {{was he who}} {{had brought}} up the Great Remonstrance from the Commercials, on the day when I was bound) {{appeared}} surprised, and took the earliest opportunity of putting a <b>dirty</b> old <b>copy</b> of a local newspaper so directly in my way, that I took it up and read this paragraph:-- ...|$|R
40|$|Abstract: Live VM (virtual machine) {{migration}} {{has become}} a research hotspot of virtualized cloud computing architecture. We present a novel migration algorithm which is called HMDC. Its main idea includes two parts. One is that it combines memory pulling copy with memory pushing copy to achieve hybrid memory copy. The other one is that it uses a delta compression mechanism during <b>dirty</b> pages <b>copy,</b> in which source host makes use of memory cache to get XOR delta pages, and then compresses delta pages which are easy to compress by the XOR binary RLE (run-length encoding) algorithm. Source host transmits delta compression pages instead of dirty pages to target host. HMDC increases throughput and decreases total migration data by using delta compression and thus to achieve <b>dirty</b> pages <b>copy</b> quickly. The experimental results demonstrate that HMDC evidently reduces total migration time, VM downtime and total migration data compared with Pre-copy and XBRLE algorithm. It makes the process of memory migration more high-effective and transparent...|$|R
30|$|In pre-copy {{approach}} memory {{pages are}} transfer number {{of time that}} increases total migration time and network traffic whereas in post-copy approach leads {{to a lot of}} page fault and high service downtime. A Three-Phase Memory (TPM) transfer approach proposed by Yin et al. [53], determine that the memory pages are transferred at most twice during the whole migration process. This approach ensures that memory page fault occurs only for fraction of memory that leads to lessening total migration time. The TPM transfer having full memory <b>copy,</b> <b>dirty</b> bitmap, and dirty page moving phases for entire VM memory migration. In the full memory copy phase, transfer all the VM memory pages from source to destination server are transferred without interrupting the running applications even pages are continuously modified. In the next <b>dirty</b> bitmap <b>copy</b> phase, the VM at source server is suspended and then all the recorded dirty memory pages are transferred to the destination server. In the last <b>dirty</b> pages <b>copy</b> phase, the VM at the destination server is resumed. Active push and on-demand paging approaches are used to fetch faulty pages from the source server. Implementation is performed on Xen 4.1. 4 hypervisor and evaluation is performed under various memory-intensive workloads. Obtain results show that TPM approach can considerably reduce total pages transferred and total migration time. This work is effective for automatic load balancing.|$|R

