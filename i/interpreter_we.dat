104|156|Public
6000|$|... "Well, {{to return}} to that. The fact is, I would not mind the men, for it's likely that men of some sort will turn up somewhere, but I am very anxious about an interpreter. Without an <b>interpreter</b> <b>we</b> shall get on badly, I fear, for I can only speak French, besides a very little Latin and Greek, none of which {{languages}} will avail much among niggers." ...|$|E
6000|$|... [34] It {{would be}} {{difficult}} to find 12 consecutive pages in the English language, that contain such volumes of meaning, in such beautiful and instructive lessons, with such heavenly imagery, in so pure and sweet a style, and with so thrilling an appeal to the best affections of the heart, as these pages descriptive of Christian's sojourning in the house of the Interpreter. This good man of the house, the <b>Interpreter,</b> <b>we</b> are, without doubt, to take as the representative of the Holy Spirit, with His enlightening and sanctifying influences on the heart-(Cheever). The order in which these heavenly lessons are taught, is worthy of our admiration-(ED).|$|E
6000|$|... "I don't know. Guess {{it has a}} kind of civilizing effect, as you'll see. Resources {{of civilization}} get handed on to the Bush tribes, but that can't be what it was started for. However, {{recently}} the tribes have begun to run cunning, and they hide themselves and all their goods when they have reason to expect a friendly visit. This was what they had done the day we landed. But, while we were jawing with the <b>interpreter,</b> <b>we</b> heard a yell to make your hair stand on end. The Bush tribe came down on the village all in their war paint,--white clay; an arrangement, as you say, in black and white. Down they came, rushed into every hut, rushed out again, found nothing, and an awful rage they were in. They said this kind of behaviour was most ungentlemanly; why, where was decent feeling? where was neighbourliness? While they were howling, they spotted the hog, and made for him in a minute; here was luncheon, anyhow,--pork chops. So they soon had a fire, set a light to one of the houses in fact, and heaped up stones; that's how they cook. They cut you up in bits, wrap them in leaves--" ...|$|E
40|$|We {{present the}} latest version of the LOGEN partial {{evaluation}} system for logic programs. In particular we present new binding-types, and show how they can be used to effectively specialise a wide variety of <b>interpreters.</b> <b>We</b> show how to achieve Jones-optimality in a systematic way for several <b>interpreters.</b> Finally, <b>we</b> present and specialise a nontrivial interpreter for a small functional programming language. Experimental results are also presented, highlighting that the LOGEN system can be a good basis for generating compilers for high-level languages. status: publishe...|$|R
40|$|We {{describe}} formal {{manipulations of}} programming language semantics that permit execution animation for <b>interpreters.</b> <b>We</b> first study {{the use of}} occurrences in the lambda-calculus and we describe an implementation {{of the notion of}} residuals. We then describe applications in the development of interpreters for the lazy lambda-calculus and the parallel language Occam...|$|R
40|$|The {{present study}} {{aims to examine}} perceptual {{differences}} {{in the identification of}} English words between Japanese professional interpreters educated in English in childhood in a foreign country (returnee interpreters) and Japanese professional interpreters educated in Japanese in childhood in Japan (non-returnee <b>interpreters).</b> <b>We</b> conducted an identification test of English words in sentences with returnee interpreters and non-returnee interpreters. In the test, {{the participants were asked to}} listen to recordings including English words and to identify the words. The results showed that the returnee interpreters identified the English words significantly better than the non-returnee <b>interpreters.</b> Also, <b>we</b> found some commonalities in phonetic perception (listening skills) between the returnee and non-returnee interpreters...|$|R
60|$|One day, {{two of the}} {{officers}} and myself rode to Ribeira Grande, a village a few miles eastward of Porto Praya. Until we reached the valley of St. Martin, the country presented its usual dull brown appearance; but here, a very small rill of water produces a most refreshing margin of luxuriant vegetation. In {{the course of an}} hour we arrived at Ribeira Grande, and were surprised {{at the sight of a}} large ruined fort and cathedral. This little town, before its harbour was filled up, was the principal place in the island: it now presents a melancholy, but very picturesque appearance. Having procured a black Padre for a guide, and a Spaniard who had served in the Peninsular war as an <b>interpreter,</b> <b>we</b> visited a collection of buildings, of which an ancient church formed the principal part. It is here the governors and captain-generals of the islands have been buried. Some of the tombstones recorded dates of the sixteenth century. (1/2. The Cape de Verd Islands were discovered in 1449. There was a tombstone of a bishop with the date of 1571; and a crest of a hand and dagger, dated 1497.) The heraldic ornaments were the only things in this retired place that reminded us of Europe. The church or chapel formed one side of a quadrangle, in the middle of which a large clump of bananas were growing. On another side was a hospital, containing about a dozen miserable-looking inmates.|$|E
60|$|For {{it is not}} metres, but a metre-making {{argument}} that makes a poem,--a thought so passionate and alive that like {{the spirit of a}} plant or an animal it has an architecture of its own, and adorns nature with a new thing. The thought and the form are equal in the order of time, but in the order of genesis the thought is prior to the form. The poet has a new thought; he has a whole new experience to unfold; he will tell us how it was with him, and all men will be the richer in his fortune. For the experience of each new age requires a new confession, and the world seems always waiting for its poet. I remember when I was young how much I was moved one morning by tidings that genius had appeared in a youth who sat near me at table. He had left his work and gone rambling none knew whither, and had written hundreds of lines, but could not tell whether that which was in him was therein told; he could tell nothing but that all was changed,--man, beast, heaven, earth and sea. How gladly we listened! how credulous! Society seemed to be compromised. We sat in the aurora of a sunrise which was to put out all the stars. Boston seemed to be at twice the distance it had the night before, or was much farther than that. Rome,--what was Rome? Plutarch and Shakspeare were in the yellow leaf, and Homer no more should be heard of. It is much to know that poetry has been written this very day, under this very roof, by your side. What! that wonderful spirit has not expired! These stony moments are still sparkling and animated! I had fancied that the oracles were all silent, and nature had spent her fires; and behold! all night, from every pore, these fine auroras have been streaming. Every one has some interest in the advent of the poet, and no one knows how much it may concern him. We know that the secret of the world is profound, but who or what shall be our <b>interpreter,</b> <b>we</b> know not. A mountain ramble, a new style of face, a new person, may put the key into our hands. Of course the value of genius to us is in the veracity of its report. Talent may frolic and juggle; genius realizes and adds. Mankind in good earnest have availed so far in understanding themselves and their work, that the foremost watchman on the peak announces his news. It is the truest word ever spoken, and the phrase will be the fittest, most musical, and the unerring voice of the world for that time.|$|E
5000|$|Currently we have {{constructed}} lexer,parser {{and most}} of semantic analyzer. The first code gen is basically an AST-walking <b>interpreter.</b> <b>We</b> have plans to keep working on this project and start using LLVM for machine code JIT compilation. One of the compilation targets is native executable (no VM) just like with C/C++.|$|E
40|$|International audienceWith {{an initial}} {{motivation}} {{based on the}} security of web applications written in JavaScript, we consider the instrumentation of an interpreter for a dynamic analysis as a crosscutting concern. We define the instrumentation problem – an extension to the expression problem {{with a focus on}} modifying <b>interpreters.</b> <b>We</b> then illustrate how we can instrument an interpreter for a simple language using only the bare language features provided by JavaScript...|$|R
40|$|Abstract. This paper {{reports on}} results {{concerning}} {{the combination of}} non-standard semantics via <b>interpreters.</b> <b>We</b> define what a semantics combination means and identify under which conditions a combination can be realized by computer programs (robustness, safely combinable). We develop the underlying mathematical theory and examine the mean-ing of several non-standard interpreter towers. Our results suggest a tech-nique {{for the implementation of}} a certain class of programming language dialects by composing a hierarchy of non-standard interpreters. ...|$|R
40|$|AbstractThe {{coincidence}} of the declarative and procedural interpretations of logic programs {{does not apply}} to Prolog programs, due to the depth-first left-to-right evaluation strategy of Prolog <b>interpreters.</b> <b>We</b> propose a semantics for Prolog programs based on a four-valued logic. The semantics is based on a new concept of completion analogous to Clark's and it enjoys the nice properties of the declarative semantics of logic programming: existence of the least Herbrand model, equivalence of the model-theoretic and operational semantics...|$|R
40|$|This paper {{provides}} a modular high-level {{design of the}} Common Language Runtime (CLR) architecture. Our design is given in terms of Abstract State Machines (ASMs) and {{takes the form of}} an <b>interpreter.</b> <b>We</b> describe the CLR as a hierarchy of nine submachines, which correspond to nine submodules into which the Common Intermediate Language (CIL) instruction set can be decomposed. ...|$|E
40|$|In {{this paper}} we {{describe}} {{a framework for}} defining and operationalizing conceptual models of distributed knowledge-based systems which extends published approaches by the notion of,agents" and multiple task decompositions. The main part deals with techniques underlying our distributed <b>interpreter.</b> <b>We</b> show how a client-server-architecture can be implemented which allows prototyping distributed knowledge-based systems. Further we describe our mechanism which manages task interactions and supports dependency-directed backtracking efficiently...|$|E
40|$|This {{paper is}} a short {{tutorial}} introduction to online partial evaluation. We show {{how to write a}} simple online partial evaluator for a simple, pure, first-order, functional programming language. In particular, we show that the partial evaluator can be derived as a variation on a compositionally defined <b>interpreter.</b> <b>We</b> demonstrate the use of the resulting partial evaluator for program optimization in the context of model-driven development. ...|$|E
40|$|This paper {{examines}} in {{a comparative}} manner some interpretations of Brazil’s moderniza- tion {{and its relation}} to the issue of social inequality produced in Brazilian Social Thought. We seek to show the points of convergence and divergence between the perspectives of the group of interpreters analyzed here. On the basis of the comparative analysis of some of our main <b>interpreters</b> <b>we</b> look for resources that may contribute to a broad understanding of the phenomenon of social inequality, which is a central theme in Brazil today...|$|R
40|$|International audienceIn a {{previous}} paper, Benaissa, Lescanne, and Rose, have extended the weak lambda-calculus of explicit substitution lambda-sigma-w with addresses, {{so that it}} gives {{an account of the}} sharing implemented by lazy functional language <b>interpreters.</b> <b>We</b> show in this paper that their calculus, called lambda-sigma-w-a, fits well to the lazy Krivine machine, which describes the core of a lazy (call-by-need) functional programming language implementation. The lazy Krivine machine implements term evaluation sharing, that is essential for efficiency of such languages. The originality of our proof is that it gives a very detailed account of the implemented strategy...|$|R
40|$|Our aim is {{to build}} a {{platform}} allowing a user to chat with virtual agent. The agent displays audio-visual backchannels {{as a response to the}} user’s verbal and nonverbal behaviours. Our system takes as inputs the audio-visual signals of the user and outputs synchronously the audio-visual behaviours of the agent. In this paper, we describe the SEMAINE architecture and the data flow that goes from inputs (audio and video) to outputs (voice synthesizer and virtual characters), going through analysers and <b>interpreters.</b> <b>We</b> focus, more particularly, on the multimodal behaviour of the listener model driven by audio input...|$|R
40|$|We {{describe}} an interpreter for a value-passing version of CCS {{implemented in the}} lazy functional programming language Haskell. Starting from a base <b>interpreter,</b> <b>we</b> then show how to modify the interpreter for CCS extensions including, additional non-primitive combinators, new primitive operators (an interrupt operator), a time domain with a timeout operator useful in describing real-time systems, and higher order CCS where processes may be passed on channels...|$|E
40|$|Abstract. In {{this paper}} we {{describe}} {{a framework for}} defining and operationalizing conceptual models of distributed knowledge-based systems which extends published approaches by the notion of „agents “ and multiple task decompositions. The main part deals with techniques underlying our distributed <b>interpreter.</b> <b>We</b> show how a client-server-architecture can be implemented which allows prototyping distributed knowledge-based systems. Further we describe our mechanism which manages task interactions and supports dependency-directed backtracking efficiently. ...|$|E
40|$|Abstract. In this paper, we compose six {{different}} Python and Prolog VMs into 4 pairwise compositions: one using C interpreters; one {{running on the}} JVM; one using meta-tracing interpreters; and one using a C inter-preter and a meta-tracing <b>interpreter.</b> <b>We</b> show that programs that cross the language barrier frequently execute faster in a meta-tracing compo-sition, and that meta-tracing imposes a significantly lower overhead on composed programs relative to mono-language programs. ...|$|E
40|$|Abstract. In a {{previous}} paper, Benaissa, Lescanne, and Rose, have extended the weak lambda-calculus of explicit substitution λσw with addresses, {{so that it}} gives {{an account of the}} sharing implemented by lazy functional language <b>interpreters.</b> <b>We</b> show in this paper that their calculus, called λσ a w, fits well to the lazy Krivine machine, which describes the core of a lazy (call-by-need) functional programming language implementation. The lazy Krivine machine implements term evaluation sharing, that is essential for efficiency of such languages. The originality of our proof is that it gives a very detailed account of the implemented strategy...|$|R
40|$|Abstract. We {{present a}} {{framework}} for defining abstract interpreters for liveness properties, in particular program termination. The framework makes use {{of the theory of}} metric spaces to define a concrete semantics, relates this semantics with the usual order-theoretic semantics of abstract interpretation, and identifies a set of conditions for determining when an abstract interpreter is sound for analysing liveness properties. Our soundness proof of the framework is based on a novel relationship between unique fixpoints in metric semantics and post-fixpoints computed by abstract <b>interpreters.</b> <b>We</b> illustrate the power of the framework by providing an instance that can automatically prove the termination of programs with general (not necessarily tail) recursion. ...|$|R
40|$|This article aims, {{based in}} sign {{language}} translation researches, {{and at the}} same time entering discussions with inspiration in contemporary theories on the concept of "deconstruction" (DERRIDA, 2004 DERRIDA e ROUDINESCO, 2004 ARROJO, 1993), to reflect on some aspects concerning to the definition of the role and duties of translators and <b>interpreters.</b> <b>We</b> conceive that deconstruction does not consist in a method to be applied on the linguistic and social phenomena, but a set of political strategies that comes from a speech community which translate texts, and thus put themselves in a translational task performing an act of reading that inserts sign language in the academic linguistic multiplicity...|$|R
40|$|Abstract. This paper {{presents}} experiences {{from work}} on implementing an interpreter for a domain specific language as an integrated {{part of an}} interactive, attribute grammar driven programming environment. This approach has the advantage that the static semantics of the language may be expressed in the grammar of the programming environment and then directly used also by the <b>interpreter.</b> <b>We</b> suggest that this reuse of functionality through integration may lead to more rapid development of interpreters. ...|$|E
40|$|Abstract We {{present an}} {{improved}} {{version of the}} HaskellDB database library. The original version relied on TRex, a Haskell extension supported only by the Hugs <b>interpreter.</b> <b>We</b> have replaced the use of TRex bya record implementation which uses more commonly implemented Haskell extensions. Additionally, HaskellDB now supports two different cross-platformdatabase backends. Other changes include database creation functionality, bounded string support, performance enhancements, fixesto the optimisation logic, transaction support and more fine grained expression types...|$|E
40|$|Modern {{high-performance}} virtual machines use dynamic compilation. There is {{a tension}} between compilation speed and code quality. We argue that a highly-optimizing compiler is best deployed with both a fast, less-optimizing compiler and an <b>interpreter.</b> <b>We</b> present measurements showing that such a system can achieve the same peak performance as a system with just the optimizing compiler, and startup costs similar to a system with just the interpreter and fast compiler. M/S MTV 29 - 0...|$|E
5000|$|SVR Producciones {{has also}} {{released}} works of talented American and European composers like Celso Garrido Lecca (Peru), Alberto Ginastera (Argentina), Carlos Guastavino (Argentina), Heitor Villa-Lobos (Brazil), Claudio Santoro (Brazil), Camargo Guarnieri (Brazil), Leo Brouwer (Cuba), Manuel Enríquez (Mexico), George Gershwin (USA), Leopold Weiss (Germany), J. S. Bach (Germany), Joaquín Rodrigo (Spain), Alfonso X (Spain), Joaquín Turina (Spain), Francisco Tárrega (Spain), Alfred Kalnins (Latvia), Claude Debussy (France), Maurice Ravel (France), Frank Martin (Switzerland). Between the <b>interpreters</b> <b>we</b> can mention to David del Pino Klinge ( [...] Peruvian director), Armands Abols (Latvian pianist), Quartet de Bec Frullato (Barcelona), Orchestra of Chamber of Norway, Jürg Wyttenbach (Swiss director), Per Skoglund (Swedish pianist).|$|R
2500|$|Works may be {{distributed}} for playing {{with in a}} separate interpreter. In which case they are often made available in the Blorb package format that many interpreters support. All of the <b>interpreters</b> <b>we</b> recommend can read blorb files. A filename ending [...]zblorb is a story file intended for a Z-machine in a Blorb wrapper, while a filename ending [...]gblorb is a story file intended for a Glulx in a Blorb wrapper. It is not common but IF files are sometimes also seen without a Blorb wrapping, though this usually means cover art, help files, and so forth are missing, like a book with the covers torn off. Z-machine story files usually have names ending [...]z5 or [...]z8, the number being a version number, and Glulx story files usually end [...]ulx.|$|R
40|$|AbstractA {{well-known}} {{problem with}} PROLOG-style interpreters that perform goal reduction {{is the possibility}} of entering an infinite recursion, due to a subgoal being “essentially the same” as one of its ancestors. This is informally called a “loop”. We describe the tortoise-and-hare technique for detecting such loops. This technique has low overhead: a constant amount of time and space per goal reduction step. Therefore it should be practical to incorporate into high-performance <b>interpreters.</b> <b>We</b> discuss the special considerations needed for correct implementation in an interpreter that uses tail-recursion optimization. The issue of what to do when a loop or potential loop has been detected has been investigated elsewhere. We review these results, and conclude that loop detection is probably more useful as a debugging tool than as an extension {{to the power of the}} language...|$|R
40|$|Abstract. Based on Danvy et al. ’s {{functional}} correspondence, we give {{a further}} example of gradual refinement of an interpreter into a known, lowlevel abstract machine underlying real-world compilers, by deriving an abstract {{model of the}} Warren Abstract Machine from a simple resolutionbased Prolog <b>interpreter.</b> <b>We</b> show that other well-known functional programming techniques (namely, explicit laziness and semi-persistent data structures) can help to develop abstract machines without detailed examination of the semantics realised by the interpreter...|$|E
40|$|In this paper, we compose six {{different}} Python and Prolog VMs into 4 pairwise compositions: one using C interpreters; one {{running on the}} JVM; one using meta-tracing interpreters; and one using a C interpreter and a meta-tracing <b>interpreter.</b> <b>We</b> show that programs that cross the language barrier frequently execute faster in a meta-tracing composition, and that meta-tracing imposes a significantly lower overhead on composed programs relative to mono-language programs. Comment: 33 pages, 1 figure, 9 table...|$|E
40|$|Functional active {{objects are}} a new {{paradigm}} {{for the implementation of}} services. They offer safe distributed eval- uation with futures and immutable objects guaranteeing efficient implementation of privacy while offering verified quality assurance based on the functional paradigm and a development in an interactive theorem prover. In this paper, we present a novel and highly performant implementation of functional active objects in Erlang. Besides outlining the guiding principles of the <b>interpreter,</b> <b>we</b> show by concrete examples how secure services can be realized...|$|E
40|$|Achieving good {{performance}} in bytecoded language interpreters is difficult without sacrificing both simplicity and portability. This {{is due to}} the complexity of dynamic translation ("just-in-time compilation") of bytecodes into native code, which is the mechanism employed universally by highperformance <b>interpreters.</b> <b>We</b> demonstrate that a few simple techniques make it possible to create highly-portable dynamic translators that can attain as much as 70 % the performance of optimized C for certain numerical computations. Translators based on such techniques can offer respectable performance without sacrificing either the simplicity or portability of much slower "pure" bytecode interpreters. Keywords: bytecode interpretation, threaded code, inlining, dynamic translation, just-in-time compilation. 1 Introduction Bytecoded languages such as Smalltalk [Gol 83], Caml [Ler 97] and Java [Arn 96, Lin 97] offer significant engineering advantages over more conventional languages: higher levels of abst [...] ...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedIn this thesis {{we describe the}} design and implementation of two prototype interpreters for Omega, an object-oriented, production-rule programming language. The first implementation is a throw-away prototype written in LISP; the second implementation is a more complete version written in C. The Omega language features two major components: a set of production rules executed through pattern-directed invocation, and a relational data base of values and objects. We develop a simple system of rule evaluation which relies on hashed indexing for rule selection and a list implementation of relations. The system's performance is evaluated in comparison with LISP and Prolog <b>interpreters.</b> <b>We</b> conclude {{with a discussion of}} our experience in developing example applications, and recommend extensions to the language based on this experience. [URL] United States Marine Corp...|$|R
5000|$|Works may be {{distributed}} for playing {{with in a}} separate interpreter. In which case they are often made available in the Blorb package format that many interpreters support. All of the <b>interpreters</b> <b>we</b> recommend can read blorb files. A filename ending [...]zblorb is a story file intended for a Z-machine in a Blorb wrapper, while a filename ending [...]gblorb is a story file intended for a Glulx in a Blorb wrapper. It is not common but IF files are sometimes also seen without a Blorb wrapping, though this usually means cover art, help files, and so forth are missing, like a book with the covers torn off. Z-machine story files usually have names ending [...]z5 or [...]z8, the number being a version number, and Glulx story files usually end [...]ulx.|$|R
