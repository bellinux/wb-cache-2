2|510|Public
5000|$|It was {{intended}} for use by devices which needed to exchange large amounts of data with the graphics card without hogging a computer system's CPU or data bus, such as TV tuner cards, video capture cards, MPEG video decoders (e.g. RealMagic), first generation 3D <b>graphic</b> <b>accelerator</b> <b>cards,</b> and such. [...] Early examples include the IBM EGA video adapter.|$|E
50|$|Previously graphic {{cards were}} also called graphic adapters, and the chip on this ISA/EISA cards {{consisted}} solely {{out of a}} display controller, as this functionality {{is the only one}} needed to connect a computer to a display. Later the chips also included IC to do some calculations regarding 2D rendering parallel to the CPU, and the cards were called <b>graphic</b> <b>accelerator</b> <b>cards.</b> Then IC for 3D rendering followed. Such cards were rather available as VLB, PCI, AGP and nowadays as PCI Express, as they require much more bandwidth then the ISA bus can deliver.|$|E
50|$|OEM {{versions}} of this title have support for 3D acceleration. These were bundled with 3D <b>graphics</b> <b>accelerator</b> <b>cards</b> of the time, such as the Diamond Monster 3D.|$|R
50|$|The DOS, Windows, and Mac {{releases}} {{shared the}} same gameplay, while the console conversions tweaked the game's mechanics to emphasize arcade-style action over the tactical-simulation of the original PC release. A number of enhanced versions were released {{to take advantage of}} the 3D <b>graphics</b> <b>accelerator</b> <b>cards</b> at the time.|$|R
50|$|Xtreme Racing {{requires}} an Amiga with an AGA chipset (such as the Amiga 1200, Amiga 4000, or an ECS/OCS Amiga with a <b>Graphics</b> <b>Accelerator</b> <b>Card</b> supporting AGA emulation. As the game also renders {{a lot of}} flat plane 3D, a <b>Graphics</b> <b>Accelerator</b> <b>Card</b> significantly boosts performance. As with most PC titles today, the better the memory and graphical capabilities of the computer itself, the smoother the game would run. It is possible to adjust the graphics quality from within the game - users can choose to render the pixels as 4x4, 4x2, 2x2, 2x1, or standard 1x1, as well as toggling various elements such as dust and mountains. Unlike Super Mario Kart, XTR allows you to move the camera position. A vanilla Amiga 1200 (emulated or otherwise) can only run the game in low-resolution modes.|$|R
5000|$|Quake {{could be}} {{considered}} the killer app for 3dfx's Voodoo <b>Graphics</b> 3D <b>accelerator</b> <b>card</b> for home computers.|$|R
50|$|<b>Graphics</b> <b>accelerator</b> <b>cards</b> {{brought a}} new level of realism to the {{graphics}} and physics of sim racing games. These new graphics processing units provided texture mapping, antialiasing, particle effects (i.e. fog, rain and snow), HDR and the capability to perform polygonal calculations faster, while taking the load off of the main processor. F1 Racing Simulation by Ubisoft, {{was among the first to}} utilize the new technology in 1997.|$|R
50|$|The {{non-parametric}} sampling {{approach of}} Efros-Leung {{is the first}} approach that can easily synthesis most types of texture, and it has inspired literally hundreds of follow-on papers in computer graphics. Since then, the field of texture synthesis has rapidly expanded {{with the introduction of}} 3D <b>graphics</b> <b>accelerator</b> <b>cards</b> for personal computers. It turns out, however, that Scott Draves first published the patch-based version of this technique along with GPL code in 1993 according to Efros.|$|R
50|$|Pine left Fenwick & West in 1990 {{to join a}} tech {{start-up}} called Radius, Inc, {{which offered}} the first large screen available for personal computers and pioneered the concept of dragging windows between multiple screens, a feature first available on the Macintosh Plus. The company grew from 3 to 300 employees {{in just a few}} years, and steadily expanded its product line to include processor and <b>graphics</b> <b>accelerator</b> <b>cards,</b> video production software, and Macintosh computer clones.|$|R
50|$|Video overlay is any {{technique}} used {{to display a}} video window on a computer display while bypassing the chain of CPU to graphics card to computer monitor. This is done in order {{to speed up the}} video display, and it is commonly used, for example, by TV tuner cards and early 3D <b>graphics</b> <b>accelerator</b> <b>cards.</b> The term is also used to describe the annotation or inclusion of interactivity on online videos, such as overlay advertising (mid-roll overlay).|$|R
5000|$|BRender (abbreviation of [...] "Blazing Renderer") is a {{development}} toolkit and a realtime 3D graphics engine for computer games, simulators, and graphic tools. It {{was developed and}} licensed by Argonaut Software. The engine had support for Intel's MMX instruction set and it supported Microsoft Windows, MS-DOS and Sony PlayStation platforms. Support for 3D hardware <b>graphics</b> <b>accelerator</b> <b>cards</b> was added. Software made with BRender includes Carmageddon, Croc: Legend of the Gobbos, Rat Movie, , FX Fighter, I-War (Independence War), and 3D Movie Maker.|$|R
5000|$|On August 9, 1999, PixelFusion Ltd. and Number Nine Visual Technology Corp. {{announced}} they had {{entered into a}} relationship whereby Number Nine would use PixelFusion's FUZION 150 chip to design a very high-end 3D <b>graphics</b> <b>accelerator</b> <b>card</b> for AGP Pro-equipped PCs. The card would use 128 to 1024 MiB Rambus RDRAM, while the FUZION 150 chip would contain 24 megabits of embedded DRAM. The product was to be delivered {{in the first half}} of 2000. [...] However, no retail products were made following the announcement.|$|R
40|$|Due to the {{impressive}} price-performance of today’s PCbased <b>graphics</b> <b>accelerator</b> <b>cards,</b> Sandia National Laboratories {{is attempting to}} use PC clusters to render extremely large data sets in interactive applications. This paper describes a sort-last parallel rendering system running on a PC cluster {{that is capable of}} rendering enormous amounts of geometry onto high-resolution tile displays by taking advantage of the spatial coherency that is inherent in our data. Furthermore, it is capable of scaling to larger sized input data or higher resolution displays by increasing the size of the cluster. Our prototype is now capable of rendering 120 million triangles per second on a 12 mega-pixel display...|$|R
40|$|Abstract. Real time {{rendering}} of animated crowds has many practical multimedia applications. The Graphics Processor Unit (GPU) is being increasingly employed to accelerate associated rendering and deformation calculations. This paper explores skeletal deformation calculations on the GPU for crowds of articulated figures. It compares a few strategies for efficient reuse of such calculations on clones. We further propose ideas that will reduce chances of detecting such duplication. The {{system has been}} implemented for modern PCs with <b>Graphics</b> <b>Accelerator</b> <b>cards</b> that support GPU Shader Model 3. 0, and come with accelerated bi-directional PCI express bus communication. We have achieved a realistic crowd population of 1000 animated humans at interactive rates. Keywords: skeletal deformation, skinning, crowd animation, GPGPU. ...|$|R
40|$|Steady {{growth in}} the speeds of network links and <b>graphics</b> <b>accelerator</b> <b>cards</b> has brought {{increasing}} interest in streaming transmission of three-dimensional data sets. We demonstrate how streaming visualization can be made practical for data sets containing {{hundreds of millions of}} samples. Our system is based on QSplat, a multiresolution rendering system for dense polygon meshes that employs a bounding sphere hierarchy data structure and splat rendering. We show how to incorporate view-dependent progressive transmission into QSplat, by having the client request visible portions of the model in order from coarse to fine resolution. In addition, we investigate interaction techniques for improving the eectiveness of streaming data visualization. In particular, we explore color-coding streamed data by resolution, examine the order in which data should be transmitted in order to minimize visual distraction, and propose tools for giving the user fine control over download order...|$|R
40|$|Abstract—As {{design of}} {{cellular}} automata rules using conventional methods {{is a difficult}} task, evolutionary algorithms are often utilized in this area. However, in that case, high computational demands need to be met. This problem may be partially solved by parallelization. Since parallel supercomputers and server clusters are expensive and often overburdened, this paper proposes the evolution of cellular automata rules on small and inexpensive graphic processing units. The main objective {{of this paper is}} to demonstrate that evolution of cellular automata rules can be accelerated significantly using graphics processing units. Several methods of speeding-up the evolution of cellular automata rules are proposed, evaluated and compared, some with very good results. Also a comparison is made between mid-end and high-end <b>graphics</b> <b>accelerator</b> <b>card</b> based on the results of evolution speedup. The proposed methods are evaluated using two benchmark problems. Keywords–cellular automata; parallel computing; GPU; CUDA; genetic alghorith...|$|R
40|$|This paper {{presents}} {{a new technique}} for computing collisionfree navigation motions from task-level commands for animated human characters in interactive virtual environments. The algorithm implementation utilizes the hardware rendering pipeline commonly found on <b>graphics</b> <b>accelerator</b> <b>cards</b> to perform fast 2 D motion planning. Given a 3 D geometric description of an animated character and a level-terrain environment, collision-free navigation paths can be computed between initial and goal locations at interactive rates. Speed is gained by leveraging the graphics hardware to quickly project the obstacle geometry into a 2 D bitmap for planning. The bitmap may be searched by any number of standard dynamic programming techniques to produce a final path. Cyclic motion capture data is used along with a simple proportional derivative controller to animate the character as it follows the computed path. The technique has been implemented on an SGI Indigo 2 workstation and runs at interactive rates [...] . ...|$|R
50|$|Matrox {{had been}} known for years as a {{significant}} player in the high-end 2D <b>graphics</b> <b>accelerator</b> market. <b>Cards</b> they produced were excellent Windows accelerators, {{and some of the}} later cards such as Millennium and Mystique excelled at MS-DOS as well. Matrox stepped forward in 1994 with their Impression Plus to innovate with one of the first 3D accelerator boards, but that card only could accelerate a very limited feature set (no texture mapping), and was primarily targeted at CAD applications.|$|R
40|$|In {{the recent}} {{years we have}} {{witnessed}} massive boost to hardware <b>graphics</b> <b>accelerators</b> (<b>graphics</b> <b>cards),</b> {{not only in the}} raw performance, but also in their programmability, introducing the concept of GPGPU. However, despite this, the current architectures still favor feed-forward algorithms over recursive ones. While shading is, in this sense, a feed-forward algorithm, ray tracing, and specifically ray traversal, is a recursive rather than feed-forward algorithm. Adding a dedicated hardware ray traversal engine should therefore prove to be an interesting option. Also, with dedicated hardware, we can perform many optimizations on arithmetic units due to their fixed interaction. This can reduce the area well below a simple sum of areas of the individual units. In this paper we offer for consideration analysis of memory requirements for combination of a dedicated hardware ray traversal and intersection engine with highly parallel general purpose processor used for shading. We show results and requirements of such a combination on scenes of moderate complexity, with regard to speed, bandwidth and latency...|$|R
50|$|Glide is a 3D {{graphics}} API {{developed by}} 3dfx Interactive for their Voodoo <b>Graphics</b> 3D <b>accelerator</b> <b>cards.</b> Although it originally {{started as a}} proprietary API, it was later open sourced by 3dfx. It was dedicated to rendering performance, supporting geometry and texture mapping primarily, in data formats identical to those used internally in their cards. Wide adoption of 3Dfx led to Glide being extensively used in the late 1990s, but further refinement of Microsoft's Direct3D {{and the appearance of}} full OpenGL implementations from other graphics card vendors, in addition to growing diversity in 3D hardware, eventually caused it to become superfluous.|$|R
40|$|This {{research}} {{focused on}} two main problems: 1) low cost, high fidelity stereoscopic imaging of complex tissues and organs; and 2) virtual cutting of tissue. A further {{objective was to}} develop these images and virtual tissue cutting methods {{for use in a}} telemedicine project that would connect remote sites using the Next Generation Internet. For goal one we used a CT scan of a human heart, a desktop PC with an OpenGL <b>graphics</b> <b>accelerator</b> <b>card,</b> and LCD stereoscopic glasses. Use of multiresolution meshes ranging from approximately 1, 000, 000 to 20, 000 polygons speeded interactive rendering rates enormously while retaining general topography of the dataset. For goal two, we used a CT scan of an infant skull with premature closure of the right coronal suture, a Silicon Graphics Onyx workstation, a Fakespace Immersive WorkBench and CrystalEyes LCD glasses. The high fidelity mesh of the skull was reduced from one million to 50, 000 polygons. The cut path was automatically calculated as the shortest distance along the mesh between a small number of hand selected vertices. The region outlined by the cut path was then separated from the skull and translated/rotated to assume a new position. The results indicate that widespread high fidelity imaging in virtual environment is possible using ordinary PC capabilities if appropriate mesh reduction methods are employed. The software cutting tool is applicable to heart and other organs for surgery planning, for training surgeons in a virtual environment, and for telemedicine purposes...|$|R
50|$|The {{original}} Descent {{was developed}} by Parallax Software for the DOS platform. Like most games of its era, the game was developed with a software renderer, because mainstream 3D <b>graphics</b> <b>accelerator</b> <b>cards</b> did not exist at the time. However, while most of its contemporaries - Doom included - use sprites, to render enemies, Descent renders enemies in full 3D using polygon meshes, a technique employed by Quake one year later. Sprites are used only for power-ups and the hostages. Descents graphics engine uses portal rendering, {{taking advantage of the}} game's use of collections of cubes to form rooms and tunnels, in contrast with Doom and Quake, which use BSP trees. This system was very efficient, and made possible one of the first true 3D textured environments in a video game. On lower-end systems, detail levels could be reduced to cut out some of the smaller polygons on robots and render solid color blocks in place of textures on distant walls and across passageways in the distance. Within the game, sides of cubes can be attached to other cubes, or display up to two texture maps. Cubes can be deformed so long as they remain convex. To create effects like doors and see-through grating, walls could be placed at the connected sides of two cubes. The game also introduced an elaborate static lighting scheme alongside its simple dynamic lighting, where the environment could be lit with flares—another advancement compared to Doom. Descent II later added more dynamic lighting effects, including the ability to shoot out light fixtures.|$|R
50|$|Matrox {{had been}} known for years as a {{significant}} player in the high-end 2D <b>graphics</b> <b>accelerator</b> market. <b>Cards</b> they produced were excellent Windows accelerators, and the company's Millennium card, released in 1995, excelled at MS-DOS performance as well. With regard to 3D acceleration, Matrox stepped forward in 1994 with their Impression Plus. However, that card only could accelerate a very limited feature set, and was primarily targeted at CAD applications. The Impression could not perform hardware texture mapping, for example, requiring Gouraud shading or lower-quality techniques. Very few games {{took advantage of the}} 3D capabilities of Impression Plus, with the only known games being the three titles that were bundled with the card in its '3D Superpack' CD bundle: 3D fighting game, Sento by 47 Tek; 3D space combat game, IceHawk by Amorphous Designs, and Specter MGA (aka Specter VR) by Velocity.|$|R
50|$|Descent II was {{developed}} by Parallax Software. The game was originally planned as an expansion pack to the original Descent. Both Descent and Descent II use a software renderer, but Descent II is also {{able to take advantage}} of the widening selection of 3D <b>graphics</b> <b>accelerator</b> video <b>cards.</b> <b>Graphics</b> were still 8-bit, but due to the additional CD storage space available, instead of using a single palette set during gameplay, each of the six four-level sets had its own 256-color set, and there were effectively six texture sets, each of which had basically the same textures but optimized them specifically for those colors and textures most used in the four-level set. Furthermore, multiple resolutions were supported. The original Descent uses indexed 8-bit color in DOS's display mode 13h, using 320 × 200 resolution. The Macintosh and later PC versions allow higher resolutions, such as 640 × 480. Descent II allows the resolution maximum to be stretched to 800 × 600, or 1280 × 1024 with the -superhires option.|$|R
40|$|Visualization {{of volume}} data {{has been an}} active area of {{research}} for over a decade. Much {{work has been done}} with the direct rendering of complete volumes, but that process has traditionally been very slow and is thus used to obtain final images, not to perform interaction. Interacting with volumes has instead usually been a process of finding clever ways to simplify the volume into something more rapidly displayable. This involves giving up some aspect of the full dataset. For example, cutting planes allow interaction a slice at a time. They allow the user to see all data values in that slice, but give up the full three dimensionality of the data. Isosurfaces retain three dimensionality, but sacrifice the simultaneous display of all data values. But, recent developments have emerged to allow full volume rendering to take place at interactive speeds on an ordinary desktop. This image shows an excellent example of why direct rendering of volume data is so valuable in scientific visualization. This is a CFD application, showing the mixing of two fluids. The whole story is the mixing pattern, which neither a cutting plane nor an isosurface could adequately capture. The first development is the 3 D texture extension to OpenGL and the proliferation of OpenGL <b>graphics</b> <b>accelerator</b> <b>cards</b> with sufficient texture memory to actually hold full 3 D textures. To render a full volume in this way, parallel planes are created through the volume in the principle direction most perpendicular to the viewer’s line of site. The planes are drawn back-to-front with appropriate 3 D texture coordinates. The natural OpenGL alpha blending creates a direct volume display. With today’s texture memory sizes and hardware fill rates, this is enough to manipulate volumes at interactive speeds. The second development has been the creation of volume rendering hardware, such as Mitsubishi’s Volume Pro board. The Volume Pro board can hold up to a 256 3 texture in dedicated memory. It performs direct volume rendering by orthographically ray tracing the volume at a rate of 500 million voxel composites per second...|$|R
40|$|The use {{of virtual}} reality (VR) for {{visualization}} can revolutionize medical training by simulating real world medical training procedures through intuitive and engaging user interface. Existing virtual reality based visualization systems for human anatomy are based on 3 D surface and volumetric models and simulative systems based on model libraries. The visual impact as well as facilitation for learning are inadequate in such systems. This thesis research is aimed at eliminating such inadequacies by developing a non-immersive virtual reality system framework for storage, access and navigation of real human cadaveric data. Based on this framework, a real time software system called virtual cadaver navigation system (VCNS) is developed, {{that can be used}} as an aid for teaching human anatomy. The hardware components of the system include, a mannequin, an examination probe similar to a medical ultrasound probe, and a personal computer. The examination probe is moved over the mannequin to obtain the virtual tomographic slice from the real cadaveric 3 -D volume data. A 3 -D binary space partitioning tree structure is defined to organize the entire volumetric data, by subdividing it into small blocks of predefined size, called as bricks that are assigned a unique address for identification. As the examination probe is moved over the mannequin, the set of bricks intersecting the corresponding tomographic slice are determined by traversing the tree structure, and only, the selected bricks are accessed from the main memory and brought into the texture memory on the <b>graphics</b> <b>accelerator</b> <b>card</b> for visualization. The texture memory in the graphics card and the main memory are divided into slots of size, that is a multiple of the brick size, and a tagging scheme that relates the brick addresses, texture memory slots, and the main memory blocks is developed. Based on spatial, temporal and sequential locality of reference, only the currently required bricks {{as well as some of}} the neighboring bricks are loaded from the main memory into the texture memory, in order to maintain the highest frame rates required forreal time visualization. The above framework consisting of the data organization and the access mechanism are critical in terms of achieving the interactive frame rates required for real-time visualization. The input data to the system consists of non-segmented voxel data, and the data segmented and labelled based on tissue classification. The software system includes a labeling tool, in order to display the specific tissue information at the the location of the mouse cursor. This facility is useful in both teaching anatomy and self learning...|$|R
5000|$|Intel <b>Graphics</b> Media <b>Accelerator</b> 950 <b>Graphics</b> <b>Card</b> (128 MB (128 MB) Shared RAM) - {{some have}} 256 MB ...|$|R
50|$|DECstation {{systems with}} TURBOchannel slots could use TURBOchannel-based framebuffers, 2D <b>graphics</b> <b>accelerators</b> and 3D <b>graphics</b> <b>accelerators.</b>|$|R
40|$|Since {{the late}} 1990 s, {{developers}} {{have been pushing}} graphics hardware to its limits, trying to create photorealistic environments in their games similar to those seen in recent blockbuster movies such as The Incredibles™. The need for <b>graphics</b> <b>accelerators</b> is becoming more apparent every day, as millions of calculations {{need to be done}} to render the complex scenes within games. There have been four generations of <b>graphics</b> <b>accelerators,</b> with the prospect of many more in the future. We found that the latest two generations of <b>graphics</b> <b>accelerators</b> speed performance are more dependant on the CPU speed of the system they are operating on than the previous two generations. Furthermore, newer versions of Direct 3 D offload more work to the <b>Graphics</b> <b>Accelerator,</b> leading to increased performance with Direct 3 D software on slower systems...|$|R
40|$|Includes abstract. Includes bibliographical {{references}} (leaves 68 - 70). This thesis {{describes the}} design, implementation, {{and testing of}} a reconfigurable <b>accelerator</b> <b>card.</b> The goal {{of the project was}} to provide a hardware platform for future students to carry out research into reconfigurable computing. Our accelerator design is an expansion card for a traditional Von Neumann host machine, and contains two field-programmable gate arrays. By inserting the card into a host machine, intrinsically parallel processing tasks can be exported to the FPGAs. This is similar {{to the way in which}} video game rendering tasks can be exported to the GFC on a <b>graphics</b> <b>accelerator.</b> We show how an FPGA is a suitable processing element, in terms of performance per watt, for many computing tasks. We set out to design and build a reconfigurable card that harnessed the latest FPGAs and fastest available I/O interfaces. The resultant design is one which can run within a host machine, in an array of host machines, or as a stand-alone processing node...|$|R
5000|$|... #Caption: Radius Thunder IV GX 1600 NuBus <b>graphics</b> <b>accelerator</b> ...|$|R
5000|$|Display: 13.3 Inch Glossy LCD with Intel <b>Graphics</b> <b>Accelerator</b> 4500MHD ...|$|R
5000|$|Disk {{encryption}} (using cryptographic <b>accelerator</b> <b>card</b> if present) ...|$|R
5000|$|IrisVision, one of {{the first}} 3D <b>graphics</b> <b>accelerators</b> for {{high-end}} PCs ...|$|R
50|$|Founded in 1994, Appian Graphics was a {{supplier}} of multi-monitor <b>graphics</b> <b>accelerators.</b>|$|R
50|$|Graphics {{workstations}} (e.g. machines from Silicon Graphics) often shipped with <b>graphics</b> <b>accelerators.</b>|$|R
