155|10000|Public
2500|$|GPL graph {{algorithm}} library including planarity testing, planarity <b>embedder</b> and Kuratowski subgraph {{exhibition in}} linear time.|$|E
2500|$|Free C {{source code}} for {{reference}} implementation of Boyer–Myrvold planarity algorithm, which provides both a combinatorial planar <b>embedder</b> and Kuratowski subgraph isolator. An open source project with free licensing provides the [...]|$|E
50|$|A frame {{has to be}} wired so {{that the}} wax {{foundation}} could be inserted into it. The foundation is then soldered with the wire by using a spur <b>embedder</b> or electric current. Also extant are wax foundations with embedded wire that only need to be inserted into the frame.|$|E
50|$|Some of the {{products}} included General Software <b>Embedded</b> DOS, <b>Embedded</b> DOS-ROM, <b>Embedded</b> DOS-XL and <b>Embedded</b> BIOS.|$|R
50|$|Windows <b>Embedded</b> Industry, {{formerly}} Windows <b>Embedded</b> POSReady and Windows <b>Embedded</b> for Point of Service, is {{an operating}} system subfamily developed by Microsoft {{as part of}} its Windows <b>Embedded</b> family of products. Based on Windows NT; Windows <b>Embedded</b> Industry is designed for use in Industrial Devices such as cash registers, automated teller machines, and self service checkouts. Windows <b>Embedded</b> 8.1 Industry was the last release, with Windows 10 IoT Enterprise superseding both Windows <b>Embedded</b> Industry and Windows <b>Embedded</b> Standard.|$|R
30|$|Compared {{with the}} LSB-based <b>embedding</b> algorithm, the {{signal-to-noise}} ratio is improved significantly. But {{with the change}} of block length l, the peak signal-to-noise ratio (PSNR) remains almost unchanged. Matrix <b>embedding</b> algorithms in [9, 26] improve <b>embedding</b> efficiency at considerable expense of reducing <b>embedding</b> rate. By contrast, the proposed HPSB algorithm well balances <b>embedding</b> rate and <b>embedding</b> efficiency. From experimental results, {{it is noted that}} with l increasing the <b>embedding</b> rate is improved while <b>embedding</b> efficiency remains 2.3 above as shown in Fig. 9 c.|$|R
40|$|We {{consider}} a digital watermarking application where multiple parties can embed additional information using their watermark <b>embedder.</b> These parties {{are not supposed}} to influence each other and each watermark detector {{needs to be able to}} decode the information embedded by any of the <b>embedder</b> systems. One approach would be to use a single secret key and to assign part of the payload to identify the particular <b>embedder.</b> However, it is generally accepted that for security reasons, each <b>embedder</b> should better have its own secret key. A major drawback of this last approach is related to the detector implementation complexity, which increases linearly with the number of embedders. It is shown that this drawback can be overcome by changing the key in the watermarking system dependant on features of the incoming signal...|$|E
40|$|Fuzzy {{extractor}} is {{a powerful}} but theoretical tool to extract uniform strings from discrete noisy data. Before {{it can be used}} in practice, many concerns need to be addressed in advance, such as making the extracted strings renewable and dealing with continuous noisy data. We propose a primitive fuzzy <b>embedder</b> as a practical replacement for fuzzy extractor. Fuzzy <b>embedder</b> naturally supports renewability because it allows a randomly chosen string to be embedded. Fuzzy <b>embedder</b> takes continuous noisy data as input and its performance directly links to the property of the input data. We give a general construction for fuzzy <b>embedder</b> based on the technique of Quantization Index Modulation (QIM) and derive the performance result in relation to that of the underlying QIM. In addition, we show that quantization in 2 -dimensional space is optimal {{from the perspective of the}} length of the embedded string. We also present a concrete construction for fuzzy <b>embedder</b> in 2 -dimensional space and compare its performance with that obtained by the 4 -square tiling method of Linnartz, et al. [13]...|$|E
40|$|WO 2009112183 A 1 UPAB: 20090923 NOVELTY - The <b>embedder</b> (500) has an {{embedding}} parameter-determinator (520) {{applying a}} deviation function (522) to an initial valve (524) and obtaining an embedded parameter (526) to embed an embedded water mark (532) in input information representation (510, 534). A water mark-adder (530) provides the input information representation with the embedded water mark under the embedding parameter, where the <b>embedder</b> frequently applies the deviation function {{to the initial}} valve and obtains the embedding parameter. The embedding parameter-determinator receives an index parameter. DETAILED DESCRIPTION - INDEPENDENT CLAIMS are also included for the following: (1) a detector for detecting water mark in an input information representation, comprising a detection parameter-determinator (2) a method for embedding a water mark in an input information determinator (3) a computer program for executing a method for embedding a water mark in an input information determinator. USE - <b>Embedder</b> i. e. watermark <b>embedder,</b> for embedding a watermark in a representation of input information. ADVANTAGE - The <b>embedder</b> effectively embeds and facilitates the detection of the reusable watermark in the improved presentation of the input information with improved security...|$|E
5000|$|Windows <b>Embedded</b> Industry is {{the brand}} of Windows <b>Embedded</b> {{operating}} systems for industry devices and once only for {{point of sale}} systems. This brand {{was limited to the}} Windows <b>Embedded</b> for Point of Service operating system released in 2006, which is based on Windows XP <b>Embedded.</b> Microsoft also has an updated version of Windows <b>Embedded</b> for Point of service, named Windows <b>embedded</b> POSReady 2009. However, Windows <b>Embedded</b> POSReady 7 based on Windows 7 SP1 was released in 2011 which succeeded POSReady 2009. Microsoft has since changed the name of this product from [...] "Windows <b>Embedded</b> POSReady" [...] to [...] "Windows <b>Embedded</b> Industry". Microsoft released Windows <b>Embedded</b> 8 Industry in April 2013, followed by 8.1 Industry in October 2013.|$|R
40|$|Quantization index {{modulation}} (QIM) is {{a commonly}} used data hiding technique where a single bit is <b>embedded</b> per coefficient. Here, we propose {{the use of}} double <b>embedding</b> in the QIM framework where a single coefficient is modified twice, using two quantizers, to <b>embed</b> two bits. The motivation behind substituting single <b>embedding</b> with double <b>embedding</b> in the QIM framework for a certain steganographic scheme is to increase its hiding rate without significantly increasing the <b>embedding</b> distortion and the stego scheme’s detectability against steganalysis. We empirically determine {{the best way to}} couple the double <b>embedding</b> framework with a repeat accumulate code based error correction scheme. For moderate noise levels, the use of double <b>embedding</b> is seen to be significantly advantageous over single <b>embedding.</b> Index Terms — double <b>embedding,</b> quantization index modulation, repeat-accumulate code, <b>embedding</b> distortion 1...|$|R
40|$|We {{introduce}} a new notion of <b>embedding,</b> called minimumrelaxation ordinal <b>embedding,</b> parallel to the standard notion of minimum-distortion (metric) <b>embedding.</b> In an ordinal <b>embedding,</b> it is the relative order between pairs of distances, and not the distances themselves, that must be preserved as much as possible. The (multiplicative) relaxation of an ordinal <b>embedding</b> is the maximum ratio between two distances whose relative order is inverted by the <b>embedding.</b> We develop several worst-case bounds and approximation algorithms on ordinal <b>embedding.</b> In particular, we establish that ordinal <b>embedding</b> has many qualitative differences from metric <b>embedding,</b> and capture the ordinal behavior of ultrametrics and shortest-path metrics of unweighted trees. ...|$|R
40|$|Physical Unclonable Functions (PUFs) are an {{alternative}} to conventional secure key storage in embedded devices. PUFs exploit unique sub-micron manufacturing variations in each device to generate characteristic responses. Each response is subject to noise, so a so called fuzzy <b>embedder</b> is required to use a PUF for reliable key reproduction. Index-Based Syndrome coding (IBS) is an information theoretically secure fuzzy <b>embedder,</b> introduced in 2010 [1]. This work derives a lower bound for the reliability of IBS-based fuzzy embedders, {{that depends on the}} characteristics of the PUF and the parameters of the fuzzy <b>embedder.</b> In addition, the channel capacity is applied as new criterion for fuzzy <b>embedder</b> evaluation. In this case, the channel capacity determines the maximum key size that can be embedded. The presented measure is complementary to security analysis and thus adds a new dimension for evaluating future encoding schemes for IBS-based fuzzy embedders. A case study dem onstrates the practical impact of the contributions...|$|E
40|$|Abstract Background Graph {{drawing is}} one of the {{important}} techniques for understanding biological regulations in a cell or among cells at the pathway level. Among many available layout algorithms, the spring <b>embedder</b> algorithm is widely used not only for pathway drawing but also for circuit placement and www visualization and so on because of the harmonized appearance of its results. For pathway drawing, location information is essential for its comprehension. However, complex shapes need {{to be taken into account}} when torus-shaped location information such as nuclear inner membrane, nuclear outer membrane, and plasma membrane is considered. Unfortunately, the spring <b>embedder</b> algorithm cannot easily handle such information. In addition, crossings between edges and nodes are usually not considered explicitly. Results We proposed a new grid-layout algorithm based on the spring <b>embedder</b> algorithm that can handle location information and provide layouts with harmonized appearance. In grid-layout algorithms, the mapping of nodes to grid points that minimizes a cost function is searched. By imposing positional constraints on grid points, location information including complex shapes can be easily considered. Our layout algorithm includes the spring <b>embedder</b> cost as a component of the cost function. We further extend the layout algorithm to enable dynamic update of the positions and sizes of compartments at each step. Conclusions The new spring embedder-based grid-layout algorithm and a spring <b>embedder</b> algorithm are applied to three biological pathways; endothelial cell model, Fas-induced apoptosis model, and C. elegans cell fate simulation model. From the positional constraints, all the results of our algorithm satisfy location information, and hence, more comprehensible layouts are obtained as compared to the spring <b>embedder</b> algorithm. From the comparison of the number of crossings, the results of the grid-layout-based algorithm tend to contain more crossings than those of the spring <b>embedder</b> algorithm due to the positional constraints. For a fair comparison, we also apply our proposed method without positional constraints. This comparison shows that these results contain less crossings than those of the spring <b>embedder</b> algorithm. We also compared layouts of the proposed algorithm with and without compartment update and verified that latter can reach better local optima. </p...|$|E
40|$|International audienceThis paper {{deals with}} some {{detection}} issues of watermark signals. We propose {{an easy way}} to implement an informed watermarking <b>embedder</b> whatever the detection function. This method shows that a linear detection function is not suitable for side information. This is the reason why we build a family of non-linear functions named JANIS. Used with a side-informed <b>embedder,</b> its performance is much better than the classical spread spectrum method...|$|E
2500|$|A 1-outerplanar <b>embedding</b> of a graph is {{the same}} as an outerplanar <b>embedding.</b> [...] For k>1 a planar <b>embedding</b> is k-outerplanar if {{removing}} the vertices on the outer face results in a (k1)-outerplanar <b>embedding.</b> [...] A graph is k-outerplanar if it has a k-outerplanar <b>embedding.</b>|$|R
40|$|Abstract. Because {{the absence}} of {{hardware}} support, almost all of <b>embedded</b> operating system are based on SDRAM in past time. With progress of <b>embedded</b> system hardware, <b>embedded</b> system can provide more substrative supports for <b>embedded</b> operating systems. In this paper we present an operating system microkernel for <b>embedded</b> system which can reside in the SRAM on chip. With progress of <b>embedded</b> system hardware, <b>embedded</b> system can provide more substrative supports for <b>embedded</b> operating systems. In this paper we present an operating system microkernel named SRAMOS for <b>embedded</b> system which can reside in the SRAM on chip. This microkernel can {{make the most of}} low power consumption of SRAM. The experiment results show that this microkernel performs better than the traditional <b>embedded</b> operating systems. ...|$|R
25|$|Windows Embedded: Initially, Microsoft {{developed}} Windows CE as a general-purpose {{operating system}} for every device that was too resource-limited {{to be called a}} full-fledged computer. Eventually, however, Windows CE was renamed Windows <b>Embedded</b> Compact and was folded under Windows Compact trademark which also consists of Windows <b>Embedded</b> Industry, Windows <b>Embedded</b> Professional, Windows <b>Embedded</b> Standard, Windows <b>Embedded</b> Handheld and Windows <b>Embedded</b> Automotive.|$|R
40|$|Abstract. Fuzzy {{extractor}} is {{a powerful}} but theoretical tool to extract uniform strings from discrete noisy data. Before {{it can be used}} in practice, many concerns need to be addressed in advance, such as making the extracted strings renewable and dealing with continuous noisy data. We propose a primitive fuzzy <b>embedder</b> as a practical replacement for fuzzy extractor. Fuzzy <b>embedder</b> naturally supports renewability because it allows a randomly chosen string to be embedded. Fuzzy <b>embedder</b> takes continuous noisy data as input and its performance directly links to the property of the input data. We give a general construction for fuzzy embed-der based on the technique of Quantization Index Modulation (QIM) and derive the performance result in relation to that of the underlying QIM. In addition, we show that quantization in 2 -dimensional space is optimal {{from the perspective of the}} length of the embedded string. We also present a concrete construction for fuzzy <b>embedder</b> in 2 -dimensional space and compare its performance with that obtained by the 4 -square tiling method of Linnartz, et al. [13]. ...|$|E
40|$|An {{efficient}} {{biological pathway}} layout algorithm combining grid-layout and spring <b>embedder</b> for complicated cellular location information Kaname Kojima, Masao Nagasaki * and Satoru Miyano Background: Graph drawing {{is one of}} the important techniques for understanding biological regulations in a cell or among cells at the pathway level. Among many available layout algorithms, the spring <b>embedder</b> algorithm is widely used not only for pathway drawing but also for circuit placement and www visualization and so on because of the harmonized appearance of its results. For pathway drawing, location information is essential for its comprehension. However, complex shapes need {{to be taken into account}} when torus-shaped location information such as nuclear inner membrane, nuclear outer membrane, and plasma membrane is considered. Unfortunately, the spring <b>embedder</b> algorithm cannot easily handle such information. In addition, crossings between edges and nodes are usually not considered explicitly. Results: We proposed a new grid-layout algorithm based on the spring <b>embedder</b> algorithm that can handle location information and provide layouts with harmonized appearance. In grid-layout algorithms, the mapping of nodes to gri...|$|E
40|$|Spring {{embedding}} is {{a widely}} used method for producing automated layouts of graphs. We present a preprocessor that improves {{the performance of the}} classical spring <b>embedder</b> which can be used in conjunction with other optimization and approximation techniques. It creates an initial graph layout with edge lengths that are approximately equal and with a minimum node separation from which the spring <b>embedder</b> typically needs far fewer iterations to produce a well laid out graph...|$|E
40|$|A linear time {{algorithm}} is presented that, {{for a given}} graph G, finds an <b>embedding</b> of G in the torus whenever such an <b>embedding</b> exists, or exhibits a subgraphΩ of G of small branch size that cannot be <b>embedded</b> in the torus. 1 Introduction Let K be a subgraph of G, and suppose that we are given an <b>embedding</b> of K in some surface. The <b>embedding</b> extension problem asks whether it is <b>embedding</b> extension problem possible to extend the <b>embedding</b> of K to an <b>embedding</b> of G in the same surface, and any such <b>embedding</b> is an <b>embedding</b> extension of K to G. An <b>embedding</b> extension obstruction for <b>embedding</b> extensions is a subgraphΩ of G Γ E(K) such that obstruction the <b>embedding</b> of K cannot be extended to K [ΩΓ The obstruction is small small if K [Ω is homeomorphic to a graph with {{a small number of}} edges. IfΩ is small, then it is easy to verify (for example, by checking all the possibilities Supported in part by the Ministry of Science and Technolo [...] ...|$|R
40|$|An <b>embedded</b> {{system is}} a hybrid of {{hardware}} and software, which combines software’s flexibility and hardware real-time performance. <b>Embedded</b> systems {{can be considered as}} assemblies of hardware and software components. An Open <b>Embedded</b> System Model (OESM) is currently being developed at NIST to provide a standard representation and exchange protocol for <b>embedded</b> systems and system-level design, simulation, and testing information. This paper proposes an approach to representing an <b>embedded</b> system feature-based model in OESM, i. e., Open <b>Embedded</b> System Feature Model (OESFM), addressing models of <b>embedded</b> system artifacts, <b>embedded</b> system components, <b>embedded</b> system features, and <b>embedded</b> system configuration/assembly. The approach provides an object-oriented UML (Unified Modeling Language) representation for the <b>embedded</b> system feature model and defines an extension to the NIST Core Product Model. The model provides a feature-based component framework allowing the designer to develop a virtual <b>embedded</b> system prototype through assembling virtual components. The framework not only provides a formal precise model of the <b>embedded</b> system prototype but also offers the possibility of designing variation of prototypes whose members are derived by changing certain virtual components with different features. A case study example is discussed to illustrate the <b>embedded</b> system model...|$|R
3000|$|... {{represents}} the (worst) <b>embedding</b> efficiency, that is, {{the number of}} <b>embedded</b> symbols per <b>embedding</b> changes in the worst case. In a similar way, one defines the average <b>embedding</b> efficiency [...]...|$|R
40|$|The {{primary goal}} of image {{steganography}} techniques has been to maximize embedding rate while minimizing the detectability of the resulting stego images against steganalysis techniques. However, one particular advantage of steganography, as opposed to other information hiding techniques, is that the <b>embedder</b> has {{the freedom to choose}} a cover image that results in the least detectable stego image. This resource has largely remained unexploited in the proposed embedding techniques. In this paper, we study the problem of cover selection by investigating three scenarios in which the <b>embedder</b> has either no knowledge, partial knowledge, or full knowledge of the steganalysis technique. For example, we illustrate through experiments how simple statistical measures could help <b>embedder</b> minimize detectability, at times by 65 %, in the partial knowledge case. Index Terms — Steganography, steganalysis, cover selection 1...|$|E
40|$|This paper {{deals with}} some {{detection}} issues of watermark signals. We propose {{an easy way}} to implement an informed watermarking <b>embedder</b> whatever the detection function. This method shows that a linear detection function is not suitable for side information. This is the reason why we build a family of non-linear functions based on n/sup th /-order statistics. Used with a side-informed <b>embedder,</b> its performance is much better than the classical direct sequence spread spectrum method. Anglai...|$|E
40|$|DE 102008014311 A 1 UPAB: 20090928 NOVELTY - The <b>embedder</b> (100) has an {{information}} inserter (130) for providing input-information representation (110) with a watermark (132) and additional {{information that is}} to be inserted to obtain information representation (134). The additional information to be inserted comprises descriptive information describing the embedding of the watermark in the information representation. The <b>embedder</b> provides the input-information representation with the additional information such that the additional information is independent of the watermark inserted in the input-information representation. DETAILED DESCRIPTION - INDEPENDENT CLAIMS are also included for the following: (1) a detector for detecting a watermark in an input-information representation (2) a method for embedding a watermark in an input-information representation (3) a method for detecting a watermark in an input-information representation (4) a computer program for executing a method for embedding a watermark in an input-information representation (5) {{an information}} signal comprising a watermark. USE - <b>Embedder</b> for embedding a watermark in an input-information representation, which represents an information signal such as video signal, audio signal, text signal and computer program signal (all claimed). ADVANTAGE - The <b>embedder</b> improves the embedding of the watermark in the input-information representation in an economical manner...|$|E
50|$|A 1-outerplanar <b>embedding</b> of a graph is {{the same}} as an outerplanar <b>embedding.</b> For k > 1 a planar <b>embedding</b> is k-outerplanar if {{removing}} the vertices on the outer face results in a (k &minus; 1)-outerplanar <b>embedding.</b> A graph is k-outerplanar if it has a k-outerplanar <b>embedding.</b>|$|R
2500|$|... : Windows 7 is also {{currently}} {{available as a}} form of Windows <b>Embedded</b> to developers, named as Windows <b>Embedded</b> Standard 7 (previously known as Windows <b>Embedded</b> 2011, the newest being Windows <b>Embedded</b> Standard 7 with Service Pack 1). Windows <b>Embedded</b> Standard 7 is supported until October 13, 2020.|$|R
30|$|In summary, G 3 can be <b>embedded</b> more secret information, G 2 is the second, and G 1 is <b>embedded</b> less secret information, <b>embedded</b> {{capacity}} G 3 > G 2 > G 1; H 1 and H 3 can be <b>embedded</b> more secret information, and H 2 is <b>embedded</b> less secret information, <b>embedded</b> capacity H 1 > H 2 and H 3 > H 2.|$|R
40|$|A fuzzy {{extractor}} is {{a powerful}} but theoretical tool {{that can be used}} to extract uniform strings from (discrete) noisy sources. However, when using a fuzzy extractor in practice, extra features are needed, such as the renewability of the extracted strings and the ability to use the fuzzy extractor directly on continuous input data instead of discrete data. Our contribution is threefold. Firstly, we propose a fuzzy <b>embedder</b> as a generalization of the fuzzy extractor. A fuzzy <b>embedder</b> naturally supports renewability, as it allows a string to be embedded instead of extracted. It also supports direct analysis of quantization effects, as it makes no limiting assumptions about the nature of the input source. Secondly, we give a general construction for fuzzy embedders based on the technique of quantization index modulation (QIM). We show that the performance measures of a QIM, as proposed by the watermarking community, translate directly to the security properties of the corresponding fuzzy <b>embedder.</b> Finally, we show that from the perspective of the length of the embedded string, quantization in two dimensions is optimal. We present two practical constructions for a fuzzy <b>embedder</b> in two-dimensional space. The first construction is optimal from reliability perspective, and the second construction is optimal in the length of the embedded string...|$|E
40|$|We {{present a}} {{preprocessor}} {{for the spring}} <b>embedder</b> graph drawing method and show its use in speeding up the automatic layout of three-dimensional visualizations of WWW sites. Spring embedding is a widely used method for visualizing the connections in WWW maps, as it can typically produce a reasonable layout for most general graphs. However, the technique does not scale well and to improve the performance when dealing with large graphs various optimisations have been developed. Our preprocessor is a new optimization method that attempts to obtain a reasonably good initial drawing to be then used by the spring <b>embedder.</b> This initial drawing has edge lengths that are approximately equal along with a minimum node separation. This produces a layout that {{is closer to the}} final drawing than a random scattering of nodes and so allows fewer invocations of the spring <b>embedder</b> to produce an equally stable drawing...|$|E
40|$|This paper explores {{techniques}} {{to improve the}} quality of drawings produced by spring <b>embedder</b> algorithms for undirected graphs. Although producing quite acceptable results in general, the spring <b>embedder</b> model only optimizes global aesthetics criteria. The main idea is to combine global and local criteria to produce better results. First, we consider a two-stage approach that uses a spring <b>embedder</b> algorithm to initially produce a reasonable drawing, which may be subsequently improved by interactively specifying and solving graphical constraints. Experiments conducted with this approach shows that both phases may interfere with each other when executed sequentially. An obvious solution to overcome this difficulty is to integrate both phases. This is similar to the proposed integration of declarative and algorithmic approaches in [17]. Here, we use the genetic algorithm paradigm for this purpose. Unlike the similar technique of simulated annealing, our approach is reasonable fast. To ou [...] ...|$|E
40|$|This {{paper is}} {{motivated}} by two essential characteristics of <b>embedded</b> systems: the increasing amount of software that is used for implementing <b>embedded</b> systems {{and the need for}} implementing <b>embedded</b> systems efficiently. As a consequence, <b>embedded</b> software has to be efficient. In the following, we will present techniques for generating efficient machine code for architectures which are typically found in <b>embedded</b> systems. We will demonstrate, using examples, how compilers for <b>embedded</b> processors can exploit features that are found in <b>embedded</b> processors...|$|R
40|$|The main {{objective}} of this work is to develop data <b>embedding</b> technique that not only <b>embeds</b> secret message, {{in the form of}} binary bit stream, to the host image without any auxiliary information or location map, but also extracts that <b>embedded</b> secret message at decoder and restores the original content of host image, which are manipulated after the <b>embedding</b> at encoder. This technique carried out in two phases, <b>embedding</b> and extraction, using min-max approach. This technique reduces extra overhead to <b>embed</b> extra information other than secret message. Keywords Reversible data <b>embedding,</b> non-overlapped block division, location map free <b>embedding,</b> min-max approach. 1...|$|R
40|$|Matrix <b>embedding</b> is {{a general}} coding method {{that can be applied}} to most steganographic schemes to improve their <b>embedding</b> efficiency—the number of message bits <b>embedded</b> per one <b>embedding</b> change. Because smaller number of <b>embedding</b> changes is less likely to disrupt {{statistic}} properties of the cover object, schemes that employ matrix <b>embedding</b> generally have better steganographic security. This gain is more important for long messages than for shorter ones because longer messages are easier to detect. Previously introduced approaches to matrix <b>embedding</b> based on Hamming codes are, however, not efficient for long messages. In this paper, we present novel matrix <b>embedding</b> schemes that are efficient for <b>embedding</b> messages close to the <b>embedding</b> capacity. One is based on a family of codes constructed from simplex codes and the second one on random linear codes of small dimension. The <b>embedding</b> efficiency of the proposed methods is evaluated with respect to theoretically achievable bounds...|$|R
