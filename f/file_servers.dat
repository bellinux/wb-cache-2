433|1163|Public
5|$|Plan 9 is a {{distributed}} operating system, {{designed to}} make a network of heterogeneous and geographically separated computers function as a single system. In a typical Plan 9 installation, users work at terminals running the window system rio, and they access CPU servers which handle computation-intensive processes. Permanent data storage is provided by additional network hosts acting as <b>file</b> <b>servers</b> and archival storage.|$|E
5|$|The {{work done}} on the film to date was nearly lost in 1998 {{when one of the}} animators, while {{routinely}} clearing some files, accidentally started a deletion of the root folder of the Toy Story 2 assets on Pixar's internal servers. Associate technical director Oren Jacobs {{was one of the first}} to notice as character models disappeared from their works in progress. They shut down the <b>file</b> <b>servers</b> but had lost 90% of the last two years of work, and the backups were found to have failed some time previously. The film was saved when technical director Galyn Susman, who had been working from home to take care of her newborn child, revealed she had backups of the assets on her home computer. The Pixar team was able to recover nearly all of the lost assets save for a few recent days of work, allowing the film to proceed.|$|E
25|$|Oracle Secure Enterprise Search (SES), Oracle's enterprise-search offering, gives users {{the ability}} to search for content across {{multiple}} locations, including websites, XML files, <b>file</b> <b>servers,</b> content management systems, enterprise resource planning systems, customer relationship management systems, business intelligence systems, and databases.|$|E
40|$|The {{ability to}} compare the {{performance}} of various NFS 1 <b>file</b> <b>server</b> configurations from several vendors is critically important to a computing facility when selecting an NFS <b>file</b> <b>server.</b> To date, nhfsstone 2 has been a popular means of characterizing NFS <b>file</b> <b>server</b> performance. However, several deficiencies {{have been found in}} nhfsstone. The LADDIS NFS <b>file</b> <b>server</b> benchmark has been developed to resolve nhfsstone's shortcomings and provide new functionality. The Standard Performance Evaluation Corporation (SPEC 3) released the System <b>File</b> <b>Server</b> (SFS) Release 1. 0 benchmark suite, which contains 097. LADDIS, as an industry-standard <b>file</b> <b>server</b> benchmark in April 1993. This paper describes the major technical issues involved in developing the benchmark and the rationale used to establish default 097. LADDIS workload parameter values. Where appropriate, areas for further research are identified and encouraged. Permission has been granted by the USENIX Association to reprint the above [...] ...|$|R
5000|$|Andrew Tridgell - Creator of and {{contributor}} to the Samba software <b>file</b> <b>server</b> for linking Windows clients and Unix <b>file</b> <b>server</b> systems, and co-inventor of the rsync algorithm ...|$|R
40|$|We {{report the}} case which applied {{security}} requirements engineering to a <b>file</b> <b>server</b> design. The function necessary to a <b>file</b> <b>server</b> is analyzed {{using one of}} analysis methods, Secure Tropos. Two kinds of <b>file</b> <b>server</b> are built actually using Open Source Software such as FreeBSD+Samba and FreeNAS. We confirm {{the validity of the}} analysis method through the present server building...|$|R
500|$|Resilient File System (ReFS), codenamed [...] "Protogon", {{is a new}} {{file system}} in Windows Server 2012 {{initially}} intended for <b>file</b> <b>servers</b> that improves on NTFS in some respects. Major new features of ReFS include: ...|$|E
50|$|Users can {{authenticate}} through Microsoft Active Directory or any LDAP or CAS server. Support {{for additional}} authentication mechanisms, including single sign-on, {{can be implemented}} using an open API. Ulteo includes a dedicated file server into which other <b>file</b> <b>servers</b> (such as CIFS/Samba/Windows <b>file</b> <b>servers)</b> can be integrated as backends.|$|E
50|$|On May 23, 2011, GroupLogic {{announced}} mobilEcho (mE), mobile {{file management}} software for iPad and subsequently for the iPhone. mobilEcho allows user to access files on corporate <b>file</b> <b>servers.</b> mobilEcho is managed by Active Directory. mobilEcho operates on corporate <b>file</b> <b>servers</b> {{under the control}} of IT departments and the client operates on iPhones and iPads. mobilEcho allows for the storage and secure transfer of files back and forth directly between <b>file</b> <b>servers</b> and iPhones and iPads.1 Also, mobilEcho is the iOS client for GroupLogic's enterprise file sharing and synching solution, activEcho.|$|E
50|$|A <b>file</b> <b>server</b> may be {{dedicated}} or non-dedicated. A dedicated server is {{designed specifically for}} use as a <b>file</b> <b>server,</b> with workstations attached for reading and writing files and databases.|$|R
50|$|In NLTSS {{the process}} server was {{quite similar to}} the <b>file</b> <b>server</b> in that user {{processes}} could ask {{for the creation of}} processes, the starting or stopping of processes, reading or writing process memory or registers, and to be notified of process faults. The process server was an ordinary user mode process that was simply trusted to communicate with the CPU driver, just like the <b>file</b> <b>server</b> was trusted to communicate with the disk driver. The process server stored process state in files provided by the <b>file</b> <b>server</b> and in that regard appeared like any other user process to the <b>file</b> <b>server.</b>|$|R
50|$|When {{designing}} the remote <b>file</b> <b>server</b> client for each conceptual interface {{you have to}} ask yourself the level of service your high level modules require (not necessary all of them) and not only how to implement the remote <b>file</b> <b>server</b> functionalities but maybe how to make the file services in your application compatibles between already implemented file services (local files, existing cloud clients) and your new remote <b>file</b> <b>server</b> client.|$|R
50|$|DCC Server also {{supports}} mIRC-style <b>file</b> <b>servers</b> and DCC GET.|$|E
5000|$|File Server Resource Manager, for {{managing}} disk quotas on <b>file</b> <b>servers</b> ...|$|E
5000|$|Clients {{can include}} {{database}} servers, application servers, <b>file</b> <b>servers,</b> and individual workstations.|$|E
25|$|Some file {{managers}} provide {{network connectivity}} via protocols, such as FTP, NFS, SMB or WebDAV. This {{is achieved by}} allowing the user to browse for a <b>file</b> <b>server</b> (connecting and accessing the <b>server's</b> <b>file</b> system like a local file system) or by providing its own full client implementations for <b>file</b> <b>server</b> protocols.|$|R
5000|$|Any {{process could}} make {{requests}} to the <b>file</b> <b>server</b> {{for the creation}} of files (returning a file capability), ask to read or write files (by presenting a file capability), etc. For example, the act of reading a file generally required three buffer tables, one to send the request to the <b>file</b> <b>server,</b> one to receive the reply from the <b>file</b> <b>server,</b> and one to receive the data from the file. These three requests were generally submitted at one time to the message system, sometimes bundled with other requests. Control bits could be set in the buffer tables to awaken (unblock) a process whenever any of the buffer tables submitted were marked [...] "Done". A library call to read a file would typically block until the control reply was received from the <b>file</b> <b>server,</b> though asynchronous I/O would of course not block and could check or block later. Any such differences on the user side were invisible to the <b>file</b> <b>server.</b>|$|R
40|$|Sandia National Laboratories {{provides}} a high performance classified computer network as a core capability {{in support of}} its mission of nuclear weapons design and engineering, physical sciences research, and energy research and development. The network, locally known as the Internal Secure Network (ISN), comprises multiple distributed local area networks (LAN's) residing in New Mexico and California. The TCP/IP protocol suite is used for inter-node communications. Scientific workstations and mid-range computers, running UNIX-based operating systems, compose most LAN's. One LAN, operated by the Sandia Corporate Computing Computing Directorate, is a general purpose resource providing a supercomputer and a <b>file</b> <b>server</b> to the entire ISN. The current <b>file</b> <b>server</b> on the supercomputer LAN is an implementation of the Common <b>File</b> <b>Server</b> (CFS). Subsequent {{to the design of}} the ISN, Sandia reviewed its mass storage requirements and chose to enter into a competitive procurement to replace the existing <b>file</b> <b>server</b> with one more adaptable to a UNIX/TCP/IP environment. The requirements study for the network was the starting point for the requirements study for the new <b>file</b> <b>server.</b> The <b>file</b> <b>server</b> is called the Network Storage Service (NSS) and its requirements are described. An application or functional description of the NSS is given. The final section adds performance, capacity, and access constraints to the requirements...|$|R
5000|$|... #Caption: IBM RS/6000 AIX <b>file</b> <b>servers</b> {{used for}} ibm.com in the 1990s ...|$|E
5000|$|Many of Plan 9's {{applications}} {{take the}} form of 9P <b>file</b> <b>servers.</b> Examples include: ...|$|E
50|$|<b>File</b> <b>servers</b> {{may also}} be {{categorized}} by the method of access: Internet <b>file</b> <b>servers</b> are frequently accessed by File Transfer Protocol (FTP) or by HTTP (but are different from web servers, that often provide dynamic web content in addition to static files). Servers on a LAN are usually accessed by SMB/CIFS protocol (Windows and Unix-like) or NFS protocol (Unix-like systems).|$|E
5000|$|... #Caption: Raima Database Manager Transactional <b>File</b> <b>Server</b> Operation ...|$|R
50|$|Ulteo OVD {{includes}} an optional <b>file</b> <b>server</b> to host user profiles or shared folders, ensuring user {{access to the}} same files when using applications from different servers. As of version 4.0, only a Linux version is available. The <b>File</b> <b>Server</b> may be installed on an Application <b>Server.</b> Without a <b>file</b> <b>server,</b> shares can still be mounted using the mechanisms of the operating system, but these shares may not be available on all application servers or application server platforms, and cannot be accessed from the Web Client's AjaXplorer component.|$|R
5000|$|Dedicated <b>file</b> <b>server</b> that {{provides}} group-level and user-level file security ...|$|R
5000|$|ARINC 821 is a {{top-level}} networking definition describing aircraft domains, <b>file</b> <b>servers</b> {{and other}} infrastructure.|$|E
5000|$|The Age of Intelligent Machines: Knowledge Processing--From <b>File</b> <b>Servers</b> to Knowledge Servers by Edward Feigenbaum ...|$|E
5000|$|ARINC 834 defines an {{aircraft}} data interface that sources data to Electronic Flight Bags, airborne <b>file</b> <b>servers,</b> etc.|$|E
50|$|Consider {{the case}} where a client {{application}} wishes to read a file. Normally this would require one message to the kernel to find the <b>file</b> <b>server,</b> then three additional messages to the <b>file</b> <b>server</b> itself - one to resolve the file name into an object id, another to open that id, then finally another to read the file. Using Vanguard's chaining, a single message could be constructed by the client that contained all of these requests. The message {{would be sent to}} the kernel, and then passed off to the <b>file</b> <b>server</b> who would handle all three requests before finally returning data.|$|R
5000|$|In large {{enterprise}} networks, a centralized <b>file</b> <b>server</b> or print server, sometimes denoted client-server paradigm, is typically used. A client process {{on the local}} user computer takes the initiative to start the communication, while a server process on the <b>file</b> <b>server</b> or print server remote computer passively waits for requests to start a communication session ...|$|R
5000|$|Minerva is {{the name}} of the main <b>file</b> <b>server</b> at Keystone College ...|$|R
5000|$|... 2010 - RDM Embedded 10.0 : Multi-core {{computer}} support using Transactional <b>File</b> <b>Servers</b> with high-performance, MVCC-based read-only transactions.|$|E
50|$|<b>File</b> <b>servers</b> are {{commonly}} found in schools and offices, where users use a LAN to connect their client computers.|$|E
50|$|Common {{applications}} {{of very high}} number of connections include pub/sub servers, chat, <b>file</b> <b>servers,</b> web servers, and software-defined networking.|$|E
40|$|Abstract—In this paper, we {{analyze the}} delay {{incurred}} by session-based {{traffic in the}} output buffer of a <b>file</b> <b>server.</b> Users can start and end sessions during which they are active and download information from the <b>file</b> <b>server.</b> Per time slot, each active user downloads a random but strictly positive number of information packets. Each session lasts for a random, yet again, strictly positive number of slots. We model the <b>file</b> <b>server</b> output buffer as a discrete-time infinite-capacity queueing system and we present an analytical technique to study the queueing delay for sessions {{in case of a}} general session-length distribution. The analysis method is based on the combination of a generating-functions approach with the use of an infinite-dimensional state description. As a result, a closed-form expression for the mean session delay is obtained. The analysis is illustrated with a numerical example, based on real traces of <b>file</b> <b>server</b> traffic. I...|$|R
40|$|The {{standard}} method of transferring files from a <b>file</b> <b>server</b> to {{clients in the}} Internet is through TCP connections. The whole file is transferred separately to each client via a unicast connection. It often happens that clients are downloading the same file concurrently within a certain time interval. During this interval, the server transfers multiple copies of the same data. This creates redundant data transfers in the network. In this thesis we present the CacheCast <b>file</b> <b>server,</b> which removes these redundant data transfers by utilizing the newly developed CacheCast mechanism. This mechanism removes redundancy from single source multiple destination transfers. In order {{to benefit from the}} CacheCast mechanism, the same data chunk must be transferred to multiple clients within a short time frame. CacheCast caches payloads on routers in the network, such that equal payloads are transferred only once over each link. In a live streaming system, all clients consuming the same video or voice stream are receiving the same data synchronously. Thus, live streaming systems can greatly benefit from CacheCast. In a <b>file</b> <b>server,</b> the clients are not synchronized per se. CacheCast support in a <b>file</b> <b>server</b> therefore requires a special system design. The key idea in the CacheCast <b>file</b> <b>server</b> is to reorder the file blocks before transmission, such that the same file block is transferred to multiple clients. CacheCast is then able to remove the redundant data transfers. This thesis includes the design, implementation and evaluation of the CacheCast <b>file</b> <b>server.</b> The system is implemented in the ns- 3 network simulator, in order to perform experiments in a network with dozens of clients. Three major aspects of the system are evaluated, namely the effects on the bandwidth consumption in the network, the impact on the download time experienced by the clients, and the fairness among concurrently connected clients. The performance of the CacheCast <b>file</b> <b>server</b> is compared against the performance of an FTP server. The evaluation has revealed that the CacheCast <b>file</b> <b>server</b> performs significantly better than an FTP server, which transfers the files using TCP. It delivers the files faster to the receivers, and reduces the total bandwidth consumption in the network. In our experiments, the download time is reduced by a factor of 10 and the bandwidth consumed is 89 % less then when using an FTP server. These performance gains are attributed to the CacheCast support in the <b>file</b> <b>server.</b> The evaluation also shows that the CacheCast <b>file</b> <b>server</b> ensures fairness among competing clients...|$|R
50|$|A single-backup image {{repurposed}} to protect/recover <b>files,</b> <b>servers</b> and applications, including VMware environments.|$|R
