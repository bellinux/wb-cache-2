536|3407|Public
25|$|Slew {{rate limit}} error, {{caused by the}} {{inability}} of the ADC <b>input</b> <b>value</b> to change sufficiently rapidly.|$|E
25|$|Possible {{values for}} a total computable {{function}} f arranged in a 2D array. The orange cells are the diagonal. The values of f(i,i) and g(i) are shown at the bottom; U indicates that the function g is undefined for a particular <b>input</b> <b>value.</b>|$|E
25|$|Salt {{concentrations}} of outgoing water (either from one reservoir {{into the other}} or by subsurface drainage) are computed {{on the basis of}} salt balances, using different leaching or salt mixing efficiencies to be given with the input data. The effects of different leaching efficiencies can be simulated by varying their <b>input</b> <b>value.</b>|$|E
50|$|The {{idea that}} the output of a {{function}} at any time depends only on past and present <b>values</b> of <b>input</b> {{is defined by the}} property commonly referred to as causality. A system that has some dependence on <b>input</b> <b>values</b> from the future (in addition to possible dependence on past or current <b>input</b> <b>values)</b> is termed a non-causal or acausal system, and a system that depends solely on future <b>input</b> <b>values</b> is an anticausal system. Note that some authors have defined an anticausal system as one that depends solely on future and present <b>input</b> <b>values</b> or, more simply, as a system that does not depend on past <b>input</b> <b>values.</b>|$|R
50|$|An anticausal {{system is}} a {{hypothetical}} system with outputs and internal states that depend solely on future <b>input</b> <b>values.</b> Some textbooks and published research literature might define an anticausal system to be {{one that does not}} depend on past <b>input</b> <b>values,</b> allowing also for the dependence on present <b>input</b> <b>values.</b>|$|R
3000|$|... {{from the}} {{remaining}} data points; find {{a pair of}} previously selected data points whose <b>input</b> <b>values</b> encompass the <b>input</b> <b>values</b> of C [...]...|$|R
25|$|A {{function}} can {{be defined}} by any mathematical condition relating each argument (<b>input</b> <b>value)</b> to the corresponding output value. If the domain is finite, a function f may be defined by simply tabulating all the arguments x and their corresponding function values f(x). More commonly, a function is defined by a formula, or (more generally) an algorithm — a recipe that tells how to compute the value of f(x) given any x in the domain.|$|E
500|$|The {{derivative}} of {{a function of}} a single variable at a chosen <b>input</b> <b>value,</b> when it exists, is {{the slope of the}} tangent line to the graph of the function at that point. The tangent line is the best linear approximation of the function near that <b>input</b> <b>value.</b> [...] For this reason, the derivative is often described as the [...] "instantaneous rate of change", the ratio of the instantaneous change in the dependent variable to that of the independent variable.|$|E
500|$|The {{derivative}} of {{a function of}} a real variable measures the sensitivity to change of the function value (output value) {{with respect to a}} change in its argument (<b>input</b> <b>value).</b> Derivatives are a fundamental tool of calculus. [...] For example, the {{derivative of}} the position of a moving object with respect to time is the object's velocity: this measures how quickly the position of the object changes when time advances.|$|E
50|$|A {{causal system}} is a system with output and {{internal}} states that depends only on the current and previous <b>input</b> <b>values.</b> A system that has some dependence on <b>input</b> <b>values</b> from the future (in addition to possible past or current <b>input</b> <b>values)</b> is termed an acausal system, and a system that depends solely on future <b>input</b> <b>values</b> is an anticausal system. Acausal filters, for example, can only exist as postprocessing filters, because these filters can extract future values from a memory buffer or a file.|$|R
5000|$|An acausal {{system is}} a system that is not a causal system, that is one that depends on some future <b>input</b> <b>values</b> and {{possibly}} on some <b>input</b> <b>values</b> from the past or present. This is in contrast to a causal system which depends only on current and/or past <b>input</b> <b>values.</b> [...] This is often a topic of control theory and digital signal processing (DSP).|$|R
50|$|In {{mathematics}} or logic, a finitary {{operation is}} {{an operation that}} takes {{a finite number of}} <b>input</b> <b>values</b> to produce an output, like those of arithmetic. Operations on infinite numbers of <b>input</b> <b>values</b> are called infinitary.|$|R
500|$|For {{planning}} and monitoring of inert gas absorption using decompression tables, the data usually {{consists of the}} maximum depth reached during the dive, the bottom time {{as defined by the}} dive table in use and the length of time underwater (total dive time). [...] For repetitive dives it also includes the [...] "surface interval" [...] – the time spent above the water between the previous dive and the start of the next dive. [...] This information is used to estimate the levels of residual inert gas build-up in the diver's tissues during and after completing a dive or series of dives. Residual gas is often expressed as [...] "repetitive group", which is an important <b>input</b> <b>value</b> for planning the decompression for the next dive when using tables. A more detailed and extensive set of residual gas data is stored in the memory of a dive computer, and automatically applied as initial conditions to subsequent dives.|$|E
2500|$|The input {{variables}} in a fuzzy control system are in general mapped by sets of membership functions similar to this, known as [...] "fuzzy sets". The process of converting a crisp <b>input</b> <b>value</b> to a fuzzy value is called [...] "fuzzification".|$|E
2500|$|The primary {{objects of}} study in {{differential}} calculus are the derivative of a function, related notions such as the differential, and their applications. The derivative of a function at a chosen <b>input</b> <b>value</b> describes {{the rate of change}} of the function near that <b>input</b> <b>value.</b> [...] The process of finding a derivative is called differentiation. Geometrically, the derivative at a point is the slope of the tangent line to the graph of the function at that point, provided that the derivative exists and is defined at that point. For a real-valued function of a single real variable, the derivative of a function at a point generally determines the best linear approximation to the function at that point.|$|E
5000|$|An {{example of}} acausal signal {{processing}} is {{the production of}} an output signal that is processed from another input signal that is recorded by looking at <b>input</b> <b>values</b> both forward and backward in time from a predefined time arbitrarily denoted as the [...] "present" [...] time. (In reality, that [...] "present" [...] time input, {{as well as the}} [...] "future" [...] time <b>input</b> <b>values,</b> have been recorded at some time in the past, but conceptually it can be called the [...] "present" [...] or [...] "future" [...] <b>input</b> <b>values</b> in this acausal process.) This type of processing cannot be done in real time as future <b>input</b> <b>values</b> are not yet known, but is done after the input signal has been recorded and is post-processed.|$|R
50|$|In other words, {{these are}} hash {{functions}} where the relative {{distance between the}} <b>input</b> <b>values</b> is preserved in the relative distance between of the output hash values; <b>input</b> <b>values</b> that are closer to each other will produce output hash values that are closer to each other.|$|R
5000|$|Coil/discrete <b>input</b> <b>values</b> (8 coils/discrete <b>inputs</b> per byte) ...|$|R
2500|$|An {{arbitrary}} static threshold {{might be}} set to divide [...] "warm" [...] from [...] "hot". For example, at exactly 90 degrees, warm ends and hot begins. But this {{would result in a}} discontinuous change when the <b>input</b> <b>value</b> passed over that threshold. The transition wouldn't be smooth, as would be required in braking situations.|$|E
2500|$|The {{most common}} shape of {{membership}} functions is triangular, although trapezoidal and bell curves are also used, but the shape is generally {{less important than}} the number of curves and their placement. From three to seven curves are generally appropriate to cover the required range of an <b>input</b> <b>value,</b> or the [...] "universe of discourse" [...] in fuzzy jargon.|$|E
2500|$|As [...] describes, {{the time}} for finding the {{fundamental}} solution using the continued fraction method, {{with the aid of}} the Schönhage–Strassen algorithm for fast integer multiplication, is within a logarithmic factor of the solution size, the number of digits in the pair (x1,y1). However, this is not a polynomial time algorithm because the number of digits in the solution may be as large as √n, far larger than a polynomial in the number of digits in the <b>input</b> <b>value</b> n [...]|$|E
30|$|User-Input Actions: Regarding {{the actions}} that include <b>input</b> <b>values</b> from users, we have made the {{following}} assumptions; first, {{it is assumed that}} the <b>input</b> <b>values</b> passed into the generated requests are not encoded in a non-standard way; otherwise, the session reconstruction tool cannot recover the actual values entered by the user; the second assumption is regarding the domain of user-input values. It is assumed that the tool can produce acceptable values for a user-input action, using some preset libraries of possible inputs. This is necessary to be able to automatically <b>input</b> <b>values</b> that will not be blocked by client-side validation. Note that {{this does not mean that}} the tool should somehow guess the correct user <b>inputs</b> <b>values.</b> These values will be found in the log. Instead the tool should be able to provide some inputs that will be usable to continue with the session.|$|R
50|$|In the example, a NAND gate {{has been}} shown, {{the set of}} all <b>input</b> <b>values</b> that can test output's SA0 is {00,01,10}. the set of all <b>input</b> <b>values</b> that can check first input's SA1 is {01}. In this case, output SA0 fault is {{dominant}} and can be removed from fault list.|$|R
5000|$|Acceptable and {{unacceptable}} <b>input</b> <b>values</b> or types, {{and their}} meanings ...|$|R
2500|$|In {{the fourth}} example expression, a {{pipeline}} that chains together two safe divisions, {{the result of}} the first division is , which is fed as the <b>input</b> <b>value</b> to the second [...] "" [...] operator; therefore the result is [...] as well. Notice how the definition of the [...] "" [...] operator doesn't need to check whether any of its input values is , as the bind operator of the Maybe monad already handles this concern: by definition of bind, when either the x or the y monadic parameters are [...] (instead of matching the pattern Just value), the [...] "" [...] expression is not evaluated.|$|E
2500|$|A {{key element}} of the Swift system {{is its ability to}} be cleanly {{debugged}} and run within the development environment, using a read–eval–print loop (REPL), giving it interactive properties more in common with the scripting abilities of Python than traditional system programming languages. The REPL is further enhanced with the new concept playgrounds. These are interactive views running within the Xcode environment that respond to code or debugger changes on-the-fly. Playgrounds allow programmers to add in Swift code along with markdown documentation. If some code changes over time or with regard to some other ranged <b>input</b> <b>value,</b> the view can be used with the Timeline Assistant to demonstrate the output in an animated way. In addition, Xcode has debugging features for Swift development including breakpoints, step through and step over statements, as well as UI element placement breakdowns for app developers.|$|E
5000|$|In mathematics, a {{constant}} function {{is a function}} whose (output) value {{is the same for}} every <b>input</b> <b>value.</b> For example, the function [...] is {{a constant}} function because the value of [...] is 4 regardless of the <b>input</b> <b>value</b> [...] (see image).|$|E
5000|$|Number of bytes of coil/discrete <b>input</b> <b>values</b> {{to follow}} (8-bit) ...|$|R
5000|$|... {{selecting}} <b>input</b> <b>values</b> for text search inputs that accept keywords, ...|$|R
40|$|Abstract. This paper {{presents}} {{a technique that}} uses code to automatically generate its own test cases at run-time by {{using a combination of}} symbolic and concrete (i. e., regular) execution. The <b>input</b> <b>values</b> to a program (or software component) provide the standard interface of any testing framework with the program it is testing, and generating <b>input</b> <b>values</b> that will explore all the “interesting ” behavior in the tested program remains an important open problem in software testing research. Our approach works by turning the problem on its head: we lazily generate, from within the program itself, the <b>input</b> <b>values</b> to the program (and <b>values</b> derived from <b>input</b> <b>values)</b> as needed. We applied the technique to real code and found numerous corner-case errors ranging from simple memory overflows and infinite loops to subtle issues in the interpretation of language standards. ...|$|R
5000|$|A BCD to decimal decoder has ten output bits. It accepts an <b>input</b> <b>value</b> {{consisting}} of a binary-coded decimal integer value and activates one specific, unique output for every <b>input</b> <b>value</b> in the range 0,9. All outputs are held inactive when a non-decimal value {{is applied to the}} inputs.|$|E
50|$|Every {{calculation}} made {{may reduce}} the size of value sets by removing dependent worlds, but add a new value set whose size is the product of the sizes of the <b>input</b> <b>value</b> sets. Then calculations should proceed first where the product of the sizes of the <b>input</b> <b>value</b> sets is smallest.|$|E
5000|$|The raw {{material}} {{value of a}} unit before production (<b>input</b> <b>value).</b>|$|E
2500|$|Calculates a two's {{complement}} integer {{from the}} given <b>input</b> <b>value's</b> bits ...|$|R
5000|$|<b>Input</b> <b>values</b> {{can often}} be used as IRQs (typically for wakeup events) ...|$|R
40|$|Abstract- Peculiarities of the {{expression}} of uncertainty estimation with correlation or covariance of <b>input</b> <b>values,</b> using parameters of correlation and covariance in international metrological and environmental guides are shown. The use of international metrological guidance of expression of measurements uncertainty with correlation or covariance of <b>input</b> <b>values</b> in development of new and reconsideration of old international environmental guides is recommended. I...|$|R
