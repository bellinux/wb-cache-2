1222|8196|Public
25|$|ARPANET, the {{predecessor}} of the Internet, {{was introduced in}} the late 1960s, and ARPANET e-mail was invented in the early 1970s. E-mail became the most successful application of ARPANET, and it is probably the earliest example of a large-scale <b>distributed</b> <b>application.</b> In addition to ARPANET, and its successor, the Internet, other early worldwide computer networks included Usenet and FidoNet from the 1980s, both of which were used to support distributed discussion systems.|$|E
25|$|Users access Virtual Cell as a <b>distributed</b> <b>application</b> {{over the}} Internet. The web-based Java {{interface}} {{allows users to}} build complex models in biologically relevant terms: compartment dimensions and shape, molecular characteristics, and interaction parameters. VCell converts the biological description into an equivalent mathematical system of differential equations. Users can switch back-and-forth between the schematic biological view and the mathematical view in the common graphical interface. Indeed, if users desire, they can manipulate the mathematical description directly, bypassing the schematic view. VCell allows users a choice of numerical solvers to translate the mathematical description into software code which is executed to perform the simulations. The results can be displayed on-line, or they can be downloaded to the user's computer {{in a wide variety}} of export formats. The Virtual Cell license allows free access to all members of the scientific community.|$|E
5000|$|<b>Distributed</b> <b>Application</b> Process (DAP). The {{instantiation}} of {{a computer}} program executing in a processing system intended to accomplish some purpose. A <b>Distributed</b> <b>Application</b> Process contains one or more tasks or Application-Entities, as well as functions for managing the resources (processor, storage, and IPC) allocated to this DAP.|$|E
40|$|In this paper, {{we present}} the {{characteristic}} features of <b>distributed</b> <b>applications.</b> We also enumerate the modalities of optimizing {{them and the}} factors that influence the quality of <b>distributed</b> <b>applications,</b> as well as the way they are affected by the optimization processes. Moreover, we enumerate the quality characteristics of <b>distributed</b> <b>applications</b> and a series of evaluation’s indicators of quality for varied structures of <b>distributed</b> <b>applications...</b>|$|R
40|$|CPI-C: An API for <b>distributed</b> <b>applications</b> <b>Distributed</b> <b>applications</b> have {{fostered the}} {{standardization}} of application programming interfaces for the underlying communication services. Three popular communication modelsremote procedure calls, messaging and queuing, and conversations-support <b>distributed</b> <b>applications</b> across different networking protocols and physical media. Access to the conversational services of Advanced Programto-Progra...|$|R
40|$|Today’s <b>distributed</b> <b>applications</b> {{are built}} using {{processes}} and therefore are {{only able to}} rely on process-level protection domains. In this paper we argue that process-level protection domains are insufficient for <b>distributed</b> <b>applications</b> and propose job-level protection domains as a new high-level building block for <b>distributed</b> <b>applications.</b> We present a network interface architecture called the Network Management Unit (NMU) and show that it efficiently implements job-level protection domains and argue that this allows programmers to productively develop reliable high-performance <b>distributed</b> <b>applications.</b> ...|$|R
5000|$|Define {{deployments}} {{of their}} complex multi-tier <b>distributed</b> <b>application</b> ...|$|E
5000|$|... #Subtitle level 3: <b>Distributed</b> <b>application</b> {{and system}} {{designer}} integration ...|$|E
5000|$|... #Caption: Figure 2. <b>Distributed</b> <b>Application</b> Processes (DAPs) {{and their}} {{components}} ...|$|E
40|$|The authors’ aim is {{to develop}} {{application}} software for building stable <b>distributed</b> <b>applications.</b> The objectives are to identify main issues in building <b>distributed</b> <b>applications</b> and to suggest effective methods to solve these problems. The proposed solution {{can be used in}} building <b>distributed</b> <b>applications</b> and it will allow to significantly reduce the time spent on supporting infrastructure code in such applications...|$|R
40|$|One of {{the most}} {{difficult}} aspects of <b>distributed</b> <b>applications</b> is coordination description. This work aims at the introduction of a graph-based technique for the design and implementation of coordination for collaborative component-oriented <b>distributed</b> <b>applications.</b> For this purpose the CCGraph formalism is defined and used within the CCC model to design and implement rule-oriented coordination protocols. Copyright Kluwer Academic Publishers 2000 coordination, graph grammars, object-oriented programming, <b>distributed</b> <b>applications,...</b>|$|R
40|$|<b>Distributed</b> <b>applications</b> are {{notoriously}} difficult {{to develop and}} manage due to their inherent dynamics and heterogeneity of component technologies and network protocols. Middleware technologies dramatically simplify the development of <b>distributed</b> <b>applications,</b> but they still prove difficult to manage at runtime. This paper considers the “on-going ” development of a framework that provides instrumentation and control services, which extend core middleware services, to realize the runtime management and adaptation of <b>distributed</b> <b>applications.</b> The instrumentation and control services are {{used in conjunction with}} dependency management utilities to measure performance, monitor behaviour and resolve the runtime inconsistencies and conflicts that may occur in <b>distributed</b> <b>applications...</b>|$|R
5000|$|ISO/IEC JTC 1/SC 38, <b>Distributed</b> <b>Application</b> Platform & Services (DAPS) ...|$|E
5000|$|ISO/IEC JTC 1/SC 38, <b>Distributed</b> <b>application</b> {{platforms}} & services (DAPS) ...|$|E
5000|$|ISO/IEC JTC 1/SC 38, <b>Distributed</b> <b>Application</b> Platforms and Services (DAPS) ...|$|E
40|$|It is {{generally}} accepted {{that the ability}} to develop large-scale <b>distributed</b> <b>applications</b> has lagged seriously behind other developments in cyberinfrastructure. In this paper, we provide insight into how such applications have been developed and an understanding of why developing <b>applications</b> for <b>distributed</b> infrastructure is hard. Our approach is unique {{in the sense that it}} is centered around half a dozen existing scientific applications; we posit that these scientific applications are representative of the characteristics, requirements, as well as the challenges of the bulk of current <b>distributed</b> <b>applications</b> on production cyberinfrastructure (such as the US TeraGrid). We provide a novel and comprehensive analysis of such <b>distributed</b> scientific <b>applications.</b> Specifically, we survey existing models and methods for large-scale <b>distributed</b> <b>applications</b> and identify commonalities, recurring structures, patterns and abstractions. We find that there are many ad hoc solutions employed to develop and execute <b>distributed</b> <b>applications,</b> which result in a lack of generality and the inability of <b>distributed</b> <b>applications</b> to be extensible and independent of infrastructure details. In our analysis, we introduce the notion of application vectors: a novel way of understanding the structure of <b>distributed</b> <b>applications.</b> Important contributions of this paper include identifying patterns that are derived from a wide range of real <b>distributed</b> <b>applications,</b> as well as an integrated approach to analyzing applications, programming systems and patterns, resulting in the ability to provide a critical assessment of the current practice of developing, deploying and executing <b>distributed</b> <b>applications.</b> Gaps and omissions in the state of the art are identified, and directions for future research are outlined...|$|R
40|$|Distributed object {{computing}} (DOC) middleware shields developers {{from many}} tedious and error-prone aspects of programming <b>distributed</b> <b>applications.</b> Without proper {{support from the}} middleware, however, {{it can be hard}} to evolve <b>distributed</b> <b>applications</b> after they are deployed. Therefore, DOC middleware should support meta-programming mechanisms, such as smart proxies and interceptors, that improve the adaptability of <b>distributed</b> <b>applications</b> by allowing their behavior to be modified without changing existing software drastically...|$|R
40|$|A {{multimedia}} news application, {{an example}} of a <b>distributed</b> multimedia <b>application,</b> is described. It is explained how this type of applications benefit from advanced communication services, which provides multireception and the capability to deal with high data rates. Connection and resource management issues that are main concerns in such applications and communication services are outlined. 1. 0 Introduction In recent years, <b>distributed</b> <b>applications</b> such as FTP, gopher, file servers, e-mail, usenet news and WWW browsers have become widely used (and mainly textbased) tools. These <b>distributed</b> <b>applications</b> rely heavily on the availability of communication services. A wide variety of communication services and protocols have been developed to support such <b>distributed</b> <b>applications</b> Future <b>distributed</b> <b>applications</b> will likely use video, audio, and textual data (hence: <b>distributed</b> multimedia <b>applications).</b> Such applications require communication support functions that can deal with higher ban [...] ...|$|R
5000|$|... #Caption: GNU Image Manipulation Program (GIMP), version 2.6, a freely <b>distributed</b> <b>application</b> ...|$|E
5000|$|Resource Information Base (RIB). For the DAF, the RIB is {{the logical}} {{representation}} of the local repository of the objects. Each member of the DAF maintains a RIB. A <b>Distributed</b> <b>Application</b> may define a RIB to be its local representation of its view of the <b>distributed</b> <b>application.</b> From {{the point of view}} of the OS model, this is storage.|$|E
5000|$|Peer-to-peer, a {{computing}} or networking <b>distributed</b> <b>application</b> {{architecture that}} partitions tasks or workloads among peers ...|$|E
40|$|<b>Distributed</b> <b>applications</b> are {{notoriously}} difficult {{to develop and}} manage due to their inherent dynamics and heterogeneity of component technologies and network protocols. Middleware technologies dramatically simplify the development of <b>distributed</b> <b>applications,</b> but they still prove difficult to manage at runtime...|$|R
40|$|Group {{communication}} {{has been}} proved as an effective abstraction for constructing reliable <b>distributed</b> <b>applications</b> [5]. Traditional group communication systems [4, 5, 6, 7, 8] are based on static processes. However, static processes {{are no longer the}} unique way of structuring <b>distributed</b> <b>applications.</b> Currently, some form of migrating process, i. e., a process that can change its location in the environment during its execution, is being frequently proposed as a basic component for designing <b>distributed</b> <b>applications.</b> Similarl...|$|R
40|$|Highly {{distributed}} {{networks have}} now become a common infrastructure for {{a new kind of}} wide-area <b>distributed</b> <b>applications</b> whose key design principle is network awareness, namely the ability of dealing with dynamic changes of the network environment. Network-aware computing has called for new programming languages that exploit the mobility paradigm as a basic interaction mechanism. In this paper we present the architecture of Klava, an experimental Java framework for <b>distributed</b> <b>applications</b> and code mobility. We explain how Klava implements code mobility by relying on Java and show a few <b>distributed</b> <b>applications</b> that exploit mobile code and are programmed in Klava. Keywords: Code Mobility, <b>Distributed</b> <b>Applications,</b> Network Awareness, Language and Middleware Implementation, Tuple Spaces, Java. ...|$|R
5000|$|BSI IST/038 - Expert Committee on <b>Distributed</b> <b>Application</b> Processes and Services (UK shadow for ISO/IEC JTC1 SC38) ...|$|E
5000|$|Client-server model—Client-server {{computing}} refers broadly to any <b>distributed</b> <b>application</b> {{that distinguishes}} between service providers (servers) and service requestors (clients).|$|E
50|$|Distributed {{data flow}} (also {{abbreviated}} as distributed flow) {{refers to a}} set of events in a <b>distributed</b> <b>application</b> or protocol.|$|E
40|$|The Management of <b>Distributed</b> <b>Applications</b> and Systems (MANDAS) project {{addresses}} problems arising in {{the management}} of <b>distributed</b> <b>applications.</b> Specifically, we are studying the areas of configuration management, fault management, performance management, and application metrics and modeling. We are also investigating the tools, techniques and services needed to support the above management applications. The MANDAS Management Information Repository (MIR) provides database support for the management applications and supports their integration into a single management environment. In this paper we examine the problem of <b>distributed</b> <b>applications</b> management to extract the requirements for a MIR. Based on the requirements, we present an information model for <b>distributed</b> <b>applications</b> management and outline a prototype MIR developed for the MANDAS project...|$|R
40|$|One of {{the factors}} that limits the scale, performance, and sophistication of <b>distributed</b> <b>applications</b> is the {{difficulty}} of concurrently executing them on multiple distributed computing resources. In part, this is due to a poor understanding of the general properties and performance of the coupling between applications and dynamic resources. This paper addresses this issue by integrating abstractions representing <b>distributed</b> <b>applications,</b> resources, and execution processes into a pilot-based middleware. The middleware provides a platform that can specify <b>distributed</b> <b>applications,</b> execute them on multiple resource and for different configurations, and is instrumented to support investigative analysis. We analyzed the execution of <b>distributed</b> <b>applications</b> using experiments that measure the benefits of using multiple resources, the late-binding of scheduling decisions, and the use of backfill scheduling...|$|R
40|$|Abstract—It is {{generally}} accepted {{that the ability}} to develop large-scale <b>distributed</b> <b>applications</b> that are extensible and independent of infrastructure details has lagged seriously behind other developments in cyberinfrastructure. As the sophistication and scale of distributed infrastructure increases, the complexity of successfully developing and deploying <b>distributed</b> <b>applications</b> increases both quantitatively and in qualitatively newer ways. In this manuscript, we trace the evolution of a representative set of “state-of-the-art ” <b>distributed</b> <b>applications</b> and production infrastructure; in doing so we aim to provide insight into the evolving sophistication of <b>distributed</b> <b>applications</b> – from simple generalizations of legacy static high-performance to applications composed of multiple loosely-coupled and dynamic components. The ultimate aim of this work is to highlight that even accounting for the fact that developing <b>applications</b> for <b>distributed</b> infrastructur...|$|R
50|$|The IPC model {{captures the}} common {{elements}} of distributed applications, called DAFs (<b>Distributed</b> <b>Application</b> Facilities), {{as illustrated in}} the Figure to the right. A DAF is composed by two or more <b>Distributed</b> <b>Application</b> Processes or DAPs, which collaborate to perform a task. These DAPs communicate using a single application protocol called CDAP (Common <b>Distributed</b> <b>Application</b> Protocol), which enables two DAPs to exchange structured data {{in the form of}} objects. All of the DAP’s externally visible information is represented by objects and structured in a Resource Information Base (RIB), which provides a naming schema and a logical organization to the objects known by the DAP (for example a naming tree). CDAP allows the DAPs to perform six remote operations on the peer’s objects (create, delete, read, write, start and stop).|$|E
5000|$|Common <b>Distributed</b> <b>Application</b> Process (CDAP). CDAP enables {{distributed}} applications {{to deal with}} communications at an object level, rather than forcing applications to explicitly deal with serialization and input/output operations. CDAP provides the application protocol component of a <b>Distributed</b> <b>Application</b> Facility (DAF) {{that can be used}} to construct arbitrary {{distributed applications}}, of which the DIF is an example. CDAP provides a straightforward and unifying approach to sharing data over a network without having to create specialized protocols.|$|E
50|$|Cadets at West Point are {{assisting}} {{in the creation}} of a <b>distributed</b> <b>application</b> for the purpose of managing grades for the Afghan cadets.|$|E
5000|$|... {{synchronization}} of OID-based listings (also with <b>distributed</b> <b>applications)</b> ...|$|R
40|$|Support for {{cooperative}} <b>distributed</b> <b>applications</b> is {{an important}} direction of computer systems research involving developments in operating systems, programming languages and databases. One emerging model {{for the support of}} cooperative <b>distributed</b> <b>applications</b> is that of a distributed shared universe organized as a set of objects shared by concurrent activities...|$|R
40|$|Highly {{distributed}} {{networks have}} now become a common infrastructure for wide-area <b>distributed</b> <b>applications</b> whose key design principle is network awareness, namely the {{ability to deal with}} dynamic changes of the network environment. Network-aware computing has called for new programming languages that exploit the mobility paradigm as a basic interaction mechanism. In this paper we present the architecture of KLAVA, an experimental Java package for <b>distributed</b> <b>applications</b> and code mobility. We describe how KLAVA permits code mobility by relying on Java and present a few <b>distributed</b> <b>applications</b> that exploit mobile code programmed in KLAVA...|$|R
