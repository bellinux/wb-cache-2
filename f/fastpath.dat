22|1|Public
25|$|Products were {{announced}} by {{companies such as}} Kalray with many acronyms. The OpenDataPlane run to completion execution models and framework are also being used by <b>FastPath</b> applications to leverage OpenFathPath functionality. DPDK is supported in the OpenFastPath release through the ODP-DPDK layer. The intent of OpenFastPath is to enable accelerated routing/forwarding for IPv4 and IPv6, tunneling and termination {{for a variety of}} protocols.|$|E
5000|$|Kinetics: <b>FastPath</b> - {{in later}} years, {{available}} from Shiva Networks ...|$|E
50|$|Although a few sites {{used the}} actual SEAGATE {{multibus}} hardware, {{it served as}} a proof-of-concept and was eclipsed by the Kinetics <b>FastPath</b> and similar hardware gateways by other companies. However, many university and research <b>Fastpath</b> owners continued to run the Stanford gateway software (called KIP) inside the Kinetics box. This is because KIP was open source and local modifications and adaptations could be made.|$|E
40|$|<b>Fastpaths</b> are {{a method}} of {{optimization}} which relies on treating the most commonly executed cases of certain functions in a privileged manner, such that behaviour is not modified, but execution time is reduced. <b>Fastpaths</b> {{play an important role}} on improving paravirtualization performance offered by an L 4 microkernel. In this article we redesign two existing <b>fastpaths</b> in an L 4 microkernel for the purpose of adding SMP support. We then put these <b>fastpaths</b> through a series of regression and performance tests to determine if the design is correct and what performance benefits we can expect by using them on a multiprocessor system...|$|R
50|$|Desktop {{virtualization}} management {{software that}} uses VMware View called <b>FastPath</b> {{was announced in}} August 2011, and upgraded in June 2012.|$|E
50|$|Cloud <b>FastPath</b> is an {{automated}} cloud-to-cloud and on-premises to cloud migration tool. It integrates with many cloud service providers, file sync and share services, and other hosting and on premises technologies.|$|E
50|$|SEAGATE was commercialised by Kinetics as the Kinetics Internet Protocol (KIP) for {{use with}} their <b>FastPath</b> LocalTalk-to-Ethernet bridge. Apple Computer adopted the usage of KIP and {{refer to it as}} MacIP.|$|E
5000|$|The Kinetics <b>FastPath</b> was an MacIP to TCP/IP router {{created in}} 1985 to allow Apple Macintosh {{computers}} (which {{at the time}} only had AppleTalk network connections) to communicate with other computers on Ethernet networks. The product had five significant revisions (known as KFPS-1 through KFPS-5) during its lifetime and was sold by Shiva Networks late in its existence. The <b>FastPath</b> itself was modeled after an implementation of the Stanford Ethernet - AppleTalk Gateway (SEAGATE) created at Stanford University Medical Center by Bill Croft in 1984 and 1985. [...] SEAGATE {{was a combination of}} hardware and software that picked up IP packets from the Ethernet network and encapsulated them inside of DDP packets on the AppleTalk network and conversely picked up specially-encoded DDP packets on the AppleTalk network and placed them on the Ethernet network as IP packets.|$|E
50|$|Products were {{announced}} by {{companies such as}} Kalray with many acronyms. The OpenDataPlane run to completion execution models and framework are also being used by <b>FastPath</b> applications to leverage OpenFathPath functionality. DPDK is supported in the OpenFastPath release through the ODP-DPDK layer. The intent of OpenFastPath is to enable accelerated routing/forwarding for IPv4 and IPv6, tunneling and termination {{for a variety of}} protocols.|$|E
50|$|The {{project was}} {{originated}} by Jive Software in around 2002, partly {{in order to}} support their <b>FastPath</b> web-based customer support tool, as Jive Messenger, and renamed to Wildfire in 2005. Due to a trademark issue, it was further renamed to Openfire in 2007. The project was wholly handed to the community in 2008. Jive continued to host the project until 2016.|$|E
50|$|Spark is an {{open-source}} {{instant messaging}} program (based on XMPP protocol) that {{allows users to}} communicate via text in real time. It can be integrated with the Openfire server to provide additional features, such as controlling various parts of Spark functionality from a central management console, or integrating with a customer support service <b>Fastpath,</b> allowing Spark users to log into queues, accept and forward support requests, use canned responses. Being a cross-platform application, it can be run on various systems. Installers for Windows, macOS and Linux {{are available on the}} official website.|$|E
50|$|Job Control Language (JCL) is z/VSE's batch {{processing}} interface. There is also another, special interface for system console operators. z/VSE, like z/OS systems, had traditionally supported 3270 terminal user interfaces. However, most z/VSE installations {{have at least}} begun to add Web browser access to z/VSE applications. z/VSE's TCP/IP is a separately priced option for historic reasons, and is available in two different versions from two vendors. Both vendors provide a full function TCP/IP stack with applications, such as telnet and FTP. One TCP/IP stack provides IPv4 communication only, the other IPv4 and IPv6 communication. In addition to the commercially available TCP/IP stacks for z/VSE, IBM also provides the Linux <b>Fastpath</b> method which uses IUCV socket connections to communicate with a Linux guest, also running on the mainframe. Using this method the z/VSE system is able to fully exploit the native Linux TCP/IP stack.|$|E
50|$|In November 2010, having {{purchased}} Easynet in {{the preceding}} months, Sky closed the business-centric UK Online {{with little more than}} a month's notice. Although Easynet continued to offer business-grade broadband connectivity products, UKO customers could not migrate to an equivalent Easynet service, only being offered either a MAC to migrate provider or the option of becoming a customer of the residential-only Sky Broadband ISP with an introductory discounted period. Also, some previously available service features like <b>fastpath</b> (useful for time-critical protocols like SIP) were not made available on Sky Broadband, leaving business users with a difficult choice particularly where UK Online were the only LLU provider. Since then, Sky Broadband has become a significant player in the quad play telecoms market, offering ADSL line rental and call packages to customers (who have to pay a supplement if they are not also Sky television subscribers).|$|E
5000|$|Excelan was a {{computer}} networking company founded in 1982 by Kanwal Rekhi, Inder Singh and Navindra Jain. Excelan was {{a manufacturer of}} smart Ethernet cards, until the company merged with, and was acquired by Novell in 1989. The company offered a line of Ethernet [...] "front end processor" [...] boards for Multibus, VMEbus, Q-Bus, Unibus, and IBM AT Bus systems. The cards were equipped with their own processor and memory, and ran TCP/IP protocol software that was downloaded onto the cards from the host system. Excelan offered software that integrated the cards {{into a variety of}} operating system environments, including many flavors of UNIX, RSX-11, VMS, and MS-DOS. The hardware and software were sold under the [...] "EXOS" [...] brand. In 1987, Excelan also acquired Kinetics, a small networking company that manufactured and sold a variety of Ethernet networking products for Apple Macintosh environments, most notably an AppleTalk-to-Ethernet gateway called the <b>FastPath.</b>|$|E
40|$|The common-case IPC handler in microkernels, {{referred}} to as the <b>fastpath,</b> is performance-critical and thus is often optimised using hand-written assembly. However, compiler technology has advanced significantly in the past decade, which suggests that we should re-evaluate this approach. We present a case study of optimising the IPC <b>fastpath</b> in the seL 4 microkernel. This <b>fastpath</b> is written in C and relies on an optimising C compiler for good performance. We present our techniques in modifying the C sources to assist with compiler optimisation. We compare our results with a hand-optimised assembly implementation, which gains no extra benefit from hand-tuning. ...|$|E
40|$|Abstract. We {{describe}} <b>Fastpath,</b> {{a system}} for speculative parallelization of sequential programs on conventional multicore processors. Our system distinguishes between the lead thread, which executes at almostnative speed, and speculative threads, which execute somewhat slower. This allows us to achieve nontrivial speedup, even on two-core machines. We present a mathematical model of potential speedup, parameterized by application characteristics and implementation constants. We also present preliminary results gleaned from two different <b>Fastpath</b> implementations, each derived from an implementation of software transactional memory. ...|$|E
40|$|A hand-shaking {{scheme is}} {{developed}} for a network interface system {{to allow for}} error-free communication between an IBM PC and a remote minicomputer or a computer workstation located elsewhere on campus. The network interface system is also modified to adopt the scheme, to improve the initialization processes, and to detect any hardware errors that may occur during data transmission. The IBM PC communicates with an AppleTalk network through a LocalTalk PC Card Device Driver. The AppleTalk network is subsequently connected to the campus-wide Ethernet network through a Kinetics <b>Fastpath</b> Gateway. The workstation {{is attached to the}} Ethernet network either directly or through another workstation which functions as a gateway. With this complete system, a user on a workstation located anywhere on campus can execute software on a remote PC to perform data acquisition and/or control. The PC then sends the resulting data back to the workstation which can use its greater data processing power to analyze or store the data. Data transfers between the PC and the workstation will be free of duplication or loss. Should hardware errors occur at the sender or receiver site (for example, errors from the Device Driver), application programs located on both sites will terminate automatically after a specified time interval and the user can safely start the process over again. The system currently uses UDP/IP (User Datagram Protocol / Internet Protocol), a type of Ethernet protocol, to transfer data between the workstation and the Kinetics <b>Fastpath</b> Gateway. From the Kinetic <b>Fastpath</b> Gateway to the PC, data travels using DDP (Datagram Delivery Protocol), a type of AppleTalk protocol. Data travels on both networks using datagram formats...|$|E
40|$|The demo {{is focused}} on the {{implementation}} of ARP-Path (a. k. a. <b>FastPath)</b> bridges, a recently proposed concept for low latency bridges. ARP-Path Bridges rely on the race between broadcast ARP Request packets, to discover the minimum latency path to the destination host. Several implementations (in Omnet++, Linux, OpenFlow, NetFPGA) have shown that ARP-Path exhibits loop-freedom, does not block links, is fully transparent to hosts and neither needs a spanning tree protocol to prevent loops nor a link state protocol to obtain low latency paths. This demo compares our hardware implementation on NetFPGA to bridges running STP, showing that ARP-Path finds lower latency paths than STP...|$|E
40|$|Abstract—This paper {{describes}} {{the implementation of}} ARP-Path (a. k. a. <b>FastPath)</b> bridges, a recently proposed concept for low latency bridges, in Linux/Soekris and OpenFlow/NetFPGA platforms. These ARP-based Ethernet Switches rely on the race between the replicas of a standard ARP Request packet flooded over all links, to discover the minimum latency path to the destination host, complemented {{in the opposite direction}} by the ARP Reply packet directed to the source host. Implementations show that the protocol is loop free, does not block links, is fully transparent to hosts and neither needs a spanning tree protocol to prevent loops nor a link state protocol to obtain low latency paths. Implementations in Linux and OpenFlow on NetFPGA show inherent robustness and fast reconfiguration. Previous simulations showed a superior performance (throughput and delay) than the Spanning Tree Protocol and similar to shortest path routing, with lower complexity...|$|E
40|$|A {{parameterized}} type {{defines a}} family of related types. For example, a single parameterized type ARRAY provides a common definition for array of INTEGER, array of FLOAT, and array of rows of a certain row type. SQL 3 proposes support for user-defined parameterized types (or UDPTs for short), but {{we have yet to}} see any full implementation in a commercial DBMS. In this paper, we show how we implemented UDPTs Range and RangeSet using the DataBlade and <b>Fastpath</b> extensibility features of Informix. We also describe the application of these UDPTs in building a temporal database with TSQL 2 like features. We found that implementing temporal database primitives using UDPTs required much less development effort and is more flexible than our earlier approach that used regular, non-parameterized user-defined types. We report some lessons learned in the implementation process, and propose a "wish list" of DBMS extensibility features required for full support of UDPTs. Although our implementat [...] ...|$|E
40|$|We {{present an}} {{in-depth}} {{coverage of the}} comprehensive machine-checked formal verification of seL 4, a general-purpose operating system microkernel. We discuss the kernel design we used to make its verification tractable. We then describe the functional correctness proof of the kernel’s C implementation and we cover further steps that transform this result into a comprehensive formal verification of the kernel: a formally verified IPC <b>fastpath,</b> a proof that the binary code of the kernel correctly implements the C semantics, a proof of correct access-control enforcement, a proof of information-flow noninterference, a sound worst-case execution time analysis of the binary, and an automatic initialiser for user-level systems that connects kernel-level access-control enforcement with reasoning about system behaviour. We summarise these results and show how they integrate to form a coherent overall analysis, backed by machine-checked, end-to-end theorems. The seL 4 microkernel is currently not just the only general-purpose operating system kernel that is fully formally verified to this degree. It is also the only example of formal proof of this scale that is kept current as the requirements, design {{and implementation of the}} system evolve over almost a decade. We report on our experience in maintaining this evolving formally verified code base...|$|E
40|$|Imagine an {{application}} {{environment in which}} subsecond response to thousands of events gives the user a distinct competitive advantage, yet transactional guarantees are important. Imag-ine also that the data ts comfortably into a few gigabytes of Random Access Memory. These attributes characterize many nancial trading applications. Which engine should one use in such a case? IBM <b>FastPath,</b> Sybase, Oracle, or Object Store? We argue that an unconventional approach is called for: we use a list-based language called K having optimized support for bulk array operators, and that integrates networking, and a graphical user interface. Locking is unnecessary when single-threading such applications because the data ts into memory, obviating the {{need to go to}} disk except for logging purposes. Multithreading can be handled for OLTP applications by analyzing the arguments to transactions. The result is a (private, size-reduced) TPC/B benchmark that achieves 25, 000 transactions per second with full recoverability and TCP/IP overhead on an (167 Megahertz) UltraSparc I. Further, hot disaster recovery can be done with far less overhead than required by two phase commit by using a sequential state machine approach. We show how to exploit multiple processors without complicating the language or our basic framework. 1 A Brief Description of the K Language K is list-based language integrating bulk operators, interprocess communication, and graphical user interface facilities, designed and implemented by Arthur Whitney. It is extremely concise. For example, a simple spreadsheet has been implemented in about 100 characters, including the graphical user interface, as illustrated in Figure 1. Partly supported by NSF grants #IRI- 9224601 and #IRI- 953155...|$|E

