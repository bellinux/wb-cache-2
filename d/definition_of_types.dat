33|10000|Public
50|$|The {{seemingly}} more intuitive notion - {{that all}} complete types {{of the language}} are realized - {{turns out to be}} too weak (and is, appropriately, named weak saturation, which is the same as 1-saturation). The difference {{lies in the fact that}} many structures contain elements which are not definable (for example, any transcendental element of R is, by definition of the word, not definable in the field language). However, they still form a part of the structure, so we need types to describe relationships with them. Thus we allow sets of parameters from the structure in our <b>definition</b> <b>of</b> <b>types.</b> This argument allows us to discuss specific features of the model which we may otherwise miss - for example, a specific increasing sequence cn having a bound can be expressed as realizing the type {x > cn : n ∈ ω}, which uses countably many parameters. If the sequence is not definable, this fact about the structure cannot be described using the base language, so a weakly saturated structure may not bound the sequence, while an ω-saturated structure will.|$|E
40|$|Almost {{no object}} {{oriented}} programming languages offer distinct language constructs for the <b>definition</b> <b>of</b> <b>types</b> and their implementations; instead these are united into a single class concept. Similarly {{object oriented programming}} languages do not normally distinguish between object types, which may be independently instantiated, and attribute types, which may not. The pape...|$|E
40|$|Legea si Viata. - 2014. - Iunie. - P. 88 - 91. ?????? ????????? ??????????? ????? ???????????????? ???? ? ?? ?????????????? ? ?????????????? ????? ???????. ??????????, ??? ??? ????????????? ????????????????? ????? ? ????? ???????????? ?????? ????? ???????? ?????????? ????????????. The {{article is}} devoted to the <b>definition</b> <b>of</b> <b>types</b> of {{pre-emption}} rights and their characteristics in the succession law of Ukraine. It is noted that for the emergence of pre-emptive rights in the inheritance of the fact of opening the inheritance is not enough. ?????? ?????????? ?????????? ????? ?????????? ???? ? ????? ?????????????? ? ?????????? ????? ???????. ?????????????, ?? ??? ?????????? ??????????? ????? ? ????? ??????????? ?????? ????? ????????? ???????? ???????????...|$|E
5000|$|... #Subtitle level 2: <b>Definitions</b> <b>of</b> <b>types</b> <b>of</b> credit {{transactions}} ...|$|R
40|$|Abstract—This {{study is}} based on the method of {{analyzing}} the steady-state errors of the traditional unity feedback control systems. The method in this study combines the concept <b>of</b> <b>type</b> number and the new error function offered by Kuo. In this study, the <b>definition</b> <b>of</b> <b>type</b> number will be revised. The new <b>definition</b> <b>of</b> <b>type</b> number is useful and correct in unity feedback control systems and nonunity feedback control systems. Thus, the steady-state errors of nonunity feedback control systems can be obtained directly by this method. Keywords-nonentity feedback; steady-state error; type numbe; error function I...|$|R
40|$|The paper {{considers}} the distinctive features <b>of</b> different <b>types</b> <b>of</b> single-phase {{damage in the}} distribution networks. By results of researches the algorithm is developed for <b>definition</b> <b>of</b> <b>type</b> <b>of</b> single-phase damage {{on the basis of}} the information on emergency operation parameters. The results can be used in devices of microprocessor relay protection when implementing a function fault location in distribution power networks. </p...|$|R
40|$|Abstract: A <b>definition</b> <b>of</b> <b>types</b> in an {{information}} system is given from real-world abstractions through data constructs, schema and definitions to physical data values. Category theory suggests that four levels are sufficient to provide ultimate closure for computational types to construct information systems. Examples of information systems are examined {{in terms of the}} four-level architecture including IRDS, the Grid, the semantic web and MOF/MDA. ...|$|E
40|$|The volume {{collects}} several seminal {{contributions in}} the field of traumatology. The Editor divides the papers into four main areas of research: neuroscience and trauma, trauma and psychopathology, developmental studies on trauma, trauma and psychotherapy. Each section is introduced by an overview of the key advancements in the field by the editor. This collection of papers is aimed at establishing the shared points as to the <b>definition</b> <b>of</b> <b>types</b> of trauma, their consequences and psyhopathological processes...|$|E
40|$|AbstractWe study Artemov’s Reflective Combinatory Logic RCL→. We {{provide the}} {{explicit}} <b>definition</b> <b>of</b> <b>types</b> for RCL→ and prove that every well-formed term {{has a unique}} type. We establish that the typability testing and detailed type restoration {{can be done in}} polynomial time and that the derivability relation for RCL→ is decidable and PSPACE-complete. These results also formalize the intended semantics of the type t:F in RCL→. Terms RCL→ store the complete information about the judgment “t is a term of type F”, and this information can be extracted by the type restoration algorithm...|$|E
50|$|In certain cases, {{there can}} {{be more than one}} <b>definition</b> <b>of</b> a <b>type</b> or a template. A program {{consisting}} of multiple header files and source files will typically have more than one <b>definition</b> <b>of</b> a <b>type,</b> but not more than one definition per translation unit.|$|R
5000|$|Standardize <b>definitions</b> <b>of</b> reserve <b>types</b> {{and reserve}} {{calculations}} ...|$|R
30|$|The <b>definition</b> <b>of</b> every <b>type</b> <b>of</b> floor {{field is}} now illustrated.|$|R
40|$|This paper {{presents}} a new metamodel based on partially ordered hypersets. The metamodel is minimalist, its only primitives being atoms, potentially infinite hypersets and partial order. The type system is very loose and supports concurrent extensional and intensional <b>definition</b> <b>of</b> <b>types.</b> Every {{element of the}} metmodel can be directly referenced, thanks to a powerful automated reification facility. These characteristics make the metamodel well adapted to integrating semistructured data. The metamodel is also compared to a few other information representation formalisms to demonstrate that it subsumes them all and to exhibit some of their problems...|$|E
40|$|At the {{beginning}} of this master’s thesis the <b>definition</b> <b>of</b> <b>types</b> of robots using parallel kinematics are presented, its possibilities of usage and current prototypes are described. The second chapter focuses on the proposal of robot construction and sizing electric and non-electric components of robot hardware. Derivation of direct and inverse transform mechanisms with creating flowcharts of their algorithms are stated in the two following chapters. The state machine controlled from user interface is then programmed based on these flowcharts. At the end of the work, cable-driven robot positioning accuracy is evaluated and platform workspace, together with motion and electric parameters, are measured...|$|E
40|$|Abstract:- Theory of {{learning}} styles is steadily evolving in several decades and reveals importance of such styles for construction and adoption of adaptive e-learning platforms. Courseware delivery adaptive to learning styles needs precise <b>definition</b> <b>of</b> <b>types</b> {{of learning}} objects {{most appropriate for}} individual given learning character with its specific learning style. The present article provides results of {{a case study of}} courseware delivery of various types of learning objects such tasks, projects, essays, games and intermediate tests with adaption based on learning styles. It presents evaluation of dependability of learning object types on the styles of learning defined by Honey and Mumford and shows how practical results may differ from expected ones for some of the cases...|$|E
50|$|Locally, the makeup, {{names and}} <b>definitions</b> <b>of</b> these <b>types</b> <b>of</b> {{entities}} are fluid and sometimes interchangeable.|$|R
5000|$|... 3. Establish clear <b>definitions</b> <b>of</b> each <b>type</b> <b>of</b> project: breakthrough, platform, derivative, R&D, or partnered projects.|$|R
30|$|Now, we {{recall the}} <b>definitions</b> <b>of</b> Caputo <b>type</b> Hadamard {{fractional}} derivatives (see [17]).|$|R
40|$|A {{relatively}} {{reliable and}} valid hierarchy of clusters of objects is plotted from the highest column entries, exclusively, of a matrix of interassociations between the objects. Having developed out of a loose <b>definition</b> <b>of</b> <b>types,</b> the method isolates both loose and highly definitive types, and all those in between. Results from one kind of test items produces a matrix of inter-associations between interpersonal concepts over emotions for every individual. The above {{results indicate that the}} pairs of concepts between which the highest entries mediate report a wealth of infor-mation about the emotional organization of interpersonal concepts. Highest column entry pairs of concepts can serve as items in building a test to assess individual differences in an area of behavioral organi-zations...|$|E
40|$|The {{problem of}} the {{retrieval}} by content of office documents is addressed here. Yowever, the retrieval by content is greatly enhanced if the semantic role of document objects can he described. For this reason we introduce a conceptual level of modeling resulting In the definition of conceptual structures of documents. Type definition {{is essential for the}} retrieval, hut since office document structures tend to Rreatly differ from instance to instance, we introduce the concept of weak type, allowing the <b>definition</b> <b>of</b> <b>types</b> at different levels of detail (type hierarchies). In this paper a modeling approach based on these ideas is presented. Particular emphasis is put on the type definition and the use of types in query formulation and processinR. 1...|$|E
40|$|ABSTRACT: Static {{descriptive}} {{measures can}} be used to quantify characteristics of a 3 D reservoir model. These static measures may have implications for the prediction or interpretation of dynamic performance and can draw attention to geological uncertainties that may impact flow behaviours. This study reviews, modifies and introduces techniques to characterize the spatial distribution of permeability in reservoir models, with emphasis placed on connectivity and continuity analysis. Topics include: the relationship between connectivity and percolation theory; <b>definition</b> <b>of</b> <b>types</b> of reservoir connectivity; methods of measuring connectivity; connectivity as a function of distance; connectivity maps; categorical classifications of connectivity; types of reservoir path lengths; and continuity lines. The key factors controlling reservoir connectivity are identified. Static measures {{can be used}} to locate regions of higher sweep efficiency and lower tortuosity that are connected to the wells...|$|E
30|$|Similarly by (2.19) we {{can give}} the {{following}} <b>definition</b> <b>of</b> Cauchy <b>type</b> means.|$|R
30|$|Now, let us {{recall the}} <b>definition</b> <b>of</b> topological <b>types</b> for an {{equilibrium}} point (x,y).|$|R
5000|$|A typedef {{can also}} be used to simplify the <b>definition</b> <b>of</b> array <b>types.</b> For example, ...|$|R
40|$|Abstract. A <b>definition</b> <b>of</b> <b>types</b> in an {{information}} system is given from real-world abstractions through data constructs, schema and definitions to physical data values. Category theory suggests that four levels are sufficient to provide ultimate closure for computational types to construct information systems. The Godement calculus provides rules governing {{the composition of the}} mappings at different levels. Examples of information systems are reviewed in terms of the four-level architecture including IRDS, the Grid, the semantic web and MOF/MDA. 1 The four fundamental levels and their formalisation Interoperability is still a major problem in information systems. Most achievements have been with systems using a similar model or paradigm. Where heterogeneous systems are involved, progress has required much manual adjustment to mappings. Recently the development of the Grid has exposed the great difficulty of employing data held in formal database systems as opposed to operating system files [Watson, 2002]. Using higher-order logic we build on existing wor...|$|E
40|$|We {{study the}} syntax of Artemov’s Reflective Combinatory Logic RCL→. We provide the {{explicit}} <b>definition</b> <b>of</b> <b>types</b> for RCL → and prove that every well-formed term {{has a unique}} type. We establish that the typability testing and detailed type restoration {{can be done in}} polynomial time and that the derivability relation for RCL → is decidable and P SP ACE-complete. These results also formalize the intended semantics of the type t:F in RCL→. Terms RCL → store the complete information about the judgment “t is a term of type F ”, and this information can be extracted by the type restoration algorithm. 1 Introduction. The Reflective Combinatory Logic RCL → was introduced by S. Artemov in [4]. 1 RCL → is an extension of Typed Combinatory Logic CL → (see [12]) which admits the embedding of typing judgments of the form “t is a term of type F ” into the types of the system via the additional type constructor t: F...|$|E
40|$|In object {{oriented}} database languages and in languages supporting the semantic data model the construct {{used to collect}} sets of homogeneous entities is usually enriched {{with the possibility of}} imposing a set-inclusion relation among different collections. We call "class" such a data structure characterized by its ability of collecting values and of being in a containment relation with other classes. In many languages the class notion is not realized by a first class data type but is defined in some special way and the definition of a class is overloaded with constraints, and tightly linked to the <b>definition</b> <b>of</b> <b>types.</b> In this paper we embed in a strongly typed language with type inclusion a basic, but powerful, notion of a class data type which is just a first class data type orthogonal to the other notions of the language. In this context we study one of the most problematic issues in class data types, migration of objects from superclasses to subclasses...|$|E
5000|$|Induction-induction allows <b>definition</b> <b>of</b> a <b>type</b> and {{a family}} <b>of</b> <b>types</b> at the same time. So, a type [...] {{and a family}} <b>of</b> <b>types</b> [...]|$|R
5000|$|In Abstract Syntax Notation One (ASN.1), the {{ellipsis}} {{is used as}} {{an extension}} marker to indicate the possibility <b>of</b> <b>type</b> extensions in future revisions of a protocol specification. In a type constraint expression like A ::= INTEGER (0..127, ..., 256..511) an ellipsis is used to separate the extension root from extension additions. The <b>definition</b> <b>of</b> <b>type</b> A in version 1 system of the form A ::= INTEGER (0..127, ...) and the <b>definition</b> <b>of</b> <b>type</b> A in version 2 system of the form A ::= INTEGER (0..127, ..., 256..511) constitute an extension series <b>of</b> the same <b>type</b> A in {{different versions of the}} same specification. The ellipsis can also be used in compound type definitions to separate the set of fields belonging to the extension root from the set of fields constituting extension additions. Here is an example: B ::= SEQUENCE { a INTEGER, b INTEGER, ..., c INTEGER } ...|$|R
40|$|Grammatical {{design is}} useful for the {{generation}} {{of a set of}} related designs. The concept <b>of</b> <b>type</b> aids designers in generating designs with a specified structure. However, existing studies in grammar are ambiguous in their <b>definition</b> <b>of</b> <b>type</b> in the language of designs generated by a grammar. Extending our previous study of defining style in grammar, this paper provides a formal <b>definition</b> <b>of</b> the concept <b>of</b> <b>type</b> in the language of designs generated by a grammar. This is done {{with the help of a}} description scheme which is developed by augmenting grammar primitives and spatial relations with descriptors. The description scheme allows the computation of descriptors for designs generated from grammar thus making possible the comparison <b>of</b> various design <b>types</b> in the language of a grammar.   Such a description scheme for defining design types is especially significant for less restricted grammars that generate a large number of designs that are varied in nature. A formal <b>definition</b> <b>of</b> <b>type</b> in grammars allows users to sift through designs with particular features, and thus select desired designs. ...|$|R
40|$|A {{new theory}} of data types {{which allows for}} the <b>definition</b> <b>of</b> <b>types</b> as initial algebras of certain functors Fam(C) -> Fam(C) is presented. This theory, which we call {{positive}} inductive-recursive definitions, is a generalisation of Dybjer and Setzer's theory of inductive-recursive definitions within which C had to be discrete [...] our work can therefore be seen as lifting this restriction. This is a substantial endeavour as we need to not only introduce a type of codes for such data types (as in Dybjer and Setzer's work), but also a type of morphisms between such codes (which was not needed in Dybjer and Setzer's development). We show how these codes are interpreted as functors on Fam(C) and how these morphisms of codes are interpreted as natural transformations between such functors. We then give an application of positive inductive-recursive definitions {{to the theory of}} nested data types and we give concrete examples of recursive functions defined on universes by using their elimination principle. Finally we justify the existence of positive inductive-recursive definitions by adapting Dybjer and Setzer's set-theoretic model to our setting. Comment: 21 page...|$|E
40|$|Thirty-eight {{measures}} of lexical diversity are obtained (with {{the aid of}} a computer) from the free speech of 20 aphasic and 20 normal control subjects. After statistical analyses of significance and redundancy, 18 variables are retained for a later empirical derivation of types of aphasia. Eight of the variables are sufficiently significant to discriminate the aphasic group from the normal group. This paper describes the investigation of a number of lexical diversity measures in connection with speech samples taken from twenty aphasic and twenty normal control subjects. The primary goals of the study were to discover which measures differentiate aphasic subjects from normal subjects, to eliminate redundant {{measures of}} lexical diversity, and to assess the potential usefulness of the measures to the empirical <b>definition</b> <b>of</b> <b>types</b> of aphasic deficit. Secondarily, it was hoped {{to find out more about}} the measures themselves: their relative efficacy with respect to each other, their interrelationships, and their degree of dependence on sample size. Many lexical diversity measures are a function of the number of word types in a text, i. e., the number of different words or the length of a dictionary based on the text, and th...|$|E
40|$|The aim of {{this report}} is to show that, {{within the limits of}} what we know how to do {{efficiently}} with computers, it is possible to design a system of types that, to a good degree, models the conceptual hierarchies that we use in our everyday discourse. A method is presented for representing sets of objects by types and for representing relations among objects by relations among types. In the <b>definition</b> <b>of</b> <b>types</b> we can use variables (called formal variables) that range on types, and methods are provided for binding such variables to particular types. Types are either primitive, or formal variables, or obtained from types by the application of definitional operators. Relations are established among types to express that their instances have the same physial representation, or to express, possibly with additional requirements, that the set of instances of a type is a subset of the set of instances of another. These relations are used to assure that assignments and procedure calls preserve the membership of objects to the sets that are denoted by their types. By the use of formal variables we achieve the ability to abstract, in particular contexts, from details of objects...|$|E
25|$|The full {{list and}} <b>definitions</b> <b>of</b> BioSample <b>types</b> and {{attributes}} {{is available for}} preview and download.|$|R
30|$|To {{discuss the}} local {{stability}} of equilibria, we first give the following <b>definition</b> <b>of</b> stability <b>types.</b>|$|R
50|$|The full {{list and}} <b>definitions</b> <b>of</b> BioSample <b>types</b> and {{attributes}} {{is available for}} preview and download.|$|R
