11|1|Public
50|$|Ezmlm {{works very}} fast since it {{makes use of}} {{database}} type files, while many other mailing list managers use <b>flat</b> <b>ascii</b> files. Ezmlm also {{has a very good}} security record.|$|E
50|$|Each {{program is}} {{controlled}} through a menu, which asks users which options {{they want to}} set, and allows them to start the computation. The data is read into the program from a text file, which the user can prepare using any word processor or text editor (but this text file cannot be in the special format of that word processor, it must instead be in <b>flat</b> <b>ASCII</b> or text only format). Some sequence analysis {{programs such as the}} ClustalW alignment program can write data files in the PHYLIP format. Most of the programs look for the data in a file called infile. If they do not find this file, they then ask the user to type in the file name of the data file.|$|E
40|$|This RFC {{specifies}} an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " for the standardization state and status of this protocol. Distribution of this memo is unlimited. STD 11, RFC 822 defines a message representation protocol which specifies considerable detail about message headers, but which leaves the message content, or message body, as <b>flat</b> <b>ASCII</b> text. This document redefines the format of message bodies to allow multi-part textual and non-textual message bodies to be represented and exchanged without loss of information. This is based on earlier work documented in RFC 934 and STD 11, RFC 1049, but extends and revises that work. Because RFC 822 said so little about message bodies, this document is largely orthogonal to (rather than a revision of) RF...|$|E
40|$|Growing {{environmental}} awareness and advances in modelling have generated interest in soil monitoring networks. Data management tools {{have to be}} developed in order to store data, check for errors and retrieve data for sharing and for analysis. As a result, we have designed a web application and a database for the Biosoil project that focuses on European forest soils. Integral to the system are authentication of users and access rights to the modules and data. It also logs all activities of each user. During data submission, the system automatically manages data transfer from the <b>flat</b> file (<b>ASCII</b> file) to the database after compliance checks. Then error tracking is followed by automated expert checks. These checks identify potential mistakes that can be corrected or commented on by data providers. The database is intended {{to cope with the}} challenges of transnational monitoring and integrates data quality assurance / quality control mechanisms. Benefits from the architecture of the database and from the services provided by the software may be generalized to all soil monitoring databases in order to improve data management and quality control. JRC. H. 7 -Climate Risk Managemen...|$|R
40|$|This paper {{discusses}} a Windows-based software program, WesVarPC, for computing {{sampling errors}} for statistics collected from complex survey designs. The program uses replication methods (either Balanced Repeated Replication or Jackknife) to compute estimated sampling errors. WesVarPC produces estimated sampling errors {{for a wide}} variety of statistics, including totals, percents, ratios, and more complex functions of totals. Estimated sampling errors can be computed for subdomains defined by cross-tabulations of as many as eight variables. Sampling errors of functions of cell statistics, such as differences or log odds-ratios, can also be produced easily. WesVarPC reads SAS and <b>flat</b> <b>ASCII</b> file formats. The program can use replicate weights attached to the incoming survey data file or it can produce post-stratified replicate weights if control totals are provided. The paper begins with a discussion of replication methods. The main portion of the paper is a description of the WesVarPC program features. WesVarPC is available to all interested persons and organizations at no charge...|$|E
40|$|The {{problem of}} {{translating}} database objects into a flat format {{to be written}} out in a <b>flat</b> <b>Ascii</b> file or, conversely, translating {{the contents of a}} file into a complex database object arises in several applications. It is especially important in scientific database applications, where file-based communication with external programs (e. g., visualization packages or model simulations) is very common. We introduce Frog, a visual tool {{that can be used to}} specify translations between database objects and flat files, requiring no programming by the user. The tool can deal with objects of arbitrary complexity, withoutthe object complexitybeing directly reflected in the complexity of the corresponding visual interaction. Based on the visual actions of the user, the tool stores enough information in a map-file, whose contents are used at runtime by another tool, Turtle, to translate any chosen database object into the appropriate file layout. The tool has been developed as part of the ZOO deskt [...] ...|$|E
40|$|STD 11, RFC 822 {{defines a}} message {{representation}} protocol specifying considerable detail about message headers, but which leaves the message content, or message body, as <b>flat</b> <b>ASCII</b> text. This document redefines {{the format of}} message bodies to allow multipart textual and non-textual message bodies to be represented and exchanged without loss of information. This is based on earlier work documented in RFC 934, STD 11, and RFC 1049, but extends and revises them. Because RFC 822 said so little about message bodies, this document is largely orthogonal to (rather than a revision of) RFC 822. In particular, this document {{is designed to provide}} facilities to include multiple objects in a single message, to represent body text in character sets other than US-ASCII, to represent formatted multi-font text messages, to represent non-textual material such as images and audio fragments, and generally to facilitate later extensions defining new types of Internet mail for use by cooperating mail agent [...] ...|$|E
40|$|This RFC {{specifies}} an IAB standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "IAB Official Protocol Standards " for the standardization state and status of this protocol. Distribution of this memo is unlimited. RFC 822 defines a message representation protocol which specifies considerable detail about message headers, but which leaves the message content, or message body, as <b>flat</b> <b>ASCII</b> text. This document redefines the format of message bodies to allow multi-part textual and non-textual message bodies to be represented and exchanged without loss of information. This is based on earlier work documented in RFC 934 and RFC 1049, but extends and revises that work. Because RFC 822 said so little about message bodies, this document is largely orthogonal to (rather than a revision of) RFC 822. In particular, this document {{is designed to provide}} facilities to include multiple objects in a single message, to represent body text in character sets other than US-ASCII, to represent formatted multi-font text messages, to represent non-textual material such a...|$|E
40|$|CSVM (CSV with Metadata) is {{a simple}} file format for tabular data. The {{possible}} application domain {{is the same as}} typical spreadsheets files, but CSVM is well suited for long term storage and the inter-conversion of RAW data. CSVM embeds different levels for data, metadata and annotations in human readable format and <b>flat</b> <b>ASCII</b> files. As a proof of concept, Perl and Python toolkits were designed in order to handle CSVM data and objects in workflows. These parsers can process CSVM files independently of data types, so it is possible to use same data format and parser for a lot of scientific purposes. CSVM- 1 is the first version of CSVM specification, an extension of CSVM- 1 for implementing a translation system between CSVM files is presented in this paper. The necessary data used to make the translation are also coded in another CSVM file. This particular kind of CSVM is called a CSVM dictionary, it is also readable by the current CSVM parser and it is fully supported by the Python toolkit. This report presents a proposal for CSVM dictionaries, a working example in chemistry, and some elements of Python toolkit usable to handle these files...|$|E
40|$|To {{perform a}} {{statistically}} rigorous meta-analysis of research {{results on the}} response by herbaceous vegetation to increased atmospheric CO{sub 2 } levels, a multiparameter database of responses was compiled from the published literature. Seventy-eight independent CO{sub 2 }-enrichment studies, covering 53 species and 26 response parameters, reported mean response, sample size, and variance of the response (either as standard deviation or standard error). An additional 43 studies, covering 25 species and 6 response parameters, did not report variances. This numeric data package accompanies the Carbon Dioxide Information Analysis Center's (CDIAC's) NDP- 072, which provides similar information for woody vegetation. This numeric data package contains a 30 -field data set of CO{sub 2 }-exposure experiment responses by herbaceous plants (as both a <b>flat</b> <b>ASCII</b> file and a spreadsheet file), files listing the references to the CO{sub 2 }-exposure experiments and specific comments relevant to the data in the data sets, and this documentation file (which includes SAS{reg_sign} and Fortran codes to read the ASCII data file). The data files and this documentation are available without charge {{on a variety of}} media and via the Internet from CDIAC...|$|E
40|$|This RFC {{specifies}} an Internet standards track {{protocol for}} the Internet community, and requests discussion {{and suggestions for}} improvements. Please refer to the current edition of the "Internet Official Protocol Standards " for the standardization state and status of this protocol. Distribution of this memo is unlimited. STD 11, RFC 822 defines a message representation protocol which specifies considerable detail about message headers, but which leaves the message content, or message body, as <b>flat</b> <b>ASCII</b> text. This document redefines the format of message bodies to allow multipart textual and non-textual message bodies to be represented and exchanged without loss of information. This is based on earlier work documented in RFC 934, STD 11, and RFC 1049, but extends and revises that work. Because RFC 822 said so little about message bodies, this document is largely orthogonal to (rather than a revision of) RFC 822. In particular, this document {{is designed to provide}} facilities to include multiple objects in a single message, to represent body text in character sets other than US-ASCII, to represent formatted multi-font text messages, to represent non-textual material such as images and audio fragments, and generally to facilitate later extensions defining new types of Internet mail for use by cooperating mail agents. This document does NOT extend Internet mail header fields to permit anything other than US-ASCII text data. Such extensions are the subject of a companion document [RFC- 1522]. This document is a revision of RFC 1341. Significant differences from RFC 1341 ar...|$|E

