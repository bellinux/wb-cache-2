2145|0|Public
25|$|Before {{a client}} and server {{can begin to}} {{exchange}} information protected by TLS, they must securely exchange or agree upon an encryption key and a cipher to use when encrypting data (see Cipher). Among {{the methods used for}} key exchange/agreement are: public and private keys generated with RSA (denoted TLS_RSA in the TLS handshake protocol), <b>Diffie-Hellman</b> (TLS_DH), ephemeral <b>Diffie-Hellman</b> (TLS_DHE), Elliptic Curve <b>Diffie-Hellman</b> (TLS_ECDH), ephemeral Elliptic Curve <b>Diffie-Hellman</b> (TLS_ECDHE), anonymous <b>Diffie-Hellman</b> (TLS_DH_anon), pre-shared key (TLS_PSK) and Secure Remote Password (TLS_SRP).|$|E
25|$|In cryptography, modular {{arithmetic}} directly underpins {{public key}} {{systems such as}} RSA and <b>Diffie–Hellman,</b> and provides finite fields which underlie elliptic curves, and is used {{in a variety of}} symmetric key algorithms including Advanced Encryption Standard (AES), International Data Encryption Algorithm (IDEA), and RC4. RSA and <b>Diffie–Hellman</b> use modular exponentiation.|$|E
25|$|In cryptography, the {{difficulty}} of the discrete logarithm problem in finite fields or in elliptic curves is the basis of several widely used protocols, such as the <b>Diffie–Hellman</b> protocol. For example, in 2014 a secure internet connection to Wikipedia involved the elliptic curve <b>Diffie–Hellman</b> protocol (ECDHE) over a large finite field. In coding theory, many codes are constructed as subspaces of vector spaces over finite fields.|$|E
25|$|An {{attacker}} {{can then}} deduce the keys {{the client and}} server determine using the <b>Diffie–Hellman</b> key exchange.|$|E
25|$|Several public-key {{cryptography}} algorithms, such as RSA and the <b>Diffie–Hellman</b> key exchange, {{are based on}} large prime numbers (2048-bit primes are common). RSA relies {{on the assumption that}} it is much easier (i.e., more efficient) to perform the multiplication of two (large) numbers x and y than to calculate x and y (assumed coprime) if only the product xy is known. The <b>Diffie–Hellman</b> key exchange relies on {{the fact that there are}} efficient algorithms for modular exponentiation, while the reverse operation the discrete logarithm is thought to be a hard problem.|$|E
25|$|The 2013 mass {{surveillance}} disclosures made it {{more widely}} known that IIS is particularly bad in supporting perfect forward secrecy (PFS), especially when {{used in conjunction with}} Internet Explorer. Possessing one of the long term asymmetric secret keys used to establish a HTTPS session should not make it easier to derive the short term session key to then decrypt the conversation, even at a later time. <b>Diffie–Hellman</b> key exchange (DHE) and elliptic curve <b>Diffie–Hellman</b> key exchange (ECDHE) are in 2013 the only ones known to have that property. Only 30% of Firefox, Opera, and Chromium Browser sessions use it, and nearly 0% of Apple's Safari and Microsoft Internet Explorer sessions.|$|E
25|$|The decisional <b>Diffie–Hellman</b> (DDH) {{assumption}} is a computational hardness assumption about a certain problem involving discrete logarithms in cyclic groups. It {{is used as}} the basis to prove the security of many cryptographic protocols, most notably the ElGamal and Cramer–Shoup cryptosystems.|$|E
25|$|Integer factorization, which underpins the {{security}} of public key cryptographic systems, {{is believed to be}} computationally infeasible with an ordinary computer for large integers if they are the product of few prime numbers (e.g., products of two 300-digit primes). By comparison, a quantum computer could efficiently solve this problem using Shor's algorithm to find its factors. This ability would allow a quantum computer to decrypt many of the cryptographic systems in use today, in the sense {{that there would be a}} polynomial time (in the number of digits of the integer) algorithm for solving the problem. In particular, most of the popular public key ciphers are based on the difficulty of factoring integers or the discrete logarithm problem, both of which can be solved by Shor's algorithm. In particular the RSA, <b>Diffie-Hellman,</b> and elliptic curve <b>Diffie-Hellman</b> algorithms could be broken. These are used to protect secure Web pages, encrypted email, and many other types of data. Breaking these would have significant ramifications for electronic privacy and security.|$|E
25|$|To much surprise, a {{document}} published in 1997 by the Government Communications Headquarters (GCHQ), a British intelligence organization, revealed that cryptographers at GCHQ had anticipated several academic developments. Reportedly, around 1970, James H. Ellis had conceived {{the principles of}} asymmetric key cryptography. In 1973, Clifford Cocks invented a solution that essentially resembles the RSA algorithm. And in 1974, Malcolm J. Williamson is claimed to have developed the <b>Diffie–Hellman</b> key exchange.|$|E
25|$|Forward secrecy is a {{property}} of cryptographic systems which ensures that a session key {{derived from a}} set {{of public and private}} keys will not be compromised if one of the private keys is compromised in the future. Without forward secrecy, if the server's private key is compromised, not only will all future TLS-encrypted sessions using that server certificate be compromised, but also any past sessions that used it as well (provided of course that these past sessions were intercepted and stored at the time of transmission). An implementation of TLS can provide forward secrecy by requiring the use of ephemeral <b>Diffie-Hellman</b> key exchange to establish session keys, and some notable TLS implementations do so exclusively: e.g., Gmail and other Google HTTPS services that use OpenSSL. However, many clients and servers supporting TLS (including browsers and web servers) are not configured to implement such restrictions. In practice, unless a web service uses <b>Diffie-Hellman</b> key exchange to implement forward secrecy, all of the encrypted web traffic to and from that service can be decrypted by a third party if it obtains the server's master (private) key; e.g., by means of a court order.|$|E
25|$|In public-key cryptosystems, {{the public}} key may be freely distributed, while its paired private key must remain secret. In a public-key {{encryption}} system, the public key {{is used for}} encryption, while the private or secret key is used for decryption. While Diffie and Hellman could not find such a system, they showed that public-key cryptography was indeed possible by presenting the <b>Diffie–Hellman</b> key exchange protocol, a solution that is now widely used in secure communications to allow two parties to secretly agree on a shared encryption key.|$|E
25|$|Support for {{wireless}} networks {{is built}} into the network stack itself, and does not emulate wired connections, {{as was the case with}} previous versions of Windows. This allows implementation of wireless-specific features such as larger frame sizes and optimized error recovery procedures. Windows Vista uses various techniques like Receive Window Auto-scaling, Explicit Congestion Notification, TCP Chimney offload and Compound TCP to improve networking performance. Quality of Service (QoS) policies can be used to prioritize network traffic, with traffic shaping available to all applications, even those that do not explicitly use QoS APIs. Windows Vista includes in-built support for peer-to-peer networks and SMB 2.0. For improved network security, Windows Vista supports for 256-bit and 384-bit <b>Diffie-Hellman</b> (DH) algorithms, as well as for 128-bit, 192-bit and 256-bit Advanced Encryption Standard (AES) is included in the network stack itself, while integrating IPsec with Windows Firewall.|$|E
500|$|Exponentiation in finite fields has {{applications}} in public key cryptography. [...] For example, the <b>Diffie–Hellman</b> key exchange uses {{the fact that}} exponentiation is computationally inexpensive in finite fields, whereas the discrete logarithm (the inverse of exponentiation) is computationally expensive.|$|E
500|$|... where x is {{an element}} of the group. Carrying out the exponentiation can be done efficiently, but the {{discrete}} logarithm is believed to be very hard to calculate in some groups. This asymmetry has important applications in public key cryptography, such as for example in the <b>Diffie–Hellman</b> key exchange, a routine that allows secure exchanges of cryptographic keys over unsecured information channels. Zech's logarithm is related to the discrete logarithm in the multiplicative group of non-zero elements of a finite field.|$|E
2500|$|Logjam is a {{security}} exploit discovered in May 2015 that exploits {{the option of}} using legacy [...] "export-grade" [...] 512-bit <b>Diffie–Hellman</b> groups {{dating back to the}} 1990s. [...] It forces susceptible servers to downgrade to cryptographically weak 512 bit <b>Diffie-Hellman</b> groups.|$|E
2500|$|Even where <b>Diffie-Hellman</b> key {{exchange}} is implemented, server-side session management mechanisms can impact forward secrecy. The use of TLS session tickets (a TLS extension) causes the session {{to be protected}} by AES128-CBC-SHA256 regardless of any other negotiated TLS parameters, including forward secrecy ciphersuites, and the long-lived TLS session ticket keys defeat the attempt to implement forward secrecy. [...] Stanford University research in 2014 also found that of 473,802 TLS servers surveyed, 82.9% of the servers deploying ephemeral <b>Diffie-Hellman</b> (DHE) key exchange to support forward secrecy were using weak Diffie Hellman parameters. These weak parameter choices could potentially compromise {{the effectiveness of the}} forward secrecy that the servers sought to provide.|$|E
2500|$|The <b>Diffie–Hellman</b> and RSA algorithms, in {{addition}} to being the first publicly known examples of high quality public-key algorithms, have been among the most widely used. Others include the Cramer–Shoup cryptosystem, ElGamal encryption, and various elliptic curve techniques. See [...]|$|E
2500|$|The DDH {{assumption}} is {{also related to}} the computational <b>Diffie–Hellman</b> assumption (CDH). [...] If it were possible to efficiently compute [...] from , then one could easily distinguish the two probability distributions above. [...] Similar to above, DDH is considered a stronger assumption than CDH.|$|E
2500|$|... uses <b>Diffie-Hellman</b> key {{exchange}} to securely {{generate a}} random and unique session key for encryption and decryption {{that has the}} additional property of forward secrecy: if the server's private key is disclosed in future, it cannot be used to decrypt the current session, even if the session is intercepted and recorded by a third party.|$|E
2500|$|Public-key {{algorithms}} {{are most}} often based on the computational complexity of [...] "hard" [...] problems, often from number theory. For example, the hardness of RSA {{is related to the}} integer factorization problem, while <b>Diffie–Hellman</b> and DSA are related to the discrete logarithm problem. More recently, elliptic curve cryptography has developed, a system in which security is based on number theoretic problems involving elliptic curves. Because of the difficulty of the underlying problems, most public-key algorithms involve operations such as modular multiplication and exponentiation, which are much more computationally expensive than the techniques used in most block ciphers, especially with typical key sizes. As a result, public-key cryptosystems are commonly hybrid cryptosystems, in which a fast high-quality symmetric-key encryption algorithm is used for the message itself, while the relevant symmetric key is sent with the message, but encrypted using a public-key algorithm. Similarly, hybrid signature schemes are often used, in which a cryptographic hash function is computed, and only the resulting hash is digitally signed.|$|E
5000|$|DL/ECKAS-DH1 and DL/ECKAS-DH2 (Discrete Logarithm/Elliptic Curve Key Agreement Scheme, <b>Diffie-Hellman</b> version): This {{includes}} both traditional <b>Diffie-Hellman</b> and elliptic curve <b>Diffie-Hellman.</b>|$|E
5000|$|<b>Diffie-Hellman</b> (DH) - this {{contains}} cryptographic information {{supporting the}} <b>Diffie-Hellman</b> protocol.|$|E
50|$|Before {{a client}} and server {{can begin to}} {{exchange}} information protected by TLS, they must securely exchange or agree upon an encryption key and a cipher to use when encrypting data (see Cipher). Among {{the methods used for}} key exchange/agreement are: public and private keys generated with RSA (denoted TLS_RSA in the TLS handshake protocol), <b>Diffie-Hellman</b> (TLS_DH), ephemeral <b>Diffie-Hellman</b> (TLS_DHE), Elliptic Curve <b>Diffie-Hellman</b> (TLS_ECDH), ephemeral Elliptic Curve <b>Diffie-Hellman</b> (TLS_ECDHE), anonymous <b>Diffie-Hellman</b> (TLS_DH_anon), pre-shared key (TLS_PSK) and Secure Remote Password (TLS_SRP).|$|E
5000|$|ECDH: {{support for}} {{elliptic}} curve <b>Diffie-Hellman</b> rather than plain <b>Diffie-Hellman</b> for encryption key exchange.|$|E
5000|$|The {{elliptic}} curve <b>Diffie-Hellman</b> (ECDH) key agreement scheme {{is based on}} the <b>Diffie-Hellman</b> scheme, ...|$|E
50|$|If the decisional <b>Diffie-Hellman</b> {{assumption}} (DDH) {{holds in}} , thenCEILIDH achieves semantic security. Semantic security is not {{implied by the}} computational <b>Diffie-Hellman</b> assumption alone. See decisional <b>Diffie-Hellman</b> assumption {{for a discussion of}} groups where the assumption is believed to hold.|$|E
5000|$|RSA, <b>Diffie-Hellman</b> key exchange, Elliptic curve {{cryptography}} (ECC), Elliptic curve <b>Diffie-Hellman</b> (ECDH), Elliptic Curve DSA (ECDSA) ...|$|E
50|$|The {{protocol}} {{consists of}} {{little more than}} a <b>Diffie-Hellman</b> key exchange where the <b>Diffie-Hellman</b> generator g is created from a hash of the password.|$|E
5000|$|Added {{support for}} <b>Diffie-Hellman</b> modular exponentiation, Domain Data Conservation for <b>Diffie-Hellman,</b> Elliptic Curve and DSA keys, RSA-3072, SHA3, plain ECDSA, AES CMAC, AES CTR.|$|E
5000|$|Logjam is a {{security}} exploit discovered in May 2015 that exploits {{the option of}} using legacy [...] "export-grade" [...] 512-bit <b>Diffie-Hellman</b> groups {{dating back to the}} 1990s. [...] It forces susceptible servers to downgrade to cryptographically weak 512 bit <b>Diffie-Hellman</b> groups.An attacker can then deduce the keys the client and server determine using the <b>Diffie-Hellman</b> key exchange.|$|E
5000|$|The RLWE Key Exchange is {{designed}} to be a [...] "quantum safe" [...] replacement for the widely used <b>Diffie-Hellman</b> and Elliptic Curve <b>Diffie-Hellman</b> key exchanges that are used to secure the establishment of secret keys over untrusted communications channels. Like <b>Diffie-Hellman</b> and Elliptic Curve <b>Diffie-Hellman,</b> the Ring-LWE key exchange provides a cryptographic property called [...] "forward secrecy"; the aim of which is to reduce the effectiveness of mass surveillance programs and ensure that there are no long term secret keys that can be compromised that would enable bulk decryption.|$|E
50|$|The Finite Field <b>Diffie-Hellman</b> {{algorithm}} has {{roughly the}} same key strength as RSA for the same key sizes. The work factor for breaking <b>Diffie-Hellman</b> {{is based on the}} discrete logarithm problem, which is related to the integer factorization problem on which RSA's strength is based. Thus, a 3072-bit <b>Diffie-Hellman</b> key has about the same strength as a 3072-bit RSA key.|$|E
5000|$|RSA, DSA, ECDSA, <b>Diffie-Hellman,</b> EC <b>Diffie-Hellman,</b> AES, Triple DES, Camellia, IDEA, SEED, DES, RC2, RC4, SHA-1, SHA-256, SHA-384, SHA-512, MD2, MD5, HMAC: Common {{cryptographic}} {{algorithms used}} in public-key and symmetric-key cryptography.|$|E
5000|$|... s2n {{support the}} main ciphers in use today, such as AES in CBC and GCM modes, 3DES and RC4.It also {{provides}} support for perfect forward secrecy through <b>Diffie-Hellman</b> or Elliptic curve <b>Diffie-Hellman</b> ephemeral keys.|$|E
50|$|A key {{exchange}} {{algorithm is}} a type of public key algorithm which establishes a shared secret key between two communicants on a communications link. The classic example of a key exchange is the <b>Diffie-Hellman</b> key exchange. The exchange consists of one transmission {{from one end of the}} line and one transmission from the other end of the link. <b>Diffie-Hellman</b> and Elliptic Curve <b>Diffie-Hellman</b> are the two most popular key exchange algorithms.|$|E
5000|$|Let now [...] be a multiplicative {{group of}} order [...] The {{security}} of the <b>Diffie-Hellman</b> protocol in [...] relies on the <b>Diffie-Hellman</b> (DH) problem of computing [...] We write [...]There are two other problems related to the DH problem. The first one is the <b>Diffie-Hellman</b> Decision (DHD) problem to determine if [...] for given [...] and the second one is the Discrete Logarithm (DL) problem to find [...] for a given [...]|$|E
