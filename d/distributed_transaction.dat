261|424|Public
25|$|Another common reason {{nowadays}} for Global serializability relaxation is {{the requirement}} of availability of internet products and services. This requirement is typically answered by large scale data replication. The straightforward solution for synchronizing replicas' updates of a same database object is including all these updates in a single atomic <b>distributed</b> <b>transaction.</b> However, with many replicas such a transaction is very large, and may span several computers and networks {{that some of them}} are likely to be unavailable. Thus such a transaction is likely to end with abort and miss its purpose.|$|E
2500|$|Most {{existing}} database systems, {{including all}} major commercial database systems, are strong strict two phase locking (SS2PL) based and already CO compliant. Thus they {{can participate in}} a CO based solution for global serializability in multidatabase environments without any modification (except for the popular multiversioning, where additional CO aspects should be considered). Achieving global serializability across SS2PL based databases using atomic commitment (primarily using two phase commit, 2PC) has been employed for many years (i.e., using the same CO solution for a specific special case; however, no reference is known prior to CO, that notices this special case's automatic global deadlock resolution by the atomic commitment protocol's augmented-conflict-graph global cycle elimination process). Virtually all existing <b>distributed</b> <b>transaction</b> processing environments and supporting products rely on SS2PL and provide 2PC. As {{a matter of fact}} SS2PL together with 2PC have become a de facto standard. This solution is a homogeneous concurrency control one, suboptimal (when both Serializability and Strictness are needed; see Strict commitment ordering; SCO) but still quite effective in most cases, sometimes at the cost of increased computing power needed relatively to the optimum. (However, for better performance relaxed serializability is used whenever applications allow). It allows inter-operation among SS2PL-compliant different database system types, i.e., allows heterogeneity in aspects other than concurrency control. SS2PL is a very constraining schedule property, and [...] "takes over" [...] when combined with any other property. For example, when combined with any optimistic property, the result is not optimistic anymore, but rather characteristically SS2PL. On the other hand, CO does not change data-access scheduling patterns at all, and any combined property's characteristics remain unchanged. Since also CO uses atomic commitment (e.g., 2PC) for achieving global serializability, as SS2PL does, any CO compliant database system or transactional object can transparently join existing SS2PL based environments, use 2PC, and maintain global serializability without any environment change. This makes CO a straightforward, natural generalization of SS2PL for any conflict serializability based database system, for all practical purposes.|$|E
5000|$|COM+, Microsoft Transaction Server and <b>Distributed</b> <b>Transaction</b> Coordinator ...|$|E
5000|$|Pervasive PSQL {{lacks the}} ability to perform <b>distributed</b> <b>transactions.</b>|$|R
5000|$|Controlling various {{transactional}} {{requirements for}} <b>distributed</b> <b>transactions,</b> e.g. ACID-testing the data.|$|R
5000|$|Azure SQL Database now {{supports}} <b>distributed</b> <b>transactions</b> {{using the}} updated System.Transactions APIs [...]|$|R
5000|$|Oracle XA {{connectivity}} (X/Open <b>Distributed</b> <b>Transaction</b> Processing XA interface) ...|$|E
5000|$|The Clustrix {{distributed}} SQL database uses Paxos for <b>distributed</b> <b>transaction</b> resolution.|$|E
5000|$|US Patent No. 8,190,588 â€” [...] "Providing a <b>distributed</b> <b>transaction</b> {{information}} storage service" ...|$|E
5000|$|For {{those systems}} that support full <b>distributed</b> <b>transactions,</b> {{operations}} enjoy the ACID properties: ...|$|R
40|$|The common {{wisdom is}} that <b>distributed</b> <b>transactions</b> do not scale. But what if <b>distributed</b> <b>transactions</b> could be made {{scalable}} using {{the next generation of}} networks and a redesign of distributed databases? There would be no need for developers anymore to worry about co-partitioning schemes to achieve decent performance. Application development would become easier as data placement would no longer determine how scalable an application is. Hardware provisioning would be simplified as the system administrator can expect a linear scale-out when adding more machines rather than some complex sub-linear function, which is highly application specific. In this paper, we present the design of our novel scalable database system NAM-DB and show that <b>distributed</b> <b>transactions</b> with the very common Snapshot Isolation guarantee can indeed scale using the next generation of RDMA-enabled network technology without any inherent bottlenecks. Our experiments with the TPC-C benchmark show that our system scales linearly to over 6. 5 million new-order (14. 5 million total) <b>distributed</b> <b>transactions</b> per second on 56 machines. Comment: 12 page...|$|R
30|$|First, the {{scalable}} workload-driven partitioning scheme aims {{to minimize}} the <b>distributed</b> <b>transactions</b> than the existing static partitioning scheme.|$|R
5000|$|Enduro/X ASG, {{a cluster}} middleware, {{application}} server, <b>distributed</b> <b>transaction</b> and multi-processing framework for Go.|$|E
50|$|Following the standard, a <b>distributed</b> <b>transaction</b> has a coordinator, an initiator, {{and one or}} more participants.|$|E
5000|$|Enduro/X - A {{middleware}} {{platform for}} <b>distributed</b> <b>transaction</b> processing, based on XATMI and XA standards, open source ...|$|E
50|$|NonStop SQL is {{designed}} to run effectively on parallel computers, adding functionality for distributed data, distributed execution, and <b>distributed</b> <b>transactions.</b>|$|R
50|$|In <b>distributed</b> <b>transactions,</b> all {{participating}} servers must coordinate before commit can be acknowledged. This {{is usually}} {{done by a}} two-phase commit protocol.|$|R
50|$|Versant {{supports}} the XA protocol for <b>distributed</b> <b>transactions.</b> This allows participation in online <b>distributed</b> <b>transactions</b> with relational databases. The {{interaction with the}} relational tables can take many forms from custom code to ORM solutions to J2EE application servers (Entity Relationship Modeling) to message passing to ORBs, etc. The XA API allows the Versant database {{to act as a}} resource controlled by an external transaction monitor coordinating changes to both Versant and relational databases in the same transactional context.|$|R
50|$|Several modern technologies, {{including}} Enterprise Java Beans (EJBs) and Microsoft Transaction Server (MTS) fully support <b>distributed</b> <b>transaction</b> standards.|$|E
5000|$|X/Open XA <b>distributed</b> <b>transaction</b> {{processing}} (DTP) support; two phase commit {{as part of}} this, {{using the}} default InnoDB storage engine ...|$|E
50|$|By default, the Microsoft <b>Distributed</b> <b>Transaction</b> Coordinator (MSDTC) {{service is}} {{installed}} with Windows 2000. It cannot be uninstalled through Add/Remove Programs.|$|E
50|$|Processor Consistency {{is one of}} the {{consistency}} models used in the domain of concurrent computing (e.g. in distributed shared memory, <b>distributed</b> <b>transactions,</b> etc.).|$|R
50|$|The Namesys Reiser4 {{filesystem}} for Linux supports transactions, {{and as of}} Microsoft Windows Vista, the Microsoft NTFS filesystem supports <b>distributed</b> <b>transactions</b> across networks.|$|R
50|$|Using cursors in <b>distributed</b> <b>transactions</b> (X/Open XA Environments), {{which are}} {{controlled}} using a transaction monitor, {{is no different}} from cursors in non-distributed transactions.|$|R
50|$|Database systems {{implement}} distributed transactions as transactions against {{multiple applications}} or hosts. A <b>distributed</b> <b>transaction</b> enforces the ACID properties over multiple systems or data stores, and might include {{systems such as}} databases, file systems, messaging systems, and other applications. In a <b>distributed</b> <b>transaction</b> a coordinating service ensures that {{all parts of the}} transaction are applied to all relevant systems. As with database and other transactions, if any part of the transaction fails, the entire transaction is rolled back across all affected systems.|$|E
50|$|Open Group, {{a vendor}} consortium, {{proposed}} the X/Open <b>Distributed</b> <b>Transaction</b> Processing (DTP) Model (X/Open XA), {{which became a}} de facto standard for behavior of transaction model components.|$|E
50|$|ASG is {{bindings}} {{project on}} top of the Enduro/X. Authors considers these binding as application server for go, because Golang projects are linked statically and by default {{there is no such thing}} as components. Enduro/X allows to run separate executable binaries, which represents stateless services. These services can be reloaded on the fly without service interruption. Also platform allows to run <b>distributed</b> <b>transaction</b> processing by using Golang. Developers provides modified Oracle DB OCI8 drivers for Go, which supports XA transactions. Enduro/X ASG provides first ever <b>distributed</b> <b>transaction</b> facility for Golang.|$|E
50|$|Strong {{consistency}} {{is one of}} {{the consistency}} models used in the domain of the concurrent programming (e.g., in distributed shared memory, <b>distributed</b> <b>transactions).</b>|$|R
50|$|Release {{consistency}} {{is one of}} the synchronization-based consistency models used in {{the domain}} of the concurrent programming (e.g. in distributed shared memory, <b>distributed</b> <b>transactions</b> etc.).|$|R
40|$|The article {{provides}} asynchronous algorithm for <b>distributed</b> <b>transactions,</b> which excludes share blocking during transaction execution and commit. This approach significantly increases the throughput of distributed systems. ? ?????? ??????????????? ???????? ?????????? ?????????????? ??????????, ??????????? ???????????? ?????? ??????? ??? ?????????? ? ???????? ??????????. ????? ?????? ??????????? ???????? ?????????? ??????????? ?????????????? ??????...|$|R
50|$|The OS 2200 {{communications}} {{management system}} includes CPComm and MCB {{along with many}} programs that provide communications related functions such as file transfer, e-mail, and <b>distributed</b> <b>transaction</b> processing protocols.|$|E
5000|$|In a [...] "normal execution" [...] of {{any single}} <b>distributed</b> <b>transaction</b> ( [...] i.e., when no failure occurs, which is {{typically}} {{the most frequent}} situation), the protocol consists of two phases: ...|$|E
50|$|The entire CO {{solution}} for global serializability {{is based on}} the fact that in case of a missing vote for a <b>distributed</b> <b>transaction,</b> the atomic commitment protocol eventually aborts this transaction.|$|E
5000|$|Delta {{consistency}} {{is one of}} {{the consistency}} models used in the domain of parallel programming, for example in distributed shared memory, <b>distributed</b> <b>transactions,</b> and Optimistic replication ...|$|R
40|$|Abstract. It {{is aimed}} at the {{limitation}} of the network traffic which is generated during the realization of two-phase-commit protocol of <b>distributed</b> <b>transactions</b> in <b>distributed</b> database systems. This paper presents {{the way of the}} decrease of the number and the way of the diminution of the size of messages sent during <b>distributed</b> <b>transactions</b> as the manner of the limitation of the network traffic. Multiagent system is employed for attendance of confirmation of two-phase <b>distributed</b> <b>transactions.</b> The paper presents the manner of the limitation of the network traffic in multiagent systems as the use of mobile agents as resources managers of databases, static agents as coordinators of transactions and static agents as managers of transactions. These agents communicate via two-phasecommit protocols. The paper presents the performance experiments enabling the comparison of two-phase-commit protocols, the protocol elaborated in the paper and the protocol described in the literature. ...|$|R
40|$|For {{datacenter}} {{applications that}} require tight synchronization, transactions are commonly employed for achieving concurrency while preserving correctness. Unfortunately, <b>distributed</b> <b>transactions</b> {{are hard to}} scale due to the decentralized lock acquisition and coordination protocols they employ. In this paper, we show {{that it is possible}} to achieve scalability for <b>distributed</b> <b>transactions</b> by using a lock broker architecture, and present the design and development of such a framework, called PANOPTICON. Panopticon achieves scalability by divorcing locks from the data items and striving to improve lock access locality. A lock can be hosted at the lock broker or at a different server than the server that hosts the corresponding data item. The lock broker mediates the access to data shared across servers by migrating the associated locks like tokens, and in the process gets to learn about the access patterns of transactions. We show that the broker can drastically improve the lock access locality and, hence, the performance of <b>distributed</b> <b>transactions</b> by employing simple rules. Our experiments show that Panopticon performed significantly better than <b>distributed</b> <b>transactions</b> as the the number of data items and number of servers involved in transactions increase. Moreover, as the history locality (the probability of using the same objects in consecutive transactions) increase, Panopticonâ€™s lock migration strategies improved lock-access locality and resulted in significantly better performance. ...|$|R
