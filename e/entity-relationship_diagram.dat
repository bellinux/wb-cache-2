68|131|Public
5000|$|... #Caption: An <b>entity-relationship</b> <b>diagram</b> for an MMORPG using Chen's notation.|$|E
50|$|This language's {{purpose is}} to define the {{structure}} of an <b>Entity-relationship</b> <b>diagram.</b>|$|E
50|$|An {{entity-relationship}} model (ERM), {{sometimes referred to}} as an <b>entity-relationship</b> <b>diagram</b> (ERD), is an abstract conceptual data model (or semantic data model) used in software engineering to represent structured data. There are several notations used for ERMs.|$|E
5000|$|In his {{original}} 1976 article Chen explicitly contrasts <b>entity-relationship</b> <b>diagrams</b> with record modelling techniques: ...|$|R
5000|$|... #Caption: [...] All 4 MOF {{levels for}} <b>Entity-Relationship</b> <b>Diagrams</b> {{displayed}} in the ConceptBase Graph Editor ...|$|R
50|$|REA {{systems have}} usually been modeled as {{relational}} databases with <b>entity-relationship</b> <b>diagrams,</b> {{though this is}} not compulsory.|$|R
50|$|Design {{elements}} {{describe the}} desired system features in detail, and generally include functional hierarchy diagrams, screen layout diagrams, tables of business rules, business process diagrams, pseudo-code, {{and a complete}} <b>entity-relationship</b> <b>diagram</b> with a full data dictionary. These design elements are intended to describe the system in sufficient detail, such that skilled developers and engineers may develop and deliver the system with minimal additional input design.|$|E
5000|$|The {{categories}} of data are numerous, growing or fluctuating, {{but the number of}} instances (records/rows) within each category is very small. Here, with conventional modeling, the database’s <b>entity-relationship</b> <b>diagram</b> might have hundreds of tables: the tables that contain thousands/ millions of rows/instances are emphasized visually to the same extent as those with very few rows. The latter are candidates for conversion to an EAV representation.|$|E
5000|$|When {{building}} a RDB {{representation of a}} problem domain, the starting point is frequently an <b>entity-relationship</b> <b>diagram</b> (ERD). Typically, each entity is represented as a database table, each attribute of the entity becomes a column in that table, and relationships between entities are indicated by foreign keys. Each table typically defines a particular class of entity, each column one of its attributes. Each row in the table describes an entityinstance, uniquely identified by a primary key. The table rows collectively describe an entity set. In an equivalent RDF representation of the same entity set: ...|$|E
40|$|This {{research}} compares fundamental concepts {{from the}} grounded theory approach to {{social science research}} and concepts from <b>entity-relationship</b> <b>diagramming,</b> a technique used to model data {{from the field of}} systems analysis. The research finds a strong correspondence between these two sets of concepts and suggests that the <b>entity-relationship</b> <b>diagramming</b> technique may be a useful addition to the social scientist's toolkit when carrying out research using the grounded theory approach...|$|R
5000|$|Visual schema/E-R design: {{the ability}} to draw <b>entity-relationship</b> <b>diagrams</b> for the database. If missing, the {{following}} two features will also be missing ...|$|R
5000|$|Structured Analysis (SA) editors for <b>entity-relationship</b> <b>diagrams,</b> {{data and}} event flow diagrams, state {{transition}} diagrams, function refinement trees, transaction-use tables and function-entity type tables.|$|R
5000|$|Version 7, {{released}} in 2004, {{introduced a new}} file format (file extension [...]fp7) supporting file sizes up to 8 terabytes (an increase from the 2 gigabytes in previous versions). Individual fields could hold up to 4 gigabytes of binary data (container fields) or 2 gigabytes of 2-byte Unicode text per record (up from 64 kilobytes in previous versions). FileMaker's relational model was enriched, offering multiple tables per file and a graphical relationship editor that displayed and allowed manipulation of related tables {{in a manner that}} resembled the <b>entity-relationship</b> <b>diagram</b> format. Accompanying these foundational changes, FileMaker Inc. also introduced a developer certification program.|$|E
50|$|The 1:1 mapping {{mentioned}} above exposes the legacy data as RDF in a straightforward way, additional refinements {{can be employed}} to improve the usefulness of RDF output respective the given Use Cases. Normally, information is lost during the transformation of an <b>entity-relationship</b> <b>diagram</b> (ERD) to relational tables (Details {{can be found in}} object-relational impedance mismatch) and has to be reverse engineered. From a conceptual view, approaches for extraction can come from two directions. The first direction tries to extract or learn an OWL schema from the given database schema. Early approaches used a fixed amount of manually created mapping rules to refine the 1:1 mapping. More elaborate methods are employing heuristics or learning algorithms to induce schematic information (methods overlap with ontology learning). While some approaches try to extract the information from the structure inherent in the SQL schema (analysing e.g. foreign keys), others analyse the content and the values in the tables to create conceptual hierarchies (e.g. a columns with few values are candidates for becoming categories). The second direction tries to map the schema and its contents to a pre-existing domain ontology (see also: ontology alignment). Often, however, a suitable domain ontology does not exist and has to be created first.|$|E
50|$|Organize {{workshop}} {{activities and}} exercises: The facilitator must design workshop exercises and activities to provide interim deliverables that build towards the final {{output of the}} workshop. The pre-workshop activities help design those workshop exercises. For example, for a Business Area Analysis, what's in it? A decomposition diagram? A high-level <b>entity-relationship</b> <b>diagram?</b> A normalized data model? A state transition diagram? A dependency diagram? All of the above? None of the above? It is important to define the level of technical diagramming that is appropriate to the environment. The {{most important thing about}} a diagram is that it must be understood by the users. Once the diagram choice is made, the facilitator designs exercises into the workshop agenda to get the group to develop those diagrams. A workshop combines exercises that are serially oriented to build on one another, and parallel exercises, with each sub-team working on a piece of the problem or working on the same thing for a different functional area. High-intensity exercises led by the facilitator energize the group and direct it towards a specific goal. Low-intensity exercises allow for detailed discussions before decisions. The discussions can involve the total group or teams can work out the issues and present a limited number of suggestions for the whole group to consider. To integrate the participants, the facilitator can match people with similar expertise from different departments. To help participants learn from each other, the facilitator can mix the expertise. It's up to the facilitator to mix and match the sub-team members to accomplish the organizational, cultural, and political objectives of the workshop. A workshop operates on both the technical level and the political level. It is the facilitator's job to build consensus and communications, to force issues out early in the process. There is no need to worry about the technical implementation of a system if the underlying business issues cannot be resolved.|$|E
40|$|Thesis {{discuss the}} issues, that occurs during the {{database}} design using <b>entity-relationship</b> <b>diagrams,</b> problems with defining relational <b>diagrams</b> based on <b>entity-relationship</b> <b>diagrams</b> and features of automatization of such conversion. Furthermore, the thesis discuss {{the design and}} realization of an application for database education support, its parts and features. The main output of the thesis is a graphical software environment, applicable to database teaching, that simplifies creation a design of <b>entity-relationship</b> <b>diagrams.</b> One of the features {{will be able to}} generate SQL code, optimized for MSSQL Server 2008. This environment will be implemented as network application, accessible from internet in an internet browser, programmed by using ASP. NET and Silverlight technologies. The application will contain user administration. The application will allow the user to save and load his solutions and generate SQL code based on the diagram. The SQL code defines the structure of a database in MSSQL Server 2008...|$|R
50|$|In {{software}} engineering, an {{entity-relationship model}} (ERM) is an abstract and conceptual representation of data. Entity-relationship modeling is a database modeling method, {{used to produce}} a type of conceptual schema or semantic data model of a system, often a relational database, and its requirements in a top-down fashion. Diagrams created by this process are called <b>entity-relationship</b> <b>diagrams,</b> ER diagrams, or ERDs.|$|R
5000|$|... yEd {{can be used}} to draw many {{different}} types of diagrams, including flowcharts, network diagrams, UMLs, BPMN, mind maps, organization charts, and <b>entity-relationship</b> <b>diagrams.</b> yEd also allows the use of custom vector and raster graphics as diagram elements.|$|R
40|$|The {{more closely}} {{structures}} approximate {{the way people}} think, the easier they are for people to understand, remember, and use. This paper explores whether a dimensional data model is easier to remember than an <b>entity-relationship</b> <b>diagram</b> of similar size and complexity. A laboratory experiment is conducted to determine which modeling method results in more accurate recall. The results show that users are able to recall {{the elements of a}} dimensional data model much more accurately than they are able to recall the elements of an <b>entity-relationship</b> <b>diagram.</b> Further {{research is needed to determine}} whether easier recall translates into easier use. Keywords: Dimensional Data Model; Star-Join Schema; <b>Entity-Relationship</b> <b>Diagram,</b> Normalized Relational Schem...|$|E
40|$|Information systems {{research}} uses {{conceptual modelling}} to represent {{many aspects of}} a domain. The <b>Entity-Relationship</b> <b>Diagram</b> [4] was developed to deal with data modelling and the Data Flow Diagram [5] to handle how information was transferred and transformed in an organization. However, most of these diagrams do no...|$|E
40|$|Database {{design is}} an {{important}} phase of the database development process. Basic concepts and methodologies used on the several database design phases will be covered: - Identification of {{the main components of}} the <b>Entity-Relationship</b> <b>Diagram</b> (ERD). - Translating the ERD into relational tables (relational model) - Data normalization Communicating with the database using basic SQL statements will also be presented...|$|E
50|$|ERIL (Entity-Relationship and Inheritance Language) is {{a visual}} {{language}} for representing the data {{structure of a}} computer system.As its name suggests, ERIL is based on <b>entity-relationship</b> <b>diagrams</b> and class diagrams.ERIL combines the relational and object-oriented approaches to data modeling.|$|R
50|$|The {{entity-relationship}} model proposes {{a technique that}} produces <b>entity-relationship</b> <b>diagrams</b> (ERDs), which can be employed to capture information about data model entity types, relationships and cardinality. A Crow's foot shows a one-to-many relationship. Alternatively a single line represents a one-to-one relationship.|$|R
40|$|Software {{inspections}} {{have attracted}} much attention over the last 25 years. It is a method for static analysis of artefacts during software development. However, few studies look at inspections of <b>entity-relationship</b> <b>diagrams</b> (ER-diagrams), and in particular {{an evaluation of the}} number of defects, number of false-positives and the types of defects that are found by most reviewers. ER-diagrams are commonly used in the design of databases, which makes them an important modelling concept for many large software systems. This paper presents a large empirical study (486 subjects) where checklists were used for an inspection. The goodness in the evaluation is judged based on the type of defects the reviewers identify and the relationship between the detection of real defects and false positives. It is concluded that checklist-based inspections of <b>entity-relationship</b> <b>diagrams</b> is worthwhile. 1...|$|R
40|$|Large {{organizations}} {{are eager to}} seek ways to maximize {{the values of the}} information stored across the applications, information systems and even the web. However, various systems have their own domain models for the environments and tasks. Thus, the shared domain model for the heterogeneous information systems (IS) is required. In this paper, we try to integrate the techniques of <b>entity-relationship</b> <b>diagram</b> (ERD) and ontology. We aim to provide a better schema modeling in the information systems design...|$|E
40|$|In {{this article}} a {{relational}} database schema for a bibliometric database is developed. After the introduction explaining {{the motivation to}} use relational databases in bibliome-trics, {{an overview of the}} related literature is given. A review of typical bibliometric ques-tions serves as an informal requirement analysis. The database schema is developed as an <b>entity-relationship</b> <b>diagram</b> using the structural information typically found in scientific articles. Several SQL queries for the tasks presented in the requirement analysis show the usefulness of the developed database schema. [...] bibliometrics,relational database,SQL...|$|E
40|$|Eclipse is a Java {{integrated}} {{development environment}} (IDE) and tool integration platform that offers numerous extension points for customization through a plug-in architecture. This paper describes the design of an Eclipse plug-in called E-R Modeler. As a database design toolkit, the E-R Modeler provides an E-R (<b>Entity-Relationship)</b> <b>diagram</b> development environment that supports XML and DDL (Database Definition Language) generation tools. It also provides database connection and schema creation capabilities. As an Eclipse plug-In, it offers multiple extension points for other applications to build upon...|$|E
40|$|Graphs (networks) {{are very}} common data {{structures}} which are handled in computers. Diagrams {{are widely used}} to represent the graph structures visually in many information systems. In order to automatically draw the diagrams which are, for example, state graphs, data-flow graphs, Petri nets, and <b>entity-relationship</b> <b>diagrams,</b> basic graph drawing algorithms are required...|$|R
50|$|The {{logical design}} of a system {{pertains}} to an abstract representation of the data flows, inputs and outputs of the system. This is often conducted via modelling, using an over-abstract (and sometimes graphical) model of the actual system. In the context of systems, designs are included. Logical design includes <b>entity-relationship</b> <b>diagrams</b> (ER diagrams).|$|R
40|$|We {{discuss the}} design of an agent for {{coaching}} collaborative learning in a distance learning context. The learning domain is entity-relationship modeling, a domain in which collaborative problem solving is regularly practiced, and for which there exist formally interpretable representations of problem solutions known as <b>entity-relationship</b> <b>diagrams.</b> The design of the coach was based on socio-cognitive conflict theory, which states that collaborative learning is effective {{to the extent that}} learners identify and discuss conflicts in their beliefs. Students begin by constructing individual <b>entity-relationship</b> <b>diagrams</b> expressing their solution to a database modeling problem, and then work in small groups to agree upon a group solution. The coaching agent leverages learning opportunities by encouraging students to share and discuss solution components that conflict with components of the group solution. Our work shows one way to utilize domain specific knowledge in order to [...] ...|$|R
40|$|In {{object-oriented}} software engineering roles are considered both classifications and instances. To reduce {{the gap between}} the conceptual modeling of roles and a corresponding implementation, we propose a new role modeling concept based on warped inheritance hierarchies. We integrated this new modeling concept in our prototype-based object-oriented round-trip engineering environment SelfSync. In this way it is possible to model roles in an Extended <b>Entity-Relationship</b> <b>diagram</b> while the corresponding implementation objects are automatically created and synchronized with the conceptual model. We apply constraint enforcement during the lifetime of role objects, based on dependency and role combinations...|$|E
40|$|This paper {{introduces}} {{a proposal for}} supporting text interpretation process. This proposal is based on automatic generation of <b>Entity-Relationship</b> <b>Diagram</b> (ERD) from text. ERD is a conceptual schema used in software engineering. Furthermore, we present DER usability in text interpretation process, as well as techniques of Natural Language Processing and software engineering used in their automatic derivation. The obtained results show how DER can be a useful tool in text interpretation process assistance due to the supply of automatic inferences. This work {{is part of the}} magisterial research: “Method for class diagram operations recognition from conceptual graphs” finished in National University of Colombia under assessment of the Software Engineering Gr oup...|$|E
40|$|Modelling complex {{knowledge}} {{resources can}} be problematical {{as there is}} currently no formalism that can represent {{the nature of the}} data-seeking process at a conceptual level. We introduce the functional entity (FE), an encapsulated data resource that acts as a question-answering system, and identify nine different functional entities based on three main types of question-answer entailment: instance-dominant, value-dominant, and connection-dominant. We use functional entities to develop a generalisation of the <b>Entity-Relationship</b> <b>Diagram</b> (ERD), the Functional-Entity Relationship Diagram (FERD), which can be used for high level conceptual modelling of heterogeneous knowledge systems. We further describe extensions to the FERD that permit modelling of resources that cannot be represented by traditional propositional form, and extensions relevant to large-scale documentation...|$|E
40|$|Construction of {{software}} engineering tools is a challenging task. In the different {{phases of the}} software life cycle, a wide variety {{of software}} documents is created, including e. g. class <b>diagrams,</b> project plans, <b>entity-relationship</b> <b>diagrams,</b> etc. As a consequence, an equally large set of supporting tools has to be developed with affordable effort. Th...|$|R
50|$|Both {{normalized}} and dimensional {{models can}} be represented in <b>entity-relationship</b> <b>diagrams</b> as both contain joined relational tables. The {{difference between the two}} models is the degree of normalization (also known as Normal Forms). These approaches are not mutually exclusive, and there are other approaches. Dimensional approaches can involve normalizing data to a degree (Kimball, Ralph 2008).|$|R
40|$|This paper {{presents}} {{a tool that}} automatically generates multidimensional schemas for data warehouses from OLTP <b>entity-relationship</b> <b>diagrams</b> (ERDs). Based on user’s input parameters, it generates star schemas, snowflake schemas, or a fact constellation schema {{by taking advantage of}} only structural information of input ERDs. Hence, SAMSTARplus can help users reduce efforts for designing data warehouses and aids decision making. ...|$|R
