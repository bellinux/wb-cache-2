5|36|Public
5000|$|<b>Keyboard</b> <b>macro</b> support: [...] Multiple key can be {{combined}} to write custom word or sentence as a command.|$|E
5000|$|SPF {{filename}} Edit filename /Bfilename Browse filename /E Exit {{to command}} prompt after edit /Gglobal-profile-path Overrides set profile path /Iimacro-name Initial maro /Kkeyboard-macro-name Execute specified <b>keyboard</b> <b>macro</b> /L(line-number,col-number) Specify line-number/column /Pedit-profile-name Specify edit-profile /Rfile-name Merge compiler error file file-name /Sdialog-function Directly execute dialog: /SPANEL(panel-id)PARM(values) /SCMD(REXX-procedure-name)PARM(values) /SCTC(internal-function-name)PARM(values) /SPGM(external-program-name)PARM(values) /T Turn on profile trace [...] /n.n Goto panel id n.n ...|$|E
5000|$|Vedit has C-like macro language. It is interpreted, {{so there}} is no need for compiling. This makes it easy to {{automate}} your tasks or to add new features to Vedit. In fact, many of the built-in functions of Vedit have been done using the macro language. The macros can be called from a file on disk, or you can add them to User or Tools menu or to any <b>keyboard</b> <b>macro.</b>|$|E
5000|$|<b>Keyboard</b> <b>macros</b> can be {{recorded}} or typed in, {{or you can}} edit the whole keyboard configuration.|$|R
5000|$|Source code editors are text editors with {{additional}} functionality {{to facilitate the}} production of source code. These often feature user-programmable syntax highlighting and code navigation functions as well as coding tools or <b>keyboard</b> <b>macros</b> similar to an HTML editor (see below).|$|R
5000|$|Quattro Pro also {{contained}} a feature called [...] "Key Reader", which {{allowed it to}} execute Lotus 1-2-3 <b>keyboard</b> <b>macros.</b> In order to support this feature, Quattro Pro's code contained a copy of Lotus's menu hierarchy in which each command was represented by its first letter instead of its entire name.|$|R
5000|$|All {{of these}} {{controls}} can be programmed with the included [...] "Nostromo Array Programming Software" [...] to emulate any keyboard function or <b>keyboard</b> <b>macro.</b> They {{can also be}} programmed to change the device's [...] "state". The n52 has 4 different color-coded states, indicated by 3 LEDs below the fifteenth button. If a user changes {{the state of the}} device from the normal one, the red, green, or blue LED lights up, and all other controls now represent a different function. The state-button can be set to act as a temporary shift button that works while it is pressed, a toggle button, or it can be set to work until it is pressed again. In total, this allows up to 104 different functions. The software can recognize games by their executable filenames, and automatically load the appropriate profile when that game is started. User-created profiles, which are technically single files, can be submitted to Belkin via e-mail, making them available for others to download.|$|E
40|$|Keyboard macros provide shortcuts to many {{repetitive}} command sequences in Pro/Engineer. They map {{any number}} of frequently used command sequences to user-selected keyboard keys. They may be nested within each other and may also include user keyboard entry within the macro. Another powerful feature of Pro/Engineer is adding menu options. Menu options may be added to any Pro/Engineer menu and is {{an effective way to}} graphically display keyboard macros to make them more accessible. Command sequences are mapped to a single user-defined menu option added to the bottom of any Pro/Engineer window. The '{at}setbutton' command added to the 'menu{_}def. pro' file specifies the commands to associate with added menu options. Menu options may also be used to execute non-Pro/Engineer commands. The associated command is linked to a menu option within Pro/Engineer's Utilities menu (in the Misc menu) and is issued whenever the menu option is selected. Such a feature is useful for adding menu options to start the Pro/Engineer User Guide utility, start a text editor from within Pro/Engineer, or perform system level actions. The '{at}setbutton{_}exec' command is used in the 'menu{_}def. pro' file for non-Pro/Engineer commands. A more detailed description of adding menu options {{can be found in the}} Pro/Engineer Fundamentals Guide. Another useful component of Pro/Engineer is the trail file functionality. Trail files are automatically created every time a new working Pro/Engineer session begins. Although they are typically used to reconstruct a previous working session, they can also be used to automate a series of commands. By specifying all the commands in a trail file, a user can issue the commands quickly and repetitively using the command sequence 'Misc-Trail' and specifying the trail file name. All actions, including keyboard entries and mouse click locations, may be included in a trail file. Although adding menu options and using trial files provide powerful functionality in Pro/Engineer, neither the menu options functionality nor trail files allow interaction between the model and the commands to perform. The commands performed by the menu options are static and cannot depend on model features and parameters. Commands cannot query the model and perfonn different actions or calculations based on the query results; the menu options commands cannot interact with Pro/Engineer. As an example, suppose we wish to generate a feature listing for all parts and subassemblies in a model. We can add a menu option or a <b>keyboard</b> <b>macro</b> to make the feature listing command easier to execute, but we would still need to select each part and subassembly individually (either through screen selection, selection by menu, or entering the component name). The task becomes quite tedious if we have an assembly with a large number of subassembly and part components. A versatile and powerful method for automating many Pro/Engineer tasks is to combine the menu options functionality with Trail files and the infonnation files which Pro/Engineer creates during infonnation listings. The combination provides communication between Pro/Engineer and other programs and enables automation of a large variety of commands. The automation scheme is comprised of three components: (1) the infonnation files (usually with extensions 'inf' or ' 1 st'); (2) a menu option to issue a program or command external to Pro/Engineer; and (3) a menu option to run both the external program and its associated trail file...|$|E
50|$|<b>Keyboard</b> <b>macros</b> {{and mouse}} macros allow short {{sequences}} of keystrokes and mouse actions to transform into other, usually more time-consuming, sequences of keystrokes and mouse actions. In this way, frequently used or repetitive sequences of keystrokes and mouse movements can be automated. Separate programs for creating these macros are called macro recorders.|$|R
50|$|Joy2chord is a chorded {{keyboard}} {{driver for}} GNU/Linux. With a configuration file, any joystick or gamepad {{can be turned}} into a chorded keyboard. This design philosophy was decided on to lower the cost of building devices, and in turn lower the entry barrier to becoming familiar with chorded <b>keyboards.</b> <b>Macro</b> keys, and multiple modes are also easily implemented with a user space driver.|$|R
2500|$|The {{built-in}} operating system, Acorn MOS, {{provided an}} extensive API {{to interface with}} all standard peripherals, ROM-based software and the screen. Features private to some versions of BASIC, like vector graphics, <b>keyboard</b> <b>macros,</b> cursor-based editing, sound queues and envelopes, {{were placed in the}} MOS ROM and made available to any application. [...] BBC BASIC itself, being in a separate ROM, could be replaced with any equivalent language.|$|R
50|$|During the 1980s, macro {{programs}} - originally SmartKey, then SuperKey, KeyWorks, Prokey - {{were very}} popular, {{first as a}} means to automatically format screenplays, then for a variety of user input tasks. These programs were based on the TSR (terminate and stay resident) mode of operation and applied to all keyboard input, no matter in which context it occurred. They have to some extent fallen into obsolescence following the advent of mouse-driven user interface and the availability of <b>keyboard</b> and mouse <b>macros</b> in applications such as word processors and spreadsheets, making it possible to create application-sensitive <b>keyboard</b> <b>macros.</b>|$|R
50|$|The client {{software}} currently {{allows for a}} powerful combination of user-defined <b>keyboard</b> shortcuts, <b>macros,</b> colors, highlights, aliases, nicknames, and alerts.|$|R
50|$|Emacs is {{primarily}} a text editor and is designed for manipulating pieces of text, although {{it is capable of}} formatting and printing documents like a word processor by interfacing with external programs such as LaTeX, Ghostscript or a web browser. Emacs provides commands to manipulate and differentially display semantic units of text such as words, sentences, paragraphs and source code constructs such as functions. It also features <b>keyboard</b> <b>macros</b> for performing user-defined batches of editing commands.|$|R
50|$|Most macro {{recorders}} do {{not attempt}} to analyze or interpret what the user did when the macro was recorded. This can cause problems when trying to play back a macro if the user's desktop environment has changed. For example, if the user has changed their desktop resolution, moved icons, or moved the task bar, the mouse macro may not perform the way the user intended. That's {{one of the reasons}} for preferring <b>keyboard</b> <b>macros</b> over the mouse-oriented ones.|$|R
5000|$|M18x (Discontinued) - Introduced in 2011, it is {{considered}} a replacement for the original M17x design, but with a bigger chassis, a screen up to 18.4 inches, dual MXM 3.0B GPU support, special <b>keyboard</b> <b>macros,</b> and up to 32 GB of DDR3-1600 MHz RAM. Shipped with Intel Sandy Bridge processors and the option of single or dual AMD Radeon 6870M/6970M/6990M Radeon HD 6000 Series GPU(s), single or dual Nvidia GeForce 500 Series GPU(s). Factory CPU overclocking was also an available option.|$|R
5000|$|The first screenwriting {{software}} was a standalone script formatter, Scriptor, from Screenplay Systems. It took a text file {{generated by a}} word processor and inserted the proper page break tags. When {{used in conjunction with}} a TSR program such as SmartKey or ProKey—keyboard utilities that assigned a sequence of commands to keystroke combinations—the [...] "dot commands" [...] that Scriptor required could be inserted semi-automatically. Additionally, <b>keyboard</b> <b>macros</b> could be programmed to properly indent and enter abbreviations—allowing a user to customize the working of the word processor.|$|R
5000|$|PC Magazine {{stated that}} version 1.3 of [...] "PC-Write rates {{extremely}} well and compares favorably with many word processors costing much more". It cited very fast performance, {{good use of}} color, and availability of source code as advantages, while lack of built-in support for printing bold or underline and <b>keyboard</b> <b>macros</b> was a disadvantage. Compute! complimented the software's [...] "clean implementation of standard editing features", cited its [...] "truly staggering" [...] level of customization, and after mentioning a few flaws stated {{that they should be}} [...] "viewed in context of the program's overall excellence".|$|R
5000|$|Mutt has {{hundreds}} of configuration directives and commands. It allows for changing all the key bindings and making <b>keyboard</b> <b>macros</b> for complex actions, {{as well as}} the colors and the layout of most of the interface. Through variants of a concept known as [...] "hooks", many of its settings can be changed based on criteria such as current mailbox or outgoing message recipients. There are also many patches and extensions available that add functionality, such as NNTP support or a sidebar similar to those often found in graphical mail clients.|$|R
50|$|The {{initial release}} of Valdocs {{included}} WYSIWYG word processor and spreadsheet applications (with onscreen fonts, an UNDO key, <b>keyboard</b> <b>macros</b> and multiple screen formats), a cardfile database, an E-Mail/communications module, and a desktop manager with an address book, mailing list manager, notepad, spell checker, ValDraw & ValPaint, calculator and more. Chris Rutkowski and Roger Amidon {{worked on the}} preliminary QX-10 design; Amidon continued designing software for the QX system after Epson and Rising Star Inc. stopped production. Graphic and other software for the QX-10 and QX-16 were developed by program designers such as Dan Oja and Nelson Donley.|$|R
40|$|International audienceWe {{describe}} ESA (for Emacs-Style Application), {{a library}} for writing applications with an Emacs look-and-feel within the Common Lisp Interface Manager. The ESA library {{takes advantage of}} the layered design of CLIM to provide a command loop that uses Emacs-style multi-keystroke command invocation. ESA supplies other functionality for writing such applications such as a minibuffer for invoking extended commands and for supplying command arguments, Emacs-style <b>keyboard</b> <b>macros</b> and numeric arguments, file and buffer management, and more. ESA is currently used in two major CLIM applications: the Climacs text editor (and the Drei text gadget integrated with the McCLIM implementation), and the Gsharp score editor. This paper describes the features provided by ESA, gives some detail about their implementation, and suggests avenues for further work...|$|R
50|$|<b>Keyboard</b> <b>macros</b> have in {{more recent}} times come to life {{as a method of}} {{exploiting}} the economy of massively multiplayer online role-playing games (MMORPGs). By tirelessly performing a boring, repetitive, but low risk action, a player running a macro can earn a large amount of the game's currency or resources. This effect is even larger when a macro-using player operates multiple accounts simultaneously, or operates the accounts for a large amount of time each day. As this money is generated without human intervention, it can dramatically upset the economy of the game. For this reason, use of macros is a violation of the TOS or EULA of most MMORPGs, and administrators of MMORPGs fight a continual war to identify and punish macro users.|$|R
2500|$|In {{keeping with}} Tolkien's heavy use of song and music in his books, LoTRO has a player music {{sub-system}} akin to MIDI {{that has been}} the subject of a Harvard anthropological study. Characters on reaching level 5 can learn to play musical instruments, including Bagpipes, Clarinet, Cowbell, Drum, Harp, Horn, Lute, Pibgorn, and Theorbo. Using <b>keyboard</b> <b>macros,</b> instruments can be played in real time on three octaves and abc notation, with the music broadcast to nearby player characters. Players can also play pre-programmed pieces from user-created [...]ABC script files using the game's music notation, similar to MIDI files. Players often hold impromptu public performances, in solo or as bands at places such as The Prancing Pony Inn in Bree. Communities also regularly organize music events and mini-concerts such as [...] "Weatherstock": Woodstock above Weathertop.|$|R
40|$|Writing scripts (often called "macros") can {{be helpful}} for {{automating}} repetitive tasks. Scripting facilities for text editors like Emacs and Microsoft Word {{have been widely used}} and available. However, for graphical applications, scripting has been tried many times but has never been successful. This is mainly due to the data description problem of determining how to generalize the particular objects selected at demonstration time. Previous systems have mostly tried to solve this using inferencing, but this has a number of problems, including guessing wrong and providing appropriate feedback and control to users. Therefore, the Topaz framework does not use inferencing and instead allows the user to specify how the appropriate objects should be found. This is achieved by recording changes to which objects are selected and searches for objects, so that scripts can be written with respect to the selected object, {{in the same way as}} Emacs <b>keyboard</b> <b>macros.</b> Furthermore, all values can be expl [...] ...|$|R
40|$|Tech Support {{covers a}} number of subjects: • The {{erroneous}} default parameters in the AEC_Model macro are listed. • A problem that occurs with the LyrUtil macro is described. • Some problem areas in Velocity are detailed. • lnstallation procedures for the Logitech MOllseman mouse are provided. • Installation procedures for the new Hewlett Packard Design Jet plotter are discussed. An article on Alias Upfront, a highly touted Windows 3 D sketching application, describes its use and examines its compatibility with Data-CAD. Upfrontaffords some interestingpossibili-ties to the DataCAD user. Configuring for DataCAD discusses the topic ofsystem optimization for DataCAD. The article details allocation of available system RAM to RAM disk,disk caching. and softwaredisplay list. Doing Windows discusses additional sources of information about Windows. Customizing DCADMCRdetails {{the process of creating}} specialized <b>keyboard</b> <b>macros.</b> Two third party DCAL macros are discussed. For users who have not explored this, it is a highly recommended enhancement to DataCAD. Points of Reference reviews a new b'aining book, Beginning DataCAD,and its accompanying videos. Thediscussion of UsersGroups started in the last issue is continued...|$|R
50|$|The third known {{version is}} part number 2189014-00-212, {{with at least}} one model being {{produced}} in February 1993. These are visually very similar to part number 2189014-00-211, with the same AT style plug and chassis, silver label on the reverse bearing the AnyKey moniker, screws holding the <b>keyboard</b> together, <b>macro</b> programming requiring the control key, and lacking the AnyKey inscription on their face. An alternate version is part number 2189014-00-712 with a PS/2 style plug.|$|R
40|$|We {{describe}} {{a system for}} the entry and editing of music in lute tablature. The editor provides instant visual and MIDI feedback, mouse and <b>keyboard</b> controls, a <b>macro</b> recording facility, and full runtime extensibility. We conclude by discussing planned future functionality and considering other potential applications for the technology...|$|R
5000|$|The {{patent for}} this [...] "Display Keyboard" [...] ( [...] , filed 1996, {{published}} 1998) {{is held by}} inventor Elkin Acevedo. However, the first programmable LCD keyboard [...] {{was developed in the}} mid-1980s in Germany. This keyboard, sold under the LCBoard name in the U.S. until 1999, contained many of the features of the Optimus keyboard including monochrome graphic icons on each <b>keyboard</b> key, <b>macro</b> programming, context sensitive and application dependent switching between functions. S. Bigbie et. al. published related ideas in an IBM Technical Disclosure Bulletin (Vol. 21 No. 2 July 1978) , as did Alan Bagley of Hewlett-Packard in (...) [...]|$|R
50|$|The Program light {{normally}} remains solidly {{on or off}} {{depending on}} whether the keyboard is set to use macros, which can be toggled by pressing the Suspend Macro key. The state of the Program light does not reflect whether there are any macros programmed into the keyboard, merely whether the <b>keyboard</b> is in <b>macro</b> mode.|$|R
50|$|<b>Keyboard</b> {{and mouse}} <b>macros</b> that are created using an application's {{built-in}} macro features are sometimes called application macros. They {{are created by}} carrying out the sequence once and letting the application record the actions. An underlying macro programming language, most commonly a scripting language, with {{direct access to the}} features of the application may also exist.|$|R
25|$|The Quick Access toolbar (by default) sits in {{the title}} bar {{and serves as a}} {{repository}} of most used functions, such as save, undo/redo and print. It is customizable, although this feature is limited, compared to toolbars in previous Office versions. Any command available in the entire Office application can be added to the Quick Access toolbar, including commands not available on the ribbon as well as <b>macros.</b> <b>Keyboard</b> shortcuts for any of the commands on the toolbar are also fully customizable, similar to previous Office versions.|$|R
50|$|The {{modeling}} of solids {{is only the}} minimum requirement of a CAD system’s capabilities. Solid modelers have become commonplace in engineering departments {{in the last ten}} years due to faster computers and competitive software pricing. Solid modeling software creates a virtual 3D representation of components for machine design and analysis. A typical graphical user interface includes programmable <b>macros,</b> <b>keyboard</b> shortcuts and dynamic model manipulation. The ability to dynamically re-orient the model, in real-time shaded 3-D, is emphasized and helps the designer maintain a mental 3-D image.|$|R
5000|$|... "DOS WordPerfect" [...] Reverend Gangodawila Soma Thero, who was {{the chief}} {{incumbent}} at the Springvale Buddhist temple in Melbourne, Australia asked the Lay members of the temple to produce a Monthly Newsletter for the temple in Sinhala, called [...] "Bodu Puwath". A lay person named Jayantha de Silva developed two HP PCL Sinhala fonts called Lihil and an intelligent Phonetic keyboard that was able to select letters based on context, together with a printer driver and screen fonts. All this was possible because the utilities to create the keyboard and printer driver were supplied with WordPerfect. It was {{easy to use and}} was installed in many PCs owned by lay members and in the temple PC for typing articles. The program fell into disuse after Windows came online in 1990 as it did not support the WordPerfect <b>macro</b> <b>keyboard.</b>|$|R
40|$|The {{time and}} labor demanded by a typical laboratory-based {{keyboard}} evaluation are limiting resources for algorithmic adjustment and optimization. We propose Remulation, a complementary method for evaluating touchscreen keyboard correction and recognition algorithms. It replicates prior user study data through real-time, on-device simulation. To demonstrate remulation, {{we have developed}} Octopus, an evaluation tool that enables keyboard developers to efficiently measure and inspect the impact of algorithmic changes without conducting resource-intensive user studies. It {{can also be used}} to evaluate third-party keyboards in a “black box ” fashion, without access to their algorithms or source code. Octopus can evaluate both touch keyboards and word-gesture keyboards. Two empirical examples show that Remulation can efficiently and effectively measure many aspects of touch screen <b>keyboards</b> at both <b>macro</b> and micro levels. Additionally, we contribute two new metrics to measure keyboard accuracy at the word level: the Ratio of Error Reduction (RER) an...|$|R
40|$|This paper {{addresses}} the {{issues associated with}} using WordPerfect 5. 0 on PCs to create rn and UTEX documents. WordPerfect <b>macros</b> and <b>keyboard</b> layouts are used as an interface {{to aid in the}} input process of 'I) ijK and UTEX control sequences. As a result, a major portion of this paper is devoted to discussing the basic concepts of WordPerfect <b>macros,</b> <b>keyboard</b> layouts, and the macros specifically developed to produce TEX and 14 TEX control sequences. 1. Background In 1984, the University of Delaware's administration decided that WordPerfect would become the faculty's standard word processing package, and so they initiated a grant program which allowed faculty to purchase IBM PCs with WordPerfect at a considerable savings. By 1987 a similar decision had been made for the secretarial staff; near the end of 1988 the actual implementation of this decision was completed, and WordPerfect became the standard word processing package for PCs throughout the University. During the last year, however, many departments, such as Engineering, Computer Science, Mat...|$|R
40|$|We {{describe}} {{a system for}} the entry and editing of music in lute tablature form, including an editor application and a web application. The text editor provides instant visual and audio feedback, mouse and <b>keyboard</b> controls, a <b>macro</b> recording facility and full interactive extensibility; the web application provides on-line rendering, dissemination of scores to users, and facilities for information retrieval over a corpus. The ECOLM project aims to collect a corpus of European Lute Music and provide {{easy access to the}} material for scholars and performers. A textual encoding for lute music has been devised (TabCode, with text-critical information in TabXML) and shown to work well, and work is ongoing to collect and encode sources. The editor application is in development to support the encoding process, providing instant feedback and incremental rendering. To provide access to the material, we are developing a web application. This has less need for instant incremental feedback, though we do provide for visual display and audio performance of encoded works; however, we must also provide for retrieval of sources based on musical and musicological criteria. We shall demonstrate prototypes of these components, and discuss how the underlying technologies can support other applications in the humanities...|$|R
