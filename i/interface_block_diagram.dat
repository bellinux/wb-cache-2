1|3081|Public
40|$|Abstract—In this paper, {{we present}} a {{hierarchical}} method that decomposes a discrete-event system (DES) into a high-level subsystem which communicates with 1 parallel low-level subsystems, through separate interfaces which restrict {{the interaction of the}} subsystems. It is a generalization of the serial case (= 1) described in Part I of this paper, where we define an interface and a set of interface consistency properties {{that can be used to}} verify if a DES is nonblocking and controllable. Each clause of the definition can be verified using a single subsystem; thus the complete system model never needs to be stored in memory, offering potentially significant savings in computational resources. We provide algorithms for verifying these new properties, and briefly discuss the computational complexity of the method. Finally, {{we present a}}n application to a large manufacturing example with an estimated worst-case closed-loop state–space size of 2 9 1021. Index Terms—Automata, discrete-event systems (DESs), formal methods, hierarchical systems, interfaces. Fig. 1. Parallel <b>interface</b> <b>block</b> <b>diagram.</b> I...|$|E
40|$|The paper {{discusses}} the automation of {{the processing of}} images obtained with an oscilloscope using National Instruments LabVIEW software. The mathematical background is presented as well as standard hardware communication <b>interface.</b> The <b>block</b> <b>diagram</b> of the electrical signal acquisition and processing system and the front panel with an example of processed waveforms {{is shown in the}} paper...|$|R
40|$|We {{report on}} the {{progress}} of the new NSLS timing system. There are three types of requirements for NSLS timing system: clocks, synchronization and trigger circuits. All ring revolution frequency clocks are generated using ECL and high speed TTL logic. The synchronization circuits allows to fill both storage rings with any bunch pattern. The triggers are generated by using commercially available digital delay generators. The delay unit`s outputs are ultrastable, with a resolution of 5 ps, and are programmed by computer via IEEE 488 <b>interface.</b> The <b>block</b> <b>diagrams,</b> description of all major timing components and the present status are provided in this paper...|$|R
40|$|Abstract:- Some {{practical}} {{approaches have}} been presented successfully, which can be applied for control engineering education. Compared with conventional lecturing and laboratory exercising, instructing outcomes can be improved significantly. Two independent sets of instruments from Feedback Instruments Limited are selected to conduct experiments on a basis of the fundamental control theories. In particular, the 33 - 110 servo system is selected, consisting of three components: mechanical unit, analogue unit and digital unit. The 150 servo system contains {{a number of major}} discrete component units. Both systems can be used to test the fundamental control principles, such as the PID control. Matlab is employed for data analyzing, simulation, plotting and programming. Simulink is also employed to implement numerical simulations for advanced control practices. For practical control problems in real time, such as robotic control and engine control, Labview can be applied considering its merits of the graphical user <b>interface</b> design and <b>block</b> <b>diagram</b> approach. Some typical examples to improve classes at the system and control laboratory are presented, using software or hardware instructing tools such as the Matlab, Simulink and Labview...|$|R
40|$|The Aeronomy Lab. of NOAA has {{designed}} and built a single board, programmable radar controller for use with VHF ST (stratosphere troposphere) radars. The controller consists of a coherent integrator preprocessor and a radar pulse generator, {{both of which are}} described, as well as interfaces to an antenna beam switch and a receiver bandwidth switch. The controller occupies a single slot in a Data General Nova of Eclipse computer. The integrator and pulse generator take advantage of high density, dual port FIFO chips such as the 512 x 9 Mostek MK 4501. These FIFOs have separate input and output ports and independent read and write cycles with cycle times of less than 200 ns, making them very fast and easy to <b>interface.</b> A simple <b>block</b> <b>diagram</b> of the coherent integrator is shown. The integrator is designed to handle inputs from one receiver (2 channels) with 1 sec sample spacing. The pulse generator is based on controllers designed by R. F. Woodman for the Arecibo and SOUSY radars us a recirculating memory scheme...|$|R
40|$|MEADEP is a {{user-friendly}} dependability evaluation {{tool for}} measurement-based analysis of critical systems. MEADEP {{consists of four}} software modules: a data preprocessor for converting data in various formats to the MEADEP format, a data analyzer for graphical data presentation and parameter estimation, a graphical modeling <b>interface</b> for building <b>block</b> <b>diagrams</b> (including the exponential block, Weibull block, and k-out-of-n block) and Markov reward chains, and a model solution module for availability/reliability calculations with graphical parametric analysis. Use of the tool on failure data from measurements provides quantitative evaluations of dependability for the target system, while greatly reducing requirements for specialized skills in data analysis and system modeling from the user. MEADEP {{has been applied to}} evaluate availability for two air traffic control systems based on operational failure data and the produced results have provided valuable feedback to the project management of these critical systems. MEADEP has also been used to analyze a nuclear power plant safety model, based on the Eagle 21 architecture and its early field failure data. The study identified the most sensitive parameter and its most sensitive value segment to the plant mean time between hazards. 1...|$|R
2500|$|A {{functional}} <b>block</b> <b>diagram</b> is a <b>block</b> <b>diagram,</b> {{that describes}} the functions and interrelationships of a system. The functional <b>block</b> <b>diagram</b> can picture: ...|$|R
25|$|Specific {{function}} <b>block</b> <b>diagram</b> are {{the classic}} Functional Flow <b>Block</b> <b>Diagram,</b> and the Function <b>Block</b> <b>Diagram</b> (FBD) {{used in the}} design of programmable logic controllers.|$|R
50|$|Many {{specific}} types of functional <b>block</b> <b>diagrams</b> have emerged. For example, the functional flow <b>block</b> <b>diagram</b> {{is a combination of}} the functional <b>block</b> <b>diagram</b> and the flow chart. Many software development methodologies are built with specific functional <b>block</b> <b>diagram</b> techniques. An example from the field of industrial computing is the Function <b>Block</b> <b>Diagram</b> (FBD), a graphical language for the design of programmable logic controllers.|$|R
40|$|We first {{note that}} <b>block</b> <b>diagrams</b> have been {{important}} for the learning of GPSS and {{have been used in}} most GPSS text books. The full value of <b>block</b> <b>diagrams</b> is obtained first when they can be automatically generated from program code and that <b>block</b> <b>diagrams</b> in turn can generate code. The computer generation of <b>block</b> <b>diagrams</b> requires, however, very exact rules for the <b>block</b> <b>diagrams.</b> This is lacking in the literature. We here present the first steps towards a definition of <b>block</b> <b>diagram</b> rules that can be the basis for GPSS <b>block</b> <b>diagram</b> generation, in particular for micro-GPSS. Since there are several micro-GPSS based diagram projects on its way, in different GPLs, we suggest that the main calculation work be done by the basic micro-GPSS engine, GPSS. EXE. 1 Importance of <b>block</b> <b>diagrams</b> for GPSS GPSS has all since its first version in 1961 been using some kind of <b>block</b> <b>diagram</b> symbols. Although the symbols used and the way the block symbols have been connected have changed from book to book, several symbols have remained the same over the years. For example, 13 <b>block</b> <b>diagram</b> symbols used in a GPSS II manual from 1963 [IBM 63] are the same as those used in the present version of WebGPSS. Most GPSS books use some sort of <b>block</b> <b>diagram.</b> Examples of GPSS textbooks wit...|$|R
50|$|FAUST is a textual {{language}} but <b>block</b> <b>diagram</b> oriented. It combines two approaches: {{functional programming}} and algebraic <b>block</b> <b>diagrams,</b> which are constructed via function composition. For that, FAUST {{relies on a}} <b>block</b> <b>diagram</b> algebra of five composition operations.|$|R
50|$|The Functional flow <b>block</b> <b>diagram</b> (FFBD) is a multi-tier, time-sequenced, {{step-by-step}} {{flow diagram}} of the system’s functional flow.The diagram is developed in the 1950s and widely used in classical systems engineering. The Functional Flow <b>Block</b> <b>Diagram</b> is {{also referred to as}} Functional Flow <b>Diagram,</b> functional <b>block</b> <b>diagram,</b> and functional flow.|$|R
5000|$|A {{functional}} <b>block</b> <b>diagram</b> {{in systems}} engineering and software engineering is a <b>block</b> <b>diagram.</b> It describes the functions and interrelationships of a system.|$|R
40|$|Abstract: <b>Block</b> <b>diagrams</b> {{are often}} used in {{embedded}} system design for modeling both plant and controller, typically with continuous and discrete modeling, respectively. Though easy to use, advanced users and implementers of these languages often run afoul of subtle semantic problems these seemingly simple languages can have. Based on the stream- and state-based approaches, this paper discusses how the specialized state-based semantics of continuous-time <b>block</b> <b>diagrams</b> can interoperate hierarchichally with discrete-time <b>block</b> <b>diagrams.</b> The languages presented {{may serve as a}} reference of sorts, helping to clarify some of the underlying choices in <b>block</b> <b>diagram</b> language design, and in the process shedding light on the differences between, and limitations of, existing <b>block</b> <b>diagram</b> languages. 1...|$|R
50|$|In {{electrical}} engineering, {{a design}} will often begin {{as a very}} high level <b>block</b> <b>diagram,</b> becoming more and more detailed <b>block</b> <b>diagrams</b> as the design progresses, finally ending in <b>block</b> <b>diagrams</b> detailed enough that each individual block can be easily implemented (at which point the <b>block</b> <b>diagram</b> is also a schematic diagram). This is known as top down design. Geometric shapes are often used in the diagram to aid interpretation and clarify meaning of the process or model. The geometric shapes are connected by lines to indicate association and direction/order of traversal. Each engineering discipline has their own meaning for each shape. <b>Block</b> <b>diagrams</b> are used in every discipline of engineering. They are also a valuable source of concept building and educationally beneficial in non-engineering disciplines.|$|R
50|$|Contrary to Max-like visual {{programming}} languages where the user does manual connections, FAUST primitives are assembled in <b>block</b> <b>diagrams</b> {{by using a}} set of high-level <b>block</b> <b>diagram</b> composition operations.|$|R
5000|$|Functional {{diagrams}} may be made. These use <b>block</b> <b>diagrams</b> indicating {{information and}} electrical power flow from component to component. They {{are similar to}} the functional flow <b>block</b> <b>diagrams</b> used with computer programs.|$|R
25|$|The diagram is {{developed}} in the 1950s and widely used in classical systems engineering. The Functional Flow <b>Block</b> <b>Diagram</b> is {{also referred to as}} Functional Flow <b>Diagram,</b> functional <b>block</b> <b>diagram,</b> and functional flow.|$|R
30|$|Reliability <b>Block</b> <b>Diagrams.</b> Reliability <b>block</b> <b>diagrams</b> (RBDs) are {{a popular}} tool for {{reliability}} analysis of complex systems. The system {{is represented by}} a set of inter-related blocks, connected by series, parallel, and k-out-of-N relationships.|$|R
40|$|Abstract. We propose an {{abstract}} <b>block</b> <b>diagram</b> formalism {{based on the}} notions of a signal as a time-varying quantity, a block as a signal transformer, a connection between blocks as a signal equality constraint, and a <b>block</b> <b>diagram</b> {{as a collection of}} interconnected blocks. It does not enforce implementation details (like internal state-space) or particular kinds of dynamic behavior (like alternation of discrete steps and continuous evolutions) on blocks and can be considered as {{an abstract}}ion of <b>block</b> <b>diagram</b> languages used by engineering system designers. We study its properties and give general conditions for well-definedness of the operation of a system specified by a <b>block</b> <b>diagram</b> for each admissible input signal(s) ...|$|R
3000|$|... thr {{is set to}} 0 (see <b>block</b> <b>diagram</b> of Fig.  3 {{and compare}} with <b>block</b> <b>diagram</b> of Fig.  2); (ii) When neither channel {{reservation}} nor the new data sessions are buffered, as in strategy E 5, both r [...]...|$|R
30|$|Open the <b>block</b> <b>diagram.</b>|$|R
40|$|Network <b>interface</b> <b>blocks</b> {{are basic}} {{part of the}} NetCOPE {{platform}} where they help to the network application designers to deal with problems of implementing the Data Link Layer of the OSI Reference Model, especially the MAC sublayer. This thesis {{is focused on the}} design and implementation of such network <b>interface</b> <b>blocks</b> operating at speed 10 Gb/s. Designed input <b>interface</b> <b>block</b> provides checking of several parts of the Ethernet frame and allows discarding of this frame based on checking results. Output <b>interface</b> <b>block</b> supports replacing frame's Source Address by a pre-set value and provides frame's CRC computation. Both network <b>interface</b> <b>blocks</b> also include a set of frames counters. Implemented network <b>interface</b> <b>blocks</b> were tested on the COMBO card. SystemVerilog verification testbench was also designed for both network <b>interface</b> <b>blocks...</b>|$|R
40|$|A {{discussion}} is presented {{of the development}} of an automated aid to translate the <b>block</b> <b>diagram</b> of active flight control systems to assembly-level code. The translation of the <b>block</b> <b>diagram</b> is facilitated by defining a suitable syntax and by building a matrix of inputs and outputs of the blocks. It is also shown how the process of fault detection can be automated. Results obtained through the automated aid have been validated by ORACL library using the <b>block</b> <b>diagram</b> of the costar controller of the F- 8 aircraft...|$|R
5000|$|... #Caption: <b>Block</b> <b>Diagram</b> for Two-Dimensional System Identification.|$|R
5000|$|Function <b>block</b> <b>diagrams,</b> used in {{programmable}} logic controllers ...|$|R
5000|$|... #Caption: <b>Block</b> <b>diagram</b> of {{mechanical}} scan television system.|$|R
5000|$|... #Caption: Fig.1 General HPCP feature {{extraction}} <b>block</b> <b>diagram</b> ...|$|R
5000|$|... #Caption: Northern Telecom DMS-100 SuperNode Architecture <b>Block</b> <b>Diagram</b> ...|$|R
40|$|We propose an {{algebraic}} {{approach to}} <b>block</b> <b>diagram</b> construction {{as an alternative}} to the classical graph approach inspired by dataflow models. The proposed algebra is based on three binary operations of construction: sequential, parallel and recursive constructions. These operations can be seen as high level connection schemes that set several connections at once in order to combine two <b>block</b> <b>diagrams</b> to form a new one. Algebraic representations have interesting application for visual languages based on <b>block</b> <b>diagrams</b> and are useful to specify the formal semantic of this languages. ...|$|R
40|$|This paper {{presents}} {{foundations for}} a functional execu-tion structure that generates dynamic behavior of {{data processing systems}} that are of a sampled nature. These systems are often represented by <b>block</b> <b>diagrams,</b> i. e., <b>blocks</b> connected by directed lines, where each block represents data transformation. An intermediate repre-sentation denes the semantics of these <b>block</b> <b>diagrams</b> that is directed towards a functional software imple-mentation and should support sophisticated modeling patterns such as feedback and hierarchy. Thus, it pro-vides a point of reference in understanding, analyzing, and comparing existing <b>block</b> <b>diagram</b> simulation soft-ware. ...|$|R
40|$|This paper {{deals with}} the {{development}} of an automated aid to translate the <b>block</b> <b>diagram</b> of flight control system (FCS) to assembly level code. By defining a suitable syntax and by building a matrix of inputs and outputs of the blocks. it becomes easy to translate the <b>block</b> <b>diagram.</b> It is also shown how the process of fault detection can be automated. The results obtained through the automated aid have been validated by ORACL ribrary using the <b>block</b> <b>diagram</b> of Cstar controller of F 8 aircraft. 2. DEVELOPMENTS IN ACTIVE CONTRO...|$|R
5000|$|... #Caption: The (forward) Generalized Lifting Scheme {{transform}} <b>block</b> <b>diagram.</b>|$|R
5000|$|... #Caption: <b>Block</b> <b>diagram</b> {{description}} of the discrete denoising problem ...|$|R
5000|$|... #Caption: <b>Block</b> <b>diagram</b> from Blaschke's 1971 US patent {{application}} ...|$|R
5000|$|... #Caption: <b>Block</b> <b>diagram</b> of a TV {{transmitter}} (intercarrier method).|$|R
