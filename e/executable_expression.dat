1|6|Public
40|$|Rapid {{advance in}} {{computer}} network technology {{has changed the}} style of computer utilization. Distributed computing resources over world-wide computer networks are available from our local computers. They include powerful computers {{and a variety of}} information sources. This change is raising more advanced requirements. Integration of distributed information sources is one of such requirements. In addition to conventional databases, structured documents have been widely used, and have increasing significance in suchadvanced applications as digital libraries, electronic commerce, World Wide Web, and hyper-media descriptions. Thus, integration of structured documents and conventional databases {{is one of the most}} important issues today. However, structured documents are different from conventional databases in their self-descriptive nature and various structural constructors. And the difference makes the integration much difficult. This dissertation proposes an information integration system for not only conventional databases but also information sources containing structured documents. In particular, structured document repositories, Web, and relational databases are chosen as target information sources. Data models for integration of structured documents and relationaldatabases are proposed. They are hybrid data models based on nested relational structures and an abstract data type for structured documents, and allow symmetric transformation between relational structures and structured documents. Utilization of such hybrid and symmetric data models is the most distinguishing point of the information integration system studied in this dissertation. A query processing and optimization scheme for the integration system which utilizes the hybrid and symmetric data models is studied. The integration system is supposed to consist of software modules which communicate with each other and distributed information sources. ･･･Thesis (Ph. D. in Engineering) [...] University of Tsukuba, (A), no. 1965, 1998. 7. 241 Introduction [...] 2 Background [...] 2. 1 Overview [...] 2. 2 Structured documents [...] 2. 3 Integration of structured documents, Web, and databases [...] 3 Related works [...] 3. 1 Overview [...] 3. 2 Integration of heterogeneous information sources [...] 3. 3 Query processing and optimization [...] 3. 4 visual user interfaces [...] 4 An information integration system [...] 4. 1 Overview [...] 4. 2 Architecture [...] 5 data models [...] 5. 1 Overview [...] 5. 2 Basic concepts [...] 5. 2. 1 NR/SD Data structures [...] 5. 2. 2 SD Type [...] 5. 2. 3 Converters [...] 5. 3 NR/SD [...] 5. 3. 1 Converters [...] 5. 3. 2 NR/SD algebra [...] 5. 3. 3 Basic properties of converters [...] 5. 4 NR/SD+ [...] 5. 4. 1 SD type [...] 5. 4. 2 Converters [...] 5. 4. 3 Master constructors [...] 5. 4. 4 NR/SD+ algebra [...] 5. 4. 5 Expressive power of NR/SD+ algebra [...] 5. 5 WebNR/SD [...] 5. 5. 1 Hlink type [...] 5. 5. 2 WebNR/SD algebra [...] 5. 6 Query specification example [...] 6 Query processing and optimization [...] 6. 1 Overview [...] 6. 2 Abstraction of SD values [...] 6. 2. 1 Abstract SD values [...] 6. 2. 2 Abstraction and materialization operators [...] 6. 3 Outline of query processing [...] 6. 4 Query processing example [...] 7 Visual user interface [...] 7. 1 Overview [...] 7. 2 Features of the visual user interface [...] 7. 3 Components of the visual user interface [...] 7. 4 Interactive information exploration [...] 7. 4. 1 Creation of data box for faculty information [...] 7. 4. 2 Creation of data box for papers [...] 7. 4. 3 Creation of data box for publication list web pages [...] 7. 5 Visual data manipulation language: HQBE [...] 7. 6 Translation of HQBE descriptions into WebNR/SD algebra expressions [...] 7. 6. 1 HQBE description in a text format and its semantics [...] 7. 6. 2 WebNR/SD algebra expressions obtained by the translation [...] 7. 6. 3 Translation procedure [...] 8 Prototype system development [...] 8. 1 Overview [...] 8. 2 Design principles [...] 8. 3 prototype system architecture [...] 8. 4 Interface among the mediator and wrappers [...] 8. 5 Data communication among modules [...] 8. 6 Screen shots of the prototype system [...] 9 Conclusions [...] Bibliography [...] List of figures [...] 2. 1 Sample XML document [...] 2. 2 Hyper-text view over a document repository, the Web, and a relational database [...] 2. 3 Structure of a publication items [...] 2. 4 Sample publication items contained in PL pages [...] 4. 1 Integration environment [...] 5. 1 Relation [...] 5. 2 Sample SD value [...] 5. 3 Concept of converters [...] 5. 4 Examples of Rep-unpack and Rep-pack [...] 5. 5 Examples of Seq-unpack and Seq-pack [...] 5. 6 Example of Or-remove [...] 5. 7 Example of Or-append [...] 5. 8 Nested relational algebra operators [...] 5. 9 Examples of unpack and pack [...] 5. 10 Master and derivatives [...] 5. 11 Examples of master constructors SC and RC [...] 5. 12 Example of master constructor OC [...] 5. 13 Example of composite operators [...] 5. 14 Definitions of composite operators [...] 5. 15 Examples of export and import [...] 5. 16 Example hyper-text link structure(Un are URLs and Ln are character strings in linking elements) [...] 5. 17 Example of navigate [...] 5. 18 Path regular expression syntax [...] 5. 19 Example of URL generator [...] 5. 20 Relation WWW [...] 5. 21 Element definitions for publication items [...] 5. 22 Sample SD value which corresponds to a paper [...] 5. 23 DTD for the index page [...] 5. 24 DTD for new PL page [...] 6. 1 Example of transformation between SD values and ASD values [...] 6. 2 Query processing framework [...] 6. 3 Sample rewriting rules [...] 7. 1 Windows in the visual user interface [...] 7. 2 Data box (D 1) and metadata box for faculty information [...] 7. 3 Data box (D 2) and metadata box for papers [...] 7. 4 Browsing publication list Web pages for years (D 3) [...] 7. 5 Querying metadata and data to relate D 3 with all the publication Web pages [...] 7. 6 HQBE description for data operation (1) [...] 7. 7 HQBE description for data operation (2) [...] 7. 8 Target expression for D 1 [...] 7. 9 Target expression for D 2 [...] 7. 9 Target expression for D 3 [...] 7. 10 Syntax and semantics of loose structure specifications [...] 7. 12 Output expression corresponding to D 4 [...] 8. 1 Prototype system architecture [...] 8. 2 Interface among modules [...] 8. 3 NRSD processor interface (in part) [...] 8. 4 SD materializer interface (in part) [...] 8. 5 Navigable interface (in part) [...] 8. 6 RelationMetadata interface (in part) [...] 8. 7 <b>Executable</b> <b>expression</b> specifications for the Opentext wrapper [...] 8. 8 Data box and metadata box for a relation in the Oracle 8 database [...] 8. 9 Data box for a document collection in the Opentext database [...] 8. 10 Data box for a Web pag...|$|E
40|$|This paper {{describes}} a calculus for the stepwise and piecewise refinement of expressions. It {{provides a means}} for the derivation of <b>executable</b> <b>expressions</b> from initial specifications. We take the view that a refinement calculus consists of: a specification language, which usually includes constructs which are non-executable, but is a "superlanguage " of a programming language; a refinement relation between specifications, which possesses particular properties necessary for the refinement of specifications in a stepwise and piecewise manner; {{and a set of}} laws determining how such refinements may proceed...|$|R
40|$|Executing {{a formal}} {{specification}} {{is a useful}} tool for validation which means checking whether the informal requirements are met by the specification. This paper describes an approach which transforms implicitly defined functions into <b>executable</b> <b>expressions</b> by using data dependency information. The intention is the automatic generation of an expression from the logical valued expressions stated in the postcondition, which can be executed by an existing interpreter for VDM. A data dependency analysis performed on the postcondition obtains information about its structure and leads to a classification of the expressions contained in it. This knowledge is used in a transformation phase which rewrites the logical valued expressions into an <b>expression</b> <b>executable</b> by the interpreter. The process of analyzing, classifying and transforming the postconditions is described and investigations on the limits of this approach in relation to the VDM standard are done. Keywords [...] - Automatic Programming, [...] ...|$|R
40|$|Abstract: Business Process Management (BPM) {{has evolved}} into a core {{competence}} of today’s enterprises business development. But the design and the execution of business processes are still crucial tasks. Business Rules provide a mean to overcome some of these difficulties. Therefore this paper presents two different types of business rules: management rules and functional rules. While management rules support the business process design, functional rules are annotated to decision nodes of process models and can be easily transformed into <b>executable</b> <b>expressions.</b> Additionally, in order to show the usage of business rules the business process management framework ARIS House of Business Engineering (HoBE) is extended by a level that explains the role of business rules in business process design...|$|R
40|$|There {{is a lack}} of good formalisms {{and tools}} for {{describing}} the semantics of object-oriented and concurrent programming languages. We propose a computational model for objects in which events are synchronous communications between concurrent agents, computations are partial orderings of events, and behaviours are the possible event unfoldings in which an agent, or a system of concurrent agents, may participate. Furthermore, we introduce a language called Abacus for defining <b>executable</b> behaviour <b>expressions,</b> and we speculate how this language may be used as part of a practical system for defining the formal semantics of programming languages...|$|R
40|$|The Action Semantics for UML {{provides}} a standard and platform independent {{way to describe}} the behavior of methods and executable actions in object-oriented system design prior to implementation allowing the development of highly automated and optimized code generators for UML CASE tools. Model transformation systems provide visual but formal background to specify arbitrary transformations in the Model Driven Architecture (the leading trend in software engineering). In the current paper, we describe a general encoding of model transformation systems as <b>executable</b> Action Semantics <b>expressions</b> to provide a standard way for automatically generating the implementation of formal (and provenly correct) transformations by off-the-shelf MDA tools. In addition, we point out a weakness in the Action Semantics standard that must be improved to achieve a stand-alone and functionally complete action specification language...|$|R
40|$|Abstract: In {{order to}} access data from various {{different}} data repositories, in Global-As-View approaches an input query is decomposed into several subqueries. Normally, this decomposition {{is based on}} a set of mappings, which describe the correspondence of data elements between a global schema and local ones. However, building mappings is a difficult task, especially when the number of participating local schemas is large. In our approach, an input query is automatically decomposed into subqueries without using mappings. An algorithm is proposed to transform a global path expression (e. g., an XPath query) into local path <b>expressions</b> <b>executable</b> in local schemas. This algorithm considers parts of a path expression from right to left, i. e., the algorithm traverses from the bottom {{to the top of a}} schema tree depending on the structure of local schemas. Compared to top-down approaches, such as by Lausen and Marron (LM), our algorithm can reduce the time for forming subqueries for local (e. g., XML) schemas to a large extent...|$|R

