8|7|Public
5000|$|Deleted files : To {{prevent the}} unintentional {{restoration}} of files {{that have been}} <b>intentionally</b> <b>deleted,</b> {{a record of the}} deletion must be kept.|$|E
50|$|Microsofts Recycle Bin is {{implemented}} {{as a special}} folder with columns like Date deleted and Original location. Typically only files deleted via Windows Explorer (but not necessarily other Windows graphical interfaces such as file selection dialogs) will be put into the Recycle Bin; files deleted via the Command Prompt are permanently deleted, as (by default) are files deleted via operating system APIs and applications other than Windows Explorer. Some operating system APIs do, however, allow applications to recycle files rather than delete them. In previous Windows operating systems and in MS-DOS, undeletion {{was the only way}} to recover accidentally or <b>intentionally</b> <b>deleted</b> files.|$|E
5000|$|There {{have been}} {{complaints}} of user statuses being mistakenly or <b>intentionally</b> <b>deleted</b> for alleged violations of Facebook's posting guidelines. Especially for non-English speaking writers, Facebook {{does not have}} a proper support system to genuinely read the content and make decisions. Sometimes the content of a status did not have any [...] "abusive" [...] or defaming language, but it nevertheless got deleted on the basis that it had been secretly reported by a group of people as [...] "offensive". For other languages than English, Facebook till now is not able to identify the group approach that is used to vilify humanitarian activism. In another incident, Facebook had to apologize after it deleted a free speech group's post about the abuse of human rights in Syria. In that case, a spokesman for Facebook said the post was [...] "mistakenly" [...] removed by a member of its moderation team after receiving a high volume of take-down requests.|$|E
50|$|A {{simple method}} of {{ensuring}} data provenance in computing is to mark a file as read only. This allows {{the user to}} view {{the contents of the}} file, but not edit or otherwise modify it. Read only can also in some cases prevent the user from accidentally or <b>intentionally</b> <b>deleting</b> the file.|$|R
5000|$|Evercookie - {{a type of}} browser cookie that is <b>intentionally</b> {{difficult}} to <b>delete</b> ...|$|R
30|$|In this study, we {{considered}} industrial projects with several building and work areas. However, the authors in the aforementioned studies mostly consider a building. The data collection approach in industrial projects with several buildings and work areas {{is the key}} factor for the optimal application of IBM. The studied by McCoy et al. 2014 was a building. By <b>intentionally</b> <b>deleting</b> some images from the collection, {{they found that the}} outcome of image-based 3 D reconstruction model changed significantly. The negative effect attributed to the lack of sufficient overlapping images in industrial projects such as gas compressor stations should be considered. We conducted our case study in a gas compressor station, where several buildings, piping areas, and equipment are located.|$|R
40|$|Transition to {{democracy}} has became the clearest reference {{for the new}} Spanish democratic identity. According to the official account, the years from 1975 to 1981 and its protagonists have been reached the national pantheon even turning into a period whose shadows are <b>intentionally</b> <b>deleted</b> {{in order to build}} mythical origins where set the new democracy. Thus, consensus and maturity came to be correlates of a new period in the history of Spain, which gave up violence and antagonisms that had characterized its past. As myth, denying or questioning the model character of the transition has became a kind of crime against democracy itself. So in this article we are trying to draw the basics points of this story and, from them, to do an attack to that narration...|$|E
40|$|The {{popularity}} of email has triggered researchers {{to look for}} ways to help users better organize the enormous amount of information stored in their email folders. One challenge that has not been studied extensively in text mining is the identification and reconstruction of hidden emails. A hidden email is an original email that has been quoted in at least one email in a folder, but does not present itself in the same folder. It may have been (un) <b>intentionally</b> <b>deleted</b> or may never have been received. The discovery and reconstruction of hidden emails is critical for many applications including email classification, summarization and forensic. This paper proposes a framework for reconstructing hidden emails using the embedded quotations found in messages further down the thread hierarchy. We evaluate the robustness and scalability of our framework by using the Enron public email corpus. It contains about half a million emails, distributed in folders belonging to 150 users. Our experiments show that hidden emails exist widely in the Enron corpus and also that our optimization techniques are effective in processing large email folders...|$|E
40|$|A {{classical}} {{variant of}} the view-update problem is deletion prop-agation, where tuples from the database are deleted in order to realize a desired deletion of a tuple from the view. This operation may cause a (sometimes necessary) side effect—deletion of addi-tional tuples from the view, besides the <b>intentionally</b> <b>deleted</b> one. The goal is to propagate deletion so as to maximize the number of tuples that remain in the view. In this paper, a view is defined by a self-join-free conjunctive query (sjf-CQ) over a schema with functional dependencies. A condition is formulated on the schema and view at hand, and the following dichotomy in complexity is established. If the condition is met, then deletion propagation is solvable in polynomial time by an extremely simple algorithm (very {{similar to the one}} observed by Buneman et al.). If the con-dition is violated, then the problem is NP-hard, and it is even hard to realize an approximation ratio that is better than some constant; moreover, deciding whether there is a side-effect-free solution is NP-complete. This result generalizes a recent result by Kimelfeld et al., who ignore functional dependencies. For the class of sjf-CQs, it also generalizes a result by Cong et al., stat-ing that deletion propagation is in polynomial time if keys are preserved by the view. 1...|$|E
5000|$|Evercookie is a JavaScript-based {{application}} {{created by}} Samy Kamkar which produces zombie cookies {{in a web}} browser that are <b>intentionally</b> difficult to <b>delete.</b> In 2013, a top-secret NSA document was leaked by Edward Snowden, citing Evercookie {{as a method of}} tracking Tor users.|$|R
40|$|Users are {{increasingly}} demanding two contradictory system properties – {{the ability to}} absolutely, positively erase information so that it cannot be recovered, {{and the ability to}} recover information that was inadvertently or <b>intentionally</b> altered or <b>deleted.</b> Storage system designers now need to resolve the tension between complete delete and time machine computing...|$|R
40|$|Exact {{measurement}} of the second-order correlation function $g^{(2) }(t) $ of a light source is essential when investigating the photon statistics and the light generation process of the source. For a stationary single-mode light source, Mandel Q factor {{is directly related to}} $g^{(2) }(t) $. For a large mean photon number in the mode, the deviation of $g^{(2) }(t) $ from unity is so small that even a tiny error in measuring $g^{(2) }(t) $ would result in an inaccurate Mandel Q. In this work, we have found that detector dead time can induce a serious error in $g^{(2) }(t) $ and thus in Mandel Q in those cases even in a two-detector configuration. Our finding contradicts the conventional understanding that detector dead time would not affect $g^{(2) }(t) $ in two-detector configurations. Utilizing the cavity-QED microlaser, a well-established sub-Poissonian light source, we measured $g^{(2) }(t) $ with two different types of photodetectors with different dead time. We also introduced prolonged dead time by <b>intentionally</b> <b>deleting</b> the photodetection events following a preceding one within a specified time interval. We found that the observed Q of the cavity-QED microlaser was underestimated by 19 % with respect to the dead-time-free Q when its mean photon number was about 600. We derived an analytic formula which well explains the behavior of the $g^{(2) }(t) $ {{as a function of the}} dead time. Comment: 8 pages, 6 figures, 20 reference...|$|R
40|$|In {{deletion}} propagation, tuples {{from the}} database are deleted {{in order to}} reflect the deletion of a tuple from the view. Such an operation may result in the (often necessary) deletion of additional tuples from the view, besides the <b>intentionally</b> <b>deleted</b> one. The article studies the complexity of deletion propagation, where the view is defined by a conjunctive query (CQ), and {{the goal is to}} maximize the number of tuples that remain in the view. Buneman et al. showed that for some simple CQs, this problem can be solved by a straightforward algorithm, which is called here the unidimensional algorithm. The article identifies additional cases of CQs where the unidimensional algorithm succeeds, and in contrast, shows that for some other CQs the problem is NP-hard to approximate better than some constant ratio. In fact, it is shown here that among the CQs without self joins, the hard CQs are exactly the ones that the unidimensional algorithm fails on. In other words, the following dichotomy result is proved: for every CQ without self joins, deletion propagation is either APX-hard or solvable (in polynomial time) by the unidimensional algorithm. The article then presents approximation algorithms for certain CQs where deletion propagation is APX-hard. Specifically, two constant-ratio (and polynomial-time) approximation algorithms are given for the class of sunflower CQs (i. e., CQs having a sunflower hypergraph) without self joins. The first algorithm, providing the approximation ratio 1 − 1 /e, is obtained by formulating the problem at hand as that of maximizing...|$|E
40|$|This paper {{studies the}} {{computational}} {{complexity of the}} clas-sic problem of deletion propagation in a relational database, where tuples are deleted from the base relations in order to realize a desired deletion of tuples from the view. Such an operation {{may result in a}} (sometimes unavoidable) side effect: deletion of additional tuples from the view, besides the <b>intentionally</b> <b>deleted</b> ones. The goal is to minimize the side effect. The complexity of this problem has been well studied in the case where only a single tuple is deleted from the view. However, only little is known within the more re-alistic scenario of multi-tuple deletion, which is the topic of this paper. The class of conjunctive queries (CQs) is among the most well studied in the literature, and we focus here on views defined by CQs that are self-join free (sjf-CQs). Our main result is a trichotomy in complexity, classifying all sjf-CQs into three categories: those for which the prob-lem is in polynomial time, those for which the problem is NP-hard but polynomial-time approximable (by a constant-factor), and those for which even an approximation (by any factor) is NP-hard to obtain. A corollary of this trichotomy is a dichotomy in the complexity of deciding whether a side-effect-free solution exists, in the multi-tuple case. We further extend the full classification to accommodate the presence of a constant upper bound on the number of view tuples to delete, and the presence of functional dependencies. Fi-nally, we establish (positive and negative) complexity results on approximability for the dual problem of maximizing the number of view tuples surviving (rather than minimizing the side effect incurred in) the deletion propagation. 1...|$|E
40|$|Operating Systems Review, ACM Special Interest Group on Operating Systems, January 2007. Users are {{increasingly}} demanding two contradictory system properties - {{the ability to}} absolutely, positively erase information so that it cannot be recovered, {{and the ability to}} recover information that was inadvertently or <b>intentionally</b> altered or <b>deleted.</b> Storage system designers now need to resolve the tension between complete delete and time machine computing...|$|R

