10|120|Public
50|$|Cable - Cable inputs are serial {{messages}} {{of up to}} 96 bits in length entered into one of four words of the C-loop. Maximum data rate in 1600 bits per second. Cable input operation is begun by executing the Enable Cable <b>Input</b> <b>instruction</b> and proceeds basically independent of program control.|$|E
5000|$|SPS-1 punched one {{card for}} each <b>input</b> <b>instruction</b> {{in its first}} pass and this deck had to be read during pass 2. At the University of Chicago and many other locations, SPS-1 was {{replaced}} by assemblers {{taking advantage of the}} commonly available 4K memory configuration to pack the output of pass one into several instructions per card. Other assemblers were written which placed the pass one output into memory for small programs.|$|E
50|$|Channel ends have {{a buffer}} {{able to hold}} {{sufficient}} tokens to allow at least one word to be buffered. If an output instruction is executed when the channel is too full to take the data then the thread which executed the instruction is paused. It is restarted when there is enough room in the channel for the instruction to successfully complete. Likewise, when an <b>input</b> <b>instruction</b> is executed {{and there is not}} enough data available then the thread is paused and will be restarted when enough data becomes available.|$|E
40|$|The NJOY Nuclear Data Processing System is a {{software}} system used for nuclear data management [1]. In particular, {{it is used}} to convert evaluated nuclear data for materials stored in Evaluated Nuclear Data Files (ENDF) [2] into different formats, as well as performing operations on the data. NJOY is widely used within nuclear data research, and as such, {{it is important that the}} system has a user friendly interface. The NJOY <b>input</b> <b>instructions</b> [4] is a non-interactive user interface used for specifying jobs to be run by NJOY. The <b>input</b> <b>instructions</b> are complex and hard to read compared to e. g. a high-level programming language. Working with a large and complex job easily becomes a daunting and error-prone task. Accordingly, there is a need for an improved input format. In this thesis, a new input format has been designed. In order to make the new input format useable with NJOY, a translator which is able to translate the new input format into the original NJOY <b>input</b> <b>instructions</b> has also been implemented. The results have been verified by a small set of tests...|$|R
50|$|Sensors are the {{starting}} point for every action, because they gather information and send it on the bus as a data telegram. This can be information about room temperatures, movements, wind measurements or manually <b>input</b> <b>instructions</b> (Push buttons). Sensors are selected depending on the required application.|$|R
40|$|Information is {{presented}} {{for the use}} of NTRAN (Network TRANslator), a program written in FORTRAN that provides a means for generating input files for the LOGSIM and LASAR programs from PRF and PR 2 D input decks. The program technical description, <b>input</b> <b>instructions,</b> and deck setup instructions for the Sigma 5 computer, are presented to familiarize the reader with the software...|$|R
40|$|This?aper investigates {{what types}} of instruction-feedback {{combinations}} {{may contribute to the}} learning of English grammar for 120 Japanese university students. Students were given tests on grammaticality judgment and correction, using English ergative verbs in three trials of a post-instruction test. Subjects were divided into six groups according to type of instruction and feedback they received. Overall findings indicate that students with output instruction plus explicit metalinguistic information outperformed Post-test 1 over those with output instruction and no feedback. In the grammaticality judgment test, the effect of <b>input</b> <b>instruction</b> held over 1 week (post-test 2), but output instruction had only an immediate (post-test 1) influence on the formulations of grammatical knowledge. Finally, <b>input</b> <b>instruction</b> combined with either explicit metalinguistic information or positive evidence wa...|$|E
40|$|This master's thesis {{deals with}} {{creation}} of generators {{of the code}} for existing virtual platforms QEMU and OVP. This work consist of study of techniques, which are used by virtual machines for their work. Main part of this work is the design of process, which transforms <b>input</b> <b>instruction</b> sets to the code used by these virtual platforms. As {{the result of this}} work functional programs, which generate the code for these virtual platforms, was created...|$|E
40|$|This paper {{presents}} a high-level, algorithmic, single-assignment programming language and its tailor-made optimizing compiler. The compiler {{is able to}} generate a synthesizable hardware description language for reconfigurable systems based on <b>input</b> <b>instruction</b> set. Simulated annealing and force-directed scheduling approaches were employed in this compiler for design speed and resource optimizations. The tasks of the designed compiler include control flow graph transformation, component selection, component scheduling, and VHDL transformation. Language features are introduced {{and the structure of}} the compiler is discussed...|$|E
40|$|Technique rapidly determines {{far-field}} spatial energy distribution. Method {{takes about}} 3 minutes. It is optically simple and is economical, using standard laboratory parts and equipment. It records automatically without operator control and is easily adaptable to computer control of <b>input</b> <b>instructions</b> and computer treatment of output data. Degree of data resolution is limted only by width of recorder pen, and data are repeatable...|$|R
40|$|Use of the Raw to Processed SINDA(System Improved Numerical Differencing Analyzer) Program, RTOPHS, which {{provides}} a means of making the temperature prediction data on binary HSTFLO and HISTRY units generated by SINDA available to engineers in an easy to use format, is discussed. The program accomplishes this by reading the HISTRY unit and according to user <b>input</b> <b>instructions,</b> the desired times and temperature prediction data are extracted and written to a word addressable drum file...|$|R
40|$|Human {{agents are}} {{extremely}} flexible {{in dealing with}} Natural Language instructions: they are able both to adapt the plan they are developing to the <b>input</b> <b>instructions,</b> and vice versa, to adapt the <b>input</b> <b>instructions</b> to the plan they are developing. Borrowing the term from [Lewis 1979], I call this two-way adaptation process accommodation. In this proposal, I first define accommodation {{in the context of}} processing instructions. I then provide evidence for the particular inferences I advocate, and for the further claim that such inferences are directed by the goal to achieve which certain action is performed. The evidence I provide comes from my analysis of naturally occurring instructions, and in particular of purpose clauses and of negative imperatives. Finally, I propose a computational model of instructions able to support accommodation inferences. Such model is composed of: a speaker / hearer model of imperatives, based on the one presented in [Cohen and Levesque 90]; an action representation formalism based on a hybrid system, á la KRYPTON [Brachman et al. 1983 a], whose primitives are those proposed in [Jackendoff 1990]; and inference mechanisms that contribute to building the structure of the intentions that the agent develops while interpreting instructions...|$|R
40|$|A one-dimensional, two-constraint {{radiation}} sheild weight optimization {{procedure and}} a computer program, DOPEX- 1 D 2 C, is described. The DOPEX- 1 D 2 C uses the steepest descent method to alter a set of initial (input) thicknesses of a spherical shield configuration to achieve a minimum weight while simultaneously satisfying two dose-rate constraints. The code assumes an exponential dose-shield thickness relation with parameters specified by the user. Code <b>input</b> <b>instruction,</b> a FORTRAN- 4 listing, and a sample problem are given. Typical computer time required to optimize a seven-layer shield is less than 1 / 2 minute on an IBM 7094...|$|E
40|$|A binary decoder is {{a common}} {{component}} of software development tools such as instruction set simulators, disassemblers and debuggers. The efficiency of the decoder can {{have a significant impact}} on the efficiency of these software tools. Automated synthesis of efficient binary decoders is therefore necessary for retargetable software tool development frameworks targeting the rapidly growing field of applicationspecific processor design. This paper describes a decoder synthesis algorithm that translates a simple instruction pattern specification into efficient binary decoders in C under given memory constraints. The algorithm constructs a decision tree with carefully chosen decoding primitives and cost models. As demonstrated through two case studies, the synthesized decoders achieve efficiency comparable to hand-coded decoders with ensured correctness. The algorithm has no limitation on the <b>input</b> <b>instruction</b> patterns and it requires only the least amount of knowledge about the instruction encoding. Therefore it can be used with any machine description scheme containing instruction encoding information...|$|E
40|$|Outcomes-Based Education (OBE) {{brought about}} a {{significant}} paradigm shift in the education and training of learners in South Africa. OBE requires a shift from focusing on the teacher <b>input</b> (<b>instruction</b> offerings or syllabuses {{expressed in terms of}} content), to focusing on learner outcomes. OBE is moving away from ‘transmission’ models to constructivistic, learner-centered models that put emphasis on learning as an active process (Nieburh, 1996 : 30). Teachers act as facilitators and mediators of learning (Norms and Standards, Government Gazette vol 415, no 20844 of 2000). Facilitators are responsible to create the environment that is conducive for learners to construct their own knowledge, skills and values through interaction (Peters, 2000). The first critical cross-field outcome accepted by the South African Qualification Framework (SAQA) is that learners should be able to identify and solve problems by using critical and creative thinking skills. This paper seeks to explore some higher order thinking skills competencies required by OBE from learners such as critical thinking, reflective thinking, creative thinking, dialogic / dialectic thinking, decision making, problem solving and emotional intelligence and their implications in facilitating teaching and learning from the theoretical perspective. The philosophical underpinning of these higher order thinking skills is described to give direction to the study. It is recommended that a study focusing on the assessment of these intellectual concepts be made. The study may be qualitative, quantitative or mixed methods in nature (Creswell 2005) ...|$|E
40|$|This report {{presents}} {{a description of}} the use of the nutrient leaching model ANIMO (Agricultural Nutrient Model) version 4. 0 with special emphasis on <b>input</b> <b>instructions.</b> Model <b>input</b> is described by its unit, range, data type and variable name in computer code. Program output and operational aspects of program execution are briefly given. Five examples are presented comprising values of input parameters and model results. A brief technical program description is presented focusing on the program structure, the nomenclature and structure of the source code...|$|R
40|$|A digital {{computer}} program, L 219 (EQMOD), available for execution on the CDC 6600 is described. The program modifies matrices according to card <b>input</b> <b>instructions</b> and prepares magnetic files of matrices {{suitable for use}} in the linear systems analysis program (QR) and the random harmonic analysis program L 221 (TEV 156). The particular field of application of the program is the modification of the theoretical equations of motion and load equations generated in DYLOFLEX by the equation of motion program (L 217) and the load equation program (L 218), respectively...|$|R
40|$|The {{theory and}} {{operation}} of a FORTRAN 4 computer code, designated as TEMOD, used to calcuate tubular thermoelectric generator performance is described in WANL-TME- 1906. The original version of TEMOD was developed in 1969. A description is given of additions to the mathematical model and an update of the <b>input</b> <b>instructions</b> to the code. Although the basic mathematical model described in WANL-TME- 1906 has remained unchanged, {{a substantial number of}} input/output options were added to allow completion of module performance parametrics as required in support of the compact thermoelectric converter system technology program...|$|R
40|$|Thesis (Ph. D.) [...] University of Washington, 2015 This work applies {{evidence}} from second language acquisition studies {{to the question}} of the existence of an inborn, language-specific system that constrains the set of possible human grammars. Three sets of studies are examined and critiqued. The sets were selected so that the studies within each of the sets are comparable on the basis of the target phenomenon investigated and the experimental techniques, but contrast on the basis of their chosen theoretical frameworks. The target phenomena are the Overt Pronoun Constraint, scrambling, and quantifier scope ambiguities. Each set of studies includes at least one study conducted within the generativist approach, advocating for L 2 learner access to an innate language-specific endowment (often called Universal Grammar) that is essential to the acquisition of grammar in the presence of impoverished linguistic input. Also, each set of studies contains at least one study conducted within an emergentist approach, advocating that domain-general learning mechanisms applied to rich and complex linguistic input suffice to explain L 2 learner attainment. All of the target phenomena investigated in these studies are constructions that have been argued in the generative literature to pose poverty-of-the-stimulus (POS) problems for L 2 learners. That is, the linguistic input typically available to learners in the form of second language <b>input,</b> <b>instruction,</b> and through their first language, has been argued to underdetermine the acquisition of the construction. The poverty of the stimulus is considered a cornerstone argument for the existence of UG. Based on my review and critique of the selected studies, I find that their aggregate empirical results support the generativist approach. However, I do not rest this claim on a POS argument; I argue that the premise of insufficiency of input has not been well enough established for the POS argument to be applied. Instead, I argue that the {{evidence from}} these studies is more consistent with generative predictions for sudden, step-wise acquisition of grammatical contrasts, possibly on the basis of limited input, rather than with emergentist predictions for gradual, incremental acquisition on a necessarily substantial amount of input...|$|E
50|$|Among the {{instructions}} added by AVX-512DQ are several SSE, AVX instruction that didn't get AVX-512 versions with AVX-512F, among {{those are all}} the two <b>input</b> bitwise <b>instructions</b> and extract/insert integer instructions.|$|R
40|$|A {{system of}} {{computer}} programs {{was developed to}} model general three dimensional surfaces. Surfaces are modeled as sets of parametric bicubic patches. There are also capabilities to transform coordinates, to compute mesh/surface intersection normals, and to format input data for a transonic potential flow analysis. A graphical display of surface models and intersection normals is available. There are additional capabilities to regulate point spacing on input curves and to compute surface/surface intersection curves. Input and output data formats are described; detailed suggestions are given for user <b>input.</b> <b>Instructions</b> for execution are given, and examples are shown...|$|R
40|$|An {{evaluation}} process {{to determine the}} accuracy of a computer program for thermal network correction is discussed. The evaluation is required since factors such as inaccuracies of temperatures, insufficient number of temperature points over a specified time period, lack of one-to-one correlation between temperature sensor and nodal locations, and incomplete temperature measurements are not present in the computer-generated information. The mathematical models used in the evaluation are those that describe a physical system composed of both a conventional and a heat pipe platform. A description of the models used, {{the results of the}} evaluation of the thermal network correction, and <b>input</b> <b>instructions</b> for the thermal network correction program are presented...|$|R
40|$|The {{purpose of}} this report is to simplify and further explain <b>input</b> <b>instructions</b> for Code TOODY and to {{demonstrate}} {{the ability of the}} code to reproduce cylinder test results. This input is intended to be a supplement to, and not a replacement for, the existing TOODY manual. The TOODY manual should be read and understood before attempting to read this report. Problems arise in the preparation of the input data in four areas: material definition, initial shape definition, the restart feature, and the limiting of output. Aside from these areas, the code is adequately discussed in the manual, `TOODY, A Computer Program For Calculating Problems Of Motion In Two Dimensions`...|$|R
40|$|A two- or three-constraint, {{two-dimensional}} {{radiation shield}} weight optimization procedure {{and a computer}} program, DOPEX, is described. The DOPEX code uses the steepest descent method to alter a set of initial (input) thicknesses for a shield configuration to achieve a minimum weight while simultaneously satisfying dose constaints. The code assumes an exponential dose-shield thickness relation with parameters specified by the user. The code also assumes that dose rates in each principal direction are dependent only on thicknesses in that direction. Code <b>input</b> <b>instructions,</b> FORTRAN 4 listing, and a sample problem are given. Typical computer time required to optimize a seven-layer shield is about 0. 1 minute on an IBM 7094 - 2...|$|R
5000|$|Programs {{are loaded}} into the CAM of a dynamic {{dataflow}} computer. When all of the tagged operands of an instruction become available (that is, output from previous <b>instructions</b> and/or user <b>input),</b> the <b>instruction</b> is marked as ready for execution by an execution unit.|$|R
40|$|This report {{describes}} the primary physical models {{that form the}} basis of the DART mechanistic computer model for calculating fission-product-induced swelling of aluminum dispersion fuels; the calculated results are compared with test data. In addition, DART calculates irradiation-induced changes in the thermal conductivity of the dispersion fuel, as well as fuel restructuring due to aluminum fuel reaction, amorphization, and recrystallization. <b>Input</b> <b>instructions</b> for execution on mainframe, workstation, and personal computers are provided, as is a description of DART output. The theory of fission gas behavior and its effect on fuel swelling is discussed. The behavior of these fission products in both crystalline and amorphous fuel and in the presence of irradiation-induced recrystallization and crystalline-to-amorphous-phase change phenomena is presented, as are models for these irradiation-induced processes...|$|R
40|$|Complete FORTRAN listings {{and running}} {{instructions}} are given {{for a set}} of computer programs that perform an implicit numerical solution to the unsteady Navier-Stokes equations to predict the flow characteristics and performance of nonaxisymmetric nozzles. The set includes the NOZL 3 D program, which performs the flow computations; the NOZLIC program, which sets up the flow field initial conditions for general nozzle configurations, and also generates the computational grid for simple two dimensional and axisymmetric configurations; and the RGRIDD program, which generates the computational grid for complicated three dimensional configurations. The programs are designed specifically for the NASA-Langley CYBER 175 computer, and employ auxiliary disk files for primary data storage. <b>Input</b> <b>instructions</b> and computed results are given for four test cases that include two dimensional, three dimensional, and axisymmetric configurations...|$|R
40|$|Modifications to the FASTEX flutter {{analysis}} computer code (UDFASTEX) are described. The objectives were {{to increase the}} problem size capacity of FASTEX, reduce run times by modification of the modal interpolation procedure, and to add new user features. All modifications to the program are operable on the VAX 11 / 700 series computers under the VAX operating system. Interfaces were provided {{to aid in the}} inclusion of alternate aerodynamic and flutter eigenvalue calculations. Plots can be made of the flutter velocity, display and frequency data. A preliminary capability was also developed to plot contours of unsteady pressure amplitude and phase. The relevant equations of motion, modal interpolation procedures, and control system considerations are described and software developments are summarized. Additional information documenting <b>input</b> <b>instructions,</b> procedures, and details of the plate spline algorithm is found in the appendices...|$|R
40|$|In {{this article}} we respond to VanPatten 2 ̆ 7 s update of the {{findings}} for processing instruction. We begin by questioning the explanatory adequacy of the model of input processing that VanPatten has proposed and that underpins his pedagogic proposals. We question both {{the validity of the}} limited–capacity, single–resource model of attention he proposes for second language classroom learning, and also the details of the mechanisms he argues are implicated in second language processing. We then arguefor alternative explanations of the effects found for <b>input</b> processing <b>instruction</b> and against VanPatten 2 ̆ 7 s claim that the studies he reviews are true replications of earlier findings. Throughout we argue that further specification of cognitive resources, processing mechanisms,and conditions of learning operationalized in putative replications areessential if research into <b>input</b> processing <b>instruction</b> is to be explanatory, and cumulative, as VanPatten claims it is...|$|R
40|$|This report {{documents}} the theoretical {{basis for the}} Rolling Element Bearing Analysis System (REBANS) analysis code which determines the quasistatic response to external loads or displacement of three types of high-speed rolling element bearings: angular contact ball bearings; duplex angular contact ball bearings; and cylindrical roller bearings. The model includes the effects of bearing ring and support structure flexibility. It is comprised of two main programs: the Preprocessor for Bearing Analysis (PREBAN) which creates the input files for the main analysis program; and Flexibility Enhanced Rolling Element Bearing Analysis (FEREBA), the main analysis program. A companion report addresses the <b>input</b> <b>instructions</b> for and features of the computer codes. REBANS extends {{the capabilities of the}} SHABERTH (Shaft and Bearing Thermal Analysis) code to include race and housing flexibility, including such effects as dead band and preload springs...|$|R
50|$|As a consequence, a {{probabilistic}} Turing machine can (unlike a deterministic Turing Machine) have stochastic results; {{on a given}} <b>input</b> and <b>instruction</b> state machine, it {{may have}} different run times, or it may not halt at all; further, it may accept an input in one execution and reject the same input in another execution.|$|R
40|$|MOCUP is {{a system}} of {{external}} processors that allow for a limited treatment of the temporal composition of the user-selected MCNP cells in a time-dependent flux environment. The ORIGEN 2 code computes the time-dependent compositions of these individually selected MCNP cells. All data communication between the two codes is accomplished through the MCNP and ORIGEN 2 input/output files, the MOCUP Processor Output files, and two user supplied tables. MOCUP is either command line or interactively driven. The interactive interface {{is based on the}} portable XII window environment and the Motif tool kit. MOCUP was constructed so that no modifications to either MCNP or ORIGEN 2 were necessary. Section 4 of the writeup contains the <b>input</b> <b>instructions</b> needed to set up the MOCUP run. MOCUP is extremely useful for analysts who perform isotope production, material transformation, and depletion and isotope analyses on complex, non-lattice geometries, and uniform and non-uniform lattices...|$|R
40|$|This manual {{details the}} <b>input</b> <b>instructions</b> {{to the data}} bank, and {{explanation}} {{of the program and}} its output. The data bank was developed in satisfaction of two of the study tasks, the equipment thermal requirement catalog and the equipment characteristics and constraints catalog. The data bank contains 109 components within space tug avionics system. Other systems {{were not included in the}} data bank due to the available information, however, with some program modification, other systems could be incorporated into the data bank program. The data bank was developed and checked out and is compatible with the Univac 1108, and the CDC 6500 operating systems. The data contained in the data bank is general in content with emphasis on the component thermal design. The data is applicable to any spacecraft program where the components contained in the data bank can be applied in satisfaction of the system and subsystem requirements...|$|R
40|$|FORTRAN program RANDOM 2 is {{presented}} {{in the form of a}} user's manual. RANDOM 2 is based on fracture mechanics using a probabilistic fatigue crack growth model. It predicts the random lifetime of an engine component to reach a given crack size. Details of the theoretical background, <b>input</b> data <b>instructions,</b> and a sample problem illustrating the use of the program are included...|$|R
40|$|FORTRAN {{programs}} RANDOM 3 and RANDOM 4 {{are documented}} {{in the form of}} a user's manual. Both programs are based on fatigue strength reduction, using a probabilistic constitutive model. The programs predict the random lifetime of an engine component to reach a given fatigue strength. The theoretical backgrounds, <b>input</b> data <b>instructions,</b> and sample problems illustrating the use of the programs are included...|$|R
40|$|In {{this project}} {{we are using}} the MEMS Accelerometer MMA 7660 IC. This gives the three {{dimensions}} (x, y, and z) readings of a particular object. So if we move any object in any direction then the corresponding values are noted by the accelerometer. Most of the music players are controlled through the remote controls which contain buttons. But through embedding the MEMS Accelerometer we can make music player can control by gesture performance in the air. The application of this three axis accelerometer together with suitable interfacing with the ARM 7 micro controller and the music player development through coding in java which could recognize the hyper terminal <b>input</b> <b>instructions</b> can perform functions like play, stop, play back and play forward of music player controlled by gesture. We need to move the MMA accelerometer in {{a particular set of}} directions then it will recognize one of the directions like REWIND, FORWARD, PLAY and STOP and operate the songs present in the list of music system...|$|R
