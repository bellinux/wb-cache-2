906|10000|Public
500|$|In August 2005, {{journalist}} José Elías of WPAB hosted Ojeda Ríos for an interview. He cited {{a number}} of events that in his view signaled the weakening of capitalism, including {{the possibility of an}} energy crisis caused by the management of petroleum, leading him to speculate that the latest intervention in Iraq was motivated by this. Ojeda Ríos observed that capitalism was losing its flexibility and that the International Monetary Fund could no longer benefit from extending loans to Latin American countries since the consequent debt now prevented them from paying in full any longer, also citing that the actions of Hugo Chávez were influencing a change in the dynamic. He lamented that due to the status issue any problem faced by the United States was exponentially worse in Puerto Rico and warned that a serious economic crisis was impending and that there were no obvious solutions in sight, save for independence. Ojeda Ríos argued that a raise in criminality and the costs of basic necessities would be seen, blaming the legislature for granting tax exemptions to oil importers but not the public. Ojeda Ríos assumed that this incoming crisis would convince the populace that self-determination was unavoidable, resulting in a massification of the ideal and forcing a pre-revolutionary state, but also recognized that planificatiom would be required to [...] "reconstruct" [...] Puerto Rico if independence was reached and that this would take some time and possible sacrifices. He also criticized what he perceived as an inferiority complex imparted by the education system, which he called [...] "a psychological <b>dynamic</b> <b>program</b> [...] the government of the United States", which promotes the belief that Puerto Rico could not sustain itself without foreign intervention, which he expressed must be overcomed during this process. Ojeda Ríos included this as only one aspect of the [...] "devalorization of Puerto Ricans" [...] by the United States, which also included manipulation of the official history, recognizing the work of José Ferrer Canales, Félix Ojeda, Estrade and other historians that publish work that defies the postures of the government and popularized events like the Ponce Massacre. Moving on to other independentists organizations, he argued against reformism within the movement, citing that it had been prevalent since the times of Betances. Ojeda Ríos also expressed some disappointment in the direction taken after the fusion of the MIHN, citing that he expected it to follow the populist example of the Movimiento Pro Independencia, instead of the open cooperation with the PPD, which he perceived as an error that arose from good faith. He discussed how this tendency has caused a rift within the independence movement, which endangered the presence of some organization in the commemoration of the Grito de Lares Lares, a division that the EPB opposed and considered counterproductive. Ojeda Ríos, however, questioned why this sort of confrontation could happen but the PIP did not provide a consistent opposition to the PPD in the legislature. Despite these postures, he expressed respect to the recently deceased PPD mayor of Ponce Rafael Cordero and questioned if the lack of progress in his signature project was because it did not benefit the government of the United States.|$|E
2500|$|... {{return the}} solution, S', using the [...] {{values in the}} <b>dynamic</b> <b>program</b> {{outlined}} above ...|$|E
2500|$|Hazard {{identification}} or {{assessment is}} an important step in the overall risk assessment and risk management process. It is where individual work hazards are identified, assessed and controlled/eliminated as close to source (location of the hazard) as reasonably as possible. As technology, resources, social expectation or regulatory requirements change, hazard analysis focuses controls more closely toward the source of the hazard. Thus hazard control is a <b>dynamic</b> <b>program</b> of prevention. Hazard-based programs also have the advantage of not assigning or implying there are [...] "acceptable risks" [...] in the workplace. A hazard-based program {{may not be able to}} eliminate all risks, but neither does it accept [...] "satisfactory" [...] – but still risky – outcomes. And as those who calculate and manage the risk are usually managers while those exposed to the risks are a different group, workers, a hazard-based approach can by-pass conflict inherent in a risk-based approach.|$|E
40|$|What is <b>dynamic</b> <b>programming?</b> This {{paper is}} {{concerned}} with the class of all dynamic programmings - with or without optimization. Where is an origin in the class? What is it? The paper is a travel which leads to the origin. We present a primitive form of <b>dynamic</b> <b>programming.</b> It is a non-deterministic <b>dynamic</b> <b>programming,</b> which generates stochastic <b>dynamic</b> <b>programming,</b> which in turn reduces to deterministic <b>dynamic</b> <b>programming.</b> Thus we propose the nondeterministic <b>dynamic</b> <b>programming</b> as a primitive <b>dynamic</b> <b>programming...</b>|$|R
40|$|An {{efficient}} {{numerical solution}} scheme entitled adaptive differential <b>dynamic</b> <b>programming</b> is developed {{in this paper}} for multiobjective optimal control problems with a general separable structure. For a multiobjective control problem with a general separable structure, the "optimal" weighting coefficients for various performance indices are time-varying as the system evolves along any noninferior trajectory. Recognizing this prominent feature in multiobjective control, the proposed adaptive differential <b>dynamic</b> <b>programming</b> methodology combines a search process to identify an optimal time-varying weighting sequence with the solution concept in the conventional differential <b>dynamic</b> <b>programming.</b> Convergence of the proposed adaptive differential <b>dynamic</b> <b>programming</b> methodology is addressed. Key Words: Multiobjective optimal control, <b>dynamic</b> <b>programming,</b> multiobjective <b>dynamic</b> <b>programming,</b> differential <b>dynamic</b> <b>programming,</b> adaptive differential <b>dynamic</b> <b>programming.</b> Department of Mathem [...] ...|$|R
40|$|New cache-oblivious and cache-aware {{algorithms}} {{for simple}} <b>dynamic</b> <b>programming</b> based on Valiant’s context-free language recognition algorithm are designed, implemented, analyzed, and empirically evaluated with timing studies and cache simulations. The {{studies show that}} for large inputs the cache-oblivious and cache-aware <b>dynamic</b> <b>programming</b> algorithms are significantly faster than the standard <b>dynamic</b> <b>programming</b> algorithm. Keywords: <b>Dynamic</b> <b>Programming,</b> Cache-Oblivious Algorithms, Cache-Aware Algorithms...|$|R
2500|$|Microsoft {{recommends}} {{dealing with}} <b>dynamic</b> <b>program</b> code {{by using the}} code-behind model, which places this code in a separate file or in a specially designated script tag. Code-behind files typically have names like [...] "MyPage.aspx.cs" [...] or [...] "MyPage.aspx.vb" [...] while the page file is MyPage.aspx (same filename as the page file (ASPX), but with the final extension denoting the page language). This practice is automatic in Visual Studio and other IDEs, though the user can change the code-behind page. Also, in the web application format, the pagename.aspx.cs is a partial class that {{is linked to the}} pagename.designer.cs file. The designer file is a file that is autogenerated from the ASPX page and allows the programmer to reference components in the ASPX page from the CS page without having to declare them manually, as was necessary in ASP.NET versions before version 2. When using this style of programming, the developer writes code to respond to different events, such as the page being loaded, or a control being clicked, rather than a procedural walkthrough of the document.|$|E
50|$|Most {{performance}} analysis tools use <b>dynamic</b> <b>program</b> analysis techniques.|$|E
5000|$|... #Subtitle level 3: Gambling {{game as a}} {{stochastic}} <b>dynamic</b> <b>program</b> ...|$|E
40|$|Dynamic] {{also has}} a very {{interesting}} property as an adjective, and that is its impossible to use the word, dynamic, in a pejorative sense. Try thinking of some combination that will possibly give it a pejorative meaning. Its impossible. Thus, I thought <b>dynamic</b> <b>programming</b> was a good name. ”-Richard Bellman Most of our applications of optimal control involved choosing something {{as a function of}} time. <b>Dynamic</b> <b>programming</b> is another approach to solving optimization problems that involve time. <b>Dynamic</b> <b>programming</b> can be especially useful for problems that in-volve uncertainty. <b>Dynamic</b> <b>programming</b> has the advantage that it lets us focus on one period at a time, which can often be easier to think about than the whole sequence. Be-cause it only requires maximizing over a few variables at a time, <b>dynamic</b> <b>programming</b> can be a much more efficient way to calculate solutions. The computational advantage of <b>dynamic</b> <b>programming</b> is especially pronounced when some of the variables being max-imized over are discrete. 1. REFERENCES These notes are about <b>dynamic</b> <b>programming.</b> References from our text books are chap-ter 11 of Dixit (1990). Adda and Cooper (2003) is very nice and available online from UBC library. Stokey, Lucas Jr, and Prescott (1989) is the classic economics reference for <b>dynamic</b> <b>programming,</b> but is more advanced than what we will cover. Applied <b>dynamic</b> <b>programming</b> by Bellman and Dreyfus (1962) and <b>Dynamic</b> <b>programming</b> and the calculus of variations by Dreyfus (1965) provide a good introduction to the main idea of <b>dynamic</b> <b>programming,</b> and are especially useful for contrasting the dynamic pro-gramming and optimal control approaches. Dreyfus (2002) has some amusing anecdotes from Bellman about the initial development of <b>dynamic</b> <b>programming.</b> Bertsekas (1976) is the classic reference for <b>dynamic</b> <b>programming</b> with uncertainty. 1 DYNAMIC PROGRAMMIN...|$|R
40|$|Although <b>dynamic</b> <b>programming</b> could ideally solve any {{combinatorial}} optimization problem, {{the curse of}} dimensionality of the search space seriously limits its application to large optimization problems. For example, only few papers in the literature have reported the application of <b>dynamic</b> <b>programming</b> to workforce scheduling problems. This paper investigates approximate <b>dynamic</b> <b>programming</b> to tackle nurse scheduling problems of size that <b>dynamic</b> <b>programming</b> cannot tackle in practice. Nurse scheduling {{is one of the}} problems within workforce scheduling that has been tackled with a considerable number of algorithms particularly meta-heuristics. Experimental results indicate that approximate <b>dynamic</b> <b>programming</b> is a suitable method to solve this problem effectively...|$|R
40|$|This paper reviews {{a variety}} of ways to use {{trajectory}} optimization to accelerate <b>dynamic</b> <b>programming.</b> <b>Dynamic</b> <b>programming</b> provides a way to design globally optimal control laws for nonlinear systems. However, the curse of dimensionality, the exponential dependence of space and computation resources needed on the dimensionality of the state and control, limits the application of <b>dynamic</b> <b>programming</b> in practice. We explore trajectory-based <b>dynamic</b> <b>programming,</b> which combines many local optimizations to accelerate the global optimization of dynamic programmin...|$|R
5000|$|Bernd Bruegge, Tim Gottschalk, Bin Luo. A {{framework}} for <b>dynamic</b> <b>program</b> analyzers. In ACM SIGPLAN Notices, 28(10), 1993.|$|E
5000|$|Gambling game can be {{formulated}} as a Stochastic <b>Dynamic</b> <b>Program</b> as follows: {{there are}} [...] games (i.e. stages) {{in the planning}} horizon ...|$|E
50|$|Program {{analysis}} {{can be performed}} without executing the program (static program analysis), during runtime (<b>dynamic</b> <b>program</b> analysis) or in a combination of both.|$|E
40|$|The generic <b>dynamic</b> <b>programming</b> {{problem is}} given {{by a set of}} (<b>dynamic</b> <b>programming)</b> {{recurrence}} equations. It is an important problem with several applications, such as chain matrix multiplication, optimal binary search trees and polygon triangulation, see [9], [2]. The problem we address in this paper {{is given by}} <b>dynamic</b> <b>programming</b> recurrences...|$|R
40|$|International audienceNew cache-oblivious and cache-aware {{algorithms}} {{for simple}} <b>dynamic</b> <b>programming</b> based on Valiant's context-free language recognition algorithm are designed, implemented, analyzed, and empirically evaluated with timing studies and cache simulations. The {{studies show that}} for large inputs the cache-oblivious and cache-aware <b>dynamic</b> <b>programming</b> algorithms are significantly faster than the standard <b>dynamic</b> <b>programming</b> algorithm...|$|R
40|$|For countable-state {{decision}} processes (<b>dynamic</b> <b>programming</b> problems), {{a general}} class of objective functions is identified {{for which it}} is shown that good Markov strategies always exist. This class includes product and lim inf rewards, as well as practically all the classical <b>dynamic</b> <b>programming</b> expected payoff functions. <b>dynamic</b> <b>programming</b> Markov decision process Markov strategy...|$|R
5000|$|The optimal state {{sequence}} [...] can {{be found}} using a very similar Viterbi algorithm to the one used for HMMs. The <b>dynamic</b> <b>program</b> uses the forward probability: ...|$|E
5000|$|Software Engineering & Programming Languages Focus Areas: Software quality, {{programmer}} productivity, software maintenance, mining software {{process data}} for knowledge extraction, static and <b>dynamic</b> <b>program</b> analysis and specification mining ...|$|E
5000|$|Huntley Hope is a <b>dynamic</b> <b>program</b> {{featuring}} {{the best of}} 100 Huntley Street, highlighting conversations on everyday interest, lifestyle and faith. It airs every Tuesday following the 100 Huntley Street broadcast on Yes TV.|$|E
40|$|<b>Dynamic</b> <b>programming</b> (DP) is a {{recursive}} optimization {{approach to}} solving a sequential decision problems. <b>Dynamic</b> <b>Programming</b> {{has much to}} offer to problems requiring a sequence of related decisions. Many applications of <b>dynamic</b> <b>programming</b> reduce to finding the shortest or longest path. Moreover, unlike the transportation algorithm that presumes a standard structure, D...|$|R
40|$|Markov {{decision}} processes (MDPs) are {{a general}} framework used in artificial intelligence (AI) to model decision theoretic planning problems. Solving real world MDPs {{has been a}} major and challenging research topic in the AI literature, since classical <b>dynamic</b> <b>programming</b> algorithms converge slowly. We discuss two approaches in expediting <b>dynamic</b> <b>programming.</b> The first approach combines heuristic search strategies with <b>dynamic</b> <b>programming</b> to expedite the convergence process. The second makes use of graphical structures in MDPs to perform <b>dynamic</b> <b>programming</b> in a better order...|$|R
40|$|Determining {{the optimal}} {{coalition}} structure {{is a central}} problem in multi-agent systems. Two popular techniques include <b>dynamic</b> <b>programming</b> and anytime search algorithms. <b>Dynamic</b> <b>programming</b> algorithms guarantee an optimal solution and have the best worst case running time. Anytime algorithms are flexible as they can terminate before the search has completed, but have a significantly poorer worst case runtime. This paper provides an anytime <b>dynamic</b> <b>programming</b> algorithm with the worst case runtime of <b>dynamic</b> <b>programming</b> and the flexibility of anytime search...|$|R
50|$|Teitelbaum's {{recent work}} {{is aimed at}} the design and {{implementation}} of tools that assist in making software safer and more secure. Techniques include static program analysis and <b>dynamic</b> <b>program</b> analysis of both source code and machine code.|$|E
50|$|The Gallery {{presents}} a diverse and <b>dynamic</b> <b>program</b> of exhibitions and events. These include local, {{national and international}} exhibitions. The exhibitions and events are both generated by the Gallery and those displayed as part of touring schedule.|$|E
5000|$|Dynamic {{programming}} is used when we compute the maximum-weight independent set for each [...] This <b>dynamic</b> <b>program</b> works because each [...] is a -outerplanar graph. Many NP-complete {{problems can be}} solved with dynamic programming on -outerplanar graphs.|$|E
40|$|In (1998), Kovalyov and Kubiak {{studied the}} problem of {{scheduling}} deteriorating jobs on a single machine to minimize makespan. They presented a fully polynomial-time approximation scheme {{which is based on}} a <b>dynamic</b> <b>programming.</b> Unfortunately, their <b>dynamic</b> <b>programming</b> is incorrect. So the fully polynomial-time approximation scheme is also invalid. In this paper, we construct an instance to show how their <b>dynamic</b> <b>programming</b> does not work and provide a correct <b>dynamic</b> <b>programming,</b> based on which a new fully polynomial-time approximation scheme is derived...|$|R
40|$|Ambiguity in <b>dynamic</b> <b>programming</b> {{arises from}} two {{independent}} sources, the non-uniqueness of optimal solutions {{and the particular}} recursion scheme by which the search space is evaluated. Ambiguity, unless explicitly considered, leads to unnecessarily complicated, inflexible, and sometimes even incorrect <b>dynamic</b> <b>programming</b> algorithms. Building upon the recently developed algebraic approach to <b>dynamic</b> <b>programming,</b> we formalize the notions of ambiguity and canonicity. We argue {{that the use of}} canonical yield grammars leads to transparent and versatile <b>dynamic</b> <b>programming</b> algorithms. They provide a master copy of recurrences, that can solve all DP problems in a well-defined domain. We demonstrate the advantages of such a systematic approach using problems from the areas of RNA folding and pairwise sequence comparison. 1 Motivation and Overview 1. 1 Ambiguity Issues in <b>Dynamic</b> <b>Programming</b> <b>Dynamic</b> <b>Programming</b> (DP) solves combinatorial optimization problems. It is a classical p [...] ...|$|R
2500|$|To derive a <b>dynamic</b> <b>programming</b> {{functional}} equation for this puzzle, let {{the state of}} the <b>dynamic</b> <b>programming</b> model be a pair s = (n,k), where ...|$|R
50|$|DynamoRIO is a BSD {{licensed}} dynamic binary instrumentation {{framework for}} the development of <b>dynamic</b> <b>program</b> analysis tools. DynamoRIO targets user space applications under the Android, Linux, and Windows operating systems running on the AArch32, IA-32, and x86-64 instruction set architectures.|$|E
5000|$|Profiling - a {{means by}} which <b>dynamic</b> <b>program</b> {{behaviors}} can be measured during a training run with a representative input. This is useful for properties of a program which cannot be analyzed statically with sufficient precision, such as alias analysis.|$|E
5000|$|DynInst is a runtime code-patching library that {{is useful}} in {{developing}} <b>dynamic</b> <b>program</b> analysis probes and applying them to compiled executables. Dyninst does not require source code or recompilation in general, however, non-stripped executables and executables with debugging symbols are easier to instrument.|$|E
25|$|When {{a problem}} shows optimal {{substructures}} – meaning the optimal {{solution to a}} problem can be constructed from optimal solutions to subproblems – and overlapping subproblems, meaning the same subproblems are used to solve many different problem instances, a quicker approach called <b>dynamic</b> <b>programming</b> avoids recomputing solutions that have already been computed. For example, Floyd–Warshall algorithm, the shortest path to a goal from a vertex in a weighted graph can be found by using the shortest path to the goal from all adjacent vertices. <b>Dynamic</b> <b>programming</b> and memoization go together. The main difference between <b>dynamic</b> <b>programming</b> and divide and conquer is that subproblems are more or less independent in divide and conquer, whereas subproblems overlap in <b>dynamic</b> <b>programming.</b> The difference between <b>dynamic</b> <b>programming</b> and straightforward recursion is in caching or memoization of recursive calls. When subproblems are independent and there is no repetition, memoization does not help; hence <b>dynamic</b> <b>programming</b> is not a solution for all complex problems. By using memoization or maintaining a table of subproblems already solved, <b>dynamic</b> <b>programming</b> reduces the exponential nature of many problems to polynomial complexity.|$|R
40|$|The <b>Dynamic</b> <b>Programming</b> {{algorithm}} {{proposed by}} Rosenblatt and Kaspi (Rosenblatt, M. J., M. Kaspi. 1985. A <b>dynamic</b> <b>programming</b> algorithm for joint replenishment under general order cost functions. Management Sci. 31 (March) 369 [...] 373.) for an optimum partition problem {{is shown to}} be incorrect. An alternative <b>Dynamic</b> <b>Programming</b> algorithm is presented for this problem. ...|$|R
40|$|<b>Dynamic</b> <b>programming</b> {{approach}} {{offers an}} exact solution to solving complex reservoir operational problems. In this research analysis, an {{attempt was made}} to evaluate the relevance of <b>dynamic</b> <b>programming</b> as an optimization tool. A brief overview including the characteristics, advantages and disadvantages of <b>dynamic</b> <b>programming</b> model was understudied. The focus was on the application of <b>dynamic</b> <b>programming</b> to handling the optimal allocation of the available water resources. Cases of large scale reservoir expansion problems were also considered and finally the optimal release policy for reservoir operations. The end result of the model formulation reveals the applicability of <b>dynamic</b> <b>programming</b> in resolving long time operational, water allocation and expansion problems in reservoir dynamics, operations and maintenance...|$|R
