0|282|Public
40|$|We propose general {{separation}} {{procedures for}} <b>generating</b> <b>cuts</b> for the stable set polytope, {{inspired by a}} procedure by Rossi and Smriglio and applying a lifting method by Xavier and Campêlo. In contrast to existing cut-generating procedures, ours generate both rank and non-rank valid inequalities, hence they are of a more general nature than existing methods. This is accomplished by iteratively solving a lifting problem, which consists of a maximum weighted stable set problem on a smaller graph. Computational experience on DIMACS benchmark instances shows that the proposed approach may be {{a useful tool for}} <b>generating</b> <b>cuts</b> for the stable set polytope...|$|R
40|$|Introduction Disjunctive {{programming}} Two basic ideas 2. Compact Representation of the Convex Hull Projection and polarity Adjacency on {{the higher}} dimensional polyhedron 3. Sequential Convexification Disjunctive rank Fractionality of intermediate points 4. Another Derivation of the Basic Results 5. <b>Generating</b> <b>Cuts</b> Deepest cuts Cut lifting Cut strengthening The overall <b>cut</b> <b>generating</b> procedure 6. Branch-and-Cut 7. Variations on the <b>Cut</b> <b>Generating</b> LP Alternative normalizations Complementarity of solution components Reduced size CGLP Multiple cuts from a disjunction 8. Computational Experience Results in branch-and-cut mode Results in cut-and-branch mode Results with a reduced-size CGLP Results with multiple cuts from a disjunction Reference...|$|R
40|$|This paper unifies the {{development}} of the cutting plane algorithm for mathematical programs and variational inequalities by providing one common framework for establishing convergence. strategies for <b>generating</b> <b>cuts</b> are provided for cases in which the algorithm yields easy and difficult subproblems. When the subproblem is easy to solve, a line search is added and a deep cut is selected to accelerate the algorithm. On the other hand, when the subproblem is difficult to solve, the problem is only solved approximately during the early iterations. This corresponds to <b>generating</b> <b>cuts</b> which are nontangential to the underlying objective function. Moreover, in the case of variational inequalities, it is shown further that the subproblem can be eliminated entirely from the algorithmic steps, thereby making the resulting algorithm especially advantageousNational Science Foundation, Washington, DC[URL] Direct FundingN...|$|R
40|$|This paper {{shows how}} valid inequalities {{based on the}} mixing set {{can be used in}} a mixed integer {{programming}} (MIP) solver. It discusses the relation of mixing inequalities to flow path and mixed integer rounding inequalities and how currently used separation algorithms already <b>generate</b> <b>cuts</b> implicitly that can be seen as mixing cuts. Further on, it describes two new separation algorithms that <b>generate</b> mixing <b>cuts</b> from mixed integer paths explicitly. A section with computational results discusses the importance of mixing cuts based on paths for solving MIP problems and reports results for the described separation algorithms. ...|$|R
40|$|Contents 1 Introduction 2 Disjunctive programming................................ 2 Two basic ideas..................................... 3 2 Compact Representation of the Convex Hull 3 Projection and polarity................................. 4 Adjacency on {{the higher}} {{dimensional}} polyhedron.................. 5 3 Sequential Convexication 7 Disjunctive rank.................................... 8 Fractionality of intermediate points.......................... 9 4 Another Derivation of the Basic Results 12 5 <b>Generating</b> <b>Cuts</b> 13 Deepest cuts....................................... 13 Cut lifting........................................ 14 Cut strengthening....... ...|$|R
40|$|AbstractIn this paper, {{we present}} an {{algorithm}} for {{the generation of}} all partitions of a graph G with positive edge weights into k mincuts. The algorithm is an enumeration procedure based on the cactus representation of the mincuts of G. We report computational results demonstrating {{the efficiency of the}} algorithm in practice and describe in more detail a specific application for <b>generating</b> <b>cuts</b> in branch-and-cut algorithms for the traveling salesman problem...|$|R
40|$|Colloque avec actes et comité de lecture. internationale. International audienceWe study {{a hybrid}} MIP/CP {{solution}} approach in which CP {{is used for}} detecting infeasibilities and <b>generating</b> <b>cuts</b> within a branch-and-cut algorithm for MIP. Our framework applies to MIP problems augmented by monotone constraints that can be handled by CP. We illustrate our approach on a generic multiple machine scheduling problem, and compare it to other hybrid MIP/CP algorithms...|$|R
40|$|Abstract. This paper {{addresses}} {{the problem of}} <b>generating</b> <b>cuts</b> for mixed integer nonlinear programs where the objective is linear and {{the relations between the}} decision variables are described by convex func-tions defining a convex feasible region. We propose a new method for strengthening the continuous relaxations of such problems using cutting planes. Our method {{can be seen as a}} practical implementation of the lift-and-project technique in the nonlinear case. To derive each cut we use a combination of a nonlinear programming subproblem and a linear outer approximation. One of the main features of the approach is that the subproblems solved to <b>generate</b> <b>cuts</b> are typically not more com-plicated than the original continuous relaxation. In particular they do not require the introduction of additional variables or nonlinearities. We propose several strategies for using the technique and present prelimi-nary computational evidence of its practical interest. In particular, the cuts allow us to improve over the state of the art branch-and-bound of the solver Bonmin, solving more problems in faster computing times on average...|$|R
40|$|The {{cutting plane}} {{algorithm}} typically <b>generates</b> <b>cuts</b> that are tangential, or nearly so, to the Lagrangian dual {{function of the}} underlying optimization problem. This paper demonstrates that the algorithm still converges to an optimal solution when cuts are nontangential. These <b>cuts</b> are <b>generated</b> by not solving the subproblems to optimality or nearly so. Computational results from randomly generated linear and quadratic programming problems indicate that nontangential cuts {{can lead to a}} more efficient algorithm...|$|R
5000|$|Classifying: Classifying {{objects are}} various screens {{as well as}} objects that {{can be set up}} for either sorting or classifying, e.g. {{upstream}} sorter/classifier. Classifying is performed by means of cut-curves (Tromp Curve).3 Tromp curves describe the probability for a certain material fraction to arrive in the coarse product. For screens, NIAflow <b>generates</b> <b>cut</b> curves automatically based on the machine and media setup. For other machines, user input is required to define the cut curve.|$|R
40|$|A program plan, {{baseline}} process, measurement {{program and}} {{quality control plan}} were <b>generated.</b> <b>Cutting</b> operations were completed on the silicon sheet material. The first fabrication run of polycrystalline silicon into solar cells by baseline process was completed. Average conversion efficiency for solar cells fabricated by the baseline process from sheet and measured at air mass zero was 10. 4 %, compared with the control cells, fabricated from single crystal CZ silicon, whose average conversion efficiency was 12. 2 %...|$|R
40|$|This paper {{addresses}} {{the problem of}} finding cutting planes for multi-stage stochastic integer programs. We give a general method for generating cutting planes for multi-stage stochastic integer programs based on combining inequalities that are valid for the individual scenarios. We apply the method to <b>generate</b> <b>cuts</b> for a stochastic version of a dynamic knapsack problem and to stochastic lot sizing problems. We give computational results which show that these new inequalities are very effective in a branch-and-cut algorithm...|$|R
40|$|The paper {{presents}} a Branch-and-Cut for solving (0, 1) integer linear programs having a large symmetry group. The group {{is used for}} pruning the enumeration tree and for <b>generating</b> <b>cuts.</b> The cuts are non standard, cutting integer feasible solutions but leaving unchanged the optimal value of the problem. Pruning and cut generation are performed by backtracking procedures using a Schreier-Sims table for representing the group. Applications to the generation of covering designs and error correcting codes are presented...|$|R
40|$|The {{traditional}} approach towards <b>generating</b> lift-and-project <b>cuts</b> involves solving a <b>cut</b> <b>generating</b> linear program (CGLP) that grows prohibitively large if a multiple-term disjunction {{is used instead}} of the classical dichotomy. In this paper we present an alternative approach towards <b>generating</b> lift-and-project <b>cuts</b> that solves the cut generation problem in the original space (i. e. does not introduce any extra variables). We present computational results that show our method to be superior to the classical approach. As soon {{as the number of}} terms in the disjunction grows larger than 4, the benet of not solving the large CGLP directly is clear, and the gap grows larger as more terms are included in the disjunction. ...|$|R
40|$|Valid {{cuts are}} {{viewed in the}} {{operations}} research literature as inequalities that strengthen linear relaxations. The constraint satisfaction community has developed an alternate approach. Logical inference methods, such as the resolution method, can <b>generate</b> valid <b>cuts</b> that need not be inequalities and that are considered apart from any role in relaxations. They reduce backtracking by helping to achieve "consistency," which is analogous to integrality in a polyhedral setting. The basic theory underlying these methods is presented here. Parallels with mathematical programming are pointed out, and resolutionbased algorithms for <b>generating</b> <b>cuts</b> are proposed as a unifying theme. Specific topics include k-consistency, adaptive consistency, the dependency graph, and various measures of its width, including induced width and bandwidth. 1. 1 INTRODUCTION Cutting planes {{have been a major}} research focus in the operations research community since the 1950 's. They make possible the branch-and-cut [...] ...|$|R
40|$|This paper {{presents}} two {{new models}} {{to deal with}} different tooling requirements in the generic multiple-product assembly-system design (MPASD) problem and proposes a new branch-and-cut solution approach, which adds cuts at each node in the search tree. It employs the facet generation procedure (FGP) to generate facets of underlying knapsack polytopes. In addition, it uses the FGP {{in a new way}} to <b>generate</b> additional <b>cuts</b> and incorporates two new methods that exploit special structures of the MPASD problem to <b>generate</b> <b>cuts.</b> One new method is based on a principle that can be applied to solve generic 0 - 1 problems by exploiting embedded integral polytopes. The approach includes new heuristic and preprocessing methods, which are applied at the root node to manage the size of each instance. This paper establishes benchmarks for MPASD through an experiment in which the approach outperformed IBM's Optimization Subroutine Library (OSL), a commercially available solver...|$|R
40|$|A graph is planar if {{and only}} if it does not contain a Kuratowski {{subdivision}}. Hence such a subdivision {{can be used as a}} witness for non-planarity. Modern planarity testing algorithms allow to extract a single such witness in linear time. We present the first linear time algorithm which is able to extract multiple Kuratowski subdivisions at once. This is of particular interest for, e. g., Branch-and-Cut algorithms which require multiple such subdivisions to <b>generate</b> <b>cut</b> constraints. The algorithm is not only described theoretically, but we also present an experimental study of its implementation. ...|$|R
40|$|In this paper, {{we study}} <b>cut</b> <b>generating</b> {{functions}} for conic sets. Our first main result shows {{that if the}} conic set is bounded, then <b>cut</b> <b>generating</b> functions for integer linear programs can easily be adapted to give the integer hull of the conic integer program. Then we introduce {{a new class of}} <b>cut</b> <b>generating</b> functions which are non-decreasing with respect to second-order cone. We show that, under some minor technical conditions, these functions together with integer linear programming-based functions are sufficient to yield the integer hull of intersections of conic sections in R^ 2...|$|R
50|$|The game {{makes use}} of CGI to create a 3D effect, {{including}} a slow camera pan drift. The player can zoom in and out from different angles during gameplay. There are also several computer <b>generated</b> <b>cut</b> scenes. The art style for the characters is a typical anime look, {{as opposed to a}} realistic or super deformed one. In addition, the game features a wide selection of alternate costumes for all the playable characters, including several originally used by characters from the previous Wild Arms games, that can be obtained during gameplay.|$|R
40|$|Contents 1 Introduction 2 1. 1 Table: Properties of Cut Numbers............................ 2 2 Motivation 2 2. 1 Figure: Bounds on Cut Numbers............................. 2 2. 2 Lemma: Known Properties of Slicing Numbers..................... 3 3 Results 3 3. 1 Lemma: New Properties of Slicing Numbers....................... 4 3. 2 Theorem: Main Result................................... 5 3. 3 Table: Bounds on Slicing Numbers up to Dimension 8................. 5 3. 4 Table: 4 cuts slicing 181 {{edges of}} the 6 -cube....................... 5 3. 5 Table: Some Upper Bounds................................ 5 3. 6 Table: 4 cuts slicing 908 {{edges of the}} 8 -cube....................... 6 3. 7 Table: Other Computer <b>Generated</b> <b>Cuts.</b> ...|$|R
40|$|Thìs work evidences the {{different}} dynamical behavìour of cut and cracked bars by showing their response {{from both the}} numerica] and experìmental points of view. Different energy dissipation mechanisms evident from experimental {{results show that the}} bar behaviour cannot be modelled as viscous or the structural damping. A crack dissipates more energy than a cut because of the friction of the two contact surfaces. When damping is being considered, it is therefore not always acceptable to study diagnostic problems in the laboratory, as ìs frequently done by <b>generating</b> <b>cuts</b> rather than cracks because i t is simpler...|$|R
40|$|We study {{continuous}} (strongly) minimal <b>cut</b> <b>generating</b> {{functions for}} the model where all variables are integer. We consider both the original Gomory-Johnson setting {{as well as a}} recent extension by Cornuéjols and Yıldız. We show that for any continuous minimal or strongly minimal <b>cut</b> <b>generating</b> function, there exists an extreme <b>cut</b> <b>generating</b> function that approximates the (strongly) minimal function as closely as desired. In other words, the extreme functions are "dense" in the set of continuous (strongly) minimal functions. Comment: A subset of these results appeared in Proceedings of IPCO 2016, Lecture Notes in Computer Science, vol. 9682, pp. 202 [...] 21...|$|R
40|$|We {{have used}} a {{combination}} of BsuE methyltransferase (M-BsuE) and NotI restriction enzyme to cut genomic DNA at a subset of NotI sites. The usefulness of this system is shown in a re-examination of the restriction map of the human MHC. Combinations of methylases and restriction enzymes {{can be used to}} <b>generate</b> <b>cuts</b> at different frequencies in genomic DNA, such that they generate ends complementary to NotI ends, and can be used in conjunction with NotI linking clones in chromosome jumping experiments. These enzyme combinations have the potential to produce cutting sites in genomic DNA spaced at intervals favorable for extensive mapping, fragment enrichment, and cloning efforts...|$|R
40|$|International audienceIn {{this paper}} we {{consider}} scheduling tasks on a multiprocessor system, {{taking into account}} communication delays. We propose a new Mixed Integer Program (MIP) formulation that drastically reduces both the number of variables {{and the number of}} constraints, when compared to the best mathematical programming formulations from the literature. In addition, we propose pre-processing procedures that <b>generates</b> <b>cuts</b> and bounds on all variables, reducing the solution space of the problem as well. Cuts are obtained by using forward and backward critical path method from project management field, while the upper bound is derived from the new greedy heuristic. Computational experience shows advantages of our approach...|$|R
40|$|Abstract In {{this paper}} {{we present a}} {{methodology}} for finding tight convex relaxations for a special set of quadratic constraints given by bilinear and linear terms that frequently arise in the optimization of process networks. The basic idea lies on exploiting {{the interaction between the}} vector spaces where the different set of variables are defined in order to <b>generate</b> <b>cuts</b> that will tighten the relaxation of traditional approaches. These cuts are not dominated by the McCormick convex envelopes and can be effectively used in conjunction with them. The performance of the method is tested in several case studies by implementing the resulting relaxation within a spatial branch and bound framework...|$|R
40|$|An {{original}} {{technique to}} transform functional {{representation of the}} design into a structural representation in form of a data ow graph (DFG) is described. A canonical, word-level data structure, Taylor Expansion Diagram (TED), {{is used as a}} vehicle to effect this transformation. The problem is formulated as that of applying a sequence of decomposition cuts to the TED that transforms it into a family of DFGs. A systematic approach to <b>generate</b> <b>cut</b> sequences and metrics to evaluate the cost of the resulting DFGs are described. Experimental results show that such constructed DFGs provide a better starting point for architectural synthesis that those derived directly from HDL specifications. ...|$|R
40|$|In {{this paper}} {{we present a}} {{methodology}} for finding tight convex relaxations for a special set of quadratic constraints given by bilinear and linear terms that frequently arise in the optimization of process networks. The basic idea lies on exploiting {{the interaction between the}} vector spaces where the different set of variables are defined in order to <b>generate</b> <b>cuts</b> that will tighten the relaxation of traditional approaches. These cuts are not dominated by the McCormick convex envelopes and can be effectively used in conjunction with them. The performance of the method is tested in several case studies by implementing the resulting relaxation within a spatial branch and bound framework...|$|R
40|$|This {{report is}} the user's manual for MOCUS-BACFIRE, a {{computer}} programme for qualitative common cause analysis. The MOCUSBACFIRE package code {{was developed by}} coupling the MOCUS code and BACFIRE code. The MOCUS code is a computer programme to <b>generate</b> <b>cut</b> sets of a fault tree. BACFIRE is a computer programme to search among the basic events of a minimal cut set for potential common casuse failures. Both codes are written in FORTRAN IV for the IBM 360 / 370 computer series. The input data to MOCUS-BACFIRE are the fault tree and common cause susceptibilities. The input and output of the programme are described in detail in this handbook...|$|R
50|$|Files {{which are}} <b>generated</b> by Final <b>Cut</b> Pro, i.e. audio {{waveform}} display, filter effects, etc.|$|R
5000|$|... #Caption: Computer <b>generated</b> {{animation}} of <b>cut</b> {{section of}} the human heart showing both the ventricles.|$|R
5000|$|Gene editing {{mediated}} through {{double strand}} DNA break repair (e.g. CRISPR, ZFN), which <b>generate</b> a <b>cut</b> in DNA, after which a cell’s natural DNA repair mechanisms fix the break, during which errors can occur or modified sequence can be introduced ...|$|R
40|$|This paper {{presents}} a general, self-contained treatment of convexity or intersection cuts. It describes two equivalent ways of <b>generating</b> a <b>cut</b> | via a convex set or a concave function | and {{a notion of}} strongest cuts. We characterize {{the structure of the}} sets and functions that <b>generate</b> strongest <b>cuts.</b> We then specialize the framework to the case of 0 - 1 mixed-integer linear programming (MIP). For this case, we formulate two kinds of the deepest cut generation problem, via sets or via functions. We then consider some special cases of the deepest cut generation problem which are amenable to ecient computation. We conclude with computational tests of one of these procedures on a large set of MIPLIB problems...|$|R
40|$|We {{study the}} big-bucket capacitated lot sizing problem with setup times. We use the novel {{methodology}} of Akartunali et al. (2014) that exploits two-period relaxations of the formulation {{in order to}} generate inequalities that cut-off the optimal solution of the linear programming relaxation. Our approach applies column generation in an unconventional way, with the master problem being a distance minimizing formulation and the subproblems being combina-torial two-period relaxations of the original problem. We identify a lower bound of the dimensionality of the <b>generated</b> <b>cuts</b> and provide extensive computational experiments that show how the generated bounds compare with other state-of- the-art approaches. Our results show that, for certain classes of problems, the bound improvement is considerable...|$|R
5000|$|DNA ends {{refer to}} the {{properties}} of the end of DNA molecules, which may be sticky ends (cohesive ends), blunt ends or in other forms. The concept is used in molecular biology, especially in cloning or when subcloning inserts DNA into vector DNA. Such ends may be generated by restriction enzymes that cut the DNA - a staggered <b>cut</b> <b>generates</b> two sticky ends, while a straight <b>cut</b> <b>generate</b> blunt ends.|$|R
40|$|Abstract. Cutting plane {{methods are}} widely used for solving convex {{optimization}} problems and are of fundamental importance, e. g., to pro-vide tight bounds for Mixed-Integer Programs (MIPs). This is obtained by embedding a cut-separation module within a search scheme. The importance of a sound search scheme {{is well known in}} the Constraint Programming (CP) community. Unfortunately, the “standard ” search scheme typically used for MIP problems, known as the Kelley method, is often quite unsatisfactory because of saturation issues. In this paper we address the so-called Lift-and-Project closure for 0 - 1 MIPs associated with all disjunctive <b>cuts</b> <b>generated</b> from a given set of elementary disjunction. We focus on the search scheme embedding the <b>generated</b> <b>cuts.</b> In particular, we analyze a general meta-scheme for cutting plane algorithms, called in-out search, that was recently proposed by Ben-Ameur and Neto [1]. Computational results on test instances from the literature are presented, showing that using a more clever meta-scheme on top of a black-box cut generator may lead to a significant improvement...|$|R
40|$|In {{this paper}} we {{consider}} the scheduling problem of minimizing {{the sum of the}} weights of the late jobs on a single machine (1 |rj| [sum] wj Uj). A branch-and-check algorithm is proposed, where a relaxed integer programming formulation is solved by branch-and-bound and infeasible solutions are cut off using unfeasibility cuts. We suggest two ways to <b>generate</b> <b>cuts.</b> First we show how the algorithm by Carlier [7] can be modified to produce tightened "no-good" cuts. We then demonstrate how to create cuts by using constraint propagation. The branch-and check algorithm proposed is implemented in the Mosel modelling and optimization language. Computational experiments show that our algorithm outperforms the exact approach of P©♭ridy et al. [22], which, to our knowledge, is the best reported in the literature...|$|R
