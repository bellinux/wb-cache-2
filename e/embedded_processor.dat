788|1487|Public
25|$|In an <b>embedded</b> <b>processor</b> or DSP, high-repetition {{interrupts}} {{require the}} shortest {{number of cycles}} per interrupt, such as an interrupt that occurs 1000 or 10000 times a second.|$|E
25|$|Neither Motorola nor Hitachi produce 6809 {{processors}} or derivatives anymore. 6809 cores {{are available}} in VHDL and can be programmed into FPGA and used as an <b>embedded</b> <b>processor</b> with speed ratings up to 40MHz. Some 6809 opcodes also live on in the Freescale embedded processors. In 2015, Freescale authorized Rochester Electronics to start manufacturing the MC6809 once again as a drop-in replacement and copy of the original NMOS device. Freescale supplied Rochester Electronics the original GDS2 physical design database. At the end of 2016, Rochester's MC6809 (including the MC68A09, and MC68B09) is fully qualified and available in production.|$|E
25|$|Digital {{sampling}} is used {{to convert}} an audio wave to a sequence of binary numbers that {{can be stored in}} a digital format, such as MP3. Common features of all MP3 players are a memory storage device, such as flash memory or a miniature hard disk drive, an <b>embedded</b> <b>processor,</b> and an audio codec microchip to convert the compressed file into an analogue sound signal. During playback, audio files are read from storage into a RAM based memory buffer, and then streamed through an audio codec to produce decoded PCM audio. Typically audio formats decode at double to more than 20 times real speed on portable electronic processors, requiring that the codec output be stored for a time until the DAC can play it. To save power, portable devices may spend much or nearly all of their time in a low power idle state while waiting for the DAC to deplete the output PCM buffer before briefly powering up to decode additional audio.|$|E
5000|$|Efficient {{software}} implementations of cryptography for <b>embedded</b> <b>processors</b> ...|$|R
40|$|This {{tutorial}} {{responds to}} {{the increasing use of}} <b>embedded</b> <b>processors</b> for implementing systemson -a-chip. We will provide an introduction to <b>embedded</b> <b>processors</b> and we will show that current compilers do not provide the required efficiency. We will give an overview over new compiler optimization techniques, which aim at making assembly language programming for embedded software obsolete. Finally, we will present techniques for retargeting compilers to new architectures. One of the approaches closes the gap between electronic CAD and compiler generation. I. <b>Embedded</b> <b>Processors,</b> Core <b>Processors</b> and <b>Embedded</b> Systems There has recently been a huge amount of interest in <b>embedded</b> <b>processors</b> in general and in <b>embedded</b> core <b>processors</b> in particular. What is the main reason behaind this huge interest? The main reason is flexibility. It is possible to change the overall behavior of a processor-based design by changing the program that is executed on the processor. This way, it is possible to acc [...] ...|$|R
5000|$|C*Core C1000 {{a family}} of 476FP-core-based <b>embedded</b> <b>processors</b> for {{consumer}} electronics ...|$|R
25|$|As of April 2017, MIPS {{processors}} {{are used}} in embedded systems such as residential gateways and routers. Originally, MIPS was designed for general-purpose computing, and during the 1980s and 1990s, MIPS processors for personal, workstation, and server computers were used by many companies such as Digital Equipment Corporation, MIPS Computer Systems, NEC, Pyramid Technology, SiCortex, Siemens Nixdorf, Silicon Graphics, and Tandem Computers. Historically, video game consoles such as the Nintendo 64, Sony PlayStation, PlayStation 2 and PlayStation Portable use MIPS processors. MIPS processors also used to be popular in supercomputers during the 1990s, but all such systems have dropped off the TOP500 list. These uses were complemented by embedded applications at first, but during the 1990s, MIPS became a major presence in the <b>embedded</b> <b>processor</b> market, and by the 2000s, most MIPS processors were for these applications. In the mid- to late-1990s, {{it was estimated that}} one in three RISC microprocessors produced was a MIPS processor.|$|E
2500|$|Since 2010 a new {{open source}} {{instruction}} set architecture (ISA), RISC-V, {{has been under}} development at the University of California, Berkeley, for research purposes and as a free alternative to proprietary ISAs. As of 2014, version 2 of the user space ISA is fixed. [...] The ISA {{is designed to be}} extensible from a barebones core sufficient for a small <b>embedded</b> <b>processor</b> to supercomputer and cloud computing use with standard and chip designer defined extensions and coprocessors. It has been tested in silicon design with the ROCKET SoC which is also available as an open source processor generator in the CHISEL language.|$|E
2500|$|AMD {{had some}} success in the mid-1980s with the AMD7910 and AMD7911 [...] "World Chip" [...] FSK modem, {{one of the first}} multi-standard devices that covered both Bell and CCITT tones at up to 1200 baud half duplex or 300/300 full duplex. Beginning in 1986, AMD embraced the {{perceived}} shift toward RISC with their own AMD Am29000 (29k) processor; the 29k survived as an <b>embedded</b> <b>processor.</b> The company also increased its EPROM memory market share in the late 1980s. Throughout the 1980s, AMD was a second-source supplier of Intel x86 processors. In 1991, it introduced its own 386-compatible Am386, an AMD-designed chip. Creating its own chips, AMD began to compete directly with Intel.|$|E
40|$|The growing {{market of}} {{embedded}} systems and applications {{has led to}} the making of more general <b>embedded</b> <b>processors,</b> with some features traditionally associated with general-purpose microprocessors. Following this trend, recent research has tried to incorporate into <b>embedded</b> <b>processors</b> the newest techniques to break down ILP limits. Value speculation is a recent technique not yet considered in the context of <b>embedded</b> <b>processors,</b> and the goal of the present work is to analyse the performance potential of this technique within this scope. 1 Introduction Over the last few years, the increasing number of communication and multimedia applications has brought about a growing demand for high performance in embedded computing systems [1], [2], and many of the techniques for extracting InstructionLevel Parallelism (ILP), traditionally used in high performance general-purpose systems, are being applied to <b>embedded</b> <b>processors</b> [3]. The limits on the amount of extractable ILP are due to th [...] ...|$|R
5000|$|FPGA soft {{processor}} {{software development}} tools (compiler, debugger, profiler) for several <b>embedded</b> <b>processors</b> ...|$|R
5000|$|TI-RTOS Interprocessor Communication: APIs {{to support}} {{communication}} between TI's <b>embedded</b> <b>processors</b> (Evolved from DSP/BIOS_Link) ...|$|R
50|$|Keith Diefendorff {{has been}} working in the <b>embedded</b> <b>processor</b> space. First at the <b>embedded</b> <b>processor</b> IP-core company ARC International. After ARC Diefendorrf moved to MIPS Technologies.|$|E
50|$|S+core is Taiwan's first 32bit <b>embedded</b> <b>processor</b> {{design and}} has {{commercial}} success.|$|E
5000|$|... #Caption: An Intel i386 EX <b>embedded</b> <b>processor</b> {{inside a}} Garmin GPS III+ ...|$|E
5000|$|<b>Embedded</b> <b>processors</b> support, lower power consumption, {{offloading}} work to specialized hardware units (such as DSPs) ...|$|R
40|$|An <b>Embedded</b> <b>Processors</b> {{is simply}} a µProcessors that has been “Embedded” into a device. Embedded systems are {{important}} part of human life. For illustration, one cannot visualize life without mobile phones for personal communication. Embedded systems are used in many places like healthcare, automotive, daily life, and in different offices and industries. <b>Embedded</b> <b>Processors</b> develop new research area {{in the field of}} hardware designing...|$|R
5000|$|In September, Phoenix {{acquired}} General Software of Bellevue, WA, {{to extend}} its firmware leadership to {{a wide array of}} specialized high-value, high-margin devices that use <b>embedded</b> <b>processors</b> (<b>embedded</b> systems), from mobile and consumer electronics to data communications.|$|R
50|$|Nios II is a {{successor}} to Altera's first configurable 16-bit <b>embedded</b> <b>processor</b> Nios.|$|E
50|$|Nios was Altera's first {{configurable}} 16-bit <b>embedded</b> <b>processor</b> for its FPGA product-line. For new designs, Altera {{recommends the}} 32-bit Nios II.|$|E
5000|$|Sometimes, {{development}} tools {{for a personal}} computer can be used if the <b>embedded</b> <b>processor</b> is a close relative to a common PC processor ...|$|E
50|$|Code Composer Studio (CCStudio or CCS) is an {{integrated}} development environment (IDE) to develop applications for Texas Instruments (TI) <b>embedded</b> <b>processors.</b>|$|R
50|$|Today, TI {{is made up}} of four divisions: analog products, <b>embedded</b> <b>processors</b> (EP), digital light {{processing}} (DLP), {{and educational}} technology (ET).|$|R
40|$|This paper {{describes}} a design approach for incorporating sequence-aware watermarks in soft IP <b>embedded</b> <b>processors.</b> The influence of watermark sequence parameters on detection, area and power overheads is examined, and consequently a sequence-aware method for incorporating sequence-aware watermarks in soft IP <b>Embedded</b> <b>Processors</b> is proposed. The intrinsic parameters of sequences, {{such as the}} activity factor and the overlapping factor are introduced, {{and their impact on}} correlation results is demonstrated. Measurement experimental results from FPGA and ASIC validate the design approach and demonstrate the resulting IP protection and subsequent costs for constrained <b>embedded</b> <b>processors.</b> Results presented in this paper show that the tradeoff occurs between the watermark robustness against third party IP attacks and hardware implementation costs. The analysis of this tradeoff is provided and an application specific watermark implementation is proposed...|$|R
5000|$|Aptiv: microAptiv (compact, {{real-time}} <b>embedded</b> <b>processor</b> core), interAptiv (multiprocessor, multi-threaded core with a nine-stage pipeline), proAptiv (super-scalar, deeply out-of-order {{processor core}} with high CoreMark/MHz score) ...|$|E
50|$|The ESP430CE module {{performs}} metering calculations {{independent of}} the CPU. Module has separate SD16, HW multiplier, and the ESP430 <b>embedded</b> <b>processor</b> engine for single-phase energy-metering applications.|$|E
5000|$|... 2005 Digi acquires FS Forth-Systeme GmbH (Breisach, Germany) and Sistemas Embebidos S.A. (Logroño, Spain), {{manufacturers}} of <b>embedded</b> <b>processor</b> modules using Net Silicon and other processor platforms.|$|E
40|$|This {{tutorial}} {{responds to}} {{the increasing use of}} <b>embedded</b> <b>processors</b> for implementing systems-on-a-chip. We will provide an introduction to <b>embedded</b> <b>processors</b> and we will show that current compilers do not provide the required efficiency. We will give an overview over new compiler optimization techniques, which aim at making assembly language programming for embedded software obsolete. Finally, we will present techniques for retargeting compilers to new architectures. One of the approaches closes the gap between electronic CAD and compiler generation...|$|R
50|$|These {{protocols}} {{are today}} {{the de facto}} standard for 32-bit <b>embedded</b> <b>processors</b> because they are well documented {{and can be used}} without royalties.|$|R
50|$|META family {{consists}} of Meta HTP applications processors (400-700 MHz on 65L - 65G process), META MTP <b>Embedded</b> <b>Processors</b> and Meta LTP Embedded Microcontrollers.|$|R
50|$|Jasper Forest is a Nehalem-based <b>embedded</b> <b>processor</b> with PCI Express {{connections}} on-die, core counts from 1 to 4 cores {{and power}} envelopes from 23 to 85 watts.|$|E
5000|$|In an <b>embedded</b> <b>processor</b> or DSP, high-repetition {{interrupts}} {{require the}} shortest {{number of cycles}} per interrupt, such as an interrupt that occurs 1000 or 10000 times a second.|$|E
50|$|Paolo Faraboschi {{from the}} Hewlett-Packard, Barcelona, Spain was named Fellow of the Institute of Electrical and Electronics Engineers (IEEE) in 2014 for {{contributions}} to <b>embedded</b> <b>processor</b> architecture and system-on-chip technology.|$|E
40|$|Abstract | This {{tutorial}} {{responds to}} {{the increasing use of}} <b>embedded</b> <b>processors</b> for implementing systemson-a-chip. We will provide an introduction to <b>embedded</b> <b>processors</b> and we will show that current compilers do not provide the required e ciency. We will giveanoverview over new compiler optimization techniques, which aim at making assembly language programming for embedded software obsolete. Finally, we will present techniques for retargeting compilers to new architectures. One of the approaches closes the gap between electronic CAD and compiler generation...|$|R
40|$|Designers of <b>embedded</b> <b>processors</b> have {{typically}} optimized for {{low power consumption}} and low design complexity to minimize cost. Performance was a secondary consideration. Nowadays, many embedded systems (set-top boxes, game consoles, personal digital assistants, and cell phones) commonly perform computation-intensive media tasks such as video processing, speech transcoding, graphics, and high-bandwidth telecommunications. Consequently, modern <b>embedded</b> <b>processors</b> must provide high performance in addition to low cost. They must also be easy to scale and customize to meet the rigorous time-to-market requirements fo...|$|R
40|$|This {{paper is}} {{motivated}} by two essential characteristics of embedded systems: the increasing amount of software that is used for implementing embedded systems {{and the need for}} implementing embedded systems efficiently. As a consequence, embedded software has to be efficient. In the following, we will present techniques for generating efficient machine code for architectures which are typically found in embedded systems. We will demonstrate, using examples, how compilers for <b>embedded</b> <b>processors</b> can exploit features that are found in <b>embedded</b> <b>processors...</b>|$|R
