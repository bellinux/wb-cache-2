8|140|Public
5000|$|... {{register}} the format file extension into the preferred <b>file</b> <b>filter</b> (typically all plain text based formats) ...|$|E
50|$|In prior Windows {{versions}} it {{was based}} on a <b>file</b> <b>filter</b> that watched changes for a certain set of file extensions, and then copied files before they were overwritten. An updated version of System Restore introduced by Windows Vista uses the Shadow Copy service as a backend (allowing block-level changes in files located in any directory on the volume to be monitored and backed up regardless of their location) and allows System Restore to be used from the Windows Recovery Environment in case the Windows installation no longer boots at all.|$|E
40|$|A text <b>file</b> <b>filter</b> is {{a program}} that {{converts}} one text file into another {{on the basis of}} a set of rules. For statistical applications, a text <b>file</b> <b>filter</b> can convert data embedded in a complicated text file so that Stata can read and analyze it. A text <b>file</b> <b>filter</b> can also automate the production of more user-friendly output from long Stata log files. The file command lets you use text file filters in Stata. This article reviews some key programming points for successful implementation of such filters. Copyright 2007 by StataCorp LP. nullfilter, matchfilter, hyperlog, file, log, navigation, text, filtering, data import, data export, HTML, hyperlink index...|$|E
5000|$|Regular {{expression}} based <b>file</b> <b>filters</b> in directory compare allow excluding {{and including}} items.|$|R
5000|$|Ability to move, rename, and delete {{the correct}} <b>file</b> in <b>filtered</b> lists.|$|R
5000|$|The {{most common}} {{application}} of Synchronize It! {{is to compare}} two folders - a source folder and a target folder. You can choose whether subfolders should be included (allowing exclusion of specific subfolders), whether only matching folders should be compared and you can apply <b>file</b> <b>filters.</b> Various actions and comparison modes are available (see below). Custom sessions can be saved and organized into projects.|$|R
40|$|Website attack has seriously {{affected}} the owner’s profit {{and the security}} of the Internet. In this paper, a Filter Driver and Reverse Proxy based Web Protection System (FRPWPS) with a version control-based safe recovery mechanism is proposed. FRPWPS consists of five sub systems including web file monitor, content publish, web reverse proxy, backup and recovery, and monitor center. The <b>file</b> <b>filter</b> driver is used to protect web program files from illegally tampered. The protected websites are run behind a web proxy with intrusion detection function. The backup and recovery subsystem is realized by a FTP protocol. Experiments analyze the functions and costs of FRPWPS, and results show that it can work well and achieve good performance for web protection...|$|E
40|$|Abstract. This paper {{presents}} a system architecture {{through a new}} type of strategy for web-page tamper-resistant. The new strategy emphasizes the following points: by using of <b>file</b> <b>filter</b> technology timely find out and block the malicious tampering so that the illegal malicious tampering is prevented; the tamper-resistant module and digital watermark module are distributed in two different servers and the servers are separated by a firewall to strengthen the overall security of the system; to ensure the security of the tamper-resistant process, it is necessary to deployment a single chip machine to protect the tamper-resistant process. With the scale construction of domestic websites, the number of sites increases rapidly, but because network management departments at all levels lag in network security technology, website security problems are becoming increasingly serious, which is particularly serious in web-pag...|$|E
40|$|International audienceWe {{give the}} {{definition}} of 166 words used in image processing. Adaptivity, aliazing, analog-digital converter, analysis, approximation, arc, artifact, artificial intelligence, attribute, autocorrelation, bandwidth, boundary, brightness, calibration, class, classification, classify, centre, cluster, coding, color, compression, contrast, connectivity, convolution, correlation, data base, decision, decomposition, deconvolution, deduction, descriptor, detection, digitization, dilation, discontinuity, discretization, discrimination, disparity, display, distance, distorsion, distribution dynamic, edge, energy, enhancement, entropy, erosion, estimation, event, extrapolation, feature, <b>file,</b> <b>filter,</b> filter floaters, fitting, Fourier transform, frequency, fusion, fuzzy, Gaussian, gradient, graph, gray level, group, growing, histogram, Hough transform, Houndsfield, image, impulse response, inertia, intensity, interpolation, interpretation, invariance, isotropy, iterative, JPEG, knowledge base, label, laplacian, learning, least squares, likelihood, matching, Markov field, mask, matching, mathematical morphology, merge (to), MIP, median, minimization, model, moir?moment, MPEG, neural network, neuron, node, noise, norm, normal, operator, optical system, optimization, orthogonal, parametric, pattern recognition, periodicity, photometry, pixel, polygon, polynomial, prediction, pulsation, pyramidal, quantization, raster, reconstruction, recursive, region, rendering, representation space, resolution, restoration, robustness, ROC, thinning, transform, sampling, saturation, scene analysis, segmentation, separable function, sequential, smoothing, spline, split (to), shape, threshold, tree, signal, speckle, spectrum, spline, stationarity, statistical, stochastic, structuring element, support, syntaxic, synthesis, texture, truncation, variance, vision, voxel, windowing...|$|E
40|$|The project {{consists}} {{in the initial}} development of a web based and cloud computing services to allow students and researches to perform fast and very useful cut-based pre-analysis on a browser, using real data and official Monte-Carlo simulations (MC). Several tools are considered: ROOT <b>files</b> <b>filter,</b> JavaScript Multivariable Cross-Filter, JavaScript ROOT browser and JavaScript Scatter-Matrix Libraries. Preliminary but satisfactory results have been deployed online for test and future upgrades...|$|R
5000|$|The default {{extension}} for {{the policy}} file is [...]POL.The policy <b>file</b> <b>filters</b> the settings it enforces by user and by group (a [...] "group" [...] is a defined set of users). To do {{that the policy}} file merges into the Registry, preventing users from circumventing it by simply changing back the settings.The policy file is usually distributed through a LAN, but can {{be placed on the}} local computer.|$|R
30|$|The first {{experiment}} {{aimed to}} compare the processing time between Spark and Pig. Both scripts are designed to read the data <b>files,</b> <b>filter</b> data by class value, group, anonymize and ungroup. The program concept {{is similar to the}} algorithm described in Fig.  5. Spark was setup with a total of five workers with 10 cores. The cores are distributed as two cores and 4  GB memory per worker node. The five nodes have 20  GB of memory, with a total of 10 executers.|$|R
40|$|Digital {{forensics}} is {{a branch}} of Computer Science aiming at investigating and analyzing electronic devices {{in the search for}} crime evidence. There are several ways to perform this search. Known <b>File</b> <b>Filter</b> (KFF) is one of them, where a list of interest objects is used to reduce/separate data for analysis. Holding a database of hashes of such objects, the examiner performs lookups for matches against the target device. However, due to limitations over hash functions (inability to detect similar objects), new methods have been designed, called approximate matching. This sort of function has interesting characteristics for KFF investigations but suffers mainly from high costs when dealing with huge data sets, as the search is usually done by brute force. To mitigate this problem, strategies have been developed to better perform lookups. In this paper, we present {{the state of the art}} of similarity digest search strategies, along with a detailed comparison involving several aspects, as time complexity, memory requirement, and search precision. Our results show that none of the approaches address at least these main aspects. Finally, we discuss future directions and present requirements for a new strategy aiming to fulfill current limitations...|$|E
40|$|This list of NSMP probeset names {{is used by}} pa. calls() in {{calculating the}} NSMP {{expression}} distribution. It is specific to the chip type; the correct version is automatically loaded for the detected chip type, if supported. The user does not load or use this data directly. data(NSMPnames. hgu 133 a) A vector containing probeset names October 2004 AffyMetrix chip annotation <b>files,</b> <b>filtered,</b> with outliers removed NSMPnames. hgu 133 plus 2 Negative Strand Matching Probeset (NSMP) names for HG-U 133 Plu...|$|R
5000|$|Notch {{rejection}} <b>filter,</b> <b>filed</b> December 1973, issued August 1975 ...|$|R
5000|$|Filter oplock (also exclusive): {{applications}} and <b>file</b> system <b>filters</b> can [...] "back out" [...] when others try {{to access the}} same stream (i.e. read and write caching) (since Windows 2000) ...|$|R
30|$|Pre-processing: basing on Rodin project, the {{pre-processing}} {{introduces a}} java context file. Using this context file additional proof obligations are generated, {{and then the}} context and concrete machine <b>files</b> are <b>filtered.</b>|$|R
30|$|The Stuff I've Seen (SIS) {{interface}} {{provides an}} integrated view of files on personal computers [24, 25]. The <b>files</b> were <b>filtered</b> with five fields of document titles, dates, ranks, authors, and mailtos.|$|R
40|$|In this paper, {{we present}} a new {{lossless}} text compression technique which utilizes syllable-based morphology of multi-syllabic languages. The proposed algorithm is designed to partition words into its syllables and then to produce their shorter bit representations for compression. The method has six main components namely source <b>file,</b> <b>filtering</b> unit, syllable unit, compression unit, dictionary file and target file. The number of bits in coding syllables depends {{on the number of}} entries in the dictionary file. The proposed algorithm is implemented and tested using 20 different texts of different lengths collected from different fields. The results indicated a compression of up to 43...|$|R
5000|$|The player {{features}} an Async <b>File</b> Source (network) <b>filter</b> for memory caching.|$|R
50|$|The <b>Filter</b> <b>files</b> {{are only}} {{available}} from ClearPlay as a monthly or annually subscribed membership. Unlimited {{access to the}} full library of movie Filters are then made available, which contains filters for various streaming movies or DVDs including most new releases. If <b>filter</b> <b>files</b> for a particular movie are not present, requests can be made through their website.|$|R
50|$|Since Windows XP {{uses the}} same NTFS format version as later releases, it's {{feasible}} to enable symbolic links support in it.A third-party driver exists that does it by installing itself as a <b>file</b> system <b>filter.</b>|$|R
40|$|Abstract: In this paper, {{we present}} a new {{lossless}} text compression technique which utilizes syllable-based morphology of multi-syllabic languages. The proposed algorithm is designed to partition words into its syllables and then to produce their shorter bit representations for compression. The method has six main components namely source <b>file,</b> <b>filtering</b> unit, syllable unit, compression unit, dictionary file and target file. The number of bits in coding syllables depends {{on the number of}} entries in the dictionary file. The proposed algorithm is implemented and tested using 20 different texts of different lengths collected from different fields. The results indicated a compression of up to 43 %...|$|R
40|$|The {{grouping}} topology we {{have developed}} divides nnodes into log(n) groups, {{each of which has}} a repre-sentative node that aggregates a composite filter for the group. All nodes not in that group use this low-precisionfilter to weed out whole collections of nodes by probing these filters, only sending a search to be proxied bya member of the group if the probe of the group filter returns positively. Proxied searches are then carried outwithin a group, where more precise (more bits per <b>file)</b> <b>filters</b> are kept and exchanged between the nlog(n) nodesin a group. Experimental results show that both bandwidth/search and time/search are improved with this novelgrouping topology...|$|R
5000|$|... pCloud : Can exclude certain {{file types}} (e.g., [...]tmp files) with a <b>file</b> type {{exclusion}} <b>filter.</b>|$|R
30|$|For the two configurations, a {{pipeline}} composed by an RTSP source filter, a JPEG decoder transform <b>filter</b> and a <b>File</b> output <b>filter</b> was created. The pipeline was compiled with the GNU C++ compiler (g++) with the -O 3 optimization option.|$|R
30|$|In this paper, {{we propose}} a {{personalization}} of SOLAP systems through a recommendation approach. The approach assists the user in spatial data warehouse exploitation through {{the recommendation of}} personalized MDX queries. The approach (1) detects the preferences and the analysis objectives of the user using a collaborative filtering technique, and (2) applies a spatio-semantic similarity measure between MDX queries to compare the analytical objectives of the users and their preferences. We presented a theoretical framework detailing the various phases of the approach namely (1) log <b>file</b> <b>filtering,</b> (2) generation of candidate queries (3) ranking recommendations, and (4) presentation of recommendations. Each step is explained by detailed algorithms presenting how these phases can be implemented.|$|R
5000|$|<b>File</b> Based Write <b>Filter</b> (FBWF): Allows the {{configuration}} of individual files as read/write on a protected volume ...|$|R
5000|$|<b>File</b> {{masks and}} <b>filters</b> allow {{the user to}} define exactly what files and folders to include and ignore.|$|R
50|$|Leveller can export {{scenes to}} POV-Ray, RenderMan, and VRML. It uses {{plug-ins}} to handle other <b>file</b> formats and <b>filter</b> processes.|$|R
30|$|All {{the above}} feature {{diagrams}} are internally represented using XML notation {{as can be}} shown in Listings Listing 5 XML Feature diagram of a renderer <b>filter</b> designed <b>File</b> and Listing 6 Filter graph XML Feature diagram for {{the description of the}} <b>File</b> renderer <b>filter</b> and filter graph, respectively.|$|R
40|$|GenVoca {{generators}} synthesize software {{systems by}} composing components from reuse libraries. Although GenVoca components can be composed {{in a vast}} number of ways, not all compositions are correct. In this paper, we present a model for validating component compositions. The model is based on attribute grammars and provides a powerful debugging capability of explanation-based error reporting. We demonstrate our results with examples from a GenVoca generator for container data structures. Keywords: software architectures, software system generators, attribute grammars, domain models, GenVoca, software components, explanation-based error reporting. 1 Introduction Software component technologies will {{play an important role in}} future software development. Examples of today's componentry include Unix <b>file</b> <b>filters</b> and Visual Basic custom controls (VBXes) [Ude 94]. Support for componentry in distributed environments is under development: the Object Management Group's CORBA (Common Object Reque [...] ...|$|R
25|$|Nokia used Calligra Suite as {{base for}} their Office Viewer {{application}} for Maemo/MeeGo. They {{have also been}} contracting KO GmbH to bring MS Office 2007 <b>file</b> format <b>filters</b> to Calligra. Nokia also employed several KDE developers directly – either to use KDE software for MeeGo (e.g. KCal) or as sponsorship.|$|R
5000|$|There are new APIs for IRP {{cancellation}} and registering <b>file</b> system <b>filter</b> callbacks {{to intercept}} the OS fast I/O functions. In low memory conditions, [...] "must succeed" [...] calls are denied, causing a slowdown but preventing a bug check. I/O is throttled to fetch only one memory page {{at a time}} increasing overall scalability.|$|R
50|$|The header {{contains}} keywords that optionally semantically and syntactically {{describe the}} fields {{used in the}} body of the <b>file,</b> notably INFO, <b>FILTER,</b> and FORMAT (see below).|$|R
40|$|In this paper, we {{introduce}} {{an intellectual}} property protection {{system for a}} workstation using watermarking system. The proposed system is designed for a networked intelligent manufacturing system(IMS) that uses virtual reality technology for design review, simulation and virtual manufacturing. The intelligent manufacturing environment must provide not only innovative approaches to generate and work with 3 D data, but also scheme to protect them. A watermark is embedded into 3 D data according to the predefined security policies. It can trace the last user of data and a user is also able to prove his/her ownership with it. The proposed system is realized using Windows <b>file</b> system <b>filter</b> driver and a Win 32 system service. It works transparently to users or applications, that is, it does not affect workflow of users or applications. Key words: Intellectual property protection, 3 D watermarking, <b>file</b> system <b>filter</b> driver, user tracing 1...|$|R
