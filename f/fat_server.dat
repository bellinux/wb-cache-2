2|4|Public
40|$|WAP-based Mobile Geographical Information System (Mobile GIS) can be {{described}} as mobile users can perform the almost same functionality as of Internet GIS but in a mobile environment at any time, any place and without the limitation of operating system and wired link. In this paper, a distributed architecture for WAP-based Mobile GIS is proposed. Using Java Servlet Engine technology and Geospatial information Web caching mechanism at the <b>fat</b> <b>server</b> side, the architecture based on J 2 EE is composed of four logic tiers: presentation tier, WAP service tier, application tier and data service tier. A prototype system based on the architecture has been developed. It can successfully work on WAP phones, which proves that the architecture is feasible...|$|E
40|$|Abstract. In this paper, {{we propose}} a secret sharing scheme which {{prevents}} the cheaters from recovering the secret when the honest participants cannot, with high probability. The scheme is a (k, n) threshold scheme providing protection against less than k cheaters. It is efficient {{in terms of}} share sizes for the participants. Furthermore the total size of the individual shares per participant is less than {{twice the size of}} the secret itself. The cheaters can do successful cheating with a probability 1 /t, which can be adjusted without significantly increasing the total size of the individual shares. Such a scheme can be deployed in thin client <b>fat</b> <b>server</b> systems where the server has reasonable computational power and there is a high level of mistrust among the users. 1...|$|E
40|$|This paper {{reports on}} the {{experiences}} we gained while trying to build an interpreter for a new programming language aimed at developing strong mobile software. The interpreter is actually a distributed virtual machine {{that can be used}} in a peer-to-peer setting on a heterogeneous platform. In our quest for an experimental implementation, simplicity and portability led us to using a combination of Java and SOAP technologies. The paper {{reports on the}} problems we encountered in this experiment and shows that SOAP is inadequate in peer-to-peer communication that cannot afford <b>fat</b> <b>servers</b> to run on all nodes...|$|R
40|$|The {{complexity}} of services provided through the Web is continuously increasing {{as well as}} the variety of new devices that are gaining access to the Internet. Tailoring Web and multimedia resources to meet the user and client requirements opens two main novel issues in the research area of content delivery. The working set tends to increase substantially because multiple versions may be generated from the same original resource. Moreover, the content adaptation operations may be computationally expensive. In this paper, we consider third-party infrastructures composed by a geographically distributed system of intermediary and cooperative nodes that provide fast content adaptation and delivery of Web resources. We propose a novel distributed architecture of intermediary nodes which are organized in two levels. The front-end nodes in the first tier are thin edge servers that locate the resources and forward the client requests to the nodes in the second tier. These interior nodes are <b>fat</b> <b>servers</b> that run the most expensive functions such as content adaptation, resource caching and fetching. Through real prototypes we compare the performance of the proposed two-level architecture to that of alternative one-level infrastructures where all nodes are fat peers providing the entire set of functions. 1...|$|R
50|$|Cloud {{computing}} architectures {{consist of}} front-end platforms called clients or cloud clients. These clients are <b>servers,</b> <b>fat</b> (or thick) clients, thin clients, zero clients, tablets and mobile devices. These client platforms {{interact with the}} cloud data storage via an application (middleware), via a web browser, or through a virtual session.|$|R
40|$|As the {{complexity}} of web applications increases new challenges are faced in relation to data integrity and system scalability. Traditional client <b>server</b> <b>fat</b> applications allow for {{a high level of}} transactionality between the client and server, due largely to transactional protocols and tight coupling between components. Transactional functionality within web applications is historically limited to within the web server hosting the application. The scope of the traditional transaction in this context does not extend outside of the web server and its attached services. This paper proposes that web applications can achieve increased system integrity by extending the scope of the transaction to encompass tasks performed by the web browser. An additional layer is introduced to the standard HTTP protocol to facilitate the new functionality, and a simulator is presented as the basis for further research...|$|R

