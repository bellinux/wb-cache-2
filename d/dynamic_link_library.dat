118|2008|Public
25|$|There {{are three}} modules to Jet: One is the Native Jet ISAM Driver, a <b>dynamic</b> <b>link</b> <b>library</b> (DLL) that can {{directly}} manipulate Microsoft Access database files (MDB) using Indexed Sequential Access Method (ISAM). Another {{one of the}} modules contains the ISAM Drivers, DLLs that allow access {{to a variety of}} ISAM databases, among them xBase, Paradox, Btrieve and FoxPro, depending on the version of Jet. The final module is the Data Access Objects (DAO) DLL. DAO provides an API that allows programmers to access JET databases using any programming language.|$|E
25|$|There {{were three}} modules to Jet. One was the Native Jet ISAM Driver, a Jet <b>dynamic</b> <b>link</b> <b>library</b> (DLL) that could {{directly}} manipulate Microsoft Access database files (MDB), {{which was a}} modified form of an Indexed Sequential Access Method (ISAM) database. Another one of the modules were the ISAM Drivers, DLLs that allowed access to ISAM databases, among them being Xbase, Paradox, Btrieve and FoxPro files. The final module was the Data Access Objects (DAO) DLL, DAO allowed programmers access to the Jet engine. It was basically an object-oriented data language used by Access Basic and Visual Basic application developers to access Jet.|$|E
2500|$|Another type of device {{drivers are}} [...]DRV drivers. These drivers are loaded in user-mode, and are {{commonly}} used to control devices such as multimedia devices. To provide access to these devices, a <b>dynamic</b> <b>link</b> <b>library</b> is required (such as MMSYSTEM.DLL).|$|E
50|$|Functions {{defined in}} <b>Dynamic</b> <b>Link</b> <b>Libraries</b> can be used.|$|R
5000|$|Compiler (can make {{executable}} files, <b>libraries</b> and <b>dynamic</b> <b>linked</b> <b>libraries</b> (DLL) files) ...|$|R
50|$|Full Windows API support, {{including}} full {{file system}} and registry access, loading {{and execution of}} <b>dynamic</b> <b>link</b> <b>libraries</b> and executing files.|$|R
2500|$|Microsoft {{asserted}} {{in court}} that IE was integrated with Windows 98, and that Windows 98 could not be made to operate without it. Australian computer scientist Shane Brooks later demonstrated that Windows 98 could in fact run with IE files removed. Brooks went on to develop software designed to customize Windows by removing [...] "undesired components", which {{is now known as}} LitePC. Microsoft has claimed that the software did not remove all components of Internet Explorer, leaving many <b>dynamic</b> <b>link</b> <b>library</b> files behind.|$|E
2500|$|OLE custom {{controls}} {{were introduced in}} 1994 {{as a replacement for}} the now deprecated Visual Basic Extension controls. Instead of upgrading these, the new architecture was based on OLE. In particular, any container that supported OLE 2.0 could already embed OLE custom controls, although these controls cannot react to events unless the container supports this. OLE custom controls are usually shipped {{in the form of a}} <b>dynamic</b> <b>link</b> <b>library</b> with the [...]ocx extension. In 1996 all interfaces for controls (except IUnknown) were made optional to keep the file size of controls down, so they would download faster; these were then called ActiveX Controls.|$|E
2500|$|On Windows 95, the MKDE {{interface}} (a Windows <b>dynamic</b> <b>link</b> <b>library</b> (DLL) called WBTRV32.DLL) determines what {{database access}} method is in use via the configuration file. If it detects both the client/server and workstation engines are {{installed on the}} same machine, it checks whether the target is set to workstation or server. If running on Windows NT and the server process NTMKDE.EXE is running along with the standalone workstation process W32MKDE.EXE it looks in the registry {{to determine if the}} target is a server or workstation. In both cases, if the MKDE interface is set to workstation, (the [...] "Standalone workstation" [...] configuration) it uses the MKDE (W32MKDE.EXE) to access the file directly. If it is set to server, the MKDE interface on the client uses a communications module (on Windows 95 this is W32BTICM.DLL, on Windows NT this is NTBTICM.DLL) that [...] "talks" [...] to the server. The server itself has its own matching communications module (again either W32BTICM.DLL or NTBTICM.DLL) that resides on the mapped drive. The server DLL communicates with the server MKDE (NTMKDE.EXE) which updates records, then sends a confirmation that the operation succeeded, back through the communications module to the client.|$|E
5000|$|... newLISP has an import function, {{which allows}} {{importing}} functions from DLLs (<b>Dynamic</b> <b>Link</b> <b>Libraries)</b> on Win32 or shared libraries on Linux/UNIX.|$|R
50|$|The linker allowed {{flexibility}} for {{object code}} {{management and the}} creation of <b>dynamic</b> <b>linked</b> <b>libraries</b> and overlays. It also identified and removed unused code and data.|$|R
50|$|A few select editors have a plugin {{system that}} allows to extend the GUI and add new functionality, usually loading <b>dynamic</b> <b>link</b> <b>libraries</b> written in a C-compatible language.|$|R
5000|$|... "The OPEN command opens {{communication}} with a device, {{which can be}} a disk file, a window, a <b>dynamic</b> <b>link</b> <b>library</b> or a serial communications port." ...|$|E
50|$|EPANET's {{computational}} {{engine is}} available for download as a separate <b>dynamic</b> <b>link</b> <b>library</b> for incorporation into other applications. The source code for EPANET 2 {{is available on the}} EPA's EPANET website.|$|E
5000|$|DWSIM's Property and Equilibrium {{calculation}} routines {{are also}} available as a standalone, 100% managed [...]NET <b>Dynamic</b> <b>Link</b> <b>Library</b> (DLL). It can be linked against free and proprietary applications (LGPL v3 license).|$|E
50|$|In computing, DLL Hell is a {{term for}} the {{complications}} that arise when working with <b>dynamic</b> <b>link</b> <b>libraries</b> (DLLs) used with Microsoft Windows operating systems, particularly legacy 16-bit editions which all run in a single memory space.|$|R
40|$|Statistical {{research}} {{has always been}} {{at the edge of}} available computing power. Huge datasets, e. g in DataMining or Quantitative Finance, and computationally intensive techniques, e. g. bootstrap methods, always require a little bit more computing power than is currently available. But the most popular statistical programming language R, as well as statistical programming languages like S or XploRe, are interpreted which makes them slow in computing intensive areas. The common solution is to implement these routines in low-level programming languages like C/C++ or Fortran and subsequently integrate them as <b>dynamic</b> <b>linked</b> <b>libraries</b> (DLL) or shared object libraries (SO) in the statistical programming language. statistical programming language, XploRe, Yxilon, Java, <b>dynamic</b> <b>linked</b> <b>libraries,</b> shared object libraries...|$|R
50|$|PBWin is a 32-bit {{compiler}} {{compatible with}} the Windows 9x series and the Windows NT series of operating systems, including Windows XP, Windows Server 2008, Windows Vista, and Windows 7. PBWin can create <b>Dynamic</b> <b>Link</b> <b>Libraries.</b> PBWin applications can read <b>Dynamic</b> <b>Link</b> Libraries.PBWin comes with a compiler, IDE including an editor and stepping debugger.|$|R
50|$|In 16-bit {{versions}} of Windows, Windows USER was implemented as a file called user.exe. The file extension {{here was a}} misnomer, as Windows USER was in fact always a <b>dynamic</b> <b>link</b> <b>library.</b>|$|E
5000|$|BTMemoryModule - a <b>dynamic</b> <b>link</b> <b>library</b> (DLL) {{which can}} be loaded from memory (with Delphi and Lazarus) without storing it on the hard disk first. BTMemoryModule is a Pascal port of Joachim Bauch's ...|$|E
50|$|The NetWeaver {{engine is}} a Windows <b>dynamic</b> <b>link</b> <b>library</b> (DLL) {{developed}} by Rules of Thumb, Inc. (North East, PA). NetWeaver Developer is an interface {{to the engine}} that is used for designing knowledgebases.|$|E
50|$|Pointers {{are also}} used to hold the {{addresses}} of entry points for called subroutines in procedural programming and for run-time <b>linking</b> to <b>dynamic</b> <b>link</b> <b>libraries</b> (DLLs). In object-oriented programming, pointers to functions are used for binding methods, often using what are called virtual method tables.|$|R
3000|$|MapWin Interfaces: Also {{called the}} “Plug-in Interface”. It is a [...].dll file, {{which will allow}} the user to write the user’s own {{plug-ins}} to the main application. This may be done from any programming language, which supports the creation and use of Microsoft [...].NET 2.0 <b>Dynamic</b> <b>Link</b> <b>Libraries</b> (dlls).|$|R
50|$|PBCC is a 32-bit {{compiler}} for the Windows 9x {{series and}} Windows NT series of operating systems, including Windows XP, Windows Server 2008, Windows Vista, and Windows 7. PBCC applications can use <b>Dynamic</b> <b>Link</b> <b>Libraries</b> (DLL). The compiler {{comes with an}} IDE including an editor and stepping debugger.|$|R
5000|$|Another type of device {{drivers are}} [...]DRV drivers. These drivers are loaded in user-mode, and are {{commonly}} used to control devices such as multimedia devices. To provide access to these devices, a <b>dynamic</b> <b>link</b> <b>library</b> is required (such as MMSYSTEM.DLL).|$|E
50|$|In 2001, Microsoft {{released}} a special supplement to Microsoft’s old Windows 9x systems. It includes a <b>dynamic</b> <b>link</b> <b>library</b> unicows.dll (only 240 KB) containing the 16-bit flavor (the {{ones with the}} letter W on the end) of all the basic functions of Windows API.|$|E
50|$|Programmers {{can also}} build custom {{controls}} for ASP.NET applications. Unlike user controls, these controls {{do not have}} an ASCX markup file, having all their code compiled into a <b>dynamic</b> <b>link</b> <b>library</b> (DLL) file. Such custom controls can be used across multiple Web applications and Visual Studio 2013 projects.|$|E
40|$|In {{this work}} method of {{utilizing}} of Fortran code is presented. Survey of possible methods of linking with Fortran is given. Among them are linking with object files, with <b>dynamic</b> <b>link</b> <b>libraries</b> and COM objects. Thier benefits and drawbacks are highlited. DLLs {{are considered to}} be most suitable to preserve original Fortran performance and precision. Main concepts of <b>dynamic</b> <b>linking</b> are described by the example of Windows OS <b>Dynamic</b> <b>Link</b> <b>Libraries.</b> Their important feature – full independence from source code and from progamming lan-guage can be used to link any progarm with mathematical libraries on Fortran. But sometimes Fortran subroutines could not be easily called from other language. Possible problems are data misalignment, callbacks, data type mismatch. In this case special Shell DLL should be used. This method was successfully applied for LAPACK, FFTPACK and ODEPACK libraries. Some of their subroutines were integerated into new programming language BARSIC. Several performance benchmarks are listed...|$|R
40|$|Component-based {{programming}} is an increasingly prevalent theme in software development, motivating {{the need for}} expressive and safe module interconnection languages. <b>Dynamic</b> <b>linking</b> is an important requirement for module interconnection languages, as exemplified by <b>dynamic</b> <b>link</b> <b>libraries</b> (DLLs) and class loaders in COM and Java, respectively. This paper considers a set of abstractions for type-safe component-based programming that supports shared <b>libraries</b> and <b>dynamic</b> <b>linking,</b> as well as circular import dependencies (recursive modules). The core language requirements of the abstractions are compatible with programming languages such as Java...|$|R
5000|$|Microsoft's Windows Vista (released January 2007) {{and later}} have ASLR enabled for only those executables and <b>dynamic</b> <b>link</b> <b>libraries</b> {{specifically}} <b>linked</b> to be ASLR-enabled. For compatibility, {{it is not}} enabled by default for other applications. Typically, only older software is incompatible and ASLR can be fully enabled by editing a registry entry [...] "HKLM\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\MoveImages", or by installing Microsoft's Enhanced Mitigation Experience Toolkit.|$|R
5000|$|Environmental {{subsystems}} {{are central}} components of operating {{systems of the}} Windows NT type. They allow the operating system to run software developed for the platform in question. For example, Windows NT 4.0 has four environmental subsystems, viz Win32, DOS or Win16, OS/2, and POSIX, the latter {{of which is a}} Unix standard. [...] The latter resides primarily in the <b>Dynamic</b> <b>Link</b> <b>Library</b> posix.dll.|$|E
50|$|SAP Logon Tickets can be {{used for}} single sign-on through the SAP Enterprise Portal. SAP {{provides}} a Web Server Filter that {{can be used}} for an authentication via http header variable and a <b>Dynamic</b> <b>Link</b> <b>Library</b> for verifying SSO Tickets in 3rd party software which can be used to provide native support for SAP Logon Tickets in applications written in C or Java.|$|E
5000|$|VDMTools are {{the leading}} {{commercial}} tools for VDM and VDM++, owned, marketed, maintained and developed by CSK Systems, building on earlier versions developed by the Danish Company IFAD. The manuals and a practical tutorial are available. All licenses are available, free of charge, for the full version of the tool. The full version includes automatic code generation for Java and C++, <b>dynamic</b> <b>link</b> <b>library</b> and CORBA support.|$|E
40|$|As a {{case study}} {{application}} of DDL, our tool for dy-namically inspecting and modifying the linking of pro-grams using <b>dynamic</b> <b>link</b> <b>libraries,</b> we investigate the SimpleScalar CPU/architecture simulator. In particu-lar, we {{gain an understanding of}} SimpleScalar’s behavior in order to modify it to be able to dynamically switch be-tween detailed-but-slow full architectural simulation and functional-but-fast instructions simulation. This appli-cation anecdotally shows that DDL is useful for reverse engineering and re-engingeering legacy systems. 1...|$|R
50|$|Visual Prolog, also {{formerly}} known as PDC Prolog and Turbo Prolog, is a strongly typed object-oriented extension of Prolog. As Turbo Prolog it was marketed by Borland, but it is now developed and marketed by the Danish firm Prolog Development Center (PDC) that originally developed it. Visual Prolog can build Microsoft Windows GUI-applications, console applications, DLLs (<b>dynamic</b> <b>link</b> <b>libraries),</b> and CGI-programs. It can also link to COM components and to databases by means of ODBC.|$|R
40|$|This paper {{presents}} a new Behavioral Simulator capable of modeling {{various types of}} Analog-to-Digital Converters (ADCs). Behavior of Basic Building Modules (BBMs) of ADCs, such as for example sample-and-hold, and comparators is encapsulated in <b>Dynamic</b> <b>Linked</b> <b>Libraries</b> (DLLs). Predefined behavioral models of BBMs and a netlist describing connections between them are used to form a behavioral representation of simulated ADC. As an example of BBM, a behavioral model of comparator module is presented. An 8 -bit multi-stage ADC is used to demonstrate simulation process. 1...|$|R
