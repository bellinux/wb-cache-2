3|10000|Public
5000|$|ERROR IN PARAMETER 2 IN OL IN NEWCOPYIN: MT (123457) CORRECTLY IDENTIFI ED BUT NOT AVAILABLE DISPLAY: ERROR IN NEWCOPYIN [...] MACRO ABANDONED 21.28.58 FREE *CR0, 0 TRANSFERS 21.28.58 0.05 DELETED,CLOCKED 0.00 0.05 :DELETED <b>END</b> <b>OF</b> <b>MACRO</b> ...|$|E
5000|$|... 21.28.58← newcopyin (123456) 21.32.21 0.06 CORE GIVEN 4736 WAITING FOR MT 123456 21.32.34 USED U31 AS *MT0, MT (123456,HELLOTAPE(0/0)) ← hello,hello(/plan) ← **** 21.32.52 FREE *CR0, 2 TRANSFERS DISPLAY : 1 PARAMETER ACCEPTED DISPLAY 0.08: MONITOR DISPLAY : INPUT TAPE * 123456. DISPLAY 0.08: MONITOR 21.32.52 FREE *FH0, 1 TRANSFERS 21.32.52 FREE U31,8 TRANSFERS 0.10 :DELETED : OK 21.32.52 0.10 DELETED,CLOCKED 0.00 <b>END</b> <b>OF</b> <b>MACRO</b> ...|$|E
5000|$|... 21.43.46← plancomp *cr hello(/plan),*idhelo FILES ALREADY ONLINE: :LIB.SUBGROUPS-RS(1/V3) :LIB.PROGRAM XPCK(1/V12K) :LIB.PROGRAM XPLT(1/V8C) 21.43.58 0.58 CORE GIVEN 18944 0.58 :HALTED : LD DISPLAY : START JOB HELO, OPEN *DA2 N CA 1641 M=#00100 FN=SEMICOMPILED 1.00: MONITOR 21.43.58 FREE *CR0, 8 TRANSFERS DISPLAY : COMP OK 84 #HELO 21.43.58 FREE *DA2, 9 TRANSFERS 1.01 :DELETED : FI #XPCK 21.43.58 FREE *TR0, 7 TRANSFERS 21.43.58 FREE *LP0, 83 TRANSFERS 21.43.58 1.01 DELETED,CLOCKED 0.00 21.43.59 1.07 CORE GIVEN 11392 21.43.59 FREE *CR0, 5 TRANSFERS 21.43.59 FREE *DA14,20 TRANSFERS 21.43.59 FREE *DA1, 9 TRANSFERS 21.43.59 FREE *DA2, 2 TRANSFERS 21.43.59 FREE *DA13,7 TRANSFERS 1.07 :DELETED : HH 21.43.59 FREE *LP0, 32 TRANSFERS 21.43.59 FREE *DA15,0 TRANSFERS 21.43.59 1.07 DELETED,CLOCKED 0.00 DISPLAY: PLAN COMPILATION/CONSOLIDATION OKAY <b>END</b> <b>OF</b> <b>MACRO</b> ...|$|E
30|$|The pause {{marks the}} <b>end</b> <b>of</b> a <b>macro</b> step and thus also the begin of the {{following}} step.|$|R
30|$|The {{imperative}} synchronous language Quartz implements the synchronous {{model of}} computation {{by means of}} the pause statement. While all other primitive statements do not take time (in terms <b>of</b> <b>macro</b> steps), a pause marks the <b>end</b> <b>of</b> a <b>macro</b> step and consumes one logical unit of time. Thus, the behavior <b>of</b> a whole <b>macro</b> step is defined by all actions between two consecutive pause statements. Parallel threads run in lock-step: their macro steps are executed synchronously, and the statement in both are scheduled according to the data dependencies so that all variables have a unique well-defined value in the macro step.|$|R
50|$|Meanwhile, Pug and Tomas begin {{searching the}} world, and {{eventually}} beyond, for the famed sorcerer Macros the Black, thought killed when {{he helped to}} destroy the rift (at the <b>end</b> <b>of</b> Magician). <b>Macros</b> reveals that he had put into motion a grand plot to instill Tomas with {{the powers of the}} Valheru, Ashen-Shugar, in order to turn the tides of the coming battle in their favour.|$|R
30|$|All these {{advantages}} {{are due to}} the underlying synchronous model of computation[1], which divides the execution of programs into micro and macro steps, where variables change synchronously only between macro steps and remain constant during micro steps. The partitioning into micro and macro steps is explicitly given by the programmer, and the micro steps are executed in a causal ordering {{so that there are}} no read-after-write conflicts [7, 15]. As a consequence, all threads of a program run in lockstep: they execute the micro steps <b>of</b> their current <b>macro</b> steps in the common global variable environment, and therefore automatically synchronize at the <b>end</b> <b>of</b> the <b>macro</b> step.|$|R
40|$|AbstractI {{have used}} mathematica to solve several {{problems}} {{that relate to}} the symbolic calculation of the ‘molecular integrals’ that are a mainstay of computational chemistry. This work has provided many new results of chemical and mathematical interest, and it has led to a powerful programming methodology that I call mathscape that uses a novel open <b>ended</b> set <b>of</b> <b>macros.</b> Some further work on molecular integrals is presented here, largely as an introduction to mathscape. I discuss (1) the immediate mathematical problem of the ‘J’ integrals, (2) the key features of mathscape, (3) a novel reduction of the J integrals, (4) the chemical context of this work, and (5) the computer science context...|$|R
40|$|Macro-micro architecture, which {{consists}} <b>of</b> <b>macro</b> and micro manipulators, is used here to eliminate errors {{at the tip}} of a flexible manipulator. The macro uses long arms and has such advantages as larger work volume and lower energy consumption but suffers from large deformations and vibrations. The micro is a smaller rigid manipulator and is attached on the <b>end</b> <b>of</b> the <b>macro</b> to isolate the system endpoint from the undesirable flexibility <b>of</b> the <b>macro.</b> Using perturbation theories, a new kinematical method is introduced, first, by redefining the micro&# 39;s motion as a means of compensating for the errors at the endpoint <b>of</b> the <b>macro.</b> Then, an excellent practical control scheme is proposed to realize the endpoint control with the feedback of joint angles and vibrations. A PD controller is applied to the micro, which augmented the compensation quantities. To damp out vibrations, a nonlinear control law is proposed for the macro, taking the interacting dynamics of the micro to the macro into account. The compensation and control algorithms work very well on a macro-micro setup, and numerous experimental results prove the applicability of the proposed schemes. This work {{was supported in part by}} the National Science Fund of China under Grant 60305008, by the State Key Laboratory of Robotics, CAS under Grant RL 200702, and by the Beijing Jiaotong University under Grant 2007 XM 007...|$|R
5000|$|From {{its first}} version Excel {{supported}} <b>end</b> user programming <b>of</b> <b>macros</b> (automation <b>of</b> repetitive tasks) and user defined functions (extension of Excel's built-in function library). In early versions of Excel these programs {{were written in}} a macro language whose statements had formula syntax and resided in the cells <b>of</b> special purpose <b>macro</b> sheets (stored with file extension [...]XLM in Windows.) XLM was the default macro language for Excel through Excel 4.0. Beginning with version 5.0 Excel recorded macros in VBA by default but with version 5.0 XLM recording was still allowed as an option. After version 5.0 that option was discontinued. All versions of Excel, including Excel 2010 are capable of running an XLM macro, though Microsoft discourages their use.|$|R
40|$|Abstract: To find Jatropha curcas L. accessions with {{characteristics}} {{suitable for}} rootstock plants, 11 selected accessions were analyzed {{in response to}} heavy soil. Six-week-old of jatropha were grown in 11 L of entisols (M 1) and grumusols (M 2) soil for 10 weeks, while andosols soil richer in organic carbon were used as control media (M 0). Growth of shoot and primary as well as secondary roots were observed during and at the <b>end</b> <b>of</b> the experiment. <b>Macro</b> and micro nutrient uptake was also analyzed at the <b>end</b> <b>of</b> experiment. M 1 and M 2 caused dramatically reduction of roots as well as shoot growth of all accessions. The reduction of growth component was in accordance to all nutrient uptakes except Ca and Mg. The data showed that type of soil was one of important factors influencing growth and development of J. curcas. There were 4 accessions i. e. Sumatra- 1 (S 1), Sumatra- 2 (S 2), Java- 3 (J 3) and Java- 2 (J 2) which had better roots and shoot characteristics that were potential {{to be used as}} rootstock plants...|$|R
30|$|At the <b>end</b> <b>of</b> the {{grouping}} algorithm, {{we would}} thus have Q− 1 relay sets and one macro-base station, which are scheduled in Q dedicated frames. Now receiver scheduling {{is done in}} two phases: (a) phase 1 for dedicated frames, consisting <b>of</b> <b>macro</b> and relay users and (b) phase 2 for inter-frame scheduling.|$|R
40|$|When first {{working on}} {{economic}} growth in the 1960 s I began seeing necessary roles for certain institutions 2 – but soon moved on to the microeconomics <b>of</b> <b>macro</b> fluctuations. In the 1990 s, though, the “transition ” in Eastern Europe after the <b>end</b> <b>of</b> communism in Russia and of market socialism in Poland and Hungary, pulled me bac...|$|R
40|$|We present our {{experience}} on the provision and use <b>of</b> <b>macros</b> {{for the management of}} semantic data in semantically-enabled web applications. Macros can be considered as a lightweight version of scripting languages, mostly oriented to <b>end</b> users instead <b>of</b> to developers. We have enabled the use <b>of</b> <b>macros</b> in a wiki-based application named VPOET, oriented to web designers, and have conﬁrmed through evaluations that macros satisfy a wide audience...|$|R
50|$|Felleisen conjectures {{that these}} three {{categories}} {{make up the}} primary legitimate uses <b>of</b> <b>macros</b> in such a system. Others have proposed alternative uses <b>of</b> <b>macros,</b> such as anaphoric macros in macro systems that are unhygienic or allow selective unhygienic transformation.|$|R
40|$|The {{substantive}} provisions <b>of</b> <b>macro</b> {{prudential supervision}} and adjusting, certain basic problems of his realization for adjusting of domestic market of bank {{services and the}} process of realization <b>of</b> conception <b>of</b> <b>macro</b> prudential supervision and adjusting is considered, are considered in the article...|$|R
40|$|The {{purpose of}} the work herein {{reported}} has been an investigation <b>of</b> <b>macro</b> processing (including language extension and text editing schemes). We present a text manipulation system wllose constructs {{have been designed to}} facilitate the use of the system to construct macro processors and to implement such schemes. The concepts <b>of</b> recognition <b>of</b> <b>macro</b> calls and generation of replacement text have been generalized so that any kind of recognitionsubstitution scheme can readily be implemented in the language (called GAME). Chapter I contains, by way of introduction, a discussion <b>of</b> what <b>macros</b> are and how the evolution <b>of</b> <b>macro</b> systems leads to a general language, like G_E. Chapter 2 presents a definition <b>of</b> the <b>macro</b> recognition and expansion process so that some kind of distinction ca...|$|R
50|$|Specifies a file <b>of</b> <b>macros</b> to install.|$|R
50|$|The {{primary goal}} <b>of</b> <b>MACRO</b> was {{to search for}} {{magnetic}} monopoles. The active elements <b>of</b> <b>MACRO</b> were liquid scintillator and streamer tubes, optimized for high resolution tracking and timing. This design also allowed MACRO to operate as a neutrino detector and as a cosmic ray observatory.|$|R
40|$|Use <b>of</b> <b>macro</b> plastic fibres to {{reinforce}} concrete has attracted widespread attention from both scientists and construction industry {{due to the}} multiple sustainability benefits they offer, compared to steel fibres and steel reinforcing mesh. This paper critically reviews {{the current state of}} knowledge and technology <b>of</b> using <b>macro</b> plastic fibres {{to reinforce}} concrete. Detailed review on the various preparation techniques and the resulting properties <b>of</b> <b>macro</b> plastic fibres are presented and the effects <b>of</b> <b>macro</b> plastic fibres on the fresh and hardened concrete properties are discussed in this paper. The effect <b>of</b> <b>macro</b> plastic fibres on workability, plastic shrinkage, compressive strength, splitting tensile strength, flexural strength, post-crack performance and dry shrinkage is discussed in this paper. Pull-out behaviour and degradation behaviour of the fibre in the concrete are also reviewed. Finally, cost and environmental analysis and some applications of the plastic fibre reinforced concrete are discussed...|$|R
40|$|The qualities which SAS ® macros {{share with}} {{object-oriented}} languages {{account for the}} power <b>of</b> <b>macro</b> programming. This paper illustrates some examples of specific design patterns which can be partially or fully implemented with the SAS macro language. The material is intermediate to advanced, and assumes knowledge <b>of</b> <b>macros</b> and macro variables. The goal is to illustrate best practices for SAS macro programming...|$|R
5000|$|The programmers' text editor, Emacs, (short for [...] "editing macros") follows {{this idea}} to a conclusion. In effect, {{most of the}} editor is made <b>of</b> <b>macros.</b> Emacs was {{originally}} devised as a set <b>of</b> <b>macros</b> in the editing language TECO; it was later ported to dialects of Lisp.|$|R
25|$|In {{low-level}} languages, {{the concept}} <b>of</b> <b>macros</b> has {{become synonymous with}} textual substitution of source-code due to {{the widespread use of}} the C preprocessor. However, high-level languages such as Lisp pre-dated C in their use <b>of</b> <b>macros</b> that were far more powerful. It is this Lisp-like macro concept that Perl 6 will take advantage of. The power of this sort <b>of</b> <b>macro</b> {{stems from the fact that}} it operates on the program as a high-level data structure, rather than as simple text, and has the full capabilities of the programming language at its disposal.|$|R
5000|$|... #Caption: Optical scheme <b>of</b> <b>macro</b> {{photography}} using {{extension tube}} ...|$|R
5000|$|Rhodel C. Esteban, General Manager <b>of</b> <b>Macro</b> Asia Catering Services Corporation ...|$|R
5000|$|Other types <b>of</b> <b>macros</b> exist; they aren't {{covered in}} this article.|$|R
40|$|Aggregate turnout {{rates are}} among the central {{indicators}} of democratic performance in the American polity. Despite the considerable implications <b>of</b> <b>macro</b> turnout, however, most studies of turnout focus in-stead on the micro level. As a consequence, we know little about how local, political, and historical in-fluences have impacted turnout {{over the course of}} American political development. The result is a somewhat impoverished conception of turnout that often removes the political from political participa-tion. In this article, I argue for a new, macro-level perspective that highlights the political dimension of turnout by placing turnout in the local political settings in which it has taken place. I contrast two com-peting explanations <b>of</b> <b>macro</b> turnout variation across local electorates, a political account and Elazar’s cultural thesis, and discuss their implications for the political geography <b>of</b> <b>macro</b> turnout in American electoral history. I then examine this political geography by employing a local indicator of spatial asso-ciation (a LISA statistic) to identify the spatial structuring <b>of</b> <b>macro</b> turnout in the United States from 1828 through 2000. I demonstrate that a political perspective provides greater leverage than Elazar’s cul-tural perspective in explaining the political geography <b>of</b> <b>macro</b> turnout in the United States...|$|R
5000|$|... #Caption: Optical scheme <b>of</b> <b>macro</b> {{photography}} using reversed {{lens and}} telephoto lens ...|$|R
5000|$|Configurable list <b>of</b> <b>macros</b> {{commands}} to run locally or send to connected client.|$|R
40|$|ÖZET: In {{the present}} study, the {{determination}} of the concentration of twenty elements in sheep colostrum has been successfully carried out by ICP-OES. Element contents and colour values of sheep colostrum varied significantly during 10 days after parturition (P ≤ 0. 05, P ≤ 0. 01, P ≤ 0. 001). <b>Of</b> <b>macro</b> elements Ca had the highest mean concentration at the <b>end</b> <b>of</b> experimental period, which followed by P, K, Na, S and Mg elements. Of minor elements, B was highest, followed by Si...|$|R
40|$|It {{is known}} that a well-chosen set <b>of</b> <b>macros</b> makes it {{possible}} to considerably speed-up the solution of planning problems. Recently, macros have been considered in the planning framework, built on Markovian deciflion problern. However, so far no systernatie approach waR put forth to investigate the utility <b>of</b> <b>macros</b> within this framework. In this artide we begin to systematically study this problem by introducing the concept of multi-task MDPs defined with a distribution over the tasks. We propose an evaluation criterion for macro-sets that is based on the expected planning speed-up due to the usage of a macro-set, where the expectation is taken over the set of tasks. The consistency of the empirical speed-up maximization algorithm is shown in the finite case. For acyclic systems, the expected planning speed-up is shown to be proportional to the amount of "time-compression " due to the macros. Based on these observations a heuristic algorithm for learning <b>of</b> <b>macros</b> is proposed. The algorithm is shown to return macros identical with those that one would like to design by hand {{in the case of a}} particular navigation like multi-task MDP. Some related questions, in particular the problem of breaking up MDPs into multiple tasks, factorizing MDPs and learning generalizations over actions to enhance the amount of transfer are also considered in brief at the <b>end</b> <b>of</b> the paper...|$|R
5000|$|Enhanced {{keyboard}} layouts in {{the editor}} and a huge number <b>of</b> <b>macro</b> key sets.|$|R
5000|$|Composition <b>of</b> <b>macro</b> {{geographical}} (continental) regions, geographical sub-regions, {{and selected}} economic and other groupings ...|$|R
5000|$|... 2009 Where {{the bees}} suck, there suck I, Reopening <b>of</b> <b>MACRO</b> museum, Rome Italy ...|$|R
40|$|The {{purpose of}} this {{research}} was to determine the effect <b>of</b> <b>macro</b> mineral supplementation on different levels of glucose, milk lactose, and milk production. This research used 25 milk cows with the first to fifth lactation, whose their body weight, milk production and fat content were relatively similar. There were 5 <b>of</b> <b>macro</b> mineral supplementation levels : 0, 25, 50, 75, 100...|$|R
5000|$|Paul Graham's book On Lisp {{describes}} the use <b>of</b> <b>macros</b> in Common Lisp in detail. Doug Hoyte's book Let Over Lambda extends the discussion on macros, claiming [...] "Macros are {{the single greatest}} advantage that lisp has as a programming language and the single greatest advantage of any programming language." [...] Hoyte provides several examples of iterative development <b>of</b> <b>macros.</b>|$|R
