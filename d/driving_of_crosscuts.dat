0|10000|Public
40|$|The {{identification}} <b>of</b> <b>crosscutting</b> is {{a prerequisite}} for applying aspect-oriented techniques in software development. We present an operationalization of the definition <b>of</b> <b>crosscutting</b> to support this identification. We use matrices to represent the relation between design elements at different levels of abstraction. We present some case studies about the identification <b>of</b> <b>crosscutting</b> concerns in order to illustrate the application of our approach. In particular, we apply the approach to the identification <b>of</b> <b>crosscutting</b> in some <b>of</b> the GoF design patterns...|$|R
40|$|This paper {{deals with}} the design <b>of</b> <b>crosscutting</b> {{features}} in general and in the UML in particular. We postulate a couple of issues that we think an aspect-oriented designer is faced with when designing crosscutting features. These issues in-clude the independent specification <b>of</b> the <b>crosscutting</b> details and <b>of</b> where to <b>crosscut,</b> the designation <b>of</b> <b>crosscut</b> or refer-enced elements, the characterization of the composition strat-egy, and the abstract representation <b>of</b> <b>crosscutting</b> features in the overall design model. Then, we contemplate ways to obey these issues using the UML. In that contemplation, we con-centrate {{on the design of}} the details <b>of</b> <b>crosscutting</b> features, i. e., the separate specification of the elements that crosscut a given decomposition and of the join points at which that crosscutting takes place, as well as the distinct designation of elements belonging to the crosscut decomposition that are used (e. g., referenced) by the crosscutting elements. 1...|$|R
40|$|It {{is often}} claimed that {{inaccurate}} modularisation <b>of</b> <b>crosscutting</b> concerns hinders program comprehension and, as a consequence, leads to harmful software instabilities. However, {{recent studies have}} pointed out that crosscutting concerns are not always harmful to design stability. Hence, software maintainers would benefit from well documented patterns <b>of</b> <b>crosscutting</b> concerns and a better understanding about their actual impact on design stability. This paper presents a catalogue <b>of</b> <b>crosscutting</b> concern patterns recurrently observed in software systems. These patterns are described and classified based on an intuitive vocabulary that facilitates their recognition by software engineers. We analysed instances <b>of</b> the <b>crosscutting</b> patterns in object-oriented and aspect-oriented versions of three evolving programs. The outcomes of our exploratory evaluation indicated that: (i) a certain category <b>of</b> <b>crosscutting</b> patterns seems to be good indicator of harmful instabilities, and (ii) aspect-oriented solutions were unable to modularise concerns matching some crosscutting patterns...|$|R
40|$|The {{methods of}} {{calculation}} <b>of</b> probability <b>of</b> <b>crosscut</b> cracks in circular ingot, poured at MNLZ, allowing {{to take into}} account the peculiarities of plastic deformation of slug, is offered. The calculations <b>of</b> probability <b>of</b> <b>crosscut</b> cracks in ingot with diameter 140 mm of low-carbon steel are presented on the example of slug with circular section. </p...|$|R
40|$|A {{letter report}} {{issued by the}} General Accounting Office with an {{abstract}} that begins "GAO reviewed the federal government's management <b>of</b> <b>crosscutting</b> program activities, focusing on: (1) an overview of programs with mission fragmentation and overlap in 1998 and 1999; (2) barriers to interagency coordination within the last decade; and (3) potential approaches for improving the effectiveness and efficiency <b>of</b> <b>crosscutting</b> programs. ...|$|R
50|$|The lack {{of support}} for the modular {{implementation}} <b>of</b> <b>crosscutting</b> concerns is especially problematic when the implementation of this concern needs to be modified. The comprehension of the implementation <b>of</b> a <b>crosscutting</b> concern requires the inspection of the implementation of all the modules with which it interacts. Hence, modifications of the system that affect the implementation <b>of</b> <b>crosscutting</b> concern require a manual inspection of all the locations in the code that are relevant to the crosscutting concern. The system maintainer must find and correctly update a variety of poorly identified situations.|$|R
40|$|International audienceThe {{existence}} <b>of</b> <b>crosscutting</b> concerns tangled or scattered, {{complicates the}} understanding {{and evolution of}} object oriented source code. The industrial adoption of aspect-oriented paradigm has led to research new approaches supporting aspect oriented migration. This migration requires the identification <b>of</b> <b>crosscutting</b> concerns, in order to encapsulate them into aspects. We propose in this paper a new approach for the identification <b>of</b> <b>crosscutting</b> concerns at the conceptual level. We materialize this latter by the UML class and sequence diagrams. We use the formal concept analysis to group scattered functionalities in sequence diagrams, and we analyze the order of method calls to detect the tangled ones. Then, we filter all obtained candidate aspects, {{in order to avoid}} the mistakes...|$|R
40|$|Our {{analysis}} <b>of</b> <b>crosscutting</b> {{concerns in}} real-life software systems (totaling over 500, 000 LOC) and in aspect-oriented literature, indicated {{a number of}} properties that allow for their decomposition in primitive building blocks which are atomic crosscutting concerns. We identify these blocks as crosscutting concern sorts, and we use them to describe the <b>crosscutting</b> structure <b>of</b> many (well-known) designs and common mechanisms in software systems. In this paper, we formalize the notion <b>of</b> <b>crosscutting</b> concern sorts by means of relational queries over (object oriented) source models. Based on these queries, we present a concern management tool called SOQUET, {{which can be used}} to document the occurrences <b>of</b> <b>crosscutting</b> concerns in object-oriented systems. We assess the sorts-based approac...|$|R
40|$|Abstract. Existing {{approaches}} to software development do not handle properly the <b>crosscutting</b> nature <b>of</b> some requirements, be functional or non-functional. Aspect-oriented approaches aim at handling effectively separation <b>of</b> <b>crosscutting</b> requirements. We have been investigating {{how to achieve}} separation of concerns, not only through functional and non-functional requirements, but also by providing mechanisms to identify, modularize, specify and compose crosscutting requirements. In this paper we envisage an aspectual use-case driven approach by extending the use case model to integrate non-functional requirements and identifying those use cases that are <b>crosscutting.</b> The examples <b>of</b> <b>crosscutting</b> concerns usually {{found in the literature}} are always non-functional. In this work we will explore the idea <b>of</b> <b>crosscutting</b> use cases and, therefore, functional concerns. ...|$|R
40|$|In earlier work, we {{demonstrated}} the successful {{separation of the}} designs <b>of</b> <b>crosscutting</b> concerns into composition patterns [1]. In this paper, we demonstrate the mapping <b>of</b> <b>crosscutting</b> designs to two programming models that support similar approaches to separation within code [...] -AspectJ [7] and Hyper/J [5]. We first illustrate {{the design of the}} Observer pattern using the composition pattern approach, and then map that design to the appropriate code. ...|$|R
40|$|Legacy {{software}} systems often {{suffer from}} code quality problems. Maintenance of legacy systems {{can therefore be}} costly, {{and the value of}} legacy systems may diminish {{due to a lack of}} adaptability and reliability. Many code quality problems are caused by idiomatic implementation <b>of</b> <b>crosscutting</b> concerns. This work studies the idiomatic implementation <b>of</b> <b>crosscutting</b> concerns in legacy systems, and examines whether modern language technology like aspect-oriented programming can improve the situation. 1...|$|R
40|$|Abstract. Crosscutting {{concerns}} {{are represented in}} different ways using different artefacts throughout the life cycle. The evolution <b>of</b> <b>crosscutting</b> concerns must be controlled to guarantee the consistency of requirements and to avoid costly rework. This control capability is, in essence, traceability. This paper describes an initial general vision of how traceability <b>of</b> <b>crosscutting</b> concerns can be supported and controlled {{by means of a}} Meta Aspect for Traceability. This permits us to explore semantic consistency and completeness as basic characteristics to trace crosscutting concerns. Currently, each existing approach provides a set of elements with which we can conform a general semantics with formal validation properties that support and control the traceability <b>of</b> <b>crosscutting</b> concerns at {{the early stages of the}} software development process. 1...|$|R
40|$|AOP [2]introduced {{the notion}} <b>of</b> <b>crosscutting</b> {{concerns}} in programming. An aspect groups a crosscut (aka. pointcut in Aspect-J [3]) which relates several {{points of interest}} (aka. join points) of the base application with an action (aka. advice) to be performed. This article argues for a clear separation <b>of</b> <b>crosscut</b> and action definitions. The tools for AOP currently available support only simple crosscut definitions, which hinders the separation <b>of</b> <b>crosscuts</b> and actions. In this paper we advocate that more sophisticated crosscuts can solve this problem. This article discusses two aspects {{in the context of}} a simple e-commerce application. First, we present this AOP example using simple crosscut definitions only. Then we give an alternative version where sophisticated crosscut definitions enable us to clearly separated crosscuts and actions...|$|R
40|$|The {{development}} <b>of</b> the <b>crosscut</b> {{from the}} aspect of mine surveying is a specific task, {{since there is no}} possibility for an independent control of its construction during the development. This is primarily related to the long crosscuts where the deviations of the designed direction <b>of</b> <b>crosscut</b> would have significant consequences on safety and technological activities in the mine shaft. In order to avoid errors, it is necessary to perform the preceding analysis <b>of</b> the <b>crosscut</b> accuracy, where the overall standard deviation <b>of</b> the <b>crosscut</b> is calculated. This value must be smaller than the given allowed deviation. The paper presents an a priori evaluation of the accuracy <b>of</b> the <b>crosscut</b> to be developed in the brown coal mine 'Soko' for the purpose of ventilating the opening rooms of {{the eastern part of the}} deposit...|$|R
40|$|The {{maintenance}} {{activity is}} carried out to change the structure of software, guaranteeing its integrity. This activity becomes easier {{when you have a}} complete understanding of the behavior of the various software components. Seeking this understanding, research has been done to propose approaches in the identification and separation of source code for a specific functionality that is intertwined and spread over several modules of the software. Thus, an analysis of semantic mining techniques to identify signs <b>of</b> <b>crosscutting</b> concerns in object-oriented software is presented. Thus, the goal is to clarify the operation of some techniques for detecting indications <b>of</b> <b>crosscutting</b> concerns and present a comparison between these techniques, analyzing the results criteria of granularity of user involvement, symptoms of the existence <b>of</b> <b>crosscutting</b> concerns and the types of information necessary for computation techniques...|$|R
40|$|Understanding {{crosscutting}} {{concerns is}} difcult because their underlying relations remain {{hidden in a}} class-based de-composition of a system. Based on an extensive investigation <b>of</b> <b>crosscutting</b> concerns in existing systems and literature, we identied a number of typical implementation idioms and relations {{that allow us to}} group such concerns around so-called sorts. In this paper, we present SOQUET, a tool that uses sorts to support the consistent description and doc-umentation <b>of</b> <b>crosscutting</b> relations using pre-dened, sort-specic query templates. 1...|$|R
40|$|Requirements {{engineering}} {{techniques that}} explicitly {{recognize the importance}} of clearly identifying and treating crosscutting concerns are called Aspect-oriented Requirements Engineering Approaches (AORE approaches). The emergence of aspect-oriented programming languages has raised the explicit need to identify crosscutting concerns already during the analysis phase. Besides this observation, the modular representation <b>of</b> <b>crosscutting</b> requirements is a first step to ensure traceability <b>of</b> <b>crosscutting</b> concerns through all other artifacts of the software lifecycle (architecture, design and implementation). Aspect-oriented requirements engineering approaches improve existing requirements engineering approaches through an explicit representation (and modularization) of concerns that were otherwise spread throughout other requirements artifacts (such as use cases, goal models, viewpoints, etc.). AORE approaches adopt the principle of separation of concerns at the analysis phase (the early separation of concerns). In other words, AORE approaches provide a representation <b>of</b> <b>crosscutting</b> concerns in requirements artifacts. </p...|$|R
40|$|AbstractIt {{has been}} {{advocated}} that Aspect-Oriented Programming (AOP) {{is an effective}} technique to improve software maintainability through explicit support for modularising crosscutting concerns. However, {{in order to take}} the advantages of AOP, {{there is a need for}} supporting the systematic refactoring <b>of</b> <b>crosscutting</b> concerns to aspects. Existing techniques for aspect-oriented refactoring are too fine-grained and do not take the concern structure into consideration. This paper presents two categories towards a metaphor-based classification <b>of</b> <b>crosscutting</b> concerns driven by their manifested shapes through a system's modular structure. The proposed categories provide an intuitive and fundamental terminology for detecting concern-oriented design flaws and identifying refactorings in terms <b>of</b> recurring <b>crosscutting</b> structures. On top of this classification, we define a suite of metaphor-based refactorings to guide the “aspectisation” of each concern category. We evaluate our technique by classifying concerns of 23 design patterns and by proposing refactorings to aspectise them according to observations made in previous empirical studies. Based on our experience, we also determine a catalogue of potential additional categories and heuristics for refactoring <b>of</b> <b>crosscutting</b> concerns...|$|R
30|$|Aspect-oriented {{software}} development promotes improved separation of concerns by introducing a new modular unit, called aspect, for the modularization <b>of</b> <b>crosscutting</b> concerns. As {{a new kind}} of modular unit, aspects should have explicit interfaces that describe the way they interact {{with the rest of the}} system and how they affect other modules. This interaction can be homogeneous or heterogeneous. In this paper, we present crosscutting interfaces as a conceptual tool for dealing with the complexity of heterogeneous aspects at the design level. Crosscutting interfaces have been incorporated by the aSideML modeling language in order to enhance aspect description at the design level. Moreover, we present a modeling notation for the description of architecture-level aspects that also supports the explicit representation <b>of</b> <b>crosscutting</b> interfaces. Finally, we present two large-scale case studies we have performed using this modeling language that support our arguments in favor <b>of</b> <b>crosscutting</b> interfaces.|$|R
40|$|Abstract. Aspects {{are defined}} as well-modularized {{crosscutting}} concerns. Despite being a core tenet of Aspect Oriented Programming, {{little research has been}} done in characterizing and measuring <b>crosscutting</b> concerns. Some <b>of</b> the issues that have not been fully explored are: What kinds <b>of</b> <b>crosscutting</b> concerns exist? What language constructs do they use? And what is the impact <b>of</b> <b>crosscutting</b> in actual Aspect Oriented programs? In this paper we present basic code metrics that categorize crosscutting according to the number <b>of</b> classes <b>crosscut</b> and the language constructs used. We applied the metrics to four non-trivial open source programs implemented in AspectJ. We found that for these systems, the number <b>of</b> classes <b>crosscut</b> by advice per crosscutting is small in relation to the number of classes in the program. We argue why we believe this result is not atypical for Aspect Oriented programs and draw a relation to other non-AOP techniques that provide crosscutting. ...|$|R
40|$|Abstract. The current {{state-of-the-art}} {{in aspect}} mining is well advanced for object-oriented programming languages but until now neglected the MATLAB language. This paper contributes {{to fill that}} gap by proposing a novel notion <b>of</b> <b>crosscutting</b> concern, tailored for the specific characteristics of MATLAB code bases. We present an exploratory, token-based, approach to aspect mining for MATLAB. An analysis of data obtained from a tool using this approach over 209 publicly available MATLAB files indicate the approach is valid for detecting several kinds <b>of</b> <b>crosscutting</b> concerns in MATLAB systems...|$|R
40|$|Abstract. The {{separation}} of concerns {{is a fundamental}} principle in software engineering. Crosscutting concerns are concerns that do not align with hierarchical and block decomposition supported by mainstream programming languages. In the past, crosscutting concerns have been studied mainly {{in the context of}} object orientation. Feature orientation is a novel programming paradigm that supports the (de) composition <b>of</b> <b>crosscutting</b> concerns in a system with a hierarchical block structure. In two case studies we explore the problem <b>of</b> <b>crosscutting</b> concerns in functional programming and propose two solutions based on feature orientation. ...|$|R
40|$|Refactoring {{software}} to apply aspect oriented solutions requires {{a clear understanding}} of what are the potential crosscutting concerns and which aspect solutions to replace them with. This process can benefit from the recognition of recurring generic concerns and their reusable aspect solutions. In this paper, we propose a classification <b>of</b> <b>crosscutting</b> concerns in sorts based on the analysis of various refactoring efforts. We discuss how sorts help concern understanding and refactoring, how they support the identification <b>of</b> <b>crosscutting</b> concerns, and how they can contribute to the evolution of aspect languages. 1...|$|R
40|$|Crosscutting {{is usually}} {{described}} in terms of scattering and tangling. However, the distinction between these concepts is vague, which could lead to ambiguous statements. Sometimes, precise definitions are required, e. g. for the formal identification <b>of</b> <b>crosscutting</b> concerns. We propose a conceptual framework for formalizing these concepts based on a crosscutting pattern that shows the mapping between elements at two levels, e. g. concerns and representations of concerns. The definitions of the concepts are formalized in terms of linear algebra, and visualized with matrices and matrix operations. In this way, crosscutting can be clearly distinguished from scattering and tangling. The usability of dependency matrices is illustrated in the analysis <b>of</b> <b>crosscutting</b> across several refinement levels, which can be formalized through the cascading <b>of</b> the <b>crosscutting</b> pattern...|$|R
40|$|Crosscutting {{is usually}} {{described}} in terms of scattering and tangling. However, the distinction between these three concepts is vague. Precise definitions are mandatory for certain research areas such as the identification <b>of</b> <b>crosscutting</b> concerns at phases of the software life cycle. We propose a conceptual framework for crosscutting where crosscutting is defined in terms of trace relations. The definition <b>of</b> <b>crosscutting</b> is formalized using linear algebra, and represented with matrices and matrix operations. In this way, crosscutting can be clearly distinguished from scattering and tangling. With this definition and transitivity <b>of</b> trace relations, <b>crosscutting</b> can be identified and traced through software development, also in early phases. We describe some illustrative case studies to demonstrate the applicability of the analysis...|$|R
50|$|The lack of {{interfaces}} {{between the}} implementation <b>of</b> <b>crosscutting</b> concerns and {{the implementation of}} the modules of the system impedes the development, the evolution and the maintenance of the system.|$|R
40|$|This paper {{describes}} an approach {{for the analysis}} <b>of</b> <b>crosscutting</b> in model transformations in the Model Driven Architecture (MDA). Software architectures should be amenable to changes in user requirements and technological platforms. Impact analysis of changes can be based on traceability of architectural design elements. Design elements have dependencies with other software artifacts but also evolve in time. Crosscutting dependencies may have a strong influence on modifiability of software architectures. We define crosscutting based on a traceability pattern. We present an impact analysis <b>of</b> <b>crosscutting</b> dependencies in transformations rules at model level {{as well as at}} meta-model level...|$|R
40|$|Abstract. Crosscutting {{is usually}} {{described}} in terms of scattering and tangling. However, the distinction between these concepts is vague, which could lead to ambiguous statements. Sometimes, precise definitions are required, e. g., for the formal identification <b>of</b> <b>crosscutting</b> concerns. We propose a conceptual framework for formalizing these concepts based on a crosscutting pattern that shows the mapping between elements at two levels, e. g., concerns and representations of concerns. The definitions of the concepts are formalized in terms of linear algebra, and visualized with matrices and matrix operations. In this way, crosscutting can be clearly distinguished from scattering and tangling. The usability of dependency matrices is illustrated in the analysis <b>of</b> <b>crosscutting</b> across several refinement levels, which can be formalized through the cascading <b>of</b> the <b>crosscutting</b> pattern. 1...|$|R
40|$|Adopting aspect-oriented {{technologies}} requires revisiting {{and restructuring}} the entire traditional software lifecycle {{in order to}} identify and represent occurrences <b>of</b> <b>crosscutting</b> during software requirements engineering and design, and to determine how these requirements are composed. In this research, we propose an aspect mining approach to identify and model crosscutting concerns (aspects) by restructuring the meta-level at the breakpoints of: requirements elicitation, analysis, design, and implementation activities. The main purpose of this research is twofold: (1) "isolation" <b>of</b> <b>crosscutting</b> concerns in the early steps of software life cycle (2) identification <b>of</b> <b>crosscutting</b> concerns in legacy systems. The proposal outlined in this research illustrates a method to reformulate existing object-oriented artifacts by mining and explicitly modeling crosscutting concerns. In this method of restructuring we represent the semantics of UML artifacts by using a set of production rules, which refer to object definitions and relationships metadata. The result of our proposed restructuring process is an aspect-oriented design whereby aspects may be introduced into the object-oriented design or certain classes may be restructured as aspects...|$|R
40|$|Abstract. Aspect-oriented {{software}} development promotes improved separation of concerns by introducing a new modular unit, called aspect, for the modularization <b>of</b> <b>crosscutting</b> concerns. As {{a new kind}} of modular unit, aspects should have explicit interfaces that describe the way they interact {{with the rest of the}} system and how they affect other modules. This interaction can be homogeneous, for example, by providing a logging behavior that affects all procedures in a certain interface; or it can be heterogeneous, for example, by implementing the two sides of a protocol that affects two different classes. In this paper, we present crosscutting interfaces as a conceptual tool for dealing with the complexity of heterogeneous aspects at the design level. Crosscutting interfaces have been incorporated by the aSideML modeling language in order to enhance aspect description at the design level. Moreover, we present a modeling notation for the description of architecture-level aspects that also supports the explicit representation <b>of</b> <b>crosscutting</b> interfaces. Finally, we present a large-scale case study we have performed using this modeling language that supports our arguments in favor <b>of</b> <b>crosscutting</b> interfaces. 1...|$|R
40|$|Design {{patterns}} are solutions to recurring design problems, aimed at increasing reuse, code quality and, above all, maintainability and resilience to changes. Despite such advantages, {{the usage of}} design patterns implies the presence <b>of</b> <b>crosscutting</b> code implementing the pattern usage and access from other system components. When the system evolves, the presence <b>of</b> <b>crosscutting</b> code can cause repeated changes, possibly introducing defects. This paper reports an empirical study, {{in which it is}} showed that, for three open source projects, the number of defects in design-pattern classes is in several cases correlated with the scattering degree of 1 their induced crosscutting concerns, and also varies among different kinds of patterns...|$|R
40|$|Traceability of {{requirements}} and concerns enhances {{the quality of}} software development. We use trace relations to define crosscutting. As starting point, {{we set up a}} dependency matrix to capture the relationship between elements at two levels, e. g. concerns and representations of concerns. The definition <b>of</b> <b>crosscutting</b> is formalized in terms of linear algebra, and represented with matrices and matrix operations. In this way, crosscutting can be clearly distinguished from scattering and tangling. We apply this approach to the identification <b>of</b> <b>crosscutting</b> across early phases in the software life cycle, based on the transitivity of trace relations. We describe an illustrative case study to demonstrate the applicability of the analysis...|$|R
40|$|Syntax Trees 59 11 D. Vollmann Visibility of Join-Points in AOP and Implementation Languages 65 Part I Implementing and Reasoning about Aspects Reasoning About a Classification <b>of</b> <b>Crosscutting</b> Concerns in Object-Oriented Systems Constantinos A. Constantinides Department of Computer Science and Information Systems Birkbeck College, University of London cc@dcs. bbk. ac. uk Therapon Skotiniotis College of Computer Science Northeastern University skotthe@ccs. neu. edu and {{behavior}} <b>of</b> <b>crosscutting</b> concerns in OO systems. We further argue that aspects must {{be defined as}} first-class abstractions {{in order to be}} manipulated as such and thus to provide for reusability and dynamic adaptability {{as well as for the}} creation of dynamically loadable aspect repositories...|$|R
30|$|A {{crosscutting}} simulation tool {{developed by}} Fredriksson et al. [22] {{was used to}} model <b>crosscutting</b> <b>of</b> the sawn boards that {{were the result of}} the sawing simulation. The tool is capable <b>of</b> <b>crosscutting</b> boards, given a product specification with limits on sizes of knots and wane. The outcome is value-optimized, and based on a value of each product set by the user.|$|R
40|$|Recently, one arguing {{question}} {{in the context of}} product line development is how to improve the modularization and composition <b>of</b> <b>crosscutting</b> features. However, little {{attention has been paid to}} the closely related issue <b>of</b> testing the <b>crosscutting</b> features. This paper proposes an approach for testing the <b>crosscutting</b> features <b>of</b> a product line based on the use of a previously proposed concept called Extensio...|$|R
30|$|By {{using the}} {{approach}} herein presented, {{it was possible}} to conclude the following: (i) it is possible to automate the identification <b>of</b> <b>crosscutting</b> concerns in KDM models and (ii) the results are similar or equal to other approaches.|$|R
