172|642|Public
25|$|Hollywood is {{the main}} {{entrance}} area of the park. Its only attraction, a broadway-style theatre, is accompanied by several restaurants {{and a variety of}} flagship shops. Being a replica of the Hollywood Boulevard, this zone is flanked by <b>dynamic</b> <b>architecture</b> and palm trees. It also features a replica of the famous Hollywood Walk of Fame.|$|E
50|$|The Dynamic Tower (also {{known as}} <b>Dynamic</b> <b>Architecture</b> Building or the Da Vinci Tower) is a {{proposed}} 420 m, 80-floor moving skyscraper, designed by architect David Fisher.|$|E
50|$|Fisher is {{the founder}} and {{chairman}} of <b>Dynamic</b> <b>Architecture</b> Group. He is the designer of the proposed rotating Dynamic Tower, billed as the world's first building in motion, though the basic concept has numerous precedents, especially the 2001 Suite Vollard in Brazil with independently rotating floors. Fisher's Dynamic Tower was designed by the <b>Dynamic</b> <b>Architecture</b> Group. The intention was to build an 80-story skyscraper in Dubai. It featured revolving floors, some of which could have moved on command, providing the building with an ever-changing shape along with a changing view for the residents. It is Fisher's first skyscraper design.|$|E
40|$|In <b>dynamic</b> <b>architectures,</b> {{component}} activation {{and connections}} between components may vary over time. With {{the emergence of}} mobile computing such architectures became increasingly important and several techniques emerged to support in their specification. These techniques usually allow for the specification of concrete architecture instances. Sometimes, however, it is desired {{to focus on the}} specification of constraints, rather than concrete architectures. Especially specifications of architecture patterns usually focus on a few, important constraints, leaving out the details of the concrete architecture implementing the pattern. With this article we introduce an approach to specify such constraints for <b>dynamic</b> <b>architectures.</b> To this end, we introduce the notion of configuration traces as an abstract model for <b>dynamic</b> <b>architectures.</b> Then, we introduce the notion of configuration trace assertions as a formal language based on linear temporal logic to specify constraints for such architectures. In addition, we also introduce the notion of configuration diagrams to specify interfaces and certain common activation and connection constraints in one single, graphical notation. The approach is well-suited to specify patterns for <b>dynamic</b> <b>architectures</b> and verify them by means of formal analyses. This is demonstrated by applying the approach to specify and verify the Blackboard pattern for <b>dynamic</b> <b>architectures...</b>|$|R
5000|$|Support the {{specification}} of different architectural styles. Few handle object oriented class inheritance or <b>dynamic</b> <b>architectures</b> ...|$|R
40|$|Existing {{software}} architecture {{research has focused}} on static architectures, where the system architecture is not expected to change during system execution. We argue that the architectures of many systems, especially long running or mission critical systems, evolve during execution, and thus cannot be accurately modeled and analyzed using static architectures. To overcome these problems, we propose the use of <b>dynamic</b> <b>architectures,</b> where the system architecture may change during execution. In this paper, we identify the issues involved in supporting <b>dynamic</b> <b>architectures.</b> Although some of these issues may be addressed by augmenting current models (i. e., adding constructs that support dynamism to existing architectural description languages), many are new to <b>dynamic</b> <b>architectures</b> (i. e., runtime support for modifying architectures). We describe an initial implementation of our tool, ArchShell, that supports the runtime modification of C 2 -style {{software architecture}}s. ...|$|R
50|$|Hollywood is {{the main}} {{entrance}} area of the park. Its only attraction, a broadway-style theatre, is accompanied by several restaurants {{and a variety of}} flagship shops. Being a replica of the Hollywood Boulevard, this zone is flanked by <b>dynamic</b> <b>architecture</b> and palm trees. It also features a replica of the famous Hollywood Walk of Fame.|$|E
5000|$|<b>Dynamic</b> <b>architecture,</b> as {{it turns}} out, is a very broad topic. As Zuk states in Kinetic Architecture, [...] "our present task is to {{unfreeze}} architecture, {{to make it a}} fluid, vibrating, changeable backdrop for the varied and constantly changing modes of life. An expanding, contracting, pulsating, changing architecture would reflect life as it is today and therefore be a part of it".|$|E
5000|$|The Dynamic Tower (also {{known as}} <b>Dynamic</b> <b>Architecture</b> Building or the Da Vinci Tower) is a {{proposed}} 420 m, 80-floor tower in Dubai, United Arab Emirates.Uniquely, each floor {{will be able}} to rotate independently. [...] This will result in a constantly changing shape of the tower. Each floor will rotate a maximum of 6 m per minute, or one full rotation in 90 minutes.|$|E
40|$|We {{summarize}} {{and relate}} current {{work in the}} area of <b>dynamic</b> software <b>architecture.</b> Based on this and our experience to date in constructing systems based on <b>dynamic</b> software <b>architectures,</b> we present a set of open research issues that need further investigation. Keywords <b>Dynamic</b> software <b>architectures,</b> runtime software evolution, runtime software reconfiguration, software consistency, software integrity. ...|$|R
40|$|The Chemical Abstract Machine (CHAM) is a {{very elegant}} and simple {{computational}} model {{that has been used}} for the specification of both static and <b>dynamic</b> <b>architectures.</b> However, so far those descriptions are ad-hoc and monolithic, thus making it difficult to perceive the elements and form of an architecture. In this paper we present some syntactic constructs and a methodology to specify an architecture in a principled, explicit, and modular way, thus proposing a very simple and compact Architecture Description Language (ADL) which is especially suited for <b>dynamic</b> <b>architectures...</b>|$|R
40|$|Architectural {{change is}} defined as the {{addition}} and removal of components and connectors. <b>Dynamic</b> software <b>architectures</b> are those architectures that modify their architecture and enact the modifications during the system's execution. This behavior is most commonly known as run-time evolution or dynamism. As <b>dynamic</b> software <b>architecture</b> use becomes more widespread, it is important {{to gain a better understanding}} of the foundations of this type of software evolutionary change and be able to classify formalisms, approaches and tools. Current evaluations in the areas of software architecture and evolutionary change have made strides in classification but are not sufficient to evaluate <b>dynamic</b> software <b>architectures.</b> A dedicated comparison of <b>dynamic</b> software <b>architectures</b> and architectural formalisms is necessary in order to gain a deeper understanding of run-time evolution. In this paper we present a set of classification criteria for the comparison of <b>dynamic</b> software <b>architectures</b> based on: change type, change process, and change infrastructure. We demonstrate the use of the criteria by classifying formal specifications of <b>dynamic</b> software <b>architectures</b> based on graphs, process algebras, logic, and other formalisms. Specifically, we survey and classify 14 formal specification approaches...|$|R
5000|$|In 2008, Fisher {{said that}} he {{expected}} the skyscraper {{to be completed in}} 2010. In 2009, Fisher said construction would be complete in late 2011. Fisher did not [...] "say where the tower would be built, ... because he wanted to keep it a surprise." [...] Fisher acknowledges that he is not well known, has never built a skyscraper before and has not practiced architecture regularly in decades. As of , construction has not started, and there has been no official announcement of the building site. In 2017, <b>Dynamic</b> <b>Architecture</b> announced for the Dynamic Tower to be completed by 2020, as the construction not started yet.|$|E
5000|$|... 2010-12 - v2.0: The {{first version}} 2.0 of Chamilo. Considered to be stable {{software}} with experimental web 2.0 and 3.0 aspects expected {{to analyze the}} impact of brand new technology on education. Apart from introducing the concept of true content, object and document management, Chamilo 2.0 also focuses on integration with existing repository systems (Fedora, YouTube, Google Docs, etc.) and supports {{some of the most}} popular authentication systems (ao. LDAP, CAS, Shibboleth). Its modular and <b>dynamic</b> <b>architecture</b> provides a basis for a multitude of extensions which can be added upon installation or at a later date by means of a repository of additional functionality packages.|$|E
50|$|Using mankind as a {{macroscopic}} example, {{in closed}} chain function, ground reactive forces, a <b>dynamic</b> <b>architecture</b> and a dynamic {{equilibrium of forces}} around joint axes impact the posture to produce tissue stress. This tissue stress can be both beneficial or harmful. Since gravity, hard, unyielding ground surfaces and other factors such as activity level, body weight and health state impact each of us differently {{there is no one}} plan of care that will work for every individual. This results in a lifetime of adaptation of tissues via Wolff's and Davis' Laws of Bone and Soft Tissue respectively that can unless compensated and/or corrected lead to breakdown, injury and reduced quality of life on a case to case basis.|$|E
40|$|Dynamic {{architectural}} {{change is}} defined as the addition and removal of components and connectors. <b>Dynamic</b> software <b>architectures</b> are those architectures that modify their architecture and enact the modifications during the system’s execution. This behavior is most commonly known as run-time evolution or dynamism. As <b>dynamic</b> software <b>architecture</b> use becomes more widespread, it is important {{to gain a better understanding}} of this type of software evolutionary change and be able to classify formalisms, approaches and tools. Current evaluations in the areas of software architecture and evolutionary change have made strides in classification but are not sufficient to evaluate <b>dynamic</b> software <b>architectures.</b> A dedicated comparison of <b>dynamic</b> software <b>architectures</b> and architectural formalisms is necessary in order to gain a deeper understanding of run-time evolution. In this paper we present a set of classification criteria for the comparison of <b>dynamic</b> software <b>architectures</b> based on: change type, change process, and change infrastructure. We demonstrate the use of the criteria by classifying three types of dynamic software architectural change. In addition we survey 14 current approaches to the formal specification of <b>dynamic</b> software <b>architectures</b> based on graphs, process algebras, logic, and other formalisms. We the...|$|R
40|$|AbstractThis paper {{introduces}} {{an approach}} to dynamic software composition {{in the context of}} scientific computing where high demands performance seem to prevent such flexible solutions. In our concrete however, dynamic software composition is rather a way to high-performance than an obstacle to it. We achieve this by combining <b>dynamic</b> <b>architectures</b> and task graph scheduling...|$|R
40|$|This diploma thesis {{deals with}} the {{prediction}} of financial time series on capital markets using artificial intelligence methods. There are created several <b>dynamic</b> <b>architectures</b> of artificial neural networks, which are learned and subsequently used for prediction of future movements of shares. Based on the results an assessment and recommendations for working with artificial neural networks are provided...|$|R
5000|$|Today, {{the brand}} is most {{famous for its}} line of motorcycle-inspired handbags, {{especially}} the famous [...] "Lariat". Balenciaga has eight exclusive boutiques in the United States. One Balenciaga store is located on 22nd St in New York City, New York. A second store is located in Los Angeles, California, on Melrose Avenue. Recently, a third store opened at the South Coast Plaza, in Costa Mesa, California. This store is 1200 sq ft and includes coffin-like inset displays. The New York and Los Angeles boutiques carry both men's and women's ready-to-wear, while the South Coast Plaza boutique carries only women's clothing. A fourth, located in Las Vegas inside Caesars Palace, carries only accessories. An additional location on the Las Vegas Strip, in Crystals at CityCenter, sells accessories as well as women's ready-to-wear. The boutique at Ala Moana Center in Honolulu, offers men's and women's ready-to-wear and accessories. There is a store at the Bal Harbour shops in Bal Harbour, Florida. An eighth store is opening spring 2014 in Dallas, Texas, at the Highland Park Village {{to become the first}} boutique in Texas. The Highland Park Village boutique is opening next to Christian Dior and will carry men's and women's ready to wear and accessories. All of the boutiques employ <b>dynamic</b> <b>architecture,</b> with white paneling, marble, and glass work as well as black leather seats and light green, black and navy carpets or white tiles, emphasizing the brand's lean toward avant-garde and the drama of fashion.|$|E
5000|$|Although {{the new era}} in Iranian {{architecture}} {{began with}} the rise of Safavid dynasty, (1501 - 1736), in fact, it is {{in the early decades of}} the twentieth century that the first generation of modern Iranian architects, almost like every generation of modern architects in the world, appears as being influenced by the Modern Movement and rationalism in architecture. Architects such as Vartan Hovanesian, Ali Sadegh, Mohsen Foroughi, Paul Akbar, Gabriel Guevrekian, Heydar Ghiai, Abdolaziz Farmanfarmaian and Hooshang Seyhoun are examples of this movement.Later, in the mid-1960s, Ali Sardar Afkhami, Kamran Diba and Nader Ardalan are among those Iranian architects who have opened their design approach to the history and traditions to represent a trend of Iranian Post-Modernism.Attention for the new trends in international architecture, is being carried out by Iranian architects, even after the Islamic Revolution. Like most architectural milieu of the world, in the 1980s the experiments on the transition from post-modernism to new developments, has influenced many Iranians architects, in architects such as Reza Daneshmir, Farhad Ahmadi, and Darab Diba.In this context, It is of interest the attempt by some architects like Abbas Gharib or Bahram Shirdel to go in deep within the most advanced theory and trends in contemporary and Post-contemporary architecture, such as the theory of Complex systems in architecture in the case of Gharib and folding Theory in the case of Shirdel. These experiments are valid methods and contribution to liberate architecture and design, from abstraction, flatness, stiffness, forced rectangular and Heterotopia of the modernist spaces for a more fluid, flexible, soft and <b>dynamic</b> <b>architecture,</b> open to the complexities of its environment and context ...|$|E
3000|$|To {{provide support}} for <b>dynamic</b> <b>architecture</b> {{conformance}} using OGs, we have defined a small language to trigger visual alerts when expected (or unexpected) relations are [...]...|$|E
40|$|We {{present a}} {{framework}} for designing and analyzing Global Computing Systems using <b>Dynamic</b> Software <b>Architectures.</b> The framework, called TGGA, integrates typed graph grammars and the Alloy modeling language to specify Programmed <b>Dynamic</b> Software <b>Architectures</b> that represent systems that evolve their topology at runtime. We demonstrate {{the benefits of the}} framework by applying it to the study of an Automotive Software System...|$|R
40|$|As the {{complexity}} of software systems increases, so does {{the need for a}} good mechanism of abstraction. Software architectural design is an abstraction expected to {{play a critical role in}} Software Engineering. However, the very nature of this high level abstraction can also pose difficulties with the understanding and analysis of the behavior of the system-to-be. This paper introduces the notion of <b>dynamic</b> software <b>architecture</b> slicing (DSAS) in order to alleviate such difficulties. A <b>dynamic</b> software <b>architecture</b> slice represents the run-time behavior of those parts of the software architecture that are selected according to a particular slicing criterion such as a set of resources and events. This paper also describes a methodology for using the notion, and an algorithm to generate <b>dynamic</b> software <b>architecture</b> slices...|$|R
40|$|Architectural {{change is}} defined as the {{addition}} and removal of components and connectors. <b>Dynamic</b> software <b>architectures</b> are those architectures that modify their architectural structure during the system’s execution. As <b>dynamic</b> software <b>architecture</b> use becomes more widespread, a variety of formal specification languages have been developed {{to gain a better understanding}} of the foundations of this type of software evolutionary change. In this paper we survey 14 formal specification approaches based on graphs, process algebras, logic, and other formalisms. Our survey will evaluate the ability of each approach to specify self-managing systems as well as the ability to address flexibility and scalability issues. Based on the results of our survey we will provide recommendations on future directions for improving the specification of <b>dynamic</b> software <b>architectures,</b> specifically self-managed architectures...|$|R
40|$|There are {{a variety}} of {{contexts}} where <b>dynamic</b> <b>architecture</b> evolution is needed. The context we have been working in is that of providing architecture models of NASA training simulations for manned space exploration. In this context, as in many others, we do not need unrestricted dynamic evolution, but only a limited form of dynamic evolution where the transitions and boundaries of that evolution are well understood. We present our approach to this restricted form architecture model and use an architecture of architectures with transition connectors as the means of prescribing our statically defined <b>dynamic</b> <b>architecture</b> evolution. Further, we present an incremental mechanism for generating the needed architectures and validate our approach with an implemented prototype. I...|$|E
40|$|Through the {{progress}} of digital media, dynamic concepts contribute to vivid forms. Nevertheless, these forms still present static space, which cannot reflect the designeris dynamic concept, a shape that changes over time. This is a setback for design and fabrication. Hence many researchers turn to designing <b>dynamic</b> <b>architecture.</b> However, the current development restricted by technical threshold is prone to solve the variation of functions instead of aesthetic-oriented changeable form. It {{is obvious that the}} difference between “statics” and “dynamics” becomes a watershed of aesthetics and functions. This research attempts to eliminate the above-mentioned barrier and to suggest a new CAD/CAM fabrication procedure based on aesthetics and reveal key tectonic factors that affect <b>dynamic</b> <b>architecture...</b>|$|E
40|$|Abstract-There are {{a variety}} of {{contexts}} where <b>dynamic</b> <b>architecture</b> evolution is needed. The context we have been working in is that of providing architecture models of NASA training simulations for manned space exploration. In this context, as in many others, we do not need unrestricted dynamic evolution, but only a limited form of dynamic evolution where the transitions and boundaries of that evolution are well understood. We present our approach to this restricted form of dynamic evolutions {{in the context of an}} abstract architecture model and use an architecture of architectures with transition connectors as the means of prescribing our statically defined <b>dynamic</b> <b>architecture</b> evolution. Further, we present an incremental mechanism for generating the needed architectures and validate our approach with an implemented prototype. I...|$|E
30|$|Dynamic {{analysis}} Discotect {{is a tool}} {{designed to}} recover <b>dynamic</b> <b>architectures</b> [23, 29]. However, instead of hierarchical object diagrams, Discotect extracts flat models based on connectors and components (C&C). For this purpose, Discotect requires developers to provide a map between the runtime trace and architectural events. Although it is less invasive than source code annotations, this map is more complex and requires {{more information on the}} target program than the definition of domains in OGs.|$|R
40|$|This work bridges the {{gap between}} {{activities}} motivated from statistical signal processing, neuromorphic systems, and microelectronic implementation techniques for blind separation and recovery of mixed signals. The composition adopts both discrete-time and continuous-time formulations with a view towards implementations in the digital {{as well as the}} analog domains of microelectronic circuits. This paper focuses on the development and formulation of <b>dynamic</b> <b>architectures</b> with adaptive update laws for multi-source blind signal separation/recovery. 1...|$|R
40|$|Since {{multimedia}} {{information is}} characterized by motley types of media with different properties, multimedia content retrieval in digital libraries requires <b>dynamic</b> reconfigurable <b>architectures.</b> In this paper, mobile agents are being {{used as the basis}} of such a <b>dynamic</b> reconfigurable <b>architecture.</b> The proposed architecture is further enhanced with innovative relevance feedback algorithms for interactive multimedia retrieval. In particular, an optimal recursive relevance feedback mechanism is examined by adaptively estimating a parametric correlation-based similarity measure. 1...|$|R
40|$|We proposed, {{and partly}} {{implement}} in laboratory conditions, an intelligent adaptive living network wearable by humans and robots. When grown on 3 D bodies (living or inanimate) the living Physarum network provide a highly-distributed sensorial structure (light-, electro-magnetic, chemical and tactile sensitivity) with embedded <b>dynamic</b> <b>architecture</b> of massive-parallel computing processors based on geometry of proximity graph...|$|E
40|$|With {{the rapid}} {{development}} of online shopping, {{the ability to}} intelligently collect and analyze information about E-shoppers has become a key source of competitive advantage for firms. This paper presents a optimal algorithm of modeling <b>dynamic</b> <b>architecture</b> for artificial neural networks (ANN) and a novel machine-learning algorithm for extracting rules from databases via using genetic algorithm. In the <b>dynamic</b> <b>architecture,</b> the number of hidden layers {{and the number of}} hidden nodes are sequentially and dynamically generated until a level of performance accuracy is reached. In addition, in this paper, a new genetic algorithm is presented, which does not need the computational complexity. The genetic algorithm is used to find the optimal values of input attributes Xm, which maximizes output function &phi;k of output node k. The optimal chromosome is decoded and used to obtain a rule belonging to class k. The better result is achieved by applying the two new algorithms to a given database for e-shoppers buying computer. ...|$|E
40|$|The {{world of}} nano-science is an ever-changing field. Molecular Dynamics (MD) is a {{computational}} {{suite of tools}} that is useful for analyzing and predicting behaviors of substances on the molecular level. The nature of MD is such {{that only a few}} types of computations are repeated thousands or sometimes millions of times over. Even a small increase speedup or efficiency of an MD simulator can compound itself {{over the life of the}} simulation and have a positive and observable effect. This thesis is the end result of an attempted speedup of the MD problem. Two types of MD architectures are developed: a <b>dynamic</b> <b>architecture</b> that is able to change along with the computational demands of the system, and a static architecture that is configured in terms of processing elements to be best suited to a variety of computational demands. The efficiency, throughput, area, and speed of the dynamic and static architectures are presented, highlighting the improvement that the <b>dynamic</b> <b>architecture</b> presents in its ability to provide load balancing...|$|E
50|$|Research {{institutions}} {{have played a}} prominent role in furthering software architecture as a discipline. Mary Shaw and David Garlan of Carnegie Mellon wrote a book titled Software Architecture: Perspectives on an Emerging Discipline in 1996, which promoted software architecture concepts such as components, connectors, and styles. The University of California, Irvine's Institute for Software Research's efforts in software architecture research is directed primarily in architectural styles, architecture description languages, and <b>dynamic</b> <b>architectures.</b>|$|R
40|$|Laboratory for Foundations of Computer ScienceIn {{this thesis}} we address the {{challenges}} {{associated with the}} provision of <b>dynamic</b> software <b>architectures.</b> These are systems in which programs are constructed from separately compiled units with a facility for the replacement of these units at runtime. Typical examples of applications which will benefit from this dynamic approach are long-lived systems in which downtime is highly undesirable, for example, web-servers, database engines, and equipment controllers. In addition, <b>dynamic</b> software <b>architectures</b> are also gaining popularity with the recent advent of wide-area Internet applications, where it is often impractical to compile a program in its entirety or begin execution in a single step. Our approach to <b>dynamic</b> software <b>architectures</b> differs from earlier attempts in that we guarantee {{the safety of the}} replacement operation. This is done by founding our techniques on the rigour of strong typing. In {{the first half of the}} thesis we take an existing static software architecture with strong typing facilities and modular program construction, namely the Standard ML platform, and equip it with facilities for separate-compilation and code-replacement of modules. The resulting <b>dynamic</b> software <b>architecture,</b> which we call Dynamic ML, ensures the safety of replacement through an effective use of state-of-the-art advances in the fields of types in compilation and abstract machines. In the latter half of the thesis we extend Dynamic ML with a facility for distributed execution and adapt our code-replacement model accordingly. This will permit the construction of larger <b>dynamic</b> <b>architectures,</b> for example, across a distributed network of workstations. We also perform a mechanical verification of the distributed algorithm by model checking, to gain further confidence in the correctness of our approach. At the end of the thesis we outline an implementation of our techniques for the Java language, demonstrating the portability of our approach...|$|R
40|$|<b>Dynamic</b> {{software}} <b>architectures</b> {{provide support}} for building long running and reconfigurable applications. Formal specification is useful {{to the design of}} correct and robust <b>dynamic</b> software <b>architectures.</b> In this paper, <b>dynamic</b> software <b>architectures</b> are specified with dynamic description logic. Dynamic description logic inherits the expressiveness and decidability of description logic and it has the ability to represent state changes. Reconfigurable dataflow model, which is an extension of the widely used dataflow model, is used as the architecture meta-model. Architectures, reconfiguration operations, and reconfiguration plans are represented in a unified framework from the view point of data flow. Three levels of constraints have been proposed to aid designers in predetermining the possible side effects of reconfiguration plans. The work can guide the development of dynamic software systems from component definition to reconfiguration plan design...|$|R
