353|416|Public
500|$|SIMD {{parallel}} computers {{can be traced}} back to the 1970s. The motivation behind early SIMD computers was to amortize the <b>gate</b> <b>delay</b> of the processor's control unit over multiple instructions. In 1964, Slotnick had proposed building a massively parallel computer for the Lawrence Livermore National Laboratory. His design was funded by the US Air Force, which was the earliest SIMD parallel-computing effort, ILLIAC IV. The key to its design was a fairly high parallelism, with up to 256processors, which allowed the machine to work on large datasets in what would later be known as vector processing. However, ILLIAC IV was called [...] "the most infamous of supercomputers", because the project was only one fourth completed, but took 11years and cost almost four times the original estimate. When it was finally ready to run its first real application in 1976, it was outperformed by existing commercial supercomputers such as the Cray-1.|$|E
50|$|DCL, {{as defined}} above, {{can be used}} for {{interconnect}} as well as <b>gate</b> <b>delay.</b>|$|E
5000|$|... #Caption: A {{full adder}} has an overall <b>gate</b> <b>delay</b> of 3 logic gates from the inputs A and B to the carry output Cout shown in red ...|$|E
5000|$|The maximum time is 8 <b>gate</b> <b>delays</b> (for [...] ).A {{standard}} 16-bit ripple carry adder {{would take}} 16*3-1=47 <b>gate</b> <b>delays.</b>|$|R
5000|$|The classic gated latch designs {{have some}} {{undesirable}} characteristics. [...] They require double-rail logic or an inverter. The input-to-output propagation may {{take up to}} three <b>gate</b> <b>delays.</b> The input-to-output propagation is not constant - some outputs take two <b>gate</b> <b>delays</b> while others take three.|$|R
40|$|This paper {{examines}} {{wire and}} <b>gate</b> <b>delays</b> as technologies migrate from 0. 18 -m to 0. 035 -m feature sizes {{to better understand}} the magnitude of the wiring problem. Wires that shorten in length as technologies scale have delays that either track <b>gate</b> <b>delays</b> or grow slowly relative to <b>gate</b> <b>delays.</b> This result is good news since these "local" wires dominate chip wiring. Despite this scaling of local wire performance, computer-aided design (CAD) tools must still become more sophisticated in dealing with these wires. Under scaling, the total number of wires grows exponentially, so CAD tools will need to handle an ever-growing percentage of all the wires in order to keep designer workloads constant. Global wires present a more serious problem to designers. These are wires that do not scale in length since they communicate signals across the chip. The delay of these wires will remain constant if repeaters are used, meaning that relative to <b>gate</b> <b>delays,</b> their delays scale upwards. These increased delays for global communication will drive architectures toward modular designs with explicit global latency mechanism...|$|R
50|$|To {{understand}} {{the operation of}} a ring oscillator, one must first understand <b>gate</b> <b>delay.</b> In a physical device, no gate can switch instantaneously. In a device fabricated with MOSFETs, for example, the gate capacitance must be charged before current can flow between the source and the drain. Thus, the output of every inverter in a ring oscillator changes a finite amount of time after the input has changed. From here, it can be easily seen that adding more inverters to the chain increases the total <b>gate</b> <b>delay,</b> reducing the frequency of oscillation.|$|E
5000|$|... 74H - High-speed. 6 ns <b>gate</b> <b>delay</b> but 22 mW power dissipation. Used in 1970s era supercomputers. Still {{produced}} {{but generally}} superseded by the 74S series. Introduced in 1971.|$|E
5000|$|... 74L - Low-power. Larger {{resistors}} allowed 1 mW dissipation at {{the cost}} of a very slow 33 ns <b>gate</b> <b>delay.</b> Obsolete, replaced by 74LS or CMOS technology. Introduced 1971.|$|E
50|$|These {{computations}} only consider <b>gate</b> <b>delays</b> and don't {{deal with}} wire delays, {{which can also}} be very substantial.|$|R
5000|$|In Moore machines, more logic may be {{necessary}} to decode state into outputs—more <b>gate</b> <b>delays</b> after clock edge.|$|R
40|$|Concern {{about the}} {{performance}} of wires in scaled technologies has led to research exploring other communication methods. This paper examines wire and <b>gate</b> <b>delays</b> as technologies migrate from 0. 18 -m to 0. 035 -m feature sizes {{to better understand the}} magni-tude of the wiring problem. Wires that shorten in length as technolo-gies scale have delays that either track <b>gate</b> <b>delays</b> or grow slowly relative to <b>gate</b> <b>delays.</b> This result is good news since these “local” wires dominate chip wiring. Despite this scaling of local wire per-formance, computer-aided design (CAD) tools must still become more sophisticated in dealing with these wires. Under scaling, the total number of wires grows exponentially, so CAD tools will need to handle an ever-growing percentage of all the wires in order to keep designer workloads constant. Global wires present a more se-rious problem to designers. These are wires that do not scale in length since they communicate signals across the chip. The delay of these wires will remain constant if repeaters are used, meaning that relative to <b>gate</b> <b>delays,</b> their delays scale upwards. These in-creased delays for global communication will drive architectures toward modular designs with explicit global latency mechanisms. Keywords—Capacitance, delay estimation, electromagnetic coupling, inductance, interconnections, resistance, technology forecasting, wire. I...|$|R
5000|$|The {{calculation}} of the <b>gate</b> <b>delay</b> of a 16-bit adder (using 4 CLAs and 1 LCU) is not as straight forward as the ripple carry adder.Starting at time of zero: ...|$|E
5000|$|... 74 - Standard TTL. the {{original}} logic family had no letters between the [...] "74" [...] and the part number. 10 ns <b>gate</b> <b>delay,</b> 10 mW dissipation, 4.75-5.25 V, released in 1966.|$|E
5000|$|... 74LS - Low-power Schottky. Implemented {{using the}} same {{technology}} as 74S but with reduced power consumption and switching speed. Typical 10 ns <b>gate</b> <b>delay,</b> a remarkable (for the time) 2 mW dissipation, 4.75-5.25 V.|$|E
40|$|Abstract—We address post-silicon {{characterization}} of the unique <b>gate</b> <b>delays</b> and their timing distributions on each manufactured IC. Our proposed approach {{is based upon the}} new theory of compressed sensing. The first step in performing timing measurements is to find the sensitizable paths by traditional testing methods. Next, we show that the timing variations are sparse in the wavelet domain. The sparsity is exploited for estimation of the <b>gate</b> <b>delays</b> using the compressed sensing theory. This estimation method requires significantly less number of timing measurements compared to the case where the dependence between the <b>gate</b> <b>delays</b> is not directly integrated within the estimation framework. We discuss a number of applications for the new post-silicon timing characterization method. Experimental results on benchmark circuits show that using compressed sensing theory can characterize the post-silicon variations with a mean accurately of 95 % in the pertinent sparse basis. I...|$|R
40|$|This paper {{presents}} hardware architecture {{to perform}} the basic arithmetic operation addition using Cellular Automata (CA). This age old problem of addition were previously solved by ripple circuit or carry look ahead circuit or by {{using a combination of}} them. Each of these circuits is purely combinational in nature and their complexity is centered on the number of logic gates and the associated <b>gate</b> <b>delays.</b> On the contrary, in our CA based design the complexity is mainly centered on the number of clock cycles required to finish the computation instead of the <b>gate</b> <b>delays.</b> 1...|$|R
40|$|Previous {{work has}} shown that maximum {{switching}} density at a given node is extremely sensitive to a slight change in the delay at that node. However, when estimating the peak power for the entire circuit, the powers estimated must not be as sensitive to a slight variation or inaccuracy in the assumed <b>gate</b> <b>delays</b> because computing the exact <b>gate</b> <b>delays</b> for every <b>gate</b> in the circuit during simulation is expensive. Thus, {{we would like to}} use the simplest delay model possible to reduce the execution time for estimating power, while making sure that it provides an accurate estimate, i. e., that the peak powers estimated will not vary due to a variation in the <b>gate</b> <b>delays.</b> Results for four delay models are reported for the ISCAS 85 combinational benchmark circuits, ISCAS 89 sequential benchmark circuits, and several synthesized circuits. 1 Introduction The continuing decrease in feature size and increase in chip density in recent years give rise to concerns about excessive power dissipation in [...] ...|$|R
50|$|The ECLinPS ("ECL in picoseconds") {{family was}} {{introduced}} in 1987.ECLinPS has 500 ps single <b>gate</b> <b>delay</b> and 1.1 GHz flip-flop toggle frequency.The ECLinPS family parts are available from multiple sources, including Arizona Microtek, Micrel, National Semiconductor, and ON Semiconductor.|$|E
5000|$|... 74AS - Advanced Schottky, {{the next}} {{iteration}} of the 74S series with greater speed and fan-out despite lower power consumption. Implemented using the 74S's technology with [...] "miller killer" [...] circuitry {{to speed up}} the low-to-high transition. 1.7 ns <b>gate</b> <b>delay,</b> 8 mW, 4.5-5.5 V.|$|E
5000|$|... 74S - High-speed Schottky. Implemented with Schottky diode clamps at the inputs {{to prevent}} charge storage, this {{provides}} faster operation than the 74 and 74H series {{at the cost}} of increased power consumption and cost. 3 ns <b>gate</b> <b>delay,</b> 20 mW dissipation, released in 1971.|$|E
50|$|Some SPARC designs have {{improved}} {{the speed of}} their L1 caches by a few <b>gate</b> <b>delays</b> by collapsing the virtual address adder into the SRAM decoders. See Sum addressed decoder.|$|R
5000|$|Suppose that a carry {{arises in}} a {{particular}} group. Within at most five <b>gate</b> <b>delays,</b> that carry will emerge at the left-hand end {{of the group and}} start propagating through the group to its left.|$|R
40|$|Abstract—Subnanosecond {{pulses of}} hot {{electron}} luminescence are {{shown to be}} generated coincident with logic state switching of individual devices in CMOS circuits. These pulses are used to directly observe 90 ps <b>gate</b> <b>delays</b> in a ring oscillator {{as well as the}} logic switching and <b>gate</b> <b>delays</b> of a counter. By use of a detector with both space- and time-resolution, the dynamics of all the gates of the circuit are simultaneously measured. This noninvasive technique can be extended to smaller device size, as well as probing from the backside of the wafer. The optical emission may provide an alternative to electron beam testing for measuring the dynamics of high-speed CMOS circuits. I...|$|R
50|$|Delay {{calculation}} is {{the term}} used in integrated circuit design for the calculation of the <b>gate</b> <b>delay</b> of a single logic gate and the wires attached to it. By contrast, static timing analysis computes the delays of entire paths, using delay calculation to determine the delay of each gate and wire.|$|E
50|$|It {{consisted}} of parallel connected 166 vector processors with a <b>gate</b> <b>delay</b> {{as low as}} 60 ps in the Ga-As chips. The resulting cycle time was 9.5 ns. The processor had four independent pipelines each capable of executing two Multiply-Add instructions in parallel resulting in a peak speed of 1.7 Gflop/s per processor. Each processor board was equipped with 256 Megabytes of central memory.|$|E
5000|$|A 25 nm {{transistor}} {{operating on}} just 0.7 volt was demonstrated in December 2002 by TSMC (Taiwan Semiconductor Manufacturing Company). The [...] "Omega FinFET" [...] design {{is named after}} the similarity between the Greek letter omega (Ω) and the shape in which the gate wraps around the source/drain structure. It has a <b>gate</b> <b>delay</b> of just 0.39 picosecond (ps) for the N-type transistor and 0.88 ps for the P-type.|$|E
40|$|Semiconducting carbon {{nanotubes}} (CNTs) {{are attractive}} as channel material for field-effect transistors {{due to their}} high carrier mobility. In this paper we show that a local CNT gate can provide a significant improvement in the subthreshold slope of a CNT transistor compared to back gate switching and provide <b>gate</b> <b>delays</b> as low as 5 ps. The CNT gated CNT transistor devices are fabricated using a two-step chemical vapour deposition technique. The measured transfer characteristics are in very good agreement with theoretical modelling results that provide confirmation of the operating principle of the transistors. <b>Gate</b> <b>delays</b> below 2 ps should be readily achievable by reducing {{the thickness of the}} gate dielectric...|$|R
50|$|The PTD {{consists}} of a <b>delay</b> <b>gate</b> (which <b>delays</b> the clock signal) and the clock signal itself passed through a NAND gate and then inverted.|$|R
40|$|Statistical {{perturbations}} {{of process}} parameters maychange propagation delays and alter the switching activityinthe circuit due to glitches. In this paper, {{the problem of}} estimating glitch#hazard power in CMOS circuits is addressed. A probabilistic min#max delay model is used, where the variation of delays between the minimum and maximum delaymay followany given discrete probability distribution. The #rst part of this work considers glitching activity assuming #xed <b>gate</b> <b>delays</b> with instantaneous rise#fall times. Next, this is re#ned to incorporate the e#ects of #xed transition times. Experimental results on benchmark circuits show that a signi#cant amountofpower is dissipated in hazards and glitches and that the hazardous part of power dissipation is sensitivetovariations in <b>gate</b> <b>delays...</b>|$|R
50|$|The vector {{processor}} has a 14 ns cycle time (clock rate of approximately 71.43 MHz). The vector registers are 256 elements wide, and each element is 64 bits wide. The S-810/20 has 32 of these registers, {{whereas the other}} models have 16. These registers are implemented with 1 kilobit (Kbit) bipolar RAM integrated circuits (ICs) with a 4.5 ns access time. All models have eight 256-bit vector mask registers and 48 vector address registers. All models have three load pipelines and one load/store pipeline for accessing the main memory. The S-810/20 has two lanes, each with two add, one multiply followed by add, and one multiply or divide followed by add floating point pipelines, {{for a total of}} twelve. The S-810/10 has one lane with the same configuration as the S-810/20 and therefore a total of six pipelines. CPU logic is implemented with two emitter-coupled logic gate array IC types, a 550-gate part with a 250 picosecond (ps) <b>gate</b> <b>delay</b> and a 1,500-gate part with a 450 ps <b>gate</b> <b>delay.</b>|$|E
5000|$|If {{that carry}} {{is going to}} {{propagate}} {{all the way through}} the next group, the lookahead unit will already have deduced this. Accordingly, before the carry emerges from the next group, the lookahead unit is immediately (within one <b>gate</b> <b>delay)</b> able to tell the next group to the left that it is going to receive a carry - and, at the same time, to tell the next lookahead unit to the left that a carry is on its way.|$|E
5000|$|No {{matter how}} {{advanced}} the [...] semiconductor process or {{how fast the}} switching speed, this places a practical limit on how many instructions can be simultaneously dispatched. While process advances will allow ever greater numbers of execution units (e.g., ALUs), the burden of checking instruction dependencies grows rapidly, as does the complexity of register renaming circuitry to mitigate some dependencies. Collectively the [...] power consumption, complexity and <b>gate</b> <b>delay</b> costs limit the achievable superscalar speedup to roughly eight simultaneously dispatched instructions.|$|E
40|$|AbstractThe {{detection}} of timing problems in digital networks is of considerable importance. In particular {{it is desirable}} to have efficient methods for discovering critical races and hazards. Unfortunately, commercial simulators rarely provide such facilities; in fact, the simulators usually assume that all the <b>gate</b> <b>delays</b> are exactly equal. In contrast to this, binary race analysis frequently assumes that <b>gate</b> <b>delays</b> can be arbitrarily large, though finite. An exception to this is the almost-equal-delay race model, where <b>gates</b> have different <b>delays,</b> but the difference between any two delays cannot be arbitrary. The difficulty {{with the use of}} this model is that it is computationally very inefficient. In this paper we define a new ternary model which is very closely related to the binary almost-equal-delay model. Moreover, the ternary model is considerably more efficient, as efficient as the unit delay model; consequently, it could easily be incorporated in simulators...|$|R
40|$|We {{present a}} method for {{analyzing}} the time performance of asynchronous circuits, in paxticulax, those derived by program transformation from concurrent programs using the synthesis approach developed by the second author. The analysis method produces a performance metric (related to {{the time needed to}} perform an operation) in terms of the primitive <b>gate</b> <b>delays</b> of the circuit. Such a metric provides a quantitative means by which to compare competing designs. Because the <b>gate</b> <b>delays</b> are functions of transistor sizes, the performance metric can be optimized with respect to these sizes. For a large class of asynchronous circuits-including those produced by using our synthesis method-these techniques produce the global optimum of the performance metric. A CAD tool has been implemented to perform this optimization...|$|R
5000|$|Designers {{looked for}} alternatives.A {{successful}} alternative is the Earle latch. It requires {{only a single}} data input, and its output takes a constant two <b>gate</b> <b>delays.</b> In addition, the two gate levels of the Earle latch can, in some cases, be merged with the last two gate levels of the circuits driving the latch because many common computational circuits have an OR layer followed by an AND layer as their last two levels. Merging the latch function can implement the latch with no additional <b>gate</b> <b>delays.</b> [...] The merge is commonly exploited {{in the design of}} pipelined computers, and, in fact, was originally developed by J. G. Earle {{to be used in the}} IBM System/360 Model 91 for that purpose.|$|R
