22|10000|Public
50|$|The third normal form, Boyce-Codd normal form, <b>fourth</b> <b>normal</b> <b>form</b> {{and fifth}} normal form are special {{cases of the}} domain/key normal form. All have either functional, multi-valued or join {{dependencies}} that can be converted into (super)keys. The domains on those normal forms were unconstrained so all domain constraints are satisfied. However, transforming a higher normal form into domain/key normal form {{is not always a}} dependency-preserving transformation and therefore not always possible.|$|E
5000|$|<b>Fourth</b> <b>normal</b> <b>form</b> (4NF) is {{a normal}} form used in {{database}} normalization. Introduced by Ronald Fagin in 1977, 4NF is {{the next level of}} normalization after Boyce-Codd normal form (BCNF). Whereas the second, third, and Boyce-Codd normal forms are concerned with functional dependencies, 4NF is concerned with a more general type of dependency known as a multivalued dependency. A table is in 4NF if and only if, for every one of its non-trivial multivalued dependencies X [...] Y, X is a superkey—that is, X is either a candidate key or a superset thereof.|$|E
5000|$|Because the lecturers {{attached}} to the course and the books {{attached to}} the course are independent of each other, this database design has a multivalued dependency; {{if we were to}} add a new book to the AHA course, we would have to add one record for each of the lecturers on that course, and vice versa.Put formally, there are two multivalued dependencies in this relation: {course} [...] {book} and equivalently {course} [...] {lecturer}.Databases with multivalued dependencies thus exhibit redundancy. In database normalization, <b>fourth</b> <b>normal</b> <b>form</b> requires that either every multivalued dependency X [...] Y is trivial or for every nontrivial multivalued dependency X [...] Y, X is a superkey. A multivalued dependency X [...] Y is trivial if Y is a subset of X, or if [...] is the whole set of attributes of the relation.|$|E
40|$|In {{this paper}} we give an {{extension}} of the Birkhoff [...] Lewis theorem to some semilinear PDEs. Accordingly we prove existence of infinitely many periodic orbits with large period accumulating at the origin. Such periodic orbits bifurcate from resonant finite dimensional invariant tori of the <b>fourth</b> order <b>normal</b> <b>form</b> of the system. Besides standard nonresonance and nondegeneracy assumptions, our main result is obtained assuming a regularizing property of the nonlinearity. We apply our main theorem to a semilinear beam equation and to a nonlinear Schrödinger equation with smoothing nonlinearity. Comment: 20 page...|$|R
40|$|Abstract. There {{are only}} very few {{approaches}} to normalizing objectoriented data. In this paper we present {{an approach to}} normalization of the object-oriented conceptual model based on UML class diagrams. First part of the paper describes the current status {{in the area of}} formal methods used for object-oriented data modeling. Second part presents four normalization rules, which are based on own experience and modi ed Ambler-Beck approach. These normalization rules are introduced on an example. Our method has been used in education at several universities. It has been and is also used for database design in software development projects, which we carried out. Recently, development of the CASE tool based on this approach has been started. Keywords. Data normalization, object-oriented data model (ODM), relational data model (RDM), rst object-oriented <b>normal</b> <b>form</b> (1 ONF), second objectoriented <b>normal</b> <b>form</b> (2 ONF), third object-oriented <b>normal</b> <b>form</b> (3 ONF), <b>fourth</b> object-oriented <b>normal</b> <b>form</b> (4 ONF). ...|$|R
40|$|We prove {{existence}} and multiplicity of small amplitude periodic {{solutions for the}} wave equation with small "mass" and odd nonlinearity. Such solutions bifurcate from resonant finite dimensional invariant tori of the <b>fourth</b> order Birkhoff <b>normal</b> <b>form</b> of the associated hamiltonian system. The number of geometrically distinct solutions and their minimal periods go to infinity when the "mass" goes to zero. This is the first result about long minimal period for the autonomous wave equation...|$|R
40|$|Many {{practitioners}} and academicians believe that data violating <b>fourth</b> <b>normal</b> <b>form</b> is rarely encountered. We report upon {{a study of}} forty organizational database $ nine of them contained data violating <b>fourth</b> <b>normal</b> <b>form.</b> Consequently, the need to understand and use <b>fourth</b> <b>normal</b> <b>form</b> {{is more important than}} previously believed...|$|E
40|$|A {{new type}} of dependency, which {{includes}} the well-known functional dependencies as a special case, is defined for relational databases. By using this concept, a new (“fourth”) normal form for relation schemata is defined. This <b>fourth</b> <b>normal</b> <b>form</b> is strictly stronger than Codd’s “im-proved third normal form ” (or “Boyce-Codd normal form”). It is shown that, every relation schema can be decomposed into a family of relation schemata in <b>fourth</b> <b>normal</b> <b>form</b> without loss of information (that is, the original relation {{can be obtained from}} the new relations by taking joins). Key words and phrases: database design, multivalued dependency, functional dependency, <b>fourth</b> <b>normal</b> <b>form,</b> 4 NF, third normal form, 3 NF, Boyce-Codd normal form, normalization, decomposition, relational databas...|$|E
40|$|Two of the {{competing}} {{approaches to the}} logical design of relational databases are the third normal form decomposition approach of Codd and the synthetic approach of Bernstein and others. The synthetic approach seems on the surface to be the more powerful; unfortunately, to avoid serious problems, a nonintuitive constraint (the &quot;uniqueness &quot; of functional dependencies) must be assumed. We demonstrate the <b>fourth</b> <b>normal</b> <b>form</b> approach, which not only can deal with this difficulty, but which is also more powerful than either of the earlier approaches. The input of the new method includes attributes (potential column names), along with semantic information {{in the form of}} functional and multivalued dmendencies: the outDut is a &quot; 8 ood &quot;- (<b>fourth</b> <b>normal</b> <b>form).</b> lorrical- desinn. The new method 1 is semi-automatic, which is especially helpful {{in the case of a}} very large database with many attributes that interrelate in complex ways...|$|E
40|$|We {{consider}} the Birkhoff <b>normal</b> <b>form</b> {{for the water}} wave problem posed in a fluid of infinite depth, with {{the starting point of}} our analysis a version of the Hamiltonian given by V. E. Zakharov. We verify that in the <b>fourth</b> order <b>normal</b> <b>form,</b> the coefficients vanish for all non-generic resonant terms, and we show that the resulting truncated system is completely integrable. In contrast we show that there are resonant fifth order terms with nonvanishing coefficients, answering to the negative the conjecture of A. I. Dyachenko & Zakharov on the integrability of free surface hydrodynamics. We analyse all solutions of the fourth order integrable system. In particular, the bifurcation structures of standing wave and travelling wave solutions are remarkably explicit due to the <b>normal</b> <b>form.</b> 1 Research partially supported by the National Science Foundation under grant # DMS 9208190. 2 Research partially supported by the Lefschetz Center for Dynamical Systems at Brown University. 1. Introdu [...] ...|$|R
5000|$|... #Subtitle level 3: <b>Fourth</b> <b>Normal</b> School of Changsha: 1912-1917 ...|$|R
5000|$|A head <b>normal</b> <b>form</b> is {{not always}} a <b>normal</b> <b>form,</b> because the applied {{arguments}} [...] need not be normal. However, the converse is true: any <b>normal</b> <b>form</b> is also a head <b>normal</b> <b>form.</b> In fact, the <b>normal</b> <b>forms</b> are exactly the head <b>normal</b> <b>forms</b> in which the subterms [...] are themselves <b>normal</b> <b>forms.</b> This gives an inductive syntactic description of <b>normal</b> <b>forms.</b>|$|R
40|$|Abstract. The Nested List Normal Form is {{proposed}} as a syntactic normal form for semantically well-designed database schemata obtained from any arbitrary finite nesting of records and lists. The Nested List Normal Form {{is defined in}} terms of functional and multivalued depen-dencies, independent from any specific data model, and generalises the well-known <b>Fourth</b> <b>Normal</b> <b>Form</b> from relational databases in order to capture more application domains. ...|$|E
40|$|Data {{dependencies}} play {{an important}} role in the design of relational databases. In particular, functional and multivalued dependencies are useful to obtain relation schemes that satisfy the <b>fourth</b> <b>normal</b> <b>form.</b> We study the learnability of the class FMVD of sets of functional and multivalued dependencies within the exact model of learning via queries, and prove that neither equivalence queries alone nor membership queries alone suce to learn the class...|$|E
40|$|Abstract. We {{present an}} {{algorithm}} that decom-poses a database scheme when the dependency set contains functional and multivalued dependencies. The schemes in the resulting decomposition are in <b>fourth</b> <b>normal</b> <b>form</b> {{and have a}} lossless join. Our algorithm does not impose restrictions on the allowed set of dependencies, and it never re-quires the computation of the full closure of the dependency set. Furthermore, the algorithm works in polynomial time for classes of dependencies that properly contain conflict-free dependency sets. 1...|$|E
50|$|An {{arbitrary}} propositional formula {{may have}} a very complicated structure. It is often convenient to work with formulas that have simpler <b>forms,</b> known as <b>normal</b> <b>forms.</b> Some common <b>normal</b> <b>forms</b> include conjunctive <b>normal</b> <b>form</b> and disjunctive <b>normal</b> <b>form.</b> Any propositional formula {{can be reduced to}} its conjunctive or disjunctive <b>normal</b> <b>form.</b>|$|R
50|$|A formula in {{negation}} <b>normal</b> <b>form</b> can be {{put into}} the stronger conjunctive <b>normal</b> <b>form</b> or disjunctive <b>normal</b> <b>form</b> by applying distributivity.|$|R
50|$|Relations are {{classified}} {{based upon the}} types of anomalies to which they're vulnerable. A database that's in the first <b>normal</b> <b>form</b> is vulnerable to all types of anomalies, while a database that's in the domain/key <b>normal</b> <b>form</b> has no modification anomalies. <b>Normal</b> <b>forms</b> are hierarchical in nature. That is, the lowest level is the first <b>normal</b> <b>form,</b> and the database cannot meet the requirements for higher level <b>normal</b> <b>forms</b> without first having met all {{the requirements of the}} lesser <b>normal</b> <b>forms.</b>|$|R
40|$|ABSTRACT: We {{discuss the}} {{relationship}} between normal forms in a relational database and an allowed set of relational operators. We define *projection-join normal form &quot; (PJ/NF), which is the ulti-mate normal rorm when only projection and join are allowed. Aho. Beeri and Ullman made the counterintuitive discovery {{that there is a}} relation schema with a valid decomposition into three of its projec-tions without the decomposition being equivalent to a cascade of decompositions. each into two projections. Because of this possibili-ty. there exist bizarre relation schemata that are in <b>fourth</b> <b>normal</b> <b>form</b> but not in PJ/NF. We also discuss issues associated with allowing the union operator. 1...|$|E
40|$|Abstract. In Database Theory, Multivalued Dependencies are {{the main}} tool to define the <b>Fourth</b> <b>Normal</b> <b>Form</b> and, as such, their {{inference}} problem has been deeply studied; two related notions appearing in that study are a syntactical analog in propositional logic and a restriction that maintains to this logic the same relationship as Functional Dependencies do to Horn logic. We present semantic, lattice-theoretic characterizations of such multivalued dependencies that hold in a given relation, as well as similar results for the related notions just mentioned. Our characterizations explain better some previously known facts by providing a unifying framework that {{is also consistent with}} the studies of Functional Dependencies. ...|$|E
40|$|The View Creation System (VCS) is {{an expert}} system that engages a user in a {{dialogue}} about the information requirements for some application, develops an Entity-Relationship model for the user’s database view, and then converts the E-R model {{to a set of}} <b>Fourth</b> <b>Normal</b> <b>Form</b> relations. This paper describes the knowledge base of VCS. That is, it presents a formal methodology, capable of mechanization as a computer program, for accepting requirements from a user, identifying and resolving inconsistencies, redundancies, and ambiguities, and ultimately producing a normalized relational representation. Key aspects of the methodology are illustrated by applying VCS’s knowledge base to an actual database design task...|$|E
40|$|In {{this paper}} we {{introduce}} {{the class of}} additive <b>normal</b> <b>form</b> games, which is a subset of <b>normal</b> <b>form</b> games. In additive <b>normal</b> <b>form</b> games, the actions of each agent contribute some amount to the final payoff of all the agents. The contributions of the agents {{are assumed to be}} additive. We discuss the necessary and sufficient conditions for a <b>normal</b> <b>form</b> game to be an additive <b>normal</b> <b>form</b> game and show exactly how a <b>normal</b> <b>form</b> game may be converted to our additive representation...|$|R
50|$|It's {{much easier}} to build a {{database}} in domain/key <b>normal</b> <b>form</b> {{than it is to}} convert lesser databases which may contain numerous anomalies. However, successfully building a domain/key <b>normal</b> <b>form</b> database remains a difficult task, even for experienced database programmers. Thus, while the domain/key <b>normal</b> <b>form</b> eliminates the problems found in most databases, it tends to be the most costly <b>normal</b> <b>form</b> to achieve. However, failing to achieve the domain/key <b>normal</b> <b>form</b> may carry long-term, hidden costs due to anomalies which appear in databases adhering only to lower <b>normal</b> <b>forms</b> over time.|$|R
40|$|In logic, {{there are}} various <b>normal</b> <b>forms</b> for formulae; for example, {{disjunctive}} and conjunctive <b>normal</b> <b>form</b> for formulae of propositional logic or prenex <b>normal</b> <b>form</b> for formulae of predicate logic. There are algorithms for ‘reducing’ a given formula to a semantically equivalent formula in <b>normal</b> <b>form.</b> <b>Normal</b> <b>forms</b> are used {{in a variety of}} contexts including proofs of completeness, automated theorem proving, logic programming etc. In this paper, we develop a <b>normal</b> <b>form</b> for unitary Euler diagrams with shading. We give an algorithm for reducing a given Euler diagram to a semantically equivalent diagram in <b>normal</b> <b>form</b> and hence a decision procedure for determining whether two Euler diagrams are semantically equivalent. Potential applications of the <b>normal</b> <b>form</b> include clutter reduction and automated theorem proving in systems based on Euler diagrams...|$|R
40|$|Technical debt is {{a metaphor}} that {{describes}} the long term effects of shortcuts taken in software development activities to achieve near term goals. In this study, we explore a new context of technical debt that relates to database normalization design decisions. We posit that ill normalized databases can have long term ramifications on data quality, performance degradation and maintainability costs over time, just like debts accumulate interest. Conversely, conventional database approaches would suggest normalizing weakly normalized tables, {{this can be a}} costly process in terms of effort and expertise it requires for large software systems. As {{studies have shown that the}} <b>fourth</b> <b>normal</b> <b>form</b> is often regarded as the ideal form in database design, we claim that database normalization debts are likely to be incurred for tables below this form. We refer to normalization debt item as any table in the database below the <b>fourth</b> <b>normal</b> <b>form.</b> We propose a framework for identifying normalization debt. Our framework makes use of association rule mining to discover functional dependencies between attributes in a table, which will help determine the current normal form of that table and identify debt tables. To manage such debts, we propose a trade off analysis method to prioritize tables that are candidate for normalization. The trade off is between the rework cost and the debt effect on the quality of the system as the metaphoric interest. To evaluate our method, we use a case study from Microsoft, AdventureWorks. The results show that our method can reduce the cost and effort of normalization, while improving the database design...|$|E
40|$|A key {{is simple}} if it {{consists}} of a single attribute. It is shown that if a relation schema is in third normal form and every key is simple, then it is in projection-join normal form (sometimes called fifth normal form), the ultimate normal form with respect to projections and joins. Furthermore, it is shown that if a relation schema is in Boyce-Codd normal form and some key is simple, then it is in <b>fourth</b> <b>normal</b> <b>form</b> (but not necessarily projection-join normal form). These results give the database designer simple sufficient conditions, {{defined in terms of}} functional dependencies alone, that guarantee that the schema being designed is automatically in higher normal forms...|$|E
40|$|We {{introduce}} a new normal form, called essential tuple normal form (ETNF), for relations in a relational database where the constraints are given by functional dependencies and join dependencies. ETNF lies strictly between <b>fourth</b> <b>normal</b> <b>form</b> and fifth normal form (5 NF, also known as projection-join normal form). We show that ETNF, although strictly weaker than 5 NF, is exactly as effective as 5 NF in eliminating redundancy of tuples. Our definition of ETNF is semantic, {{in that it is}} defined in terms of tuple redundancy. We give a syntactic characterization of ETNF, which says that a relation schema is in ETNF if and only if it is in Boyce-Codd normal form and some component of every explicitly declared join dependency of the schema is a superkey...|$|E
40|$|In {{this paper}} {{the problem of}} finding a <b>normal</b> <b>form</b> of triangles and plane quadrilaterals up to {{similarity}} is considered. Several <b>normal</b> <b>forms</b> for triangles and a <b>normal</b> <b>form</b> for quadrilaterals of special case are described. <b>Normal</b> <b>forms</b> of simple plane objects such as triangles {{can be used in}} mathematics teaching...|$|R
40|$|<b>Normal</b> <b>forms</b> of Boolean {{functions}} {{allow to}} check whether two given Boolean expressions describe the same Boolean function. The disjunctive <b>normal</b> <b>form</b> (DNF) {{as well as}} the conjunctive <b>normal</b> <b>form</b> (CNF) are widely used. Sometimes an algebraic <b>normal</b> <b>form</b> is taken into account in order to compare or to evaluate given Boolean functions. The basic property of each <b>normal</b> <b>form</b> is the unique representation of the given Boolean function. The aim {{of this paper is to}} study whether there are other <b>normal</b> <b>forms</b> of Boolean functions which allow a more detailed exploration of properties of Boolean Functions. In order to do this we extend the theory of Boolean <b>normal</b> <b>forms</b> in several directions. ...|$|R
50|$|The first {{example is}} also in conjunctive <b>normal</b> <b>form</b> and the last two are in both conjunctive <b>normal</b> <b>form</b> and {{disjunctive}} <b>normal</b> <b>form,</b> but the second example is in neither.|$|R
40|$|AbstractIn this paper, the {{adequacy}} of fifth normal form (5 NF) in relational database design is investigated. It is shown that 5 NF is inadequate {{because it does not}} generalise <b>fourth</b> <b>normal</b> <b>form</b> (4 NF) and because it is equivalent to the very stringent requirement that every attribute is a key, a requirement that is effectively impossible to satisfy in practical database design. By restricting the join dependencies (JDs) in the set of constraints to those that do not have superfluous components, the definition of 5 NF is then changed to a new normal form, called reduced fifth normal form (5 NFR), and it is shown that 5 NFR generalises 4 NF. It is also shown that 5 NFR is a strictly weaker condition than projection-join normal form (PJ/NF), the other normal form that has been proposed for JDs...|$|E
40|$|Includes bibliographical {{references}} (pages 76 - 77) There is {{interest in}} making the relational data model to employ more meaningful concepts in its usage. This project intends to allow the user to retrieve data in data dependency form such that the relationships among attributes are transparent to users of relational databases. The concept is similar to Ullman's universal relation as a user interface. The approach taken in this research to interpret the query is totally different and utilizes Sagiv's membership algorithm. A program "SCHEMER", which is written in FORTRAN 5, is built on RIM (Relational Information Management System) to investigate {{the results of our}} approach. It is shown that a relational database in the <b>fourth</b> <b>normal</b> <b>form</b> can be built with the aid of the "SCHEMER" and the "SCHEMER" can compile access paths for user queries...|$|E
40|$|The {{relationship}} between redundancy elimination and normal forms in relational database design is investigated {{for the case}} where the constraints contain functional dependencies (FDs) and arbitrary join dependencies (JDs). Extending previous work on the {{relationship between}} <b>fourth</b> <b>normal</b> <b>form</b> (4 NF) and redundancy elimination, a general definition of redundancy is proposed which is applicable to any type of relational dependency including arbitrary JDs. It is then shown that redundancy is eliminated if and only if the set of dependencies satisfies a new condition called key-complete normal form (KCNF). KCNF requires that the left-hand side of every FD is a superkey and that for every JD, every attribute in the relation scheme is contained in the union of the components of the JD which are superkeys. It is also shown that KCNF is a strictly weaker condition than projection-join normal form (PJ/NF), the original normal form proposed for JDs. 1 Introduction Although normalisation [11, 1 [...] ...|$|E
40|$|In {{this paper}} we are {{concerned}} with the simplest <b>normal</b> <b>form</b> computation of a family of Hopf-zero vector fields without a first integral. This family of vector fields are the classical <b>normal</b> <b>forms</b> of a larger family of vector fields with Hopf-Zero singularity. Indeed, these are defined such that this family would be a Lie subalgebra for the space of all classical <b>normal</b> <b>form</b> vector fields with Hopf-Zero singularity. The simplest <b>normal</b> <b>forms</b> and simplest orbital <b>normal</b> <b>forms</b> of this family with non-zero quadratic part are computed. We also obtain the simplest parametric <b>normal</b> <b>form</b> of any non-degenerate perturbation of this family within the Lie subalgebra. The symmetry group of the simplest <b>normal</b> <b>forms</b> are also discussed. This is a part of our results in decomposing the <b>normal</b> <b>forms</b> of Hopf-Zero singular systems into systems with a first integral and nonconservative systems...|$|R
2500|$|Hermite <b>normal</b> <b>form</b> {{may also}} be used for solving systems of linear Diophantine equations. However, Hermite <b>normal</b> <b>form</b> does not {{directly}} provide the solutions; to get the solutions from the Hermite <b>normal</b> <b>form,</b> one has to successively solve several linear equations. Nevertheless, Richard Zippel wrote that the Smith <b>normal</b> <b>form</b> [...] "is somewhat more than is actually needed to solve linear diophantine equations. Instead of reducing the equation to diagonal form, we only need to make it triangular, which is called the Hermite <b>normal</b> <b>form.</b> The Hermite <b>normal</b> <b>form</b> is substantially easier to compute than the Smith normal form." ...|$|R
40|$|Abstract. Boolean {{circuits}} of polynomial {{size and}} poly-logarithmic depth are given for computing the Hermite and Smith <b>normal</b> <b>forms</b> of polynomial matrices over finite {{fields and the}} field of rational numbers. The circuits for the Smith <b>normal</b> <b>form</b> computation are probabilistic ones and also determine very efficient sequential algorithms. Furthermore, we give a polynomial-time deterministic sequential algorithm for the Smith <b>normal</b> <b>form</b> over the rationals. The Smith <b>normal</b> <b>form</b> algorithms are applied to the Rational canonical form of matrices over finite fields and the field of rational numbers. Ke ywords: Parallel algorithm, Hermite <b>normal</b> <b>form,</b> Smith <b>normal</b> <b>form,</b> polynomial-time complexity. 1...|$|R
