325|441|Public
500|$|Travel across Canada {{originated}} in the early 19th century when the Hudson's Bay Company and North West Company wanted to transport furs from the east to Fort St. James in the New Caledonia district, British Columbia. Sir George Simpson, governor of the Hudson's Bay Company, employed a surveyor, James Macmillan, to find a route west. James Macmillan used an Iroquois guide [...] "Tête Jaune" [...] (Pierre Bostonais) to help find the most <b>feasible</b> <b>path.</b> Leather was needed at Fort St. James for moccasins and mukluks. The path from Saskatchewan to British Columbia through the Rocky Mountains {{became known as the}} Leather Pass or Leather Track and more commonly the Yellowhead. Tête Jaune or Yellowhead was the moniker for Pierre Bostonais, which referred to his blonde hair. Pierre Bostonais, the founder of the Yellowhead trail, has also been recorded as Pierre Hatsinaton and his nickname Tête Jaune Cache.|$|E
60|$|The trail he took led {{to one of}} {{the scant}} water-courses that issued, half spent, from the canada, to fade out utterly on the hot June plain. It was thickly bordered with willows and alders, that made an arbored and <b>feasible</b> <b>path</b> through the dense woods and undergrowth. He {{continued}} along it as if aimlessly; stopping {{from time to time to}} look at different objects in a dull mechanical fashion, as if rather to prolong his useless hours, than from any curious instinct, and to occasionally dip in the unfrequent pools of water the few crusts of bread he had taken from his pocket. Even this appeared to be suggested more by coincidence of material in the bread and water, than from the promptings of hunger. At last he reached a cup-like hollow in the hills lined with wild clover and thick with resinous odors. Here he crept under a manzanita-bush and disposed himself to sleep. The act showed he was already familiar with the local habits of his class, who used the unfailing dry starlit nights for their wanderings, and spent the hours of glaring sunshine asleep or resting in some wayside shadow.|$|E
50|$|Incomplete {{planners}} do {{not always}} produce a <b>feasible</b> <b>path</b> when one exists. Sometimes incomplete planners do work well in practice.|$|E
40|$|Path-based Statistical Software Testing is {{interested}} in sampling the <b>feasible</b> <b>paths</b> in the control flow graph of the program being tested. As the ratio of <b>feasible</b> <b>paths</b> becomes negligible for large programs, an ML approach is presented to iteratively estimate and exploit the distribution of <b>feasible</b> <b>paths.</b> ...|$|R
40|$|Some Statistical Software Testing {{approaches}} rely on sampling the <b>feasible</b> <b>paths</b> in {{the control}} flow graph of the program; the difficulty comes from the tiny ratio of <b>feasible</b> <b>paths.</b> This paper presents an adaptive sampling mechanism called EXIST for Exploration/eXploitation Inference for Software Testing, able to retrieve distinct <b>feasible</b> <b>paths</b> with high probability. EXIST proceeds by alternatively exploiting and updating a distribution {{on the set of}} program paths. An original representation of paths, accommodating long-range dependencies and data sparsity and based on extended Parikh maps, is proposed. Experimental validation on real-world and artificial problems demonstrates dramatic improvements compared to the state of the art...|$|R
5000|$|... #Caption: An {{example of}} a {{probabilistic}} random map algorithm exploring <b>feasible</b> <b>paths</b> around a number of polygonal obstacles.|$|R
50|$|This rapid {{iteration}} allows {{teams to}} discover a <b>feasible</b> <b>path</b> towards product/market fit, and to continue optimizing and refining the business model after reaching product/market fit.|$|E
5000|$|A*-RRT and A*-RRT*, a {{two-phase}} motion planning {{method that}} uses a graph search algorithm to search for an initial <b>feasible</b> <b>path</b> in a low-dimensional space (not considering the complete state space) in a first phase, avoiding hazardous areas and preferring low-risk routes, which is then used to focus the RRT* search in the continuous high-dimensional space in a second phase ...|$|E
50|$|The robot is thus {{allowed to}} move freely in X−, and cannot go outside X+. To both subpavings, a {{neighbor}} graph is built and paths can be found using algorithms such as Dijkstra or A*. When a path is feasible in X−, it is also feasible in Cfree. When no path exists in X+ from one initial configuration to the goal, we have the guarantee that no <b>feasible</b> <b>path</b> exists in Cfree. As for the grid-based approach, the interval approach is inappropriate for high-dimensional problems, {{due to the fact}} that the number of boxes to be generated grows exponentially with respect to the dimension of configuration space.|$|E
30|$|Finally, Armando Alves Neto, Douglas G. Macharet and Mario F. M. Campos {{present a}} novel {{methodology}} to generate smooth <b>feasible</b> <b>paths</b> for autonomous aerial vehicles in three-dimensional environments {{based on a}} variation of the Spatial Quintic Pythagorean Hodographs curves. <b>Feasible</b> <b>paths</b> should not violate the main kinematic constraints of the vehicle, which is accomplished by connecting waypoints with seventh order Bézier curves. Validation is performed in simulations with real parameters and with simulated flight data of a small autonomous aerial vehicle.|$|R
40|$|We find {{a growth}} path B {{which is not}} feasible, and which grows exponentially. This path B bounds all <b>feasible</b> <b>paths.</b> Using this bound we define a finite measure {{on the set of}} integers, A, and {{consider}} a "weighted" Banach space H of all sequences which are summable with respect to this measure A. This space includes all bounded sequences, and many exponentially growing sequences; in particular, it contains all the <b>feasible</b> growth <b>paths</b> in our economy. Therefore, without loss of generality, we consider the problem of maximizing a welfare function in the space H restricted to the set of all <b>feasible</b> growth <b>paths.</b> For this it would suffice to prove that the set of all <b>feasible</b> <b>paths</b> is compact, and the welfare function is continuous on it in the norm of the space HḢowever, these conditions are not satisfied: the logarithmic utility function is undefined over certain paths, and the closed bounded subset of H which includes all the <b>feasible</b> growth <b>paths,</b> is not closed and therefore not compact. However, we find a closed subset of the space H which contains all <b>feasible</b> <b>paths</b> yielding utility values which exceed a minimal level. We prove that this set is compact and that, when restricted to this set, the welfare function is norm continuous. This set contains an optimum of our problem, thus establishing existence of an optimal growth path with endogenous technical change. The techniques utilized here rely on the use of weighted Lp spaces introduced in Chichilnisky [1], [2] and Chichilnisky and Kalman [3]...|$|R
5000|$|Symbolically {{executing}} all <b>feasible</b> program <b>paths</b> {{does not}} scale to large programs. The number of <b>feasible</b> <b>paths</b> {{in a program}} grows exponentially {{with an increase in}} program size and can even be infinite in the case of programs with unbounded loop iterations. [...] Solutions to the path explosion problem generally use either heuristics for path-finding to increase code coverage, reduce execution time by parallelizing independent paths, or by merging similar paths.|$|R
50|$|The {{conventional}} {{solution is}} first {{to convert the}} path to a trajectory by time parametrization, then to track the trajectory. Path planners are often designed to find any <b>feasible</b> <b>path,</b> with little attention to its suitability for execution. Even if the time optimal parametrization is used, the path may have abrupt changes in direction or maintain little clearance from obstacles, requiring the robot to move slowly. In addition, if the controller is to implement some sort of real-time obstacle avoidance scheme then it {{must be able to}} deviate from the path. Once the robot is off the path, however, the controller has no global Information on how to reach the goal.|$|E
50|$|In June 2009, {{under the}} {{guidance}} of Senior Directors, Iman Zahedi and Samuel Choi, the UCLA chapter established important relationships with the Nicaraguan Ministry of Health, PATH, ASNIC, and UNAN Managua. Along with the preliminary data from the first mission, research into the causes of spina bifida and the native diet led our team to believe that fortification of rice with folic acid is the most <b>feasible</b> <b>path</b> for decreasing the incidence of neural tube defects in Nicaragua. After several meetings between Project Nicaragua at UCLA and Nicaragua’s Ministry of Health, the Nicaraguan government signed a bill mandating nationwide fortification of rice—a step towards better health in which the UCLA chapter of Project Nicaragua have been deemed the catalysts.|$|E
5000|$|Beadell's usual {{method for}} {{building}} roads was {{to carry out}} a solo reconnaissance in his Land Rover, bush-bashing through virgin scrub, referring to a magnetic compass for direction, and the vehicle's odometer for distance. When he had determined a <b>feasible</b> <b>path</b> he would return to camp and guide a bulldozer by standing on top of his vehicle while flashing reflected sunlight from a mirror towards the driver. Beadell joked that the bulldozer driver followed the flashing mirror for eight years and never caught it. If large sandhills intervened, flares fired from a pistol were substituted. Some reconnaissance forays took many days, hundreds of kilometres, and usually several punctured tyres. He used a theodolite to observe stars, the sun and the moon to accurately calculate his position which he termed an [...] "astrofix".|$|E
40|$|Multi-constrained path (MCP) selection, {{in which}} the key {{objective}} is to search for <b>feasible</b> <b>paths</b> satisfying multiple routing constraints simultaneously, {{is known to be}} an NP-Complete problem. Multi-constrained path optimization (MCPO) is different from MCP mainly in that, the <b>feasible</b> <b>paths</b> selected should also be optimal with regard to an optimization metric, which makes path computation in MCPO even harder. We propose a fully distributed multi-constrained path optimization routing (MPOR) protocol that solves the general ¤-constrained path selection and routing optimization problems. MPOR computes paths using distance vectors exchanged only amongst neighboring nodes and does not require the maintenance of global network state about th...|$|R
5000|$|... "Whether 1.5 or 2°C, {{we should}} put more efforts into {{identifying}} <b>feasible</b> <b>paths</b> and processes to get us there. Otherwise, we are just adding more targets to our already ambitious agendas of sustainable development, eradication of poverty, proliferation of health and education, etc." [...] (2015) ...|$|R
40|$|An {{extended}} depth-first-search (EDFS) {{algorithm is}} proposed to solve the multi-constrained path (MCP) problem in quality-of-service (QoS) routing, which is NP-Complete {{when the number of}} independent routing constraints is more than one. EDFS solves the general k−constrained MCP problem with pseudo-polynomial time complexity O(m 2 · EN + N 2), where E and N are the number of links and nodes of a graph respectively, and m is the maximum number of <b>feasible</b> <b>paths</b> maintained for each destination. This is achieved by deducing potential <b>feasible</b> <b>paths</b> from knowledge of previous explorations, without re-exploring finished nodes and their descendants in the process of the DFS search. One unique property of EDFS is that the tighter the constraints are, the better the performance it can achieve, w. r. t. both time complexity and routing success ratio. Analysis and extensive simulation are conducted to study the performance of EDFS in finding <b>feasible</b> <b>paths</b> that satisfy multiple QoS constraints. The main results show that EDFS is insensitive to the number of constraints, and outperforms other popular MCP algorithms when the routing constraints are tight or moderate. The performance of EDFS is comparable with that of the other algorithms when the constraints are loose. 1...|$|R
5000|$|Travel across Canada {{originated}} in the early 19th century when the Hudson's Bay Company and North West Company wanted to transport furs from the east to Fort St. James in the New Caledonia district, British Columbia. Sir George Simpson, governor of the Hudson's Bay Company, employed a surveyor, James Macmillan, to find a route west. James Macmillan used an Iroquois guide [...] "Tête Jaune" [...] (Pierre Bostonais) to help find the most <b>feasible</b> <b>path.</b> Leather was needed at Fort St. James for moccasins and mukluks. The path from Saskatchewan to British Columbia through the Rocky Mountains {{became known as the}} Leather Pass or Leather Track and more commonly the Yellowhead. Tête Jaune or Yellowhead was the moniker for Pierre Bostonais, which referred to his blonde hair. Pierre Bostonais, the founder of the Yellowhead trail, has also been recorded as Pierre Hatsinaton and his nickname Tête Jaune Cache.The beginnings of this overland route {{can be found in the}} 19th century travel along the Carlton Trail, a Red River cart dirt trail which connected Fort Gary, Fort Ellice, Fort Carlton, Fort Battleford, and Fort Pitt through a northerly route. In 1876, Battleford became the capital of the North-West Territories. This area at the junction of the Battle River and the North Saskatchewan River was home to Cole's Post as early as 1780. A Hudson's Bay Company store and trading post, the North-West Mounted Police barracks and Government House were all established in 1876.|$|E
50|$|In late 2004, Aronow and {{his colleagues}} met Brown and the indie music radio group. They each decided that they were working towards a mutual goal of {{bringing}} community radio to the Phoenix area and decided to combine their efforts. Aronow's team became part of AzCMF and together they began building support for a community radio station in Phoenix. From 2005 to 2007, AzCMF's team educated themselves regarding the process of obtaining an FCC license and determined the most <b>feasible</b> <b>path</b> to launching a new station in the Phoenix area was {{to apply for a}} vacant FM frequency. Before they could do so, they had to find out if any FM frequencies were still available for use in Phoenix, and then, if so, had to wait for the FCC to accept new applications. In the meantime, the group decided to engage in a project to determine if there really was a need for a community radio station in the Phoenix area. For 10 weeks in the spring of 2007, AzCMF entered into a brokered time agreement with commercial radio station KAZG (1440 AM), which covered most of the Phoenix area. During those 10 weeks, the group aired the national news program Democracy Now! and supported the airtime by selling underwriting spots to local businesses and provided non-profits with public service announcements. The response to this test run was positive and the team at AzCMF realized that a need really did exist for a community radio station in Phoenix.|$|E
5000|$|After {{waiting for}} almost another month for an exit visa, and then spending, at least, two more weeks {{breaking}} the horses they had purchased {{for the return}} trip, Smith's party left the mission communities of California in mid-February 1827. The party headed out {{the way it had}} come, but once outside the Mexican settlements, Smith convinced himself he had complied with Echeandía's order to leave by the same route he had entered, and the party veered north crossing over into the Central Valley. The party ultimately made its way to the Kings River on February 28 and began trapping beaver. The party kept working its way north, encountering hostile Maidus. By early May 1827, Smith and his men had traveled 350 mi north, looking for the Buenaventura River, but found no break in the wall of the Sierra Nevada range through which it could have flowed from the Rocky Mountains. On December 16, 1826, Smith had written {{in a letter to the}} United State ambassador plenipotentiary to Mexico his plans to [...] "follow up on of the largest Riv(ers) that emptied into the (San Francisco) Bay cross the mon (mountains) at its head and from thence to our deposit on the Great Salt Lake" [...] and appeared to be following that plan. They followed the Cosumnes River (the northernmost tributary of the San Joaquin River) upstream, but veered off it to the north and crossed over to the American River, a tributary of the Sacramento that flowed into the Bay. They tried traveling up the canyon of the South Fork of the American to cross the Sierra Nevada, but had to return because the snow was too deep. Unable to find a <b>feasible</b> <b>path</b> for the well-laden party to cross, and faced with hostile indigenes, he was forced into a decision: since they did not have time to travel north to the Columbia and make it in time to the 1827 rendezvous, they would backtrack to the Stanislaus River and re-establish a camp there. Jedediah would take two men and some extra horses to get to the rendezvous as quickly as he could and return to his party with more men later in the year and the group would continue on to the Columbia.|$|E
40|$|This paper aims {{to present}} a multiobjective optimum path {{algorithm}} for passenger pretrip planning in multimodal transportation networks. The process of identifying the <b>feasible</b> <b>paths</b> accounts for the delays caused by the different modes and the terminal switching. This algorithm is designed to constitute a component of an integrated web-based information gateway, aiming to provide information to travelers through the Internet for intercity trips using public transport The algorithm identifies <b>feasible</b> <b>paths</b> according to compatibility of various modes, intermodal stations, and users' preferences. The multiobjective linear programming model that corresponds to this process is presented to prove {{the efficiency of the}} algorithm. An implementation for the proposed algorithm is designed, coded, and computationally tested in realistic-size networks. The computational complexity of the algorithm is proven to be polynomial...|$|R
40|$|Probabilistic roadmaps (PRMs) are a sampling-based {{approach}} to motion-planning that encodes <b>feasible</b> <b>paths</b> through the environment using a graph created from {{a subset of}} valid positions. Prior {{research has shown that}} PRMs can be augmented with useful information to model interesting scenarios related to multi-agent interaction and coordination. © 2012 IEEE...|$|R
40|$|The methods {{whereby the}} {{intermediate}} results were obtained are outlined, and {{the evaluation of}} the <b>feasible</b> <b>paths</b> from liquid fossil fuel sources to generated electricity is presented. The segments from which these paths were built are the results from the fuel upgrading schemes, on-site treatments, and exhaust gas treatments detailed in the subsequent volumes. The salient cost and quality parameters are included...|$|R
40|$|Abstract—Over {{the past}} several years, {{there has been a}} {{considerable}} amount of research within the field of Quality of Service (QoS) support for distributed multimedia systems. One of the key issues in providing end-to-end QoS guarantees in packet networks is determining a <b>feasible</b> <b>path</b> that satisfies a number of QoS constraints. The problem of finding a <b>feasible</b> <b>path</b> is NP-Complete if number of constraints is more than two and cannot be exactly solved in polynomial time. We proposed <b>Feasible</b> <b>Path</b> Selection Algorithm (FPSA) that addresses issues with pertain to finding a <b>feasible</b> <b>path</b> subject to delay and cost constraints and it offers higher success rate in finding feasible paths. Keywords—feasible path, multiple constraints, path selection, QoS routing I...|$|E
40|$|Abstract—We {{study the}} problem of {{supporting}} VoIP calls in a wireless mesh network. Specifically, we propose solutions for call admission control (CAC) and route selection for VoIP calls. Call admission decisions must evaluate how {{the capacity of the}} mesh network is utilized by the existing calls. We address this issue via a measurement-based modeling effort to model mutual interference between wireless links. The modeling approach evaluates whether capacity constraints (or, required QoS metrics) will be satisfied if a new call is admitted with a given route. Evaluations with a 6 -node 802. 11 a testbed demonstrate excellent accuracy of the model and thus also the CAC performance. We address the issue of route selection by also using a modeling approach that considers models of transmission and interference ranges to develop a polynomial-time algorithm to search for feasible routes. This problem takes exponential time for wireless networks without such modeling. In addition to studying feasibility, we study several routing metrics such as shortest <b>feasible</b> <b>path</b> and maximum residual <b>feasible</b> <b>path.</b> Finally, we develop a new method for routing using call statistics that uses prior calling patterns to avoid potentially critical links. We evaluate the performance of these route selection techniques via extensive simulations and demonstrate the superiority of using max residual <b>feasible</b> <b>path</b> over simply shortest <b>feasible</b> <b>path,</b> and routing using call statistics over max residual <b>feasible</b> <b>path.</b> I...|$|E
30|$|The ORPHSN {{algorithm}} follows up {{the calculation}} into a routing table. In every call {{request from the}} source to the destination, the G(V,E) will be constructed {{in order to find}} the <b>feasible</b> <b>path.</b> The ORPHSN algorithm considers a <b>feasible</b> <b>path</b> as the path that satisfies bounded requirements for each cost metric. Here, the optimized weight path from the source to the destination in the graph made by GTR corresponds to the optimized cost path in the network graph.|$|E
5000|$|Furthermore, {{because the}} first return {{statement}} is executed unconditionally, no <b>feasible</b> execution <b>path</b> reaches the second assignment to [...] Thus, the assignment is unreachable and can be removed.If the procedure had a more complex control flow, such as a label after the return statement and a [...] elsewhere in the procedure, then a <b>feasible</b> execution <b>path</b> might exist to the assignment to [...]|$|R
40|$|The {{problem of}} {{generating}} smooth paths in a bounded airspace having arbitrarily shaped flight-restricted zones and obstacles is considered. Paths derived from four-parameter logistic curves are investigated as a prospective solution. Flight-restricted areas and obstacles {{are represented by}} convex polygons, and simple analytic conditions are derived for avoiding them. A design parameter space approach is used to generate multiple <b>feasible</b> <b>paths</b> between a given set of waypoints with zero end curvature. The proposed methodology offers continuous upper curvature bounded paths, which are desirable for the bank angle limitation of unmanned aerial vehicles. A comparison with existing path-planning methods highlights the advantages in terms of inherent curvature continuity as well as analytic conditions for obstacle avoidance and confinement. Scenarios with multiple obstacles and waypoints are considered, and the solutions are validated on a realistic six-degree-of-freedom model of the Aerosonde unmanned aerial vehicle. The methodology offers a simple and analytic path-planning methodology for generating easily computable multiple <b>feasible</b> <b>paths</b> satisfying the noted constraints...|$|R
40|$|Abstract: We {{present a}} {{heuristic}} {{approach to the}} geometric motion-planning problem with the aim to quickly solve intuitively simple problems. It {{is based on a}} divide-and-conquer path search strategy, which makes inquiries about <b>feasible</b> <b>paths,</b> an efficient collision detection scheme is developed that handles translations and rotations of polyhedral to compute all times of collision. The whole algorithm can be easily implemented and tested...|$|R
40|$|Crowd {{simulation}} {{is becoming}} indispensable in computer games and animations. Several approaches {{to this problem}} have succeeded in generating flocking behaviors with virtual forces but it remains difficult to manipulate the collective behaviors of a crowd to respect certain desired shape. In this paper, we propose a crowd simulation system that can generate a <b>feasible</b> <b>path</b> taking the crowd to the goal while maintaining a user-specified shape as much as possible. The system consists of two key components: a path planner that can search for a <b>feasible</b> <b>path</b> for a region of flexible shape and a local motion controller based on three classes of fuzzy rules for generating desired agent behaviors. We will demonstrate the implemented system with severa...|$|E
40|$|Autonomous robots {{need to be}} {{recharged}} and exchange information with the host through docking in the long-distance tasks. Therefore, <b>feasible</b> <b>path</b> is required in the docking process to guide the robot and adjust its pose. However, when there are unknown obstacles in the work area, it becomes difficult to determine the <b>feasible</b> <b>path</b> for docking. This paper presents a reactive path planning approach named Dubins-APF (DAPF) to solve the path planning problem for docking in unknown environment with obstacles. In this proposed approach the Dubins curves are combined with the designed obstacle avoidance potential field to plan the <b>feasible</b> <b>path.</b> Firstly, an initial path is planned and followed according to the configurations of the robot and the docking station. Then when the followed path is evaluated to be infeasible, the intermediate configuration is calculated {{as well as the}} replanned path based on the obstacle avoidance potential field. The robot will be navigated to the docking station with proper pose eventually via the DAPF approach. The proposed DAPF approach is efficient and does not require the prior knowledge about the environment. Simulation results are given to validate the effectiveness and feasibility of the proposed approach...|$|E
40|$|Abstract — Finding a <b>feasible</b> <b>path</b> {{subject to}} {{multiple}} constraints {{in a network}} is an NP-complete problem and has been extensively studied. Many proposed source routing algorithms tackle this problem by transforming it into the shortest path selection problem, which is P-complete, with an integrated cost function that maps the multi-constraints of each link into a single cost. However, how to select an appropriate cost function {{is an important issue}} that has rarely been addressed in literature. In this paper, we provide a theoretical framework for picking a cost function that can improve the performance of source routing in terms of complexity, convergence, and probability of finding a <b>feasible</b> <b>path.</b> Index Terms — Multiple additively constrained QoS routing, cost function, NP-complete...|$|E
40|$|Some {{economic}} models {{like those}} of endogenous growth motivate the analysis of a class of recursive models sharing the property that the return function is not bounded along <b>feasible</b> <b>paths.</b> We consider a strategy of proof which allows to deal with many unbounded recursive models exploiting bounds to the rates of growth {{rather than to the}} levels. Dynamic programming, Unbounded returns, Non additive objective. ...|$|R
40|$|Abstract. Motivated by Structural Statistical Software Testing (SSST), {{this paper}} is {{interested}} in sampling the <b>feasible</b> execution <b>paths</b> in the control flow graph of the program being tested. For some complex programs, the fraction of <b>feasible</b> <b>paths</b> becomes tiny, ranging in [10 − 10, 10 − 5]. When relying on the uniform sampling of the program paths, SSST is thus hindered by the non-Markovian nature of the “feasible path ” concept, due to the long-range dependencies between the program nodes. A divide and generate approach relying on an extended Parikh Map representation is proposed to address this limitation; experimental validation on real-world and artificial problems demonstrates gains of orders of magnitude compared {{to the state of}} the art. ...|$|R
30|$|As of {{the widest}} {{shortest}} path (WSP) algorithm using Dijkstra algorithm in the unicast routing algorithm, the selection rule that decides which particular {{path from the}} set of <b>feasible</b> <b>paths</b> is to be picked is rather simplified. Also, the WSP algorithm used in multicast routing algorithm often causes various sorts of resource waste phenomena such as alternate path blocking (an extensively utilized alternate path of a session starves another one).|$|R
