10|6|Public
5000|$|In which case, the {{new term}} is some {{combination}} of any two previous terms. m is usually a power of 2 (m = 2M), often 232 or 264. The [...] operator denotes a general binary operation. This may be either addition, subtraction, multiplication, or the bitwise arithmetic <b>exclusive-or</b> <b>operator</b> (XOR). The theory {{of this type of}} generator is rather complex, and it may not be sufficient simply to choose random values for j and k. These generators also tend to be very sensitive to initialisation.|$|E
5000|$|The {{original}} Princeton implementation used {{punched cards}} and the EBCDIC character set. To allow INTERCAL {{to run on}} computers using ASCII, substitutions for two characters had to be made: $ substituted for ¢ as the mingle operator, [...] "representing the increasing cost of software in relation to hardware", and ? was substituted for ⊻ as the unary <b>exclusive-or</b> <b>operator</b> to [...] "correctly express the average person's reaction on first encountering exclusive-or". In recent versions of C-INTERCAL, the older operators are supported as alternatives; INTERCAL programs may now be encoded in ASCII, Latin-1, or UTF-8.|$|E
3000|$|... where A and B {{represent}} the extracted QB codes of the MIDI and input humming data, respectively. ⊗ means the Boolean <b>exclusive-OR</b> <b>operator</b> between two QB codes. N {{is the total}} number of bits of the QB code for the MIDI or input humming data [13, 17].|$|E
5000|$|... {{resemble}} the C bitwise <b>exclusive-or</b> <b>operators,</b> but {{are in fact}} the bc integer exponentiation operators.|$|R
40|$|A {{complete}} {{generalization of}} the Vose Genetic Algorithm model from the binary to higher cardinality case is provided. Boolean AND and <b>EXCLUSIVE-OR</b> <b>operators</b> {{are replaced by}} multiplication and addition over rings of integers. Walsh matrices are generalized with finite Fourier transforms for higher cardinality usage. Comparison of results to the binary case are provided. 1. Introduction In [13], Vose presented an infinite-sized population model for simple binary Genetic Algorithms (GAs) that gives their exact expected behavior over time. Similar models were provided later by T. Davis [5] and Vose and Liepins [17]. Nix and Vose [9] extended this model to the finite population case. Vose has provided important generalizations and obtained significant further results [14, 15, 16]. Working with colleagues he has also considered several special cases and related issues [7, 18, 19]. Others have contributed to knowledge about the Vose family of GA models, including Koehler [8], Aytug and Koehler [...] ...|$|R
40|$|Type-flaw {{attacks and}} multi-protocol attacks on {{security}} protocols have been frequently {{reported in the}} literature. Heather et al. and Guttman et al. have proven that these could be prevented by tagging encrypted components with distinct constants in a standard protocol model with free message algebra and perfect encryption. However, most "real-world" protocols such as SSL 3. 0 are designed with the <b>Exclusive-OR</b> (XOR) <b>operator</b> that possesses algebraic properties, breaking the free algebra assumption. These algebraic properties induce equational theories {{that need to be}} considered when analyzing protocols that use the operator. This is the problem we consider in this paper: We prove that, under certain assumptions, tagging encrypted components still prevents type-flaw and multi-protocol attacks even {{in the presence of the}} XOR operator and its algebraic properties. Comment: 37 pages plus 14 pages in the Appendi...|$|R
40|$|The {{field of}} {{lossless}} image compression studies {{the various ways}} to represent image data in the most compact and efficient manner possible that also allows the image to be reproduced without any loss. One of the most efficient strategies used in lossless compression is to introduce entropy reduction through decorrelation. This study focuses on using the exclusive-or logic operator in a decorrelation filter as the preprocessing phase of lossless image compression of continuous-tone images. The exclusive-or logic operator is simply and reversibly applied to continuous-tone images {{for the purpose of}} extracting differences between neighboring pixels. Implementation of the <b>exclusive-or</b> <b>operator</b> also does not introduce data expansion. Traditional as well as innovative prediction methods are included for the creation of inputs for the exclusive-or logic based decorrelation filter. The results of the filter are then encoded by a variation of the Lempel-Ziv-Welch dictionary coder. Dictionary coding is selected for the coding phase of the algorithm because it does not require the storage of code tables or probabilities and because it is lower in complexity than other popular options such as Huffman or Arithmetic coding. The first modification of the Lempel-Ziv-Welch dictionary coder is that image data can be read in a sequence that is linear, 2 -dimensional, or an adaptive combination of both. The second modification of the dictionary coder is that the coder can instead include multiple, dynamically chosen dictionaries. Experiments indicate that the <b>exclusive-or</b> <b>operator</b> based decorrelation filter when combined with a modified Lempel-Ziv-Welch dictionary coder provides compression comparable to algorithms that represent the current standard in lossless compression. The proposed algorithm provides compression performance that is below the Context-Based, Adaptive, Lossless Image Compression (CALIC) algorithm by 23 %, below the Low Complexity Lossless Compression for Images (LOCO-I) algorithm by 19 %, and below the Portable Network Graphics implementation of the Deflate algorithm by 7 %, but above the Zip implementation of the Deflate algorithm by 24 %. The proposed algorithm uses the <b>exclusive-or</b> <b>operator</b> in the modeling phase and uses modified Lempel-Ziv-Welch dictionary coding in the coding phase to form a low complexity, reversible, and dynamic method of lossless image compression...|$|E
40|$|This paper {{presents}} functional composition (FC) as a {{new paradigm}} for combinational logic synthesis. FC uses a bottom-up approach to synthesize Boolean functions, allowing to know the costs of intermediate sub-functions and to explore {{a larger number of}} different candidate combinations. These are advantages when compared to top-down nature of functional decomposition. FC presents great flexibility to implement algorithms with optimal or suboptimal results for different applications. Examples include exact factoring, factoring considering also the <b>exclusive-OR</b> <b>operator,</b> synthesis considering only majority and inverter functions. The proposed strategy presents good results for synthesis of Boolean functions targeting very different technologies...|$|E
40|$|AbstractThe {{first step}} in the {{verification}} of cryptographic protocols is to decide the intruder deduction problem, that is the vulnerability to a so-called passive attacker. We extend the Dolev-Yao model in order to model this problem in presence of the equational theory of a commutative encryption operator which distributes over the <b>exclusive-or</b> <b>operator.</b> The interaction between the commutative distributive law of the encryption and exclusive-or offers more possibilities to decrypt an encrypted message than in the non-commutative case, which imply a more careful analysis of the proof system. We prove decidability of the intruder deduction problem for a commutative encryption which distributes over exclusive-or with a DOUBLE-EXP-TIME procedure. And we obtain that this problem is EXPSPACE-hard in the binary case...|$|E
40|$|Many realworld {{optimization}} {{problems are}} dynamic optimization problems (DOPs), where changes may occur over time regarding the objective function, decision variable, and constraints, etc. DOPs raise big challenges to traditional optimization methods {{as well as}} evolutionary algorithms (EAs). The last decade has witnessed increasing research efforts on handling dynamic optimization problems using EAs and other metaheuristics, {{and a variety of}} methods have been reported across a broad range of application backgrounds. In order to study the performance of EAs in dynamic environments, one important task is to develop proper dynamic benchmark problems. Over the years, researchers have applied a number of dynamic test problems to compare the performance of EAs in dynamic environments, e. g., the “moving peaks ” benchmark (MPB) proposed by Branke [1], the DF 1 generator introduced by Morrison and De Jong [7], the singleand multi-objective dynamic test problem generator by dynamically combining different objective functions of exiting stationary multi-objective benchmark problems suggested by Jin and Sendhoff [2], Yang and Yao’s <b>exclusive-or</b> (XOR) <b>operator</b> [11, 12, 13], Kang’s dynamic traveling salesman problem (DTSP) [3] and dynamic multi knapsack problem (DKP), etc...|$|R
40|$|Evolutionary algorithms(EAs) {{have been}} widely applied to solve {{stationary}} optimization problems. However, many real-world applications are actually dynamic. In order to study the performance of EAs in dynamic environments, one important task is to develop proper dynamic benchmark problems. Over the years, researchers have applied a number of dynamic test problems to compare the performance of EAs in dynamic environments, e. g., the “moving peaks ” benchmark (MPB) proposed by Branke [1], the DF 1 generator introduced by Morrison and De Jong [6], the singleand multi-objective dynamic test problem generator by dynamically combining different objective functions of exiting stationary multi-objective benchmark problems suggested by Jin and Sendhoff [2], Yang and Yao’s <b>exclusive-or</b> (XOR) <b>operator</b> [10, 11, 12], Kang’s dynamic traveling salesman problem (DTSP) [3] and dynamic multi knapsack problem (DKP), etc. Though a number of DOP generators exist in the literature, there is no unified approach of constructing dynamic problems across the binary space, real space and combinatorial space so far. This report uses the generalized dynamic benchmark generator (GDBG) proposed in [4], which construct dynamic environments for all the three solution spaces. Especially, in the rea...|$|R
40|$|Use of {{encryption}} algorithms in {{message authentication}} {{is replaced by}} secure hash functions which are often faster than encryption algorithms. Tsudik [14] has proposed three methods on message authentication which are only based on one-way hash functions and use some keys to make them secure. In this paper, we give a set of practical methods, each of which uses a fast collision free hash function (such as MD 5) and provides secure message authentication. The idea of the proposed methods is almost {{similar to that of}} Tsudik's, but we are able to reduce the key length eight times compared to the Tsudik's constructions, while maintaining the same security. In our methods, the secret key is added using <b>exclusive-or</b> or assign <b>operators</b> (instead of concatenation) to make them faster. We also have proved that our methods belong to the Secure Keyed One-Way Hash Function (SKOWHF) group, if the underlying hash function is secure. 1 Introduction In today's communication, existence of a fast method [...] ...|$|R
40|$|Abstract. The {{first step}} in the {{verification}} of cryptographic protocols is to decide the intruder deduction problem, that is the vulnerability to a passive attacker. We extend the Dolev-Yao model in order to model this problem in presence of the equational theory of a commutative encryption operator which distributes over the <b>exclusive-or</b> <b>operator.</b> These operators are frequently used in cryptographic protocols. For in-stance the well-known RSA encryption is a commutative encryption, and the exclusive-or is used in several cryptographic protocols. The interac-tion between the commutative distributive law of the encryption and exclusive-or offers more possibilities to decrypt an encrypted message than in the non-commutative case. We prove decidability of the intruder deduction problem for a commutative encryption which distributes over exclusive-or with a DOUBLE-EXP-TIME procedure. ...|$|E
40|$|The {{algorithm}} {{for generating}} Sobol ′ sequences is clearly explained in [2]. Here we give a brief {{outline of the}} details. To generate the jth component of the points in a Sobol ′ sequence, we need to choose a primitive polynomial of some degree sj in the field Z 2, xsj + a 1,j x sj− 1 + a 2,j xsj− 2 + · · ·+ asj− 1,j x+ 1, (1) where the coefficients a 1,j, a 2,j, [...] ., asj− 1,j are either 0 or 1. We define a sequence of positive integers {m 1,j,m 2,j, [...] . } by the recurrence relation mk,j: = 2 a 1,jmk− 1,j ⊕ 22 a 2,j mk− 2,j ⊕ · · · ⊕ 2 sj− 1 asj− 1,jmk−sj+ 1,j (2) ⊕ 2 sjmk−sj,j ⊕mk−sj,j, where ⊕ is the bit-by-bit <b>exclusive-or</b> <b>operator.</b> The initial values m 1,j,m 2,j, [...] .,msj,j can be chosen freely provided that each mk,j, 1 ≤ k ≤ sj, is odd and less than 2 k. The so-called direction numbers {v 1,j, v 2,j, [...] . } are defined by vk,j:= mk,...|$|E
40|$|AbstractCryptographic {{protocols}} {{are small}} programs which involve {{a high level}} of concurrency and which are difficult to analyze by hand. The most successful methods to verify such protocols are based on rewriting techniques and automated deduction in order to implement or mimic the process calculus describing the execution of a protocol. We are interested in the intruder deduction problem, that is vulnerability to passive attacks in presence of equational theories which model the protocol specification and properties of the cryptographic operators. In the present paper, we consider the case where the encryption distributes over the operator of an Abelian group or over an <b>exclusive-or</b> <b>operator.</b> We prove decidability of the intruder deduction problem in both cases. We obtain a PTIME decision procedure in a restricted case, the so-called binary case. These decision procedures are based on a careful analysis of the proof system modeling the deductive power of the intruder, taking into account the algebraic properties of the equational theories under consideration. The analysis of the deduction rules interacting with the equational theory relies on the manipulation of Z-modules in the general case, and on results from prefix rewriting in the binary case...|$|E
40|$|Variable {{precision}} {{logic is}} concerned with problems of reasoning with incomplete information and under time constraints. It offers mechanisms for handling trade-offs between the precision of inferences and the computational efficiency of deriving them. Of the two aspects of precision, the specificity of conclusions and the certainty of belief in them, we address here primarily the latter, and employ censored production rules as an underlying representational and computational mechanism. Such rules are created by augmenting ordinary production rules with an exception condition and are written in the form if A then D unless C, where C is the exception condition. From a control viewpoint, censored production rules are intended for situations in which the implication A {arrow} B holds frequently and the assertion C holds rarely. Systems using censored production rules are free to ignore the exception conditions, when time is a premium. Given more time, the exception conditions are examined, lending credibility to initial, high-speed answers, or changing them. Such logical systems therefore exhibit variable certainty of conclusions, reflecting variable investments of computational resources in conducting reasoning. From a logical viewpoint, the unless operator between B and C acts as the <b>exclusive-or</b> <b>operator.</b> From an expository viewpoint, the if A then B part of the censored production rule expresses an important information (e. g., a causal relationship), while the unless C part acts only as a switch that changes the polarity of B to ??hen C holds. Expositive properties are captured quantitatively by augmenting censored rules with two parameters that indicate the certainty of the implication if A then B. Parameter 6 is the certainty when the truth value C is unknown, and 7 is the certainty when C {{is known to be}} false...|$|E

