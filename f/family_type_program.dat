0|8343|Public
50|$|The {{station was}} founded August 16, 1982 as WTGL-TV by Good Life Broadcasting (WTGL stands for The Good Life). The station was {{initially}} {{a blend of}} <b>family</b> <b>type</b> general entertainment <b>programming</b> such as classic cartoons, westerns, classic sitcoms and old movies, as well as Christian programming.|$|R
40|$|We {{present a}} study of 3 - to 8 -year-old {{children}} in various <b>family</b> <b>types.</b> <b>Family</b> <b>type</b> influenced some outcomes, although many measures were unrelated to <b>family</b> <b>type.</b> Additionally, some relationships between maternal attitudes about gender-related behavior differed between boys and girls, and in different family configurations...|$|R
40|$|This study {{investigated}} the difference in stress levels of stress factors according to the structure or <b>type</b> of <b>family.</b> The relatedness of the ranking of stress factors within and across three <b>family</b> <b>types</b> {{and the relationship between}} level of stress and number of years in current <b>family</b> <b>type</b> were also examined. Important aspects of this study were using three <b>family</b> <b>types,</b> using <b>families</b> seeking counseling as the subjects, and investigating numerous stress factors across <b>family</b> <b>types.</b> These research techniques avoided the limitations of previous research which investigated only one <b>family</b> <b>type,</b> thus isolating special stress issues for a certain <b>family</b> <b>type</b> where those special issues actually might not differentiate among <b>family</b> <b>types.</b> Also, considering numerous stress factors at one time, rather than only a few factors, indicated relative levels of stress as well as absolute stresses that families are likely to experience. Targeting families who had sought counseling should give counselors a more realistic view of clients and their problems...|$|R
25|$|For {{the smaller}} <b>Type</b> B <b>programs</b> {{which have been}} {{identified}} as high-risk, the auditor has two options: either audit half of all high-risk <b>Type</b> B <b>programs,</b> or audit one <b>Type</b> B high-risk <b>program</b> for every low-risk <b>Type</b> A <b>program.</b> <b>Type</b> B <b>programs</b> which have a low risk of not complying are not required to be audited.|$|R
40|$|Type {{classes and}} <b>type</b> <b>families</b> are key {{ingredients}} in Haskell <b>programming.</b> <b>Type</b> classes {{were introduced to}} deal with ad-hoc polymorphism, although {{with the introduction of}} functional dependencies, their use expanded to type-level <b>programming.</b> <b>Type</b> <b>families</b> also allow encoding type-level functions, now as rewrite rules. This paper looks at the interplay of type classes and <b>type</b> <b>families,</b> and how to deal with shortcomings in both of them. Furthermore, we show how to use families to simulate classes at the type level. However, <b>type</b> <b>families</b> alone are not enough for simulating a central feature of type classes: elaboration, that is, generating code from the derivation of a rewriting. We look at ways to solve this problem in current Haskell, and propose an extension to allow elaboration during the rewriting phase...|$|R
40|$|Abstract. We give an {{overview}} of Agda, {{the latest in a}} series of dependently <b>typed</b> <b>programming</b> languages developed in Gothenburg. Agda is based on Martin-Löf’s intuitionistic type theory but extends it with numerous programming language features. It supports a wide range of inductive data <b>types,</b> including inductive <b>families</b> and inductive-recursive <b>types,</b> with associated flexible pattern-matching. Unlike other proof assistants, Agda is not tactic-based. Instead it has an Emacs-based interface which allows programming by gradual refinement of incomplete type-correct terms. ...|$|R
40|$|Haskell programmers {{have been}} experimenting with {{dependent}} types {{for at least a}} decade, using clever encodings that push the limits of the Haskell type system. However, the cleverness of these encodings is also their main drawback. Although the ideas are inspired by dependently <b>typed</b> <b>programs,</b> the code looks significantly different. As a result, GHC implementors have responded with extensions to Haskell’s type system, such as GADTs, <b>type</b> <b>families,</b> and datatype promotion. However, there remains a significant difference between programming in Haskell and in full-spectrum dependently typed languages. Haskell enforces a phase separation between runtime values and compile-time types. Therefore, singleton types are necessary to express the dependency between values and types. These singleton types introduce overhead and redundancy for the programmer. This paper presents the singletons library, which generates the boilerplate code necessary for dependently <b>typed</b> <b>programming</b> using GHC. To compare with full-spectrum languages, we present an extended example based on an Agda interface for safe database access. The paper concludes with a detailed discussion on the current capabilities of GHC for dependently <b>typed</b> <b>programming</b> and suggestions for future extensions to better support this style of programming...|$|R
40|$|<b>Family</b> <b>type</b> {{patterns}} {{have dramatically}} {{changed over the}} last several decades in the U. S and have {{had a profound impact on}} adolescent's life trajectories. The present study examines the relationship between <b>family</b> <b>type</b> (being raised in a single parent household), race/ethnicity, Socio-economic status (SES), gender impacts the mental health of adolescents ages 12 to 17. The data utilized for this study was accumulated from the California Health Interview Survey (CHIS) 2009, Adolescent Data. The independent variables, for this study were <b>family</b> <b>type,</b> race/ethnicity, socio-economic status and gender. <b>Family</b> <b>type</b> was measured by being single with kids and married with kids. The dependent variable is mental health. The regressions analyses found that the greatest predictor of mental health of adolescents was gender...|$|R
2500|$|PureScript, a small {{strongly}} <b>typed</b> <b>programming</b> {{language that}} compiles to JavaScript ...|$|R
50|$|Several <b>typed</b> <b>programming</b> {{languages}} provide explicit {{support for}} the top type.|$|R
5000|$|PureScript, a small {{strongly}} <b>typed</b> <b>programming</b> {{language that}} compiles to JavaScript ...|$|R
5000|$|Equides, <b>family</b> <b>type</b> horse club (ExRoyalHorseClub) http://equides.com.ua/nashi-akademisty/ ...|$|R
50|$|In {{strongly}} <b>typed</b> <b>programming</b> languages, each parameter's type must be {{specified in}} the procedure declaration. Languages using type inference attempt to discover the types automatically from the function's body and usage. Dynamically <b>typed</b> <b>programming</b> languages defer <b>type</b> resolution until run-time. Weakly typed languages perform little to no type resolution, relying instead on the programmer for correctness.|$|R
40|$|Recent work on higher-dimensional {{dependent}} type theory enriches conventional one-dimensional dependent type {{theory with}} additional structure expressing equivalence of {{elements of a}} type. This structure may be employed {{in a variety of}} ways to capture rather coarse identifications of elements that must be respected by <b>type</b> <b>families.</b> Higher-dimensional <b>type</b> theory has applications to code reuse for dependently <b>typed</b> <b>programming,</b> and to the formalization of mathematics. In this paper, we develop a novel judgemental formulation of a two-dimensional type theory, which enjoys a canonicity property: a closed term of boolean type is definitionally equal to one of the two booleans. Canonicity is a necessary condition for a computational interpretation of type theory as a programming language, and does not hold for existing axiomatic presentations of higher-dimensional type theory. The method of proof is a generalization of the NuPRL semantics, interpreting types as syntactic groupoids rather than equivalence relations...|$|R
40|$|The {{concepts}} of value- and control-flow graphs {{are important for}} program analysis of imperative programs. An imperative value flow graph can be constructed by a single pass over the program text. No similar concepts exist for higher-order languages: we propose a method for constructing value flow graphs for typed higher-order functional languages. A higher-order value flow graph is constructed by a single pass over an explicitly <b>typed</b> <b>program.</b> By using standard methods, single source and single use value flow problems can be answered in linear time and all sources-all uses can be answered in quadratic time (in {{the size of the}} flow graph, which is equivalent {{to the size of the}} explicitly <b>typed</b> <b>program).</b> On simply <b>typed</b> <b>programs,</b> the precision of the resulting analysis is equivalent to closure analysis [10, 11, 8]. In practice, it is a reasonable assumption that <b>typed</b> <b>programs</b> are only bigger than their untyped equivalent by a constant factor, hence this is an asymptotic improvement over [...] ...|$|R
40|$|Different <b>family</b> <b>types</b> {{may have}} a fixed flow of {{consumption}} costs, related to subsistence needs. We use a survey method {{in order to identify}} and estimate such a fixed component of spending for different families. Our method involves making direct questions about the linkup between aggregate disposable family income and well-being for different <b>family</b> <b>types.</b> Conducting our survey in six countries, Germany, France, Cyprus, China, India and Botswana, we provide evidence that fixed costs of consumption are embedded in welfare evaluations of respondents. More precisely, we find that the formalized relationship between welfare-retaining aggregate family incomes across different <b>family</b> <b>types,</b> suggested by Donaldson and Pendakur (2005) and termed “Generalized Absolute Equivalence Scale Exactness,” is prevalent and robust in our data. We use this relationship to identify subsistence needs of different <b>family</b> <b>types</b> and to calculate income inequality. ...|$|R
5000|$|Youth {{conservation}} corps <b>type</b> <b>programs</b> such as Americorps {{involved in}} wildfire suppression and prescribed burning ...|$|R
5000|$|Female-headed {{families}} {{have the lowest}} family earnings among all <b>family</b> <b>types.</b>|$|R
5000|$|... {{specifies}} {{the address}} <b>family</b> <b>type</b> (e.g., AF_INET) {{of the host}} address.|$|R
5000|$|Variant types have {{a greater}} {{performance}} and storage [...] "overhead" [...] than strongly <b>typed</b> <b>programming</b> languages ...|$|R
40|$|Family {{communication}} has {{the potential}} to affect a variety of youth behavioral outcomes including adolescent sexual risk behavior. Within chapter 1, I present past literature on adolescent sexual risk behaviors, family communication patterns, and the gaps associated with those areas. In chapter 2, I review previous literature on adolescent sexual risk behavior, parent-child communication and family communication patterns. In chapter 3, I present the method which includes a description of the participants, procedures, measures, and data analysis used. In Chapter 4, I present the results of the study. According to the results of the study, father-child communication is not a better predictor of adolescent sexual risk behavior. A higher quantity of parent-child communication does not lead to less adolescent sexual risk behavior. Participants with a pluralistic <b>family</b> <b>type</b> do significantly differ from laissez-faire and protective <b>family</b> <b>types</b> in regards to levels of parent-child communication. Participants with a consensual <b>family</b> <b>type</b> do have significantly higher levels of parent-child communication in comparison to laissez-faire <b>family</b> <b>types,</b> but not protective <b>family</b> <b>types.</b> Finally, in chapter 5, I present the discussion with a review of previous research (consistent or inconsistent with the current findings), limitations and conclusions for the current study. i...|$|R
40|$|Dependently <b>typed</b> <b>programming</b> is hard, because ideally dependently <b>typed</b> <b>programs</b> {{should share}} {{structure}} with their correctness proofs, {{but there are}} very few guidelines on how one can arrive at such integrated programs. McBride’s algebraic ornamentation provides a methodological advancement, by which the programmer can derive a datatype from a specification involving a fold, such that a program that constructs elements of that datatype would be correct by construction. It is thus an effective method that leads the programmer from a specification to a dependently <b>typed</b> <b>program.</b> We enhance the applicability of this method by generalising alge- braic ornamentation to a relational setting and bringing in relational algebraic methods, resulting in a hybrid approach that makes es- sential use of both dependently <b>typed</b> <b>programming</b> and relational program derivation. A dependently typed solution to the minimum coin change problem is presented as a demonstration of this hybrid approach. We also give a theoretically interesting “completeness theorem” of relational algebraic ornaments, which sheds some light on the expressive power of ornaments and inductive families. Supplementary material The Agda code can be found on GitHub, as part of the ornament framework developed by the first author; the solution to the minimum coin change problem presented in the paper is in the file MinCoinChange. agda. The slides for the Dependently <b>Typed</b> <b>Programming</b> workshop are here. </p...|$|R
5000|$|A {{wide range}} of {{computational}} data <b>types,</b> <b>program</b> control data <b>types,</b> and forms of data structure (strong typing).|$|R
40|$|We {{present a}} typed {{intermediate}} language # CIL for optimizing compilers for function-oriented and polymorphically <b>typed</b> <b>programming</b> languages (e. g., ML). The language # CIL is a typed lambda calculus with product, sum, intersection, and union types {{as well as}} function types annotated with flow labels. A novel formulation of intersection and union types supports encoding flow information in the <b>typed</b> <b>program</b> representation. This flow information can direct optimization...|$|R
40|$|This study {{examined}} associations among <b>family</b> <b>type</b> (same-sex vs. opposite-sex parents), adolescent gender, family and relationship variables, and the peer relations of adolescents. Participants included 44 adolescents parented by same-sex female couples and 44 adolescents parented by opposite-sex couples, matched on demographic characteristics and {{drawn from a}} national sample. On both self-reported and peer-reported measures of relations with peers, adolescents were functioning well, {{and the quality of}} their peer relations was not associated with <b>family</b> <b>type.</b> Regardless of <b>family</b> <b>type,</b> adolescents whose parents described closer relationships with them reported higher quality peer relations and more friends in school and were rated as more central in their friendship networks...|$|R
40|$|In {{this article}} the {{necessity}} for running and improvement of social and pedagogical support of the orphans of a senior teen age, raised in and taught at <b>family</b> <b>type</b> orphanages, in order {{to prepare them for}} independent life in the future has been substantiated. The essence, content, and peculiarities of experimental and research work on {{the development and implementation of}} the new forms and methods of senior teenagers’ training for independent life in <b>family</b> <b>type</b> orphanage surroundings have been pointed out. There has been suggested a program of implementation of forms and methods of social and pedagogical support of students of <b>family</b> <b>type</b> orphanages during the mentioned above kind of training...|$|R
40|$|We {{introduce}} ΠΣ, a core {{language for}} dependently <b>typed</b> <b>programming.</b> Our intention is that ΠΣ should {{play the role}} extensions of System F are playing for conventional functional languages with polymorphism, like Haskell. The core language incorporates mutual dependent recursive definitions, Type: Type, Π- and Σ-types, finite sets of labels and explicit constraints. We show that standard constructions in dependently <b>typed</b> <b>programming</b> can be easily encoded in our language. We address some important issues: having an equality checker which unfolds recursion only when needed, avoiding looping when typechecking sensible programs; the simplification of type checking for eliminators like case by using equational constraints, allowing the flexible use of case expressions within dependently <b>typed</b> <b>programming</b> and the representation of dependent datatypes using explicit constraints...|$|R
40|$|In {{this paper}} we show {{how we can}} use size and groundness {{analyses}} lifted to regular and (polymorphic) Hindley/Milner <b>typed</b> logic <b>programs</b> to determine more accurate termination of (<b>type</b> correct) <b>programs.</b> <b>Type</b> information for <b>programs</b> may be either inferred automatically or declared by the programmer. The analysis of the <b>typed</b> logic <b>programs</b> is able to completely reuse a framework for termination analysis of untyped logic programs by using abstract compilation of the type abstraction. We define a methodology for mapping a <b>typed</b> logic <b>program</b> to a <b>type</b> separated CLP(N) <b>program</b> {{that allows us to}} automatically determine termination characteristics of the original program. We demonstrate how the approach is able to prove termination of programs which the untyped analysis can not...|$|R
40|$|Different <b>family</b> <b>types</b> {{may have}} a fixed flow of {{consumption}} costs related to subsistence needs. We use a survey approach {{in order to identify}} and estimate such a fixed component of spending for different families. Our method involves making direct questions about the linkup between aggregate disposable family income and well-being for different <b>family</b> <b>types.</b> Conducting a pilot version of ou...|$|R
50|$|Zeme family {{predominantly}} is {{of nuclear}} type {{consisting of the}} married couple and their unmarried offspring. About 65 per cent households among the Zemes are of elementary <b>family</b> <b>type</b> composed of a married couple and their unmarried children. Only about 11 per cent of the households are of joint <b>family</b> <b>type,</b> where the couple is living along with their married sons or daughters.|$|R
50|$|In {{computer}} programming, the routines (functions, procedures, methods) of strongly <b>typed</b> <b>programming</b> languages closely {{correspond to}} typed lambda expressions.|$|R
50|$|The program {{continues}} with its magazine <b>type</b> <b>programming</b> with talks and discussions related to {{themes of the}} Catholic Church.|$|R
25|$|<b>Type</b> B <b>program</b> – A <b>Type</b> B <b>program</b> is {{any single}} program {{which does not}} meet the Type A requirements.|$|R
50|$|Ballerina is {{a general}} purpose, {{concurrent}} and strongly <b>typed</b> <b>programming</b> language with both textual and graphical syntaxes, optimized for integration.|$|R
50|$|The Adventurer Club is a Scouting <b>type</b> <b>program</b> {{for young}} {{children}} created by the Seventh-day Adventist Church (SDA) in 1972.|$|R
5000|$|<b>Type</b> B <b>program</b> - A <b>Type</b> B <b>program</b> is {{any single}} program {{which does not}} meet the Type A requirements.|$|R
