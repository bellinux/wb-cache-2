69|10000|Public
25|$|Windows Embedded: Initially, Microsoft {{developed}} Windows CE as a <b>general-purpose</b> <b>operating</b> <b>system</b> {{for every}} device {{that was too}} resource-limited {{to be called a}} full-fledged computer. Eventually, however, Windows CE was renamed Windows Embedded Compact and was folded under Windows Compact trademark which also consists of Windows Embedded Industry, Windows Embedded Professional, Windows Embedded Standard, Windows Embedded Handheld and Windows Embedded Automotive.|$|E
25|$|In 1991, Linus Torvalds, a Finnish student, {{used the}} GNU's {{development}} tools {{to produce the}} free monolithic Linux kernel. The existing programs from the GNU project were readily ported to run on the resultant platform. Most sources use the name Linux {{to refer to the}} <b>general-purpose</b> <b>operating</b> <b>system</b> thus formed, while Stallman and the FSF call it GNU/Linux. This has been a longstanding naming controversy in the free software community. Stallman argues that not using GNU {{in the name of the}} operating system unfairly disparages the value of the GNU project and harms the sustainability of the free software movement by breaking the link between the software and the free software philosophy of the GNU project.|$|E
2500|$|According to a January 2015 Gartner report, [...] "Android surpassed {{a billion}} {{shipments}} of devices in 2014, {{and will continue}} to grow at a double-digit pace in 2015, with a 26 percent increase year over year." [...] This made it the first time that any <b>general-purpose</b> <b>operating</b> <b>system</b> has reached more than one billion end users within a year: by reaching close to 1.16 billion end users in 2014, Android shipped over four times more than iOS and OSX combined, and over three times more than Microsoft Windows. Gartner expected the whole mobile phone market to [...] "reach two billion units in 2016", including Android. Describing the statistics, Farhad Manjoo wrote in The New York Times that [...] "About one of every two computers sold today is running Android. [...] has become Earth’s dominant computing platform." ...|$|E
50|$|Several mainstream, <b>general-purpose</b> <b>operating</b> <b>systems</b> {{implement}} ASLR.|$|R
40|$|Although {{a number}} of <b>general-purpose</b> <b>operating</b> <b>systems</b> have been {{extended}} with soft real-time schedulers and {{have the potential to}} support coexisting, independently developed real-time applications, this potential is currently largely unexploited by common applications. This is because the provided scheduling functionality is low-level and depends on parameters that are di#cult to estimate, and because different semantics are provided by di#erent schedulers. The cost/benefit ratio of real-time support in <b>general-purpose</b> <b>operating</b> <b>systems</b> is too high for most users and application developers to tolerate...|$|R
40|$|<b>General-purpose</b> <b>operating</b> <b>systems</b> provide {{inadequate}} {{support for}} resource management in large-scale servers. Applications lack sufficient control over scheduling {{and management of}} machine resources, which {{makes it difficult to}} enforce priority policies, and to provide robust and controlled service. There is a fundamental mismatch between the original design assumptions underlying the resource management mechanisms of current <b>general-purpose</b> <b>operating</b> <b>systems,</b> and the behavior of modern server applications. In particular, the <b>operating</b> <b>system's</b> notions of protection domain and resource principal coincide in the process abstraction. This coincidence prevents a process that manages large numbers of network connections, for example, from properly allocating system resources among those connections. We propose and evaluate a new <b>operating</b> <b>system</b> abstraction called a resource container, which separates the notion of a protection domain from that of a resource principal. Resource containers [...] ...|$|R
5000|$|... #Subtitle level 3: <b>General-purpose</b> <b>operating</b> <b>system</b> {{resource}} sharing ...|$|E
5000|$|An ultra mobile PC (discontinued) is a full-featured, PDA-sized {{computer}} {{running a}} <b>general-purpose</b> <b>operating</b> <b>system.</b>|$|E
50|$|CFS is {{the first}} {{implementation}} of a fair queuing process scheduler widely used in a <b>general-purpose</b> <b>operating</b> <b>system.</b>|$|E
40|$|There is {{increasing}} demand to extend Object Request Broker (ORB) middleware to support distributed applications with stringent real-time requirements. However, lack of proper OS support can yield substantial inefficiency and unpredictability for ORB middleware. This paper provides two {{contributions to the}} study of OS support for real-time ORBs. First, we empirically compare and evaluate the suitability of real-time <b>operating</b> <b>systems,</b> VxWorks and LynxOS, and <b>general-purpose</b> <b>operating</b> <b>systems</b> with real-time extensions, Windows NT, Solaris, and Linux, for real-time ORB middleware. While holding the hardware and ORB constant, we vary the <b>operating</b> <b>system</b> and measure platform-specific variations, such as latency, jitter, operation throughput, and CPU processing overhead. Second, we describe key areas where these <b>operating</b> <b>systems</b> must improve to support predictable, efficient, and scalable ORBs. Our findings illustrate that <b>general-purpose</b> <b>operating</b> <b>systems</b> like Windows NT and Solaris are n [...] ...|$|R
40|$|<b>General-purpose</b> <b>operating</b> <b>systems</b> provide {{inadequate}} {{support for}} large-scale servers. Server applications lack sufficient control over scheduling {{and management of}} machine resources, which {{makes it difficult to}} enforce priority policies, and to provide robust and controlled service. For example, server applications cannot provide differentiated quality of service to requests from different clients. The root cause of these problems is a fundamental mismatch between the original design assumptions underlying the resource management mechanisms of current <b>general-purpose</b> <b>operating</b> <b>systems,</b> and the behavior of modern server applications. In particular, the notions of protection domain and resource principal coincide in the process abstraction of current <b>operating</b> <b>systems.</b> Moreover, these <b>operating</b> <b>systems</b> provide insufficient control to an application over the resources that are consumed inside the kernel on behalf of the application. These aspects of current <b>operating</b> <b>systems</b> prevent a server process that manages large numbers of network connections, for example, from properly allocating system resources among those connections. This dissertation addresses the lack of <b>operating</b> <b>system</b> support for fine-grained resource management in large-scale server systems. It starts by characterizing the nature of the mismatch between the design assumptions of current <b>general-purpose</b> <b>operating</b> <b>systems,</b> and the behavior of server applications. The traditional design of core <b>operating</b> <b>system</b> abstractions and APIs is reevaluated {{in the light of the}} requirements of server applications. This reevaluation leads to a set of novel <b>operating</b> <b>system</b> abstractions and APIs that serve to provide effective support for server applications...|$|R
5000|$|Unlike <b>general-purpose</b> <b>operating</b> <b>systems,</b> {{which are}} {{designed}} to execute {{on a wide variety}} of hardware platforms, SourceT was specifically designed to take advantage of some of the unique security and performance features of the Itanium microprocessor to create a high performance, highly secure architecture. These unique Itanium features include: ...|$|R
50|$|Dyson is a Unix <b>general-purpose</b> <b>operating</b> <b>system</b> {{derived from}} Debian using the illumos kernel, libc, and SMF init system.|$|E
5000|$|SUSE Linux Enterprise Real Time, {{a special}} version of SUSE Linux Enterprise Server that turns the <b>general-purpose</b> <b>operating</b> <b>system</b> into a {{real-time}} operating system.|$|E
50|$|The XTS-200 was {{designed}} as a <b>general-purpose</b> <b>operating</b> <b>system</b> supporting a Unix-like application and user environment. XTS-200 completed evaluation in 1992 at the B3 level.|$|E
40|$|There is {{increasing}} interest in using <b>general-purpose</b> <b>operating</b> <b>systems,</b> such as Linux, on embedded platforms. It {{is especially important}} in embedded systems to use memory efficiently because embedded processors often have limited physical memory. This paper describes an automatic technique for reducing the memory footprint of <b>general-purpose</b> <b>operating</b> <b>systems</b> on embedded platforms by keeping infrequently executed code on secondary storage and loading such code {{only if it is}} needed at run time. Our technique is based on an old idea—memory overlays—and it does not require hardware or <b>operating</b> <b>system</b> support for virtual memory. A prototype of the technique has been implemented for the Linux kernel. We evaluate our approach with two benchmark suites: MiBench and MediaBench, and a Web server application. The experimental results show that our approach reduces memory requirements for the Linux kernel code by about 53 % with little degradation in performance...|$|R
40|$|Embedded systems {{show the}} {{tendency}} of {{becoming more and more}} connected. This fact combined with the trend towards the Internet of Things, from which measuring instruments are not immune (e. g., smart meters), lets one assume that security in measuring instruments will inevitably play an important role soon. Additionally, measuring instruments have adopted <b>general-purpose</b> <b>operating</b> <b>systems</b> to offer the user a broader functionality that is not necessarily restricted towards measurement alone. In this paper, a flexible software system architecture is presented that addresses these challenges within the framework of essential requirements laid down in the Measuring Instruments Directive of the European Union. This system architecture tries to eliminate the risks <b>general-purpose</b> <b>operating</b> <b>systems</b> have by wrapping them, together with dedicated applications, in secure sandboxes, while supervising the communication between the essential parts and the outside world...|$|R
50|$|IBM {{developed}} ACP and its successors because: in {{the mid-1960s}} IBM's standard <b>operating</b> <b>systems</b> (DOS/360 and OS/360) were batch-oriented and could not handle large numbers of short transactions quickly enough; even its transaction monitors IMS and CICS, which run {{under the control of}} standard <b>general-purpose</b> <b>operating</b> <b>systems,</b> are not fast enough for handling reservations on hundreds of flights from thousands of travel agents.|$|R
50|$|<b>General-purpose</b> <b>operating</b> <b>system</b> {{resource}} sharing {{is one of}} the main objectives of Adeos, to provide an environment which enables multiple general purpose OSes to share the same hardware.|$|E
50|$|IntervalZero, Inc. {{develops}} hard real-time {{software and}} its symmetric multiprocessing (SMP) enabled RTX and RTX64 software transform the Microsoft Windows <b>general-purpose</b> <b>operating</b> <b>system</b> (GPOS) into a real-time operating system (RTOS).|$|E
50|$|Like its iRMX predecessors, INtime is a {{real-time}} operating system. And, like DOSRMX and iRMX for Windows, it runs concurrently with a <b>general-purpose</b> <b>operating</b> <b>system</b> on {{a single}} hardware platform.|$|E
40|$|The NetWare <b>operating</b> <b>system</b> is {{designed}} specifically to provide service to clients over a computer network. This design {{has resulted in a}} system that differs in several respects from more <b>general-purpose</b> <b>operating</b> <b>systems.</b> In addition to highlighting the design decisions that have led to these differences, this paper provides an overview of the NetWare <b>operating</b> <b>system,</b> with a detailed description of its kernel and its software-based approach to fault tolerance. 1...|$|R
40|$|Abstract — This paper compares task jitter {{measurement}} performed under RTLinux and RTX hard real-time <b>operating</b> <b>systems.</b> Both the <b>operating</b> environments represent Hardware Abstraction Layer extensions to <b>general-purpose</b> <b>operating</b> <b>systems,</b> {{and make}} possible {{to create a}} real-time system according to the POSIX 1003. 13 PSE 54 profile (multipurpose system). The paper is focused on discussion of experimental results, obtained on PC hardware, and their interpretation...|$|R
40|$|We {{present a}} {{temporal}} debugger, capable of examining temporal behaviour of <b>operating</b> <b>systems.</b> The debugger {{is based on}} a simulator modelling an entire workstation at the instruction level. Unlike traditional debuggers, which need to interfere with program execution, a simulation-based debugger can operate without disturbing time flow of the simulated system. This allows non-intrusive and reproducible debugging of <b>general-purpose</b> <b>operating</b> <b>systems,</b> such as Linux. We demonstrat...|$|R
50|$|Numerous {{smart card}} devices have been {{evaluated}} at EAL5, as have multilevel secure devices such as the Tenix Interactive Link. XTS-400 (STOP 6) is a <b>general-purpose</b> <b>operating</b> <b>system</b> which has been evaluated at EAL5 augmented.|$|E
50|$|All Enterprise {{versions}} of NoMachine's NX protocol allow client connections to hosts via Remote Desktop Protocol (for Windows Remote Desktop Services sessions) and remote Virtual Network Computing sessions (most modern <b>general-purpose</b> <b>operating</b> <b>system</b> platforms) {{as well as}} XDM.|$|E
50|$|STOP {{provides}} high-assurance {{security and}} was the first <b>general-purpose</b> <b>operating</b> <b>system</b> with a Common Criteria assurance level rating of EAL5 or above. The XTS-400 can host, and be trusted to separate, multiple, concurrent data sets, users, and networks at different sensitivity levels.|$|E
50|$|However, the {{distinction}} between these two types is not necessarily clear. Linux's Kernel-based Virtual Machine (KVM) and FreeBSD's bhyve are kernel modules that effectively convert the host <b>operating</b> <b>system</b> to a type-1 hypervisor. At the same time, since Linux distributions and FreeBSD are still <b>general-purpose</b> <b>operating</b> <b>systems,</b> with other applications competing for VM resources, KVM and bhyve can also be categorized as type-2 hypervisors.|$|R
50|$|Some {{types of}} buses allow only one device (typically the CPU, or its proxy) to {{initiate}} transactions. Most modern bus architectures, such as PCI, allow multiple devices to bus master because it significantly improves performance for <b>general-purpose</b> <b>operating</b> <b>systems.</b> Some real-time <b>operating</b> <b>systems</b> prohibit peripherals from becoming bus masters, because the scheduler {{can no longer}} arbitrate for the bus and hence cannot provide deterministic latency.|$|R
30|$|The {{paper by}} Carlos Maziero, Douglas dos Santos, and Altair Santin {{contains}} {{an evaluation of}} some popular <b>general-purpose</b> <b>operating</b> <b>systems</b> under memory thrashing conditions, i.e., when system throughput is significantly reduced due to extensive paging activity. Authors describe a portable benchmark tool, identify the performance data about memory management in each system and discuss the different behaviors observed.|$|R
5000|$|Con Kolivas's work, most {{significantly}} his implementation of [...] "fair scheduling" [...] named [...] "Rotating Staircase Deadline", inspired Ingo Molnár {{to develop the}} Completely Fair Scheduler {{as a replacement for}} the earlier O(1) scheduler, crediting Kolivas in his announcement. [...] CFS is the first implementation of a fair queuing process scheduler widely used in a <b>general-purpose</b> <b>operating</b> <b>system.</b>|$|E
5000|$|Joseph F. Ossanna (December 10, 1928, Detroit, Michigan [...] - [...] November 28, 1977, Morristown, New Jersey) {{worked as}} a member of the {{technical}} staff at the Bell Telephone Laboratories in Murray Hill, New Jersey. He became actively engaged in the software design of Multics (Multiplexed Information and Computing Service), a <b>general-purpose</b> <b>operating</b> <b>system</b> used at Bell.|$|E
50|$|The {{first version}} of Windows NT was Windows NT 3.1 and was {{produced}} for workstations and server computers. It was intended to complement consumer versions of Windows (including Windows 1.0 through Windows 3.1x) that were based on MS-DOS. Gradually, the Windows NT family was expanded into Microsoft's <b>general-purpose</b> <b>operating</b> <b>system</b> product line for all personal computers, deprecating the Windows 9x family.|$|E
40|$|It is {{desirable}} {{to share the}} resources of a single DSP microprocessor among multiple concurrent audio tasks, but this poses a variety of practical problems. In this paper the features of <b>general-purpose</b> <b>operating</b> <b>systems</b> are contrasted {{with the needs of}} typical audio DSP processes, and the architecture of a simple yet powerful real time DSP kernel is proposed. 1...|$|R
40|$|<b>General-purpose</b> <b>operating</b> <b>systems,</b> such as Linux, are {{increasingly}} being used in embedded systems. Computational resources are usually limited, and embedded processors often have {{a limited amount of}} memory. This makes code size especially important. This paper describes techniques for automatically reducing the memory footprint of <b>general-purpose</b> <b>operating</b> <b>systems</b> on embedded platforms. The problem is {{complicated by the fact that}} kernel code tends to be quite different from ordinary application code, including the presence of a signi�cant amount of hand-written assembly code, multiple entry points, implicit control �ow paths involving interrupt handlers, and frequent indirect control �ow via function pointers. We use a novel “approximate decompilation” technique to apply source-level program analysis to hand-written assembly code. A prototype implementation of our ideas on an Intel x 86 platform, applied to a Linux kernel that has been con�gured to exclude unnecessary code, obtains a code size reduction of close to 24 %. 1...|$|R
40|$|In {{the context}} of {{high-end}} computing <b>systems,</b> <b>general-purpose</b> <b>operating</b> <b>systems</b> impose overhead on the applications they support due to unneeded services. Although dedicated <b>operating</b> <b>systems</b> overcome this issue, they are difficult to develop or adapt. In this paper, we propose a framework, based on the component programming paradigm, which supports the development and adaptation of such <b>operating</b> <b>systems.</b> This framework makes possible the a la carte construction of <b>operating</b> <b>systems</b> which provide specific highend computing system characteristics. 1...|$|R
