40|54|Public
25|$|In the trusted <b>default</b> <b>path</b> /lib, {{and then}} /usr/lib. If the binary was {{linked with the}} -z nodefaultlib linker option, this step is skipped.|$|E
2500|$|Most Unix-like {{systems have}} a [...] "search path" [...] specifying file system {{directories}} {{in which to}} look for dynamic libraries. Some systems specify the <b>default</b> <b>path</b> in a configuration file; others hard-code it into the dynamic loader. Some executable file formats can specify additional directories in which to search for libraries for a particular program. This can usually be overridden with an environment variable, although it is disabled for setuid and setgid programs, so that a user can't force such a program to run arbitrary code with root permissions. Developers of libraries are encouraged to place their dynamic libraries in places in the default search path. On the downside, this can make installation of new libraries problematic, and these [...] "known" [...] locations quickly become home to {{an increasing number of}} library files, making management more complex.|$|E
5000|$|In the trusted <b>default</b> <b>path</b> , {{and then}} [...] If the binary was {{linked with the}} [...] linker option, this step is skipped.|$|E
30|$|Step A Simulation of all non-default and <b>default</b> <b>paths</b> for {{maturity}} period m.|$|R
50|$|UNC <b>default</b> <b>paths</b> {{are turned}} off by default {{as they used to}} crash older programs.|$|R
3000|$|... {{store them}} in the cell arrays dFD as {{discount}} factors for <b>default</b> <b>paths</b> and dFN as discount factors for non-default paths respectively; [...]...|$|R
5000|$|The <b>default</b> <b>path</b> tracing {{integrator}} {{is a pure}} path tracer. At each hit it bounces {{light in}} one direction and picks one light to receive lighting from. This makes each individual sample faster to compute, but typically requires more samples to clean up the noise.|$|E
5000|$|When {{implemented}} with fall-through as the <b>default</b> <b>path,</b> switch/case {{statements are}} a frequent source of bugs among even experienced programmers, given that, in practice, the [...] "break" [...] {{is almost always}} the desired path, but not the default behavior of the switch/case construct (at least in C and Java).|$|E
5000|$|This {{configuration}} sets common environment variables, loads a disk cache, places common directories {{into the}} <b>default</b> <b>PATH,</b> and initializes the DOS mouse / keyboard drivers. The [...] command sets the prompt to [...] "C:\>" [...] (when the working directory {{is the root}} of the C drive) instead of simply [...] "C>" [...] (the default prompt, indicating only the working drive and not the directory therein).|$|E
3000|$|The {{first step}} of our {{experiment}} {{is represented by the}} simulation of non-default and <b>default</b> <b>paths.</b> The general procedure for implementation are as follows: [...]...|$|R
40|$|The {{historical}} {{developments of}} hypertext (HT), which is non-linear text or non-sequential writing, hypermedia (HM) and multimedia; types of HT systems; their general charateristics, advantages, disadvantages and limitations are overviewed in this paper. I t also lists important HT systems and HM products, their {{storage and distribution}} patterns. Problems like disorientation, cognitive overhead, lack of presentation, rhetoric and construction of <b>default</b> <b>paths</b> are also discussed. 1...|$|R
40|$|Survival {{capability}} {{is becoming a}} crucial factor in designing multicore processors built with on-chip packet networks, or networks on chip (NoCs). In this paper, we propose a lightweight fault-tolerant mechanism for NoCs based on <b>default</b> backup <b>paths</b> (DBPs) designed to maintain, {{in the presence of}} failures, network connectivity of both nonfaulty routers as well as healthy processor cores which may be connected to faulty routers. The mechanism provides <b>default</b> <b>paths</b> as backup between certain router ports which serve as alternative datapaths to circumvent failed components within a faulty router. Along with a minimal subset of normal network channels, the set of <b>default</b> backup <b>paths</b> internal to faulty routers form—in the worst case—a unidirectional ring topology that provides network-wide connectivity to all processor cores. Routing using the DBP mechanism is proved to be deadlock-free with only two virtual channels even for fault scenarios in which regular networks degrade to irregular (arbitrary) topologies. Evaluation results show that, for a 2 -D mesh wormhole NoC, only 12. 6 % additional hardware resources are needed to implement the proposed DBP mechanism in order to provide graceful performance degradation without chip-wide failure as the number of faults increases to the maximum needed to form ring. ...|$|R
5000|$|Her many {{subsequent}} works {{focus on}} and exemplify {{different aspects of}} potential narrative and navigational structures in hypermedia. Regarding Larsen's work, scholar Jessica Laccetti observed that, [...] "In Larsen’s case, as in Caitlin Fisher’s These Waves of Girls, a <b>default</b> <b>path</b> {{is built into the}} narrative, suggesting both chronological sequence and plot development. While 'scholars and analysts' can travel more flexible paths through the stories, first time readers are advised to follow thematic or character links." ...|$|E
5000|$|... : The [...] {{variable}} {{is a special}} system-wide environment variable found on Windows NT and its derivatives. Its value is {{the location of the}} system directory, including the drive and path. The drive is the same as [...] and the <b>default</b> <b>path</b> on a clean installation depends upon the version of the operating system. By default, Windows NT 5.1 (Windows XP) and newer versions use [...] "", Windows NT 5.0 (Windows 2000), Windows NT 4.0 and Windows NT 3.1 use [...] "", Windows NT 3.5x uses [...] "", and Windows NT 4.0 Terminal Server uses [...] "".|$|E
5000|$|McGrath further {{suggested}} that all team projects begin with Mode I (goal choice) {{and end with}} Mode IV (goal attainment) but that Modes II and III {{may or may not}} be needed depending on the task and the history of the group's activities. McGrath contended that for each identified function, groups can follow a variety of alternative [...] "time-activity paths" [...] in order to move from the initiation to the completion of a given function. Specifically, TIP theory states that there is a [...] "default path" [...] between two modes of activity which is [...] "satisficing" [...] or [...] "least effort" [...] path, and that such <b>default</b> <b>path</b> will [...] "prevail unless conditions warrant some more complex path" [...] (1991, p. 159).|$|E
40|$|Abstract. The {{evaluation}} of structured credit products like baskets and collateralized debt obligations (CDOs) most often {{relies on the}} simulation of correlated default times for the underlying pool of credit instruments. Given the distribution of a default time vector one can find {{the distribution of the}} corresponding (cumulative) <b>default</b> quote <b>path</b> for a portfolio. In this note we show that the multivariate dependence of marginal default quote distributions over time can be based on a comonotonic structure without loosing information regarding default timing. Based on comonotonicity, <b>default</b> quote <b>paths</b> and random variables arising from basket evaluation like the time until the n-th default can be simulated very efficiently. 1 Introduction an...|$|R
30|$|Table driven method: According to the {{routing table}} in every sensor node, the sensed {{data can be}} {{transmitted}} by the <b>default</b> routing <b>path</b> in the routing table such as destination sequenced distance-vector (DSDV) [15], CGSR [16], and WRP [17].|$|R
5000|$|JSON Configuration files: defines {{relationship}} between code components, assets, routing <b>paths,</b> <b>defaults</b> {{and are available}} at the application and mojit level.|$|R
5000|$|Most Unix-like {{systems have}} a [...] "search path" [...] specifying file system {{directories}} {{in which to}} look for dynamic libraries. Some systems specify the <b>default</b> <b>path</b> in a configuration file; others hard-code it into the dynamic loader. Some executable file formats can specify additional directories in which to search for libraries for a particular program. This can usually be overridden with an environment variable, although it is disabled for setuid and setgid programs, so that a user can't force such a program to run arbitrary code with root permissions. Developers of libraries are encouraged to place their dynamic libraries in places in the default search path. On the downside, this can make installation of new libraries problematic, and these [...] "known" [...] locations quickly become home to {{an increasing number of}} library files, making management more complex.|$|E
30|$|Breadcrumbs: Breadcrumbs aims at {{efficiently}} utilizing content caches located {{outside of}} the <b>default</b> <b>path.</b> When a content request arrives at a content server and a content is downloaded, each router along the download path stores a pointer called Breadcrumbs. This pointer points to {{the direction in which}} the content was sent. When a content request eventually encounters Breadcrumbs for the corresponding content along the <b>default</b> <b>path,</b> it is redirected towards Breadcrumbs direction.|$|E
30|$|Download {{and install}} libraries. Three {{external}} libraries {{are required by}} 3 dRPC: FFTW ([URL] BLAS ([URL] and LAPACK ([URL] The <b>default</b> <b>path</b> of libraries is “${HOME_ 3 dRPC}/lib/”.|$|E
25|$|Lookup {{based on}} the ldconfig cache file (often located at /etc/ld.so.cache) which {{contains}} a compiled list of candidate libraries previously found in the augmented library path (set by /etc/ld.so.conf). If, however, the binary was linked with the -z nodefaultlib linker option, libraries in the <b>default</b> library <b>paths</b> are skipped.|$|R
30|$|Demand driven method: This method {{does not}} call for a <b>default</b> routing <b>path.</b> Instead, there is an on-demand path, which is found when source nodes must {{transmit}} data to a destination node. The routing path is established through flooding that involves node-path information from the source to the destination. AODV [18] and DSR [19] are examples {{of this kind of}} routing method.|$|R
40|$|Known issues: [URL] version 1. 3. 1 <b>Default</b> module <b>path</b> (set via spades. modulePath option) is now set to a {{temporary}} location to avoid unintentionally {{writing to the}} user's home directory. add options for cache, input, output dirs (defaults to a temp dir until changed by user) rename spades. modulesPath and spades. modulesRepo options to spades. modulePath and spades. moduleRepo New cache-related functions: showCache and clearCach...|$|R
30|$|In {{this step}} all non-default and default paths are {{generated}} for maturity M= 1,...,m years. The output for every M in a non-default path is {{a matrix of}} size 7 ^m× M where rows correspond to a path and columns indicate credit rating {{at the end of}} the year. All the m <b>default</b> <b>path</b> matrices are stored in a cell array of length m. The output for every M in a <b>default</b> <b>path</b> is a matrix of size 7 ^(m- 1)× M. But unlike non default paths, for default paths with maturity m the possible paths are all paths in all matrices from M = 1,...,m. The indexing scheme of AAA → 1, AA → 2, A → 3, BBB → 4, BB → 5, B → 6, CCC → 7 and D → 8 is used.|$|E
30|$|The HWMP is {{currently}} the <b>default</b> <b>path</b> selection protocol defined for the IEEE 802.11 s standard document. It must be implemented by all 802.11 s-enabled stations (mesh STAs). HWMP uses a set of protocol primitives derived from AODV with proactive topology tree extensions to perform routing-related functions and adapted for using MAC addresses and the Airtime Link Metric.|$|E
40|$|Large-scale {{peer-to-peer}} systems span a {{wide range}} of Internet locations. Such diversity can be leveraged to build overlay “detours” to circumvent periods of poor performance on the <b>default</b> <b>path.</b> However, identifying which peers are “good” relay choices in support of such detours is challenging, if one is to avoid incurring an overhead that grows with the size of the peer-to-peer system. This paper proposes and investigates the Earliest Branching Rule (EBR) to perform such a selection. EBR builds on the Earliest Diverging Rule (EDR) that selects relay nodes whose AS path diverges from the <b>default</b> <b>path</b> at the earliest possible point, but calls for monitoring a much smaller number of paths. As a result, it has a much lower overhead. The paper explores the performance and overhead of EBR, and compares them to that of EDR. The results demonstrate that EBR succeeds in selecting good relay nodes with minimum control overhead. Hence, providing a practical solution for dynamically building good overlays in large peer-to-peer systems...|$|E
40|$|Popular Internet {{applications}} exhibit subtle dependencies on {{data path}} characteristics [3, 5]. On the other hand, various studies [2, 1] {{have shown that}} non-default Internet paths can have dramatically different quality characteristics compared to <b>default</b> <b>paths.</b> Unfortunately, the existing Internet routing infrastructure {{is not able to}} benefit from these observations. However, recently proposed routing architectures [4] open up the possibility to ease these constraints by allowing route selection to be more dynamic and to be informed by information outside the routing protocol. Motivated by these observations, in the work presented here, we explore the possibility of informing route selection based on measured path properties. Specifically, we observe that from their vantage points in the Internet topology, Tier- 1 and other large ISPs typically have multiple possible routes {{that can be used to}} reach the majority of destination prefixes on the Internet. By monitoring routing information we track the availability of alternative paths available from a Tier- 1 ISP. At the same time we perform detailed measurements of loss and delay to a large number of Interne...|$|R
5000|$|The <b>default</b> modules search <b>path</b> is in {{a hidden}} {{configuration}} file you can display with:The [...] directory {{used by some}} distributions (or any other directory) can be used after a build from source by modifying the [...] file.|$|R
5000|$|The {{commands}} in {{this section}} require read/write/execute access to the /etc/modulefiles directory. The $HOME/privatemodules or another directory can be used instead along with [...] "module use --append" [...] or modification of the configuration file specifying the <b>default</b> modules search <b>path.</b>|$|R
40|$|Changes: - {{automatic}} build {{testing for}} Linux and MacOS X - automatic tests for some tools - a unit testing framework for functions - python wrapper: bart. py - fix problem with matlab wrapper - change <b>default</b> <b>path</b> for fftw on Mac OS X - new tools: carg, wavg - carg: complex argumemt - wavg: weighted average - library: tools for chebyshev approximation - library: improvements for type safety - many other bug fixes and enhancement...|$|E
40|$|This paper shows a full {{description}} of Spanish inflectional morphology. We {{have chosen a}} paradigmatic approach instead of one based on phonological/spelling changes, i. e., the typical two-level model. Such morphological description has been written in the DATR formalism. The result is a network of nodes that makes use of the information inheritance mechanisms – orthogonal node inheritance and <b>default</b> <b>path</b> inheritance – that DATR allows. Some lexical coverage and corpus occurrence figures that support our approach are also given...|$|E
40|$|Abstract. During {{formation}} flying, Unmanned Aerial Vehicles (UAV) {{may need}} to arrive at target ahead of schedule by hurry path. Given fixed flight high mode, hurry planning method was proposed based on Adaptive Genetic Algorithm (AGA), which makes the new path shorter by locally adjusting the <b>default</b> <b>path.</b> By full considering the risk of UAV flight, the hurry path got by AGA meets {{the requirements of the}} risk cost and time amount in advance. Simulation results show that the path gotten by AGA can better meet the requirements of the time amount in advance, and evade the threat area effectively too...|$|E
5000|$|C:, which {{points to}} a {{directory}} containing shell commands. At boot time, this is SYS:C, if it exists, otherwise SYS:. The command <b>path</b> <b>defaults</b> to C: and the current working directory, so putting executables in C: allows them to be executed simply by typing their name.|$|R
40|$|Fat-tree {{networks}} {{have been widely}} adopted to High Performance Computing (HPC) clusters and to Data Center Networks (DCN). These parallel systems usually have {{a large number of}} servers and hosts, which generate large volumes of highly-volatile traffic. Thus, distributed load-balancing routing design becomes critical to achieve high bandwidth utilization, and low-latency packet delivery. Existing distributed designs rely on remote congestion feedbacks to address congestion, which add overheads to collect and react to network-wide congestion information. In contrast, we propose a simple but effective load-balancing scheme, called Dynamic Randomized load-Balancing (DRB), to achieve network-wide low levels of path collisions through local-link adjustment which is free of communications and cooperations between switches. First, we use D-mod-k path selection scheme to allocate <b>default</b> <b>paths</b> to all source-destination (S-D) pairs in a fat-tree network, guaranteeing low levels of path collision over downlinks for any set of active S-D pairs. Then, we propose Threshold-based Two-Choice (TTC) randomized technique to balance uplink traffic through local uplink adjustment at each switch. We theoretically show that the proposed TTC for the uplink-load balancing in a fat-tree network have a similar performance as the two-choice technique in the area of randomized load balancing. Simulation results show that DRB with TTC technique achieves a significant improvement over many randomized routing schemes for fat-tree networks. Comment: 13 pages, 1 table, 6 figure...|$|R
25|$|An {{absolute}} reference {{includes all}} directory levels. In some systems, a filename reference {{that does not}} include the complete directory <b>path</b> <b>defaults</b> to the current working directory. This is a relative reference. One advantage of using a relative reference in program configuration files or scripts is that different instances of the script or program can use different files.|$|R
