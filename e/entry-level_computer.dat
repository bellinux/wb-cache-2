14|19|Public
25|$|The {{increased}} RAM of the 512K was {{vitally important}} for the Macintosh as it finally allowed for more powerful software applications, such as the then-popular program Microsoft Multiplan. However, Apple continued to market the 128K {{for over a year}} as an <b>entry-level</b> <b>computer,</b> the mid-level 512K and high-end Lisa (and claiming that it could be easily expanded should the user ever need more RAM).|$|E
25|$|The Mac Mini is an <b>entry-level</b> <b>computer</b> {{intended}} for budget-minded customers. Until the 2011 release, the Mac Mini had much less processing power {{than the other}} computers of the Macintosh lineup. Unlike regular desktop computers, which use standard-sized components such as 3.5-inch hard drives and full-size DIMM's, Apple uses lower-power laptop components in the Mac Mini to fit all the necessary components into the small case and to prevent overheating. Previously, with the choice of components on the older models, the machine was considered somewhat slower than standard desktop computers. It also had less storage and memory than comparable desktops. However, the 2011 upgrade addressed many of these previous complaints.|$|E
50|$|The Commodore 16 {{is a home}} {{computer}} made by Commodore International with a 6502-compatible 7501 or 8501 CPU, released in 1984 and intended to be an <b>entry-level</b> <b>computer</b> to replace the VIC-20. A cost-reduced version, the Commodore 116, was sold only in Europe.|$|E
50|$|Winmodems {{have earned}} a certain notoriety for slowing down their host {{computer}} systems and for having buggy drivers, although this reputation was largely garnered {{during the period}} of their introduction to the mass market, whereupon they were apt to use substandard drivers and be found in <b>entry-level</b> <b>computers</b> with slow CPUs. Any such reputation has not, however, halted their market popularity; most internal 56k modems produced since 1998 have been software-based.|$|R
50|$|The SGI Origin 200, code named Speedo, was an <b>entry-level</b> server <b>computer</b> {{developed}} and manufactured by SGI, introduced in October 1996 to accompany their mid-range and high-end Origin 2000. It {{is based on}} the same architecture as the Origin 2000 but has an unrelated hardware implementation. At the time of introduction, these systems ran the IRIX 6.4, and later, the IRIX 6.5 operating systems. The Origin 200 was discontinued on 30 June 2002.|$|R
5000|$|The Brahma Tech curriculum, {{spanning}} {{four years}} of high school, consists of an <b>entry-level</b> course called <b>Computer</b> Systems, followed by designated courses in one of four subsidiaries (or [...] "strands") of the student's choice concluding with a 150-hour internship.|$|R
50|$|The {{increased}} RAM of the 512K was {{vitally important}} for the Macintosh as it finally allowed for more powerful software applications, such as the then-popular program Microsoft Multiplan. However, Apple continued to market the 128K {{for over a year}} as an <b>entry-level</b> <b>computer,</b> the mid-level 512K and high-end Lisa (and claiming that it could be easily expanded should the user ever need more RAM).|$|E
5000|$|Most <b>entry-level</b> <b>computer</b> {{engineering}} jobs require {{at least}} a bachelor's degree in computer engineering. Sometimes a degree in electronic engineering is accepted, due to the similarity of the two fields. Because hardware engineers commonly work with computer software systems, a background in computer programming usually is needed. According to BLS, [...] "a computer engineering major is similar to electrical engineering but with some computer science courses added to the curriculum". Some large firms or specialized jobs require a master's degree.|$|E
50|$|The Mac Mini is an <b>entry-level</b> <b>computer</b> {{intended}} for budget-minded customers. Until the 2011 release, the Mac Mini had much less processing power {{than the other}} computers of the Macintosh lineup. Unlike regular desktop computers, which use standard-sized components such as 3.5-inch hard drives and full-size DIMM's, Apple uses lower-power laptop components in the Mac Mini to fit all the necessary components into the small case and to prevent overheating. Previously, with the choice of components on the older models, the machine was considered somewhat slower than standard desktop computers. It also had less storage and memory than comparable desktops. However, the 2011 upgrade addressed many of these previous complaints.|$|E
2500|$|A small {{form factor}} {{computer}} had been widely speculated and requested long before {{the release of the}} Mac Mini. Rumors predicted that the [...] "headless iMac" [...] would be extremely small, include no display, and would be positioned as Apple's <b>entry-level</b> desktop <b>computer.</b> On January 10, 2005, the Mac Mini was announced alongside the iPod shuffle at the Macworld Conference & Expo and was described by Apple CEO Steve Jobs at the time as [...] "the cheapest, most affordable Mac ever".|$|R
5000|$|Input/Output Control System (IOCS) is any {{of several}} {{packages}} on early IBM <b>entry-level</b> and mainframe <b>computers</b> that provided low level access to records on peripheral equipment. IOCS provides functionality similar to File Control Processor (FCP) in RCA 3301 Realcom Operating System and GEFRC in GECOS.|$|R
40|$|Comments {{on the use}} of {{computers}} among undergraduate medical students at the Aga Khan University in Pakistan. Familiarity of <b>entry-level</b> students with <b>computer</b> usage; Awareness of the students of the requirements for learning in the computer age; Importance of the ability to use the computer effectively for graduates...|$|R
5000|$|A {{cousin of}} the CoCo, the MC-10, or Micro Color Computer, was sold in Radio Shack stores as an <b>entry-level</b> <b>computer</b> {{at a lower cost}} than the CoCo. Released in 1983, it was similar in {{appearance}} to the Timex Sinclair models. Like the CoCo, it used the MC6847 VDG and Microsoft Basic, but featured the MC6803 instead of the 6809. The MC-10 lacked such features as an 80 column printer and disk storage system, as well as a [...] "real" [...] keyboard. Accordingly, it did not sell well and was withdrawn after just two years of production. An MC-10 clone, the Sysdata Tcolor, was available in Brazil with 16 kB ROM.|$|E
40|$|Design {{patterns}} {{are an important}} element of today’s undergraduate curricula. However, their inherent complexities often make them difficult for entry-level students to even partially grasp. In this paper, we describe the latest in our continuing efforts to build educational materials appropriate for infusing design patterns in <b>entry-level</b> <b>computer</b> science courses...|$|E
40|$|Addressing {{the needs}} of {{students}} in <b>entry-level</b> <b>Computer</b> Science courses, an online social-network-based learning environment, PeerSpace, was successfully developed to enhance student learning and performance. PeerSpace integrates a suite of Web 2. 0 tools that promote student interactions on course-related topics as well as purely social matters. Part of this suite is a practice tool, Preparation Station, developed to strengthen and reinforce students’ grasp of concepts learned in class, to encourage student participation in PeerSpace, and to trigger course-related communication among students. PeerSpace is implemented atop the open-source Elgg social network framework. This paper presents design and implementation details of Preparation Station as well as an assessment of its usefulness and effectiveness...|$|E
40|$|Examines the {{distribution}} of job skills among employees working in the Highlands and Islands. Analyses data from the British Skills Surveys, in particular that carried out in 2006. Explores workers' views on the skills they use at work. Focuses on distribution and trends in: broad skill measures including <b>entry-level</b> qualification; <b>computer</b> skills; generic skills such as communication; and employee task discretion. Examines workers' attitudes towards and experiences of skills acquisition. Investigates which groups of workers deploy which skills and to what extent. Makes comparisons between the Highlands and Islands, elsewhere in Scotland, {{and elsewhere in the}} UK. This report is a companion to the national 'Skills at work in Scotland' report, see B 8086...|$|R
40|$|This paper {{presents}} a CAD (classroom assessment design) of an <b>entry-level</b> undergraduate <b>computer</b> programming course “Computer Programming I”. CAD {{has been the}} product of a long experience in teaching computer programming courses including teaching “Computer Programming I ” 22 times. Each semester, CAD is evaluated and modified for the subsequent semester. The assessment targets have been determined through the course’s objectives and sub-objectives. Consequently, grades that resulted from CAD described how much of the course content students had acquired. Also, technology impacted CAD in several ways, such as using the development tool itself, and/or using an e-learning system. CAD in its current state includes three major categories: appreciation, assignments and exams. All exams have been developed within Bloom’s six-level cognitive hierarchy. This paper includes examples of all assessment tools mentioned above. The main lesson learned is that the more effort is invested in improving CAD, the more useful it becomes...|$|R
5000|$|The Tandy 1000 EX was {{designed}} as an <b>entry-level</b> IBM-compatible personal <b>computer.</b> The EX was a compact computer that had the keyboard and 5.25" [...] floppy drive built into the computer casing. The 5.25" [...] drive was accessible {{on the right-hand side}} of the computer. The EX was marketed as a starter system for people new to computing, and sold for US$1,000.00 from RadioShack in December 1986. The EX and, later, the HX would be among the most popular of the Tandy 1000 line because of their (relatively) low price. The EX doubled the on-board memory to 256 KB.|$|R
40|$|In {{our current}} age of {{technological}} advances, and rising education costs, {{it is becoming}} increasingly beneficial to use technology to aid in education, usually through automated lectures or grading. One missing feature from this automated education is complex grading and problem generation. The main objective of this project is to create a program that can automatically generate and grade problems of varying difficulties based on the topic of programming for loops. The project solution was created as a program designed for use in Dr. Clinton Staley’s Intelligent Homework System, which is used precisely for automated exercise grading and generation. Ultimately, the created program operates as expected, and is capable of generating a limited number of for loop exercises across five different difficulty levels. This project is a nice improvement on current automated exercises that will hopefully improve the understanding of for loops in <b>entry-level</b> <b>computer</b> science students...|$|E
40|$|This {{research}} {{attempts to}} identify the basic <b>entry-level</b> <b>computer</b> skills required of incoming freshman whom have chosen to study visual communication at southeastern Wisconsin postsecondary schools. Consequently, {{the results of this}} study may ultimately be integrated into the visual communications curriculum at Nicolet High School, Glendale, Wisconsin. The purpose of the study is to identify visual communications competencies for Nicolet High Schools visual communication program that will meet the needs of high school seniors planning on attending Wisconsin area technical colleges. This review of literature begins with a brief examination of visual communications as a discipline. Next, it presents an overview of postsecondary visual communication programs inSoutheastern Wisconsin. It will touch on the transition into visual communication-related careers and the application of basic computer mechanics skills- as well as the skills unique to visual communications. Finally, previous postsecondary competency studies will be examined i...|$|E
40|$|Due to the {{scattered}} {{population and the}} political goal of equal right to education, distance education has become popular in Norway. Technological advances have led {{to more and more}} distance education courses being offered via the Internet. In this thesis we focus on internet-based distance education and its characteristics. We examine the benefits and limitations of using distance education compared to traditional education. Also, we examine the effects of distance education and its accompanying teaching aids on education in general. We try to characterise the typical student taking distance education courses and determine what his or her typical needs are. The thesis is based on a survey performed over two semesters among regular students and distance education students in <b>entry-level</b> <b>computer</b> science classes at the University of Oslo. The course design was very similar for both groups of students, with the main exception that the distance education course used slides with accompanying sound recordings in lieu of lectures, and that the distance education students did not participate in group tutoring sessions. We found that the average distance education student worked full time and therefore used less time on studies than the regular students. The distance education courses also had a larger percentage of drop-outs and a slightly higher failing rate on the exams. Furthermore, we found that it was hard to establish communication among the students in the distance education courses, which led to a higher workload for the teaching assistant. The feedback from the students in the distance education courses was generally positive, and they were especially satisfied with the slides with accompanying sound. Several of the distance education students also commented that the freedom in the course design made it suitable for combination with full time work. To conclude, we evaluate the distance education courses and suggest possible changes to their design...|$|E
25|$|In 1997, Jobs {{cancelled}} {{almost all}} of the product lines, and introduced a new product strategy focusing only on desktop and laptop computers for both consumer and professional customer. With the Power Macintosh G3 filling the role of a desktop computer marketed at professional customers, Apple began to focus on an <b>entry-level</b> desktop <b>computer</b> suitable for consumers. The result was the iMac released in 1998, a computer with an innovative design intended to be friendly and easily accessible for average computer users. For the iMac's development, Rubinstein assembled a team and with a deadline of only 11 months (a timeline they considered impossible). The iMac was an immediate success, not only helping to revitalise Apple as a company, but also popularising new technologies at the time, such as USB, which would then go on to become an industry standard. The iMac also shipped without a floppy disk drive (rare for computers of the era), relying solely on the optical drive and new technologies such as USB and Firewire for data transfer. Rubinstein was responsible for both of these decisions.|$|R
40|$|The SimProgramming {{teaching}} {{approach has}} the goal {{to help students}} overcome their learning difficulties in the transition from <b>entry-level</b> to advanced <b>computer</b> programming and prepare them for real-world labour environments, adopting learning strategies. It immerses learners in a businesslike learning environment, where students develop a problem-based learning activity with {{a specific set of}} tasks, one of which is filling weekly individual forms. We conducted thematic analysis of 401 weekly forms, to identify the students’ strategies for self-regulation of learning during assignment. The students are adopting different strategies in each phase of the approach. The early phases are devoted to organization and planning, later phases focus on applying theoretical knowledge and hands-on programming. Based on the results, we recommend the development of educational practices to help students conduct self-reflection of their performance during tasks...|$|R
40|$|Abstract The {{goal of the}} SimProgramming {{approach}} is to help students overcome their learning difficulties in the transition from <b>entry-level</b> to advanced <b>computer</b> programming, developing an appropriate set of learning strategies. We implemented it at the University of Trás-os-Montes e Alto Douro (Portugal), in two courses (PM 3 and PM 4) of the bachelor programmes in Informatics Engineering and ICT. We conducted semi-structured interviews with students (n= 38) {{at the end of}} the courses, to identify the students’ strategies for self-regulation of learning in the assignment. We found that students changed some of their strategies from one course edition to the following one and that changes are related to the SimProgramming approach. We believe that changes to the educational approach were appropriate to support the assignment goals. We recommend applying the SimProgramming approach in other educational contexts, to improve educational practices by including techniques to help students in their learning...|$|R
40|$|This thesis {{investigates the}} impact of {{gamification}} on student motivation and learning in several introductory computer science educational activities. The use of game design techniques in education offers the potential to make learning more motivating and more enjoyable for students. However, the design, implementation, and evaluation of game elements that actually realize this promise remains a largely unmet challenge. This research examines whether the introduction of game elements into curriculum positively impacts student motivation and intended learning outcomes for <b>entry-level</b> <b>computer</b> science education in four settings that apply similar game design techniques in different introductory computer science educational settings. The results of these studies are evaluated using mixed methods to compare the effects of game elements on student motivation and learning in both formal and non-formal learning environments. The first chapter of this thesis introduces {{the focus of the}} research. The second chapter discusses the related work on introductory computer science education and gaming culture. The third chapter introduces the conceptual and theoretical framework that forms the basis of this work. Chapter four introduces the research design. Chapter five presents the first case study, which investigated how a 2 ̆ 2 gamified 2 ̆ 2 class impacts student motivation and learning outcomes in an undergraduate computer science course. Chapter six discusses the second case study, which examined how the design techniques informed by the first case study support high school students learning introductory computer science in an extracurricular program. Chapter seven details the third case study, which examined how game elements influence children learning in a robotics workshop. Chapter eight discusses the final case study, which briefly examined how online tutorial websites facilitate introductory programming through gaming. The final chapter summarizes the key findings and discusses opportunities for future work in gamifying computer science education...|$|E
40|$|Since 1995, the James Irvine Foundation has {{invested}} more than $ 11 million {{to support the}} growth and development of Collaborative Regional Initiatives (CRIs) throughout the state [...] nonprofit organizations that engage key players from business, environmental, {{and a variety of}} other advocacy groups with players from local governments and public agencies to create improvements in their regions. CRIs work on issues ranging across transportation, land use, housing, and economic development. They work in a variety of ways from developing legislation to media campaigns to practical work on particular projects. All are directed at building civic capacity and filling in gaps where government does not or cannot act. Some CRIs have been in place for years; others are more recently formed. They represent experiments in regional governance. The Irvine Foundation tapped a team of Berkeley faculty to perform an assessment of the CRIs so the foundation can target its resources in order to make them effective and sustainable over time and assist them in producing valuable outcomes for their regions. Together the team published case studies of four major CRIs [...] the Bay Area Alliance for Sustainable Communities, Joint Venture: Silicon Valley, the San Diego Dialogue and the Sierra Business Council [...] as well as an analysis of regional workforce development collaboratives in California. The study of regional workforce development collaboratives in California looks at a new approach to the problem of linking economic and workforce development [...] in particular, a theory of change proposed by a group of stakeholders from a variety of sectors (government, foundations, and the workforce development system) in the late 1990 s. To meet the multiple goals of increasing economic opportunity, decreasing poverty, and increasing regional economic competitiveness, these experts advocated a new workforce development system that was collaborative in scope, regional in scale, career-oriented in focus, and data-intensive in strategy. This study examines five cases that broadly follow this model of regional collaboration in order to determine how effective they are at problem-solving. The California Center for Regional Leadership (CCRL), the James Irvine Foundation (JIF), and the California Employment Development Department (EDD) worked with organizations to produce proposals that developed career progressions and identified partners and funding. Four organizations [...] three Collaborative Regional Initiatives (CRIs) and one community college that was formerly part of a CRI [...] were selected in March 2001. Of the CRIs, Fresno Area CRI was to train in occupations related to its water technology cluster; Gateway Cities Partnership (GCP) was to train in logistics; and Orange County Business Council (OCBC) was to train in information technology. Cabrillo College [...] formerly part of a CRI called the Santa Cruz Clusters Project [...] created the Watsonville Digital Bridge Academy (WDBA) also to train in information technology. This study compares these four workforce demonstration projects with another regional workforce development collaborative, the San Francisco Information Technology Consortium (SFITC). SFITC, which is funded in part by the James Irvine Foundation, consists of a network of community-based organizations and community colleges offering <b>entry-level</b> <b>computer</b> training, job placement, upgrade training, and needed social support to current and prospective IT workers. Based on 40 interviews with collaborative leaders and key informants, as well as review of related documents, this study asks whether the CRIs organize problem-solving around workforce development more effectively than do other collaboratives. It finds that regional collaboration is not well suited to addressing both workforce and economic development goals; however, it can make workforce development programs more effective if partners from both inside and outside the current system are engaged in a networked structure with clear roles and responsibilities, as opposed to a collaboration on paper. The report looks first at how organization structure (origin, mission, and organization), economic development focus, program design, and collaborative style shape program and other outcomes such as adaptiveness, ability to mobilize resources, and system change. A final section addresses the potential for sustainability of these workforce development innovations and the policy implications that emerge from the comparison of collaboratives...|$|E
50|$|In the 1970s, Burroughs Corporation was {{organized}} into three divisions {{with very different}} product line architectures for high-end, mid-range, and <b>entry-level</b> business <b>computer</b> systems. Each division's product line grew from a different concept for how to optimize a computer's instruction set for particular programming languages.The Burroughs Large Systems Group designed large mainframes using stack machine instruction sets with dense syllables and 48-bit data words. The first such design was the B5000 in 1961. It was optimized for running ALGOL 60 extremely well, using simple compilers. It evolved into the B5500. Subsequent major redesigns include the B6500/B6700 line and its successors, and the separate B8500 line. 'Burroughs Large Systems' referred {{to all of these}} product lines together, in contrast to the COBOL-optimized Medium Systems (B2000, B3000, B4000) or the flexible-architecture Small Systems (B1000). Founded in the 1880s, Burroughs was the oldest continuously operating entity in computing, but by the late 1950s its computing equipment was still limited to electromechanical accounting machines such as the Sensimatic; as such it had nothing to compete with its traditional rivals IBM and NCR who had started to produce larger-scale computers, or with recently founded Univac. While in 1956 it branded as the B205 a machine produced by a company it bought, its first internally developed machine, the B5000, was designed in 1961 and Burroughs sought to address its late entry in the market with the strategy of a completely different design based on the most advanced computing ideas available at the time. While the B5000 architecture is dead, it inspired the B6500 (and subsequent B6700 & B7700). Computers using that architecture are still in production as the Unisys ClearPath Libra servers which run an evolved but compatible version of the MCP operating system first introduced with the B6700. The third and largest line, the B8500, had no commercial success. In addition to a proprietary CMOS processor design Unisys also uses Intel Xeon processors and runs MCP, Microsoft Windows and Linux operating systems on their Libra servers.|$|R
40|$|The Structure and Interpretation of Computer Programs" is the <b>entry-level</b> {{subject in}} <b>Computer</b> Science at the Massachusetts Institute of Technology. It is {{required}} of all students at MIT who major in Electrical Engineering or in Computer Science, as one fourth of the "common core curriculum," which also includes two subjects on circuits and linear systems and a subject {{on the design of}} digital systems. We {{have been involved in the}} development of this subject since 1978, and we have taught this material in its present form since the fall of 1980 to approximately 600 students each year. Most of these students have had little or no prior formal training in computation, although most have played with computers a bit and a few have had extensive programming or hardware design experience. Our design of this introductory Computer Science subject reflects two major concerns. First we want to establish the idea that a computer language is not just a way of getting a computer to perform operations, but rather that it is a novel formal medium for expressing ideas about methodology. Thus, programs must be written for people to read, and only incidentally for machines to execute. Secondly, we believe that the essential material to be addressed by a subject at this level, is not the syntax of particular programming language constructs, nor clever algorithms for computing particular functions of efficiently, not even the mathematical analysis of algorithms and the foundations of computing, but rather the techniques used to control the intellectual complexity of large software systems...|$|R
40|$|Trabalho apresentado em PAEE/ALE’ 2016, 8 th International Symposium on Project Approaches in Engineering Education (PAEE) and 14 th Active Learning in Engineering Education Workshop (ALE) To help {{students}} overcome their learning {{difficulties in the}} transition from <b>entry-level</b> to advanced <b>computer</b> programming, developing an appropriate set of learning strategies, the SimProgramming teaching approach has been adopted at the University of Trás-os-Montes e Alto Douro (Portugal). This approach is based on four conceptual foundations: businesslike learning environment, self-regulated learning, co-regulated learning, and formative assessment. In this approach the students develop an activity based on problem-based learning, with {{a specific set of}} tasks based on those four conceptual foundations. The approach was implemented in two courses from the second and third curricular years of the bachelor programmes in Informatics Engineering and Information & Communication Technologies. We conducted semi-structured interviews with students (n= 32) {{at the end of the}} courses, to try to identify the students’ strategies for self-regulation of learning in the activity developed within the SimProgramming approach. The main strategies identified were: organization, planning, time management, identification of difficulties, resolution of the difficulties encountered, work review, identification of the factors that influenced their motivation, and structure of the environment. The factors influencing the motivation most often identified by students were the impact of the assessment in the final course grade, the completion of the course, learning, skills development, and teamwork. Generally, students applied strategies to solve the difficulties, in particular by searching for social help and information search. Procrastination was also often identified by students. Strategies of time management, transformation of information, in-depth review, self-reflection, and self-evaluation were referenced scantily. We found that students changed some of their strategies from one course edition to the next. We conclude by recommending the development of educational practices to {{help students}} review their work, treat and process the information they find, conduct self-reflection and self-evaluation of their performance during tasks, adopt concentration strategies, and become aware of their specific difficulties...|$|R
40|$|Conferência realizada em Valência de 7 - 9 de março de 2016 Computer {{programming}} {{courses in}} higher education tend to have high rates of academic failure and students struggle, particularly so in the transition from entry-level programming to advanced programming. Some of the reasons given in the literature relate {{to the type of}} teaching approach and the strategies used by students and their attitudes towards computer programming. The literature also mentions that educational approaches are not always appropriate to the needs of students and to the development of skills required in the job market. We developed a teaching approach to try to address some of these issues and support students learning computer programming in the transition from <b>entry-level</b> to advanced <b>computer</b> programming: the SimProgramming approach. This approach was introduced at the University of Trás-os-Montes e Alto Douro (Portugal), within the scope of the course “Programming Methodologies III”, part of the second curricular year of the programmes of studies in Informatics Engineering and in Information & Communication Technologies. We present in detail the origins of the SimProgramming approach, starting from the first trials that introduced, in two iterations, learning activities based on problem-based learning, and up to the third iteration where the current SimProgramming approach was implemented. We describe the reasoning, design and implementation of these three iterations, to show how the approach evolved. The SimProgramming approach is based in four conceptual foundations: business-like learning environment, self-regulated learning, co-regulated learning and formative assessment. For each of these conceptual foundations, we explain the teaching strategies adopted. In SimProgramming, the learning activity process develops in four phases, and students have specific tasks in each phase. We analyse interview data regarding student perceptions about the SimProgramming approach, and registration grids data on team work dynamics and final assessment of the assignment, noting the impact of SimProgramming in student grades. The application of SimProgramming revealed promising evidences in the overall results of student learning in the activities proposed in this approach. The average grades improved, and did the number of students regularly submitting their tasks on schedule. The perceptions of students regarding the SimProgramming approach are very positive: they recommend using it in the following years, and provided some suggestions to improve the approach. We conclude with reflections and recommendations for subsequent development of the SimProgramming approach in its application to the teaching of computer programming and potential for using it in other educational contexts. FC...|$|R

