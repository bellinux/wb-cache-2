450|364|Public
25|$|Polymerase ε (Pol ε): Highly processive and has proofreading, 3'->5' {{exonuclease}} activity. Highly {{related to}} pol δ, in vivo it functions mainly in <b>error</b> <b>checking</b> of pol δ.|$|E
25|$|Final checking: Since {{errors are}} expensive, time {{consuming}} {{and hard to}} spot, extensive <b>error</b> <b>checking</b> is the rule, making sure the mapping to logic was done correctly, and checking that the manufacturing rules were followed faithfully.|$|E
25|$|Mitochondrial DNA {{mutations}} occur frequently, due to {{the lack}} of the <b>error</b> <b>checking</b> capability that nuclear DNA has (see Mutation rate). This means that mitochondrial DNA disorders may occur spontaneously and relatively often. Defects in enzymes that control mitochondrial DNA replication (all of which are encoded for by genes in the nuclear DNA) may also cause mitochondrial DNA mutations.|$|E
5000|$|... 2014 Release Omnis Studio 6.1 {{includes}} Native JavaScript components, {{tool for}} {{adapting to the}} different resolution for desktop and mobile devices, support for REST web services for server and client, 64 bit, improved JavaScript performance, <b>error</b> <b>check</b> for client-side methods ...|$|R
40|$|Abstract—This paper proposes an {{algebraic}} decoding algorithm for the (41, 21, 9) quadratic residue code via Lagrange {{interpolation formula}} to determine <b>error</b> <b>check</b> and <b>error</b> locator polynomials. Programs written in C++ language have been executed to <b>check</b> every possible <b>error</b> pattern of this quadratic residue code...|$|R
40|$|The {{basic design}} and test {{phases of the}} digital {{stabilizer}} for the ground vehicle are considered. The results of the stabilizer operation modes and checks simulation are represented. The algorithm of the stabilized dynamic <b>error</b> <b>check</b> by the software tools is suggested. The basic trends of the stabilizer development are defined...|$|R
25|$|In system {{programming}}, often limited programming {{facilities are}} available. The use of automatic garbage collection is not common and debugging is {{sometimes hard to}} do. The runtime library, if available at all, is usually far less powerful, and does less <b>error</b> <b>checking.</b> Because of those limitations, monitoring and logging are often used; operating systems may have extremely elaborate logging subsystems.|$|E
25|$|The Burroughs/Unisys APLB {{interpreter}} (1982) was {{the first}} to use dynamic incremental compilation to produce code for an APL-specific virtual machine. It recompiled on-the-fly as identifiers changed their functional meanings. In addition to removing parsing and some <b>error</b> <b>checking</b> from the main execution path, such compilation also streamlines the repeated entry and exit of user-defined functional operands. This avoids the stack setup and take-down for function calls made by APL's built-in operators such as Reduce and Each.|$|E
25|$|Viruses in the Paramyxoviridae {{family are}} also antigenically stable, {{meaning that the}} glycoproteins on the viruses are {{consistent}} between different strains of the same type. There are two reasons for this phenomenon. The first is that the genome is non-segmented and thus cannot undergo genetic reassortment. In order for this process to occur, segments are needed as reassortment happens when segments from different strains are mixed {{together to create a}} new strain. With no segments, nothing can be mixed with one another and so there is no antigenic shift. The second reason relates to the idea of antigenic drift. Since RNA dependent RNA polymerase does not have an <b>error</b> <b>checking</b> function, many mutations are made when the RNA is processed. These mutations build up and eventually new strains are created. Due to this concept, one would expect that paramyxoviruses should not be antigenically stable; however, the opposite is seen to be true. The main hypothesis behind why the viruses are antigenically stable is that each protein and amino acid has an important function. Thus, any mutation would lead to a decrease or total loss of function, which would in turn cause the new virus to be less efficient. These viruses {{would not be able to}} survive as long compared to the more virulent strains, and so would die out.|$|E
40|$|Description Usability wrapper around {{snow for}} easier {{development}} of parallel R programs. This package offers e. g. extended <b>error</b> <b>checks,</b> and additional functions. All functions work in sequential mode, too, if no cluster is present or wished. Package is also designed as connector to the cluster management tool sfCluster, {{but can also}} used without it...|$|R
40|$|NEW FEATURES Print {{simulation}} {{number and}} prevalence value for static network plots in print. netsim when sims is mean, min, or `max. BUG FIXES Add new line {{at end of}} print. coefdiss output. Tighten the default ylim ranges for plot. netsim OTHER Include <b>error</b> <b>check</b> for duration < 1 in dissolution_coefs. Update documentation {{in a number of}} places...|$|R
50|$|This {{level is}} in charge of {{transferring}} data between systems in a network, using network-layer addresses of machines to keep track of destinations and sources. This layer uses routers and switches to manage its traffic (control flow control, <b>error</b> <b>check,</b> routing etc.)So here it takes all routing decisions, it deals with end to end data transmission.|$|R
500|$|C# has {{the ability}} to utilize LINQ through the Microsoft.NET Framework with the IEnumerable Interface a {{developer}} can query any [...]NET collection class, XML documents, ADO.NET datasets, and SQL databases. [...] There are some advantages to using LINQ in C# and they are as follows: [...] intellisense support, strong filtering capabilities, type safety with compile <b>error</b> <b>checking</b> ability, and brings consistency for querying data over a variety of sources. [...] There are several different language structures that can be utilized with C# with LINQ and they are query expressions, lambda expressions, anonymous types, implicitly typed variables, extension methods, and object initializers.|$|E
2500|$|New {{addressing}} schemes ("bank grouping", [...] {{to replace}} , , and [...] commands, PAR and [...] for <b>error</b> <b>checking</b> and [...] for data bus inversion); ...|$|E
2500|$|C {{supports}} various {{means of}} <b>error</b> <b>checking,</b> but generally {{is not considered}} to support [...] "exception handling," [...] although the setjmp and longjmp standard library functions {{can be used to}} implement exception semantics.|$|E
40|$|International audienceThis paper {{considers}} antenna selection (AS) at {{a receiver}} equipped with multiple antenna elements {{but only a}} single radio frequency chain for packet reception. As information about the channel state is acquired using training symbols (pilots), the receiver makes its AS decisions based on noisy channel estimates. Additional {{information that can be}} exploited for AS includes the time-correlation of the wireless channel and the results of the link-layer <b>error</b> <b>checks</b> upon receiving the data packets. In this scenario, the task of the receiver is to sequentially select (a) the pilot symbol allocation, i. e., how to distribute the available pilot symbols among the antenna elements, for channel estimation on each of the receive antennas; and (b) the antenna to be used for data packet reception. The goal is to maximize the expected throughput, based on the past history of allocation and selection decisions, and the corresponding noisy channel estimates and <b>error</b> <b>check</b> results. Since the channel state is only partially observed through the noisy pilots and the <b>error</b> <b>checks,</b> the joint problem of pilot allocation and AS is modeled as a partially observed Markov decision process (POMDP). The solution to the POMDP yields the policy that maximizes the long-term expected throughput. Using the Finite State Markov Chain (FSMC) model for the wireless channel, the performance of the POMDP solution is compared with that of other existing schemes, and it is illustrated through numerical evaluation that the POMDP solution signiﬁcantly outperforms them...|$|R
40|$|Syntax {{analysis}} This module {{contains a}} syntax analyser generator. Sa. gen = proc (options, input. pack, <b>error.</b> pack PStypes, <b>check.</b> types, lex. generator-> proc (symbol. table-> PAIL or <b>error.</b> pack)) Type <b>checking</b> This module {{does all the}} non-applicative type checking- that is type checking which may cause a type error to occur. Type. gen = proc (<b>error.</b> pack,PStypes-> <b>check.</b> types) structure check. types (proc (pntr) Bad. type; proc (pntr,pntr) Bad. types,Match; proc (pntr-> pntr) Int. real...|$|R
40|$|Abstract—This paper {{considers}} antenna selection (AS) at {{a receiver}} equipped with multiple antenna elements {{but only a}} single radio frequency chain for packet reception. As information about the channel state is acquired using training symbols (pilots), the receiver makes its AS decisions based on noisy channel estimates. Additional {{information that can be}} exploited for AS includes the time-correlation of the wireless channel and the results of the link-layer <b>error</b> <b>checks</b> upon receiving the data packets. In this scenario, the task of the receiver is to sequentially select (a) the pilot symbol allocation, i. e., how to distribute the available pilot symbols among the antenna elements, for channel estimation on each of the receive antennas; and (b) the antenna to be used for data packet reception. The goal is to maximize the expected throughput, based on the past history of allocation and selection decisions, and the corresponding noisy channel estimates and <b>error</b> <b>check</b> results. Since the channel state is only partially observed through the noisy pilots and the <b>error</b> <b>checks,</b> the joint problem of pilot allocation and AS is modeled as a partially observed Markov decision process (POMDP). The solution to the POMDP yields the policy that maximizes the long-term expected throughput. Using the Finite State Markov Chain (FSMC) model for the wireless channel, the performance of the POMDP solution is compared with that of other existing schemes, and it is illustrated through numerical evaluation that the POMDP solution significantly outperforms them. Index Terms—Antenna selection, pilot allocation, POMDP, FSM...|$|R
2500|$|Alternative {{approaches}} to exception handling in software are <b>error</b> <b>checking,</b> which maintains normal program flow with later explicit checks for contingencies reported using special return values or some auxiliary global {{variable such as}} C's [...] or floating point status flags; or input validation to preemptively filter exceptional cases.|$|E
2500|$|Data {{is stored}} {{on a hard}} drive {{in a series of}} logical blocks. [...] Each block is delimited by markers {{identifying}} its start and end, error detecting and correcting information, and space between blocks to allow for minor timing variations. [...] These blocks often contained 512 bytes of usable data, but other sizes have been used. [...] As drive density increased, an initiative known as Advanced Format extended the block size to 4096 bytes of usable data, with a resulting significant reduction in the amount of disk space used for block headers, <b>error</b> <b>checking</b> data, and spacing.|$|E
2500|$|Disk {{formatting}} {{is usually}} {{done by a}} utility program supplied by the computer OS manufacturer; generally, it sets up a file storage directory system on the disk, and initializes its sectors and tracks. Areas of the disk unusable for storage due to flaws can be locked (marked as [...] "bad sectors") so that the operating system does not attempt to use them. This was time consuming so many environments had quick formatting which skipped the <b>error</b> <b>checking</b> process. When floppy disks were often used, disks pre-formatted for popular computers were sold. The unformatted capacity of a floppy disk {{does not include the}} sector and track headings of a formatted disk; the difference in storage between them depends on the drive's application. Floppy disk drive and media manufacturers specify the unformatted capacity (for example, 2 MB for a standard 3½-inch HD floppy). It is implied that this should not be exceeded, since doing so will most likely result in performance problems. DMF was introduced permitting 1.68 MB to fit onto an otherwise standard 3½-inch disk; utilities then appeared allowing disks to be formatted as such.|$|E
40|$|This paper {{describes}} an {{implementation of the}} new Scheme multiple values interface. The implementation handles multiple values efficiently, with no run-time overhead for normal calls and returns. <b>Error</b> <b>checks</b> are performed where necessary {{to insure that the}} expected number of values is returned in all situations. The implementation fits cleanly with our direct-style compiler and stack-based representation of control, but is equally well suited to continuation-passing style compilers and to heap-based run-time architectures. ...|$|R
40|$|Custom {{and system}} SAS ® macros are toolsets that are {{intended}} to contribute to daily activities. Many macros have evolved through personal or project libraries from that simple shortcut to a de facto standard. The amount of error chasing can be exceedingly cryptic and unnecessarily painful as that input parameter or data set is not just as intended. We consider very simple techniques and examples for <b>error</b> <b>checks</b> that are quick and easy to implement in any SAS macro...|$|R
5000|$|Modbus RTU — This {{is used in}} serial {{communication}} and makes use of a compact, binary representation of the data for protocol communication. The RTU format follows the commands/data with a cyclic redundancy check checksum as an <b>error</b> <b>check</b> mechanism to ensure the reliability of data. Modbus RTU {{is the most common}} implementation available for Modbus. A Modbus RTU message must be transmitted continuously without inter-character hesitations. Modbus messages are framed (separated) by idle (silent) periods.|$|R
2500|$|Scientists often {{look for}} Fermi {{estimates}} of {{the answer to a}} problem before turning to more sophisticated methods to calculate a precise answer. This provides a useful check on the results. While the estimate is almost certainly incorrect, it is also a simple calculation that allows for easy <b>error</b> <b>checking,</b> and to find faulty assumptions if the figure produced is far beyond what we might reasonably expect. By contrast, precise calculations can be extremely complex but with the expectation that the answer they produce is correct. The far larger number of factors and operations involved can obscure a very significant error, either in mathematical process or in the assumptions the equation is based on, but the result may still be assumed to be right because it has been derived from a precise formula that is expected to yield good results. Without a reasonable frame of reference to work from it is seldom clear if a result is acceptably precise or is many degrees of magnitude (tens or hundreds of times) too big or too small. The Fermi estimation gives a quick, simple way to obtain this frame of reference for what might reasonably be expected to be the answer, giving context to the results.|$|E
5000|$|... "Data link {{arrangement}} with <b>error</b> <b>checking</b> and retransmission control".|$|E
50|$|This {{procedure}} {{simplifies the}} quality of service negotiation and provides a simpler method of <b>error</b> <b>checking.</b>|$|E
40|$|Modern {{methods of}} {{encoding}} information into digital form include <b>error</b> <b>check</b> digits that are {{functions of the}} other information digits. When digital information is transmitted, {{the values of the}} <b>error</b> <b>check</b> digits can be computed from the information digits to determine whether the information has been received accurately. These error correcting codes make it possible to detect and correct common errors in transmission. The sequence of bases in DNA is also a digital code consisting of four symbols: A, C, G, and T. Does DNA also contain an error correcting code? Such a code would allow repair enzymes to protect the fidelity of nonreplicating DNA and increase the accuracy of replication. If a linear block error correcting code is present in DNA then some bases would be a linear function of the other bases in each set of bases. We developed an efficient procedure to determine whether such an error correcting code is present in the base sequence. We illustrate the use of this procedure by using it to analyze the lac operon and the gene for cytochrome c. These genes do not appear to contain such a simple error correcting code...|$|R
30|$|GTX 680 {{does not}} have ECC (<b>Error</b> <b>Check</b> and Correct) memories. However, {{as we will see}} later, we do not observe any large energy error in any of our runs, which means the {{hardware}} error does not affect our result. Betz et al. (2014) performed Molecular Dynamics simulations, in order to investigate the rate of bit-flip error events. They observed a single bit-flip error event in about 4, 700 GPU*hours without ECC and conclude that the bit-flip error is exceedingly rare.|$|R
40|$|Major Improvements Created code to {{automatically}} update CmdStan and MatlabProcessManager {{to the latest}} versions tested using the toolbox (updating MatlabStan currently not supported) Created code {{to automatically}} update versions of this toolbox Added option to view trace plots to verify convergence of chains and stability of estimates Added feature to select only a subset of groups and/or events to process Minor Improvements Added <b>error</b> <b>checks</b> for missing cells and for participants not having data for each event type Additional changes are documented in Version Histor...|$|R
50|$|Partly {{because of}} the use of an MP4 container, Apple Lossless does not contain {{integrated}} <b>error</b> <b>checking.</b>|$|E
5000|$|Two bi bits: 0 5 {{and five}} quinary bits: 0 1 2 3 4, with <b>error</b> <b>checking.</b>|$|E
50|$|Sum {{is useful}} for <b>error</b> <b>checking.</b> In a column, all numbers should add up to the sum shown.|$|E
40|$|This {{paper is}} freely {{available}} online under the BMJ Journals unlocked scheme, see <b>Error</b> <b>check</b> web site Background Occupational risks for bladder cancer in hairdressers by using hair products {{have been examined}} in many epidemiological studies. But owing to small sample sizes of the studies and the resulting lack of statistical power, {{the results of these}} studies have been inconsistent and significant associations have rarely been found. Methods We conducted a meta-analysis to determine summary risk ratios (SRRs) for the risk of bladder cance...|$|R
40|$|Previous {{spreadsheet}} inspection {{experiments have}} had human subjects look for seeded errors in spreadsheets. In this study, subjects attempted to find errors in human-developed spreadsheets {{to avoid the}} potential artifacts created by error seeding. Human subject success rates were compared to the successful rates for error-flagging by spreadsheet static analysis tools (SSATs) applied to the same spreadsheets. The human error detection results were {{comparable to those of}} studies using error seeding. However, Excel <b>Error</b> <b>Check</b> and Spreadsheet Professional were almost useless for correctly flagging natural (human) errors in this study. Comment: 14 Pages, 4 Figure...|$|R
40|$|FADI is a {{complete}} programming environment that serves the reliable execution of distributed application programs. FADI encompasses all aspects of modern fault-tolerant distributed computing. The built-in user-transparent error detection mechanism covers processor node crashes and hardware transient failures. The mechanism also integrates user-assisted <b>error</b> <b>checks</b> into the system failure model. The nucleus non-blocking checkpointing mechanism combined with a novel selective message logging technique delivers an efficient, low-overhead backup and recovery mechanism for distributed processes. FADI also provides means for remote automatic process allocation on the distributed system nodes...|$|R
