18|4570|Public
5000|$|<b>Function</b> <b>block</b> <b>diagrams,</b> used in {{programmable}} logic controllers ...|$|E
5000|$|FBD - <b>Function</b> <b>Block</b> <b>Diagrams</b> (a {{programming}} {{language in the}} IEC 61131 standard) ...|$|E
50|$|As {{microprocessors}} {{have become}} more powerful, notations such as sequential function charts and <b>function</b> <b>block</b> <b>diagrams</b> can replace ladder logic for some limited applications. Some newer PLCs may have {{all or part of}} the programming carried out in a dialect that resembles BASIC , C, or other programming language with bindings appropriate for a real-time application environment.|$|E
25|$|Specific <b>function</b> <b>block</b> <b>diagram</b> are {{the classic}} Functional Flow <b>Block</b> <b>Diagram,</b> and the <b>Function</b> <b>Block</b> <b>Diagram</b> (FBD) {{used in the}} design of {{programmable}} logic controllers.|$|R
40|$|International audienceAfter having sketched the {{different}} techniques enabling to check properties of Discrete Event Systems control software, we present {{in this article}} a formal method for IEC 61499 <b>function</b> <b>blocks</b> <b>diagrams</b> verification. This method {{is based on a}} formal representation of the behaviour of <b>function</b> <b>blocks</b> <b>diagrams</b> and takes benefit of verification tools developed from the SIGNAL synchronous language...|$|R
5000|$|FBD (<b>function</b> <b>block</b> <b>diagram)</b> {{enables the}} user to rapidly program both Boolean and {{analogue}} expressions ...|$|R
5000|$|More recently, PLCs are {{programmed}} using {{application software}} on personal computers, which now represent the logic in graphic form instead of character symbols. The computer {{is connected to}} the PLC through USB, Ethernet, RS-232, RS-485, or RS-422 cabling. The programming software allows entry and editing of the ladder-style logic. In some software packages, it is also possible to view and edit the program in <b>function</b> <b>block</b> <b>diagrams,</b> sequence flow charts and structured text. Generally the software provides functions for debugging and troubleshooting the PLC software, for example, by highlighting portions of the logic to show current status during operation or via simulation. The software will upload and download the PLC program, for backup and restoration purposes. In some models of programmable controller, the program is transferred from a personal computer to the PLC through a programming board which writes the program into a removable chip such as an EPROM ...|$|E
40|$|Abstract. Good {{methods are}} needed to specify, test, and debug material-handling control ogic. This article surveys a number of {{representative}} methods for defining and describing control algorithms for programmable material-handling equipment used in flexible manufacturing systems. The methods are evaluated {{with regard to their}} suitability for communication between people and as bases for interfaces to automatic program generators. It is concluded that no single method is entirely satisfactory. Three methods (position diagrams, <b>function</b> <b>block</b> <b>diagrams,</b> and operation etworks) have potential to be combined into an effective hybrid approach that minimizes the need for the user to switch between various conceptual models. Key Words: material handling, control algorithms, position diagrams, <b>function</b> <b>block</b> <b>diagrams,</b> operation etworks I. Control software in the flexible manufacturing system life cycle One of the major hindrances to realizing the potential benefits of flexible manufacturing system (FMSs) is the difficulty of developing the control software that they require. The problem of specifying and developing control software is present throughout the life cycle of the FMS, during its design and implementation, and whenever modifications are made or new components are added. According to a recent Society of Manufacturing Engineers Blue Book (CASA/SME 1988) ...|$|E
40|$|In {{this paper}} it is {{proposed}} a discrete event control system representation methodology to design, implement and operate sequential systems, {{as an alternative}} to the sequential function chart (SFC) description method. Such method uses the standard language ST (structured text) of the IEC 61131 - 3 associated to the standard language developed by the Foundation Fieldbus, by associating ST based descriptions language to some function blocks on the basis of a continuous function charts (CFC) or <b>function</b> <b>block</b> <b>diagrams</b> (FBD...|$|E
5000|$|<b>Function</b> <b>Block</b> <b>Diagram</b> (FBD) - Graphical {{representation}} of the automation task with symbols to DIN 40700/ DIN 40719.|$|R
50|$|Many {{specific}} types of functional <b>block</b> <b>diagrams</b> have emerged. For example, the functional flow <b>block</b> <b>diagram</b> {{is a combination of}} the functional <b>block</b> <b>diagram</b> and the flow chart. Many software development methodologies are built with specific functional <b>block</b> <b>diagram</b> techniques. An example from the field of industrial computing is the <b>Function</b> <b>Block</b> <b>Diagram</b> (FBD), a graphical language for the design of programmable logic controllers.|$|R
50|$|IEC 61131-3 {{currently}} defines five programming languages for programmable control systems: <b>function</b> <b>block</b> <b>diagram</b> (FBD), {{ladder diagram}} (LD), structured text (ST; {{similar to the}} Pascal programming language), instruction list (IL; similar to assembly language), and sequential function chart (SFC). These techniques emphasize logical organization of operations.|$|R
40|$|A FORTRAN digital {{computer}} program which performs the general analysis of linearized control systems is described. State variable techniques {{are used to}} analyze continuous, discrete, and sampled data systems. Analysis options include the calculation of system eigenvalues, transfer functions, root loci, root contours, frequency responses, power spectra, and transient responses for open- and closed-loop systems. A flexible data input format allows the user to define systems {{in a variety of}} representations. Data may be entered by inputing explicit data matrices or matrices constructed in user written subroutines, by specifying transfer <b>function</b> <b>block</b> <b>diagrams,</b> or by using a combination of these methods...|$|E
40|$|Abstract: 2 ̆ 2 Function {{logic and}} <b>function</b> <b>block</b> <b>diagrams</b> have been {{successfully}} employed in preliminary and conceptual design processes for several decades. This paper describes a computational model of this process with extensions of the manual approach. It provides for a systematic identification and definition of form and function variables and identifies a three-level function/allocation/component information structure to represent {{the state of the}} design. We outline the inputs, outputs and operations on the form and function variables as a key step prior to the synthesis process. We also illustrate by example how to transfer functional designs across specialist domains. 2 ̆...|$|E
40|$|Good {{methods are}} needed to specify, test, and debug material-handling control logic. This article surveys a number of {{representative}} methods for defining and describing control algorithms for programmable material-handling equipment used in flexible manufacturing systems. The methods are evaluated {{with regard to their}} suitability for communication between people and as bases for interfaces to automatic program generators. It is concluded that no single method is entirely satisfactory. Three methods (position diagrams, <b>function</b> <b>block</b> <b>diagrams,</b> and operation networks) have potential to be combined into an effective hybrid approach that minimizes the need for the user to switch between various conceptual models...|$|E
50|$|The <b>Function</b> <b>Block</b> <b>Diagram</b> (FBD) is a {{graphical}} {{language for}} {{programmable logic controller}} design, that can describe the function between input variables and output variables. A function {{is described as a}} set of elementary blocks. Input and output variables are connected to blocks by connection lines.|$|R
50|$|<b>Function</b> <b>Block</b> <b>Diagram</b> {{is one of}} five {{languages}} for logic {{or control}} configuration supported by standard IEC 61131-3 for a control system such as a Programmable Logic Controller (PLC) or a Distributed Control System (DCS). The other supported languages are ladder logic, sequential function chart, structured text, and instruction list.|$|R
40|$|Model {{checking}} {{is often}} applied to verify safety-critical software implemented in {{programmable logic controller}} (PLC) language such as a <b>function</b> <b>block</b> <b>diagram</b> (FBD). Counter-examples generated by a model checker are often too lengthy and complex to analyze. This paper describes the FBDVerifier which allows domain experts to perform automated model checking and intuitiv...|$|R
40|$|Currently {{there is}} a wide variety of logic control design methodologies used in {{industrial}} logic design. These methodologies include ladder diagrams, <b>function</b> <b>block</b> <b>diagrams,</b> sequential function charts, and flow charts, but driven by a desire for verifiability, academics are developing additional logic control design methodologies, such as modular finite state machines and Petri nets. Using these, important properties of programs can be verified and some logic can be generated automatically from a part plan. The main contribution {{of this paper is to}} define methods for measuring programs written in different methodologies, so that the performance of the methodologies can be compared...|$|E
40|$|Abstract: To {{enable the}} {{description}} of safety-related software, the Unified Modeling Language is provided with well proven constructs as found, e. g., in corresponding subsets of the real-time programming language PEARL and in <b>Function</b> <b>Block</b> <b>Diagrams</b> according to IEC 61131 - 3. These constructs are ordered in nested sets to fulfill the respective requirements of the four Safety Integrity Levels of IEC 61508. By adding to UML safety elements oriented at the prevailing safety standards, UML can be employed to design dependability structures for safety-critical systems. The safety elements are described in UML notations, and collected in a profile which {{can be incorporated into}} models of safety-related embedded real-time control systems. ...|$|E
40|$|A visual {{programming}} system is described {{that allows the}} modeler full flexibility in defining {{the behavior of a}} manufacturing system simulation model. Decision-making behavior of objects in the simulation can be viewed by watching an animation of the system layout, viewing <b>function</b> <b>block</b> <b>diagrams</b> of rules that govern behavior, or noting the progress of an object in carrying out sequences of activities that are pictured as operation networks. Rules, elemental operations and operation networks are structured and associated with particular objects, groups of objects, and locations on the manufacturing system layout. The objective of this system is to reduce the time and expense required to construct and modify models, given that manufacturing system data have been collected...|$|E
50|$|An {{example of}} this is the <b>function</b> <b>block</b> <b>diagram,</b> one of five {{programming}} languages defined in part 3 of the IEC 61131 (see IEC 61131-3) standard that is highly formalized (see formal system), with strict rules for how diagrams are to be built. Directed lines are used to connect input variables to block inputs, and block outputs to output variables and inputs of other blocks.|$|R
40|$|Abstract: 2 ̆ 2 Function logic {{has been}} an {{effective}} approach to improved preliminary and conceptual design for several decades. This paper describes a computer-based <b>function</b> <b>block</b> <b>diagram</b> development tool to aid a designer {{in the practice of}} preliminary design and analysis. Its functions include assistance in the identification and the definition of main and secondary functions, identifying links between interrelated functions, and automatic generation of functional <b>block</b> <b>diagrams</b> for the developing system. Limitations of the function logic method and the tool are discussed. 2 ̆...|$|R
40|$|In this master thesis we {{investigated}} {{whether it is}} possible to use automatically generated C code from <b>Function</b> <b>Block</b> <b>Diagram</b> models as an input to the CPAchecker model checker in order to generate automated test cases. <b>Function</b> <b>Block</b> <b>Diagram</b> is a non-executable programming and modeling language. Consequently, we need to transform this language to an executable language that can be model checked. A tool that achieves this is the MITRAC tool, a proprietary development tool used in the embedded system domain, for engineering programmable logic controllers. The purpose of this research was to investigate to what extent the generated C code using MITRAC can be reused as an input to the CPAchecker tool for automated test case generation. In order to achieve this we needed to perform certain transformations steps on the existing code. In addition, necessary instrumentations were needed in order to trigger CPAtiger, an extension of CPAchecker which generates test cases, to achieve maximum condition coverage. We showed that by performing the required modifications it is feasible to reuse the generated C code as an input to CPAchecker tool. We also showed an approach for mapping the generated test cases with the actual <b>Function</b> <b>Block</b> <b>Diagram.</b> We performed mutation analysis in order to evaluate the quality of the generated test cases {{in terms of the number}} of injected faults they detect. Test case generation with CPAchecker could be improved in the future in terms of reducing the number of transformations and instrumentations that are currently needed. In order to achieve this we need to add to CPAchecker tool support for structures that are used in C, such as structs. Finally we can extend the type of logic coverage criteria we can use with CPAchecker by adding additional support of FQL language...|$|R
40|$|Many {{applications}} in the industrial control domain are safety-critical. A large number of analysis techniques to guarantee safety may be applied at different levels in the development process of a Programmable Logic Controller. The development process is typically associated with a tool chain comprising model transformations. The preservation of safety properties in model transformations is necessary to achieve a safe system. Preservation can be guaranteed by showing that invariants are preserved by transformations. Adequate transformation rules and invariant specification mechanisms are needed for this. We report on a transformation from Sequential Function Charts and <b>Function</b> <b>Block</b> <b>Diagrams</b> of the IEC 61131 - 3 standard to BIP. Our presentation features a description of formal syntax and semantics of the involved languages. We present transformation rules for generating BIP code out of IEC 61131 - 3 specifications. Based on this, we establish a notion of invariant preservation between the two languages...|$|E
40|$|Software {{safety for}} nuclear reactor {{protection}} systems (RPSs) {{is the most}} important requirement for the obtainment of permission for operation and export from government authorities, which is why it should be managed with well-experienced software development processes. The RPS software is typically modeled with <b>function</b> <b>block</b> <b>diagrams</b> (FBDs) in the design phase, and then mechanically translated into C programs in the implementation phase, which is finally compiled into executable machine codes and loaded on RPS hardware – PLC (Programmable Logic Controller). Whereas C Compilers are fully-verified COTS (Commercial Off-The-Shelf) software, translators from FBDs to C programs are provided by PLC vendors. Long-term experience, experiments and simulations have validated their correctness and function safety. This paper proposes a behavior-preserving translation from FBD design to C implementation for RPS software. It includes two sets of translation algorithms and rules as well as a prototype translator. We used an example of RPS software in a Korean nuclear power plant to demonstrate the correctness and effectiveness of the proposed translation...|$|E
40|$|Programmable Logic Controllers, PLCs, used {{to replace}} {{hard-wired}} control, because its software {{can be adapted}} to a specific control task, which is more flexible than building hardware for each problem. Now, PLCs are of great technical and economic interest. They can be found more and more in every day life, including applications such as household appliances, medical systems, traffic control systems and motor vehicles. The IEC 1131 - 3 standard for programming PLCs defines two textual and three graphical programming languages. One of these graphical languages is <b>Function</b> <b>Block</b> <b>Diagrams</b> (FBD). First the basic principles of the PLC and its hierarchical structure will be explained. Next an overview of the FBD language and the use of its structures will be given. During this reconnoitring a few differences with the program languages, computer engineers are used to work with, attract the attention. These differences will be discussed. Also a few indistinctnesses arise about the use of jumps a [...] ...|$|E
40|$|The aim of {{this paper}} is to {{consider}} the way of controlling inflow and outflow in bulk oil tank. Intellectual system is made to regulate the rate of gate opening (in percents). Codesys was used to create a virtual controller and Simulink simulated signal from a water level sensor. Both of them were connected with OPC technology, through embedded OPC client in Matlab and OPC server of Codesys. The program was created with <b>Function</b> <b>Block</b> <b>Diagram</b> graphical language...|$|R
50|$|Modern PLCs can be {{programmed}} {{in a variety}} of ways, from the relay-derived ladder logic to programming languages such as specially adapted dialects of BASIC and C. Another method is state logic, a very high-level programming language designed to program PLCs based on state transition diagrams. The majority of PLC systems today adhere to the IEC 61131/3 control systems programming standard that defines 5 languages: Ladder Diagram (LD), Structured Text (ST), <b>Function</b> <b>Block</b> <b>Diagram</b> (FBD), Instruction List (IL) and Sequential Flow Chart (SFC).|$|R
40|$|This work {{deals with}} the control of lab models using PLC Rockwell Automation. As well {{as the use of}} CompactLogix, RSLogix 5000 {{programming}} environment, RSlinx Classic communication environment and software for process visualization such as FactoryTalk View Studio. The first part {{deals with the}} description of the models and their connection to a PLC environment. The second part describes and compares programming languages (ladder <b>diagram,</b> <b>function</b> <b>block</b> <b>diagram</b> and sequential <b>function</b> charts). The last part deals with the visualization of both models in FactoryTalk View Studio...|$|R
40|$|The always growing need, for {{innovative}} products, forces manufacturing plants {{to improve their}} ability to quickly respond to market requirements by designing competitive products and modifying existing ones. However most of the traditional methods, products and tools are {{far away from the}} new challenging technologies of Software Engineering. Today’s systems are composed of monolithic applications that are almost impossible to integrate and even to expand. Modularity, flexibility, extensibility, reusability and interoperability are dimensions slightingly addressed by the most traditional proprietary methods and engineering tools. In this paper, we describe our approach for the design of distributed Industrial Process, Measurement and Control Systems (IPMCSs). We adopt the use case driven approach proposed by Ivar Jacobson and the UML notation, to capture requirements. We have defined a process for the transformation of requirements expressed in the form of use cases, to IPMCSs design specifications, expressed in the form of <b>Function</b> <b>Block</b> <b>diagrams.</b> The whole process, which is {{in the context of the}} CORFU framework, is fully automated, so an Engineering Support System can support it...|$|E
40|$|This paper {{presents}} {{a case study}} of search-based test generation for embedded system software units developed using the <b>Function</b> <b>Block</b> <b>Diagrams</b> (FBDs), a graphical language in the IEC 61131 - 3 standard aimed at programmable logic controllers (PLCs). We consider 279 different components from the train control software developed by Bombardier Transportation, a major rail vehicle manufacturer. The software is compiled into C code with a particular structure. We use a modified hill climbing algorithm for generating test data to maximize MC/DC coverage for assignments with logical expressions in the C code, while retaining the semantics of the original FBD implementation. An experimental evaluation for comparing the effectiveness (coverage rate) and the efficiency (required number of executions) of hill climbing algorithm with random testing is presented. The results show that random testing performs well for most units under test, while around 30 % of the artifacts significantly benefit from the hill climbing algorithm. Structural properties of the units that affect the performance of hill climbing and random testing are also discussed...|$|E
40|$|Programmable Logic Controllers (PLC) and its {{programming}} standard IEC 61131 - 3 {{are widely}} used in embedded systems for the industrial automa-tion domain. We propose a framework for the formal treatment of PLC based on the IEC 61131 - 3 standard. A PLC system description typically combines code written in different languages that are defined in IEC 61131 - 3. For the top-level specification we regard the Sequential Function Charts (SFC) language, a graphical high-level language that allows to describe the main control-flow of the system. In addition to this, we describe the Instruction List (IL) language – an assembly like language – and two other graphical languages: Ladder Diagrams (LD) and <b>Function</b> <b>Block</b> <b>Diagrams</b> (FBD). IL, LD, and FBD are used to describe more low level structures of a PLC. We formalize the semantics of these languages and describe and prove relations between them. Formalization and associated proofs are carried out using the proof assistant Coq. In addition to this, we present work on a tool for automatically generating SFC representations from a graphical description – the IL and LD languages can be handled in Coq directly – and its usage for verification purposes. We sketch possible usages of our formal framework, and present an example application for a PLC in a project demonstrator and prove safety properties. ...|$|E
40|$|Abstract: This paper {{discusses}} {{the use of}} the modelling and simulation program 20 -sim for the analysis and design of mechatronic systems. Control engineers traditionally use transfer <b>functions,</b> <b>block</b> <b>diagrams</b> or state space descriptions. In mechatronics, where a controlled system as a whole has to be designed, it is advantageous that model parameters are directly related to physical components. In addition it is desired that models be reusable. Blockdiagram-based simulation packages hardly support these features. 20 -sim allows input of models in the form of equations, <b>block</b> <b>diagrams,</b> bond graphs and iconic diagrams. This will be illustrated by means of the design of a system that is representative for many mechatronic systems...|$|R
40|$|In editors {{for visual}} {{languages}} {{it is often}} useful to provide interactive feedback {{that depends on the}} static semantics of the edited program. In this paper we demonstrate how such feedback can be implemented using reference attribute grammars. Because the implementation is declarative, it is easy to modularize compiler and editor computations, reusing the compiler's program model in the editor. Furthermore, the declarative approach makes it easy to keep the program model and view consistent during editing. The approach is illustrated using a <b>function</b> <b>block</b> <b>diagram</b> language, with visual feedback on, for example, type checking and cyclic data flow...|$|R
50|$|PLCopen {{was founded}} in 1992 just after the world wide {{programming}} standard IEC 61131-3 was published. The controls market {{at that time was}} a very heterogeneous market with different types of programming methods for many different PLCs. The IEC 61131-3 is a standard defining the programming languages for PLCs, embedded controls, and industrial PCs, harmonizing applications independent from specific dialects, but still based on known methods such as the textual programming languages Instruction List, and Structured Text, the graphical programming languages <b>Function</b> <b>Block</b> <b>Diagram</b> and Ladder Diagram (a.k.a. Ladder logic), and the structuring tool Sequential Function Chart.|$|R
