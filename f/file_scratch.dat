0|32|Public
5000|$|... #Subtitle level 2: Creating Raw Modem Data (RMD) <b>files</b> from <b>scratch</b> ...|$|R
40|$|Poet. Alternative identification: Carpenter (cat. 5). Identification from {{engraving}} in LC P&P Biographical <b>File.</b> <b>Scratched</b> on face of plate: 238; Miss Cary. Scratched on back of plate: 287. Original {{served by}} appointment only. Produced by Mathew Brady's studio. Transfer; U. S. War College; 1920; (DLC/PP- 1920 : 46153). Forms part of: Daguerreotype collection (Library of Congress) ...|$|R
5000|$|Scratch {{space is}} {{space on the}} hard disk drive that is {{dedicated}} for only temporary storage. It cannot be used to permanently back up <b>files.</b> <b>Scratch</b> disks can be set to erase all data at regular intervals so that the disk space is left free for future use. The management of scratch disk space is typically dynamic, occurring when needed.|$|R
5000|$|QuarkXPress 9.2 (2012) - Export to ePUB 3.0, plus {{ability to}} create ePUB <b>files</b> from <b>scratch.</b> Improvements to App Studio, {{including}} iOS5 support.|$|R
5000|$|... text format: Text Format is {{the process}} of {{creating}} the HTML text <b>files</b> from <b>scratch,</b> using Notepad or another similar text editor and coding each file individually.|$|R
50|$|Scratch stocks {{consist of}} a handle, either wood or metal, with {{provision}} to clamp a steel blade into which {{the profile of the}} shape to be cut has been <b>filed.</b> <b>Scratch</b> stocks work best in wood which has a dense grain. They work by using a scraping action which gradually cuts away fibers from the wood. The scratch stock is drawn along the wood repeatedly until the desired shape is formed. Scratch stocks may be used to apply edge treatments and may also be used to apply decorative elements to the face of board.|$|R
5000|$|An [...]sb file is {{the file}} format used to store {{projects}} {{created in the}} Scratch programming language editor up to version 1.4. sb is no longer used in {{the current version of}} Scratch and was replaced by the [...]sb2 <b>file</b> in <b>Scratch</b> 2.0.|$|R
50|$|Written {{entirely in}} the Java {{programming}} language, ExtenXLS creates new spreadsheet <b>files</b> from <b>scratch</b> {{as well as from}} existing spreadsheet files templates. ExtenXLS has the ability to utilize data from any source and output it in Excel-compatible XLS, XML, and HTML formats.|$|R
40|$|Super{{computer}} (n) : A computer {{which turns}} a CPU-bound problem into an I/O bound problem. • As high performance computers become {{faster and more}} parallel, I/O can often become the bottleneck for large computations: – Checkpoint/restart files – Plot <b>files</b> – <b>Scratch</b> <b>files</b> for out-of-core computations • The explosive growth of storage capacity has made things even more interesting: – Data sets in the 10 s to 1000 s of gigabytes – Millions of files (a. k. a. “Backup software’s worst nightmare”) – Not all applications lend themselves well to simple read/write access I/O Approaches for Data...|$|R
50|$|As of 2017, Scratch 2 is {{available}} online {{and as an}} application for Windows, macOS, Linux (Adobe Air Required), and unofficially for android as an apk <b>file.</b> The <b>Scratch</b> 2.0 Offline editor can be downloaded for Windows, Mac and Linux directly from Scratch's website. However, the unofficial mobile version must be downloaded from the scratch forums.|$|R
50|$|The QPDF library {{also makes}} it {{possible}} for you to create PDF <b>files</b> from <b>scratch.</b> In this mode, you are responsible for supplying all the contents of the file, while the QPDF library takes care of the syntactical representation of the objects, creation of cross references tables and, optionally, object streams, encryption, linearization, and other syntactic details.|$|R
50|$|Via {{localization}} <b>files</b> downloaded with <b>Scratch</b> its interface {{language can}} be changed to a language of choice since Scratch is used {{in different parts of}} the world.|$|R
50|$|Working on {{the film}} Priest, in 2011, McKay {{had to come up}} with a {{pipeline}} for doing a massive sequence of realistic explosions, at a time when that wasn’t too common. Michael Bay’s Transformers: Dark of the Moon (also released in 2011) brought on a challenge of building tools that would construct max <b>files</b> from <b>scratch</b> and FumeFX simulations from that. He used a combination of FumeFX and Karatoa, along with Max’s built-in particle system Particle Flow.|$|R
40|$|Abstract. In {{wide area}} Grid {{computing}} environments, computation is often performed {{at a site}} distant from data needed and from the user console. Therefore, it necessitates I/O support to run computation jobs at remote sites. Major Grid software providers have implemented their own I/O solutions. However, in existing solutions, two important user requirements for I/O support are not satisfied, namely, run-time standard input from user console and runtime stage-out of <b>scratched</b> <b>files</b> during computation. Regarding these deficiencies, the paper puts forward an improved I/O support solution. In addition, the paper presents a reference implementations and describes application experience of our implementation in PCG(PACT Computational Grid) project. Keywords: I/O, Grid computing, standard input, <b>scratched</b> <b>files,</b> Globus...|$|R
5000|$|Sense is an {{educational}} programming environment created by The Open University (OU) in the United Kingdom. It uses a drag-and-drop programming environment {{designed to teach}} students the fundamentals of computer programming, using different shape and colour [...] "blocks" [...] selected from a palette of available commands, meaning that the student needs no prior experience of programming nor need to learn a syntax. It {{is based on the}} Scratch programming language developed by the MIT Media Lab, and uses [...]sb <b>files</b> like <b>Scratch</b> but the two pieces of software cannot use each other's files.|$|R
5000|$|Resource Hacker (also {{known as}} ResHacker or ResHack) {{is a free}} {{resource}} extraction utility and resource compiler for Windows developed by Angus Johnson. It {{can be used to}} add, modify or replace most resources within Windows binaries including strings, images, dialogs, menus, VersionInfo and Manifest resources. It can also create resource <b>files</b> (*.res) from <b>scratch</b> and the latest release (May 2, 2015) provides a number of text templates to facilitate this.|$|R
5000|$|The [...] "Basket Case" [...] {{video was}} {{directed}} by Mark Kohr. The video was filmed in an actual mental institution called Agnews Developmental Center in Santa Clara County, California, {{at the request of}} the band members. The mental institution had been abandoned, but most of the structure remained in a broken-down state. The band members found old patient <b>files,</b> deep <b>scratches</b> in the walls and dental molds scattered around. The video frequently references the film One Flew Over the Cuckoo's Nest. The music video was originally filmed in black and white and the color was added in later by Mike Dirnt (Tré Cool confessed it on a Green Day video special at Dailymotion presented by himself), contributing to the surreal effect of the video.|$|R
5000|$|Code {{pleading}} also drastically shortened the pleading process. Most {{of the old}} {{common law}} pleadings were abolished. From now on, a case required only a complaint and an answer, with an optional cross-complaint and cross-answer, and with the demurrer kept as the standard attack on improper pleadings. Instead of piling layers and layers of pleadings and averments {{on top of each}} other, a pleading that was attacked by demurrer would either be completely superseded by an amended pleading or would proceed immediately [...] "at issue" [...] as to the validly pleaded parts. This meant that to determine what the parties were currently fighting about, a stranger to a case would no longer have to read the entire case <b>file</b> from <b>scratch,</b> but could (in theory) look only at the most recent version of the complaint filed by the plaintiff, the defendant's most recent answer to that complaint, and any court orders on demurrers to either pleading.|$|R
40|$|The package {{processes}} up to 3 o analyses in a {{set with}} up to 14 elements in an analysis, and these elements can be analysed by up to three different characteristic radiations (Ka, L % and Ms); these parameters may be changed if the user wishes. To process data from another probe, one card needs be changed in the program. The form of input is illustrated infig. I. The program defines each request for information by an RQ number, which refers to more detailed notes in the specification fthe program. In this example measured concentrations from one analysis are input by the operator at the terminal. The method of calculation selected causes oxygen {{to be determined by}} difference. The five elements analysed, Mg, Si, Fe, Mn, and Ca, all determined by their K-radiations (code 1), have been measured with standards named OLIVIN, for both Si and Mg, PUREFE, PUREMN and WOLL 2 respectively. The first part of MK 7 organizes and then writes this information on to a <b>scratch</b> <b>file.</b> A second identifies the elements and lines used and extracts from another file all the physical constants (e. g. absorption coefficients, line energies, atomic weights, etc.) needed to make corrections with those elements present. The standard names are also recognized and the standard factors extracted. All these data are written on to a second <b>scratch</b> <b>file.</b> Finally the third part of the program reads the data from these scratch flies and processes the measured concentrations. Results are output via the terminal in an abbreviated form an...|$|R
5000|$|But here, command2 {{does not}} start {{executing}} until command1 has finished, and a sufficiently large <b>scratch</b> <b>file</b> {{is required to}} hold the intermediate results as well as whatever work space each task required. As an example, although DOS allows the [...] "pipe" [...] syntax, it employs this second approach. Thus, suppose some long-running program [...] "Worker" [...] produces various messages as it works, and that a second program, TimeStamp copies each record from stdin to stdout, prefixed by the system's date and time when the record is received. A sequence such as Worker | TimeStamp > LogFile.txtWould produce timestamps only when Worker had finished, merely showing how swiftly its output file could be read and written.|$|R
30|$|In {{this section}} we examine {{detailed}} performance {{figures for the}} in situ and in-transit workflows described above. All of these tests were performed on Edison, a Cray XC 30 supercomputing system, at the National Energy Research Scientific Computing Center (NERSC). Edison’s compute partition consists of 5, 576 nodes, each configured with two 12 -core Intel Xeon ‘Ivy Bridge’ processors at 2.4 GHz, and 64 GB of DDR 3 memory at 1, 866 MHz. Compute nodes communicate using a Cray Aries interconnect which has ‘dragonfly’ topology. The high-performance <b>scratch</b> <b>file</b> system is powered by Lustre, and has a total capacity of 2.1 PB (1.87 PiB) and a peak bandwidth of 48 GB/s (44.7  GiB/s), distributed across 96 object storage targets (OSTs).|$|R
40|$|This is {{analysis}} and offered way {{to convert from}} DXF format to ABSF, and of course converting in other way. This means that after first converting, user can see everything in one file understandable. Because DXF file is too complexed for view it simple, It‘s not easy to understand all group codes that DXF has. After converting into DXF file you can work with file with such programs as AutoCAD or 3 Dstudio. In ABSF format files you can edit, but simple thing you must know, is structure of the file. It has some objects: LINIJOS, TEKSTAS, APSKRITIMAI, LANKAI, TASKAI etc. After this, you must write into each field exactly for that value, that is required. Important: {{it is possible to}} create ABSF <b>file</b> from the <b>scratch</b> and convert to DXF...|$|R
40|$|Developing <b>file</b> {{systems from}} <b>scratch</b> is {{difficult}} and error prone. Layered, or stackable, file systems are a powerful technique to incrementally extend the functionality of existing file systems on commodity OSes at runtime. In this paper, we analyze the evolution of layering from historical models to what is found in four different present day commodity OSes: Solaris, FreeBSD, Linux, and Microsoft Windows. We classify layered file systems into five types based on their functionality and identify the requirements that each class imposes on the OS. We then present five major design issues that we encountered during our experience of developing over twenty layered file systems on four OSes. We discuss how we have addressed each of these issues on current OSes, and present insights into useful OS and VFS features that would provide future developers more versatile solutions for incremental file system development...|$|R
5000|$|Most modern {{operating}} systems employ {{a method of}} extending RAM capacity, known as [...] "virtual memory". A portion of the computer's hard drive is set aside for a paging <b>file</b> or a <b>scratch</b> partition, and the combination of physical RAM and the paging file form the system's total memory. (For example, if a computer has 2 GB of RAM and a 1 GB page file, the operating system has 3 GB total memory available to it.) When the system runs low on physical memory, it can [...] "swap" [...] portions of RAM to the paging file {{to make room for}} new data, as well as to read previously swapped information back into RAM. Excessive use of this mechanism results in thrashing and generally hampers overall system performance, mainly because hard drives are far slower than RAM.|$|R
40|$|Automatic {{mapping of}} I/O {{intensive}} applications on massively parallel systems is a challenging problem of great importance. This paper proposes a novel {{solution to the}} I/O problem. First, Fortran language extensions are introduced that support highly efficient I/O processing. Second, we specify the appropriate compilation method that utilizes an advanced runtime system called VIPIOS that is designed {{on the basis of}} parallel database technology. We present this proposal in the context of Vienna Fortran and its compiler. 1 Introduction This paper proposes a language, compiler and runtime software {{solution to the problem of}} I/O in distributed-memorysystems (DMSs). We present this proposal in the context of Vienna Fortran [8], and its compilation system. In typical supercomputing applications six types of I/O can be identified ([5]) : (1) input, (2) debugging, (3) <b>scratch</b> <b>files,</b> (4) checkpoint/restart, (5) output, and (6) accessing out-of-core structures. Types (3), (4) and in some phases [...] ...|$|R
40|$|Abstract—Modern {{petascale}} applications {{can present}} {{a variety of}} configuration, runtime, and data management challenges when run at scale. In this paper, we describe our experiences in running VPIC, a large-scale plasma physics simulation, on the NERSC production Cray XE 6 system Hopper. The simulation ran on 120, 000 cores using ∼ 80 % of computing resources, 90 % of the available memory on each node and 50 % of the Lustre <b>scratch</b> <b>file</b> system. Over two trillion particles were simulated for 23, 000 timesteps, and 10 one-trillion particle dumps, each ranging between 30 and 42 TB, were written to HDF 5 files at a sustained rate of ∼ 27 GB/s. To {{the best of our}} knowledge, this job represents the largest I/O undertaken by a NERSC application and the largest collective writes to single HDF 5 files. We outline several obstacles that we overcame in the process of completing this run, and list lessons learned that are of potential interest to HPC practitioners. I...|$|R
40|$|In March 2004, the Nsort# {{program was}} able to sort 34 GB of data (340, 000, 000 100 -byte records) in 58 seconds on a 32 {{processor}} Itanium 2 NEC Express 5800 / 1320 Xd running Microsoft Windows Server 2003 Datacenter Edition. This set new records for the MinuteSort benchmark. The data was read from one input file at 1. 4 GB/sec. The output file was created and written at 1. 2 GB/sec. Both files resided on an NTFS file system on a striped logical volume consisting of 8 Eurologic 14 -disc SAN blocs attached by 8 Qlogic 2350 SAN HBAs. The 34 GB data set was read into main memory, sorted, and written to the output file. No temporary (or <b>scratch)</b> <b>files</b> were used. In April 2004 on the same NEC server, Nsort {{was able to}} sort a 1 TB file in 33 minutes using 21 Qlogic HBAs and 41 Eurologic SAN blocs. This set a new record in the TeraByte Sort benchmark...|$|R
40|$|In {{this paper}} {{we present a}} new storage {{architecture}} for clusters that creates a shared memory of disk storage that is uniformly accessible to all cluster clients, scales to large capacity, and provides very high performance and connectivity. The cluster structure resembles a symmetric multiprocessor (SMP) in that clients (processors) can access disk data (memory) across a local area network like Fibre Channel (a bus or other interconnection network). All clients can see and access the same disk data with perfect consistency. Our approach avoids buffer copy overheads and server bottlenecks found in traditional file systems while scaling to potentially large numbers of clients and large capacity disk systems. A classification of distributed storage architectures is also presented. Unlike previous approaches to shared file system design for network-attached storage, we designed our <b>file</b> system from <b>scratch</b> rather than modifying an existing local or network file system. Given the different tradeoffs involved with local versus cluster file systems this approach seemed logical and our initial performance results support this decision. We provide {{a description of the}} basic file system design, our current implementation on SGI IRI...|$|R
40|$|File {{system design}} {{has never been}} a {{straight}} forward task. Moreover, designing and developing a disk file system is a complex case of file system development. From time to time, since the inception of first magnetic disk in 1956, many disk file systems were drafted and implemented to fit the need of users and/or to cope up with the change in hardware technology. This has resulted into many objective specific disk file systems and hence, no generalized design guidelines or criteria have been developed. In this paper, we take some historical facts and current trends in digital world as a base to figure out 3 basic design parameters for designing and developing a disk file system which are affected by the change in hardware technology and user requirements. In each identified design parameter, we give a brief introduction of some novel approach to mitigate the parameter. Furthermore, we also introduce a new file system benchmarking technique to overcome problems found in existing techniques. The goal {{of this paper is to}} organize the design considerations for developing a disk file system and thus, help a file system designer to efficiently design and develop a new <b>file</b> system from <b>scratch</b> or refine or fine tune existing ones...|$|R
6000|$|How {{long the}} next scene lasted, I could never tell. Salé {{was always trying}} to steal away with our canoe and leave the other four, {{probably}} for six hours, in an empty, leaky boat, without so much as an orange or a cocoanut on board, and under the direct rays of the sun. I had at last to stop him by taking the spare paddle off the outrigger and sticking it in the ground--depth, perhaps two feet--width of the bay, say three miles. At last I bid him land me and my mother and go back for the other ladies. [...] "The coast is so rugged," [...] said Salé.--"What?" [...] I said, [...] "all these villages and no landing-place?"--"Such is the nature of Samoans," [...] said he. Well, I'll find a landing-place, I thought; and presently I said, [...] "Now we are going to land there."--"We can but try," [...] said the bland Salé, with resignation. Never saw a better landing-place in my life. Here the boat joined us. My mother and Salé continued in the canoe alone, and Belle and I and Tauilo set off on foot for Malie. Tauilo was about the size of both of us put together and a piece over; she used us like a nurse with children. I had started barefoot; Belle had soon to pull off her gala shoes and stockings; the mud was as deep as to our knees, and so slippery that (moving, as we did, in Indian <b>file,</b> between dense <b>scratching</b> tufts of sensitive) Belle and I had to take hands to support each other, and Tauilo was steadying Belle from the rear. You can conceive we were got up to kill, Belle in an embroidered white dress and white hat, I in a suit of Bedford cords hot from the Sydney tailors; and conceive us, below, ink-black to the knees with adhesive clay, and above, streaming with heat. I suppose it was better than three miles, but at last we made the end of Malie. I asked if we could find no water to wash our feet; and our nursemaid guided us to a pool. We sat down on the pool side, and our nursemaid washed our feet and legs for us--ladies first, I suppose out of a sudden respect to the insane European fancies: such a luxury as you can scarce imagine. I felt a new man after it. But before we got to the King's house we were sadly muddied once more. It was 1 P.M. when we arrived, the canoe having beaten us by about five minutes, so we made fair time over our bog-holes.|$|R
6000|$|How {{long the}} next scene lasted, I could never tell. Sale {{was always trying}} to steal away with our canoe and leave the other four, {{probably}} for six hours, in an empty, leaky boat, without so much as an orange or a cocoanut on board, and under the direct rays of the sun. I had at last to stop him by taking the spare paddle off the out-rigger and sticking it in the ground - depth, perhaps two feet - width of the bay, say three miles. At last I bid him land me and my mother and go back for the other ladies. 'The coast is so rugged,' said Sale. - 'What?' I said, 'all these villages and no landing place?' - 'Such is the nature of Samoans,' said he. Well, I'll find a landing-place, I thought; and presently I said, 'Now we are going to land there.' - 'We can but try,' said the bland Sale, with resignation. Never saw a better landing-place in my life. Here the boat joined us. My mother and Sale continued in the canoe alone, and Belle and I and Tauilo set off on foot for Malie. Tauilo was about the size of both of us put together and a piece over; she used us like a mouse with children. I had started barefoot; Belle had soon to pull off her gala shoes and stockings; the mud was as deep as to our knees, and so slippery that (moving, as we did, in Indian <b>file,</b> between dense <b>scratching</b> tufts of sensitive) Belle and I had to take hands to support each other, and Tauilo was steadying Belle from the rear. You can conceive we were got up to kill, Belle in an embroidered white dress and white hat, I in a suit of Bedford cords hot from the Sydney tailors; and conceive us, below, ink-black to the knees with adhesive clay, and above, streaming with heat. [...] I suppose it was better than three miles, but at last we made the end of Malie. I asked if we could find no water to wash our feet; and our nursemaid guided us to a pool. We sat down on the pool side, and our nursemaid washed our feet and legs for us - ladies first, I suppose out of a sudden respect to the insane European fancies: such a luxury as you can scarce imagine. I felt a new man after it. But before we got to the King's house we were sadly muddied once more. It was 1 P.M. when we arrived, the canoe having beaten us by about five minutes, so we made fair time over our bog-holes.|$|R
40|$|NPLOT is an {{interactive}} computer graphics program for plotting undeformed and deformed NASTRAN finite element models (FEMs). Although there are many commercial codes already available for plotting FEMs, these have limited use due to their cost, speed, and lack of features to view BAR elements. NPLOT was specifically developed to overcome these limitations. On a vector type graphics device the two best ways to show depth are by hidden line plotting or haloed line plotting. A hidden line algorithm generates views of models with all hidden lines removed, and a haloed line algorithm displays views with aft lines broken {{in order to show}} depth while keeping the entire model visible. A haloed line algorithm is especially useful for plotting models composed of many line elements and few surface elements. The most important feature of NPLOT is its ability to create both hidden line and haloed line views accurately and much more quickly than with any other existing hidden or haloed line algorithms. NPLOT is also capable of plotting a normal wire frame view to display all lines of a model. NPLOT is able to aid in viewing all elements, but it has special features not generally available for plotting BAR elements. These features include plotting of TRUE LENGTH and NORMALIZED offset vectors and orientation vectors. Standard display operations such as rotation and perspective are possible, but different view planes such as X-Y, Y-Z, and X-Z may also be selected. Another display option is the Z-axis cut which allows a portion of the fore part of the model to be cut away to reveal details of the inside of the model. A zoom function is available to terminals with a locator (graphics cursor, joystick, etc.). The user interface of NPLOT is designed to make the program quick and easy to use. A combination of menus and commands with help menus for detailed information about each command allows experienced users greater speed and efficiency. Once a plot is on the screen the interface becomes command driven, enabling the user to manipulate the display or execute a command without having to return to the menu. NPLOT is also able to plot deformed shapes allowing it to perform post-processing. The program can read displacements, either static displacements or eigenvectors, from a MSC/NASTRAN F 06 file or a UAI/NASTRAN PRT file. The displacements are written into a unformatted <b>scratch</b> <b>file</b> where they are available for rapid access when the user wishes to display a deformed shape. All subcases or mode shapes can be read in at once. Then it is easy to enable the deformed shape, to change subcases or mode shapes and to change the scale factor for subsequent plots. NPLOT is written in VAX FORTRAN for DEC VAX series computers running VMS. As distributed, the NPLOT source code makes calls to the DI 3000 graphics package from Precision Visuals; however, a set of interface routines is provided to translate the DI 3000 calls into Tektronix PLOT 10 /TCS graphics library calls so that NPLOT can use the standard Tektronix 4010 which many PC terminal emulation software programs support. NPLOT is available in VAX BACKUP format on a 9 -track 1600 BPI DEC VAX BACKUP format magnetic tape (standard media) or a TK 50 tape cartridge. This program was developed in 1991. DEC, VAX, VMS, and TK 50 are trademarks of Digital Equipment Corporation. Tektronix, PLOT 10, and TCS are trademarks of Tektronix, Inc. DI 3000 is a registered trademark of Precision Visuals, Inc. NASTRAN is a registered trademark of the National Aeronautics and Space Administration. MSC/ is a trademark of MacNeal-Schwendler Corporation. UAI is a trademark of Universal Analytics, Inc...|$|R

