941|2279|Public
5|$|The {{discovery}} of spontaneous fission in reactor-bred plutonium due to contamination by plutonium-240 led Wigner to propose switching to breeding uranium-233 from thorium, but {{the challenge was}} met by the Los Alamos Laboratory developing an implosion-type nuclear weapon design. In October 1944, Creutz moved to Los Alamos, where he became a group leader responsible for explosive lens <b>design</b> <b>verification</b> and preliminary testing. Difficulties encountered in testing the lenses led {{to the construction of}} a special test area in Pajarito Canyon, and Creutz became responsible for testing there. As part of the preparation for the Trinity nuclear test, Creutz conducted a test detonation at Pajarito Canyon without nuclear material. This test brought bad news; it seemed to indicate that the Trinity test would fail. Hans Bethe worked through the night to assess the results, and was able to report that the results were consistent with a perfect explosion.|$|E
25|$|Systems Modeling Language (SysML), a {{modeling}} {{language used}} for systems engineering applications, supports the specification, analysis, <b>design,</b> <b>verification</b> and validation {{of a broad}} range of complex systems.|$|E
25|$|The ADIRU {{failure mode}} {{had not been}} {{previously}} encountered, or identified by the ADIRU manufacturer in its safety analysis activities. Overall, the <b>design,</b> <b>verification</b> and validation processes used by the aircraft manufacturer did not fully consider the potential effects of frequent spikes in data from an ADIRU.|$|E
40|$|This Master's Thesis {{describes}} {{methods of}} software certification {{and development of}} airborne systems, focusing on software testing and verification during project's life cycle. Thesis includes also <b>designed</b> software <b>verification</b> plan for concrete application according to RTCA/DO- 178 B. Another part of thesis illustrates the exemplary realization of tests according to <b>designed</b> <b>verification</b> plan. At the close we describe the options of applying the <b>designed</b> <b>verification</b> plan and evaluation of its results...|$|R
50|$|<b>Design</b> and <b>verification</b> are two {{distinct}} disciplines within this methodology. Some practices are {{to keep the}} two elements separate, while others advocate for closer integration between <b>design</b> and <b>verification.</b>|$|R
50|$|Some {{criticisms of}} ESL <b>design</b> and <b>verification</b> have been raised. These include too much focus on C-based {{languages}} and challenges in representing parallel processes. It {{can also be}} argued that ESL <b>design</b> and <b>verification</b> is a subset of verification and validation.|$|R
2500|$|Cavitation is {{an event}} {{that can lead to}} MHV failure. While this has been a {{relatively}} rare occurrence, in 1988 the Edwards-Duramedics bileaflet had 46 reported failures in 20,000 implants related to cavitation damage. Since then, manufacturers have made cavitation testing {{an essential part of the}} <b>design</b> <b>verification</b> process. [...] Cavitation is the rapid formation of vaporous microbubbles in the fluid due to a local drop of pressure below the vaporization pressure at a given temperature. When conditions for cavitation are present bubbles will form and at the time of pressure recovery they will collapse or implode. This event will cause pressure or thermal shockwaves and fluid microjets which can damage a surface. These thermodynamic conditions are known to be the cause of MHV related erosion.|$|E
50|$|<b>Design</b> <b>verification</b> - <b>Design</b> <b>verification</b> is {{the process}} that {{confirms}} that the design output conforms to the design input. <b>Design</b> <b>verification</b> should demonstrate that the specifications are the correct specifications for the design. <b>Design</b> <b>verification</b> must be documented in the DHF and include the verification date, participants, design version/revision verified, verification method and verification results.|$|E
5000|$|Automotive, for <b>design</b> <b>verification,</b> {{difficult}} visualizations, and {{new engine}} development ...|$|E
40|$|Abstract—Functional {{verification}} of modern digital designs is a missioncriticalandtime-consumingtask. Verificationisessentialsince it ensures the correctness {{of the final}} product; however, due tothe complexity of modern <b>designs,</b> <b>verification</b> has become the primary bottleneckoftimetomarket. Logicsimulationformsthecoreofmost currentverificationefforts,asitisalmostubiquitouslyusedtoverify thefunctionalcorrectnessofadesignoverabroadrangeofabstraction levels. Inparticularatthegate-levelgranularity,adesignconsistsof millionsoflogicprimitives,thusmakingsimulationexcruciatinglyslow. Inmainstreamindustrysetups,complexdigitalsystemsarevalidatedby distributinglogicsimulationtasksamongvastserverfarmsforweeks atatime. Yet,theperformanceofsimulationkeepsfallingbehindthe demand,leadingtoincompleteverificationandescapedfunctionalbugs...|$|R
40|$|<b>Design</b> and <b>verification</b> {{languages}} Today {{integrated circuits}} are very complex systems. They {{can have a}} high variety of functions that are very helpful in developing new electronic systems. This leads to a higher attention on <b>design</b> and <b>verification</b> languages. This paper’s aim is to give an insight in the most common <b>design</b> and <b>verification</b> languages that we have at our disposal. Also, by discussing {{the advantages and disadvantages}} in this paper hopefully can facilitate the reader’s decision to choose between these languages for a project...|$|R
40|$|Reconfigurable {{systems have}} pervaded nearly all fields of {{computation}} {{and will continue}} to do so for the foreseeable future. Reconfigurable System <b>Design</b> and <b>Verification</b> provides a compendium of <b>design</b> and <b>verification</b> techniques for reconfigurable systems, allowing you to quickly search for a technique and determine if it is appropriate to the task at hand. It bridges the gap between the need for reconfigurable computing education and the burgeoning development of numerous different techniques in the <b>design</b> and <b>verification</b> of reconfigurable systems in various application domains. The text...|$|R
5000|$|Valtrix Systems: Sting (a {{versatile}} <b>design</b> <b>verification</b> {{tool for}} complex SoC/CPU implementations) ...|$|E
50|$|Historically, <b>design</b> <b>verification</b> was a laborious, {{repetitive}} loop {{of writing}} and running simulation test cases against the design under test. As chip designs have grown larger and more complex, the task of <b>design</b> <b>verification</b> has grown {{to the point where}} it now dominates the schedule of a design team. Looking for ways to improve design productivity, the electronic design automation industry developed the Property Specification Language.|$|E
5000|$|Adaptive Vehicle Make: Revolutionary {{approaches}} to the <b>design,</b> <b>verification,</b> and manufacturing of complex defense systems and vehicles.|$|E
5000|$|Formal specification, formal <b>design,</b> validation, <b>verification,</b> testing ...|$|R
50|$|Pickering Interfaces is a {{test and}} {{measurement}} company headquartered in Clacton-on-Sea, United Kingdom. Pickering designs, manufactures and markets a range of switching, simulation and cabling products in the LXI, PXI, and PCI platforms. These products are sold into the functional test, hardware-in-the-loop simulation (HILS) and <b>design</b> <b>verifications</b> markets.|$|R
40|$|In modern System-on-Chip (SoC) <b>designs</b> <b>verification</b> {{becomes the}} major bottleneck. Since by using state-of-theart {{techniques}} complete designs cannot be fully formally verified, {{it becomes more}} and more important to check the correct behaviour during operation. This becomes even more significant in systems that are changed during lifetime, like re-configurable systems...|$|R
5000|$|<b>Design</b> <b>verification</b> {{confirming}} that the design output meets the design input requirements ("did we design the device right?") ...|$|E
5000|$|<b>Design</b> <b>Verification</b> or Compliance test - to be {{performed}} during the development or approval stages of the product, typically on {{a small sample of}} units.|$|E
50|$|Systems Modeling Language (SysML), a {{modeling}} {{language used}} for systems engineering applications, supports the specification, analysis, <b>design,</b> <b>verification</b> and validation {{of a broad}} range of complex systems.|$|E
5000|$|Formal <b>design</b> and <b>verification</b> {{techniques}} {{including a}} formal top-level specification ...|$|R
50|$|Incisive is a {{suite of}} tools from Cadence Design Systems related to the <b>design</b> and <b>verification</b> of ASICs, SoCs, and FPGAs. Incisive is {{commonly}} referred to by the name NCSim {{in reference to the}} core simulation engine. In the late 1990s, the tool suite was known as ldv (logic <b>design</b> and <b>verification).</b>|$|R
40|$|Abstract—Verification is {{the most}} {{integral}} part of chip manufacturing and testing and {{is as important as}} the <b>designing.</b> <b>Verification</b> provides with the actual implementation and functionality of a Design under Test (DUT) and checks if it meets the specifications or not. In this paper, a communication protocol has been verified as per the design specifications. The environment so created completely wraps the <b>design</b> under <b>verification</b> and observes an optimum functional and assertion based coverage. The coverage so obtained is 100 % assertion based coverage and 83. 3 % functional coverage using SV (SystemVerilog). The total coverage so obtained is 91. 66 %...|$|R
5000|$|DVinsight: <b>Design</b> <b>Verification</b> Editor Checker for System Verilog [...] and Universal Verification Methodology, {{a product}} that {{provides}} Universal Verification Methodology editing and checking for functional verification engineers.|$|E
50|$|Additional <b>design</b> <b>verification</b> is {{performed}} at Avo’s satellite campus in Toronto, Ontario, {{and the company}} has European distributorship in Germany, France, Spain, the United Kingdom, Italy, and Norway.|$|E
50|$|Another {{common use}} of FIB {{instruments}} is for <b>design</b> <b>verification</b> and/or failure analysis of semiconductor devices. <b>Design</b> <b>verification</b> combines selective material removal with gas-assisted material deposition of conductive, dielectric, or insulating materials. Engineering prototype devices may be modified using the ion beam {{in combination with}} gas-assisted material deposition in order to rewire an integrated circuit's conductive pathways. The techniques are effectively used to verify {{the correlation between the}} CAD design and the actual functional prototype circuit, thereby avoiding {{the creation of a new}} mask for the purpose of testing design changes.|$|E
5000|$|AP 235, Materials {{information}} for the <b>design</b> and <b>verification</b> of products ...|$|R
5000|$|P1801 Standard for the <b>Design</b> & <b>Verification</b> of Low Power ICs ...|$|R
40|$|SystemVerilog is {{a unified}} {{language}} that serves both <b>design</b> and <b>verification</b> engineers by including RTL design constructs, assertions and a {{rich set of}} verification constructs. This book is based upon best verification practices by ARM, Synopsys and their customers. It is useful for {{those involved in the}} <b>design</b> or <b>verification</b> of a complex chip...|$|R
50|$|He won the 2003 IEEE Industrial Pioneer Award for {{his work}} on design {{modeling}} and <b>design</b> <b>verification</b> through Verilog and Verilog-based design. He is now a private venture capitalist.|$|E
5000|$|<b>Design</b> <b>verification</b> — The design {{rationale}} {{can be used}} {{to verify}} if the design decisions and the product itself are the reflection of what the designers and the users actually wanted.|$|E
50|$|The Systems Modeling Language (SysML) is a {{general-purpose}} modeling {{language for}} systems engineering applications. It supports the specification, analysis, <b>design,</b> <b>verification</b> and validation {{of a broad}} range of systems and systems-of-systems.|$|E
40|$|The {{prototype}} flight structural <b>design</b> and <b>verification</b> concept {{developed for}} TOPEX/Poseidon is presented. The structural configuration, <b>design</b> requirements, <b>verification</b> plan, analysis, and system level testing are described. The principal {{goal of the}} mission is to observe and measure ocean currents via radio altimetry, for enhanced knowledge {{of the interaction between}} the atmosphere and ocean...|$|R
40|$|A {{number of}} {{microprocessors}} have been specified and verified using machine supported formal techniques [2], [1], [7], [8], [10]. Some {{of these were}} pre-existing designs, others were designed {{as part of the}} specification and verification project. Even in the case of new designs, the formal techniques used offered very little support for incremental <b>design</b> and <b>verification.</b> Support for incremental <b>design</b> and <b>verification</b> means that certain additions to the implementation and/or specification can be verified without re-verification of the previous parts. Here, we present techniques for incremental <b>design</b> and <b>verification</b> which, as well as providing more appropriate models, also make the formal verification more efficient. The formal framework to support these ideas has been implemented in the HOL system and has been used in the specification, <b>design</b> and <b>verification</b> of a microcoded microprocessor. The techniques deal with three different aspects of the microprocessor: specification of mac [...] ...|$|R
50|$|<b>Design</b> for <b>Verification</b> (DfV) {{complimentary}} concept demonstrated through academic collaboration {{within the}} aerospace sector.|$|R
