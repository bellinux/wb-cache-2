13|3|Public
50|$|EMILE is the Early Mac <b>Image</b> <b>LoadEr,</b> a {{bootloader}} for loading Linux on Macintosh {{computers that}} have m68k processors. It {{was written by}} Laurent Vivier, and is meant to eventually replace the Penguin booter that is more usually in use.|$|E
50|$|The file can {{be either}} {{executable}} or non-executable and is loaded at 0x8000 unless otherwise specified. Executable files can relocate themselves if necessary and non-executable files are prepared for execution by an <b>image</b> <b>loader.</b> An extended AIF {{is a type of}} non-executable which includes information to enable the placement of code and data within specific areas of memory.|$|E
50|$|The PEB {{is closely}} {{associated}} with the kernel mode EPROCESS data structure, as well as with per-process data structures managed within the address space of the Client-Server Runtime Sub-System process. However, (like the CSRSS data structures) the PEB is not a kernel mode data structure itself. It resides in the application mode address space of the process that it relates to. This is because it is designed to be used by the application-mode code in the operating system libraries, such as NTDLL, that executes outside of kernel mode, such as the code for the program <b>image</b> <b>loader</b> and the heap manager.|$|E
5000|$|Multi-threaded {{database}} paging support, {{which can}} be used in conjunction with all 3D database and <b>image</b> <b>loaders</b> ...|$|R
50|$|CWSDSTUB.EXE is a stub <b>loader</b> <b>image</b> for DJGPP which {{includes}} CWSDPMI.|$|R
50|$|The OS is {{designed}} for connectivity, and comes with a full implementation of the Bluetooth low energy 4.2 stack. With the addition of BLE (supporting all Bluetooth 4.2 compliant security features except privacy) and various utilities such as the default file system, console, shell, logs, stats, etc., the image size is approximately 96 KB for the Nordic nRF51822 Bluetooth SoC. This size metric excludes the boot <b>loader</b> <b>image.</b>|$|R
5000|$|In {{computing}} the Process Environment Block (abbreviated PEB) is a {{data structure}} in the Windows NT operating system family. It is an opaque data structure {{that is used by}} the operating system internally, most of whose fields are not intended for use by anything other than the operating system. [...] Microsoft notes, in its MSDN Library documentation — which documents {{only a few of the}} fields — that the structure [...] "may be altered in future versions of Windows". [...] The PEB contains data structures that apply across a whole process, including global context, startup parameters, data structures for the program <b>image</b> <b>loader,</b> the program image base address, and synchronization objects used to provide mutual exclusion for process-wide data structures.|$|E
3000|$|... 1): the <b>Image</b> <b>Loader</b> Tier pre{{processes}} the raw imagery {{data from}} repository; the Image Reader Tier processes image tiles and retrieves queried images [...]...|$|E
30|$|To {{enable the}} {{autonomic}} resource management in TerraFly, we leverage VM techniques to virtualize this multi-tier system, denoted as v-TerraFly. The two critical resource intensive tiers of TerraFly, the <b>image</b> <b>Loader</b> and Reader Tier s, are deployed on the VMs instead of physical servers.|$|E
40|$|AbstractThe LCD is {{proposed}} {{as a new}} hologram loader with the advantage that the hologram image is controlled digitally with no any mechanical moving and rotating elements. Different hologram image can be readily introduced by changing the coded image displayed on the LCD. A basic problem in which LCD is a hologram <b>image</b> <b>loader</b> is limited LCD's pixel number. In CGH, the sample point number have great impact on holographic representation. So the choice of sample point number is very important. When the LCD is phase hologram <b>image</b> <b>loader,</b> the phase on hologram image was decided by phase distribution of recorded wavefront on LCD plane. In phase hologram encoding, the pixel spacing is sampling interval of recorded wavefront. Based on sampling theory, the frequency band {{can be obtained by}} spectrum analysis. For different wavefront shape, A model was developed for phase rate, the spectrum distribution was got, the phase rate which can be recorded by LCD can be got. A didactic example is included to illustrate the computational procedure...|$|E
40|$|In {{traditional}} monolithic {{operating systems}} {{the constraints of}} working within the kernel have limitedthe sophistication of the schemes used to manage executable program images. By implementing an executable <b>image</b> <b>loader</b> as a persistent user-spaceprogram, we can extend system program loading capabilities. In this paper we present OMOS, an Object/MetaObject Server which provides program loading facilities as a special case of generic object instantiation. We discuss the architecture of OMOS, the extensible natureofthatarchitecture, and its application {{to the problem of}} dynamic program monitoring and optimization. We present several optimization strategies and the results of applying these strategies...|$|E
40|$|In {{traditional}} monolithic {{operating systems}} {{the constraints of}} working within the kernel have limited the sophistication of the schemes used to manage executable program images. By implementing an executable <b>image</b> <b>loader</b> as a persistent user-space program, we can extend system program loading capabilities. In this paper we present OMOS, an Object/MetaObject Server which provides program loading facilities as a special case of generic object instantiation. We discuss the architecture of OMOS, the extensible nature of that architecture, and its application {{to the problem of}} dynamic program monitoring and optimization. We present several optimization strategies and the results of applying these strategies. 1 1 Introduction Traditional program loading facilities, such as those found in Unix[11], have simple semantics, often because they are implemented within the framework of a monolithic kernel where resources tend to be constrained. Similarly they tend to use simple external structures [...] ...|$|E
40|$|In {{traditional}} monolithic {{operating systems}} {{the constraints of}} working within the kernel have limited the sophistication of the schemes used to manage executable program images. By implementing an executable <b>image</b> <b>loader</b> as a persistent userspace program, we can extend system program loading capabilities. In this paper we present OMOS, an Object/Meta-Object Server which provides program loading facilities as a special case of generic object instantiation. We discuss the architecture of OMOS, the extensible nature of that architecture, and its transparent application {{to the problem of}} dynamic program monitoring and optimization, in particular, code reordering to improve locality of reference. We describe five reordering strategies, one using the static call graph and four based on analysis of the dynamic call graph. One large application was studied under varied amounts of available memory. The best dynamic strategy gave speed improvements ranging from 23 to 66 %, while the static method [...] ...|$|E
40|$|Breast {{cancer is}} the second leading cause of cancer deaths in women today. Currently, {{mammography}} is the primary method of early detection. However, re-search has shown that many cases (10 - 30 %) missed by mammography can be detected using breast MRI (BMRI). BMRI {{is more difficult to}} interpret than mammography because it generates significantly more data. Also, there are fewer people qualified to use it for diagnosis because it is not the standard breast imaging modality. Our goal is to develop and test a CAD system to aid and improve the perfor-mance of radiologists with different levels of experience in reading breast MR images. Part of the CAD system is an <b>image</b> <b>loader</b> and viewer capable of displaying multi-ple sequences simultaneously, with standard region of interest and high level analysis tools. We propose a semi-automatic segmentation method that identifies significant lesions. Then, 42 shape, texture, and enhancement kinetics based features were com-puted. The top 13 best features were selected and used as inputs to three artificial classifiers: a backpropagation neural network (BNN), a support vector machin...|$|E
40|$|Core Updates: Adds Savu runtime {{template}} option: Adds syntax in configurator {{to choose}} subset of parameters Adds option {{to create a}} template (yaml file) when saving process list Adds option to pass template at runtime Adds updates to process list in savu from template file Adds Dosna (Distributed Object Store Numpy Array) transport Option to replace hdf 5 backend Adds dockerfile Updates savu_installer with [...] no_prompts and [...] PREFIX options Fixes bug of multiple processing accessing the same chunk wrong value updating max_frames_transfer dict entry for use in chunking calculations should improve performance Separates transfer of dark and flat frames that are far apart in data with image key Significantly improves performance as hdf 5 doesn't handle this well Plugin Updates: Adds template loaders that parse a data description from a yaml file Adds hdf 5 _template_loader Adds image_template_loader Adds folder of template examples Allows greater flexibility in data loading and clearer descriptions Adds camera_rot_correction plugin Align data with tilted cor Refines nexus multi-modal loaders Updates tiff saver Change to output folder name Updates Fabio data type (used in <b>image</b> <b>loader)</b> : Allows stepping over data Allows stitching in any dimensions Sets datatype to 32 bit Refines image_loader Fixes vo_centering for start_pixel values when downsampling {{is applied to the}} data Updates distortion correction parameter...|$|E
40|$|Many {{software}} {{systems are}} designed to be long-lived due to the costs involved in developing new systems. Changes in these systems are inevitable due to constant modifications in requirements that are necessitated by the constantly changing nature of the business environment or detection of faults. To adapt their software to all these changing requirements developers use several tools, i. e. recommendations systems. To create recommendation patterns, the recommendation system searches for groups of similar code changes in software archives using syntactical similarities. As this search is a heuristic approach the groups contain outliers that prevent the generation of many useful patterns. In this thesis, we device algorithms that work hand in hand with various classification algorithms to identify outliers in the initial groups generated by SIFE. The goal is to improve the final recommendations presented to the developer. For the improved classification we first use manifold learning algorithms to map our data to a three dimensional space. We then use the 3 D coordinates of generalizable groups as our feature vectors and train group-specific, project-specific and global classifiers. With these classifiers we make changes to the initial groups. We evaluate the results of the changed groups with the Disruptor, Retrofit, Picasso, Flym, Android Chart and Android Universal <b>Image</b> <b>Loader</b> software repositories. Our approach results in an improvement of up to 36 % in the repositories. Joint degree with Friedrich-Alexander-Universität Erlangen-Nürnberg. Erasmus Mundus COSSEApplied mathematicsElectrical Engineering, Mathematics and Computer Scienc...|$|E

