34|78|Public
25|$|Most bugs {{arise from}} {{mistakes}} and errors made {{in either a}} program's source code or its design, or in components and operating systems used by such programs. A few are caused by compilers producing <b>incorrect</b> <b>code.</b> A program that contains {{a large number of}} bugs, and/or bugs that seriously interfere with its functionality, is said to be buggy (defective). Bugs can trigger errors that may have ripple effects. Bugs may have subtle effects or cause the program to crash or freeze the computer. Other bugs qualify as security bugs and might, for example, enable a malicious user to bypass access controls in order to obtain unauthorized privileges.|$|E
25|$|Some {{academics}} took a purist {{approach to}} the Böhm-Jacopini result and argued that even instructions like break and return {{from the middle of}} loops are bad practice as they are not needed in the Böhm-Jacopini proof, and thus they advocated that all loops should have a single exit point. This purist approach is embodied in the language Pascal (designed in 1968–1969), which up to the mid-1990s was the preferred tool for teaching introductory programming in academia. The direct application of the Böhm-Jacopini theorem may result in additional local variables being introduced in the structured chart, and may also result in some code duplication. The latter issue is called the loop and a half problem in this context. Pascal is affected by both of these problems and according to empirical studies cited by Eric S. Roberts, student programmers had difficulty formulating correct solutions in Pascal for several simple problems, including writing a function for searching an element in an array. A 1980 study by Henry Shapiro cited by Roberts found that using only the Pascal-provided control structures, the correct solution was given by only 20% of the subjects, while no subject wrote <b>incorrect</b> <b>code</b> for this problem if allowed to write a return from the middle of a loop.|$|E
5000|$|If {{both teams}} had the <b>incorrect</b> <b>code,</b> the {{champion}} team would return the following week, but didn't win €10,000.|$|E
50|$|In this example, the {{transition}} from sector 3 to sector 4, like all other transitions, involves {{only one of the}} contacts changing its state from on to off or vice versa. This means that the sequence of <b>incorrect</b> <b>codes</b> shown in the previous illustration cannot happen.|$|R
3000|$|... 5 Strong threat {{effects of}} ALMP’s in Denmark {{have also been}} {{reported}} by Geerdsen (2006), but these results have later been challenged by Graversen and Larsen (2012) {{on the grounds that}} they relied on <b>incorrect</b> <b>coding</b> and modeling setup. It should be noted, however, that even Graversen and Larsen (2012) find evidence of significant threat effects, although much smaller than those reported by Geerdsen (2006).|$|R
3000|$|... (x) is {{a factor}} of the {{codeword}} polynomial, {{it is just the}} mean value of the probabilities that the syndromes equal to zero. The true probability should be obtained by calculating the probability that all syndromes equal to zero. But as shown in section 3.2, the probability that all syndromes equal to zero is determined by the degree of the corresponding minimal polynomial for <b>incorrect</b> <b>coding</b> parameter estimations, the probability distribution is not uniform. But we use the mean value of P [...]...|$|R
50|$|Wagon BLX113 was relettered as VBAX113 accidentally, and ran {{in service}} for a {{nearly a year}} until the error was corrected. The recoding took place in April 1979, and the <b>incorrect</b> <b>code</b> was still in place in late October.|$|E
50|$|Officials {{initially}} blamed hackers for the misactivation, {{though an}} employee of the state's Office of Emergency Management later said he or she had accidentally registered the <b>incorrect</b> <b>code</b> prior to what should have been an EAS test, prompting the broadcast of the evacuation notification instead of the test message.|$|E
50|$|A {{processor}} with an implementation of branch prediction that usually makes correct predictions can minimize the performance penalty from branching. However, if branches are predicted poorly, it may create more {{work for the}} processor, such as flushing from the pipeline the <b>incorrect</b> <b>code</b> path that has begun execution before resuming execution at the correct location.|$|E
50|$|In all {{of these}} areas, {{the result of the}} {{confusion}} is that callers are adding an <b>incorrect</b> area <b>code</b> to numbers allocated within the new local number ranges, and that then results in a mis-dialled call.|$|R
40|$|BACKGROUND: The Manchester triage system (MTS) is {{now widely}} used in UK {{accident}} and emergency (A&E) departments. No clinical outcome studies have yet been published to validate the system. Safety of triage systems {{is related to the}} ability to detect the critically ill, which has to be balanced with resource implications of overtriage. OBJECTIVES: To determine whether the MTS can reliably detect those subsequently needing admission to critical care areas. METHODS: Analysis of emergency admissions to critical care areas and comparison with original A&E triage code by a nurse using the MTS at time of presentation. Retrospective coding of all cases according to the MTS by experts and case analysis to determine whether any non-urgent coding was due to the system or to <b>incorrect</b> <b>coding.</b> RESULTS: Sixty one (67 %) of the patients admitted to a critical care area were given triage category 1 or 2 (that is, to be seen within 10 minutes of arrival). Eighteen cases given lower priority were due to <b>incorrect</b> <b>coding</b> by the triage nurse. Six cases were correctly coded by the MTS, of which five deteriorated after arrival in the A&E department. Only one case was critically ill on arrival and yet was coded as able to wait for up to one hour. CONCLUSIONS: The MTS is a sensitive tool for detecting those who subsequently need critical care and are ill on arrival in the A&E department. It did fail to detect some whom deteriorated after arrival in A&E. Most errors were due to training problems rather than the system of triage. Analysis of critically ill patients allows easy audit of sensitivity of the MTS but cannot be used to calculate specificity...|$|R
50|$|Sweble parses the Wikitext and {{produces}} an abstract syntax tree as output. This helps to avoid errors from <b>incorrect</b> markup <b>code</b> (e.g. having a link spanning over multiple cells of a table). A {{detailed description of}} the abstract syntax tree model {{can be found in a}} technical report about the Wikitext Object Model (WOM).|$|R
5000|$|According to {{empirical}} studies cited by Eric S. Roberts, student programmers had difficulty formulating correct solutions for several simple {{problems in a}} language like Pascal, which doesn't allow multiple exit points. For the problem of writing a function to linearly searching an element in an array, a 1980 study by Henry Shapiro (cited by Roberts) found that using only the Pascal-provided control structures, the correct solution was given by only 20% of the subjects, while no subject wrote <b>incorrect</b> <b>code</b> for this problem if allowed to write a return {{from the middle of}} a loop.|$|E
50|$|Most bugs {{arise from}} {{mistakes}} and errors made {{in either a}} program's source code or its design, or in components and operating systems used by such programs. A few are caused by compilers producing <b>incorrect</b> <b>code.</b> A program that contains {{a large number of}} bugs, and/or bugs that seriously interfere with its functionality, is said to be buggy (defective). Bugs trigger errors that may have ripple effects. Bugs may have subtle effects or cause the program to crash or freeze the computer. Others qualify as security bugs and might, for example, enable a malicious user to bypass access controls in order to obtain unauthorized privileges.|$|E
50|$|The direct {{application}} of the Böhm-Jacopini theorem may result in additional local variables being introduced in the structured chart, and may also result in some code duplication. The latter issue is called the loop and a half problem in this context. Pascal is affected by both of these problems and according to empirical studies cited by Eric S. Roberts, student programmers had difficulty formulating correct solutions in Pascal for several simple problems, including writing a function for searching an element in an array. A 1980 study by Henry Shapiro cited by Roberts found that using only the Pascal-provided control structures, the correct solution was given by only 20% of the subjects, while no subject wrote <b>incorrect</b> <b>code</b> for this problem if allowed to write a return {{from the middle of}} a loop.|$|E
30|$|The {{transcribed}} questionnaires will {{be checked}} by the Principal Investigator (first author). Missing, inconsistent, or illogical {{information will be}} clarified with notes and subsequently rectified. Only the Principal Investigator is allowed to correct erroneous information. An audit trail will be kept for data collection and manual verification. The hard copy questionnaires will be temporarily stored in a hospital office accessible by the Principal Investigator only. Data will be entered into Epi-data (EpiData Association 2005) on a daily basis, so that logical errors, missing information and <b>incorrect</b> <b>coding</b> can be immediately identified. Thereafter, range checking and outliers detection will be performed within Epi-data {{to ensure the quality}} of data entered. Outliers will be screened using the Tukey’s method (boxplot), diagnostic graphs and residual measures (Osborne 2010). Once data cleaning is completed, the electronic dataset will be securely stored in a password-protected computer at the National Institute of Hygiene and Epidemiology, Vietnam.|$|R
30|$|Nowadays, {{society is}} highly {{dependent}} on systems utilizing Service-Oriented Architectures (SOA) for its basic day-to-day functioning (Huhns and Singh [2005]; Papazoglou et al. [2007]). These systems range from online stores to complex applications, called mashups, that combine their own resources with content retrieved via services from external data sources to create new functionalities (Huhns and Singh [2005]; Papazoglou et al. [2007]; Zheng and Lyu [2010 b]). Nevertheless, {{it is unlikely that}} services (often controlled by third parties) will ever be completely free of software faults arising from wrong specifications or <b>incorrect</b> <b>coding</b> (Trivedi et al. [2010]). Consequently, SOA-based applications should operate according to their specification in spite of faults from reused services. If faults are not tolerated then undesirable consequences could happen, which may range from mildly annoying to great financial losses (Nascimento et al. [2011]; Papazoglou et al. [2007]; Zheng and Lyu [2010 b]).|$|R
5000|$|Most {{handsets}} have {{security measures}} built into their firmware that protects them from repeated attempts {{to guess the}} unlock code. After entering more than {{a certain number of}} <b>incorrect</b> <b>codes</b> the phone becomes frozen. This is a state where the phone will display a security message that the phone needs service. Older phones could not be used at all anymore at this point, but modern smartphones often keep on working with the original SIM but need extra work to then unlock them the right way. Depending on the brand this [...] "frozen state" [...] can sometimes be resolved both by a special unfreeze code (Samsung) and cable solution and other brands need special cable solutions. In the worst situations one would need a special so-called [...] "JTAG" [...] hardware solution to fix the phone. This is often needed when there is more damage to the software, often including software damage to the [...] "bootloader".|$|R
50|$|Here, {{you could}} build this {{function}} {{or you could}} write a piece of code that simply says: for all inputs output (‘0’). This <b>incorrect</b> <b>code</b> is still 99.999 reliable, and you’ll almost certainly not discover the defect in the code {{with a handful of}} random tests sampled from the 1M. In short, testing here has a minimal probability of detecting this faulty logic because each test case has such a low probability of revealing the defective logic due to the tiny output space and its probability density function for each output. If you view the definition of a testable system to be one where test cases have a reasonable chance of detecting defects, then a high DRR suggest low observability of defects during test, and hence low testability*._____________________* Testability here refers to the likelihood that defects can be discovered during testing.|$|E
50|$|At {{parallel}} {{points in}} their respective narratives, Kivrin and Professor Dunworthy realize that she has arrived in England at the wrong time: she has arrived during the Black Death pandemic in England in 1348, more than 20 years later than her intended arrival. While there was no slippage, Badri, delirious with illness, inputted the <b>incorrect</b> <b>code,</b> resulting in her being sent then instead. The Black Death cuts a swathe through the Middle Ages just as the influenza overwhelms the medical staff of the 21st century. There are many parallels between the timelines, a way of demonstrating we have not come {{as far as we}} think. Many who could have helped Professor Dunworthy fall ill and die, including his good friend Doctor Mary Ahrens, who dies even as she tries to save the other influenza victims, and Professor Dunworthy himself is stricken by the disease.|$|E
5000|$|Some {{academics}} took a purist {{approach to}} the Böhm-Jacopini result and argued that even instructions like [...] and [...] {{from the middle of}} loops are bad practice as they are not needed in the Böhm-Jacopini proof, and thus they advocated that all loops should have a single exit point. This purist approach is embodied in the language Pascal (designed in 1968-1969), which up to the mid-1990s was the preferred tool for teaching introductory programming in academia. The direct application of the Böhm-Jacopini theorem may result in additional local variables being introduced in the structured chart, and may also result in some code duplication. The latter issue is called the loop and a half problem in this context. Pascal is affected by both of these problems and according to empirical studies cited by Eric S. Roberts, student programmers had difficulty formulating correct solutions in Pascal for several simple problems, including writing a function for searching an element in an array. A 1980 study by Henry Shapiro cited by Roberts found that using only the Pascal-provided control structures, the correct solution was given by only 20% of the subjects, while no subject wrote <b>incorrect</b> <b>code</b> for this problem if allowed to write a return from the middle of a loop.|$|E
25|$|By default MSX {{machine has}} {{hardcoded}} character set and keyboard return scan code handling algorithm. While MSX in overall has full application software compatibility, at the firmware (BIOS) level coupled with its hardware level, due to minor hardware differences, {{replacement of the}} BIOS with another from different PC may render <b>incorrect</b> scan <b>code</b> translations and thus incorrect behavior of the keyboard subsystem for the application software.|$|R
40|$|A {{theory is}} {{developed}} of how recognition categories {{can be learned}} {{in response to a}} temporal stream of input patterns. Interactions between an attentional subsystem and an orienting subsystem enable the network to self-stabilize its learning, without an external teacher, as the code becomes globally self-consistent. Category learning is thus determined by global contextual information in this system. The attentional subsystem learns bottomup codes and top-down templates, or expectancies. The internal representations formed in this way stabilize themselves against recoding by matching the learned top-down templates against input patterns. This matching process detects structural pattern properties in addition to local feature matches. The top-down templates can also suppress noise in the input patterns, and can subliminally prime the network to anticipate a set of input patterns. Mismatches activate an orienting subsystem, which resets <b>incorrect</b> <b>codes</b> and drives a rapid search for new or more appropriate codes. As the learned code becomes globally self-consistent, the orienting subsystem is automatically disengaged and the memory consolidates. After the recognition categories for a set of input patterns self-stabilize, thos...|$|R
40|$|LAMMPS {{class and}} example input script to {{generate}} the data in the article "Viscosity and dissipation reduction in granular suspensions"Important information: The file pair_lubricate_bmpoly. cpp was erroneously uploaded in a development form {{rather than in the}} final form used for the calculations. The files for this dataset have been removed, as they contained <b>incorrect</b> source <b>code.</b> An updated version of the dataset, including the correct set of files, is available at [URL]...|$|R
50|$|Upon arriving, {{the guests}} were given their new {{identity}} {{in which the}} number they see in their pod as their new name while their real names mean nothing in Solitary. The guests get two minutes to make their final phone calls, though Val cuts the calls short. The first Test gives each player {{a list of the}} three personal items brought by each player and allows them to determine which they could deny the other player, though in reality, no personal items would be withheld. While some guests took away no items, number 7 (Steve) ended up taking away every single personal item yet unaware to all guests that Val will not take away any personal items regardless to what choices the guests made. The guests were also given a meal consisting of fruit and a tasteless food bar. The first Treatment allows the players to sleep, but at given intervals, are awoken by sirens. The sirens can only be silenced by entering the correct code in a limited amount of time on a keypad; each successive code becomes longer or a variation on the previous code. If a code is not inputted or an <b>incorrect</b> <b>code</b> is given, the alarms will remain active until either a guest decides to push the red button or until the treatment is over.|$|E
40|$|Abstract−In this paper, the {{tolerance}} of Huffman Coding to memory faults is considered. Many pointer-based and array-based data structures are highly nonresilient to faults. A single fault in a memory array or a tree node {{may result in}} loss of entire data or an <b>incorrect</b> <b>code</b> stream. In this paper, a fault tolerant design scheme is developed to protect the JPEG image compression system. ...|$|E
40|$|Code {{generators}} {{for modern}} compilers {{are difficult to}} construct. To build a code generator that produces correct target code, we require detailed knowledge of the intermediate representation (IR) generated by the compiler’s front-end and intimate knowledge of the instruction set available on the target machine. We then put this knowledge to use by mapping the individual IR instructions to a sequence of target instructions that are identical in meaning. That is, the semantics of the original program and thus the original IR instructions {{that make up the}} program are preserved by this mapping. Unfortunately, it is often the case that errors are introduced by an incorrect mapping that results in the generation of <b>incorrect</b> <b>code.</b> Usually these <b>incorrect</b> <b>code</b> sequences can only be detected by compiling complete programs and testing their execution on some finite number of test cases. Because these test cases are finite, they are not sufficient to guarantee that our code generator will produce correct code in all cases. To guarantee correctness we require a general mechanism {{that will allow us to}} reason about the meaning of an IR instruction and the meaning of the target instruction sequence to determine if they are semantically identical. This reasoning procedure should not only allo...|$|E
30|$|The {{data were}} {{carefully}} checked visually and statistically for <b>incorrect</b> data <b>coding,</b> erroneous values, {{and other problems}} that could compromise their use in characterizing relevant morphological variation. Where possible, data coding problems were repaired and erroneous values were marked as missing, and a conservative mean-substitution approach used to impute the coordinate locations. The result was a final, clean data set of 947 individuals for which coordinates for 26 anatomical landmarks were available (either recorded or imputed) for all subjects.|$|R
40|$|AbstractDiabetes {{mellitus}} is {{a chronic}} disease that causes critical health complications like renal failure, heart disease, stroke, and blindness. For precluding {{the adverse effects}} of diabetes mellitus, humans use continuous glucose monitoring systems (CGMS) that represent a method of measuring blood glucose concentrations under real-life conditions. Glucose monitoring is {{an essential component of}} diabetes care but there are some limitations on accuracy. Accuracy possibly is restricted owing to manufacturing variances, storage, and aging. Because of their limitations on the environment, like temperature or elevation or to patient factors such as <b>incorrect</b> <b>coding,</b> wrong hand washing, unchangeable hematocrit, or inherently resulting interfering substances. Furthermore, exogenous interfering substances may also contribute errors to the system evaluation of blood glucose, as delay time, random fluctuations and noise concerned with sensor physics and chemistry. This paper suggests De-noising methods Savitzky-Golay Filter with Simple Multivariate Thresholding methods to remove all types of noise in CGM signal. This work has been commented with simulated data received from Glucosim that is an educational software package that simulates blood glucose and insulin dynamics in healthy individuals and patients with type 1 diabetes and approved with the Peak signal to noise ratio...|$|R
25|$|Anarky stumbles upon a {{black market}} {{transaction}} between a US senator and anonymous henchmen, and disrupts their meeting. He discovers that the senator was selling codes that revealed coordinates of bio-warfare factories in Iraq, and later that Ra's al Ghul was the buyer. The international terrorist's {{goal is to}} launch missiles against the factories from Israel, releasing clouds of deadly bacteria and sparking {{a war in the}} Middle East, the result of which would be a death toll in the millions. Ra's al Ghul eventually obtains the codes and launches his missiles. However, Anarky supplies him with the <b>incorrect</b> <b>codes</b> and the missiles land harmlessly over the desert. He then uses the Internet to alert the world to the plot, which results in the missile sites being discovered and destroyed by US warplanes. As an epilogue to the story, a secret meeting is held by key members of the federal government in the White House. The threat Anarky represents to the men attending is discussed, and it is decided that Mr. Staines, a mysterious figure employed by the federal government, would be charged with the task of neutralizing him. Mr. Staines suggests the use of Capital Eagle, a government employed superhuman, to defeat Anarky.|$|R
40|$|Templates are a {{very common}} {{solution}} to generate code. They are used for different tasks like rendering webpages, creating Java Beans and so on. Most template systems have no notion of the object language and just generate text. The drawback {{of this approach is}} the possibility to generate syntactical <b>incorrect</b> <b>code.</b> This can lead to all kinds of annoying errors. In this paper we present an approach for a syntax safe template engine. Syntax safety guarantees that the generated code can be correctly parsed. To ensure this we use the object language grammar to evaluate the template...|$|E
30|$|The T/W-test results {{shown in}} Table 2 provide a {{comparative}} {{evaluation of the}} forecasts. This test tests pair-wise comparison: it compares each model {{with each of the}} others in turn. We confirmed that the results are completely symmetrical so that the results shown in Table 2 are single-sided. The result shows that the HIST-ETAS 7 pa model is significantly more informative than the other models. The second-most informative model is the MARFS model. The top four informative models, which are HIST-ETAS 7 pa, MARFS, MARFSTA, and HIST-ETAS 5 pa are consistent with the observations in all the consistency tests. The Triple-S-Japan model is less informative than the others because of the <b>incorrect</b> <b>code</b> as discussed above.|$|E
40|$|We {{propose a}} new {{concurrent}} programming model, Automatic Mutual Exclusion (AME). In contrast to lock-based programming, {{and to other}} programming models built over software transactional memory (STM), we arrange that all shared state is implicitly protected unless the programmer explicitly specifies otherwise. An AME program is composed from serializable atomic fragments. We include features allowing the programmer to delimit and manage the fragments to achieve appropriate program structure and performance. We explain how I/O activity and legacy code can be incorporated within an AME program. Finally, we outline ways in which future work might expand on these ideas. The resulting programming model {{makes it easier to}} write correct code than <b>incorrect</b> <b>code.</b> It favors correctness over performance for simple programs, while allowing advanced programmers the expressivity they need. ...|$|E
40|$|Diseases of the {{musculoskeletal}} system (DMSS) are a topical social, medical, and economic problem. They are widespread and {{account for about}} 10 % of the overall morbidity and primary disability of population, about 5 % of primary morbidity, and about 0. 1 % of mortality. The reliable statistics are important to analyze the situation and make necessary adjustments to the organization of medical care. Objective. To examine {{the accuracy of the}} data on morbidity and mortality from DMSS in the Tula region. Materials and Methods. Data from statistical reports, reference documents, and databases of Tula region residents (including those who died in 2000 – 2011) were used. Results. The inequality in growth rates of general and primary morbidity were revealed, which is indicative of <b>incorrect</b> <b>coding</b> and underestimation of DMSS in medical organizations of the Tula region. A comprehensive phased statistical study was carried out to assess validity of the mortality data, including the following: verification of databases for errors using an automated system; control of postmortal diagnosis quality using the four-digit subcategory code in accordance with the WHO recommendations; analysis according to the initial and multiple causes of death. Underestimation of mortality from rheumatoid arthritis by about 25 % was revealed. Attention was paid to the implementation and use of automated systems. </p...|$|R
40|$|In Victoria, {{legislation}} clearly {{makes the}} notification of clinical or confirmed cases of meningococcal disease mandatory. Statistical modelling suggests that meningococcal disease is significantly under-notified, and that <b>incorrect</b> <b>codes</b> might be being ascribed to some in-patient episodes. The aims {{of this study}} were (i) to test the assumption that cases identified as non-notified cases were true cases, and (ii) to identify the reasons for non-detection on the hospital separation database and non-notification to the infectious diseases unit. Of 26 cases not identified on the in-patient dataset, the main causes were either being given completely incorrect ICD- 9 -CM codes (11 cases) or being given codes for a different type of meningitis (8 cases). Of 29 non-notified admissions, most were clinically (17) or microbiologically (6) confirmed cases, although 5 were coded in error and were not cases of meningococcal disease. Therefore, although the allocation of incorrect ICD- 9 -CM codes at separation was a major reason for discrepancy, non-notification was a real and recent problem. It is also possible that some clinical staff did not understand the relationship between Neisseria meningitidis and meningococcal disease, the public health implications of this infection, or the law relating to it. Commun Dis Intell 1999; 23 : 97 - 101...|$|R
50|$|Anarky stumbles upon a {{black market}} {{transaction}} between a US senator and anonymous henchmen, and disrupts their meeting. He discovers that the senator was selling codes that revealed coordinates of bio-warfare factories in Iraq, and later that Ra's al Ghul was the buyer. The international terrorist's {{goal is to}} launch missiles against the factories from Israel, releasing clouds of deadly bacteria and sparking {{a war in the}} Middle East, the result of which would be a death toll in the millions. Ra's al Ghul eventually obtains the codes and launches his missiles. However, Anarky supplies him with the <b>incorrect</b> <b>codes</b> and the missiles land harmlessly over the desert. He then uses the Internet to alert the world to the plot, which results in the missile sites being discovered and destroyed by US warplanes. As an epilogue to the story, a secret meeting is held by key members of the federal government in the White House. The threat Anarky represents to the men attending is discussed, and it is decided that Mr. Staines, a mysterious figure employed by the federal government, would be charged with the task of neutralizing him. Mr. Staines suggests the use of Capital Eagle, a government employed superhuman, to defeat Anarky.|$|R
