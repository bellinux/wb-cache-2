3|32|Public
50|$|The main {{equipment}} is cabled to the electronic segment, that is housed near-by in a sheltered environment and contains the system hardware, where information is stored. A minicomputer controls the radar and processes the signals and the operator {{can communicate with}} the system through a portable <b>keyboard</b> <b>terminal.</b>|$|E
40|$|Information can be {{retrieved}} {{by direct}} interrogation of a remote computer {{by means of}} a <b>keyboard</b> <b>terminal</b> and a telephone. The advantages of such an online system are fast access to large quantities of data and the opportunity to refine the enquiry by conversing with the computer. At present, data bases can be used to determine if a translation of a document, or an alternative, already exists. They can assist with translating particular words or phrases, especially in new subject areas. In the future, online systems may be exploited to produce more sophisticated aids, reflecting the structure of language. THE ENGLISH WORD is ‘online ’ and its French equivalent ‘conversationnel’. Although the main topic of this paper is how information transfer via online searching can enhance translation, I cannot resist the opportunity to start with this example of the reverse case—how translation may enhance information transfer. ‘Online ’ merely states that you are in direct contact with a computer; ‘conversationnel ’ implies that two-way communication is possible between you and the computer. The latter is nearer the truth. Online searching can be defined as the process of interactively searching for and retrieving information by computer from a machine-readable database. ...|$|E
40|$|This paper {{presents}} a revised and {{updated version of}} a FORTRAN program which computes all indices used in the Flanders ’ Interaction Matrix. The new program has added another form of data input which simplifies data entry. The new version also has the capability of interactive terminal use. EDUCATIONAL AND PSYCHOLOGICAL MEASUREMENT 1975, 35, 733 - 734. RACiopPO and Pascale (1974) developed a FORTRAN program for analyzing the outcomes of Flanders ’ Interaction Matrix. The original program has been updated and improved. Several improvements such as the capability {{for use of the}} program on keyboard terminals have been developed. The revision feature of this program which supports <b>keyboard</b> <b>terminal</b> use is the new manner of data entry. Data entry for the original program required data to be in matrix form. In other words, the user had to hand tally the data into a ten by ten matrix. Purpose The {{purpose of this paper is}} to make known a new program that provides for data entry in the form of Flanders ’ category numbers in direct correspondence to the observation. The program in effect builds the ten by ten matrix...|$|E
5000|$|... where [...] is optional.The value may be any nonnegative integer {{allowed by}} the systemfor this purpose (but 0, 5 and 6 often denote the error, <b>keyboard</b> and <b>terminal,</b> respectively).|$|R
5000|$|... #Caption: Corrosion {{occurring}} on a Model F 122 <b>terminal</b> <b>keyboard</b> {{along with}} dust ...|$|R
5000|$|... as a CP/M system, {{using the}} Timex Terminal 3000, a <b>terminal</b> <b>keyboard,</b> as a console.|$|R
5000|$|... #Caption: 4800-52 {{mainframe}} / dumb <b>terminal</b> <b>keyboard,</b> circa mid 1980s. Note {{the obscure}} configuration of modifier and arrow keys, line feed key, break key, blank keys, and repeat key.|$|R
2500|$|The {{idea for}} SAGE {{grew out of}} Project Whirlwind, a World War II {{computer}} development effort, when the War Department realized that the Whirlwind computer might anchor a continent-wide advance warning system. Developed during the 1950s by Massachusetts Institute of Technology (MIT) Lincoln Laboratories engineers and scientists for the U.S. Air Force, SAGE monitored North American skies for possible attack by manned aircraft and missiles for twenty-five years. Aside from its strategic importance, SAGE set the foundation for mass data-processing systems and foreshadowed many computer developments of the 1960s. The heart of the system, the IBM AN/FSQ-7 computer, was the first computer to have an internal memory composed of [...] "magnetic cores," [...] thousands of tiny ferrite rings that served as reversible electromagnets. SAGE also introduced computer-driven graphic displays, online <b>keyboard</b> <b>terminals,</b> time-sharing, high-availability computation with a redundant AN/FSQ-7 to fail over if the primary system went down, digital signal processing, digital transmission over leased telephone lines, digital track-while-scan, digital simulation, computer networking, and duplex computing.|$|R
50|$|SYS$INPUT - Standard input. Used interactively, this {{represents}} the <b>terminal</b> <b>keyboard.</b> Used in a batch file, it is batch file lines not preceded with a $ symbol, or specified as an input deck using the DECK command.|$|R
5000|$|... "In the Four-Phase System IV/70 {{the memory}} and control {{requirements}} {{of up to}} 32 <b>keyboard</b> display <b>terminals</b> are combined with the mainframe memory and logic of the Central Processing Unit. As a result, data is displayed directly from refresh areas of the Four-Phase Systems parallel-accessed LSI memory, eliminating the cost of separate buffer memories in every terminal. Using this technique, exceptionally high video throughput results, enabling new information to be displayed {{at a rate of}} 395,000 characters per second." ...|$|R
50|$|A {{function}} key {{is a key}} on a computer or <b>terminal</b> <b>keyboard</b> which can be programmed so as to cause an operating system command interpreter or application program to perform certain actions, a form of soft key. On some keyboards/computers, {{function key}}s may have default actions, accessible on power-on.|$|R
5000|$|Event0 {{is set in}} an {{alternate}} timeline where humanity achieved interplanetary space travel {{as early as the}} 1980s. The game takes place in this timeline's 2012, where the player's character is selected by International Transport Spacelines (ITS) {{to be part of a}} mission to Jupiter's moon Europa, from Earth. En route, the ship suffers a catastropic failure and the player-character appears to be the only member of its crew to escape into a lifepod. The pod drifts for several weeks until it comes across the Nautilus, a leisure ship built in the 1980s. The player-character docks with the ship, and discovers that while the Nautilus is still functional, it has fallen into disrepair, with no sign of its human crew. The only conversations on the ship are through the ship's artificial intelligence (AI) named Kaizen-85 (from the Japanese word kaizen meaning [...] "continuous improvement"), who communicates with the player-character through <b>keyboard</b> <b>terminals</b> throughout the ship. Kaizen-85 instructs the player-character to destroy the Nautiluss [...] "Singularity Drive", the engine that powers the ship, as it claims this will enable it to return them both back to Earth. However, as the player explores the station more, they discover that many of the doors and systems have been locked down apparently by the previous human crew, and must work with Kaizen-85 to access these systems.|$|R
5000|$|Diode matrix ROM, used {{in small}} amounts in many {{computers}} in the 1960s as well as electronic desk calculators and <b>keyboard</b> encoders for <b>terminals.</b> This ROM was programmed by installing discrete semiconductor diodes at selected locations between a matrix of word line traces and bit line traces on a printed circuit board.|$|R
40|$|This paper {{describes}} a microbiology information system which is {{integrated into a}} general purpose laboratory information system as well as into the normal workflow of the microbiology laboratory. Data entry using “customized” <b>terminal</b> <b>keyboards</b> greatly simplify technologists interaction with the system allowing direct entry of results at each workstation. Results are reported in a user oriented format utilizing full English description of all terms...|$|R
50|$|In the vi {{family of}} text editors, escape {{is used to}} switch modes. This usage is due to escape being {{conveniently}} placed {{in what is now}} the tab position on the ADM-3A <b>terminal</b> <b>keyboard</b> used to develop vi, though it is now inconveniently placed. This is similar to how the extensive modifier keys in Emacs were easily used on the original keyboard (the space-cadet keyboard), being placed together, but these keys have now been spread around the keyboard, becoming more difficult to use.|$|R
5000|$|As many <b>keyboards</b> and {{computer}} <b>terminals</b> once directly generated ASCII code, {{the choice of}} control-C overlapped with the ASCII end-of-text character. This character has a numerical value of three, as [...] "C" [...] is the third letter of the alphabet. It was chosen to cause an interrupt as it is otherwise unlikely {{to be part of}} a program's interactive interface. Many other control codes, such as control-D for the end-of-transmission character, do not generate signals and are occasionally used to control a program.|$|R
40|$|This paper {{describes}} {{interactive software}} systems for making agricultural crop acreage estimates using LANDSAT MSS data developed {{jointly by the}} Center for Advanced Computation of the University of Illinois and the Statistical Reporting Service of the United States Department of Agriculture. These acreage estimation procedures have been incorporated into, and use features previously developed in, EDITOR. EDITOR is an interactive file management and image processing system developed by the Center for Advanced Computation in collaboration with USGS/DI, NASA/AMES, and USDA/SRS. The crop acreage estimation software is implemented {{as part of the}} EDITOR system on TENEX, a modified DEC SYSTEM- 10. The only hardware necessary to access this acreage estimation subsystem or the whole EDITOR system consists of a KSR (<b>keyboard</b> send-receive) <b>terminal</b> with acoustic coupler and a telephone link to a TENEX system on the ARPA network. An x-y coordinate digitizer and, optionally a terminal graphics plotter, are also needed for digitizing ground-truth samples and interactive registration capabilities...|$|R
25|$|Michael Bloomberg's 1997 {{autobiography}} {{contains a}} chapter entitled Computers for Virgins, which explains {{the differences in}} the design of the <b>terminal</b> and its <b>keyboard</b> from the standard IBM PC keyboard layout that was popular at that time. The <b>terminal's</b> <b>keyboard</b> layout was designed for traders and market makers who had no prior computer experience. While the look and feel of the Bloomberg keyboard is very similar to the standard computer keyboard, there are several enhancements that help users navigate through the system, from the idea for a user-friendly system when originally designed in the early 1980s.|$|R
40|$|EZPLOT is a {{computer}} applications program that converts data resident on a file into a plot displayed on the screen of a graphics terminal. This program generates either time history or x-y plots in response to commands entered interactively from a <b>terminal</b> <b>keyboard.</b> Plot parameters consist of a single independent parameter and from one to eight dependent parameters. Various line patterns, symbol shapes, axis scales, text labels, and data modification techniques are available. This user's manual describes EZPLOT as it is implemented on the Ames Research Center, Dryden Research Facility ELXSI computer using DI- 3000 graphics software tools...|$|R
50|$|Michael Bloomberg's 1997 {{autobiography}} {{contains a}} chapter entitled Computers for Virgins, which explains {{the differences in}} the design of the <b>terminal</b> and its <b>keyboard</b> from the standard IBM PC keyboard layout that was popular at that time. The <b>terminal's</b> <b>keyboard</b> layout was designed for traders and market makers who had no prior computer experience. While the look and feel of the Bloomberg keyboard is very similar to the standard computer keyboard, there are several enhancements that help users navigate through the system, from the idea for a user-friendly system when originally designed in the early 1980s.|$|R
40|$|The {{following}} thesis {{describes an}} {{implementation of a}} minimal operating system which supports user interaction through <b>keyboard</b> and a <b>terminal</b> window. The system design is inspired by GNU/Linux operating system and is at its core monolithic kernel with support for memory management, kernel modules and various peripheral drivers, like serial ports, VGA terminal, timers and interrupts. The {{second part of the}} system is the user mode using a REPL terminal with some inbuilt tools for basic computer tasks and demonstration on system capabilities. The operating system uses C programming language, as well as x 86 architecture assembly for some critical parts. Bochs, the virtual machine software was used to emulate hardware while in development, however, the system can be booted on compatible physical hardware...|$|R
40|$|A {{method of}} {{developing}} an input data file {{for use in}} the aerodynamic analysis of a complete airplane with the VORLAX computer program is described. The hardware consists of an interactive graphics terminal equipped with a graphics tablet. Software includes graphics routines from the Tektronix PLOT 10 package as well as the VORTAB program described. The user determines the size and location of each of the major panels for the aircraft before using the program. Data is entered both from the <b>terminal</b> <b>keyboard</b> and the graphics tablet. The size of the resulting data file is dependent on the complexity of the model and can vary from ten to several hundred card images. After the data are entered, two programs READB and PLOTB, are executed which plot the configuration allowing visual inspection of the model...|$|R
25|$|The {{precursor}} for {{the modern}} home loan banking services were the distance banking services over electronic media from the early 1980s. The term 'online' became popular in the late 1980s and referred {{to the use of}} a <b>terminal,</b> <b>keyboard</b> and TV (or monitor) to access the banking system using a phone line. 'Home banking' can also refer to the use of a numeric keypad to send tones down a phone line with instructions to the bank. Online services started in New York in 1981 when four of the city's major banks (Citibank, Chase Manhattan, Chemical and Manufacturers Hanover) offered home banking services. using the videotex system. Because of the commercial failure of videotex these banking services never became popular except in France where the use of videotex (Minitel) was subsidised by the telecom provider and the UK, where the Prestel system was used.|$|R
40|$|The {{introduction}} of a Clinical Information System (CIS) in a regional state hospital in Greece brought up a number of critical factors that affect the successful application of such systems. The major obstacle was identified to be the medical professional's refusal to use the system. As a way to overcome this obstacle the interest was focused on improving the system's Human Computer Interface (HCI). A number of technologies have been considered and examined such as Speech Recognition Systems, use of Palm Top Computers, and Bar Coding Systems. The productive use of the CIS {{was based on the}} usage of regular computer <b>terminals</b> (<b>keyboard</b> and mouse) proved that the clinical personnel do not accept the offered ergonomic solution. Without the application of improved HCI with state of the art technologies, the productive use of CIS seems rather difficult...|$|R
50|$|The {{precursor}} for {{the modern}} home loan banking services were the distance banking services over electronic media from the early 1980s. The term 'online' became popular in the late 1980s and referred {{to the use of}} a <b>terminal,</b> <b>keyboard</b> and TV (or monitor) to access the banking system using a phone line. 'Home banking' can also refer to the use of a numeric keypad to send tones down a phone line with instructions to the bank. Online services started in New York in 1981 when four of the city's major banks (Citibank, Chase Manhattan, Chemical and Manufacturers Hanover) offered home banking services. using the videotex system. Because of the commercial failure of videotex these banking services never became popular except in France where the use of videotex (Minitel) was subsidised by the telecom provider and the UK, where the Prestel system was used.|$|R
5000|$|NLS was {{demonstrated}} by Engelbart on December 9, 1968 {{to a large}} audience at that year's Fall Joint Computer Conference in San Francisco. This has since been dubbed [...] "The Mother of All Demos", as it not only demonstrated the groundbreaking features of NLS, but also involved assembling some remarkable state-of-the-art video technologies. Engelbart's onstage <b>terminal</b> <b>keyboard</b> and mouse was linked by a homemade modem at 2400 baud via a leased line that connected to ARC's SDS 940 computer in Menlo Park, 48 kilometer southeast of San Francisco, and two microwave links carried video from Menlo Park back to a massive Eidophor video projector loaned by the NASA Ames Research Center. On a 22-foot (6.7 meter) high screen with video insets, the audience could follow Engelbart's actions on his display, observe how he used the mouse, and watch as members of his team in Menlo Park joined in the presentation.|$|R
40|$|Automated test {{capability}} for extensive low-level hardware fault insertion testing is developed. The test capability {{is used to}} calibrate fault detection coverage and associated latency times as relevant to projecting overall system reliability. Described are modifications made to the NASA Ames Reconfigurable Flight Control System (RDFCS) Facility to fully automate the total test loop involving the Draper Laboratories' Fault Injector Unit. The automated capability provided included the application of sequences of simulated low-level hardware faults, the precise measurement of fault latency times, the identification of fault symptoms, and bulk storage of test case results. A PDP- 11 / 60 served as a test coordinator, and a PDP- 11 / 04 as an instrumentation device. The fault injector was controlled by applications test software in the PDP- 11 / 60, rather than by manual commands from a <b>terminal</b> <b>keyboard.</b> The time base was especially developed for this application to {{use a variety of}} signal sources in the system simulator...|$|R
5000|$|In Version 7 Unix, {{a command}} was {{connected}} to a <b>terminal</b> (<b>keyboard</b> and screen, or keyboard and printer) through a mechanism called the line discipline, which would buffer a single line of input, i.e., wait for the user to press the Return key before sending input to the program for processing; this allowed simple error correction. Streams replaced this {{with a set of}} processing modules organized in a linear chain that allowed bidirectional communication with between neighboring modules. Programs could [...] "push" [...] a new module onto one end of the chain to change the behavior of a terminal or other character device. Ritchie gives the example chain of a terminal modules chained with a Datakit network module to achieve remote login over a network. Aside from characters (bytes) going from program to device and vice versa, Streams could carry control messages such as [...] "hangup" [...] (drop connection) and ioctl messages.|$|R
5000|$|Vector Graphic sales {{peaked in}} 1982, {{by which time}} the company was {{publicly}} traded, at $36 million. It faltered soon after due to several factors. The introduction of the IBM PC in August 1981 shifted the market and smaller players lost momentum. The Vector 4 was accidentally pre-announced in April 1982, the same month that founder and chief hardware designer Robert Harp left the company after a dispute with co-founder (and wife) Lore Harp {{over control of the}} company. The early announcement of the Vector 4, which had a separate keyboard tethered to the computer (as opposed to a combined <b>keyboard</b> and <b>terminal)</b> resulted in a sharp decrease in sales of the Vector 3 as customers delayed purchases up to six months until the new product was available. In addition, the company had decided to use the CP/M operating system in the Vector 4, which they considered a superior operating system than MDOS; management recognized the nature of their gamble, as IBM would move the market in a different direction if it elected to use the DOS operating system for their competing product, the IBM 8080. The gamble did not pay off, {{and by the end of}} 1984 Lore Harp was gone and venture capital investors took over. By summer 1985 only three dozen employees remained, down from a peak of 425 workers in 1982. Ultimately, the Vector Graphic headquarters and assembly factory, across from a 17-person company (Amgen) and next to the 101 freeway, was converted into a Home Depot store. [...] Chapter 11 bankruptcy followed in December 1985. A sought-for merger partner was not found and chapter 7 liquidation of remaining assets resulted in October 1987.|$|R
50|$|Reed {{switches}} actuated by magnets {{are commonly}} used in mechanical systems as proximity sensors. Examples are door and window sensors in burglar alarm systems and tamperproofing methods (however they can be disabled by a strong, external magnetic field). Reed switches are used in modern laptops to put the laptop on sleep/hibernation mode when the lid is closed. Speed sensors on bicycle wheels and car gears use a reed switch to actuate briefly each time a magnet on the wheel passes the sensor. Reed switches were formerly used in the <b>keyboards</b> for computer <b>terminals,</b> where each key had a magnet and a reed switch actuated by depressing the key; cheaper switches are now used. Electric and electronic pedal keyboards used by pipe organ and Hammond organ players often use reed switches, where the glass enclosure of the contacts protects them from dirt, dust, and other particles. They may {{also be used to}} control diving equipment such as flashlights or camera, which must be sealed to keep pressurized water out.|$|R
30|$|In particular, typing {{inference}} can be {{made from}} the sensor data that are collected from smartwatches. For example, Wang et al. proposed using a linguistic model to infer which word a user types on a standard keyboard according to the accelerometer and gyroscope data collected from the user’s smartwatch (Wang et al. 2015). A limitation of this solution is that it cannot deal with non-contextual inputs such as passwords and PINs, which are not covered by a linguistic model. Liu et al. proposed another solution that makes use of the sensors in smartwatches, including accelerometer and microphone, to infer users’ inputs on <b>keyboards</b> or POS <b>terminals</b> (Liu et al. 2015). Their solution is based on a machine-learning classifier which should be trained from smartwatch sensor data measuring hand movements between keystrokes. Maiti et al. also proposed a solution that makes use of smartwatch sensors to infer users’ input; in addition, they proposed a protection framework that regulates sensor data access (Maiti et al. 2016). Different from these research efforts, Wang et al. proposed a contextual-free and training-free solution to infer users’ PINs by exploiting the sensors in wearable devices, including accelerometers, gyroscopes, and magnetometers (Wang et al. 2016).|$|R
40|$|Normally capable adults learned two-choice {{identity}} matching of three-digit numerals and arbitrary matching of physically dissimilar nonsense syllables. The stimuli {{were displayed}} on a computer terminal, and responses consisted of typing on the <b>terminal's</b> <b>keyboard.</b> In Experiment 1, every trial displayed a sample numeral, a comparison numeral, and three equal signs (= = =). The comparison stimulus was to be selected if it was identical with the sample; otherwise the equal sign was to be selected. This "single comparison" method was then used to show that arbitrary matching could be based upon either sample-S+ or sample-S- relations. In Experiment 2, a series of probe trials displayed a novel sample, a comparison stimulus from the arbitrary matching baseline, and = = =. Subjects typically selected = = =; they apparently were excluding the baseline comparison stimulus. Experiments 3 through 5 investigated which variables in training {{would lead to the}} selection of baseline comparison stimuli in response to novel samples. Behavior was usually unchanged when baseline training included relating comparison stimuli to as many as four different samples. Punishment contingencies were effective, but performance did not generalize unless those contingencies were applied in relation to more than one baseline comparison stimulus...|$|R
40|$|A {{scheme is}} {{described}} which enables users {{to interact with}} a timesharing computer in an ideographic language such as Chinese. The host computer runs a completely unmodified English-based operating system ° the necessary translation being performed by a preprocessing microcomputer which constitutes the ideographic terminal. The two systems communicate through a serial line, and the host sees the preprocessor as an ordinary (English) terminal. Although the examples are all drawn from Chinese, the scheme could equally well serve other ideographic languages like Japanese and Korean. After brief consideration of the <b>terminal's</b> <b>keyboard</b> and display, we examine the software problems of translation for six example subsystems ~ two interpreted programming languages, text editor, document preparation system, interactive database management system, and the command level of the operating system itself. The investigation shows that few limitations need {{be placed on the}} user's actions. For example, a suitable transliteration to alphabetics allows ideographic filenames to be used and manipulated quite naturally by operating system commands (which are themselved transliterated). The same transliteration allows ideographic text to be entered, edited, stored, displayed, and printed without difficulty. If text to be altered is located and specified by context (as is common with most modern text editors), rather than by character offsets, the transliteration must be designed to yield unambiguous pattern matching. Existing document-preparation software can be used for ideographic text, although there is a difficulty if English and ideographics are interspersed within the same document. The most difficult subsystem to handle is the BASIC language, with its baroque syntax and non-contextual string-matching operations: however, the paper shows how suitable action by the preprocessor can overcome all problems of standard BASIC except for operations which depend explicitly on ASCII codes...|$|R
40|$|One of {{the most}} {{time-consuming}} yet necessary tasks of writing any piece of interactive software {{is the development of}} a user interface. Yet Another Menu Manager, YAMM, is an application independent menuing package, designed to remove much of the difficulty and save much of the time inherent in the implementation of the front ends for large packages. Written in C for UNIX-based operating systems, YAMM provides a complete menuing front end {{for a wide variety of}} applications, with provisions for terminal independence, user-specific configurations, and dynamic creation of menu trees. Applications running under the menu package consists of two parts: a description of the menu configuration and the body of application code. The menu configuration is used at runtime to define the menu structure and any non-standard <b>keyboard</b> mappings and <b>terminal</b> capabilities. Menu definitions define specific menus within the menu tree. The names used in a definition may be either a reference to an application function or the name of another menu defined within the menu configuration. Application parameters are entered using data entry screens which allow for required and optional parameters, tables, and legal-value lists. Both automatic and application-specific error checking are available. Help is available for both menu operation and specific applications. The YAMM program was written in C for execution on a Sun Microsystems workstation running SunOS, based on the Berkeley (4. 2 bsd) version of UNIX. During development, YAMM has been used on both 68020 and SPARC architectures, running SunOS versions 3. 5 and 4. 0. YAMM should be portable to most other UNIX-based systems. It has a central memory requirement of approximately 232 K bytes. The standard distribution medium for this program is one. 25 inch streaming magnetic tape cartridge in UNIX tar format. It is also available on a 3. 5 inch diskette in UNIX tar format. YAMM was developed in 1988 and last updated in 1990. YAMM is a copyrighted work with all copyright vested in NASA...|$|R

