149|66|Public
25|$|The {{implicit}} <b>initialization</b> <b>vector</b> (IV) {{was replaced}} with an explicit IV.|$|E
25|$|FreeOTFE {{originally}} offered encryption using cipher-block chaining (CBC) with encrypted salt-sector <b>initialization</b> <b>vector</b> (ESSIV), though from v3.00 introduced LRW {{and also}} the more secure XTS mode, which supersedes LRW in the IEEE P1619 standard for disk encryption.|$|E
25|$|In 1995, Andrew Roos {{experimentally}} {{observed that}} the first byte of the keystream is correlated to the first three bytes of the key and the first few bytes of the permutation after the KSA are correlated to some linear combination of the key bytes. These biases remained unexplained until 2007, when Goutam Paul, Siddheshwar Rathi and Subhamoy Maitra proved the keystream-key correlation and in another work Goutam Paul and Subhamoy Maitra proved the permutation-key correlations. The latter work also used the permutation-key correlations to design the first algorithm for complete key reconstruction from the final permutation after the KSA, without any assumption on the key or <b>initialization</b> <b>vector.</b> This algorithm has a constant probability of success in a time which is the square root of the exhaustive key search complexity. Subsequently, many other works have been performed on key reconstruction from RC4 internal states. Subhamoy Maitra and Goutam Paul also showed that the Roos type biases still persist even when one considers nested permutation indices, like S or S. These types of biases are used {{in some of the}} later key reconstruction methods for increasing the success probability.|$|E
50|$|<b>Initialization</b> <b>vectors</b> may be {{referred}} to as nonces, as they are typically random or pseudo-random.|$|R
5000|$|RC4. RC4's weak <b>initialization</b> <b>vectors</b> {{allow an}} {{attacker}} {{to mount a}} known-plaintext attack and {{have been widely used}} to compromise the security of WEP.|$|R
5000|$|The bulk {{encryption}} algorithm, e.g. AES_128_GCM, is used {{to encrypt}} the message stream. It also includes the key size and the lengths of explicit and implicit <b>initialization</b> <b>vectors</b> (cryptographic nonces).|$|R
50|$|Causes {{the file}} data <b>initialization</b> <b>vector</b> to {{be derived from}} the filename's <b>initialization</b> <b>vector</b> chain. The same data will be {{encrypted}} differently given a different filename or directory.|$|E
50|$|GCM {{has been}} proven secure in the {{concrete}} security model. It is secure when it is used with a block cipher that is indistinguishable from a random permutation; however, security depends on choosing a unique <b>initialization</b> <b>vector</b> for every encryption performed with the same key (see stream cipher attack). For any given key and <b>initialization</b> <b>vector</b> combination, GCM is limited to encrypting 239âˆ’256 bits of plain text (64 GiB). NIST Special Publication 800-38D includes guidelines for <b>initialization</b> <b>vector</b> selection.|$|E
50|$|If {{the freedom}} to select an <b>initialization</b> <b>vector</b> is removed and all {{implementations}} of CBC-MAC fix themselves on a particular <b>initialization</b> <b>vector</b> (often the vector of zeroes, but in theory, {{it could be anything}} provided all implementations agree), this attack cannot proceed.|$|E
5000|$|In 1993, Den Boer and Bosselaers gave an early, {{although}} limited, {{result of}} finding a [...] "pseudo-collision" [...] of the MD5 compression function; that is, two different <b>initialization</b> <b>vectors</b> that produce an identical digest.|$|R
5000|$|Symmetric key {{agreement}} key: These symmetric {{keys are}} used to establish keys (e.g., key wrapping keys, data encryption keys, or MAC keys) and, optionally, other keying material (e.g., <b>Initialization</b> <b>Vectors)</b> using a symmetric key agreement algorithm.|$|R
5000|$|CBC with secret IVs: The CBC mode where <b>initialization</b> <b>vectors</b> are statically {{derived from}} the {{encryption}} key and sector number. The IVs are secret, but they are re-used with overwrites. Methods for this include ESSIV and encrypted sector numbers (CGD).|$|R
50|$|When enabled, each file is {{encrypted}} with {{a random}} 8-byte <b>initialization</b> <b>vector,</b> which is stored within the encrypted file in the source directory. If this option is disabled, each file is encrypted {{with the same}} <b>initialization</b> <b>vector,</b> which can make the volume key easier to break.|$|E
5000|$|... #Subtitle level 4: Encrypted salt-sector <b>initialization</b> <b>vector</b> (ESSIV) ...|$|E
50|$|Consequently, {{renaming}} a file {{when this}} mode is enabled requires {{that either the}} file's random <b>initialization</b> <b>vector</b> be offset by {{the change in the}} filename <b>initialization</b> <b>vector</b> chain, or the data be re-encoded. The authors of EncFS have chosen the former route as it is considerably faster, especially for large files.|$|E
5000|$|Private static key {{agreement}} key: Private static key agreement {{keys are}} the private keys of asymmetric key pairs {{that are used}} to establish keys (e.g., key wrapping keys, data encryption keys, or MAC keys) and, optionally, other keying material (e.g., <b>Initialization</b> <b>Vectors).</b>|$|R
50|$|Private ephemeral key {{agreement}} key: Private ephemeral key agreement {{keys are}} the private keys of asymmetric key pairs {{that are used}} only once to establish one or more keys (e.g., key wrapping keys, data encryption keys, or MAC keys) and, optionally, other keying material (e.g., <b>Initialization</b> <b>Vectors).</b>|$|R
5000|$|CBC with {{predictable}} IVs: The CBC (cipher block chaining) mode where <b>initialization</b> <b>vectors</b> are statically {{derived from}} the sector number and are not secret; this means that IVs are re-used when overwriting a sector and the vectors can easily be guessed by an attacker, leading to watermarking attacks.|$|R
50|$|To {{overcome}} this limitation, several so-called block cipher {{modes of operation}} have been designed and specified in national recommendations such as NIST 800-38A and BSI TR-02102 and international standards such as ISO/IEC 10116. The general concept is to use randomization of the plaintext data based on an additional input value, frequently called an <b>initialization</b> <b>vector,</b> to create what is termed probabilistic encryption. In the popular cipher block chaining (CBC) mode, for encryption to be secure the <b>initialization</b> <b>vector</b> passed along with the plaintext message must be a random or pseudo-random value, which is added in an exclusive-or manner to the first plaintext block before it is being encrypted. The resultant ciphertext block is then used as the new <b>initialization</b> <b>vector</b> for the next plaintext block. In the cipher feedback (CFB) mode, which emulates a self-synchronizing stream cipher, the <b>initialization</b> <b>vector</b> is first encrypted and then added to the plaintext block. The output feedback (OFB) mode repeatedly encrypts the <b>initialization</b> <b>vector</b> to create a key stream for the emulation of a synchronous stream cipher. The newer counter (CTR) mode similarly creates a key stream, but {{has the advantage of}} only needing unique and not (pseudo-)random values as initialization vectors; the needed randomness is derived internally by using the <b>initialization</b> <b>vector</b> as a block counter and encrypting this counter for each block.|$|E
5000|$|<b>Initialization</b> <b>vector,</b> salt (cryptography), {{which are}} {{sometimes}} confused with padding ...|$|E
5000|$|... #Subtitle level 2: Key and <b>Initialization</b> <b>Vector</b> for AES-256 {{encoding}} ...|$|E
50|$|Public ephemeral key {{agreement}} key: Public ephemeral key agreement {{keys are}} the public keys of asymmetric key pairs {{that are used}} in a single key establishment transaction to establish one or more keys (e.g., key wrapping keys, data encryption keys, or MAC keys) and, optionally, other keying material (e.g., <b>Initialization</b> <b>Vectors).</b>|$|R
50|$|BLAKE2 removes {{addition}} of constants to message words from BLAKE round function, changes two rotation constants, simplifies padding, adds parameter block that is XOR'ed with <b>initialization</b> <b>vectors,</b> {{and reduces the}} number of rounds from 16 to 12 for BLAKE2b (successor of BLAKE-512), and from 14 to 10 for BLAKE2s (successor of BLAKE-256).|$|R
5000|$|CBC with random per-sector keys: The CBC mode where random {{keys are}} {{generated}} for each sector {{when it is}} written to, thus does not exhibit the typical weaknesses of CBC with re-used <b>initialization</b> <b>vectors.</b> The individual sector keys are stored on disk and encrypted with a master key. (See GBDE for details) ...|$|R
5000|$|Now {{produce the}} message [...] For each bit {{modified}} in , flip the corresponding {{bit in the}} <b>initialization</b> <b>vector</b> to produce the <b>initialization</b> <b>vector</b> [...] It follows that to compute the MAC for this message, we begin the computation by [...] As bits in both the plain text and <b>initialization</b> <b>vector</b> have been flipped in the same places, the modification is cancelled in this first stage, meaning the input to the block cipher is identical to that for [...] If no further changes are made to the plain text, the same tag will be derived despite a different message being transmitted.|$|E
5000|$|The {{implicit}} <b>initialization</b> <b>vector</b> (IV) {{was replaced}} with an explicit IV.|$|E
5000|$|... #Subtitle level 3: Allowing the <b>initialization</b> <b>vector</b> to vary {{in value}} ...|$|E
5000|$|Public key {{transport}} key: Public {{key transport}} keys are the public keys of asymmetric key pairs {{that are used}} to encrypt keys using a public key algorithm. These keys are used to establish keys (e.g., key wrapping keys, data encryption keys or MAC keys) and, optionally, other keying material (e.g., <b>Initialization</b> <b>Vectors).</b>|$|R
3000|$|Some {{cryptographic}} algorithms use {{operation modes}} with randomized <b>initialization</b> <b>vectors</b> (IV), {{in the form}} c=E(k,m,IV), {{as a way to}} provide probabilistic encryption. To provide deterministic encryption, these algorithms usually fix the IV (e.g. in zero). In these cases, we recommend the use of a PRF (pseudo random function) over the message m by using a key k [...]...|$|R
50|$|In April 2007 a {{team at the}} Darmstadt University of Technology in Germany {{developed}} a new attack method based on a paper released on the RC4 cipher by Adi Shamir. This new attack, named 'PTW', decreases the number of <b>initialization</b> <b>vectors</b> or IVs needed to decrypt a WEP key and has {{been included in the}} aircrack-ng suite since the 0.9 release.|$|R
50|$|HC-256 has a 256 bit key and an <b>initialization</b> <b>vector</b> (nonce) of 256 bits.|$|E
5000|$|The {{random number}} {{generator}} is used to generate a random <b>initialization</b> <b>vector</b> for each file.|$|E
5000|$|This example uses CubeHash80+8/1+80-512. The <b>initialization</b> <b>vector</b> is {{the same}} for all 80+8/1+f-512 hashes, and is as follows: ...|$|E
50|$|In cryptography, a nonce is an {{arbitrary}} number that {{may only be}} used once. It is similar in spirit to a nonce word, hence the name. It is often a random or pseudo-random number issued in an authentication protocol to ensure that old communications cannot be reused in replay attacks. They can also be useful as <b>initialization</b> <b>vectors</b> and in cryptographic hash functions.|$|R
50|$|When {{used with}} {{asymmetric}} ciphers for key transfer, pseudorandom key generators are nearly {{always used to}} generate the symmetric cipher session keys. However, lack of randomness in those generators or in their <b>initialization</b> <b>vectors</b> is disastrous and has led to cryptanalytic breaks in the past. Therefore, {{it is essential that}} an implementation uses a source of high entropy for its initialization.|$|R
5000|$|Explicit <b>Initialization</b> <b>Vectors</b> takes {{advantage}} of this property by prepending a single random block to the plaintext. Encryption is done as normal, except the IV {{does not need to}} be communicated to the decryption routine. Whatever IV decryption uses, only the random block is [...] "corrupted". It can be safely discarded and the rest of the decryption is the original plaintext.|$|R
