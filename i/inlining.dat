503|7812|Public
25|$|Any mutual {{recursion}} {{between two}} procedures {{can be converted}} to direct recursion by <b>inlining</b> the code of one procedure into the other. If there is only one site where one procedure calls the other, this is straightforward, though if there are several it can involve code duplication. In terms of the call stack, two mutually recursive procedures yield a stack ABABAB..., and <b>inlining</b> B into A yields the direct recursion (AB)(AB)(AB)...|$|E
25|$|Saff Squeeze a {{technique}} of isolating failure within the test using progressive <b>inlining</b> {{of parts of}} the failing test.|$|E
25|$|These {{examples}} reduce {{easily to}} a single recursive function by <b>inlining</b> the forest function in the tree function, which is commonly done in practice: directly recursive functions that operate on trees sequentially process {{the value of the}} node and recurse on the children within one function, rather than dividing these into two separate functions.|$|E
40|$|This study {{presents}} a methods evaluation and intercalibration of active fluorescence-based {{measurements of the}} quantum yield (<b>inline</b> image) and absorption coefficient (<b>inline</b> image) of photosystem II (PSII) photochemistry. Measurements of <b>inline</b> image, <b>inline</b> image, and irradiance (E) can be scaled to derive photosynthetic electron transport rates (<b>inline</b> image), the process that fuels phytoplankton carbon fixation and growth. Bio-optical estimates of <b>inline</b> image and <b>inline</b> image were evaluated using 10 phytoplankton cultures across different pigment groups with varying bio-optical absorption characteristics on six different fast-repetition rate fluorometers that span two different manufacturers and four different models. Culture measurements of <b>inline</b> image and the effective absorption cross section of PSII photochemistry (<b>inline</b> image, a constituent of <b>inline</b> image) showed {{a high degree of}} correspondence across instruments, although some instrument-specific biases are identified. A range of approaches have been used in the literature to estimate <b>inline</b> image and are evaluated here. With the exception of ex situ <b>inline</b> image estimates from paired <b>inline</b> image and PSII reaction center concentration (<b>inline</b> image) measurements, the accuracy and precision of in situ <b>inline</b> image methodologies are largely determined by the variance of method-specific coefficients. The accuracy and precision of these coefficients are evaluated, compared to literature data, and discussed within a framework of autonomous <b>inline</b> image measurements. This study supports the application of an instrument-specific calibration coefficient (<b>inline</b> image) that scales minimum fluorescence in the dark (<b>inline</b> image) to <b>inline</b> image as both the most accurate in situ measurement of <b>inline</b> image, and the methodology best suited for highly resolved autonomous <b>inline</b> image measurements. © 2014 Association for the Sciences of Limnology and Oceanograph...|$|R
40|$|A graph G {{is said to}} be <b>inline</b> image-universal if it {{contains}} every graph on at most n vertices with maximum degree at most Δ. It is known that for any <b>inline</b> image and any natural number Δ there exists <b>inline</b> image such that the random graph G(n, p) is asymptotically almost surely <b>inline</b> image-universal for <b>inline</b> image. Bypassing this natural boundary, we show that for <b>inline</b> image the same conclusion holds when <b>inline</b> image...|$|R
5000|$|... "A {{function}} declared with an <b>inline</b> function specifier is an <b>inline</b> function[...] [...] [...] [...] Making {{a function}} an <b>inline</b> function suggests that {{calls to the}} function be as fast as possible. The extent to which such suggestions are effective is implementation-defined (footnote: For example, an implementation might never perform <b>inline</b> substitution, or might only perform <b>inline</b> substitutions to calls in the scope of an <b>inline</b> declaration.) ...|$|R
2500|$|This {{mutually}} recursive definition can {{be converted}} to a singly recursive definition by <b>inlining</b> the definition of a forest: ...|$|E
2500|$|Initially, Stroustrup's [...] "C with Classes" [...] added {{features}} to the C compiler, Cpre, including classes, derived classes, strong typing, <b>inlining</b> and default arguments.|$|E
2500|$|The {{standard}} {{incorporates the}} STL that was originally designed by Alexander Stepanov, who experimented with generic algorithms and containers for many years. When {{he started with}} C++, he finally found a language where {{it was possible to}} create generic algorithms (e.g., STL sort) that perform even better than, for example, the C standard library qsort, thanks to C++ features like using <b>inlining</b> and compile-time binding instead of function pointers. The standard does not refer to it as [...] "STL", as it is merely a part of the standard library, but the term is still widely used to distinguish it {{from the rest of the}} standard library (input/output streams, internationalization, diagnostics, the C library subset, etc.).|$|E
5000|$|... "A {{function}} declaration [...] [...] [...] [...] with an <b>inline</b> specifier declares an <b>inline</b> function. The <b>inline</b> specifier indicates to {{the implementation}} that <b>inline</b> substitution of the function body {{at the point of}} call is to be preferred to the usual function call mechanism. An implementation is not required to perform this <b>inline</b> substitution at the point of call; however, even if this <b>inline</b> substitution is omitted, the other rules for <b>inline</b> functions defined by 7.1.2 shall still be respected." ...|$|R
5000|$|The new engines for the A6 were 1.8-litre 20v <b>inline</b> four-cylinder, 2.0-litre 8v <b>inline</b> four-cylinder, 2.6-Litre 12V V6 and 2.8-litre 30v V6 petrol engines, {{with the}} 2.3-litre <b>inline</b> five engine being dropped on most markets. For the diesel engines, an <b>inline</b> four 1.9 Turbocharged Direct Injection (TDI), and the <b>inline</b> five (R5) 2.5 TDI (...) were available.|$|R
5000|$|... target0: dependent0 command0 << {{temporary}} <b>inline</b> file ... << [...] target1: dependent1 command1 << temporary, but preserved <b>inline</b> file ... <<KEEP [...] target2: dependent2 command2 <<filename2 named, but discarded <b>inline</b> file ... <<NOKEEP [...] target3: dependent3 command3 <<filename3 named <b>inline</b> file ... <<KEEP ...|$|R
2500|$|Alternately, {{any number}} of {{procedures}} can be merged into a single procedure that takes as argument a variant record (or algebraic data type) representing {{the selection of a}} procedure and its arguments; the merged procedure then dispatches on its argument to execute the corresponding code and uses direct recursion to call self as appropriate. [...] This {{can be seen as a}} limited application of defunctionalization. [...] This translation may be useful when any of the mutually recursive procedures can be called by outside code, so there is no obvious case for <b>inlining</b> one procedure into the other. Such code then needs to be modified so that procedure calls are performed by bundling arguments into a variant record as described; alternately, wrapper procedures may be used for this task.|$|E
50|$|<b>Inlining</b> is an {{important}} optimization, but has complicated effects on performance. As a rule of thumb, some <b>inlining</b> will improve speed at very minor cost of space, but excess <b>inlining</b> will hurt speed, due to inlined code consuming {{too much of the}} instruction cache, and also cost significant space. A survey of the modest academic literature on <b>inlining</b> from the 1980s and 1990s is given in Jones & Marlow 1999.|$|E
5000|$|As {{functions}} evolve, {{they may}} become suitable for <b>inlining</b> {{where they were}} not before, or no longer suitable for <b>inlining</b> where they were before. While <b>inlining</b> or un-inlining a function is easier than converting to and from macros, it still requires extra maintenance which typically yields relatively little benefit.|$|E
50|$|<b>Inline</b> {{hockey and}} skater hockey are team sports, similar to ice hockey. In the UK, {{there are two}} {{associations}} that govern <b>inline</b> hockey. The British <b>Inline</b> Puck Hockey Association (BIPHA) govern the sport with rules using a Puck. The British <b>inline</b> Skater Hockey Association (BiSHA) is different from BIPHA as BiSHA uses a Ball, <b>Inline</b> skates and roller skates and is played to full-contact rules. GBinline, <b>Inline</b> UK and BRHA, are minor association within the country.|$|R
50|$|The Canadian men's {{national}} <b>inline</b> {{hockey team}} {{is the national}} team for Canada, based in Dauphin, Manitoba (NIHA) and Richmond Hill, Ontario (<b>Inline</b> Canada). The team {{is controlled by the}} National <b>Inline</b> Hockey Association - Canada for IIHF events and <b>Inline</b> Canada for FIRS events.|$|R
5000|$|USA Hockey <b>Inline</b> {{was one of}} two {{governing}} bodies for the sport of <b>inline</b> hockey in the United States. [...] It was created in December 1994 by USA Hockey. On May 10, 2011, USA Hockey announced that it was terminating its <b>inline</b> program, and that all <b>inline</b> hockey memberships would expire on August 31, 2011, and encouraged USA Hockey <b>inline</b> members to transfer to USARS.|$|R
50|$|The precise {{effect of}} <b>inlining</b> on cache {{performance}} is complicated. For small cache sizes (much {{smaller than the}} working set prior to expansion), the increased sequentiality dominates, and <b>inlining</b> improves cache performance. For cache sizes close to the working set, where <b>inlining</b> expands the working set so it no longer fits in cache, this dominates and cache performance decreases. For cache sizes larger than the working set, <b>inlining</b> has negligible impact on cache performance. Further, changes in cache design, such as load forwarding, can offset the increase in cache misses.|$|E
5000|$|Compilers use {{a variety}} of {{mechanisms}} to decide which function calls should be inlined; these can include manual hints from programmers for specific functions, together with overall control via command-line options. <b>Inlining</b> is done automatically by many compilers in many languages, based on judgment of whether <b>inlining</b> is beneficial, while in other cases it can be manually specified via compiler directives, typically using a keyword or compiler directive called [...] Typically this only hints that <b>inlining</b> is desired, rather than requiring <b>inlining,</b> with the force of the hint varying by language and compiler.|$|E
50|$|The {{impact of}} <b>inlining</b> varies by {{programming}} language and program, due to {{different degrees of}} abstraction. In lower-level imperative languages such as C and Fortran it is typically a 10-20% speed boost, with minor impact on code size, while in more abstract languages it can be significantly more important, due {{to the number of}} layers <b>inlining</b> removes, with an extreme example being Self, where one compiler saw improvement factors of 4 to 55 by <b>inlining.</b>|$|E
50|$|Based on Ice Sledge Hockey, <b>Inline</b> Sledge Hockey {{is played}} {{to the same}} rules as <b>Inline</b> Puck Hockey (essentially ice hockey played off ice using <b>inline</b> skates) and has been made {{possible}} by the design and manufacture of <b>inline</b> sledges by RGK, Europe’s premier sports wheelchair maker.|$|R
50|$|Without <b>inline</b> functions, the {{compiler}} decides which {{functions to}} <b>inline.</b> The programmer {{has little or}} no control over which functions are <b>inlined</b> and which are not. Giving this degree of control to the programmer allows for the use of application-specific knowledge in choosing which functions to <b>inline.</b>|$|R
50|$|Players - {{including}} the goalie - use quad skates, whereas <b>inline</b> skates {{are used in}} <b>inline</b> hockey. Excessive contact between players is forbidden in rink hockey, unlike <b>inline</b> hockey.|$|R
5000|$|The primary {{benefit of}} <b>inlining,</b> however, is the further {{optimizations}} it allows. Optimizations that cross function boundaries {{can be done}} without requiring interprocedural optimization (IPO): once <b>inlining</b> has been performed, additional intraprocedural optimizations ("global optimizations") become possible on the enlarged function body. For example: ...|$|E
5000|$|Refactoring: local to {{instance}} variables, extract methods, <b>inlining,</b> renaming… ...|$|E
5000|$|Run-time {{compiling}} {{allows for}} more aggressive virtual function <b>inlining</b> than {{is possible for}} a static compiler, because the JIT compiler has more information about all possible targets of virtual calls, {{even if they are}} in different dynamically loaded modules. Currently available JVM implementations have no problem in <b>inlining</b> most of the monomorphic, mostly monomorphic and dimorphic calls, and research is in progress to inline also megamorphic calls, thanks to the recent invoke dynamic enhancements added in Java 7. <b>Inlining</b> can allow for further optimisations like loop vectorisation or loop unrolling, resulting in a huge overall performance increase.|$|E
50|$|Olsson was {{a member}} of the gold medal winning Swedish men's {{national}} <b>inline</b> hockey teams at the 2007 Men's World <b>Inline</b> Hockey Championships and 2008 Men's World <b>Inline</b> Hockey Championships.|$|R
50|$|Following Hockey Canada's {{shut down}} of their program, two {{separate}} governing bodies emerged. The National <b>Inline</b> Hockey Association - Canada for IIHF related {{events and the}} Canadian <b>Inline</b> Hockey Association, which became <b>Inline</b> Canada in 2003 for all FIRS related events. The two programs are both recognized by certain bodies as Canada's national <b>inline</b> hockey team. The NIHA-Canada version of the team is recognized by Hockey Canada and USA Hockey as the national team. The <b>Inline</b> Canada version is recognized by the Canadian Olympic Committee as the national team, through the IOC's recognition of the FIRS as the international organizer of <b>inline</b> hockey.|$|R
40|$|International audienceFor graphs of bounded maximum average degree, we {{consider}} the problem of 2 -distance coloring, that is, the problem of coloring the vertices while ensuring that two vertices that are adjacent or have a common neighbor receive different colors. We prove that graphs with maximum average degree less than <b>inline</b> image and maximum degree Δ at least 4 are 2 -distance <b>inline</b> image-colorable, which is optimal and improves previous results from Dolama and Sopena, and from Borodin et al. We also prove that graphs with maximum average degree less than <b>inline</b> image (resp. <b>inline</b> image, <b>inline</b> image) and maximum degree Δ at least 5 (resp. 6, 8) are list 2 -distance <b>inline</b> image-colorable, which improves previous results from Borodin et al., and from Ivanova. We prove that any graph with maximum average degree m less than <b>inline</b> image and with large enough maximum degree Δ (depending only on m) can be list 2 -distance <b>inline</b> image-colored. There exist graphs with arbitrarily large maximum degree and maximum average degree less than 3 that cannot be 2 -distance <b>inline</b> image-colored: {{the question of what}} happens between <b>inline</b> image and 3 remains open. We prove also that any graph with maximum average degree <b>inline</b> image can be list 2 -distance <b>inline</b> image-colored (C depending only on m). It is optimal as there exist graphs with arbitrarily large maximum degree and maximum average degree less than 4 that cannot be 2 -distance colored with less than <b>inline</b> image colors. Most of the above results can be transposed to injective list coloring with one color less...|$|R
5000|$|Instant, a Python module for <b>inlining</b> C and C++ code in Python; ...|$|E
50|$|Linkers {{can also}} do {{function}} <b>inlining.</b> When a linker inlines functions, it may inline functions whose source is not available, such as library functions (see link-time optimization). A run-time system can inline function as well. Run-time <b>inlining</b> can use dynamic profiling {{information to make}} better decisions about which functions to inline, as in the Java Hotspot compiler.|$|E
5000|$|Brute Force Solution This {{is done by}} <b>inlining</b> the called {{functions}} {{into the}} target ...|$|E
50|$|The Chilean {{national}} <b>inline</b> {{hockey team}} represents <b>inline</b> hockey in Chile at international competitions. The team have not played any world championship until the National Association of Hockey on Ice and <b>Inline</b> was founded and it joined the IIHF in 2000. The team does however {{participate in the}} IIHF <b>Inline</b> Hockey World Championship and FIRS <b>Inline</b> Hockey World Championships (organised by International Roller Sports Federation). Chile has rinks in Santiago and Puerto Montt, where ice hockey is being developed.|$|R
50|$|The Algerian Association of Ice and <b>Inline</b> Hockey, {{known in}} French as the Association Algérienne de Hockey sur Glace et <b>Inline,</b> is the {{governing}} body of both ice and <b>inline</b> hockey in Algeria.|$|R
5000|$|Bayer <b>Inline</b> ClassicThe Bayer <b>Inline</b> Classic was an <b>inline</b> skate race held {{three times}} in 1999, 2000, and 2001 through the city of Pittsburgh's Golden Triangle and around the North Shore of Pittsburgh.|$|R
