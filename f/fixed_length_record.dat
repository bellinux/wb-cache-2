1|4583|Public
40|$|The project {{follows the}} {{development}} of a Java Software Tool that extracts data from Flat File (<b>Fixed</b> <b>Length</b> <b>Record</b> Type), CSV (Comma Separated Values), and XLS (Microsoft Excel 97 - 2003 Worksheet file), apply transformation to those sources, and finally load the data into the end target RDBMS. The software refers to a process known as ETL (Extract Transform and Load). Those kinds of systems are called ETL systems...|$|E
50|$|Many {{computer}} files have a defined structure such as <b>fixed</b> <b>length</b> <b>records</b> {{with the data}} divided into records that are the same length. Structured data might have <b>records</b> of different <b>lengths</b> but each <b>record</b> is prefixed with a RDW (Record Descriptor Word) that indicates the length of that data {{as well as other}} attributes. JBOB data has no structure. Records are defined by the presence of characters in the data. For example, a report might have hundreds of records (or lines) but the <b>length</b> of each <b>record</b> is defined by the presence of a Carriage Return (and/or Line Feed). Mainframe computers have traditionally dealt with structured data but unstructured (JBOB) data is much more common in PC environments. The critical difference is that it is difficult, if not impossible, to advance to say, the 100th record without examining every character of the 99 records that precede it. With <b>fixed</b> <b>length</b> <b>records,</b> it is possible to calculate the exact position of a particular record. Even with variable <b>length</b> <b>records,</b> the <b>length</b> of each <b>record</b> is given so navigation is easier.|$|R
50|$|An INP {{database}} {{may contain}} up to 100K records {{of up to}} 1024 characters (expandable). Up to ten database indexes are allowed. They are btrees {{of no more than}} three levels. Databases must contain <b>fixed</b> <b>length</b> <b>records,</b> but some utilities handle variable <b>length,</b> delimited field <b>records.</b> A newline (RETURN) character {{at the end of each}} record makes INP databases accessible to the entire array of Unix utilities, including editors, sort, grep, awk, etc.|$|R
50|$|Code 0 (ASCII {{code name}} NUL) {{is a special}} case. In paper tape, {{it is the case}} when there are no holes. It is {{convenient}} to treat this as a fill character with no meaning otherwise. Since the position of a NUL character has no holes punched, it can be replaced with any other character at a later time, so it was typically used to reserve space, either for correcting errors or for inserting information that would be available at a later time or in another place. In computing it is often used for padding in <b>fixed</b> <b>length</b> <b>records</b> and more commonly, to mark the end of a string.|$|R
50|$|Some file systems {{allow the}} {{specification}} of a <b>fixed</b> <b>record</b> <b>length</b> {{which is used}} for all writes and reads. This facilitates locating the nth record as well as updating records.|$|R
5000|$|Record labelâ€”the first 24 {{characters}} of the record. This is the only portion of the record that is <b>fixed</b> in <b>length.</b> The <b>record</b> label includes the <b>record</b> <b>length</b> and the base address of the data contained in the record. It also has data elements that indicate how many characters are used for indicators and subfield identifiers. (See Variable fields, below) ...|$|R
40|$|This paper {{describes}} the PAQ 1 lossless data compression program. PAQ 1 is an arithmetic encoder using a weighted average of five bit-level predictors. The five models are: (1) a bland model with 0 or 1 equally likely, (2) {{a set of}} order- 1 through 8 nonstationary n-gram models, (3) a string matching model for n-grams longer than 8, (4) a nonstationary word unigram and bigram model for English text, and (5) a positional context model for data with <b>fixed</b> <b>length</b> <b>records.</b> Probabilities are weighted roughly by n /tp(0) p(1) where n is the context length, t is {{the age of the}} training data (number of subsequent events), and p(0) and p(1) are the probabilities of a 0 or 1 (favoring long runs of zeros or ones). The aging of training statistics makes the model nonstationary, which gives excellent compression for mixed data types. PAQ 1 compresses the concatenated Calgary corpus to 1. 824 bits per character, which is 4. 5 % better than RK (Taylor, 1999) and 2. 9 % better than PPMONSTR (Shkarin, 2001), the top programs rated by Gilchrist (2001) and Ratushnyak (2001) respectively, although those programs do slightly better on homogeneous data...|$|R
50|$|SSP {{provides}} for two different data objects called files and libraries. Files contain records, almost always with a <b>fixed</b> <b>record</b> <b>length.</b> Libraries contain programs which can reference and access these files. SSP contained more than 60 different commands that allowed operators to create, delete, copy, edit/change, and secure files and libraries.|$|R
40|$|Data {{exchange}} thru {{magnetic tape}} reels or punched cards shipped by mail or courier required hardware compatibility required common data format Rigid file formats COBOL file descriptions with <b>fixed</b> <b>length</b> fields Specified <b>record</b> and block size Often based on 80 -column punch cards XML {{would have been}} possible, but not practical Personal computers: PC's are in the hobbyist domain: 1975 - 1980 IBM PC causes a revolt against mainframe mentalit...|$|R
50|$|Since {{records are}} {{determined}} by the content of the data, metadata is required like what is the record termination character(s) and is usually stored external to the actual data or file. The processing of JBOB data is usually more difficult and may require special knowledge by the computer program. Metadata might also be required for structured data like the <b>fixed</b> <b>record</b> <b>length</b> or the largest variable <b>length</b> <b>record</b> but there usually exist standard utility software to read/write structured data since the format is a known structure.|$|R
50|$|The {{key issue}} is obtaining {{sufficiently}} detailed record descriptions, but record descriptions are generally specified abstractly in application programs by declaration statements {{defined by the}} programming language, with the language compiler handling encoding and mapping details. In a distributed processing environment, {{what is needed is}} a single, standardized way of describing records that is independent of all programming languages, one that can describe the wide variety of <b>fixed</b> and varying <b>length</b> <b>record</b> formats found in existing files.|$|R
5000|$|In an ISAM system, data is {{organized}} into records which {{are composed of}} <b>fixed</b> <b>length</b> fields. <b>Records</b> are stored sequentially, originally to speed access on a tape system. A secondary set of hash tables known as indexes contain [...] "pointers" [...] into the tables, allowing individual records to be retrieved without having to search the entire data set. This is {{a departure from the}} contemporaneous navigational databases, in which the pointers to other data were stored inside the records themselves. The key improvement in ISAM is that the indexes are small and can be searched quickly, thereby allowing the database to access only the records it needs. Additionally modifications to the data do not require changes to other data, only the table and indexes in question.|$|R
50|$|SSP {{provides}} for two different data objects called files and libraries. Files contain records, almost always with a <b>fixed</b> <b>record</b> <b>length.</b> Libraries contain programs which can reference and access these files. SSP contained more than 80 different commands that allowed operators to create, delete, copy, edit/change, and secure files and libraries. Early in the System/36 development cycle, this was seriously improved {{to incorporate the}} folder object, which can have tremendous size, numerous extents, and contain subfolders.|$|R
40|$|Objectives: The {{purpose of}} this study was to evalu-ate the risks of {{uncontrolled}} use of an objective detection criterion in recording auditory steady-state responses (ASSRs). The influence of decisions such as when to accept a response and stop the recording was assessed by analyzing the number of false- and true-detected responses. Design: A large sample of 500 multiple-stimulus ASSR recordings of normal-hearing and hearing-impaired adults and babies was processed offline. Three types of detection paradigms were evaluated. A first type had a <b>fixed</b> <b>recording</b> <b>length</b> with sig-nificance testing after the last sweep. A second type allowed a variable <b>recording</b> <b>length</b> and implied sequential application of the statistical decisio...|$|R
50|$|OPEN, CLOSE, WRITE, REWRITE, DELETE, and APPEND {{are already}} {{familiar}} to COBOL programmers {{and describe the}} actions taken to access S/34 disk files using BASIC. It isn't possible to access every single type of S/34 file because these include system files, libraries, and folders, but every user-created S/34 file with a <b>fixed</b> <b>record</b> <b>length</b> (only FORTRAN programs can use variable <b>record</b> <b>lengths)</b> will suffice. Disk files can be opened sequentially, by index, or relatively (by record number). If a file is delete-capable, records can be deleted using the DELETE statement. To add a record, use WRITE (with APPEND specified in the OPEN statement) and to update use REWRITE.|$|R
50|$|Some {{operating}} systems require that library routines {{specific to the}} record format {{be included in the}} program. This means that a program originally expected to read a variable <b>length</b> <b>record</b> file cannot read a <b>fixed</b> <b>length</b> file. These operating system must provide file system utilities for converting files between one format and another. This means copying the file (which requires additional storage space, time and coordination) may be necessary.|$|R
40|$|ABSTRACT A RATFOR is a {{preprocessor}} for Fortran {{that provides}} modern control structures and a substantial {{improvement in the}} syntax < of Fortran programs. The output of RATFOR is a Fortran program that is compiled by the Fortran processors and then executed. The RATFOR preprocessor provides statement grouping, IF-ELSE structures and four loops: DO, FOR, WHILE and REPEAT-UNTIL. RATFOR source text is free format with multiple statements on a line. Upper and lower case letters are treated as upper case letters except in character constants. There is an include facility so that large programs can be constructed out of a mul-titude of small files without using the system editor. RATFOR accepts files consisting of <b>fixed</b> <b>length</b> 80 column <b>records</b> with imbedded tabs. The program described here is an adaptation of the original RATFOR processor written at Bell Laboratories {{for use in the}} CMS environment. This manual provides {{a detailed description of the}} processor and is intended for readers who wish ta modify the processor. The user's manual is Technical Xeiff 6 randum No. 79 - 5. "...|$|R
40|$|An {{algorithm}} is presented {{for the construction}} of <b>fixed</b> <b>length</b> insertion/ deletion correcting RLL codes. This algorithm uses one or more <b>fixed</b> <b>length</b> q-ary cod:s with given Lee-distance to generate <b>fixed</b> <b>length</b> binary (d, k) -constrained codewords. This construction can be used for all possible (d, k) -constraints...|$|R
40|$|The {{algorithm}} {{is useful for}} measuring net system damping levels in stochastic processes and {{for the development of}} equivalent linearized system response models. The algorithm works by summing together all subrecords which occur after predefined threshold level is crossed. The random decrement signature is normally developed by scanning stored data and adding subrecords together. The high speed implementation of the random decrement algorithm exploits the digital character of sampled data and uses <b>fixed</b> <b>record</b> <b>lengths</b> of 2 (n) samples to greatly speed up the process. The contributions to the random decrement signature of each data point was calculated only once and in the same sequence as the data were taken. A hardware implementation of the algorithm using random logic is diagrammed and the process is shown to be limited only by the record size and the threshold crossing frequency of the sampled data. With a hardware cycle time of 200 ns and 1024 point signature, a threshold crossing frequency of 5000 Hertz can be processed and a stably averaged signature presented in real time...|$|R
50|$|A {{compression}} function mixes two <b>fixed</b> <b>length</b> {{inputs and}} produces a single <b>fixed</b> <b>length</b> {{output of the}} same size as one of the inputs. This can also be seen as that the compression function transforms one large fixed-length input into a shorter, fixed-length output.|$|R
40|$|AbstractWe present {{efficient}} on-line algorithms {{for learning}} unions of a constant number of tree patterns, unions of a constant number of one-variable pattern languages, and unions of a constant number of pattern languages with <b>fixed</b> <b>length</b> substitutions. By <b>fixed</b> <b>length</b> substitutions we mean that each occurrence of variable xi must be substituted by terminal strings of <b>fixed</b> <b>length</b> l(xi). We prove that if arbitrary unions of pattern languages with <b>fixed</b> <b>length</b> substitutions {{can be learned}} efficiently then DNFs are efficiently learnable in the mistake bound model. Since we use a reduction to Winnow, our algorithms are robust against attribute noise. Furthermore, they can be modified to handle concept drift. Also, our approach is quite general and we give results to learn a class that generalizes pattern languages...|$|R
40|$|We {{consider}} {{what is the}} amount of subwords of a word needed to completely determine the word. More precisely, we study the maximal length such that all words of this length can be uniquely determined by its subwords of a <b>fixed</b> <b>length.</b> The set of subwords of a <b>fixed</b> <b>length</b> is called a spectrum. Four types of spectrums are analyzed: sparse, factor, sparse with multiplicity and factor with multiplicity. We also study the equivalence between the proper spectrum (subwords of a <b>fixed</b> <b>length)</b> and full spectrum (subwords at most of a <b>fixed</b> <b>length)</b> for each case. In all cases except sparse with multiplicity we give a precise answer. The results about factors and about the equivalence between the proper and full spectrums are new. TUCS Research Grou...|$|R
50|$|The {{parameter}} Î” {{is known}} as the scaling dimension of the field, and its value depends on the theory under consideration. Scale invariance will typically hold provided that no <b>fixed</b> <b>length</b> scale appears in the theory. Conversely, the presence of a <b>fixed</b> <b>length</b> scale indicates that a theory is not scale-invariant.|$|R
50|$|We assume all the substrings have a <b>fixed</b> <b>length</b> m.|$|R
2500|$|The {{parameter}} Î” {{is known}} as the scaling dimension of the field, and its value depends on the theory under consideration. [...] Scale invariance will typically hold provided that no <b>fixed</b> <b>length</b> scale appears in the theory. Conversely, the presence of a <b>fixed</b> <b>length</b> scale indicates that a theory is not scale-invariant.|$|R
5000|$|<b>Fixed</b> <b>length</b> {{data and}} data delimited by text or binary markup ...|$|R
3000|$|... be {{pairwise}} non-isomorphic indecomposable modules of <b>fixed</b> <b>length</b> with isomorphic Gabrielâ€“Roiter submodule [...]...|$|R
5000|$|... a function, f, of <b>fixed</b> <b>length</b> that permutes or {{transforms}} the state memory ...|$|R
5000|$|... bb is a {{numeric code}} in two {{positions}} (<b>fixed</b> <b>length)</b> identifying the version.|$|R
40|$|Using accelerometer, {{values of}} {{variables}} V, B, F, and D were observed for a vibrating cantilever beam. Data were recorded for frequencies 60 Hz, 80 Hz, 100 Hz, and 120 Hz at various <b>fixing</b> <b>length</b> 400 mm, 350 mm and 300 mm. Considering, {{crack growth rate}} as an additional variable, a mathematical model was developed using dimensional analysis and calculated values of G were plotted to observe crack growth rate along the beam for different <b>fixing</b> <b>length.</b> Plots were compared and analyzed {{to find out the}} effect of change of <b>fixing</b> <b>length</b> at each frequency for determination of crack growth rate along beam from free end to fixed end...|$|R
3000|$|... be {{pairwise}} non-isomorphic indecomposable modules of <b>fixed</b> <b>length</b> with isomorphic co-Gabrielâ€“Roiter factor modules [...]...|$|R
50|$|The classic empat perkataan abides by the {{following}} rules and has no <b>fixed</b> <b>length.</b>|$|R
5000|$|... xxxx is an {{alphabetic}} code in four positions (<b>fixed</b> <b>length)</b> identifying the Business Process, ...|$|R
5000|$|... nnn is an {{alphanumeric}} code in three positions (<b>fixed</b> <b>length)</b> identifying the Message Functionality, ...|$|R
50|$|Fixed-length seals {{tend to be}} more tamper {{resistant}} than variable length as there are no sliding parts, they simply 'click' into place to lock, which can make them easier to fit than variable <b>length</b> seals. Most <b>fixed</b> <b>length</b> seals can also be branded and numbered for extra security. <b>Fixed</b> <b>length</b> is often the choice of single use security seals for transport applications.|$|R
40|$|We present {{efficient}} on-line algorithms {{for learning}} unions of a constant number of tree patterns, unions of a constant number of onevariable pattern languages, and unions of a constant number of pattern languages with <b>fixed</b> <b>length</b> substitutions. By <b>fixed</b> <b>length</b> substitutions we mean that each occurence of variable x {{i must be}} substituted by terminal strings of <b>fixed</b> <b>length</b> l(x i). We prove that if an arbitrary unions of pattern languages with <b>fixed</b> <b>length</b> substitutions can be learned efficiently then DNFs are efficiently learnable in the mistake bound model. Since we use a reduction to Winnow, our algorithms are robust against attribute noise. Furthermore, they can be modified to handle concept drift. Also, our approach is quite general and may be applicable to learning other pattern related classes. For example, we could learn a more general pattern language class in which a penalty (i. e. weight) is assigned to each violation of the rule that a terminal symbol cannot be changed [...] ...|$|R
