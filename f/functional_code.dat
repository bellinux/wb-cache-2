165|365|Public
25|$|In the Python {{programming}} language, lazy <b>functional</b> <b>code</b> {{for generating}} regular numbers {{is used as}} one of the built-in tests for correctness of the language's implementation.|$|E
2500|$|Gadgets {{are written}} using a {{combination}} of DHTML for visual layout, JScript and VBScript for <b>functional</b> <b>code,</b> and an XML file for defining the gadget's metadata (author name, description, etc.) The gadget is then distributed as a ZIP file with a [...]gadget extension. Displaying the gadget using DHTML allows the same gadget to be used on Microsoft's Live.com and Windows Live Spaces sites. Alternatively, on Windows Vista, the gadget can detect that WPF is available and take advantage of its graphical abilities to display differently from the web version.|$|E
5000|$|The {{first thing}} is to define a new {{instance}} of the skeleton with the <b>functional</b> <b>code</b> that fills the pattern (ShouldSplit, SplitList, Sort, MergeList). The <b>functional</b> <b>code</b> is written by the programmer without parallelism concerns.|$|E
40|$|We {{discuss the}} <b>functional</b> <b>codes</b> C-h(Q(N)), for small h >= 3, q > 9, and for N >= 6. This {{continues}} {{the study of}} different classes of <b>functional</b> <b>codes,</b> performed on <b>functional</b> <b>codes</b> arising from quadrics and Hermitian varieties. Here, we consider the <b>functional</b> <b>codes</b> arising from the intersections of the algebraic hypersurfaces of small degree h with a given non-singular quadric Q(N) in PG(N, q) ...|$|R
40|$|We {{study the}} <b>functional</b> <b>codes</b> of order h defined by G. Lachaud on X⊂P^n(F_q) a {{non-degenerate}} Hermitian variety. We give {{a condition of}} divisibility of the weights of the codewords. For X a non-degenerate Hermitian surface, we list the first five weights and the corresponding codewords and give a positive answer on a conjecture formulated on this question. The paper ends with a conjecture on the minimum distance {{and the distribution of}} the codewords of the first 2 h+ 1 weights of the <b>functional</b> <b>codes</b> for the <b>functional</b> <b>codes</b> of order h on X⊂P^n(F_q) a non-singular Hermitian variety. Comment: 12 page...|$|R
50|$|The <b>functional</b> <b>codes</b> in {{this example}} {{correspond}} to four types Condition, Split, Execute, and Merge.|$|R
50|$|In the Python {{programming}} language, lazy <b>functional</b> <b>code</b> {{for generating}} regular numbers {{is used as}} one of the built-in tests for correctness of the language's implementation.|$|E
50|$|Fault Tolerant Messaging — {{the ability}} to transparently {{failover}} a call or request from one service transport protocol to another upon failure with no changes to the <b>functional</b> <b>code</b> or business logic implementation.|$|E
5000|$|In purely <b>functional</b> <b>code,</b> if {{only one}} error {{condition}} exists, the [...] type may be sufficient, and is an instance of Haskell's [...] class by default. More complex error propagation can be achieved using the [...] or [...] monads, for which similar functionality (using [...] ) is supported.|$|E
5000|$|NNIN Virtual Vault for Pseudopotentials : This webpage {{maintained}} by the NNIN/C provides a searchable database of pseudopotentials for density <b>functional</b> <b>codes</b> as well as links to pseudopotential generators, converters, and other online databases.|$|R
30|$|Our {{understanding}} of the genetic basis of psoriasis has been rapidly advanced by GWAS approach. More than 40 robust susceptibility loci have been identified and confirmed {{to be associated with}} psoriasis using this technique. However, most of the identified risk variants are expected to be tagged as SNPs, and the <b>functional</b> <b>coding</b> variants of these susceptibility genes, particularly those that are of low frequency and rare, are largely refractory to the interrogation by GWAS. Therefore, such variants have not been systematically investigated. With the development of technologies for next-generation sequencing (NGS) technologies, such as exome sequencing analysis, the systematic investigation of coding variants is possibly. Recently, a large-scale sequencing analysis of <b>functional</b> <b>coding</b> variants was performed to investigate the contribution of <b>functional</b> <b>coding</b> variants to the genetic susceptibility of psoriasis in a Han Chinese population, identifying seven common and low-frequency nonsynonymous variants within known psoriasis susceptibility genes, including IL 23 R, GJB 2, LCE 3 D, ERAP 1, CARD 14, and ZNF 816 A, that are associated with psoriasis risk (Tang et al. [2013]).|$|R
40|$|The <b>functional</b> source <b>coding</b> {{problem in}} which the {{receiver}} side information (Has-set) and demands (Want-set) include functions of source messages is studied using row-Latin rectangle. The source transmits encoded messages, called the <b>functional</b> source <b>code,</b> {{in order to satisfy}} the receiver's demands. We obtain a minimum length using the row-Latin rectangle. Next, we consider the case of transmission errors and provide a necessary and sufficient condition that a <b>functional</b> source <b>code</b> must satisfy so that the receiver can correctly decode the values of the functions in its Want-set...|$|R
5000|$|Haskell's static typing {{can make}} it easier for program bugs to be {{detected}} at compile time. Haskell code is also often thought to be concise. The Parsec library http://www.cs.uu.nl/~daan/parsec.html, a monadic combinatorial parser written entirely in Haskell, simplifies parsing. Because Haskell is a purely functional language, making the <b>functional</b> <b>code</b> interact with the real world (inputs/outputs and time-driven environment) requires thought. To achieve this, Pugs makes extensive use of monads.|$|E
5000|$|If the {{programmer}} {{wishes to}} use that value based {{on whether or not}} it exists and is valid, the <b>functional</b> <b>code</b> inside the [...] statements is all pushed to the right, making it difficult to read longer lines. This often leads to attempts to [...] "flatten" [...] the code:if windows.contains("Main") { theWindow = windows("Main") }if theWindow != null && theWindow.views.contains(5) { theView = theWindow.views(5) }if theView != null { theWidth = theView.size (...) [...]width (...) //additional code} ...|$|E
5000|$|A Haskell program {{must contain}} a name called [...] bound to {{a value of}} type , for some type which is usually [...] [...] is a monad, which organizes {{side-effects}} in terms of purely <b>functional</b> <b>code.</b> The [...] value represents the side-effects-ful computation done by the program. The result of the computation represented by [...] is discarded; that is why [...] usually has type , which indicates {{that the type of}} the result of the computation is , the unit type, which contains no information.|$|E
40|$|In {{contrast}} to the network coding problem wherein the sinks in a network demand subsets of the source messages, in a network computation problem the sinks demand functions of the source messages. Similarly, in the <b>functional</b> index <b>coding</b> problem, the side information and demands of the clients include disjoint sets of functions of the information messages held by the transmitter instead of disjoint subsets of the messages, {{as is the case}} in the conventional index coding problem. It is known that any network coding problem can be transformed into an index coding problem and vice versa. In this work, we establish a similar relationship between network computation problems and a class of <b>functional</b> index <b>coding</b> problems, viz., those in which only the demands of the clients include functions of messages. We show that any network computation problem can be converted into a <b>functional</b> index <b>coding</b> problem wherein some clients demand functions of messages and vice versa. We prove that a solution for a network computation problem exists if and only if a <b>functional</b> index <b>code</b> (of a specific length determined by the network computation problem) for a suitably constructed <b>functional</b> index <b>coding</b> problem exists. And, that a <b>functional</b> index <b>coding</b> problem admits a solution of a specified length if and only if a suitably constructed network computation problem admits a solution. Comment: 3 figures, 7 tables and 9 page...|$|R
50|$|Sequence {{similarity}} {{methods can}} be customised for pseudogene prediction using additional filtering to find candidate pseudogenes. This could use disablement detection, which looks for nonsense or frameshift mutations that would truncate or collapse an otherwise <b>functional</b> <b>coding</b> sequence. Additionally, translating DNA into proteins sequences {{can be more}} effective than just straight DNA homology.|$|R
5000|$|... (2) All DOLLx8 {{devices have}} a <b>functional</b> {{identification}} <b>code</b> consisting of an ASCII character ...|$|R
50|$|While logic {{synthesis}} uses an RTL {{description of}} the design, high-level synthesis works {{at a higher level}} of abstraction, starting with an algorithmic description in a high-level language such as SystemC and ANSI C/C++. The designer typically develops the module functionality and the interconnect protocol. The high-level synthesis tools handle the micro-architecture and transform untimed or partially timed <b>functional</b> <b>code</b> into fully timed RTL implementations, automatically creating cycle-by-cycle detail for hardware implementation. The (RTL) implementations are then used directly in a conventional logic synthesis flow to create a gate-level implementation.|$|E
5000|$|Gadgets {{are written}} using a {{combination}} of DHTML for visual layout, JScript and VBScript for <b>functional</b> <b>code,</b> and an XML file for defining the gadget's metadata (author name, description, etc.) The gadget is then distributed as a ZIP file with a [...]gadget extension. Displaying the gadget using DHTML allows the same gadget to be used on Microsoft's Live.com and Windows Live Spaces sites. Alternatively, on Windows Vista, the gadget can detect that WPF is available and take advantage of its graphical abilities to display differently from the web version.|$|E
50|$|The ST monad allows programmers {{to write}} {{imperative}} algorithms in Haskell, using mutable variables (STRef's) and mutable arrays (STArrays and STUArrays). The {{advantage of the}} ST monad {{is that it allows}} programmers to write code that has internal side effects, such as destructively updating mutable variables and arrays, while containing these effects inside the monad. The result of this is that functions written using the ST monad appear completely pure {{to the rest of the}} program. This allows programmers to produce imperative code where it may be impractical to write <b>functional</b> <b>code,</b> while still keeping all the safety that pure code provides.|$|E
50|$|It uses a density <b>functional</b> theory <b>code</b> that {{predicts the}} {{physical}} properties {{of a collection}} of atoms.|$|R
40|$|In {{this paper}} we {{construct}} <b>functional</b> <b>codes</b> from Denniston maximal arcs. For q= 2 ^ 4 n+ 2 we obtain linear codes with parameters [(√(q) - 1) (q+ 1), 5,d]_q where _q → +∞ d=(√(q) - 1) q- 3 √(q). We also find for q= 16, 32 {{a number of}} linear codes which appear to have larger minimum distance {{with respect to the}} known codes with same length and dimension...|$|R
50|$|Originally {{discovered}} in the yeast Saccharomyces cerevisiae, the TRAMP complex trims the poly(A) tails of RNAs destined for Rrp6 and the core exosome down to 4-5 adenosines, assisting in transcript recognition and exosome complex activation. In this way, TRAMP plays {{a critical role in}} ridding the cell of noncoding transcripts generated through pervasive RNA polymerase II transcription, as well as functioning in the biogenesis and turnover of <b>functional</b> <b>coding</b> and noncoding RNAs.|$|R
50|$|Fault Tolerant Messaging or Failover Abstraction is {{the ability}} to transparently “failover” a call or request from one service {{transport}} protocol to another upon failure with no changes to the <b>functional</b> <b>code</b> or business logic implementation. In elemenope, this ability to “failover” is achieved via Dispatcher Failover DFo configuration. The elemenope framework has the ability to configure multiple nested failover chains. A typical use of the DFo functionality is the failover from a synchronous service transport protocol to an asynchronous service transport protocol. For instance, when an XML-RPC service is down, the messages may be failed over to an asynchronous JMS queue implementation for processing when the service is available.|$|E
5000|$|A {{second class}} of Aegis ship began with concept studies in 1978. The class was {{to replace the}} aging DDG-2 and DDG-37 class destroyers and handle the same air threats as the CG-47 class. The project {{responsibility}} originally lay outside of PMS 400, in another <b>functional</b> <b>code</b> in the Naval Sea Systems Command (NAVSEA 93). However, by May 1982, the project was put under Meyer's control in PMS 400, with a lead ship awarded 1985 to Bath Iron Works, Bath, Maine. Like the Ticonderoga, the ship was designed with an Aegis Combat System, modified for installation in the destroyer and less heavily armed. The ship was commissioned as [...] on July 4, 1991.|$|E
50|$|OMeta, {{like other}} meta languages, is {{primarily}} {{used to create}} domain specific languages (DSL in short); specifically, {{it is used to}} quickly prototype DSLs — OMeta’s slow running speed and unclear error reports remove much of its functionality as a full programming language (Heirbaut 73-74). OMeta is useful thanks to its ability to use one syntax for every phase of compiling, allowing it to be used rather than several separate tools {{in the creation of a}} compiler. Additionally, OMeta is valued both for the speed at which it can be used to create DSLs and the significantly lower amount of code it requires to perform such a task as opposed to vanilla implementations, with reports showing around 26% as many lines of <b>functional</b> <b>code</b> as vanilla.|$|E
40|$|Computational error {{handling}} {{is vitally important}} in scien-tific computing program. Traditional approaches tangle the {{error handling}} concerns with the primary <b>functional</b> <b>codes.</b> This paper describes our empirical study of using AspectJ to refactor a real-world Satellite Orbit Forecasting (SOF) system, and assesses the experiences gained from applying aspect-oriented techniques. The result shows that the As-pectJ version improves the modularity and maintainability of the program by encapsulating computational error han-dling polices as aspects without noticeable compromise in performance...|$|R
40|$|Objective: The {{purpose of}} this {{proof-of-concept}} study {{was to assess the}} feasibility of using a generic health measure to create <b>coded</b> <b>functional</b> status indicators and compare the characterization of a stroke population using <b>coded</b> <b>functional</b> indicators and using health-related quality-of-life summary measures alone...|$|R
50|$|BigDFT {{was among}} the first massively {{parallel}} density <b>functional</b> theory <b>codes</b> which benefited from graphics processing units (GPU) using CUDA and then OpenCL languages.|$|R
50|$|OmniMark is used {{to convert}} data from one format to another. In many respects it {{is similar to the}} Perl language. It has a {{built-in}} XML parser, which has made it popular. It has support for XQuery via integration with Sedna native XML database. It also has features to process find rules which implement a similar concept to regular expressions, although the pattern expression syntax {{is quite different from the}} more familiar regular expression syntax used in Perl and other languages. Its syntax is English-like and hence it is easy to understand. Although it is Perl's competitor, Perl and the Ruby programming language are more widely used than OmniMark. OmniMark can also be used for schema transformation tasks in the same way as XSLT, but allows straightforward paradigm switching between procedural and <b>functional</b> <b>code</b> without the need for any additional constructs to support the procedural elements.|$|E
50|$|In {{computer}} science, {{functional programming}} is a programming paradigm—a style {{of building the}} structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. It is a declarative programming paradigm, which means programming is done with expressions or declarations instead of statements. In <b>functional</b> <b>code,</b> the output value of a function depends only on the arguments that are passed to the function, so calling a function f twice with the same value for an argument x will produce the same result f(x) each time; this {{is in contrast to}} procedures depending on a local or global state, which may produce different results at different times when called with the same arguments but a different program state. Eliminating side effects, i.e. changes in state that do not depend on the function inputs, can make it much easier to understand and predict the behavior of a program, {{which is one of the}} key motivations for the development of functional programming.|$|E
5000|$|As {{a social}} experience, {{individuals}} can interact, exchange ideas, share information, provide social support, conduct business, direct actions, create artistic media, play games, engage in political discussion, and so on, using this global network. They are {{sometimes referred to}} as cybernauts. The term cyberspace has become a conventional means to describe anything associated with the Internet and the diverse Internet culture. The United States government recognizes the interconnected information technology and the interdependent network of information technology infrastructures operating across this medium as part of the US national critical infrastructure. Amongst individuals on cyberspace, there is believed to be a code of shared rules and ethics mutually beneficial for all to follow, referred to as cyberethics. Many view the right to privacy as most important to a <b>functional</b> <b>code</b> of cyberethics. [...] Such moral responsibilities go hand in hand when working online with global networks, specifically, when opinions are involved with online social experiences.|$|E
40|$|We {{study the}} <b>functional</b> <b>codes</b> C 2 (X) defined on {{projective}} varieties X, {{in the case}} where X ⊂ P 3 is a 1 -degenerate quadric or a non-degenerate quadric (hyperbolic or elliptic). We find the minimum distance of these codes, the second weight, and the third weight. We also show the geometrical structure of the first weight and second weight codewords. One result states that the codes C 2 (X) defined on the elliptic quadrics are good codes {{according to the table}} of A. E. Brouwer...|$|R
40|$|Electronic {{structures}} of MC where M is the alkali and alkaline earth metals with the rocksalt structure are calculated by full potential density <b>functional</b> <b>codes.</b> We {{find that the}} spin magnetic moment in the compounds is mainly contributed by the spin polarized p-orbitals of carbon. The large distance between the carbon makes the p-orbitals localized, which induces magnetic instability according to the Stoner criterion. The electronic structure can be mapped to the rigid band model. SrC, BaC and RaC are half-metals, while KC, RbC and CsC are magnetic semiconductor...|$|R
40|$|We {{study the}} <b>functional</b> <b>codes</b> C_ 2 (X) defined on a {{projective}} variety X, {{in the case}} where X ⊂P^ 3 is a non-degenerate hermitian surface. We first give some bounds for # X_Z(Q) (F_q), which are better than the ones known. We compute the number of codewords reaching the second weight. We also estimate the third weight, show the geometrical structure of the codewords reaching this third weight and compute their number. The paper ends with a conjecture on the fourth weight and the fifth weight of the code C_ 2 (X) ...|$|R
