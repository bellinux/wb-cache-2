2113|2653|Public
5|$|The {{corresponding}} {{concept for}} undirected graphs is a forest, an undirected graph without cycles. Choosing an orientation for a forest produces {{a special kind}} of <b>directed</b> <b>acyclic</b> <b>graph</b> called a polytree. However there are many other kinds of <b>directed</b> <b>acyclic</b> <b>graph</b> that are not formed by orienting the edges of an undirected acyclic graph. Moreover, every undirected graph has an acyclic orientation, an assignment of a direction for its edges that makes it into a <b>directed</b> <b>acyclic</b> <b>graph.</b> To emphasize that DAGs are {{not the same thing as}} directed versions of undirected acyclic graphs, some authors call them acyclic directed graphs or acyclic digraphs.|$|E
5|$|A <b>directed</b> <b>acyclic</b> <b>graph</b> {{may be used}} to {{represent}} a network of processing elements. In this representation, data enters a processing element through its incoming edges and leaves the element through its outgoing edges.|$|E
5|$|Conversely, every <b>directed</b> <b>acyclic</b> <b>graph</b> has a topological ordering. Therefore, this {{property}} {{can be used}} as an alternative definition of the directed acyclic graphs: they are exactly the graphs that have topological orderings.|$|E
5000|$|... #Subtitle level 2: Dijkstra-Scholten {{algorithm}} for <b>directed</b> <b>acyclic</b> <b>graphs</b> ...|$|R
5000|$|<b>Directed</b> <b>acyclic</b> <b>graphs</b> (DAGs) are <b>{{directed}}</b> graphs with no directed cycles.|$|R
50|$|Causal {{diagrams}} include causal loop diagrams, <b>directed</b> <b>acyclic</b> <b>graphs,</b> and Ishikawa diagrams.|$|R
5|$|For {{the same}} reason, the version {{history of a}} {{distributed}} revision control system generally has {{the structure of a}} <b>directed</b> <b>acyclic</b> <b>graph,</b> {{in which there is a}} vertex for each revision and an edge connecting pairs of revisions that were directly derived from each other. These are not trees in general due to merges.|$|E
5|$|A path in a {{directed}} graph {{can be described}} by a sequence of edges having the property that the ending vertex of each edge in the sequence {{is the same as}} the starting vertex of the next edge in the sequence; a path forms a cycle if the starting vertex of its first edge equals the ending vertex of its last edge. A <b>directed</b> <b>acyclic</b> <b>graph</b> is a {{directed graph}} that has no cycles.|$|E
5|$|In compilers, {{straight}} line code (that is, sequences of statements without loops or conditional branches) may {{be represented by}} a DAG describing the inputs and outputs {{of each of the}} arithmetic operations performed within the code. This representation allows the compiler to perform common subexpression elimination efficiently. At a higher level of code organization, the acyclic dependencies principle states that the dependencies between modules or components of a large software system should form a <b>directed</b> <b>acyclic</b> <b>graph.</b>|$|E
500|$|The graph {{enumeration}} {{problem of}} counting <b>directed</b> <b>acyclic</b> <b>graphs</b> was studied by [...]|$|R
40|$|AbstractThis paper {{studies the}} problem of drawing <b>directed</b> <b>acyclic</b> <b>graphs</b> in three {{dimensions}} in the straight-line grid model so that all directed edges are oriented in a common (upward) direction. We show that there exists a family of outerplanar <b>directed</b> <b>acyclic</b> <b>graphs</b> whose volume requirement is super-linear. We also prove that for the case of directed trees a linear-volume upper bound is achievable...|$|R
30|$|Partial Order Knowledge Structures (POKS) or <b>Directed</b> <b>Acyclic</b> <b>Graphs</b> (DAG) are optimal for {{formally}} representing knowledge domains.|$|R
5|$|The closure problem {{takes as}} input a <b>directed</b> <b>acyclic</b> <b>graph</b> with weights on its {{vertices}} and seeks the minimum (or maximum) {{weight of a}} closure, a set of vertices with no outgoing edges. (The problem may be formulated for directed graphs without the assumption of acyclicity, but with no greater generality, because {{in this case it}} is equivalent to the same problem on the condensation of the graph.) It may be solved in polynomial time using a reduction to the maximum flow problem.|$|E
5|$|In {{directed}} planar graphs, simple directed cycles are dual to directed cuts (partitions of the vertices {{into two}} subsets such that all edges go in one direction, from one subset to the other). Strongly oriented planar graphs (graphs whose underlying undirected graph is connected, {{and in which}} every edge belongs to a cycle) are dual to directed acyclic graphs in which no edge belongs to a cycle. To put this another way, the strong orientations of a connected planar graph (assignments of directions {{to the edges of}} the graph that result in a strongly connected graph) are dual to acyclic orientations (assignments of directions that produce a <b>directed</b> <b>acyclic</b> <b>graph).</b>|$|E
5|$|Directed acyclic graphs {{may also}} be used as a compact {{representation}} of a collection of sequences. In this type of application, one finds a DAG in which the paths form the given sequences. When many of the sequences share the same subsequences, these shared subsequences can be represented by a shared part of the DAG, allowing the representation to use less space than it would take to list out all of the sequences separately. For example, the directed acyclic word graph is a data structure in computer science formed by a <b>directed</b> <b>acyclic</b> <b>graph</b> with a single source and with edges labeled by letters or symbols; the paths from the source to the sinks in this graph represent a set of strings, such as English words. Any set of sequences can be represented as paths in a tree, by forming a tree vertex for every prefix of a sequence and making the parent of one of these vertices represent the sequence with one fewer element; the tree formed in this way for a set of strings is called a trie. A directed acyclic word graph saves space over a trie by allowing paths to diverge and rejoin, so that a set of words with the same possible suffixes can be represented by a single tree vertex.|$|E
5|$|<b>Directed</b> <b>acyclic</b> <b>graphs</b> {{representations}} of partial orderings have many applications in scheduling for systems of tasks with ordering constraints.|$|R
3000|$|Accordingly, a ConSert can be {{specified}} {{as a set of}} Boolean functions, which, in turn, can {{generally be}} represented by a corresponding set of (potentially overlapping) rooted <b>directed</b> <b>acyclic</b> <b>graphs</b> in a graphical specification. The root of each of these <b>directed</b> <b>acyclic</b> <b>graphs</b> is constituted by a potential safety guarantee, which becomes true if, at runtime, related (according to the Boolean logic) demands and runtime evidences are satisfied. Each graph consists of: [...]...|$|R
40|$|Abstract. We {{present the}} command line tool SYNOPS. It allows the term-based {{construction}} of partial languages consisting {{of different kinds}} of causal structures representing runs of a concurrent system: labeled <b>directed</b> <b>acyclic</b> <b>graphs</b> (LDAGs), labeled partial orders (LPOs), labeled stratified <b>directed</b> <b>acyclic</b> <b>graphs</b> (LSDAGs) and labeled stratified order structures (LSOs). It implements region based algorithms for the synthesis of place/transition nets and general inhibitor nets from behavioural specifications given by such partial languages. ...|$|R
25|$|An upward {{planar graph}} is a <b>directed</b> <b>acyclic</b> <b>graph</b> {{that can be}} drawn in the plane with its edges as non-crossing curves that are {{consistently}} oriented in an upward direction. Not every planar <b>directed</b> <b>acyclic</b> <b>graph</b> is upward planar, and it is NP-complete to test whether a given graph is upward planar.|$|E
25|$|A phylogenetic {{network is}} not {{strictly}} speaking a tree, {{but rather a}} more general graph, or a <b>directed</b> <b>acyclic</b> <b>graph</b> {{in the case of}} rooted networks. They are used to overcome some of the limitations inherent to trees.|$|E
25|$|There {{are several}} {{equivalent}} definitions of a Bayesian network. For all the following, let G = (V,E) be a <b>directed</b> <b>acyclic</b> <b>graph</b> (or DAG), and let X = (X'v)v âˆˆ V be {{a set of}} random variables indexed by V.|$|E
5000|$|Katz {{centrality}} is {{more suitable}} {{in the analysis}} of <b>directed</b> <b>acyclic</b> <b>graphs</b> where traditionally used measures like eigenvector centrality are rendered useless.|$|R
40|$|In this paper, {{we study}} the {{wireline}} two-unicast-Z communication network over <b>directed</b> <b>acyclic</b> <b>graphs.</b> The two-unicast-Z network is a two-unicast network where the destination intending to decode the second message has a priori side information {{of the first}} message. We make three contributions in this paper. First, we describe a new linear network coding algorithm for two-unicast-Z networks over the <b>directed</b> <b>acyclic</b> <b>graphs.</b> Our approach includes the idea of interference alignment {{as one of its}} key ingredients. For the graphs of a bounded degree, our algorithm has linear complexity {{in terms of the number}} of vertices, and the polynomial complexity in terms of the number of edges. Second, we prove that our algorithm achieves the rate pair (1, 1) whenever it is feasible in the network. Our proof serves as an alternative, albeit restricted to two-unicast-Z networks over the <b>directed</b> <b>acyclic</b> <b>graphs,</b> to an earlier result of Wang et al., which studied the necessary and sufficient conditions for the feasibility of the rate pair (1, 1) in two-unicast networks. Third, we provide a new proof of the classical max-flow min-cut theorem for the <b>directed</b> <b>acyclic</b> <b>graphs...</b>|$|R
5000|$|M. Dyer, L.A. Goldberg and M. Paterson, On {{counting}} homomorphisms to <b>directed</b> <b>acyclic</b> <b>graphs,</b> Electronic Colloquium on Computational Complexity, Report TR05-121, Oct 2005.|$|R
25|$|The {{result of}} such {{compression}} may look similar to trying to transform the trie into a <b>directed</b> <b>acyclic</b> <b>graph</b> (DAG), because the reverse transform from a DAG to a trie is obvious and always possible. However, {{the shape of the}} DAG is determined by the form of the key chosen to index the nodes, in turn constraining the compression possible.|$|E
25|$|A {{communicating}} {{class is}} closed if {{the probability of}} leaving the class is zero, namely if i is in C but j is not, then j is not accessible fromnbsp&i. The set of communicating classes forms a <b>directed,</b> <b>acyclic</b> <b>graph</b> by inheriting the arrows from the original state space. A communicating class is closed {{if and only if}} it has no outgoing arrows in this graph.|$|E
25|$|It is {{straightforward}} {{to verify that}} each operation can be inverted: operations 1 and 3 are inverse to each other, as are operations 2 and 4. Therefore, the resulting graph may {{be considered to be}} undirected. However, it is usually considered to be a <b>directed</b> <b>acyclic</b> <b>graph</b> in which each edge connects from a vertex of lower rank to a vertex of higher rank.|$|E
50|$|In {{computer}} science, algorithms {{for finding}} linear extensions of partial orders (represented as the reachability orders of <b>directed</b> <b>acyclic</b> <b>graphs)</b> are called topological sorting.|$|R
5000|$|RecCC is a {{constructive}} neural network approach {{to deal with}} tree domains [...] with pioneering applications to chemistry and extension to <b>directed</b> <b>acyclic</b> <b>graphs.</b>|$|R
50|$|In statistics, m-separation is {{a measure}} of disconnectedness in ancestral graphs and a {{generalization}} of d-separation for <b>directed</b> <b>acyclic</b> <b>graphs.</b> It is the opposite of m-connectedness.|$|R
25|$|A Bayesian network, Bayes network, belief network, Bayes(ian) {{model or}} {{probabilistic}} directed acyclic graphical {{model is a}} probabilistic graphical model (a type of statistical model) that represents a set of random variables and their conditional dependencies via a <b>directed</b> <b>acyclic</b> <b>graph</b> (DAG). For example, a Bayesian network could represent the probabilistic relationships between diseases and symptoms. Given symptoms, the network {{can be used to}} compute the probabilities of the presence of various diseases.|$|E
25|$|Logical {{formulas}} are discrete structures, as are proofs, {{which form}} finite trees or, more generally, <b>directed</b> <b>acyclic</b> <b>graph</b> structures (with each inference step combining {{one or more}} premise branches to give a single conclusion). The truth values of logical formulas usually form a finite set, generally restricted to two values: true and false, but logic can also be continuous-valued, e.g., fuzzy logic. Concepts such as infinite proof trees or infinite derivation trees have also been studied, e.g. infinitary logic.|$|E
25|$|The {{visualization}} of orders with Hasse diagrams has a straightforward generalization: instead of displaying lesser elements below greater ones, {{the direction of}} the order can also be depicted by giving directions to the edges of a graph. In this way, each order is seen to be equivalent to a <b>directed</b> <b>acyclic</b> <b>graph,</b> where the nodes are the elements of the poset and there is a directed path from a to b if and only if a â‰¤ b. Dropping the requirement of being acyclic, one can also obtain all preorders.|$|E
50|$|G. Marrelec, P. Ciuciu, M. PÃ©lÃ©grini-Issac, H. Benali: Estimation of the hemodyamic {{response}} function in event-related functional MRI: <b>directed</b> <b>acyclic</b> <b>graphs</b> {{for a general}} Bayesian inference framework.|$|R
50|$|Transitive {{reduction}} {{has been}} used on networks which can be represented as <b>directed</b> <b>acyclic</b> <b>graphs</b> (e.g. citation graphs or citation networks) to reveal structural differences between networks.|$|R
40|$|AbstractDifferent {{conditional}} independence {{models have been}} proposed in literature; {{in this paper we}} consider models induced by conditional probabilities based on the definition of conditional cs-independence. These models need not comply with the symmetry property, so that they have not the graphoid structure. Hence, the well-known d-separation criterion for <b>directed</b> <b>acyclic</b> <b>graphs</b> {{may not be able to}} represent such independence models. Therefore, we introduce a new separation criterion called L-separation. We study its main properties and show how it allows to represent the above-mentioned independence models through <b>directed</b> <b>acyclic</b> <b>graphs...</b>|$|R
