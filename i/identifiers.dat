8281|10000|Public
5|$|The {{architecture}} of the Windows Push Notification Service {{is similar to that}} of its predecessor, in that it consists of servers and interfaces that generate, maintain, store, and authenticate unique <b>identifiers</b> (called Channel URI <b>Identifiers)</b> for all devices that register to use the service. When a device enrolls to receive data and notification information using the WNS, it first sends a device registration request to WNS network. The WNS network acknowledges the request, and responds with the device's unique Channel URI Identifier. Typically, the device will then send its identifier to a server owned by the developer so that it can be stored and used for sending notifications. When the app developer wishes to transmit a notification or other WNS data to the device, it will transmit a POST request to the WNS network. The network will acknowledge and authenticate the request. If the authentication succeeds, the data to be transmitted is enqueued and then sent to the device from the WNS network using the Channel URI Identifier.|$|E
5|$|During {{the debate}} over {{defining}} URLs and URNs it became evident that the two concepts embodied by the terms were merely aspects of the fundamental, overarching notion of resource identification. In June 1994, the IETF published Berners-Lee's RFC 1630: the first Request for Comments that acknowledged the existence of URLs and URNs, and, more importantly, defined a formal syntax for Universal Resource Identifiersâ€” URL-like strings whose precise syntaxes and semantics depended on their schemes. In addition, this RFC attempted to summarize the syntaxes of URL schemes in use at the time. It also acknowledged, but did not standardize, the existence of relative URLs and fragment <b>identifiers.</b>|$|E
25|$|A 2009 study {{comparing}} snake case to camel case {{found that}} camel case <b>identifiers</b> could be recognised with higher accuracy among both programmers and non-programmers, and that programmers already trained in camel case {{were able to}} recognise those <b>identifiers</b> faster than underscored snake-case <b>identifiers.</b>|$|E
30|$|The {{secondary}} node A which cooperates with node B sends a message, which contains plain text <b>identifier</b> A, random Na, Nb, <b>identifier</b> B, and <b>identifier</b> A, <b>identifier</b> B, random Na encrypted with the pre-shared key Kas.|$|R
50|$|In the United States, the IATA <b>identifier</b> usually {{equals the}} FAA <b>identifier,</b> {{but this is}} not always the case. A {{prominent}} example is Sawyer International Airport, Michigan, which uses the FAA <b>identifier</b> SAW and the IATA <b>identifier</b> MQT.|$|R
5000|$|An example <b>identifier</b> [...] "" [...] can {{be broken}} down into two parts: the owner <b>identifier</b> which {{indicates}} the issuer of the FPI, and the text <b>identifier</b> which indicates the particular document or object the FPI identifies. In the example, the owner <b>identifier</b> is [...] "" [...] and the text <b>identifier</b> is [...] "". The two parts are separated by a double slash.|$|R
25|$|A DOI name also {{differs from}} {{standard}} identifier registries {{such as the}} ISBN, ISRC, etc. The purpose of an identifier registry is to manage a given collection of <b>identifiers,</b> whereas {{the primary purpose of}} the DOI system is to make a collection of <b>identifiers</b> actionable and interoperable, where that collection can include <b>identifiers</b> from many other controlled collections.|$|E
25|$|This {{entry is}} used to {{suppress}} the MCN message for specifically listed type of CD-ROM drive, primarily CD-ROM changers. The data {{is a set of}} device <b>identifiers,</b> which matches those <b>identifiers</b> reported to the system by the devices themselves.|$|E
25|$|Areas {{are uniquely}} {{identified}} with 32-bit numbers. The area <b>identifiers</b> are commonly {{written in the}} dot-decimal notation, familiar from IPv4 addressing. However, they are not IP addresses and may duplicate, without conflict, any IPv4 address. The area <b>identifiers</b> for IPv6 implementations (OSPFv3) also use 32-bit <b>identifiers</b> written in the same notation. When dotted formatting is omitted, most implementations expand area 1 to the area identifier 0.0.0.1, but some {{have been known to}} expand it as 1.0.0.0.|$|E
50|$|An anonym is an {{authenticated}} attribute {{that is not}} {{linked to}} an <b>identifier.</b> An anonymous <b>identifier</b> identifies the person once. If it is used more than once, becomes a pseudonym. A pseudonym is an <b>identifier</b> associated with attributes but with no permanent <b>identifier.</b>|$|R
40|$|Methods {{and systems}} are {{provided}} for authorizing a command {{of an integrated}} modular environment in which a plurality of partitions control actions of a plurality of effectors is provided. A first <b>identifier,</b> a second <b>identifier,</b> and a third <b>identifier</b> are determined. The first <b>identifier</b> identifies a first partition of the plurality of partitions from which the command originated. The second <b>identifier</b> identifies a first effector of the plurality of effectors for which the command is intended. The third <b>identifier</b> identifies a second partition of the plurality of partitions {{that is responsible for}} controlling the first effector. The first <b>identifier</b> and the third <b>identifier</b> are compared to determine whether the first partition {{is the same as the}} second partition for authorization of the command...|$|R
5000|$|An entity {{declaration}} {{may have a}} literal value, or may have some combination of an optional [...] <b>identifier,</b> which allows SGML parsers to process an entity's string referent as a resource <b>identifier,</b> and an optional [...] <b>identifier,</b> which identifies the entity independent of any particular representation. In XML, a subset of SGML, an {{entity declaration}} {{may not have a}} [...] <b>identifier</b> without a [...] <b>identifier.</b>|$|R
25|$|A DOI name {{does not}} depend on the object's {{location}} and, in this way, is similar to a Uniform Resource Name (URN) or PURL but differs from an ordinary URL. URLs are often used as substitute <b>identifiers</b> for documents on the Internet (better characterised as Uniform Resource <b>Identifiers)</b> although the same document at two different locations has two URLs. By contrast, persistent <b>identifiers</b> such as DOI names identify objects as first class entities: two instances of the same object would have the same DOI name.|$|E
25|$|Each {{client has}} the same list of <b>identifiers</b> , one for each server.|$|E
25|$|In {{conjunction}} {{with the formation of}} the Federation of Malaya, rationalisation of Malayan state <b>identifiers</b> was conducted in 1948 to simplify all FMS and two-letter UMS prefixes into single letters. In addition, the Pahang plate, which originally assumed the P prefix and was allowed to conflict with the Penang plates for decades, was finally reassigned with a unique letter, C. Like the pre-1932 number plate designs in the United Kingdom, the order of the new prefixes also denoted the order of population size of the FMS states at the time, with Perak's A series representative of its then larger population ahead of Selangor (B) and Pahang (C). To prevent future conflicts with plates with the Sx #### format, pre-1948 plates with two-letter state <b>identifiers</b> were subsequently required to be replaced with plates using replacement one-letter <b>identifiers</b> (i.e. PK 1234 to A 1234 and JB 1234 to J 1234), leading to the extinction of the use of double-letter state <b>identifiers</b> in Malaya; a similar change was imposed on pre-1948 Pahang plates. Remaining single-lettered UMS and Straits Settlement <b>identifiers</b> were not subjected to the 1948 change.|$|E
5000|$|MAIN MODEL Main_Transport [...] DECLARATION SECTION [...] QUANTITY: <b>identifier</b> : QuantityLength {{base unit}} : mile [...] QUANTITY: <b>identifier</b> : QuantityCurrency base unit : $ [...] SET: <b>identifier</b> : Plants index : p [...] SET: <b>identifier</b> : Markets index : m [...] PARAMETER: <b>identifier</b> : Capacity index domain : p [...] PARAMETER: <b>identifier</b> : Demand index domain : m [...] PARAMETER: <b>identifier</b> : Distance index domain : (p,m) unit : 1000 * mile [...] PARAMETER: <b>identifier</b> : Freight unit : $/(1000 * mile) [...] PARAMETER: <b>identifier</b> : TransportCost index domain : (p,m) unit : 1000 * $ {{definition}} : Freight * Distance(p,m) [...] VARIABLE: <b>identifier</b> : Shipment index domain : (p,m) range : nonnegative [...] CONSTRAINT: <b>identifier</b> : SatisfyCapacity index domain : p definition : sum(m, Shipment(p,m)) <= Capacity(p) [...] CONSTRAINT: <b>identifier</b> : MeetDemand index domain : m definition : sum(p, Shipment(p,m)) >= Demand(m) [...] VARIABLE: <b>identifier</b> : TotalCost unit : 1000 * $ definition : sum((p,m), TransportCost(p,m)*Shipment(p,m)) [...] MATHEMATICAL PROGRAM: <b>identifier</b> : TransportModel objective : TotalCost direction : minimize constraints : AllConstraints variables : AllVariables [...] ENDSECTION [...] PROCEDURE <b>identifier</b> : MainInitialization body : [...] Plants := data { seattle, san-diego }; Markets := data { new-york, Chicago, topeka }; [...] Capacity(p) := data { seattle : 350, san-diego : 600 }; Demand(m) := data { new-york : 325, Chicago : 300, topeka : 275 }; [...] Distance(p,m) := data { ( [...] seattle, new-york [...] ) : 2.5, ( [...] seattle, Chicago [...] ) : 1.7, ( [...] seattle, topeka [...] ) : 1.8, ( [...] san-diego, new-york [...] ) : 2.5, ( [...] san-diego, Chicago [...] ) : 1.8, ( [...] san-diego, topeka [...] ) : 1.4 }; [...] Freight := 90 $/(1000*mile); [...] ENDPROCEDURE [...] PROCEDURE <b>identifier</b> : MainExecution body : [...] solve TransportModel; [...] ENDPROCEDURE [...] ENDMODEL Main_Transport ...|$|R
50|$|Service sets have an {{associated}} <b>identifier,</b> the service set <b>identifier</b> (SSID), {{which consists of}} 32 octets (bytes) that frequently contains a human readable <b>identifier</b> of the network.|$|R
50|$|Predefined CAN <b>Identifier</b> Assignment: CANaerospace {{offers a}} {{predefined}} <b>identifier</b> assignment list for normal operation data. In {{addition to the}} predefined list, user-defined <b>identifier</b> assignment lists may be used.|$|R
25|$|Strings fully support Unicode. Most Unicode {{characters}} {{can be used}} {{in either}} <b>identifiers</b> or operators.|$|E
25|$|Permanent global <b>identifiers</b> for {{commercial}} video content through the Entertainment ID Registry, {{commonly known as}} EIDR.|$|E
25|$|CC (CSRC count): (4 bits) Contains {{the number}} of CSRC <b>identifiers</b> (defined below) that follow the fixed header.|$|E
5000|$|... process <b>identifier</b> : write [...] {{to use the}} <b>identifier</b> [...] {{to refer}} to the process [...] (which may contain the <b>identifier</b> [...] itself, i.e., {{recursive}} definitions are allowed) ...|$|R
40|$|The paper {{under this}} arXiv <b>identifier</b> has diverged from the {{original}} {{to the point that}} they now have next to nothing in common. The new material is therefore being posted with its own <b>identifier,</b> and this <b>identifier</b> is being withdrawn. Comment: The paper under this arXiv <b>identifier</b> has diverged {{from the original}} {{to the point that they}} have next to nothing in common. This <b>identifier</b> is therefore being withdraw...|$|R
3000|$|Transaction <b>identifier</b> {{is matched}} against the Java process <b>identifier.</b> When tweet {{processing}} has been completed, the Spark Streaming process (based on the Java process <b>identifier)</b> will be stopped [...]...|$|R
25|$|There {{are four}} types of unique well <b>identifiers,</b> and these are called historical, current, reserved, and exempt.|$|E
25|$|Variables are <b>identifiers</b> {{associated}} with values. They are declared by writing the variable's type and name, and are optionally initialized {{in the same}} statement.|$|E
25|$|DOI is a {{registered}} URI under the info URI scheme specified by IETF RFC 4452. info:doi/ is the infoURI Namespace of Digital Object <b>Identifiers.</b>|$|E
5000|$|... {{might be}} {{converted}} into the following lexical token stream; whitespace is suppressed and special characters have no value: <b>IDENTIFIER</b> net_worth_future EQUALS OPEN_PARENTHESIS <b>IDENTIFIER</b> assets MINUS <b>IDENTIFIER</b> liabilities CLOSE_PARENTHESIS SEMICOLON ...|$|R
30|$|Objectâ€”an <b>identifier</b> {{within the}} data set (e.g. {{equipment}} <b>identifier).</b>|$|R
5000|$|... "Interpolated" [...] {{means that}} the interpreter/compiler does {{recognize}} a variable or constant <b>identifier</b> located inside the string {{and the content of}} the <b>identifier</b> will replace the <b>identifier</b> in the string.|$|R
25|$|Starting with OpenID Authentication 2.0 (and some 1.1 implementations), {{there are}} two types of <b>identifiers</b> that can be used with OpenID: URLs and XRIs.|$|E
25|$|In PL/M, $ {{can be used}} to put {{a visible}} {{separation}} between words in compound <b>identifiers.</b> For example, 'Some$Name' refers to the same thing as 'SomeName'.|$|E
25|$|The {{banks of}} most {{countries}} in Europe publish account numbers using both the IBAN format and the nationally recognised <b>identifiers,</b> this being mandatory within the European Economic Area.|$|E
2500|$|European Case Law <b>Identifier</b> (ECLI) and European Legislation <b>Identifier</b> (ELI) ...|$|R
5000|$|Global Release <b>Identifier</b> (GRid), {{a unique}} <b>identifier</b> for musical {{releases}} ...|$|R
5000|$|European Case Law <b>Identifier</b> (ECLI) and European Legislation <b>Identifier</b> (ELI) ...|$|R
