0|1371|Public
40|$|The Sunway TaihuLight {{supercomputer}} is the world&# 39;s first {{system with}} a peak performance greater than 100 PFlops. In this paper, we provide a detailed introduction to the TaihuLight system. In contrast with other existing heterogeneous supercomputers, which include both CPU processors and PCIe-connected many-core accelerators (NVIDIA GPU or Intel Xeon Phi), the computing power of TaihuLight is provided by a homegrown many-core SW 26010 CPU that includes both the management processing elements (MPEs) and computing processing elements (CPEs) in one chip. With 260 processing elements in one CPU, a single SW 26010 provides a peak performance of over three TFlops. To alleviate the memory bandwidth bottleneck in most applications, each CPE comes with a scratch pad memory, {{which serves as a}} user-controlled cache. To support the parallelization of programs on the new many-core architecture, in addition to the basic C/C++ and <b>Fortran</b> <b>compilers,</b> the <b>system</b> provides a customized Sunway OpenACC tool that supports the OpenACC 2. 0 syntax. This paper also reports our preliminary efforts on developing and optimizing applications on the TaihuLight system, focusing on key application domains, such as earth system modeling, ocean surface wave modeling, atomistic simulation, and phase-field simulation...|$|R
50|$|In {{the late}} 1960s, Gillies became {{concerned}} {{that students were}} not getting direct access to computers any more. He lobbied UIUC to adopt the 1968 WATFOR one-pass <b>FORTRAN</b> <b>compiler</b> / runtime <b>system</b> from the University of Waterloo in Ontario. This was a fast-turnaround IDE for batch-based mainframe computers. At {{the time it was}} common practice to submit a job (card deck) and pick up the results the next day. The WATFOR compiler could compile, link, and run a short program in the compiler's memory space in a few seconds. This compiler allowed the university to offer underclass programming courses not only to computer scientists but also to business majors and to other non-specialists. Gillies and his family traveled to Waterloo to pick up a magtape with this compiler, on one of his visits to see his family, in the early 1970s.|$|R
5000|$|Intel <b>Fortran</b> <b>Compiler,</b> {{also known}} as IFORT, {{is a group of}} <b>Fortran</b> <b>compilers</b> from Intel for Windows, OS X, and Linux.|$|R
5000|$|Absoft <b>Fortran</b> <b>Compilers</b> are set of <b>Fortran</b> <b>compilers</b> for Microsoft Windows, Apple Macintosh, and Linux {{produced}} by Absoft Corporation. [...] The compilers are source code compatible across platforms.|$|R
50|$|The Mac and Amiga <b>Fortran</b> <b>compilers</b> {{included}} an Integrated development environment (IDE) and profiler. The IDE {{was added to}} the Windows compilers and is included in all succeeding Absoft <b>Fortran</b> <b>compilers.</b>|$|R
50|$|Previous PLUS, COBOL and <b>FORTRAN</b> <b>compilers</b> {{are also}} still supported. An even earlier <b>FORTRAN</b> <b>compiler</b> (<b>FORTRAN</b> V), while no longer supported, {{is still in}} use for an {{application}} developed in the 1960s in that language.|$|R
5000|$|Because of {{the case}} insensitivity, {{the name of a}} {{subroutine}} or function [...] "FOO" [...] must be converted to a canonical case and format by the <b>Fortran</b> <b>compiler</b> so that it will be linked in the same way regardless of case. Different compilers have implemented this in various ways, and no standardization has occurred. The AIX and HP-UX <b>Fortran</b> <b>compilers</b> convert all identifiers to lower case ("foo"), while the Cray Unicos <b>Fortran</b> <b>compilers</b> converted identifiersall upper case ("FOO"). The GNU g77 compiler converts identifiers to lower case plus an underscore ("foo_"), except that identifiers already containing an underscore ("FOO_BAR") have two underscores appended ("foo_bar__"), following a convention established by f2c. Many other compilers, including SGI's IRIX <b>compilers,</b> GNU <b>Fortran,</b> and Intel's <b>Fortran</b> <b>compiler</b> (except on Microsoft Windows), convert all identifiers to lower case plus an underscore ("foo_" [...] and [...] "foo_bar_"). On Microsoft Windows, the Intel <b>Fortran</b> <b>compiler</b> defaults to uppercase without an underscore.|$|R
5000|$|FORTRAN II {{required}} at least 8000-character memory; the 1401 <b>Fortran</b> <b>compiler</b> {{is described in}} Haines, L.H. (1965), below. The <b>Fortran</b> <b>compiler,</b> to generate code for small memories, used a pioneering form of interpreted [...] "p-code" [...] although its programmers had no name {{for what it was}} that they did.|$|R
5000|$|Cray FORTRAN (CFT), {{the first}} {{automatically}} vectorizing <b>Fortran</b> <b>compiler</b> ...|$|R
50|$|Software: <b>Fortran</b> <b>compiler</b> for programming, custom {{software}} developed by order.|$|R
5000|$|... 1985 Release of Absoft Mac <b>Fortran</b> <b>compiler</b> with {{graphical}} debugger and IDE.|$|R
50|$|The WATFIV <b>Fortran</b> <b>compiler</b> was {{developed}} at the University of Waterloo, Canada in the late 1960s. It was designed to give better error messages than IBM's <b>Fortran</b> <b>compilers</b> of the time. In addition, WATFIV was far more usable, because it combined compiling, linking and execution into one step, whereas IBM's compilers had three separate components to run.|$|R
5000|$|Quadruple {{precision}} is {{specified in}} Fortran by the [...] (module [...] from Fortran 2008 must be used, the constant [...] {{is equal to}} 16 on most processors), or as , or in a non-standard way as [...] (Quadruple-precision [...] {{is supported by the}} Intel <b>Fortran</b> <b>Compiler</b> and by the GNU <b>Fortran</b> <b>compiler</b> on x86, x86-64, and Itanium architectures, for example.) ...|$|R
50|$|Many <b>Fortran</b> <b>compilers</b> have {{integrated}} subsets of the C preprocessor {{into their}} systems.|$|R
50|$|Ralph Merkle (who {{wrote the}} Elxsi <b>Fortran</b> <b>compiler)</b> {{later became a}} noted nanotechnologist.|$|R
50|$|By 1960, {{versions}} of FORTRAN {{were available for}} the IBM 709, 650, 1620, and 7090 computers. Significantly, the increasing popularity of FORTRAN spurred competing computer manufacturers to provide <b>FORTRAN</b> <b>compilers</b> for their machines, so that by 1963 over 40 <b>FORTRAN</b> <b>compilers</b> existed. For these reasons, FORTRAN {{is considered to be}} the first widely used programming language supported across a variety of computer architectures.|$|R
5000|$|PC version, {{compiled}} under Windows Operating System, using Microsoft Developer Studio C++ and <b>Fortran</b> <b>compilers.</b>|$|R
5000|$|DBOS by Salford Software, a 32-bit {{protected}} mode DOS extender used primarily by their FTN77 <b>Fortran</b> <b>Compiler</b> ...|$|R
5000|$|The old g77 <b>FORTRAN</b> <b>compiler</b> of GCC {{which has}} been {{replaced}} by GNU Fortran since release 4.0.|$|R
50|$|The NAG <b>Fortran</b> <b>Compiler</b> is {{available}} on all major Unix platforms as well as Microsoft Windows. Based on the world's first <b>Fortran</b> 90 <b>compiler</b> (which was developed by NAG), it currently includes support for the full Fortran 95 language, {{as well as many}} Fortran 2003 features.|$|R
50|$|XL Fortran is {{the name}} of IBM's {{proprietary}} optimizing <b>Fortran</b> <b>compiler</b> for IBM-supported environments, including Linux for little-endian distributions and AIX.|$|R
50|$|Samson was a {{contributing}} architect to the Digital Equipment Corporation (DEC) PDP-6, {{and wrote the}} machine's first <b>Fortran</b> <b>compiler,</b> for <b>Fortran</b> II.|$|R
50|$|The {{installation}} of Lis requires a C <b>compiler.</b> The <b>Fortran</b> interface requires a <b>Fortran</b> <b>compiler,</b> and the algebraic multigrid preconditioner requires a <b>Fortran</b> 90 <b>compiler.</b> For parallel computing environments, an OpenMP or MPI library is used. Both the Harwell-Boeing and Matrix Market formats {{are supported to}} import and export user data.|$|R
5|$|October: Intel announces new {{releases}} of Intel C++ <b>Compiler</b> and Intel <b>Fortran</b> <b>Compiler</b> for x86/x64, while Itanium support is only available in older versions.|$|R
5000|$|The [...] "*EXTENDED PRECISION" [...] {{compiler}} option card {{told the}} <b>FORTRAN</b> <b>compiler</b> to use 40 bits instead of 32 bits for Floating Point data.|$|R
5000|$|October: Intel announces new {{releases}} of Intel C++ <b>Compiler</b> and Intel <b>Fortran</b> <b>Compiler</b> for x86/x64, while Itanium support is only available in older versions.|$|R
5000|$|As a major result, a {{rudimentary}} and [...] "first-of-its-kind" [...] <b>Fortran</b> <b>compiler</b> was developed. Based on Fortran 77, it already provided some {{features of the}} then upcoming Fortran 90 standard. It also used the PARMACS ("parallel macros") communication library. In contrast to the above-mentioned <b>FORTRAN</b> <b>compiler,</b> PARMACS programming model is explicitly based on Message Passing. But again, funding for the project was stopped before the compiler had reached maturity. It transformed into the SUPERB (SUprenum parallelyER Bonn) project ("Vienna Fortran").|$|R
40|$|The GNU <b>Fortran</b> <b>Compiler</b> {{is being}} {{modified}} {{to provide support}} for intervals as an intrinsic data type. To increase the benefits provided by the interval-enhanced GNU <b>Fortran</b> <b>Compiler,</b> {{it is important that}} object code generated by this compiler can be linked with object code from <b>Fortran</b> 90 <b>compilers.</b> This paper describes the procedure for accomplishing this linking, and gives examples of how Fortran 90 code can call subroutines that are compiled using the Interval-Enhanced <b>Fortran</b> <b>Compiler.</b> Object code generated by this compiler has been successfully linked with object code from Sun's f 90 compiler and the NAGWare f 90 compiler. 1 Library Linking To access the routines needed by g 77 -i, it is necessary to link the libf 2 c. a and libgcc. a libraries. If the Fortran 90 program will use the Global Solutions (GlobSol) software, it is also necessary to link the overload. a and intlib. a libraries. A sample Makefile for linking in these libraries is given in Figure 1. This Makefile is a modified ve [...] ...|$|R
50|$|A <b>FORTRAN</b> <b>compiler,</b> {{known as}} MNF (Minnesota FORTRAN), was {{developed}} by Lawrence A. Liddiard and E. James Mundstock at the University of Minnesota for the 6600.|$|R
5000|$|With the {{additions}} to the code in the 1995 release, the ternary operator {{was added to the}} <b>Fortran</b> <b>compiler</b> as the intrinsic function merge:variable = merge(x,y,a>b) ...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedA need exists {{for a set}} of computer programs which could be used by students to solve elementary digital signal processing problems using a personal computer. This project involved the design and implementation of ten algorithms that solve such problems and an additional algorithms that creates plots of the various input and output sequences. The two primary goals of the programs were: 1) User friendliness, and, 2) Portability. With these goals in mind, the source code was written using FORTRAN- 77 and compiled by a commercially available <b>FORTRAN</b> <b>compiler</b> specifically designed for personal computers. The plotting program uses a FORTRAN-compatible graphics package that is also commercially available. The programs, once compiled, can be distributed to users without the requirement to purchase either a <b>FORTRAN</b> <b>compiler</b> or a graphics package however, access to a <b>FORTRAN</b> <b>compiler</b> enhances the utility of the programs. [URL] United States Nav...|$|R
50|$|Though {{no longer}} sold commercially by Sybase, the Watcom C/C++ {{compiler}} and the Watcom <b>Fortran</b> <b>compiler</b> {{have been made}} available free of charge as the Open Watcom package.|$|R
50|$|The Absoft IDE is {{hard-wired}} {{to use the}} Absoft <b>Fortran</b> <b>compilers,</b> and is customizable to use a C/C++ compiler {{that produces}} object files compatible with the system linker.|$|R
40|$|In this report, we present: [...] The Pitzer ion-interaction {{theory and}} models [...] Input file {{requirements}} {{for using the}} TOUGHREACT Pitzer ion-interaction model and associated databases [...] Run-time error messages [...] Verification test cases and application examples. For the main code structure, features, overall solution methods, description of input/output files for parameters other than those specific to the implemented Pitzer model, and error messages, see the TOUGHREACT User's Guide (Xu et al., 2005). The TOUGHREACT Pitzer version runs on a DEC-alpha architecture CPU, under OSF 1 V 5. 1, with Compaq Digital <b>Fortran</b> <b>Compiler.</b> The compiler run-time libraries are required for execution as well as compilation. The code also runs on Intel Pentium IV and higher-version CPU-based machines with Compaq Visual <b>Fortran</b> <b>Compiler</b> or Intel <b>Fortran</b> <b>Compiler</b> (integrated with the Microsoft Development Environment). The minimum hardware configuration should include 1 GB RAM and 1 GB (2 GB recommended) of available disk space...|$|R
50|$|AMD offers pre-compiled {{binaries}} for Linux, Solaris, and Windows {{available for}} download. Supported <b>compilers</b> include GNU <b>Fortran,</b> Intel <b>Fortran</b> <b>Compiler,</b> Microsoft Visual Studio, NAG, PathScale, PGI compiler, and Sun Studio.|$|R
5000|$|The {{operating}} system shell, {{even in the}} late 1970s, was very primitive, with a single-level file system. For example, the command to run a <b>FORTRAN</b> <b>compiler</b> would be as follows: ...|$|R
