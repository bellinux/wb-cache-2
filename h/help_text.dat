36|421|Public
5000|$|Balloon {{help was}} a help system {{introduced}} by Apple Computer in their 1991 release of System 7.0. The name {{referred to the}} way the <b>help</b> <b>text</b> was displayed, in [...] "speech balloons", like those containing words in a comic strip. The name has since been used by many to refer to any sort of pop-up <b>help</b> <b>text.</b>|$|E
50|$|The icon {{has been}} in Rome since 1499, and is {{permanently}} enshrined in the church of Sant'Alfonso di Liguori, where the official Novena to Our Mother of Perpetual <b>Help</b> <b>text</b> is prayed weekly. In the Eastern Orthodox Church, this artistic iconography {{is known as the}} Virgin of the Passion or Theotokos of the Passion due to the instruments of the Passion present on the image.|$|E
50|$|The {{repository}} stores {{information about}} fields (or data elements) {{in the application}} including descriptions, column headings, edit codes, visualizations, default values, <b>help</b> <b>text,</b> and prompt programs. It holds information about files and application database including physical files, logical files (or views), relationships, file definition attributes, file validation rules, trigger programs, multilingual definitions, virtual fields, and predetermined join fields. Objects and components used for event-driven Windows applications also reside in the repository.|$|E
2500|$|... {{provides}} {{telephone numbers}} {{for access to}} crisis intervention counselors, and brief <b>helping</b> <b>texts</b> for people in crisis situations ...|$|R
5000|$|... generate_html - This package {{provides}} {{functions for}} generating HTML pages that contain the <b>help</b> <b>texts</b> {{for a set}} of functions ...|$|R
50|$|Fish has few {{syntactic}} rules, preferring {{features as}} commands rather than syntax. This makes features discoverable {{in terms of}} commands with options and <b>help</b> <b>texts.</b> Functions can also carry a human readable description. A special help command gives {{access to all the}} fish documentation in the user's web browser.|$|R
5000|$|The searching {{function}} {{offers a}} [...] "phrase search", {{rather than the}} more common [...] "or search", and Notes requires users to spell out boolean conditions in search-strings. As a result, users must search for [...] "delete AND folder" [...] {{in order to find}} <b>help</b> <b>text</b> that contains the phrase [...] "delete a folder". Searching for [...] "delete folder" [...] does not yield the desired result. (Notes 8 uses or-search conventions.) ...|$|E
5000|$|The {{customize}} extension {{allows the}} user to set configuration properties such as the color scheme interactively, from within Emacs, in a more user-friendly way than by setting variables in : it offers search, descriptions and <b>help</b> <b>text,</b> multiple choice inputs, reverting to defaults, modification of the running Emacs instance without reloading, and other conveniences similar to the preferences functionality of other programs. The customized values are saved in [...] (or another designated file) automatically.|$|E
50|$|The engine would {{automatically}} display the proper balloon {{based on the}} mouse location and the item's current state. It also positioned the balloon using an algorithm designed {{to keep it from}} covering the objects being examined and adjusted the cartouche to point appropriately. <b>Help</b> <b>text</b> for most common UI elements, such as the Close Box on a window, was built into the system. Developers could also include balloons for their application icon itself, allowing users to identify an unknown application in the Finder without launching it.|$|E
40|$|CogentHelp is a {{prototype}} tool for authoring dynamically generated on-line help for applications with graphical user interfaces, embodying the "evolution-friendly" properties of {{tools in the}} literate programming tradition. In this paper, we describe CogentHelp, highlighting the usefulness of certain natural language generation techniques in supporting software-engineering goals for help authoring tools [...] principally, quality and evolvability of <b>help</b> <b>texts...</b>|$|R
50|$|On LambdaMOO, {{they became}} {{standard}} practice for <b>help</b> <b>texts</b> ("The user may choose any description e likes"), referring {{to people of}} unknown gender ("Who was that guest yesterday, eir typing was terrible"), referring to people whose gender was known but without disclosing it ("Yes I've met Squiggle. E was nice."), or of course characters declaring themselves to be of gender Spivak. In recent years (2000 onwards), this usage has been declining.|$|R
40|$|All rights {{worldwide}} are {{the property}} of ISIS Papyrus Software AG. Changes to the Software, <b>Help</b> <b>Texts</b> and Manual may be made without prior announcement. Reproduction {{in whole or in}} part, of this manual, or of the information on the accompanying media, is only permitted with the express permission of ISIS Information Systems GmbH. Excepted from this rule are legally and contractually bound licencees of ISIS Papyrus Software AG. supporte/ 700 / 3 June 1 st, 2010 - 12 : 28 : 4...|$|R
5000|$|An AutoIt {{automation}} script can {{be converted}} into a compressed, stand-alone executable which can be run on computers {{that do not have}} the AutoIt interpreter installed. A wide range of function libraries (known as UDFs, or [...] "User Defined Functions") are also included as standard or are available from the website to add specialized functionality. AutoIt is also distributed with an IDE based on the free SciTE editor. The compiler and <b>help</b> <b>text</b> are fully integrated and provide a de facto standard environment for developers using AutoIt.|$|E
5000|$|Authors use the {{so-called}} [...] "designer component" [...] to create help texts for applications and functions and define process steps. These help texts can be updated easily {{with a few}} clicks if software or processes are changing. On user side, the contents are automatically retrieved via a [...] "Guide", {{as soon as a}} function is used with a <b>help</b> <b>text</b> archived. The [...] "Guide" [...] can also be opened selectively to lead through an application or process. This context sensitive help through texts, links and videos is intended {{to reduce the number of}} errors in everyday work, especially rarely run processes. In particular, this applies for complex processes or software updates.|$|E
5000|$|... onEscapee was {{developed}} by Invictus Games, Ltd. and published by the UK-Based (and now defunct) Sadeness Software. It was distributed in a CD format, which was unusual for the period since the Amiga 1200 was not fitted with a CD drive. Therefore, the users were required to purchase an additional external CD-ROM drive (or re-house the computer to fit an internal drive) in order to run software from discs. Since Invictus is a Hungarian team, to make the game as international as possible, text and speech was kept to a minimum. As a result, the game has support for over 17 languages. The only language featured in the game is in the music used in the titles and in one scene of the game, the menus, <b>help</b> <b>text</b> and the opening FMV sequence.|$|E
50|$|LVQ can be {{a source}} of great <b>help</b> in {{classifying}} <b>text</b> documents.|$|R
5000|$|... c. 10th century: The Persian city of Shiraz's library {{had over}} 300 rooms and {{thorough}} catalogs to <b>help</b> locate <b>texts</b> these {{were kept in}} the storage chambers of the library and they covered every topic imaginable.|$|R
40|$|Generally, {{people with}} {{dyslexia}} are poor readers but strong visual thinkers. The use of graphical schemes for <b>helping</b> <b>text</b> comprehension is recommended in education manuals. This study explores {{the relation between}} text readability and the visual conceptual schemes which aim to make the text more clear for these specific target readers. Our results {{are based on a}} user study for Spanish native speakers through a group of twenty three dyslexic users and a control group of similar size. The data collected from our study combines qualitative data from questionnaires and quantitative data from tests carried out using eye tracking. The findings suggest that graphical schemes may help to improve readability for dyslexics but are, unexpectedly, counterproductive for understandability. ...|$|R
40|$|A help {{development}} tool {{is a system}} to produce applications specific help systems. It consists of the folllowing three components: input language, display tool, consistency checker. The input language provides commands to introduce a hypertext oriented syntactical structure into the <b>help</b> <b>text</b> under development. The display tool uses commands of the language to show the <b>help</b> <b>text</b> according to the hypertext concept in a special window following the OST/Motif guide lines. The consistency checker guarantees that {{the author of a}} help system writes the selected <b>help</b> <b>text</b> and the proper commands in the right way to ensure correct behaviour of the whole system...|$|E
40|$|This release {{provides}} enhancements and {{bug fixes}} for login, list view selection, formatted (Markdown) text display and online <b>help</b> <b>text,</b> and JSON-LD generation. It also implements internal structural and data layout {{changes to the}} software, and enhancements to data migration support. Release notes: [URL] (see "history" for details...|$|E
40|$|After {{incorporating}} the sub-enclosure annex {{into the main}} body of SES- 2, a flaw becomes more obvious in the <b>Help</b> <b>Text</b> (page 03 h) and String Out/String In (page 04 h) diagnostic page definitions when sub-enclosures are used: they lack Generation Code fields. If <b>Help</b> <b>Text</b> or String In field is read after the sub-enclosure configuration changes, there is no notice of the change; the wrong <b>help</b> <b>text</b> or string could be returned for a sub-enclosure. If String Out is accessed after a change, there is no prevention from misdirecting the string to the wrong sub-enclosure. One solution is to add a generation code {{at the end of the}} sub-enclosure versions of the <b>Help</b> <b>Text</b> list and the String In list. This would not match the format of other pages. String Out would not accommodate this solution. Another solution is to redefine the existing pages, and expect software to read version descriptors from standard INQUIRY data to parse the pages correctly. For attached enclosure service processes, though, version descriptors (describing the SES process) are not available. Another solution is to redefine the existing pages and add a bit to the Configuration page indicating the new format is being used. However, there are only two bits left in that page and again it depends on software to seek out the version information ahead of time. Another solution is to obsolete the current pages and define new ones (as pages 0 Bh and 0 Ch) that include generation codes. When sub-enclosures are not present, there is not much of a problem with the existing pages. A similar solution is to keep the current pages for the primary enclosure only (obsoleting the sub-enclosure fields in them) and define new pages (as pages 0 Bh and 0 Ch) that include generation codes and are designed for sub-enclosures. This is the cleanest and most compatible solution. Suggested changes 6 Parameters for enclosure services device...|$|E
5000|$|... generic tools (<b>help</b> system, documentation, <b>text</b> {{retrieval}} system, intelligent agents, tutoring facility, simulation {{tools and}} communication resources) ...|$|R
60|$|His {{reply was}} curious. But still more so, the {{marginal}} gestures wherewith he <b>helped</b> out the <b>text.</b>|$|R
5000|$|The webpages {{maintained}} by the Google <b>Help</b> Center have <b>text</b> describing more than 15 various search options.The Google operator ...|$|R
40|$|Synonymy is a pivot {{relation}} in NLP {{but remains}} problematic. Putting forward, we introduce {{the notion of}} relative synonymy, to circumvent some diÆculties among which possi-ble polysemy and contextual inter-pretation. In the framework of con-ceptual vectors, it is then possible to formalize test functions for syn-onymy and to experiment their use in thematic analysis that will <b>help</b> <b>text</b> classication. ...|$|E
40|$|This version {{begins to}} tackle the issue of {{providing}} better feedback during task contribution through clearer <b>help</b> <b>text</b> and notification messages. Bug fixes include duplicated names in the leaderboard, Google OAuth sign ins, broken links and cross-browser style fixes and the display of search results for the Convert-a-Card projects. We have also upgraded to Bootstrap 4 beta to improve {{the stability of the}} platform. See the closed milestone for details...|$|E
40|$|We have {{augmented}} {{user interface}} objects (i. e. windows, menus, buttons, sliders, etc.) with preconditions that determine their visibility and their enabled/disabled status and postconditions that are asserted when certain actions are {{performed on the}} object. Postconditions are associated with each functionally different action on the object. Attaching pre- and postconditions to interface objects provides several useful features, such as selective enabling of controls, rapid prototyping, and automatic generation of explanations and <b>help</b> <b>text...</b>|$|E
40|$|Model-based {{interface}} design {{can save}} substantial effort in building help systems for interactive applications by generating help automatically {{from the model}} used to implement the interface, and by providing a framework for developers to easily refine the automatically-generated <b>help</b> <b>texts.</b> This paper describes a system that generates hypertext-based help about data presented in application displays, commands to manipulate data, and interaction techniques to invoke commands. The refinement component provides several levels of customization, including programming-by-example techniques to let developers edit directly help windows that the system produces, and the possibility to refine help generation rules. KEYWORDS : Automatic Help Generation, Model-Based Interface Design, Hypertext-Based Help, Help Customization, Help Generation Rules. INTRODUCTION Help systems today are usually developed as separate artifacts from the systems they support. As a result, building and maintaining hel [...] ...|$|R
40|$|Abstract: On their {{route to}} e-governance, public administrations have {{developed}} e-services. Each e-service encompasses {{a significant amount}} of knowledge in the form of examples, <b>help</b> <b>texts,</b> legislation excerpts, validation checks etc. This knowledge has been offered by domain experts in the phases of service analysis, design and implementation, being however bundled within the software, it cannot be readily retrieved and used in other organizational processes, including the development of new services. In this paper, we present an approach for reverse engineering e-services, in order to formulate knowledge items of a high level of abstraction, which can be made available to the employees of the organizations. Moreover, the knowledge items formulated in the reverse engineering process are stored into a knowledge-based e-service development platform, making them readily available for use in the development of other services. ...|$|R
50|$|Conan The Librarian, the OpenVMS HELP tool (2002). Mark Daniel wrote {{a script}} known as Conan the Librarian that makes OpenVMS <b>Help</b> and <b>Text</b> {{libraries}} accessible in the hypertext environment. It {{also provides a}} keyword search facility, both from a search dialog on relevant pages, and using a URL query string.|$|R
40|$|CogentHelp is a {{prototype}} tool for authoring dynamically generated on-line help for applications whose {{graphical user interfaces}} (GUIs) are built with the Java Abstract Windowing Toolkit (AWT). In this paper, we describe some of the techniques used in CogentHelp to facilitate the authoring, maintenance and customization of high-quality help systems. These {{include the use of}} (1) a “single-source” methodology for developing program code and help text; (2) small-grained, reusable “snippets ” of <b>help</b> <b>text</b> instead of monolithic topics; and (3) a lightweight, extensible framework for planning and generating help topics from “snippets”...|$|E
40|$|An MT 2 {{calculation}} {{algorithm is}} described. It {{is shown to}} achieve better precision than the fastest and most popular existing bisection-based methods. Most importantly, {{it is also the}} first algorithm to be able to reliably calculate asymmetric MT 2 to machine-precision, at speeds comparable to the fastest commonly used symmetric calculators. Comment: 13 pages, 6 figures. C++ implementation contained within the files submitted to the arXiv. v 1 : Original submission v 2 : typo corrections. v 3 : two new figures and more timing info, shorter title. v 4 : ancillary file modified to carry additional <b>help</b> <b>text,</b> v 5 : ancillary file made more portabl...|$|E
40|$|This release {{simplifies}} workflows {{for creating}} nested subtype definitions, adds options for generating Turtle data output, and fixes numerous bugs. Specific visible changes include: Turtle data output for entities and entity lists, {{to make it}} easier to share Annalist data with other linked data applications. New facility to create a subtype with key values inherited or derived from the parent type. Revised creation of view and list definitions for a type, to work more easily for subtypes. Fields from existing type view and list definitions, or from the default view and list definitions, are copied into the new definitions created. Changes to <b>help</b> <b>text,</b> diagnostics and other messages...|$|E
40|$|Today, {{almost always}} Online Public Access Catalogues (OPACs) {{are the only}} way to access library collections, but {{practical}} experience shows that users have problems dealing with electronic catalogues. The author therefore recommends that any good OPAC needs an elaborated online help system. The present master thesis surveys implemented online help systems in German university OPACs and gives a critical discussion. Beyond the variety of <b>help</b> <b>texts,</b> the author also includes help systems like spell check, search filters for results and recommender. On one hand, the analysis is based on a function-related classification of those help systems and on the other, the introduction of the terms effectiveness and efficiency serve as parameters to determine the usefulness of a help system. As a result, the author presents basic principles for an efficient help system that are based on the findings of this master thesis...|$|R
40|$|This paper reports {{selected}} {{results from}} a detailed evaluation of an intelligent interface to an information retrieval system. In order to assist users in each state of the interaction, the SPEAK! system generates situation-specific meta-communication about the ongoing retrieval dialogue based on a deep representation of communicative dialogue goals. Novice and expert users of retrieval systems were studied {{in their use of}} two experimental SPEAK! interface versions, which generate active help in the form of spoken or written messages, and a control version providing only conventional static <b>help</b> <b>texts.</b> We investigated typical usage patterns and the users' subjective assessments of the dialogue guidance and output modalities, interrelating data from user observations and structured interviews. The paper focuses on the perceived effects of the active vs. passive help support and identifiable differences by various user characteristics. 1 Introduction The need for systematic em [...] ...|$|R
5000|$|WilsonWeb is [...] "an online based {{information}} retrieval system that offers an interface, multiple search modes, interactive <b>help</b> messages, and <b>text</b> translation into various languages".|$|R
