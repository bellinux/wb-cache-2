84|96|Public
25|$|As {{fighting}} intensified {{along the}} Suez Canal, the Israeli Air Force now dispatched its fighter squadrons on regular deployments to the airfield, with four pilots and aircraft rotating {{every two or}} three weeks. Two aircraft regularly stood on quick reaction alert (QRA) at the base, ready to scramble within 5 minutes. Many of the kills achieved by Israeli fighter pilots between 1967 and 1973 were claimed by the Rephidim QRA aircraft, and many pilots sought to be stationed there during times of tension, eager to improve their chances of achieving a victory. The base was also the <b>forward</b> <b>recovery</b> base for any aircraft damaged or low on fuel, as well as the premier medical station for soldiers wounded in the fighting along the Canal, from which they were then ferried to Israel.|$|E
2500|$|Photothyristors are {{activated}} by light. The advantage of photothyristors is their insensitivity to electrical signals, {{which can cause}} faulty operation in electrically noisy environments. A light-triggered thyristor (LTT) has an optically sensitive region in its gate, into which electromagnetic radiation (usually infrared) is coupled by an optical fiber. [...] Since no electronic boards need to be provided at {{the potential of the}} thyristor in order to trigger it, light-triggered thyristors can be an advantage in high-voltage applications such as HVDC. [...] Light-triggered thyristors are available with in-built over-voltage (VBO) protection, which triggers the thyristor when the forward voltage across it becomes too high; [...] they have also been made with in-built <b>forward</b> <b>recovery</b> protection, but not commercially. Despite the simplification they can bring to the electronics of an HVDC valve, light-triggered thyristors may still require some simple monitoring electronics and are only available from a few manufacturers.|$|E
50|$|As {{fighting}} intensified {{along the}} Suez Canal, the Israeli Air Force now dispatched its fighter squadrons on regular deployments to the airfield, with four pilots and aircraft rotating {{every two or}} three weeks. Two aircraft regularly stood on quick reaction alert (QRA) at the base, ready to scramble within 5 minutes. Many of the kills achieved by Israeli fighter pilots between 1967 and 1973 were claimed by the Rephidim QRA aircraft, and many pilots sought to be stationed there during times of tension, eager to improve their chances of achieving a victory. The base was also the <b>forward</b> <b>recovery</b> base for any aircraft damaged or low on fuel, as well as the premier medical station for soldiers wounded in the fighting along the Canal, from which they were then ferried to Israel.|$|E
40|$|Redundant disk arrays {{are single}} fault tolerant, {{incorporating}} {{a layer of}} error handling not found in nonredundant disk systems. Recovery from these errors is complex, {{due in part to}} the large number of erroneous states the system may reach. The established approach to error recovery in disk systems is to transition directly from an erroneous state to completion. This technique, known as <b>forward</b> error <b>recovery,</b> relies upon the context in which an error occurs to determine the steps required to reach completion, which implies <b>forward</b> error <b>recovery</b> is design specific. <b>Forward</b> error <b>recovery</b> requires the enumeration of all erroneous states the system may reach and the construction of a forward path from each erroneous state. We propose a method of error recovery which does not rely upon the enumeration of erroneous states or the context in which errors occur. When an error is encountered, we advocate mechanized recovery to an error-free state from which an operation may be retried. Using a form of backward error recovery, we are able to manage the complexity of error recovery in redundant disk arrays without sacrificing performance...|$|R
50|$|The command, <b>forward</b> {{observation}} and <b>recovery</b> vehicles are armed {{only with a}} machine gun.|$|R
50|$|Extensive {{stall and}} spin testing {{was carried out}} at Wizard Lake on 28 December 1982. Straight-ahead and turning power off stalls {{resulted}} in a stable mush condition. Power-on stalls from 30 degrees nose up resulted in a +15 degree nose up stable mush, with no wing drop tendency. A near-vertical pitch resulted in a clean stall, with a smooth pitch <b>forward</b> and <b>recovery</b> to level flight with no wing drop tendency.|$|R
50|$|Photothyristors are {{activated}} by light. The advantage of photothyristors is their insensitivity to electrical signals, {{which can cause}} faulty operation in electrically noisy environments. A light-triggered thyristor (LTT) has an optically sensitive region in its gate, into which electromagnetic radiation (usually infrared) is coupled by an optical fiber. Since no electronic boards need to be provided at {{the potential of the}} thyristor in order to trigger it, light-triggered thyristors can be an advantage in high-voltage applications such as HVDC. Light-triggered thyristors are available with in-built over-voltage (VBO) protection, which triggers the thyristor when the forward voltage across it becomes too high; they have also been made with in-built <b>forward</b> <b>recovery</b> protection, but not commercially. Despite the simplification they can bring to the electronics of an HVDC valve, light-triggered thyristors may still require some simple monitoring electronics and are only available from a few manufacturers.|$|E
30|$|Error {{recovery}} {{is the process}} in which the erroneous state is substituted with an error-free state (Lee and Anderson [1990]). Error {{recovery is}} performed using either backward recovery or <b>forward</b> <b>recovery.</b> On the one hand, backward recovery attempts to return the system to a correct or error-free state by restoring or rolling back the system to a previously saved state, which is assumed to be error-free. On the other hand, <b>forward</b> <b>recovery</b> attempts to return the system to a correct or error-free state by finding a new state from which the system can continue operation. Compared to backward error recovery, <b>forward</b> <b>recovery</b> is usually more efficient in terms of the overhead (e.g. time and memory) it imposes (Lee and Anderson [1990]). On the other hand, it is usually not possible to design general <b>forward</b> <b>recovery</b> mechanisms.|$|E
40|$|Abstract. We {{propose a}} {{generalized}} <b>forward</b> <b>recovery</b> checkpointing scheme, with lookahead execution and rollback validation. This method {{takes advantage of}} voting and comparison on multiple versions of the executing task. The proposed scheme is evaluated and compared with other existing checkpointing techniques. The processor assignment problem is studied and an optimal processor assignment is identi ed. Details {{on how to use}} this approach for tolerating both software and hardware faults are also discussed. Index terms: Checkpointing, fault tolerance, <b>forward</b> <b>recovery,</b> reliability analysi...|$|E
40|$|The {{spin and}} {{recovery}} {{characteristics of a}} 1 / 13 -scale model of the NASA AD- 1 oblique-wing research aircraft at wing-skew positions of 0, 25, 45, and 60 deg (right wing forward) were investigated. Spins were obtained for all wing-skew positions tested. For the unskewed wing position, two spin modes were possible. One spin mode was very steep and recoveries were obtained within 1 turn or less by rudder reversal. The second spin mode was flat and fast; the angle of attack was about 75 deg and the spin rate was about 145 deg/sec (2. 5 seconds per turn). For the skewed wing positions, spins were obtained only {{in the direction of}} the forward-skewed wing (right wing forward). No spins were obtained to the left when the wing was skewed with the right wing <b>forward.</b> <b>Recoveries</b> should be attempted by deflecting the rudder to full against the spin, the ailerons to full with the spin, and movement of the wings to 0 deg skew. If the wing is skewed, the recovery may not be effected until the wing skew approaches 0 deg...|$|R
2500|$|Extensive stall [...] {{and spin}} testing {{was carried out}} at Wizard Lake on 28 December 1982. Straight-ahead and turning power off stalls {{resulted}} in a stable mush condition. Power-on stalls from 30 degrees nose up resulted in a +15 degree nose up stable mush, with no wing drop tendency. A near-vertical pitch resulted in a clean stall, with a smooth pitch <b>forward</b> and <b>recovery</b> to level flight with no wing drop tendency.|$|R
40|$|The {{state of}} art in {{handling}} and resolving concurrent exceptions is discussed and a brief outline of all {{research in this area}} is given. Our intention is to demonstrate that exception resolution is a very useful concept which facilitates joint <b>forward</b> error <b>recovery</b> in concurrent and distributed systems. To do this, several new arguments are considered. We understand resolution as reaching an agreement among cooperating participants of an atomic action. It is provided by the underlying system to make it unified and less error prone, which is important for <b>forward</b> error <b>recovery,</b> complex by nature. We classify atomic action schemes into asynchronous and synchronous ones and discuss exception handling for schemes of both kinds. The paper also deals with introducing atomic action schemes based on exception resolution into existing concurrent and distributed languages, which usually have only local exceptions. We outline the basic approach and demonstrate its applicability by showing how exception resolution can be used in Ada 83, Ada 95 (for both concurrent and distributed systems) and Java. A discussion of ways to make this concept more object oriented and, with the help of reflection, more flexible and useful, concludes the paper...|$|R
40|$|Very-fast high-current pulses {{that occur}} during charged device model (CDM) ESD events lead to {{transient}} voltage overshoots in forward- and reverse-biased pn-junctions, called <b>forward</b> <b>recovery</b> and dynamic reverse overshoot. To improve the device modeling for CDM circuit simulation of integrated circuits, these effects should be fully understood {{and should be}} implemented in the device models. In this paper the effects are studied under the CDM relevant operating conditions by experimental characterization and device simulation. Technological parameters have been varied to assess {{the presence of the}} effects in different technologies, such as sub-micron CMOS technologies and smart power technologies. A simple compact model extension to include the <b>forward</b> <b>recovery</b> effect in diode models is presented. A novel parameter extraction method that uses the transient TDR signals of the very-fast TLP method is introduced. Using this extraction method we can parameterize high-current device models in the nanosecond time scale. The parameter extraction method is demonstrated by applying it to the modeling of the <b>forward</b> <b>recovery</b> effect...|$|E
30|$|Design issue III - {{execution}} of variants: Variants can be executed either sequentially or in parallel. The execution schemes should provide all variants with {{exactly the same}} experience of the system state when their respective executions start to ensure consistency of input data (Nascimento et al. [2013]), which be {{can be achieved by}} employing backward recovery or <b>forward</b> <b>recovery</b> (Section 5). Sequential {{execution of}}ten requires the use of checkpoints (it usually employs backward recovery), and parallel execution often requires the use of algorithms to ensure consistency of input data (it usually employs <b>forward</b> <b>recovery</b> by invoking all the variants and coordinating their execution through a synchronization regime) (Pullum [2001]; Wilfredo [2000]).|$|E
40|$|A {{modification}} of ARIES/NT algorithm for nested transactions rollback and recovery is proposed. This modification allows {{to perform the}} <b>forward</b> <b>recovery</b> for advanced transaction models, such as ConTracts and some subclasses of Sagas. The implementation of the proposed algorithm at the storage system level is described...|$|E
40|$|Abstract: This paper {{proposes a}} novel {{approach}} to constructing and modelling Dependable Web Services (DeW) that are built by composing web components that can be undependable. This is achieved by applying a structured approach to the Web Services (WSs) development, based on the Web Service Composition Actions (WSCAs) scheme and a corresponding event-driven simulation model of composite WS. The dependability and fault-tolerance of composite WS is achieved by employing <b>forward</b> error <b>recovery</b> based on multilevel system structuring enabling application-specific exception handling...|$|R
40|$|The {{state of}} art in {{concurrent}} exception handling and resolution is discussed and a brief outline of all {{research in this area}} given. Our intention is to demonstrate that exception resolution is a very useful concept which should be used to facilitate joint <b>forward</b> error <b>recovery</b> in concurrent and distributed systems. To do this, several new arguments are considered. We regard resolution as reaching an agreement among cooperating participants of an atomic action. It is provided by the underlying system, which makes it unified and less error prone, and this is important for <b>forward</b> error <b>recovery,</b> complex by nature. We classify atomic action schemes into asynchronous and synchronous ones, and resolution implementations into centralised and decentralised ones. Another issue that we believe to be very important is about introducing atomic action schemes based on exception resolution into existing concurrent and distributed languages, which usually have only local (one-process) exceptions. We outline the basic approach and demonstrate its applicability by showing how resolution can be used in Ada 83, Ada 95 (for both concurrent and distributed systems) and Java. A discussion of ways to make this concept more object oriented and, with the help of reflection, more flexible and useful, concludes the paper...|$|R
30|$|How can errors be recovered? The {{answer to}} this {{question}} can be either forward or backward error recovery, according to the error recovery strategy of the respective functionalities (see Section 5). The {{answer to this}} question should support the decision regarding how to execute variants. In some cases, when a <b>forward</b> error <b>recovery</b> strategy is more effective, a sequential execution is recommended. For example, when a billing system is executed in parallel, after processing redundant bills, some of them should be cancelled, since an undo operation is not applicable in such case.|$|R
40|$|The {{preservation}} of local autonomy and the atomic commitment of global Lransactions present con-llieting exigencies {{to the design}} of mullidalabase transaction management systems. In this paper, we investigate a <b>forward</b> <b>recovery</b> approach to the atomic commitment of global transactions while al the same lime preserving local autonomy. A theoretical basis for the application of <b>forward</b> <b>recovery</b> to the atomic commitment of global transaclions is developed. In particular, we examine the effect on atomic commitment of the intrinsic semantics of global transactions, as manifestcd in value dependency rela. tionships. The atomicity of a global transaclion is thus ensured through a controlled commilment order ofils global subtransactions, while its a. bortcd global subtransactions are rctried. A global atomic commitment protocol is grounded upon the proposed theory. Index terms: transaction management, muhidatabase, global commitlability, compensalion, global and local transactions. ...|$|E
40|$|A general model {{allowing}} a unified understanding of programmed exception handling (<b>forward</b> <b>recovery)</b> and default exception handling (backward recovery) in systems structured as hierarchies of data abstrac-tions is presented. The cause-effect relationship between software design faults and failure occu-rrences is explored and {{the adequacy of}} backward recovery in providing effective software-fault tolerance is discussed...|$|E
40|$|This paper {{describes}} {{recent developments}} {{in the use of}} memory management and compiler technology to support rapid recovery from failures in computer systems. The techniques described include cache coherence protocols for user transparent checkpointing in multiprocessor systems, compiler-based checkpoint placement, compiler-based code modification for multiple instruction retry, and <b>forward</b> <b>recovery</b> in distributed systems utilizing optimistic execution...|$|E
40|$|A system {{architecture}} called the recovery metaprogram (RMP) is proposed. It separates the application from the recovery software, giving programmers a single environment that lets them use {{the most appropriate}} fault-tolerance scheme. To simplify {{the presentation of the}} RMP approach, it is assumed that the fault model is limited to faults originating in the application software, and that the hardware and kernel layers can mask their own faults from the RMP. Also, relationships between backward and <b>forward</b> error <b>recovery</b> are not considered. Some RMP examples are given, and a particular RMP implementation is describe...|$|R
40|$|Abstract — This paper {{considers}} {{the design of}} state estimators for dynamic balancing systems using a Linear Inverted Pendulum model with unknown modeling errors such as a center of mass measurement offset or an external force. A variety of process and output models are constructed and compared. For a system containing modeling error, it is shown that a naive estimator (one that doesn’t account for this error) will result in inaccurate state estimates. These state estimators are evaluated on a force-controlled humanoid robot for a sinusoidal swaying task and a <b>forward</b> push <b>recovery</b> task. I...|$|R
40|$|We {{identify}} here {{various kinds}} of failure conditions and robustness issues that arise in context-aware pervasive computing applications. Such conditions are related to failures in an application’s interactions with ambient services, failures in resource discovery and binding, and invalidation of context conditions during the execution of an application task. In this paper we present an exception handling model for integrating <b>forward</b> error <b>recovery</b> mechanisms in the designs of such applications. This model is integrated in a role-based framework and supported by a programming environment for construction of such applications...|$|R
40|$|The paper {{describes}} {{the implementation of}} a <b>forward</b> <b>recovery</b> scheme using checkpoints and replicated tasks. The implementation is based on the concept of lookahead execution and rollback validation. In the experiment, two tasks are selected for the normal execution and one for rollback validation. It is shown that the recovery strategy has nearly error-free execution time and an average redundancy lower than TMR...|$|E
40|$|With an {{increasing}} number of executable binaries generated by optimizing compilers in today 's high-performance computing, providing a clear and correct source-level debugger for programmers to debug optimized code has become a necessity. Implementing source breakpoints is a fundamental aspect of such a debugger. In this paper, a new source breakpoint implementation scheme which consists of a new code location mapping scheme and a <b>forward</b> <b>recovery</b> model is proposed. The approach is aimed at solving the fundamental problems suffered by traditional methods. By taking over the control early and executing instructions under our <b>forward</b> <b>recovery</b> model, the debugger can preserve and gather the required program states. With this information accumulated and the help of a data location tracking method, the expected values of user variables can be recovered at source breakpoints. The new code location mapping scheme helps the debugger to determine where to suspend and resume the normal execution and decide if a source breakpoint should be reported...|$|E
40|$|This paper {{discusses}} {{various ways}} to add correlated stochastic recovery {{to the base}} correlation framework for pricing CDOs. Several recent models are extended to more general framework. The {{pros and cons of}} these models for calibration to single name CDS and index CDO tranches are discussed. It is shown that negative <b>forward</b> <b>recovery</b> rate under fixed systematic factor appears in these models. This suggests that current static copula models of correlated default and recovery processes are inherently inconsistent. ...|$|E
40|$|Abstract—The {{probability}} {{distribution of the}} number of lost packets within a block of consecutive packet arrivals into a finite buffer is an important quantity in various networking problems. In a recent paper, Cidon, Khamisy, and Sidi introduced a recursive scheme to derive this distribution. In this paper, we derive explicit expressions for this distribution using various versions of the powerful Ballot Theorem. The expressions are derived for a single source M/M/ 1 /K queue. Index Terms—Ballot theorem, blocking probability, finite queues, <b>forward</b> error <b>recovery,</b> high-speed networks, packet loss processes. I...|$|R
60|$|The weeks passed. Morel, almost against hope, grew better. He {{had a fine}} constitution, so that, once on the mend, he went {{straight}} <b>forward</b> to <b>recovery.</b> Soon he was pottering about downstairs. During his illness his wife had spoilt him a little. Now {{he wanted her to}} continue. He often put his band to his head, pulled down the comers of his mouth, and shammed pains he did not feel. But there was no deceiving her. At first she merely smiled to herself. Then she scolded him sharply.|$|R
40|$|A {{supplementary}} {{investigation has}} been conducted in the Langley 20 -foot free-spinning tunnel of a l/ 20 -scale model of the Douglas XF 4 D- 1 airplane {{to determine the effect}} of only neutralizing the rudder for recovery from an inverted spin, and the effect of partial aileron deflection with the spin for recovery from an erect spin. An estimation of the size parachute required for satisfactory recovery from a spin with the model ballasted to represent the Douglas F 5 D- 1 (formerly the Douglas XF 4 D- 2) airplane was also made. Results of the original investigation on the XF 4 D- 1 design are presented in NACA RM SL 50 K 30 a. The results indicated that satisfactory recoveries from inverted spins of the airplane should be obtained by rudder neutralization when the longitudinal stick position is neutral or <b>forward.</b> <b>Recoveries</b> from erect spins from the normal-spin control configuration should be satisfactory by full rudder reversal with simultaneous movement of the ailerons to two-thirds with the spin. For the parachute tests with the model loaded to represent the F 5 D- 1 airplane, the tests indicated that a 16. 7 -foot-diameter hemispherical-tail parachute (drag coefficient of 1. 082 based on the projected area) with a towline 20. 0 feet long (full- scale values) should be satisfactory for an emergency spin-recovery device during demonstration spins of the airplane...|$|R
40|$|Techniques for {{structuring}} forward {{error recovery}} measures in asynchronous systems are proposed, and recent ideas of atomic actions are generalized {{so as to}} support fault-tolerant interactions between processes. In particular, the proposal generalizes the form of simple recovery facilities supported by nested atomic actions in which the exception mechanisms only permit backward error recovery. It allows for construction of systems employing both forward and backward error recovery and thus allows for exploitation of the complementary benefits of the two schemes. Backward recovery, <b>forward</b> <b>recovery,</b> and normal processing activities can occur concurrently within the organization proposed...|$|E
40|$|Multiprocessor systems make it {{possible}} to reduce program execution time by using parallel processing. We present an architecture that implements triple modular redundancy (TMR) in FTAG (Fault Tolerant Attribute Grammar) : a functional and attribute based model[2]. A replication scheme is developed for this architecture where three instances of a replicated job called replica are active at different group of processors. The developed scheme achieves rollback only if the system experience three or more failures, otherwise <b>forward</b> <b>recovery</b> is used. The scheme combines time and spatial redundancy and takes full advantage of parallel processing...|$|E
40|$|As {{part of the}} Legion metacomputing project, we have {{developed}} a reflective model, the Reflective Graph & Event (RGE) model, for incorporating functionality into applications. In this paper we apply the RGE model {{to the problem of}} making applications more robust to failures. RGE encourages system developers to express fault-tolerance algorithms in terms of transformations on the data structures that represent computations— messages and methods—hence enabling the construction of generic and reusable fault-tolerance components. We illustrate the expressive power of RGE by encapsulating the following fault-tolerance techniques into RGE components: two-phase commit distributed checkpointing, passive replication, pessimistic method logging, and <b>forward</b> <b>recovery.</b> ...|$|E
40|$|Abstract:This article {{studied with}} {{emphasis}} in the caffeine crystallization condition of soaked raises in the crystallization law, separately inspected the ratio of mass of material,the time of soaking,the temperature of soaking,pH effect on the extraction of the caffeine, {{and the amount of}} precipitation and other factors on the extraction rate of caffeine to identify the most excellent condition to extract caffeine, in these conditions. Using a melting point and IR identification analysis check the final product which it maybe contain, Have put <b>forward</b> a <b>recovery</b> method precipitated to much phenol of tea polyphenols in experiment course...|$|R
50|$|Recovery from {{errors in}} {{fault-tolerant}} {{systems can be}} characterised as either 'roll-forward' or 'roll-back'. When the system detects that it has made an error, roll-forward recovery takes the system state {{at that time and}} corrects it, {{to be able to move}} <b>forward.</b> Roll-back <b>recovery</b> reverts the system state back to some earlier, correct version, for example using checkpointing, and moves forward from there. Roll-back recovery requires that the operations between the checkpoint and the detected erroneous state can be made idempotent. Some systems make use of both roll-forward and roll-back recovery for different errors or different parts of one error.|$|R
5000|$|As each plane lifted off, its launch trolley {{would reach}} the end of the {{slideway}} but remain locked in place until the tow attachment cables were released. Once the slideways were retracted back into the catapult track wells and the tow cables unhooked, the launch trollies would be manually pushed <b>forward</b> onto <b>recovery</b> platforms, lowered to the forecastle on [...] "B" [...] deck, then rolled back into the upper hangar for re-use via a secondary set of rails. When not in use, the catapult tracks were to be covered with sheet metal farings to protect them from harsh weather.|$|R
