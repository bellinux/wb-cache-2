680|729|Public
25|$|Mike Thyer, , a {{graphical}} <b>Java</b> <b>applet</b> demonstrating alternative reduction strategies.|$|E
25|$|Processing.js, a JavaScript port of the Processing {{programming}} language designed to write visualizations, images, and interactive content. It allows Web browsers to display animations, visual applications, games and other graphical rich content {{without the need}} for a <b>Java</b> <b>applet</b> or Flash plugin.|$|E
25|$|Chrome supported, up to version 45, {{plug-ins}} {{with the}} Netscape Plugin Application Programming Interface (NPAPI), so that plug-ins (for example Adobe Flash Player) run as unrestricted separate processes outside the browser and cannot be sandboxed as tabs are. ActiveX is not supported. Since 2010, Adobe Flash has been integral to Chrome {{and does not}} need be installed separately. Flash is {{kept up to date}} as part of Chrome's own updates. <b>Java</b> <b>applet</b> support was available in Chrome with Java 6 update 12 and above. Support for Java under OS X was provided by a Java Update released on May 18, 2010.|$|E
2500|$|<b>Java</b> <b>applets</b> in Rosetta-translated applications, {{meaning that}} a native Intel web browser application, {{rather than a}} legacy PowerPC version, must be used to load <b>Java</b> <b>applets</b> ...|$|R
50|$|<b>Java</b> <b>Applets</b> are {{components}} {{running in}} a web browser. They are developed {{in the form of}} Java byte code. The applets are supported by most modern operating systems and browsers. <b>Java</b> <b>applets</b> have high performance similar to native installed software. <b>Java</b> <b>applets</b> are signed with security certificates to become trusted software, which allows automatic redistribution from a web site and installation on client computers.|$|R
50|$|<b>Java</b> <b>applets</b> {{are used}} to create {{interactive}} visualizations and to present video, three dimensional objects and other media. <b>Java</b> <b>applets</b> are more appropriate for complex visualizations that require significant programming effort in high level language or communications between applet and originating server.|$|R
25|$|On September 23, 2011 {{researchers}} Thai Duong and Juliano Rizzo {{demonstrated a}} {{proof of concept}} called BEAST (Browser Exploit Against SSL/TLS) using a <b>Java</b> <b>applet</b> to violate same origin policy constraints, for a long-known cipher block chaining (CBC) vulnerability in TLS 1.0: an attacker observing 2 consecutive ciphertext blocks C0, C1 can test if the plaintext block P1 is equal to x by choosing the next plaintext block P2 = x ^ C0 ^ C1; due to how CBC works C2 will be equal to C1 if x = P1. Practical exploits had not been previously demonstrated for this vulnerability, which was originally discovered by Phillip Rogaway in 2002. The vulnerability of the attack had been fixed with TLS 1.1 in 2006, but TLS 1.1 had not seen wide adoption prior to this attack demonstration.|$|E
500|$|... (<b>Java</b> <b>applet</b> demonstrating group {{velocity}} information limits) ...|$|E
500|$|Spacewar! {{has had an}} {{enduring}} legacy. The game's success was celebrated in Rolling Stone for the game's 10th anniversary in 1972 in [...] "Spacewar: Fanatic Life and Symbolic Death Among the Computer Bums". More recently, the source code has been transcribed into a Spacewar! <b>Java</b> <b>applet,</b> and on the 40th anniversary in 2002, the creators of Spacewar! were interviewed by the New York Times.|$|E
5000|$|<b>Java</b> <b>applets,</b> another <b>Java</b> {{application}} deployment technology.|$|R
50|$|Firefox 3.6.15 was a {{stability}} update that fixed a <b>Java</b> <b>applets</b> issue.|$|R
50|$|On {{the client}} side, web browsers may be {{extended}} with a NPAPI Java plugin which executes so called <b>Java</b> <b>applets</b> embedded into HTML pages. The applet {{is allowed to}} draw into a rectangular region on the page assigned to it and use a restricted set of APIs that allow for example access to user's microphone or 3D acceleration. <b>Java</b> <b>applets</b> were superior to JavaScript both in performance and features until approximately 2011, when JavaScript engines in browsers were made significantly faster and the HTML 5 suite of web technologies started enhancing JavaScript with new APIs. <b>Java</b> <b>applets</b> {{are not able to}} modify the page outside its rectangular region which is not true about JavaScript. Adobe Flash Player, the main competing technology, works in the same way in this respect. <b>Java</b> <b>applets</b> are not restricted to Java and in general can be created in any JVM language.|$|R
2500|$|... {{interactive}} <b>Java</b> <b>applet</b> for graphing {{and exploring}} functions.|$|E
2500|$|... Explorer <b>java</b> <b>applet,</b> {{includes}} {{a variety of}} 3d viewer options.|$|E
2500|$|... by N. Shaylor, April 17, 1997. Includes a {{simulator}} (a <b>Java</b> <b>applet</b> and C) ...|$|E
50|$|The {{user-interface}} {{is used in}} an internet-browser without plugins, ActiveX, local <b>Java</b> <b>applets.</b>|$|R
40|$|An Internet {{course in}} NDE/NDT {{technology}} and applications {{is being developed}} {{as part of the}} North Central Collaboration for NDE/NDT Education to complement new course materials and instructional modules for use in NDE/NDT technician programs, curriculum redevelopment, and innovation in NDE/NDT technological education in community and technical colleges. <b>Java</b> <b>applets</b> provide a widely used mechanism for platform-independent interactive graphics applicable to learning environments. Embedded in web pages, <b>Java</b> <b>applets</b> enhance the understanding of a physical phenomenon with adaptive visualization. Additionally, many applets can serve as an on-line calculators often required as part of NDE/NDT inspection planning. This paper demonstrates the application of <b>Java</b> <b>applets</b> to basic ultrasonics education via the internet...|$|R
5000|$|<b>Java</b> <b>applets</b> {{are fast}} {{and can even}} have similar {{performance}} to native installed software.|$|R
2500|$|A <b>Java</b> <b>applet</b> {{that allows}} you to {{experiment}} with simulated annealing. Source code included.|$|E
2500|$|An {{interactive}} <b>JAVA</b> <b>applet</b> {{to study}} deformations (area, distance and angle) of map projections (UFF.br).|$|E
2500|$|... – colored, {{graphical}} <b>Java</b> <b>applet</b> {{that allows}} experimentation {{with the initial}} input and provides statistics ...|$|E
50|$|The runtime {{environment}} includes a JIT compiler developed by Symantec, the standard Java class library from Sun, additional classes providing Macintosh-specific functionality, and the Apple Applet Runner (a lightweight application for running <b>Java</b> <b>applets</b> without the overhead {{of a web}} browser). A number of web browsers could use MRJ to run <b>Java</b> <b>applets</b> in web pages, including Microsoft Internet Explorer, iCab and HotJava.|$|R
40|$|<b>Java</b> <b>applets</b> have {{increasingly}} {{been used as}} a vector to deliver drive-by download attacks that bypass the sandboxing mechanisms of the browser’s Java Virtual Machine and compromise the user’s environment. Unfortunately, the research community has not given to this problem the attention it deserves, and, as a consequence, the state-of-the-art approaches to the detection of malicious <b>Java</b> <b>applets</b> are based either on simple signatures or on the use of honeyclients, which are both easily evaded. Therefore, we propose a novel approach to the detection of malicious <b>Java</b> <b>applets</b> based on static code analysis. Our approach extracts a number of features from <b>Java</b> <b>applets,</b> and then uses supervised machine learning to produce a classifier. We implemented our approach in a tool, called Jarhead, and we tested its effectiveness on a large, real-world dataset. The results of the evaluation show that, given a sufficiently large training dataset, this approach is able to reliably detect both known and previously-unseen real-world malicious applets. 1...|$|R
2500|$|... (<b>Java</b> <b>applets</b> {{allowing}} navigation {{through the}} entire sky with variable star detail, optional constellation lines) ...|$|R
2500|$|Visualization of Traveling Salesman {{solved by}} ant system with {{numerous}} options and parameters (<b>Java</b> <b>Applet)</b> ...|$|E
2500|$|... {{including}} a <b>Java</b> <b>applet</b> that illustrates how the numerical values of p-values can give quite misleading impressions {{about the truth}} or falsity of the hypothesis under test.|$|E
2500|$|... – Easy to use {{interactive}} exhibits of live color 2D cellular automata, {{powered by}} <b>Java</b> <b>applet.</b> Included are exhibits of traditional, reversible, hexagonal, multiple step, fractal generating, and pattern generating rules. Thousands of rules are provided for viewing. Free software is available.|$|E
5000|$|Some browsers, notably mobile browsers on iOS or Android, do not run <b>Java</b> <b>applets</b> at all.|$|R
50|$|Alternative {{platforms}} include BASIC interpreters, <b>Java</b> <b>applets,</b> <b>Java</b> ME, Macromedia Flash, JavaScript, PHP {{and even}} Microsoft Office. Software platform restrictions like this, however, have not earned the respect {{from the majority}} of demosceners.|$|R
5000|$|The live {{players are}} {{connected}} using <b>Java</b> <b>applets.</b> Hence the user only needs a Java -enabled browser.|$|R
2500|$|... – Home to free MCell and MJCell {{cellular}} automata explorer {{software and}} rule libraries. The software supports {{a large number}} of 1D and 2D rules. The site provides both an extensive rules lexicon and many image galleries loaded with examples of rules. MCell is a Windows application, while MJCell is a <b>Java</b> <b>applet.</b> Source code is available.|$|E
2500|$|AnyLogic {{includes}} a graphical modeling language and also allows {{the user to}} extend simulation models with Java code. The Java nature of AnyLogic lends itself to custom model extensions via Java coding {{as well as the}} creation of Java applets which can be opened with any standard browser. [...] These applets make AnyLogic models very easy to share or place on websites. In addition to Java applets the Professional version allows for the creation of Java runtime applications which can be distributed to users. These pure Java applications can be a base for decision support tools. It should be noted, however, that most internet browsers have disabled <b>Java</b> <b>applet</b> support due to security concerns.|$|E
2500|$|At the time, {{the use of}} the {{internet}} for music promotion was not widespread, and record labels were still reliant on MTV and radio. Capitol launched an innovative marketing campaign, broadcasting [...] "blips", short films set to Kid A music, on music channels and distributing them online. The [...] "iBlip", a <b>Java</b> <b>applet,</b> could be embedded in fan sites and allowed users to pre-order and stream the album; it was used by over 1000 sites and the album was streamed more than 400,000 times. The iBlip also included artwork, photos and links to pre-order the album on the online retailer Amazon. Capitol also streamed the album through Amazon, MTV.com and heavy.com, and for three days ran a promotional campaign with the peer-to-peer filesharing service Aimster, allowing users to swap iBlips and Radiohead-branded Aimster skins.|$|E
5000|$|GCJAppletViewer for {{launching}} <b>Java</b> <b>applets</b> from command line {{if they are}} not supported by the browser in use.|$|R
40|$|Abstract: This paper {{describes}} a design system for distance-learning based on using of so called “living pictures”. While describing the approach, it addresses relevant {{questions about the}} design and test of control intensive digital systems. The system is implemented in a form of <b>Java</b> <b>applets</b> and can be freely accessed over Internet. The <b>Java</b> <b>applets</b> has built-in multilingual support to ensure easy integration into teaching courses of universities over the world...|$|R
50|$|<b>Java</b> <b>applets</b> run at {{very fast}} speeds and, until 2011, they were many {{times faster than}} JavaScript. Unlike JavaScript, <b>Java</b> <b>applets</b> had access to 3D {{hardware}} acceleration, making them well-suited for non-trivial, computation-intensive visualizations. As browsers have gained support for hardware-accelerated graphics thanks to the canvas technology (or specifically WebGL {{in the case of}} 3D graphics), as well as just-in-time compiled JavaScript, the speed difference has become less noticeable.|$|R
