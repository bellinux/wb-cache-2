253|10000|Public
25|$|Transport {{economics}} {{is used to}} understand both {{the relationship between the}} transport system and the wider economy and the complex network effects when there are multiple paths and competing modes for both personal and freight (road/rail/air/ferry) and where Induced demand can result in increased on decreased transport levels when road provision is increased by building new roads or decreased (for example California State Route 480). Roads are generally built and maintained by the public sector using taxation although <b>implementation</b> <b>may</b> <b>be</b> through private contractors). or occasionally using road tolls.|$|E
50|$|The {{interface}} <b>implementation</b> <b>may</b> <b>be</b> {{limited by}} the technology supported in a specific release.|$|E
50|$|The {{protection}} {{level of a}} particular <b>implementation</b> <b>may</b> <b>be</b> measured by how closely it adheres {{to the principle of}} minimum privilege.|$|E
50|$|Multi-session {{mastering}} is {{also possible}} in UDF, though some <b>implementations</b> <b>may</b> <b>be</b> unable to read disks with multiple sessions.|$|R
50|$|Factory: Methods for {{creating}} domain objects should delegate to a specialized Factory object such that alternative <b>implementations</b> <b>may</b> <b>be</b> easily interchanged.|$|R
50|$|All queues are {{typically}} {{guaranteed to be}} fair and, in some <b>implementations,</b> <b>may</b> <b>be</b> guaranteed to be first in first out.|$|R
5000|$|... {{programmed}} systems (in {{which you}} can create many more innovations, but the time to market and cost of <b>implementation</b> <b>may</b> <b>be</b> higher).|$|E
50|$|For example, a SpiderMonkey JavaScript <b>implementation</b> <b>may</b> <b>be</b> at {{an earlier}} version of Lodash than the latest one found in a major browser.|$|E
5000|$|Class body {{variables}} can be transparently implemented {{as separate}} getter and setter methods. For , an <b>implementation</b> <b>may</b> <b>be</b> [...] The call site {{will still be}} able to use a concise [...]|$|E
50|$|Repository: Methods for {{retrieving}} domain objects should {{delegate to}} a specialized Repository object such that alternative storage <b>implementations</b> <b>may</b> <b>be</b> easily interchanged.|$|R
50|$|This {{architectural}} abstraction is made necessary due to functional logic abstraction, {{which is}} the capability of separating business logic implementation code from the service protocol implementation calling it. The fact that business logic <b>implementations</b> (operations) <b>may</b> <b>be</b> implemented in synchronous or asynchronous manners and that these business logic <b>implementations</b> <b>may</b> <b>be</b> interchangeable can cause problems when not addressed.|$|R
50|$|Hosted WIPS {{implementations}} {{are available}} in an on-demand, subscription-based {{software as a service}} model.Hosted <b>implementations</b> <b>may</b> <b>be</b> appropriate for organizations looking to fulfill the minimum scanning requirements of PCI DSS.|$|R
5000|$|JDO is {{integrated}} with Java EE in several ways. First of all, the vendor <b>implementation</b> <b>may</b> <b>be</b> provided as a [...] Secondly, JDO may {{work in the}} context of JEE transaction services.|$|E
50|$|An {{interface}} {{is thus a}} type definition; anywhere {{an object}} can be exchanged (for example, in a function or method call) the type of the object to be exchanged can be {{defined in terms of}} its interface rather than specifying a particular class. This approach means that any class that implements that interface can be used. For example, a dummy <b>implementation</b> <b>may</b> <b>be</b> used to allow development to progress before the final implementation is available. In another case, a fake or mock <b>implementation</b> <b>may</b> <b>be</b> substituted during testing. Such stub implementations are replaced by real code later in the development process.|$|E
50|$|Multiple {{repositories}} can {{be managed}} or searched {{through the use of}} OSID adapter patterns where underneath a single Repository OSID can exist multiple Repository OSIDs forming a federation of repositories, where each <b>implementation</b> <b>may</b> <b>be</b> using a distinct incompatible technology and the OSID integrates them.|$|E
5000|$|The {{last bit}} of Type of Service (bit 7) was defined as [...] "Must Be Zero". Because the last three bits went through many {{definitions}} prior to RFC 2474 (see below), documentation and <b>implementations</b> <b>may</b> <b>be</b> confusing and contradictory.|$|R
50|$|The Filing OSID {{provides}} {{platform independent}} storage {{and management of}} files and directories. Files and directories <b>may</b> <b>be</b> associated with metadata such as owner, mimetype, quota, and versions. <b>Implementations</b> <b>may</b> <b>be</b> built using any technology including file systems, databases, WebDAV, {{and other types of}} data access which require a file system oriented interface.|$|R
5000|$|And {{any other}} report on Budget <b>implementation</b> that <b>may</b> <b>be</b> required.|$|R
50|$|Symmetry: A PEP <b>implementation</b> <b>may</b> <b>be</b> {{symmetric}} or asymmetric. Symmetric PEPs use identical {{behavior in}} both directions, the {{actions taken by}} the PEP occur independent from which interface a packet is received. Asymmetric PEPs operate differently in each direction, which can cause, for example, only one link direction performance to be enhanced.|$|E
50|$|The aim is binary compatibility. Each {{particular}} host {{operating system}} needs its own {{implementation of the}} JVM and runtime. These JVMs interpret the bytecode semantically the same way, but the actual <b>implementation</b> <b>may</b> <b>be</b> different. More complex than just emulating bytecode is compatibly and efficiently implementing the Java core API that must be mapped to each host operating system.|$|E
50|$|This {{interface}} can {{be implemented}} in many ways. The <b>implementation</b> <b>may</b> <b>be</b> arbitrarily inefficient, since the formal definition of the ADT, above, does not specify how much space the stack may use, nor how long each operation should take. It also does not specify whether the stack state s continues to exist after a call x ‚Üê pop(s).|$|E
30|$|An {{assessment}} of {{improvement in the}} reporting of broad ligament fibroids following these <b>implementations</b> <b>may</b> <b>be</b> of interest. Alternatively, given the superior sensitivity of MRI in assessing uterine fibroids [11], a prospective study evaluating all lateral fibroids by MRI may improve the positive predictive value for broad ligament fibroids.|$|R
50|$|The {{absence of}} known similar {{incidents}} since {{indicates that the}} report, recommendations, and consequential <b>implementation</b> <b>may</b> have <b>been</b> successful.|$|R
40|$|In {{computer}} systems today, speed and responsiveness is often determined by network and storage subsystem performance. Faster, more scalable networking interfaces like Fibre Channel and Gigabit Ethernet provide the scaffolding from which higher performance {{computer systems}} <b>implementations</b> <b>may</b> <b>be</b> constructed, but new thinking is required about how machines interact with network-enabled storage devices. In thi...|$|R
50|$|An OSID {{provider}} <b>implementation</b> <b>may</b> <b>be</b> {{composed of}} an arbitrary {{number of other}} OSID providers. This layering technique is an obvious means of abstraction. When all the OSID providers implement the same service, this is called an adapter pattern. Adapter patterns are powerful techniques to federate, multiplex, or bridge different services contracting from the same interface without the modification to the application.|$|E
50|$|The {{implementation}} of a GIS is often driven by jurisdictional (such as a city), purpose, or application requirements. Generally, a GIS <b>implementation</b> <b>may</b> <b>be</b> custom-designed for an organization. Hence, a GIS deployment developed for an application, jurisdiction, enterprise, or purpose may not be necessarily interoperable or compatible with a GIS that has been developed for some other application, jurisdiction, enterprise, or purpose.|$|E
50|$|Abstraction {{provides}} {{a promise that}} any implementation of the ADT has certain properties and abilities; knowing these {{is all that is}} required to make use of an ADT object. The user does not need any technical knowledge of how the implementation works to use the ADT. In this way, the <b>implementation</b> <b>may</b> <b>be</b> complex but will be encapsulated in a simple interface when it is actually used.|$|E
50|$|OSID {{providers}} (implementations) {{are often}} reused across a varied set of applications. Once software {{is made to}} understand the interface contract for a service, other compliant <b>implementations</b> <b>may</b> <b>be</b> used in its place. This achieves reusability {{at a high level}} (a service level) and also serves to easily scale software written for smaller more dedicated purposes.|$|R
40|$|Fully-parallel {{hardware}} {{neural network}} <b>implementations</b> <b>may</b> <b>be</b> applied to high-speed recognition, classification, and mapping tasks {{in areas such}} as vision, or can be used as low-cost self-contained units for tasks such as error detection in mechanical systems (e. g. autos). Learning is required not only to satisfy application requirements, but also to overcome hardware-imposed limitations such as reduced dynamic range of connections...|$|R
50|$|MDM {{is a way}} {{to ensure}} {{employees}} stay productive and do not breach corporate policies. Many organizations control activities of their employees using MDM products/services. MDM primarily deals with corporate data segregation, securing emails, securing corporate documents on devices, enforcing corporate policies, integrating and managing mobile devices including laptops and handhelds of various categories. MDM <b>implementations</b> <b>may</b> <b>be</b> either on-premises or cloud-based.|$|R
50|$|Once {{permission}} {{is given}} for the evaluation, the district has 60 calendar days to complete the report. The parents are sent a copy 10 days before the team IEP meeting called an Educational Review. Following the ER, the district has 30 days to develop an IEP (individual Education Plan) with parent/guardian participation. The time from IEP written plan to <b>implementation</b> <b>may</b> <b>be</b> no more than 10 days.|$|E
50|$|Opaque {{pointers}} {{are a way}} to {{hide the}} implementation details of an interface from ordinary clients, so that the <b>implementation</b> <b>may</b> <b>be</b> changed without the need to recompile the modules using it. This benefits the programmer as well since a simple interface can be created, and most details can be hidden in another file. This is important for providing binary code compatibility through different versions of a shared library, for example.|$|E
50|$|ECMAScript is {{supported}} in many applications, especially Web browsers, {{where it is}} implemented by JavaScript, or, {{in the case of}} Internet Explorer, JScript. Implementations sometimes include extensions to the language, or to the standard library and related application programming interfaces (API) such as the World Wide Web Consortium (W3C) specified Document Object Model (DOM). This means that applications written in one <b>implementation</b> <b>may</b> <b>be</b> incompatible with another, unless they are written to use only a common subset of supported features and APIs.|$|E
50|$|MBMS {{has been}} {{standardized}} in various groups of 3GPP (Third Generation Partnership Project), {{and the first}} phase standards are found in UMTS release 6. As Release 6 was functionally frozen by the 3rd quarter of 2004, practical network <b>implementations</b> <b>may</b> <b>be</b> expected {{by the end of}} 2007, and the first functional mobile terminals supporting MBMS are estimated to be available by also end of 2007.|$|R
40|$|An {{extension}} of a modular imperative programming language is presented. This extension is aimed {{to support the}} automatic selection of implementations depending on their behaviour with respect to time and space efficiency, which is measured using the big-Oh asymptotic notation. The language provides some constructs to state both efficiency behaviour of public types and functions and efficiency requirements over <b>implementations.</b> Efficiency requirements <b>may</b> <b>be</b> stated at different places in programs; so, different <b>implementations</b> <b>may</b> <b>be</b> selected for different objects of the same type. An algorithm {{and a set of}} rules to compute the set of implementations that satisfy their requirements are presented. If the selection succeeds, programs <b>may</b> <b>be</b> translated into executable code. Postprint (published version...|$|R
50|$|Stored {{program control}} <b>implementations</b> <b>may</b> <b>be</b> {{organized}} into centralized and distributed approaches. Early electronic switching systems (ESS) {{developed in the}} 1960s and 1970s almost invariably used centralized control. Although many present day exchange design continue to use centralized SPC, with advent of low cost powerful microprocessors and VLSI chips such as programmable logic array (PLA) and programmable logic controllers (PLC), distributed SPC became widespread by the early 21st century.|$|R
