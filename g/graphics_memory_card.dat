0|2243|Public
50|$|For the PMC standard, I/O {{technologies}} {{account for}} much of the market, but various card functions are commercially available including Intel architecture and PowerPC processors, <b>graphics</b> <b>cards,</b> and <b>memory</b> <b>cards.</b> I/O cards are available such as serial communication controllers, SCSI controllers, graphics controllers and FireWire controllers.|$|R
5000|$|Usually CPU and the GPU are {{integrated}} on one die and also share the main memory, which is considerably {{slower than the}} distinct <b>graphics</b> <b>memory</b> in <b>graphics</b> <b>cards</b> for Desktop PCs. Yet, this is cheaper, smaller and does benefit power consumption because there are fewer components needed.|$|R
5000|$|... nullDC {{requires}} {{the latest version}} of Microsoft DirectX 9.0c, the latest Visual C++ runtime libraries and optionally WinPcap for modem emulation. As usual for quite a few emulators, a dump of the original console BIOS is also needed. It has a plugin architecture, with several alternative implementations (some ported from Chankast, another Dreamcast emulator) for <b>graphics,</b> sound, <b>memory</b> <b>cards</b> and reading games burned to CD-ROMs (optical disc drives for personal computers (PCs) cannot read GD-ROMs directly) or disk image files.|$|R
50|$|GDDR4 SGRAM, an {{abbreviation}} for double data rate type four synchronous <b>graphics</b> random access <b>memory,</b> {{is a type}} of <b>graphics</b> <b>card</b> <b>memory</b> specified by the JEDEC Semiconductor Memory Standard. It is a rival medium to Rambus's XDR DRAM. GDDR4 is based on DDR3 SDRAM technology and was intended to replace the DDR2-based GDDR3, but it ended up being replaced by GDDR5 within a year.|$|R
40|$|Work {{discusses}} {{rendering of}} complex scenes and terrain. It's main {{task is to}} show the extensive scenery terrain that normally do not fit in the <b>graphic</b> <b>card</b> <b>memory.</b> It introduce the theory of terrain rendering including terrain level of detail algoritms. The paper presents the design and implementation of application that implements dynamic streaming of complex terrain...|$|R
40|$|This paper {{presents}} {{a method for}} view-dependent texture management into a large terrain 3 D visualization system. The proposed system can handle several collections of images, each one subdivided in tiles and stored in a database management system (DBMS). The main contribution of this work is a methodology for managing multi-resolution textures in multiple caching levels (database, main <b>memory</b> and <b>graphics</b> <b>card</b> <b>memory),</b> while making use of coherence between successive frames and combined with frustum culling to generate a visually relevant terrain 3 D scene using hardware with limited resources. 1...|$|R
50|$|Write-combining allows bus write {{transfers}} {{to be combined}} into a larger transfer before bursting them over the bus to allow more efficient writes to system resources like <b>graphics</b> <b>card</b> <b>memory.</b> This often increases the speed of image write operations by several times, {{at the cost of}} losing the simple sequential read/write semantics of normal memory. Additional bits which are provided on some computer architectures, such as AMD64, allow the shadowing of ROM contents in system memory (shadow ROM), and the configuration of memory-mapped I/O.|$|R
40|$|In {{this thesis}} {{we look at}} a {{performance}} bottleneck of running molecular dynamics code on GPGPU devices (specifically the CUDA platform), namely random memory access into global <b>graphics</b> <b>card</b> <b>memory.</b> We offer a solution that involves reordering memory blocks in order to enable more memory reads from the local cache (shared memory) instead of the global memory. For determining a memory block order that sufficiently increases performance a space-filling curve was used. Significant performance increases for higher filling fractions were observed with a molecular dynamics simulation that was written from scratch...|$|R
40|$|In {{this paper}} {{we present a}} method for {{rendering}} unprocessed point clouds using commodity hardware. A point cloud {{is a set of}} coordinates which are interpreted as points in space. No assumptions have to be made for the point clouds, and therefore the point clouds {{do not have to be}} preprocessed. The method includes view-frustum culling and a level-of-detail (LOD) algorithm which does not need any additional geometry to the original point cloud. It renders always faster than the simple usage of vertex buffer objects (VBOs). Data inside VBOs reside in <b>graphics</b> <b>card</b> <b>memory</b> and can therefore be accessed very fast by the GPU...|$|R
40|$|Captured and {{generated}} 3 D {{data can be}} so large that it creates a problem for today's computers since they do not fit into the main or <b>graphics</b> <b>card</b> <b>memory.</b> Therefore methods for handling and rendering the data must be developed. This thesis presents a way to pre-process and render out-of-core height map data for real time use. The pre-processing uses a mesh decimation API called Simplygon developed by Donya Labs to optimize the geometry. From the height map a normal map can also be created and used at render time to increase the visual quality. In addition to the 3 D data textures are also supported. To decrease the time to load an object the normal and texture maps can be compressed on the graphics card prior to rendering. Three different methods for covering gaps are explored of which one {{turns out to be}} insufficient for rendering cylindrical equidistant projected data. At render time two threads work in parallel. One thread is used to page the data from the hard drive to the main and <b>graphics</b> <b>card</b> <b>memory.</b> The other thread is responsible for rendering all data. To handle precision errors caused by spatial difference in the data each object receives a local origin and is then rendered relative to the camera. An atmosphere which handles views from both space and ground is computed on the graphics card. The result is an application adapted to current graphics card technology which can page out-of-core data and render a dataset covering the entire earth at 500 meters spatial resolution with a realistic atmosphere...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedAs the industrialized {{nations of the}} world move further into the Information Age, the storage and distribution of information becomes increasingly more {{critical to the success of}} our daily endeavors. No where is this more apparent than in the military community. As the amount of information each military unit must have to function efficiently and effectively increases, so does the space required to store it. This situation has prompted at least one high-level Navy official to initiate a program to test the concept of a "paperless ship" by 1990. At the head of the list of systems to meet the mass storage requirements of the program are the optical memory technologies. Included under this heading are the optical <b>memory</b> <b>cards.</b> An optical <b>memory</b> <b>card</b> is the size of a standard 54 mm x 85 mm wallet card and, in one particular configuration, is capable of storing 800 pages of text alone or 200 pages of combined text and <b>graphics.</b> Employing optical <b>memory</b> <b>card</b> technology in the "paperless ship" will reduce the space required to store technical manuals and directives by a factor of over 200 ! Two applications; A Technical Document Publishing, Distributing and Update Program; and An Individual Personnel Record Storage and Update Program are discussed as potentially beneficial to the military community. [URL] United States Naval Reserv...|$|R
40|$|During {{the recent}} years, {{computer}} performance has increased dramatically. To measure {{the performance of}} computers, benchmarks are ideal tools. Benchmarks exist in many areas and point to different applications. For instance, in a normal PC, benchmarks {{can be used to}} test the performance of the whole system which includes the CPU, <b>graphic</b> <b>card,</b> <b>memory</b> system, etc. For multiprocessor systems, there also exist open source benchmark programs. In our project, we gathered information about some open benchmark programs and investigated their applicability for evaluating embedded multiprocessor systems intended for radar signal processing. During our investigation, parallel cluster systems and embedded multiprocessor systems were studied. Two benchmark programs, HPL and NAS Parallel Benchmark were identified as particularly relevant for the application field. The benchmark testing was done on a parallel cluster system which has an architecture that is similar to the architecture of embedded multiprocessor systems, used for radar signal processing...|$|R
5000|$|A two-story-high {{model of}} a {{personal}} computer, simulated to be working interactively. The purpose of the exhibit was to show the anatomy of a computer and {{to explain how the}} various parts work and communicate with each other. Before entering the computer's chassis, visitors could roll a giant trackball to play [...] "World Traveller" [...] on the giant screen. Wall-sized graphics by David Macaulay and interactive exhibits explained how all kinds of information, from text, graphics, video, music, as well as computer programs can be represented as 1's and 0's. Inside the giant chassis, visitors walked between a wall-sized <b>graphics</b> <b>card</b> and <b>memory</b> <b>card</b> to the microprocessor, upon which a projected electron microscope imagery of a CPU's circuits in operation appeared. Further on, a RAM set of modules plugged into the motherboard included reveals showing electron microsope imagery of memory circuits, Peering into a mini-van sized hard drive, visitors could see read/write heads position themselves on either side of rotating platters. Richard Fowler was recruited from The Science Museum, London/Bradford, as exhibit designer. The exhibit garnered international publicity and more than doubled visitor traffic to the museum.|$|R
40|$|Volumes {{acquired}} {{for medical}} purposes are continuously increasing in size, faster than <b>graphic</b> <b>cards</b> <b>memory</b> capacity. Large volumetric datasets {{do not fit}} into GPU memory and therefore direct rendering is not possible. Even large volumes that still fit into GPU memory make frame rates decay. In {{order to reduce the}} size of large volumetric models, we present a new compression scheme. In this paper we present S 3 Dc, a lossy volume compression algorithm suitable for scalar values. It is inspired in hardware-accelerated 3 Dc normal compression technique. S 3 Dc allows us to compress the volume in CPU up to a 4 : 1 or 8 : 1 ratio, while still yielding good quality results. We provide details on the compression scheme and show how to render directly from a S 3 Dc compressed texture. Furthermore, we analyze the image quality theoretical error and the average error with several images in order to assess the results. Postprint (published version...|$|R
40|$|Textures on the GPU In {{the area}} of {{computer}} graphics, texture mapping {{is often used to}} enhance the appearance of rendered objects. To fit more data into the <b>graphics</b> <b>cards</b> <b>memory,</b> and to speed up rendering, it is common to compress the images used for texture mapping. The process of compressing an image, with currently available tools, takes several seconds. This makes it impossible to use the benefits of compressed textures if the textures are somehow dynamically generated by the application for immediate use (e. g. dynamic environment maps or hardware accelerated window managers). This thesis presents a method that makes it possible to very rapidly compress textures to the S 3 TC format. This is achieved by simplifying an available compression algorithm with speed in mind, and then adapting this simplified algorithm {{to take advantage of the}} incredible computational power of modern GPUs. The result is a compressor that compresses textures hundreds of times faster than available tool...|$|R
2500|$|The GameCube {{features}} two <b>memory</b> <b>card</b> ports {{for saving}} game data. Nintendo released three official <b>memory</b> <b>card</b> options: <b>Memory</b> <b>Card</b> 59 in gray (512KB), <b>Memory</b> <b>Card</b> 251 in black (2MB), and <b>Memory</b> <b>Card</b> 1019 in white (8MB). (Though often advertised in Megabits, as 4Mb, 16Mb, and 64Mb respectively.) A few games {{were known to}} have compatibility issues with the <b>Memory</b> <b>Card</b> 1019, {{and at least two}} games have save issues with any size. [...] <b>Memory</b> <b>cards</b> with larger capacities were released by third-party manufacturers.|$|R
5000|$|The Performance <b>Memory</b> <b>Card</b> was a {{third-party}} basic <b>memory</b> <b>card</b> {{with the same}} 200 blocks of storage as a VMU. The Performance Mega <b>Memory</b> <b>Card</b> acted like a 4X <b>Memory</b> <b>Card.</b> It used a switch on its back to select the desired <b>memory</b> <b>card</b> [...] "page". Unlike other <b>memory</b> <b>cards</b> however, the Performance model {{had to be removed}} from the controller before the [...] "page" [...] could be switched.|$|R
5000|$|The GameCube {{features}} two <b>memory</b> <b>card</b> ports {{for saving}} game data. Nintendo released three official <b>memory</b> <b>card</b> options: <b>Memory</b> <b>Card</b> 59 in gray (512 KiB), <b>Memory</b> <b>Card</b> 251 in black (2 MiB), and <b>Memory</b> <b>Card</b> 1019 in white (8 MiB). (Though often advertised in Megabits, as 4 Mb, 16 Mb, and 64 Mb respectively.) A few games {{were known to}} have compatibility issues with the <b>Memory</b> <b>Card</b> 1019, {{and at least two}} games have save issues with any size. [...] <b>Memory</b> <b>cards</b> with larger capacities were released by third-party manufacturers.|$|R
50|$|The SD Association sets {{industry}} {{standards for}} SD <b>memory</b> <b>cards</b> {{that define the}} next generation of <b>memory</b> <b>cards</b> that allow product-makers to develop new products. This strategy has made the SD <b>memory</b> <b>card</b> the most widely used removable <b>memory</b> <b>card</b> form factor in the industry.|$|R
40|$|The {{purpose of}} this work was to obtain a componentwise {{breakdown}} of the power consumption a modern laptop. We measured the power usage of the key components in an IBM ThinkPad R 40 laptop using an Agilent Oscilloscope and current probes. We obtained the power consumption for the CPU, optical drive, hard disk, display, <b>graphics</b> <b>card,</b> <b>memory,</b> and wireless <b>card</b> subsystems [...] either through direct measurement or subtractive measurement and calculation. Moreover, we measured the power consumption of each component {{for a variety of}} workloads. We found that total system power consumption varies a lot (8 W to 30 W) depending on the workload, and moreover that the distribution of power consumption among the components varies even more widely. We also found that though power saving techniques such as DVS can reduce CPU power considerably, the total system power is still dominated by CPU power in the case of CPU intensive workloads. The display is the other main source of power consumption in a laptop; it dominates when the CPU is idle. We also found that reducing the backlight brightness can reduce the system power significantly, more than any other display power saving techniques. Finally, we observed OS differences in the power consumption...|$|R
50|$|Recently, {{electronic}} {{devices such as}} digital cameras, MP3 players, cellular phones, etc., are required with larger capacity of storage to store data. A <b>memory</b> <b>card,</b> such as a Micro SD card, a MMC card, etc., which has larger capacity of storage and a small size, is extensively used to expend the capacity of storage of the {{electronic devices}}. The data transmission between the electronic device and the <b>memory</b> <b>card</b> is through a <b>memory</b> <b>card</b> connector mounted on a PCB of the electronic device for connecting with the <b>memory</b> <b>card.</b> The <b>memory</b> <b>card</b> connector has an insulating housing; the insulating housing includes a receiving cavity for receiving the <b>memory</b> <b>card</b> and a plurality of grooves for respectively receiving a plurality of terminals. One end of the terminal forms a soldering portion for being soldered to the PCB and {{the other end of}} each terminal forms a connecting portion for mating with the <b>memory</b> <b>card.</b> A metallic cover couples with the insulating housing. The <b>memory</b> <b>card</b> is inserted and held in the receiving cavity of the <b>memory</b> <b>card</b> connector for being used in storing various data and taken by the electronic device as a recording medium. If not in use, the inserted <b>memory</b> <b>card</b> can be pulled out from the receiving cavity of the <b>memory</b> <b>card</b> connector.|$|R
30|$|Each {{component}} of the BVA algorithm, Table  1, can be made more efficient using parallelization methods. The first step requiring breadth first search can be parallelized using shared or distributed memory, following the works [25], [26], where the number of edges visited is significantly reduced. Another approach to BFS is [27] that utilizes the Nvidia GPUs, but the authors note the memory restrictions for large graphs that take up more than the <b>graphics</b> <b>card</b> <b>memory</b> of around 1  GB. When the number of nodes goes beyond a few million nodes and {{tens of millions of}} edges, memory becomes a concern and the method of [28] shows that the step of acquiring the set of connected components can be performed in log space. The community detection component can also be parallelized by using the method of [29] resulting in a completely parallelizable algorithm. The last steps of the algorithm can naturally be parallelized by running the i.i.d. random walkers on separate processors at the same time. After they have completed their walks the trajectories can then be monitored for convergence.|$|R
50|$|Sideloading via a <b>memory</b> <b>card</b> {{requires}} that the user {{have access to a}} <b>memory</b> <b>card</b> writer. Audio and video files can be written directly to the <b>memory</b> <b>card</b> and then inserted into the mobile device.|$|R
5000|$|<b>Memory</b> <b>card</b> lock - Early {{releases}} of firmware {{do not allow}} installing applications to <b>memory</b> <b>card,</b> and stops <b>memory</b> <b>cards</b> from going over 1 GB, but [...] "NOPEX" [...] 3rd party application fixes this issue.|$|R
5000|$|... 256 MB microSD (HC) <b>memory</b> <b>card</b> {{included}} as standard by Nokia, officially expandable up to 4 GB microSD(HC) <b>memory</b> <b>card</b> {{and as of}} 2012 tested supporting up to 32 GB microSD (HC) <b>memory</b> <b>card</b> (unofficial) ...|$|R
25|$|Game {{progress}} can {{be saved}} on virtual GameCube <b>Memory</b> <b>Cards,</b> emulated Wii flash memory, and save states. Dolphin features a <b>Memory</b> <b>Card</b> Manager which allows transfer of save files to and from virtual GameCube <b>memory</b> <b>cards.</b>|$|R
50|$|There {{are various}} {{complaints}} pointing that certain brands of 512 MB <b>memory</b> <b>cards</b> can cause conflicts and corrupted data {{in both the}} phone and the <b>memory</b> <b>card,</b> so {{it is best to}} avoid that <b>memory</b> <b>card</b> size.|$|R
25|$|Some drives offer {{expandable}} storage via {{an internal}} <b>memory</b> <b>card</b> slot, {{much like a}} <b>memory</b> <b>card</b> reader.|$|R
50|$|The <b>Memory</b> <b>Card</b> (8 MB) (SCPH-10020) Magic Gate is used {{to store}} settings, EyeToy video {{messages}} and savegames. Official Sony <b>memory</b> <b>cards</b> are only available at a size of 8 MB, the <b>memory</b> <b>card</b> came in black, crimson red, and ocean blue.|$|R
5000|$|<b>Memory</b> <b>card</b> slot for {{optional}} MicroSD <b>memory</b> <b>card</b> up to 2GB (2 GB {{only with}} the latest firmware) ...|$|R
50|$|SxS (S-by-S) <b>memory</b> <b>card,</b> a new <b>memory</b> <b>card</b> {{specification}} {{developed by}} Sandisk and Sony. SxS complies to the ExpressCard industry standard.|$|R
40|$|The use of <b>memory</b> <b>cards</b> {{is widely}} used in {{numerous}} electronic devices including tablet computers, cameras, mobile phones and multimedia devices. Like a USB drive, <b>memory</b> <b>cards</b> are an inexpensive and portable persistent storage solution. Numerous manufactures are incorporating a <b>memory</b> <b>card</b> interface into their product, allowing for a large array of confidential data to be stored. This research aimed to determine the sensitivity, type and amount of data that remained on second hand <b>memory</b> <b>cards</b> post sale. In 2011, over an eight month period, 119 second hand <b>memory</b> <b>cards</b> were randomly purchased from eBay Australia. The findings from the research show that individuals utilise <b>memory</b> <b>cards</b> to store highly sensitive and confidential data, and as per similar previous studies, continually neglect to permanently destroy the data prior to sale...|$|R
50|$|XQD <b>card</b> is a <b>memory</b> <b>card</b> format {{primarily}} {{developed for}} flash <b>memory</b> <b>cards.</b> It uses PCI Express as a data transfer interface.|$|R
50|$|Dmailer {{specialized}} in portable backup and synchronization software {{for a range}} of mobile devices, including USB flash drives, <b>memory</b> <b>cards,</b> external hard disk drives, MP3 players, embedded phone <b>memories,</b> SIM <b>cards</b> and flash-based <b>memory</b> <b>cards</b> for mobile phones.|$|R
5000|$|The watch has a MicroSD slot {{for storage}} expansion, but opening it {{to use the}} <b>memory</b> <b>card</b> slot voids the warranty. Even the {{versions}} ordered with a <b>memory</b> <b>card</b> are shipped with the <b>memory</b> <b>card</b> not preinstalled, forcing users to open their device and thus void the warranty by breaking seal stickers.|$|R
5000|$|<b>Memory</b> card: <b>Memory</b> <b>cards</b> are flash <b>memory</b> {{storage media}} used to store digital {{information}} in many electronics products. The types of <b>memory</b> <b>cards</b> include CompactFlash, PCMCIA, secure digital <b>card,</b> multimedia <b>card,</b> <b>memory</b> stick etc.|$|R
