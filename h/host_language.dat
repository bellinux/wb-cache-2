470|418|Public
5|$|While parody {{sometimes}} {{served as}} {{a special kind of}} translation, some translations returned the compliment by providing a parodic version of the Elegy in their endeavour to accord to the current poetic style in the <b>host</b> <b>language.</b> An extreme example was provided by the classicised French imitation by the Latin scholar John Roberts in 1875. In place of the plain English of Gray’s “And all that beauty, all that wealth e’er gave”, he substituted the Parnassian Tous les dons de Plutus, tous les dons de Cythère (All the gifts of Plutus and of Cytherea) and kept this up throughout the poem in a performance that its English reviewer noted as bearing only the thinnest relation to the original.|$|E
5000|$|The {{concrete}} syntax of CHR programs {{depends on the}} <b>host</b> <b>language,</b> and in fact programs embed statements in the <b>host</b> <b>language</b> that are executed to handle some rules. The <b>host</b> <b>language</b> supplies a data structure for representing terms, including logical variables. Terms represent constraints, which {{can be thought of}} as [...] "facts" [...] about the program's problem domain. Traditionally, Prolog is used as the <b>host</b> <b>language,</b> so its data structures and variables are used. The rest of this section uses a neutral, mathematical notation that is common in the CHR literature.|$|E
5000|$|The <b>host</b> <b>language</b> {{must also}} define {{built-in}} constraints over terms. The guards in rules are built-in constraints, so they effectively execute <b>host</b> <b>language</b> code. The built-in constraint theory must {{include at least}} [...] (the constraint that always holds), [...] (the constraint that never holds, and is used to signal failure) and equality of terms, i.e., unification. When the <b>host</b> <b>language</b> does not support these features, they must be implemented along with CHR.|$|E
30|$|<b>Hosting</b> <b>language</b> and {{education}} conferences.|$|R
50|$|Alliance Francaise is an {{international}} organization that aims to promote French language and culture around the world. Alliance Francaise, Trivandrum established in the early 1980s, <b>hosts</b> <b>language</b> classes, cultural exchange programs, film festivals and other cultural events.|$|R
30|$|Using {{a library}} in the {{application}} code that adds parallelism to the data analysis application. Currently {{this is the most}} used approach since it is orthogonal to <b>host</b> <b>languages.</b> MPI and MapReduce are two well-known examples of this approach.|$|R
50|$|The SQL {{standards}} committee defined the embedded SQL standard in two steps: a formalism called Module Language was defined, then the embedded SQL standard {{was derived from}} Module Language. The SQL standard defines embedding of SQL as embedded SQL and the language in which SQL queries are embedded {{is referred to as}} the <b>host</b> <b>language.</b> A popular <b>host</b> <b>language</b> is C. <b>Host</b> <b>language</b> C and embedded SQL, for example, is called Pro*C in Oracle and Sybase database management systems and ECPG in the PostgreSQL database management system.We can also embed SQL in PHP.|$|E
5000|$|An {{important}} design {{dimension in}} the implementation of a self-interpreter is whether a feature of the interpreted language is implemented with the same feature in the interpreter's <b>host</b> <b>language.</b> An example is whether a closure in a Lisp-like language is implemented using closures in the interpreter language or implemented [...] "manually" [...] with a data structure explicitly storing the environment. The more features implemented by the same feature in the <b>host</b> <b>language,</b> the less control the programmer of the interpreter has; a different behavior for dealing with number overflows cannot be realized if the arithmetic operations are delegated to corresponding operations in the <b>host</b> <b>language.</b>|$|E
5000|$|Any format changes {{required}} {{between the}} <b>host</b> <b>language</b> and the database {{are carried out}} transparently.|$|E
50|$|Cheboksary <b>hosted</b> a <b>language</b> {{festival in}} 1996.|$|R
50|$|In the 1930s {{the school}} <b>hosted</b> German <b>language</b> classes for adults.|$|R
5000|$|Note (1): Both {{function}} and procedure refer to internal routines written in SQL and/or procedural language like PL/SQL. External routine {{refers to the}} one written in the <b>host</b> <b>languages,</b> such as C, Java, Cobol, etc. [...] "Stored procedure" [...] is a commonly used term for these routine types. However, its definition varies between different database vendors.|$|R
5000|$|The query {{language}} is fully {{integrated with the}} <b>host</b> <b>language</b> and both share the same type system.|$|E
50|$|Many FFIs {{also provide}} {{the means for}} the called {{language}} to invoke services in the <b>host</b> <b>language</b> as well.|$|E
50|$|Although CHR is Turing complete, {{it is not}} {{commonly}} used as a programming language in its own right. Rather, {{it is used to}} extend a <b>host</b> <b>language</b> with constraints. Prolog {{is by far the most}} popular <b>host</b> <b>language</b> and CHR is included in several Prolog implementations, including SICStus and SWI-Prolog, although CHR implementations also exist for Haskell, Java, C, SQL, and JavaScript. In contrast to Prolog, CHR rules are multi-headed and are executed in a committed-choice manner using a forward chaining algorithm.|$|E
5000|$|... {{immersion}} {{experience with}} Chinese students which included <b>host</b> students, <b>language</b> tutors, roommates and home-stay opportunities, ...|$|R
50|$|He {{travelled}} {{more than}} 200,000 miles, an incredible achievement for pre-aviation times. His language abilities {{allowed him to}} preach in English, French, and German, and his sermons were translated into the <b>host</b> <b>languages</b> when {{he was unable to}} use the three languages which he spoke. In 1892, he returned to England, where he died on 10 March 1898 in New Orphan House No 3.|$|R
50|$|Uni Bastions <b>hosts</b> the <b>language</b> {{libraries}}, {{as well as}} the universitys libraries {{focused on}} history and musicology.|$|R
5000|$|Execution of a CHR program {{starts with}} an initial {{constraint}} store. The program then proceeds by matching rules against the store and applying them, until either no more rules match (success) or the [...] constraint is derived. In the former case, the constraint store can be read off by a <b>host</b> <b>language</b> program to look for facts of interest. Matching is defined as [...] "one-way unification": it binds variables only {{on one side of}} the equation. Pattern matching can be easily implemented when as unification when the <b>host</b> <b>language</b> supports it.|$|E
5000|$|Restricting {{the set of}} <b>host</b> <b>language</b> {{capabilities}} {{which can}} be used cross-language. For example, C++ functions called from C may not (in general) include reference parameters or throw exceptions.|$|E
5000|$|Where the <b>host</b> <b>language</b> {{and data}} {{manipulation}} language have different type systems, code conversion operates outside of the OO type system, and hence has a higher chance of having undetected errors.|$|E
40|$|Domain-specific {{languages}} (DSLs) {{are useful}} tools {{for coping with}} complexity in software development. DSLs provide developers with appropriate constructs for specifying and solving the problems they are faced with. While the exact definition of DSLs can vary, they can roughly {{be divided into two}} categories: embedded and non-embedded. Embedded DSLs (E-DSLs) are integrated into general-purpose <b>host</b> <b>languages</b> (e. g. Java), while non-embedded DSLs (NE-DSLs) are standalone languages with their own tooling (e. g. compilers or interpreters). NE-DSLs can for example be found on the Semantic Web where they are used for querying or describing shared domain models (ontologies). A common theme with DSLs is naturally their support of focused expressive power. However, in many cases they do not support non–domain-specific component-oriented constructs that can be useful for developers. Such constructs are standard in general-purpose languages (procedures, methods, packages, libraries etc.). While E-DSLs have access to such constructs via their <b>host</b> <b>languages,</b> NE-DSLs do not have this opportunity. Instead, to support such notions, each of these languages have to be extended and their tooling updated accordingly. Such modifications can be costl...|$|R
40|$|Despite {{a plethora}} of {{research}} on various antecedents of expatriate cross-cultural adjustment and effectiveness, relatively little is known how expatriate <b>host</b> country <b>language</b> proficiency affects cross-cultural adjustment. Drawing on 74 in-depth interviews with expatriates and their host country national (HCN) colleagues, we conducted an inductive study to provide a contextual account of expatriate <b>host</b> country <b>language</b> proficiency effects on work and non-work related adjustment in China. Our findings suggest that expatriate <b>host</b> country <b>language</b> proficiency has complex HCN interaction, social support, and network-related effects on work and non-work related adjustment. By demonstrating the multifaceted effects of language on work and non-work related adjustment, our inductive approach shifts the focus from previous predetermined general, work, and interaction adjustment facets to dimensions reported by expatriates and their HCN colleagues...|$|R
40|$|This paper briefly {{introduces}} the current work on multiparadigm programming languages at Berlin University of Technology. Starting from a general approach for the {{cooperation and coordination}} of constraint solvers and its implementation Meta-S, we briefly discuss how to integrate different <b>host</b> <b>languages</b> into the framework building at this multiparadigm constraint languages. Further current research directions concern the functional logic language Brooks which allows the program compilation according to different narrowing strategies and the constraint imperative language Turtle...|$|R
5000|$|Standard {{libraries}} typically include definitions for {{commonly used}} algorithms, data structures, and mechanisms for input and output. Depending on the constructs made {{available by the}} <b>host</b> <b>language,</b> a standard library may include: ...|$|E
50|$|Embedded SQL is a {{technique}} that simplifies the development of C/C++ and COBOL Firebird applications, by using a preprocessor called gpre, which allows the embedding of SQL statements directly into the source code of the <b>host</b> <b>language.</b>|$|E
50|$|Many domain-specific {{languages}} {{can be used}} in {{more than}} one way. DSL code embedded in a <b>host</b> <b>language</b> may have special syntax support, such as regexes in sed, AWK, Perl or JavaScript, or may be passed as strings.|$|E
40|$|Dynamic {{languages}} such as Perl, Python, JavaScript, Ruby, and PHP {{are becoming}} increasingly popular. Many dynamic language implementers choose a layered approach, where a guest language runs on a host virtual machine (VM), while implementing their language. Implementers have two possible execution choices on a host VM: hosted interpreters and host VM targeted compilers. Hosted interpreters run as a regular application on a host VM, whereas, host VM targeted compilers translate the <b>hosted</b> <b>language</b> programs to <b>host</b> VM's instruction set, and execute it on the host VM. Hosted interpreters are comparatively simpler to implement but suffer from poor performance. On the other hand, host VM targeted compilers are complex to build but lead to better performance. In this dissertation, we explore <b>hosted</b> dynamic <b>language</b> interpreters targeting the Java virtual machine (JVM). The purpose of our research is to close the performance gap between hosted interpreters and host VM targeted compilers. Next, we implement a generic, high-performance profiler framework for <b>hosted</b> dynamic <b>languages</b> on a Java virtual machine with modest implementation effort. Our framework has a unique feature, which {{makes it possible to}} compare and analyze the programs implementing the same algorithms across different dynamic languages...|$|R
25|$|Recently a new {{building}} has been built the west water building in 2016. This building <b>hosts</b> the <b>Languages</b> department and 2 Economics classrooms.|$|R
50|$|Goethe Zentrum - Trivandrum's {{relation}} with Germany {{goes back to}} Basel missionary Hermann Gundert, who in a pivotal meeting with the Travancore Maharajah decided to stay back in Kerala. He wrote the first formal dictionary of sorts of Malayalam thus playing {{a pivotal role in}} the state's education and language. His influence on his grandson Hermann Hesse, the nobel laureate, was evident in the latter's writings. Goethe Zentrum <b>hosts</b> <b>language</b> classes, European and Swiss cultural exchange programs and film festivals.|$|R
5000|$|While many classically derived {{loan words}} become useful new {{terms in the}} <b>host</b> <b>language,</b> some more mannered or polysyllabic aureations may tend to remain {{experimental}} and decorative curiosities. Words such as conservartix, pawsacioun, or vinarye envermaildy are examples in Scots.|$|E
50|$|Makefiles, for example, specify {{dependencies}} in a declarative fashion, but {{include an}} imperative list of actions {{to take as}} well. Similarly, yacc specifies a context free grammar declaratively, but includes code snippets from a <b>host</b> <b>language,</b> which is usually imperative (such as C).|$|E
5000|$|Quipper was {{published}} in 2013. It is implemented as an embedded language, using Haskell as the <b>host</b> <b>language.</b> For this reason, quantum programs written in Quipper are written in Haskell using provided libraries. For example, the following code implements preparation of a superposition ...|$|E
40|$|We {{describe}} a complete Scheme implementation of miniAdapton, which implements the core functionality of the Adapton system for incremental computation (also known as self-adjusting computation). Like Adapton, miniAdapton allows programmers to safely combine mutation and memoization. miniAdapton {{is built on}} top of an even simpler system, microAdapton. Both miniAdapton and microAdapton are designed to be easy to understand, extend, and port to <b>host</b> <b>languages</b> other than Scheme. We also present adapton variables, a new interface in Adapton for variables intended to represent expressions...|$|R
30|$|The {{effect of}} skill in the <b>host</b> country's <b>language</b> is {{significant}} and unambiguous. <b>Host</b> country's <b>language</b> proficiency (e.g. English) reflects the immigrant's {{integration into the}} general community. However, the effect of English-language skills in relation to self-employment is ambiguous, and it may vary by country, data, and cohort. On the one hand, a lack of skill in the <b>host</b> country's <b>language</b> will hinder business communication with the native mainstream economy (e.g. Le [2000]). On the other hand, a lack of English proficiency can increase the propensity for self-employment by satisfying the demand from other immigrants from the same ethnic group (e.g. Evans [1989]). In addition, a third {{point of view is}} based on Disadvantage Theory (Light [1979]): communication disadvantages make it difficult for immigrants to be employed in the wage sector; however, the same disadvantages encourage them to be self-employed.|$|R
40|$|Domain speci c {{languages}} (DSL) are languages {{designed for}} one particular area. Their syntax and basic primitives are carefully chosen to t {{the class of}} problems they are meant to solve. Because of this specialisation, programs written using DSL are usually more concise and coherent than their counterparts written in common programming languages. There is a very e ective way to implement DSL { to de ne them inside a fulledged language. This leads to so called domain speci c embedded languages (DSEL). Purpose of this thesis is to investigate techniques used in implementation of DSEL and to analyse connection between features of <b>host</b> and embedded <b>language.</b> We focus on statically typed functional <b>languages</b> as <b>host</b> <b>languages.</b> We have choosen Haskell as an implementation language...|$|R
