1380|7000|Public
25|$|The School of Technology and Computer Science {{grew out}} of early {{activities}} carried out at TIFR for building digital computers. Today, its activities cover areas such as Algorithms, Complexity Theory, <b>Formal</b> <b>Method,</b> Applied Probability, Mathematical Finance, Information Theory, Communications, etc.|$|E
25|$|In addition, daily worship reminds Muslims to {{give thanks}} for God's blessings and that {{submission}} to God takes precedence over all other concerns, thereby revolving their life around God and submitting to His will. Worship {{also serves as a}} <b>formal</b> <b>method</b> of dhikr or remembering Allah.|$|E
25|$|In mid-October 1916, {{another attempt}} was made to arm a Halberstadt D.II with rockets, this time for {{observation}} balloon attacks with a more <b>formal</b> <b>method,</b> using eight Le Prieur-like rockets mounted on the outer wing struts, the way that the French Nieuport 11 had been armed nearly a year earlier. Problems with the ignition system on the rockets prevented the system from being experimented with any further.|$|E
40|$|In 1990, Anthony Hall {{published}} a seminal article that listed and dispelled seven myths {{about the nature}} and application of <b>formal</b> <b>methods.</b> Today - five years and many successful applications later - <b>formal</b> <b>methods</b> remain one of the most contentious areas of software-engineering practice. Despite 25 years of use, few people understand exactly what <b>formal</b> <b>methods</b> are or how they are applied. Many nonformalists seem to believe that <b>formal</b> <b>methods</b> are merely an academic exercise [...] a form of mental masturbation that has no relation to real-world problems. The media's portrayal of <b>formal</b> <b>methods</b> does little to help the situation. In many "popular press" science journals, <b>formal</b> <b>methods</b> are subjected to either deep criticism or, worse, extreme hyperbole. Fortunately, today these myths are held more by the public and the computer-science community at large than by system developers. It is our concern, however, that new myths are being propagated, and more alarmingly, are receiving a certain tacit acceptance from the system-development community. Following Hall's lead, we address and dispel seven new myths about <b>formal</b> methods: <b>Formal</b> <b>methods</b> delay the development process; <b>formal</b> <b>methods</b> lack tools; <b>formal</b> <b>methods</b> replace traditional engineering design methods; <b>formal</b> <b>methods</b> only apply to software; <b>formal</b> <b>methods</b> are unnecessary; <b>formal</b> <b>methods</b> are not supported; and formal-methods people always use <b>formal</b> <b>methods.</b> ...|$|R
40|$|Abstract. The {{main current}} trend in applied <b>formal</b> <b>methods</b> can be {{characterized}} by the term &quot;. Historically, <b>formal</b> <b>methods</b> have been viewed as pure alternatives to traditional development methodologies, demanding a revolutionary change in industry to adopt them. With a pragmatic, lightweight approach, the use of <b>formal</b> <b>methods</b> is complementing and improving existing development practices in a company inanevolutionary way, demonstrating more clearly the coste ectiveness of <b>formal</b> <b>methods.</b> This paper presents our view on lightweight <b>formal</b> <b>methods</b> as a strategy for successful <b>formal</b> <b>methods</b> technology transfer to industry. ...|$|R
40|$|<b>Formal</b> <b>methods</b> can {{be applied}} to many of the {{development}} and verification activities required for civil avionics software. RTCA/DO- 178 B, Software Considerations in Airborne Systems and Equipment Certification, gives a brief description of using <b>formal</b> <b>methods</b> as an alternate method of compliance with the objectives of that standard. Despite this, the avionics industry at large has been hesitant to adopt <b>formal</b> <b>methods,</b> with few developers have actually used <b>formal</b> <b>methods</b> for certification credit. Why is this so, given the volume of evidence of the benefits of <b>formal</b> <b>methods?</b> This presentation will explore some of the challenges to using <b>formal</b> <b>methods</b> in a certification context and describe the effort by the <b>Formal</b> <b>Methods</b> Subgroup of RTCA SC- 205 /EUROCAE WG- 71 to develop guidance to make the use of <b>formal</b> <b>methods</b> a recognized approach...|$|R
25|$|In January 2012, the MTA {{selected}} Thales for a $343 {{million contract}} {{to set up}} a communications-based train control (CBTC) system as part of the plan to automate the line. This was the second installation of CBTC, following a successful implementation on the BMT Canarsie Line. The total cost was $550 million for the signals and other trackside infrastructure, and $613.7 million for CBTC-compliant rolling stock. The safety assessment at system level was performed using the <b>formal</b> <b>method</b> Event-B.|$|E
25|$|Formol titration, {{invented by}} the Danish chemist S. P. L. Sørensen in 1907, {{utilizes}} formaldehyde {{in the presence}} of potassium or sodium hydroxide to measure amino acid concentration and ammonia {{with the aid of a}} pH meter. The reagents will also react with proline which can give a slightly higher YAN measurement than NOPA. The <b>Formal</b> <b>method</b> also has the disadvantages of involving the use and disposal of formaldehyde which is a known carcinogen and the highly toxic reagent barium chloride.|$|E
25|$|Some {{hold the}} view that {{informal}} logic is not a branch or subdiscipline of logic, or even {{the view that}} there cannot be {{such a thing as}} informal logic. Massey criticizes informal logic {{on the grounds that it}} has no theory underpinning it. Informal logic, he says, requires detailed classification schemes to organize it, which in other disciplines is provided by the underlying theory. He maintains that there is no method of establishing the invalidity of an argument aside from the <b>formal</b> <b>method,</b> and that the study of fallacies may be of more interest to other disciplines, like psychology, than to philosophy and logic.|$|E
40|$|The {{main current}} trend in applied <b>formal</b> <b>methods</b> can be {{characterized}} by the term "lightweight". Historically, <b>formal</b> <b>methods</b> have been viewed as pure alternatives to traditional development methodologies, demanding a revolutionary change in industry to adopt them. With a pragmatic, lightweight approach, the use of <b>formal</b> <b>methods</b> is complementing and improving existing development practices in a company in an evolutionary way, demonstrating more clearly the costeffectiveness of <b>formal</b> <b>methods.</b> This paper presents our view on lightweight <b>formal</b> <b>methods</b> as a strategy for successful <b>formal</b> <b>methods</b> technology transfer to industry. 1 Introduction Initially <b>formal</b> <b>methods</b> were promoted aggressively by idealistic academics. <b>Formal</b> <b>methods</b> were seen as {{the solution to the}} "software crisis" and implied the uncompromising use of mathematics and rigor for the whole development life cycle where entire software systems were developed from scratch. Hence, the development process should start with [...] ...|$|R
40|$|Based {{upon our}} {{survey of the}} literature, {{software}} product lines is a fertile research field {{for the application of}} <b>formal</b> <b>methods.</b> Most computer scientists and software practitioners, including software product lines researchers, are not exploiting the powerful tools and techniques available in modern <b>formal</b> <b>methods.</b> This paper (i) summarizes the core of modern applied <b>formal</b> <b>methods,</b> (ii) discusses software product lines from a <b>formal</b> <b>methods</b> point-of-view, (iii) surveys the application of <b>formal</b> <b>methods</b> to software product lines research, and, most importantly, (iv) highlights key research opportunities and challenges for joint work between <b>formal</b> <b>methods</b> and software product lines researchers...|$|R
40|$|IBM has a {{long history}} in the {{application}} of <b>formal</b> <b>methods</b> to software development and verification. There have been many successes in the development of methods, tools and training to support <b>formal</b> <b>methods.</b> And <b>formal</b> <b>methods</b> have been very successful on several projects. However, the use of <b>formal</b> <b>methods</b> has not been as widespread as hoped. This presentation summarizes several approaches that have been taken to encourage more widespread use of <b>formal</b> <b>methods,</b> and discusses the results so far. The basic problem is one of technology transfer, which is a very difficult problem. It is even more difficult for <b>formal</b> <b>methods.</b> General problems of technology transfer, especially the transfer of <b>formal</b> <b>methods</b> technology, are also discussed. Finally, some prospects for the future are mentioned...|$|R
25|$|Some of {{the works}} which bear the names of Bakhtin's close friends V. N. Vološinov and P. N. Medvedev have been {{attributed}} to Bakhtin – particularly Marxism and Philosophy of Language and The <b>Formal</b> <b>Method</b> in Literary Scholarship. These claims originated in the early 1970s and received their earliest full articulation in English in Clark and Holquist's 1984 biography of Bakhtin. In the years since then, however, most scholars have come to agree that Vološinov and Medvedev ought to be considered the true authors of these works. Although Bakhtin undoubtedly influenced these scholars and may even have had a hand in composing the works attributed to them, it now seems clear that if it was necessary to attribute authorship of these works to one person, Vološinov and Medvedev respectively should receive credit.|$|E
25|$|Ghulam Ahmad claimed divine {{appointment}} as a reformer {{as early as}} 1882 but did not take any pledge of allegiance or initiation. In December 1888, Ahmad announced that God had ordained that his followers should enter into a bay'ah with him and pledge their allegiance to him. In January 1889, he published a pamphlet in which he laid out ten conditions or issues to which the initiate would abide by {{for the rest of}} his life. On 23 March 1889, he founded the Ahmadiyya community by taking a pledge from forty followers. The <b>formal</b> <b>method</b> of joining the Ahmadiyya movement included joining hands and reciting a pledge, although physical contact was not always necessary. This method of allegiance continued {{for the rest of his}} life and after his death by his successors.|$|E
500|$|Harrison {{shared his}} enthusiasm {{with the other}} Beatles, and felt that, overall, his bandmates [...] "were growing very quickly {{and there were a}} lot of influences". While McCartney later {{admitted}} that he found Indian music [...] "boring", Lennon was intrigued by the genre's mystical qualities, although he possessed a disdain for any <b>formal</b> <b>method</b> or training. Lennon was simply intrigued with the sound of the sitar and was open to the possibilities that the instrument had to offer. Harrison introduced drummer Ringo Starr to the tabla, an Indian hand drum. Starr was completely mystified and refused to learn how to play it; Harrison recalled it was [...] "so far out to him".|$|E
40|$|The use of <b>formal</b> <b>methods</b> {{has become}} commonplace in {{hardware}} design, and {{is becoming increasingly}} widespread in software engineering. While <b>formal</b> <b>methods</b> have repeatedly been applied in safety-critical projects, their technologies and tools are not widely known, {{due to lack of}} in-depth education in current curricula. In this paper, we introduce the curriculum design of software model checking, which {{is part of a larger}} education program that addresses several issues in software engineering and <b>formal</b> <b>methods</b> in general. We will also touch upon the necessity of a <b>formal</b> <b>methods</b> body of knowledge (FMBOK) for the guidance of <b>formal</b> <b>methods</b> education. Keywords: <b>Formal</b> <b>methods,</b> education, software engineering, model checking, body of knowledge...|$|R
40|$|International audienceThere is {{a growing}} {{interest}} among agent and multiagent system developers for <b>formal</b> <b>methods.</b> <b>Formal</b> <b>methods</b> are means to define and realize correct specifications of multiagent system. The benefits of <b>formal</b> <b>methods</b> become clearer when we recognize the cost of developing a defective multiagent system. This paper seeks to introduce engineers to the possibilities of applying <b>formal</b> <b>methods</b> for multiagent systems. To this end, it discusses selected <b>formal</b> <b>methods</b> approaches for multiagent systems {{for which there is}} tool support. These works have been organized into two broad categories: those <b>formal</b> <b>methods</b> constituting a development method in themselves and those intended to complement an existing development method...|$|R
40|$|Abstract. The use of <b>formal</b> <b>methods</b> can {{significantly}} improve software quality. However, many instructors and students consider <b>formal</b> <b>methods</b> {{to be too}} difficult, impractical, and esoteric for use in undergraduate classes. This paper describes a method, used successfully at several universities, that combines ninja stealth with the latest advances in <b>formal</b> <b>methods</b> tools and technologies to integrate applied <b>formal</b> <b>methods</b> into software engineering courses. 1 Enter the Ninja Software development tools and techniques based on <b>formal</b> <b>methods</b> hold great promise for improving software quality. Unfortunately, many undergraduate computer science and software engineering curricula include no <b>formal</b> <b>methods</b> instruction beyond the introduction of basic concepts such as the assertion and the loop invariant. Moreover, even when <b>formal</b> <b>methods</b> concepts are introduced, they tend not to be used outside of toy examples. Many students and instructors, it seems, believe that the very words “formal methods ” imply writing equation...|$|R
2500|$|In {{positions}} {{with two or}} more bishops on the board, a [...] "bishop signature" [...] may be added to clarify {{the relationship between the}} bishops. [...] Two methods have been used. [...] The informal method is to designate one color of squares as [...] "x" [...] and the other color as [...] "y". [...] An endgame of KBPKB can be written KBPKB x-y if the bishops are opposite-colored, or KBPKB x-x if the bishops are same-colored. [...] The more <b>formal</b> <b>method</b> is to use a four digit suffix of the form abcd: ...|$|E
2500|$|The book's {{argument}} emphasized {{history as}} the [...] "ultimate horizon" [...] of literary and cultural analysis. It borrowed notions from the structuralist tradition and from Raymond Williams's work in cultural studies, and joined them to a largely Marxist view of labor (whether blue-collar or intellectual) as {{the focal point of}} analysis. Jameson's readings exploited both the explicit formal and thematic choices of the writer and the unconscious framework guiding these. Artistic choices that were ordinarily viewed in purely aesthetic terms were recast in terms of historical literary practices and norms, in an attempt to develop a systematic inventory of the constraints they imposed on the artist as an individual creative subject. To further this meta-commentary, Jameson described the ideologeme, or [...] "the smallest intelligible unit of the essentially antagonistic collective discourses of social classes", the smallest legible residue of the real-life, ongoing struggles occurring between social classes. (The term [...] "ideologeme" [...] was first used by Mikhail Bakhtin and Pavel Nikolaevich Medvedev in their work The <b>Formal</b> <b>Method</b> in Literary Scholarship and was later popularised by Julia Kristeva. Kristeva defined it as [...] "the intersection of a given textual arrangement ... with the utterances ... that it either assimilates into its own space or to which it refers in the space of exterior texts...".) ...|$|E
60|$|It was {{the first}} time that her benefactress had {{employed}} this <b>formal</b> <b>method</b> of communicating with her when they were both in the house. What did such a departure from established habits mean? Had she received her notice of dismissal? Had Lady Janet's quick intelligence found its way already to a suspicion of the truth? Mercy's nerves were unstrung. She trembled pitiably as she opened the folded note.|$|E
40|$|Abstract: <b>Formal</b> <b>methods</b> were {{developed}} to provide systematic and rigorous techniques for software development, {{and they must be}} taught in the context of software engineering. In this paper, we discuss the importance of such a teaching paradigm and describe several specific techniques for teaching <b>formal</b> <b>methods.</b> These techniques have been tested over the last fifteen years in our <b>formal</b> <b>methods</b> education programs for undergraduate and graduate students at universities as well as practitioners at companies. We also present a curriculum to systematically introduce <b>formal</b> <b>methods</b> to students at university and a successful program of teaching <b>formal</b> <b>methods</b> to industry. Our experience shows that students can gain confidence in <b>formal</b> <b>methods</b> only when they learn their clear benefits in the context of software engineering...|$|R
40|$|This paper {{discusses}} some of {{the challenges}} to using <b>formal</b> <b>methods</b> in a certification context and describes the effort by the <b>Formal</b> <b>Methods</b> Subgroup of RTCA SC- 205 /EUROCAE WG- 71 to propose guidance to make the use of <b>formal</b> <b>methods</b> a recognized approach. This guidance, expected to {{take the form of}} a <b>Formal</b> <b>Methods</b> Technical Supplement to DO- 178 C/ED- 12 C, is described, including the activities that are needed when using <b>formal</b> <b>methods,</b> new or modified objectives with respect to the core DO- 178 C/ED- 12 C document, and evidence needed for meeting those objectives...|$|R
40|$|<b>Formal</b> <b>methods</b> tools {{have been}} shown to be {{effective}} at finding defects in safety-critical digital systems including avionics systems. The publication of DO- 178 C and the accompanying <b>formal</b> <b>methods</b> supplement DO- 333 allows applicants to obtain certification credit for the use of <b>formal</b> <b>methods</b> without providing justification for them as an alternative method. This project conducted an extensive study of existing <b>formal</b> <b>methods</b> tools, identifying obstacles to their qualification and proposing mitigations for those obstacles. Further, it interprets the qualification guidance for existing <b>formal</b> <b>methods</b> tools and provides case study examples for open source tools. This project also investigates the feasibility of verifying <b>formal</b> <b>methods</b> tools by generating proof certificates which capture proof of the <b>formal</b> <b>methods</b> tool's claim, which can be checked by an independent, proof certificate checking tool. Finally, the project investigates the feasibility of qualifying this proof certificate checker, in the DO- 330 framework, in lieu of qualifying the model checker itself...|$|R
60|$|Solicitous chiefly for {{the peace}} of my own country, {{but by no means}} unconcerned for yours, I wish to {{communicate}} more largely what was at first intended only for your private satisfaction. I shall still keep your affairs in my eye, and continue to address myself to you. Indulging myself in the freedom of epistolary intercourse, I beg leave to throw out my thoughts and express my feelings just as they arise in my mind, with very little attention to <b>formal</b> <b>method.</b> I set out with the proceedings of the Revolution Society; but I shall not confine myself to them. Is it possible I should? It looks to me as if I were in a great crisis, not of the affairs of France alone, but of all Europe, perhaps of more than Europe. All circumstances taken together, the French Revolution is the most astonishing that has hitherto happened in the world. The most wonderful things are brought about in many instances by means the most absurd and ridiculous, in the most ridiculous modes, and apparently by the most contemptible instruments. Everything seems out of nature in this strange chaos of levity and ferocity, and of all sorts of crimes jumbled together with all sorts of follies. In viewing this monstrous tragi-comic scene, the most opposite passions necessarily succeed and sometimes mix with each other in the mind: alternate contempt and indignation, alternate laughter and tears, alternate scorn and horror.|$|E
5000|$|... #Subtitle level 3: <b>Formal</b> <b>method</b> {{support for}} aspect-orientation ...|$|E
5000|$|Essential factors model, a <b>formal</b> <b>method</b> of {{incident}} analysis ...|$|E
40|$|For {{whatever}} reason, <b>formal</b> <b>methods</b> remain one of {{the more}} contentious techniques in industrial software engineering. Despite some improvementin the uptake of <b>formal</b> <b>methods,</b> it is still the case that the vast majorityof potential users of <b>formal</b> <b>methods</b> fail to become actual users. A paper by Hall in 1990 [29] examined a number of `myths' concerning <b>formal</b> <b>methods,</b> assumed by some to be valid. This paper considers a few more beliefs held by many and presents some counter examples...|$|R
40|$|Abstract. In {{order to}} teach <b>formal</b> <b>methods</b> successfully, the subject must be {{presented}} {{in a way that}} students find relevant, manageable and rewarding. This position paper discusses some of the difficulties in teaching <b>formal</b> <b>methods</b> and suggests solutions. We present an outline of the Perfect Developer tool and describe how we teach our own employees to use it for formally verified software development. 1 Challenges facing <b>Formal</b> <b>Methods</b> teaching staff <b>Formal</b> <b>methods</b> can be successfully taught if the students are willing, the concepts are within their reach, they are given motivational feedback and they are provided with good tools. Each of these areas presents challenges. 1. 1 The difficulty of attracting students In many universities, <b>formal</b> <b>methods</b> are taught as an optional module that competes with other modules for students. Several lecturers have informed us that the <b>formal</b> <b>methods</b> module has been less popular in recent years. Based on our discussions, we postulate the following reasons for this: • Students are more focused on gaining skills that industry demands; • <b>Formal</b> <b>methods</b> are seen as out-of-touch with the real world of object-oriented software construction; • <b>Formal</b> <b>methods</b> are perceived as difficult and only for the more mathematically inclined...|$|R
40|$|It was {{advocated}} that in 21 st century, most {{of software}} {{will be developed}} with benefits of <b>formal</b> <b>methods.</b> The benefits include faults found in earlier stage of software development, automating, checking the certain properties and minimizing rework. In spite of their recognition in academic world and these claimed advantages, <b>formal</b> <b>methods</b> are still not widely used by commercial software industry. The purpose {{of this research is}} to promote <b>formal</b> <b>methods</b> for commercial software industry. In this paper we have identified issues in use of <b>formal</b> <b>methods</b> for commercial applications and devised strategies to overcome these difficulties which will provide motivations to use <b>formal</b> <b>methods</b> for commercial applications...|$|R
5000|$|Automata Theory: a <b>formal</b> <b>method</b> {{for state}} {{transition}} systems ...|$|E
50|$|There {{is also a}} very <b>formal</b> <b>method</b> for {{relieving}} {{the officer}} of the deck.|$|E
5000|$|... rCOS {{stands for}} {{refinement}} of object and component systems. It is a <b>formal</b> <b>method</b> providing component-based model-driven software development.|$|E
40|$|We {{have been}} {{teaching}} <b>formal</b> <b>methods</b> {{for eight years}} at two major Argentinean universities. It {{is hard to find}} examples of the application of <b>formal</b> <b>methods</b> outside the most advanced industrial sectors. Then, why teach <b>formal</b> <b>methods</b> in a country that hardly produce software for advanced industries? Why <b>formal</b> <b>methods</b> in a country which buy technology instead of creating it? We were one of the first in teaching <b>formal</b> <b>methods</b> in Latin America, likely the first in teaching TLA and CSP. Our former students are now pursuing PhD’s in several European countries and Argentina. Slowly but steadily our graduates are infiltrating the local industry...|$|R
40|$|This book {{constitutes}} the thoroughly refereed conference {{proceedings of the}} 18 th International Workshop on <b>Formal</b> <b>Methods</b> for Industrial Critical Systems, FMICS 2013, held in Madrid, Spain, in September 2013. The 13 papers presented were carefully selected from 25 submissions and cover topics such as design, specification, code generation and testing based on <b>formal</b> <b>methods,</b> methods, techniques and tools to support automated analysis, certification, debugging, learning, optimization and transformation of complex, distributed, dependable, real-time systems and embedded systems, verification and validation methods, tools {{for the development of}} formal design descriptions, case studies and experience reports on industrial applications of <b>formal</b> <b>methods,</b> impact of the adoption of <b>formal</b> <b>methods</b> on the development process and associated costs, application of <b>formal</b> <b>methods</b> in standardization and industrial forums...|$|R
40|$|The {{automated}} deduction and model checking communities have developed techniques that are impressively effective {{when applied to}} suitable problems. However, these problems seldom coincide exactly with those that arise in <b>formal</b> <b>methods.</b> Using small but realistic examples for illustration, I will argue that effective deductive support for <b>formal</b> <b>methods</b> requires cooperation among different techniques and an integrated approach to language, deduction, and supporting capabilities such as simulation {{and the construction of}} invariants and abstractions. Successful application of {{automated deduction}} to <b>formal</b> <b>methods</b> will enrich both fields, providing new opportunities for research and use of automated deduction, and making <b>formal</b> <b>methods</b> a truly useful and practical tool. 1 Introduction <b>Formal</b> <b>methods</b> are a natural application area for automated deduction [...] -yet, with few exceptions, tools for mainstream <b>formal</b> <b>methods</b> provide little more than rudimentary support for deduction, [...] ...|$|R
