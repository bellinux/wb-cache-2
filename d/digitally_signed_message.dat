7|1908|Public
50|$|The {{message is}} signed using the sender's private signing key. The <b>digitally</b> <b>signed</b> <b>message</b> is {{then sent to}} the receiver, who can then use the sender's public key to verify the signature.|$|E
50|$|In this example, an RSA modulus {{purporting}} {{to be of}} the form n = pq is actually of the form n = pqr, for primes p, q, and r. Calculation shows that exactly one extra bit can be hidden in the <b>digitally</b> <b>signed</b> <b>message.</b> The cure for this was found by cryptologists at the Centrum Wiskunde & Informatica in Amsterdam, who developed a Zero-knowledge proof that n is of the form n = pq. This example was motivated in part by The Empty Silo Proposal.|$|E
50|$|To send {{a message}} using EPKE, the sender of the message first signs the message using their own private key, this ensures {{non-repudiation}} of the message. The sender then encrypts their <b>digitally</b> <b>signed</b> <b>message</b> using the receiver's public key thus applying a digital envelope to the message. This step ensures confidentiality during the transmission of the message. The receiver of the message then uses their private key to decrypt the message thus removing the digital envelope and then uses the sender's public key to decrypt the sender's digital signature. At this point, if the message has been unaltered during transmission, the message will be clear to the receiver.|$|E
50|$|The OpenPGP {{standard}} specifies several {{methods of}} <b>digitally</b> <b>signing</b> <b>messages.</b> In 2003, {{due to an}} error in a change to GnuPG intended to make one of those methods more efficient, a security vulnerability was introduced. It affected only one method of <b>digitally</b> <b>signing</b> <b>messages,</b> only for some releases of GnuPG (1.0.2 through 1.2.3), and there were fewer than 1000 such keys listed on the key servers. Most people did not use this method, and were in any case discouraged from doing so, so the damage caused (if any, since none has been publicly reported) would {{appear to have been}} minimal. Support for this method has been removed from GnuPG versions released after this discovery (1.2.4 and later).|$|R
5000|$|... vSEC:MAIL - {{software}} that enables organizations to communicate using encrypted and/or <b>digitally</b> <b>signed</b> email <b>messages</b> ...|$|R
50|$|OFTP 2 can encrypt and <b>digitally</b> <b>sign</b> <b>message</b> data, request <b>signed</b> {{receipts}} and also offers {{high levels of}} data compression. All of these services are available when using OFTP 2 over TCP/IP, X.25/ISDN or native X.25. When used over a TCP/IP network such as the Internet, additional session level security is available by using OFTP 2 over TLS (Transport Layer Security).|$|R
5000|$|It is {{relatively}} easy to change the interpretation of a digital document by implementing changes on the computer system where the document is being processed, and the greater the semantic distance, the easier it gets. From a semantic perspective this creates uncertainty about what exactly has been signed. WYSIWYS [...] means that the semantic interpretation of a <b>digitally</b> <b>signed</b> <b>message</b> can not be changed, either by accident or by intent. This also means that a digital document to be signed can not contain hidden semantic content that can be revealed after the signature has been applied, because that would mean that the semantic interpretation of the document can change. WYSIWYS is a desirable property of digital signature systems that is difficult to guarantee because of the increasing complexity of modern computer systems. Various methods have been proposed to make WYSIWYS more robust.|$|E
40|$|We {{present an}} authenticable {{graphical}} barcode symbology, and describe {{a system for}} its reliable encoding and decoding. The graphical barcode is generated by modulating halftone patterns according to the message to be embedded in the barcode during the rendering of a base image. The generated barcode has {{the appearance of the}} base image, and when it is printed and scanned back in, the message can be retrieved. A graphical indicium is a graphical barcode embedded with a <b>digitally</b> <b>signed</b> <b>message</b> such that the integrity and authenticity of the message can be verified. 1...|$|E
3000|$|A {{simple way}} for the base station to deliver the root key to a {{particular}} target sensor node would be for it to use the target's public key to encrypt the root key. However, this is susceptible to capture and replay by an adversary at a later time, potentially allowing the attacker to revert the sensor nodes to an earlier code image. To protect against this, we implement an authenticated Diffie-Hellman exchange first to generate a secure channel, and then to use that channel for the root key transfer. The base station initiates the Diffie-Hellman exchange by sending a <b>digitally</b> <b>signed</b> <b>message</b> containing its ephemeral key component, and the target node responds correspondingly with its own signed ephemeral key component. The shared ephemeral key is then generated by each side by combining the received key component with its own key component. This shared key allows secure transfer of the root key [...]...|$|E
40|$|The SET payment {{protocol}} uses digital signatures {{to authenticate}} messages and authorize transactions. It {{is assumed that}} these digital signatures make authorizations non-repudiable, i. e., provable to a third-party verifier. This paper evaluates what can be proved with the digital signatures in SET. The analysis shows that even a successful and completed SET protocol run does not give the parties enough evidence to prove certain important transaction features. A comparison with the similarly-structured #KP protocol shows a number of advantages of #KP as opposed to SET {{with respect to the}} use of its signatures as evidence tokens. It is shown that non-repudiation requires more than <b>digitally</b> <b>signing</b> authorization <b>messages.</b> Most importantly, protocols claiming non-repudiaton should explicitly specify the rules to be used for deriving authorization statements from <b>digitally</b> <b>signed</b> <b>messages...</b>|$|R
50|$|The {{most common}} {{application}} of blinding is the blind signature. In a blind signature protocol, the signer <b>digitally</b> <b>signs</b> a <b>message</b> {{without being able}} to learn its content.|$|R
40|$|In {{this paper}} the {{realization}} of one algorithm for digital signature, DSA (Digital Signature Algorithm), is presented. In the algorithm, for calculating the variables needed to generate public and private key, one-way hash function, SHA (Secure Hash Algorithm), is used. A method of realization of SHA and DSA is presented, and {{the time required to}} <b>digitally</b> <b>sign</b> <b>messages</b> of different sizes and time required to generate the keys are measured. The results are compared with the analogous result based on another software implemented system for <b>digitally</b> <b>signing</b> with hash function and RSA algorithm...|$|R
40|$|With {{the growth}} of many {{different}} public key infrastructures on the Internet, relying parties have {{the difficult task of}} deciding whether the sender of <b>digitally</b> <b>signed</b> <b>message</b> is really who the public key certificate says they are. We have built an expert system that calculates the amount of trust, or trust quotient, that one can place in the name to public key binding in a certificate. The structure of the expert system is based on the CPS framework of Chokhani and Ford (RFC 2527), whilst the relative importance of the various factors that comprise the trust quotient, were determined by interviewing PKI experts from around the globe. This paper discusses the knowledge analysis strategy employed to collect this expert information and how we used it to develop the KBS. The analysis {{of the results of the}} interviews are also presented, and they can be summarised succinctly as "there are some factors concerning trust in a PKI which nearly all experts agree upon, and there are other factors in which there is very little agreement at all". The importance of identifying contextual factors when building a knowledge base is very important. In many cases, a disagreement between experts, as shown by a bimodal split in importance, was traced to differences in context and we show how this can be a source of new knowledge...|$|E
5000|$|The bitcoin {{network is}} a {{peer-to-peer}} payment network that operates on a cryptographic protocol. Users {{send and receive}} bitcoins, the units of currency, by broadcasting <b>digitally</b> <b>signed</b> <b>messages</b> to the network using bitcoin wallet software. Transactions are recorded into a distributed, replicated public database known as the blockchain, with consensus achieved by a proof-of-work system called [...] "mining". The protocol was designed in 2008 and released in 2009 as open source software by Satoshi Nakamoto, the name or pseudonym of the original developer/developer group.|$|R
40|$|A {{project to}} enable health care {{professionals}} (GPs, practice nurses and diabetes nurse specialists) to access, via the Internet, confidential patient data held on a secondary care (hospital) diabetes information system, has been implemented. We describe the application that we chose to distribute (a diabetes register); the security mechanisms we used to protect the data (a public key infrastructure with strong encryption and <b>digitally</b> <b>signed</b> <b>messages,</b> plus a firewall); {{the reasons for the}} implementation decisions we made; the validation testing that we performed and the preliminary results of the pilot implementation...|$|R
40|$|In {{this era}} of {{advanced}} technology, mobile commerce {{is going to become}} popular due to rapid development of technology but this technology needs a lot of struggle for maintaining secure communication and protection from threats. In this research, a mechanism for secure and authentic communication in mobile commerce based on joint signature scheme is presented. This technique ensures the integrity of <b>digitally</b> <b>signed</b> <b>messages</b> using joint signature scheme which show that the message which is sent by the message sender have not been altered by any unauthorized person by <b>digitally</b> <b>signing</b> the <b>message.</b> This technique is efficient in mobile domain because it is less computative and easily used with limited resources in mobile commerce. Joint signature scheme is based on hash functions and encryption/decryption technique to produce joint signature with the help of message sender and trusted third party and also to authenticate the message for the message sender and the message receiver. This technique overcomes the drawbacks of traditional digital scheme, such as computation/communication load, complexity, public key operations etc...|$|R
50|$|SILC {{channels}} (groups) {{are protected}} by using symmetric channel keys. It is optionally possible to <b>digitally</b> <b>sign</b> all channel <b>messages.</b> It is also possible to protect messages with a privately generated channel key that has been previously agreed upon by channel members. Private messages between users in a SILC network are protected with session keys. It is, however, possible to execute SKE protocol between two users and use the generated key to protect private messages. Private messages may be optionally <b>digitally</b> <b>signed.</b> When <b>messages</b> are secured with key material generated with the SKE protocol or previously agreed upon key material (for example, passphrases) SILC provides security even when the SILC server may be compromised.|$|R
40|$|Public key {{cryptography}} {{allows a}} user to <b>digitally</b> <b>sign</b> <b>messages</b> {{with a private}} signature key so that recipients in possession of the corresponding public verification key can check the correctness of the signature. The main problem with this method is to authenticate public keys in order {{to know that the}} digital signature is authentic. A Public Key Infrastructure refers to a network where the authenticity of public keys is certified by Certification Authorities in a hierarchy, and it is believed that this will be an important element in the development of electronic commerce. Certification services are already available from commercial Certification Authorities, and we are starting to see the emergence of national and international public key infrastructures. This paper describes public key infrastructures in general and discusses Norwegian as well as some international implementation efforts...|$|R
40|$|Digital {{signature}} can {{be associated}} with Internet messages in order to guarantee authentication, message integrity and non-repudiation of origin. Verification of incoming <b>digitally</b> <b>signed</b> <b>messages</b> is usually performed by the e-mail client, on behalf of the end-user. The automatic elaboration of message content speeds up data processing, reducing human error as well. Automatic elaboration means that information is coded in a syntax "understandable " to computers, making it possible to automate data interpretation and processing. In this type of application, signature verification by e-mail client could become a system bottleneck, thus justifying the use of an automatic verification system. In this work we describe our experience in designing and implementing software to automate the verification process of signed e-mails. At present the system is utilized to simplify the registration of Internet domains under the. IT Top Level Domain. ...|$|R
40|$|RT 034; The CNR Ceris IT Office was {{an active}} subject in the {{designing}} phase of IDEM (federated IDEntity Management for service access), the GARR project of the Italian Federation for network authentication and authorization, and has acquired a wide experience in federated services and in the SAML platform. IDEM has now reached a stable production level and the services accessed through our IdP are appreciated by Piedmont CNR users (for example, electronic publications or videoconferencing reservations). To improve our network services we have extended wireless access with federated authentication to simplify user login and mobility among GARR research and educational institutions. The new feature has been developed by Shibboleth open-source software installed on a Linux Ubuntu server and some code in the PHP language, integrated with the Guest Services of the Sonicwall Network Security Appliance NSA- 5500 by secure communication over HTTPS and <b>digitally</b> <b>signed</b> <b>messages...</b>|$|R
30|$|An {{important}} aspect of any ITS is to correctly address potential security and privacy issues. Aijaz et al. [4] define the following vital attack aspects depending on what the target is. Authors identify attacks on the following: (i) wireless interface; (ii) sensor inputs to different processing units; (iii) software and hardware parts of the systems; and (iv) security infrastructure behind wireless access networks (e.g., certification and traffic authorities, transportation vehicle manufacturers). On the other hand, various security solutions have been proposed to tackle these problems {{and they can be}} classified [6] as proactive (e.g., tamper resistant hardware, proprietary system design, and <b>digitally</b> <b>signed</b> <b>messages)</b> or reactive (e.g., anomaly-based, context-based, and signature-based approaches). Especially anomaly-based detection systems constitute an important part of every ITS-based management system. They allow to assess the imminent emergence of any incidents, i.e., to detect deviations from normal patterns (events, situations). Therefore, identifying anomalous events is essential as they can lead to critical conditions where immediate actions must be taken.|$|R
50|$|Digital {{signatures}} employ asymmetric cryptography. In {{many instances}} {{they provide a}} layer of validation and security to messages sent through a non-secure channel: Properly implemented, a digital signature gives the receiver reason to believe the message was sent by the claimed sender. Digital seals and signatures are equivalent to handwritten signatures and stamped seals. Digital signatures are equivalent to traditional handwritten signatures in many respects, but properly implemented digital signatures {{are more difficult to}} forge than the handwritten type. Digital signature schemes, in the sense used here, are cryptographically based, and must be implemented properly to be effective. Digital signatures can also provide non-repudiation, meaning that the signer cannot successfully claim they did not <b>sign</b> a <b>message,</b> while also claiming their private key remains secret; further, some non-repudiation schemes offer a time stamp for the digital signature, so that even if the private key is exposed, the signature is valid. <b>Digitally</b> <b>signed</b> <b>messages</b> may be anything re-presentable as a bitstring: examples include electronic mail, contracts, or a message sent via some other cryptographic protocol.|$|R
50|$|Email {{encryption}} {{can rely}} on public-key cryptography, in which users can each publish a public key that others can use to encrypt messages to them, while keeping secret a private key they can use to decrypt such messages or to <b>digitally</b> encrypt and <b>sign</b> <b>messages</b> they send.|$|R
40|$|Digital {{signature}} can {{be associated}} with Internet messages in order to guarantee authentication, message integrity and non-repudiation of origin. Verification of incoming <b>digitally</b> <b>signed</b> <b>messages</b> is a critical operation requiring careful attention. Usually e-mail clients (receiving agents) implement this function on behalf of the end-user. If the verification process is not successful, the client alerts the user. When e-mail messages (i. e. electronic forms) are used to request services of a provider, the automatic processing of message content speeds up data processing, reducing human error as well. In this context, signature verification by e-mail client could become a system bottleneck, thus justifying an automatic verification system. In this work we briefly describe our experience in designing and implementing software in order to automate the verification process of signed e-mail. The system has been designed to simplify the registration of Internet domains under the. IT Top Level Domain [1]. In order to design the automatic "Message Verify " system we studied the way in which Public Key cryptography technology can be integrated with the electronic mail system. We were especiall...|$|R
50|$|Encryption {{and digital}} {{signature}} are two fundamental cryptographic tools that can guarantee the confidentiality, integrity, and non-repudiation. Until 1997, they {{were viewed as}} important but distinct building blocks of various cryptographic systems. In public key schemes, a traditional method is to <b>digitally</b> <b>sign</b> a <b>message</b> then followed by an encryption (signature-then-encryption) that can have two problems: Low efficiency and high cost of such summation, and the case that any arbitrary scheme cannot guarantee security. Signcryption {{is a relatively new}} cryptographic technique that is supposed to perform the functions of digital signature and encryption in a single logical step and can effectively decrease the computational costs and communication overheads in comparison with the traditional signature-then-encryption schemes.|$|R
40|$|Smart {{cards are}} {{convenient}} and secure. They protect sensitive information (e. g., private keys) from malicious applications. However, {{they do not}} protect the owner from abuse of the smart card: An application could for example cause a smart card to <b>digitally</b> <b>sign</b> any <b>message,</b> at any time, without {{the knowledge of the}} owner. In this paper we suggest that small, hand-held computers can be used instead of smart cards. They can communicate with the user directly and therefore do not exhibit the above mentioned problem. We have implemented smart card functionality for a 3 COM PalmPilot. Our implementation is a PKCS# 11 module that plugs into Netscape Communicator and takes about 5 seconds to <b>sign</b> an email <b>message.</b> Generalizing from this experience, we argue that applications that are split between a PC and a hand-held device can be more secure. While such an application remains fast and convenient to use, it gains additional security assurances from the fact that part of it runs on a trusted device. ...|$|R
40|$|This paper {{describes}} {{a system that}} gives opticians Internet access from their high street shops to patient data held in a hospital Diabetes Information System (DIS), using a standard Web browser. The system is a revision of an earlier one we provided to General Practitioners (GPs), and uses a public key infrastructure with strong encryption and <b>digitally</b> <b>signed</b> <b>messages</b> to secure the data as it traverses the Internet. We describe the PKI and the security architecture, the DIS we chose to distribute, the changes that we made to the Web interface to tailor it to the opticians needs, the validation testing we performed, {{the results of the}} pilot testing and the feedback we obtained from the opticians. We also compare the results with our earlier work with GPs. We found that in a well-designed system the underlying PKI is virtually invisible to the users, and its security is taken for granted. Users then concentrate on {{the costs and benefits of}} the electronic application. In our system, benefits can accrue to opticians by giving them access to the latest patient data, and this can help to improve patient care. Benefits also accrue to the DIS administrators and the wider community of DIS users, in that data quality can be significantly improved. However, we found that the slow speed of Internet access via a dial up connection is a significant impediment to its frequent use. We also found that it is extremely difficult to produce a user interface that pleases everyone. Finally, in complex information systems such as this PKI, failure of just one component or administrative procedure can have a catastrophic effect on the availability of the entire system...|$|R
40|$|Abstract Consider an {{application}} where a human user has to <b>digitally</b> <b>sign</b> a <b>message.</b> It is usually assumed {{that she has}} a trusted computer at her disposal, however, this assumption does not hold in several practical cases, especially if the user is mobile. Smart cards have been proposed to solve this problem, but {{they do not have a}} user interface, therefore the user still needs a (potentially untrusted) terminal to authorize the card to produce digital signatures. In order to mitigate this problem, we proposed a solution based on conditional signatures to provide a framework for the repudiation of unintended signatures. Our previous solution relies on a trusted third party who is able to link the issuer of the signature with the intended recipient, which may lead to severe privacy problems. In this paper we extend our framework and propose protocols that allow the user to retain her privacy with respect to this trusted third party. 1...|$|R
40|$|In {{this thesis}} we {{introduce}} a new cryptographic construct called a Group Blind Digital Signature. This construct combines the already existing notions of a Group Digital Signature and a Blind Digital Signature. A group blind signature allows individual members of a possibly large group to <b>digitally</b> <b>sign</b> a <b>message</b> {{on behalf of the}} entire group in a cryptographically secure manner. In addition to being hard to forge, the resulting digital signatures are anonymous and unlinkable, and only a pre-specified group manager can determine the identity of the signer. Finally, the signatures have a blindness property, so if the signer later sees a <b>message</b> he has <b>signed,</b> he {{will not be able to}} determine when or for whom he signed it. Group Blind Digital Signatures are useful for various aspects of electronic commerce. In particular, through the use of such signatures we can design protocols for secure distributed electronic banking, and secure online voting with multiple voting centers. In this the [...] ...|$|R
40|$|Master of Science in Computer Science and Electrical Engineering In {{this thesis}} weintroduce a new {{cryptographic}} construct called a Group Blind Digital Signature. This construct combines the already existing notions of a Group Digital Signature and a Blind Digital Signature. A group blind signature allows {{individual members of}} a possibly large group to <b>digitally</b> <b>sign</b> a <b>message</b> {{on behalf of the}} entire group in a cryptographically secure manner. In addition to being hard to forge, the resulting digital signatures are anonymous and unlinkable, and only a pre-speci ed group manager can determine the identity of the signer. Finally, the signatures have a blindness property, so if the signer later sees a <b>message</b> he has <b>signed,</b> he {{will not be able to}} determine when or for whom he signed it. Group Blind Digital Signatures are useful for various aspects of electronic commerce. In particular, through the use of such signatures we can design protocols for secure distributed electronic banking, and secure online voting with multiple voting centers. In this thesis we show, for the rst time, how to construct such signatures based on number-theoretic assumptions...|$|R
40|$|It {{is quite}} usual {{in the world}} of {{scientific}} software development to use, as black boxes, algorithmic software libraries without any prior assessment of their efficiency. This approach relies {{on the assumption that the}} experimental performance of these libraries, although correct, will match the theoretical expectation of their algorithmic counterparts. In this paper we discuss the case of SEESMS (Secure Extensible and Efficient SMS). It is a software framework that allows two peers to exchange encrypted and <b>digitally</b> <b>signed</b> SMS <b>messages.</b> The cryptographic part of SEESMS is implemented on top of the Java BC library (The Legion of Bouncy Castle, 2010), a widely used open-source library. The preliminary experimentations conducted on SEESMS, discussed in Castiglione et al. (2010), revealed some unexpected phenomena like the ECDSA-based cryptosystem being generally and significantly slower than the RSA-based equivalent. In this paper, we analyze these phenomena by profiling the code of SEESMS and expose the issues causing its bad performance. Then, we apply some algorithmic and programming optimizations techniques. The resulting code exhibits a significant performance boost with respect to the original implementation, and requires less memory in order to be run. © 2012 Elsevier Ltd. All rights reserved...|$|R
40|$|The safe {{delivery}} rule guarantees that any message {{delivered to the}} application by the group communication system has been received and acknowledged by all group members. In this paper, we present a new multisignature scheme {{which can be used}} in client-server model of group communication systems to deal with certain problems that arise while implementing {{safe delivery}} rule in such systems. If security is incorporated into safe delivery rule by encrypting the acknowledgement messages from each group member using group-key (to ensure message integrity) or by requiring each member to <b>digitally</b> <b>sign</b> these <b>messages</b> (to prevent malicious members from disrupting the system), the sender of a message which receives these messages would have to decrypt or verify all these messages. The proposed multisignature scheme enables the group communication server to combine acknowledgements of a message from all group members into a single group-acknowledgement message of constant size and send it to the sender of the message. This single acknowledgement can be verified by any member in constant time and thereby avoids the problem of having to perform $n- 1 ^ 1 $ cryptographic operations...|$|R
40|$|Nowadays, Short Message Service (SMS) still {{represents}} the most used mobile messaging service. SMS messages {{are used in}} many different application fields, even in cases where security features, such as authentication and confidentiality between the communicators, must be ensured. Unfortunately, the SMS technology {{does not provide a}} built-in support for any security feature. This work presents SEESMS (Secure Extensible and Efficient SMS), a software framework written in Java which allows two peers to exchange encrypted and <b>digitally</b> <b>signed</b> SMS <b>messages.</b> The communication between peers is secured by using public-key cryptography. The key-exchange process is implemented by using a novel and simple security protocol which minimizes the number of SMS messages to use. SEESMS supports the encryption of a communication channel through the ECIES and the RSA algorithms. The identity validation of the contacts involved in the communication is implemented through the RSA, DSA and ECDSA signature schemes. SEESMS is able to certify the phone number of the peers using the framework. Additional cryptosystems can be coded and added to SEESMS as plug-ins. Special attention has been devoted to the implementation of an efficient framework in terms of energy consumption and execution time. This efficiency is obtained in two steps. First, all the cryptosystems available in the framework are implemented using mature and fully optimized cryptographic libraries. Second, an experimental analysis was conducted to determine which combination of cryptosystems and security parameters were able to provide a better trade-off in terms of speed/security and energy consumption. This experimental analysis has also been useful to expose some serious performance issues affecting the cryptographic libraries which are commonly used to implement security features on mobile devices. © 2010 IEEE...|$|R
25|$|Presentations can be <b>digitally</b> <b>signed.</b>|$|R
5000|$|The {{technical}} solution for proving authenticity of identity proofs is <b>digitally</b> <b>signed</b> attestations, possibly time-bound. A <b>digitally</b> <b>signed</b> proof {{is as good}} as an attestation because the digital signature cannot be forged. Digital signatures have two properties that make them inherently better than paper documents: ...|$|R
5000|$|... authenticity: trusted, non-refutable {{time when}} data was <b>digitally</b> <b>signed</b> ...|$|R
