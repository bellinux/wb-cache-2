343|535|Public
5|$|Encrypting {{ransomware}} reappeared in September 2013 with a Trojan {{known as}} CryptoLocker, which generated a 2048-bit RSA <b>key</b> <b>pair</b> and uploaded {{in turn to}} a command-and-control server, and used to encrypt files using a whitelist of specific file extensions. The malware threatened to delete the private key if a payment of Bitcoin or a pre-paid cash voucher was not made within 3 days of the infection. Due to the extremely large key size it uses, analysts and those affected by the Trojan considered CryptoLocker extremely difficult to repair. Even after the deadline passed, the private key could still be obtained using an online tool, but the price would increase to 10 BTC—which cost approximately US$2300 as of November 2013.|$|E
25|$|A {{private key}} {{can also be}} used by the creator of the {{assembly}} for strong naming. The public key token identifies which private key an assembly is signed with. Only the creator of the <b>key</b> <b>pair</b> (typically the person signing the assembly) can sign assemblies that have the same strong name as a prior version assembly, since the creator possesses the private key. Strong naming is required to add assemblies to Global Assembly Cache.|$|E
500|$|The {{attacker}} {{generates a}} <b>key</b> <b>pair</b> and places the corresponding public {{key in the}} malware. The malware is released.|$|E
40|$|The {{fact that}} the stream cipher RC 4 can {{generate}} colliding <b>key</b> <b>pairs</b> with hamming distance one was first discovered by Matsui in FSE 2010. This kind of weakness demonstrates that two different secret keys {{have the same effect}} on the cipher's encryption and the corresponding decryption procedure. In this paper, we further investigate the property of RC 4 key collisions and achieved the following results: 1. We show that RC 4 can generate colliding <b>key</b> <b>pairs</b> with various hamming distances, which cannot be generated by Matsui's pattern. We also give concrete examples of colliding <b>key</b> <b>pairs</b> with hamming distances greater than one. 2. We formalize RC 4 colliding <b>key</b> <b>pairs</b> into two large patterns, namely, Transitional pattern and Self-Absorbing pattern. All the currently known colliding <b>key</b> <b>pairs</b> can be categorized into either two patterns. 3. We analyze both patterns and clarified the relations among the probability of key collision, key length and hamming distances which yield the colliding <b>key</b> <b>pairs.</b> 4. We demonstrate the vulnerability of key collisions by showing collisions of RC 4 -Hash function proposed in INDOCRYPT 2006. Some concrete experimental results of RC 4 -Hash collision are also given in this paper...|$|R
40|$|In {{this paper}} we {{emphasize}} the importance of unique certified one-time <b>key</b> <b>pairs</b> in Buyer-Seller Watermarking (BSW) protocols. We distinguish between reactive unbinding attacks, in which the seller reacts to illicit file sharing by fabricating further evidence of such activity, and pre-emptive unbinding attacks, in which the seller gains an advantage by taking action that pre-empts the file being shared. We demonstrate the importance of certified one-time <b>key</b> <b>pairs</b> in the BSW protocol by Lei et al., for protecting against pre-emptive unbinding attacks, and subsequently reveal a new attack on a recently published BSW protocol due to its omission of unique <b>key</b> <b>pairs.</b> ...|$|R
5000|$|... #Subtitle level 3: Using {{separate}} <b>key</b> <b>pairs</b> {{for signing}} and encryption ...|$|R
2500|$|Redundancy can {{be added}} to improve reliability. [...] The [...] <b>key</b> <b>pair</b> can be stored in more than one node {{corresponding}} to the key. Usually, rather than selecting just one node, real world DHT algorithms select [...] suitable nodes, with [...] being an implementation-specific parameter of the DHT. In some DHT designs, nodes agree to handle a certain keyspace range, the size of which may be chosen dynamically, rather than hard-coded.|$|E
2500|$|Let Alice and Bob be {{two people}} who want to {{communicate}} securely. More specifically, Alice wants {{to send a message to}} Bob which only Bob can read. First Bob chooses two primes p and q. Then he calculates the RSA modulus N = pq. This RSA modulus is made public together with the encryption exponent e. N [...] and e form the public <b>key</b> <b>pair</b> (e,N). By making this information public, anyone can encrypt messages to Bob. The decryption exponent d satisfies , where , is Euler’s phi function (note: this is the order of the multiplicative group [...] ). The encryption exponent e and [...] also must be relatively prime so that there is a modular inverse. The factorization of N and the private key d are kept secret, so that only Bob can decrypt the message. We denote the private <b>key</b> <b>pair</b> as (d, N). The encryption of the message M is given by [...] and the decryption of cipher text [...] is given by [...] (using Fermat's little theorem).|$|E
2500|$|The {{next step}} for Plex {{was to provide}} each user a certificate. Since each user can have several IPs and thus several Plex subdomains as {{mentioned}} above, a valid wildcard certificate was needed. Choosing only a wildcard certificate for [...] would imply that each user would be using the same certificate and thus the same <b>key</b> <b>pair,</b> allowing a Plex user to decode the content of another Plex user. Also using only a certificate would not provide the ability to revoke a certificate if the user had his certificate compromised or if he/she wants to unsubscribe from Plex.|$|E
5000|$|The second, SSC, {{is based}} on {{public-private}} <b>key</b> <b>pairs</b> and digital certificates.|$|R
40|$|The {{property}} that the stream cipher RC 4 can generate the same keystream outputs under two different secret keys {{has been discovered}} recently. The principle that how the two different keys can achieve a collision has been studied in the previous researches by investigating the key scheduling algorithm of RC 4. However, how to find those colliding <b>key</b> <b>pairs</b> is a different story, which has been largely remained unexploited. Previous researches have demonstrated that finding colliding <b>key</b> <b>pairs</b> becomes more difficult as the key size decreases, and also finding key collisions {{can be related to}} key recovery attacks and hash collisions. In this paper, we propose novel searching techniques which can be used to find short colliding <b>key</b> <b>pairs</b> that belong to two different kind of colliding key patterns efficiently. The colliding <b>key</b> <b>pairs</b> we find in both patterns are by far the shortest ones ever found...|$|R
5000|$|... #Subtitle level 2: Combining many {{one-time}} <b>key</b> <b>pairs</b> into a hash-based signature scheme ...|$|R
50|$|Alice has a <b>key</b> <b>pair</b> (A,a) with A {{her public}} key and a her private key and Bob has the <b>key</b> <b>pair</b> (B,b) with B his public key and b his private key.|$|E
5000|$|If a Private Key Generator (PKG) is compromised, all {{messages}} protected {{over the}} entire lifetime of the public-private <b>key</b> <b>pair</b> used by that server are also compromised. This makes the PKG a high-value target to adversaries. To limit the exposure due to a compromised server, the master private-public <b>key</b> <b>pair</b> could be updated with a new independent <b>key</b> <b>pair.</b> However, this introduces a key-management problem where all users must have the most recent public key for the server.|$|E
5000|$|Given {{block size}} r, a public/private <b>key</b> <b>pair</b> is {{generated}} as follows: ...|$|E
40|$|Abstract. The {{development}} of public-private <b>key</b> <b>pairs</b> has evaluated congestion control, and current trends {{suggest that the}} refinement of B-trees will soon emerge. In our research, we validate the synthesis of public-private <b>key</b> <b>pairs.</b> Our focus in our research is not on whether DNS and Lamport clocks can synchronize to surmount this riddle, but rather on presenting new low-energy configurations (DOOR) ...|$|R
40|$|Evolutionary {{programming}} must work. Even {{though this}} result {{at first glance}} seems unexpected, it fell in line with our expectations. In fact, few end-users would disagree {{with the construction of}} public-private <b>key</b> <b>pairs.</b> Here, we propose a novel application for the practical unification of evolutionary programming and public-private <b>key</b> <b>pairs</b> (FARCE), which we use to demonstrate that RPCs can be made “fuzzy”, reliable, and introspective. ...|$|R
5000|$|Bob {{finds the}} secret <b>key</b> <b>paired</b> with that identifier, and deciphers Alice's cipher text with that secret key.|$|R
50|$|The RSA or ECC <b>key</b> <b>pair</b> is {{generated}} in the application and stored in the mobile. These keys {{will be used for}} all the crypto process like signing, encryption and decryption. The <b>key</b> <b>pair</b> generation is a onetime process and is completely user driven. The user can also use X.509 digital certificates from any certification authority (CA) for the crypto processes mentioned above.|$|E
5000|$|Alice generates an RSA <b>key</b> <b>pair,</b> {{comprising}} the modulus , the public exponent [...] {{and the private}} exponent ...|$|E
5000|$|Algorithm. Key Generation for ACE {{encryption}} scheme.Input: a size parameter m , {{such that}} [...]Output: a public/private <b>key</b> <b>pair.</b>|$|E
40|$|In this paper, we {{discovered}} that RC 4 can generate collidingkey pairs with various hamming distances, other than those found by Matsui (with hamming distance one), and by Chen and Miyaji (with hamming distance three). We formalized RC 4 colliding <b>key</b> <b>pairs</b> into two large patterns, namely, Transitional pattern and Self-Absorbing pattern, according to the behavior during KSA. The colliding <b>key</b> <b>pairs</b> found in the previous researches {{can be seen as}} either subsets of the Transitional pattern or of the Self-Absorbing pattern. We analyzed both patterns and clarified the relations among the probability of key collision, key length and hamming distances which yield the colliding <b>key</b> <b>pairs.</b> Also we showhow {{to make use of the}} RC 4 key collision patterns to find collisions of RC 4 -Hash function which was proposed in INDOCRYPT 2006. Some concrete experimental results RC 4 -Hash collision and RC 4 colliding <b>key</b> <b>pairs)</b> are also given in this paper. Security and Cryptography for Networks, 7 th International Conference, SCN 2010, Amalfi, Italy, September 13 - 15, 2010. Proceeding...|$|R
40|$|The {{synthesis}} of Smalltalk has improved sensor networks, and current trends {{suggest that the}} visualization of public-private <b>key</b> <b>pairs</b> will soon emerge. After years of confusing research into digital-to-analog converters, we disprove the refinement of public-private <b>key</b> <b>pairs,</b> which embodies the robust principles of theory. Our focus in our research is not on whether A * search and thin clients are rarely incompatible, but rather on proposing a novel algorithm {{for the improvement of}} Markov models (Ancone). ...|$|R
40|$|We {{describe}} a practical {{attack on the}} High Bandwidth Digital Content Protection (HDCP) scheme. HDCP is a proposed identity-based cryptosystem for use over the Digital Visual Interface bus, a consumer video bus used in digital VCRs, camcorders, and personal computers. Public/private <b>key</b> <b>pairs</b> are assigned to devices by a trusted authority, which possesses a master secret. If an attacker can recover 40 public/private <b>key</b> <b>pairs</b> that span the module of public keys, then the authority's master secret can be recovered in a few seconds. With the master secret, an attacker can eavesdrop on communications between any two devices and can spoof any device, both in real time. Additionally, the attacker can produce new <b>key</b> <b>pairs</b> not on any key revocation list. Thus the attacker can completely usurp the trusted authority's power. Furthermore, the protocol is still insecure even if all devices' keys are signed by the central authority. 2...|$|R
5000|$|To {{establish}} a strongly secured communication channel, using a chip-specific <b>key</b> <b>pair</b> with strong encryption and integrity protection.|$|E
5000|$|... {{attacker}}→victim The attacker {{generates a}} <b>key</b> <b>pair</b> and places the corresponding public {{key in the}} malware. The malware is released.|$|E
5000|$|... the {{security}} procedure {{for creating the}} subscriber’s <b>key</b> <b>pair</b> shall be {{in accordance with the}} e-authentication guidelines issued by the Controller, ...|$|E
50|$|Asymmetric key pairs: Public/private <b>key</b> <b>pairs</b> {{where the}} public key is {{embedded}} into a digital certificate, {{and the corresponding}} private key is known only to a single party.|$|R
50|$|The {{cryptographic}} material {{handled by}} most HSMs are asymmetric <b>key</b> <b>pairs</b> (and certificates) used in public-key cryptography. Some HSMs can also handle symmetric keys and other arbitrary data.|$|R
2500|$|As an anti-spoofing measure, {{additional}} {{fields such}} as playback rights and a random number are encrypted with three more predefined ECC <b>key</b> <b>pairs</b> either by the client or server software: ...|$|R
5000|$|The {{following}} example will {{illustrate how}} a key establishment is made. Suppose Alice wants {{to establish a}} shared key with Bob, but the only channel available for them may be eavesdropped by a third party. Initially, the domain parameters (that is, [...] in the prime case or [...] in the binary case) must be agreed upon. Also, each party must have a <b>key</b> <b>pair</b> suitable for elliptic curve cryptography, consisting of a private key [...] (a randomly selected integer in the interval [...] ) and a public key represented by a point [...] (where , that is, the result of adding [...] to itself [...] times). Let Alice's <b>key</b> <b>pair</b> be [...] and Bob's <b>key</b> <b>pair</b> be [...] Each party must know the other party's public key prior to execution of the protocol.|$|E
50|$|Alice {{generates a}} <b>key</b> <b>pair,</b> {{randomly}} chooses a private key, x, and then derives and publishes the public key, y = gx.|$|E
50|$|Each {{instance}} of algorithm 4 uses a different <b>key</b> <b>pair</b> (K and K′) but those four keys {{are derived from}} two independent base keys.|$|E
50|$|Public/private <b>key</b> <b>pairs</b> used in {{asymmetric}} encryption (public key cryptography), {{at least those}} based on prime factorisation, must be much longer {{in order to be}} secure; see key size for more details.|$|R
40|$|Biometric {{authentication}} {{systems can}} be used to control digital signature of medical documents. This pilot study evaluated the use of two different fingerprint technologies and one iris technology to control creation of digital signatures on a central server using public private <b>key</b> <b>pairs</b> stored on the server. Documents and signatures were stored in XML for portability. <b>Key</b> <b>pairs</b> and authentication certificates were generated during biometric enrollment. Usability and user acceptance were guarded and limitations of biometric systems prevented use of the system with all test subjects. The system detected alternations in the data content and provided future signer re-authentication for non-repudiation...|$|R
5000|$|Data {{transfers}} between TeamDrive's servers and versions ≥3.0 {{of their}} client program use 3072-bit RSA <b>key</b> <b>pairs</b> {{generated by the}} OpenSSL cryptographic library. [...] TeamDrive uses HTTPS when logging into your account via www.teamdrive.com.|$|R
