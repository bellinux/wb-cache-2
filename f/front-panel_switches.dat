8|7|Public
25|$|Hayes Microcomputer Products was a U.S.-based {{manufacturer}} of modems. The company {{is well known}} for the Smartmodem, which introduced a control language for operating the functions of the modem via the serial interface to the data terminal equipment, in contrast to manual operation with <b>front-panel</b> <b>switches.</b> This smart modem approach dramatically simplified and automated operation. Today almost all modems use a variant of the Hayes command set.|$|E
25|$|Computers {{manufactured}} {{until the}} 1970s had <b>front-panel</b> <b>switches</b> for programming. The computer program {{was written on}} paper for reference. An instruction was represented by a configuration of on/off settings. After setting the configuration, an execute button was pressed. This process was then repeated. Computer programs also were manually input via paper tape or punched cards. After the medium was loaded, the starting address was set via switches and the execute button pressed.|$|E
50|$|Hayes Microcomputer Products was a U.S.-based {{manufacturer}} of modems. The company {{is well known}} for the Smartmodem, which introduced a control language for operating the functions of the modem via the serial interface to the data terminal equipment, in contrast to manual operation with <b>front-panel</b> <b>switches.</b> This smart modem approach dramatically simplified and automated operation. Today almost all modems use a variant of the Hayes command set.|$|E
50|$|Front panels {{were often}} used to debug {{programs}} when operating support was limited and most programs were run in stand-alone mode. Typically a <b>front-panel</b> <b>switch</b> could {{cause the computer to}} single-step, that is run a single instruction and stop until the programmer pressed a button to execute the next instruction. An address stop could be set to stop a running program when it attempted to execute an instruction or access data at a specified address. The contents of registers and memory would be displayed in the front-panel lights. The programmer could read and alter register contents, change program instructions or data in memory or force a branch to another section of code.|$|R
50|$|There are {{two basic}} {{differences}} between AT and ATX power supplies: the connectors that provide power to the motherboard, and the soft switch. In ATX-style systems, the <b>front-panel</b> power <b>switch</b> provides only a control signal to the power supply and does not switch the mains AC voltage. This low-voltage control allows other hardware or software to turn the system on and off.|$|R
5000|$|Another notable {{change was}} the {{replacement}} of the <b>front-panel</b> toggle <b>switches</b> and lights of a standard early-model S-100 system with a keypad and seven-segment LED display (early S-100 machines like the Altair or IMSAI 8080 contained no ROM and when they were started the user had to [...] "key in" [...] a program via the toggle switches to read a paper tape. Once this [...] "loader" [...] program was ready, a paper tape containing a more complete loader would be read in, allowing the user to load programs from cassette or floppy disk).|$|R
50|$|Computers {{manufactured}} {{until the}} 1970s had <b>front-panel</b> <b>switches</b> for programming. The computer program {{was written on}} paper for reference. An instruction was represented by a configuration of on/off settings. After setting the configuration, an execute button was pressed. This process was then repeated. Computer programs also were manually input via paper tape or punched cards. After the medium was loaded, the starting address was set via switches and the execute button pressed.|$|E
5000|$|The Altair, {{and early}} clones, were {{relatively}} difficult to use. The machines contained no operating system in ROM, so starting it up required a machine language {{program to be}} entered by hand via <b>front-panel</b> <b>switches,</b> one location at a time. The program was typically a small driver for an attached paper tape reader, which would then be used to read in another [...] "real" [...] program. Later systems added bootstrapping code to improve this process, and the machines became almost universally associated with the CP/M operating system, loaded from floppy disk.|$|E
5000|$|North Star's next {{product was}} a hard sectored floppy disk system based on a 5-inch Shugart Associates SA-400 {{mechanism}} with 89 kB capacity. This was coupled with a S-100 bus controller and ROM that included bootstrap code and shipped with North Star DOS and North Star BASIC. The MDS system cost $699 and could be plugged into any S-100 bus machine, {{and was one of}} the earliest disk systems affordable for the average hobbyist. With the North Star installed, startup went from a lengthy process of manually entering a [...] "loader" [...] program through <b>front-panel</b> <b>switches,</b> to simply setting the run address to E800 on the address switches and flicking the RUN switch.|$|E
5|$|Player {{controls}} include clockwise and counterclockwise rotation, forward thrust, firing torpedoes, and hyperspace. Initially {{these were}} controlled using the <b>front-panel</b> test <b>switches</b> on the PDP-1 minicomputer, with four switches for each player, but these {{proved to be}} awkward to use and wore out quickly under normal gameplay, as well as causing players to accidentally flip the computer's control and power switches. The location of the switches also left one player {{off to one side}} of the CRT display due to the limited space in front of the computer, which left them at a disadvantage. To alleviate these problems, Kotok and Saunders created a detached control device, essentially an early gamepad. The gamepad had a switch for turning left or right, another for forward thrust or hyperspace, and a torpedo launch button. The button was silent so that the opposing player would not have a warning that the player was attempting to fire a torpedo during a cooldown period.|$|R
50|$|This section {{describes}} a work session on this computer, at one typical installation in 1975. The programmer might arrive, {{to work on}} a Fortran-II program that he had already started writing in the previous session, carrying a teleprinter paper listing of that program that has been annotated with the new changes that are to be made, and the punch tape that contains the machine-readable source code of the program. He would first need to turn on the computer at the switch on the conventional mains socket on the wall, and then at the <b>front-panel</b> on/off <b>switch.</b> Since the magnetic core memory, which is non-volatile memory, would generally still contain the previous user's program, the programmer might need to load the punched tape called Minisystem (containing the object code of a small, memory monitor program). This tape, which was stored in a small cardboard box on a shelf near the computer, would be entered from the left of the tape-reader. The tape-reader {{was an integral part of}} the front panel of the computer, and would spill out the tape that it had read, on to the floor, on the right-hand side. Once read, the Minisystem could be started by flicking the Run switch on the front panel.|$|R
40|$|The {{purpose of}} this project was the {{development}} of the NIZEMI (Niedergeschwindigkeits-Zentrifugen-Mikroskop) flight unit and all necessary support hardware. The NIZEMI enables the micro- and macroscopic observation of samples under variable accelerations. The NIZEMI facility was used for biological samples as well as for investigations of transparent materials. The flight unit covers the range between 10 E- 3 g and 1. 5 g. The NIZEMI Experiment Module (NEM) contains the centrifuge itself on which the scientific samples can be loaded. The samples will be temperature controlled by means of dedicated experiment housings. Cuvettes, containing the sample material to be observed, will be installed into these housings. The optical observation (via video cameras) can be achieved either under a microscope or a macroscope, which both are installed on the centrifuge plate. The experiments will be controlled by means of the ECU (Experiment Control Unit). The runs will be performed according to preprogrammed parameters (duration, temperatures, g-levels, etc.) stored in a PROM-cassette. However, the astronauts have the capabilities to reprogram the parameters to new scientific requirements, which may come up during mission. In addition, the ECU <b>front-panel</b> houses two <b>switches</b> to either focus the samples or to select their field of view. The NCM houses the video section of the facility with the monitor and the recorder. (orig.) SIGLEAvailable from TIB Hannover: F 97 B 1240 +a / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekBundesministerium fuer Bildung, Wissenschaft, Forschung und Technologie, Bonn (Germany); Deutsche Agentur fuer Raumfahrtangelegenheiten (DARA) GmbH, Bonn (Germany) DEGerman...|$|R
50|$|As {{part of this}} effort, Joe Decuir began {{development}} of an I/O system based primarily on the MOS Technology 6532, which included 8-bit I/O ports {{as well as the}} hardware needed to control memory refresh and similar housekeeping tasks. Ultimately, the design used five of the I/O ports (pins) to control the various <b>front-panel</b> <b>switches,</b> and four each for the two controllers. Additionally, the TIA, whose primary task was sound and video, was used to handle timing-based controllers like paddles and light pens. The physical interface was the 9-pin D-sub connector, which was already relatively common for reduced pin-count serial ports on the Apple II and S-100 bus machines. Each of the pins in the connector went directly to the appropriate pin on the associated chip.|$|E
50|$|The 620i and 620/L series were parallel, binary 16-bit {{general-purpose}} digital {{computers with}} core memory expandable to 32,768 words. An 18-bit word length (for data, not addresses) was optionally available. A basic machine cycle took 1.8 microseconds, and the core memory read time was 700 nanoseconds. The computers uses two's complement arithmetic and had four main registers - accumulator A, accumulator extension B, an index register X {{and a program}} counter register. Addressing modes were direct, immediate and indexed. The instruction set {{had more than one}} hundred arithmetic, logic and control instructions and some variants supported microprogramming. These models used a hardware front panel console that allowed starting and stopping the machine, examining memory and registers and changing memory or registers with <b>front-panel</b> <b>switches.</b> The processor was made with integrated circuit transistor transistor logic from the 7400 series. The system was packaged in a 19 inch rack and used 340 watts of power at 120 V AC. The 620/F was a variation with a faster machine cycle time of 750 nanoseconds. The 620/L-100 was released in 1973. It had a cycle time of 950 nanoseconds and a more compact system chassis than the 620/F.The Sperry V70 series had semiconductor memory but could also support core. Various models were released between 1972 and 1977.|$|E

