93|28|Public
25|$|The December CTP {{was also}} the last build of Windows Vista that {{supported}} the bypassing of the WDDM driver model requirement, hence allowing the Desktop Window Manager (UXSS {{at the time of}} the build) to run using software vertex emulation. Because of this change post the 5270 builds, the well known keys 'UseMachineCheck' and 'EnableMachineCheck do not allow running the Desktop Window Manager in software <b>emulation</b> <b>mode.</b>|$|E
25|$|Windows Vista {{features}} a completely re-written audio stack {{based on the}} Universal Audio Architecture. Because of the architectural changes in the redesigned audio stack, a direct path from DirectSound to the audio drivers does not exist. DirectSound, DirectMusic and other APIs such as MME are emulated as WASAPI Session instances. DirectSound runs in <b>emulation</b> <b>mode</b> on the Microsoft software mixer. The emulator does not have hardware abstraction, {{so there is no}} hardware DirectSound acceleration, meaning hardware and software relying on DirectSound acceleration may have degraded performance. It's likely a supposed performance hit might not be noticeable, depending on the application and actual system hardware. In the case of hardware 3D audio effects played using DirectSound3D, they will not be playable; this also breaks compatibility with EAX extensions.|$|E
25|$|In January 1985, Digital Research previewed the Concurrent DOS 286 {{operating}} system developed {{in cooperation with}} Intel. The product would function strictly as an 80286 native-mode (i.e. protected-mode) {{operating system}}, allowing users {{to take full advantage}} of the protected mode to perform multi-user, multitasking operations while running 8086 emulation. This worked on the B-1 prototype step of the chip, but Digital Research discovered problems with the emulation on the production level C-1 step in May, which would not allow Concurrent DOS 286 to run 8086 software in protected mode. The release of Concurrent DOS 286 was delayed until Intel would develop a new version of the chip. In August, after extensive testing on E-1 step samples of the 80286, Digital Research acknowledged that Intel corrected all documented 286 errata, but said that there were still undocumented chip performance problems with the prerelease version of Concurrent DOS 286 running on the E-1 step. Intel said that the approach Digital Research wished to take in emulating 8086 software in protected mode differed from the original specifications. Nevertheless, in the E-2 step, they implemented minor changes in the microcode that would allow Digital Research to run <b>emulation</b> <b>mode</b> much faster. Named IBM 4680 OS, IBM originally chose DR Concurrent DOS 286 as the basis of their IBM 4680 computer for IBM Plant System products and point-of-sale terminals in 1986. Digital Research's FlexOS 286 version 1.0, a derivation of Concurrent DOS 286, was developed in 1986, introduced in January 1987, and later adopted by IBM for their IBM 4690 OS, but the same limitations affected it.|$|E
50|$|The primary <b>emulation</b> <b>modes</b> for Yi are vim and emacs. Keybindings for vi, mg and nano {{and others}} are also provided. Other editor {{interfaces}} can be written by the user to extend Yi.|$|R
50|$|A {{separate}} configuration file, {{containing the}} initialization file for the monitor, is created for operation in monitor mode. Changing the operating mode from monitor to <b>emulation</b> or simulation <b>mode</b> will {{require that the}} real system be disconnected. Once the real system is disconnected, the model may be switched between simulation and <b>emulation</b> <b>modes</b> by enabling or disabling the internal control strategy.|$|R
50|$|In {{order to}} support more complex {{printing}} for different models of printers, each application (e.g. a word processor) may be shipped with its own printer drivers, which were essentially descriptions of printer escape sequences. Printers, too, have been supplied with drivers for the most popular applications. In addition, it's possible for applications to include tools for editing printer description, in case there was no ready driver. In the days when DOS was widely used, many printers had <b>emulation</b> <b>modes</b> for Epson FX-80 and IBM Proprinter commands. Many more recent laser printers also have <b>emulation</b> <b>modes</b> for HP PCL (HP LaserJet) or PostScript printers which will work in DOS. It appears that these are also compatible with Windows 3.x.|$|R
2500|$|The V60/V70/V80 mostly {{shared a}} common architecture. They had thirty-two 32-bit {{general-purpose}} registers, although the last three of these were commonly used as stack pointer, frame pointer and argument pointer. The V60 and V70 had a 119-instruction set, slightly extended to 123 instructions for the V80. The instructions have variable-length between one and 22 bytes, and they take two operands, both {{of which can be}} memory locations. After studying the V60's reference manual, Paul Vixie described it as [...] "a very vax-ish arch, with a V20/V30 <b>emulation</b> <b>mode</b> (which, if you recall, means it can run Intel 8086/8088 software)".|$|E
50|$|ALSA {{provides}} an optional OSS <b>emulation</b> <b>mode</b> {{that appears to}} programs {{as if it were}} OSS. Similarly, there was an ALSA <b>emulation</b> <b>mode</b> in the Linux implementation of OSS.|$|E
5000|$|<b>Emulation</b> <b>mode</b> allows {{software}} compatibility with the 65C02, excepting undocumented opcodes.|$|E
50|$|Supported {{terminal}} <b>emulation</b> <b>modes</b> included ASCII, Avatar, ANSI, RIP, VT102, and others. A {{number of}} file transfer protocols like Zmodem were {{built into the}} application, along with support for external protocols like HS/Link and BiModem. The built-in support for advanced file transfer protocols made Terminate very popular at the time.|$|R
5000|$|VMFS6 {{is used by}} vSphere 6.5. It {{supports}} 512 <b>emulation</b> (512e) <b>mode</b> drives.|$|R
50|$|Release 0.9.5: fix {{issues with}} STeem {{emulator}} hard disk emulation, add Alt+arrow mouse <b>emulation,</b> Pexec <b>mode</b> 7 support, dual keyboard support, user can specify boot partition at startup, recovery from exceptions in user programs, stack initialization on Amiga, translated text object alignment improvements, support for all line-A functions completed.|$|R
50|$|CPMulator was {{developed}} {{after the release}} of the V20. The processor was also able to emulate the Intel 8080 instruction set in hardware. This opened the possibility of running older code on the new IBM machines. CPMulator was designed to modify CP/M binaries to make them run as if native 8088 DOS programs. The code to put the CPU in <b>emulation</b> <b>mode</b> was prefixed to each CP/M executable. Any calls to the CP/M operating system were intercepted and translated to DOS operating system calls. The program would leave 8080 <b>emulation</b> <b>mode,</b> make the operating system call, translate the results to CP/M standards and returned to <b>emulation</b> <b>mode</b> and continue the original program.|$|E
5000|$|Yi, {{an editor}} that is written and {{extensible}} in Haskell {{and has an}} <b>emulation</b> <b>mode</b> for Emacs.|$|E
5000|$|... auto [...] - [...] In quirks mode (IE5 <b>emulation</b> <b>mode),</b> [...] {{does not}} work for s, except table elements.|$|E
40|$|Photovoltaic (PV) {{cells are}} {{promising}} endurable renewable power sources {{that do not}} include mechanical components, which are subject to wear and tear. However, actual development of a solarpowered system requires elaborated design processes {{to find the best}} setup including location determination and development of a maximum power point tracking method, which requires numerous on-site experiments. This paper introduces a versatile PV module emulation system, which can cover a range of different PV modules and environmental conditions. We provide an accurate parameter characterization methodology with nonlinear curve fitting to minimize the model discrepancy over the entire operating range. The proposed PV module emulation system includes a pilot PV cell, temperature sensors, an accelerometer, and a magnetic sensor, and provides features for the PV module characterization and <b>emulation</b> <b>modes.</b> Experimental results show significant improvement in the emulation accuracy, which comes from the advanced PV module characterization method as well as high-precision hardware and control. 1...|$|R
40|$|As {{the trend}} towards smaller, lighter and more {{powerful}} computers continues, mobility and wireless connectivity become increasingly important. The MosquitoNet project is studying issues in wireless and mobile computing, and this paper presents our performance analysis and observations {{of one of the}} emerging wireless technologies: the Metricom Microcellular Digital Network (MCDN). Metricom provides one of the best combinations of bandwidth, coverage area and cost for a wireless data network. We find that the throughput of their radio devices is comparable to a modern modem, but the latency, or round-trip delay, is much higher. The maximum throughput we measured was 30 - 40 Kbits/second, but the minimum latency for even the smallest IP packet is at least 60 ms. We have experimented with both the datagram and Hayes modem <b>emulation</b> <b>modes</b> of Metricom's wireless radios. We are early users of the datagram mode, and our comparisons of these modes confirm two well-known but sometimes forgotten [...] ...|$|R
50|$|Native {{operating}} system, native instruction set, etc., in {{application to}} a computer processor means that the corresponding item was implemented specifically for the given model of the computer or microprocessor, as opposed to <b>emulation</b> or compatibility <b>mode.</b>|$|R
5000|$|GNU Readline is a {{line editor}} that understands the {{standard}} Emacs navigation keybindings. It also has a vi <b>emulation</b> <b>mode.</b>|$|E
5000|$|No <b>emulation</b> <b>mode</b> {{the boot}} {{information}} is stored {{directly on the}} CD (not in a floppy image). This mode uses ISOLINUX.|$|E
5000|$|The NEC V20 and V30 {{processors}} {{support an}} 8080 <b>emulation</b> <b>mode</b> that can run CP/M on a PC DOS/MS-DOS computer so equipped ...|$|E
40|$|This paper {{deals with}} a new {{broadband}} switch architecture which is able to offer both the Asynchronous and the Circuit <b>Emulation</b> Transfer <b>Modes</b> (ATM and CEM) for nonisochronous and isochronous services, respectively. The switch {{is based on the}} Generalized Parallel Delta Networks (GPDNs) and operates according to the cut-through technique. The rearrangeabilityand the self-routing properties of GPDNs assure that CEM information units cross the interconnection network without conflicts, with a constant delay time and with a fully distributed transfer control. The paper provides a general description of the switch operation and the results of a preliminary performance evaluation...|$|R
50|$|Real time {{simulation}} allows multiple mode {{models to}} be built. A multiple mode {{model can be}} operated in either simulation, <b>emulation,</b> or monitor <b>modes</b> by simply invoking the simulator with a different configuration file. Multiple mode models are created by separating {{the model of the}} system control strategy from the model of the physical components.|$|R
50|$|For {{computers}} in the 1980s, very fast manipulation of the text buffer, with the hardware generating the individual pixels {{as fast as they}} could be displayed, was extremely useful for a fast UI. Even on relatively modern hardware the overhead of text <b>mode</b> <b>emulation</b> via hardware APA (graphics) modes (in which the program generates individual pixels and stores them into the video buffer) may be noticeable.|$|R
50|$|With the {{additional}} Compatibility Feature hardware and Compatibility Support software under DOS/360, the IBM 1401/1440/1460 object programs could be {{run in the}} <b>emulation</b> <b>mode,</b> {{with little or no}} reprogramming.|$|E
5000|$|An unusual {{feature of}} the NEC V20 was that it added an Intel 8080 <b>emulation</b> <b>mode,</b> in which it could execute {{programs}} written for the Intel 8080 processors. The instructions [...] executed in 8086 mode (NEC used a different notation for the instructions than Intel, where BRK in NEC notation is INT in Intel notation) and [...] and [...] executed in 8080 mode was used to switch or return to or from the <b>emulation</b> <b>mode.</b> There were some programs which allowed 8080-based CP/M-80 programs to run on MS-DOS machines, notably V2080 CPMulator (later ZRUN) by Michael Day and 22nice from SYDEX.|$|E
50|$|It is also {{possible}} to run the kernel in a Win32 process in a software I/O <b>emulation</b> <b>mode,</b> allowing easy application development {{without the need for}} physical hardware. An example is included for MinGW compiler.|$|E
50|$|The {{model of}} the {{physical}} system is constructed separately from the control logic being tested. The {{model of the}} physical system is passive and makes no decisions. The physical model reacts to the decisions made by the control logic {{in the same manner}} as the real system would.An emulation model will operate in both <b>emulation</b> and simulation <b>modes</b> with the addition of the control strategy to the model.|$|R
50|$|Windows NT and {{the systems}} based on it (e.g. Windows XP and Windows Vista) are {{not based on}} MS-DOS, but use a virtual machine, NTVDM, to handle the DOS API. NTVDM works by running a DOS program in virtual 8086 <b>mode</b> (an <b>emulation</b> of real <b>mode</b> within {{protected}} mode available on 80386 and higher processors). NTVDM supports the DOS 5.0 API. DOSEMU for Linux uses a similar approach.|$|R
50|$|Hardware {{requirements}} are largely game-dependent. The performance bottleneck {{in most cases}} is the CPU rather than the GPU. This is especially the case in software mode, in which only the CPU is used for <b>emulation.</b> In hardware <b>mode,</b> the GPU emulates the graphics, but can still be a bottleneck if the internal resolution is set too high. Some games may also run slower due to unoptimized graphics code or weak video cards.|$|R
5000|$|Floppy <b>emulation</b> <b>mode</b> {{the boot}} {{information}} {{is stored in}} an image file of a FAT-formatted floppy disk, which is loaded from the CD and then behaves as a virtual floppy disk. This mode uses SYSLINUX.|$|E
50|$|The 80960Jx is a {{processor}} for embedded applications. It features 32-bit multiplexed address/data bus, instruction and data cache, 1K on-chip RAM, interrupt controller and two independent 32-bit timers. The 80960Jx’s testability features included ONCE (on-circuit <b>emulation)</b> <b>mode</b> and boundary scan (JTAG).|$|E
50|$|With the {{additional}} Compatibility Feature hardware and Compatibility Support software under DOS/360, the IBM 1401/1440/1460 object programs could be {{run in the}} <b>emulation</b> <b>mode,</b> {{with little or no}} reprogramming. Many installations included the compatibility feature, allowing older programs to be run.|$|E
50|$|The Linux framebuffer (fbdev) is {{a graphic}} hardware-independent {{abstraction}} layer, which was originally implemented {{to allow the}} Linux kernel to emulate a text console on systems such as the Apple Macintosh {{that do not have}} a text-mode display. Now it offers a kernel space text <b>mode</b> <b>emulation</b> on any platform. Its advantage over (currently unmaintained) SVGATextMode is a reliance and better hardware compatibility. It also permits to overpass all technical restrictions of VGA text modes.|$|R
40|$|We {{present the}} {{internals}} of QEMU, a fast machine emulator using an original portable dynamic translator. It emulates several CPUs (x 86, PowerPC, ARM and Sparc) on several hosts (x 86, PowerPC, ARM, Sparc, Alpha and MIPS). QEMU supports full system emulation {{in which a}} complete and unmodified operating system is run in a virtual machine and Linux user <b>mode</b> <b>emulation</b> where a Linux process compiled for one target CPU can be run on another CPU. ...|$|R
50|$|Many SATA {{controllers}} offer {{selectable modes}} of operation: legacy Parallel ATA <b>emulation,</b> standard AHCI <b>mode</b> (also known as native mode), or vendor-specific RAID (which generally enables AHCI {{in order to}} take advantage of its capabilities). Intel recommends choosing RAID mode on their motherboards (which also enables AHCI) rather than AHCI/SATA mode for maximum flexibility. Legacy mode is a software backward-compatibility mechanism intended to allow the SATA controller to run in legacy operating systems which are not SATA-aware or where a driver does not exist to make the operating system SATA-aware.|$|R
