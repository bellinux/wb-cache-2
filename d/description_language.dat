5119|3332|Public
5|$|Adobe Systems is an American {{computer}} software company headquartered in San Jose, California. In 1982, John Warnock and Charles Geschke left Xerox PARC and established Adobe Systems {{to develop and}} sell the PostScript page <b>description</b> <b>language.</b> Apple Computer licensed PostScript in 1985 for use in its LaserWriter printers, which helped spark the desktop publishing revolution. The company has acquired 25companies, purchased stakes in 5 companies, and divested 6companies, {{most of which were}} software companies. Of the companies that Adobe Systems has acquired, 18 were based in the United States. Adobe Systems has not released the financial details for most of these mergers and acquisitions.|$|E
25|$|The {{invariance}} theorem follows: Given any <b>description</b> <b>language</b> L, {{the optimal}} <b>description</b> <b>language</b> {{is at least}} as efficient as L, with some constant overhead.|$|E
25|$|The {{first part}} {{describes}} another <b>description</b> <b>language.</b>|$|E
40|$|Automated use of {{electronic}} services calls for comprehensive service <b>description</b> <b>languages.</b> A couple of <b>description</b> <b>languages</b> {{have been developed}} so far each with a specific focus. We distinguish three different layers, syntactic, semantic, and resource <b>description</b> <b>languages.</b> In this paper we provide a condensed summary of service <b>description</b> <b>languages</b> of all three layers {{as well as of}} such languages that incorporate multiple concepts. The combination of syntactic, semantic and resource <b>description</b> <b>languages</b> is the main precondition in order to support the process of automated service provisioning as well as to implement reasonable billing and pricing functionality. 1...|$|R
40|$|During last decades {{substantial}} efforts {{spent in}} field of developing hardware <b>description</b> <b>languages.</b> For discrete circuit simulation {{progress has been}} achieved quite long time ago with developing of VHDL and Verilog hardware <b>description</b> <b>languages.</b> The other situation is in analog realm. Meanwhile SPICE input forma...|$|R
5000|$|Extending {{hardware}} <b>description</b> <b>languages</b> including VHDL and Verilog ...|$|R
25|$|VHDL: VHSIC {{hardware}} <b>description</b> <b>language,</b> where VHSIC {{stands for}} very-high-speed integrated circuit.|$|E
25|$|There {{are some}} {{description}} languages which are optimal, {{in the following}} sense: given any description of an object in a <b>description</b> <b>language,</b> said description {{may be used in}} the optimal <b>description</b> <b>language</b> with a constant overhead. The constant depends only on the languages involved, not on the description of the object, nor the object being described.|$|E
25|$|Music Macro Language (MML) is a music <b>description</b> <b>language</b> used in {{sequencing}} {{music on}} computer and video game systems.|$|E
40|$|We {{present a}} method to hierarchically {{describe}} combinatorial and sequential circuits in the Boyer-Moore logic. The description style resembles the style of traditional hardware <b>description</b> <b>languages</b> and should look quite familiar to hardware designers. In addition it allows an easy translation to existing hardware <b>description</b> <b>languages.</b> status: publishe...|$|R
40|$|Over {{the last}} few years, {{architecture}} <b>description</b> <b>languages</b> (ADLs) have become both progressively more expressive and widespread. While some ADLs have formally defined semantics, most are still informally specified. In this position paper we present an approach to modeling architecture <b>description</b> <b>languages</b> based on views. Our approach is based on partitioning and formalizing each semantically independent concept, or view, represented in an ADL. Along with the approach, we discuss three practical applications of our model, namely ADL comparison, architecture analysis, and component selection. Keywords: Architectural <b>description</b> <b>languages</b> (ADLs), architectural views, formal models, theory-model paradigm, object-oriented notations. 1 Introduction Within the software architecture community there has been significant emphasis on developing more expressive means of describing architectural designs. Much of the work {{has been focused on}} developing new architecture <b>description</b> <b>languages</b> (AD [...] ...|$|R
5000|$|Overview of RESTful API <b>Description</b> <b>Languages</b> {{including}} RAML, WADL, WSDL, {{and others}} ...|$|R
25|$|ELLA - a {{hardware}} <b>description</b> <b>language</b> and support toolset. Developed by the Royal Signals and Radar Establishment during the 1980s and 1990s.|$|E
25|$|BPEL {{follows the}} {{orchestration}} paradigm. Choreography {{is covered by}} other standards, such as WSCI (Web Services Choreography Interface) and (Web Services Choreography <b>Description</b> <b>Language).</b>|$|E
25|$|More formally, the {{complexity}} of a string is {{the length of the}} shortest possible description of the string in some fixed universal <b>description</b> <b>language</b> (the sensitivity of complexity relative to the choice of <b>description</b> <b>language</b> is discussed below). It can be shown that the Kolmogorov complexity of any string cannot be more than a few bytes larger than the length of the string itself. Strings like the abab example above, whose Kolmogorov complexity is small relative to the string's size, are not considered to be complex.|$|E
5000|$|Register-transfer level - a similar, but distinct, {{concept in}} {{hardware}} <b>description</b> <b>languages</b> ...|$|R
40|$|Knowledge of {{hardware}} <b>description</b> <b>languages</b> {{is an important}} element in the educational background of both undergraduate and graduate electrical and computer engineering students. However, {{the manner in which they}} are exposed to hardware <b>description</b> <b>languages</b> should differ because of the different level of maturity of the student populations. Graduate students are mature intellectually and thus can handle extensive exposure to the underlying abstraction of the language. Undergraduates have more difficulty handling abstraction and thus should be given controlled doses of the language. This paper describes a multilevel approach to teaching hardware <b>description</b> <b>languages</b> that accounts for these differences. Tool sets used in both courses are also described. ...|$|R
5000|$|Overview of RESTful API <b>Description</b> <b>Languages</b> {{including}} OpenAPI Specification, RAML, WADL, WSDL, and others.|$|R
25|$|Warnock and Geschke {{considered}} various business options {{including a}} copy-service business and a turnkey system for office printing. Then {{they chose to}} focus on developing specialized printing software, and created the Adobe PostScript page <b>description</b> <b>language.</b>|$|E
25|$|September 12, 2002: {{acquired}} Co-Design Automation, Inc. USA. Co-Design {{pioneered the}} Superlog language, a superset {{of the popular}} Verilog hardware <b>description</b> <b>language,</b> extending its capabilities into verification and system design. Superlog {{formed the basis of}} The SystemVerilog language standardized by Accelera in 2003.|$|E
25|$|Adobe {{was founded}} in December 1982 by John Warnock and Charles Geschke, who {{established}} the company after leaving Xerox PARC {{in order to develop}} and sell the PostScript page <b>description</b> <b>language.</b> In 1985, Apple Computer licensed PostScript for use in its LaserWriter printers, which helped spark the desktop publishing revolution.|$|E
50|$|Supporting ADLs {{interoperability}} {{and change}} propagation is intrinsically complex. Furthermore, {{the lack of}} automation does not allow the easy addition of new <b>description</b> <b>languages,</b> and does not guarantee change propagation to multiple models in {{a finite number of}} steps. In general, changes occurring in an architecture model have a strong impact on all the other related architecture models (each of them possibly conforming to different architecture <b>description</b> <b>languages).</b> In order to keep models in a consistent state, changes need to be propagated from the updated model to all the others. When dealing with multiple architecture <b>description</b> <b>languages,</b> propagating changes may be a complex task; such a task is inevitable and requires to be managed by a dedicated approach.|$|R
30|$|This section reviews {{important}} {{related work}} {{in the area of}} semantic <b>description</b> <b>languages</b> and embedded component models.|$|R
50|$|In {{the past}} {{he also worked}} on formal specification, {{interactive}} proof, automated verification and proof <b>description</b> <b>languages.</b>|$|R
25|$|Though the SVG Specification {{primarily}} {{focuses on}} vector graphics markup language, its design includes the basic capabilities of a page <b>description</b> <b>language</b> like Adobe's PDF. It contains provisions for rich graphics, and {{is compatible with}} CSS for styling purposes. SVG has the information needed to place each glyph and image in a chosen location on a printed page.|$|E
25|$|PostScript is a page <b>description</b> <b>language</b> run in an {{interpreter}} to generate an image, a process requiring many resources. It can handle graphics and standard features of programming languages such as if and loop commands. PDF is {{largely based on}} PostScript but simplified to remove flow control features like these, while graphics commands such as lineto remain.|$|E
25|$|Since {{the rise}} of {{reconfigurable}} programmable logic devices, sharing of logic designs has been a form of open-source hardware. Instead of the schematics, hardware <b>description</b> <b>language</b> (HDL) code is shared. HDL descriptions are commonly used to set up system-on-a-chip systems either in field-programmable gate arrays (FPGA) or directly in application-specific integrated circuit (ASIC) designs. HDL modules, when distributed, are called semiconductor intellectual property cores, or IP cores.|$|E
50|$|Architecture <b>description</b> <b>languages</b> (ADLs) {{are used}} in several disciplines: system engineering, {{software}} engineering, and enterprise modelling and engineering.|$|R
40|$|During {{the past}} years, {{a lot of}} user {{interface}} <b>description</b> <b>languages,</b> most of them based on XML, have been introduced. At the same time, the use of formal ontologies for describing user interfaces has been discussed {{for a number of}} use cases. This paper discusses the differences between a formal ontologies and user interface <b>description</b> <b>languages</b> and and points out how both research directions can benefit from each other...|$|R
50|$|While {{the term}} {{refactoring}} originally referred exclusively to refactoring of software code, {{in recent years}} code written in hardware <b>description</b> <b>languages</b> (HDLs) has also been refactored. The term hardware refactoring {{is used as a}} shorthand term for refactoring of code in hardware <b>description</b> <b>languages.</b> Since HDLs are not considered to be programming languages by most hardware engineers, hardware refactoring is to be considered a separate field from traditional code refactoring.|$|R
25|$|Although {{this was}} a {{ground-breaking}} solution employing over 20,000 ligatures (individually designed character combinations) which provided the most beautiful results and allowed newspapers such as Pakistan's Daily Jang to use digital typesetting instead of an army of calligraphers, it suffered from two problems in the 1990s: (a) its non-availability on standard platforms such as Windows or Mac OS, and (b) the non-WYSIWYG nature of text entry, whereby the document had to be created by commands in Monotype's proprietary page <b>description</b> <b>language.</b>|$|E
25|$|The Smalltalk language, {{which was}} {{developed}} originally on the Alto and became quite {{popular in the}} early 1980s, may have been instrumental in spreading the style outside PARC. Camel case was also used by convention for many names in the PostScript page <b>description</b> <b>language</b> (invented by Adobe Systems founder and ex-PARC scientist John Warnock), {{as well as for}} the language itself. In addition, Niklaus Wirth, the inventor of Pascal, came to appreciate camel case during a sabbatical at PARC and used it in Modula, his next programming language.|$|E
25|$|Synopsys, Inc., an American company, is {{the leading}} company by sales in the Electronic Design Automation industry. Synopsys' first and best-known product is Design Compiler, a logic-synthesis tool. Synopsys offers {{a wide range of}} other {{products}} used in the design of an application-specific integrated circuit. Products include logic synthesis, behavioral synthesis, place and route, static timing analysis, formal verification, hardware <b>description</b> <b>language</b> (SystemC, SystemVerilog/Verilog, VHDL) simulators as well as transistor-level circuit simulation. The simulators include development and debugging environments which assist {{in the design of the}} logic for chips and computer systems.|$|E
40|$|In {{previous}} work, {{we presented}} DDC α, a semantic {{framework for understanding}} Data <b>Description</b> <b>Languages,</b> a class of domain-specific languages for declaratively describing data formats {{for the purpose of}} automatically constructing format-specific data-processing tools. However, our initial work on DDC α told {{only a fraction of the}} semantic story concerning data <b>description</b> <b>languages.</b> Many data <b>description</b> <b>languages</b> not only provide parsers, but also other tools. Amongst the most common auxiliary tools are printers, as reliable communication between programs depends upon both input (parsing) and output (printing). In this work, we have defined the semantics of printers for DDC α, thereby specifying more completely the relationship between raw data and in-memory data, for any given format described in DDC α. We also prove a collection of theorems for the new semantics that serve as duals to our theorems concerning parsing. This new printing semantics has many of the same practical benefits as our older parsing semantics: We can use it as a check against the correctness of our printer implementations and as a guide for the implementation of future data <b>description</b> <b>languages...</b>|$|R
50|$|Examples of {{fine-grained}} task-parallel languages can {{be found}} in the realm of Hardware <b>Description</b> <b>Languages</b> like Verilog and VHDL.|$|R
50|$|Stratix FPGAs are {{typically}} programmed in hardware <b>description</b> <b>languages</b> such as VHDL or Verilog, using the Altera Quartus computer software.|$|R
