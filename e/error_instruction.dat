2|83|Public
40|$|The present {{descriptive}} investigation had {{the primary}} objective of assessing the manner and {{extent to which the}} topic of medication error is included in the curricula of schools of pharmacy in the United States. A cover letter and survey were sent to 82 schools of pharmacy in April 2001. Thirty-six surveys were returned (48 percent response). Five returned surveys were incomplete. The quality and quantity of medication <b>error</b> <b>instruction</b> in pharmacy curricula varied significantly. A lack of standardization and inclusion of key domains was observed. Given the well-documented magnitude and costs of medication errors, it seems imperative that schools of pharmacy incorporate into curricula a meaningful and consistent amount of instruction pertaining to medication errors. This study illustrates the need for schools of pharmacy to articulate and standardize a minimal level of medication <b>error</b> <b>instruction</b> for pharmacy curricula and provides a sample curriculum that could be used...|$|E
40|$|Testing is a {{difficult}} process that becomes more difficult with scaling. With smaller and faster devices, tolerance for errors shrinks and devices may act correctly under certain condition and not under others. As such, hard errors may exist but are only exercised by very specific machine state and signal pathways. Targeting these errors is difficult, and creating test cases that cover all machine states and pathways is not possible. In addition, new complications during burn-in may mean latent hard errors are not exposed in the fab and reach the customer before becoming active. To address this problem, we propose an architecture we call BlackJack that allows hard errors to be detected using redundant threads running on a single SMT core. This technique provides a safety-net that catches hard errors that were either latent during test or just {{not covered by the}} test cases at all. Like SRT, our technique works by executing redundant copies and verifying that their resulting machine states agree. Unlike SRT, BlackJack is able to achieve high hard <b>error</b> <b>instruction</b> coverage by executing redundant threads on different front and backend resources in the pipeline. We show that for a 15 % performance penalty over SRT, BlackJack achieves 97 % hard <b>error</b> <b>instruction</b> coverage compared to SRT’s 35 %. ...|$|E
40|$|This study investigates how trainee {{cultural}} background interacts with training structure and <b>error</b> <b>instructions</b> to predict transfer of training. Previous research on training interventions relies largely on Western theories of learning, and few training techniques {{have been tested}} with samples outside of North America or Western Europe. The current research seeks to expand these perspectives to investigate the impact of different training interventions in face and dignity cultures, with a particular focus on how cultural differences in stress reactions affect training outcomes. Building on this foundation, I hypothesize that the match between trainee {{cultural background}} and training design elements will predict training effectiveness, as measured by training transfer. Specifically, trainees from dignity cultures are expected to benefit from training interventions with low structure and <b>error</b> encouragement <b>instructions.</b> In contrast, the same training design may be ineffective or even counterproductive for trainees from face cultures, who are hypothesized to benefit more from high structure training and <b>error</b> avoidant <b>instructions.</b> Further, I link culture-training match to physiological stress {{to suggest that this}} may be one mechanism through which the interaction between culture and training dimensions impacts training transfer. One study was conducted in which participants from dignity and face cultures (N = 212) were randomly assigned to training conditions varying on structure and <b>error</b> framing <b>instructions.</b> Participants were trained to perform a computer-based simulation, with heart rate and cortisol collected throughout the training intervention. Participants returned seven to 15 days after the training to complete transfer measures. The results showed the expected interactions between culture and training structure and between culture and <b>error</b> <b>instructions</b> for training transfer. Stress reactions did not mediate this effect as expected; in contrast, emotional control was the key explanatory mechanism. Implications for training design and implementation across cultures are discussed, along with possible extensions of this research...|$|R
40|$|Error {{management}} training explicitly allows participants to make er-rors. We {{examined the effects}} of <b>error</b> management <b>instructions</b> ("rules of thumb " designed to reduce the negative emotional effects of er-rors), goal orientation (learning goal, prove goal, and avoidance goal orientations) and attribute x treatment interactions on performance. A randomized experiment with 87 participants consisting of 3 training procedures for learning to work with a computer program was con-ducted: (a) error training with <b>error</b> management <b>instructions,</b> (b) er-ror training without error management instructions; and (c) a group that was prevented from making errors. Results showed that short-and medium-term performance (near and far transfer) was superior for participants of the error training that included <b>error</b> management <b>instructions,</b> compared with the two other training conditions. Thus, <b>error</b> management <b>instructions</b> were crucial for the high performance effects of error training. Prove and avoidance goal orientation inter-acted with training conditions. Errors appear in nearly every learning process because of insufficient knowledge and skills. Moreover, errors appear not just as a result of too little knowledge but also as a consequence of inappropriate goals and plans, interruptions during the action process, and inaccurate interpre...|$|R
50|$|They {{were convicted}} of murder, but have appealed the {{decision}} {{on the basis of}} an <b>error</b> in <b>instruction</b> on the definition of the word “appreciate” and “wrong”.|$|R
40|$|Low {{structure}} {{training that}} includes instructions {{about the benefits}} of errors typically enhances learning for college-student samples. Changes in abilities and skills that occur with age suggest that these findings may not necessarily generalize to working adults. Three training conditions, varying in structure and instructions, were examined in a sample of working-aged adults (N = 161, Mage= 39. 7 years). Significant main effects of condition, cognitive ability, and age were found for training performance. An age × cognitive ability × <b>error</b> management <b>instruction</b> interaction indicated that <b>error</b> management <b>instructions</b> in high structure training were beneficial for older learners, especially when higher in ability. The importance of examining aptitude–treatment interactions in training research with working-aged adults is highlighted...|$|R
40|$|In {{this paper}} we present {{software}} countermeasures {{specifically designed to}} counteract fault attacks during the execution of a software implementation of a cryptographic algorithm and analyze their efficiency. We propose two approaches {{that are based on}} the insertion of redundant computations and checks, which in their general form, are suitable for any cryptographic algorithm. In particular, we focus on selective instruction duplication, employed to detect single <b>errors,</b> <b>instruction</b> triplication to support also error correction, and parity checking to detect corruption of a stored value. We developed a framework to automatically add the desired countermeasure, and we support the possibility to apply the selected redundancy to either all the instructions of the cryptographic routine or restrict it to the most sensitiv...|$|R
5000|$|Processor <b>instruction</b> <b>error</b> {{detection}} (e.g. residue checking of results) with instruction retry e.g. alternative processor {{recovery in}} IBM mainframes, or [...] "Instruction replay technology" [...] in Itanium systems.|$|R
40|$|People {{working on}} a task can make errors along the way. How people deal with an error, however, depends {{on the type of}} error {{approach}} they apply. One approach, error management, focuses on increasing the positive and decreasing the negative consequences of errors. A second approach, error prevention, focuses on working faultlessly. In two experiments, we manipulated error approach through task instructions and measured on-task thoughts and off-task thoughts. In Experiment 1 (N = 78), error management resulted in more on-task thoughts, but no differences were found for off-task thoughts. Experiment 2 (N = 76) replicated the findings of Experiment 1, and further demonstrated that error management resulted in better analogical and adaptive transfer performance, and that these effects were mediated by on-task thoughts. Our findings point toward the benefits of <b>error</b> management <b>instructions</b> for people and organisations. Specifically, <b>error</b> management <b>instructions</b> make people more focused on the task during practice, as indicated by on-task thoughts, which in turn results in higher performance after practice...|$|R
40|$|This {{material}} provides documentation {{for users}} of the micro-data file of the 2000 National Ambulatory Medical Care Survey (NAMCS). The NAMCS is a national probability sample survey of visits to office-based physicians conducted by the National Center for Health Statistics, Centers for Disease Control and Prevention. It is {{a component of the}} National Health Care Survey which measures health care utilization across a variety of health care providers. Section I, "Description of the National Ambulatory Medical Care Survey, " includes information on the scope of the survey, the sample, field activities, data collection procedures, medical coding procedures, population estimates, and sampling errors. Section II provides technical information, including {{a detailed description of the}} contents of each data record by location, and a list of physician specialties represented in the survey. Section III contains marginal data and estimates for selected items on the data record. The appendixes contain sampling <b>errors,</b> <b>instructions</b> and definitions for completing the Patien...|$|R
50|$|The {{instruction}} set is variable-width and extensible, {{so that more}} encoding bits can always be added. Space for the 128-bit stretched version of the ISA was reserved, because 60 years of industry experience {{has shown that the}} most unrecoverable <b>error</b> in <b>instruction</b> set design is a lack of memory address space. , the 128-bit ISA remains undefined intentionally, because there is yet so little practical experience with such large memory systems.|$|R
40|$|We used an {{alternating}} treatments {{design to}} compare the effects of active student response error correction and no-response error correction during sight word instruction. Six students with developmental disabilities were provided one-to-one daily sight word instruction on eight sets of 20 unknown words. Each set of 20 words was divided randomly into two equal groups. Student <b>errors</b> during <b>instruction</b> on one group of words were immediately followed by the teacher modeling the word and the student repeating it (active student response <b>instruction).</b> <b>Errors</b> on the other group of words were immediately followed by the teacher modeling the word while the student attended to the word card (no-response instruction). For all 6 students, the active student response error-correction procedure resulted in more words read correctly during instruction, same-day tests, next-day tests, 2 -week maintenance tests, and generality tests (words read in sentences) ...|$|R
50|$|This <b>error</b> {{occurs because}} <b>Instruction</b> 2 reads Register 1 before Instruction 1 has committed/stored {{the result of}} its write {{operation}} to Register 1. So when Instruction 2 is reading the contents of Register 1, register 1 still contains 6, not 3.|$|R
40|$|In {{this paper}} we present {{software}} countermeasures {{specifically designed to}} counteract fault injection attacks during the execution of a software implementation of a cryptographic algorithm and analyze the efficiency of these countermeasures. We propose two approaches based on the insertion of redundant computations and checks, which in their general form are suitable for any cryptographic algorithm. In particular, we focus on selective instruction duplication to detect single <b>errors,</b> <b>instruction</b> triplication to support error correction, and parity checking to detect corruption of a stored value. We developed a framework to automatically add the desired countermeasure, and we support the possibility to apply the selected redundancy to either all the instructions of the cryptographic routine or restrict it to the most sensitive ones, such as table lookups and key fetching. Considering an ARM processor as a target platform and AES as a target algorithm, we evaluate the overhead of the proposed countermeasures while keeping the robustness of the implementation high enough to thwart {{most or all of}} the known fault attacks. Experimental results show that in the considered architecture, the solution with the smallest overhead is per-instruction selective doubling and checking, and that the instruction triplication scheme is a viable alternative if very high levels of injected fault resistance are required...|$|R
50|$|In a computer's memory system, a soft <b>error</b> changes an <b>instruction</b> in {{a program}} or a data value. Soft errors {{typically}} can be remedied by cold booting the computer. A soft error will not damage a system's hardware; the only damage is to the data that is being processed.|$|R
40|$|Error {{management}} training is an intervention that capitalizes on the cognitive benefits of making errors for transfer of training, while minimizing {{the negative effects}} of errors on motivation. This study examined the effects of the structural and instructional components of error {{management training}} within a resource allocation framework, and investigated the role of distal predictors (cognitive ability and learning goal orientation) and proximal predictors (self-regulatory processes: emotion control, metacognitive activity, and self-efficacy) on training outcomes. Participants (N = 161, mean age = 39. 7) were recruited from the community and were trained on computer database software in one of three conditions: high structure + <b>error</b> encouragement <b>instructions,</b> high structure + no instructions, or low structure + <b>error</b> encouragement <b>instructions.</b> Training effectiveness was assessed on multiple indices of learning (task performance, knowledge structures, and self-efficacy), measured immediately following training and after a 1 -week retention interval. Key findings include an age x cognitive ability x effect of instruction interaction for training performance, indicating that individual differences should be considered when designing training to optimize transfer. Low structure training was found to enhance immediate task performance for all learners, but this effect did not persist over time. In addition, emotion control fully mediated the relationship between learning goal orientation and self-efficacy for knowledge retention in the error encouragement training conditions, as well as interacting with the effect of instruction to predict task performance...|$|R
50|$|Tillman {{appealed the}} {{conviction}} in the Supreme Court of Connecticut in 1991 (220 Conn. 487, 600 A.2d 738). The Supreme Court upheld the conviction {{finding that the}} jury array was not unconstitutionally assembled, alleged <b>errors</b> in jury <b>instruction</b> did not warrant a new trial and certain field notes were not improperly excluded from evidence.|$|R
40|$|Understanding and {{following}} verbal instructions allows quick {{transfer of knowledge}} about acting in the world. This paper presents a study of how often and how accurately traits of the route are reported in route instructions, and how these characteristics affect instruction-led route navigation. Route navigation {{is found to be}} relatively unaffected by single explicit <b>errors</b> in the <b>instructions.</b> <b>Errors</b> and omissions in route instructions can be handled by both navigation and dialogue strategies. An implemented software agent, MARCO, models the spatial language of route instructions and applies the model {{in the context of the}} environment to guide navigation to a distant destination in an unfamiliar world, past the perceptual horizon. Performance is evaluated against a corpus of natural language route instructions and compared against people performing the same task. MARCO tests navigation strategies for following imperfect instructions and lays the groundwork for dialogue systems that can communicate rationally about route instructions. ...|$|R
2500|$|Magnotta {{filed an}} appeal for the {{convictions}} to be annulled and new trial ordered. The appeal was {{filed with the}} Quebec Court of Appeal by Magnotta's defence counsel Luc Leclair, citing judicial <b>error</b> in jury <b>instruction.</b> The appeal further claimed that the [...] "verdicts are unreasonable and unsupported by the evidence and the instructions." [...] Magnotta withdrew his appeal on February 18, 2015.|$|R
2500|$|The [...] "exception table" [...] ({{interrupt}} vector table interrupt vector addresses) {{is fixed}} at addresses 0 through 1023, permitting 256 32-bit vectors. The first vector (RESET) consists of 2 vectors, namely the starting stack address, and the starting code address. Vectors 3 through 15 {{are used to}} report various errors: bus error, address <b>error,</b> illegal <b>instruction,</b> zero division, CHK and CHK2 vector, privilege violation (to block privilege escalation), and some reserved vectors that became line 1010 emulator, line 1111 emulator, and hardware breakpoint. Vector 24 starts the real interrupts: spurious interrupt (no hardware acknowledgement), and level 1 through level 7 autovectors, then the 16 TRAP vectors, then some more reserved vectors, then the user defined vectors.|$|R
40|$|The secure hash {{function}} SHA- 256 {{is a function}} on bit strings. This means that its restriction to the bit strings of any given length can be computed by a finite instruction sequence that contains only instructions to set and get the content of Boolean registers, forward jump instructions, and a termination instruction. We describe such instruction sequences for the restrictions to bit strings of the different possible lengths by means of uniform terms from an algebraic theory. Comment: 14 pages; several minor errors corrected; counting <b>error</b> corrected; <b>instruction</b> sequence fault repaired; misunderstanding cleared up; a minor error corrected; 15 pages, presentation improved, a minor error corrected. preliminaries have text overlap with arXiv: 1301. 329...|$|R
5000|$|The [...] "exception table" [...] ({{interrupt}} vector table interrupt vector addresses) {{is fixed}} at addresses 0 through 1023, permitting 256 32-bit vectors. The first vector (RESET) consists of 2 vectors, namely the starting stack address, and the starting code address. Vectors 3 through 15 {{are used to}} report various errors: bus error, address <b>error,</b> illegal <b>instruction,</b> zero division, CHK and CHK2 vector, privilege violation (to block privilege escalation), and some reserved vectors that became line 1010 emulator, line 1111 emulator, and hardware breakpoint. Vector 24 starts the real interrupts: spurious interrupt (no hardware acknowledgement), and level 1 through level 7 autovectors, then the 16 TRAP vectors, then some more reserved vectors, then the user defined vectors.|$|R
40|$|Computer-based {{procedures}} {{were used to}} examine oral naming and matching-to-sample performances in an adult with a head injury. Relatively few errors occurred when pictures were (a) named, (b) matched to dictated names presented simultaneously, (c) matched to dictation after a delay, and (d) matched to identical pictures presented simultaneously. More errors occurred on delayed than on simultaneous identity matching. On delayed matching trials, fewer <b>errors</b> occurred when <b>instructions</b> to name the samples were given...|$|R
40|$|Jakob Lange, 1 Philipp Richard, 1 Nick Bradley 2 1 Ypsomed AG, Burgdorf, Switzerland; 2 BERGO UK, Bearsden, Glasgow, UK Abstract: This article {{presents}} a late-stage formative usability study of an autoinjector platform device. Such devices {{are used for}} the subcutaneous delivery of biopharmaceuticals, primarily for self-administration by the patient. Previous usability work on autoinjectors {{reported in the literature}} has been specific to single indications. This study was instead conducted with a broad user population, defined to represent user characteristics across a range of indications. The goals of the study were to evaluate whether users could use the devices safely and effectively, and could understand the instructions for use (IFU) as well as the accompanying training. Further objectives were to capture any usability issues and to obtain participants&# 39; subjective ratings on the IFU and training as well as the confidence and comfort in using the device. A total of 43 participants in 5 groups received training and performed simulated injections either into an injection pad or a mannequin. All participants were able to successfully use the device. The device was well appreciated by all users, with a reported degree of confidence in using the device of 98 %, of user comfort of 93 %, and of comprehensibility of IFU and training of 98 %. These values are higher than other comparable results reported in the literature. The presence of both audible and visible feedback during injection was seen to be a significant factor contributing to injection success. The observation that the device can be safely and efficiently used by all tested user groups provides confidence that the device and IFU in their current form will pass future summative testing in specific applications. Keywords: human factors engineering, autoinjector, handling study, use <b>error,</b> <b>instructions</b> for use, YpsoMate&trade...|$|R
40|$|Major {{sources of}} {{transient}} errors in microprocessors today include noise and single event upsets. As feature sizes and voltages {{are reduced to}} create faster, more efficient, and computationally more powerful processors, these errors will increase significantly. We show that (contrary to conventional wisdom) error correction codes (ECC) can be efficiently utilized to handle these <b>errors</b> as <b>instructions</b> are being processed through the microprocessor pipeline. We will analyze some of the tradeoffs involved in a hardware implementation of ECC for the instruction queue with respect to performance, power, area, and reliability. Specifically, for an environment with high error rates, we show that we can correct all single bit errors with a negligible drop in performance. Our approach can be generalized to other data structures within the microprocessor, including the register file and reorder buffer...|$|R
40|$|Teachers {{and school}} leaders have the {{responsibility}} to improve academic achievement, but lack research-based corrective instructional strategies linked to multiple-choice assessments. Dr. Sandy Sanford's "Just Say Know" <b>error</b> analysis/corrective <b>instruction</b> method was studied via experimental design with two groups of third grade student subjects and their teachers. Two trials were conducted with Harcourt's California Math series. Quantitative data correlated this method with statistically significant achievement gains in both trials (p <. 05). Qualitative data indicated that participating teachers support the "Just Say Know" method and will continue to use it. The researcher recommends further larger scale study of the method, and that school leaders allocate time for teachers to study and implement this corrective instruction method to improve student learning. KEYWORDS: corrective instruction; education, elementary; educational leadership; instructional strategies; item analysis; mathematics, elementary; multiple-choice examination...|$|R
50|$|The {{result of}} lzcnt is 31 minus {{the result of}} the bsr (bit scan reverse), except when the input is 0. lzcnt {{produces}} a result of 32, while bsr produces an undefined result (and sets the zero flag). The encoding of lzcnt is similar enough to bsr that if lzcnt is performed on a CPU not supporting it such as Intel CPU's prior to Haswell, it will perform the bsr operation instead of raising an invalid <b>instruction</b> <b>error.</b>|$|R
40|$|This paper {{presents}} the results of an extensive experimental study of bit-flip <b>errors</b> in <b>instruction</b> set architecture registers and main memory locations. Comprising more than two million fault injection experiments conducted with thirteen benchmark programs, the study provides insights on whether it is necessary to consider double bit-flip errors in dependability benchmarking experiments. The results show that the proportion of silent data corruptions in the program output, is almost the same for single and double bit errors. In addition, we present detailed statistics about the error sensitivity of different target registers and memory locations, including bit positions within registers and memory words. These show that the error sensitivity varies significantly between different bit positions and registers. An important observation is that injections in certain bit positions always have the same impact regardless of when the error is injected...|$|R
40|$|Abstract-Recovery {{procedures}} involving time redundancy in {{the form}} of instruction retries and program rollbacks have proved to be very effective against transient failures in computer systems. A class of such recovery procedures is presented and analyzed here, and the parameters of each procedure are determined so that the system's operation is optimized. These procedures are then compared in order to select the most appropriate one for given system parameters. Index Terms-Checkpoint, error latency, <b>error</b> recovery procedures, <b>instruction</b> retry, intermittent faults, permanent faults, program rollback. I...|$|R
50|$|In the OECD's Programme for International Student Assessment 2003, which {{emphasizes}} problem solving, American 15-year-olds ranked 24th of 38 in mathematics, 19th of 38 in science, 12th of 38 in reading, and 26th of 38 in problem solving. In the 2006 assessment, the U.S. ranked 35th out of 57 {{in mathematics and}} 29th out of 57 in science. Reading scores could not be reported due to printing <b>errors</b> in the <b>instructions</b> of the U.S. test booklets. U.S. scores were behind those of most other developed nations.|$|R
40|$|We used an {{alternating}} treatments {{design to}} compare the effects of two procedures for correcting student errors during sight word drills. Each of the 5 participating students with developmental disabilities was provided daily one-to-one instruction on individualized sets of 14 unknown words. Each week's new set of unknown words was divided randomly into two groups of equal size. Student <b>errors</b> during <b>instruction</b> were immediately followed by whole-word error correction (the teacher stated the complete word and the student repeated it) for one group of words and by phonetic-prompt error correction (the teacher provided phonetic prompts) for the other group of words. During instruction, all 5 students read correctly {{a higher percentage of}} whole-word corrected words than phonetic-prompt corrected words. Data from same-day tests (immediately following instruction) and next-day tests showed the students learned more words taught with whole-word error correction than they learned with phonetic-prompt error correction...|$|R
40|$|Many {{programs}} exhibit {{application level}} error resilience which allows certain subcomputations to execute in an imprecise, yet energy efficient manner, potentially yielding significant overall energy savings without sacrificing end-to-end quality. In this thesis we identify one fundamental problem {{that must be}} addressed to realize these energy benefits: even in applications with a large degree of error resilience, <b>error</b> resilient <b>instructions</b> are interleaved with instructions that must be executed precisely at a fine-grained level (about every seven instructions). This interleaving prohibits any energy savings due to the significant costs associated with switching between the modes, typically via voltage scaling, which may require hundreds to thousands of cycles to transition between levels. We propose a novel execution model for single-core architectures that reduces total switching by deferring execution of instructions requiring mode switches, thereby aggregating instructions of the same energy mode and reducing the number of mode switches. Deferre...|$|R
40|$|This letter {{presents}} {{the design and}} evaluation of a coarse grained reconfigurable array, hardened against radiation induced transient errors. The architecture consists of an 8 × 8 array of reconfigurable cells, each provided with a built-in soft <b>error</b> detection and <b>instruction</b> roll-back control. We also present the communication management scheme between the processors {{in the presence of}} varying degrees of single event upsets. The impact on throughput while evaluating an 8 × 8 discrete wavelet transform (DWT) and 8 × 8 discrete cosine transform (DCT) are also presented...|$|R
40|$|Jakob Lange, 1 Philipp Richard, 1 Nick Bradley 21 Ypsomed AG, Burgdorf, Switzerland; 2 Bergo, Glasgow, United KingdomAbstract: This article {{presents}} a late-stage formative usability {{study of a}} pen-injector platform device. Such devices are used for the subcutaneous delivery of biopharmaceuticals, primarily for self-administration by the patient. The {{study was conducted with}} a broad user population, defined to represent user characteristics across a range of indications. The goals of the study were to confirm that the pen could be used without recurring patterns of use errors leading to hazardous situations, to evaluate the comprehension of the instructions for use (IFU), and to determine if training is necessary. In the study, a total of 36 participants in six groups (health care providers, caregivers, adolescents, diabetics with retinopathy, diabetics with neuropathy, and patients with arthritis) each read the IFU, prepared the device, and performed two simulated injections into an injection pad. Any use errors, near misses, or deviations from the IFU procedure were recorded. The overall success rate (injection completed by the participant without need for assistance) was 94 % for the first and 100 % for the second injection. Ninety-two percent of the participants reported that they felt confident using the device, 100 % found the IFU helpful, and 75 % found the device positively comfortable to use. Overall, a total average of 3. 35 deviations and errors per user and injection were recorded (there were no near misses). Subtracting the errors without any potential for negative consequences for the injection or the user (trivial deviations), as well as those related to attaching and removing the pen needle (independent of the design of the pen itself), led to an average of 1. 31 potentially relevant deviations per user and injection. It was concluded that the pen injector together with the IFU could be safely and efficiently used by all user groups without any training, and thus that the device and IFU in their current form are well suited for use in a range of specific applications. Keywords: human-factor engineering, injection pen, handling study, user <b>error,</b> <b>instructions</b> for use, UnoPen&trade...|$|R
40|$|We have {{analyzed}} {{three factors}} affecting user satisfaction and system performance using an SLS {{implemented in the}} ATIS domain. We have found that: (I) trade-offs between speed and accuracy have different implications for user sat-isfaction; (2) recognition performance improves over time, {{at least in part}} because of a reduction in sentence perplex-ity; and (3) hyperarticulation increases recognition <b>errors,</b> and while <b>instructions</b> can reduce this behavior, they do not result in improved recognition performance. We conclude that while users may adapt o some aspects of an SLS, cer-tain types of user behavior may require technological solu-tions. 1...|$|R
40|$|Language Children {{often have}} {{difficulty}} developing debugging skills. This may {{be attributable to}} inctructional methods that discourage reflection on one's reasoning <b>errors.</b> Logo <b>instruction</b> may encourage such reflectic. n. Two studies examined Logo's effect on confirmation bias [...] tne tendency to select confirming over disconfirming information to prove an hypothesis. One study viewed elementary students while te second investigated college students A third study investigate- 7 cafirmation bias developmentally in grades 4 through 12. While Logo programming did not significantly effect deductive reasoning, elementary students exhibited an unusually high tendency to be disconfirmerL while college students were confirmers. A {{significant difference was found}} in that twelfth graders more frequently selected confirming information than did fourth graders. This suggests that elementary students may be less resistant to learning self-reflective deougging skills than older students. Also, programming instructors may need to generate specific strategies to address confirmation bias in older students at the secondary school and universtty levels. (Author) ***************A***********************A********A***. ***************** Reproductions supplied by EDRS are the best that can be made * * from the original document. * *************N********************************x** 1. ********************...|$|R
