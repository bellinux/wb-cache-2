0|978|Public
5000|$|The trigger, {{which is}} also known as logic bomb, is the {{compiled}} version that could be activated any time an <b>executable</b> <b>file</b> with the <b>virus</b> is run that determines the event or condition for the malicious [...] "payload" [...] to be activated or delivered such as a particular date, a particular time, particular presence of another program, capacity of the disk exceeding some limit, or a double-click that opens a particular file.|$|R
40|$|Embedding of <b>executable</b> <b>file</b> in {{encrypted}} image encrypts {{the original}} uncompressed image using {{advanced encryption standard}} algorithm with an encryption key. Then, the <b>executable</b> <b>file</b> sender will compress the least significant bits of the encrypted image using an embedding key to create sparse space to accommodate the <b>executable</b> <b>file.</b> Using embedding key the <b>executable</b> <b>file</b> will be embedded into created space. With an encrypted image containing the embedded <b>executable</b> <b>file,</b> if the receiver has encryption key, he can decrypt the received data to obtain an image not similar to the original one and cannot extract the <b>executable</b> <b>file.</b> If the receiver has both the embedding key and encryption key, he can extract the <b>executable</b> <b>file</b> and recover the original content without any error by exploiting the spatial correlation in natural image. Keywords [...] Image encryption, Image recovery, <b>Executable</b> <b>file</b> hiding. I...|$|R
40|$|With {{the rapidly}} {{increasing}} complexity of computer {{systems and the}} sophistication of hacking tools and techniques, there is a crucial need for computer forensic analysis techniques. Very few techniques exist to support forensic analysis of unknown <b>executable</b> <b>files.</b> The existing techniques primarily inspect <b>executable</b> <b>files</b> to detect known signatures or are based on metadata information. A key goal of such forensic investigation is to identify malicious <b>executable</b> <b>files</b> that hackers might have installed in a targeted system. Finding such malware in a compromised system is difficult because {{it is hard to}} identify the purpose of the fragments of <b>executable</b> <b>files.</b> In this paper, we present a similarity-based technique that analyzes targeted <b>executable</b> <b>files</b> to identify a malware present in a compromised system. The technique involves assigning a similarity value to the fragments of <b>executable</b> <b>files</b> present in a compromised hard disk against a set of source files. We present some results based on the comparison of assembly instruction sequences of well-known hacking tools with those of various <b>executable</b> <b>files,</b> and suggest various ways to reduce the false positives...|$|R
5000|$|PE: Explorer: it {{lets you}} open and edit <b>executable</b> <b>files</b> called PE <b>files</b> (portable <b>executable</b> <b>files).</b> This {{includes}} [...]EXE, [...]DLLs and other less common file types.|$|R
5000|$|<b>Executable</b> <b>file.</b> This {{distribution}} contains <b>executable</b> <b>files</b> for Windows, Linux and Mac OS. In this case, users do {{not have}} to separately install and download anything else.|$|R
50|$|Custom-made styles {{can be used}} using {{different}} methods, by means of manual replacement and automation by <b>executable</b> <b>files.</b> Many popular and freely distributed theme-patching <b>executable</b> <b>files</b> can be found online.|$|R
5000|$|To {{use this}} {{makefile}} {{to create the}} <b>executable</b> <b>file</b> called edit, type [...] To use this makefile to delete the <b>executable</b> <b>file</b> and all the object files from the directory, type [...]|$|R
50|$|Recently, {{competitions}} {{have been}} held for procedural rendered graphics that have to fit into an <b>executable</b> <b>file</b> of 4 kilobytes. These pictures often consist of landscapes {{and the size of}} the <b>executable</b> <b>file</b> is the challenge.|$|R
50|$|Object files can in turn {{be linked}} to form an <b>executable</b> <b>file</b> or library file. In order to be used, object code must either be placed in an <b>executable</b> <b>file,</b> a library file, or an object file.|$|R
5000|$|To {{store data}} bytes in a file, {{they have to}} be {{serialized}} in a [...] "file format". Typically, programs are stored in special file types, different from those used for other data. <b>Executable</b> <b>files</b> contain programs; all other files are also data <b>files.</b> However, <b>executable</b> <b>files</b> may also contain [...] "in-line" [...] data which is built into the program. In particular, some <b>executable</b> <b>files</b> have a data segment, which nominally contains constants and initial values (both data).|$|R
50|$|Entry points apply both {{to source}} code and to <b>executable</b> <b>files.</b> However, in day-to-day {{software}} development, programmers specify the entry points only in source code, {{which makes them}} much better known. Entry points in <b>executable</b> <b>files</b> depend on the application binary interface (ABI) of the actual operating system, and are generated by the compiler or linker (if not fixed by the ABI). Non-executable object files may also have entry points, which are used later by the linker when generating entry points of an <b>executable</b> <b>file.</b>|$|R
5000|$|Dll Inspector with resources/dependencies/objects views for <b>executable</b> <b>files</b> ...|$|R
50|$|Hiew (short for Hacker's view) is {{a popular}} console hex editor for Windows written by Eugene Suslikov (sen). Amongst its feature set {{is its ability to}} view files in text, hex and {{disassembly}} mode. The program is particularly useful for editing <b>executable</b> <b>files</b> such as COFF, PE or ELF <b>executable</b> <b>files.</b>|$|R
5000|$|DOS MZ <b>executable</b> <b>files</b> and the EXE stub of the Microsoft Windows PE (Portable <b>Executable)</b> <b>files</b> {{start with}} the {{characters}} [...] "MZ" [...] ( [...] ), the initials of the designer of the file format, Mark Zbikowski. The definition allows the uncommon [...] "ZM" [...] ( [...] ) as well for dosZMXP, a non-PE EXE.|$|R
5000|$|In {{order to}} avoid {{detection}} by users, some viruses employ different kinds of deception. Some old viruses, especially on the MS-DOS platform, {{make sure that the}} [...] "last modified" [...] date of a host file stays the same when the file is infected by the virus. This approach does not fool antivirus software, however, especially those which maintain and date cyclic redundancy checks on <b>file</b> changes. Some <b>viruses</b> can infect <b>files</b> without increasing their sizes or damaging the files. They accomplish this by overwriting unused areas of <b>executable</b> <b>files.</b> These are called cavity viruses. For example, the CIH virus, or Chernobyl <b>Virus,</b> infects Portable <b>Executable</b> <b>files.</b> Because those files have many empty gaps, the virus, which was 1 KB in length, did not add {{to the size of the}} <b>file.</b> Some <b>viruses</b> try to avoid detection by killing the tasks associated with antivirus software before it can detect them (for example, Conficker). In the 2010s, as computers and operating systems grow larger and more complex, old hiding techniques need to be updated or replaced. Defending a computer against viruses may demand that a file system migrate towards detailed and explicit permission for every kind of file access.|$|R
5000|$|Optimized {{for fast}} compiles and very small <b>executable</b> <b>file</b> sizes ...|$|R
5000|$|... #Subtitle level 2: Other <b>executable</b> <b>file</b> formats used on Amiga ...|$|R
5000|$|A basic Electron app {{consists}} of three files: [...] (metadata), [...] (code) and [...] (graphical user interface). The framework {{is provided by the}} Electron <b>executable</b> <b>file</b> ( [...] in Windows, [...] on macOS and [...] on Linux). Developers wishing to add branding and custom icon can rename and/or edit the Electron <b>executable</b> <b>file.</b>|$|R
5000|$|The JobScheduler {{can start}} <b>executable</b> <b>files,</b> shell scripts and {{database}} procedures.|$|R
5000|$|Source Code and <b>Executable</b> <b>Files</b> {{can be used}} in {{commercial}} applications; ...|$|R
5000|$|Mark Zbikowski, Microsoft programmer, {{designer}} of the DOS <b>executable</b> <b>file</b> format ...|$|R
50|$|The binary <b>executable</b> <b>file</b> size {{is smaller}} than its statically linked counterpart.|$|R
5000|$|Compiler (can make <b>executable</b> <b>files,</b> {{libraries}} and dynamic linked libraries (DLL) files) ...|$|R
5000|$|... 4701 on an <b>executable</b> <b>file</b> {{owned by}} 'root' {{and the group}} 'root' ...|$|R
50|$|One {{tells the}} {{compiler}} which option {{to use to}} generate the <b>executable</b> <b>file.</b>|$|R
5000|$|Concealed {{messages}} in tampered <b>executable</b> <b>files,</b> exploiting redundancy in the targeted instruction set.|$|R
5000|$|Warn of {{attempts}} of <b>executable</b> <b>files</b> to terminate and stay resident (by normal methods).|$|R
25|$|A shared {{library or}} shared object is a file that is {{intended}} to be shared by <b>executable</b> <b>files</b> and further shared object files. Modules used by a program are loaded from individual shared objects into memory at load time or run time, rather than being copied by a linker when it creates a single monolithic <b>executable</b> <b>file</b> for the program.|$|R
50|$|Most demo {{parties have}} at least one intro competition, where the rules are nearly the same as in the main demo competition, with the {{exception}} of the size limit of the <b>executable</b> <b>file.</b> The most common intro types are the 64K intro and the 4K intro, where the size of the <b>executable</b> <b>file</b> is limited to 65536 and 4096 bytes, respectively.|$|R
50|$|The Standard edition {{allows the}} user to create a {{slideshow}} as an <b>executable</b> <b>file</b> for Windows and Mac and AVI video file. The Deluxe version also allows HD video (MP4 H.264 file), DVD and to export on YouTube, Facebook, or iPhone/iPad. The quality output of this slideshow program {{can be said to}} be excellent for both <b>executable</b> <b>files</b> and video output.|$|R
5000|$|When pure {{demand paging}} is used, pages are loaded {{only when they}} are referenced. A program begins {{execution}} with none of its pages in RAM. As the program commits page faults, the operating system copies the needed pages from the <b>executable</b> <b>file</b> into RAM. Pages of the <b>executable</b> <b>file</b> that are not executed during a particular run are never loaded into memory.|$|R
40|$|PostMorph is a {{tool that}} {{converts}} an <b>executable</b> <b>file</b> into SUIF intermediate format. In the cases where we have an executable program available without the source code or intermediate format code, PostMorph {{can be used to}} recover the information needed for compiler optimizations, and bring the program back to the cycle of recompilation and optimization. A primitive version of PostMorph has been implemented on the Digital Alpha architecture using the Machine SUIF library. It uses static analysis on the executable image to perform the conversion. 1. Introduction Most program optimizations are performed during the process of compilation from the source code to the <b>executable</b> <b>file.</b> An important {{reason for this is that}} these optimizations require certain information that is not included in the final <b>executable</b> <b>file.</b> However, there are situations in which we have only the <b>executable</b> <b>file</b> available, and neither the source code nor any compiler intermediate format code. This can happen with l [...] ...|$|R
5000|$|Comparison of <b>executable</b> <b>file</b> formats, {{also for}} PE/COFF (Windows), and Mach-O (Mac OS X) formats.|$|R
5000|$|BusyBox a {{software}} project that provides several stripped-down Unix tools {{in a single}} <b>executable</b> <b>file</b> ...|$|R
30|$|After {{successful}} installation, an <b>executable</b> <b>file</b> “fasta 35 ” can {{be found}} in “${HOME_ 3 dRPC}/ext/fasta/”.|$|R
50|$|Once a {{matching}} <b>executable</b> <b>file</b> is found, the system spawns a new process which runs it.|$|R
