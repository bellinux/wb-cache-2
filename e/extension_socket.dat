0|38|Public
5000|$|Four <b>extension</b> <b>sockets</b> (2 TX, 2 RX) {{in order}} to connect 2-4 daughterboards.|$|R
50|$|An <b>extension</b> of <b>Socket</b> 7, Super Socket 7, was {{developed}} by AMD for their K6-2 and K6-III processors to operate at a higher clock rate and use AGP.|$|R
50|$|In the {{standard}} Internet protocols TCP and UDP, a socket address {{is the combination}} of an IP address and a port number, much like {{one end of a}} telephone connection is the combination of a phone number and a particular <b>extension.</b> <b>Sockets</b> need not have an address, for example, for only sending data, but if a program binds a socket to an address, the socket can be used to receive data sent to that address. Based on this address, Internet sockets deliver incoming data packets to the appropriate application process.|$|R
50|$|Using handle or <b>socket</b> <b>extensions</b> {{requires}} no adjustment of the torque setting.|$|R
2500|$|There is a {{specific}} requirement in the standard to ensure that Europlugs and other two-pin plugs {{may not be used}} with BS1363 sockets It shall not be possible to operate a shutter by inserting a 2-pin plug into a 3-pin socket-outlet. [...] However, many <b>extension</b> <b>sockets</b> will allow a plug to be inserted upside down, i.e. only the earth pin, defeating the shutter mechanism. This method is sometimes used to allow a Europlug (with two small round pins and no earth pin) to be forced into the open [...] and neutral ports. The UK Electrical Safety Council has drawn attention to the fire risk associated with forcing Europlugs into BS1363 sockets.|$|R
5000|$|Extension Grip Collars are collars with indents {{that fit}} {{on the back of}} most {{extensions}} preventing it from easily rolling away and allow one to easily grip extension and finger tighten or loosen nuts and bolts by turning <b>extension</b> + <b>socket</b> with or without ratchet.|$|R
5000|$|In computing, the Java Secure <b>Socket</b> <b>Extension</b> (JSSE) {{provides}} {{a set of}} packages that enable secure Internet communications. It implements a Java technology version of the Secure Sockets Layer (SSL) and the Transport Layer Security (TLS) [...] protocols. It includes functionality for data encryption, server authentication, message integrity, and optional client-authentication.|$|R
50|$|Until recently, this socket {{contained}} an enclosed spark gap, SP1, that could safely flash over internally to provide high voltage surge protection. This component {{is no longer}} used due to negative effects on VDSL speeds. The socket includes a 1.8 µF capacitor (bell circuit) to feed the AC ringing and a 470 kΩ resistor (R1, out-of-service resistor) to permit remote testing when no telephones are plugged into any <b>sockets.</b> Additional internal <b>extension</b> (secondary) <b>sockets</b> are wired off the master socket (connected in parallel using the IDC system) but not containing the surge protector, bell circuit capacitor, and the out-of-service resistor.|$|R
40|$|This paper {{presents}} an UDP-based <b>socket</b> <b>extension</b> called the Resilient Mobile Socket (RMS), which provides application-layer mobility support by encapsulating other sockets {{into a new}} aggregated socket abstraction. Encapsulated sockets can then be added or removed without disturbing running applications. RMS also provides a method for soft handovers where several encapsulated sockets are used simultaneously during a handover. As a proof o...|$|R
5000|$|Wobble <b>extensions</b> {{have their}} <b>socket</b> {{attachment}} ends ground {{to allow the}} socket-extension interface to bend up to about 15 degrees. This additional flexibility often makes using a <b>socket</b> + <b>extension</b> in a cramped location easier. A 1" [...] to 1-1/2" [...] long wobble extension added {{to the end of}} any extension will convert it to a slightly longer [...] "wobble" [...] extension.|$|R
40|$|<b>Extension</b> to <b>Sockets</b> API for Mobile IPv 6 This memo {{provides}} {{information for the}} Internet community. It does not specify an Internet standard of any kind. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2006). This document describes data structures and API support for Mobile IPv 6 as an extension to the Advanced Socket API for IPv 6. Just as the Advanced Sockets API for IPv 6 gives access to various extension headers and the ICMPv 6 protocol, this document specifies {{the same level of}} access for Mobile IPv 6 components. It specifies a mechanism for applications to retrieve and set information for Mobility Header messages, Home Address destination options, and Routing Header Type 2 extension headers. It also specifies th...|$|R
50|$|The {{lower body}} of Dextre has {{a pair of}} {{orientable}} colour TV cameras with lights, a platform for stowing ORUs, and a tool holster. The tool holster is equipped with two Robotic Micro Conical Tools (RMCTs), which allow an arm to grasp additional types of ORU fixtures. The <b>Socket</b> <b>Extension</b> Tool (SET) extends {{the length of the}} grasping socket on an arm, and the Robotic Off-Set Tool (ROST) allows an arm to grasp difficult to reach targets.|$|R
40|$|Transport Layer Security (TLS) Renegotiation Indication <b>Extension</b> Secure <b>Socket</b> Layer (SSL) and Transport Layer Security (TLS) renegotiation are {{vulnerable}} to an attack in which the attacker forms a TLS connection with the target server, injects content of his choice, and then splices in a new TLS connection from a client. The server treats the client’s initial TLS handshake as a renegotiation and thus believes that the initial data transmitted by the attacker is from the same entity as the subsequent client data. This specification defines a TLS extension to cryptographically tie renegotiations to the TLS connections they are being performed over, thus preventing this attack. Status of This Memo This is an Internet Standards Track document. This document {{is a product of}} the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by th...|$|R
40|$|We {{present a}} {{so-called}} no-copy Application Programming Interface (API) for communication. The interface avoids copying when data is transferred between the application and operating system kernel address spaces. The API is an <b>extension</b> to the <b>socket</b> interface for SunOS, {{and has been}} implemented on Sun SPARCstations equipped with Fore Systems ATM adapters. Throughput for the no-copy API is 85 Mbit/s for 8 K UDP messages, to be compared to 57 Mbit/s for the regular API on the SPARCstation 2. Processing times through the TCP and UDP stacks are reduced by up to 30...|$|R
50|$|This is {{the most}} basic of the CDC family of {{profiles}} hackedis a set of Java APIs tuned for low-footprint devices that have limited resources that do not need a graphical user interface system. It provides a complete Java ME application environment for consumer products and embedded devices but without a standards-based GUI system. Version 1.1.2 is specified in JSR 219 and implements a subset of Java SE 1.4.2, including a set of security-related optional packages, such as Java Authentication and Authorization Service (JAAS), Java Secure <b>Socket</b> <b>Extension</b> (JSSE), and Java Cryptography Extension (JCE).|$|R
40|$|The {{following}} thesis {{focuses on}} the current standards and practices employed in the IP security domain. It presents {{an overview of the}} existing protocols and proposes <b>extensions</b> to the <b>socket</b> API such that the currently available IP security mechanisms can be employed by a wider range of user applications which comprise of the present generation application programs and the future generation security applications (such as the Intrusion detection Systems). Further an implementation of the proposed extensions on the Linux operating system platform is presented and the usage of the API is demonstrated with example applications based on the API extensions...|$|R
40|$|AbstractAn {{important}} {{missing link}} {{in the construction of}} secure systems is finding a practical way to establish a correspondence between a software specification and its implementation. We address this problem for the case of crypto-based Java implementations (such as crypto protocols) with an approach using automated theorem provers for first-order logic, by linking the implementation to a specification model. In this paper, we present details on an application of this approach to the open-source Java implementation Jessie of the SSL protocol. We also shortly comment on how these results can be transferred to the standard Java Secure <b>Sockets</b> <b>Extension</b> (JSSE) library that was recently open-sourced by Sun...|$|R
40|$|An {{important}} {{missing link}} {{in the construction of}} secure systems is finding a practical way to establish a correspondence between a software specification and its implementation. In this paper, we show to make use of interface specifications to address this problem for the case of crypto-based Java implementations (such as crypto protocols). We explain this using an approach using automated theorem provers for first-order logic which links the implementation to a specification model, which has been presented in earlier work. We present the details at the hand of an application to the open-source Java implementation Jessie of the SSL protocol. In ongoing work, we apply the approach to the standard Java Secure <b>Sockets</b> <b>Extension</b> (JSSE) library that was recently open-sourced by Sun...|$|R
40|$|Network {{users are}} faced with the problem of making the {{transition}} from TCP/P applications to the emerging Open Systems Interconnection (OSI) protocols. To accomplish this goal, these users must rewrite their code to use OSI, or switch to new applications, or use a gateway between TCP/IP and OSI based applications. This paper details how this problem was solved in work at IBM's Cambridge Scientific Center for one distributed application, the X Window System, and how the same methods could be used for other applications. The draft ANSI standard mapping X to OSI is explained. The changes that were made to the X Window System to support OSI and an X TCP-OSI Gateway are described. The best method for migrating apþiications was found to be <b>extensions</b> tô the <b>socket</b> o support OSI at multiple layers...|$|R
40|$|Abstract — This paper {{presents}} an UDP-based <b>socket</b> <b>extension</b> called the Resilient Mobile Socket (RMS), which provides application-layer mobility support by encapsulating other sockets {{into a new}} aggregated socket abstraction. Encapsulated sockets can then be added or removed without disturbing running applications. RMS also provides a method for soft handovers where several encapsulated sockets are used simultaneously during a handover. As a proof of concept, a working prototype has been built by integrating RMS with Marratech Pro, a commercially available E-meeting application. This prototype {{has been used to}} evaluate RMS and to investigate how GSM audio quality is affected by handovers. The result from the investigation shows that soft handovers can be executed without loosing packets or causing extra latency, while a hard handover in average took around 200 ms to complete. This indicates that proactive handovers and redundancy are important, but that more work must be done to predict disconnections...|$|R
40|$|In {{this paper}} we {{describe}} the design and {{the implementation of the}} GNU Prolog system. This system draws on our previous experience of compiling Prolog to C in the wamcc system and of compiling finite domain constraints in the clp(FD) system. The compilation scheme has however been redesigned in order to overcome the drawbacks of compiling to C. In particular, GNU-Prolog is based on a low-level mini-assembly platform-independent language that makes it possible to avoid compiling C code, and thus drastically reduces compilation time. It also makes it possible to produce small stand-alone executable files {{as the result of the}} compilation process. Interestingly, GNU Prolog is now compliant to the ISO standard, includes several <b>extensions</b> (OS interface, <b>sockets,</b> global variables, etc) and integrates a powerful constraint solver over finite domains. The system is efficient and in terms of performance is comparable with commercial systems for both the Prolog and constraint aspects. ...|$|R
40|$|Bengt Ahlgren (Bengt. Ahlgren@sics. se) Mats Bjorkman y (Mats. Bjorkman@docs. uu. se) Kjersti Moldeklev z (Kjersti. Moldeklev@tf. telenor. no) June 30, 1995 Abstract We {{present a}} {{so-called}} no-copy Application Programming Interface (API) for communication. The interface avoids copying when data is transferred between the application and operating system kernel address spaces. The API is an <b>extension</b> to the <b>socket</b> interface for SunOS, {{and has been}} implemented on Sun SPARCstations equipped with Fore Systems ATM adapters. Throughput for the no-copy API is 85 Mbit/s for 8 K UDP messages, to be compared to 57 Mbit/s for the regular API on the SPARCstation 2. Processing times through the TCP and UDP stacks are reduced by up to 30 % for the SPARCstation 2 and by more than 50 % for the SPARCstation 10. 1 Introduction Transferring data {{is perhaps the most}} important performance critical task of an operating system. It transfers data between application programs and peripheral devices like disks, [...] ...|$|R
40|$|As a {{countermeasure}} {{against the}} famous Bleichenbacher attack on RSA based ciphersuites, all TLS RFCs starting from RFC 2246 (TLS 1. 0) propose “to treat incorrectly formatted messages {{in a manner}} indistinguishable from correctly formatted RSA blocks”. In this paper we show that this objective has not been achieved yet (cf. Table 1) : We present four new Blei-chenbacher side channels, and three successful Bleichen-bacher attacks against the Java Secure <b>Socket</b> <b>Extension</b> (JSSE) SSL/TLS implementation and against hardware security appliances using the Cavium NITROX SSL ac-celerator chip. Three of these side channels are timing-based, {{and two of them}} provide the first timing-based Bleichenbacher attacks on SSL/TLS described in the lit-erature. Our measurements confirmed that all these side channels are observable over a switched network, with timing differences between 1 and 23 microseconds. We were able to successfully recover the PreMasterSecret using three of the four side channels in a realistic mea-surement setup. ...|$|R
40|$|This paper {{describes}} extensions to {{the popular}} socket programming interface that provide applications {{direct access to the}} services of ATM networks. Instead of designing an entirely new API or adding new socket function calls, the existing calls were slightly modified to provide the necessary functionality, leaving the basic socket model unchanged. This will enable existing socket applications to be easily ported to ATM and encourage programmers to write new applications exploiting ATM networks, including the use of quality of service (QoS) without going through the TCP or UDP and IP protocol layers. By offering a familiar API and client/server model, it will foster the exploitation of ATM network features by existing and new multimedia applications. The <b>socket</b> <b>extensions</b> described in this paper are implemented in IBM's AIX operating system Release 4. 2, operating over the TurboWays family of ATM network adapters. 1 Motivation The first priority of ATM equipment vendors was to provid [...] ...|$|R
40|$|Since the {{beginning}} of 1995, ATM support has been developed for Linux. By now, Linux supports most functionality that is required for {{state of the art}} ATM networking. This article introduces to general ATM concepts, presents the current status of development on Linux, and outlines the future direction ATM on Linux will take. 1 Introduction ATM (Asynchronous Transfer Mode) [1] 1 is currently perceived as the most suitable technology for modern high-speed multimedia networks; among other reasons also because its architecture incorporates support for guaranteed Quality of Service (QoS; bandwidth, end-to-end delay, etc.). In order to create an ATM platform for research and education, the Laboratoire de R'eseaux de Communication (LRC) of EPFL is developing ATM support for Linux. In the first project phase, device drivers for two ATM adapters were written, and an <b>extension</b> of the <b>socket</b> API to support native ATM PVCs ("manually" configured connections) was designed and implemented. Like t [...] ...|$|R
40|$|While the address-oriented {{datagram}} {{and reliable}} stream services {{supported by the}} UDP and TCP protocols are the foundation of distributed computing, other forms of communication are increasingly being used to build contemporary systems and applications. A popular alternative to datagram- and stream-based communication is the Publish/Subscribe (P/S) paradigm, where message forwarding and reception is done based on a topic or content descriptions instead of an address. Several middleware systems have been built to support this form of communication, {{on top of the}} socket API. Taking a different approach, we discuss how P/S networking can be supported through the socket API, so that this can serve as a universal interface for supporting different communication abstractions. To this end we introduce a new address family and extend the semantics of selected socket primitives to support P/S functions. Also, we describe a proof-of-concept implementation of the proposed <b>socket</b> <b>extension,</b> which features two protocols for ad-hoc and infrastructure-based P/S communication, respectively. © 2013 ACM...|$|R
40|$|Drosophila {{bristles}} {{display a}} precise orientation and curvature. An asymmetric <b>extension</b> of the <b>socket</b> cell overlies the newly emerging bristle rudiment to provide direction for bristle elongation, a process {{thought to be}} orchestrated by the nerve dendrite lying between these cells. Scanning electron microscopic analysis of individual bristles showed that curvature is planar and far greater near the bristle base. Correlated with this, as development proceeds the pupa gradually recedes from the inner pupal case (an extracellular layer that encloses the pupa) leading to less bristle curvature along the shaft. We propose that the inner pupal case induces elongating bristles to bend when they contact this barrier. During elongation the actin cytoskeleton locks in this curvature by grafting together the overlapping modules that comprise the long filament bundles. Because the bristle is curved, the actin bundles on the superior side must be longer than those on the inferior side. This is accomplished during grafting by greater elongation of superior side modules. Poor actin cross-bridging in mutant bristles results in altered curvature. Thus, the pattern of bristle curvature {{is a product of}} both extrinsic factors—the socket cell and the inner pupal case—and intrinsic factors—actin cytoskeleton assembly...|$|R
40|$|We present {{tools to}} support model-based {{security}} engineering {{on both the}} model and the code level. In the approach supported by these tools, one firstly specifies the securitycritical {{part of the system}} (e. g. a crypto protocol) using the UML security extension UMLsec. The models are automatically verified for security properties using automated theorem provers. These are implemented within a framework that supports implementing verification routines, based on XMI output of the diagrams from UML CASE tools. Advanced users can use this open-source framework to implement verification routines for the constraints of self-defined security requirements. In a second step, one verifies that security-critical parts of the model are correctly implemented in the code (which might be a legacy implementation), and applies security hardening transformations where is that not the case. This is supported by tools that (1) establish traceability through refactoring scripts and (2) modularize security hardening advices through aspect-oriented programming. The proposed method has been applied to an open-source implementation of a cryptographic protocol implementation (Jessie) in Java to build up traceability mappings and security aspects. In that application, we found a security weakness which could be fixed using our approach. The resulting refactoring scripts and security aspects have found reusability in the Java Secure <b>Socket</b> <b>Extension</b> (JSSE) library...|$|R
40|$|This paper {{introduces}} DIDUCE, {{a practical}} and effective tool that aids programmers in detecting complex program errors and identifying their root causes. By instrumenting a program and observing its behavior as it runs, DIDUCE dynamically formulates hypotheses of invariants obeyed by the program. DIDUCE hypothesizes the strictest invariants at the beginning, and gradually relaxes the hypothesis as violations are detected {{to allow for}} new behavior. The violations reported help users to catch software bugs {{as soon as they}} occur. They also give programmers new visibility into the behavior of the programs such as identifying rare corner cases in the program logic or even locating hidden errors that corrupt the program’s results. We implemented the DIDUCE system for Java programs and applied it to four programs of significant size and complexity. DIDUCE succeeded in identifying the root causes of programming errors in each of the programs quickly and automatically. In particular, DIDUCE is effective in isolating a timing−dependent bug in a released JSSE (Java Secure <b>Socket</b> <b>Extension)</b> library, which would have taken an experienced programmer days to find. Our experience suggests that detecting and checking program invariants dynamically is a simple and effective methodology for debugging many different kinds of program errors across a wide variety of application domains. 1...|$|R
50|$|The Super Socket 7, also {{referred}} to as Super 7, is an <b>extension</b> of the <b>Socket</b> 7 ZIF socket specification. It features a 100 MHz front-side bus, support for AGP, and a SPGA package. Super Socket was used by AMD K6-2 and K6-III processors, some of the final Cyrix M-II processors, some of the final IDT WinChip 2 processors, and Rise mP6 processors. It is backward compatible with Socket 7, meaning a Socket 7 CPU can be used with a Super Socket 7 motherboard, but a Super Socket 7 CPU cannot operate at full speed in a Socket 7 motherboard. Socket 5 CPUs are pin-compatible with Super Socket 7, but not all motherboards designed for Super Socket 7 supported the voltages needed for Socket 5 CPUs.While AMD had previously always used Intel sockets for their processors, Socket 7 was the last one for which AMD retained legal rights. Intel had hoped by discontinuing Socket 7 development and moving to Slot 1 that AMD would be left with an outdated platform, making their processors non-competitive. By extending the FSB from 66 to 100 MHz, Super Socket 7 gave AMD the stopgap solution they needed while developing their own independent motherboard infrastructure, Slot A.|$|R
40|$|We {{describe}} a largely automated {{and systematic analysis}} of TLS implementations by what we call ‘protocol state fuzzing’: we use state machine learning to infer state ma-chines from protocol implementations, using only black-box testing, and then inspect the inferred state machines to look for spurious behaviour which might be an indica-tion of flaws in the program logic. For detecting the pres-ence of spurious behaviour the approach is almost fully automatic: we automatically obtain state machines and any spurious behaviour is then trivial to see. Detecting whether the spurious behaviour introduces exploitable security weaknesses does require manual investigation. Still, we take {{the point of view}} that any spurious func-tionality in a security protocol implementation is danger-ous and should be removed. We analysed both server- and client-side implemen-tations with a test harness that supports several key ex-change algorithms and the option of client certificate au-thentication. We show that this approach can catch an interesting class of implementation flaws that is appar-ently common in security protocol implementations: in three of the TLS implementations analysed new security flaws were found (in GnuTLS, the Java Secure <b>Socket</b> <b>Extension,</b> and OpenSSL). This shows that protocol state fuzzing is a useful technique to systematically analyse security protocol implementations. As our analysis of different TLS implementations resulted in different and unique state machines for each one, the technique can also be used for fingerprinting TLS implementations. ...|$|R
40|$|As dynamic web {{content and}} {{security}} capabilities are becoming popular in current web sites, the performance demand on application servers that host the sites is increasing, leading sometimes these servers to overload. As a result, response times may grow to unacceptable levels and the server may saturate or even crash. In this paper {{we present a}} session-based adaptive overload control mechanism based on SSL (Secure Socket Layer) connections differentiation and admission control. The SSL connections differentiation is a key factor because the cost of establishing a new SSL connection {{is much greater than}} establishing a resumed SSL connection (it reuses an existing SSL session on server). Considering this big difference, we have implemented an admission control algorithm that prioritizes the resumed SSL connections to maximize performance on session-based environments and limits dynamically the number of new SSL connections accepted depending on the available resources and the current number of connections in the system to avoid server overload. In order to allow the differentiation of resumed SSL connections from new SSL connections we propose a possible extension of the Java Secure <b>Sockets</b> <b>Extension</b> (JSSE) API. Our evaluation demonstrates the benefit of our proposal for preventing server overload. We use the RUBiS auction site benchmark to stress a Tomcat application server with the overload control mechanism incorporated running on a commodity 4 -way multiprocessor Intel platform with Linux. 1...|$|R
40|$|Security-critical {{systems are}} {{challenging}} {{to design and}} implement correctly and securely. A lot of vulnerabilities {{have been found in}} current software systems both at the specification and the implementation levels. This paper presents a comprehensive approach for model-based security assurance. Initially, it allows one to formally verify the design models against high-level security requirements such as secrecy and authentication on the specification level, and helps to ensure that their implementation adheres to these properties, if they express a system’s run-time behaviour. As such, it provides a traceability link from the design model to its implementation by which the actual system can then be verified against the model while it executes. This part of our approach relies on a technique also known as run-time verification. The extra effort for it is small as most of the computation is automated; however, additional resources at run-time may be required. If during run-time verification a security weakness is uncovered, it can be removed using aspectoriented security hardening transformations. Therefore, this approach also supports the evolution of software since the traceability mapping is updated when refactoring operations are regressively performed using our tool-supported refactoring technique. The proposed method has been applied to the Java-based implementation JESSIE of the Internet security protocol SSL, in which a security weakness was detected and fixed using our approach. We also explain how the traceability link can be transformed to the official implementation of the Java Secure <b>Sockets</b> <b>Extension</b> (JSSE) that was recently made open source by Sun...|$|R
40|$|Application {{of carbon}} and glass fibre hybrid {{composites}} to load bearing orthoses and prostheses The {{aim of this}} work was to introduce high performance fibre composites into prosthetics and orthotics. Advantages were seen in these materials from their high specific strength and stiffness which could produce lighter and cosmetically more acceptable appliances. Composites of carbon fibre, glass fibre and hybrids of the two were examined to assess their structural suitability. Laminates of different compositions were fabricated from unidirectional fibre tapes using vacuum consolidation. To investigate, relationships between composition and mechanical properties tensile, flexural, shear and impact tests were performed. From these results and from a study of failure mechanisms using high speed photography in conjunction with scanning electron microscopy, suitable materials were identified. To establish optimum fibre orientation for lower limb components" helically wound cylindrical specimens were tested in torsion and compression. These simulated the application and also provided well-defined loading conditions for biased laminates. A resin injection technique used in the prosthetics industry was modified for the manufacture of cylinders and prosthetic components from unidirectional hybrid tapes. Hybrid composite sockets were made for a patient who normally used a conventional GRP <b>extension</b> prosthesis. A <b>socket</b> of this, design successfully completed a cyclic compression test in accordance with Department of Health requirements. To assess {{the reaction of the}} patient and the limb fitters, a similar socket was incorporated into a prosthesis by J. E. Hanger & Co. This socket was considerably thinner than GRP sockets which allowed an ankle joint to be included. The patient found this prosthesis light and more comfortable to use than her normal appliances. When it was completed, the patient's request to keep the prosthesis was granted. This work demonstrated that hybrid composites can be used successfully in load bearing prosthetic or orthotic applications...|$|R
5000|$|It {{was built}} from 1991 to 1997. From 1991 to 1993, it used tuned {{multi-port}} fuel injection, made 200-210 hp (150-160 kW) at 5200 rpm and 215 lbft Nm of torque at 4000 rpm. From 1994 to 1997, it used sequential port fuel injection, making [...] at 5200 rpm and 215 lbft Nm of torque at 4000 rpm. In 1996, the heads were redesigned for better flow {{as well as}} now making the engine an interference design and adapting the engine for federally mandated OBDII emissions. Output for the 1996-1997 LQ1 is [...] and 220 lbft Nm. It had four large valves per cylinder. The 3.4 L engine used a cogged belt to drive the four overhead camshafts and a chain to drive the intermediate shaft, which is mounted in the same slot where the camshaft would go in {{on any of the}} pushrod engines in the 60-degree family. Adapting a pushrod block for the LQ1's overhead cams was difficult, and the 60° angle made this a very tall engine. The power output for this engine was impressive during its time; however, this engine has never been well liked by auto mechanics, as important maintenance such as spark plug and timing belt changes is very troublesome, especially on later models. Spark plug changes for the three rear cylinders are thought by some to require removing the upper intake manifold when performed as directed by factory service manual, and timing belt changes have a labor rate of 5 hours as opposed to 2-3 for a typical belt-driven engine. In fact, cylinders 1, 3, and 5 spark plugs can be changed by removing the crosswise stabilizer bar from atop strut towers, and using proper <b>socket</b> <b>extensions</b> and a mirror. Timing belt procedure has been posted to You Tube with some labor-saving tips.|$|R
40|$|There {{has been}} a {{significant}} amount of work devoted to the static verification of security protocol designs Virtually all of these results, when applied to an actual implementation of a security protocol, rely on certain implicit assumptions on the implementation (for example, that the cryptographic checks that according to the design have to be performed by the protocol participants are carried out correctly) So far {{there seems to be no}} approach that would enforce these implicit assumptions for a given implementation of a security protocol (in particular regarding legacy implementations which have not been developed with formal verification in mind) In this paper, we use a code assurance technique called "runtime verification" to solve this open problem Runtime verification determines whether or not the behaviour observed during the execution of a system matches a given formal specification of a "reference behaviour". By applying runtime verification to an implementation of any of the participants of a security protocol, we can make sure during the execution of that implementation that the implicit assumptions that had to be made to ensure the security of the overall protocol will be fulfilled The overall assurance process then proceeds in two steps First, a design model of the security protocol in UML is verified against security properties such as secrecy of data Second, the implicit assumptions on the protocol participants are derived from the design model, formalised in linear-time temporal logic, and the validity of these formulae at runtime is monitored using runtime verification The aim is to increase one's confidence that statically verified properties are satisfied not only by a model of the system, but also by the actual running system Itself We demonstrate the approach at the hand of the open source implementation Jessie of the de-facto Internet security protocol standard SSL We also briefly explain how to transfer the results to the SSL-implementation within the Java Secure <b>Sockets</b> <b>Extension</b> (JSSE) recently made open source by Sun Microsystems...|$|R
