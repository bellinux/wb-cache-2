2|26|Public
5000|$|The game is {{controlled}} by three of the <b>keyboard</b> <b>cursor</b> control keys (left, forward and right, respectively 5, 7 and 8 on the ZX81 keyboard). The game speed can also be controlled — according to the original cassette inlay, the BASIC line 370 has a hardwired constant determining a busy waiting loop delay. The constant initially is set to 5; by varying it from 0 to 9 the game can be adjusted from faster to slower tempo. The 6 frame/s figure corresponds to the delay set to zero, while holding the [...] "forward" [...] key to run straight. A somewhat jerky motion is perceived at this slow framerate which gives {{a feeling of being}} jerked along with each step of a desperate heavy run.|$|E
40|$|Balloon Selection is a 3 D {{interaction}} technique that is {{modeled after the}} real world metaphor of manipulating a helium balloon attached to a string. Balloon Selection allows for precise 3 D selection in the volume above a tabletop surface by using multiple fingers on a multi-touch–sensitive surface. The 3 DOF selection tasks is decomposed in part into a 2 DOF positioning task performed by one finger on the tabletop in an absolute 2 D Cartesian coordinate system and a 1 DOF positioning task performed by another finger on the tabletop in a relative 2 D polar coordinate system. We have evaluated Balloon Selection in a formal user study that compared it to two well-known {{interaction technique}}s for selecting a static 3 D target: a 3 DOF tracked wand and <b>keyboard</b> <b>cursor</b> keys. We found that Balloon Selection was significantly faster than using cursor keys and had a significantly lower error rate than the wand. The lower error rate appeared to result from the user’s hands being supported by the tabletop surface, resulting in significantly reduced hand tremor and arm fatigue...|$|E
5000|$|The {{position}} of many {{elements of the}} score can be finely adjusted by [...] "nudging" [...] (with the <b>keyboard</b> <b>cursors)</b> both horizontally and vertically - this includes text, accidentals, ties and notes of a 1/4 and above. In addition the user can adjust the length and shape of individual slurs and ties [...]|$|R
5000|$|Integrated 62-key clicky <b>keyboard,</b> {{including}} 4-way <b>cursor</b> array and {{scroll wheel}} ...|$|R
5000|$|Switching to the Terminator View Screen {{offers a}} first-person {{perspective}} of the mission through the Marines' eyes. The Screen contains five monitors: a large primary monitor {{at the bottom and}} four smaller secondary displays arrayed above. The primary monitor displays the view of the Marine under the player's control. The character is moved by pressing the <b>keyboard's</b> <b>cursor</b> keys or clicking the directional arrows next to the monitor. The mouse is also used to aim and shoot at targets, although the computer determines if an accurate shot kills the target. [...] The secondary monitors show the views of other squad members. Although the player cannot control the movements of these Marines through these interfaces, he or she can click them to shoot the Marines' weapons at the centre of their views. However, the player can take full control of a Marine by switching the character's view to the primary monitor.|$|R
500|$|Switching to the Terminator View Screen {{offers a}} first-person {{perspective}} of the mission through the Marines' eyes. [...] The Screen contains five monitors: a large primary monitor {{at the bottom and}} four smaller secondary displays arrayed above. [...] The primary monitor displays the view of the Marine under the player's control. [...] The character is moved by pressing the <b>keyboard's</b> <b>cursor</b> keys or clicking the directional arrows next to the monitor. [...] The mouse is also used to aim and shoot at targets, although the computer determines if an accurate shot kills the target. [...] The secondary monitors show the views of other squad members. [...] Although the player cannot control the movements of these Marines through these interfaces, he or she can click them to shoot the Marines' weapons at the centre of their views. [...] However, the player can take full control of a Marine by switching the character's view to the primary monitor.|$|R
50|$|The {{original}} 520ST case {{design was}} created by Ira Velinsky Atari's chief Industrial Designer. The ST is basically wedge-shaped, featuring bold angular lines {{and a series of}} grilles cut into the rear for airflow. The keyboard has soft tactile feedback and rhomboid-shaped function keys across the top. The 520ST is an all-in-one unit, similar to earlier home computers like the Commodore 64, but with a larger <b>keyboard</b> with <b>cursor</b> keys and a numeric keypad.|$|R
5000|$|The Apricot {{has been}} very poorly received. A review by PC Pro in 2009 gave it 2 stars {{awarding}} it the worst marks of the notebooks on test in the categories of build quality, speaker quality, <b>keyboard</b> and <b>cursor</b> quality, and screen quality, and saying to avoid it at all costs. A [...] "first look" [...] review by IT Pro in 2008 also awarded it two stars, calling it unattractive, with a dubious build quality and {{saying that it is}} all but impossible to type on.|$|R
50|$|If the footmouse is used {{together}} with a <b>keyboard,</b> the <b>cursor</b> can be moved around while typing, {{so there is no}} time wasted for moving the hand between the keyboard and the mouse.If a person cannot use a keyboard, a virtual keyboard on the screen can be used to type text by clicking each character on the virtual keyboard. People who also have less control over their foot and leg movement and are unable to operate a footmouse can sometimes use a few switches for setting the cursor in a certain direction.|$|R
50|$|On iPad, a two-finger {{drag on the}} <b>keyboard</b> {{moves the}} <b>cursor</b> freely like a {{traditional}} trackpad, making positioning the cursor and selecting text easier. The keyboard-to-trackpad feature is also extended to iPhone 6S and 6S Plus, in which users can 3D Touch (force press) the keyboard to enable the trackpad.|$|R
2500|$|The Menu key or Application key {{is a key}} {{found on}} Windows-oriented {{computer}} keyboards. It is used to launch a context menu with the keyboard rather than with the usual right mouse button. The key's symbol is usually a small icon depicting a cursor hovering above a menu. On some Samsung <b>keyboards</b> the <b>cursor</b> in the icon is not present, showing the menu only. [...] This key was created {{at the same time}} as the Windows key. This key is normally used when the right mouse button is not present on the mouse. Some Windows public terminals do not have a Menu key on their keyboard to prevent users from right-clicking (however, in many Windows applications, a similar functionality can be invoked with the Shift+F10 keyboard shortcut).|$|R
30|$|Figure 12 shows two optimal {{quadrant}} <b>keyboards,</b> {{where the}} <b>cursor</b> first moves over different quadrants and then rows and columns within a selected quadrant. Both keyboards tend to place high-frequency {{characters in the}} first two quadrants (top-left and top-right quadrants). They differ in the placement of low-frequency characters and in the cursor duration, with the keyboard requiring a low acceptable error rate having a cursor duration nearly twice as long as the keyboard requiring a high acceptable error rate.|$|R
5000|$|Cursor {{movement}} keys or {{arrow keys}} are buttons {{on a computer}} keyboard that are either programmed or designated to move the cursor in a specified direction. The term [...] "cursor movement key" [...] is distinct from [...] "arrow key" [...] in that the former term may refer to any of various keys on a computer <b>keyboard</b> designated for <b>cursor</b> movement, whereas [...] "arrow keys" [...] generally refers to one of four specific keys, typically marked with arrows.|$|R
30|$|The {{approach}} considers many {{needs of}} the user. First, the acceptable error rate is established by the user, which allows them to specify their own typing style. Second, the user can choose their own text corpus depending on their personal interests and needs. We also tested the effects of different cursor paths, and showed that the optimization process selects an optimal <b>keyboard</b> for different <b>cursor</b> paths by balancing the trade-off between the average entry time and the average error rate.|$|R
50|$|In computing, a pointer or {{mouse cursor}} (as {{part of a}} {{personal}} computer WIMP style of interaction) is a symbol or graphical image on the computer monitor or other display device that echoes movements of the pointing device, commonly a mouse, touchpad, or stylus pen. It signals the point where actions of the user take place. It {{can be used in}} text-based or graphical user interfaces to select and move other elements. It is distinct from the cursor, which responds to <b>keyboard</b> input. The <b>cursor</b> may also be repositioned using the pointer.|$|R
25|$|On iPad, a two-finger {{drag on the}} <b>keyboard</b> {{moves the}} <b>cursor</b> freely like a {{traditional}} trackpad, making positioning the cursor and selecting text easier. The keyboard-to-trackpad feature is also extended to iPhone 6S and 6S Plus, in which users can 3D Touch (force press) the keyboard to enable the trackpad. Also on the iPad, a shortcut bar has been added for cut, copy, paste, undo and redo functions, and folders display 16 apps per page in a 4-by-4 arrangement, compared to 9 on the iPhone, allowing for an increased total of 240 apps in a single folder.|$|R
40|$|Abstract. Capacitive sensing {{is used in}} many {{different}} fields of application. It has been implemented in such devices as mobile phones and remote controls. However, up until now the physical sensing area has remained limited despite {{the widespread use of}} larger input devices such as keyboards. We present DGTS, which seamlessly integrates <b>keyboard</b> typing and <b>cursor</b> pointing. This input device offers multi-finger operation for scrolling and other specialized input commands. The objective of this work is to replace computer mice and touchpads by integrating capacitive sensing into a layer within the keyboard thereby reducing the space required for pointing devices. This paper gives the technical background, shows our contribution, and concludes with initial tests...|$|R
40|$|SDGToolkit, {{presented}} in a video in ACM CSCW 2004, is a toolkit for building single display groupware (SDG) applications. It automatically manages multiple mice and <b>keyboards,</b> draws multiple <b>cursors,</b> and supplies an infrastructure for building SDG widgets. In the 2004 video we claimed that this toolkit would {{make it easy for}} others to build SDG. This video demonstrates that claim. Seventeen students were asked to independently design and implement an SDG system of their choosing for a class assignment. They had minimal instruction and very little time to do it. Yet they managed to build a considerable variety of applications – some quite complex – across various genres. This video illustrated eight of these projects...|$|R
30|$|A {{consistent}} {{outcome is}} that an optimized keyboard with a linear cursor path is much faster than an optimized <b>keyboard</b> for other <b>cursor</b> paths. This result is surprising because virtual keyboards on the market generally use a hierarchical structure similar to a quadrant cursor path, and often have even more levels to the hierarchy. The optimization analysis presented here suggests that a deep hierarchy is problematic because it introduces many opportunities for an error. To compensate for the high risk of error, the cursor duration {{has to be made}} so long that the average entry time is quite large. A linear cursor path avoids these problems by requiring only one selection. When coupled with a short cursor duration, the average entry time for a linear cursor path can be quite short.|$|R
40|$|FingerMouse is a {{freehand}} pointing {{alternative to}} the ubiquitous mouse. In this system, the user merely performs a pointing gesture above the keyboard. A down-looking camera is trained on the keyboard. A user typing at the keyboard may switch into the 'pointing mode' by simply assuming a hand pointing configuration above the keyboard. A vision system constantly monitors the hand and tracks the fingertip of the pointing hand. As the user gestures in a horizontal plane just above the <b>keyboard,</b> the screen <b>cursor</b> moves accordingly. The user depresses the SHIFT key on the keyboard with the non-pointing hand to register a 'mouse button press'. This report presents a probabilistic color-based segmentation algorithm which transforms a color transfer function into probability entries in a RGB lookup table. It details a finite-state machine approach for the rapid detection of the pointing hand and describes a principal axis-based approach for fingertip tracking. The system has achieved near real [...] ...|$|R
30|$|Figure 13 shows two optimal binary <b>keyboards,</b> {{where the}} <b>cursor</b> {{alternates}} between remaining {{halves of the}} keyboard {{to zero in on}} the desired key. Here, a change in the acceptable error rate from 0.1 to 0.5 hardly alters the assignment of characters to keys (only the “m” and “p” characters switch positions), which makes some sense because different key positions are nearly equivalent due to the way the cursor focuses in on a target key. For example, with a binary cursor path, 20 of the 64 keys are reached with nine cursor steps, while an additional 30 keys are reached with eight or ten cursor steps. With such homogeneity, changing the key assignments for a binary cursor path often has very little impact on the average entry time. In a similar way, key assignments have only a modest effect on the error entry rate. Thus, the main variable controlling speed and accuracy for a binary cursor path is the cursor duration, which is longer for smaller acceptable error rates.|$|R
40|$|Visualization of {{molecular}} models {{is a vital}} part in modern drug design. Im-proved visualization methods increases the conceptual understanding and en-ables faster and better decision making. The introduction of virtual reality goggles such as Oculus Rift has introduced new opportunities for the capabil-ities of such visualisations. A new interactive visualization tool (MolecularRift), which lets the user experience molecular models in a virtual reality environment, was developed in collaboration with AstraZeneca. In an {{attempt to create a}} more natural way to interact with the tool, users can steer and controlmolecules through hand gestures. The gestures are recorded using depth data from a Mircosoft Kinect v 2 sensor and interpreted using per pixel algorithms, which only focus on the captured frames thus freeing the user from additional devices such as <b>cursor,</b> <b>keyboard,</b> touchpad or even piezore-sistive gloves. MolecularRift was developed from a usability perspective using an itera-tive developing process and test group evaluations. The iterations allowed an agile process where features easily could be evaluated to monitor behavior and performance, resulting in a user-optimized tool. We conclude with reflections on virtual reality’s capabilities in chemistry and possibilities for future projects...|$|R
30|$|For each {{character}} to be entered, the participant initiated the cursor with a selection action (pressing the switch device), {{and then the}} cursor moved across the <b>keyboard</b> with a <b>cursor</b> duration, D, that was fixed for a block of sessions. The cursor always started at the top row and moved down the rows of the keyboard. When the participant hit the switch device to select a row, the cursor started to move across the selected row {{from left to right}} until the participant again triggered the switch or the cursor went past the last character of the row. A correct selection of the target character caused the prompt window to highlight the target character in green, and an incorrect selection (i.e., the participant responded too early or the cursor moved past the target) led to the target character being highlighted in red in the prompt window (see Fig. 5). There was no opportunity for the participant to correct an error; instead, the trial was scored and the participant started the next trial when ready. When a given quote was finished, the participant clicked the “Next text” button in the prompt window to be presented with another quote. Additional file 5 : Movie 5 shows the program in use for a small set of text entry.|$|R
30|$|Motion sensors {{integrated}} into contemporary smartphones allow {{the introduction of}} new mobile interaction paradigms, here including tilt-based input control in the mobile context. Namely, as opposed to existing implementations that typically apply continuous feedback on tilting, we define Pitch and Roll movement sequences that change the orientation of the mobile device as discrete-tilt input primitives. The respective commands are then used to manage text entry within three discrete-tilt-based methods thus introduced: <b>keyboard</b> bisection, single <b>cursor,</b> and quad cursor. Each method is based on the use of a particular QWERTY-based keyboard layout with related strategy for character input. We model upper-bound text entry speeds for the input methods, taking into account both movement aspects and language context. The movement model corresponds to both the tilt-based shortest path between two consequent characters, which is theoretically defined, and the time of discrete-tilt execution, which is obtained from user testing experiment we conducted. The linguistic model, comprising digraph statistics, is constructed basing on available English corpora. This modeling approach provides discrete-tilt-based text entry speed predictions representing efficiency rates for expert behavior, i.e. for optimal performance. The results obtained enable the evaluation of the proposed designs without need to test with real users, and can furthermore serve as a baseline for efficiency of text entry implementations that rely on discrete tilt.|$|R
40|$|One of {{the most}} {{significant}} developments in cockpit technology {{over the past several years}} is the emergence of a new cockpit architecture that uses cursor control devices and keyboards for interaction with individual and shared displays. This architecture has allowed for the design of cockpit interfaces with many advantages compared to traditional designs. However, there are a number of challenges associated with these new cockpits that should be addressed so that pilots will be able to take full advantage of the performance improvements available from the new designs. This thesis describes three of the major challenges associated with the new architecture: supporting awareness, assisting interruption recovery, and mitigating interaction conflicts. It also describes the analysis process used to identify these challenges and proposes an interface augmentation with the potential to address them. The proposed design uses visualizations of the history of operator interactions with the interface to provide cues to the pilots about where each of them has been (and is currently) interacting. This interaction data includes both visual (sourced from a gaze tracking system) and input (from the <b>keyboard</b> or <b>cursor</b> control device) information, and was communicated on the interface using dynamic borders around the relevant areas of the interface. This augmentation aimed to address the three identified challenges by providing pilots with: improved awareness of each other’s actions, visual cues of where they were working prior to an interruption and what has changed since, and clear indications of where each is working to allow them to avoid conflicts. A two-stage evaluation process was used to determine the utility of the interface concept in a cockpit context by developing a non-interactive video prototype and showing it to pilots. The results of the evaluation indicated that the design has sufficient potential to warrant further study, as evaluation in higher fidelity environments would help provide further evidence of its potential utility for live cockpit operations. Therefore, future work should include the development and evaluation of a fully interactive prototype for live cockpit operations, as well as further examination of the design concept’s potential for use as a training tool...|$|R
5000|$|The C128's <b>keyboard</b> {{includes}} four <b>cursor</b> keys, an Alt key, Help key, Esc key, Tab key and a numeric keypad. None {{of these were}} present on the C64. Previous Commodores had only two cursor keys, which required using the Shift key to move the cursor up or left. This alternate arrangement was retained on the 128, for use under C64 mode. The lack of a numeric keypad, Alt key, and Esc key on the C64 was an issue with some CP/M productivity software when used with the C64's Z80 cartridge. A keypad was requested by many C64 owners who spent long hours entering machine language programs using MLX. [...] Many of the added keys matched counterparts present on the IBM PC's keyboard and made the new computer more attractive to business software developers. While the 128's 40-column mode closely duplicates that of the C64, an extra 1K of color RAM is {{made available to the}} programmer, as it is multiplexed through memory address 1. The C128's power supply is improved over the C64's unreliable design, being much larger and equipped with cooling vents and a replaceable fuse. The C128 does not perform a system RAM test on power-up like previous Commodore machines. Instead of the single 6510 microprocessor of the C64, the C128 incorporates a two-CPU design. The primary CPU, the 8502, is a slightly improved version of the 6510, capable of being clocked at 2 MHz. The second CPU is a Zilog Z80 which is used to run CP/M software, as well as to initiate operating-mode selection at boot time. The two processors cannot run concurrently, thus the C128 is not a multiprocessing system.|$|R
5000|$|The SysRq and Print screen {{commands}} often {{share the}} same key. SysRq was used in earlier computers as a [...] "panic" [...] button to recover from crashes (and it is still used in this sense to some extent by the Linux kernel; see Magic SysRq key). The Print screen command used to capture the entire screen {{and send it to}} the printer, but in the present it usually puts a screenshot in the clipboard. The Break key/Pause key no longer has a well-defined purpose. Its origins go back to teleprinter users, who wanted a key that would temporarily interrupt the communications line. The Break key can be used by software in several different ways, such as to switch between multiple login sessions, to terminate a program, or to interrupt a modem connection.In programming, especially old DOS-style BASIC, Pascal and C, Break is used (in conjunction with Ctrl) to stop program execution. In addition to this, Linux and variants, as well as many DOS programs, treat this combination the same as Ctrl+C. On modern keyboards, the break key is usually labeled Pause/Break. In most Windows environments, the key combination Windows key+Pause brings up the system properties.The Escape key (often abbreviated Esc) is used to initiate an escape sequence. As most computer users no longer are concerned with the details of controlling their computer's peripherals, the task for which the escape sequences were originally designed, the escape key was appropriated by application programmers, most often to [...] "escape" [...] or back out of a mistaken command. This use continues today in Microsoft Windows's use of escape as a shortcut in dialog boxes for No, Quit, Exit, Cancel, or Abort.A common application today of the Esc key is as a shortcut key for the Stop button in many web browsers. On machines running Microsoft Windows, prior to the implementation of the Windows key on keyboards, the typical practice for invoking the [...] "start" [...] button was to hold down the control key and press escape. This process still works in Windows 2000, XP, Vista, 7, 8, and 10.The Enter key is located: One in the alphanumeric keys and the other one is in the numeric keys. When one worked something on their computer and wanted to do something with their work, pressing the enter key would do the command they ordered. Another function is to create a space for next paragraph. When one typed and finished typing a paragraph and they wanted to have a second paragraph, they could press enter and it would do spacing.Shift key: when one presses shift and a letter, it will capitalize the letter pressed with the shift key. Another use is to type more symbols than appear to be available, for instance the apostrophe key is accompanied with a quotation mark on the top. If one wants to type the quotation mark but pressed that key alone, the symbol that would appear would be the apostrophe. The quotation mark will only appear if both the required key and the Shift key are pressed.The Menu key or Application key is a key found on Windows-oriented computer keyboards. It is used to launch a context menu with the keyboard rather than with the usual right mouse button. The key's symbol is usually a small icon depicting a cursor hovering above a menu. On some Samsung <b>keyboards</b> the <b>cursor</b> in the icon is not present, showing the menu only. This key was created {{at the same time as}} the Windows key. This key is normally used when the right mouse button is not present on the mouse. Some Windows public terminals do not have a Menu key on their keyboard to prevent users from right-clicking (however, in many Windows applications, a similar functionality can be invoked with the Shift+F10 keyboard shortcut).|$|R

