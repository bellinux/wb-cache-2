2|220|Public
5000|$|<b>Extended</b> <b>Arithmetic</b> <b>Element</b> - Enables the {{performance}} of complex arithmetic at high speeds ...|$|E
40|$|The RAMOS {{operating}} system {{is capable of}} handling up to 72 simultaneous tasks in an interrupt-driven environment. The minimum viable hardware configuration includes a Digital Equipment Corporation PDP- 15 computer with 16384 words of memory, <b>extended</b> <b>arithmetic</b> <b>element,</b> automatic priority interrupt, a 256 K-word RS 09 DECdisk, two DECtape transports, and an alphanumeric keyboard/ typer. The monitor executes major tasks by loading disk-resident modules to memory for execution; modules are written in a format that allows page-relocation by the monitor, and can be loaded into any available page. All requests for monitor service by tasks, including input/output, floating point arithmetic, request for additional memory, task initiation, etc., are implemented by privileged monitor calls (CAL). All IO device handlers are capable of queuing requests for service, allowing several tasks ''simultaneous'' use of all resources. All alphanumeric IO (including the PC 05) is completely buffered and handled by a single multiplexing routine. The floating point arithmetic software is re-entrant to all operating modules and includes matrix arithmetic functions. One of the system tasks can be a ''batch'' job, controlled by simulating an alphanumeric command terminal through cooperative functions of the disk handler and alphanumeric device software. An alphanumeric control sequence may be executed, automatically accessing disk-resident tasks in any prescribed order; a library of control sequences is maintained on bulk storage for access by the monitor. (auth...|$|E
50|$|Elementary algebra {{builds on}} and <b>extends</b> <b>arithmetic</b> by {{introducing}} letters called variables to represent general (non-specified) numbers. This {{is useful for}} several reasons.|$|R
40|$|This paper {{shows how}} to design {{efficient}} <b>arithmetic</b> <b>elements</b> out of quantum gates using "carry-save" techniques borrowed from classical computer design. This allows bit-parallel evaluation {{of all the}} <b>arithmetic</b> <b>elements</b> required for Shor's algorithm, including modular arithmetic, deferring all carry propagation {{until the end of}} the entire computation. This reduces the quantum gate delay from O(N^ 3) to O(N log N) at a cost of increasing the number of qubits required from O(N) to O(N^ 2). Comment: 12 pages, embedded figures. Corrected typos, added clarifications, improved resul...|$|R
40|$|In this paper, we {{introduce}} some operational laws {{of linguistic}} variables and define some linguistic preference relations such as incomplete linguistic preference relation and improved linguistic preference relation, etc. We then utilize the <b>extended</b> <b>arithmetic</b> averaging (EAA) operator and the <b>extended</b> weighted <b>arithmetic</b> averaging (EWAA) operator {{to develop an}} approach to group decision making based on incomplete linguistic preference relations. Finally, we give an illustrative example to verify the developed approach. Group decision making, incomplete linguistic preference relation, <b>extended</b> weighted <b>arithmetic</b> averaging (EWAA) operator...|$|R
40|$|Abstract: This paper {{shows how}} to design {{efficient}} <b>arithmetic</b> <b>elements</b> out of quantum gates using “carry-save ” techniques borrowed from classical computer design. This allows bit-parallel evaluation {{of all the}} <b>arithmetic</b> <b>elements</b> required for Shor’s algorithm, including modular arithmetic, deferring all carry propagation {{until the end of}} the entire computation. Of the recent advances in quantum algorithms, one of the most impressive to date is Shor’s algorithm for discrete logs and factorization [1], which gives an exponential speedup over classical algorithms. Vedral, Barenco and Ekert [2] have shown how to implement the necessary modular exponentiation operations in quantum gates with a numbe...|$|R
5000|$|... system family 820 (1968-1979): The <b>arithmetic</b> <b>element</b> {{was based}} on the {{semiconductor}} base but later silicon transistors were used. It had a ball-head typwriter. The NCAG invented a personal design, so the users could choose between different computers.|$|R
5000|$|The {{next few}} years would see the {{completing}} of APT's influential <b>Arithmetic</b> <b>Elements</b> and then the broad collaboration pioneered in the APT project was repeated in building the computer-aided design system AED (Formally called Automated Engineering Design but which Ross would sometimes call The Art of Engineering Design or [...] "ALGOL Extended for Design").|$|R
40|$|Data paths are {{collections}} of <b>arithmetic</b> <b>elements,</b> buses, registers and multiplexers that usually account for roughly 80 {{percent of the}} area of a complex chip. Unfortunately, gate-level synthesis does not work well for these elements. Data-path synthesis solves this problem by keeping the design at a conceptually higher level than gate-level synthesis, thus allowing much larger designs...|$|R
25|$|Another example benefitting from <b>extended</b> {{precision}} <b>arithmetic</b> is iterative refinement schemes in numerical linear algebra.|$|R
50|$|Rochester {{received}} his B.S. degree {{in electrical engineering}} from the Massachusetts Institute of Technology in 1941. He stayed on at MIT, working in the Radiation Laboratory {{for three years and}} then moved to Sylvania Electric Products where he was responsible for the design and construction of radar sets and other military equipment. His group built the <b>arithmetic</b> <b>element</b> for the Whirlwind I computer at MIT.|$|R
40|$|We <b>extend</b> <b>arithmetic</b> {{with a new}} {{predicate}} Pr, giving axioms for {{it based}} on first order versions of Löb's derivability conditions. We hoped that {{the addition of a}} reflection schema mentioning Pr would then give a non-conservative extension of the original arithmetic theory. The paper investigates this possiblity. It is shown that, under special conditions, the extension is indeed non-conservative. However in general such extensions turn out to be conservative...|$|R
50|$|The central {{processor}} {{used in the}} CDC 6400 series contained a unified <b>arithmetic</b> <b>element</b> which performed one machine instruction at a time. Depending on instruction type, an instruction could take anywhere from a relatively fast five clock cycles (18-bit integer arithmetic) {{to as many as}} 68 clock cycles (60-bit population count). The CDC 6500 was identical to the 6400, but included two identical 6400 CPUs. Thus the CDC 6500 could nearly double the computational throughput of the machine.|$|R
5000|$|This can be <b>extended</b> to <b>arithmetic</b> of the {{projective}} line {{by introducing}} another symbol [...] satisfying [...] and other rules as appropriate.|$|R
50|$|These three {{operator}} templates created dynamic holons encapsulating an equations model subroutine hierarchy {{which could}} contain other nested holons, because the model subroutines could contain {{any of the}} operator templates encapsulating sub-problems. Each holon in the holarchy had a solver algorithm engine, which could be interchanged with others in its holon class.The <b>extended</b> <b>arithmetic</b> of automatic differentiation {{and its ability to}} dynamically differentiate numerical integration gave rise to the unique mode of holarchy modeling illustrated in Figure 1.|$|R
40|$|Efforts {{have been}} made to {{standardise}} interval arithmetic for over a decade. The reasons have been to enable more widespread use of the technology, to enable more widespread sharing and collaboration among researchers and developers of the technology, and to enable easier checking that computer codes have been correctly programmed. During the late 1990 ’s, the first author of this report led such a project to introduce an interval data type into the Fortran language. One reason for failure of that effort was the Fortran language standardization committee’s lack of familiarity with interval technology and consequent caution. Another was misunderstanding between the Fortran standardization committee’s basic tenets on standardizing interline optimization and some views expressed by members of the interval analysis community. A third was confusion over how <b>extended</b> interval <b>arithmetic</b> (arithmetic dealing with division by intervals that contain zero) should be handled. This was coupled with a heavy committee load associated with other projects, such as standardizing an interface for interoperability with “C ” language programs. Since then, the interval analysis community has studied and gained additional understanding of <b>extended</b> interval <b>arithmetic.</b> One such study is [3], a systematization of the options. Another, with a particular point of view, is Prof. Kulisch’s contribution to this volume. <b>Extended</b> <b>arithmetic</b> remain...|$|R
40|$|AbstractCSL is a Lisp system {{specifically}} designed to support the REDUCE algebra system. This paper view the Lisp system upon which a Lisp-coded algebra system is coded as in effect a micro-kernel—it provides basic compilation, storage management and <b>extended</b> <b>arithmetic</b> capabilities that algebra needs, but is not much concerned with higher level algebraic algorithms or with user interfaces. The description of CSL given here discusses the major design decisions embodied in the system, and shows {{the extent to which}} it has been possible to resolve conflicting goals of simplicity, small size, portability and high performance...|$|R
40|$|This work {{consists}} of two parts. In the first part we deduce new algebraic relations in the <b>extended</b> interval <b>arithmetic</b> involving improper intervals and rules for the symbolic algebraic manipulations. We then discuss {{the solution of the}} interval linear algebraic system A Θ x = b in <b>extended</b> interval <b>arithmetic.</b> We describe a method for the interpretation of the solutions in terms of normal intervals and its relation to certain practical linear algebraic problems involving interval data. Cramer-type formulae are provided and a new iterative method is formulated. Some Mathematica functions for finding the algebraic solution to an interval linear system are presented. In the second part we give an algebraic generalization of the <b>extended</b> interval <b>arithmetic</b> in terms of semigroups and their embedding in suitable groups. This approach proves to be useful for the methodology of the software implementation of interval arithmetic and its application to the solution of interval algebraic [...] ...|$|R
40|$|Modern {{analysis}} of the finite word-length properties of DSP algorithms is typically carried out using CAD tools. The objectives of this paper are threefold: (i) to show that affine arithmetic is specially well-suited for quantization {{analysis of}} digital filters; (ii) to present a new tool based on multiple-precision affine <b>arithmetic</b> <b>elements</b> that allows fast charac-terization of the signal ranges in linear systems; and (iii) to develop an exhaustive-search algorithm that detects limit cycles and requires less computation time than existing approaches. Final comparative results confirm {{the validity of the}} limit cycles detection algorithm on second-order shift and delta-operator realizations. 1...|$|R
40|$|This paper {{documents}} the research towards {{the analysis of}} different solutions to implement a Neural Network architecture on a FPGA design by using floating point accelerators. In particular, two different implementations are investigated: a high level solution to create a neural network on a soft processor design, with different strategies for enhancing {{the performance of the}} process; a low level solution, achieved by a cascade of floating point <b>arithmetic</b> <b>elements.</b> Comparisons of the achieved performance in terms of both time consumptions and FPGA resources employed for the architectures are presented. © 2014 Advances in electrical and electronic engineering...|$|R
5000|$|It {{has also}} been shown that Heyting <b>arithmetic</b> <b>extended</b> with the {{following}} principles ...|$|R
40|$|New {{elliptic}} curve cryptographic processor architecture is presented {{that result in}} considerable reduction in power consumption as well as giving a range of trade-off between speed and power consumption. This is achieved by exploiting the inherent parallelism that exist in {{elliptic curve}} point addition and doubling. Further trade-off is achieved by using digit serial-parallel multipliers instead of the serial-serial multipliers used in conventional architectures. In effect, the new architecture exploits parallelism at the algorithm level {{as well as at}} the <b>arithmetic</b> <b>element</b> level. This parallelism can be exploited either to increase the speed of operation or to reduce power consumption by reducing the frequency of operation and hence the supply voltage...|$|R
40|$|We {{propose a}} new MCDM method based on fuzzy {{pair-wise}} comparisons and a feedback between the criteria. The {{evaluation of the}} weights of criteria, the variants {{as well as the}} feedback between the criteria is based on the data given in pair-wise comparison matrices. <b>Extended</b> <b>arithmetic</b> operations with fuzzy numbers are used as well as ordering fuzzy relations to compare fuzzy outcomes. An illustrating numerical example is presented to clarify the methodology. A special SW – Microsoft Excel add-in named FVK was developed for applying the proposed method. Comparing to other software products, FVK is free, able to work with fuzzy data and utilizes capabilities of widespread spreadsheet Microsoft Excel...|$|R
5000|$|Nord-100/CE, Commercial <b>Extended,</b> with decimal <b>arithmetic</b> {{instructions}} (The decimal {{instruction set}} was later renamed CX) ...|$|R
40|$|We {{introduce}} implementations of arithmetic operators {{based on}} the binary stored-carry-or-borrow (BSCB) representation. Several BSCB <b>arithmetic</b> <b>elements,</b> including full-adder, ripple-carry adder, and carry-lookahead adder are presented, followed by detailed design of an array multiplier. In the latter design, the conventional initial AND matrix is transformed and expressed with a redundant radix- 2 representation. Each line of the resulting matrix is processed by an accumulation operator with the BSCB representation. Due to a specific property of the multiplication process, this operator is simpler than a standard full-adder cell in terms of gate count, while maintaining the same propagation latency. The entire multiplier is implemented with only XOR and AND gates, thus improving its testability and reliability. 1...|$|R
40|$|The recent {{development}} in analog computation is reviewed in this paper. Analog computation {{was used in}} many applications where power and energy efficiency is of paramount importance. It is shown that by using innovative architecture and circuit design, analog computation systems can achieve much higher energy efficiency than their digital counterparts, as {{they are able to}} exploit the computational power inherent to the devices and physics. However, these systems do suffer from some disadvantages, such as lower accuracy and speed, and designers have come up with novel approaches to overcome them. The paper provides an overview of analog computation systems, from basic components such as memory and <b>arithmetic</b> <b>elements,</b> to architecture and system design...|$|R
40|$|Learning {{to operate}} algebraically {{is a complex}} process that is {{dependent}} upon <b>extending</b> <b>arithmetic</b> knowledge to the more complex concepts of algebra. Current research has shown a gap between arithmetic and algebraic knowledge and suggests a pre-algebraic level as a step between the two knowledge types. This paper examines arithmetic and algebraic knowledge from a cognitive perspective {{in an effort to}} determine what constitutes a pre-algebraic level of understanding. Results of a longitudinal study designed to investigate students' readiness for algebra are presented. Thirty-three students in Grades 7, 8, and 9 participated. A model for the transition from arithmetic to pre-algebra to algebra is proposed and students' understanding of relevant knowledge is discussed...|$|R
50|$|When HP {{discovered}} it sold more HP 2116A minicomputers for business applications than for instrumentation, HP introduced the short-lived 2115A in 1967, a cost-reduced {{variant of the}} 2116A with only 8 I/O slots, a bulky external power supply, and a 2116-style front panel. The HP 2116A of 1968 was stripped of DMA and <b>extended</b> <b>arithmetic.</b> The 2114A featured a redesigned front panel, with reduced register displays and illuminated touch switches. The 2114 saw two further revisions: the 2114B added single-channel DMA and HSIO options {{at the expense of}} a single I/O slot, and 2114C supported up to 16K maximum core in mainframe, at the expense of yet another I/O slot. The 2115A and 2114A/B/C have an 8 MHz clock and a 2.0 µs cycle time.|$|R
5000|$|Let π(x; 4, 1) {{denote the}} number of primes of the form 4k + 1 up to x. Similarly, let π(x; 4, 3) denote {{the number of}} primes of the form 4k + 3 up to x. By the prime number theorem, <b>extended</b> to <b>arithmetic</b> progression, ...|$|R
5000|$|After his masters, Singer {{joined the}} Armed Forces, {{working for the}} United States Navy on mine warfare and {{countermeasures}} from 1944 until 1946. While with the Naval Ordnance Laboratory he developed an <b>arithmetic</b> <b>element</b> for an electronic digital calculator that he called an [...] "electronic brain". He was discharged in 1946 and joined the Upper Atmosphere Rocket Program at the Johns Hopkins University Applied Physics Laboratory in Silver Spring, Maryland, working there until 1950. He focused on ozone, cosmic rays, and the ionosphere, all measured using balloons and rockets launched from White Sands, New Mexico, or from ships out at sea. Rachel White Scheuering writes that for one mission to launch a rocket, he sailed with a naval operation to the Arctic, and also conducted rocket launching from ships at the equator.|$|R
40|$|International audienceThis paper {{addresses}} the simulation {{of the state}} of a discrete-time controlled cable-driven parallel robot (CDPR) with nondeformable or elastic cables over a given trajectory. Being given a CDPR, an arbitrary model for the coiling system and for the control strategy, we exhibit a simulation algorithm that allows one to determine, in a guaranteed way, the platform pose and the cable tensions at any time. We show that such a simulation may require a computing accuracy that imposes to use <b>extended</b> <b>arithmetic</b> and that discrete-time control may lead to drastic differences in the cable tensions as compared to usual continuous time simulation. Hence, the proposed simulation tool allows for a better estimation of the positioning accuracy together with safer estimation of the maximum of the cable tensions...|$|R
40|$|An {{approach}} to ordinal analysis is presented which is finitary, but highlights the semantic {{content of the}} theories under consideration, rather than the syntactic structure of their proofs. In this paper the methods are applied {{to the analysis of}} theories <b>extending</b> Peano <b>arithmetic</b> with transfinite induction and transfinite arithmetic hierarchies...|$|R
40|$|A full digital self-timed clock {{generation}} {{scheme is}} developed, where multiple internal clocks are self-generated for each external request. The internal clock period {{is designed to}} be the critical path delay of the internal system at all operating environments. This scheme can be applied to time-multiplexed implementations, self-timed operation, and low-power applications. I. INTRODUCTION Advanced process technologies currently available allow very high internal operating clock frequencies for pipelined <b>arithmetic</b> <b>elements.</b> However, it is difficult to improve the I/O speed unless special I/O circuit technologies, such as ECL (Emitter Coupled Logic) are employed, thus it is hard to take the speed advantages of the pipelined circuits fully. Instead, it is more feasible {{to reduce the number of}} arithmetic units by operating them in time-domain multiplexed mode or employing the bit-serial architecture[1]. A previous approach for generating the internal fast clock is to use a PLL (Phase [...] ...|$|R
25|$|The {{following}} complexity figures {{assume that}} <b>arithmetic</b> with individual <b>elements</b> has complexity O(1), {{as is the}} case with fixed-precision floating-point arithmetic or operations on a finite field.|$|R
40|$|In {{this paper}} {{we will study}} the problem of uniformly extracting {{information}} from proofs in semiconstructive calculi, a kind of calculi which is {{of interest in the}} framework of program synthesis. Here we will discuss the notion of uniformly constructive calculus, we introduce our information extraction mechanism and we apply it to two calculi <b>extending</b> Intuitionistic <b>Arithmetic...</b>|$|R
5000|$|Gödel's second incompleteness theorem (1931) {{shows that}} no formal system <b>extending</b> basic <b>arithmetic</b> {{can be used}} to prove its own consistency. Thus, the {{statement}} [...] "there are no contradictions in the Principia system" [...] cannot be proven in the Principia system unless there are contradictions in the system (in which case it can be proven both true and false).|$|R
