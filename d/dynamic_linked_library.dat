11|2113|Public
30|$|We {{created a}} dataset of {{malicious}} and benign executables for the Windows operating system, the system {{most commonly used}} and attacked today. This malicious and benign file collection was previously used in [12]. We acquired 7, 688 malicious files from the VX Heaven website [34]. To identify the files, we used the Kaspersky anti-virus. Benign files, including executable and DLL (<b>Dynamic</b> <b>Linked</b> <b>Library)</b> files, were gathered from machines running the Windows XP operating system on our campus. The benign set contained 22, 735 files. The Kaspersky anti-virus program was used to verify that these files did not contain any malicious code.|$|E
40|$|This paper {{describes}} {{a system for}} identification execution of programs using execution events of the programs. This system {{is based on a}} model of program execution for security purposes, and is implemented on the Microsoft Windows platforms using an operating system technique called DLL (<b>Dynamic</b> <b>Linked</b> <b>Library)</b> replacement. Compared to other related works, this paper has two key contributions: It {{describes a}} systematic way to retain all system DLLs made by application programs dynamically and in real-time on the Microsoft Windows platforms. It also presents a new model of program execution, in which frequencies of program execution events are considered in addition to their patterns. Our experiment data indicate improved results...|$|E
40|$|Abstract. In Large-scale network applications, {{transmission}} data collection {{is the basis}} for audit, analysis and evaluation of systems and users. Transmission data collection can be carried out either on the link line or on the host where the network application is running. Collecting at different locations, the types of data acquired are different, thus need different processing. This paper first analyzes the different {{transmission data}} collection methods, their advantages as well as disadvantages. Then analyzes the structure of those network applications that are basing on transmission <b>dynamic</b> <b>linked</b> <b>library,</b> promotes the intermediate DLL method. Finally through an example it shows how to define the intermediate DLL to collect transferred data on application layer without affecting the original system function...|$|E
50|$|Functions {{defined in}} <b>Dynamic</b> <b>Link</b> <b>Libraries</b> can be used.|$|R
5000|$|Compiler (can make {{executable}} files, <b>libraries</b> and <b>dynamic</b> <b>linked</b> <b>libraries</b> (DLL) files) ...|$|R
40|$|This paper {{reports on}} a {{research}} aimed at developing an electronic data collection and integration tool for heterogeneous data. The article reports on modeling of a generic tool for collecting e-Health data using relational database. It also explores a methodology of collecting Verbal Autopsy data using Mobile devices. The V-Model approach was deployed in developing the <b>Dynamic</b> <b>Link</b> <b>Library.</b> The document engineering approach was adopted to analyze both the property and conceptual model of the information context of the forms. The skipping pattern algorithm was developed and sixteen mapping controls were designed to handle any data format in the <b>Dynamic</b> <b>link</b> <b>library.</b> The model was prototyped using Verbal Autopsy forms. The model {{is found to be}} useful in collecting e-Health data using mobile devices. The design of the <b>Dynamic</b> <b>Link</b> <b>Library</b> was loosely coupled to allow adaptation to others digital data collection in biomedical field. In addition, sixteen control classes in the <b>Dynamic</b> <b>Link</b> <b>Library</b> were able to handle more than 250 variables in a Verbal Autopsy form. General terms Software developmen...|$|R
40|$|An {{automated}} binary change detection model using a threshold-based calibration {{approach was}} introduced in the study. The burdensome processes required in binary change detection, including calibration, calculation of accuracy, extraction of optimum threshold(s), generation of a binary change mask, and removal of "salt-and-pepper" noise were integrated and automated in the model. For practical purpose, the model was implemented as a <b>dynamic</b> <b>linked</b> <b>library</b> in ESRI ArcMap 9. 1 using Visual Basic. This study demonstrated the model with a variety of single and multiple variables (layers) extracted from multiple-date QuickBird imagery for three study sites in Las Vegas, NV and two study sites in Tucson, AZ. The use of multiple variables in binary change detection resulted in significantly better performance than single variables. close 192...|$|E
40|$|Thesis {{deals with}} manipulation, {{archiving}} and viewing of 3 D data. Theoretic part contains basic {{introduction to the}} field. Practical part of the thesis is design {{and implementation of the}} library for viewing 3 D data and viewer / editor using this library. Library is written in c++ computer language and it’s intended {{to be used as a}} <b>dynamic</b> <b>linked</b> <b>library,</b> which functionality can be easily enhanced with additional plug-in modules without need to modify the source code of the library. Actual viewing is not tied to any specific type of graphical API, library can be extended with plug-in for rendering using any software or hardware. Part of the implementation is plug-in for rendering 3 D data using OpenGL interface...|$|E
40|$|The OO co-modeling methodology, {{previously}} introduced, {{employs a}} layered approach in OO war game models behavior {{of an object}} and a lower one models details of the object. Within the methodology military domain experts and M&S experts models an object at the upper and the lower layers, respectively in concurrent manner. This paper proposes a parametric behavior modeling framework for war game models development based on the methodology, which provides a means for military domain experts/users to change model’s detailed behavior with no knowledge on modeling semantics. To do so it requires separate implementations between {{the upper and lower}} layer objects in which the lower layer object is managed in a <b>dynamic</b> <b>linked</b> <b>library.</b> The simulator would support new algorithms or strategies with minimal cost. To demonstrate the effectiveness of the proposed framework, a naval war game DEVS simulator is exemplified...|$|E
50|$|Full Windows API support, {{including}} full {{file system}} and registry access, loading {{and execution of}} <b>dynamic</b> <b>link</b> <b>libraries</b> and executing files.|$|R
5000|$|... newLISP has an import function, {{which allows}} {{importing}} functions from DLLs (<b>Dynamic</b> <b>Link</b> <b>Libraries)</b> on Win32 or shared libraries on Linux/UNIX.|$|R
5000|$|... "The OPEN command opens {{communication}} with a device, {{which can be}} a disk file, a window, a <b>dynamic</b> <b>link</b> <b>library</b> or a serial communications port." ...|$|R
40|$|Abstract-The work {{describes}} {{the development of}} Online Assamese Stroke & Akshara Recognizer based {{on a set of}} language rules. In handwriting literature strokes are composed of two coordinate trace in between pen down and pen up labels. The Assamese aksharas are combination of a number of strokes, the maximum number of strokes taken to make a combination being eight. Based on these combinations eight language rule models have been made which are used to test if a set of strokes form a valid akshara. A Hidden Markov Model is used to train 181 different stroke patterns which generates a model used during stroke level testing. Akshara level testing is performed by integrating a GUI (provided by CDAC-Pune) with the Binaries of HTK toolkit classifier, HMM train model and the language rules using a <b>dynamic</b> <b>linked</b> <b>library</b> (dll). We have got a stroke level performance of 94. 14 % and akshara level performance o...|$|E
40|$|The work {{describes}} {{the development of}} Online Assamese Stroke & Akshara Recognizer based {{on a set of}} language rules. In handwriting literature strokes are composed of two coordinate trace in between pen down and pen up labels. The Assamese aksharas are combination of a number of strokes, the maximum number of strokes taken to make a combination being eight. Based on these combinations eight language rule models have been made which are used to test if a set of strokes form a valid akshara. A Hidden Markov Model is used to train 181 different stroke patterns which generates a model used during stroke level testing. Akshara level testing is performed by integrating a GUI (provided by CDAC-Pune) with the Binaries of HTK toolkit classifier, HMM train model and the language rules using a <b>dynamic</b> <b>linked</b> <b>library</b> (dll). We have got a stroke level performance of 94. 14 % and akshara level performance of 84. 2 %. Comment: 6 pages, 9 figures, International Journal of Scientific and Research Publications, Volume 4, Issue 1, January 201...|$|E
40|$|The {{objective}} {{of this research is}} to investigate compression algorithms for the purposes o f medical archiving and remote diagnostics. A single X-ray of size 1024 by 1024 pixels at 8 bit resolution occupies approximately 1 Mbyte of storage space and takes approximately 8 minutes to transmit over a standard telephone line. There is a need to reduce both required storage space and transmission time. This is achieved by compressing the image. For archiving, a lossless compression algorithm is used and for remote diagnostics a lossy compression algorithm is used. The development of an application for the transmission of images from the server application to a client application using the Internet is also investigated. The performances of three lossless compression algorithms are investigated: Huffman Coding, Arithmetic Coding and Huffman Coding using Splay Trees. These algorithms are written in C, transformed into (<b>Dynamic</b> <b>Linked</b> <b>Library)</b> DLLs using Visual C++ for use in a Visual Basic application. The algorithms are tested on five images, three X-rays and two standard images, and compression ratio, compression time and decompression time are recorded for each. The lossy algorithm investigated is Transform Image coding using the Discrete Cosine Transform (DCT). This algorithm is written in C, transformed into a DLL using Visual C++ for use in a Visual Basic application. The algorithm is tested on five images, three X-rays and two standard images, and compression ratio, compression time, decompression time and mean square error for different quality factors are recorded for each image. The application is developed with a user-friendly Graphic User Interface (GUI) using Visual Basic. The client could choose an image from the server and then zo om in on any section of it. This can be used for remote diagnostics or as a reference tool. The application could also determine which DCT method to use to optimise the bandwidth, depending on the speed of the medium used...|$|E
50|$|The linker allowed {{flexibility}} for {{object code}} {{management and the}} creation of <b>dynamic</b> <b>linked</b> <b>libraries</b> and overlays. It also identified and removed unused code and data.|$|R
50|$|A few select editors have a plugin {{system that}} allows to extend the GUI and add new functionality, usually loading <b>dynamic</b> <b>link</b> <b>libraries</b> written in a C-compatible language.|$|R
50|$|EPANET's {{computational}} {{engine is}} available for download as a separate <b>dynamic</b> <b>link</b> <b>library</b> for incorporation into other applications. The source code for EPANET 2 {{is available on the}} EPA's EPANET website.|$|R
40|$|The {{research}} {{presented in}} this thesis {{is based on the}} idea that to find a better method of modelling, simulation and controlling the dynamic mechanical systems by using Lagrange method and bond graph approach. Based on the Offshore Ship Operation Model (OSOM), different relevant sub-systems of marine crane is studied and developed in 20 -sim. The 3 D visualization of marine crane operations on DP vessels in OSOM will be developed in GLview. In the filed of marine operations, especially for the subsea technologies for Oil and Gas industry which is highly rely on the Platform Supply Vessel (PSV) or Offshore Construction Vessel (OSV). These vessels are equipped with marine crane system or winch system that can provide heavy lifting operation for the subsea constructions. The OSOM platform emphasizes on the interconnected behavior of the vessel and the equipment on board, as well as the environmental loads, such as wave load, current load and wind load during the operations. This is because the equipment on board and the DP vessel will have significant impact on the dynamic behavior between each other. This thesis mainly focus on marine crane and its sub-systems on the DP vessel, and set a framework for modelling, simulation and analysis of the dynamics of rigid body systems through Lagrange method and bond-graph approach. Based on this framework, many sub-systems such as actuators, hydrodynamics and controllers can be interfaced. In addition, in order to build an efficient and handy marine operation simulator, the visualization of the model is very important. This thesis provides the method to achieve the requirements by using Dynamic Link Library to connect simulator 20 -sim and visualization tool GLview. The. DLL file is written by C code and print the visualization code to. VTF file for 3 D animation in GLview. The OSOM platform is mainly developed by OSOM which in order to develop a high fidelity simulator of an offshore construction vessel with heavy duty crane. This thesis is based on the OSOM and the specialization project of the author himself. The OSOM is still under development and several further works is provided in the last chapter. Key Words: Crane-Vessel system, bond graph modelling, 3 D visualization, crane hydraulic system, position control, system dynamics, <b>dynamic</b> <b>linked</b> <b>library...</b>|$|E
40|$|South Australian Forestry Corporation (ForestrySA) {{had been}} {{actively}} investigating the applications of mobile GIS in forestry {{for the past}} few years. The main objective is to develop an integrated mobile GIS capability that allows staff to collect new spatial information, verify existing data, and remotely access and post data from the field. Two (2) prototype mobile GIS applications have been developed already using the Environmental Systems Research Institute (ESRI) ARCGIS R technology as the main spatial component. These prototype systems are the Forest Health Surveillance System and the Mobile GIS for Wetlands System. The Forest Health Surveillance System prototype is used primarily for aerial forest health surveillance. It was developed using a tablet PC with ArcMap R GIS. A customised toolbar was developed using ArcObjects R in the Visual Basic 6 Integrated Development Environment (IDE). The resulting <b>dynamic</b> <b>linked</b> <b>library</b> provides a suite of custom tools which enables the following: - quickly create spatial features and attribute the data - full utilisation of global positioning system (GPS) technology - excellent screen display navigation tools, i. e. pan, rotate map, capture of flight path - seamless integration of data into GIS as geodatabase (GDB) feature classes - screen entry of text and conversion to annotation feature classes The Mobile GIS for Wetlands System prototype was developed for verifying existing wetland areas within ForestrySA’s plantation estate, collect new wetland data, and record wetland conditions. Mapping of actual wetlands within ForestrySA’s plantation estate is very critical because of the need to establish protection buffers around these features during the implementation of plantation operations. System development has been focussed on a mobile phone platform (HTC HD 2 R) with Windows R Mobile 6, ESRI’s ArcGIS R Mobile software development kit (SDK) employing ArcObjects R written on C#. NET IDE, and ArcGIS Server R technology. The system is also implemented in the VILIV R X 70. The system has undergone testing by ForestrySA staff and the refinements had been incorporated in the latest version of the system. The system has the following functionalities: - display and query strategic data layers - collect and edit spatial and attribute data - full utilisation of global positioning GPS technology - distance and area measurements - display of high resolution imagery - seamless integration of data into GIS as feature classes - screen display and navigation tools, i. e. pan, zoom in/out, rotate map - capture of flight path The next stages in the development of mobile GIS technologies at ForestrySA are to enhance the systems’ capabilities as one of the organization main data capture systems. These include incorporating other applications, e. g. roads/tracks mapping, mapping of significant sites, etc., and migration of the system to Windows Phone 7...|$|E
5000|$|DWSIM's Property and Equilibrium {{calculation}} routines {{are also}} available as a standalone, 100% managed [...]NET <b>Dynamic</b> <b>Link</b> <b>Library</b> (DLL). It can be linked against free and proprietary applications (LGPL v3 license).|$|R
50|$|In 16-bit {{versions}} of Windows, Windows USER was implemented as a file called user.exe. The file extension {{here was a}} misnomer, as Windows USER was in fact always a <b>dynamic</b> <b>link</b> <b>library.</b>|$|R
5000|$|BTMemoryModule - a <b>dynamic</b> <b>link</b> <b>library</b> (DLL) {{which can}} be loaded from memory (with Delphi and Lazarus) without storing it on the hard disk first. BTMemoryModule is a Pascal port of Joachim Bauch's ...|$|R
50|$|The NetWeaver {{engine is}} a Windows <b>dynamic</b> <b>link</b> <b>library</b> (DLL) {{developed}} by Rules of Thumb, Inc. (North East, PA). NetWeaver Developer is an interface {{to the engine}} that is used for designing knowledgebases.|$|R
50|$|In computing, DLL Hell is a {{term for}} the {{complications}} that arise when working with <b>dynamic</b> <b>link</b> <b>libraries</b> (DLLs) used with Microsoft Windows operating systems, particularly legacy 16-bit editions which all run in a single memory space.|$|R
2500|$|Another type of device {{drivers are}} [...]DRV drivers. These drivers are loaded in user-mode, and are {{commonly}} used to control devices such as multimedia devices. To provide access to these devices, a <b>dynamic</b> <b>link</b> <b>library</b> is required (such as MMSYSTEM.DLL).|$|R
40|$|Statistical {{research}} {{has always been}} {{at the edge of}} available computing power. Huge datasets, e. g in DataMining or Quantitative Finance, and computationally intensive techniques, e. g. bootstrap methods, always require a little bit more computing power than is currently available. But the most popular statistical programming language R, as well as statistical programming languages like S or XploRe, are interpreted which makes them slow in computing intensive areas. The common solution is to implement these routines in low-level programming languages like C/C++ or Fortran and subsequently integrate them as <b>dynamic</b> <b>linked</b> <b>libraries</b> (DLL) or shared object libraries (SO) in the statistical programming language. statistical programming language, XploRe, Yxilon, Java, <b>dynamic</b> <b>linked</b> <b>libraries,</b> shared object libraries...|$|R
50|$|PBWin is a 32-bit {{compiler}} {{compatible with}} the Windows 9x series and the Windows NT series of operating systems, including Windows XP, Windows Server 2008, Windows Vista, and Windows 7. PBWin can create <b>Dynamic</b> <b>Link</b> <b>Libraries.</b> PBWin applications can read <b>Dynamic</b> <b>Link</b> Libraries.PBWin comes with a compiler, IDE including an editor and stepping debugger.|$|R
50|$|In 2001, Microsoft {{released}} a special supplement to Microsoft’s old Windows 9x systems. It includes a <b>dynamic</b> <b>link</b> <b>library</b> unicows.dll (only 240 KB) containing the 16-bit flavor (the {{ones with the}} letter W on the end) of all the basic functions of Windows API.|$|R
50|$|Pointers {{are also}} used to hold the {{addresses}} of entry points for called subroutines in procedural programming and for run-time <b>linking</b> to <b>dynamic</b> <b>link</b> <b>libraries</b> (DLLs). In object-oriented programming, pointers to functions are used for binding methods, often using what are called virtual method tables.|$|R
3000|$|MapWin Interfaces: Also {{called the}} “Plug-in Interface”. It is a [...].dll file, {{which will allow}} the user to write the user’s own {{plug-ins}} to the main application. This may be done from any programming language, which supports the creation and use of Microsoft [...].NET 2.0 <b>Dynamic</b> <b>Link</b> <b>Libraries</b> (dlls).|$|R
50|$|Programmers {{can also}} build custom {{controls}} for ASP.NET applications. Unlike user controls, these controls {{do not have}} an ASCX markup file, having all their code compiled into a <b>dynamic</b> <b>link</b> <b>library</b> (DLL) file. Such custom controls can be used across multiple Web applications and Visual Studio 2013 projects.|$|R
50|$|PBCC is a 32-bit {{compiler}} for the Windows 9x {{series and}} Windows NT series of operating systems, including Windows XP, Windows Server 2008, Windows Vista, and Windows 7. PBCC applications can use <b>Dynamic</b> <b>Link</b> <b>Libraries</b> (DLL). The compiler {{comes with an}} IDE including an editor and stepping debugger.|$|R
40|$|In {{this work}} method of {{utilizing}} of Fortran code is presented. Survey of possible methods of linking with Fortran is given. Among them are linking with object files, with <b>dynamic</b> <b>link</b> <b>libraries</b> and COM objects. Thier benefits and drawbacks are highlited. DLLs {{are considered to}} be most suitable to preserve original Fortran performance and precision. Main concepts of <b>dynamic</b> <b>linking</b> are described by the example of Windows OS <b>Dynamic</b> <b>Link</b> <b>Libraries.</b> Their important feature – full independence from source code and from progamming lan-guage can be used to link any progarm with mathematical libraries on Fortran. But sometimes Fortran subroutines could not be easily called from other language. Possible problems are data misalignment, callbacks, data type mismatch. In this case special Shell DLL should be used. This method was successfully applied for LAPACK, FFTPACK and ODEPACK libraries. Some of their subroutines were integerated into new programming language BARSIC. Several performance benchmarks are listed...|$|R
30|$|To {{improve the}} programmability, all APIs {{can be called}} via <b>dynamic</b> <b>link</b> <b>library</b> (DLL). The {{advantage}} of DLL over graphic user interface (GUI) is the freedom to prepare scripts for specific applications. Since almost all high-level languages support loading DLL, the package can be further implemented in other software to extend their functionality of frequency dynamics study.|$|R
5000|$|Environmental {{subsystems}} {{are central}} components of operating {{systems of the}} Windows NT type. They allow the operating system to run software developed for the platform in question. For example, Windows NT 4.0 has four environmental subsystems, viz Win32, DOS or Win16, OS/2, and POSIX, the latter {{of which is a}} Unix standard. [...] The latter resides primarily in the <b>Dynamic</b> <b>Link</b> <b>Library</b> posix.dll.|$|R
