4|3017|Public
50|$|HCUPnet is a free, online, <b>interactive</b> <b>query</b> <b>system</b> {{based on}} HCUP data. HCUPnet {{provides}} {{statistics from the}} HCUP national databases (the NIS, NEDS, KID, and NRD) and from the State databases (the SID, SASD, and SEDD) for those States that have agreed to participate.|$|E
40|$|Query {{languages}} {{have become}} increasingly important as comprehensive medical databases have {{become a part of}} the available knowledge base for patient care. As the user community expands and the need for bedside query arises, the requirement for a fast, easy-to-use, <b>interactive</b> <b>query</b> <b>system</b> must be met. This paper describes the evolution of a query language for the TMR database, discusses problems and limitations of the system, and proposes new approaches to the problem...|$|E
40|$|This {{report is}} the user's manual of SASS v. 21, the Spreadsheet Anthropometric Scaling System (version 2. 1). It {{describes}} {{the usage of}} SASS, a spreadsheet-like system which allows flexible interactive access to all anthropometric variables needed to size a computer-based human figure, described structurally by a PEABODY file. Data that may be accessed is organized into the following "groups": segment dimension ("girth"), joint limits, center of mass, and strength, all of which work based on statistical population data. SASS creates generic computer-based human figures based on this data. SASS also is an anthropometric database and <b>interactive</b> <b>query</b> <b>system</b> that works upon anthropometric data of real individuals. Scaled computer-based human figures created by SASS can be displayed directly, and interactively changed, within the Jack software...|$|E
50|$|The ticket {{system can}} be used for {{tracking}} bugs, tasks, issues, incidents or any other kind of ticket. Customized reports can be generated from parametric stored SQL queries or using an <b>interactive</b> ticket <b>query</b> <b>system.</b> There is also an integrated search engine and a fine-grained permission system.|$|R
40|$|Given the {{explosive}} growth of modern graph data, new meth-ods are needed that allow for the querying of complex graph structures without the need of a complicated querying lan-guages; in short, <b>interactive</b> graph <b>querying</b> is desirable. We describe our work towards achieving our overall research goal of designing and developing an <b>interactive</b> <b>querying</b> <b>system</b> for large network data. We focus on three critical aspects: scalable data mining algorithms, graph visualization, and in-teraction design. We have already completed an approxi-mate subgraph matching system called MAGE in our previ-ous work that fulfills the algorithmic foundation allowing us to query a graph with {{hundreds of millions of}} edges. Our pre-liminary work on visual graph querying, Graphite, was {{the first step in the}} process to making an interactive graph query-ing system. We are in the process of designing the graph visualization and robust interaction needed to make truly in-teractive graph querying a reality...|$|R
40|$|Communication between {{end-users}} {{and spatial}} databases raises important and specific issues. Unlike classical systems, it requires strong cooperation between two major tools: spatial query language and graphical interface. This paper addresses {{the problem of}} building an <b>interactive</b> <b>querying</b> <b>system</b> for spatial databases with an open architecture. We focus on the following issues: (i) design of a databaseindependent Graphical User Interface (GUI) providing query expression support and advanced user-database interaction functionnalities (ii) software architecture for dealing with exchanges between the database logical representation and a graphical representation at the interface level (iii) implementation of spatial data and functionnalities within a DBMS without requiring changes in the logical data model or query language syntax. We present a prototype coupling the O 2 DBMS, its query language O 2 Sql, and C++/X-Window-based toolkits as graphical components for the interface implementa [...] ...|$|R
40|$|This {{report is}} the user 2 ̆ 7 s manual of SASS v. 21, the Spreadsheet Anthropometric Scaling System (version 2. 1). It {{describes}} {{the usage of}} SASS, a spreadsheet-like system which allows flexible interactive access to all anthropometric variables needed to size a computer-based human figure, described structurally by a PEABODY file. Data that may be accessed is organized into the following 2 ̆ 2 groups 2 ̆ 2 : segment dimension (2 ̆ 2 girth 2 ̆ 2), joint limits, center of mass, and strength, all of which work based on statistical population data. SASS creates generic computer-based human figures based on this data. SASS also is an anthropometric database and <b>interactive</b> <b>query</b> <b>system</b> that works upon anthropometric data of real individuals. Scaled computer-based human figures created by SASS can be displayed directly, and interactively changed, within the Jack software...|$|E
40|$|Photographic {{and video}} images are very useful in some {{university}} degree educational programs, {{but they are}} furthermore essential {{when it comes to}} Architecture. This project consists in an <b>interactive</b> database <b>query</b> <b>system,</b> based on our current 60. 000 images- world architecture and arts- archive (photo-video-CDROM-written documents) and their corresponding detailed information. Access by the users to the system is by means of a specially developed tool, working on the WWW environment...|$|R
40|$|We {{introduce}} a novel method to answer natural language queries about rehabilitation robotics, over the formal ontology REHABROBO-ONTO. As {{part of our}} method, 1) we design and develop a novel controlled natural language for rehabilitation robotics, called REHABROBO-CNL; 2) we introduce translations of queries in REHABROBO-CNL into SPARQL queries, utilizing a novel concept of query description trees; 3) we use an automated reasoner to find {{an answer to the}} SPARQL query. To facilitate the use of our method by experts, we develop an intelligent, <b>interactive</b> <b>query</b> answering <b>system,</b> and make it available on the cloud. ...|$|R
40|$|This thesis {{covers the}} {{conception}} of a visual query and transformation interface for XML, based on pattern matching. The interface is a front end for Xcerpt [bry 02 gentle], a descriptive query and transformation language for XML. The system aims at easing the task of querying semi-structured data for the casual end-user who often feels uncomfortable with textual programming languages. The goal of this thesis is {{to fill the gap}} between the interactive nature of current research on XML <b>query</b> <b>systems,</b> like QURSED [petropoulos 02 qursed] and BBQ [munroe 00 bbq], and research about visual query languages for XML and object oriented database systems. While visual languages usually provide a good approach to statical representation of program or query structure, the editing and browsing of programs is rarely covered by visual languages. <b>Interactive</b> <b>query</b> <b>systems</b> on the other hand do not provide a static view of programs that can be understood or stored outside the context of the query environment. In contrast, the visual Xcerpt interface presented in this thesis covers both aspects: visual representation of Xcerpt programs and an editor model tailored for this view. Due to the widespread acceptance of QBE-like [zloof 77 query] database interfaces by casual users, an intuitive pattern based approach for querying XML is desirable. VisXcerpt, the system presented in this thesis, fulfills this requirement...|$|R
40|$|The parser {{generator}} {{has proven to}} be an extremely useful, general purpose tool. It can be used effectively by programmers having only a knowledge of grammars and no training at all in the theory of formal parsing. Some of the application areas for which a table-driven parser can be used include <b>interactive,</b> <b>query</b> languages, menu <b>systems,</b> translators, and programming support tools. Each of these is illustrated by an example grammar...|$|R
5000|$|... == Design == BigQuery {{provides}} an external {{access to the}} Dremel technology, a scalable, <b>interactive</b> ad hoc <b>query</b> <b>system</b> for analysis of read-only nested data. To use the data in BigQuery, it first must be uploaded to Google Storage and in a second step imported using the BigQuery HTTP API. BigQuery requires all requests to be authenticated, supporting a number of Google-proprietary mechanisms as well as OAuth.|$|R
40|$|Satellite image {{processing}} {{is a complex}} task that has received considerable attention from many researchers. In this paper, an <b>interactive</b> image <b>query</b> <b>system</b> for satellite imagery searching and retrieval is proposed. Like most image retrieval systems, extraction of image features {{is the most important}} step that has a great impact on the retrieval performance. Thus, a new technique that fuses color and texture features for segmentation is introduced. Applicability of the proposed technique is assessed using a database containing multispectral satellite imagery. The experiments demonstrate that the proposed segmentation technique is able to improve quality of the segmentation results as well as the retrieval performance. <br /...|$|R
40|$|In {{the design}} of future enviromental systems, the {{semantics}} of the data {{as well as the}} kind of <b>queries</b> to those <b>systems</b> have to be considered. Enviromental data is frequently uncertain and incomplete. Heterogeneous data structures as well as multimedia data have to be managed by the <b>system.</b> For <b>interactive</b> <b>queries,</b> the <b>system</b> should allow vague queries and query formulations that are independent of the specific structure of the data and its representation. For vague queries and imprecise data, methods developed in information retrieval can be applied. Heterogeneous data structures can be handled with concepts from object-oriented database management systems. In multimedia information systems, the problem of full integration of the different media is yet unsolved, especially in case the information a user searches for is stored in different media. We claim that the retrieval interface offerd by current database management systems is not sufficient for interactive use. In addition, funct [...] ...|$|R
40|$|Query {{suggestion}} is extensively used in web search engines to suggest relevant queries, {{which can help}} users better express their information needs. In this paper, we explore the application of query suggestion in xml keyword search and propose a novel <b>interactive</b> xml <b>query</b> <b>system</b> XQSuggest, which mainly targets non-professional users who roughly know {{the contents of the}} database. Our system extends conventional keyword search systems by instantly suggesting several understandable semantic strings after each keyword is typed in, so that the users can easily select their desired semantic string, which represents a specific meaning of the keyword, to replace the ambiguous keyword. We provide a novel algorithm to compute the final results. Experimental results are provided to verify the better effectiveness of our system. Griffith Sciences, School of Information and Communication TechnologyNo Full Tex...|$|R
40|$|Dremel is a scalable, <b>interactive</b> ad hoc <b>query</b> <b>system</b> for {{analysis}} of read-only nested data. By combining multilevel execution trees and columnar data layout, {{it is capable of}} running aggregation queries over trillion-row tables in seconds. The system scales to thousands of CPUs and petabytes of data, and has thousands of users at Google. In this paper, we describe the architecture and implementation of Dremel, and explain how it complements MapReducebased computing. We present a novel columnar storage representation for nested records and discuss experiments on few-thousand node instances of the system. 1...|$|R
40|$|We {{introduce}} a novel method to answer natural language queries about rehabilitation robotics, over the formal ontology. For that, 1) we design {{and develop a}} novel controlled natural language for rehabilitation robotics, called; 2) we introduce translations of queries in into queries, utilizing a novel concept of query description trees and description logics concepts; 3) we use an automated reasoner to find {{an answer to the}} query. To facilitate the use of our method by experts, we develop an intelligent, <b>interactive</b> <b>query</b> answering <b>system,</b> using Semantic Web technologies, and make it available on the cloud via Amazon web services. This interface guides the users to express their queries in natural language and displays the answers to queries in a readable format, possibly with links to detailed information. Easy access to information on through complex queries in natural language may help engineers inspire new rehabilitation robot designs, while also guiding practitioners to make more informed decisions on technology based rehabilitation...|$|R
40|$|Abstract—We propose in {{this paper}} an <b>interactive</b> <b>query</b> {{recommendation}} <b>system,</b> namely FIMIOQR. It {{is designed to help}} OLAP (On-line Analytical Processing) users in their decision query writing task based on both a set of selected measures and decision queries log file. Our FIMIOQR system is designed to discover associations from decision queries log file. For this end, we use association rules method to extract frequent itemsets from dimensions attributes according to user selected set of measures. This allows end users in OLAP systems to write relevant queries guided by an interactive recommending system and helps them to meet their analysis objectives. In addition, we propose a tool for the automatic implementation of FIMIOQR which provides a visual interface to OLAP users which helps them to write their queries step by step in an interactive way. We also carried out some experimental tests to evaluate our system. The experimental evaluation proves our FIMIOQR framework is efficient in term of recommendation quality. Index Terms—Interactive Recommendation; Data warehouse...|$|R
40|$|In this paper, a {{new image}} {{segmentation}} approach that integrates color and texture features using the fuzzy c-means clustering algorithm is described. To demonstrate {{the applicability of the}} proposed approach to satellite image retrieval, an <b>interactive</b> region-based image <b>query</b> <b>system</b> is designed and developed. A database comprising 400 multispectral satellite images is used to evaluate the performance of the system. The results are analyzed and discussed, and a performance comparison with other methods is included. The outcomes reveal that the proposed approach is able {{to improve the quality of}} the segmentation results as well as the retrieval performance...|$|R
40|$|We {{consider}} how to support <b>interactive</b> <b>querying</b> over webscale data. The basic {{approach is to}} view querying as a two-phase activity: first supply a query template, and later supply specific instantiations of the template. Interactive responsiveness is offered {{in the second phase}} only. While instances of this problem have been studied in the past, e. g., OLAP and web search, we pursue a more general formulation. Our aim is to build a general two-phase <b>query</b> <b>system.</b> 1...|$|R
40|$|Heterogeneous graphs are {{increasingly}} {{used to represent}} complex relationships in schema-less data. Querying these graphs is a fun-damental and critical task for many graph applications. While such graphs are content-rich, they are difficult to use. In this work we present techniques to help schema-agnostic users easily query such large heterogeneous graphs. As an initial step towards making such graphs more usable, we propose two systems: (1) GQBE, a system which supports a new querying paradigm that queries such graphs by example entity tuples, without requiring them to form complex graph queries, and (2) VIIQ, an <b>interactive</b> visual <b>query</b> formula-tion <b>system</b> that helps users construct exact query graphs. VIIQ ranks the labels for manually added query graph components, and also automatically recommends new edges {{to include in the}} query graph, based on how likely they will be of interest to the user. 1...|$|R
40|$|Much {{attention}} has been paid to the relative effectiveness of <b>interactive</b> <b>query</b> expansion versus automatic <b>query</b> expansion. Although <b>interactive</b> <b>query</b> expansion has the potential to be an effective means of improving a search, in this paper we show that, on average, human searchers are less likely than systems to make good expansion decisions. To enable good expansion decisions, searchers must have adequate instructions on how to use <b>interactive</b> <b>query</b> expansion functionalities. We show that simple instructions on using <b>interactive</b> <b>query</b> expansion do not necessarily help searchers make good expansion decisions and discuss difficulties found in making query expansion decisions. Categories and Subject Descriptors H. 3. 3 [Information Search and Retrieval]:- search process, relevance feedback...|$|R
40|$|<b>Interactive</b> <b>query</b> {{languages}} provide {{easy to use}} interfaces to database systems. However, {{they lack}} {{the power of the}} host languages to perform manipulations on data. This thesis presents an <b>interactive</b> <b>query</b> language Combined Query Language (CQL) that has some features of procedural languages. CQL allows users to interactively manipulate databases and perform calculations on data. CQL is a self contained <b>interactive</b> <b>query</b> language that combines the computational power of a host language (like FORTRAN) with the convenience and flexibility of the common <b>interactive</b> <b>query</b> languages. Users of CQL would not have to use a host language for most of the database applications. CQL uses the low level data base management routines developed for another thesis. 2 ̆ 7 2 ̆ 7 Robert Fabbio 2 ̆ 7 s masters thesis...|$|R
5000|$|T-ASK (1975), an <b>Interactive</b> <b>Query</b> Language for Harris {{computers}} ...|$|R
40|$|Query {{length in}} best-match {{information}} retrieval (IR) systems {{is well known}} to be positively related to effectiveness in the IR task, when measured in experimental, non-interactive environments. However, in operational, <b>interactive</b> IR <b>systems,</b> <b>query</b> length is quite typically very short, {{on the order of}} two to three words. We report on a study which tested the effectiveness of a particular query elicitation technique in increasing initial searcher query length, and which tested the effectiveness of queries elicited using this technique, and the relationship in general between query length and search effectiveness in interactive IR. Results show that the specific technique results in longer queries than a standard query elicitation technique, that this technique is indeed usable, that the technique results in increased user satisfaction with the search, and that query length is positively correlated with user satisfaction with the search...|$|R
40|$|We {{present an}} <b>interactive</b> <b>query</b> {{formulation}} technique which enables exploitation {{not only of}} structural properties of data but also of semantic constraints as posed by the contents of data. The technique aims at the formulation of a semantically consistent or meaningful query by the end-user without any previous knowledge of syntax formalisms and data model semantics. This has been achieved by end-user guidance in that an inference engine suggests semantically rich query terms for further consideration by the end-user. The set of suggested terms at each interaction stage comply with the already considered query terms with respect to structure and contents based semantics. Assignment or selection of operational terms are also allowed, if operational semantics comply with the semantics of data. The <b>interactive</b> <b>query</b> formulation component has been implemented in Java and runs on the client side of a client/server based <b>query</b> answering <b>system</b> architecture. ...|$|R
30|$|Distributed {{processing}} is {{the base}} of hadoop. Hive and Pig relies on MapReduce framework for distributed processing. But MapReduce is Batch Oriented. So it is not suitable for <b>interactive</b> <b>queries.</b> So Apache Tez is alternative for <b>interactive</b> <b>query</b> processing. It is available in 2.x versions of Hadoop [3]. Tez is prominent over map reduce by using hadoop containers efficiently, multiple reduce phases without map phases and effective use of HDFS.|$|R
5000|$|Adaptive chosen-plaintext attack: {{where the}} {{cryptanalyst}} makes {{a series of}} <b>interactive</b> <b>queries,</b> choosing subsequent plaintexts {{based on the information}} from the previous encryptions.|$|R
50|$|CrateDB {{includes}} a built-in Administration Interface. The Command Line interface (Crate Shell - CraSh) allows <b>interactive</b> <b>queries.</b> Its Python client is most advanced and features SQLAlchemy integration.|$|R
40|$|In this paper, we {{describe}} a <b>query</b> <b>system</b> that provides visual relevance feedback in querying large databases. Our {{goal is to}} support the process of data mining by representing as many data items as possible on the display. By arranging and coloring the data items as pixels according to their relevance for the query, the user gets a visual impression of the resulting data set. Using an <b>interactive</b> <b>query</b> interface, the user may change the query dynamically and receives immediate feedback by the visual representation of the resulting data set. Furthermore, by using multiple windows for different parts of a complex query, the user gets visual feedback for {{each part of the}} query and, therefore, may easier understand the overall result. Our system allows to represent the largest amount of data that can be visualized on current display technology, provides valuable feedback in querying the database, and allows the user to find results which, otherwise, would remain hidden in the database...|$|R
40|$|Abstract: Much {{attention}} has been paid to the relative effectiveness of <b>Interactive</b> <b>Query</b> Expansion (IQE) versus Automatic Query Expansion (AQE). This research has been shown that automatic query expansion (collection dependent) strategy gives better performance than no query expansion. The percentage of queries that are improved by AQE strategy is 57 % with average precision equal to 43. 2. Compared against AQE (collection dependent) strategy, IQE gives better average precision than AQE strategy. The percentage of queries that are improved by best IQE decision is 86 % with average precision equal to 44. 1. Evaluation process reveals that the value of n in AQE strategy that gave the optimal value of average precision for the whole query set is equal to one. Key words: Arabic language, evaluation of ir, <b>interactive</b> <b>query</b> expansion, query expansio...|$|R
50|$|DSS {{have many}} tools that contain {{different}} functions such as; sophisticated database management capabilities {{with access to}} internal and external data. information, and knowledge; powerful modeling functions accessed by a model management system; powerful, yet simple user interface designs that enable <b>interactive</b> <b>queries,</b> reporting, and graphing functions.|$|R
40|$|A user-centered {{investigation}} of <b>interactive</b> <b>query</b> ex-pansion {{within the context}} of a relevance feedback sys-tem is presented in this article. Data were collected from 25 searches using the INSPEC database. The data col-lection mechanisms included questionnaires, transac-tion logs, and relevance evaluations. The results discuss issues that relate to query expansion, retrieval effective-ness, the correspondence of the on-line-to-off-line rele-vance judgments, and the selection of terms for query expansion by users (<b>interactive</b> <b>query</b> expansion). The main conclusions drawn from the results of the study are that: (1) one-third of the terms presented to users in a list of candidate terms for query expansion was identified by the users as potentially useful for query expansion. (2) These terms were mainly judged as either variant ex-pressions (synonyms) or alternative (related) terms to the initial query terms. However, a substantial portion of the selected terms were identified as representing new ideas. (3) The relationships identified between the five best terms selected by the users for query expansion and the initial query terms were that: (a) 34 % of the query expansion terms have no relationship or other type of correspondence with a query term; (b) 66 % of the re-maining query expansion terms have a relationship to the query terms. These relationships were: narrower term (46 %), broader term (3 %), related term (17 %). (4) The results provide evidence for the effectiveness of <b>interactive</b> <b>query</b> expansion. The initial search produced on average three highly relevant documents; the query expansion search produced on average nine further highly relevant documents. The conclusions highlight the need for more research on: <b>interactive</b> <b>query</b> expan-sion, the comparative evaluation of automatic vs. inter-active query expansion, the study of weighted Web-based or Web-accessible retrieval systems in opera-tional environments, and for user studies in searching ranked retrieval systems in general...|$|R
40|$|Current {{search engines}} {{do not fully}} {{leverage}} semantically rich datasets, or specialise in indexing just one domainspecific dataset. We present a search engine that uses the RDF data model to enable <b>interactive</b> <b>query</b> answering over richly structured and interlinked data collected from many disparate sources on the Web...|$|R
40|$|Different {{presentations of}} {{candidate}} expansion terms {{have not been}} f,~lly explored in <b>interactive</b> <b>query</b> expansion (IQE). Most existing systems that offer an IQE facility use a list form of presentation. This paper examines an hierarchical presentation of the expansion terms which are automatically generated from a set of retrieved documents, organisad in a general to apecific manner, and visu-alised by cascade menus. To evaluate the effactiveness of the pre-sentation, a user test was carried out to compare the hierarchical form with the conventional list form. This shows that users of the hierarchy can complete the expansion task in less time and with fewer terms over those using the lists. Relations between initial query terms and selected expansion terms were also investigated. Keywords Information retrieval, <b>interactive</b> <b>query</b> expansion, concept hierar-chies 1...|$|R
40|$|This paper {{presents}} an anticipatory user interface for search result visualization that exploits Query Lookahead, {{a technique that}} eagerly evaluates refined queries automatically generated from an initial user query. A selected collection of refined queries is displayed to the user as an <b>Interactive</b> <b>Query</b> Hierarchy. Each child query refines its parent with additional indexing terms that are extracted from the documents that match the parent query. The user interface {{presents the results of}} each selected child <b>query</b> in advance. <b>Interactive</b> <b>query</b> hierarchies can also break down a large and imprecise result set in categories determined by the indexing terms appearing in the documents in the result set. The availability of search results from query lookahead make possible the development of coverage-based category selection algorithms that maximize coverage while minimizing information loss...|$|R
