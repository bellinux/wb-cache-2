10000|10000|Public
5|$|Following Malvern's new-found fame as a spa {{and area}} of natural beauty, and fully <b>exploiting</b> its new rail connections, {{factories}} {{from as far}} as Manchester were organising day trips for their employees, often attracting as many as 5,000visitors a day. In 1865, a public meeting of residents denounced the rising rail fares– by then twice that of other lines– that were <b>exploiting</b> the tourism industry, and demanded a limitation {{to the number of}} excursion trains. The arrival of the railway also enabled the delivery of coal in large quantities, which accelerated the area's popularity as a winter resort.|$|E
5|$|Sunil as Harsha's gullible friend. He accompanies {{him most}} of the time and {{constantly}} warns him about Indu <b>exploiting</b> him financially.|$|E
5|$|The artist Adrian Gray practises stone balancing, <b>exploiting</b> {{friction}} and {{the centre of}} gravity to create striking and seemingly impossible compositions.|$|E
5000|$|If {{there is}} an <b>exploit</b> that is usable, the <b>exploit</b> loads and executes a payload on the victim's {{computer}} and informs the Blackhole <b>exploit</b> kit server which <b>exploit</b> was used to load the payload.|$|R
50|$|There {{are several}} methods of {{classifying}} <b>exploits.</b> The most common is by how the <b>exploit</b> contacts the vulnerable software. A remote <b>exploit</b> works over a network and <b>exploits</b> the security vulnerability without any prior {{access to the}} vulnerable system.|$|R
25|$|The battle rages. <b>Exploits</b> {{and deaths}} of Phaleneus, Dexiochus and Clytios. <b>Exploits</b> of Corymbasos. Strange deaths in battle. <b>Exploits</b> of the Cyclopes and Korybantes.|$|R
5|$|Different tactics {{have been}} used on iOS devices, such as <b>exploiting</b> iCloud {{accounts}} and using the Find My iPhone system to lock access to the device. On iOS 10.3, Apple patched a bug in the handling of JavaScript pop-up windows in Safari that had been exploited by ransomware websites.|$|E
5|$|During the 1960s and 1970s, {{venture capital}} firms focused their {{investment}} activity primarily on starting and expanding companies. More often than not, these companies were <b>exploiting</b> breakthroughs in electronic, medical or data-processing technology. As a result, venture capital {{came to be}} almost synonymous with technology finance.|$|E
5|$|In 2000, Cephalic Carnage {{signed to}} the American heavy metal record label Relapse Records and {{released}} its second album <b>Exploiting</b> Dysfunction, {{which included a}} tour with Napalm Death and The Dillinger Escape Plan.|$|E
50|$|Nils {{continued}} {{trying the}} other browsers. Although Miller had already <b>exploited</b> Safari on OS X, Nils <b>exploited</b> this platform again, {{then moved on}} to <b>exploit</b> Firefox successfully.|$|R
50|$|A local <b>exploit</b> {{requires}} prior {{access to}} the vulnerable system and usually increases the privileges of the person running the <b>exploit</b> past those granted by the system administrator. <b>Exploits</b> against client applications also exist, usually consisting of modified servers that send an <b>exploit</b> if accessed with a client application.|$|R
40|$|The {{automatic}} <b>exploit</b> generation {{challenge is}} given a program, automatically find vulnerabilities and gener-ate <b>exploits</b> for them. In this paper we present AEG, the first end-to-end system for fully automatic <b>exploit</b> gener-ation. We used AEG to analyze 14 open-source projects and successfully generated 16 control flow hijacking ex-ploits. Two of the generated <b>exploits</b> (expect- 5. 43 and htget- 0. 93) are zero-day <b>exploits</b> against unknown vul-nerabilities. Our contributions are: 1) we show how <b>exploit</b> generation for control flow hijack attacks can be modeled as a formal verification problem, 2) we pro-pose preconditioned symbolic execution, a novel tech-nique for targeting symbolic execution, 3) we present a general approach for generating working <b>exploits</b> once a bug is found, and 4) we build the first end-to-end sys-tem that automatically finds vulnerabilities and gener-ates <b>exploits</b> that produce a shell. ...|$|R
5|$|In {{addition}} to its intended legitimate purposes, DFU can also be exploited by uploading maliciously crafted firmware that causes USB devices to spoof various other device types; one such <b>exploiting</b> approach is known as BadUSB.|$|E
5|$|It {{was thought}} that Bradman would play Ring, but {{he changed his mind}} on the first morning of the First Test when rain was forecast. Johnston was played in the hope of <b>exploiting</b> a wet wicket and he amply rewarded his captain by taking the most wickets of any bowler in the match. Yardley won the toss and elected to bat.|$|E
5|$|It {{was thought}} that Bradman would play Ring, but {{he changed his mind}} on the first morning of the First Test when rain was forecast. Johnston was played in the hope of <b>exploiting</b> a wet wicket. Yardley won the toss and elected to bat. England lost leg spinner Wright before the match due to lumbago.|$|E
40|$|Software <b>exploits</b> {{are one of}} {{the major}} threats to the Internet security. A large family of <b>exploits</b> works by corrupting memory of the victim process to execute {{malicious}} code. To quickly respond to these attacks, it is critical to automatically diagnose such <b>exploits</b> to find out how they circumvent existing defense mechanisms. Because of the complexity of the victim programs and sophistication of recent <b>exploits,</b> existing analysis techniques fall short: they either miss important attack steps or report too much irrelevant information. In this paper, based on the observation that the key steps in memory corruption <b>exploits</b> often involve pointer misuses, we propose a novel solution, PointerScope, to use type inference on binary execution to detect the pointer misuses induced by an <b>exploit.</b> These pointer misuses highlight the important attack steps of the <b>exploit,</b> and therefore convey valuable information about the <b>exploit</b> mechanisms. Our approach complements dependency-based solutions to perform more comprehensive diagnosis of sophisticated memory <b>exploits.</b> We prototyped PointerScope and evaluated it using real-world <b>exploit</b> samples and demonstrated that PointerScope can successfully capture the key attack steps, which significantly facilitates attack response. ...|$|R
5000|$|Remote <b>exploits</b> that <b>exploit</b> {{vulnerabilities}} on servers {{and clients}} ...|$|R
2500|$|They also collect {{detailed}} information on malware and <b>exploits</b> they find, tied to the user's license number and device identifier, [...] "vendor... File path of <b>exploit</b> process... Command-line arguments passed to the <b>exploit...</b> (Potentially) {{a copy of the}} <b>exploit</b> executable itself". They do not list the license number as PII.|$|R
5|$|Many horror {{films have}} {{featured}} the spider, including 1955's Tarantula, <b>exploiting</b> America's fear of atomic radiation during the nuclear arms race, the 1975 low-budget cult film The Giant Spider Invasion, and Kingdom of the Spiders, a 1977 film starring William Shatner, depicting {{the consequence of}} hungry spiders deprived of their natural food supply due to pesticides.|$|E
5|$|Metroid: Samus {{travels through}} the caverns {{of the planet}} Zebes to stop the Space Pirates from <b>exploiting</b> the {{parasitic}} organisms known as Metroids for galactic domination. She confronts the cybernetic lifeform Mother Brain, {{as well as its}} guardians, Kraid and Ridley. It was released on the Nintendo Entertainment System, also known as the NES.|$|E
5|$|Non-military use of {{camouflage}} includes making cell telephone towers less obtrusive {{and helping}} hunters to approach wary game animals. Patterns derived from military camouflage are frequently used in fashion clothing, <b>exploiting</b> their strong designs and sometimes their symbolism. Camouflage themes recur in modern art, and both figuratively and literally in science fiction and works of literature.|$|E
5000|$|... #Caption: HMS <b>Exploit</b> Originally XSV <b>Exploit</b> Attached to The R.N.X.S ...|$|R
50|$|Heap sprays {{have been}} used {{occasionally}} in <b>exploits</b> since at least 2001, but the technique started to see widespread use in <b>exploits</b> for web browsers {{in the summer of}} 2005 after the release of several such <b>exploits</b> which used the technique against a wide range of bugs in Internet Explorer. The heap sprays used in all these <b>exploits</b> were very similar, which showed the versatility of the technique and its ease of use, without need for major modifications between <b>exploits.</b> It proved simple enough to understand and use to allow novice hackers to quickly write reliable <b>exploits</b> for many types of vulnerabilities in web browsers and web browser plug-ins. Many web browser <b>exploits</b> that use heap spraying consist only of a heap spray that is copy-pasted from a previous <b>exploit</b> combined with a small piece of script or HTML that triggers the vulnerability.|$|R
40|$|Drive-by {{downloads}} are {{the preferred}} distribution vector for many malware families. In the drive-by ecosystem, many <b>exploit</b> servers run the same <b>exploit</b> kit {{and it is}} a challenge understanding whether the <b>exploit</b> server {{is part of a larger}} operation. In this paper, we propose a technique to identify <b>exploit</b> servers managed by the same organization. We collect over time how <b>exploit</b> servers are configured, which <b>exploits</b> they use, and what malware they distribute, grouping servers with similar configurations into operations. Our operational analysis reveals that although individual <b>exploit</b> servers have a median lifetime of 16 h, long-lived operations exist that operate for several months. To sustain long-lived operations, miscreants are turning to the cloud, with 60 % of the <b>exploit</b> servers hosted by specialized cloud hosting services. We also observe operations that distribute multiple malware families and that pay-per-install affiliate programs are managing <b>exploit</b> servers for their affiliates to convert traffic into installations. Furthermore, we analyze the <b>exploit</b> polymorphism problem, measuring the repacking rate for different <b>exploit</b> types. To understand how difficult is to takedown <b>exploit</b> servers, we analyze the abuse reporting process and issue abuse reports for 19 long-lived servers. We describe the interaction with ISPs and hosting providers and monitor the result of the report. We find that 61 % of the reports are not even acknowledged. On average, an <b>exploit</b> server still lives for 4. 3 days after a report. Finally, we detail the Malicia dataset we have collected and are making available to other researchers. status: publishe...|$|R
5|$|The Byzantines {{wasted no}} time <b>exploiting</b> the {{situation}} and signed a peace treaty with their Christian neighbours and with one of Bayezid's sons. By signing the treaty, {{they were able to}} recover Thessalonika and much of the Peloponnese. The Ottoman civil war ended in 1413 when Mehmed I, {{with the support of the}} Byzantine Empire, defeated his opponents.|$|E
5|$|The Geothermic Fuels Cells Process (IEP GFC) {{proposed}} by Independent Energy Partners extracts shale oil by <b>exploiting</b> a high-temperature stack of fuel cells. The cells, {{placed in the}} oil shale formation, are fueled by natural gas during a warm-up period and afterward by oil shale gas generated by its own waste heat.|$|E
5|$|The Harrier II was {{the first}} combat {{aircraft}} to extensively employ carbon-fiber composite materials, <b>exploiting</b> their light weight and high strength; they {{are used in the}} wings, rudder, flaps, nose, forward fuselage, and tail. Twenty-six percent of the aircraft's structure is made of composites, reducing its weight by 480lb (217kg) compared to a conventional metal structure.|$|E
50|$|The Cisco ASA-brand {{was also}} hacked by Equation Group. The {{vulnerability}} requires that both SSH and SNMP are {{accessible to the}} attacker. The codename given to this <b>exploit</b> by NSA was EXTRABACON. The bug and <b>exploit</b> (CVE-2016-6366) was also leaked by The ShadowBrokers, in the same batch of <b>exploits</b> and backdoors. According to Ars Technica, the <b>exploit</b> can easily be made to work against more modern versions of Cisco ASA than what the leaked <b>exploit</b> can handle.|$|R
50|$|The {{first public}} homebrew <b>exploit,</b> ninjhax (developed by smealum), allows {{the user to}} scan a QR Code to <b>exploit</b> the game Cubic Ninja. Other ways to run the Homebrew Launcher are fairly numerous, {{including}} freakyhax, an <b>exploit</b> in the Deluxe edition of Freakyforms: Your Creations, Alive!, Doodlebomb, an <b>exploit</b> in the 1.1.1 and older versions of Swapdoodle, and smashbroshax, a New 3DS exclusive <b>exploit</b> for the 3DS version of Super Smash Bros. for Nintendo 3DS and Wii U.|$|R
50|$|<b>Exploits</b> are {{commonly}} categorized and {{named by the}} type of vulnerability they <b>exploit</b> (see vulnerabilities for a list), whether they are local/remote and the result of running the <b>exploit</b> (e.g. EoP, DoS, spoofing).|$|R
5|$|The Tor Project {{recommended}} that Tor relay operators and hidden service operators revoke and generate fresh keys after patching OpenSSL, but noted that Tor relays use {{two sets of}} keys and that Tor's multi-hop design minimizes the impact of <b>exploiting</b> a single relay. 586 relays later found to be susceptible to the Heartbleed bug were taken off-line as a precautionary measure.|$|E
5|$|The human {{population}} exploits and {{depends on a}} large number of animal and plant species for food, mainly through agriculture but also by <b>exploiting</b> wild populations, notably of marine fish. Livestock animals are raised for meat across the world; they include (2011) around 1.4 billion cattle, 1.2 billion sheep and 1 billion domestic pigs.|$|E
5|$|Ab initio phasing {{or direct}} methods – This {{is usually the}} method of choice for small {{molecules}} (<1000 non-hydrogen atoms), and has been used successfully to solve the phase problems for small proteins. If {{the resolution of the}} data is better than 1.4 Å (140 pm), direct methods can be used to obtain phase information, by <b>exploiting</b> known phase relationships between certain groups of reflections.|$|E
5000|$|<b>Exploits</b> can be {{automated}} or manual. Automated <b>exploits</b> {{are often}} found as viruses, worms and hacking tools. If {{there are any}} existing <b>exploits</b> known for the attack this section {{should be used to}} list a reference to those <b>exploits.</b> These references can be internal such as corporate knowledge bases, or external such as the various CERT, and Virus databases.|$|R
5000|$|On July 27, 2015, Jordan [...] "Smealum" [...] Rabet, the {{developer}} of the Cubic Ninja <b>exploit,</b> {{announced a new}} version of the homebrew <b>exploit,</b> with the same features. On July 31, Rabet confirmed that the game the <b>exploit</b> was found in was IronFall: Invasion. On August 11, Nintendo temporarily delisted the game off the Nintendo eShop, as to prevent the <b>exploit</b> from spreading further. Six days later, Rabet released his <b>exploit.</b> On October 13, IronFall: Invasion returned to the eShop with [...] "Update Data", which prevents the <b>exploit</b> from being used. As of January 15, 2016, the <b>exploit</b> has been patched on system menu 10.4.0-29 which released the same day. When trying to load the game, the system does not allow users to launch the title until the software is updated, forcing users to download the patch, rendering the <b>exploit</b> unusable even if the older version of the game is available.|$|R
40|$|ABSTRACT We {{argue that}} finding {{vulnerabilities}} in software components is dif-ferent from finding <b>exploits</b> against them. <b>Exploits</b> that compromise security often use several low-level {{details of the}} component,such as layouts of stack frames. Existing software analysis tools, while effective at identifying vulnerabilities, fail to model low-leveldetails, and are hence unsuitable for exploit-finding. We study the issues involved in exploit-finding by consideringapplication programming interface (API) level <b>exploits.</b> A software component is vulnerable to an API-level <b>exploit</b> if its se-curity can be compromised by invoking a sequence of API operations allowed by the component. We present a framework tomodel low-level details of APIs, and develop an automatic technique based on bounded, infinite-state model checking to discoverAPI-level <b>exploits.</b> We present two instantiations of this framework. We show thatformat-string <b>exploits</b> can be modeled as API-level <b>exploits,</b> and demonstrate our technique by finding <b>exploits</b> against vulnerabili-ties in widely-used software. We also use the framework to model a cryptographic-key management API (the IBM CCA) and demon-strate a tool that identifies a previously known <b>exploit...</b>|$|R
