0|10000|Public
50|$|It {{is often}} used in {{conjunction}} with Start of Text (STX) and <b>Data</b> <b>Link</b> <b>Escape</b> (DLE) e.g. to distinguish frames in the <b>Data</b> <b>link</b> layer.|$|R
50|$|An early ISO {{standard}} {{defining a}} Telex-oriented communications protocol that used the non-printable ASCII transmission control characters SOH (Start of Heading), STX (Start of Text), ETX (End of Text), EOT (End of Transmission), ENQ (Enquiry), ACK (Acknowledge), DLE (<b>Data</b> <b>Link</b> <b>Escape),</b> NAK (Negative Acknowledge), SYN (Synchronous Idle), and ETB (End of Transmission Block).|$|R
50|$|The command AT+FCLASS=8 or AT#CLS=8 {{will put}} the modem in voice mode. Most modems still remain on-hook and respond with OK. Once this command has been accepted, most modems will respond with <b>Data</b> <b>Link</b> <b>Escape</b> (DLE) {{messages}} instead of or in addition to normal modem responses. For example, instead of reporting a phone line ringing with the RING message, many modems will instead send the DLE ASCII character, followed by the letter R. The specific set of DLE events reported by each modem is specific to its chipset and documented in its reference guide.|$|R
50|$|This type {{of event}} is signalled with a DLE message, {{which is a}} single-{{character}} message preceded by a <b>Data</b> <b>Link</b> <b>Escape</b> code. DLE is a character sent from the modem to the computer whose definition is unrelated to either command or data mode, and which uses a specific ASCII code (0x10) which never occurs in any AT commands or responses, {{so that it can}} be isolated from the command/response stream on that merit alone. In these modes, whenever a DLE (0x10) is sent, the character following it has a special non-command and non-data meaning. For example, a DLE followed by the number 2 means the caller pressed the number 2 on his telephone keypad. This could happen in either command or data mode so long as the phone line is in use by the modem and someone is on the other end of the line.|$|R
50|$|<b>Escape</b> <b>characters</b> {{are part}} of the syntax for many {{programming}} languages, data formats, and communication protocols. For a given alphabet an <b>escape</b> <b>character's</b> purpose is to start character sequences (so named escape sequences), which have to be interpreted differently from the same characters occurring without the prefixed <b>escape</b> <b>character.</b> An <b>escape</b> <b>character</b> may not have its own meaning, so all escape sequences are of two or more characters.|$|R
50|$|In {{computing}} and telecommunication, an <b>escape</b> <b>character</b> is {{a character}} which invokes an alternative interpretation on subsequent characters in a <b>character</b> sequence. An <b>escape</b> <b>character</b> is a particular case of metacharacters. Generally, the judgment of whether something is an <b>escape</b> <b>character</b> or not depends on context.|$|R
5000|$|Generally, an <b>escape</b> <b>character</b> {{is not a}} {{particular}} case of (device) control characters, nor vice versa. If we define control characters as non-graphic, or as having a special meaning for an output device (e.g. printer or text terminal) then any <b>escape</b> <b>character</b> for this device is a control one. But <b>escape</b> <b>characters</b> used in programming (such as the backslash, [...] "\") are graphic, hence are not control characters. Conversely most (but not all) of the ASCII [...] "control characters" [...] have some control function in isolation, therefore are not <b>escape</b> <b>characters.</b>|$|R
5000|$|JavaScript {{uses the}} \ (backslash) as an <b>escape</b> <b>character</b> for: ...|$|R
5000|$|Among other things, {{it must be}} {{possible}} to encode the character that normally terminates the string constant, plus {{there must be some}} way to specify the <b>escape</b> <b>character</b> itself. <b>Escape</b> sequences are not always pretty or easy to use, so many compilers also offer other means of solving the common problems. Escape sequences, however, solve every delimiter problem and most compilers interpret escape sequences. When an <b>escape</b> <b>character</b> is inside a string literal, it means [...] "this is the start of the escape sequence". Every escape sequence specifies one character which is to be placed directly into the string. The actual number of characters required in an escape sequence varies. The <b>escape</b> <b>character</b> is on the top/left of the keyboard, but the editor will translate it, therefore it is not directly tapeable into a string. The backslash is used to represent the <b>escape</b> <b>character</b> in a string literal.|$|R
2500|$|... * / : < > ? \ | Windows/MS-DOS has no shell <b>escape</b> <b>character</b> ...|$|R
5000|$|... {{produces}} an ASCII <b>escape</b> <b>character.</b> It {{may be used}} to exit menus or modes.|$|R
5000|$|Escaped string literal (quote, {{followed}} by <b>escaped</b> <b>characters</b> or non-quotes, {{ending in a}} quote): [...] "(\.|^\")*" ...|$|R
5000|$|Stropping (syntax) - in some {{conventions}} {{a leading}} character (such as an apostrophe) functions as an <b>escape</b> <b>character</b> ...|$|R
5000|$|A {{vertical}} tab (VT) also exists and has ASCII decimal character code 11 ( [...] or [...] ), <b>escape</b> <b>character</b> [...]|$|R
5000|$|Windows PowerShell : Uses the backquote as the <b>escape</b> <b>{{character}}.</b> For example, a newline {{character is}} denoted [...] Most common programming languages use a backslash as the <b>escape</b> <b>character</b> (e.g., [...] ), but because Windows allows the backslash as a path separator, it is impractical for PowerShell to use backslash {{for a different}} purpose. Two backticks produce the [...] character itself. For example, the nullable boolean of [...]NET is specified in PowerShell as [...]|$|R
50|$|Hamilton {{differs from}} other Unix shells {{in that it}} follows Windows {{conventions}} instead of Unix conventions for filename slashes, <b>escape</b> <b>characters,</b> etc.|$|R
50|$|MARC-8 uses {{a variant}} of the ISO-2022 encoding. It uses <b>escape</b> <b>characters</b> to {{represent}} characters beyond the 7-bit ASCII range of characters.|$|R
50|$|XES is {{sometimes}} known as UDK, from User Defined Key, the character which introduces the printer command, usually the <b>escape</b> <b>character</b> (ESC).|$|R
50|$|Some {{programming}} languages {{also provide}} {{other ways to}} represent special characters in literals, without requiring an <b>escape</b> <b>character</b> (see e.g. delimiter collision).|$|R
5000|$|Quoted-printable, which encodes 8-bit {{data into}} 7-bit data of limited line lengths, uses the equals sign [...] "=" [...] as an <b>escape</b> <b>character.</b>|$|R
5000|$|One {{method for}} {{avoiding}} delimiter collision {{is to use}} <b>escape</b> <b>characters.</b> From a language design standpoint, these are adequate, but they have drawbacks: ...|$|R
5000|$|Control codes {{generated}} by the shell <b>escape</b> <b>character</b> , although the sequence [...] {{can be used to}} represent a single [...] character in the filename.|$|R
50|$|Note the use {{of double}} {{backslash}}es, because C++ uses backslash as an <b>escape</b> <b>character.</b> The C++11 raw string feature {{could be used to}} avoid the problem.|$|R
50|$|It {{was also}} popular in USENET networks, {{which in the}} late 1980s and early 1990s, {{generally}} did not allow transmission of 8-bit <b>characters</b> or <b>escape</b> <b>characters.</b>|$|R
5000|$|QP {{works by}} using the equals sign [...] as an <b>escape</b> <b>character.</b> It also limits line length to 76, as some {{software}} has limits on line length.|$|R
50|$|Usual ways to <b>escape</b> <b>characters</b> in regex {{is using}} the {{backslash}} symbol (\). Another way is a double hyphen (--) which makes a total escaping of a row.|$|R
5000|$|In many {{programming}} languages, an <b>escape</b> <b>character</b> also forms some escape sequences {{which are}} referred to control characters. For example, line break has an escape sequence of [...]|$|R
50|$|Some {{of these}} {{encoding}} (quoted-printable and percent encoding) {{are based on}} a set of allowed characters and a single <b>escape</b> <b>character.</b> The allowed characters are left unchanged, while all other characters are converted into a string starting with the <b>escape</b> <b>character.</b> This kind of conversion allows the resulting text to be almost readable, in that letters and digits are part of the allowed characters, and are therefore left as they are in the encoded text.These encodings produce the shortest plain ASCII output for input that is mostly printable ASCII.|$|R
50|$|Automatic self configuration: Using Link Control Protocol {{it has to}} {{negotiate}} protocol features like Address-and-Control-Field-Compression (ACFC), <b>escaped</b> <b>characters,</b> and the compression, encryption (like MPPE) and authentication methods to use.|$|R
50|$|The Alt key {{should not}} be {{confused}} with the Altmode key (sometimes also labelled Alt) on some Teletype and ASCII terminals, which is a synonym for the ASCII <b>escape</b> <b>character.</b>|$|R
5000|$|In many {{programming}} languages, strings are delimited using quotes. In some cases, <b>escape</b> <b>characters</b> (and other methods) {{are used}} to avoid delimiter collision. Example : [...] "He said : \"Hello\"".|$|R
50|$|Individual {{tactical}} <b>data</b> <b>links</b> (e.g., Link 16, EPLRS, etc...) {{are just}} a part of the larger tactical <b>data</b> <b>link</b> network, encompassing tactical <b>data</b> <b>links,</b> common <b>data</b> <b>links,</b> and weapon <b>data</b> <b>links.</b> Most military platforms or units are equipped with a tactical <b>data</b> <b>link</b> capability tailored to their individual missions. Those tactical <b>data</b> <b>link</b> capabilities are not necessarily interoperable with one another, preventing the digital exchange of information between military units. BACN acts as a universal translator, or gateway, that makes the tactical <b>data</b> <b>links</b> work with one another.|$|R
50|$|This {{encoding}} scheme allows the easy mixing of 7-bit ASCII and 8-bit Japanese {{without the need}} for the <b>escape</b> <b>characters</b> employed by ISO-2022-JP, which is based on the same character set standards.|$|R
50|$|In {{computer}} programming, leaning toothpick syndrome (LTS) is {{the situation}} in which a quoted expression becomes unreadable because it contains a large number of <b>escape</b> <b>characters,</b> usually backslashes ("\"), to avoid delimiter collision.|$|R
50|$|In {{contrast}} to escape sequences and <b>escape</b> <b>characters,</b> padding delimiters provide yet {{another way to}} avoid delimiter collision. Visual Basic, for example, uses double quotes as delimiters. This is similar to escaping the delimiter.|$|R
5000|$|Unlike {{traditional}} HTML {{with its}} large range of character entity references, in XML {{there are only}} five predefined character entity references. These are used to <b>escape</b> <b>characters</b> that are markup sensitive in certain contexts: ...|$|R
