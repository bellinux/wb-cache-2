170|652|Public
25|$|The {{connection}} ensures integrity {{because each}} message transmitted includes a message <b>integrity</b> <b>check</b> using a {{message authentication code}} to prevent undetected loss or alteration of the data during transmission.|$|E
25|$|If other {{copies of}} the damaged data exist or can be reconstructed from {{checksums}} and parity data, ZFS will use {{a copy of the}} data (or recreate it via a RAID recovery mechanism), and recalculate the checksum—ideally resulting in the reproduction of the originally expected value. If the data passes this <b>integrity</b> <b>check,</b> the system can then update all faulty copies with known-good data and redundancy will be restored.|$|E
25|$|As the {{standard}} definition interface carries no checksum, CRC, or other data <b>integrity</b> <b>check,</b> an EDH (Error Detection and Handling) packet may be optionally {{placed in the}} vertical interval of the video signal. This packet includes CRC values for both the active picture, and the entire field (excluding those lines at which switching may occur, and which should contain no useful data); equipment can compute their own CRC and compare it with the received CRC in order to detect errors.|$|E
40|$|Known {{methods for}} <b>checking</b> <b>integrity</b> {{constraints}} in deductive databases do not eliminate {{all aspects of}} redundancy in <b>integrity</b> <b>checking.</b> By making the redundancy aspects of <b>integrity</b> constraint <b>checking</b> explicit, independently from any chosen method, {{it is possible to}} develop a new method that is optimal with respect to the classified redundancy aspects. We distinguish three types of redundancy and propose an <b>integrity</b> <b>checking</b> method based on revised inconsistency rules...|$|R
40|$|Abstract. Orc, {{short for}} “orchestration”, is a {{functional}} programming language that focuses on solving concurrency problems using process calculus. cOrcS (continuation of Orc Security) {{is an extension of}} the Orc Programming Language which attempts to provide the functionality of a static <b>integrity</b> <b>checking</b> step for the Orc Language. Static <b>integrity</b> <b>checking</b> is an important component of security—providing a system to identify and preserve reliable data. This evaluation discusses the ability of a static <b>integrity</b> <b>checking</b> system to be integrated into the Or...|$|R
40|$|Abstract—All {{methods for}} {{efficient}} <b>integrity</b> <b>checking</b> require all <b>integrity</b> constraints {{to be totally}} satisfied, before any update is executed. However, {{a certain amount of}} inconsistency is the rule, rather than the exception in databases. In this paper, we close the gap between theory and practice of <b>integrity</b> <b>checking,</b> i. e., between the unrealistic theoretical requirement of total integrity and the practical need for inconsistency tolerance, which we define for <b>integrity</b> <b>checking</b> methods. We show that most of them can still be used to check whether updates preserve integrity, even if the current state is inconsistent. Inconsistency-tolerant <b>integrity</b> <b>checking</b> proves beneficial both for integrity preservation and query answering. Also, we show that it is useful for view updating, repairs, schema evolution and other applications. Index Terms—Integrity Checking, Inconsistency Tolerance. I...|$|R
50|$|NO ACTION and RESTRICT {{are very}} much alike. The main {{difference}} between NO ACTION and RESTRICT is that with NO ACTION the referential <b>integrity</b> <b>check</b> is done after trying to alter the table. RESTRICT does the check before trying to execute the UPDATE or DELETE statement. Both referential actions act the same if the referential <b>integrity</b> <b>check</b> fails: the UPDATE or DELETE statement will result in an error.|$|E
50|$|All {{candidates}} for the Executive Committee should not be delegates for their associations. All members must pass an <b>integrity</b> <b>check</b> {{before they can be}} elected. The integrity checks for the vice-presidents {{and other members of the}} Executive Committee are conducted by their own confederations. The President, the female member of the Executive Committee, all members of the judicial bodies as well as those of the FIFA Audit and Compliance Committee are checked by the investigatory chamber of the FIFA Ethics Committee. Before a member can be re-elected, another <b>integrity</b> <b>check</b> must be conducted.|$|E
5000|$|The {{connection}} ensures integrity {{because each}} message transmitted includes a message <b>integrity</b> <b>check</b> using a {{message authentication code}} to prevent undetected loss or alteration of the data during transmission.|$|E
40|$|<b>Integrity</b> <b>checking</b> {{is aimed}} at {{efficiently}} determining whether {{the state of the}} information base is consistent after each operation execution. Incremental <b>integrity</b> <b>checking</b> exploits available information about the structural events that define the operation effect to compute integrity constraint violations considering as few entities of the information base as possible. In this paper we propose a new method to cope with incremental <b>integrity</b> <b>checking</b> at the conceptual level, in particular in UML conceptual schemas with OCL integrity constraints. Our method ensures an incremental verification of constraints regardless the concrete syntactic definition chosen by the designer. Postprint (published version...|$|R
5000|$|The {{solution}} {{must provide}} an integrated environment to perform data <b>integrity</b> <b>checks</b> ...|$|R
5000|$|ZFS — a {{file system}} which {{performs}} automatic file <b>integrity</b> <b>checking</b> using checksums ...|$|R
5000|$|Musa Bility, President of the Liberia Football Association; {{announced}} his bid on 26 October 2015; {{excluded from the}} presidential race on 12 November 2015 after failing an <b>integrity</b> <b>check.</b>|$|E
5000|$|... Thursday (2012) - God's Work (2012) - <b>Integrity</b> <b>Check</b> (2012) - Identity (2012) - Underwater (2012) - Failure Drill (2011) - Sideways (2011) - The Winds (2011) - Discretion (2011) ...|$|E
5000|$|<b>Integrity</b> <b>Check</b> Value (multiple of 32 bits) : Variable length check value. It {{may contain}} padding to align {{the field to}} an 8-octet {{boundary}} for IPv6, or a 4-octet boundary for IPv4.|$|E
40|$|We review two {{surveys of}} {{large-scale}} system management, observing common problems across tools and over many years. We {{also note that}} filesystem management tools interfere with filesystem <b>integrity</b> <b>checking</b> tools. Radmind, an integrated filesystem management and <b>integrity</b> <b>checking</b> tool, solves many of these problems. Radmind also provides a useful platform upon which to build further large-scale, automatic system management tools...|$|R
5000|$|A microprogrammed 16-bit central {{processor}} with floating point hardware, error detection and system <b>integrity</b> <b>checking</b> features.|$|R
40|$|Code Compression {{has been}} shown to be {{efficient}} in minimizing the memory requirements for embedded systems as well as in power consumption reduction and performance improvement. In this paper we devise a code compression method, the IBC-EI (Instruction Based Compression with Encryption and <b>Integrity</b> <b>checking),</b> tailored to provide <b>integrity</b> <b>checking</b> and encryption to secure processor-memory transaction. The principle is to keep the ciphered code compressed in the memory, thus reducing the memory footprint and providing more information per memory access. The results for the Leon Processor and a set of Mediabench and MiBench benchmarks show that the overhead introduced by the code encryption and <b>integrity</b> <b>checking</b> scheme is almost completely eliminated by the compression mechanism...|$|R
50|$|Building {{software}} {{systems that}} are independently extensible is an important challenge.An independently extensible system not only allows two people to independently develop extensions to the system, but also allows the two extensions to be combined without a global <b>integrity</b> <b>check.</b>|$|E
50|$|IP datagrams, Ethernet Frames, {{or other}} network layer packets are {{encapsulated}} {{in one or}} more GSE Packets. The encapsulation process adds control information such as the network protocol type and address label, and provides an overall <b>integrity</b> <b>check</b> when needed.|$|E
50|$|A {{baseline}} {{snapshot of}} the current system state is taken and according to your configuration Verisys will automatically compare the system against this baseline to detect any changes. Using the console, you can also start an <b>integrity</b> <b>check</b> manually at any time.|$|E
40|$|AbstractIntegrity {{constraints}} {{are useful}} for the specification of deductive databases, {{as well as for}} inductive and abductive logic programs. Verifying integrity constraints upon updates is a major efficiency bottleneck and specialised methods have been developed to speedup this task. They can, however, still incur a considerable overhead. In this paper we propose a solution to this problem by using partial evaluation to pre-compile the <b>integrity</b> <b>checking</b> for certain update patterns. The idea being, {{that a lot of the}} <b>integrity</b> <b>checking</b> can already be performed given an update pattern without knowing the actual, concrete update. In order to achieve the pre-compilation, we write the specialised <b>integrity</b> <b>checking</b> as a meta-interpreter in logic programming. This meta-interpreter incorporates the knowledge that the integrity constraints were not violated prior to a given update. By partially evaluating this meta-interpreter for certain transaction patterns, using a partial evaluation technique presented in earlier work, we are able to automatically obtain very efficient specialised update procedures, executing faster than other <b>integrity</b> <b>checking</b> procedures proposed in the literature...|$|R
50|$|Conformity <b>checks</b> and <b>integrity</b> <b>checks</b> {{need not}} covered in all {{business}} needs, it’s strictly under the database architecture's discretion.|$|R
40|$|We {{define and}} examine six classes of methods for {{integrity}} check-ing: case-based, compositional, relevance-based, simplification-based, total-integrity-dependent, and measure-based ones. Each, except the penultimate, {{corresponds to a}} particular form of incon-sistency tolerance. Inconsistency measures provide {{a new approach to}} <b>integrity</b> <b>checking</b> and inconsistency tolerance. For many meth-ods, proofs or disproofs of their inconsistency tolerance become easier and more transparent by our classification. In general, a bet-ter understanding of inconsistency-tolerant <b>integrity</b> <b>checking</b> is achieved...|$|R
5000|$|Messages {{are always}} {{transmitted}} with FEC parity data (and error-detection redundancy). A receiver decodes a message using the parity information, and requests retransmission using ARQ {{only if the}} parity data was not sufficient for successful decoding (identified through a failed <b>integrity</b> <b>check).</b>|$|E
50|$|This {{stands for}} Temporal Key Integrity Protocol and the acronym is {{pronounced}} as tee-kip. This {{is part of}} the IEEE 802.11i standard. TKIP implements per-packet key mixing with a re-keying system and also provides a message <b>integrity</b> <b>check.</b> These avoid the problems of WEP.|$|E
50|$|TKIP {{uses the}} same {{underlying}} mechanism as WEP, and consequently is vulnerable {{to a number of}} similar attacks. The message <b>integrity</b> <b>check,</b> per-packet key hashing, broadcast key rotation, and a sequence counter discourage many attacks. The key mixing function also eliminates the WEP key recovery attacks.|$|E
40|$|AbstractIntegrity {{checking}} {{is important}} in many activities, such as logistics, telecommunications or even usual tasks such as checking for someone missing in a group. While the computing and telecommunications worlds commonly use digital <b>integrity</b> <b>checking,</b> many activities {{from the real world}} do not benefit from automatic mechanisms for ensuring integrity. We propose the concept of coupled objects where groups of physical objects are tagged with RFID chips enabling pervasive and autonomous <b>integrity</b> <b>checking...</b>|$|R
40|$|This paper {{describes}} a novel engine, called PE-ICE (Parallelized Encryption and <b>Integrity</b> <b>Checking</b> Engine), enabling to guarantee confidentiality {{and integrity of}} data exchanged between a SoC (System on Chip) and its external memory. The PE-ICE approach {{is based on an}} existing block-encryption algorithm to which the <b>integrity</b> <b>checking</b> capability is added. Simulation results show that the performance overhead of PE-ICE remains low (below 4 %) compared to block-encryption-only systems (which provide data confidentiality only) ...|$|R
5000|$|Do all {{validation}} in the ETL layer {{before the}} load: disable <b>integrity</b> <b>checking</b> (disable constraint ...) {{in the target}} database tables during the load ...|$|R
50|$|After a DFB {{board meeting}} on 7 December 2011 in Frankfurt, it was {{announced}} that Niersbach was ready for election as the new DFB president. The previous president, Theo Zwanziger, ended his tenure in March 2012, and on 2 March 2012, Niersbach was unanimously elected as the new DFB president. His successor as secretary general was Helmut Sandrock. In January 2013 he signed the Declaration of the 53 European FIFA member associations to reform the Fifa Statutes. The declaration rejected the idea of a time limit of membership in the FIFA Executive Committee and an <b>integrity</b> <b>check</b> of its members by FIFA. Instead, the <b>integrity</b> <b>check</b> would be made by the regional associations. On 24 May 2013, he was elected into the UEFA Executive Committee and on 24 March 2015, into the FIFA Council.|$|E
50|$|GSE {{does not}} provide a {{mechanism}} for <b>integrity</b> <b>check</b> of single GSE Packet. A CRC-32 is only appended to the last fragment of a fragmented payload to verify the correctness of the reassembly operation. GSE relies on the physical layer being able to ensure the required error detection and/or correction probability.|$|E
50|$|For {{the purpose}} file {{identification}} and secure <b>integrity</b> <b>check</b> of files it employs SHA-1 hashes. To {{allow for a}} file to be reliably downloaded in parallel from multiple sources, {{as well as to}} allow for the reliable uploading of parts while the file is still being downloaded (swarming), Tiger tree hashes are used.|$|E
3000|$|...]. If Fog nodes {{are capable}} of {{performing}} user authentication and message <b>integrity</b> <b>checks,</b> it will eliminate message suppression, fabrication, replay and alteration attacks [[...]...|$|R
5000|$|Oversight Systems' {{patent pending}} Collaborative Reasoning Engine (CORE) applies {{automated}} business <b>integrity</b> <b>checks</b> based on best practices that allow users {{to see the}} underlying transactional data.|$|R
40|$|Cloud-based {{outsourced}} storage relieves the client’s load {{of storage}} management and preservation by providing an equivalently flexible, inexpensive, location-independent platform. As clients {{no longer have}} physical control of data, outsourced data <b>integrity</b> <b>checking</b> is of crucial importance in cloud storage. It allows the clients to verify data intactness and correctness without downloading the entire data. As the verification {{is to be done}} at client end, the <b>integrity</b> <b>checking</b> protocol must be efficient to save client’s time. Another aspect of the protocol is flexibility, which improves the quality of <b>integrity</b> <b>checking</b> by allowing user specific block partition size. Moreover in case of company oriented scenario, maintaining log records of each verification request can help in security analysis. Taking these three points into consideration, we have proposed the flexible, automated and log based RDPC model as: Auto ID-RDPC model for single-cloud storage. The proposed model is based on bilinear pairings and RDPC technique. The approach eliminates certification management with the help of Identity management and additionally provides log management towards data integrity. The model makes client free from initiating verification request and keeps track of previous records which reduces client’s time. The principle concept here is to make data <b>integrity</b> <b>checking</b> a painless job for any client. Our results demonstrate the effectiveness of our approach...|$|R
