13|10000|Public
25|$|<b>In</b> <b>system</b> <b>{{programming}},</b> often limited programming {{facilities are}} available. The use of automatic garbage collection is not common and debugging is {{sometimes hard to}} do. The runtime library, if available at all, is usually far less powerful, and does less error checking. Because of those limitations, monitoring and logging are often used; operating systems may have extremely elaborate logging subsystems.|$|E
50|$|Although this {{optimization}} {{is useful}} <b>in</b> <b>system</b> <b>programming</b> {{it should be}} avoided in high level concurrent programming unless all constraints are clear and understood. One example of bad usage is a similar idiom called double-checked locking, which, under certain conditions, can be an anti-pattern.|$|E
50|$|<b>In</b> <b>system</b> <b>{{programming}},</b> often limited programming {{facilities are}} available. The use of automatic garbage collection is not common and debugging is {{sometimes hard to}} do. The runtime library, if available at all, is usually far less powerful, and does less error checking. Because of those limitations, monitoring and logging are often used; operating systems may have extremely elaborate logging subsystems.|$|E
50|$|GDDM {{remains in}} {{widespread}} use today, embedded in many z/OS applications, {{as well as}} <b>in</b> <b>System</b> <b>programs.</b>|$|R
5000|$|... the {{pauses and}} {{overhead}} of garbage collection (GC) limit Go's use <b>in</b> <b>systems</b> <b>programming</b> compared to languages with manual memory management.|$|R
5000|$|<b>In</b> <b>Systems</b> <b>Programming</b> with Modula-3, four {{essential}} {{points of}} the language design are intensively discussed. These topics are: structural vs. name equivalence, subtyping rules, generic modules, and parameter modes like [...]|$|R
50|$|In 1993, the {{introduction}} of EEPROM memory allowed microcontrollers (beginning with the Microchip PIC16x84) to be electrically erased quickly without an expensive package as required for EPROM, allowing both rapid prototyping, and <b>In</b> <b>System</b> <b>Programming.</b> (EEPROM technology had been available prior to this time, but the earlier EEPROM was more expensive and less durable, making it unsuitable for low-cost mass-produced microcontrollers.) The same year, Atmel introduced the first microcontroller using Flash memory, a special type of EEPROM. Other companies rapidly followed suit, with both memory types.|$|E
5000|$|<b>In</b> <b>system</b> <b>programming,</b> an {{interrupt}} is {{a signal}} to the processor emitted by hardware or software indicating an event that needs immediate attention. An interrupt alerts the processor to a high-priority condition requiring the interruption of the current code the processor is executing. The processor responds by suspending its current activities, saving its state, and executing a function called an interrupt handler (or an interrupt service routine, ISR) to deal with the event. This interruption is temporary, and, after the interrupt handler finishes, the processor resumes normal activities. [...] There are two types of interrupts: hardware interrupts and software interrupts.|$|E
50|$|Scripting {{languages}} {{tend to be}} {{used for}} applications where most of the functionality comes from other programs (often implemented <b>in</b> <b>system</b> <b>programming</b> languages); the scripts are used to glue together other programs or add additional layers of functionality on top of existing programs. Ousterhout claims that scripts tend to be short and are often written by less sophisticated programmers, so execution efficiency is less important than simplicity and ease of interaction with other programs. Common applications for scripting include Web page generation, report generation, graphical user interfaces, and system administration. Prototypical examples of scripting languages include AppleScript, C shell, DOS batch files, and Tcl.|$|E
50|$|Academician Andrey Petrovych Ershov (Андре́й Петро́вич Ершо́в; 19 April 1931, Moscow - 8 December 1988, Moscow) was a Soviet {{computer}} scientist, notable as {{a pioneer}} <b>in</b> <b>systems</b> <b>programming</b> and programming language research.|$|R
5000|$|In Calcutta, {{after graduating}} from Banaras Hindu University, Tripathi gained {{experience}} in working with computers at the Indian Statistical Institute. [...] He also worked at the Electronics Corporation of India Limited <b>in</b> <b>systems</b> <b>programming</b> prior to moving to Canada to further his education.|$|R
5000|$|Binghamton University {{offers an}} Executive Master of Science <b>in</b> Health <b>Systems</b> <b>program</b> <b>in</b> Manhattan. Benefits {{of this program}} include: ...|$|R
5000|$|Binding {{generally}} {{refers to}} a mapping of one thing to another. In the context of software libraries, bindings are wrapper libraries that bridge two programming languages, so that a library written for one language {{can be used in}} another language. [...] Many software libraries are written <b>in</b> <b>system</b> <b>programming</b> languages such as C or C++. To use such libraries from another language, usually of higher-level, such as Java, Common Lisp, Python, or Lua, a binding to the library must be created in that language, possibly requiring recompiling the language's code, depending on the amount of modification needed. However, most languages offer an foreign function interface, such as Python's and OCaml's , and Embeddable Common Lisp's [...] and [...]|$|E
40|$|ExCIS is a {{methodology}} and tool suite that integrates the technologies of domain-specific languages (DSLs) and feature-oriented programming (FOP). DSLs offer compact specifications of programs in domain-specific notations that {{are easier to}} write, maintain, and evolve. FOP raises the level of abstraction <b>in</b> <b>system</b> <b>programming</b> from compositions of code-centric components to compositions of modules that implement individual and largely orthogonal features. ExCIS provides state-of-the-art tools for creating easier-to-specify, easier-to-maintain, and easier-to-change systems. It is being developed for STRICOM to create next-generation simulators for the U. S. Army...|$|E
40|$|Nowadays, {{scripting}} programming languages like Python, Perl and Ruby {{are widely}} used <b>in</b> <b>system</b> <b>programming,</b> scientific computing, etc. Although solving a particular problem in these languages requires less time, less programming effort, and less concepts to be taught to achieve the desired goal, still they are not used as teaching tools. Therefore, the use of scripting languages as a teaching vehicle for programming course is very promising. On the other hand, GUI programming, when performed with such languages, is easy and rewarding, since one sees the result of her work immediately. Thus, we are sure that scripting languages combined with GUI toolkits {{will be the next}} big thing in computer education. Comment: 13 page...|$|E
50|$|Mark Nemenman (Марк Ефимович Неменман, Марк Яўхімавіч Неменман; born 6 November 1936, Minsk, Belarus) is a Soviet {{computer}} scientist, notable as {{a pioneer}} <b>in</b> <b>systems</b> <b>programming</b> and programming language research. He {{was one of}} the main developers of the AKI language (in Russian АКИ - АвтоКод ИНЖЕНЕР - Engineer's Autocode) in 1964, before BASIC became known. He led the development of system software for Minsk-32, the most popular of Minsk family of computers.|$|R
50|$|Second, PL/I was {{overtaken}} <b>in</b> the <b>system</b> <b>programming</b> field. The IBM <b>system</b> <b>programming</b> {{community was}} not ready to use PL/I; instead, IBM developed and adopted a proprietary dialect of PL/I for <b>system</b> <b>programming.</b> - PL/S. With the success of PL/S inside IBM, and of C outside IBM, the unique PL/I strengths for <b>system</b> <b>programming</b> became less valuable.|$|R
50|$|In programming, a gotcha {{is a valid}} {{construct}} <b>in</b> a <b>system,</b> <b>program</b> or {{programming language}} that works as documented but is counter-intuitive and almost invites mistakes because it is both easy to invoke and unexpected or unreasonable in its outcome.|$|R
40|$|This bachelor´s {{thesis is}} engaged in problems, {{programming}} and proposal of Control system for temperature stabilization of any system. Main condition is using the Peltier´s component and microcontroller. Principle consists in setting of temperatures by user controls and operating of Peltier´s component thought MOSFET semiconductors. This MOSFET´s are designed to an H-bridge. We regulate power of Peltier´s component by the H-bridge. Main part of the circuit is microcontroller from ATMEL. This is called ATmega 16. It’s programmed by ISP (<b>In</b> <b>System</b> <b>Programming)</b> property of microcontroller, which is necessary for programming of microcontrollers in applications. All measured and controlled values will be showed on the LCD display and should by supply by the 5 V power source...|$|E
40|$|The {{field control}} of {{multiple}} superconducting RF cavities {{with a single}} Klystron, such as the proposed RF scheme for the ILC, requires high density (number of RF channels) signal processing hardware so that vector control may be implemented with minimum group delay. The MFC (Multichannel Field Control) module is a 33 -channel, FPGA based down-conversion and signal processing board in a single VXI slot, with 4 channels of high speed DAC outputs. A 32 -bit, 400 MHz floating point DSP provides additional computational and control capability for calibration and implementation of more complex control algorithms. Multiple high speed serial transceivers on the front panel and the backplane bus allow a flexible architecture for inter-module real time data exchanges. An interface CPLD supports the VXI bus protocol for communication to a Slot 0 CPU, with Ethernet connections for remote <b>in</b> <b>system</b> <b>programming</b> of the FPGA and DSP as well as data acquisition...|$|E
40|$|The final project aims at {{designing}} {{tools to}} be able to measure the volume of fuel on the motorcycle -based mikrokontrol AT 89 S 52. Reasons for using AT 89 S 52 other than ability is good enough for this tool, as well as can be programmed with a technique AT 89 S 52 ISP (<b>in</b> <b>system</b> <b>programming).</b> In addition it also has a number of ports AT 89 S 52 input / output (I / O) are quite numerous and can be accessed per - bit, so that the utilization of I / O ports can be more flexible and programmers more flexibility to choose the desired port configuration. The system is built with the main components of the circuit microcontroller AT 89 S 52 and other support such as seven segment display, fuel level sensors, Analog to dogital converter. Own level sensors, level sensors that utilize presence has been found in a [eda motors in general. All the components are assembled in order to work as a measure of the volume of fuel. The series of volumes of fuel gauges on AT 89 S 52 Microcontroller based motorcycle is capable of measuring the volume of fuel remaining in tanks and vehicles shown to the seven segments. Fuel Level Input will be obtained by translating the analog signals from the fuel level sensor through a series of ADC (analog to digital converter). After receiving input from sensors and ADC, then mikrokontrol will process the input data and display it into seven segments. Keywords: microcontroller, fuel, fuel level, fuel volum...|$|E
50|$|<b>In</b> Unix-like {{operating}} <b>systems,</b> <b>programs</b> do redirection {{with the}} dup2(2) system call, or its less-flexible but higher-level stdio analogues, freopen(3) and popen(3).|$|R
5000|$|<b>In</b> <b>systems</b> or <b>programming</b> {{languages}} with manual memory management, the programmer must explicitly {{arrange for}} memory to be deallocated {{when it is}} no longer used. C and C++ are two well-known languages which support this model.|$|R
50|$|The {{representation}} of records in memory {{varies depending on}} the programming languages. Usually the fields are stored in consecutive positions in memory, {{in the same order}} as they are declared in the record type. This may result in two or more fields stored into the same word of memory; indeed, this feature is often used <b>in</b> <b>systems</b> <b>programming</b> to access specific bits of a word. On the other hand, most compilers will add padding fields, mostly invisible to the programmer, in order to comply with alignment constraints imposed by the machine—say, that a floating point field must occupy a single word.|$|R
40|$|Several {{activities}} were conducted during my PhD activity. For the NEMO experiment {{a collaboration between}} the INFN/University groups of Catania and Bologna {{led to the development}} and production of a mixed signal acquisition board for the Nemo Km 3 telescope. The research concerned the feasibility study for a different acquisition technique quite far from that adopted in the NEMO Phase 1 telescope. The DAQ board that we realized exploits the LIRA 06 front-end chip for the analog acquisition of anodic an dynodic sources of a PMT (Photo-Multiplier Tube). The low-power analog acquisition allows to sample contemporaneously multiple channels of the PMT at different gain factors in order to increase the signal response linearity over a wider dynamic range. Also the auto triggering and self-event-classification features help to improve the acquisition performance and the knowledge on the neutrino event. A fully functional interface towards the first level data concentrator, the Floor Control Module, has been integrated as well on the board, and a specific firmware has been realized to comply with the present communication protocols. This stage of the project foresees the use of an FPGA, a high speed configurable device, to provide the board with a flexible digital logic control core. After the validation of the whole front-end architecture this feature would be probably integrated in a common mixed-signal ASIC (Application Specific Integrated Circuit). The volatile nature of the configuration memory of the FPGA implied the integration of a flash ISP (<b>In</b> <b>System</b> <b>Programming)</b> memory and a smart architecture for a safe remote reconfiguration of it. All the integrated features of the board have been tested. At the Catania laboratory the behavior of the LIRA chip has been investigated in the digital environment of the DAQ board and we succeeded in driving the acquisition with the FPGA. The PMT pulses generated with an arbitrary waveform generator were correctly triggered and acquired by the analog chip, and successively they were digitized by the on board ADC {{under the supervision of the}} FPGA. For the communication towards the data concentrator a test bench has been realized in Bologna where, thanks to a lending of the Roma University and INFN, a full readout chain equivalent to that present in the NEMO phase- 1 was installed. These tests showed a good behavior of the digital electronic that was able to receive and to execute command imparted by the PC console and to answer back with a reply. The remotely configurable logic behaved well too and demonstrated, at least in principle, the validity of this technique. A new prototype board is now under development at the Catania laboratory as an evolution of the one described above. This board is going to be deployed within the NEMO Phase- 2 tower in one of its floors dedicated to new front-end proposals. This board will integrate a new analog acquisition chip called SAS (Smart Auto-triggering Sampler) introducing thus a new analog front-end but inheriting most of the digital logic present in the current DAQ board discussed in this thesis. For what concern the activity on high-resolution vertex detectors, I worked within the SLIM 5 collaboration for the characterization of a MAPS (Monolithic Active Pixel Sensor) device called APSEL- 4 D. The mentioned chip is a matrix of 4096 active pixel sensors with deep N-well implantations meant for charge collection and to shield the analog electronics from digital noise. The chip integrates the full-custom sensors matrix and the sparsifification/readout logic realized with standard-cells in STM CMOS technology 130 nm. For the chip characterization a test-beam has been set up on the 12 GeV PS (Proton Synchrotron) line facility at CERN of Geneva (CH). The collaboration prepared a silicon strip telescope and a DAQ system (hardware and software) for data acquisition and control of the telescope that allowed to store about 90 million events in 7 equivalent days of live-time of the beam. My activities concerned basically the realization of a firmware interface towards and from the MAPS chip in order to integrate it on the general DAQ system. Thereafter I worked on the DAQ software to implement on it a proper Slow Control interface of the APSEL 4 D. Several APSEL 4 D chips with different thinning have been tested during the test beam. Those with 100 and 300 um presented an overall efficiency of about 90 % imparting a threshold of 450 electrons. The test-beam allowed to estimate also the resolution of the pixel sensor providing good results consistent with the pitch/sqrt(12) formula. The MAPS intrinsic resolution has been extracted from the width of the residual plot taking into account the multiple scattering effect...|$|E
40|$|Support for {{cooperative}} {{distributed applications}} {{is an important}} direction of computer systems research involving developments <b>in</b> operating <b>systems,</b> <b>programming</b> languages and databases. One emerging model {{for the support of}} cooperative distributed applications is that of a distributed shared universe organized as a set of objects shared by concurrent activities...|$|R
30|$|With {{wireless}} {{local area}} network (LAN) technology, the MySQL database server computer and each of the clients can be easily linked together. The access into the MySQL database in the server is allowed by declaring the unique IP address of server <b>in</b> the <b>system</b> <b>programming</b> part installed <b>in</b> each client.|$|R
50|$|<b>Systems</b> <b>programming</b> {{was done}} <b>in</b> SPL (<b>System</b> <b>Programming</b> Language), an ALGOL-like language, but {{allowing}} inline assembler, and other {{direct access to}} the instruction set. The standard terminals for the HP 3000 were the HP 2640 series, which supported block mode data entry from forms (like IBM's mainframe-based CICS), as well as character mode. By the 1980s the computer had gained the ability to use both PCs and Macs as system terminals.|$|R
40|$|Abstract. Delimited continuations are the {{meanings}} of delimited evaluation contexts in programming languages. We show they offer a uniform view of many scenarios that arise <b>in</b> <b>systems</b> <b>programming,</b> such as {{a request for a}} system service, an event handler for input/output, a snapshot of a process, a file system being read and updated, and a Web page. Explicitly recognizing these uses of delimited continuations helps us design a system of concurrent, isolated transactions where desirable features such as snapshots, undo, copy-on-write, reconciliation, and interposition fall out by default. It also lets us take advantage of efficient implementation techniques from programming-language research. The Zipper File System prototypes these ideas. ...|$|R
50|$|<b>In</b> {{computer}} <b>systems</b> <b>programming,</b> an interrupt handler, {{also known}} as an interrupt service routine or ISR, is a special block of code associated with a specific interrupt condition. Interrupt handlers are initiated by hardware interrupts, software interrupt instructions, or software exceptions, and are used for implementing device drivers or transitions between protected modes of operation, such as system calls.|$|R
5000|$|Heterogeneous {{computing}} systems present {{new challenges}} not found <b>in</b> typical homogeneous <b>systems.</b> The presence of multiple processing elements raises {{all of the}} issues involved with homogeneous parallel processing systems, while the level of heterogeneity <b>in</b> the <b>system</b> can introduce non-uniformity <b>in</b> <b>system</b> development, <b>programming</b> practices, and overall system capability. Areas of heterogeneity can include: ...|$|R
3000|$|U. For example, {{there are}} some utilizations <b>in</b> power <b>system</b> {{simulator}} <b>programs</b> [2]. Recent developments, particularly the emerging of power electronics based equipment like F [...]...|$|R
40|$|It {{is claimed}} that the Unified Modeling Language (UML) is {{emerging}} as the accepted standard graphical language for specifying, constructing, visualizing and documenting the object oriented information systems development process. As such it has gained a place <b>in</b> many information <b>systems</b> <b>programs.</b> An investigation of Australian organizations indicates {{that the use of}} object oriented development methodologies and UML is gradually increasing in Australia but is still to see general acceptance. This raises the question of the priority that should be accorded to the inclusion of UML in competition with other topics and issues <b>in</b> information <b>systems</b> education <b>programs...</b>|$|R
40|$|We {{present a}} {{classification}} of synchronization delays inherent <b>in</b> multiprocessor <b>systems</b> <b>programmed</b> using the monitor paradigm. This characterization {{is useful in}} relating performance of such systems to algorithmic parameters in subproblems such as domain decomposition. We apply this approach to a parallel, adaptive grid code for solving the equations of one-dimensional gas dynamics implemented on shared memory multiprocessors such as the Encore Multimax...|$|R
5000|$|The MicroC/OS kernel was {{published}} originally in a three-part article <b>in</b> Embedded <b>Systems</b> <b>Programming</b> {{magazine and the}} book µC/OS The Real-Time Kernel by Jean J. Labrosse (...) [...] The author intended at first to simply describe the internals of a portable operating system he had developed for his own use, but later developed the OS as a commercial product in versions II and III.|$|R
5000|$|Originally {{written in}} 1961 <b>in</b> ESPOL (Executive <b>Systems</b> <b>Programming</b> Language), which itself was an {{extension}} of Burroughs Extended ALGOL, in the 1970s it was converted to NEWP, a better structured, more robust, and more secure form of ESPOL.|$|R
