4678|7008|Public
5|$|In the clique <b>decision</b> <b>problem,</b> {{the input}} is an undirected graph {{and a number}} , and the output is a Boolean value: true if the graph {{contains}} a -clique, and false otherwise.|$|E
5|$|The {{first four}} of these {{problems}} are all important in practical applications. The clique <b>decision</b> <b>problem</b> is not of practical importance; it is formulated in this way in order to apply the theory of NP-completeness to clique-finding problems.|$|E
5|$|In {{computer}} science, the clique {{problem is}} the computational problem of finding cliques (subsets of vertices, all adjacent to each other, also called complete subgraphs) in a graph. It has several different formulations depending on which cliques, and what information about the cliques, should be found. Common formulations of the clique problem include finding a maximum clique (a clique with the largest possible number of vertices), finding a maximum weight clique in a weighted graph, listing all maximal cliques (cliques that cannot be enlarged), and solving the <b>decision</b> <b>problem</b> of testing whether a graph contains a clique larger than a given size.|$|E
40|$|We {{study the}} {{complexity}} of <b>decision</b> <b>problems</b> about symmetric Nash equilibria for symmetric multi-player games. These <b>decision</b> <b>problems</b> concern {{the existence of a}} symmetric Nash equilibrium with certain natural properties. We show that a handful of such <b>decision</b> <b>problems</b> are Existential-R-complete; that is, they are exactly as hard as deciding the Existential Theory of the Reals...|$|R
50|$|Because {{the theory}} of <b>decision</b> <b>problems</b> is very well developed, {{research}} in complexity theory has typically focused on <b>decision</b> <b>problems.</b> Optimization problems themselves are still of interest in computability theory, {{as well as in}} fields such as operations research.|$|R
40|$|Abstract: NP-complete <b>decision</b> <b>problems</b> {{are one of}} {{the most}} {{important}} subjects in computer science. We have developed a knowledge base of NP-complete <b>decision</b> <b>problems</b> that reflects the conceptual knowledge and the relationships of more than 350 <b>decision</b> <b>problems</b> including additional information resources such as bibliographic references or author information. The knowledge base is applied by the web based bibliographic search tool NPBibSearch. By providing an intuitive graphical user interface for navigation within the domain of NP-complete <b>decision</b> <b>problems</b> and by integrating full text search capabilities with conceptual knowledge, NPBibSearch offers the user an ontology augmented bibliographic search. ...|$|R
5|$|Most {{versions}} of the clique problem are hard. The clique <b>decision</b> <b>problem</b> is NP-complete (one of Karp's 21 NP-complete problems). The problem of finding the maximum clique is both fixed-parameter intractable and hard to approximate. And, listing all maximal cliques may require exponential time as there exist graphs with exponentially many maximal cliques. Therefore, much of the theory about the clique problem is devoted to identifying special types of graph that admit more efficient algorithms, or to establishing the computational difficulty of the general problem in various models of computation.|$|E
5|$|The {{computational}} {{difficulty of}} the clique problem has led it {{to be used to}} prove several lower bounds in circuit complexity. The existence of a clique of a given size is a monotone graph property, meaning that, if a clique exists in a given graph, it will exist in any supergraph. Because this property is monotone, there must exist a monotone circuit, using only and gates and or gates, to solve the clique <b>decision</b> <b>problem</b> for a given fixed clique size. However, the size of these circuits can be proven to be a super-polynomial function of the number of vertices and the clique size, exponential in the cube root of the number of vertices. Even if a small number of NOT gates are allowed, the complexity remains superpolynomial. Additionally, the depth of a monotone circuit for the clique problem using gates of bounded fan-in must be at least a polynomial in the clique size.|$|E
25|$|While the <b>decision</b> <b>problem</b> is NP-complete, the {{optimization}} problem is NP-hard, its resolution {{is at least}} as difficult as the <b>decision</b> <b>problem,</b> and there is no known polynomial algorithm which can tell, given a solution, whether it is optimal (which would mean that there is no solution with a larger V, thus solving the NP-complete <b>decision</b> <b>problem).</b>|$|E
30|$|The network design, {{decisions}} regarding {{the product and}} material programme, supplier selection, collection strategy, take-back arrangements and supply chain coordination are strategic <b>decision</b> <b>problems</b> and belong to long-term planning. <b>Decision</b> <b>problems</b> regarding inventory management and production planning are tactical and have a mid-term planning horizon. Operative <b>decision</b> <b>problems,</b> as disassembly planning, material requirement plans, scheduling and routing in the remanufacturing shop have a short-term planning horizon [4, 5, 7, 28].|$|R
40|$|Research Interests Automated {{verification}} of real-time, probabilistic, and infinite-state systems (e. g. model-checking algorithms, <b>decision</b> <b>problems,</b> complexity); logic and applications to verification; <b>decision</b> <b>problems</b> for linear dynamical systems; automated software analysis; concurrency; theoretical computer science...|$|R
40|$|Semi-Markov <b>Decision</b> <b>Problems</b> are {{continuous}} time generalizations {{of discrete}} time Markov <b>Decision</b> <b>Problems.</b> A number of reinforcement learning algorithms {{have been developed}} recently for the solution of Markov <b>Decision</b> <b>Problems,</b> based on the ideas of asynchronous dynamic programming and stochastic approximation. Among these are TD(), Q-learning, and Real-time Dynamic Programming. After reviewing semi-Markov <b>Decision</b> <b>Problems</b> and Bellman's optimality equation in that context, we propose algorithms similar to those named above, adapted to the solution of semi-Markov <b>Decision</b> <b>Problems.</b> We demonstrate these algorithms by applying them {{to the problem of}} determining the optimal control for a simple queueing system. We conclude with a discussion of circumstances under which these algorithms may be usefully applied. 1 Introduction A number of reinforcement learning algorithms based on the ideas of asynchronous dynamic programming and stochastic approximation have been developed recently for [...] ...|$|R
25|$|An {{example of}} a <b>decision</b> <b>problem</b> is the following. The input is an {{arbitrary}} graph. The problem consists in deciding whether the given graph is connected, or not. The formal language associated with this <b>decision</b> <b>problem</b> is then the set of all connected graphs—of course, to obtain a precise definition of this language, one has to decide how graphs are encoded as binary strings.|$|E
25|$|A <b>decision</b> <b>problem</b> is in NP {{if it can}} {{be solved}} by a {{non-deterministic}} algorithm in polynomial time.|$|E
25|$|W. W. Boone, F. B. Cannonito, and R. C. Lyndon. Word Problems: <b>Decision</b> <b>Problem</b> in Group Theory. Netherlands: North-Holland. 1973.|$|E
40|$|One of {{the most}} {{important}} questions in computer science is the “P=NP”question. For this reason, much attention has been given to the analysis of NPcomplete <b>decision</b> <b>problems.</b> We have developed a knowledge base of NP-complete <b>decision</b> <b>problems</b> that reflects the conceptual knowledge and the relationships of more than 350 <b>decision</b> <b>problems</b> including additional information resources such as bibliographic references or author information. The knowledge base is applied by the web based bibliographic search tool NPBibSearch. By providing an intuitive graphical user interface for navigation within the domain of NP-complete <b>decision</b> <b>problems</b> and by integrating full text search capabilities with conceptual knowledge, NPBibSearch offers the user an ontology augmented bibliographic search...|$|R
5000|$|ALL is {{the class}} of all <b>decision</b> <b>problems.</b> Many {{important}} complexity classes can be defined by bounding the time or space used by the algorithm. Some important complexity classes of <b>decision</b> <b>problems</b> defined in this manner are the following: ...|$|R
40|$|For <b>decision</b> <b>problems</b> in {{the real}} world, states of nature, information, and actions {{should be viewed as}} fuzzy events. The {{application}} of the fuzzy sets theory and the statistical decision theory to the <b>decision</b> <b>problems</b> in fuzzy events leads to a specific formulation of fuzzy <b>decision</b> <b>problems</b> and the definitions of entropy, worth of information, and quantity of information. Some results which are analogous to those in the statistical decision theory are given in this paper...|$|R
25|$|These results contain several notable special cases. For example, {{the problem}} of {{computing}} the partition function of the Ising model is #P-hard in general, even though celebrated algorithms of Onsager and Fisher solve it for planar lattices. Also, the Jones polynomial is #P-hard to compute. Finally, computing the number of four-colourings of a planar graph is #P-complete, even though the <b>decision</b> <b>problem</b> is trivial by the four colour theorem. In contrast, {{it is easy to}} see that counting the number of three-colourings for planar graphs is #P-complete because the <b>decision</b> <b>problem</b> is known to be NP-complete via a parsimonious reduction.|$|E
25|$|The <b>decision</b> <b>problem</b> {{form of the}} {{knapsack}} problem (Can a value of at least V be achieved without exceeding the weight W?) is NP-complete, thus there is no known algorithm both correct and fast (polynomial-time) on all cases.|$|E
25|$|The <b>decision</b> <b>problem</b> {{of whether}} an {{arbitrary}} grammar is ambiguous is undecidable {{because it can}} be shown that it is equivalent to the Post correspondence problem. At least, there are tools implementing some semi-decision procedure for detecting ambiguity of context-free grammars.|$|E
40|$|Decision {{theory is}} used to define a notion of `relevance' in terms of <b>decision</b> <b>problems.</b> <b>Decision</b> <b>problems</b> are also used to explain why {{attitude}} attributions are made. Assuming that belief attributions are made to explain unexpected actions, and that assertions have to be relevant, it is shown that potentially ambiguous, or underspecified, de re belief attributions can be disambiguated by context. In {{the last part of}} the paper I show how <b>decision</b> <b>problems</b> can be used to derive conversational implicatures...|$|R
40|$|We {{consider}} {{a number of}} <b>decision</b> <b>problems,</b> that appear in the dynamical systems and database literature, concerning the termination of iterates of real functions. These <b>decision</b> <b>problems</b> take a function f: R n → R n as input and ask, for example, whether this function is mortal, nilpotent, terminating, or reaches a fixed point on a given point in R n. We associate topologies to functions f: R n → R n and study some basic properties of these topologies. The contribution {{of this paper is}} a translation of the above mentioned <b>decision</b> <b>problems</b> into <b>decision</b> <b>problems</b> concerning wellknown properties of topologies, e. g., connectivity. We also show that connectivity of topologies on R n is undecidable for n> 1...|$|R
40|$|The multicriteria <b>decision</b> <b>problems</b> involve uncertainty, it is {{important}} to incorporate different types of uncertainty in any proposed solution. In this paper, we presented fuzzy MCDM approach based on risk and confidence analysis that we believe is effective in tackling complex, ill-defined and human-oriented <b>decision</b> <b>problems...</b>|$|R
25|$|Because {{the golden}} ratio does exist, {{this is a}} true {{sentence}}, and belongs to the existential theory of the reals. The answer to the <b>decision</b> <b>problem</b> for the existential theory of the reals, given this sentence as input, is the Boolean value true.|$|E
25|$|Decision {{problems}} {{are one of}} the central objects of study in computational complexity theory. A <b>decision</b> <b>problem</b> is a special type of computational problem whose answer is either yes or no, or alternately either 1 or 0. A <b>decision</b> <b>problem</b> {{can be viewed as a}} formal language, where the members of the language are instances whose output is yes, and the non-members are those instances whose output is no. The objective is to decide, with the aid of an algorithm, whether a given input string is a member of the formal language under consideration. If the algorithm deciding this problem returns the answer yes, the algorithm is said to accept the input string, otherwise it is said to reject the input.|$|E
25|$|The {{answer to}} the <b>decision</b> <b>problem</b> for the existential theory of the reals, given this {{sentence}} as input, is the Boolean value false: there are no counterexamples. Therefore, this sentence {{does not belong to}} the existential theory of the reals, despite being of the correct grammatical form.|$|E
40|$|A clearly written, well-presented {{survey of}} an {{intriguing}} subject. "" - Scientific American. Classic text considers {{general theory of}} computability, computable functions, operations on computable functions, Turing machines self-applied, unsolvable <b>decision</b> <b>problems,</b> applications of general theory, mathematical logic, Kleene hierarchy, computable functionals, classification of unsolvable <b>decision</b> <b>problems</b> and more...|$|R
40|$|We {{describe}} a new graphical language for specifying asymmetric <b>decision</b> <b>problems.</b> The language {{is based on}} a filtered merge of several existing languages including sequential valuation networks, asymmetric influence diagrams, and unconstrained influence diagrams. Asymmetry is encoded using a structure resembling a clustered decision tree, whereas the representation of the uncertainty model is based on the (unconstrained) influence diagram framework. We illustrate the proposed language by modeling several highly asymmetric <b>decision</b> <b>problems,</b> and we {{describe a}}n efficient solution procedure. Key words: Asymmetric <b>decision</b> <b>problems,</b> (asymmetric) influence diagrams, sequential valuation networks, unconstrained influence diagrams. ...|$|R
40|$|Many {{industrial}} <b>decisions</b> <b>problems</b> are decentralized {{in which}} decision makers are arranged at two levels, called bilevel <b>decision</b> <b>problems.</b> Bilevel <b>decision</b> making may involve uncertain parameters which appear {{either in the}} objective functions or constraints of the leader or the follower or both. Furthermore, the leader and the follower may have multiple conflict decision objectives that should be optimized simultaneously. This study proposes an approximation K th-best approach to solve the fuzzy multi-objective bilevel problem. Two case based examples further illustrate {{how to use the}} approach to solve industrial <b>decision</b> <b>problems...</b>|$|R
25|$|A {{function}} {{problem is}} a computational problem where a single output (of a total function) is expected for every input, but the output {{is more complex than}} that of a <b>decision</b> <b>problem,</b> that is, it isn't just yes or no. Notable examples include the traveling salesman problem and the integer factorization problem.|$|E
25|$|The {{concept of}} Turing degree is {{fundamental}} in computability theory, where sets of natural numbers are often regarded as decision problems. The Turing degree {{of a set}} {{is a measure of}} {{how difficult it is to}} solve the <b>decision</b> <b>problem</b> associated with the set, that is, to determine whether an arbitrary number is in the given set.|$|E
25|$|The {{notion of}} adding more variety or states to resolve {{ambiguity}} or undecidability (also {{known as the}} <b>decision</b> <b>problem)</b> {{is the subject of}} Chaitin's metamathematical conjecture algorithmic information theory and provides a potentially rigorous theoretical basis for a general management heuristic. If a process is not producing the agreed product more information, if applicable, will correct this, resolve ambiguity, conflict or undecidability.|$|E
40|$|Abstract. Frameworks for {{handling}} <b>decision</b> <b>problems</b> {{have been subject}} to many advances in the last years, both w. r. t. representation languages, solution algorithms and methods for analyzing <b>decision</b> <b>problems.</b> In this paper we outline some of the recent advances by taking outset in the influence diagram framework. In particular, we shall focus on advances in representation languages and exact solution algorithms for <b>decision</b> <b>problems</b> with a single decision maker. Moreover, we give a brief outline of recent contributions to methods for performing sensitivity analysis in influence diagrams. ...|$|R
50|$|A finite {{automaton}} which runs on an infinite tree {{was first used}} by Rabin for proving decidability of monadic second order logic. It has been further observed that tree automaton and logical theories are closely connected and it allows <b>decision</b> <b>problems</b> in logic to be reduced into <b>decision</b> <b>problems</b> for automata.|$|R
5000|$|NCi is {{the class}} of <b>decision</b> <b>problems</b> decidable by uniform boolean {{circuits}} with a polynomial number of gates of at most two inputs and depth O(logi n), or {{the class of}} <b>decision</b> <b>problems</b> solvable in time O(logi n) on a parallel computer with a polynomial number of processors. Clearly, we have ...|$|R
