19|591|Public
25|$|Btrieve is a {{transactional}} database (navigational database) software product. It {{is based}} on <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method (ISAM), which {{is a way of}} storing data for fast retrieval. There have been several versions of the product for MS-DOS, Linux, older versions of Microsoft Windows, Windows 98, Windows NT, Windows 2000, Windows XP, Windows Server 2003, 32-bit IBM OS/2 and for Novell NetWare.|$|E
25|$|There {{are three}} modules to Jet: One is the Native Jet ISAM Driver, a {{dynamic link library}} (DLL) that can {{directly}} manipulate Microsoft Access database files (MDB) using <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method (ISAM). Another one of the modules contains the ISAM Drivers, DLLs that allow access {{to a variety of}} ISAM databases, among them xBase, Paradox, Btrieve and FoxPro, depending on the version of Jet. The final module is the Data Access Objects (DAO) DLL. DAO provides an API that allows programmers to access JET databases using any programming language.|$|E
25|$|There {{were three}} modules to Jet. One was the Native Jet ISAM Driver, a Jet {{dynamic link library}} (DLL) that could {{directly}} manipulate Microsoft Access database files (MDB), which was a modified form of an <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method (ISAM) database. Another one of the modules were the ISAM Drivers, DLLs that allowed access to ISAM databases, among them being Xbase, Paradox, Btrieve and FoxPro files. The final module was the Data Access Objects (DAO) DLL, DAO allowed programmers access to the Jet engine. It was basically an object-oriented data language used by Access Basic and Visual Basic application developers to access Jet.|$|E
40|$|Abstract — One of {{the most}} {{frequent}} operation performed on database is searching. To perform this operation we have different kinds of searching algorithms, {{some of which are}} Binary Search, <b>Index</b> <b>Sequential</b> <b>Access</b> Method (ISAM), but these and all other searching algorithms work only on data, which are previously sorted. An efficient algorithm is required {{in order to make the}} searching algorithm fast and efficient. This research paper presents a new sorting algorithm named as “Optimized Selection Sort Algorithm, OSSA”. OSSA is designed to perform sorting quickly and more effectively as compared to the existing version of selection sort. The introduction of OSSA version of selection sort algorithm for sorting the data stored in database instead of existing selection sort algorithm will provide an opportunity to the users to save almost 50 % of their operation time with almost 100 % accuracy...|$|R
50|$|In data {{structure}}s, a {{data structure}} {{is said to}} have <b>sequential</b> <b>access</b> if one can only visit the values it contains in one particular order. The canonical example is the linked list. Indexing into a list that has <b>sequential</b> <b>access</b> requires O(n) time, where n is the index. As a result, many algorithms such as quicksort and binary search degenerate into bad algorithms that are even less efficient than their naive alternatives; these algorithms are impractical without random access. On the other hand, some algorithms, typically those that do not have <b>index,</b> require only <b>sequential</b> <b>access,</b> such as mergesort, and face no penalty.|$|R
40|$|Abstract—This paper {{propose a}} new ROM data {{encoding}} method {{that takes into}} account of a <b>sequential</b> <b>access</b> pattern to reduce the power consumption in ROMs used in applications such as FIR filters that access the ROM sequentially. In the proposed encoding method, the number of 1 ’s, of which the increment leads to the increase of the power consumption, is reduced by applying an exclusive-or (XOR) operation to a bit pair composed of two consecutive bits in a bit line. The encoded data can be decoded by using XOR gates and D flip-flops, which are usually used in digital systems for synchronization and glitch suppression. By applying the proposed encoding method to coefficient ROMs of FIR filters designed by using various design methods, we can achieve average reduction of 43. 7 % over the unencoded original data in the power consumption, which is larger reduction than those achieved by previous methods. <b>Index</b> Terms—ROM, <b>sequential</b> <b>access,</b> D flip-flop, exclusive OR, power consumption, FIR filter I...|$|R
5000|$|Simple Hierarchical <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method (SHISAM).|$|E
50|$|IBM Informix C-ISAM (also C-ISAM or cisam) is an X/Open {{standards-compliant}} API to an <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method or ISAM.|$|E
5000|$|ISAM (an {{acronym for}} <b>indexed</b> <b>sequential</b> <b>access</b> method) {{is a method}} for creating, maintaining, and {{manipulating}} indexes of key-fields extracted from random data file records to achieve fast retrieval of required file records. IBM developed ISAM for mainframe computers. Today the term is used for several related concepts: ...|$|E
40|$|The File Design Analyzer is a {{software}} package which evaluates well-known data base storage structures and access methods {{in terms of}} secondary storage processing time and storage overhead required to service a set of user applications. It implements a first-order analytical model to specifically evaluate <b>sequential,</b> <b>indexed</b> <b>sequential,</b> direct <b>access,</b> and inverted multilist storage structures. Interaction with the package is available in conversational mode, enabling the experienced analyst to conduct on-line sensitivity analysis. The paper describes three extensions which converted an abstract conceptual model into a practical tool for evaluation of existing or proposed data base designs: batched transactions, multi-access interference due to shared secondary storage, and analysis of variable record size. A case study from a real system illustrates {{the potential of the}} File Design Analyzer to provide insight regarding the optimal choice of physical parameters within a specified storage structure and to effectively compare alternative storage structures for a particular set of applications...|$|R
40|$|Among many {{existing}} distance {{measures for}} time series data, Dynamic Time Warping (DTW) distance {{has been recognized}} as one of the most accurate and suitable distance measures due to its flexibility in sequence alignment. However, DTW distance calculation is computationally intensive. Especially in very large time series databases, sequential scan through the entire database is definitely impractical, even with random access that exploits some index structures since high dimensionality of time series data incurs extremely high I/O cost. More specifically, a sequential structure consumes high CPU but low I/O costs, while an index structure requires low CPU but high I/O costs. In this work, we therefore propose a novel <b>indexed</b> <b>sequential</b> structure called TWIST (Time Warping in <b>Indexed</b> <b>Sequential</b> sTructure) which benefits from both <b>sequential</b> <b>access</b> and <b>index</b> structure. When a query sequence is issued, TWIST calculates lower bounding distances between a group of candidate sequences and the query sequence, and then identifies the data access order in advance, hence reducing a great number of both <b>sequential</b> and random <b>accesses.</b> Impressively, our <b>indexed</b> <b>sequential</b> structure achieves significant speedup in a querying process by a few orders of magnitude. In addition, our method shows superiority over existing rival methods in terms of query processing time, number of page accesses, and storage requirement with no false dismissal guaranteed. Comment: Submitted to Data Mining and Knowledge Discovery (DMKD). 33 pages, 19 figures, and 8 table...|$|R
5000|$|Access {{methods for}} DASDs include <b>sequential,</b> <b>indexed,</b> and direct. Direct access {{contrasts}} with the <b>sequential</b> <b>access</b> method used in tape drives. A record on a DASD can be accessed without having to read through intervening records from the current location, whereas reading {{anything other than the}} [...] "next" [...] record on tape requires skipping over intervening records, and requires a proportionally long time to access a distant point in a medium.|$|R
50|$|Btrieve is a {{database}} developed by Pervasive Software. The architecture of Btrieve {{has been designed}} with record management in mind. This means that Btrieve only deals with the underlying record creation, data retrieval, record updating and data deletion primitives. Together with the MicroKernel Database Engine it uses ISAM, <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method, as its underlying storage mechanism.|$|E
50|$|Btrieve is a {{transactional}} database (navigational database) software product. It {{is based}} on <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method (ISAM), which {{is a way of}} storing data for fast retrieval. There have been several versions of the product for MS-DOS, Linux, older versions of Microsoft Windows, Windows 98, Windows NT, Windows 2000, Windows XP, Windows Server 2003, 32-bit IBM OS/2 and for Novell NetWare.|$|E
50|$|ESE is an <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method (ISAM) {{data storage}} {{technology}} from Microsoft. ESE is notably {{a core of}} Microsoft Exchange Server and Active Directory. Its purpose is to allow applications to store and retrieve data via indexed and sequential access. Windows Mail and Desktop Search in the Windows Vista operating system also make use of ESE to store indexes and property information respectively.|$|E
50|$|<b>Sequential</b> <b>access</b> {{assumes that}} records can be {{processed}} only sequentially, {{as opposed to}} direct (or random) access. Some devices, such as magnetic tape, naturally enforce <b>sequential</b> <b>access,</b> {{but it can be}} used as well on direct access storage devices (DASD), such as disk drives. In the latter case, a data set written with <b>sequential</b> <b>access</b> can be later processed in a direct manner.|$|R
40|$|Web usage mining discovers {{interesting}} and frequent user access patterns from web logs. Most {{of the previous}} works have focused on mining common <b>sequential</b> <b>access</b> patterns of web access events that occurred within the entire duration of all web access transactions. However, many useful <b>sequential</b> <b>access</b> patterns occur frequently only during a particular periodic time interval due to user browsing behaviors and habits. It is therefore important to mine periodic <b>sequential</b> <b>access</b> patterns with periodic time constraints. In this paper, we propose an efficient approach, known as TCS-mine (Temporal Conditional Sequence mining algorithm), for mining periodic <b>sequential</b> <b>access</b> patterns based on calendar-based periodic time constraints. The calendar-based periodic time constraints are used for describing real-life periodic time concepts such as the morning of every weekend. The mined periodic <b>sequential</b> <b>access</b> patterns {{can be used for}} temporal-based personalized web recommendations. The performance of the proposed TCS-mine algorithm is evaluated and compared with a modified version of WAP-mine for mining periodic <b>sequential</b> <b>access</b> patterns...|$|R
50|$|Full {{function}} databases can {{be accessed}} {{by a variety of}} methods, although Hierarchical Direct (HDAM) and Hierarchical Indexed Direct (HIDAM) dominate. The other formats are Simple Hierarchical <b>Indexed</b> <b>Sequential</b> (SHISAM), Hierarchical Sequential (HSAM), and Hierarchical <b>Indexed</b> <b>Sequential</b> (HISAM).|$|R
50|$|Extensible Storage Engine (ESE), {{also known}} as JET Blue, is an ISAM (<b>indexed</b> <b>sequential</b> <b>access</b> method) data storage {{technology}} from Microsoft. ESE {{is the core of}} Microsoft Exchange Server, Active Directory, Branch Cache, and Windows Search. It's also used by a number of Windows components including Windows Update client and Help and Support Center. Its purpose is to allow applications to store and retrieve data via indexed and sequential access.|$|E
5000|$|At its core, c-treeACE uses a record-oriented, <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method (ISAM) {{structure}} offering {{high speed}} indexing mechanisms over those files. Developers can use these direct access methods {{to design the}} data and index structures that closely parallel {{the needs of their}} application. This paradigm is sometimes referred to as an application-specific database [...] or an embedded database because of the tightly coupled nature of the application and database.|$|E
50|$|DMSII {{provided}} an ISAM (<b>indexed</b> <b>sequential</b> <b>access</b> method) model for data access, transaction isolation and database-recovery capabilities. The database schema {{was written in}} the proprietary Data and Structure Definition Language (DASDL). The DASDL source code was compiled with a system utility into a file containing the metadata for the database (known as the description file). A database-utility program would use the database description file to create the remaining components of the database.|$|E
40|$|Abstract Surfing the Web {{has become}} an {{important}} daily activity for many users. Discovering and understanding web users’ surfing behavior are essential {{for the development of}} successful web monitoring and recommendation systems. To capture users’ web access behavior, one promising approach is web usage mining which discovers interesting and frequent user access patterns from web usage logs. Web usage mining discovers interesting and frequent user access patterns from web logs. Most of the previous works have focused on mining common <b>sequential</b> <b>access</b> patterns of web access events that occurred within the entire duration of all web access transactions. However, many useful <b>sequential</b> <b>access</b> patterns occur frequently only during a particular periodic time interval due to user browsing behaviors and habits. It is therefore important to mine periodic <b>sequential</b> <b>access</b> patterns with periodic time constraints. In this paper, we propose an efficient approach, known as TCSMA (Temporal Conditional Sequence Mining Algorithm), for mining periodic <b>sequential</b> <b>access</b> patterns based on calamander-based periodic time constraint. The calamander-based periodic time constraints are used for describing real-life periodic time concepts such as the morning of every weekend. The mined periodic <b>sequential</b> <b>access</b> patterns can be used for temporal-based personalized web recommendations. The performance of the proposed TCSMA is evaluated and compared with a modified version of Web Access Pattern Mine for mining periodic <b>sequential</b> <b>access</b> patterns. Keywords: Periodic <b>Sequential</b> <b>Access</b> Patterns, Web Access Patterns, Association Rule, Web Log Mining, TCSM&WAPM Algorith...|$|R
5000|$|F# {{provides}} generators via sequence expressions, since version 1.9.1. These {{can define}} a sequence (lazily evaluated, <b>sequential</b> <b>access)</b> via , a list (eagerly evaluated, <b>sequential</b> <b>access)</b> via [...] or an array (eagerly evaluated, indexed access) via [...] that contain code that generates values. For example, ...|$|R
50|$|In computing, <b>sequential</b> <b>access</b> memory (SAM) is a {{class of}} data storage devices that read stored data in a sequence. This is in {{contrast}} to random access memory (RAM) where data can be accessed in any order. <b>Sequential</b> <b>access</b> devices are usually a form of magnetic storage.|$|R
50|$|The KSDS {{organization}} {{was designed to}} replace ISAM, the <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method. Changes in disk technology had meant that searching for data in ISAM data sets had become very inefficient. It was also difficult to move ISAM data sets as there were embedded pointers to physical disk locations which became invalid if the data set was moved. IBM also provided a compatibility interface to allow programs coded to use ISAM to use a KSDS instead.|$|E
50|$|An {{important}} {{challenge for}} harnessing {{the power of}} a midrange computer is interacting with an online user and providing ease of use. So what if your customer file has a million records... can your computer operator find the right one quickly? Concepts such as ISAM (<b>Indexed</b> <b>Sequential</b> <b>Access</b> Method) have been around {{since the early days of}} computing. Using a display format, with colors, blinking fields, command keys, and scrolling functions, an operator can quickly adjust to advanced programs and become more effective.|$|E
50|$|There {{are three}} modules to Jet: One is the Native Jet ISAM Driver, a {{dynamic link library}} (DLL) that can {{directly}} manipulate Microsoft Access database files (MDB) using <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method (ISAM). Another one of the modules contains the ISAM Drivers, DLLs that allow access {{to a variety of}} ISAM databases, among them xBase, Paradox, Btrieve and FoxPro, depending on the version of Jet. The final module is the Data Access Objects (DAO) DLL. DAO provides an API that allows programmers to access JET databases using any programming language.|$|E
5000|$|Files had various types, like {{text files}} and <b>index</b> <b>sequential</b> data files.|$|R
50|$|Magnetic <b>sequential</b> <b>access</b> {{memory is}} {{typically}} used for secondary storage in general-purpose computers {{due to their}} higher density at lower cost compared to RAM, as well as resistance to wear and non-volatility. Magnetic tape is the only type of <b>sequential</b> <b>access</b> memory still in use; historically, drum memory has also been used.|$|R
50|$|BPAM {{provides}} an {{application program interface}} (API) to allow programmers to access libraries directly. The BPAM API is similar to basic <b>sequential</b> <b>access</b> method (BSAM), but it adds functionality to process directories. Individual members of a PDS can also be processed using <b>sequential</b> <b>access</b> methods by specifying the member name on the job control DD statement.|$|R
50|$|There {{were three}} modules to Jet. One was the Native Jet ISAM Driver, a Jet {{dynamic link library}} (DLL) that could {{directly}} manipulate Microsoft Access database files (MDB), which was a modified form of an <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method (ISAM) database. Another one of the modules were the ISAM Drivers, DLLs that allowed access to ISAM databases, among them being Xbase, Paradox, Btrieve and FoxPro files. The final module was the Data Access Objects (DAO) DLL, DAO allowed programmers access to the Jet engine. It was basically an object-oriented data language used by Access Basic and Visual Basic application developers to access Jet.|$|E
50|$|The {{first part}} of an ETL process {{involves}} extracting {{the data from the}} source system(s). In many cases, this represents {{the most important aspect of}} ETL, since extracting data correctly sets the stage for the success of subsequent processes. Most data-warehousing projects combine data from different source systems. Each separate system may also use a different data organization and/or format. Common data-source formats include relational databases, XML and flat files, but may also include non-relational database structures such as Information Management System (IMS) or other data structures such as Virtual Storage Access Method (VSAM) or <b>Indexed</b> <b>Sequential</b> <b>Access</b> Method (ISAM), or even formats fetched from outside sources by means such as web spidering or screen-scraping. The streaming of the extracted data source and loading on-the-fly to the destination database is another way of performing ETL when no intermediate data storage is required. In general, the extraction phase aims to convert the data into a single format appropriate for transformation processing.|$|E
40|$|ISAM {{refers to}} <b>Indexed</b> <b>Sequential</b> <b>Access</b> Mode. Under this 13; records can be created/accussed modified, based on any {{particular}} data field called index key. This facility {{is not available}} as a built-in procedure in C language. 13; 13; This highly useful feature is implemented in C as an enhancement keeping in mind the users who need this facility...|$|E
5000|$|... lbzip2: Parallel pthreads-based bzip2/bunzip2 (bzip2 compressor/decompressor) filter for <b>sequential</b> <b>access</b> input/output, by László Érsek.|$|R
5000|$|<b>Sequential</b> <b>access</b> memory a {{class of}} data storage devices that read stored data in a {{sequence}} ...|$|R
5000|$|Ease of {{reference}} (A codex accommodates random access, {{as opposed to}} a scroll, which uses <b>sequential</b> <b>access.)</b> ...|$|R
