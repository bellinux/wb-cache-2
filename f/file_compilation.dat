7|56|Public
500|$|Certain {{versions}} of Tatsunoko vs. Capcom: Ultimate All-Stars are bundled with a Mad Catz arcade stick, whose artwork {{was produced by}} Japanese artist Shinkiro. Pre-orders from GameStop included eight of thirteen lenticular trading cards. As a buying incentive, Capcom's Japanese online store offered a Secret <b>File</b> <b>compilation</b> book of concept art, illustrations and design notes; it is the twenty-seventh volume of the Secret File series, which was originally published between 1996 and 1999 {{as a supplement to}} Capcom games of the time. The store also included an audio CD with four vocal tracks from the game: the opening song from Cross Generation of Heroes, [...] "Across the Border", sung by Asami Abe; Ultimate All-Stars English re-recording of this song, sung by Anna Gholston, with rap by James C. Wilson; and the Japanese and English {{versions of}} Roll's theme song composed by Yoshinori Ono.|$|E
5000|$|The {{shortest}} valid COBOL program, {{with the}} relaxed syntax option in GnuCOBOL 2.0, is a blank <b>file.</b> <b>Compilation</b> and execution:$ cobc -x -frelax-syntax [...]/empty.cob./empty.cob: 1: Warning: PROGRAM-ID header missing - assumed$ [...]/empty$ For earlier versions and with relaxed syntax: ...|$|E
5000|$|The Sharp were a three-piece pop, rockabilly band which {{formed in}} 1991 with Allan Catlin on double bass and lead vocals, Piet Collins on drums and Charlie Rooke on guitar and lead vocals. They issued three albums, This Is the Sharp (September 1993), Sonic Tripod (October 1994) and Single <b>File</b> (<b>compilation,</b> September 1995). Their highest {{charting}} single, [...] "Alone Like Me" [...] (1994), reached the ARIA Singles Chart top 20. They disbanded in October 1995.|$|E
5000|$|X-Rated: The Dark <b>Files</b> <b>compilation</b> {{contains}} the track [...] "So Young It Knows No Maturing". (CD) (2006) ...|$|R
5000|$|X-Rated: The Dark <b>Files</b> <b>compilation</b> CD {{released}} in 2006. Contained the track [...] "So Young It Knows No Maturing".|$|R
50|$|On September 30, 2008, Pit Fight Records {{released}} U.F.O. <b>Files,</b> a <b>compilation</b> {{of previously}} unreleased Beatnuts songs.|$|R
5000|$|Rake uses Ruby's {{anonymous}} function blocks to define various tasks, allowing {{the use of}} Ruby syntax. It has a library of common tasks: for example, functions to do common file-manipulation tasks and a library to remove compiled files (the [...] "clean" [...] task). Like Make, Rake can also synthesize tasks based on patterns: for example, automatically building a <b>file</b> <b>compilation</b> task based on filename patterns. Rake {{is now part of}} the standard library from Ruby version 1.9 onward.|$|E
5000|$|Certain {{versions}} of Tatsunoko vs. Capcom: Ultimate All-Stars are bundled with a Mad Catz arcade stick, whose artwork {{was produced by}} Japanese artist Shinkiro. Pre-orders from GameStop included eight of thirteen lenticular trading cards. As a buying incentive, Capcom's Japanese online store offered a Secret <b>File</b> <b>compilation</b> book of concept art, illustrations and design notes; it is the twenty-seventh volume of the Secret File series, which was originally published between 1996 and 1999 {{as a supplement to}} Capcom games of the time. The store also included an audio CD with four vocal tracks from the game: the opening song from Cross Generation of Heroes, [...] "Across the Border", sung by Asami Abe; Ultimate All-Stars English re-recording of this song, sung by Anna Gholston, with rap by James C. Wilson; and the Japanese and English {{versions of}} Roll's theme song composed by Yoshinori Ono.|$|E
40|$|Lisp {{has some}} {{specialised}} capability for reflective operations, exemplified by its macro facility, structured name spaces, <b>file</b> <b>compilation,</b> file loading and dynamic code synthesis. There {{has been some}} progress {{in the last few}} years on the semantics of macros, but the other operations have been categorized as environmental issues. In this paper, we present a semantics for modules and will show that it substantially reduces the difficulty of defining precisely several features of usual Lisp systems such as macros, module compilation (<b>file</b> <b>compilation),</b> module loading (fasl loading) and dynamic evaluation. The module schema addresses the questions of name visibility and separate compilation. Macro-expansion is specified relative to where and how it takes place as part of operations on modules. We do not present a radical Lisp, but rather one that tries to stay within the commonly understood Lisp paradigm. We do not simply borrow from other languages [...] - the particular behaviour of Lisp p [...] ...|$|E
50|$|Knockout <b>Files</b> - <b>Compilation</b> {{of classic}} {{knockouts}} from international boxing fights. Features Mike Tyson, Lennox Lewis and Ricky Hatton.|$|R
2500|$|Jive After Five: The Festival <b>File</b> Volume Two (<b>compilation,</b> Festival, 1988) ...|$|R
5000|$|... using batch <b>files</b> {{to perform}} <b>compilation</b> tasks {{from within the}} editor ...|$|R
40|$|Software Product Lines (SPLs) allow {{variants}} of a software {{system to be}} generated based on the configuration selected by the user. In this thesis, we focus on C based software systems with build-time variability using a build system and C preprocessor. Such systems usually consist of a configuration space, a code space, and a build space. The configuration space describes the features that the user can select and any configuration constraints between them. The features and the constraints between them are commonly documented in a variability model. The code and build spaces contain the actual implementation of the system where the former contains the C code files with conditional compilation directives (e. g., #ifdefs), and the latter contains the build scripts with conditionally compiled files. We study {{the relationship between the}} three spaces as follows: (1) we detect variability anomalies which arise due to inconsistencies among the three spaces, and (2) we use anomaly detection techniques to automatically extract configuration constraints from the implementation. For (1), we complement previous research which mainly focused on the relationship between the configuration space and code space. We additionally analyze the build space to ensure that the constraints in all three spaces are consistent. We detect inconsistencies, which we call variability anomalies, in particular dead and undead artifacts. Dead artifacts are conditional artifacts which are not included in any valid configuration while undead artifacts are those which are always included. We look for such anomalies at both the code block and source file levels using the Linux kernel as a case study. Our work shows that almost half the configurable features are only used to control source <b>file</b> <b>compilation</b> in Linux’s build system, KBUILD. We analyze KBUILD to extract file presence conditions which determine under which feature combinations is each file compiled. We show that by considering the build system, we can detect an additional 20 % variability anomalies on the code block level when compared to only using the configuration and code spaces. Our work also shows that file level anomalies occur less frequently than block level ones. We analyze the evolution of the detected anomalies and identify some of their causes and fixes. For (2), we develop novel analyses to automatically extract configuration constraints from implementation and compare them to those in existing variability models. We rely on two means of detecting variability anomalies: (a) conditional build-time errors and (b) detecting under which conditions a feature has an effect on the compiled code (to avoid duplicate variants). We apply this to four real-world systems: uClibc, BusyBox, eCos, and the Linux kernel. We show that our extraction is 93 % and 77 % accurate respectively for the two means we use and that we can recover 19 % of the existing variability-model constraints using our approach. We qualitatively investigate the non-recovered constraints and find that many of them stem from domain knowledge. For systems with existing variability models, understanding where each constraint comes from can aid in traceability between the code and the model which can help in debugging conflicts. More importantly, in systems which do not have a formal variability model, automatically extracting constraints from code provides the basis for reverse engineering a variability model. Overall, we provide tools and techniques to help maintain and create software product lines. Our work helps to ensure the consistency of variability constraints scattered across SPLs and provides tools to help reverse engineer variability models...|$|E
50|$|Texmaker {{automatically}} locates {{errors and}} warnings {{detected in the}} log <b>file</b> after a <b>compilation.</b>|$|R
50|$|Donovan <b>File</b> is a <b>compilation</b> album from Scottish singer-songwriter Donovan. It was {{released}} in the United Kingdom (Pye FILD 004) in 1977.|$|R
5000|$|In 2012, The Case <b>Files,</b> a <b>compilation</b> of [...] "studio out-takes, demos, {{and live}} shots," [...] was {{released}} by Alive/Natural Sound Records. This record included two 1985 demos made with T-Bone Burnett, some spoken word pieces with music from a longer piece called [...] "Bomblight Prayer Vigil," [...] and various other Case rarities.|$|R
5000|$|As of version 5.6.1, Crypto++ {{consists}} of only public domain <b>files,</b> with a <b>compilation</b> copyright {{and a single}} open source license for the compilation copyright: ...|$|R
50|$|The Case <b>Files</b> is a <b>compilation</b> album by American singer-songwriter Peter Case, {{released}} in 2011. It consists of unreleased songs, out-takes and demos from Case's solo career.|$|R
40|$|This {{application}} note describes {{the implementation of}} an RGB color space to a YCbCr color space conversion circuit necessary in many video designs. The reference design files include RTL VHDL code defining an optimized structure using only four multipliers to implement the RGB to YCrCb transformation. Source <b>files</b> in <b>compilation</b> order are: 1. GenXlib_util. vhd, 2. GenXlib_arch. vhd, 3. color_space_pkg. vhd...|$|R
5000|$|While Biml’s {{declarative}} {{design is}} sufficient to author BI assets, BimlScript extends the language by enabling authors to embed C# or VB.NET code within Biml, similar to how ASP.NET includes [...]NET code within static HTML markup. [...] BimlScript is used to merge changes into existing Biml assets, automatically generate Biml code, and apply changes across multiple Biml <b>files</b> during <b>compilation.</b>|$|R
50|$|The PL/I {{preprocessor}} is the preprocessor for the PL/I {{computer programming}} language. The preprocessor interprets {{a subset of}} the full PL/I language to perform source <b>file</b> inclusion, conditional <b>compilation,</b> and macro expansion.|$|R
50|$|In June 1992 the General Assembly passed House Bill 3810, {{which became}} Public Act 87-1005, which {{directed}} LRB to <b>file</b> a <b>compilation</b> {{of the general}} Acts of Illinois. The <b>compilation</b> was <b>filed</b> by LRB, as directed by Public Act 87-1005, on September 14, 1992. (Alternative sources give the effective date as September 3, 1992.) The compilation {{is known as the}} Illinois Compiled Statutes, or ILCS, and took effect January 1, 1993.|$|R
40|$|Data Availability: All {{data and}} sources {{obtained}} {{for the purpose of}} writing this report have been compiled. Along with this report, the Lake Puckaway Protection and Rehabilitation District was given a full set of printed materials (returned originals or copies from other sources) and digital <b>files</b> (data <b>compilations</b> in Microsoft Excel and Word files and original or scanned electronic documents) preserved on compact disks and flash drives. Data with a source label “EPA Storet ” were acquired from the U. S. Environmenta...|$|R
5000|$|Program {{database}} (PDB) is {{a proprietary}} file format (developed by Microsoft) for storing debugging {{information about a}} program (or, commonly, program modules such as a DLL or EXE). PDB files commonly have a [...]pdb extension. A PDB file is typically created from source <b>files</b> during <b>compilation.</b> It stores {{a list of all}} symbols in a module with their addresses and possibly the name of the file and the line on which the symbol was declared. This symbol information is not stored in the module itself, because it takes up a lot of space.|$|R
50|$|This new lineup became The Unfixers and {{recorded}} an album at Philadelphia studio, Meat Locker. Soon after, they disbanded and the album remained unreleased. One track of that album, Pace, {{was released on}} a <b>File</b> Thirteen Records <b>compilation.</b> They played their last show in Philadelphia {{around the end of}} 2000.|$|R
40|$|For large {{programs}} {{consisting of}} many source <b>files,</b> the <b>compilation</b> {{process can be}} quite time consuming. For the C and C++ programming languages, there exists a program named distcc, the Distributed C Compiler [2], to facilitate the parallel compilation of source into machine code. This paper discusses our investigation into whether distributing the <b>compilation</b> of Java <b>files</b> {{can result in a}} faster compilation of large Java projects. The research indicates that the distributed compilation of projects consisting {{of a large number of}} relatively large source files can see a speed improvement over the traditional implementation of javac...|$|R
50|$|Though {{similar to}} Apple's Hypercard reader in many ways, the Bookshelf engine had several key differences. Unlike Hypercard files, Bookshelf <b>files</b> {{required}} <b>compilation</b> and complex markup codes. This made the files {{more difficult to}} pirate, addressing a key concern of early electronic publishers. Furthermore, Bookshelf's engine was designed to run {{as fast as possible}} on slow first-generation CD-ROM drives, some of which required as much as a half-second to move the drive head. Such hardware constraints made Hypercard impractical for high-capacity CD-ROMs. Bookshelf also had full text searching capability, which made it easy to find needed information.|$|R
50|$|Cold Case <b>Files</b> is a <b>compilation</b> album {{released}} by rap group, Onyx. It {{was released on}} August 19, 2008 through the Iceman Music Group and contained unreleased tracks from the group's first three albums, Bacdafucup, All We Got Iz Us and Shut 'Em Down. Deceased member, Big DS and affiliate, X-1 also appear on the album.|$|R
50|$|Lexical preprocessors are the lowest-level of preprocessors as {{they only}} require lexical analysis, that is, they {{operate on the}} source text, prior to any parsing, by {{performing}} simple substitution of tokenized character sequences for other tokenized character sequences, according to user-defined rules. They typically perform macro substitution, textual inclusion of other <b>files,</b> and conditional <b>compilation</b> or inclusion.|$|R
5000|$|GNU linker (or GNU ld) is the GNU Project's {{implementation}} of the Unix command ld. GNU ld runs the linker, which creates an executable file (or a library) from object <b>files</b> created during <b>compilation</b> of a software project. A linker script may be passed to GNU ld to exercise greater control over the linking process. [...] The GNU linker {{is part of the}} GNU Binary Utilities (binutils).|$|R
50|$|IDEs {{initially}} became {{possible when}} developing via a console or terminal. Early systems could not support one, since programs were prepared using flowcharts, entering programs with punched cards (or paper tape, etc.) before submitting {{them to a}} compiler. Dartmouth BASIC was the first language to be created with an IDE (and {{was also the first}} to be designed for use while sitting in front of a console or terminal). Its IDE (part of the Dartmouth Time Sharing System) was command-based, and therefore did not look much like the menu-driven, graphical IDEs popular after the advent of the Graphical User Interface. However it integrated editing, <b>file</b> management, <b>compilation,</b> debugging and execution {{in a manner consistent with}} a modern IDE.|$|R
5000|$|The UB40 <b>File</b> is a <b>compilation</b> {{album of}} all of UB40's 1980 Graduate recordings. The album first {{appeared}} as a double vinyl LP in 1985 and features all the tracks from Signing Off on Record One, the 3 tracks from the 12" [...] single that accompanied Signing Off on the first side of Record Two with the tracks released as singles that didn't feature on the debut album on side 2.|$|R
40|$|Report {{discussing}} forty-six standard X-ray diffraction powder patterns. Fourteen are {{to replace}} twelve patterns already {{given in the}} X-ray Powder Data File, and thirty-four are for substances not previously included. The X-ray Powder Data <b>File</b> is a <b>compilation</b> of diffraction patterns from many sources and {{is used for the}} identification of unknown crystalline materials by matching spacing and intensity measurements. The patterns were made with a Geiger counter X-ray diffractometer, using samples of high purity...|$|R
5000|$|Fullmetal Alchemist: Complete Best and Fullmetal Alchemist Hagaren Song <b>File</b> (Best <b>Compilation)</b> are {{compilations}} of the soundtracks {{that were}} released in Japan on October 14, 2004, and December 21, 2005, respectively. A bonus DVD, exclusive to the US release, contains a music video for Nana Kitade's [...] "Indelible Sin". Fullmetal Alchemist The Movie Conqueror Of Shamballa OST, which contains forty-six tracksall {{of which were}} used in the featured film Fullmetal Alchemist the Movie: Conqueror of Shamballawas released on July 20, 2005. During December 2004, a concert titled [...] "Tales of Another Festival" [...] was staged in Tokyo and Osaka. It featured performances by several musical artists from the television series and narrations by the voice actors. A DVD of the concert titled Fullmetal Alchemist FestivalTales of Another was released in Japan on April 27, 2005.|$|R
25|$|Link-time {{optimization}} optimizes across object file boundaries {{to directly}} improve the linked binary. Link-time optimization relies on an intermediate file containing the serialization of some Gimple representation {{included in the}} object file. The file is generated alongside the object <b>file</b> during source <b>compilation.</b> Each source compilation generates a separate object file and link-time helper file. When the object files are linked, the compiler is executed again and uses the helper files to optimize code across the separately compiled object files.|$|R
40|$|Understanding, debugging, and {{maintaining}} software is a costly and difficult task. The difficulties are exacerbated in programs written {{to take advantage}} of preprocessing facilities. This paper examines problems associated with source code containing preprocessor constructs [...] -i. e., included <b>files,</b> conditional <b>compilation,</b> and macros. We define the useful mappings from tokens in the preprocessor's output to the source file(s), and propose that by capturing these correspondences an internal program representation can be built which will allow for the use of maintenance techniques including program slicing, ripple analysis, and dicing. The method presented is generic; to illustrate that the technique is feasible, we discuss ANSI C preprocessor constructs [...] -in particular, macro substitution [...] -and explain the modus developed to handle them in Ghinsu [...] -an integrated maintenance environment for ANSI C programs. 1 Introduction Software maintenance is an expensive, demanding, and ongo [...] ...|$|R
