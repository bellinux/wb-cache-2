0|10000|Public
40|$|It is {{the policy}} of the Marshall Space Flight Center (MSFC) that {{employees}} {{be given the opportunity to}} develop their individual skills and realize their full potential consistent with their selected career path and with the overall Center's needs and objectives. The MSFC <b>Program</b> <b>Control</b> Development <b>Program</b> has been designed to assist individuals who have selected <b>Program</b> <b>Control</b> or <b>Program</b> Analyst <b>Program</b> <b>Control</b> as a career path to achieve their ultimate career goals. Individuals selected to participate in the MSFC <b>Program</b> <b>Control</b> Development <b>Program</b> will be provided with development training in the various <b>Program</b> <b>Control</b> functional areas identified in the NASA <b>Program</b> <b>Control</b> Model. The purpose of the MSFC <b>Program</b> <b>Control</b> Development <b>Program</b> is to develop individual skills in the various <b>Program</b> <b>Control</b> functions by on-the-job and classroom instructional training on the various systems, tools, techniques, and processes utilized in these areas...|$|R
40|$|NASA has {{successfully}} managed {{some of this}} country's most complex technology and development programs. These successes have included the application of sound <b>program</b> <b>control</b> processes. The impetus for this study arose from the NASA Management Study Group findings that over time, some <b>program</b> <b>control</b> tools and disciplined procedures and processes had weakened. The Study Group recommended that steps be taken to establish a comprehensive training approach in program management, and specifically, in <b>program</b> <b>control</b> functions. This study looks at <b>program</b> <b>control</b> processes within NASA currently in use, defines a 'model' of <b>program</b> <b>control</b> functions, and provides recommendations on <b>program</b> <b>control</b> training needs and opportunities...|$|R
5000|$|OUTPUT -Medium- -Speed- Printer Character 78.5-2,433 ms (<b>Program</b> <b>Control)</b> Phase - Voltage (<b>Program</b> <b>Control)</b> ...|$|R
40|$|Digital Rights Management (DRM) is used {{to control}} access to {{digitized}} intellectual property and sometimes to control how that property is used. In the media context, this often involves a player together with a (possibly incorporated) "set-top box". Historically, DRM schemes have been too fragile to protect high-value digital content. In this thesis, we remedy that problem. Through registration, a user's identity is bound to a tamper-proof set-top box storing shared secrets and running a <b>hard-wired</b> <b>program.</b> Encrypted content of interest is obtained by arbitrary means. The user activates the box {{to engage in a}} protocol with a remote server operated on behalf of the content owner. The server securely delivers the capability to display this content precisely once and records this fact. Keying information is hidden from the user {{in such a way that}} key distribution and authentication are radically simplified, resulting in an extremely robust security architecture...|$|R
50|$|As {{the picture}} illustrates, the {{asynchronous}} mode allows the non-Java <b>program</b> to get <b>control</b> and do other processing. That implies checking {{for a response}} at some future point. BBOA1RCL is used for that purpose. In this example BBOA1RCL is issued synchronously (parameter async=0). If a response is available BBOA1RCL will provide the length and <b>program</b> <b>control</b> returns to the program. If no response is available BBOA1RCL holds <b>program</b> <b>control</b> until one is available. BBOA1RCL with async=1 will return x'FFFFFFFF' if no response is available; <b>program</b> <b>control</b> is returned immediately.|$|R
5000|$|Forms {{skipping}} under <b>program</b> <b>control</b> through automatic, paper-tape-controlled carriage.|$|R
40|$|Under {{the heading}} of <b>Program</b> <b>Control,</b> a number of related topics are discussed: cost {{estimating}} methods; planning and scheduling; cost overruns in the defense industry; the history of estimating; the advantages of cost plus award fee contracts; and how <b>program</b> <b>control</b> techniques led {{to the success of}} a NASA development project...|$|R
40|$|The {{programs}} described {{were developed}} to process GEODYN-formatted satellite altimeter data, and to apply the processed results to predict geoid undulations and gravity anomalies of inland sea areas. These programs are written in standard FORTRAN 77 and are designed to run on the NSESCC IBM 3081 (MVS) computer. Because of the experimental nature of these programs they are tailored to the geographical area analyzed. The attached program listings are customized for processing the altimeter data over the Black Sea. Users interested in the Caspian Sea data are expected to modify each program, although the required modifications are generally minor. <b>Program</b> <b>control</b> parameters are defined in the programs via PARAMETER statements and/or DATA statements. Other auxiliary parameters, such as labels, are <b>hard-wired</b> into the <b>programs.</b> Large data files are read in or written out through different input or output units. The program listings of these programs are accompanied by sample IBM job control language (JCL) images. Familiarity with IBM JCL and the TEMPLATE graphic package is assumed...|$|R
2500|$|Zuse, Konrad. Direction-bound {{engraving}} tool with <b>program</b> <b>control.</b> U.S. Patent 3,163,936 ...|$|R
5000|$|... "Coupe Canada 1976 Canada Cup" [...] Official Match <b>Program,</b> <b>Controlled</b> Media Corp.,1976 ...|$|R
5000|$|Exposure: <b>Program</b> <b>controlled</b> mode, manual mode, {{aperture}} priority or shutter priority mode ...|$|R
40|$|Automated {{ultrasonic}} inspection system includes dry couplant pad attached to ultrasonic transducer. Designed to be mounted on robot arm in automated manufacturing (robotic welding) work cell. Between, during, or after manufacturing operations, robot scans ultrasonic transducer along workpiece. Workpiece reworked in place, if necessary. In principle, computer <b>program</b> <b>controlling</b> inspection overlaid on <b>program</b> <b>controlling</b> welding operations...|$|R
50|$|Both {{programs}} and {{data can be}} stored to magnetic tape. Data can be stored under <b>program</b> <b>control.</b> <b>Programs</b> can be password protected from both listing and execution.|$|R
5000|$|Polling {{is where}} the CPU {{examines}} {{the status of the}} peripheral under <b>program</b> <b>control.</b>|$|R
40|$|This paper explores a {{representational}} technique which, {{through direct}} code analysis, maps the <b>program's</b> <b>control</b> component into a canonical database, a reduced ordered binary decision diagram (ROBDD), which fully enables the compiler to utilize and manipulate predication. This abstraction is then applied {{to optimize the}} <b>program's</b> <b>control</b> component, transforming it into a form more amenable to instruction level parallel (ILP) executio...|$|R
2500|$|Yielding {{the flow}} of <b>program</b> <b>control</b> to a block that was {{provided}} at calling time: ...|$|R
50|$|FAA FTD Level 6 - Aircraft-model-specific {{aerodynamic}} <b>programming,</b> <b>control</b> feel, {{and physical}} cockpit are required.|$|R
5000|$|Yielding {{the flow}} of <b>program</b> <b>control</b> to a block that was {{provided}} at calling time: ...|$|R
50|$|<b>Program</b> <b>control</b> (control flow) is {{achieved}} by jump instructions and function calls (subroutines with optional parameters).|$|R
40|$|This paper {{proposes a}} method to improve the {{robustness}} of a robot arm <b>control</b> <b>program.</b> The <b>control</b> <b>program</b> is generated in simulation by genetic programming. The robustness is measured in the real world. To improve the robustness, the <b>control</b> <b>program</b> is evolved with multiple robot arm configurations. The result shows that the robustness of a <b>control</b> <b>program</b> is improved by 10 % compared to a <b>control</b> <b>program</b> evolved with a single configuration...|$|R
5000|$|A {{wide range}} of {{computational}} data types, <b>program</b> <b>control</b> data types, and forms of data structure (strong typing).|$|R
5000|$|Object is a {{self-contained}} run-time program component. It can be instantiated dynamically under <b>program</b> <b>control</b> in arbitrary multiplicity.|$|R
50|$|Most {{industrial}} lasers {{have the ability}} to pulse or cut CW (Continuous Wave) under NC (numerical <b>control)</b> <b>program</b> <b>control.</b>|$|R
50|$|The flying-spot {{store was}} an optical digital memory used in early stored <b>program</b> <b>control</b> {{components}} of electronic switching systems.|$|R
5000|$|... 2. The {{object in}} a test library cannot be moved {{unilaterally}} into production. It must be compiled in the library associated with the external files (unlike System Support <b>Program,</b> <b>Control</b> <b>Program</b> Facility libraries contain data files.) ...|$|R
50|$|Norton Personal Firewall, {{developed}} by Symantec, is a discontinued personal firewall with ad blocking, <b>program</b> <b>control</b> and privacy protection capabilities.|$|R
5000|$|Administering {{and serving}} as the fiscal agent and as <b>program</b> <b>control</b> agent for the Education Quality Trust Fund (8(g) programs; ...|$|R
5000|$|Freak: {{derived from}} the old <b>program</b> <b>Control</b> Freak, the viewer decides what the next clip to be made via SMS.|$|R
5000|$|... â€”transfers <b>program</b> <b>control</b> to {{a machine}} {{language}} subroutine, usually entered as an alphanumeric string or in {{a list of}} DATA statements.|$|R
50|$|ZoneAlarm Free Firewall: This free {{personal}} firewall includes a web and local network {{personal firewall}} with outbound <b>program</b> <b>control</b> and port stealthing.|$|R
50|$|Control unit is {{a special}} case of {{function}} units which <b>controls</b> execution of <b>programs.</b> <b>Control</b> unit {{has access to the}} instruction memory in order to fetch the instructions to be executed. In order to allow the executed programs to transfer the execution (jump) to an arbitrary position in the executed <b>program,</b> <b>control</b> unit provides control flow operations. A control unit usually has an instruction pipeline, which consists of stages for fetching, decoding and executing program instructions.|$|R
5000|$|CMS runs as a [...] "guest" [...] {{operating}} {{system in a}} private virtual machine created by the VM <b>control</b> <b>program.</b> The <b>control</b> <b>program</b> plus CMS together create a multi-user time-sharing {{operating system}}.|$|R
50|$|An {{immediate}} {{consequence of}} stored <b>program</b> <b>control</b> is automation of exchange functions and {{introduction of a}} variety of new telephony features to subscribers.|$|R
50|$|The {{features}} of toll-free services have evolved as telephone networks {{have moved from}} electro-mechanical call switching to fully computerized stored <b>program</b> <b>controlled</b> networks.|$|R
25|$|From the {{processing}} point of view, hardware interrupts {{are similar to}} resumable exceptions, though they are typically unrelated to the user <b>program's</b> <b>control</b> flow.|$|R
5000|$|A {{statement}} might assign {{an expression}} to a variable {{or use the}} value of a variable to alter the <b>program's</b> <b>control</b> flow - for example: ...|$|R
