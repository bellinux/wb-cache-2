2|1107|Public
50|$|The <b>{{interrupt}}</b> <b>priority</b> <b>level</b> (IPL) {{is a part}} of {{the current}} system interrupt state, which indicates the interrupt requests that will currently be accepted. The IPL may be indicated in hardware by the registers in a Programmable Interrupt Controller, or in software by a bitmask or integer value.|$|E
5000|$|... "The naming {{goes back}} to the early days of UNIX on the PDP-11. The PDP-11 had a {{relatively}} simplistic level-based interrupt structure. When running at a specific level, only higher priority interrupts were allowed. UNIX named functions for setting the <b>interrupt</b> <b>priority</b> <b>level</b> after the PDP-11 SPL instruction, so initially the functions had names like spl4 and spl7. Later machines came out with interrupt masks, and BSD changed the names to more descriptive names such as splbio (for block I/O) and splhigh (block out all interrupts)." ...|$|E
5000|$|Interrupts can be {{delivered}} to the Interrupt Fielding Processor at any of four <b>interrupt</b> <b>priority</b> <b>levels.</b> Within a given level, the cards closer to the IFP (at {{the front of the}} bus) take priority over cards further back on the bus. [...] Interrupts are vectored: a card requesting an interrupt has its interrupt vector read by the IFP. In this way, the interrupts from all I/O cards in the system can be distinguished with no ambiguity.|$|R
40|$|Fully {{orthogonal}} {{instruction set}} • Pipelined architecture allows one instruction per clock cycle for most instructions • Byte, half-word, word and double word memory access • Fast interrupts and multiple <b>interrupt</b> <b>priority</b> <b>levels</b> • Optional branch prediction for minimum delay branches • Privileged and unprivileged modes enabling efficient and secure Operating Systems • Innovative instruction set together with variable instruction length ensuring industry leading code density • Optional DSP extention with saturated arithmetic, and {{a wide variety of}} multiply instructions • Optional extensions for Java, SIMD, Read-Modify-Write to memory, and Coprocessors • Architectural support for efficient On-Chip Debug solutions • Optional MPU or MMU allows for advanced operating systems • FlashVault ™ support through Secure State for executing trusted code alongside nontrusted code on the same CPU 1...|$|R
50|$|The PDP-11 {{supports}} hardware <b>interrupts</b> at four <b>priority</b> <b>levels.</b> <b>Interrupts</b> are {{serviced by}} software service routines, which could specify whether they themselves could be interrupted (achieving interrupt nesting). The event {{that causes the}} interrupt is indicated by the device itself, as it informs the processor of the address of its own interrupt vector.|$|R
40|$|CHIP (Cornell Hypothetical Instructional Processor) is a {{computer}} system that was designed as an educational tool for teaching undergraduate courses in operating systems and machine architecture. This document constitutes the sole reference manual for the CHIP computer system. A simulator for this hypothetical system exists under the UNIX operating system. The CHIP architecture includes dynamic memory mapping suitable for implementing virtual memory, eight <b>interrupt</b> <b>priority</b> <b>levels,</b> memory-mapped input/output and two modes of processor operation. The central processor of CHIP {{is compatible with the}} PDP- 11 at the user-mode instruction level. Therefore, any non-privileged code written for the PDP- 11 can be executed on CHIP. Several new user and kernel-mode instructions have been added to CHIP for increased efficiency. The CHIP simulator also supports input/output devices such as terminals, drums, disks and printers. All interactions with CHIP take place through an operator's console being simulated on a terminal. Users can examine/alter memory locations, set breakpoints, detect the referencing of specified memory locations, start/stop execution, etc. through a console command language. Program global variables and functions can be referred to by symbolic name with the mapping to absolute addresses being performed automatically by the system. The software support environment for CHIP includes a C compiler, assembler and loader...|$|R
5000|$|The Jazz DSP, by Improv Systems, is a VLIW {{embedded}} {{digital signal}} processor architecture with a 2-stage instruction pipeline, and single-cycle execution units. The baseline DSP includes one arithmetic logic unit (ALU), dual memory interfaces, and the control unit (instruction decoder, branch control, task control). Most aspects of the architecture, such as the number and sizes of Memory Interface Units (MIU) or the types and number of Computation Units (CU), datapath width (16 or 32-bit), the number of <b>interrupts</b> and <b>priority</b> <b>levels,</b> and debugging support may be independently configured using a proprietary graphical user interface (GUI) tool. A key feature of the architecture allows the user to add custom instructions and/or custom execution units to enhance {{the performance of their}} application.|$|R
5000|$|... spl (short for set <b>priority</b> <b>level)</b> is {{the name}} for a {{collection}} of Unix <b>interrupt</b> <b>priority</b> control commands. The functions include splhigh, splserial, splsched, splclock, splstatclock, splvm, spltty, splsofttty, splnet, splbio, splsoftnet, splsoftclock, spllowersoftclock, spl0, splx.|$|R
40|$|DC performance: ± 1 LSB INL AC performance: 71 dB SNR DMA {{controller}} {{for high}} speed ADC-to-RAM capture 2 12 -bit (monotonic) voltage output DACs Dual output PWM/Σ-Δ DACs On-chip temperature sensor function: ± 3 °C On-chip voltage reference Memory 62 kB on-chip Flash/EE program memory 4 kB on-chip Flash/EE data memory Flash/EE, 100 Yr retention, 100, 000 cycles of endurance 2304 bytes on-chip data RAM 8051 -based core 8051 -compatible instruction set (16 MHz maximum) 32 kHz external crystal, on-chip programmable PLL 12 <b>interrupt</b> sources, 2 <b>priority</b> <b>levels</b> Dual data pointer Extended 11 -bit stack pointer On-chip peripherals Time interval counter (TIC) UART, I 2 C, and SPI Serial I/O Watchdog timer (WDT), power supply monitor (PSM...|$|R
50|$|The {{hardware}} interrupt system supports a 4-bit <b>interrupt</b> <b>priority</b> input, which {{needed to be}} higher than the <b>priority</b> <b>level</b> stored in the status register (bits 12-15) in order for the interrupt request to be served. In addition, the /LOAD input provides a non-maskable interrupt facility with a dedicated vector.|$|R
40|$|Increased memory Up to 62 kBytes on-chip Flash/EE {{program memory}} 4 kBytes on-chip Flash/EE data memory In-circuit {{reprogrammable}} Flash/EE, 100 year retention, 100 kCycle endurance 2304 bytes on-chip data RAM Smaller package 8 mm × 8 mm {{chip scale package}} 52 -lead PQFP—pin compatable upgrade Analog I/O 8 -channel, 420 kSPS high accuracy, 12 -bit ADC On-chip, 15 ppm/°C voltage reference DMA controller, high speed ADC-to-RAM capture Two 12 -bit voltage output DACs 1 Dual output PWM ∑- ∆ DACs On-chip temperature monitor function 8052 based core 8051 compatible instruction set (20 MHz max) High performance single-cycle core 32 kHz external crystal, on-chip programmable PLL 12 <b>interrupt</b> sources, 2 <b>priority</b> <b>levels</b> Dual data pointers, extended 11 -bit stack pointer On-chip peripherals Time interval counter (TIC) UART, I 2 C®, and SPI ® Serial I/O Watchdog timer (WDT) Power supply monitor (PSM...|$|R
5000|$|Interrupt nesting. Some {{microcontrollers}} allow higher <b>priority</b> <b>interrupts</b> to <b>interrupt</b> lower <b>priority</b> ones. This allows {{software to}} manage latency by giving time-critical <b>interrupts</b> higher <b>priority</b> (and thus lower and more predictable latency) than less-critical ones.|$|R
5000|$|IRQPRIORITY (Embedded DOS 6-XL only) : Rotates PIC {{controller}} <b>interrupt</b> <b>priorities</b> so that specified number {{gets the}} highest priority ...|$|R
50|$|Such bus {{systems are}} also {{difficult}} to configure when constructed from common off-the-shelf equipment. Typically each added expansion card requires many jumpers {{in order to}} set memory addresses, I/O addresses, <b>interrupt</b> <b>priorities,</b> and <b>interrupt</b> numbers.|$|R
50|$|Every QCI (GBR and Non-GBR) is {{associated}} with a <b>Priority</b> <b>level.</b> <b>Priority</b> <b>level</b> 0.5 is the highest <b>Priority</b> <b>level.</b> If congestion is encountered, the lowest <b>Priority</b> <b>level</b> traffic {{would be the first to}} be discarded.|$|R
5000|$|A {{more complex}} {{technique}} just blocks the interrupts that may trigger {{access to that}} data structure. This is often based on <b>interrupt</b> <b>priorities,</b> which tend to not correspond well to the relevant system data structures. Accordingly, this technique is used mostly in very constrained environments.|$|R
50|$|These {{levels have}} {{associated}} numbers with them. Applications start at a base <b>priority</b> <b>level</b> of eight. The system dynamically adjusts the <b>priority</b> <b>level</b> {{to give all}} applications access to the processor.Priority levels 0 - 15 are used by dynamic applications. <b>Priority</b> <b>levels</b> 16- 31 are reserved for real-time applications.|$|R
50|$|The {{simultaneous}} {{assertion of}} the NMI and IRQ (maskable) hardware interrupt lines causes IRQ to be ignored. However, if the IRQ line remains asserted after the servicing of the NMI, the processor will immediately respond to IRQ, as IRQ is level sensitive. Thus {{a sort of}} built-in <b>interrupt</b> <b>priority</b> {{was established in the}} 6502 design.|$|R
40|$|Abstract:- The paper {{deals with}} a neural network {{controlled}} switch fabric with frame prioritization support. The impact of <b>priority</b> <b>levels</b> on the functionality and efficiency of this switch fabric was deeply investigated. The results of the studies related {{to the impact of}} the amount of <b>priority</b> <b>levels</b> are published in this paper. Key-Words:- Hopfield neural network, switch fabric, prioritization, <b>priority</b> <b>levels...</b>|$|R
40|$|ATM {{switches}} are {{now being}} designed to allow connections to be partitioned into priority classes, with packets being emitted for higher priority classes before packets are emitted for lower priority classes. Accordingly, allocation of network resources based on different <b>priority</b> <b>levels</b> is becoming a realistic possibility. Thus we need new methods to do connection admission control and capacity planning that {{take account of the}} priority structure. In this paper we show that the notion of effective bandwidths can be used for these purposes when appropriately extended. The key is to have admissibility of a set of connections determined by a linear constraint for each <b>priority</b> <b>level,</b> involving a performance criterion for each <b>priority</b> <b>level.</b> For this purpose, connections are assigned more than one effective bandwidth, one for its own <b>priority</b> <b>level</b> and one for each lower <b>priority</b> <b>level.</b> Candidate effective bandwidths for each <b>priority</b> <b>level</b> can be determined by using previous methods associated with the first-in first-out discipline, including the method based on large-buffer asymptotics. The proposed effective-bandwidth structure makes it possible to apply product-form stochastic loss network models to do dimensioning. 1...|$|R
40|$|We {{consider}} a Markovian single server queue in which customers are preemptively scheduled by exogenously assigned <b>priority</b> <b>levels.</b> The novelty in our model {{is that the}} <b>priority</b> <b>levels</b> are randomly assigned from a continuous probability measure rather than a discrete one. Because the <b>priority</b> <b>levels</b> are drawn from a continuum, the queue is modeled by a measure-valued stochastic process. We analyze the steady state behavior of this process and provide several results. We derive a measure that describes the average distribution of customer <b>priority</b> <b>levels</b> in the system; we provide a formula for the expected sojourn time of a customer {{as a function of}} his priority level; and we provide a formula for the expected waiting time of a customer as a function of his <b>priority</b> <b>level.</b> We interpret these quantitative results and give a qualitative understanding of how the <b>priority</b> <b>levels</b> affect individual customers as well as how they affect the system as a whole. The theoretical analysis is verified by simulation. We also discuss some directions of future work. Comment: 6 page...|$|R
3000|$|... is the <b>priority</b> <b>level</b> of i th {{operator}} {{among all}} operators for payoff. When some operators have priorities over other operators for payoff, their payoffs in (9) are discounted {{according to their}} <b>priority</b> <b>level.</b> Also [...]...|$|R
40|$|The {{purpose of}} this {{research}} is to develop a statistical method to monitor the fairness of network resource distribution. The newly developed fairness score function allows users to have the same or different <b>priority</b> <b>levels.</b> Especially, this function possesses all the necessary properties required as a quality characteristic for the purpose of statistical process control. The main objective is to find the critical values for the statistical test. Monte Carlo simulation is used to find the critical values. When the users have the same <b>priority</b> <b>level,</b> a table of the critical values is given for different sample sizes and different significance levels. When the users have different <b>priority</b> <b>levels,</b> it is difficult to generate a similar table since the users’ <b>priority</b> <b>levels</b> vary. Therefore, the critical values are computed for given <b>priority</b> <b>levels.</b> In both cases, an example is given to demonstrate the approach developed in this study...|$|R
3000|$|... <b>priority</b> <b>levels</b> {{would achieve}} the best {{performance}} where each slice is separately protected based on its CMSE. On the other hand, using fewer than four <b>priority</b> <b>levels</b> would limit the flexibility of our scheme and hence decrease its performance.|$|R
50|$|Federal, state, tribal, {{and local}} police departments, fire departments, EMS units, and similar {{entities}} qualify for Level 3 under communication services necessary for the public health, safety, and maintenance of law and order. The higher <b>priority</b> <b>levels,</b> Levels 1 and 2, include National Security leadership and certain military communications lines. Very few circuits receive a TSP <b>priority</b> <b>Level</b> 1 or Level 2 assignment. If an organization does not enroll its circuits in the TSP program, its telecommunications service provider cannot restore those lines until it has restored all TSP lines in <b>priority</b> <b>levels</b> 1, 2, 3, 4, and 5.|$|R
5000|$|The initial goal {{programming}} formulations {{ordered the}} unwanted deviations {{into a number}} of <b>priority</b> <b>levels,</b> with the minimisation of a deviation in a higher <b>priority</b> <b>level</b> being infinitely more important than any deviations in lower <b>priority</b> <b>levels.</b> This is known as lexicographic or pre-emptive goal programming. Ignizio gives an algorithm showing how a lexicographic goal programme can be solved as a series of linear programmes. Lexicographic goal programming should be used when there exists a clear priority ordering amongst the goals to be achieved.|$|R
40|$|Many ship {{collisions}} {{have been}} caused by a navigator’s error in the situation awareness (SA) of the navigator. In congested sea areas, navigators classify ships on the basis of different <b>priority</b> <b>levels.</b> For safety measures against ship collision, it is imperative for navigators to recognize the ships with high <b>priority</b> <b>levels.</b> In previous study, navigators’ SA was measured in a ship maneuvering simulator using the Situation Awareness Global Assessment Technique (SAGAT). From the results of the previous study, we proposed a new risk category, named as “attention area,” that covers ships with high <b>priority</b> <b>level</b> in the SA of navigators. However, the extent of data for navigators’ SA was limited. Therefore, {{the purpose of this study}} is to confirm the validity of the category using additional data of navigators SA. In this study, the validity of the proposed category was confirmed, and a limit line surrounding ships with high <b>priority</b> <b>levels</b> was identified. In addition, it was evident that the category was able to detect ships with high <b>priority</b> <b>level</b> around the time when the collision avoidance was performed...|$|R
5000|$|Round-robin {{scheduling}} for threads at {{the same}} <b>priority</b> <b>level</b> ...|$|R
40|$|This paper {{deals with}} multi-criteria {{decision}} making (MCDM) problems with multiple priorities, in which priority weights {{associated with the}} lower priority criteria {{are related to the}} satisfactions of the higher priority criteria. To do so, we first propose a prioritized weighted aggregation operator based on ordered weighted averaging (OWA) operator and triangular norms (t-norms). In order to preserve the tradeoffs among the criteria in the same <b>priority</b> <b>level,</b> we suggest that the satisfaction degree regarding each <b>priority</b> <b>level</b> is viewed as a pseudo criterion. On the other hand, t-norms are used to model the priority relationships between the criteria in different <b>priority</b> <b>levels.</b> In particular, we show that strict Archimedean t-norms perform better in inducing priority weights. As Hamacher family of t-norms provides a wide class of strict Archimedean t-norms ranging from the product to weakestt-norm, Hamacher parameterized t-norms are used to induce the priority weight for each <b>priority</b> <b>level.</b> Furthermore, considering decision maker (DM) ’s requirement toward higher <b>priority</b> <b>levels,</b> a benchmark based approach is proposed to induce priority weight for each <b>priority</b> <b>level.</b> In particular, Lukasiewicz implication is used to compute benchmark achievement for crisp requirements;target-oriented decision analysis is utilized to obtain the benchmark achievement for fuzzy requirements. Finally, some numerical examples are used to illustrate the proposed prioritized aggregation technique as well as to compare with previous researches...|$|R
5000|$|... 4: Lowest <b>priority</b> <b>level</b> (default <b>priority,</b> {{assigned}} to Point-to-Point calls) ...|$|R
5000|$|This {{defines the}} user's priority. The {{different}} <b>priority</b> <b>levels</b> are: ...|$|R
50|$|The {{basic idea}} of the {{priority}} inheritance protocol is that when a job blocks one or more high-priority jobs, it ignores its original priority assignment and executes its critical section at an elevated <b>priority</b> <b>level.</b> After executing its critical section and releasing its locks, the process returns to its original <b>priority</b> <b>level.</b>|$|R
40|$|Abstract—Bugs are prevalent. To improve {{software}} quality, developers often allow {{users to}} report bugs {{that they found}} using a bug tracking system such as Bugzilla. Users would specify among other things, {{a description of the}} bug, the component that is affected by the bug, and the severity of the bug. Based on this information, bug triagers would then assign a <b>priority</b> <b>level</b> to the reported bug. As resources are limited, bug reports would be investigated based on their <b>priority</b> <b>levels.</b> This <b>priority</b> assignment process however is a manual one. Could we do better? In this paper, we propose an automated approach based on machine learning that would recommend a <b>priority</b> <b>level</b> based on information available in bug reports. Our approach considers multiple factors, temporal, textual, author, related-report, severity, and product, that potentially affect the <b>priority</b> <b>level</b> of a bug report. Thes...|$|R
50|$|The {{switched}} network between elements resembled, in many ways, a modern computer network. On the network were sets of nodes, {{each of which}} had three links. When a packet arrived at a node, it consulted a routing table and attempted to forward the packet closer to its destination. If a node became congested, any incoming packets were passed on without routing. Packets treated {{in such a manner}} had their <b>priority</b> <b>level</b> increased; when several packets vied for a single node, a packet with a higher <b>priority</b> <b>level</b> would be routed before ones with lower <b>priority</b> <b>levels.</b>|$|R
5000|$|A and B: Highest <b>priority</b> <b>levels</b> (not used by GSM-R networks) ...|$|R
50|$|An input/output device {{determined}} the memory addresses {{to which it}} would respond, and specified its own interrupt vector and <b>interrupt</b> <b>priority.</b> This flexible framework provided by the processor architecture made it unusually easy to invent new bus devices, including devices to control hardware {{that had not been}} contemplated when the processor was originally designed. DEC openly published the basic Unibus specifications, even offering prototyping bus interface circuit boards, and encouraging customers to develop their own Unibus-compatible hardware.|$|R
