35|835|Public
25|$|The {{microkernel}} {{concept was}} introduced {{in an effort to}} reverse the trend towards larger kernels and return to a system in which most tasks were completed by smaller utilities. In an era when a standard computer consisted of a hard disk for storage and a data terminal for input and output (I/O), the Unix <b>file</b> <b>model</b> worked quite well, as most I/O was linear. However, modern systems include networking and other new devices. As graphical user interfaces developed, the <b>file</b> <b>model</b> proved inadequate to the task of handling asynchronous events such as those generated by a mouse. In the 1980s, non-blocking I/O and the set of inter-process communication mechanisms were augmented with Unix domain sockets, shared memory, message queues, and semaphores. In microkernel implementations, functions such as network protocols could be moved out of the kernel, while conventional (monolithic) Unix implementations have network protocol stacks as part of the kernel.|$|E
2500|$|Unix had a {{drastically}} simplified <b>file</b> <b>model</b> {{compared to}} many contemporary operating systems: treating {{all kinds of}} files as simple byte arrays. The file system hierarchy contained machine services and devices (such as printers, terminals, or disk drives), providing a uniform interface, but {{at the expense of}} occasionally requiring additional mechanisms such as ioctl and mode flags to access features of the hardware that did not fit the simple [...] "stream of bytes" [...] model. The Plan 9 operating system pushed this model even further and eliminated the need for additional mechanisms.|$|E
2500|$|Most {{practical}} {{criticism of}} the model {{has emerged as a}} {{criticism of the}} practice of the model by the SEIU and other organizing unions, especially in America. [...] Criticisms from the left generally contrast (explicitly or not) the organizing model to a rank and <b>file</b> <b>model,</b> in which the confrontational style of organizing, and broad-based member involvement in campaigning is supplemented by broad-based member power. According to Bob Carter and Rae Cooper, the organizing model is not inherently [...] "democratic." [...] In the organizing model, the workers are not as active as they could be, and staff are still responsible for many aspects of union organizing. Carter and Cooper believe that the organizing model is rather limited in terms of its scale, and it cannot start a [...] "...wider working class movement." ...|$|E
5000|$|... #Subtitle level 3: <b>Files,</b> <b>Models</b> and Props Pre Installed in the Program ...|$|R
50|$|Three general <b>file</b> <b>models</b> {{are defined}} by DDM architecture: record-oriented files, stream-oriented files and {{hierarchical}} directories.|$|R
5000|$|Berkeley SPICE netlist, HSPICE netlist, W-element RLGC matrix <b>files,</b> S-parameter <b>model</b> <b>files,</b> Verilog-A and AMS, C/C++ ...|$|R
50|$|Stream-oriented files {{consist of}} a single {{sequence}} of bytes on which programs can map application data however they want. Stream files are the primary <b>file</b> <b>model</b> supported by Unix and Unix-like operating systems and by Windows. DDM defines a single stream <b>file</b> <b>model</b> and a single stream access method.|$|E
50|$|The {{microkernel}} {{concept was}} introduced {{in an effort to}} reverse the trend towards larger kernels and return to a system in which most tasks were completed by smaller utilities. In an era when a standard computer consisted of a hard disk for storage and a data terminal for input and output (I/O), the Unix <b>file</b> <b>model</b> worked quite well, as most I/O was linear. However, modern systems include networking and other new devices. As graphical user interfaces developed, the <b>file</b> <b>model</b> proved inadequate to the task of handling asynchronous events such as those generated by a mouse. In the 1980s, non-blocking I/O and the set of inter-process communication mechanisms were augmented with Unix domain sockets, shared memory, message queues, and semaphores. In microkernel implementations, functions such as network protocols could be moved out of the kernel, while conventional (monolithic) Unix implementations have network protocol stacks as part of the kernel.|$|E
5000|$|Unix had a {{drastically}} simplified <b>file</b> <b>model</b> {{compared to}} many contemporary operating systems: treating {{all kinds of}} files as simple byte arrays. The file system hierarchy contained machine services and devices (such as printers, terminals, or disk drives), providing a uniform interface, but {{at the expense of}} occasionally requiring additional mechanisms such as ioctl and mode flags to access features of the hardware that did not fit the simple [...] "stream of bytes" [...] model. The Plan 9 operating system pushed this model even further and eliminated the need for additional mechanisms.|$|E
50|$|An OCF Abstract Container {{defines a}} <b>file</b> system <b>model</b> for the {{contents}} of the container. The <b>file</b> system <b>model</b> uses a single common root directory for all contents in the container. All (non-remote) resources for publications are in the directory tree headed by the container's root directory, though EPUB mandates no specific file system structure for this. The <b>file</b> system <b>model</b> includes a mandatory directory named META-INF that is a direct child of the container's root directory. META-INF stores container.xml.|$|R
40|$|International audienceThis paper {{presents}} a classification of file placement and replication methods on grids. The study {{is motivated by}} file transfer issues encountered in the Virtual Imaging Platform deployed on the European Grid Infrastructure. Approaches proposed in the last 6 years are classified using taxonomies of replication process, replication optimization, <b>file</b> <b>models,</b> resource models and replication validation. Most existing approaches implement file replication as a middleware service, using dynamic strategies. Production approaches are slightly different than works evaluated in simulation or in controlled conditions which (i) mostly assumes simplistic <b>file</b> <b>models</b> (undistinguished read-only <b>files),</b> (ii) rely on elaborated access patterns, (iii) assume clairvoyance of the infrastructure parameters and (iv) study file availability less than other metrics but insist on cost...|$|R
5000|$|While Digistar ran off large VAX computers, Digistar II {{runs off}} {{the much more}} compact and {{advanced}} Sun Microsystems SPARCstation 5. D2 uses two primary file types, [...]vl and [...]sf[...]vl <b>files</b> are binary <b>models</b> <b>files,</b> while [...]sf files are binary show data <b>files.</b> <b>Model</b> <b>files</b> contain vector, line and dot data, as well as parametric changes to data within the file, show files contain commands to the system, regarding the manipulation of the observer and models declard within the file. Several show files are often strung together underneath each other in show production. Both [...]vl and [...]sf have ASCII equivalents for editing--.vla and [...]sfa respectively. These are converted to their binary equivalents by a utility built into the Digistar system, which also checks for errors within the file. Digistar II show files are programmed in a language related to Pascal.|$|R
50|$|The DDM stream <b>file</b> <b>model</b> {{consists}} of file attributes, {{such as its}} creation date {{and the size of}} the stream and a continuous stream of bytes. The stream can be accessed by means of the Stream Access Method. Application programs write data onto portions of the stream, even if that data {{consists of}} records. They keep track of the location of data items in the stream in any way they want. For example, the data stream of document files is defined by a text processing program such as Microsoft Word and that of a spreadsheet file by a program such as Microsoft Excel.|$|E
5000|$|Most {{practical}} {{criticism of}} the model {{has emerged as a}} {{criticism of the}} practice of the model by the SEIU and other organizing unions, especially in America. Criticisms from the left generally contrast (explicitly or not) the organizing model to a rank and <b>file</b> <b>model,</b> in which the confrontational style of organizing, and broad-based member involvement in campaigning is supplemented by broad-based member power. According to Bob Carter and Rae Cooper, the organizing model is not inherently [...] "democratic." [...] In the organizing model, the workers are not as active as they could be, and staff are still responsible for many aspects of union organizing. Carter and Cooper believe that the organizing model is rather limited in terms of its scale, and it cannot start a [...] "...wider working class movement." ...|$|E
40|$|Abstract. In this paper, we {{introduce}} {{and analyze}} a new, dynamic generative user model {{to explain the}} behavior of file size distributions. Our Recursive Forest <b>File</b> <b>model</b> combines multiplicative models that generate lognormal distributions with recent work on random graph models for the web. Unlike similar previous work, our Recursive Forest <b>File</b> <b>model</b> allows new files to be created and old files to be deleted over time, and our analysis covers problematic issues such as correlation among file sizes. Moreover, our model allows natural variations where files that are copied or modified {{are more likely to}} be copied or modified subsequently. Previous empirical work suggests that file sizes tend to have a lognormal body but a Pareto tail. The Recursive Forest <b>File</b> <b>model</b> explains this behavior, yielding a double Pareto distribution, which has a Pareto tail but close to a lognormal body. We believe the Recursive Forest model may be useful for describing other power law phenomena in computer systems as well as other fields. 1...|$|E
5000|$|The DDM record-oriented <b>file</b> <b>models</b> {{consist of}} <b>file</b> attributes, {{such as its}} {{creation}} date, the date of last update, {{the size of its}} records, and slots in which records can be stored. The records can be of either fixed or varying length, depending on the media used to store the file's records. DDM defines four kinds of record-oriented files: ...|$|R
50|$|Digistar II is able {{to convert}} Digistar show and <b>model</b> <b>files.</b> Similarly, Digistar 3 is can convert Digistar II <b>model</b> <b>files,</b> though it cannot, at this time, convert show files.|$|R
40|$|The Energy Information Administration (EIA) makes {{available}} for public use {{a series of}} machine-readable data <b>files</b> and computer <b>models.</b> The data <b>files</b> and <b>models</b> are {{made available to the}} public on magnetic tapes. In addition, selected data files/models are available on diskette for IBM-compatible personal computers...|$|R
40|$|The UPIO (User-controllable Parallel I/O) we {{proposed}} in [6] extends the abstraction of a linear <b>file</b> <b>model</b> into an n-dimensional <b>file</b> <b>model,</b> {{making it possible}} to control the layout of data blocks across disks and aggregating disk bandwidth through UPIO's interfaces. This enables users to produce high-performance external computation codes by planning I/O, computations, communication, and data reuse effectively in the codes. In this paper we show how well UPIO produces high-performance external computation codes by designing an I/O and communication-efficient external Laplace equation solver algorithm and exploring the effects of UPIO with the codes. 1. Introduction We believe that users are better able than systems to reduce I/O time through explicit I/O management for the parallel computing environments. Thus, to achieve high performance, file systems or I/O mechanisms for parallel machines should be user-controllable in the sense that users should be able by considering the acces [...] ...|$|E
40|$|We {{introduce}} a stochastic equation for the microscopic motion of a tagged particle {{in the single}} <b>file</b> <b>model.</b> This equation provides a compact representation {{of several of the}} system's properties such as Fluctuation-Dissipation and Linear Response relations, achieved by means of a diffusion noise approach. Most important, the proposed Langevin Equation reproduces quantitatively the three temporal regimes and the corresponding time scales: ballistic, diffusive and subdiffusive. Comment: 9 pages, 5 figures, 1 table, to appear in Physical Review...|$|E
40|$|Abstract: This paper {{entitled}} “DESIGNING PARALLEL BUSUSING UNIVERSAL ASYNCHRONOUS RECEIVER TRANSMITTER ” {{is designed}} {{to the core of}} a UART interface module, which includes both receive and transmit modules, and the command parser. This paper will be a viable solution to design parallel buses with the help of UART. In the test bench, there is a RFM(register <b>file</b> <b>model)</b> to which we write/read back data from just to check our design. The txt file issues serial inputs to the core and the core outputs parallel data and address in the form of bus. This bus is connected to our RFM (register <b>file</b> <b>model)</b> instantiated in the test bench along with the design. This makes easy to retrieve parallel data from serial input. The base of the paper is to use microcontroller along with other components to interface with the physical world. In contrast, most serial communication must first be converted back into parallel form by a universal asynchronous receiver/transmitter (UART) before they may be directly connected to a data bus. Both Transmissions (Parallel and Serial) are used to connect peripheral devices and enable us to communicate with these devices. The UART core described here is designed using VHDL and implemented on Xilinx Vertex FPGA. Keywords- VHDL, RFM, UART, FPGA. I...|$|E
50|$|In 1986, System/36 {{announced}} {{support for}} Distributed Data Management Architecture (DDM). This enabled System/36 programs to create, manage, and access record-oriented files on remote System/36, System/38, and IBM mainframe systems running CICS. It also enabled programs on remote System/36 and System/38 computers to create, access, and manage files on a System/36. The initial record-oriented <b>file</b> <b>models</b> defined by DDM {{were based on}} the System/36 file system.|$|R
40|$|We {{present an}} {{implementation}} of the manifest left-right symmetric model in FeynRules. The {{different aspects of the}} model are briefly described alongside the corresponding elements of the <b>model</b> <b>file.</b> The <b>model</b> <b>file</b> is validated and can be easily translated to matrix element generators such as MadGraph 5 _aMC@NLO, CalcHEP, Sherpa, etc. The {{implementation of the}} left-right symmetric model is a useful step for studying new physics signals with the data generated at the LHC. Comment: 59 pages, 3 figures, 9 Table...|$|R
5000|$|... a parser: this {{component}} converts QVT code <b>files</b> into <b>model</b> {{representations of}} the QVT programs (abstract syntax).|$|R
40|$|This paper {{entitled}} “DESIGNING PARALLEL BUSUSING UNIVERSAL ASYNCHRONOUS RECEIVER TRANSMITTER” {{is designed}} {{to the core of}} a UART interface module, which includes both receive and transmit modules, and the command parser. This paper will be a viable solution to design parallel buses with the help of UART. In the test bench, there is a RFM(register <b>file</b> <b>model)</b> to which we write/read back data from just to check our design. The txt file issues serial inputs to the core and the core outputs parallel data and address in the form of bus. This bus is connected to our RFM (register <b>file</b> <b>model)</b> instantiated in the test bench along with the design. This makes easy to retrieve parallel data from serial input. The base of the paper is to use microcontroller along with other components to interface with the physical world. In contrast, most serial communication must first be converted back into parallel form by a universal asynchronous receiver/transmitter (UART) before they may be directly connected to a data bus. Both Transmissions (Parallel and Serial) are used to connect peripheral devices and enable us to communicate with these devices. The UART core described here is designed using VHDL and implemented on Xilinx Vertex FPGA...|$|E
40|$|The {{anomalous}} {{energy distribution}} of a monomer ion or electron beam {{is described by}} a one parameter, single <b>file</b> <b>model</b> governed by shot noise emission and pairwise Coulomb interactions. The dependence of {{the width of the}} distribution and the shift in the mean energy on current, mass, and voltage is calculated. A unification of a number of other theories of energy broadening is made by variation of a free parameter that represents field-geometrical effects. A feature unique to the present model is that can be inversely related to charge...|$|E
40|$|Multiple {{instruction}} issue processors place high {{demands on}} register file bandwidth. One solution to reduce this bottleneck {{is the use}} of multiple register files. Register allocation for these architectures then becomes exceedingly important as spill code increases memory bandwidth demands and decreases performance, especially within loops. Previously, we have addressed the issue of finding an optimal allocation of variables to registers within loops for a consolidated register <b>file</b> <b>model.</b> In this paper, we extend that work to architectures where the available registers have been partitioned into multiple banks. Experimental results demonstrate that, while the optimal algorithm may be computationally prohibitive, heuristic versions obtain acceptable performances. ...|$|E
5000|$|NetWare, {{since it}} was based on a <b>file</b> service <b>model,</b> interacted with the client at the file API level: ...|$|R
5000|$|The {{abstract}} <b>file</b> system <b>model</b> of GIO {{consists of}} a number of interfaces and base classes for I/O and files.|$|R
40|$|Starting {{from the}} present {{situation}} in patent information management, the use of CD-ROM in patent information will be described. Information on feasibility, organization of data and on costs are given. Producing a CD-ROM offline database containing full-text and images of patent documents requires an appropriate subdivision of data <b>files.</b> <b>Model</b> calculations show that CD-ROM databases may be cheaper than common paper collection. A proposal is given for international cooperation using CD-ROM in the patent field. ...|$|R
40|$|In {{discussions of}} the ontogenetic origins of {{numerical}} abilities to date, {{most of the research}} suggests that infants establish representations of numbers of objects presented visually, auditorily, and haptically. The question is not whether babies are sensitive to differences in number. The focus lies on what models can better account for the wealth of data. Some have suggested that the infant number capacity is in the format of object file representations, and is characterized by a small set size Ð ones, twos, threes, perhaps fours, predicted by limitations of short-term storage of an object <b>file</b> <b>model</b> (Uller et al., 1999). Others have proposed that the infant counting abilities are in the format of analog representations, roughly in a format comparable to that of rats and pigeon...|$|E
40|$|Virtually all of {{the data}} {{distribution}} strategies being contemplated for the EOSDIS era revolve around the use of files. Most, if not all, mass storage technologies are based around the <b>file</b> <b>model.</b> However, files may be the wrong primary abstraction for supporting scientific users in the 1990 s and beyond. Other abstractions more closely matching the respective scientific discipline of the end user may be more appropriate. JPL has built a unique multimission data distribution system based on a strategy of telemetry stream emulation to match the responsibilities of spacecraft team and ground data system operators supporting our nations suite of planetary probes. The current system, operational since 1989 and {{the launch of the}} Magellan spacecraft, is supporting over 200 users at 15 remote sites. This stream-oriented data distribution model can provide important lessons learned to builders of future data systems...|$|E
40|$|MD {{simulation}} files 72 hydrated DPPC + 2189 water TIP 3 P NPgT P= 1 atm, gamma= 0, T= 323 K (liquid crystalline phase) 20 ns equilibration (not here) 50 ns trajectory (dcd <b>file)</b> <b>Model</b> : Lee S, Tran A, Allsopp M, Lim JB, Hénin J, Klauda JB. CHARMM 36 United Atom Chain Model for Lipids and Surfactants. J Phys Chem B. 2014; 118 (2) : 547 - 556. doi: 10. 1021 /jp 410344 g. [...] * bilayer- 72 DPPC-c 36 -AU. psf : NAMD 2. 10 structure file Obtained with psfgen utility, using 1) topology from Lee et al. 2014 2) positions from J. Klauda. [URL] [...] * dppc_c 36 _AU. equil. 2. dcd : trajectory file of 2635 frames every 20 ps. [...] - * measure_SCD_heads. tcl : file used {{to measure}} order parameters for the head hydrogens using vmd- 1. 9 [...] - *namd_input. tar files usefull to launch the simulations using NAMD(2. 10) ...|$|E
50|$|Using a PDB <b>file,</b> this <b>model</b> can be {{built over}} the protein structure. From this model free energy can be calculated.|$|R
40|$|DSP {{architectures}} often feature multiple register files with sparse {{connections to}} a large set of ALUs. For such DSPs, traditional register allocation algorithms suffer {{from a lot of}} problems, including a lack of retargetability and phase-ordering problems. This paper studies alternative register allocation techniques based on placement and routing. Different register <b>file</b> <b>models</b> are studied and evaluated on a state-of-the art coarse-grained reconfigurable array DSP, together with a new post-pass register allocator for rotating register files...|$|R
30|$|This module’s {{functionality}} is {{to manage}} distributed services and components. OGC standard-compliant {{services such as}} WPS, WFS, and SOS, and local geoprocessing algorithms in GRASS {{can be viewed as}} fundamental blocks to construct workflows. In order to establish connections between local and distributed resources, messages are exchanged using the eXtensible Markup Language (XML). Variables to invoke GRASS scripts are extracted and described in XML <b>files.</b> <b>Models,</b> data and binding information are saved in different XML files in order to ensure flexibility.|$|R
