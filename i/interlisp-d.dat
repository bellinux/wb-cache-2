17|0|Public
2500|$|InterLisp – {{developed}} at BBN Technologies for PDP-10 systems running the Tenex operating system, later adopted as a [...] "West coast" [...] Lisp for the Xerox Lisp machines as <b>InterLisp-D.</b> A small version called [...] "InterLISP 65" [...] was published for the 6502-based Atari 8-bit family computer line. For quite some time, Maclisp and InterLisp were strong competitors.|$|E
50|$|Xerox {{developed}} several workstations with {{an operating}} system written in <b>Interlisp-D.</b> <b>Interlisp-D</b> provided object-oriented extensions like LOOPS and the Common Lisp Object System.|$|E
5000|$|Peter Deutsch {{defined a}} byte-coded {{instruction}} set for Interlisp, and implemented it as a microcoded emulator for the Xerox Alto. This was subsequently ported {{to a series}} of workstation designs produced by Xerox for both their own use and for commercial exploitation, including the Xerox 1100 (Dolphin), 1108 (Dandelion), 1109 (the floating-point enabled [...] "Dandetiger"), 1186 (Daybreak), and 1132 (Dorado). Interlisp implementations for these were known collectively as <b>Interlisp-D.</b> Commercially, these were sold as Lisp Machines and branded as Xerox AI Workstations; the same designs, but with different software, were also sold under different names (e.g. when running the Viewpoint system, the 1186 Daybreak was sold as the Xerox 6085.) Releases of <b>Interlisp-D</b> were named according to a musical theme, which ended with Koto, Lyric, and Medley. Later versions included an implementation of pre-ANSI Common Lisp, known as Xerox Common Lisp. LOOPS, the object system for <b>Interlisp-D,</b> became, along with Symbolics' FLAVORS system, the basis for the Common Lisp Object System.|$|E
50|$|The Bitsavers' PDF Document Archive has PDF {{versions}} of the extensive documentation for the Symbolics Lisp Machines, the TI Explorer and MicroExplorer Lisp Machines and the Xerox <b>Interlisp-D</b> Lisp Machines.|$|E
50|$|Each {{programming}} language typically has a well-defined syntax {{given by a}} context-free grammar, and accordingly the meaningful structural elements in source code written in the language correspond to the grammatical phrases in the text. Early syntax-directed source code editors included <b>Interlisp-D</b> (for Lisp’s limited syntax) and Emily (for PL/I’s rich syntax).|$|E
5000|$|InterLisp - {{developed}} at BBN Technologies for PDP-10 systems running the Tenex operating system, later adopted as a [...] "West coast" [...] Lisp for the Xerox Lisp machines as <b>InterLisp-D.</b> A small version called [...] "InterLISP 65" [...] was published for the 6502-based Atari 8-bit family computer line. For quite some time, Maclisp and InterLisp were strong competitors.|$|E
50|$|CommonLoops was the {{successor}} of LOOPS (from Xerox <b>Interlisp-D).</b> CommonLoops was implemented for Common Lisp. A portable implementation called Portable CommonLoops (PCL) {{was the first}} implementation of CLOS. PCL is widely ported and still provides the base for the CLOS implementation of several Common Lisp implementations. PCL is implemented mostly in portable Common Lisp {{with only a few}} system dependent parts.|$|E
50|$|The Lisp {{machines}} {{developed at}} MIT {{in the early}} 1970s pioneered some {{of the principles of}} the workstation computer, as they were high-performance, networked, single-user systems intended for heavily interactive use. Lisp Machines were commercialized beginning 1980 by companies like Symbolics, Lisp Machines, Texas Instruments (the TI Explorer) and Xerox (the <b>Interlisp-D</b> workstations). The first computer designed for single-users, with high-resolution graphics facilities (and so a workstation in the modern sense of the term) was the Xerox Alto developed at Xerox PARC in 1973. Other early workstations include the Terak 8510/a (1977), Three Rivers PERQ (1979) and the later Xerox Star (1981).|$|E
5000|$|CommonLoops (the Common Lisp Object-Oriented Programming System; {{an acronym}} {{reminiscent}} of the earlier Lisp OO system [...] "Loops" [...] for the <b>Interlisp-D</b> system) is an early programming language which extended Common Lisp to include Object-oriented programming functionality and is a dynamic object system which differs from the OOP facilities found in static languages such as C++ or Java. Like New Flavors, CommonLoops supported multiple inheritance, generic functions and method combination. CommonLoops also supported multi-methods and made use of metaobjects. CommonLoops and New Flavors were the primary ancestors of CLOS. CommonLoops {{was supported by a}} portable implementation known as Portable CommonLoops (PCL) which ran on all Common Lisp implementations of the day.|$|E
5000|$|The Dipmeter Advisor was {{an early}} expert system {{developed}} in the 1980s by Schlumberger {{with the help of}} artificial-intelligence workers at MIT to aid in the analysis of data gathered during oil exploration. The Advisor was generally not merely an inference engine and a knowledge base of ~90 rules, but generally was a full-fledged workstation, running on one of Xerox's 1100 Dolphin Lisp machines (or in general on Xerox's [...] "1100 Series Scientific Information Processors" [...] line) and written in <b>INTERLISP-D,</b> with a pattern recognition layer which in turn fed a GUI menu-driven interface. It was developed by a number of people, including Reid G. Smith, James D. Baker, and Robert L. Young.|$|E
50|$|Lisp {{machines}} are general-purpose computers designed to efficiently run Lisp as their main software and programming language, usually via hardware support. They are {{an example of}} a high-level language computer architecture, and in a sense, they were the first commercial single-user workstations. Despite being modest in number (perhaps 7,000 units total as of 1988), Lisp machines commercially pioneered many now-commonplace technologies - including effective garbage collection, laser printing, windowing systems, computer mice, high-resolution bit-mapped raster graphics, computer graphic rendering, and networking innovations like Chaosnet. Several firms built and sold Lisp machines in the 1980s: Symbolics (3600, 3640, XL1200, MacIvory, and other models), Lisp Machines Incorporated (LMI Lambda), Texas Instruments (Explorer and MicroExplorer), and Xerox (<b>Interlisp-D</b> workstations). The operating systems were written in Lisp Machine Lisp, Interlisp (Xerox), and later partly in Common Lisp.|$|E
50|$|Bolt, Beranek and Newman (BBN) {{developed}} its own Lisp machine, named Jericho, {{which ran}} {{a version of}} Interlisp. It was never marketed. Frustrated, the whole AI group resigned, and were hired mostly by Xerox. So, Xerox Palo Alto Research Center had, simultaneously with Greenblatt's own development at MIT, developed their own Lisp machines which were designed to run InterLisp (and later Common Lisp). The same hardware was used with different software also as Smalltalk machines and as the Xerox Star office system. These included the Xerox 1100, Dolphin (1979); the Xerox 1132, Dorado; the Xerox 1108, Dandelion (1981); the Xerox 1109, Dandetiger; and the Xerox 1186/6085, Daybreak. The operating system of the Xerox Lisp machines has also been ported to a virtual machine and is available for several platforms as a product named Medley. The Xerox machine was well known for its advanced development environment (<b>InterLisp-D),</b> the ROOMS window manager, for its early graphical user interface and for novel applications like NoteCards (one of the first hypertext applications).|$|E
40|$|ALPHA is {{a support}} system for {{applications}} using interactive computer graphics. The ALPHA system is a subsystem of the PHIGS graphic standard (the PHIGS version presented in dpANS X 3. 144 - 198 x of October 1986), specifically tailored to the Xerox/Interlisp-D environment. The Programmer's Hierarchical Interactive Graphics System (PHIGS) is a functional specification of the interface between an application program and its graphic support system. PHIGS supports hierarchical graphics, user interaction and 3 -D modelling. ALPHA is a detached CommonLisp package in the <b>Interlisp-D</b> environment. The package exports all ALPHA functions to be used and only imports necessary <b>Interlisp-D</b> functions. ...|$|E
40|$|This paper {{describes}} a thesis project {{in which a}} visually-oriented design utility is constructed in <b>Interlisp-D</b> for the Xerox 1108 Artificial Intelligence Workstation. This utility aids {{in the design of}} Regular Expression Parsers by visually simulating the operation of a parser. A textual program, suitable for utilization in the construction of a compiler scanner or other similar processor may be produced by the utility...|$|E
40|$|Peridot is an {{experimental}} user interface management system, or UIMS, that can create graphical, highly interactive user interfaces. A previous article' presented {{an overview of}} Peridot, concentrating on how the static displays (the presentation) of the user interfaces are created. This article describes how {{the dynamics of the}} user interface can be specified by demonstration. The full description of Peridot and the research that led to its development is also available. 2 Peridot, which 'The author is now with Carnegie Mellon University. September 1987 0272 - 1716 / 87 / 0900 - 0051 $ 01. 00 (e. 1987 IEEE 51 stands for programming by example for real-time interface design obviating typing, is implemented in <b>Interlisp-D</b> on a Xerox DandeTiger (1109) workstation. The central approach of Peridot is to allow th...|$|E
40|$|In {{the early}} stages of {{mechanism}} design, type synthesis requires intuition and engineering experience to achieve the desired task. This can only be accomplished by an experienced design engineer. ^ Current type synthesis design techniques are not fully automated. This project utilizes the computer to aid type synthesis of mechanisms by employing symbolic manipulation techniques and frame base knowledge representation in <b>InterLisp-D</b> environment. The study involves the design and creation of a LISP based program the purpose of which is to perform type synthesis operations which are now performed by designers with an expert knowledge of type synthesis methods. The objective of this work is two-fold: First, schematic representations of mechanisms can be automatically developed from graphs. Second, functional evaluation of mechanisms is accomplished. Computer code was developed to draw mechanisms automatically with various revolute, prismatic, and gear joints for different mechanism inversions. A designer can visually inspect the schematics to determine if the mechanisms satisfy the designer 2 ̆ 7 s requirements before a dimensional analysis is performed. ^ Functional evaluation is based on features and joint connectivity and it includes five functional and three structural constraints. The automated process can examine large number of mechanisms in a fraction of the time traditionally required. These techniques were applied to a robot gripper design and two optimum mechanisms were found in which the functional and structural criteria are satisfied. ...|$|E
40|$|CAST. FSM denotes a CAST tool {{which has}} been {{developed}} at the Institute of Systems Science at the University of Linz during the years 1986 - 1993. The ﬁrst version of CAST. FSM was implemented in <b>INTERLISP-D</b> and LOOPS for the Siemens-Xerox workstation 5815 (”Dandelion”). CAST. FSM supports {{the application of the}} theory of ﬁnite state machines for hardware design tasks between the architecture level and the level of gate circuits. The application domain, to get prac- tical experience for CAST. FSM, was the ﬁeld of VLSI design of ASICS’s where the theory of ﬁnite state machines can be applied to improve the testability of such circuits (”design for testability”) and to optimise the required silicon area of the circuit (”ﬂoor planning”). An overview of CAST as a whole and of CAST. FSM as a CAST tool is given in [11]. In our presentation we want to report on the re-engineering of CAST. FSM and on new types of applications of CAST. FSM which are currently under investigation. In this context we will distinguish between three diﬀerent problems: 1. the implementation of CAST. FSM in ANSI Common Lisp and the design of a new user interface by Rudolf Mittelmann [5]. 2. the search for systemstheoretical concepts in modelling intelligent hierarchical systems based on the past work of Arthur Koestler [3] following the concepts presented by Franz Pichler in [10]. 3. the construction of hierarchical formal models (of multi-layer type) to study attributes which are assumed for SOHO-structures (SOHO = Self Organizing Hierarchical Order) of A. Koestler. The latter problem will deserve the main attention in our presentation. In the present paper we will build such a hierarchical model following the concepts of parallel decomposition of ﬁnite state machines (FSMs) and interpret it as a multi-layer type of model. ...|$|E

