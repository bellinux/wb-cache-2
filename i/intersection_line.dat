77|883|Public
5000|$|Wanted: A {{parametric}} representation [...] of the <b>intersection</b> <b>line.</b>|$|E
5000|$|In special cases, the {{determination}} of the <b>intersection</b> <b>line</b> by the Gaussian elimination may be faster.|$|E
50|$|Two transversally {{intersecting}} surfaces give {{an intersection}} curve. The most simple case the <b>intersection</b> <b>line</b> of two non-parallel planes.|$|E
40|$|Model merging {{is widely}} used in many domains such as {{geography}} modeling, 3 D design of highway and railway route and so on, so {{it is essential to}} design an efficient model merging algorithm. The objective {{of this paper is to}} research on models merging algorithm based on Delaunay triangulation. A method of obtaining model merged <b>intersection</b> <b>lines</b> quickly and an algorithm of searching triangles on the inside of the <b>intersection</b> <b>lines</b> fast are proposed. For the purpose of implementing Delaunay triangulation models mergence, two main steps, such as insert the merged <b>intersection</b> <b>lines</b> into the Initial Delaunay Triangulation (IDT), and cut the triangles inside of the <b>intersection</b> <b>lines</b> in IDT out, are adopted. The processes of models merging are expatiated detailedly. The proposed algorithms are implemented by using VC+ + programming language and tested by some experiment data. The experimental result validated the correctness and feasibility about the proposed algorithms...|$|R
40|$|Abstract. It is so {{valuable}} that models merging of Delaunay triangulation are used widely in many applications. This paper researches the algorithm of models merging for Delaunay triangulation. A method for obtaining merged <b>intersection</b> <b>lines</b> and a algorithm for searching fast triangles {{in the extent}} of merging <b>intersection</b> <b>lines</b> are proposed, and whole process of models merging are expatiated detailedly. The algorithm is tested in experiments, {{and the result of}} experiment shows that this algorithm is very efficient...|$|R
50|$|The {{distinguishing}} features of non-Euclidean geometry are {{the number and}} locations of possible <b>intersections</b> between two <b>lines</b> {{and the number of}} possible <b>lines</b> with no <b>intersections</b> (parallel <b>lines)</b> with a given line.|$|R
5000|$|F1 {{depends on}} the {{parallelism}} between discontinuity, αj (or the <b>intersection</b> <b>line,</b> αi, {{in the case of}} wedge failure) and slope dip direction.|$|E
5000|$|The normal vectors are [...] and the {{direction}} of the <b>intersection</b> <b>line</b> is [...] For point , one gets from the formula above [...] Henceis a parametric representation of the line of intersection.|$|E
5000|$|... #Caption: pole-through 750kV {{line from}} the Ukrainian nuclear power plant Khmelnitsky station 750/400 kV Widełka near Kolbuszowej. The {{photograph}} was taken near the <b>intersection</b> <b>line</b> with the national road DK19 in Nienadówce, at its border with Stobierna and Medynia Głogowska.|$|E
30|$|IESIL may {{encounter}} {{the failure of}} searching the <b>intersection</b> <b>lines</b> in case of large measurement errors. If IESIL finds no matching points finally, VS, which is relatively more robust under big errors shall be assumed as the alternative. Actually, IESIL, VS and i-ICP shall be programmed in parallel for cross-referencing.|$|R
5000|$|Kavi Subhash Metro Station (<b>Intersection</b> with <b>Line</b> 1) 0.00 km ...|$|R
5000|$|Scheinerman's {{conjecture}} (now a theorem) {{states that}} every planar graph {{can also be}} represented as an <b>intersection</b> graph of <b>line</b> segments in the plane. However, <b>intersection</b> graphs of <b>line</b> segments may be nonplanar as well, and recognizing <b>intersection</b> graphs of <b>line</b> segments is complete for the existential theory of the reals [...]|$|R
5000|$|A point [...] of the <b>intersection</b> <b>line</b> can be {{determined}} by intersecting the given planes [...] with the plane , which is perpendicular to [...] and [...] Inserting the parametric representation of [...] into the equations of [...] und [...] yields the parameters [...] und [...]|$|E
5000|$|F2 {{depends on}} the {{discontinuity}} dip (βj) {{in the case of}} planar failure and the plunge, βi of the <b>intersection</b> <b>line</b> in wedge failure. As regards toppling failure, this parameter takes the value 1.0. This parameter is related to the probability of discontinuity shear strength.|$|E
5000|$|In third-angle projection, the [...] "top" [...] view {{is pulled}} up to the ceiling, and the [...] "front" [...] view is pulled forward to the front wall; the <b>intersection</b> <b>line</b> between the two planes is thus closest to the small end of the cone, hence the third-angle symbol shows the cone with its large end away from the donut.|$|E
5000|$|... #Caption: Points A, B, C, D and A′, B′, C′, D′ {{are related}} by several central collineations, which are {{completely}} specified by choosing {{a line of}} fixed points L passing through the <b>intersection</b> of the <b>lines</b> ABCD and A′B′C′D′. Let O the <b>intersection</b> of the <b>lines</b> AA′, BB′, CC′, DD′. The image E′ of a point E by this collineation is the <b>intersection</b> of the <b>lines</b> A′I and OE, where I is the <b>intersection</b> of the <b>lines</b> L and AE.|$|R
5000|$|Dharamtala(Esplanade) 16.215 km ( [...] <b>Intersection</b> With <b>Line</b> 1 and Line 2 [...] ).|$|R
5000|$|... #Subtitle level 4: Lines joining {{points and}} <b>intersection</b> of <b>lines</b> (using duality) ...|$|R
5000|$|In first-angle projection, the [...] "top" [...] view {{is pushed}} {{down to the}} floor, and the [...] "front" [...] view is pushed back to the rear wall; the <b>intersection</b> <b>line</b> between these two planes is {{therefore}} closest to the large end of the cone, hence the first-angle symbol shows the cone with its large end open toward the donut.|$|E
50|$|In geometry, an {{intersection}} curve is, {{in the most}} simple case, the <b>intersection</b> <b>line</b> of two non-parallel planes in Euclidean 3-space. In general, {{an intersection}} curve consists of the common points of two transversally intersecting surfaces, meaning that at any common point the surface normals are not parallel. This restriction excludes cases where the surfaces are touching or have surface parts in common.|$|E
50|$|Any {{six points}} in general {{position}} in four-dimensional space determine 15 points where a line through {{two of the}} points intersects the hyperplane through the other four points; thus, the duads of the six points correspond one-for-one with these 15 derived points.Any three duads that together form a syntheme determine a line, the <b>intersection</b> <b>line</b> of the three hyperplanes containing {{two of the three}} duads in the syntheme, and this line contains each of the points derived from its three duads. Thus, the duads and synthemes of the abstract configuration correspond one-for-one, in an incidence-preserving way, with these 15 points and 15 lines derived from the original six points, which form a realization of the configuration. The same realization may be projected into Euclidean space or the Euclidean plane.|$|E
40|$|Interactions between {{intersecting}} faults cause local perturbations of {{the stress}} field {{in the vicinity of}} their intersections. Fault intersections are places of stress accumulation, stress relief and refraction {{of the stress}} trajectories; the slip vectors near these intersections are deviated from the maximum shear stress resolved by the far-field stress. In an intersecting fault system, superimposed, arc-shaped and zigzag slickenlines can be formed due to interaction between intersecting faults. We propose some mechanisms in which it is possible to recognize that the superimposed and curved slickenlines are produced from curvilinear translational fault motion. The geometrical models presented in this contribution are consistent with the slickenlines distribution observed in the vicinity of <b>intersection</b> <b>lines,</b> measured in the San Miguelito range, Mesa Central, México. Two tectonic phases have been inferred from our slip vector models near the <b>intersection</b> <b>lines,</b> which is consistent with observations of previously published work...|$|R
40|$|The use of {{discrete}} data to represent engineering structures as derivatives from intersecting components requires algorithms to perform Boolean operations between groups of quadrilateral and triangular surfaces. In the intersection process, an accurate and efficient method for {{the determination of}} <b>intersection</b> <b>lines</b> is a crucial step for large scale and complex surface intersections. An algorithm based on tracing the neighbours of intersecting quadrilaterals is proposed to determine the <b>intersection</b> <b>lines.</b> A background grid is employed to limit the scope of searching for candidate quadrilaterals that may intersect. This will drastically cut down the time of geometrical check for intersections between quadrilaterals, making the surface intersection and mesh generation a quasi-linear process {{with respect to the}} number of elements involved. Given the node numbers at the vertices of the candidate quadrilaterals, the neighbour relationship is then established. In the determination of intersection, each quadrilateral is divided into two triangles and four fundamental cases are identified and treated systematically to enhance robustness and reliability. Tracing the neighbours for the determination of <b>intersection</b> <b>lines</b> not only greatly increases the efficiency of the process, it also improves the reliability as branching and degenerated cases can all be dealt with in a consistent manner on the intersecting surfaces concerned. Examples on a great variety of surface and mesh characteristics are given to demonstrate the effectiveness and robustness of the algorithm. © 2003 Elsevier Science B. V. All rights reserved. link_to_subscribed_fulltex...|$|R
5000|$|... #Caption: Three {{mutually}} transversal {{planes in}} the 3-dimensional space and their <b>intersections,</b> three <b>lines</b> ...|$|R
5000|$|... {{describes}} a simple construction for the configuration. Beginning with an arbitrary point p in Euclidean space, let A, B, C, and D be four planes through p, no {{three of which}} share a common <b>intersection</b> <b>line,</b> and place the six points q, r, s, t, u, and v on the six lines formed by pairwise intersection of these planes {{in such a way}} that no four of these points are coplanar. For each of the planes A, B, C, and D, four of the seven points p, q, r, s, t, u, and v lie on that plane and three are disjointed from it; form planes A’, B’, C’, and D’ through the triples of points disjoint from A, B, C, and D respectively. Then, by the dual form of Möbius' theorem, these four new planes meet in a single point w. The eight points p, q, r, s, t, u, v, and w and the eight planes A, B, C, D, A’, B’, C’, and D’ form an instance of Möbius' configuration.|$|E
30|$|The {{steps to}} track the {{boundary}} of the facade plane are as follows: First of all, finding the external boundary of the facade; and then, finding the <b>intersection</b> <b>line</b> between two planes; finally, establishing the boundaries of each plane.|$|E
30|$|In the 3 D foot shape model, we {{save the}} point clouds of the <b>intersection</b> <b>line</b> {{of the foot}} and the plane which is {{perpendicular}} to the XOY plane and passes through the first metatarsophalangeal inner width point and the fifth metatarsophalangeal outer width point. As the point cloud on the interception surface is sparse, it is considered that the point cloud within a distance of 0.01  mm from the interception plane is the point cloud on the <b>intersection</b> <b>line,</b> and the Y-axis coordinates are determined to be the same; then, the curve in 3 D space can be transformed into 2 D space to facilitate {{the solution of the}} perimeter of the curve.|$|E
40|$|Photograph {{of several}} buildings, {{including}} "The May Co. " by an <b>intersection</b> <b>lined</b> with automobiles and pedestrians, [s. d. ]. A road crosses the foreground, {{and a line}} of people cross before an intersecting road, while several automobiles {{wait for them to}} pass. "The May Co" building appears at left, while an unknown structure lies across it, and yet more buildings beyond it...|$|R
40|$|Boy’s {{surface is}} the {{simplest}} and most symmetrical way of making a compact model of the projective plane in R 3 without any singular points. This surface has 3 -fold rotational symmetry and a single triple point from which three loops of <b>intersection</b> <b>lines</b> emerge. It turns {{out that there is}} a second, homeomorphically different way to model the projective plane with the same set of <b>intersection</b> <b>lines,</b> though it is less symmetrical. There seems to be only one such other structure beside Boy’s surface, and it thus has been named Girl’s surface. This alternative, finite, smooth model of the projective plane is more difficult to understand. In an effort to gain more insight into the geometry of this surface, various paper models have been constructed. The C 2 –symmetric, “cubist ” version of an open-ended Girl cap, with polyhedral facets primarily parallel to three rectilinear coordinate planes, seems particularly well suited to gain full understanding of this intriguing surface...|$|R
50|$|In {{the case}} of the Wu House, renderings of which have been {{collected}} by the San Francisco Museum of Modern Art, the curves are the intersections of cylindrical volumes. The spaces are three-dimensional images of geometrical operations. The vitality of the <b>intersection</b> <b>lines</b> reflects an idea of design which is far from the preconceived rules of the aesthetics that usually arise from these geometric forms.|$|R
30|$|Composed {{of point}} clouds. The <b>intersection</b> <b>line</b> {{consists}} of 3 D point clouds since the Y-axis coordinates of these points are the same; {{the perimeter of}} the 3 D point clouds can be reduced to {{the perimeter of the}} 2 D point, which can be solved by a 2 D plane algorithm.|$|E
40|$|The paper {{presents}} {{a solution to}} calculate intersection between a plane and bi-cubic Bezier curved surface. The paper first constructs bounding box based on the control grid by {{the characteristics of the}} Bezier surface, and then makes use of the plane half-space properties to convert the problem that calculates the <b>intersection</b> <b>line</b> between the plane and the parameter curved surface into calculating a series of intersection points by using the method that apply the bi-linear interpolation algorithm to the curved surface in representation of parameter area. The <b>intersection</b> <b>line</b> between the plane and the surface can be calculated by connecting the intersection points. This method can solve the surface <b>intersection</b> <b>line</b> well whether the line is discontinuous or form a closed cycle. The algorithm is relatively simple, and has good adaptability for calculating the <b>intersection</b> <b>line</b> between the plane and the curved surface. urround��dr����I�o-page-border-surround-footer:no;} @page Section 1 {size: 612. 0 pt 792. 0 pt; margin: 72. 0 pt 90. 0 pt 72. 0 pt 90. 0 pt; mso-header-margin: 36. 0 pt; mso-footer-margin: 36. 0 pt; mso-paper-source: 0;} div. Section 1 {page:Section 1;} [...] > Multiresolution technique {{is one of the most}} efficient approaches to improve the rendering performance, but its design and implementation for massive meshes are still very difficult. This paper researches and realizes constructing and rendering of multiresolution representation for massive meshes base on surface partition, which could provide vertex-grained local refinement and generate the optimal rendering quality. Our approach adopts dual hierarchy to represent the mesh. One is cluster hierarchy of progressive meshes for coarse-grained selective refinement. The other is vertex hierarchy built with progressive mesh in the cluster node to provide fine-grained local refinement. In order to promote the speed of local refinement, we introduce some data structures and dependency rules to realize parallel view-dependent refinement for vertex hierarchy by using GPU, which greatly reduces the load of CPU and enables it to prefetch data to hide I/O latency effectively. In addition, we propose a new mesh layout algorithm which reorders triangles contained by cluster node to reduce the average cache miss ratio and further improve the rendering speed. </p...|$|E
40|$|This paper {{describes}} an integrated system {{for building a}} multiplanar model of the scene as the camera is localized on the fly. The core of this system is a robust and accurate procedure for detecting the <b>intersection</b> <b>line</b> between two planes. User cues are used to assist the system in the mapping tasks. Synthetic results and a long video demonstrate {{the relevance of the}} method. ...|$|E
5000|$|The image [...] of [...] is the <b>intersection</b> of <b>line</b> [...] with plane it {{is given}} by the {{equation}} ...|$|R
5000|$|Each {{line has}} its own symbol and the <b>intersections</b> of <b>lines</b> (vertices) is marked by two symbols present at points: ...|$|R
40|$|This paper {{presents}} {{a method that}} constructs boundaries of buildings from airborne LiDAR data. The boundaries are computed by detecting intersections between planes, followed by an algorithm to select the relevant segments from the <b>intersection</b> <b>lines.</b> To ensure every surface {{is surrounded by a}} closed boundary, an algorithm that uses a constrained Delaunay triangulation is used to compute a boundary around every surface. Tests on different LiDAR point sets show promising results...|$|R
