10|10000|Public
50|$|A {{series of}} {{peripheral}} chip were introduced by 1978. The MC6840 programmable counter had three 16-bit binary counters {{that could be}} used for frequency measurement, event counting, or interval measurement. The MC6844 <b>Direct</b> <b>Memory</b> <b>Access</b> <b>Controller</b> could transfer data from an I/O controller to RAM without loading down the MC6800 microprocessor. The MC6845 CRT Controller provided the control logic for a character based computer terminal. The 6845 had support for a light pen, an alternative to a computer mouse. This was a very popular chip and was even used in the original IBM PC Monochrome Display Adapter with the Intel 8088 16-bit microprocessor in 1981, and in the follow-up IBM Color Graphics Adapter for the original PC and successors; the IBM Enhanced Graphics Adapter card contained custom IBM chips that emulated the Motorola 6845, with minor differences.|$|E
5000|$|Introduced in 2009, The RX610 is {{a general}} purpose MCU with 100 MHz clock frequency, {{a large amount of}} {{integrated}} flash memory and peripherals enabling a system to be configured without external memory and peripheral devices reducing the total system cost. The core architecture supports DSP functions with 32-bit multiplier, Divider and Multiply-accumulator: Integrated memory up to 2 Mb of flash memory, 128 Kb of RAM and 32 kB of data flash memory. Integrated analogue functions including 16 channels of 10-bit ADC, 2 channels of 10 bit DAC. Also included are on-chip peripherals of <b>Direct</b> <b>memory</b> <b>access</b> <b>controller</b> (DMAC), Data transfer controller (DTC), 16-bit timer pulse unit (TPU) × 12 channels, 16-bit compare match timer × 4 channels, 8-bit timer (TMR) × 4 channels. For communications there are 7 channels of serial communication interface (SCI) and 2 channels of I2C bus interface. Package options for the RX610 are 144-pin LFQFP and 176-pin LFBGA.|$|E
50|$|Zilog was {{the first}} company entirely {{dedicated}} to microprocessors started by Federico Faggin and Ralph Ungermann in November 1974. F. Faggin was Zilog's President and CEO {{until the end of}} 1980 and he conceived and architected the Z80-CPU and its family of programmable peripheral components. He also co-designed the CPU whose project leader was M.Shima. The Z80-CPU was a major improvement over the 8080, yet it retained software compatibility with it. Much faster and with {{more than twice as many}} registers and instructions of the 8080, it was part of a family of components that included several intelligent peripherals (the Z80-PIO, a programmable parallel input-output controller; the Z80-CTC, a programmable counter-timer; the Z80-SIO, programmable serial communications interface controller, and the Z80-DMA, programmable <b>direct</b> <b>memory</b> <b>access</b> <b>controller).</b> This chip family allowed the design of powerful and low-cost microcomputers with performance comparable to minicomputers. The Z80-CPU had a substantially better bus structure and interrupt structure than the 8080 and could interface directly with dynamic RAM, since it included an internal memory-refresh controller. The Z80 was used in many of the early personal computers as well as in game consoles such as the ColecoVision and Game Boy. The Z80 is still in volume production in 2017 as a core microprocessor in various systems on a chip.|$|E
50|$|The Intel 8257 is a <b>direct</b> <b>memory</b> <b>access</b> (DMA) <b>controller,</b> {{a part of}} the MCS 85 {{microprocessor}} family. The chip {{is supplied}} in 40-pin DIP package.|$|R
40|$|The TMS 320 C 5000 ™ {{family of}} digital signal {{processors}} (DSPs) features Host Port Interface <b>Controllers</b> (HPI) and <b>Direct</b> <b>Memory</b> <b>Access</b> <b>Controllers</b> (DMAC) for efficient data movement without any CPU involvement. The HPI enables the DSP to interface to host processors (typically microcontrollers) bidirectionally with minimal or no external interface logic. This application report presents a hardware interface and a software protocol to communicate between the TMS 320 VC 5402 DSP and the MSP 430 x 33 x mixed signal microcontroller. A set of simple arithmetic functions are implemented on the DSP, {{under the supervision}} of th...|$|R
50|$|Intel 8237 is a <b>direct</b> <b>memory</b> <b>access</b> (DMA) <b>controller,</b> {{a part of}} the MCS 85 {{microprocessor}} family. It enables {{data transfer}} between memory and the I/O with reduced load on the system's main processor by providing the memory with control signals and memory address information during the DMA transfer.|$|R
40|$|This paper {{presents}} an effective memory access method for a high-speed data transfer on mobile systems using a <b>direct</b> <b>memory</b> <b>access</b> <b>controller</b> that considers {{the characteristics of}} a multi-port memory controller. The <b>direct</b> <b>memory</b> <b>access</b> <b>controller</b> has an integrated channel management function to control multiple direct memory access channels. The channels are physically separated and operate independently from each other. Experimental results show that the proposed direct memory access method improves the transfer performance by up to 72 % and 69 % on read and write transfer cycles, respectively. The total number of transfer cycles of the proposed method is 63 % less than in a commercial method under 4 -channel access...|$|E
40|$|Abstract This {{document}} {{describes a}} successful {{application of a}} semi-formal test generation technique to the verification of <b>Direct</b> <b>Memory</b> <b>Access</b> <b>Controller</b> (DMAC) of ST 50, a new general purpose RISC microprocessor developed by STMicroelectronics and Hitachi. Like other memory-related devices, the DMA controller challenges formal techniques because of the state explosion problem. To cope with the challenge, abstraction models are created in order to verify different functional aspects of the design. We also propose a practical solution to overcome a temporal abstraction problem that arises when tests issued from an abstract model have to be applied during real design simulation. I...|$|E
40|$|This article {{studies the}} {{scheduling}} of real-time streaming applications on multiprocessor systems-on-chips with predictable memory hierarchy. An iteration-based task-FIFO co-scheduling framework is proposed for this problem. We obtain FIFO size distributions using Pareto space searching, based {{on which the}} task-toprocessor mapping is obtained with the potential FIFO allocation being taken into account; then, the FIFOto-memory allocation is optimized to minimize the total memory access cost; finally, a self-timed throughput analysis method that considers memory and <b>direct</b> <b>memory</b> <b>access</b> <b>controller</b> contention is utilized to analyze the throughput. Our methods are validated {{by a set of}} synthesized and practical applications on different platforms...|$|E
40|$|We {{describe}} an automated environment to assist a system-on-achip designer to tune a microprocessor core {{to a particular}} application program that will run on the microprocessor, and vice-versa, {{with the goal of}} reducing embedded system power consumption. We limit such tuning to modifications that do not change the microprocessor instruction set, thus avoiding the large costs that would come with such a change. Our tuning environment for the 8051 microcontroller is freely-available on the web. Keywords: system-on-a-chip, embedded systems, parameterized architectures, cores, low-power, tuning. 1. Introduction Today's silicon chips can implement a system-on-chip (SOC), where a single chip may contain components like a microprocessor, memory, and perhaps tens of peripherals like DMA (<b>direct</b> <b>memory</b> <b>access)</b> <b>controllers,</b> UART's (universal asynchronous receiver/transmitters), encoders/decoders, analogdigital converters, and protocol interfaces. A designer may acquire these components in the [...] ...|$|R
50|$|The {{original}} system chips {{were one}} Intel 8259 programmable interrupt controller (PIC) (at I/O address 0x20), one Intel 8237 <b>direct</b> <b>memory</b> <b>access</b> (DMA) <b>controller</b> (at I/O address 0x00), and an Intel 8253 programmable interval timer (PIT) (at I/O address 0x40). The PIT provides the 18.2 Hz clock ticks, dynamic memory refresh timing, {{and can be}} used for speaker output; one DMA channel is used to perform the memory refresh.|$|R
40|$|A number ofkey {{features}} {{make the}} IBM PC AT personal computer a suitable vehicle for electrophysiological signal analysis software which previously required {{the use of}} minicomputers such as the PDPI 1. In particular {{the availability of a}} <b>direct</b> <b>memory</b> <b>access</b> (DMA) <b>controller</b> and a fast high-capacity fixed disc allows continuous streams of samples to be collected from an analogue-digital converter at high rates, limited only by the capacity of the disc. A suite of programs has been developed for analysis of a variety of electrophysiological experiments...|$|R
40|$|The DMA (<b>Direct</b> <b>Memory</b> <b>Access)</b> <b>controller,</b> {{is often}} a non-programmable hardware. As new {{peripheral}} interfaces are introduced there {{is often a}} need to change the DMA operation and therefore the design of the DMA controller. Changing the design of the DMA controller is often expensive and time-consuming. Instead, a fully programmable DMA processor can alter the behaviour by simply changing a control program. This paper describes an approach for a programmable DMA processor for a future ETRAX processor developed by Axis Communications. To reach the design solution, different instruction set architectures were simulated and investigated. The result is a fully programmable DMA processor with one RISC core and several burst controllers that handles the data transfers. It can transfer data in parallel with up to 16 channels. The DMA processor is able to work with 1 Gbit/s full duplex Ethernet when the DMA processor is running at 100 MHz. The program that controls the DMA operations is stored in a local instruction memory of the DMA processor. When synthesized with 0. 25 um technology, the DMA controller has a 160 000 gate foot print without the instruction memory. Validerat; 20101217 (root...|$|E
40|$|Two-dimensional {{convolution}} {{is one of}} {{the basic}} operations in image processing, where it is used as a filtering tool. A kernel of values corresponding to the spatial-domain impulse response of the filter is applied to the original image in order to perform desired operations such as low-pass filtering or edge enhancement. Since convolution is basically a two-dimensional multiply and accumulate operation, it is computationally intensive. General-purpose computer architectures are often ill-suited to perform two-dimensional convolutions, since they lack the required processing speed or memory bandwidth. This motivated the project to design and build a specialized device which can compute the convolution operation efficiently for such applications. This thesis addresses the design and implementation of a specialized processor which can perform two-dimensional convolution using double-precision floating-point operands. The selected architecture is based on the concept of the systolic array. These architectures are reviewed particularly for the constraints which impact their logical and physical design, {{as well as for the}} numerous applications for which they have been proposed in the literature or have been implemented. After outlining the overall system architecture of the convolution processor, the thesis focuses on the details of the implementation of the bus interface and <b>Direct</b> <b>Memory</b> <b>Access</b> <b>controller.</b> Finally, the performance of the proposed design is evaluated and compared against alternative software implementations of the convolution algorithm on representative architectures. (Abstract shortened by UMI. ...|$|E
40|$|International audienceReal-time H. 264 /AVC high {{definition}} video encoding represents a challenging workload to most existing programmable processors. The new technologies of programmable processors such as Graphic Processor Unit (GPU) and multicore Digital signal Processor (DSP) offer a very promising solution {{to overcome these}} constraints. In this paper, an optimized implementation of H 264 /AVC video encoder on a single core among the six cores of TMS 320 C 6472 DSP for Common Intermediate Format (CIF) (352 x 288) resolution is presented {{in order to move}} afterwards to a multicore implementation for standard and {{high definition}}s (SD,HD). Algorithmic optimization is applied to the intra prediction module to reduce the computational time. Furthermore, based on the DSP architectural features, various structural and hardware optimizations are adopted to minimize external memory access. The parallelism between CPU processing and data transfers is fully exploited using an Enhanced <b>Direct</b> <b>Memory</b> <b>Access</b> <b>controller</b> (EDMA). Experimental results show that the whole proposed optimizations, on a single core running at 700 MHz for CIF resolution, improve the encoding speed by up to 42. 91 %. They allow reaching the real-time encoding 25 f/s without inducing any Peak Signal to Noise Ratio (PSNR) degradation or bit-rate increase and make possible to achieve real time implementation for SD and HD resolutions when exploiting multicore features...|$|E
40|$|The thesis work is {{conducted}} in the division of computer engineering at thedepartment of electrical engineering in Linköping University. During the thesiswork, a configurable <b>Direct</b> <b>Memory</b> <b>Access</b> (DMA) <b>controller</b> was designed andimplemented. The DMA controller runs at 200 MHz under 65 nm digital CMOS technology. The estimated gate count is 26595. The DMA controller has two address generators and can provide two clocksources. It can thus handle data read and write simultaneously. There are 16 channels built in the DMA controller, the data width can be 16 -bit, 32 -bit and 64 -bit. The DMA controller supports 2 D data access by configuring its intelligentlinking table. The DMA is designed for advanced DSP applications and it is notdedicated for cache which has a fixed priority...|$|R
40|$|An implantable {{automatic}} defibrillator includes sensors {{which are}} placed {{on or near the}} patient's heart to detect electrical signals indicative of the physiology of the heart. The signals are digitally converted and stored into a FIFO region of a RAM by operation of a <b>direct</b> <b>memory</b> <b>access</b> (DMA) <b>controller.</b> The DMA controller operates transparently with respect to the microprocessor {{which is part of the}} defibrillator. The implantable defibrillator includes a telemetry communications circuit for sending data outbound from the defibrillator to an external device (either a patient controller or a physician's console or other) and a receiver for sensing at least an externally generated patient ECG recording command signal. The patient recording command signal is generated by the hand held patient controller. Upon detection of the patient ECG recording command, DMA copies the contents of the FIFO into a specific region of the RAM...|$|R
30|$|This paper {{introduces}} a novel architecture for next-generation adaptive computing systems, which we term 3 D-SoftChip. The 3 D-SoftChip is a 3 -dimensional (3 D) vertically integrated adaptive computing system combining state-of-the-art processing and 3 D interconnection technology. It comprises the vertical integration of two chips (a configurable array processor and an intelligent configurable switch) through an indium bump interconnection array (IBIA). The configurable array processor (CAP) is {{an array of}} heterogeneous processing elements (PEs), while the intelligent configurable switch (ICS) comprises a switch block, 32 -bit dedicated RISC processor for control, on-chip program/data memory, data frame buffer, along with a <b>direct</b> <b>memory</b> <b>access</b> (DMA) <b>controller.</b> This paper introduces the novel 3 D-SoftChip architecture for real-time communication and multimedia signal processing as a next-generation computing system. The paper further describes the advanced HW/SW codesign and verification methodology, including high-level system modeling of the 3 D-SoftChip using SystemC, being {{used to determine the}} optimum hardware specification in the early design stage.|$|R
40|$|The {{performance}} of several spike exchange methods using a Blue Gene/P supercomputerhas been tested with 8 K to 128 K cores using randomly connected networks {{of up to}} 32 M cells with 1 k connections per cell and 4 M cells with 10 k connections per cell. The spike exchange methods used are the standard Message Passing Interface collective, MPI_Allgather, and several variants of the non-blocking multisend method either implemented via non-blocking MPI_Isend, or exploiting the possibility of very low overhead direct memory access communication available on the Blue Gene/P. In all cases the worst performing method was that using MPI_Isend due to the high overhead of initiating a spike communication. The two best performing methods [...] - the persistent multisend method using the Record-Replay feature of the Deep Computing Messaging Framework DCMF_Multicast;and a two phase multisend in which a DCMF_Multicast is used to first send to a subset of phase 1 destination cores which then {{pass it on to}} their subset of phase 2 destination cores [...] - had similar performance with very low overhead for the initiation of spike communication. Departure from ideal scaling for the multisend methods is almost completely due to load imbalance caused by the largevariation in number of cells that fire on each processor in the interval between synchronization. Spike exchange time itself is negligible since transmission overlaps with computation and is handled by a <b>direct</b> <b>memory</b> <b>access</b> <b>controller.</b> We conclude that ideal performance scaling will be ultimately limited by imbalance between incoming processor spikes between synchronization intervals. Thus, counterintuitively, maximization of load balance requires that the distribution of cells on processors should not reflect neural net architecture but be randomly distributed so that sets of cells which are burst firing together should be on different processors with their targets on as large a set of processors as possible...|$|E
5000|$|Under the Amiga architecture, the <b>direct</b> <b>memory</b> <b>access</b> (DMA) <b>controller</b> is {{integrated}} into the Agnus (Alice on AGA models) chip. Both the CPU {{and other members of}} the chipset have to arbitrate for access to shared RAM via Agnus. This allows the custom chips to perform video, audio, or other DMA operations independently of the CPU. As the 68000 processor used in early Amiga systems usually only <b>accesses</b> <b>memory</b> on every second memory cycle, Agnus operates a system where the [...] "odd" [...] clock cycle is allocated to time-critical custom chip access and the [...] "even" [...] cycle is allocated to the CPU: thus, for average DMA demand, the CPU is not typically blocked from <b>memory</b> <b>access</b> and may run without interruption. However, certain chipset DMA, such as high-resolution graphics with a larger color palette, Copper, or blitter operations, can use any spare cycles, effectively blocking cycles from the CPU. In such situations CPU cycles are only blocked while accessing shared RAM, but never when accessing Fast (CPU-only) RAM (when present) or ROM.|$|R
40|$|Abstract. Power {{efficiency}} {{has become}} a key design trade-off in embedded system designs. For system-on-a-chip embedded systems, an external bus interconnects embedded processor cores, I/O peripherals, a <b>direct</b> <b>memory</b> <b>access</b> (DMA) <b>controller,</b> and off-chip <b>memory.</b> External <b>memory</b> <b>access</b> activities are {{a major source of}} energy consumption in embedded systems, and especially in multimedia platforms. In this paper, we focus on the energy dissipated due to the address, data, and control activity on the external bus and supporting logic. We build our external bus power model on top of a cycle-accurate simulation framework that quantifies the bus power based on memory bus state transitions. We select an Analog Devices ADSP-BF 533 multimedia system-on-a-chip embedded system as our target architecture model. Using our poweraware external bus arbitration schemes, we can reduce overall power by as much as 18 % in video processing applications, and by 12 % on average for the test suites studied. Besides reducing power consumption, we also obtained an average performance speedup of 24 % when using our power-aware arbitration schemes...|$|R
40|$|A single chip {{system for}} real [...] time mpeg [...] 2 {{decoding}} {{can be created}} by integrating a general purpose dual [...] issue risc processor, with a small dedicated hardware for the variable length decoding (vld) and block loading processes; a 32 kb instruction ram; and a 32 kb data ram. The vld hardware performs Huffman decoding on the input data. The block loader performs the half [...] sample prediction for motion compensation and acts as a <b>direct</b> <b>memory</b> <b>access</b> (dma) <b>controller</b> for the risc processor by transferring data between an external 2 mb dram and the internal 32 kb data ram. The dual [...] issue risc processor, running at 250 mhz, is enhanced {{with a set of}} key sub [...] word and multimedia instructions for a sustained peak performance of 1000 mops. With this setup for mpeg [...] 2 decoding applications, bi [...] directionally predicted non [...] intra video blocks are decoded in less than 800 cycles, leading to a single chip, real [...] time mpeg [...] 2 decoding system. Keywords: vliw processor, multimedia systems, mpeg [...] 2 dec [...] ...|$|R
40|$|Abstract—In {{this paper}} we present an {{extended}} and optimized {{version of a}} smart <b>Direct</b> <b>Memory</b> <b>Access</b> (sDMA) <b>controller</b> sup-porting different on-the-fly protocol stack acceleration concepts for Long Term Evolution (LTE) mobile terminals. In addition to the downlink processing, we analyse different on-the-fly hardware acceleration modes for the uplink protocol stack processing in layer 2 (L 2). Moreover, the system performance is further improved by adopting parallelization methods. The efficiency of on-the-fly hardware acceleration is proved by comparing the transport block processing times to those achieved with a con-ventional hardware accelerator. Therefore, a cycle approximate virtual prototype of a state-of-the-art mobile phone platform based on an ARM 1176 processor is simulated at LTE-Advanced data rates of up to 1 Gbit/s. In uplink direction, {{we are able to}} reduce the complexity in the sDMA controller and simultaneously improve the processing performance in the mobile platform. This is realized by intelligent hardware/software partitioning and an optimized descriptor format. Furthermore, a significant optimization (up to 13 %) of the system performance in a mobile device is achieved by adopting parallelized on-the-fly hardware acceleration modes. We show how the sDMA controller clearly outperforms the traditional approach by reaching speedups of up to 35 % and 66 % for the transport block processing times in uplink and downlink directions, respectively. I...|$|R
40|$|In a data system {{having a}} memory, plural input/output (I/O) devices and a bus {{connecting}} {{each of the}} I/O devices to the <b>memory,</b> a <b>direct</b> <b>memory</b> <b>access</b> (DMA) <b>controller</b> regulating <b>access</b> {{of each of the}} I/O devices to the bus, including a priority register storing priorities of bus access requests from the I/O devices, an interrupt register storing bus access requests of the I/O devices, a resolver for selecting one of the I/O devices to have access to the bus, a pointer register storing addresses of locations in the memory for communication with the one I/O device via the bus, a sequence register storing an address of a location in the memory containing a channel program instruction which is to be executed next, an ALU for incrementing and decrementing addresses stored in the pointer register, computing the next address to be stored in the sequence register, computing an initial contents of each of the register. The memory contains a sequence of channel program instructions defining a set up operation wherein the contents of each of the registers in the channel register is initialized in accordance with the initial contents computed by the ALU and an access operation wherein data is transferred on the bus between a location in the memory whose address is currently stored in the pointer register and the one I/O device enabled by the resolver...|$|R
40|$|We have {{developed}} a new ultrasound scan conversion algorithm that can be executed very efficiently on modem microprocessors. Our algorithm is designed to handle the address calculations and input and output (UO) data loading concurrently with the interpolation. The processing unit’s computing power can be dedicated to performing pixel interpolations while the other operations are handled by an independent <b>direct</b> <b>memory</b> <b>access</b> (DMA) <b>controller.</b> By making intelligent use of the UO transfer capabilities of the DMA controller, the algorithm avoids spending the processing unit’s valuable computing cycles in address calculations and nonactive pixel blanking. Furthermore, the new approach speeds up the computation by utilizing the ability of superscalar and very long instruction word (VLIW) processors to perform multiple operations in parallel. Our scan conversion algorithm was implemented on a multimedia and imaging system based on the Texas Instruments TMS 320 C 80 Multimedia Video Processor (MVP). Computing cycles are spent only on predeterminable nonzero output pixels. For example, an execution time of 11. 4 ms was achieved when there are 101, 829 nonzero output pixels. This algorithm demonstrates a substantial improvement over previous scan conversion algorithms, and its optimized implementation enables modem commercially available programmable processors to support scan conversion at video rates. KEY WORDS: Instruction-level parallelism; programmable processors; real time, scan conversion; superscalar; TMS 320 C 80, MVP; ultrasound machines; VLIW. 81996 Academic Pres...|$|R
40|$|The Atmel ® | SMART ™ SAM C 20 is a {{microcontroller}} series {{optimized for}} industrial automation, appliances and other 5 V applications using the 32 -bit ARM ® Cortex®-M 0 + processor, and ranging from 32 - to 64 -pins {{with up to}} 256 KB Flash and 32 KB of SRAM. The SAM C 20 devices operate at a maximum frequency of 48 MHz and reach 2. 46 Coremark/MHz. They are designed for simple and intuitive migration with identical peripheral modules, hex compatible code, identical linear address map and pin compatible migration paths between all devices in the product series. All devices include intelligent and flexible peripherals, Atmel Event System for inter-peripheral signaling, and support for capacitive touch button, slider and wheel user interfaces. SAM C 20 devices are pin compatible to the SAM D family of general purpose microcontrollers The Atmel SAM C 20 devices provide the following features: In-system programmable Flash, six-channel <b>direct</b> <b>memory</b> <b>access</b> (DMA) <b>controller,</b> six channel Event System, programmable interrupt controller, up to 52 programmable I/O pins, 32 -bit real-time clock and calendar, up to five 16 -bit Timer/Counters (TC) and one 24 -bit Timer/Counter for Control (TCC), where each TC can be configured to perform frequency and waveform generation, accurate program execution timing or input capture with time and frequency measurement of digital signals. The TCs can operate i...|$|R
40|$|This thesis {{investigates the}} {{plausibility}} of designing {{and developing a}} versatile, reusable, high speed interface for custom computing applications, based on the Peripheral Component Interface (PCI) Bus. A PCI I/O board was developed, utilizing mainly Complex Programmable Logic Devices (CPLD 2 ̆ 7 s), which included a custom <b>Direct</b> <b>Memory</b> <b>Access</b> (DMA) <b>Controller</b> {{to take advantage of}} the unique feature set of the PCI bus. The arbitration mechanisms and performance characteristics of the PCI bus are taken advantage of in order to achieve a maximum burst throughput rate of 66 Megabytes per second. Performance characteristics of the I/O board are analyzed for two separate PCI host systems. In the faster of the two systems, a 166 MHz Pentium PC, a maximum aggregate throughput rate of 54 Megabytes per second for PCI burst writes was achieved. In all cases throughput increased as a function of transfer size. Due to buffering implementations in the host systems write performance was always superior to read performance. In addition to exceptional throughput capability, this implementation provides a design engineer with a versatile interface which can be mated to a number of high performance applications. The PCI I/O board 2 ̆ 7 s external interface is implemented with a CPLD which can be quickly and easily modified to meet the needs of practically any custom interface without decreasing PCI bus performance. Using the on-board latency timer and programmable FIFO 2 ̆ 7 s the board can be fine tuned to meet a variety of application requirements. The two main design goals were to provide unlimited bursting capability and to transfer 32 -bits of data on every clock. The first was achieved through the implementation of a 32 -bit burst Transfer Count register. The second goal had to be reduced by 50...|$|R
5000|$|The Motorola 6800 and the Intel 8080 were {{designed}} {{at the same}} time and were similar in function. The 8080 was an extension and enhancement of the Intel 8008, which in turn was an LSI implementation of the TTL-based CPU design used in the Datapoint 2200. The 6800 architecture was modeled after the DEC PDP-11 processor. Both the 8080 and the 6800 were TTL compatible, had an 8-bit bidirectional data bus, a 16-bit stack pointer, a 16-bit address bus that could address 64 KB of memory, and came in a 40-pin DIP package. The 6800 had two accumulators and a 16-bit index register. The direct addressing mode allowed fast access to the first 256 bytes of memory. I/O devices were addressed as memory so there were no special I/O instructions. The 8080 had more internal registers and instructions for dedicated I/O ports. When the 8080 was reset, the program counter was cleared and the processor started at memory location 0000. The 6800 loaded the program counter from the highest address and started at the memory location stored there. The 6800 had a three-state control that would disable the address bus to allow another device <b>direct</b> <b>memory</b> <b>access.</b> A disk <b>controller</b> could therefore transfer data into memory with no load on the processor. It was even possible to have two 6800 processors <b>access</b> the same <b>memory.</b> [...] However, in practice systems of such complexity usually required the use of external bus transceivers to drive the system bus; in such circuits the on-processor bus control was disabled entirely in favor of using the similar capabilities of the bus transceiver. In contrast, the 6802 dispensed with this on-chip control entirely in order to free up pins for other functions in the same 40-pin package as the 6800, but this functionality could still be achieved using an external bus transceiver.|$|R
50|$|In computing, remote <b>direct</b> <b>memory</b> <b>access</b> (RDMA) is a <b>direct</b> <b>memory</b> <b>access</b> {{from the}} <b>memory</b> of one {{computer}} into that of another without involving either one's operating system. This permits high-throughput, low-latency networking, which is especially useful in {{massively parallel computer}} clusters.|$|R
50|$|The {{address bus}} was 16-bits wide {{in the initial}} {{implementation}} and later extended to 24-bits wide. A bus control signal could put these lines in a tri-state condition to allow <b>direct</b> <b>memory</b> <b>access.</b> The Cromemco Dazzler, for example, was an early S-100 card that retrieved digital images from <b>memory</b> using <b>direct</b> <b>memory</b> <b>access.</b>|$|R
50|$|RDMA (Remote <b>Direct</b> <b>Memory</b> <b>Access)</b> {{protocols}} deeply rely on zero-copy techniques.|$|R
5000|$|MS-SMBD http://msdn.microsoft.com/en-us/library/hh536346.aspx SMB2 Remote <b>Direct</b> <b>Memory</b> <b>Access</b> (RDMA) Transport Protocol Specification ...|$|R
5000|$|... the SMB Direct Protocol (SMB over remote <b>direct</b> <b>memory</b> <b>access</b> (RDMA)) ...|$|R
50|$|The MC68340 is a {{high-performance}} 32-bit microprocessor with <b>direct</b> <b>memory</b> <b>access</b> (DMA).|$|R
5000|$|Data {{processing}} {{other than}} the CPU, such as <b>direct</b> <b>memory</b> <b>access</b> (DMA) ...|$|R
5000|$|<b>Direct</b> <b>memory</b> <b>access</b> (DMA) circuitry, {{interrupt}} controller, time-slot assigner and {{baud rate}} generators.|$|R
