4220|10000|Public
5|$|Data {{from the}} Home Office's {{national}} identity database at Doncaster, South Yorkshire, was backed up to servers in Crawley for disaster recovery and business continuity purposes. The Identity Documents Bill 2010, proposed in May 2010 and passed in September 2010, authorised {{the destruction of}} all <b>data</b> <b>stored</b> for the identity card scheme {{brought about by the}} Identity Cards Act 2006.|$|E
5|$|Its Linpack {{performance}} {{stands at}} 80 TeraFLOPs, {{which is about}} half {{as fast as the}} cut-off line for the Top 500 Supercomputers list. According to Rennie, all content was stored in Watson's RAM for the Jeopardy game because <b>data</b> <b>stored</b> on hard drives would be too slow to be competitive with human Jeopardy champions.|$|E
5|$|Shion is {{aboard the}} Woglinde running tests on KOS-MOS when the crew {{pick up a}} Zohar Emulator, one of {{thirteen}} replicas of the Zohar. Cherenkov monitors her progress, {{but at the same}} time is a U-TIC spy furthering their goal of finding the original Zohar. Following the Zohar Emulator's retrieval, the Woglinde is attacked by Gnosis. KOS-MOS self-activates and protects Shion's team, in the process killing Federation officer Luis Virgil with friendly fire to save Shion and her assistant Allen. KOS-MOS brings them along with Cherenkov on board the Elsa, which is heading to their destination of Second Miltia. When a Gnosis attacks, chaos' ability to dispel them saves Cherenkov's life. The attack begins mutating Cherenkov, tormenting him with visions of his past as a soldier who failed to adjust to civilian life and killed many people including his wife. During these periods, Shion becomes concerned that KOS-MOS is displaying aberrant behavior, and Allen worries about Shion's emotional state. Alongside these events, the cyborg Ziggy is dispatched to rescue the Realian MOMO from U-TIC, as <b>data</b> <b>stored</b> inside her could open the way to the original planet Miltia, lost in a disaster for which her creator Joachim Mizrahi is blamed. Ziggy rescues MOMO and narrowly escapes, fending off attacks by Margulis. Albedo, who is working with U-TIC for his own goals, sets out in pursuit of MOMO.|$|E
40|$|<b>Data</b> <b>storing</b> {{is today}} very {{important}} topic. Because of Web 2. 0 and software-as-a-service applications {{there is growing}} need for scalability and new types of <b>data</b> <b>stores.</b> The aim of this thesis is to help understand competing SQL and NoSQL <b>data</b> <b>stores</b> and their target use cases. Author mapped last trends in <b>data</b> <b>storing</b> and application architecture and tried to find how concrete <b>data</b> <b>stores</b> address them. There is also experimental part with benchmark and simple application that demonstrate <b>data</b> <b>store's</b> connectors and their speed...|$|R
5000|$|Column (<b>data</b> <b>store),</b> {{a similar}} object used in {{distributed}} <b>data</b> <b>stores</b> ...|$|R
5000|$|Distributed <b>data</b> <b>stores,</b> like Apache Cassandra, Druid (open-source <b>data</b> <b>store)</b> or Dynamo ...|$|R
25|$|Smaller on-disk size of data {{compared}} to <b>data</b> <b>stored</b> in relational database due to compression techniques.|$|E
25|$|Later in August, {{following}} Philippon’s guilty plea, the British Columbia Civil Liberties Association {{published a}} CBSA Operational Bulletin which {{indicated that the}} CBSA maintains it has the legal authority to compel passwords, {{but at the same}} time acknowledges that the law is unclear. The bulletin also state that officers may only use a password to gain access to <b>data</b> <b>stored</b> within the device itself, and not <b>data</b> <b>stored</b> on-line.|$|E
25|$|Radio-frequency {{identification}} (RFID) – Technology using {{electromagnetic fields}} to read <b>data</b> <b>stored</b> in tags embedded in other items.|$|E
40|$|Companies {{have evolved}} from a world where they only had SQL {{databases}} to a world where they use different kinds of <b>data</b> <b>stores,</b> such as key­value <b>data</b> <b>stores,</b> document­oriented <b>data</b> <b>stores</b> and graph databases. The reason why they have started to introduce this diversity of persistency models is because different NoSQL technologies bring different data models with associated query languages and/or APIs. However, they are confronted now with a problem {{in which they have}} the data scattered across different <b>data</b> <b>stores.</b> This problem lies in that when a business action requires to update the data, the data reside in different <b>data</b> <b>stores,</b> and they are subject to inconsistencies in the event of failure and/or concurrent access. These inconsistencies appear {{due to the lack of}} transactional consistency that was guaranteed in traditional SQL databases but is not guaranteed either within the NoSQL <b>data</b> <b>stores</b> or across <b>data</b> <b>stores</b> and databases. CoherentPaaS comes to remedy this need. CoherentPaaS provides an ultra­scalable transactional management layer that can be integrated with any <b>data</b> <b>store</b> with multi­ versioning capabilities. The layer has been integrated with six different <b>data</b> <b>stores,</b> three NoSQL <b>data</b> <b>stores</b> and three SQL­like databases. In this paper, we describe this generic ultra­scalable transactional management layer and focus on its API and how it can be integrated in different ways with different <b>data</b> <b>stores</b> and databases...|$|R
30|$|The <b>data</b> <b>store</b> can be {{a trivial}} {{distributed}} file system or a virtualized No-SQL <b>data</b> <b>store</b> which supports replication. For the deployment of CICT, the <b>data</b> <b>store</b> needs to implement configurable number of replicas. We chose SimpleDB <b>data</b> <b>store</b> in Amazon which is a highly available and flexible non-relational <b>data</b> <b>store.</b> The update policy is write-through i.e. an update {{to one of the}} replicas is notified to all the replicas. The succeeding operations are allotted to the replicas with the load allocation policy discussed in the sub-sections. Thus read operations may fall in the unsafe period and these are enumerated as incorrect reads.|$|R
40|$|The {{corporate}} data warehouse integrates data from various operational <b>data</b> <b>stores</b> of a company. These operational <b>data</b> <b>stores</b> may be heterogeneous {{with respect to}} the represented information. The hetero-homogeneous data warehouse modeling approach overcomes issues associated with the integration of heterogeneous information from the operational <b>data</b> <b>stores</b> b...|$|R
25|$|The {{model can}} access {{all of the}} <b>data</b> <b>stored</b> along with online-based maps: cities, regions, road networks, and objects (hospitals, schools, bus stops, etc.).|$|E
25|$|A vdev {{is made up}} {{initially}} from {{a single}} 4TB hard drive, and <b>data</b> <b>stored</b> on it. (Note- not recommended in practice due to risk of data loss).|$|E
25|$|CitySurf Globe, fast {{adaptation}} and transfer secured data due to special data storage structure, dynamic spatial data editing on 3D client monitor, <b>data</b> <b>stored</b> in Oracle SDO or PostGIS, flexible authorization models for different user groups (LDAP and Active Directory support) also excellent quality and fast 2D map rendering.|$|E
40|$|Abstract — The main {{aspect of}} NoSQL <b>data</b> <b>stores</b> is “shared nothing ” {{horizontal}} scaling, which {{enables them to}} support {{a large number of}} simple read/write operations per second. Most of the NoSQL <b>data</b> <b>stores</b> generally do not provide strict ACID properties. The idea is that by giving up strict ACID constraints high performance and scalability can be achieved. The objective {{of this paper is to}} study and compare the features of the most popular NoSQL <b>data</b> <b>stores</b> like Bigtable (used in Google), Dynamo (used in Amazon) and Cassandra (used in Facebook). The significance of these <b>data</b> <b>stores</b> is that most of the NoSQL <b>data</b> <b>stores</b> available today are developed using the concepts put forwarded by Bigtable and Dynamo. They can be considered as the foundation stones of today’s NoSQL <b>data</b> <b>stores...</b>|$|R
5000|$|Connection: The {{connection}} {{object is}} ADO's {{connection to a}} <b>data</b> <b>store</b> via OLE DB. The connection object stores information about the session and provides methods of connecting to the <b>data</b> <b>store.</b> As some <b>data</b> <b>stores</b> have different methods of establishing a connection, some methods may not be supported in the connection object for particular OLE DB providers. A connection object connects to the <b>data</b> <b>store</b> using its 'Open' method with a connection string which specifies the connection as a list of key value pairs (for example: [...] ""). The start of which must identify the type of <b>data</b> <b>store</b> connection that the connection object requires. This must be either: ...|$|R
25|$|Druid ({{open-source}} <b>data</b> <b>store)</b> is {{a popular}} open-source distributed <b>data</b> <b>store</b> for OLAP queries that is used at scale in production by various organizations.|$|R
25|$|Flash drives use little power, have no fragile moving parts, and {{for most}} {{capacities}} are small and light. <b>Data</b> <b>stored</b> on flash drives is impervious to mechanical shock, magnetic fields, scratches and dust. These properties make them suitable for transporting data {{from place to place}} and keeping the data readily at hand.|$|E
25|$|Additional {{circuits}} called fractional-n {{phase lock}} loops (frac-N PLLs) multiply the resonator’s mechanical frequencies to the oscillator’s output frequencies. These highly specialized PLLs set the output frequencies under control of digital state machines. The state machines {{are controlled by}} calibration and program <b>data</b> <b>stored</b> in non-volatile memory and adjust the PLL configurations to compensate for temperature variations.|$|E
25|$|Current {{interest}} in low power energy harvesting is for independent sensor networks. In these applications an energy harvesting scheme puts power stored into a capacitor then boosted/regulated {{to a second}} storage capacitor or battery for the use in the microprocessor. The power is usually used in a sensor application and the <b>data</b> <b>stored</b> or is transmitted possibly through a wireless method.|$|E
30|$|Scalable workload-driven {{partitioning}} technique {{works better}} than schema level and graph partitioning by demonstrating it on Amazon SimpleDB cloud <b>data</b> <b>store.</b> Although the implementation in Amazon SimpleDB cloud <b>data</b> <b>store</b> increases the response {{time for a}} concurrent number of users, this restricts the practical utility of this technique in Amazon SimpleDB cloud <b>data</b> <b>store.</b> As a result implementation of this technique in a commercial cloud <b>data</b> <b>store</b> is needed. Therefore, scalable workload-driven partitioning is presented using NoSQL database such as Hadoop HBase.|$|R
2500|$|Connection: The {{connection}} {{object is}} ADO's {{connection to a}} <b>data</b> <b>store</b> via OLE DB. The connection object stores information about the session and provides methods of connecting to the <b>data</b> <b>store.</b> As some <b>data</b> <b>stores</b> have different methods of establishing a connection, some methods may not be supported in the connection object for particular OLE DB providers. A connection object connects to the <b>data</b> <b>store</b> using its 'Open' method with a connection string which specifies the connection as a list of key value pairs (for example: [...] "Provider='SQLOLEDB';Data Source='TheSqlServer'; Initial Catalog='Northwind';Integrated Security='SSPI';"). The start of which must identify the type of <b>data</b> <b>store</b> connection that the connection object requires. This must be either: ...|$|R
30|$|The DM {{carries out}} the data {{management}} operations on the underlying <b>data</b> <b>stores</b> with different <b>data</b> units like domains in SimpleDB [17], HTables in HBase [22] and so on. This layer is a middleware between the raw <b>data</b> <b>store</b> and the application. It performs the three important data management functions, which are otherwise implicitly {{carried out by}} databases like RDBMS. DM of a data object controls the number of replicas, location of the replicas. DM can be deployed {{as a part of}} application server or can be independent. It works over the replicated <b>data</b> <b>store</b> and the underlying <b>data</b> <b>store</b> is accessed with the APIs provided through DM. Hence our DM is <b>data</b> <b>store</b> dependent.|$|R
25|$|When writing {{code for}} SQL CLR, <b>data</b> <b>stored</b> in SQL Server {{databases}} {{can be accessed}} using the ADO.NET APIs like any other managed application that accesses SQL Server data. However, doing that creates a new database session, {{different from the one}} in which the code is executing. To avoid this, SQL Server provides some enhancements to the ADO.NET provider that allows the connection to be redirected to the same session which already hosts the running code. Such connections are called context connections and are set by setting context connection parameter to true in the connection string. SQL Server also provides several other enhancements to the ADO.NET API, including classes to work with tabular data or a single row of data as well as classes to work with internal metadata about the <b>data</b> <b>stored</b> in the database. It also provides access to the XML features in SQL Server, including XQuery support. These enhancements are also available in T-SQL Procedures in consequence of the introduction of the new XML Datatype (query,value,nodes functions).|$|E
25|$|Data {{structures}} {{provide a}} means to manage large amounts of data efficiently for uses such as large databases and internet indexing services. Usually, efficient data structures are key to designing efficient algorithms. Some formal design methods and programming languages emphasize data structures, rather than algorithms, as the key organizing factor in software design. Storing and retrieving {{can be carried out}} on <b>data</b> <b>stored</b> in both main memory and in secondary memory.|$|E
25|$|In March 2006, Amazon {{launched}} an online storage service called Amazon Simple Storage Service (Amazon S3). An unlimited number of data objects, from 1byte to 5terabytes in size, {{can be stored}} in S3 and distributed via HTTP or BitTorrent. The service charges monthly fees for <b>data</b> <b>stored</b> and transferred. In 2006, Amazon introduced Amazon Simple Queue Service (Amazon SQS), a distributed queue messaging service, and product wikis (later folded into Amapedia) and discussion forums for certain products using guidelines that follow standard message board conventions.|$|E
30|$|Document <b>data</b> <b>stores</b> {{have similar}} {{limitations}} to key-value <b>data</b> <b>stores,</b> {{such as the}} lack of built-in support for relationships among documents and transactional operations involving multiple documents.|$|R
30|$|Possibilities for {{establishing}} a standard SQL-like querying mechanism {{need to be}} explored, at least for <b>data</b> <b>stores</b> having the same data model. Today, with NoSQL <b>data</b> <b>stores,</b> performing even a simple query requires significant programming expertise and often solution-specific code. Therefore, switching to another <b>data</b> <b>store</b> may require changing {{the majority of the}} application code. Solutions such as Hive [72] have provided a great help in this direction, but their use is still limited to only a few <b>data</b> <b>stores</b> such as HBase and Cassandra. Additionally, some NoSQL <b>data</b> <b>stores</b> such as Cassandra, MongoDB, and Neo 4 J natively provide SQL-like querying. Standardizing querying mechanisms based on the capabilities of their data models would increase adoption of NoSQL in practice and would ease migration among different solutions.|$|R
50|$|A {{tombstone}} is a deleted {{record in}} {{a replica of}} a distributed <b>data</b> <b>store.</b> The tombstone is necessary, as distributed <b>data</b> <b>stores</b> use eventual consistency, where only a subset of nodes where the <b>data</b> is <b>stored</b> must respond before an operation {{is considered to be}} successful.|$|R
25|$|Microsoft Office Groove Server 2007 is for {{centrally}} managing all deployments of Microsoft Office Groove 2007 in the enterprise. It enables using Active Directory for Groove user accounts, {{and create}} Groove Domains, with individual policy settings. It allows Groove workspaces to be hosted at the server, and the files in the workspaces {{made available for}} collaborative editing via the Groove client. It also includes the Groove Server Data Bridge component to allow communication between <b>data</b> <b>stored</b> at both Groove clients and servers and external applications.|$|E
25|$|In early 2012, Verdasys {{expanded}} its data leak prevention portfolio to the cloud to help enterprises protect their <b>data</b> <b>stored</b> on its networks and reduce costs. When {{one of its}} customers, a large insurance company, requested Verdasys {{to take over the}} job of monitoring and protecting the data, Verdasys introduced two new offerings: Managed Service for Information Protection (MSIP) and Information Protection as a Service (IPaaS), offering data protection as a managed service. The Digital Guardian platform completed EAL2+ evaluation under the Communications Security Establishment's Common Criteria Evaluation and Certification Scheme in December 2012.|$|E
25|$|Access to <b>data</b> <b>stored</b> on disks is {{a central}} feature of all {{operating}} systems. Computers store data on disks using files, which are structured in specific ways {{in order to allow}} for faster access, higher reliability, and to make better use of the drive's available space. The specific way in which files are stored on a disk is called a file system, and enables files to have names and attributes. It also allows them to be stored in a hierarchy of directories or folders arranged in a directory tree.|$|E
3000|$|Security is an {{important}} aspect of <b>data</b> <b>stores</b> that is overlooked by many NoSQL implementations. In this section, the <b>data</b> <b>stores</b> surveyed are compared with regard to the following features: [...]...|$|R
5000|$|Build {{a global}} user {{identity}} by correlating unique user accounts across various <b>data</b> <b>stores,</b> and enrich identities with attributes pulled from multiple <b>data</b> <b>stores,</b> {{based on a}} link between user entries.|$|R
40|$|Legacy {{applications}} {{have been}} built around the concept of <b>storing</b> their <b>data</b> in one relational <b>data</b> <b>store.</b> However, with the current differentiation in <b>data</b> <b>store</b> technologies {{as a consequence of}} the NoSQL paradigm, new and possibly more performant storage solutions are available to all applications. The concept of dynamic storage makes sure that application <b>data</b> are always <b>stored</b> in the most optimal <b>data</b> <b>store</b> at a given time to increase application performance. Additionally, polyglot persistence aims to push this performance even further by <b>storing</b> each different <b>data</b> type of an application in the <b>data</b> <b>store</b> technology best suited for it. To get legacy applications into dynamic storage and polyglot persistence, schema and data transformations between <b>data</b> <b>store</b> technologies are needed. This usually infers application redesigns as well to support the new <b>data</b> <b>stores.</b> This paper proposes such a transformation approach through a canonical model. It is based on the Lambda architecture to ensure no application downtime is needed during the transformation process, and after the transformation, the application can continue to query in the original query language, thus requiring no application code changes...|$|R
