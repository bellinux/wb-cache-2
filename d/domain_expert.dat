1185|4084|Public
25|$|Some {{knowledge-based}} engineering projects experienced similarly {{that there}} is a trade-off between trying to teach programming to a <b>domain</b> <b>expert</b> versus getting a programmer to understand the intricacies of a domain. That, of course, depends upon the domain. In short, any team member has to decide which side of the coin to spend one's time.|$|E
2500|$|Consider an {{implementation}} of the Game of Life. A <b>domain</b> <b>expert</b> (or business analyst) might want to specify what should happen when someone is setting up a starting configuration of the game grid. To do this, {{he might want to}} give an example of a number of steps taken by a person who is toggling cells. Skipping over the narrative part, he might do this by writing up the following scenario into a plain text document (which is the type of input document that JBehave reads): ...|$|E
5000|$|<b>Domain</b> <b>Expert.</b> While {{the product}} owner {{represents}} {{a wide range}} of stakeholders, a <b>domain</b> <b>expert</b> is sometimes required for complex domains where a more nuanced understanding is required.|$|E
30|$|In case A of Fig. 2 (Additional file 2) {{technical}} <b>domain</b> <b>experts</b> are solely providing executable artifacts, while business <b>domain</b> <b>experts</b> provide {{content and}} data. In this example technical and business <b>domain</b> <b>experts</b> co-develop the conceptual schemata. The {{implication of this}} co-development structure is that every modification of the system behavior has to be performed by technical <b>domain</b> <b>experts,</b> who have to interpret the specifications of the <b>domain</b> <b>experts</b> and implement them. The consequence is that the technical developers tend to become a bottleneck especially when the set of specifications changes or grows. In this kind of system, non-technical stakeholders can only contribute indirectly to executable artifacts.|$|R
40|$|An agent {{oriented}} {{approach is}} well suited for complex application domains, and often when such applications are used by <b>domain</b> <b>experts</b> they identify modifications {{to be made to}} these applications. However, <b>domain</b> <b>experts</b> are usually limited in agent programming knowledge, and are not able to make these changes themselves. The aim of this work is to provide support so that <b>domain</b> <b>experts</b> are able to make modifications to agent systems. In this paper we report on an evaluation of our Component Agent Framework for <b>domain</b> <b>Experts</b> (CAFnE) framework and toolkit, giving a detailed account of a usability study we conducted with a group of experienced meteorologists...|$|R
30|$|Another {{issue that}} the client company may face is the {{difficulty}} of achieving points 1 and 2 at the same time. The most competent <b>domain</b> <b>experts</b> are usually the most overloaded people in the company, which makes it extremely difficult to take them away from their daily activities {{so that they can}} devote half of their time to the project. Consultants identified three approaches for the client companies to solve the issue of overscheduling. The first is to have the <b>domain</b> <b>experts,</b> being the key-users, work overtime {{for the duration of the}} project, which requires extremely high motivation. Another approach is to nominate people with less experience but more time as key-users and to grant them access to the <b>domain</b> <b>experts</b> when needed. This resolves overload of the experts but poses additional communication issues between the non-expert key-users and the <b>domain</b> <b>experts.</b> The third solution identified is to hire part-time, additional staff to perform the daily activities, so that the <b>domain</b> <b>experts</b> can concentrate on the project.|$|R
50|$|A {{subject-matter}} expert (SME) or <b>domain</b> <b>expert</b> {{is a person}} who is an authority in a particular area or topic. The term <b>domain</b> <b>expert</b> is frequently used in expert systems software development, and there the term always refers to the domain other than the software domain. A <b>domain</b> <b>expert</b> is a person with special knowledge or skills in a particular area of endeavour. (An accountant is an expert in the domain of accountancy, for example.) The development of accounting software requires knowledge in two different domains: accounting and software. Some of the development workers may be experts in one domain and not the other. A SME should also have basic knowledge of other technical subjects.|$|E
5000|$|The {{parameters}} minPts and ε {{can be set}} by a <b>domain</b> <b>expert,</b> if {{the data}} is well understood.|$|E
5000|$|The {{analysis}} and interpretation component takes raw transactional or sensor data and turns it into information using rules based on the knowledge of a <b>domain</b> <b>expert.</b>|$|E
40|$|Design–oriented critiquing {{systems have}} {{successfully}} demonstrated their capability to aid users in designing artifacts. They {{can be seen}} as personal assistants helping to reflect on a particular design and to improve it. For doing so, design–oriented critiquing systems make knowledge and expertise of <b>domain</b> <b>experts</b> available to end users of authoring tools. Unfortunately, it is a quite demanding and time consuming task to compile the expertise of <b>domain</b> <b>experts</b> and to maintain it. We present a collaborative development environment for supporting <b>domain</b> <b>experts</b> in building design–oriented critiquing systems. In this article we focus on assisting <b>domain</b> <b>experts</b> in building a consistent and preferably complete knowledge base of a domain. A knowledge base forms the basis of a critiquing system. Well–structured negotiation processes clear up predictable disagreements arising when <b>domain</b> <b>experts</b> from various disciplines compile their knowledge collaboratively. Considering that experts are not necessarily familiar with programming we provide means for rapid prototyping and maintenance of design–oriented critiquing systems...|$|R
30|$|By {{actually}} applying {{this approach}} to an existing business information system, we demonstrate in Section 5 how the provisioning of end-user technologies has shifted the development efforts within this particular system from a relatively small group of technical system developers to a (by orders of magnitude) larger group of business <b>domain</b> <b>experts.</b> The study reveals the direct participation of the <b>domain</b> <b>experts,</b> and sheds light on the co-development structures of the business and technical <b>domain</b> <b>experts</b> and on the affected layers.|$|R
30|$|In addition, the <b>domain</b> <b>experts</b> {{will help}} {{interpret}} {{the results and}} check whether the discovered knowledge is novel, interesting, and influential. To facilitate their understanding, the research team must think about the comprehensibility of the models to <b>domain</b> <b>experts</b> (and {{not just to the}} DS researchers).|$|R
5000|$|Often, {{knowledge}} {{engineers are}} employed {{to translate the}} information elicited from domain experts into terms which cannot be easily communicated by the highly technalized <b>domain</b> <b>expert</b> [...]|$|E
5000|$|A PDES {{demonstrates}} {{its real}} {{benefits in the}} verification phase. Knowledge (for example in the semiconductor device fabrication - clean before deposition; After polymer spin-on no temperature higher than 100 °C until resist is removed) is provided in a format that can be interpreted by a computer as rules. If a <b>domain</b> <b>expert</b> enters the rules for his/her process steps, all engineers can later use these rules to check newly developed process flows, even if the <b>domain</b> <b>expert</b> is not available. For a PDES, this means {{it has to be}} able to ...|$|E
50|$|Specialists {{and experts}} use and {{develop their own}} domain {{knowledge}}. If the concept domain knowledge or <b>domain</b> <b>expert</b> is used, we emphasize a specific domain which is an object of the discourse/interest/problem.|$|E
30|$|A {{limitation}} {{of this approach is}} that the success of the FCM’s design is depended significantly on the knowledge and experience of <b>domain</b> <b>experts.</b> In particular, the nodes of the FCM, which represent the domain concepts of the learning material, are defined by <b>domain</b> <b>experts.</b> Also, the contribution of <b>domain</b> <b>experts</b> is significant for the definition of the knowledge dependencies between the domain concepts of the learning material and their strength of impact on each other. In other words, they define the values of the w-matrix of the FCM.|$|R
5000|$|Access to <b>domain</b> <b>experts</b> (e.g. pathologists) {{who provide}} consultative services.|$|R
40|$|Ontology {{engineering}} methodologies tend {{to emphasize}} {{the role of the}} knowledge engineer or require a very active role of <b>domain</b> <b>experts.</b> In this paper, a participatory ontology engineering method is described that holds the middle ground between these two 'extremes'. After thorough ethnographic research, an interdisciplinary group of <b>domain</b> <b>experts</b> closely interacted with ontology engineers and social scientists in a series of workshops. Once a preliminary ontology was developed, a dynamic care request system was built using the ontology. Additional workshops were organized involving a broader group of <b>domain</b> <b>experts</b> to ensure the applicability of the ontology across continuous care settings. The proposed method successfully actively engaged <b>domain</b> <b>experts</b> in constructing the ontology, without overburdening them. Its applicability is illustrated by presenting the co-created continuous care ontology. The lessons learned during the design and execution of the approach are also presented...|$|R
5000|$|It is {{important}} that a knowledge engineer incorporates validation procedures into their systems within the program code. After the knowledge-based system is constructed, it can be maintained by the <b>domain</b> <b>expert</b> [...]|$|E
5000|$|Through its {{priority}} action plans, <b>domain</b> <b>expert</b> working groups and sub-groups, and standing committees, SGIP has published papers, manuscripts, guides, the Catalog of Standards {{and other documents}} relating to the Smart Grid, including: ...|$|E
5000|$|There is a {{whole family}} of KL-ONE-like systems. One of the {{innovations}} that KL-ONE initiated {{was the use of}} a deductive classifier, an automated reasoning engine that can validate a frame ontology and deduce new information about the ontology based on the initial information provided by a <b>domain</b> <b>expert.</b>|$|E
40|$|This paper {{describes}} {{a suite of}} tools developed at the University of Leeds which aim {{to make it easier}} for <b>domain</b> <b>experts</b> to be involved in the creation and use of ontologies. The paper summarises the main features of the tools and gives a short summary of our evaluations and experiences using the tools with <b>domain</b> <b>experts...</b>|$|R
40|$|In {{architecture}} practice, {{design is}} understood to be a linear process where <b>domain</b> <b>experts</b> contribute to discrete phases. Traditionally the AIA defines five design phases; schematic design, design development, and construction documents, bidding, and construction administration. Feasibility studies and programming are sometimes understood as an additional phase, known as pre-design. However in BIM, design is compressed into a highly collaborative process, where a single data model is managed by all <b>domain</b> <b>experts.</b> This early participation of <b>domain</b> <b>experts</b> changes the process. NIST describes a compression of traditional phases into three emerging phases; design optimization, construction optimization, and construction orchestration. This restructuring includes the building operation phase...|$|R
40|$|AbstractKnowledge {{acquisition}} for a {{case-based reasoning}} system from <b>domain</b> <b>experts</b> is a bottleneck {{in the system}} development process. With the huge amounts of data that have become available, deriving representative cases from available databases rather than from <b>domain</b> <b>experts</b> is highly useful. This paper presents an algorithm based on the similarity-based rough set theory that can derive cases automatically from available databases...|$|R
50|$|Some {{knowledge-based}} engineering projects experienced similarly {{that there}} is a trade-off between trying to teach programming to a <b>domain</b> <b>expert</b> versus getting a programmer to understand the intricacies of a domain. That, of course, depends upon the domain. In short, any team member has to decide which side of the coin to spend one's time.|$|E
50|$|The {{limitations}} of most computerized problem solving techniques inhibit {{the success of}} many expert systems in the legal <b>domain.</b> <b>Expert</b> systems typically rely on deductive reasoning models that have difficulty according degrees of weight to certain principles of law or importance to previously decided cases {{that may or may}} not influence a decision in an immediate case or context.|$|E
50|$|Extracting or {{selecting}} features is {{a combination}} of art and science; developing systems to do so is known as feature engineering. It requires the experimentation of multiple possibilities and the combination of automated techniques with the intuition and knowledge of the <b>domain</b> <b>expert.</b> Automating this process is feature learning, where a machine not only uses features for learning, but learns the features itself.|$|E
40|$|The Component Agent Framework for domain-Experts (CAFnE) toolkit is an {{extension}} to the Prometheus Design Tool (PDT). It uses the detailed design produced by PDT with further annotations by <b>domain</b> <b>experts</b> to automatically generate executable code into a desired agent platform. The key feature of CAFnE {{is that it allows}} <b>domain</b> <b>experts</b> with limited programming skills to easily build and modify agent systems...|$|R
40|$|In many markets, {{customer}} preferences {{depend on}} {{the activity of the}} customer. The authors have previously demonstrated a model that allows the testing of the qualitative judgements of <b>domain</b> <b>experts</b> in spirits markets against relevant EPOS price and sales data. This paper extends the use of context dependent customer preferences to the case where <b>domain</b> <b>experts</b> lack confidence in their judgements or the judgements are found not to be in accordance with the data. We describe here an algorithm to produce credible alternative models for the <b>domain</b> <b>experts</b> to confirm or develop in light of their wider domain expertise. The algorithm combines random search, genetic programming and evolutionary hill-climbing techniques. We report the results of tests using data from a market for alcoholic beverages. The algorithm enables the automatic production of qualitative descriptions which are both consistent with observed data and deemed credible by the <b>domain</b> <b>experts.</b> The combination of these techniques is more robust and produces better results than any of these techniques separately...|$|R
40|$|A recent {{trend in}} {{ontology}} engineering research {{aims at encouraging}} the active participation of <b>domain</b> <b>experts</b> in the ontology creation process. Ontology construction methodologies together with appropriate tools and technologies, such as controlled natural languages, semantic wikis, intelligent user interfaces and social computing, are being proposed to enable the direct input from <b>domain</b> <b>experts</b> and to minimize the dependency on knowledge engineers at every step of ontology development. The time is ripe for consolidating methodological and technological advancements to create intuitive ontology engineering tools which can make Semantic Web technologies usable by {{a wide variety of}} people without formal knowledge engineering skills. A novel, holistic approach to facilitate the involvements of <b>domain</b> <b>experts</b> in the ontology authoring process is presented here. It integrates (i) an ontology construction methodology, (ii) the use of a controlled natural language, and (iii) appropriate tool support. The integrated approach is illustrated with the design, implementation and evaluation of ROO - a unique ontology authoring tool which combines intelligent techniques to assist <b>domain</b> <b>experts</b> in constructing ontologies. The bene ts and limitations of the proposed approach are analyzed based on user studies with ROO. A broader discussion is provided pointing at issues {{to be taken into account}} when assisting the involvement of <b>domain</b> <b>experts</b> in ontology construction...|$|R
50|$|As {{expert systems}} scaled up from {{demonstration}} prototypes to industrial strength applications {{it was soon}} realized that the acquisition of <b>domain</b> <b>expert</b> knowledge was one of if not the most critical task in the knowledge engineering process. This knowledge acquisition process became an intense area of research on its own. One of the earlier works on the topic used Batesonian theories of learning to guide the process.|$|E
50|$|Explanation modules, used in expert systems, is a {{function}} that enables the knowledge worker {{to understand why the}} information explained and concluded by the <b>domain</b> <b>expert</b> is viable. While consulting the information provided by the expert system, the explanation module elucidates why the expert system reached its conclusion. Explanation modules are mostly used in training seminars, as audiences are interested in learning how problems in the expert system are solved.|$|E
50|$|Klerks {{categorized}} {{link analysis}} tools into 3 generations. The first generation {{was introduced in}} 1975 as the Anacpapa Chart of Harper and Harris. This method requires that a <b>domain</b> <b>expert</b> review data files, identify associations by constructing an association matrix, create a link chart for visualization and finally analyze the network chart to identify patterns of interest. This method requires extensive domain knowledge and is extremely time-consuming when reviewing vast amounts of data.|$|E
5000|$|Non-technical <b>domain</b> <b>experts</b> {{can find}} it hard to write or modify DSL {{programs}} by themselves.|$|R
40|$|Abstract. In our {{previous}} work we proposed Model-Driven Performance Engineering (MDPE) as a methodology to integrate performance engineering into the model-driven engineering process. MDPE enables <b>domain</b> <b>experts,</b> who generally lack performance expertise, {{to profit from}} performance engineering by automating the performance analysis process using model transformations. A crucial part of this automated process is to give performance prediction feedback not based on internal models, but on models the <b>domain</b> <b>experts</b> understand. Hence, a mechanism is required to annotate analysis results back into the original models provided by the <b>domain</b> <b>experts.</b> This paper discusses various existing traceability methodologies and describes their application and extension for MDPE by taking its specific needs into account. ...|$|R
40|$|Structuring and {{supporting}} the argumentative process that takes place within the knowledge elicitation process {{is a major problem}} when developing ontologies. Knowledge elicitation relies heavily on the argumentative process amongst <b>domain</b> <b>experts.</b> The involvement of geographically distributed <b>domain</b> <b>experts</b> and the need for <b>domain</b> <b>experts</b> to lead the design process, adds an interesting layer of complexity to the whole process. We consider that the argumentative structure should facilitate the elicitation process and serve as documentation for the whole process; it should also facilitate the evolution and contextualization of the ontology. We propose the use of conceptual maps as means to support and scaffold an argumentative structure during the development of ontologies within loosely centralized communities...|$|R
