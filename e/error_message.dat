628|936|Public
5|$|A classic {{error is}} {{the attempt to}} use the equals {{operator}} = {{in combination with the}} keyword NULL to find rows with Nulls. According to the SQL standard this is an invalid syntax and shall lead to an <b>error</b> <b>message</b> or an exception. But most implementations accept the syntax and evaluate such expressions to UNKNOWN. The consequence is that no rows are found - regardless of whether rows with Nulls exist or not. The proposed way to retrieve rows with Nulls is the use of the predicate IS NULL instead of = NULL.|$|E
25|$|Google Chrome {{triggers}} a specific <b>error</b> <b>message</b> for DNS issues. When the DNS server is down or broken, Google Chrome returns an <b>error</b> <b>message.</b>|$|E
25|$|PC LOAD LETTER is {{a printer}} <b>error</b> <b>message</b> that has entered popular {{culture as a}} {{technology}} meme referring to a confusing or inappropriate <b>error</b> <b>message.</b>|$|E
5000|$|Constraints {{and content}} rules may be {{associated}} with [...] "plain-English" [...] validation <b>error</b> <b>messages,</b> allowing translation of numeric Schematron error codes into meaningful user <b>error</b> <b>messages.</b>|$|R
50|$|On modern {{operating}} systems with graphical user interfaces, <b>error</b> <b>messages</b> are often displayed using dialog boxes. <b>Error</b> <b>messages</b> are used when user intervention is required, {{to indicate that}} a desired operation has failed, or to relay important warnings (such as warning a computer user that they are almost out of hard disk space). <b>Error</b> <b>messages</b> are seen widely throughout computing, and are part of every operating system or computer hardware device. Proper design of <b>error</b> <b>messages</b> is an important topic in usability and other fields of human-computer interaction.|$|R
40|$|Good <b>error</b> <b>messages</b> are {{critical}} for novice programmers. Many projects attempt to rewrite expert-level <b>error</b> <b>messages</b> in terms suitable for novices. DrScheme's language levels provide a powerful alternative through which <b>error</b> <b>messages</b> are customized to pedagogically-inspired language subsets. Despite this, many novices still struggle to work effectively with DrScheme's <b>error</b> <b>messages.</b> To better understand why, we have begun using human-factors research methods to explore the effectiveness of DrScheme's <b>error</b> <b>messages.</b> Unlike existing work in this area, we study messages at a fine-grained level by analyzing the edits students make in response to various classes of errors. Our results point to several shortcomings in DrScheme's current treatment of errors; many of these should apply to other languages. This paper describes our methodology, presents initial findings, and recommends new approaches to presenting errors to novices...|$|R
25|$|Microsoft Math and Mathematica return ComplexInfinity for 1/0. Maple and SageMath return an <b>error</b> <b>message</b> for 1/0, and {{infinity}} for 1/0.0 (0.0 tells {{these systems}} to use {{floating point arithmetic}} instead of algebraic arithmetic).|$|E
25|$|That is to say, the {{question}} {{can only be}} answered {{in terms of the}} broader goals of the program, which are not known to the general-purpose library function. Nonetheless, exiting with an <b>error</b> <b>message</b> is only rarely the right answer. So instead of simply exiting with an error, the function may establish restarts offering various ways to continue—for instance, to skip the log entry, to supply default or null values for the unreadable fields, to ask the user for the missing values, or to unwind the stack and abort processing with an <b>error</b> <b>message.</b> The restarts offered constitute the mechanisms available for recovering from error; the selection of restart by the condition handler supplies the policy.|$|E
25|$|Any {{number and}} variety of catch clauses can be used above. If there is no catch {{matching}} a particular throw, control percolates back through subroutine calls and/or nested blocks until a matching catch is found or {{until the end of}} the main program is reached, at which point the program is forcibly stopped with a suitable <b>error</b> <b>message.</b>|$|E
5000|$|The Bourne shell {{also was}} the first to feature the {{convention}} of using file descriptor [...] for <b>error</b> <b>messages,</b> allowing much greater programmatic control during scripting by keeping <b>error</b> <b>messages</b> separate from data.|$|R
5000|$|<b>Error</b> <b>messages</b> {{involving}} templates {{tend to be}} {{very long}} and difficult to decipher. This problem has been considered so severe that a number of tools have been written that simplify and prettyprint STL-related <b>error</b> <b>messages</b> to make them more comprehensible.|$|R
30|$|In the {{login page}} that we consider, {{responses}} to valid requests include welcome messages and invalid input <b>error</b> <b>messages.</b> Responses to invalid requests include PHP or SQL <b>error</b> <b>messages.</b> The essential {{point is the}} existence of differences between execution pages and rejection pages, and, more precisely, between welcome messages and invalid input <b>error</b> <b>messages,</b> and between PHP and SQL <b>error</b> <b>messages.</b> Our approach focuses on the analysis of these differences. The objective is to identify, among several responses, those which correspond to execution pages generated through syntactically valid requests. In other words, we learn {{the behavior of the}} application based on the clustering of Web server response pages that are similar enough.|$|R
25|$|On June 6, 2005, Apple {{announced}} {{their plans to}} switch to Intel processors at their Worldwide Developers Conference and released a Developer Transition Kit to selected developers {{at a cost of}} $999. Efforts immediately began to attempt to run Mac OS X on non-Apple hardware, but developers quickly found themselves with an <b>error</b> <b>message</b> saying that the PC hardware configurations were not supported.|$|E
25|$|In computing, {{a program}} error {{may result from}} an attempt to divide by zero. Depending on the {{programming}} environment {{and the type of}} number (e.g. floating point, integer) being divided by zero, it may generate positive or negative infinity by the IEEE 754 floating point standard, generate an exception, generate an <b>error</b> <b>message,</b> cause the program to terminate, result in a special not-a-number value, a freeze via infinite loop, or a crash.|$|E
25|$|Function {{overloading}} allows {{programs to}} declare multiple functions {{having the same}} name but with different arguments (i.e. ad hoc polymorphism). The functions are distinguished by the number or types of their formal parameters. Thus, the same function name can refer to different functions {{depending on the context}} in which it is used. The type returned by the function is not used to distinguish overloaded functions and would result in a compile-time <b>error</b> <b>message.</b>|$|E
30|$|<b>Error</b> <b>Messages</b> and Sensitivity of {{workload}} Changes: The cases also vary {{in terms}} of their sensitivity to workload changes as manifested in the nature and type of <b>error</b> <b>messages</b> produced by the different GSD processes during the implementation of tenant isolation. The experimental results show that when a tenant experiences a high workload, different kinds of <b>error</b> <b>messages</b> are generated depending on the GSD process. The <b>error</b> <b>messages</b> are summarised as follows: for continuous integration, {{the most common type of}} error was that of insufficient system resource (e.g., memory); for version control, the common error was that of directory and file permissions; and for bug tracking the common error was database-related errors.|$|R
40|$|International audienceCryptic type <b>error</b> <b>messages</b> {{are a major}} {{obstacle}} to learning OCaml or other ML-based languages. In many cases, <b>error</b> <b>messages</b> cannot be interpreted without a sufficiently-precise model of the type inference algorithm. The problem of improving type <b>error</b> <b>messages</b> in ML has received {{quite a bit of}} attention over the past two decades, and many different strategies have been considered. The challenge is not only to produce <b>error</b> <b>messages</b> that are both sufficiently concise and systematically useful to the programmer, but also to handle a full-blown programming language and to cope with large-sized programs efficiently. In this work, we present a modification to the traditional ML type inference algorithm implemented in OCaml that, by significantly reducing the left-to-right bias, allows us to report <b>error</b> <b>messages</b> that are more helpful to the programmer. Our algorithm remains fully predictable and continues to produce fairly concise <b>error</b> <b>messages</b> that always help making some progress towards fixing the code. We implemented our approach as a patch to the OCaml compiler in just a few hundred lines of code. We believe that this patch should benefit not just to beginners, but also to experienced programs developing large-scale OCaml programs...|$|R
40|$|Abstract. If {{a library}} {{designer}} takes {{full advantage of}} Haskell’s rich type system and type-level programming capabilities, then the resulting library will frequently inflict huge and unhelpful <b>error</b> <b>messages</b> on the library user. These <b>error</b> <b>messages</b> are typically {{in terms of the}} library and do not refer to the call-site of the library by the library user, nor provide any guidance to the user as to how to fix the error. The increasing appetite for programmable type-level computation makes this a critical issue, as the advantages and capabilities of type-level computation are nullified if useful <b>error</b> <b>messages</b> cannot be returned to the user. We present a novel technique that neatly side-steps the default <b>error</b> <b>messages</b> and allows the library programmer to control the generation of <b>error</b> <b>messages</b> that are statically returned to the user. Thus with this technique, {{there is no longer any}} drawback to using the full power of Haskell’s type system. ...|$|R
25|$|On January 16, 2013, an All Nippon Airways (ANA) 787 made an {{emergency}} landing at Takamatsu Airport on Shikoku Island after the flight crew received a computer warning of smoke present {{inside one of the}} electrical compartments. ANA said that there was an <b>error</b> <b>message</b> in the cockpit citing a battery malfunction. Passengers and crew were evacuated using the emergency slides. According to The Register, there are no fire-suppression systems in the electrical compartments holding batteries, only smoke detectors.|$|E
25|$|One common {{faux pas}} on Internet forums is to post {{the same message}} twice. Users {{sometimes}} post versions of a message that are only slightly different, especially in forums where {{they are not allowed}} to edit their earlier posts. Multiple posting instead of editing prior posts can artificially inflate a user's post count. Multiple posting can be unintentional; a user's browser might display an <b>error</b> <b>message</b> even though the post has been transmitted or a user of a slow forum might become impatient and repeatedly hit the submit button. An offline editor may post the same message twice. Multiple posting can also be used as a method of trolling or spreading forum spam. A user may also send the same post to several forums, which is termed crossposting. The term derives from Usenet, where crossposting was an accepted practice but causes problems in web forums, which lack the ability to link such posts so replies in one forum are not visible to people reading the post in other forums.|$|E
500|$|Halo 2 for Windows Vista was {{originally}} {{scheduled for release}} on May 8, 2007, but the release was pushed back to May 31 on the discovery of partial nudity in the game's map editor – {{a photograph of a}} man mooning the camera was presented as part of the [...] ".ass" [...] <b>error</b> <b>message.</b> Microsoft offered patches to remove the nude content and revised the box ratings.|$|E
40|$|There {{are many}} ways of placing <b>error</b> <b>messages</b> in web forms. A study of web {{conventions}} shows that the most common approach is to display <b>error</b> <b>messages</b> embedded in the form {{at the top of}} the entire form. Six frequent locations (right, left, above and below the erroneous input field, as well as on the top and at the bottom of the form) were tested in an online study with n = 303 participants. Results of efficiency, effectiveness and satisfaction show that the locations near the erroneous input field lead to a significantly better performance than the <b>error</b> <b>messages</b> on the top and at the bottom of the form; in addition <b>error</b> <b>messages</b> on the right side of the erroneous input field were subjectively evaluated as the most satisfying and intuitive by participants. The results indicate possible improvements for online shops, where <b>error</b> <b>messages</b> are currently mostly placed on the top of the for...|$|R
50|$|Robust {{programming}} is {{a style of}} programming that focuses on handling unexpected termination and unexpected actions. It requires code to handle these terminations and actions gracefully by displaying accurate and unambiguous <b>error</b> <b>messages.</b> These <b>error</b> <b>messages</b> allow the user to more easily debug the program.|$|R
40|$|Cryptic type <b>error</b> <b>messages</b> {{are a major}} {{obstacle}} to learning OCaml or other ML-based languages. In many cases, <b>error</b> <b>messages</b> cannot be interpreted without a sufficiently-precise model of the type inference algorithm. The problem of improving type <b>error</b> <b>messages</b> in ML has received {{quite a bit of}} attention over the past two decades, and many different strategies have been considered. The challenge is not only to produce <b>error</b> <b>messages</b> that are both sufficiently concise and systematically useful to the programmer, but also to handle a full-blown programming language and to cope with large-sized programs efficiently. In this work, we present a modification to the traditional ML type inference algorithm implemented in OCaml that, by significantly reducing the left-to-right bias, allows us to report <b>error</b> <b>messages</b> that are more helpful to the programmer. Our algorithm remains fully predictable and continues to produce fairly concise <b>error</b> <b>messages</b> that always help making some progress towards fixing the code. We implemented our approach as a patch to the OCaml compiler in just a few hundred lines of code. We believe that this patch should benefit not just to beginners, but also to experienced programs developing large-scale OCaml programs. Comment: In Proceedings ML/OCaml 2014, arXiv: 1512. 0143...|$|R
500|$|When Twitter {{experiences}} an outage, users {{once saw}} the [...] "fail whale" [...] <b>error</b> <b>message</b> image created by Yiying Lu, illustrating eight orange birds using a net to hoist a whale {{from the ocean}} captioned [...] "Too many tweets! Please wait a moment and try again." [...] In a [...] Chris Fry, VP of Engineering at that time, noted {{that the company had}} taken the [...] "fail whale" [...] out of production as the platform was now more stable.|$|E
500|$|During launch week, {{issues were}} found {{to exist in the}} code-restricted content. Some {{customers}} discovered the code to be missing from their copy, preventing them from obtaining the Catwoman story missions. The problem was reported by customers in Canada, the United States, and the United Kingdom. Warner Bros. issued a statement claiming that the missing codes had affected less than 0.5% of customers. Upon release in the United Kingdom, a technical issue rendered the game unplayable for some players, booting them from the game with an <b>error</b> <b>message</b> that the [...] "downloadable content is corrupt." [...] Rocksteady European community manager Sarah Wellock claimed that the fault lay with the PlayStation Network and Xbox Live online systems.|$|E
500|$|Upon the game's release, {{there was}} an issue with the {{co-operative}} mode on the PC. Reviewers were sent a Steam download code {{to play the game}} while waiting for their console versions to arrive in the mail and upon attempting to launch the co-op mode, players were given the <b>error</b> <b>message</b> [...] "Could not join. The game session is no longer available." [...] However, this affected a number of gamers playing via Steam on the PC, resulting in a statement being issued by the official Twitter account for the game and an email being sent to customers, stating the company was looking into the problems. At the same time, players of [...] were having similar issues on Steam.|$|E
40|$|In this paper, we {{describe}} about difficulty in understanding of <b>error</b> <b>messages</b> {{given by a}} compiler from a viewpoint of communication protocol layers analogous to that of computer networks. In the case of human-human or human-machine, layered communication protocol model is introduced and it is shown that several factors which cause communication obstacles are explained based on the model. As an experiment, we gave several programming subjects of C to a student, then we analyzed the <b>error</b> <b>messages</b> given by a C compiler against the sample programs written by the student. The {{result is that the}} <b>error</b> <b>messages</b> from a compiler are easier to be understood if they are can be processed at lower layer for users. Furthermore, we gave some proposals for improvement of <b>error</b> <b>messages.</b> 1...|$|R
5000|$|AUTOFAIL (OS/2 only) : Configures {{verbosity}} of <b>error</b> <b>messages.</b>|$|R
40|$|Generating <b>error</b> <b>messages</b> for LR parsers is {{currently}} a difficult and error laden process �Adding error productions to the grammar makes the grammar difficult to read, and can hinder error recovery �Manually adding <b>error</b> <b>messages</b> based on parse state is error prone, {{and needs to be}} updated after every grammatical chang...|$|R
500|$|In {{a review}} of the episodes {{featured}} on The Simpsons Gone Wild, PopMatters critic Stephen Haag wrote that [...] "none of these episodes will end up in the Simpsons Hall of Fame", and that [...] "The Mansion Family" [...] is [...] "hardly a classic episode, but Lord knows there are plenty worse from season 11 (paging 'Bart to the Future')." [...] He further commented that [...] "if anything, this episode {{should be included in the}} 'batshit-crazy endings' DVD," [...] referring to the ending scenes with the Chinese pirates. David Packard of DVD Verdict was more positive in his review of The Simpsons Gone Wild, writing that [...] "The Mansion Family" [...] is [...] "another all-around hilarious episode, with a nice swipe at the Grammy Awards, the Simpsons family running amok in the mansion and enjoying all it has to offer, and Burns' various tests at the Mayo Clinic (my favorite gag is when Burns is slid into an MRI machine, only to hear the thing grind to a halt with an <b>error</b> <b>message</b> reading 'Clear body jam in Area 1.')" ...|$|E
2500|$|When an {{unimplemented}} {{function is}} called the following <b>error</b> <b>message</b> is shown: ...|$|E
2500|$|The page {{displays}} [...] " [...] not found," [...] {{along with}} an <b>error</b> <b>message</b> with the text 'xss'.|$|E
5000|$|... #Caption: An {{example of}} the <b>error</b> <b>messages</b> the AARD would produce.|$|R
5000|$|The {{following}} <b>error</b> <b>messages</b> {{are commonly}} seen by modern computer users: ...|$|R
50|$|It should {{process a}} clear, easily understood, set of {{diagnostic}} <b>error</b> <b>messages.</b>|$|R
