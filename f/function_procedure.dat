52|1509|Public
2500|$|In computing, a {{parameter}} {{is defined}} as [...] "a reference or value that is passed to a <b>function,</b> <b>procedure,</b> subroutine, command, or program". [...] For example, {{the name of a}} file, (a parameter), is passed to a computer program, which then performs a specific function; that is, a program may be passed the name of a file on which it will perform the specific function.|$|E
5000|$|... in-line code {{versus the}} {{overheads}} of calling and {{returning from a}} <b>function,</b> <b>procedure,</b> or method containing the same statements ...|$|E
5000|$|Private (optional) [...] - [...] {{indicates}} that the <b>function</b> <b>procedure</b> is accessible only to other procedures in the module where it is declared.|$|E
50|$|It settles the <b>functioning</b> <b>procedure</b> of the Standing Committee {{and their}} tasks.|$|R
5000|$|The {{ability to}} support <b>functions,</b> <b>procedures</b> and {{commands}} {{associated with a}} specific invoking environment.|$|R
50|$|In {{computer}} programming, the routines (<b>functions,</b> <b>procedures,</b> methods) of strongly typed programming languages closely {{correspond to}} typed lambda expressions.|$|R
5000|$|Friend (optional) [...] - [...] {{used only}} in a class module. Indicates that the <b>Function</b> <b>procedure</b> is visible {{throughout}} the project, but not visible to a controller of an instance of an object.|$|E
5000|$|Public (optional) [...] - [...] {{indicates}} that the <b>function</b> <b>procedure</b> is accessible to all other procedures in all modules. If used in a module that contains an Option Private, the procedure is not available outside the project.|$|E
5000|$|In computing, a {{parameter}} {{is defined}} as [...] "a reference or value that is passed to a <b>function,</b> <b>procedure,</b> subroutine, command, or program". [...] For example, {{the name of a}} file, (a parameter), is passed to a computer program, which then performs a specific function; that is, a program may be passed the name of a file on which it will perform the specific function.|$|E
5000|$|The HLA Standard Library {{provides}} {{thousands of}} <b>functions,</b> <b>procedures,</b> and macros. While the list changes over time, as of mid-2010 for HLA v2.12, it included functions in these categories: ...|$|R
40|$|Computer Aided Engineering System (CAESY) {{software}} {{developed to}} provide means to evaluate methods {{for dealing with}} users' needs in computer-aided design of control systems. Interpreter program for performing engineering calculations. Incorporates features of both Ada and MATLAB. Designed to be flexible and powerful. Includes internally defined <b>functions,</b> <b>procedures</b> and provides for definition of <b>functions</b> and <b>procedures</b> by user. Written in C language...|$|R
50|$|SuperPascal is a block {{structured}} language, {{with the same}} basic syntax as Pascal. A program consists of a header, global variable definitions, <b>function</b> or <b>procedure</b> definitions and a main <b>procedure.</b> <b>Functions</b> and <b>procedures</b> consists of blocks, where a block {{is a set of}} statements. Statements are separated by semicolons, as opposed to languages like C or Java, where they are terminated by semicolons.|$|R
50|$|Good {{style is}} a {{subjective}} matter, and {{is difficult to}} define. However, there are several elements common to {{a large number of}} programming styles. The issues usually considered as part of programming style include the layout of the source code, including indentation; the use of white space around operators and keywords; the capitalization or otherwise of keywords and variable names; the style and spelling of user-defined identifiers, such as <b>function,</b> <b>procedure</b> and variable names; and the use and style of comments.|$|E
5000|$|Just as in {{standard}} mathematical usage, {{the argument is}} thus the actual input passed to a <b>function,</b> <b>procedure,</b> or routine, whereas the parameter is the variable inside {{the implementation of the}} subroutine. For example, if one defines the [...] subroutine as , then [...] are parameters, while if this is called as , then [...] are the arguments. Note that variables from the calling context can be arguments: if the subroutine is called as [...] then the variables [...] are the arguments, not only the values [...] See the Parameters and arguments section for more information.|$|E
50|$|The {{main idea}} of an RPC is to allow a local {{computer}} (client) to remotely call procedures on a different computer (server). The client and server use different address spaces, so parameters used in a <b>function</b> (<b>procedure)</b> call have to be converted, otherwise the values of those parameters could not be used, because pointers to parameters in one computer's memory would point to different data on the other computer. The client and server may also use different data representations, even for simple parameters (e.g., big-endian versus little-endian for integers). Stubs perform {{the conversion of the}} parameters, so a remote procedure call looks like a local function call for the remote computer.|$|E
50|$|<b>Functions</b> & <b>procedures</b> are {{supported}} in Brutus2D.|$|R
50|$|Modifications to the environment, such as {{painting}} grid cells, {{are used}} to store a runtime state. This shows the robot in its environment {{is directly related to}} 2D Turing machines. Since version 5.0, the language does allow the declaration of variables and <b>functions</b> (<b>procedures</b> that return values).|$|R
40|$|This paper {{investigates the}} use of Boolean {{techniques}} in a systematic study of cause-effect relationships. The model uses partially defined Boolean <b>functions.</b> <b>Procedures</b> are provided to extrapolate from limited observations, concise and meaningful theories to explain the effect under study, and to prevent (or provoke) its occurrencePeer reviewe...|$|R
40|$|Response {{function}} {{calculated from}} measurements by iterative deconvolution procedure. Report describes measurements made with tunable-diode-laser spectrometer and processing of measurement data to calculate response <b>function.</b> <b>Procedure</b> fast and simple {{enough to be}} used to make routine corrections for broadening in diode-laser spectrometers...|$|E
40|$|This {{bachelor}} {{thesis is}} devoted to the basic theoretical aspects of game theory, to the behavior of firms in oligopoly conditions and to the building of theory which describe behaviour in cooperative oligopoly games for Cournot's oligopoly. At this work are explained important definitions and they properties are demonstrated in the examples. Further work is focused on cooperative oligopoly games, describing their properties and defining a -characteristic <b>function.</b> <b>Procedure</b> of computing it and the description of some properties of cooperative oligopoly games are demonstrated on two examples...|$|E
40|$|Wind {{turbine blades}} play {{important}} roles in wind energy generation. The dynamic problems associated with wind turbine blades are formulated using radial basis functions. The radial basis <b>function</b> <b>procedure</b> is used to transform partial differential equations, which represent the dynamic behavior of wind turbine blades, into a discrete eigenvalue problem. Numerical results demonstrate that rotational speed significantly impacts the first frequency of a wind turbine blade. Moreover, the pitch angle does not markedly affect wind turbine blade frequencies. This work examines the radial basis functions for dynamic problems of wind turbine blade...|$|E
50|$|Note (4): In Drizzle {{the user}} codes <b>functions</b> and <b>procedures</b> in C++.|$|R
5000|$|Long method: a method, <b>function,</b> or <b>procedure</b> {{that has}} grown too large.|$|R
5000|$|... was {{originally}} single threaded but now has many multi-threaded <b>functions</b> and <b>procedures.</b>|$|R
40|$|We {{present a}} {{numerical}} approach, {{based on an}} optimized recursive Green's <b>function</b> <b>procedure,</b> for the simulation of the imaging process performed by scanning a device with a negatively biased probe while monitoring its conductance, or, as we propose in this contribution, its shot noise. We discuss a few examples, for an adiabatic quantum dot and for mesoscopic cavities, studied over a 200 Ã— 300 points discretization mesh. The effect of disorder associated with the random distribution of dopants is included {{in some of the}} simulations by means of a semi-analytical procedure for the evaluation of the screening from the 2 DEG...|$|E
40|$|Penalty {{function}} {{methods have}} several disadvantages. The main ones are as follows: (1) The methods are time-consuming. They~do require multiple solving of unconstrained minimization sub-problems; (2) Solution of minimization sub-problems becomes exceedingly cumbersome when the penalty coefficient increases, since a minimization function becomes ill-conditioned; (3) The usual penalty methods {{cannot be used}} for determining a solution with great accuracy. These methods are subject to numerical instabilities because the derivatives of the penalty functions increase without bound near the solution as computation proceeds. The methods suggested in this paper essentially simplify standard penalty <b>function</b> <b>procedure</b> and remove, to some extent, the first two shortcomings...|$|E
40|$|The control {{function}} approach (Heckman and Robb (1985)) {{in a system}} of linear simultaneous equations provides a convenient procedure to estimate one of the functions in the system using reduced form residuals from the other functions as additional regressors. The conditions on the structural system under which this procedure can be used in nonlinear and nonparametric simultaneous equations has thus far been unknown. In this note, we define a new property of functions called {{control function}} separability and show it provides a complete characterization of the structural systems of simultaneous equations in which the control <b>function</b> <b>procedure</b> is valid. ...|$|E
5000|$|... has {{separate}} namespaces for variables, <b>functions</b> and <b>procedures,</b> but no namespace hierarchy.|$|R
50|$|A {{programmer}} {{can define}} custom <b>functions</b> and <b>procedures</b> (called Subs); {{they can have}} up to 32 parameters. Both <b>functions</b> and <b>procedures</b> {{do not need to}} be declared before use. Parameters can be marked as optional, and they can also be initialized to default values. Each parameter can be specified to be passed by value (default) or by reference.|$|R
50|$|The structure, <b>functions,</b> and <b>procedures</b> of the {{parliament}} {{are based on the}} Westminster system.|$|R
40|$|We report {{integral}} {{cross sections}} for electron-impact excitation of the 4 [*] 2 P state in copper for incident electrons with energies {{in the range}} from threshold to 100 eV. Measurements, based on an optical excitation <b>function</b> <b>procedure,</b> are compared with coupled-channel and coupled-channel-optical method calculations that we have also performed as a part of this study. Agreement between our measurements and theory was generally only modest. The present measurements are also found to be in quite good accord with the early near-threshold integral cross sections of Flynn et al. and the higher energy measurements from Ismail and Teubner. Where possible, comparison of our data is also made with earlier theory...|$|E
40|$|By using Von Zeipel's {{generating}} <b>function</b> <b>procedure</b> the perturbing earth {{gravitational potential}} is averaged {{with respect to}} the fast variable (mean anomaly) and a set of 'fictitous' mean orbital elements which {{can be used as a}} long-term satellite orbit predictor is obtained. The set of elements is shown to be a function of the nonlinear square of the second zonal harmonic coefficient. It is found that the long-term orbit prediction using the 'fictitous' mean elements is as accurate as that using the osculating elements, but has a computing speed about two orders of magnitude faster. For short-term orbit predictions, the osculating elements approach must be used...|$|E
40|$|This {{work was}} {{supported}} by Kurtosis IngÃ©nierie in collaboration with Renault. Within the framework of fuzzy logic for pattern recognition, we propose a neural network based membership <b>function</b> <b>procedure.</b> The estimate is obtained as the output of a multilayer network trained to minimize a fuzziness measure of the concept to be learnt. This method is shown {{to be able to}} deal with probabilistic, resolutional and fuzzy uncertainty. Fuzziness estimation is also made possible in a better way than using predefined membership functions. We have successfully applied this approach to car behavior evaluation, where fuzzy classes are built on the basis of numerical information in relation with subjective expert evaluations. 1...|$|E
5000|$|First class <b>functions</b> or <b>procedures</b> (their {{mathematical}} foundations {{are called}} also [...] "Lambda calculus"), ...|$|R
40|$|Type logics are logics whose {{formulas}} {{are interpreted}} as types. For instance, A â†’ B {{is a type}} of <b>functions</b> (<b>procedures)</b> which send inputs of type A to outputs of type B, and AâŠ—B {{is a type of}} pairs (f, g) such that f is of type A and g is of type B. The scope of possible realizations is huge: from con...|$|R
50|$|Note (2): In Derby, H2, LucidDB, and CUBRID, users code <b>functions</b> and <b>procedures</b> in Java.|$|R
