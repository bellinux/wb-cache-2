71|151|Public
2500|$|For {{non-linear}} systems similar reasoning {{shows that}} the normal equations for an <b>iteration</b> <b>cycle</b> can be written as ...|$|E
5000|$|... #Caption: [...] A {{simplified}} {{version of}} a typical <b>iteration</b> <b>cycle</b> in agile project management ...|$|E
5000|$|For {{non-linear}} systems similar reasoning {{shows that}} the normal equations for an <b>iteration</b> <b>cycle</b> can be written as ...|$|E
30|$|First, one can {{realize that}} a tuple {{can be reduced to}} at most four integers. Assuming 32 -bit integers, a tuple can hence {{accommodate}} roughly 4 billion events (232), as many subformulæ and <b>iteration</b> <b>cycles,</b> and be serialized as a 12 -byte string.|$|R
30|$|Although {{this method}} is {{generally}} depicted stepwise and {{gives the impression that}} it is linear, it is definitely far from it. There is also a mutual influence between the different steps of the participatory backcasting approach following one another, and <b>iteration</b> <b>cycles</b> are likely to occur.|$|R
40|$|This paper {{reports on}} the design of a {{prototype}} VRLE (Virtual Reality Learning Environment) named VRMath. VRMath is an online application that utilises VR (Virtual Reality) technology combined with the power of a Logo-like programming language and hypermedia and the Internet to facilitate the learning of 3 -Dimensional (3 D) geometry concepts and processes. VRMath is being designed within the framework of a design-experiment (The Design-Based Research Collective, 2003) during which VRMath will evolve through a series of <b>iteration</b> <b>cycles</b> of design à enactment à reflection à redesign into an educational tool that will provide mathematics educators with new and more powerful ways of facilitating the construction of 3 D geometry knowledge. During these <b>iteration</b> <b>cycles,</b> in addition to many new ways about thinking and doing mathematics being identified, implications to inform the future design of this and other VRLEs also will emerge...|$|R
50|$|The {{first version}} of the iPhone became {{publicly}} available on June 29, 2007 in selected countries/markets. It was another 12 months before the iPhone 3G became available on July 11, 2008. Apple announced the iPhone 3GS on June 8, 2009, along with plans to release it later in June, July, and August, starting with the U.S., Canada and major European countries on June 19. This 12-month <b>iteration</b> <b>cycle</b> has continued with the iPhone 4 model arriving in similar fashion in 2010, a Verizon model was released in February 2011, and a Sprint model in October 2011, shortly after Jobs' death.|$|E
30|$|P(t) is the {{corresponding}} probability of each <b>iteration</b> <b>cycle,</b> p 0 is initial probability (different numbers for crossover, mutation, and cataclysm), t is current <b>iteration</b> <b>cycle,</b> and maxGen is max <b>iteration</b> <b>cycle.</b>|$|E
40|$|A {{computational}} technique, {{based on}} the integral solution of the full potential equation, has been developed for the solution of three-dimensional high-subsonic flows past wings at high angles of attack. The problem includes two sources of nonlinearities: a boundary oriented nonlinearity (separated flow roll up) and a region oriented nonlinearity (flow compressibility). The former is represented by a nonlinear vortex lattice while the latter is represented by a source distribution inside a finite volume. The solution is obtained by using double iteration cycles; a separated flow (wake) <b>iteration</b> <b>cycle</b> and a compressibility <b>iteration</b> <b>cycle.</b> The computational technique is applied to a delta wing. The {{results show that the}} technique is very promising and efficient...|$|E
40|$|The {{increasing}} {{demands for}} optical glass components, such as aspherical lenses, require flexible and economical production processes. In particular the high surface complexity {{in combination with}} high form accuracies will limit the usage of existing manufacturing technologies. High precision glass moulding technologies have great potential to fulfil the needs of an economical manufacturing process for complex shaped optical components. Due to the different material properties of glass and mould material the process chain is driven by empirical <b>iteration</b> <b>cycles</b> between mould making and moulding. Today two to three cycles are necessary to reach the final accuracies on the moulded parts. Numerical simulation can help to predict the final shape of the moulded part which leads to shortening or even elimination {{of the time and}} cost consuming <b>iteration</b> <b>cycles.</b> The paper presents first simulation results of precision glass moulding for the analysis of manufacturing effects during the precision moulding of glass lenses...|$|R
40|$|Abstract: This paper {{reports on}} the design of a {{prototype}} VRLE (Virtual Reality Learning Environment) named VRMath. VRMath is an online application that utilises VR (Virtual Reality) technology combined with the power of a Logo-like programming language and hypermedia and the Internet to facilitate the learning of 3 -Dimensional (3 D) geometry concepts and processes. VRMath is being designed within the framework of a design-experiment (The Design-Based Research Collective, 2003) during which VRMath will evolve through a series of <b>iteration</b> <b>cycles</b> of design enactment reflection redesign into an educational tool that will provide mathematics educators with new and more powerful ways of facilitating the construction of 3 D geometry knowledge. During these <b>iteration</b> <b>cycles,</b> in addition to many new ways about thinking and doing mathematics being identified, implications to inform the future design of this and other VRLEs also will emerge. There are many powerful ICT (Information Communication Technology) tools such as Logo (Clements &...|$|R
40|$|Extreme Programming (XP) was {{introduced}} {{as a new}} process model, which has three main activities in each XP iteration cycle: new design, error-fix, and refactoring. In an empirical study on two Java systems developed using an XP-like process, we found that new design seems to dominate the development effort throughout all <b>iteration</b> <b>cycles.</b> We {{also found that the}} evolutionary trends of all three activities agree with exceptions...|$|R
40|$|AbstractUsing only easily computable {{portions}} of certain ε-subdifferentials an implementable convergent algorithm for finding the minimizer of a non-differentiable convex program is given. At each <b>iteration</b> <b>cycle</b> certain projections are computed and corrected suitably. The negatives of these directions are feasible directions of strict descent for the objective function. The convergence of the algorithm is proved...|$|E
40|$|An {{iterative}} method {{has been developed}} for designing wing section contours corresponding to a prescribed subcritical distribution of pressure. The calculations are initialized by using a surface panel method to analyze a baseline wing or wing-fuselage configuration. A first-order expansion to the baseline panel method equations is then used to calculate a matrix containing the partial derivative of potential at each control point with respect to each unknown geometry parameter. In every <b>iteration</b> <b>cycle,</b> the matrix is used both to calculate the geometry perturbation and to analyze the perturbed geometry. The distribution of potential on the perturbed geometry is established by simple linear extrapolation from the baseline solution. The extrapolated potential is converted to pressure by Bernoulli's equation. Not only is {{the accuracy of the}} approach good for very large perturbations, but the computing cost of each complete <b>iteration</b> <b>cycle</b> is substantially less than one analysis solution by a conventional panel method...|$|E
30|$|Agile and SPL {{approaches}} promote collaboration [25]. Agile principles emphasise {{collaboration between}} customers and developers (agile manifesto), whereas SPL approaches expect collaboration between SPL asset builders and product developers [25]. Poort et al. [39] have discovered how emotional and interpersonal relationship challenges such as conflicts, trust {{and willingness to}} share knowledge significantly correlate with successful architectural knowledge-sharing and project success. Agile principles even encourage changes in requirements. Variation points allow a SPL to accept unanticipated changes, in addition to anticipated changes in requirements [20, 25]. The scope of a SPL defines those entities and projects that are {{within the context of}} a product line [15], whereas an agile project team works within an implicit project scope defined by the customer, yet the scope of each <b>iteration</b> <b>cycle</b> is explicit. Agile approaches emphasise the importance of producing working software early and frequently starting from the first <b>iteration</b> <b>cycle</b> [40]. Product development teams in a SPL produce working software early as well by assembling and configuring SPL assets [25].|$|E
40|$|In {{the early}} stages of {{building}} design, architects have to map functions to areas inside the building. These functions provide services to the future users of the building. In this work we develop two agent-based algorithms to find plausible examples of such layouts for architects to draw ideas from. These algorithms let the building’s users determine which layout is good and which one is not. In the first algorithm we let the function areas find positions inside the building and have the users evaluate them in <b>iteration</b> <b>cycles.</b> In the second one we let the users directly decide where a function-area should be and change previous decisions by again running several <b>iteration</b> <b>cycles.</b> We find that for a layout to be considered good by the users, the functional areas inside it need to somehow learn what the users like. With these two algorithms we show {{that it is possible to}} find designs by letting agents make decisions in order to optimize their own happiness (or the happiness of their users), instead of having an entity outside the system, that decides how things should be and how to make all the users happy...|$|R
40|$|The {{objective}} {{of this study is}} to investigate the accuracy and computational efficiency of two commonly used formulations for performing the geometrically nonlinear thermal analysis of plane framed structures. The formulations considered are the followings: the Beam-Column formulation and the updated Lagrangian version of the finite element formulation that has been adopted in the commercially well-known software SAP 2000. These two formulations are used to generate extensive numerical data for three plane frame configurations, which are then compared to evaluate the performance of the two formulations. The Beam-Column method is based on an Eulerian formulation that incorporates the effects of large joint displacements. In addition, local member force-deformation relationships are based on the Beam-Column approach that includes the axial strain, flexural bowing, and thermal strain. The other formulation, the SAP 2000, is based on the updated Lagrangian finite element formulation. The results for nonlinear thermal responses were generated for three plane structures by these formulations. Then, the data were compared for accuracy of deflection responses and for computational efficiency of the Newton-Raphson <b>iteration</b> <b>cycles</b> required for the thermal analysis. The results of this study indicate that the Beam-Column method is quite efficient and powerful for the thermal analysis of plane frames since the method is based on the exact solution of the differential equations. In comparison to the SAP 2000 software, the Beam-Column method requires fewer <b>iteration</b> <b>cycles</b> and fewer elements per natural member, even when the structures are subjected to significant curvature effects and to restrained support conditions. The accuracy of the SAP 2000 generally depends on the number of steps and/or the number of elements per natural member (especially four or more elements per member may be needed when structure member encounters a significant curvature effect). Succinctly, the Beam-Column formulation requires considerably fewer elements per member, fewer <b>iteration</b> <b>cycles,</b> and less time for thermal analysis than the SAP 2000 when the structures are subjected to significant bending effects...|$|R
40|$|This paper(1) {{takes a look}} at how XP {{and other}} agile {{practices}} can improve a software process for the development of avionics software. Developers of mission critical airborne software are heavily constrained by the RTCA DO- 178 B regulations [8]. These regulations impose strict rules regarding traceability and documentation that make it extremely hard to employ an iterative software development process. In particular, the extra validation overhead increases the time spent on small <b>iteration</b> <b>cycles</b> (for example, a bug-fix) to several weeks. status: publishe...|$|R
40|$|Abstract: In {{multiview}} video analysis, disparity estimation {{and image}} segmentation are important tasks. This paper presents an iterative method that uses segmentation and disparity information {{in order to}} create a synthesized predictive video. The frames are initially segmented and the segments applied in a disparity estimation process. Following an error analysis is made searching for incorrect disparity values. The result disparity map is used to improve the segmentation, initiating another <b>iteration</b> <b>cycle,</b> or to create the intermediate synthesized view...|$|E
30|$|During optimization, {{the camera}} {{exposure}} time {{was set to}} the lowest possible value of 3.021  ms to reduce the time per <b>iteration</b> <b>cycle.</b> For the PopulationSize of 20, each generation took approximately 300  ms including mask loading to the SLM, SLM response time, camera exposure time, signal evaluation, ranking and creation of the next generation. The illumination intensities were low and varied between 0.5 and 1  μW at the back focal plane of the objective lens providing just enough initial signal for an efficient optimization.|$|E
30|$|According to Nielsen, {{three to}} five experts will find 60 – 70 % of the problems, with no {{improvements}} {{for more than ten}} evaluators (Nielsen 1994). However, this statement has repeatedly caused disputes; research provides support (Virzi 1992) as well as contrary findings (Spool and Schroeder 2001; Woolrych and Cockton 2001). In a series of studies, Molich and colleagues {{come to the conclusion that}} 4 – 6 experts are sufficient, but only for one <b>iteration</b> <b>cycle</b> and only with real experts (Molich and Dumas 2008).|$|E
40|$|A new {{criterion}} of optimality in Markov decision processes is discussed. The {{objective is to}} maximize the average net revenue per unit of physical output (or input). The criterion is relevant in some production models where a limitation is imposed on the physical output (production quota) or on an input factor (scarce resources). An obvious application is in dairy cow replacement models under milk quotas. <b>Iteration</b> <b>cycles</b> are presented for ordinary com-pletely ergodic Markov decision processes and for hierarchic Markov pro-cesses. The consequences of the new criterion are illustrated by a numerical example...|$|R
3000|$|Both FBP and wSIRT {{methods have}} been examined, and {{displayed}} a similar trend with more pronounced fluctuations for the iterative method. The total number of <b>iteration</b> <b>cycles</b> in the iterative approach was fixed to 50, and the relaxation parameter α was set to 2 (see Eq. (15) in [...] "Appendix 3 "). With these parameters, the relative error in the projections ended up around 5.0 × 10 − 4. We note the contrast enhancement between FBP and wSIRT, with clearly less white fringes around the dark features in the latter case.|$|R
40|$|By an {{increasing}} distinction {{of the processes}} in the product development and the heterogeneous teams arising from it, the creation for an efficient co-ordination and cooperation infrastructure gets still more important. This efficient structures are created by the implementation of suitable communication tools. However, forms must be found as job sequences can be defined and actions aroused in this multi-user environment. For thisspeech acts, which are a natural from of the human interaction serve. In manufactoring processes <b>iteration</b> <b>cycles</b> are minimized and with that shortenings in time and increases of qualities can be reached...|$|R
40|$|AbstractUsing {{only certain}} easily computable ε-subgradients, an {{implementable}} convergent algorithm for finding the minimizer of a non-differentiable objective function {{subject to a}} finite number of linear constraints in d-dimensional space is given. The particular objective function consists of the pointwise maximum of a finite system of pseudoconvex functions. At each <b>iteration</b> <b>cycle</b> certain projections are computed. The negatives of these directions are feasible directions of strict descent for the objective function. The convergence of the algorithm is proved. The algorithm has also been numerically tested...|$|E
40|$|As {{companies}} {{compete to}} gain market share, increase profits and affect growth they often turn to concurrent engineering {{in an effort}} to bring new products to the market more quickly. Despite many anecdotal success stories, implementation of concurrent engineering can often prove difficult. As the pressure to bring new products to market increases, companies often compress their design <b>iteration</b> <b>cycle</b> times {{in an effort to}} develop products more quickly. In many cases, design cycles may overlap creating situations where learning opportunities (e. g. through testing) are missed and/or ignored. More perversely, compressing design iteration cycles can cause the creation of "phantom errors" and unnecessary rework as concurrent design activities iterate at different speeds. In this research, I use a system dynamics approach to develop a stylized simulation model of the design-build-test <b>iteration</b> <b>cycle</b> to explore the effects of cycle timing on learning. Specifically, I look at the frequency and timing of integration (build) test events and their effect on new product delivery time, quality, and development cost. This research adds to the existing literature in new product development, concurrent engineering, and system dynamics. Ultimately, the results serve to inform new product development project managers of the implications of design iteration timing on project performance and assist in the scheduling of integration events. by Daniel J. McCarthy. Thesis (Ph. D.) [...] Massachusetts Institute of Technology, Sloan School of Management, 2008. Includes bibliographical references (p. 288 - 290) ...|$|E
40|$|A new {{approach}} for {{the synthesis of}} thinned uniformly spaced linear arrays featuring a minimum sidelobe level is presented. The method {{is based on the}} iterative Fourier technique to derive element excitations from the prescribed array factor using successive forward and backward Fourier transforms. Array thinning is accomplished by setting the amplitudes of the largest element excitations to unity and the others to zero during each <b>iteration</b> <b>cycle.</b> The number of turned ON elements depends on the array filling factor and the total count of element positions. The effectiveness of the new method will be demonstrated for various 200 -element linear arrays and compared with published results. © 2008 IEEE...|$|E
40|$|In {{this paper}} the ongoing {{work on a}} cross-platform, cross-device {{co-operation}} software, that is being developed in the basic research project "Rapid Product Development" (funded by the Deutsche Forschungsgesellschaft), is presented. Rapid Product Development (RPD) is characterised by a target-oriented use of prototypes, rapid <b>iteration</b> <b>cycles</b> and the employment of self-organising, often distributed, teams. The demand for co-ordination and communication between these development teams is typically very high. Objective of the software development is to reflect a "real life" RPD working environment and support distributed teams in the development process...|$|R
40|$|Language {{engineering}} is software engineering concerned with computer languages. Agile language {{engineering is}} the result of adapting agile principles to language engineering. An agile language engineering process is geared to ever changing requirements and fosters higher language quality, software quality, and developer productivity. It provides short <b>iteration</b> <b>cycles,</b> intensive user integration, control over frequent changes, and continuous delivery of valuable language tools. In this paper, we point out technological premises for agile language engineering; and we sketch how they are met by well-known as well as upcoming techniques and tools from language engineering...|$|R
40|$|This paper {{presents}} a fast and low cost context adaptive binary arithmetic encoder for H. 264 /MPEG- 4 AVC video coding standard through both algorithm level and architecture level optimizations. First in the algorithm level, we process the binarization and context generation in parallel {{to reduce the}} encoding <b>iteration</b> <b>cycles</b> {{to three or four}} cycles from five cycles in the previous design. Second, in the architecture level, we reduce the cycles of renormalization loops by employing one-skipping and bit-parallelism, and save hardware cost of arithmetic coder by merging three different modes. The implemented design shows that it can achieve the 333 MHz frequency with only 13. 3 K gate count...|$|R
40|$|An {{efficient}} and rapid heuristic local search method is dealt with, {{which can be}} applied for a wide class of nonlinear functions. The algorithm does not use gradients of the objective, and can be implemented in a very simple way. As it is demonstrated, its computational requirements are also low. The method is working using a coordinate-wise search step in each <b>iteration</b> <b>cycle.</b> Our implementation is described, shown, and analyzed through some test functions of the literature. The illustrative numerical study is attached, {{as well as a}} comparison with the well-known gradient method. The simplicity and easy-to-program nature of the method makes it {{to be able to be}} used in education...|$|E
40|$|A {{new method}} for {{starting}} the iterative innovation process {{from the market}} side based on a sociological trend has been developed. It eliminates the traditional difference between the innovators and the sociological group that carries this trend, {{which can only be}} achieved by combining real-world innovation with innovation education. The method for market need discovery is presented as a step-by-step process with detailed reasoning, followed by a real-world example that details the outcomes at every step along the way. The example concludes with {{a detailed description of the}} outcome after the first innovation <b>iteration</b> <b>cycle.</b> The richness of the resulting concept demonstrates that an innovation process can be successfully started from the market side via the proposed method...|$|E
40|$|A {{tabu search}} {{algorithm}} is proposed for finding the Pareto solutions of multiobjective optimal design problems. In this paper, the contact theorem is {{used to evaluate the}} Pareto solutions. The ranking selecting approach and the fitness sharing function are also introduced to identify new current points to begin every <b>iteration</b> <b>cycle.</b> Detailed numerical results are reported in this paper to demonstrate the power of the proposed algorithm in ensuring uniform sampling and obtaining the Pareto optimal front of the multiobjective design problems. The most efficient method of implementing the proposed algorithm is also discussed. Department of Electrical EngineeringIndustrial CentreAuthor name used in this publication: S. L. HoAuthor name used in this publication: H. C. Won...|$|E
40|$|The well {{developed}} surface panel method is extended {{by adding a}} volume integral term allowing calculation of the full effect of compressibility. The full effect of compressibility is calculated by using mixed type finite difference scheme consistent with the mixed nature of transonic flow. The solution is obtained through successive <b>iteration</b> <b>cycles</b> for subcritical flows and for critical flows the solution is obtained through satisfying the Rankine-Hugoniot relations across the captured shock {{in addition to the}} captured shock. The method is applied to airfoils in subcritical and critical flows and the results are in good agreement with the experimental data and finite-difference solutions of the full-potential and Euler equations...|$|R
30|$|Step 6 : {{update the}} <b>cycle</b> <b>iteration</b> index, i[*]=[*]i[*]+[*] 1, and then, go to step 3.|$|R
30|$|However, {{it is not}} {{desired to}} apply agility, {{including}} numerous short <b>iteration</b> <b>cycles,</b> to all aspects. The common nominator for company projects lies in the technical infrastructure, in multi-channel architecture, which is proven, but inflexible. The interviewed infrastructure architect has an opinion that infrastructure {{is not to be}} developed using agile methods. The incrementality and iterativity are effective for business requirements, but harmful for interfaces between projects and technical infrastructure. These interfaces should be known and fixed, and remain the same, not only during a project, but also for the entire application life-cycle. On the other hand, there have been needs to update the system product concept and architectural guidelines during project realisation.|$|R
