17|225|Public
25|$|The flist program {{provided}} {{a list of}} files in the user's minidisk, and allowed sorting by any <b>file</b> <b>attribute.</b> The file attributes could be passed to scripts or function-key definitions, making it simple to use flist as part of CMS EXEC, EXEC 2 or XEDIT scripts.|$|E
2500|$|The Windows Search service {{provides}} the Notifications API component to allow applications to [...] "push" [...] changed items that need indexing to the Windows Search indexer. Applications use the component {{to supply the}} URIs of the items {{that need to be}} indexed, and the URIs are written to the Gather Queue, where they are read off by the indexer. Microsoft Office Outlook 2007, as well as Microsoft Office OneNote 2007 use this ability to index the items managed by them and use Windows Search queries to provide the in-application searching features. The internal USN Journal Notifier component of Windows Search also uses the Notifications API, monitoring the Change Journal in an NTFS volume to keep track of files that have changed on the volume. If the file is in a location indexed by Windows Search and does not have the FANCI (<b>File</b> <b>Attribute</b> Not Content Indexed) attribute set, the Windows Search service is notified of its path via the Notification API.|$|E
5000|$|The archive bit is a <b>file</b> <b>attribute</b> used by Microsoft {{operating}} systems, by OS/2 and by AmigaOS. Typically {{its state}} indicates {{whether or not}} the file has been backed up, in other words archived.|$|E
50|$|Lists {{the basic}} <b>file</b> <b>attributes</b> available.|$|R
5000|$|For DFM, storage {{management}} and user-defined <b>file</b> <b>attributes.</b>|$|R
50|$|Linux kernel 2.6.35 {{added support}} for {{extended}} <b>file</b> <b>attributes.</b>|$|R
5000|$|In MS-DOS {{and other}} DOS systems, file {{directory}} entries include a Hidden <b>File</b> <b>attribute</b> which is manipulated using the attrib command. Use the command line command [...] {{to display the}} files with the attribute of hidden.|$|E
50|$|Files and {{directories}} are differentiated {{only by a}} <b>file</b> <b>attribute</b> {{that indicates}} its nature (similar to Unix). The attributes of a file are stored in the directory entry that describes the file, and optionally in the extended attribute record.|$|E
50|$|As {{the archive}} bit is a <b>file</b> <b>attribute</b> and {{not part of}} the file itself, the {{contents}} of the file are unrelated to the status of the archive bit and remain unchanged even if the setting of the archive bit is changed.|$|E
5000|$|Extended <b>file</b> <b>attributes</b> (EA), Access control list (ACL) support ...|$|R
5000|$|... lsattr : list <b>file</b> <b>attributes</b> on a Linux second {{extended}} {{file system}} ...|$|R
5000|$|... {{additional}} <b>file</b> <b>attributes</b> in many replies, {{to avoid}} the need to re-fetch them; ...|$|R
50|$|The flist program {{provided}} {{a list of}} files in the user's minidisk, and allowed sorting by any <b>file</b> <b>attribute.</b> The file attributes could be passed to scripts or function-key definitions, making it simple to use flist as part of CMS EXEC, EXEC 2 or XEDIT scripts.|$|E
5000|$|The ext4 {{file system}} does not honor the [...] "secure deletion" [...] <b>file</b> <b>attribute,</b> which is {{supposed}} to cause overwriting of files upon deletion. A patch to implement secure deletion was proposed in 2011, but did not solve the problem of sensitive data ending up in the file system journal.|$|E
50|$|Upon {{download}} of an application, {{a particular}} extended <b>file</b> <b>attribute</b> ("quarantine flag") {{can be added}} to the downloaded file. This attribute is added by the application that downloads the file, such as a web browser or email client, but is not added by torrent downloaders, such as Transmission (BitTorrent client), nor Bit Torrent. This behavior is disabled by default for third-party applications and developers need to opt into it. The system can also force this behavior upon individual applications.|$|E
50|$|DirSync Pro {{preserves}} (synchronizes) DOS <b>file</b> <b>attributes,</b> POSIX <b>file</b> permissions and ownerships {{and supports}} symbolic links.|$|R
5000|$|In Linux, the [...] and [...] {{commands}} {{can be used}} {{to change}} and display <b>file</b> <b>attributes.</b>|$|R
50|$|This version, copyrighted 1984 but dated Monday, January 21, 1985, {{included}} Directory Sort, Disk Test, <b>File</b> <b>Attributes,</b> <b>File</b> Find, File Size, Line Print, List Directories, System Information, Text Search, Volume Label, Wipe Disk and Wipe File.|$|R
50|$|NetWare 2.x {{implemented}} {{a number of}} features inspired by mainframe and minicomputer systems that were not available in other operating systems of the day. The System Fault Tolerance (SFT) features included standard read-after-write verification (SFT-I) with on-the-fly bad block re-mapping (at the time, disks did not have that feature built in) and software RAID1 (disk mirroring, SFT-II). The Transaction Tracking System (TTS) optionally protected files against incomplete updates. For single files, this required only a <b>file</b> <b>attribute</b> to be set. Transactions over multiple files and controlled roll-backs were possible by programming to the TTS API.|$|E
5000|$|Several Microsoft {{operating}} systems provided {{a set of}} modifiable file characteristics that could be accessed and changed through a low-level system call. For example, as of release 4.0, the first six bits of the <b>file</b> <b>attribute</b> byte indicated {{whether or not a}} file was read-only (as opposed to writeable), hidden, a system file, a volume label, a subdirectory, or if the file had been [...] "archived" [...] (with the bit being set if the file had changed since the last use of the BACKUP command). However, initial releases of the operating system did not provide user-level method for reading or changing these values.|$|E
5000|$|System Integrity Protection protects {{system files}} and {{directories}} that are flagged for protection. This happens either by adding an extended <b>file</b> <b>attribute</b> to a file or directory, {{by adding the}} file or directory to /System/Library/Security/rootless.conf or both. Among the protected directories are: /System, /bin, /sbin, /usr (but not /usr/local). The symbolic links from /etc, /tmp and /var to /private/etc, /private/tmp and /private/var are also protected, although the target directories are not themselves protected. Most preinstalled Apple applications in /Applications are protected as well. The kernel stops all processes without specific entitlements from modifying the permissions and contents of flagged files and directories and also prevents code injection, runtime attachment and DTrace with respect to protected executables.|$|E
50|$|Richacls use ext4 {{extended}} <b>file</b> <b>attributes</b> (xattrs) {{to store}} ACLs. Entries in ACL are called ACE (Access Control List Entry).|$|R
50|$|As with <b>file</b> <b>{{attributes}},</b> tasks have attributes as well, such as {{the task}} priority (which is assigned at compile time or execution time, or can be changed while the task is running), processor time, wait time, status, etc. These task attributes can be accessed programmatically as can <b>file</b> <b>attributes</b> of <b>files.</b> The parent task is available programmatically as a task attribute that is of type task. For example, 'myself.initiator.name' gives {{the name of the}} process that initiated the current process.|$|R
50|$|By default, {{the file}} {{is located in}} the root {{directory}} of the bootable drive/partition (normally C:\) and has the hidden, read-only, and system <b>file</b> <b>attributes</b> set.|$|R
5000|$|The Windows Search service {{provides}} the Notifications API component to allow applications to [...] "push" [...] changed items that need indexing to the Windows Search indexer. Applications use the component {{to supply the}} URIs of the items {{that need to be}} indexed, and the URIs are written to the Gather Queue, where they are read off by the indexer. Microsoft Office Outlook 2007, as well as Microsoft Office OneNote 2007 use this ability to index the items managed by them and use Windows Search queries to provide the in-application searching features. The internal USN Journal Notifier component of Windows Search also uses the Notifications API, monitoring the Change Journal in an NTFS volume to keep track of files that have changed on the volume. If the file is in a location indexed by Windows Search and does not have the FANCI (<b>File</b> <b>Attribute</b> Not Content Indexed) attribute set, the Windows Search service is notified of its path via the Notification API.|$|E
40|$|A {{presentation}} covering work {{carried out}} during summer 2012 to improve ARSF holdings at NEODC. It explains work carried outto improve the ARSF metadata holdings at the NEODC by improving information held on per flight. Scripts used to ingest ATM data into the NEODC archive {{and to create}} preview images of the ATM data are explained. Additional steps explaining the preparation of <b>file</b> <b>attribute</b> information on specific flights for use in CEDA's <b>File</b> <b>Attribute</b> Catalogue (CEDA FAtCat) are also explained...|$|E
40|$|A <b>file</b> <b>attribute</b> is a {{user defined}} pair {{associated}} with a file. We explore the idea of extending a file system to contain dynamic per-file attributes. This paper has two goals: first, it describes our implementation of an attribute file system overlay, in which the attribute functionality is provided as a user-level library and the system calls are modified to provide a seamless environment to users and applications. We compare the performance of our implementation under various scenarios, and we modify several applications to demonstrate the implications and benefits of customizable file attributes. Second, we explore the use of file attributes as a mechanism for approximating full file-content search. Our approach is to define a file-type-independent attribute format in which searchable data is stored, allowing for simple, type-agnostic indexing and search tools to be used. Preliminary performance and functionality tests indicate that this technique shows promise: searchable indexes may be built and searched with small disk-space and cpu-time overhead. 1...|$|E
5000|$|Some {{attributes}} (such as {{the preferred}} filename, the basic <b>file</b> <b>attributes)</b> cannot be made non-resident. For non-resident attributes, their allocation map must fit within MFT records.|$|R
50|$|By default, {{the file}} {{is located in}} the root {{directory}} of the bootable drive/partition (normally C:\ for hard disks) and has the hidden, read-only, and system <b>file</b> <b>attributes</b> set.|$|R
50|$|Some batch rename {{software}} {{can do more}} than just renaming filenames. Features include changing the dates of files and changing the <b>file</b> <b>attributes</b> (such as the write protected attribute).|$|R
40|$|This paper {{presents}} the results of simulating file name and attribute caching on client machines in a distributed file system. The simulation used trace data gathered on a network of about 40 workstations. Caching was found to be advantageous: a cache on each client containing just 10 directories had a 91 % hit rate on name lookups. Entry-based name caches (holding individual directory entries) had poorer performance for several reasons, resulting in a maximum hit rate of about 83 %. <b>File</b> <b>attribute</b> caching obtained a 90 % hit rate with a cache on each machine of the attributes for 30 files. The simulations show that maintaining cache consistency between machines is not a significant problem; only 1 in 400 name component lookups required invalidation of a remotely cached entry. Process migration to remote machines had little effect on caching. Caching was less successful in heavily shared and modified directories such as /tmp, but there weren't enough references to /tmp overall to affect t [...] ...|$|E
40|$|The various {{open-source}} {{data processing}} workflows that were {{integrated into the}} msCompare framework all use their own internal data formats to transfer information between modules. To allow communication between feature detection/quantification, and alignment/matching modules of the different tools, two generic XML formats for the FeatureList and the FeatureMatrix were developed to store feature lists along with matched quantitative feature matrices (Figure 1 a, b). The main aim of the developed formats is to store all {{information provided by the}} integrated programs, making conversion between the different formats possible and allowing easy integration of new modules from other programs. The FeatureList XML format (Figure S 7 in supplementary material) starts with a Data element, which has a data <b>file</b> <b>attribute</b> containing the link to the original mzXML file that was used to generate the feature list. The Data node has one FeatureList child node, which contains one or more Feature nodes. Each feature node represents a detected and quantified feature in the raw LC-MS data and has an AttributeList and a HullPointList child node. The HullPointList node may have zero or more HullPoint child nodes. The HullPoint element has one or more Attribute nodes, which have two attributes, value and name. The following names are used within msCompare to define the properties of a HullPoint: retentionTime to store the retention time in minutes, mass to store the mass to charge rati...|$|E
5000|$|<b>File</b> <b>attributes</b> {{are limited}} to a single bit; when set, an [...] appears {{to the right of}} the file's name in the catalogue, and the file may not be altered, {{overwritten}} or deleted.|$|R
50|$|A set of patches to the GNU Core Utilities {{package to}} make it aware of Smack {{extended}} <b>file</b> <b>attributes.</b> A set of similar patches to Busybox were also created. SMACK does not require user-space support.|$|R
3000|$|... getattr(path) List <b>attributes</b> for the <b>file</b> or folder {{indicated}} by the path. FFS will return the actual <b>file</b> <b>attributes,</b> with the attributes at the highest layer taking precedence if the path exists {{in more than one}} layer.|$|R
5000|$|... is a Unix {{system call}} that returns <b>file</b> <b>attributes</b> about an inode. The {{semantics}} of [...] vary between operating systems. As an example, Unix command [...] uses this system call to retrieve information on files that includes: ...|$|R
