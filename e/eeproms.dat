87|698|Public
25|$|As mentioned, one {{variant of}} SPI uses single {{bidirectional}} data line (slave out/slave in, called SISO) {{instead of two}} unidirectional ones (MOSI and MISO). This variant is restricted to a half duplex mode. It tends {{to be used for}} lower performance parts, such as small <b>EEPROMs</b> used only during system startup and certain sensors, and Microwire. Few SPI master controllers support this mode; although it can often be easily bit-banged in software.|$|E
2500|$|Measurements of most {{types of}} {{electronic}} memory such as RAM and ROM are given using customary binary prefixes (kilo, mega, and giga). [...] This includes some flash memory, like <b>EEPROMs.</b> For example, a [...] "512-megabyte" [...] memory module is 512×220 bytes (512 × , or [...] ).|$|E
2500|$|Hardware {{designers}} later developed <b>EEPROMs</b> {{with the}} erasure region broken up into smaller [...] "fields" [...] {{that could be}} erased individually without affecting the others. Altering {{the contents of a}} particular memory location involved copying the entire field into an off-chip buffer memory, erasing the field, modifying the data as required in the buffer, and re-writing it into the same field. This required considerable computer support, and PC-based EEPROM flash memory systems often carried their own dedicated microprocessor system. Flash drives are more or less a miniaturized version of this.|$|E
50|$|To read {{starting}} {{at a particular}} address in the <b>EEPROM,</b> a combined message is used. After a START, the master first writes that chip's bus address with the direction bit clear (write) and then the two bytes of <b>EEPROM</b> data address. It then sends a (repeated) START and the <b>EEPROM's</b> bus address with the direction bit set (read). The <b>EEPROM</b> will then respond with the data bytes beginning at the specified <b>EEPROM</b> data address — a combined message: first a write, then a read. The master issues an ACK after each read byte except the last byte, and then issues a STOP. The <b>EEPROM</b> increments the address after each data byte transferred; multi-byte reads can retrieve the entire contents of the <b>EEPROM</b> using one combined message.|$|R
50|$|Operation of a {{parallel}} <b>EEPROM</b> {{is simple and}} fast when compared to serial <b>EEPROM,</b> but these devices are larger due to the higher pin count (28 pins or more) and have been decreasing in popularity in favor of serial <b>EEPROM</b> or flash.|$|R
50|$|Before {{entering}} {{a program to}} volatile memory {{with the intention of}} saving this program to <b>EEPROM</b> memory, the <b>EEPROM</b> program space to be saved to must be cleared first, which clears the volatile memory as well as the selected area of the <b>EEPROM</b> memory.|$|R
50|$|<b>EEPROMs</b> are {{organized}} as arrays of floating-gate transistors. <b>EEPROMs</b> can be programmed and erased in-circuit, by applying special programming signals. Originally, <b>EEPROMs</b> {{were limited to}} single byte operations which made them slower, but modern <b>EEPROMs</b> allow multi-byte page operations. It also has a limited life for erasing and reprogramming, now reaching a million operations in modern <b>EEPROMs.</b> In an EEPROM that is frequently reprogrammed while the computer is in use, {{the life of the}} EEPROM is an important design consideration.|$|E
50|$|In October 2006, a {{group of}} Dutch hackers, {{including}} Rop Gonggrijp, showed how similar machines to the ones purchased in Ireland could be modified by replacing the <b>EEPROMs</b> with Nedap -Firmware with <b>EEPROMs</b> with their own firmware.|$|E
5000|$|EEPROM: various {{manufacturers}} like ST Microelectronics or NXP offer <b>EEPROMs</b> readable via ISO15693 ...|$|E
50|$|These parts don't {{have any}} {{internal}} <b>EEPROM</b> or ROM, thus require an external <b>EEPROM</b> or ROM {{to hold the}} firmware.|$|R
50|$|Since {{the number}} of writes to <b>EEPROM</b> is limited Atmel {{specifies}} 100,000 write cycles in their datasheets a well designed <b>EEPROM</b> write routine should compare the contents of an <b>EEPROM</b> address with desired contents and only perform an actual write if the contents need to be changed.|$|R
50|$|Chipset-independent {{reading and}} writing of SPD {{information}} is done by accessing the memory's <b>EEPROM</b> directly with <b>eeprom</b> programmer hardware and software.|$|R
5000|$|One {{specific}} {{example is}} the 24c32 type EEPROM, which uses two request bytes that are called Address High and Address Low. (Accordingly, these <b>EEPROMs</b> are not usable by pure SMBus hosts, which only support single-byte commands or addresses.) These bytes are used to address bytes within the 32 kbit (4 kB) supported by that EEPROM; the same two-byte addressing is also used by larger <b>EEPROMs,</b> such as 24c512 ones storing 512 kbits (64 kB). Writing and reading data to these <b>EEPROMs</b> uses a simple protocol: the address is written, and then data is transferred {{until the end of}} the message. (That data transfer part of the protocol also makes trouble for SMBus, since the data bytes are not preceded by a count, and more than 32 bytes can be transferred at once. I²C <b>EEPROMs</b> smaller than 32 kbit, such as 2 kbit 24c02 ones, are often used on SMBus with inefficient single-byte data transfers.) ...|$|E
5000|$|Ability to {{implement}} self-calibration algorithms within the sensor itself and use low-cost <b>EEPROMs</b> for information storage ...|$|E
5000|$|Smaller ZIF sockets are {{commonly}} used in chip-testing and programming equipment, e.g., programming and testing on <b>EEPROMs,</b> Microcontrollers, etc.|$|E
5000|$|Each <b>EEPROM</b> device {{typically}} {{has its own}} set of OP-Code instructions {{mapped to}} different functions. Common operations on SPI <b>EEPROM</b> devices are: ...|$|R
50|$|Almost all AVR {{microcontrollers}} have internal <b>EEPROM</b> for semi-permanent data storage. Like flash memory, <b>EEPROM</b> {{can maintain}} its contents when electrical power is removed.|$|R
40|$|Java 智能卡已经被广泛应用于金融、通信等安全性要求很高的领域。但是受限于当前智能卡的硬件资源，特别是多应用智能卡的流行，卡片的存储资源越来越受到重视， Java 卡虚拟机的具体实现方式和相关机制也严重影响了卡片的执行效率。通过分析 Sun 公司 Java 卡规范算法，总结出现有算法的一些缺陷，对 <b>EEPROM</b> 的结构重新设计，提出一种带碎片整理的 <b>EEPROM</b> 存储管理算法。 Java {{smart card}} {{is widely used}} in the highly {{security}} fields such as bank, social security etc. Because the hardware resources of the smart card are limited, and especially the multi-application smart card is popular, the card’s storage resources have been paid more and more attention. The implementations and related mechanisms of Java Card virtual machine are also seriously affecting the efficient of the card. This paper analyzes the management methods that Sun Inc. has given of the Java Card’s <b>EEPROM,</b> finds the disadvantages of the existing methods, redesigns the <b>EEPROM</b> structure, and at last designs a new management algorithm that include <b>EEPROM’s</b> defragmentation. </span...|$|R
5000|$|Reading {{configuration}} {{data from}} SPD <b>EEPROMs</b> on SDRAM, DDR SDRAM, DDR2 SDRAM memory sticks (DIMM) and other stacked PC boards ...|$|E
5000|$|... (SPD <b>EEPROMs</b> also {{respond to}} I²C {{addresses}} 0x30-0x37 {{if they have}} not been write protected, and an extension uses addresses 0x18-0x1F to access an optional on-chip temperature sensor.) ...|$|E
50|$|Newer {{non-volatile}} memory {{technologies such as}} FeRAM and MRAM are slowly replacing <b>EEPROMs</b> in some applications, but are expected to remain {{a small fraction of}} the EEPROM market for the foreseeable future.|$|E
5000|$|<b>EEPROM</b> - Electrically Erasable Programmable Read-Only Memory technology. Can be erased, even {{in plastic}} packages. Some {{but not all}} <b>EEPROM</b> devices can be {{in-system}} programmed. CMOS.|$|R
2500|$|Although {{flash memory}} is {{technically}} {{a type of}} <b>EEPROM,</b> the term [...] "EEPROM" [...] is generally used to refer specifically to non-flash <b>EEPROM</b> which is erasable in small blocks, typically bytes. Because erase cycles are slow, the large block sizes used in flash memory erasing give it a significant speed advantage over non-flash <b>EEPROM</b> when writing large amounts of data. , flash memory costs much less than byte-programmable <b>EEPROM</b> and had become the dominant memory type wherever a system required {{a significant amount of}} non-volatile solid-state storage.|$|R
50|$|In 1993, the {{introduction}} of <b>EEPROM</b> memory allowed microcontrollers (beginning with the Microchip PIC16x84) to be electrically erased quickly without an expensive package as required for EPROM, allowing both rapid prototyping, and In System Programming. (<b>EEPROM</b> technology had been available prior to this time, but the earlier <b>EEPROM</b> was more expensive and less durable, making it unsuitable for low-cost mass-produced microcontrollers.) The same year, Atmel introduced the first microcontroller using Flash memory, a special type of <b>EEPROM.</b> Other companies rapidly followed suit, with both memory types.|$|R
50|$|Minimizing {{the number}} of writes is useful when making writes to some huge data set is very expensive, such as with <b>EEPROMs</b> like Flash memory where each write reduces the {{lifespan}} of the memory.|$|E
5000|$|Also, PROMs (programmable ROMs), EPROMs (ultraviolet-{{erasable}} PROMs) and <b>EEPROMs</b> (electrically erasable PROMs) {{are available}} {{that can be}} programmed using a standard PROM programmer without requiring specialised hardware or software. However, there are several disadvantages: ...|$|E
50|$|In summary, DataFlash enables use of {{more data}} storage and faster access times than EEPROM. DataFlash chips can {{leverage}} the AT45 SRAM buffers. <b>EEPROMs,</b> AT26 series chips, or MMC/SD cards permit use of second sources for parts.|$|E
5000|$|Although {{flash memory}} is {{technically}} {{a type of}} <b>EEPROM,</b> the term [...] "EEPROM" [...] is generally used to refer specifically to non-flash <b>EEPROM</b> which is erasable in small blocks, typically bytes. Because erase cycles are slow, the large block sizes used in flash memory erasing give it a significant speed advantage over non-flash <b>EEPROM</b> when writing large amounts of data. , flash memory costs much less than byte-programmable <b>EEPROM</b> and had become the dominant memory type wherever a system required {{a significant amount of}} non-volatile solid-state storage.|$|R
40|$|Abstract—In this paper, {{we design}} a 256 kbits <b>EEPROM</b> for a MCU (Microcontroller unit) with the wide voltage range of 1. 8 V to 5. 5 V. The memory {{space of the}} <b>EEPROM</b> is {{separated}} into a program and data region. An option memory region is added for storing user IDs, serial numbers and so forth. By making HPWs (High-voltage P-wells) of <b>EEPROM</b> cell arrays with the same bias voltages {{in accordance with the}} operation modes shared in a double word unit, we can reduce the HPW-to-HPW space by a half and hence the area of the <b>EEPROM</b> cell arrays by 9. 1 percent. Also, we propose a page buffer circuit reducing a test time, and a write-verify-read mode securing a reliability of the <b>EEPROM.</b> Furthermore, we propose a DC-DC converter that can be applied to a MCU with the wide voltage range. Finally, we come up with a method of obtaining the oscillation period of a charge pump. The layout size of the designed 256 kbits <b>EEPROM</b> IP with MagnaChip's 0. 18 µm <b>EEPROM</b> process is 1581. 55 µm × 792. 00 µm. Index Terms—Wide voltage range, MCU, DC-DC converter, reliabilit...|$|R
50|$|Flash {{memory is}} a later form of <b>EEPROM.</b> In the industry, {{there is a}} {{convention}} to reserve the term <b>EEPROM</b> to byte-wise erasable memories compared to block-wise erasable flash memories. <b>EEPROM</b> occupies more die area than flash memory for the same capacity, because each cell usually needs a read, a write, and an erase transistor, while flash memory erase circuits are shared by large blocks of cells (often 512×8).|$|R
50|$|In {{the field}} of {{computer}} hardware, the term programmer, chip programmer or device programmer refers to a electronic equipment that configures programmable non-volatile integrated circuits (called programmable devices) such as EPROMs, <b>EEPROMs,</b> Flashes, eMMC, MRAM, FRAM, NV RAM, PALs, FPGAs or programmable logic circuits...|$|E
5000|$|Measurements of most {{types of}} {{electronic}} memory such as RAM and ROM are given using customary binary prefixes (kilo, mega, and giga). This includes some flash memory, like <b>EEPROMs.</b> For example, a [...] "512-megabyte" [...] memory module is 512×220 bytes (512 × , or [...] ).|$|E
50|$|Atmel's {{original}} {{business was}} in memory, {{and it still}} sells several memory products. It offers serial and parallel EEPROM, as well as one-time programmable (OTP) EPROM. In addition, it offers secure memory with its CryptoMemory product line of <b>EEPROMS</b> in capacities from 1 to 256 kbits.|$|E
50|$|Parallel <b>EEPROM</b> devices {{typically}} have an 8-bit data bus and an address bus {{wide enough to}} cover the complete memory. Most devices have chip select and write protect pins. Some microcontrollers also have integrated parallel <b>EEPROM.</b>|$|R
5000|$|The {{difference}} between EPROM and <b>EEPROM</b> {{lies in the}} way that the memory programs and erases. <b>EEPROM</b> can be programmed and erased electrically using field electron emission (more commonly known in the industry as [...] "Fowler-Nordheim tunneling").|$|R
5000|$|... 64MB <b>EEPROM</b> http://www.microsoft.com/windowsmobile/devices/devicedisplay.aspx?module=deviceDisplay;Smartphone;americas;211 ...|$|R
