4|4|Public
40|$|Two {{different}} methods for procedurally based modelling {{are presented as}} an alternative to the interactive modelling. Fractal and <b>graftal</b> techniques are shown to be the possibilities for modelling of natural phenomena as terrain shapes and trees. Different issues of consistency for fractal based terrain modelling are discussed. Second part of the paper shows several problems of <b>graftal</b> and L-systems trees modelling. Attention is focused on modeling of branches, the problem of "twisted" branches and branch connections are solved. The paper contains remarks towards the implementation of presented ideas...|$|E
40|$|In {{previous}} work [6], we presented an algorithm for rendering vir-tual scenes using art-based styles. We demonstrated {{the ability to}} render fur, grass, and trees in a stylized manner that evoked the complexity of these textures without representing all their compo-nents explicitly. We achieved this with stroke-based procedural tex-tures that generated detail elements, or graftals, just as needed. Our implementation had several drawbacks. First, each new <b>graftal</b> texture required a procedural implementation that included writ-ing code. Also, graftals were regenerated in each frame {{in a way that}} led to excessive introduction and elimination of graftals even for small changes in camera parameters. Lastly, our system pro-vided no way to continuously vary the properties of graftals, in-cluding color, size, or stroke width. Such an ability could be used to achieve better frame-to-frame coherence, or more generally to animate graftals. In this paper, we present a new framework for <b>graftal</b> textures that addresses these issues. Our new framework allows all major deci-sions about <b>graftal</b> look and behavior to be specified in a text file that can be edited by a designer. We have achieved greater frame-to-frame coherence by using graftals that remain in fixed positions on the model surface. The look and behavior of graftals as they appear or disappear can now be animated to create smooth transi-tions. Finally, we introduce the concept of tufts which manage the multiresolution behavior of graftals according to the specifications of the scene designer...|$|E
40|$|An artist {{can easily}} draw a few strokes {{on a piece}} of paper and create an image of a grassy field or a tuft of grass. While such a drawing easily creates a vivid impression, a {{standard}} computer rendering of a grassy field would lack this artistic look. This lack of expressive power of standard computer rendering is tried to tackle by using graftals. Graftals are procedural textures that change according several parameters such as camera viewpoint and direction and allow designers to stylize models in a 3 D scene. In related work, graftals were specified at compile-time and did not provide the designer with much versatility. Interaction with graftals was possible to a small extent, which in combination with modern graphics hardware was tried to improve in this project. The main goal was to create an application that demonstrates interaction with graftals, while providing an easy to use interface. Next to supporting the mouse as input device, the application needed to support other devices such as a Wacom tablet as well. To let graftals change according to distance to the camera, a series of textures can be defined per <b>graftal,</b> each of which defines the texture to be used at a certain distance. Using this technique, a tuft of grass can be defined to appear highly detailed close by and less detailed far away. To use the same <b>graftal</b> on multiple objects with a different color, a mask can be defined for each texture. This mask is replaced with the color of the object the <b>graftal</b> is placed on at render time. This is useful to create a single <b>graftal</b> (i. e. a leave), that can be placed on objects with different colors. The final application lets a user define graftals in a simple paint pane. Placement is done in real-time in an OpenGL rendering of the loaded scene. Graftals and their placement can be saved to and loaded from disk. To provide real time rendering of the scene with graftals placed, a combination of modern OpenGL techniques is used such as multitexturing, texture mipmapping, and shader programming. ...|$|E
40|$|This paper {{presents}} {{an overview of}} the image-morphologic primitives used commonly in non-photorealistic rendering (NPR), a subdomain of computer graphics that is inspired by a long tradition of artistic and illustrative depiction. In particular, we survey NPR shading, stroke-based rendering, sparse line drawings, <b>graftals,</b> and area primitives. Such primitives usually cover larger regions on the canvas and often carry a meaning beyond the color of the image region they represent. This distinguishes them from the pixel as a primitive used in photorealistic rendering which does not have any meaning aside from sampling the color of the image section it represents. We give examples to illustrate the individual techniques and briefly mention how they are tracked though the rendering process as well as represented in the final image...|$|R
40|$|We {{present a}} new {{approach}} for modeling plants which allows for adaptation to geometrical and material properties of a simulated environment. The form of a plant {{is derived from the}} paths of one or more automata which begin as seeds and progressively explore the environment. The automata sense their surroundings by casting rays and using intersection information to influence subsequent patterns of growth. In this way the power of well-known ray tracing techniques is applied to a problem of geometric modeling. By seeking locations which satisfy various environmental criteria such as proximity to surfaces and availability of light, the automata extend the repertoire of simulated plant growth to include emulation of phenomena such as clinging vines and heliotropism. This approach to database amplification can be used in conjunction with previous methods such as particle systems and <b>graftals.</b> Introduction Many methods have been devised for modeling botanical forms for computer graphics. Li [...] ...|$|R
40|$|Abstract We {{present a}} new {{approach}} for modeling plants which allows for adaptation to geometrical and material properties of a simulated environment. The form of a plant {{is derived from the}} paths of one or more automata which begin as seeds and progressively explore the environment. The automata sense their surroundings by casting rays and using intersection information to influence subsequent patterns of growth. In this way the power of well-known ray tracing techniques is applied to a problem of geometric modeling. By seeking locations which satisfy various environmental criteria such as proximity to surfaces and availability of light, the automata extend the repertoire of simulated plant growth to include emulation of phenomena such as clinging vines and heliotropism. This approach to database amplification can be used in conjunction with previous methods such as particle systems and <b>graftals.</b> Introduction Many methods have been devised for modeling botanical forms for computer graphics. Lindenmayer [10] introduced rewriting grammars to model simple forms of biological growth, and late...|$|R
40|$|Visualization {{is an art}} where {{abstract}} data is graphically depicted {{to analyze}} the underlying knowledge inherent in the data. Documents {{can be considered as}} abstract data and document visualization is one area where the unbounded hidden knowledge in the documents can be clearly revealed using various visual techniques. Here in this study, we describe a Story Summary Visualizer which uses a novel method of biological story summary visualization based on Gestalt perception law. The visualizer takes children stories as input and generates summary of the stories using Relevance model. Later this summary information was used to model biological plants. Lindenmayer systems called as L systems which are fractal based techniques were used to model the plants applying gestalt similarity perception principle. The plants which are mathematically generated uses a set of iterative rules called productions applied over an axiom. This repetitive principle of applying productions results in the generation of biological plants which have the self inherent similarity within itself. This plant modeling technique uses the weighted sentence value of all the sentences in the story obtained from relevance model for generating the <b>graftal</b> based plant. Two plants are generated one story plant based on all the sentence weights and the summary plant is a child of the story which is extracted from the parent story plant. The summary plant helps in visualizing the summary sentence locations within the story and the summary sentence weights with respect to all story sentence weightages. This visualizer also helps in visual story analysis to know about spatial organization of the theme of the story and story summary orientation...|$|E
40|$|Although fractal {{models of}} natural {{phenomena}} have received much attention recently, {{there are other}} models of complex natural objects which have been around longer in Computer Imagery but are not widely known. These are procedural models of plants and trees. An interesting class of these models is presented here which handles plant growth, sports an efficient data representation, and has a high &quot;database amplification &quot; factor. It {{is based on an}} extension of the well-known formal languages of symbol strings to the lesser-known formal languages of labeled graphs. It is so tempting to describe these plant models as &quot;fractal &quot; that the similarities of this class of models with fractal models are explored in an attempt at rapprochement. The models are not fractal so the common parts of fractal theory and plant theory are abstracted to form a class of objects, the <b>graftals.</b> This class may prove to be of great interest to the future of Computer Imagery. Determinism is shown to provide adequate complexity, whereas ran-domness is only convenient and often inefficient. Finally, a nonfractal, nongraftal family of trees by Bill Reeves is introduced to emphasize some of the paper's nongram-matical themes...|$|R

