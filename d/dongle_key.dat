3|9|Public
50|$|In 2011 Sony sued George Hotz {{and members}} of fail0verflow for jailbreaking the PlayStation 3. Part of the lawsuit {{complaint}} {{was that they had}} published PS3 keys. Sony also threatened to sue anyone who distributed the keys. Sony later accidentally tweeted an older <b>dongle</b> <b>key</b> through its fictional Kevin Butler character.|$|E
5000|$|In January, 2011, Sony sued George Hotz and others, in {{part for}} {{publishing}} PS3's private keys (which allows users to modify the system to run customized or unofficial software). On 9 February 2011, a post was published on Kevin Butler's Twitter account containing an earlier <b>dongle</b> <b>key.</b> The post was made in reply to another user who tweeted the code to @TheKevinButler {{in an attempt to}} mock Sony's threat that they'd prosecute anyone who [...] "posts the PlayStation 3 private key" [...] Kevin Butler replied, appearing to mistake the code for a series of coordinates in the game Battleship, joking [...] "Lemme guess... you sank my Battleship?" [...] and copying the original message in his reply. The post was later deleted from the @TheKevinButler Twitter account.|$|E
40|$|Archaeological {{prospection}} and {{excavation of}} an ancient settlement is a slow, careful and consequently costly operation. In the Mediterranean region, cities were often built next to the coastline, {{in order to provide}} bases for trade along the most convenient pathway of the time - the sea. Prospection of such sites is particularly difficult and slow because these cities are buried or sunk into the sea. The need arises for a comprehensive prospection, that can delineate the areas of further direct investigations. Results can also have a cultural and touristic value before the full site excavation by means of high resolution renderings and 3 D digital representations of the subsurface. This work deals with the development and the application of an integrated methodology and visualization techniques for 3 D rendering of geophysical data of the buried and submerged archaeological features in complex environment such as coastal planes. In this work we present the results from marine and ground geophysical prospections of the Phoenician, Punic and Roman town of Nora, in the South Coast of Sardinia and the Roman town of Pollentia, in the North East of the Mallorca Island. The lagoon, close to Nora, was investigated with a continuous marine electrical resistivity tomography and with the sub bottom profiler survey to find features linked to the presence of the ancient harbour. Measures were carried out by means of a customised catamaran, appositely developed for the marine geophysical surveys in shallow water. The data processing led with: 1) the reconstruction of resistivity sections and 3 D renderings; 2) the comparison between the electrical and the sub bottom profiler survey results. This latter step permitted to identify some structures related with the main features observed by the sub bottom profiler; in particular we found a channel that could be the access to the ancient harbor. Near the lagoon in the surroundings of the ancient town a georadar survey was carried out in order to find the old amphitheatre. The 3 D reconstruction of old roads, aqueduct and of a small part of amphitheatre was made in a critical environment. Diggings confirmed exactly the reconstruction. In the Pollentia site, we stress the rule of the geophysical investigation in un-explored to map the near surface archaeological features and exploit high resolution information acquired by electrical and georadar investigation for a realistic 3 D rendering of the main features, for a virtual museum of the buried settlements. The geophysical data pointed out the presence of several well organised features that are related to the buried rests of the ancient walls of the town. Starting from the 3 D rendering of the main geophysical anomalies, we applied techniques for virtual imaging of the ancient town. We tested both commercial and open source technologies based. Former has a limited access to the model because it needs a <b>dongle</b> <b>key</b> and consequently doesn’t allow a wide scale diffusion of results, so we developed a software tool based on the open source VRML technolog...|$|E
50|$|A {{software}} protection dongle (commonly {{known as a}} <b>dongle</b> or <b>key)</b> is an electronic copy protection and content protection device which, when attached to a computer or other electronic appliance, unlocks software functionality or decodes content. The hardware key is programmed with a product key or other cryptographic protection mechanism; it attaches via electrical connector to an external bus of the computer or appliance.|$|R
25|$|In 1989 he co-founded the League for Programming Freedom. Since the mid-1990s, Stallman {{has spent}} most of his time advocating for free {{software}}, as well as campaigning against software patents, digital restrictions management, and other legal and technical systems which he sees as taking away users' freedoms. This has included software license agreements, non-disclosure agreements, activation <b>keys,</b> <b>dongles,</b> copy restriction, proprietary formats and binary executables without source code.|$|R
5000|$|USB dongles are {{typically}} used in software licensing schemes to unlock software capabilities, {{but they can}} also be seen as a way to prevent unauthorized access to a computer or other device's software. The <b>dongle,</b> or <b>key,</b> essentially creates a secure encrypted tunnel between the software application and the key. The principle is that an encryption scheme on the dongle, such as Advanced Encryption Standard (AES) provides a stronger measure of security, since it is harder to hack and replicate the dongle than to simply copy the native software to another machine and use it. Another security application for dongles is to use them for accessing web-based content such as cloud software or Virtual Private Networks (VPNs). In addition, a USB dongle can be configured to lock or unlock a computer.|$|R
40|$|Software piracy is copying {{and distributing}} of {{software}} illegally and without permission. This {{problem is not}} new but effective protective measures against it until today are not developed. Therefore, in 2011 illegal software has been downloaded for more than 60 billion USA dollars and that amount is growing every year. After software threats’ analysis {{we found out that}} the biggest problem is reverse engineering. Measures which can help to solve this problem we divided into software-based and hardware-based protection. After software-based protection analysis we found out that one of best measures against reverse engineering is code encryption or packaging {{and one of the best}} hardware-based protection tools is using of <b>dongle</b> <b>keys.</b> After analysis of advantages and disadvantages of software-based and hardware-based protection we developed method against software piracy. This method relies on the encryption of critical (most valuable) program modules and its safe execution in a safe device. In this paper, as a safe device we will use smart cards. These devices were chosen for their low cost and high level of safety. After implementation of simulated method we found out that decryption of module, which size is ~ 6 KB, in smart card takes only 2 % of the total program execution time, so this task does not have significant impact on program execution time. The biggest impact on increasing of protected program execution time have the module performance (59, 37 % of the total time), license decryption with private key (14. 33 % of the total time) and communication among protected program and smart card (14, 88 % of the total time). To reduce the execution time of the protected program we should first optimize these three program codes. Also we found out that the execution of protected program is slower 4 times than the execution of program without any protection. In summary we could say, that our proposed method of protection against piracy could serve to reduce the level of piracy, but execution critical program modules in smart card increases execution time...|$|R
50|$|PaperClip {{does not}} use word wrap to display text on the screen, which Ahoy!s {{reviewer}} wrote was satisfactory for Commodore 64 users with 40-column displays but drew the ire of the reviewer for Whole Earth Software Catalog while highlighting OMNIWRITER's support for same. The Commodore 64 version provides an 80-column preview mode with text that was legible on a computer monitor, and supported {{a wide variety of}} Commodore and non-Commodore printers. The software was supplied with a <b>dongle,</b> a hardware <b>key</b> used for copy protection that plugged into the DE-9 joystick port. A keyless version was also available.|$|R
40|$|Abstract — Biometrics {{have become}} a popular means for access control and authentication. As the {{processing}} power of embedded systems has grown, efforts {{have been made to}} perform biometrics locally on constrained devices such as smart cards. This paper presents the design and consumer application of a portable fingerprint biometric authenticator with the form factor of a <b>key</b> <b>dongle</b> (as an alternative to biometric smart cards). A thorough investigation has been performed to determine the tradeoffs between security, performance, and energy and to determine the secure partitioning between dongle and server. Such a device could be used for applications such as automotive access control, secure credit card payments, and related authentication scenarios 1...|$|R
40|$|In this paper, a novel {{encryption}} scheme {{with time}} based key technique on an FPGA is presented. Time based key technique ensures right key to be entered at right time and hence, vulnerability of encryption through {{brute force attack}} is eliminated. Presently available encryption systems, suffer from Brute force attack and in such a case, the time taken for breaking a code depends on the system used for cryptanalysis. The proposed scheme provides an effective method in which the time is taken as the second dimension of the key so that the same system can defend against brute force attack more vigorously. In the proposed scheme, the key is rotated continuously and four bits are drawn from the key with their concatenated value representing the delay the system has to wait. This forms the time based key concept. Also the key based function selection {{from a pool of}} functions enhances the confusion and diffusion to defend against linear and differential attacks while the time factor inclusion makes the brute force attack nearly impossible. In the proposed scheme, the key scheduler is implemented on FPGA that generates the right key at right time intervals which is then connected to a NIOS – II processor (a virtual microcontroller which is brought out from Altera FPGA) that communicates with the keys to the personal computer through JTAG (Joint Test Action Group) communication and the computer is used to perform encryption (or decryption). In this case the FPGA serves as hardware <b>key</b> (<b>dongle)</b> for data encryption (or decryption) ...|$|R

