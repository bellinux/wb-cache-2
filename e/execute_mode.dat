1|130|Public
40|$|MEDM, {{which is}} derived from Motif Editor and Display Manager, is the primary {{graphical}} user interface to the EPICS control system and has also been used for other control systems. MEDM has two modes of operation, EDIT and EXECUTE. In its EDIT mode it provides the drawing tools needed to design control screens for operator interfaces. In its <b>EXECUTE</b> <b>mode</b> it manages those screens {{to communicate with the}} control system. MEDM provides a set of interface objects that falls into three main categories: (1) Monitors, such as text, meters, and plots; (2) Controllers, such as buttons, menus, and sliders; and (3) Drawing Objects, such as lines, rectangles, and images. Each of these objects has many options, allowing for the development of screens ranging from simple to quite sophisticated. MEDM has been developed over the last decade, primarily at Argonne National Laboratory, and is a large, well tested, extensively used program. It runs on most flavors of UNIX, VMS, and Windows 95 / 98 /NT. It has been used to design thousands of control screens, such as the one shown in Fig. 1, at the Advanced Photon Source and other sites around the world. This paper presents an overview of MEDM and its features...|$|E
50|$|All CLSs {{except for}} the USER CLS <b>execute</b> in system <b>mode</b> in problem state.|$|R
40|$|This degree project {{describes}} {{a method to}} increase {{the performance of a}} web server by splitting it in two parts, one part <b>executes</b> in ker-nel <b>mode</b> and process requests for static web pages and picture files while requests for dynamic web pages that is generated by executing scripts or contains information from an database is handed over to a web server that <b>executes</b> in user <b>mode.</b> The web server that <b>executes</b> in kernel <b>mode</b> can be optimized for its purpose and minimizes process scheduling and copying of data which means that a larger number of requests per second can be processed. The web server that <b>executes</b> in user <b>mode</b> can be an unmodified standard web server. In the project a prototype is implemented for the Windows family of operating sys-tems, specific problems that is solved includes network communication from kernel mode and how to hand over a request to user mode. The prototype implementation is used to measure performance and evalu...|$|R
50|$|It is used {{to execute}} certain DOS {{programs}} in Windows/386, Windows 3.x, Windows 9x/Me, and OS/2 2.x and later through virtual DOS machines, in SCO UNIX through Merge, and in Linux through DOSEMU. (Other DOS programs which use protected <b>mode</b> <b>execute</b> using user <b>mode</b> under the emulator.) NTVDM in x86 Windows NT based operating systems also use VM86 mode, but with very limited direct hardware access.|$|R
5000|$|There are two {{techniques}} {{by which a}} program <b>executing</b> in user <b>mode</b> can request the kernel's services: ...|$|R
50|$|Like microkernels, SourceT {{adheres to}} the {{principles}} that minimal code should <b>execute</b> in kernel <b>mode</b> (currently less than 4,000 lines of code in SourceT), and that all applications and operating system services such as File system, device drivers and protocol stacks should not <b>execute</b> in kernel <b>mode.</b> However, like monolithic kernel architectures, SourceT's operating system services are accessed through system service calls rather than through interprocess communication with user-mode servers.|$|R
3000|$|... that is schedulable and dissipates {{the lowest}} {{amount of energy}} is {{determined}} using Algorithm 1. As {{there is only one}} direct successor of mode A in the spanning tree, the FindMappingMin procedure is <b>executed</b> for <b>mode</b> B. In this procedure, a Pareto frontier between schedulable mappings in mode B minimizing energy dissipation in B and the amount of data to be transferred during mode switching from A to B is determined. After selecting the appropriate mapping using the assumed design priorities, procedure FindMappingMin is <b>executed</b> again for <b>mode</b> C, the only successor of mode B in the spanning tree.|$|R
50|$|Interrupt mode (a/k/a Bump mode) {{constrained}} {{the guest}} program {{to run in}} user program state, with the SIMMON kernel handling all hardware interrupts and simulating all privileged instructions the guest attempted to <b>execute.</b> This <b>mode</b> could be used, for example, by a test tool to simulate a hardware device.|$|R
30|$|Each tentacle can <b>execute</b> {{different}} grasping <b>modes</b> {{depending on}} the shapes and dimensions of the objects grasped and grip objects in a gentle and form-fitting manner.|$|R
5000|$|In February 2016 the Bihar cabinet {{approved}} DPR of Patna Metro {{prepared by}} RITES {{a budget of}} 16960 crore and planned to <b>execute</b> under PPP <b>mode</b> by 2021.|$|R
5000|$|Legacy mode is {{the mode}} used by 16-bit ("protected mode" [...] or [...] "real mode") and 32-bit {{operating}} systems. In this mode, the processor {{acts like a}} 32-bit x86 processor, and only 16-bit and 32-bit code can be <b>executed.</b> Legacy <b>mode</b> allows for a maximum of 32 bit virtual addressing which limits the virtual address space to 4 GB. 64-bit programs cannot be run from legacy mode.|$|R
5000|$|An unusual {{feature of}} the NEC V20 was that it added an Intel 8080 {{emulation}} mode, in which it could execute programs written for the Intel 8080 processors. The instructions [...] <b>executed</b> in 8086 <b>mode</b> (NEC used a different notation for the instructions than Intel, where BRK in NEC notation is INT in Intel notation) and [...] and [...] <b>executed</b> in 8080 <b>mode</b> was used to switch or return to or from the emulation mode. There were some programs which allowed 8080-based CP/M-80 programs to run on MS-DOS machines, notably V2080 CPMulator (later ZRUN) by Michael Day and 22nice from SYDEX.|$|R
50|$|Also like CP-V, {{the design}} was an {{integrated}} file management system. Files were equally and compatibly available to programs <b>executing</b> in any <b>mode.</b> The files could be sorted in indexed, keyed, relative, or consecutive order.|$|R
50|$|EMX (Eberhard Mattes eXtender; {{also known}} as emx+gcc) is a {{programming}} environment for MS-DOS and OS/2. It allows creating and <b>executing</b> of 32-bit <b>mode</b> applications, presenting a POSIX API and, on OS/2, access to the OS/2 APIs.|$|R
5000|$|The MOVE from SR {{instruction}} is now privileged (it {{may only be}} <b>executed</b> in supervisor <b>mode).</b> This means that the 68010 meets Popek and Goldberg virtualization requirements. Because the 68000 offers an unprivileged MOVE from SR, it does not meet them.|$|R
30|$|All {{inactive}} nodes wake {{up after}} every sync pulse, and {{listen for the}} first 8 slots in a cycle. If the message for its activation is received, a node switches to active <b>mode</b> and <b>executes</b> the active <b>mode's</b> algorithm (see Algorithm 3).|$|R
50|$|Endevor {{functions}} can {{be accessed}} interactively using 3270 ISPF panels or in batch mode using JCL and the Endevor API. Many functions <b>executed</b> in interactive <b>mode</b> are completed in batch mode. All Endevor element functions are described using a propriety Software Control Language.|$|R
50|$|The {{parts of}} the OS {{critical}} to its correct operation <b>execute</b> in kernel <b>mode,</b> while other software (such as generic system software) and all application programs <b>execute</b> in user <b>mode.</b> This fundamental distinction is usually the irrefutable distinction between the operating system and other system software. The {{part of the system}} executing in kernel supervisor state is called the kernel, or nucleus, of the operating system. The kernel operates as trusted software, meaning that when it was designed and implemented, it was intended to implement protection mechanisms that could not be covertly changed through the actions of untrusted software executing in user space. Extensions to the OS <b>execute</b> in user <b>mode,</b> so the OS does not rely on the correctness of those {{parts of the}} system software for correct operation of the OS. Hence, a fundamental design decision for any function to be incorporated into the OS is whether it needs to be implemented in the kernel. If it is implemented in the kernel, it will execute in kernel (supervisor) space, and have access {{to other parts of the}} kernel. It will also be trusted software by the other parts of the kernel. If the function is implemented to <b>execute</b> in user <b>mode,</b> it will have no access to kernel data structures. However, the advantage is that it will normally require very limited effort to invoke the function. While kernel-implemented functions may be easy to implement, the trap mechanism and authentication at the time of the call are usually relatively expensive. The kernel code runs fast, but there is a large performance overhead in the actual call. This is a subtle, but important point.|$|R
30|$|The {{most recent}} works in [13 â€“ 15] focus on {{cellular}} capacity and coverage enhancement by employing outband D 2 D communication mode. The authors in [13, 14] address cellular downward throughput enhancement problem under delay constraint by <b>executing</b> transmission <b>mode</b> selection for each user equipment (UE), while the authors in [15] increase energy constraint for receiving mode selection and extend relaying range. Therefore, the latter outperforms the former {{in terms of}} outband D 2 D link lifetime, as well as cellular downlink throughput.|$|R
50|$|Vernier {{thrusters}} {{are used}} in rockets such as the R-7 for vehicle maneuvering because the main engine is fixed in place. For the Atlas rocket family, in addition to maneuvering, the verniers were used for roll control, although the booster engines could also perform this function. After sustainer engine cutoff, the verniers would <b>execute</b> solo <b>mode</b> and fire for several seconds to make fine adjustments to the vehicle attitude. The Thor/Delta family also used verniers for roll control, but mounted {{on the base of}} the thrust section flanking the main engine.|$|R
50|$|In {{the context}} of data management, autocommit is a mode of {{operation}} of a database connection. Each individual database interaction (i.e., each SQL statement) submitted through the database connection in autocommit <b>mode</b> will be <b>executed</b> in its own transaction that is implicitly committed. A SQL statement <b>executed</b> in autocommit <b>mode</b> cannot be rolled back.|$|R
40|$|In {{this work}} a multi purpose setup has been {{developed}} for homo- and copolymerizations of ethylene and 1 -hexene in slurry and gas phase. Polymerization experiments have been <b>executed</b> in semi-batch <b>mode</b> with a heterogeneous metallocene catalyst under industrial conditions. During the gas-phase polymerizations the monomer concentrations have been measured and controlled online. The activities for both monomers were measured with flow meter techniques...|$|R
5000|$|Program lines can {{be entered}} by {{starting}} with a line number, which will insert a new line or amend an existing one. Lines without a line number are executed immediately. When the programmer types [...] the program executes from the lowest line number. Atari BASIC allows all commands to be <b>executed</b> in both <b>modes.</b> For instance, the [...] command can be used inside a program.|$|R
40|$|Fundamental {{experiments}} were performed in an unsteady flow water table facility {{to investigate and}} quantify the unsteady aerodynamics of a biconvex airfoil <b>executing</b> torsion <b>mode</b> oscillations at realistic reduced frequencies. A computer-based image enhancement system {{was used to measure}} the oscillating supersonic and transonic shock flow phenomena. By utilizing the hydraulic analogy to compare experimental results with a linear theoretical prediction, magnitude and phase relationships for the bow shock were determined to be relatively independent of Mach number while the magnitude of oscillation of the shock is a strong function of the reduced frequency. The supersonic bow shock is in phase with the airfoil motion at low reduced frequencies, lagging the airfoil motion as the reduced frequency is increased...|$|R
30|$|Third, {{based on}} the {{approximation}} of the SI and correlation channel model, a novel mode decision process is <b>executed.</b> Three coding <b>modes</b> are supported, namely, skip, intra and SW coding. The skip mode is applied per frequency band whereas intra and SW modes are assigned per bit-plane. Since the proposed WZ architecture is feedback-free, the full responsibility for selecting and signalling the coding modes falls to the encoder.|$|R
50|$|RoboBlockly is {{a web-based}} robot {{simulation}} environment for learning coding and math. Based on Blockly, {{it uses a}} simple puzzle-piece interface to program virtual Linkbot, Lego Mindstorms NXT and EV3, {{as well as to}} draw and animate for beginners to learn robotics, coding, math, science, and art. Blocks in RoboBlockly can be <b>executed</b> in debug <b>mode</b> step-by-step. All math activities in RoboBlockly are Common Core State Standards Mathematics compliant.|$|R
40|$|Demo, Abstracts BookThe {{environment}} evolved {{throughout the}} development: It was first {{made of a}} set ofscripts that generate the jobs, submit the files and check regularly their statuswhile {{they are on the}} Grid. Through this abstract we want to present the newenvironement that is based on the AMGA metadata catalog for more flexibility andon a Java environment that can be used through web services. The environment isvery flexible and can be used for any type of bioinformatics application. In thisnew environment we control the job distribution, maintaing the choice of directlysubmitting the executable (push mode) or implementing a two-way submission wherethe system submits generic wrapper jobs which request their paylod (theexecutable and the input data) only when they start to be <b>executed</b> (pull <b>mode)</b> ...|$|R
50|$|Since {{the basic}} {{instruction}} set is the same, {{there is almost}} no performance penalty for <b>executing</b> protected <b>mode</b> x86 code. This is unlike Intel's IA-64, where differences in the underlying instruction set means that running 32-bit code must be done either in emulation of x86 (making the process slower) or with a dedicated x86 processor. However, on the x86-64 platform, many x86 applications could benefit from a 64-bit recompile, due to the additional registers in 64-bit code and guaranteed SSE2-based FPU support, which a compiler can use for optimization. However, applications that regularly handle integers wider than 32 bits, such as cryptographic algorithms, will need a rewrite of the code handling the huge integers in order {{to take advantage of the}} 64-bit registers.|$|R
40|$|We {{present a}} toolkit for {{developing}} and visualizing distributed algorithms in Java. This toolkit {{consists of a}} Java class library with a simple programming interface that allows to develop distributed algorithms in a message passing model. The resulting programs may be <b>executed</b> in standalone <b>mode</b> using a Java interpreter or embedded as applets into HTML documents and executed by a Web browser. The toolkit has been applied in various university courses and is freely available...|$|R
40|$|The given {{article is}} {{dedicated}} to Middle Prut Plainâ€™s erosion susceptibility evaluation Â using factorial analysis and methodology of principal component analysis implemented by Geographical Informational System GRASS. Susceptibility evaluation is <b>executed</b> in aÂ qualitative <b>mode,</b> and the results have preliminary character, for further quantitative and more precise study. This type of natural hazards analysis offers information on probableÂ localization and severity of erosion phenomena, {{as well as their}} manifestation probability in a given place. </p...|$|R
500|$|One {{main feature}} of the combat system is the [...] "EX Gauge", which can be filled {{in a variety of}} ways, such as inflicting damage on opponents, taking damage from opponents, and obtaining EX cores {{scattered}} around the field of play. Once the EX Gauge is filled, the character can enter their [...] "EX Mode", significantly increasing their power and enabling new attacks, including the [...] "EX Burst", an unavoidable and very damaging special attack similar to the Limit Break mechanic seen in many games in the series. The player on the offense charges up the attack by following the on-screen instructions, while the player on the defense can reduce the amount of damage taken by continuously pressing the circle button. Once the EX Burst is <b>executed,</b> EX <b>Mode</b> ends.|$|R
40|$|The Science Operation Department is {{composed}} of Astronomers, Telescope Instruments Operators (TIO) and Data Handling Administrators (DHAs). Their main goal is to produce top-quality astronomical data by operating a suite of 9 telescopes, 14 Instruments and related systems, supporting the execution of Visitor <b>Mode</b> Observations or <b>executing</b> Service <b>Mode</b> Observations. Astronomers and TIOs {{have to deal with}} atmospheric parameters like seeing, coherence time, isoplanatic angle, precipitable water vapor, etc. in order to take in real time the best decisions on the best program to be executed according to the current conditions. We describe the tools available in the control room, provided by the environmental monitoring and forecast system. Comment: Contribution in conference "Comprehensive characterization of astronomical sites", held October 4 - 10, 2010, in Kislovodsk, Russia, 11 pages, 15 figure...|$|R
5000|$|One {{main feature}} of the combat system is the [...] "EX Gauge", which can be filled {{in a variety of}} ways, such as inflicting damage on opponents, taking damage from opponents, and obtaining EX cores {{scattered}} around the field of play. Once the EX Gauge is filled, the character can enter their [...] "EX Mode", significantly increasing their power and enabling new attacks, including the [...] "EX Burst", an unavoidable and very damaging special attack similar to the Limit Break mechanic seen in many games in the series. The player on the offense charges up the attack by following the on-screen instructions, while the player on the defense can reduce the amount of damage taken by continuously pressing the circle button. Once the EX Burst is <b>executed,</b> EX <b>Mode</b> ends.|$|R
30|$|During {{analysis}} of a modal system it may happen that runnables <b>executed</b> in neighbouring <b>modes</b> (i.e. the modes connected in the FSM) have similar WCETs and resource utilisations. In such case, there is little benefit in determining two separate mappings for these modes and migrating the runnablesâ€™ contexts during transitions between these modes. It would be more reasonable to cluster these states and treat them as a single mode in the further steps of the proposed approach.|$|R
50|$|Web servers {{that run}} in user-mode {{have to ask}} the system for {{permission}} to use more memory or more CPU resources. Not only do these requests to the kernel take time, but they are not always satisfied because the system reserves resources for its own usage and has the responsibility to share hardware resources with all the other running applications. <b>Executing</b> in user <b>mode</b> can also mean useless buffer copies which are another handicap for user-mode web servers.|$|R
5000|$|The {{boot loader}} phase varies by {{computer}} architecture. Since the earlier phases are not {{specific to the}} operating system, the BIOS-based boot process for x86 and x86-64 architectures is considered to start when the master boot record (MBR) code is <b>executed</b> in real <b>mode</b> and the first-stage boot loader is loaded. In UEFI systems, a payload, such as the Linux kernel, can be executed directly. Thus no boot loader is necessary. Below is a summary of some popular boot loaders: ...|$|R
