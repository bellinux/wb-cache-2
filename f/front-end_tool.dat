31|89|Public
50|$|In {{the design}} {{synthesis}} role (transformation of a hardware-design description into a gate-netlist), SystemVerilog adoption has been slow. Many design teams use design flows which involve multiple tools from different vendors. Most design teams cannot migrate to SystemVerilog RTL-design until their entire <b>front-end</b> <b>tool</b> suite (linters, formal verification and automated test structure generators) support {{a common language}} subset.|$|E
5000|$|... /Files/ - Files hold {{structured}} {{data that are}} used by programs but that {{are not part of}} the programs themselves. Those files are usually stand-alone entities like fonts, codecs, and plugins (and as such, supposedly do not require package management). Additionally, each program may define subdirectories of its own to store site-specific data; for instance, Compile (the GoboLinux package compilation <b>front-end</b> <b>tool)</b> does this.|$|E
40|$|AbstractThis note briefly {{discusses}} {{how some}} of the ideas developed in the theory of coalgebras are used in a <b>front-end</b> <b>tool</b> called LOOP, developed jointly in Dresden and Nijmegen, for reasoning (with a back-end theorem prover) about classes in object-oriented languages. It will describe reasoning both about object-oriented specifications and about JAVA implementations, via examples...|$|E
5000|$|Creating single-page {{application}} {{with use}} of <b>front-end</b> <b>tools</b> such as EmberJS, ReactJS or AngularJS ...|$|R
5000|$|A {{number of}} {{different}} package management systems (known as back-ends) support different abstract methods and signals used by the <b>front-end</b> <b>tools.</b> Back-ends supported include: ...|$|R
5000|$|Back-end tools pick {{up where}} the <b>front-end</b> <b>tools</b> leave off, and provide a set of {{reusable}} services that are centrally managed and controlled and provide the following abilities: ...|$|R
40|$|A formal {{language}} ccsl is introduced for describing specifications of classes in object-oriented languages. We show how class specifications in ccsl {{can be translated}} into higher order logic. This allows us to reason about these specifications. In particular, it allows us (1) to describe (various) implementations of a particular class specification, (2) to develop the logical theory of a specific class specification, and (3) to establish refinements between two class specifications. We use the (dependently typed) higher order logic of the proof-assistant pvs, {{so that we have}} extensive tool support for reasoning about class specifications. Moreover, we describe our own <b>front-end</b> <b>tool</b> to pvs, which generates from ccsl class specifications appropriate pvs theories and proofs of some elementary results. Keywords: object-orientation, specification, higher order logic, proof assistant, <b>front-end</b> <b>tool,</b> coalgebra. Classification: 68 Q 60, 68 Q 65, 68 T 15, 03 B 70 (AMS' 91); F. 3. 1, D. 1. 5, D. 2. 2 ( [...] ...|$|E
40|$|Actor-based {{modeling}} {{is known}} to be an appropriate approach for representing concurrent and distributed systems. Rebeca is an actor-based language with a formal foundation, based on an operational interpretation of the actor model. We develop a <b>front-end</b> <b>tool</b> for translating a subset of Rebeca to SMV in order to model check Rebeca models. Automated modular verification and abstraction techniques are supported by the tool...|$|E
40|$|We {{present the}} first {{results of a}} project called LOOP, on formal methods for the {{object-oriented}} language Java. It aims at verification of program properties, with support of modern tools. We use our own <b>front-end</b> <b>tool</b> (which is still partly under construction) for translating Java classes into higher order logic, and a back-end theorem prover (namely PVS, developed at SRI) for reasoning. In several examples we demonstrate how non-trivial properties of Java programs and classes can be proven following this two-step approach...|$|E
5000|$|Because the {{database}} hides this implementation from <b>front-end</b> <b>tools</b> (i.e., {{a report that}} attempts to retrieve data from non-existent cells merely sees [...] "null" [...] values), the full hypercube can be navigated naturally, {{and it is possible}} to load values into any cell interactively.|$|R
50|$|This {{approach}} {{has a major}} drawback in that the cube cannot be treated for calculation purposes as a single large hypercube, because aggregate values cannot be directly controlled, so write-back from <b>front-end</b> <b>tools</b> is limited, and complex calculations that cannot be expressed as MDX expressions are not possible.|$|R
5000|$|Open source <b>front-ends</b> and <b>tools</b> for {{administering}} PostgreSQL include: ...|$|R
40|$|Abstract: Formal {{verification}} {{techniques are}} used to obtain correct and reliable systems. In this paper we use the actor-based language, Rebeca, for modeling the CSMA/CD Protocol. In Rebeca, each component in the system is modeled as a reactive object. Reactive objects are encapsulated, with no shared variables, communicating via asynchronous message passing. Rebeca Verifier is a <b>front-end</b> <b>tool,</b> used for translating Rebeca code to the languages of existing model checkers. Different versions of CSMA/CD protocol are model checked {{and the results are}} summarized...|$|E
40|$|MODE-FE (MODE Front-End) {{is part of}} the MODE (Managed Object Development Environment) {{prototype}} {{which is}} developed for integrating the use of Formal Description Techniques in an environment for building Management applications. MODE-FE provides a GRM (General Relationship Model) and GDMO (Guidelines for the Definition of Managed Objects) parser. The package offers specification checking and an Application Programming interface for manipulating loaded GDMO and GRM specifications. This document is the reference manual for release 1. 0 of the MODE-FE (MODE <b>Front-End)</b> <b>tool</b> and its API...|$|E
40|$|Abstract: Actor-based modeling, with {{encapsulated}} active objects which communicate asynchronously, {{is generally}} recognized to be well-suited for representing concurrent and distributed systems. In this {{paper we discuss}} the actor-based language Rebeca {{which is based on}} a formal operational interpretation of the actor model. Its Java-like syntax and object-based style of modeling makes it easy to use for software engineers, and its independent objects as units of concurrency leads to natural abstraction techniques necessary for model checking. We present a <b>front-end</b> <b>tool</b> for translating Rebeca to the languages of existing model checkers in order to model check Rebeca models. Automated modular verification and abstraction techniques are supported by the tool...|$|E
5000|$|<b>Front-end</b> {{development}} <b>tools</b> {{are focused}} on the user interface and user experience (UI-UX) and provide the following abilities: ...|$|R
40|$|Custom {{computing}} involves customising computations {{for one or}} more {{applications in}} a given implementation technology. We describe a framework for customising designs using appropriate libraries, compilers, validation facilities, application programming interfaces and <b>front-end</b> <b>tools.</b> The development of custom architectures, data formats and operations is presented. We show how circuits can be customised at run time to adapt {{to changes in the}} operating conditions. Graphics examples are used throughout the paper to illustrate our approach. ...|$|R
50|$|Akula is a {{fully open}} mobile {{application}} platform that enables IT departments to secure, manage and control mobile applications. It is a Mobile App Server {{that can be}} deployed on-premises or in the cloud, and its open and extensible design allows users to easily and rapidly develop, deploy and manage multiple mobile applications. Akula integrates with enterprise infrastructure, extending SOA to mobile devices. This structure enables development teams to create a user experience using the <b>front-end</b> <b>tools</b> and frameworks of their choice.|$|R
40|$|This paper mainly {{describes}} {{the architecture of}} a very small size high speed fuzzy chip with two inputs and one output. In particular, an input data set rate of 80 ns is obtained by means of 4 clock pipeline cycles synchronized with a 50 MHz signal. In addition the chip architecture processes only the actives rules by a parallel-pipeline structure. The design has been done using VHDL language as <b>front-end</b> <b>tool</b> and CAD layout utilities as back-end ones. Moreover, by means of cell-based digital 0. 7 Î¼ m CMOS ES 2 technology library, the VHDL synthesis and layout design has produced a chip area of about 10 square mm...|$|E
40|$|The system ICGS (I-card {{generating}} system) {{is based}} on computerization of Student identity card generation system. To develop this project <b>front-end</b> <b>tool</b> as VISUAL STUDIO 2005 & back-end tool as relational database 1 has been used. Using this software user can easily print student identity information along with a unique barcode in a uniform format. Even a user can reprint an identity card instantly if needed from previously stored records. The system enables a good user-interface for the user to maintain the records. It will also provide a permanent database and this will help to store the student identity information in an error free and non redundant way along with better option for maintaining the records. Keywords...|$|E
40|$|Three-dimension {{will be a}} {{characteristic}} of future user interfaces, although we {{are just starting to}} gain an understanding of how users can navigate and share information within a virtual 3 D environment. Three-dimensional graphical user interfaces (3 D-GUI) raise many issues of design, metaphor and usability. This research is devoted to designing a 3 D-GUI as a <b>front-end</b> <b>tool</b> for a file management system, in this case, for Microsoft WindowsoÌ§pÌ§yÌ§ÅiÌ§Ä£á¸©Å£ Explorer; as well as evaluating the efficiency of a 3 D application. The software design was implemented by extending the Half-Life 3 D engine. This extension provides a directory traversal and basic file management functions, like cut, copy, paste, delete, and so on. This paper shows the design and implementation of a real-world application that contains an efficient 3 D-GUI...|$|E
40|$|Open Mathematical Engine Interface (OMEI) aims to {{establish}} a uniform application programming interface specification (API) for heterogeneous mathematical computation systems. OMEI can play {{an essential role in}} making mathematical engines easily accessible by <b>front-ends,</b> <b>tools,</b> and servers. The interface enables the development of individual applications that can serve di#erent engines. The motivation, application framework, specification, usage scenarios, and Java implementation for OMEI are presented. An application of OMEI to connect Starfish with MAXIMA is described. Keywords: API, OMEI, Mathematical Compute Engine, Internet, IAMC...|$|R
50|$|Today, dselect {{is largely}} {{superseded}} by Advanced Packaging <b>Tool</b> <b>front-ends.</b>|$|R
40|$|Web {{services}} {{are in the}} midst of making the transition from being a promising technology to being widely used in the industry. However, most efforts to use Web services have been manual, thus slowing down the ever changing and dynamic businesses of today. In this paper, we contend that more expressive descriptions of Web services will lead to greater automation and thus provide more agility to businesses. We present the METEOR-S <b>front-end</b> <b>tools</b> for source code annotation and semantic Web service description generation. We also present WSDL-S, a language created for incorporating semantic descriptions in the industry wide accepted WSDL, by extending WSD...|$|R
40|$|The AGROVOC {{multilingual}} thesaurus {{maintained by the}} Food and Agriculture Organisation (FAO) of the United Nations is now published as linked data. In order to reach this goal AGROVOC was expressed in Simple Knowledge Organisation System (SKOS) and its concepts provided with dereferenceable URIs. AGROVOC is now aligned with ten other multilingual Knowledge Organisation Systems (KOS) related to agriculture, using the SKOS properties exact match and close match. Alignments were automatically produced in Eclipse using a customdesigned tool and then validated by a domain expert. The resulting data is publicly available to both humans and machines using a SPARQL endpoint together with a modifi ed version of Pubby, a lightweight <b>front-end</b> <b>tool</b> for publishing linked data. This paper describes the process {{that led to the}} current linked data AGROVOC and discusses current and future applications and directions. This paper extends a shorter version presented at MTSR 2011...|$|E
40|$|Specification of {{real-time}} {{behavior of}} a system requires a significantly different approach compared to specification of the system's non-real-time behavior. Also, a specification formalism should be easy to use, conceptually simple, and should lead to an intuitive understanding about the specified behavior of the system. With these objectives, the authors develop an event-based approach to specify the real-time behavior and relevant properties of distributed systems. Events are considered as the basic entities and a system is specified by constructing various relations among the events. Based on this formalism, a specification language is also presented. A specification in this language can be automatically transformed into equivalent specifications in many existing formalisms (e. g. temporal logic, first-order logic, etc.) for further analysis. Thus, an event-based specification {{can be used as}} a <b>front-end</b> <b>tool</b> for automatically generating specifications in many existing formalisms, which can save the trouble of writing complicated formulas in those formalisms...|$|E
40|$|Increasingly, biology {{researchers}} and medical practitioners are using computational tools to model and analyze dynamic systems across scales from the macro to the cellular to the biochemical level. We are using Information-Rich Virtual Environments (IRVEs) {{to display the}} results of biological simulations, and to allow users to interact with those simulations. While simulation architectures, algorithms, and processing power have enjoyed continuous optimization to date, the user interfaces to these applications have not. The problems of designing such IRVE interfaces arise from the requirement {{that a variety of}} spatial and abstract information must be integrated into one coherent experience for the user. This paper explores the design and development issues encountered in our implementation of a bioinformatics application, PathSim (Pathogen Simulation). Specifically, we describe the information and interaction issues in building a <b>front-end</b> <b>tool</b> to visually analyze the results of an agent-based immunology simulation. Finally, we present custom scenegraph objects and consider candidate functionality for future standards components...|$|E
40|$|We are {{developing}} software {{to explore the}} fault tolerance of quantum dot cellular automata gate architectures {{in the presence of}} manufacturing variations and device defects. The Topology Optimization Methodology using Applied Statistics (TOMAS) framework extends the capabilities of the A Quantum Interconnected Network Array Simulator (AQUINAS) by adding front-end and back-end software and creating an environment that integrates all of these components. The <b>front-end</b> <b>tools</b> establish all simulation parameters, configure the simulation system, automate the Monte Carlo generation of simulation files, and execute the simulation of these files. The back-end tools perform automated data parsing, statistical analysis and report generation...|$|R
5000|$|Operational {{historians are}} like {{enterprise}} historians but differ {{in that they}} are used by engineers on the plant floor rather than by business processes. They are typically cheaper, lighter in weight, and easier to use and reconfigure than enterprise historians. Having an operational historian enables [...] "at the source" [...] analysis of the historical data that is not typically possible with enterprise historians.Typically, these applications offer two layers of data access: through a dedicated SDK(Software Development Kit)(sometimes in two different flavours: full administration API(Application Programming Interface) and high-speed read/write API), as well as user <b>front-end</b> <b>tools</b> (for instance, administration panels, engineering consoles or portal-like web clients).|$|R
40|$|In Data Mining we tend {{to focus}} on the sexy <b>front-end</b> <b>tools,</b> the built in procedures, and canned routines. These have {{certainly}} been optimized for us, and in any case, we will need {{to do whatever it takes}} to produce final results. Unfortunately the less visible part of the job- data preparation- can take up to 75 % of the effort. Further, we sometimes have to create our own procedures. Because of this, writing efficient programs should be important to all of us. We will suggest here how to do that without losing sight of our main analysis. ______________________ Introduction â So Much Data, So Little Time Data miners are busy people. When not interactin...|$|R
40|$|MODE-FE (MODE Front-End) {{is part of}} the MODE (Managed Object Development Environment) {{prototype}} {{which is}} developed for integrating the use of Formal Description Techniques in an environment for building Management applications. MODE-FE provides a GRM (General Relationship Model) and GDMO (Guidelines for the Definition of Managed Objects) parser. The package offers specification checking and an Application Programming interface for manipulating loaded GDMO and GRM specifications. This document is the reference manual for release 1. 0 of the MODE-FE (MODE <b>Front-End)</b> <b>tool</b> and its API. Key-words: GDMO, GRM, MODE, Reference Manual (R'esum'e : tsvp) Unite de recherche INRIA Lorraine Technopole de Nancy-Brabois, Campus scientifique, 615 rue de Jardin Botanique, BP 101, 54600 VILLERS L ES NANCY (France) Telephone : (33) 83 59 30 30 [...] Telecopie : (33) 83 27 83 19 Antenne de Metz, technopole de Metz 2000, 4 rue Marconi, 55070 METZ Telephone : (33) 87 20 35 00 [...] Telecopie : (33) 87 76 3 [...] ...|$|E
40|$|Entity population, a task of {{collecting}} entities {{that belong to}} a particular category, has attracted attention from vertical domains. There is still a high demand for creating entity dictionaries in vertical domains, which {{are not covered by}} existing knowledge bases. We develop a lightweight <b>front-end</b> <b>tool</b> for facilitating interactive entity population. We implement key components necessary for effective interactive entity population: 1) GUI-based dashboards to quickly modify an entity dictionary, and 2) entity highlighting on documents for quickly viewing the current progress. We aim to reduce user cost from beginning to end, including package installation and maintenance. The implementation enables users to use this tool on their web browsers without any additional packages [...] - users can focus on their missions to create entity dictionaries. Moreover, an entity expansion module is implemented as external APIs. This design makes it easy to continuously improve interactive entity population pipelines. We are making our demo publicly available ([URL] ICML Workshop on Interactive Machine Learnin...|$|E
40|$|This paper {{describes}} a front-end for the semi-automatic collection, matching, and generation of bibliographic metadata obtained from different sources for use within a digitization architecture. The Library of a Billion Words project is building an infrastructure for digitizing text that requires high-quality bibliographic metadata, but currently only sparse metadata from digitized editions is available. The projectâs {{approach is to}} collect metadata for each digitized item from as many sources as possible. An expert user can then use an intuitive <b>front-end</b> <b>tool</b> to choose matching metadata. The collected metadata are centrally displayed in an interactive grid view. The user can choose which metadata they want to assign to a certain edition, and export these data as MARCXML. This paper presents {{a new approach to}} bibliographic work and metadata correction. We try to achieve a high quality of the metadata by generating a large amount of metadata to choose from, as well as by giving librarians an intuitive tool to manage their data...|$|E
40|$|In {{this paper}} an open {{environment}} for heterogeneous system design is presented supporting all design phases. Our approach separates <b>front-end</b> <b>tools</b> with structural and behavioral modeling from back-end tools for analysis, simulation and emulation. This separation is realized with the emerging CASE data interchange format CDIF. Though CDIF is intended as an interchange format for the interchange of modeling data between modeling tools, CDIF can {{also serve as}} an appropriate basis for back-end tools. Our approach supports an overall system design and results in an unique representation of modeling data and a modeling technique based, tool independent analysis, simulation and emulation. Furtheron, we discuss the suitability of CDIF and present results for several implementations...|$|R
40|$|In {{this paper}} an open {{environment}} for heterogeneous system design is presented supporting all design phases. The environment allows a concurrent development of mechanical components, {{electronic control units}} and real-time software. Basedon a CASE data interchange format, our approach separates <b>front-end</b> <b>tools</b> with structural and behavioural modeling techiques like Statemate and MATRIX X,from back-end tools for analysis, simulation and emulation. So the user can choose the dedicatedbest of point tools for his system design process. To evaluate a system in early design phases, an overall system simulation and rapid prototyping will help the user to avoid conceptual errors. The requirements for an overall rapid prototyping process are discussed and the structure is explained...|$|R
40|$|With {{the rapid}} growth in {{wireless}} technologies and the cost effectiveness in deploying wireless networks, wireless computers are quickly becoming the normal front-end devices for accessing enterprise data. In this paper, we are addressing the issue of efficient delivery of business-critical data {{in the form of}} summary tables to wireless clients equipped with OLAP <b>front-end</b> <b>tools.</b> Towards this, we propose a new heuristic, on-demand scheduling algorithm, called STOBS-ff, that aggregates requests and broadcasts the results only once to all clients. STOBS-ff exploits the structural dependencies among summary tables to maximize data sharing based on aggregation and does not assume fixed length or uniform broadcasts. The effectiveness of our proposed heuristic was evaluated experimentally using simulation with respect to both access time and fairness, as well as power consumption in the case of mobile clients...|$|R
