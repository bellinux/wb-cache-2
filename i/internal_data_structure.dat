85|10000|Public
2500|$|... {{maintain}} an archive of Usenet articles and allow looking up articles {{based on the}} article-id, subject lines, or keywords {{pulled out of the}} article itself." [...] Also included was C code for the <b>internal</b> <b>data</b> <b>structure</b> of the system.|$|E
2500|$|The [...] {{function}} accepts textual S-expressions as input, and parses {{them into}} an <b>internal</b> <b>data</b> <b>structure.</b> For instance, if you type the text [...] at the prompt, [...] translates this into a linked list with three elements: the symbol , the number 1, and the number 2. It so happens that this list is also a valid piece of Lisp code; that is, it can be evaluated. This is because the car of the list names a function—the addition operation.|$|E
5000|$|Mergeable: The <b>internal</b> <b>data</b> <b>structure</b> of the Sample UHID {{does not}} {{directly}} support merging duplicate or redundant identifiers. They can be linked at the trusted authority.|$|E
50|$|File formats {{and other}} <b>internal</b> <b>data</b> <b>structures</b> are {{described}} in the <b>Data</b> <b>Structures</b> Programming Reference Manual.|$|R
5000|$|... using simple <b>internal</b> <b>data</b> <b>structures,</b> {{reducing}} {{flexibility and}} improvement scope while improving determinability required for Real-time operating systems.|$|R
5000|$|Agenda's {{designers}} described these core {{concepts in}} a 1990 CACM paper , and patented {{some of its}} <b>internal</b> <b>data</b> <b>structures</b> [...]|$|R
5000|$|The acronym OMAPI {{stands for}} Object Management Application Programming Interface. [...] ISC DHCP uses OMAPI as an API to {{manipulate}} the <b>internal</b> <b>data</b> <b>structure</b> of a running instance of the ISC DHCP server or client.|$|E
50|$|In 2000, Bentley Systems {{created an}} updated version of DGN which {{includes}} a superset of DGN's capabilities, but which has a different <b>internal</b> <b>data</b> <b>structure</b> to the ISFF-based DGN. This version is properly referred to as V8 DGN.|$|E
50|$|MicroStation {{versions}} 8 and newer {{support the}} V8 DGN file format, but {{which has a}} different <b>internal</b> <b>data</b> <b>structure</b> than the ISFF-based DGN. In cases where there is potential for confusion, ISFF-based DGN may be called Intergraph DGN, or V7 DGN.|$|E
50|$|The <b>internal</b> <b>data</b> <b>structures</b> can be {{examined}} with the B Perl module or other specialized tools like the Devel::Peek Perl module.|$|R
40|$|This paper {{explores the}} {{synthesis}} of programs that track dynamic conditions in their environment. An approach is proposed in which the designer specifies, in a declarative language, aspects of {{the environment in which}} the program will be embedded. This specification is then automatically compiled into a program that, when executed, updates <b>internal</b> <b>data</b> <b>structures</b> so as to maintain as an invariant a desired correspondence between <b>internal</b> <b>data</b> <b>structures</b> and states of the external environment. This approach retains much of the flexibility of declarative programming while guaranteeing a hard bound on the execution time of information-update functions...|$|R
50|$|Enfilades (<b>internal</b> <b>data</b> <b>structures)</b> and istream {{addresses}} are not {{exposed to}} Xanadu's external interfaces. Enfilades were trade-secret information until the Xanadu code was made open-source in 1999, and were mentioned but not explained in some publications before that point, e.g.|$|R
5000|$|In its <b>internal</b> <b>data</b> <b>structure,</b> Calc until version 4.1 {{relies on}} cells {{as the base}} class throughout, which has been blamed for [...] "extreme memory use, slow computation, and {{difficult}} code". Version 4.2 (released in January 2014) addresses these issues by instead storing the data in arrays where possible.|$|E
5000|$|The eval {{function}} {{takes this}} <b>internal</b> <b>data</b> <b>structure</b> and evaluates it. In Lisp, evaluating an s-expression {{beginning with the}} name of a function means calling that function on the arguments that make {{up the rest of the}} expression. So the function + is called on the arguments 1 2 3, yielding the result 6.|$|E
5000|$|... {{calculate}} {{the size of}} an object - the size is mostly {{the same as that of}} the class but can vary. When the object in question is not derived from a class, but from a prototype instead, {{the size of an}} object is usually that of the <b>internal</b> <b>data</b> <b>structure</b> (a hash for instance) that holds its slots.|$|E
40|$|Abstract. Polygonal model {{simplification}} algorithms take a full-sized polygonal {{model as}} {{input and output}} a less-detailed version of the model with fewer polygons. When the <b>internal</b> <b>data</b> <b>structures</b> for the input model are larger than main memory, many simplification algorithms suffer from poor performance due to paging. We present {{a case study of}} the recently-introduced R-Simp algorithm and how its data locality and performance can be substantially improved through an off-line spatial sort and an on-line reorganization of its <b>internal</b> <b>data</b> <b>structures.</b> When both techniques are used, R-Simp’s performance improves by up to 7 -fold. We empirically characterize the data-access pattern of R-Simp and present an applicationspecific metric, called cluster pagespan, of R-Simp’s locality of memory reference. ...|$|R
50|$|Zile's {{goal was}} to behave like GNU Emacs using fewer resources. Zile still uses the same names as Emacs does for its {{functions}} and variables, {{but some of the}} <b>internal</b> <b>data</b> <b>structures</b> and API are evolving to suit a more general purpose.|$|R
25|$|A {{fundamental}} {{distinction between}} Lisp and other languages {{is that in}} Lisp, the textual representation of a program is simply a human-readable description of the same <b>internal</b> <b>data</b> <b>structures</b> (linked lists, symbols, number, characters, etc.) as would {{be used by the}} underlying Lisp system.|$|R
50|$|Another {{interesting}} feature {{resulting from}} the BDOS' internal organization of current working directories as relative links to parent directories is the theoretically unlimited directory depth supported by all those above mentioned operating systems - in contrast to MS-DOS/PC DOS (and DR DOS since 1992), where an MS-DOS compatible <b>internal</b> <b>data</b> <b>structure</b> named Current Directory Structure (CDS) limits directory depths {{to a maximum of}} 66 characters.|$|E
50|$|An Interface Descriptor Block, {{or simply}} IDB, is {{a portion of}} memory or Cisco IOS <b>internal</b> <b>data</b> <b>structure</b> that {{contains}} information such as the IP address, interface state, and packet statistics for networking data. Cisco's IOS software maintains one IDB for each hardware interface in a particular Cisco switch or router and one IDB for each subinterface. The number of IDBs present in a system varies with the Cisco hardware platform type.|$|E
5000|$|The [...] {{function}} accepts textual S-expressions as input, and parses {{them into}} an <b>internal</b> <b>data</b> <b>structure.</b> For instance, if you type the text [...] at the prompt, [...] translates this into a linked list with three elements: the symbol , the number 1, and the number 2. It so happens that this list is also a valid piece of Lisp code; that is, it can be evaluated. This is because the car of the list names a function—the addition operation.|$|E
5000|$|Genetic {{programming}} (GP) is {{a related}} technique popularized by John Koza in which computer programs, rather than function parameters, are optimized. Genetic programming often uses tree-based <b>internal</b> <b>data</b> <b>structures</b> {{to represent the}} computer programs for adaptation instead of the list structures typical of genetic algorithms.|$|R
40|$|International audienceWe {{introduce}} GAC- 4 R, MDD- 4, and MDD- 4 R {{three new}} algorithms for maintaining arc consistency for table and MDD constraints. GAC- 4 R improves the well-known GAC- 4 algorithm by managing the <b>internal</b> <b>data</b> <b>structures</b> {{in a different}} way. Instead of maintaining the <b>internal</b> <b>data</b> <b>structures</b> only by studying the consequences of deletions, we propose to reset the <b>data</b> <b>structures</b> by recomputing them from scratch whenever it saves time. This idea avoids the major drawback of the GAC- 4 algorithm, i. e., its cost at a shallow search-tree depth. We also show that this idea can be exploited in MDD constraints. Experiments show that GAC- 4 R is competitive with the best arc-consistency algorithms for table constraints, and that MDD- 4 R clearly outperforms all classical algorithms for table or MDD constraints...|$|R
40|$|Polygonal model {{simplification}} algorithms take a full-sized polygonal {{model as}} {{input and output}} a less-detailed version of the model with fewer polygons. When the <b>internal</b> <b>data</b> <b>structures</b> for the input model are larger than main memory, many simplification algorithms suffer from poor performance due to paging. We presen...|$|R
5000|$|A {{method for}} {{semi-automatic}} building extraction {{together with a}} concept for storing building models alongside terrain and other topographic data in a topographical information system has been developed by Franz Rottensteiner. His approach {{was based on the}} integration of building parameter estimations into the photogrammetry process applying a hybrid modeling scheme. Buildings are decomposed into a set of simple primitives that are reconstructed individually and are then combined by Boolean operators. The <b>internal</b> <b>data</b> <b>structure</b> of both the primitives and the compound building models are based on the boundary representation methods ...|$|E
5000|$|PC DOS 4.0 (internally {{known as}} DOS 3.4 originally), shipped July 1988. DOS 4.0 had some {{compatibility}} issues with low-level disk utilities due to some <b>internal</b> <b>data</b> <b>structure</b> changes. DOS 4.0 used more memory than DOS 3.30 {{and it also}} had a few glitches. Newly added EMS drivers were only compatible with IBM's EMS boards and not the more common Intel and AST ones. DOS 4.0 is also notable for including {{the first version of}} the DOS Shell, a full screen utility designed to make the command-line OS more user friendly. Microsoft took back control of development and released a bug-fixed DOS 4.01 ...|$|E
5000|$|Besides Microsoft products, XeTeX and LuaTeX {{also have}} some level of support for these tables; support is more limited in XeTeX because it uses the {{traditional}} TeX math rendering engine (thus is cannot fully {{use some of the}} new features in OpenType math that extend TeX), while LuaTeX takes a more flexible approach by changing some of the internals of TeX's math rendering; in the words of Ulrik Vieth (2009): [...] "More precisely, while XeTeX only provides access to the OpenType parameters as additional \fontdimens, LuaTeX uses an <b>internal</b> <b>data</b> <b>structure</b> based on the combined set of OpenType and TeX parameters, making it possible to supply missing values which are not supported in either OpenType math fonts or traditional TeX math fonts." [...] In 2013, XeTeX also gained support for cut-ins.|$|E
5000|$|MUMPS {{differs from}} many {{languages}} in its {{handling of the}} null string. A {{large percentage of the}} FileMan <b>internal</b> <b>data</b> <b>structures</b> are null strings, in which the information is located {{in the name of the}} [...] "nothing" [...] being referenced. This approach does not fit the traditional Relational Data Model.|$|R
50|$|A black-box tester is {{unaware of}} the {{internal}} structure of the application to be tested, while a white-box tester {{has access to the}} internal structure of the application. A gray-box tester partially knows the internal structure, which includes access to the documentation of <b>internal</b> <b>data</b> <b>structures</b> as well as the algorithms used.|$|R
5000|$|In 2005, DFRWS {{issued a}} Memory Analysis Forensics Challenge. [...] In {{response}} to this challenge, more tools in this generation, specifically designed to analyze memory dumps, were created. These tools had knowledge of the operating system's <b>internal</b> <b>data</b> <b>structures,</b> and were thus capable of reconstructing the operating system's process list and process information.|$|R
5000|$|In 1985, two news {{archiving}} {{systems and}} one RFC were posted to the Internet. The first system, called keepnews, by Mark M. Swenson of The University of Arizona, {{was described as}} [...] "a program that attempts to provide a sane way of extracting and keeping information that comes over Usenet." [...] The main advantage of this system was to allow users to mark articles as worthwhile to retain. The second system, YA News Archiver by Chuq Von Rospach, was similar to keepnews, but was [...] "designed to work with much larger archives where the wonderful quadratic search time feature of the Unix ... becomes a real problem." [...] Von Rospach in early 1985 posted a detailed RFC for [...] "archiving and accessing usenet articles with keyword lookup." [...] This RFC described a program that could [...] "generate andmaintain an archive of Usenet articles and allow looking up articles based on the article-id, subject lines, or keywords {{pulled out of the}} article itself." [...] Also included was C code for the <b>internal</b> <b>data</b> <b>structure</b> of the system.|$|E
5000|$|If {{a program}} uses the newer file handle API {{to open a}} file, the {{operating}} system will manage its <b>internal</b> <b>data</b> <b>structure</b> associated with that file in its own memory area. This has the great advantage that these structures can grow in size in later operating system versions without breaking compatibility with application programs; its disadvantage is that, given the rather simplistic memory management of DOS, space for {{as many of these}} structures as the most [...] "file-hungry" [...] program is likely to use has to be reserved at boot time and cannot be used for any other purpose while the computer is running. Such memory reservation is done using the FILES= directive in the CONFIG.SYS file. This problem does not occur with FCBs in DOS 1 or in CP/M, since the operating system stores all that it needs to know about an open file inside the FCB and thus does not need to use any per-file memory in operating system memory space. When using FCBs in MS-DOS 3 or later, the FCB format depends on if SHARE.EXE is loaded and if the FCB refers to a local or remote file and often refer to a SFT entry. Because of this, the number of FCBs which can be kept open at once in DOS 3 or higher is limited as well, usually to 4; using the FCBS= directive in the CONFIG.SYS file, it may be increased beyond that number if necessary. Under DR-DOS, both FILES and FCBS come from the same internal pool of available handles structures and are assigned dynamically as needed.|$|E
40|$|Approved {{for public}} release; {{distribution}} in unlimited. A research effort currently underway at the Naval Postgraduate School {{deals with the}} design and implementation of a computer system for translating natural language descriptions of simulation problems into executable computer programs. In this system, English text is translated into an <b>internal</b> <b>data</b> <b>structure,</b> which can {{be considered to be}} the computer's "mental image" of a simulation problem. This <b>internal</b> <b>data</b> <b>structure</b> is then translated into a computer program which will perform the simulation. This thesis reports on the design of an appropriate <b>internal</b> <b>data</b> <b>structure</b> for conveniently representing simple queueing problems and on the development of a procedure for translating such a data structure into a GPSS program. Also, pertinent aspects of the overall system are briefly described, and an example application to a specific problem is included. [URL] Commander, United States Nav...|$|E
30|$|The {{direct method}} takes free blocks that are managed by a file system for files, and {{allocate}} {{them for the}} use of main memory. This method consults the management <b>data</b> <b>structures</b> of a file system in order to find and remove free blocks; thus, this method requires the direct manipulation of the <b>internal</b> <b>data</b> <b>structures</b> of a file system. The manipulation requires the implementation of additional code.|$|R
50|$|SNMP's {{seemingly}} simple {{tree structure}} and linear indexing {{may not always}} be understood well enough within the <b>internal</b> <b>data</b> <b>structures</b> that are elements of a platform's basic design. Consequently, processing SNMP queries on certain data sets may result in higher CPU utilization than necessary. One example of this would be large routing tables, such as BGP or IGP.|$|R
40|$|Abstract. We propose new <b>data</b> <b>structures</b> for {{navigation}} in {{sequences of}} balanced parentheses, a standard tool for representing compressed trees. The most striking property of our {{approach is that}} it shares most of its <b>internal</b> <b>data</b> <b>structures</b> for all operations. This is reflected in a large reduction of space, and also in faster navigation times. We exhibit these advantages on two examples: succinct range minimum queries and compressed suffix trees. Our <b>data</b> <b>structures</b> are incorporated into a ready-to-use C++-library for succinct <b>data</b> <b>structures.</b> ...|$|R
