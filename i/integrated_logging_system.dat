0|1810|Public
30|$|We {{propose a}} novel anti-malware {{system based on}} {{behavior}} profiling called Andro-profiler. We classify malware by exploiting the behavior profiling extracted from <b>integrated</b> <b>system</b> <b>logs.</b> Our method captures the behavior profiling by converting <b>integrated</b> <b>system</b> <b>logs</b> into human-readable contexts, which helps analysts analyze malware intuitively.|$|R
40|$|Mass-market mobile {{security}} threats have increased recently {{due to the}} growth of mobile technologies and the popularity of mobile devices. Accordingly, techniques have been introduced for identifying, classifying, and defending against mobile threats utilizing static, dynamic, on-device, off-device, and hybrid approaches. In this paper, we contribute to the {{mobile security}} defense posture by introducing Andro-profiler, a hybrid behavior based analysis and classification system for mobile malware. Andro-profiler classifies malware by exploiting the behavior profiling extracted from the <b>integrated</b> <b>system</b> <b>logs</b> including <b>system</b> calls, which are implicitly equivalent to distinct behavior characteristics. Andro-profiler executes a malicious application on an emulator in order to generate the <b>integrated</b> <b>system</b> <b>logs,</b> and creates human-readable behavior profiles by analyzing the <b>integrated</b> <b>system</b> <b>logs.</b> By comparing the behavior profile of malicious application with representative behavior profile for each malware family, Andro-profiler detects and classifies it into malware families. The experiment results demonstrate that Andro-profiler is scalable, performs well in detecting and classifying malware with accuracy greater than 98 %, outperforms the existing state-of-the-art work, and is capable of identifying zero-day mobile malware samples. Comment: 13 page...|$|R
30|$|To {{overcome}} the drawbacks in previous methods, we propose a feature-rich anti-malware {{system based on}} behavior profiling called Andro-profiler. Our proposed behavior profiling system comprises mobile devices and a remote server to facilitate profiling, and adopts profiling method in the malware analysis domain. We exploit system calls, including their arguments provided by Loadable Kernel Module (LKM) and <b>system</b> <b>logs</b> (e.g., SMS, call, and network I/O) provided by Droidbox (2011) as feature vectors for malware characterization. We define system calls and <b>system</b> <b>logs</b> as <b>integrated</b> <b>system</b> <b>logs</b> from which we directly infer behavior patterns representation using the concept of behavior profiling of Bayer et al. (2009). We assume that: (a) malware samples have unique malicious behavior patterns, (b) malicious behavior is determined by system calls, and (c) such system call set has influence {{on the behavior of}} the program (malware). We prepare representative behavior profile for each malware family represented by <b>integrated</b> <b>system</b> <b>logs</b> including <b>system</b> calls, their arguments, and <b>system</b> <b>logs</b> of Droidbox—an analysis system we utilize in this work. We construct the behavior profile of each malware sample through its <b>integrated</b> <b>system</b> <b>logs</b> by executing it on an emulator. Then, by comparing the behavior profiles across samples, we can detect and classify malware samples into related families.|$|R
3000|$|... {{recently}} due to {{the growth}} of mobile technologies and the popularity of mobile devices. Accordingly, techniques have been introduced for identifying, classifying, and defending against mobile threats utilizing static, dynamic, on-device, and off-device techniques. Static techniques are easy to evade, while dynamic techniques are expensive. On-device techniques are evasion, while off-device techniques need being always online. To address some of those shortcomings, we introduce Andro-profiler, a hybrid behavior based analysis and classification system for mobile malware. Andro-profiler main goals are efficiency, scalability, and accuracy. For that, Andro-profiler classifies malware by exploiting the behavior profiling extracted from the <b>integrated</b> <b>system</b> <b>logs</b> including <b>system</b> calls. Andro-profiler executes a malicious application on an emulator in order to generate the <b>integrated</b> <b>system</b> <b>logs,</b> and creates human-readable behavior profiles by analyzing the <b>integrated</b> <b>system</b> <b>logs.</b> By comparing the behavior profile of malicious application with representative behavior profile for each malware family using a weighted similarity matching technique, Andro-profiler detects and classifies it into malware families. The experiment results demonstrate that Andro-profiler is scalable, performs well in detecting and classifying malware with accuracy greater than 98  %, outperforms the existing state-of-the-art work, and is capable of identifying 0 -day mobile malware samples.|$|R
30|$|The BP module parsed <b>integrated</b> <b>system</b> <b>logs</b> to {{make the}} {{behavior}} profile of each malware, and stored the behavior profile as a dictionary structure of the Python language for efficient membership test. The parsing rule listed in Table  4 consists of system call and its arguments—only arguments provided by LKM, and information provided by Droidbox. The parsed behavior profile is encoded in a base- 64 format and stored in database.|$|R
30|$|The BI module is {{implemented}} as python script coupled with Droidbox. The emulator is {{run on the}} Android 2.3. 4 (level 10). In order to capture the malicious behavior, the BI module executed each application for 60  s after the installation process is completed. After capturing <b>integrated</b> <b>system</b> <b>logs</b> of malicious application, the BI module passed those logs to the BP module and restored the emulator to the initial state only for capturing malicious behavior.|$|R
40|$|On the Internet today, {{users are}} {{accustomed}} to disclosing personal information when accessing a new service. When a user does so, there is rarely a system in place which allows the user to monitor how his or her information is actually shared or used by services. One proposed {{solution to this problem}} is to have services perform transparency logging on behalf of users, informing them how their data is processed as processing is taking place. We have recently participated in a collaboration to develop a privacy-preserving secure logging scheme {{that can be used for}} the purpose of transparency logging. As part of that collaboration we created a proof of concept implementation. In this thesis, we elaborate on that implementation and integrate it with a minimalistic open source issue-tracking system. We evaluate the amount of work required to <b>integrate</b> the <b>logging</b> <b>system</b> and attempt to identify potential integration problems. Using this issue-tracking system we then design and implement a scenario that demonstrates the value of the <b>logging</b> <b>system</b> to the average user...|$|R
30|$|In this paper, we have {{presented}} Andro-profiler, an anti-malware {{system based on}} behavior profiling. Using Andro-profiler, we classified malware by exploiting the behavior profiling extracted from <b>integrated</b> <b>system</b> <b>logs,</b> which are implicitly equivalent to distinct behavior characteristics. Our behavior profiling is simple and relatively easy to understand, whereas Andro-profiler is capable of distinguishing benign and malicious applications, and malicious applications into families. Furthermore, Andro-profiler is capable of detecting 0 -day threats, which are missed by antivirus scanners.|$|R
30|$|Andro-profiler conducts malware {{characterization}} {{based on}} dynamic behavior analysis. Our system extended Droidbox to embed the Loadable Kernel Module (LKM) for hijacking system calls including their arguments. More specifically, the Behavior Identification (BI) module {{in our system}} executes malware on an emulator and monitors malicious behavior in an isolated environment. Whenever malware is executed on the emulator, the BI fetches the integrated system logger. The integrated system logger parses system calls including their arguments provided by LKM and <b>system</b> <b>logs</b> provided by Droidbox; Droidbox monitors SMS, call, and network I/O. The parsed <b>integrated</b> <b>system</b> <b>logs</b> are then passed to the decision process.|$|R
3000|$|... ({{behavior}} profiling) A behavior profiling P {{is defined}} by four tuples as P = (O, OP, Γ, Δ [...]), where O is the set of all objects and OP is the set of all operations, which is represented in nested dictionary form as name : target : attribute. Γ⊆ (O × OP) is a relation assigning more than one operation to each other, and Δ⊆ ((O × OP), (O × OP)) represents the sequence-unrelated set, which is equivalent to <b>integrated</b> <b>system</b> <b>logs.</b>|$|R
40|$|Graduation date: 1997 The timber {{shortage}} in the Pacific Northwest {{is forcing}} sawmill owners {{to improve the}} competitiveness of their harvesting and processing operations. A computer simulation and financial statement analysis were {{used to compare the}} processing efficiency and profitability of three bucking strategies: log cost minimization (traditional 40 -foot preferred-length logs); hauling length maximization (55 -foot preferred-length logs); and the <b>Integrated</b> <b>Log</b> Manufacturing <b>system</b> (ILM), a proposed computer-based strategy that acts as a harvest-site merchandiser and integrates harvest-site tree bucking and lumber manufacturing. Five days of sawmill operations were simulated for each strategy; the same second-growth Douglas-fir trees were processed each day to fill identical lumber orders. The sawmill produced 0. 4 percent and 1. 9 percent more cubic feet of targeted lumber with the 55 -foot preferred-length strategy and ILM respectively, than with the 40 -foot preferred-length strategy. Compared with the 40 -foot preferred-length strategy, sawmill profits rose 2, 262 (23...|$|R
40|$|Uncorrupted {{log files}} are the {{critical}} system component for computer forensics {{in case of}} intrusion and for real time system monitoring and auditing. Protection from tampering with information can be achieved using cryptographic functions that provide authenticity, integrity, and confidentiality. However, they cannot provide the prerequisite for any further information processing, i. e., information availability. In this case, fault tolerant strategies can be of great help improving information availability in case of accidental or deliberate deletion. In this {{paper we propose a}} <b>system</b> that increases <b>log</b> files availability in case of software deletion by reliably and efficiently distributing the logs on multiple independent machines. The proposed scheme is more efficient than simple replication, both from the storage space and the network bandwidth points of view. The proposed system has been implemented and its impact on performance has been measured. Since it operates as a postprocessor after log generation, the proposed system can be easily <b>integrated</b> with <b>logging</b> <b>systems</b> that provide various cryptographic functions for forensic purposes. 1...|$|R
40|$|This data- and {{event-driven}} {{persistent storage}} system leverages {{the use of}} commercial software provided by Oracle for portability, ease of maintenance, scalability, and ease of integration with embedded, client-server, and multi-tiered applications. In this role, the Service Management Database (SMDB) is {{a key component of}} the overall end-to-end process involved in the scheduling, preparation, and configuration of the Deep Space Network (DSN) equipment needed to perform the various telecommunication services the DSN provides to its customers worldwide. SMDB makes efficient use of triggers, stored procedures, queuing functions, e-mail capabilities, data management, and Java integration features provided by the Oracle relational database management system. SMDB uses a third normal form schema design that allows for simple data maintenance procedures and thin layers of integration with client applications. The software provides an <b>integrated</b> event <b>logging</b> <b>system</b> with ability to publish events to a JMS messaging system for synchronous and asynchronous delivery to subscribed applications. It provides a structured classification of events and application-level messages stored in database tables that are accessible by monitoring applications for real-time monitoring or for troubleshooting and analysis over historical archives...|$|R
40|$|The {{effectiveness}} of the design review process at the early stage of novel and complex ship designs has a strong influence on project success or failure. Managing complexity and covering a large decision space impose heavy demands on the process. This paper presents {{a new approach to}} supporting the review process using interactive, immersive 3 D environments linked to simulation models. The system, still under development, enables users who are non-expert in CAD to modify design parameters in real-time using a virtual-reality-based interface and receive immediate feedback from simulations and design rule checking systems. Review planning and post-analysis will be supported through an <b>integrated</b> annotation and <b>logging</b> <b>system.</b> We describe the design rationale for the system, some technical challenges, and how these will be addressed. 1...|$|R
30|$|Andro-profiler {{has a few}} {{limitations}} for detecting and classifying malware, since our proposed method uses <b>integrated</b> <b>system</b> <b>logs</b> as a feature vector and employs dynamic analysis techniques to capture malware’s behavior. First, {{it is difficult for}} our system to analyze malware that are executed only under given conditions (e.g., SDK version, cellular network connection status, time, or place). However, this shortcoming is addressable by having various platforms tailored with various settings, as used for traditional malware in Mohaisen et al. (2013). It is also impossible for our system to analyze malware embedding anti-malware analysis techniques. Second, our emulator-based anti-malware system is dependent on SDK version of emulator, so our approach has limitation on analyzing malicious behavior related to privilege escalation. However, those are common drawbacks of dynamic analysis method or emulator-based detection method and addressed in the literature at some expense.|$|R
40|$|Abstract. While logging {{events is}} {{becoming}} increasingly common in computing, in communication and in collaborative environments, <b>log</b> <b>systems</b> need to satisfy increasingly challenging (if not conflicting) requirements. In this {{paper we propose a}} high-level framework for modeling <b>log</b> <b>systems,</b> and reasoning about them. This framework allows one to give a high-level representation of a <b>log</b> <b>system</b> and to check whether it satisfies given audit and privacy properties which in turn can be expressed in standard logic. In particular, the framework can be used for comparing and assessing <b>log</b> <b>systems.</b> We validate our proposal by formalizing a number of standard log properties and by using it to review a number of existing systems. Despite the growing pervasiveness of <b>log</b> <b>systems,</b> we believe this is the first framework of this sort. ...|$|R
30|$|Zawoad et al. {{proposed}} a Secure-Logging-as-a-Service (SecLaaS) system designed for collecting forensic logs from the cloud [66]. The researchers implemented the <b>logging</b> <b>systems</b> with OpenStack and Snort. They {{suggested that the}} <b>logging</b> <b>system</b> requires minimal overhead.|$|R
50|$|Electrical {{cable and}} {{borehole}} <b>logging</b> <b>system,</b> 1973.|$|R
5000|$|Export event data to <b>logging</b> <b>systems</b> using syslog and RabbitMQ ...|$|R
40|$|AbstractIn this study, record, {{evaluation}} and planning of knowledge work experiences in personal research environments is applied via a life <b>logging</b> <b>system,</b> which has ability to capture screen shots and camera shots continuously {{for a month}} and then observations of this study are discussed. The life <b>logging</b> <b>system</b> is individually applied by first author {{for a month and}} then it is evaluated by both of the authors via logs and semi-structured interviews. As a result of the evaluation, it is seen that the life <b>logging</b> <b>system</b> has a potential for managing knowledge work experiences on personal research environments...|$|R
40|$|Abstract—We {{present a}} high {{performance}} <b>logging</b> <b>system</b> for embedded UNIX and GNU/Linux applications. Compared {{to the standard}} UNIX and GNU/Linux logging method, syslog, our method has two orders of magnitude lower latency and {{an order of magnitude}} higher message throughput. This speed-up is mainly due to the use of a memory-mapped file as the means of interprocess communication, fewer memory copies and the batching of output messages in the logging daemon. In addition, our <b>logging</b> <b>system</b> also accepts syslog messages, providing compatibility with existing applications. Our <b>logging</b> <b>system</b> is in production use in the Cisco UCS Virtual Interface Card. I...|$|R
40|$|This paper {{describes}} a forensic <b>logging</b> <b>system</b> that collects fine-grained trace evidence from target servers and networks. To {{provide a more}} reliable and efficient forensic <b>logging</b> <b>system,</b> we developed a dedicated network processor that collects network traffic and a hardened TCSEC-B 1 level secure operating system. The system also is capable of defending servers from malicious attacks as well as allowing system security managers to obtain forensic evidence from the forensic <b>logging</b> <b>system</b> when the target system is assaulted by malicious attacks from the internet. We present {{the structure of the}} system and discuss the benchmark test results of our prototype system...|$|R
50|$|Chlorine <b>logging</b> <b>system</b> using {{neutron capture}} gamma rays. U.S. Patent No. 3,244,882.|$|R
50|$|The {{approximate}} equivalent type {{of vehicle}} in full-tree <b>logging</b> <b>systems</b> are feller-bunchers.|$|R
50|$|Radioactive well <b>logging</b> <b>system</b> {{having a}} {{multiple}} conductor cable. U.S. Patent 3,439,165.|$|R
50|$|Many {{operating}} systems, software frameworks, {{and programs}} include a <b>logging</b> <b>system.</b> A widely used logging standard is syslog, defined in Internet Engineering Task Force (IETF) RFC 5424). The syslog standard enables a dedicated, standardized subsystem to generate, filter, record, and analyze log messages. This relieves software developers {{of having to}} design and code their own ad hoc <b>logging</b> <b>systems.</b>|$|R
40|$|Comparison of the CUL <b>Logs</b> <b>system</b> to Google Analytics, {{a summary}} of {{what is in the}} CUL <b>Logs</b> <b>system,</b> and {{interesting}} examples of reports that are available to CUL staff. Adam will also briefly describe a new CUL task force that is charged with writing a report over the coming months that will describe the usage data landscape across CUL...|$|R
50|$|Software based <b>logging</b> <b>systems</b> allow clip lists to be {{imported}} directly into computer based editing systems.|$|R
40|$|We {{present a}} {{topology}} processing technique for substations. The proposed technique synchronizes substation event information using a <b>logging</b> <b>system,</b> overcoming existing problems of SCADA systems, such as inaccurate timing information of substation events and unreliable topology processing in presence of bad data. The {{design of the}} proposed event <b>logging</b> <b>system</b> and its application are also presented. Yang Liu, Rastko Zivanovic, Said Al-Sarawi Cristian Marinescu and Richard Cochra...|$|R
50|$|Another study {{conducted}} by Chapman and his colleagues in 2000 showed that many species of primates returned {{and came back to}} their original densities in lightly logged forest but in the heavily logged forest primates species were not able to recover. This study helps support that Kibale National Forest needs to develop a light <b>logging</b> <b>system</b> different from their heavily <b>logging</b> <b>system</b> they conduct now.|$|R
50|$|A cable <b>logging</b> <b>system</b> {{exists in}} Lushoto District, whereby logs are transported from the Usambara Mountains downhill.|$|R
40|$|An {{extension}} of the sensitivity analysis of linear programxning, called parametric programming is used in determining optimal sawtirnber <b>logging</b> <b>system</b> mix. The five <b>logging</b> <b>systems</b> under study are manual log-length, system, log-length processor and harvester systems, manual tree-length system and tree-length harvester system. In conditions where it is not exactly known how much the monetary value of the final saw wood varies {{as a function of}} the <b>logging</b> <b>system</b> used, the parametric programming aoproach gives the ranges for those values. If the market value of the saw wood is the same no matter what <b>logging</b> <b>system</b> is used, it is economical to use tree-length harvesting systems under the assumptions of the study. However, if the difference in value is more than 3. 90 /m 3 (* 14. 85 FmJc/m 3) in favor of log-length systems, the tree-length systems are completely replaced by loglength systems in the conditions of Southern Finland. These results cannot be generalized, however, since each sawmill must be regarded as a special case. The approach developed for this study can be used to solve the problem in each particular case...|$|R
40|$|Filled with {{valuable}} data such as transactions, {{records and}} confidential information, <b>system</b> <b>logs</b> are lucrative targets for attack. Most computer <b>systems</b> use simple <b>logging</b> schemes that offer no protection after compromise. Various schemes {{have been proposed}} to strengthen <b>logging</b> <b>systems</b> by allowing verification of log integrity, protecting the confidentiality of the contents, and securely relocating <b>logs</b> on remote <b>systems.</b> Such <b>logging</b> <b>systems</b> increase overall system security by preventing certain attacks on the logs and providing accuracy guarantees for post-attack forensics. This paper summarizes the existing proposals in Secure Audit Logging, presents unaddressed problems in these proposals, and offers suggestions to enhance Secure Audit Log technology...|$|R
50|$|The {{signals are}} {{generally}} detected using a data <b>logging</b> <b>system,</b> {{capable of taking}} high resolution samples in the millivolt range.|$|R
50|$|The product {{implements}} a fully ACID-compliant transaction <b>logging</b> <b>system</b> {{with automatic}} recovery capability. This facility {{is also used}} for asynchronous replication.|$|R
40|$|This paper {{presents}} {{the design and}} implementation of a multi-channel data acquisition and <b>logging</b> <b>system</b> {{which can be used}} in a variety of applications. The designed data acquisition and <b>logging</b> <b>system</b> uses analog multiplexer, a bipolar analog to digital converter, a voltage reference and an SD card. The device is developed around PIC Microcontroller. The most important feature of the device which makes it different from other data acquisition devices is the presence of the Ethernet port. This feature enables it to work in networked environment. The performance of the device is tested and crosschecked. The present data acquisition and <b>logging</b> <b>system</b> is expected to be very useful to varieties of our own developmental projects, given its ability to locally store data and availability of general purpose digital I/O...|$|R
