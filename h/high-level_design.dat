622|479|Public
5|$|The Climate Change Response Act 2002 {{requires}} {{a review of}} the NZ ETS by an independent review panel every five years, with the first review to be completed in 2011. An Issues Statement and Call for Written Submissions document was released in March 2011, and the final report was released in September 2011. The review focused on the <b>high-level</b> <b>design</b> of the NZ ETS, particularly in the context of international efforts to tackle climate change post-2012.|$|E
25|$|The International Energy Agency (IEA), {{under the}} auspices of their Offshore Code Comparison Collaboration (OC3) initiative, has {{completed}} <b>high-level</b> <b>design</b> and simulation modeling of the OC-3 Hywind system, a 5-MW wind turbine installed on a floating spar buoy, moored with catenary mooring lines, in water depth of 320 metres. The spar buoy platform would extend 120 metres below the surface and the mass of such a system, including ballast would exceed 7.4millionkg.|$|E
50|$|In {{both cases}} the <b>high-level</b> <b>design</b> should be a {{complete}} view of the entire system, breaking it down into smaller parts that are more easily understood. To minimize the maintenance overhead as construction proceeds and the lower-level design is done, it is best that the <b>high-level</b> <b>design</b> is elaborated only to the degree needed to satisfy these needs.|$|E
50|$|Today, most <b>high-level</b> <b>designs</b> require {{contributions}} {{from a number}} of experts, representing many distinct professional disciplines.|$|R
50|$|Nassi - Shneiderman {{diagrams}} {{are only}} rarely used for formal programming. Their abstraction level {{is close to}} structured program code and modifications require the whole diagram to be redrawn. Nonetheless, they can be useful for sketching processes and <b>high-level</b> <b>designs.</b>|$|R
40|$|Maximin {{distance}} designs as {{an important}} class of space-filling designs are widely used today, yet their constructions are challenging. In this article, we develop a 3 -step procedure which can efficiently generate maximin distance Latin hypercube designs and maximin distance fractional factorial designs. This new method selects existing efficient low-level <b>designs</b> to generate <b>high-level</b> maximin distance <b>designs</b> via level expansion. The generated maximin distance designs are of flexible run and factor sizes and also have robust pairwise correlations. To justify this method, we derive the relationships of the distance distributions between the initial low-level designs and the generated <b>high-level</b> <b>designs.</b> We also prove {{the relationships between the}} generalized word length patterns of the initial low-level designs and the distance distributions of the generated <b>high-level</b> <b>designs.</b> Examples are presented to show that this new method outperforms many current prevailing methods in generating maximin distance designs...|$|R
50|$|A <b>high-level</b> <b>design</b> {{provides}} an overview of a system, product, service or process.|$|E
5000|$|High-level {{synthesis}} (or behavioural synthesis, algorithmic synthesis) [...] - [...] <b>high-level</b> <b>design</b> description (e.g. in C/C++) {{is converted}} into RTL.|$|E
50|$|Documenting {{software}} architecture facilitates communication between stakeholders, captures early {{decisions about the}} <b>high-level</b> <b>design,</b> and allows reuse of design components between projects.|$|E
5000|$|... iii. Assess <b>high-level</b> {{conceptual}} <b>design</b> {{and related}} investment and risks ...|$|R
5000|$|AsmBook: E.Börger, R.Stärk. Abstract State Machines: A Method for <b>High-Level</b> System <b>Design</b> and Analysis ...|$|R
5000|$|Egon Börger and Robert Stärk, Abstract State Machines: A Method for <b>High-Level</b> System <b>Design</b> and Analysis, Springer-Verlag, 2003. (...) ...|$|R
50|$|Finally, {{every type}} of {{end-user}} should be identified in the <b>high-level</b> <b>design</b> and each contributing design should give due consideration to customer experience.|$|E
50|$|During the {{detailed}} phase the logical and functional design {{is done and}} the design of application structure is developed during the <b>high-level</b> <b>design</b> phase.|$|E
50|$|Architects make <b>high-level</b> <b>design</b> choices {{much more}} often than {{low-level}} choices. In addition, the architect may sometimes dictate technical standards, including coding standards, tools, or platforms.|$|E
40|$|Abstract. We {{explain the}} use of PEPA nets in documenting <b>high-level</b> <b>designs</b> of mobile code and mobile {{computing}} systems. This modelling language (which allows the modeller to differentiate between locationchanging and state-changing operations in the system, and to quantify their computational expense for use in predictive performance analysis) {{is applied to the}} problem of modelling the canonical mobile code design paradigms which are in practical application today, as described in [2]. ...|$|R
50|$|In fact, {{normalized}} {{systems are}} {{a specific way}} of viewing service-oriented architectures (SOA), which are currently prevalent in academic literature. Indeed, the essence of SOA {{can be described as}} a new way of building <b>high-level</b> <b>designs.</b> Unfortunately, there are at this moment very few guidelines or laws on how this should be done, which is a major shortcoming. Normalized systems principles {{can be seen as a}} contribution to solving this problem.|$|R
30|$|Therefore, {{this work}} {{attempts}} {{to examine the}} development of a <b>High-Level</b> Software <b>design</b> tool which would provide existing Design Patterns during the design process, enhanced by Context Aware recommendations. The tool aims to examine how users, students and professionals, perceive the usage of Design Patterns recommendations during the process of <b>designing</b> a <b>High-Level</b> software diagram, using recommended Design Patterns from multiple heterogenous data sources, for learning or applying them in <b>High-level</b> Software <b>design</b> diagrams.|$|R
50|$|Elliptics and its {{supporting}} {{projects are}} being documented at community wiki. It contains <b>high-level</b> <b>design</b> docs, tutorial, low-level details and knowledge base. Elliptics and related projects {{are discussed in}} open Google group.|$|E
50|$|A {{software}} architect is {{a software}} expert who makes <b>high-level</b> <b>design</b> choices and dictates technical standards, including software coding standards, tools, and platforms. The leading expert {{is referred to}} as the chief architect.|$|E
50|$|CoreASM is an {{open source}} project (licensed under Academic Free License version 3.0) {{that focuses on the}} design of a lean {{executable}} ASM (Abstract State Machines) language, in combination with a supporting tool environment for <b>high-level</b> <b>design,</b> experimental validation, and formal verification (where appropriate) of abstract system models.|$|E
40|$|Ideally, {{developers}} of software for embedded and reac-tive systems {{would like to}} be able to produce <b>high-level</b> <b>designs</b> of their software that are abstract, understandable todomain/application experts, executable, and automatically verifiable. They would then be able to automatically gen-erate efficient and certified code from their designs that can run on a wide variety of execution platforms and real-timeoperating systems (RTOSes). Even if the code produced was not production-quality, it would at least function as...|$|R
50|$|Software design usually {{involves}} {{problem solving and}} planning a software solution. This includes both a low-level component and algorithm <b>design</b> and a <b>high-level,</b> architecture <b>design.</b>|$|R
40|$|Abstract. We {{describe}} a novel performability modelling approach which facilitates the efficient solution of performance models extracted from high-level descriptions of systems. The notation which we use for our <b>high-level</b> <b>designs</b> is the UML graphical modelling language. The technology which provides the efficient representation capability for the underlying performance {{model is the}} MTBDD-based PRISM probabilistic model checker. The UML models are compiled through an intermediate language, the stochastic process algebra PEPA, before translation into MTBDDs for solution. We illustrate our approach on a real-world analysis problem from the domain of mobile telephony. ...|$|R
50|$|A <b>high-level</b> <b>design</b> {{document}} or HLDD {{adds the}} necessary details {{to the current}} project description to represent a suitable model for coding. This document includes a high-level architecture diagram depicting {{the structure of the}} system, such as the databasearchitecture, application architecture (layers), application flow (navigation), security architecture and technology architecture.|$|E
50|$|In January 2011, Xilinx {{acquired}} {{design tool}} firm AutoESL Design Technologies and added System C <b>high-level</b> <b>design</b> for its 6- and 7-series FPGA families. The addition of AutoESL tools extends the design community for FPGAs to designers {{more accustomed to}} designing {{at a higher level}} of abstraction using C, C++ and System C.|$|E
50|$|The <b>high-level</b> <b>design</b> {{concept of}} Scenicruiser resembles {{some of the}} rolling stock of the passenger-carrying railroads of the United States and Canada, {{particularly}} their popular stainless steel dome cars. This type of two-level motorcoach body was common in the late forties in Western Europe, including Great Britain where it was known as Observation coach.|$|E
50|$|The {{structurally}} deficient {{bridge is}} planned for replacement around 2020. An Environmental Assessment released in May 2014 identified two preferred alternatives: a bascule bridge similar in size to the existing span, or a vertical lift bridge with possibly increased clearances. Either option would be built on a parallel alignment 48 feet m south of the existing bridge. Fully <b>high-level</b> <b>designs</b> without movable sections were eliminated from consideration due to the massive approaches {{that would have to}} be built, which would have major impacts on nearby wetlands and increase construction and land acquisition costs.|$|R
40|$|We {{describe}} a novel performability modelling approach, which facilitates the efficient solution of performance models extracted from high-level descriptions of systems. The notation which we use for our <b>high-level</b> <b>designs</b> is the Unified Modelling Language (UML) graphical modelling language. The technology which provides the efficient representation capability for the underlying performance {{model is the}} multi-terminal binary decision diagram (MTBDD) -based PRISM probabilistic model checker. The UML models are compiled through an intermediate language, the stochastic process algebra PEPA, before translation into MTBDDs for solution. We illustrate our approach on a real-world analysis problem from the domain of mobile telephony...|$|R
3000|$|We {{combine the}} observe–orient–decide–act (OODA) {{cognitive}} behavior model and collective {{intelligence in the}} <b>high-level</b> architecture <b>design</b> and tackle the four major challenges, i.e., autonomous observation and collective perception, autonomous orientation and collective cognition, autonomous decision and collective game, autonomous action and collective dynamics; [...]...|$|R
50|$|In 1981, the U.S. Department of Defense began {{funding of}} VHDL as a {{hardware}} description language. In 1986, Verilog, another popular <b>high-level</b> <b>design</b> language, {{was first introduced}} as a hardware description language by Gateway Design Automation. Simulators quickly followed these introductions, permitting direct simulation of chip designs: executable specifications. In a few more years, back-ends were developed to perform logic synthesis.|$|E
50|$|The goal of LLD or a {{low-level}} design document (LLDD) {{is to give}} the internal logical design of the actual program code. <b>High-level</b> <b>design</b> is created based on the low-level design. LLD describes the class diagrams with the methods and relations between classes and program specs. It describes the modules so that the programmer can directly code the program from the document.|$|E
50|$|A {{traceability}} matrix is a document, {{usually in the}} form of a table, used to assist in determining the completeness of a relationship by correlating any two baselined documents using a many-to-many relationship comparison. It is often used with high-level requirements (these often consist of marketing requirements) and detailed requirements of the product to the matching parts of <b>high-level</b> <b>design,</b> detailed design, test plan, and test cases.|$|E
40|$|A Shared Access Platform to Photonic Integrated Resources (SAPPHIRE) is presented, {{which aims}} {{to become the first}} {{national}} infrastructure enabling a shared access of different users to a generic silicon photonic foundry. The platform is based on the concept of <b>high-level</b> circuit <b>design</b> for photonic integrated circuits (PICs), where complex architectures can be designed without a specific knowledge of either electromagnetic (EM) or technological issues, but simply operating at the circuit level on a selected set of elementary functional elements, named building blocks (BBs). The main roles of the SAPPHIRE platform in the foundry-Users interactions are discussed, as well as the concept of photonic BBs and circuit simulation. Results on a proof-of-concept device are shown to demonstrate the validity of the <b>high-level</b> circuit <b>design</b> for PICs...|$|R
40|$|Abstract. Since {{the launch}} of the Agile Manifesto there has been nu-merous propositions in how to combine agile {{practices}} with Model-driven Development. Ideally the combination would give the benefits of agile – e. g. rapid response to changes and shorter lead times – with the promises of Model-driven development – such as <b>high-level</b> <b>designs</b> and automa-tion. A commonality among the proposals is that they lack in empirical evaluation. Our contribution is a systematic literature review to find out to what experiences there are of Model-driven Agile Development, MAD, from an empirical context. Among our conslusions is that MAD is sitll an immature research area and that more experience reports from industry are needed before we can claim to have understood the possibilities and drawbacks of MAD...|$|R
40|$|Abstract: 2 ̆ 2 We discuss our {{experience}} with an interface that gives users {{the ability to}} directly represent and manipulate goals at several levels of detail. The interface is built into Bridge, a tutorial environment for novice programmers. The name comes from our intended 2 ̆ 7 bridge 2 ̆ 7 between novice and expert conceptions of programming. In order to understand student designs and partial programs, Bridge provides languages that allow a student {{to talk about his}} or her <b>high-level</b> <b>designs</b> and partial work. We call the vocabulary of these languages plans. Plans are bundles of knowledge about the standard subtasks in a domain, designed and organized based on a typical user 2 ̆ 7 s point of view. 2 ̆...|$|R
