1|7|Public
50|$|It is {{important}} to note that notations such as UML or the <b>flowchart</b> <b>symbol</b> collection are not pattern languages. They could more closely be compared to an alphabet: their symbols could be used to document a pattern language, but they are not a language by themselves. A recipe or other sequential set of steps to be followed, with only one correct path from start to finish, is also not a pattern language. However, the process of designing a new recipe might benefit from the use of a pattern language.|$|E
50|$|Commonly a {{decision}} tree is drawn using <b>flowchart</b> <b>symbols</b> {{as it is}} easier for many to read and understand.|$|R
5000|$|Flowgorithm {{combines}} the classic <b>flowchart</b> <b>symbols</b> and {{those used by}} SDL diagrams. The color of each shape is shared by the associated generated code and the console window. The colors can be changed to several built-in themes.|$|R
40|$|The work is {{concerned}} with development of application for fast and efficient way of assembling algorithms using flowcharts and their subsequent walkthrough visualization for purpose of teaching algorithms. First {{part of the work}} consists of basic terminology description, which describes in particular the different <b>flowchart</b> <b>symbols.</b> Other parts of the work are devoted to the analysis of the treated subject, application design and interesting sections of development. The last part of the thesis summarizes the verification of the application in practice and the results of this work...|$|R
40|$|Abstract. Multiphysics and multiscale–or coupled–systems {{share one}} {{fundamental}} requirement: Construction of coupling mechanisms to im-plement complex data exchanges between a system’s constituent mod-els. I {{have created a}} graphical schema for describing coupling workflows {{that is based on}} a theoretical framework for describing coupled sys-tems. The schema combines an expanded set of traditional <b>flowchart</b> <b>symbols</b> with pictograms representing data states. The data pictograms include distributed mesh, field, and domain decomposition descriptors and spatiotemporal integration and accumulation registers. Communica-tions pictograms include: blocking- and non-blocking point-to-point and M ×N parallel data transfer; parallel data transposes; collective broad-cast, scatter, gather, reduction and barrier operators. The transformation pictograms include: intergrid interpolation; spatiotemporal integral op-erators for accumulation of state and flux data; and weighted merging of output data from multiple source models for input to a destination model. I apply the schema to simple problems illustrating real situations in coupler design and implementation. ...|$|R
40|$|Abstract—In this paper, {{we address}} the problem of {{segmentation}} and recognition of on-line flowcharts. Flowcharts are bi-dimensional documents, {{in the sense that the}} order of writing is not defined. Some statistical approaches have been proposed in the literature to label and segment the flowcharts. However, as they are very well structured documents, we propose to introduce some structural and syntactic knowledge on flowcharts to improve their recognition. For this purpose, we have used an existing grammatical off-line method with on-line a posteriori signal. We apply this work on a freely available database. The results demonstrate the interest of structural knowledge on the context to improve the recognition. Keywords-structured documents, <b>flowcharts,</b> <b>symbol</b> recognition, on-line analysis, grammatical analysis, segmentation even something else. The second challenge is to deal with the fact that most of the symbols are multi-strokes, and that the strokes of one symbol have not necessarily been written successively. To sum up, we are faced with two segmentation problems for the strokes: the confusion between symbols and text and the confusion between two kinds of symbols. I...|$|R
5000|$|The American National Symbols Institute (ANSI) set {{standards}} for <b>flowcharts</b> and their <b>symbols</b> in the 1960s. The International Organizations for Standardization (ISO) adopted the ANSI symbols in 1970. The current standard was revised in 1985. Generally, flowcharts flow {{from top to}} bottom and left to right.|$|R
40|$|A D-Chart is a {{style of}} <b>flowchart</b> using control <b>symbols</b> highly {{appropriate}} to modern structured programming languages. The intent of a D-Chart {{is to provide a}} clear and concise one-for-one mapping of control symbols to high-level language constructs for purposes of design and documentation. The notation lends itself to both high-level and code-level algorithmic description. The various issues that may arise when representing, in D-Chart style, algorithms expressed in the more popular high-level languages are addressed. In particular, the peculiarities of mapping control constructs for Ada, PASCAL, FORTRAN 77, C, PL/I, Joviai J 73, HAL/S, and Algol are discussed...|$|R

