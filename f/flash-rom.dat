5|0|Public
50|$|Based on the e200 core that {{stems from}} the MPC5xx core, it is upwards-compatible with the newer e500 core and the older PowerPC Book E specification. Focus is on {{automotive}} and industrial control systems, like robotics, power train and fuel injection. The cores are {{the basis for a}} multitude of SoC controllers ranging from 40 to 600 MHz with a variety of additional functionality, like <b>Flash-ROM,</b> Ethernet controllers, and custom I/O. All MPC55xx processors are compliant with the Power ISA v.2.03 specification.|$|E
30|$|In the WPI, the {{transfer}} {{rate for the}} observation mode, burst mode, maximum rate of mission, and data generated from multiple instruments {{is as high as}} 10.5  Mbps (Katoh et al. 2018; Hikishima et al. 2018). The generation time of the burst data is approximately 10 – 20  min per orbit (approximately 1 – 2  GB), but the WPI mode observation is carried out at each orbit (approximately 9  h/orbit); therefore, it is necessary to secure a large data storage area in the mission system because the downlink to the ground station transfers less than about 3  GB of data per day. We developed a new data recorder that has a few tens of GB in memory but is sufficient for the Arase mission data. A memory device having a data capacity of tens of GB is limited to the <b>Flash-ROM</b> when resources such as size and power are taken into consideration. Using a 40 -GB <b>Flash-ROM</b> device (recording capacity is 32  GB), which is a three-dimensional high-density packaging module made by 3 D-plus Co. Ltd., we have succeeded in developing an MDR that has a large stored memory but is as compact as an A 5 sheet of paper. The 32 -GB memory area is divided into approximately ten areas (partitions called “category”), and the data of different instruments are stored in each partition, available for use. As described below, since the necessary data is selected by the time retrieval module and processing is performed, it is necessary to write the data in different partitions for each set of data to be selected. Since it is necessary to write the <b>Flash-ROM</b> in block units, the MDR temporarily buffers input data of 10.5  Mbps on the synchronous dynamic random access memory (SDRAM). When the block size is reached or after {{a certain amount of time}} elapses, input data are written from the SDRAM to the <b>Flash-ROM</b> memory areas. In addition, to prolong the life of the <b>Flash-ROM,</b> which is limited by the number of times it can be written to, the Ware Leveling function is carried out. In Flash-ROMs, defective blocks are present as early as the manufacturing process, and new defective blocks are generated depending on the use frequency. Therefore, the Ware Leveling function detects a bad block, manages it through the use of a table, and performs controls preventing the writing of data to a newly generated bad block during operation. By writing input data from the top address to the end address of each partition area in the <b>Flash-ROM</b> memory, the number of write times on the device is made uniform and the life of the <b>Flash-ROM</b> is extended.|$|E
40|$|Copyright {{protection}} {{should not}} be limited to content alone. Software, running on an embedded device and stored in its <b>flash-ROM,</b> is also in danger of being copied or rebranded, resulting in lost revenues and liability issues. Cryptography is a way to prevent this, while being invisible to the customers...|$|E
30|$|The MDR-received {{data format}} {{conforms}} to the space packet (CCSDS) regulation as the upper layer protocol of the SpaceWire/RMAP (CCSDS 2012). When the MDR receives the data packet, it reads the application process identifier (APID) included in the space packet primary header and the category that is the MDR save destination area, and checks whether the corresponding area for the category exists. When there is a corresponding category, the received data is registered in a queue that is prepared for each category. The MDR creates the table that correlates the satellite time written in the received data with the physical address {{in which it is}} to be saved on the <b>Flash-ROM,</b> such that the time search function of the saved data in the MDR can be performed. The new “time search function” in the MDR was developed to facilitate access to the stored data. The time tag information is stored in the secondary header of the received space packet. This time the tag information is recorded in the data, not as the receipt time by the MDR, but as the time of data generation by each instrument.|$|E
40|$|Compression {{techniques}} {{are widely used}} {{to reduce the amount}} of memory that is needed to store data. A common scenario is the use of compressed data on a secondary storage device. For subsequent access, data has to be retrieved and decompressed. One might assume that the additional decompression step implies a performance penalty. However, a careful selection of a suitable compression method and an optimized implementation of a decompressor can even improve the overall performance. Example Consider a device from which a user expects that it is almost immediately available, for example a mobile phone or a PDA. For such a device, the boot-up time has to be minimal. We exclude those PDAs that do not boot after being switched on. Because these devices always power the memory –at the expense of a slightly shorter battery life – they merely need to activate display and processor. The operating system and some applications of the device are usually stored in an image file that is typically located on a persistent secondary storage, such as a <b>flash-ROM</b> (since it should be exchangeable). The execution in-place, i. e. directly on the flash chip, would be slower due to the worse access rate of the flash chip. Therefore, the image is copied into main memory before the operating system is started. Since flash-ROMs are rather expensive, it is desirable to reduce the size of the image, e. g. by means of compression techniques. However, instead of copying the image from flash to main memory, it now has to be decompressed during boot-up. Since the boot time should be minimal, decompression may not be slower compared to copying. In the exampleresolved section, we will show that this goal is indeed possible. Context An application or device that needs to load read-only data from a secondary storage, either at start-up or when needed. The following simple figure denotes the transfer from secondary storage to main memory...|$|E

