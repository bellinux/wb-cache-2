10000|10000|Public
5|$|Chemotherapy {{can cause}} {{reactivation}} of hepatitis B, and doxorubicin-containing regimens are no <b>exception.</b>|$|E
5|$|In July 2009, Yao {{discussed}} the injury with his doctors, and the Rockets {{applied for a}} disabled player <b>exception,</b> an <b>exception</b> to the NBA Salary Cap which grants the injured player's team money to sign a free agent. The Rockets were granted the <b>exception,</b> and used approximately $5.7million on free agent Trevor Ariza. After weeks of consulting, {{it was decided that}} Yao would undergo surgery in order to repair the broken bone in his left foot. He did not play the entire 2009–10 season.|$|E
5|$|Judicial Commissioner Menon also {{mentioned}} another <b>exception</b> to the justiciability rule: when {{the courts are}} able to isolate a pure question of law from what is seemingly a non-justiciable issue. However, the judge did not explain this <b>exception</b> further, {{and it has not}} yet been applied or discussed in any other Singapore case.|$|E
40|$|We {{define a}} proof system for <b>exceptions</b> which {{is close to}} the syntax for <b>exceptions,</b> {{in the sense that the}} <b>exceptions</b> do not appear {{explicitly}} in the type of any expression. This proof system is sound with respect to the intended denotational semantics of <b>exceptions.</b> With this inference system we prove several properties of <b>exceptions.</b> Comment: 11 page...|$|R
40|$|<b>Exceptions,</b> {{situations}} that cannot be correctly processed by computer systems, occur frequently in computer-based information processes. Five perspectives on <b>exceptions</b> provide insights into why <b>exceptions</b> occur {{and how they}} might be eliminated or more efficiently handled. We investigate these perspectives using an in-depth study of an operating information process that has frequent <b>exceptions.</b> Our results {{support the use of}} a total quality management (TQM) approach of eliminating <b>exceptions</b> for some <b>exceptions,</b> in particular, those caused by computer systems that are poor matches to organizational processes. However, some <b>exceptions</b> are explained better by a political system perspective of conflicting goals between subunits. For these <b>exceptions</b> and several other types, designing an integrated human-computer process will provide better performance than will eliminating <b>exceptions</b> and moving toward an entirely automated process...|$|R
40|$|Abstract — The use of <b>exceptions</b> in {{programming}} languages {{is usually}} reserved for exceptional conditions. This is a narrow view of <b>exceptions,</b> however. We demonstrate how <b>exceptions</b> {{can be used to}} express common programming language constructs, and thus form the basis of a new type of exception-based programming language. We also generalize <b>exceptions</b> so that they may be thrown into a program’s future execution, not just its past. Implementation techniques for both generalized and traditional <b>exceptions</b> are presented. Index Terms — Programming languages, <b>exceptions,</b> control flo...|$|R
5|$|A five-per-side game is {{also common}} in indoor netball. Players can move {{throughout}} the court, with the <b>exception</b> {{of the shooting}} circles, which are restricted to certain attacking or defending players.|$|E
5|$|All NCHS {{students}} {{expect a}} 2-week based timetable, with supplementary lessons {{for four days}} allocated to individual subjects according to their academic needs (with the <b>exception</b> for Wednesdays).|$|E
5|$|All {{activities}} {{were open to}} slaves with the <b>exception</b> of politics. For the Greeks, politics was the only activity worthy of a citizen, the rest being relegated wherever possible to non-citizens. It was status that was of importance, not activity.|$|E
5000|$|No new <b>exceptions</b> {{should be}} thrown by {{methods of the}} subtype, except where those <b>exceptions</b> are {{themselves}} subtypes of <b>exceptions</b> thrown by the methods of the supertype.|$|R
50|$|Throwing {{the right}} kind of <b>exceptions</b> is {{particularly}} enforced by checked <b>exceptions</b> in the Java programming language, and starting with language version 1.4 almost all <b>exceptions</b> support chaining.|$|R
2500|$|Checked <b>exceptions</b> can, at compile time, {{reduce the}} {{incidence}} of unhandled <b>exceptions</b> surfacing at runtime in a given application. Unchecked <b>exceptions</b> (such as the Java objects [...] and [...] ) remain unhandled.|$|R
5|$|All chartings are conjunctions of the single/album {{version and}} remix, with the <b>exception</b> of Australia and Sweden, which are chartings of the {{official}} remix version exclusively.|$|E
5|$|All these {{flowers are}} white, with the <b>exception</b> of Camellia sinensis {{which has a}} yellow centre, and all either have dense {{filaments}} or are formed of tight clusters of small flowers.|$|E
5|$|Also in Gooding, the Court {{approved}} of a hearsay <b>exception</b> for {{the statement of}} {{an agent of the}} defendant, holding that the doctrine should be the same in civil and criminal cases.|$|E
40|$|Interface <b>exceptions</b> (explicitly {{declared}} <b>exceptions</b> that {{a method}} can propagate outside) are an inherent {{part of the}} interface describing the behaviour of a particular class of objects. Evolution of system behaviour is thus necessarily accompanied by and reflected {{in the evolution of}} interface <b>exceptions.</b> While evolution of normal system behaviour is adequately supported by various language mechanisms, such as subtyping and inheritance, few contemporary object-oriented programming languages o#er support for the evolution of interface <b>exceptions.</b> Some languages permit specialising and deleting interface <b>exceptions</b> while subtyping, but none of them provides an adequate support for adding <b>exceptions.</b> In this paper we propose two complementary solutions for dealing with additional <b>exceptions</b> introduced while system evolution. To solve the problem of non-conforming interfaces resulting from the addition of new <b>exceptions</b> in a development step, the first proposal uses rescue [...] ...|$|R
2500|$|<b>Exceptions</b> {{are handled}} by the rescue clause. Such a clause can catch <b>exceptions</b> that inherit from StandardError. Other flow control {{keywords}} {{that can be used}} when handling <b>exceptions</b> are else and ensure: ...|$|R
2500|$|The {{exclusive}} {{right of the}} author is not absolute. According to WIPO treaties, local legislation may make <b>exceptions</b> to exclusive copyrights only if these <b>exceptions</b> fulfill a [...] "three-step test": limitations and <b>exceptions</b> ...|$|R
5|$|Although London {{has many}} ties to Middlesex County, it {{is a totally}} {{separate}} entity; the two have no jurisdictional overlap. The <b>exception</b> is the Middlesex County courthouse and former jail, as the judiciary is administered directly by the province.|$|E
5|$|Appeals are {{not heard}} by courts, but {{only within the}} Executive Branch (with an <b>exception</b> not here relevant).|$|E
5|$|Approximately once a year, Haake writes {{most of the}} band's lyrics, {{with the}} <b>exception</b> of {{finished}} tracks. His lyrical inspirations are derived from books and films. Although Meshuggah does not record concept albums, the band prefers strong conceptual underpinnings in the background.|$|E
5000|$|None of the <b>exceptions</b> {{discussed}} in the <b>Exceptions</b> section apply to the alien.|$|R
40|$|Compliance to the Indiana Department of Transportation 2 ̆ 7 s (INDOT) highway design {{criteria}} is considered essential {{to ensure the}} roadway safety. However, {{for a variety of}} reasons, situations arise where <b>exceptions</b> to standard-{{design criteria}} are requested and accepted after review. This research explores the impact that design <b>exceptions</b> have on the accident severity and accident frequency in Indiana. Data on accidents at 36 roadway sites with design <b>exceptions</b> and 71 without design <b>exceptions</b> are used in this research, and appropriate statistical models are estimated for the severity and frequency of these accidents. The results of the detailed statistical modeling show that presence of design <b>exceptions,</b> approved by INDOT, do not have a statistically significant adverse effect on the frequency or severity of accidents. While the data are too limited to investigate the effect of specific design <b>exceptions</b> (the number of Level One design <b>exceptions</b> granted is a modest number), the research herein shows that INDOT procedures for granting design <b>exceptions</b> have been sufficiently strict to avoid adverse safety consequences and that current practices should be continued. To guide future Level One design <b>exceptions,</b> the detailed statistical findings of this research effort suggest that using previous design <b>exceptions</b> as “precedents” would {{be the best way to}} proceed. To this end, it is recommended that INDOT maintain a database of Level One design <b>exceptions...</b>|$|R
40|$|Business process models {{describe}} {{the way of}} working in an organization. Typically, business process models distinguish between the normal flow of work and <b>exceptions</b> to that normal flow. However, they often present an idealized view. This means that unexpected <b>exceptions</b> - <b>exceptions</b> that are not modelled in the business process model - can also occur in practice. This {{has an effect on}} the efficiency of the organization, because information systems are not developed to handle unexpected <b>exceptions.</b> This paper studies the relation between the occurrence of <b>exceptions</b> and operational performance. It does this by analyzing the execution logs of business processes from five organizations, classifying execution paths as normal or exceptional. Subsequently, it analyzes the differences between normal and exceptional paths. The results show that <b>exceptions</b> are related to worse operational performance in terms of a longer throughput time and that unexpected <b>exceptions</b> relate to a stronger increase in throughput time than expected <b>exceptions...</b>|$|R
5|$|As {{of season}} 10, {{none of the}} {{characters}} from the earlier seasons remain, with the <b>exception</b> of Brogren, whose character has been promoted to the principal of Degrassi Community School; the series now centres on {{the new generation of}} Degrassi students.|$|E
5|$|At the 2011 census, Shapinsay had a {{population}} of 307. The economy of the island is primarily based on agriculture with the <b>exception</b> of a few small businesses that are largely tourism-related. Plans {{for the construction of}} a wind turbine are under consideration.|$|E
5|$|Australia first {{competed in}} the Winter Olympic Games in 1936 in Garmisch-Partenkirchen, and has participated in every games since, with the <b>exception</b> of the 1948 Games in St. Moritz.|$|E
5000|$|Philadelphia/Baltimore <b>exceptions</b> {{include the}} New York <b>exceptions</b> listed above and other {{which include the}} following: ...|$|R
40|$|<b>Exceptions</b> and {{first-class}} continuations are {{the most}} powerful forms of control in programming languages. While both are a form of non-local jumping, {{there is a fundamental}} difference between them. We formalize this difference by proving a contextual equivalence that holds in the presence of <b>exceptions,</b> but not continuations; and conversely, we prove an equivalence that holds in the presence of continuations, but not <b>exceptions.</b> By the same technique, we show that <b>exceptions</b> and continuations together do not give rise to state, and that <b>exceptions</b> and state do not give rise to continuations...|$|R
40|$|Business process {{models can}} be used to {{describe}} the way in which work is done in an organization. Typically, business process models (implicitly) distinguish between the normal flow of work through the organization and <b>exceptions</b> to the normal flow that are expected to occur incidentally. However, business processes often present an idealized view. When looking at {{the way in which the}} work is actually performed, unexpected <b>exceptions</b> to the normal flow of work - <b>exceptions</b> that are not modelled in the business process model - also occur. This paper studies the effect that <b>exceptions</b> have on the operational performance of an organization and in particular on the throughput time of a process. The results show that <b>exceptions</b> are related to worse operational performance in terms of a longer throughput time and that unexpected <b>exceptions</b> lead to a stronger increase in throughput time than expected <b>exceptions.</b> The results also show that there are different types of <b>exceptions,</b> which have different effects on operational performance. These results have important implications on the policies that should be followed with respect to allowing for different types of <b>exceptions</b> in practice...|$|R
5|$|But by 2008, {{its share}} {{had dropped to}} 14%. Microsoft {{licensed}} Windows Mobile to four out of the world's five largest mobile phone manufacturers, with Nokia being the <b>exception.</b>|$|E
5|$|By January 2015, daily sales {{had fallen}} to below 20,000. The {{following}} year, its print edition dropped below 10,000, and was being outsold by every Scottish regional daily newspaper with the <b>exception</b> of the Paisley Daily Express.|$|E
5|$|Charging is fair {{in case of}} a place kick (with the <b>exception</b> of a {{kick off}} as soon as a player offers to kick) but he may always draw back unless he has {{actually}} touched the ball with his foot.|$|E
25|$|The {{following}} sections list <b>exceptions</b> {{to the basic}} form; many are not <b>exceptions</b> to the augmented forms.|$|R
5000|$|This {{general rule}} {{for the place}} of supply of {{services}} (the place where the supplier is established) is subject to several <b>exceptions.</b> Most of the <b>exceptions</b> switch the place of supply {{to the place where}} the services are received. Such <b>exceptions</b> include the: ...|$|R
40|$|Type-based {{analysis}} of uncaught <b>exceptions</b> This paper presents a program analysis to estimate uncaught <b>exceptions</b> in ML programs. This analysis relies on unification-based type inference in a non-standard type system, using rows to approximate both {{the flow of}} escaping <b>exceptions</b> (a la effect systems) and the flow of result values (a la control-flow analyses). The resulting analysis is efficient and precise; in particular, arguments carried by <b>exceptions</b> are accurately handled. ...|$|R
