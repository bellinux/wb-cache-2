8|10000|Public
50|$|The <b>Integrated</b> <b>Project</b> <b>Support</b> <b>Environment</b> (IPSE) {{is a set}} of {{management}} and technical tools to support software development, usually integrated in a coherent framework, equivalent to a Software Engineering Environment.|$|E
40|$|ISTAR is an <b>integrated</b> <b>project</b> <b>support</b> <b>environment</b> {{produced}} by Imperial Software Technology, Ltd. This evaluation of ISTAR {{is intended for}} software technologists considering the adoption of an <b>integrated</b> <b>project</b> <b>support</b> <b>environment.</b> Researchers and others interested in environments and evaluation methods will also benefit from this report...|$|E
40|$|This paper {{describes}} the user interface facilities of the ECLIPSE <b>integrated</b> <b>project</b> <b>support</b> <b>environment.</b> This interface {{is based on}} a consistent metaphor called the'control panel'metaphor and includes standard help and message-handling systems. The paper {{describes the}}se {{as well as some of}} the interface standards which have been developed. The interface has been implemented on top of the'applications interface', which provides a portable, hardware-independent interface for software tools...|$|E
50|$|It was {{the design}} of CADES that {{paved the way for}} the Alvey <b>Project</b> in IPSE (<b>Integrated</b> <b>Project</b> <b>Support</b> <b>Environments)</b> and Process Control Engines. Because CADES was used for more than 20 years {{throughout}} the development of a large software engineering project, the data collected has been used as input to a number of studies of software evolution.|$|R
40|$|A {{major part}} of {{software}} engineering developments involve the use of computing tools which facilitate the management, maintenance, security, and building of long-scale software engineer projects. Consequently, {{there have been a}} proliferation of CASE tools and IPSES. This book looks at IPSES in general and the ASPECT project in particular, providing design and implementation details, as well as locating ASPECT in IPSE developments. Survey of <b>integrated</b> <b>project</b> <b>support</b> <b>environments</b> for more efficient software engineering**Description of a large scale IPSE [...] ASPECT**Evaluation of formal methods i...|$|R
40|$|<b>Integrated</b> <b>project</b> <b>support</b> <b>environments</b> (IPSEs) are {{intended}} to provide a cohesive and integrated set of tools to support the process of design and development in software engineering projects. Much current research is concentrated on maximising {{the degree to which}} these tools can be integrated. This paper briefly describes the architecture of a prototype IPSE which attempts to achieve a high degree of integration using techniques drawn from the disciplines of intelligent knowledge-based systems, office automation and object-oriented programming. The remainder of the paper deals with the design of a user interface to the IPSE based on direct manipulation. It argues that this provides a consistent and integrated method with which users can interact with the objects in the IPSE's object store...|$|R
40|$|In {{the past}} ten years there has {{been a great deal of}} {{interest}} in the concept of an <b>Integrated</b> <b>Project</b> <b>Support</b> <b>Environment</b> (IPSE) as a complete, unifying framework of services supporting most (or all) phases of software development and maintenance. In this paper we evaluate the current state of research work in this area, suggest some reasons for the relative lack of success, and make proposals for ensuring measured progress in the future...|$|E
40|$|The work {{reported}} here {{is part of}} the IPSEN 3 project whose very goal is the development of an <b>Integrated</b> <b>Project</b> <b>Support</b> <b>ENvironment.</b> Within this project directed, attributed, node- and edge- labeled graphs (diane graphs) are used to model the internal structure of software documents and PROgrammed Graph REwriting SyStems are used to specify the operational behavior of document processing tools like syntax-directed editors, static analyzers, or incremental compilers and interpreters. Recently a very high-level language, named PROGRESS, has been developed to support these activities. This language offers its users a convenient, partly textual, partly graphical concrete syntax and a rich system of consistency checking rules (mainly type compatibility rules) for the underlying calculus of programmed diane-graph rewriting systems. This paper presents a partly imperative, partly rule-oriented sublanguage of PROGRESS for composing complex graph queries and graph transformations (transa [...] ...|$|E
40|$|This paper {{introduces}} a domain-oriented, visual language for describing and developing task-centered collaborative workspaces. The languageÕs organizational, development, and programming models {{are based on}} the division of the collaborative workspace into ÒTasks, Roles, and ResourcesÓ. Workspace development begins with a specific project goal that is decomposed into a series of discrete tasks. The tasks are then associated with a role that completes the task via a service provided by a resource. Resources include employees (i. e., people and agents) or things (i. e., interface objects such as printers, traditional programs). A prototype has been developed based on the Agentsheets programming substrate modified to an object-focused design. An example of a taskcentered HCI for a simplified <b>Integrated</b> <b>Project</b> <b>Support</b> <b>Environment</b> is also presented. 1 The ever-increasing level of computer literacy in our society, combined with the Internet explosion, has created a proliferation of individual users both at home and at work. In th...|$|E
40|$|Database {{management}} systems (DBMSs) are a basic component of <b>integrated</b> <b>project</b> <b>support</b> <b>environments</b> (IPSEs). They {{are used for}} the modeling, storage and management of data produced by various software tools during the development process. In environments where the development process is explicitly supported (process-centered software development environments - PCDEs), processes can also be modelled, persistently stored and managed. In the present paper, we survey how DBMSs are integrated in the architecture of PCDEs and in particular how DBMS mechanisms are used to provide parts of their functionality. The systems we consider are Adele/Tempo, ALF, Arcadia, Epos, Marvel/Provence, Merlin, Oikos, SPADE, and several commercial systems. A number of open issues with respect to database support in these PCDEs are identified and discussed. Contents Introduction [...] 2 Definit [...] ...|$|R
40|$|Future object {{management}} systems {{will need to}} provide support for {{a new class of}} applications: distributed multimedia design environments. Such environments pose new challenges for object {{management systems}}, requiring the integration of object-oriented techniques, distributed systems and multimedia technologies. To meet these challenges a flexible approach to object management is required. We demonstrate how such flexibility can be achieved without incurring undue management overheads by considering the implementation of three key features of a distributed object-oriented system: persistence, object migration and access control. 1. INTRODUCTION This paper describes work carried out as part of the Zenith project 1 aimed at producing a platform to support distributed multimedia design environments. Such environments, which include Office Information Systems, Geographical Information Systems and <b>Integrated</b> <b>Project</b> <b>Support</b> <b>Environments,</b> have a number of common requirements, including the n [...] ...|$|R
40|$|About 100 words, 10 point Times Roman, single spaced, justified. Single column {{across the}} width of the page. Keywords: Three to five keywords. 1. Call for papers Automated tools play an {{important}} role in the promotion and adoption of software engineering methods and processes, both within a particular organisation and within the software engineering community generally. The development of these tools is itself a significant software engineering task, requiring a considerable investment of time and resources. There are a large number of different kinds of automated software engineering tool, variously known as Computer Aided Software Engineering (CASE), Computer Aided Method Engineering (CAME), <b>Integrated</b> <b>Project</b> <b>Support</b> <b>Environments</b> (IPSE), Software Engineering Environments (SEE), and meta-CASE tools. Although these tools differ in the particular methods, activities, and phases of the software development cycle to which they are applied, constructors of these tools often face simila [...] ...|$|R
40|$|Dramatic {{changes in}} the way we view {{software}} and information systems have occurred during the past 20 years. Manual techniques have been replaced by data dictionary products which are in turn being replaced by computer aided software engineering (CASE) or <b>integrated</b> <b>project</b> <b>support</b> <b>environment</b> (IPSE) systems. A research and teaching metadata repository system, RIPPLE, is presented. RIPPLE represents and manages a flexible and extensible internal conceptual model. This conceptual model is derived by a synthesis of common concepts from a variety of design methods. A layered structure is formed by successive abstractions of the concepts and structures derived by that synthesis. This layered structure provides a powerful metaphor for implementation of both the RIPPLE repository and design method repository support. Design methods can be defined in terms of this model. Tools to aid the configuration of RIPPLE to support a wide variety of methods are also presented. Once configured, RIPPLE can provide repository support to tools implementing these methods. Support for information sharing, tool interaction mediation and other important repository features is also provided...|$|E
40|$|This thesis {{surveys the}} field of {{software}} maintenance, and addresses the maintenance requirements of the Aerospace Industry, which is developing inige projects, running over many years, and sometimes safety critical in nature (e. g. ARIANE 5, HERMES, COLUMBUS). Some projects are collaborative between distributed European partners. The industry will have to cope in the near and far future with the maintenance of these products {{and it will be}} essential to improve the software maintenance process and the environments for maintenance. Cost effective software maintenance needs an efficient, high quality and homogeneous environment or <b>Integrated</b> <b>Project</b> <b>Support</b> <b>Environment</b> (IPSE). Most IPSE work has addressed software development, and lias not fully considered the requirements of software maintenance. The aim of this project is to draw up a set of priorities and requirements for a Maintenance IPSE. An IPSE, however can only support a software maintenance method. The first stage of this project is to deline 'software maintenance best practice' addressing the organisational, managerial and technical aspects, along with an evaluation of software maintenance tools for Aerospace systems. From this and an evaluation of current IPSEs, the requirements for a Software Maintenance Support Environment are presented for maintenance of Aerospace software...|$|E
40|$|The ANSAware {{distributed}} systems toolkit provides facilities for object creation and invocation in heterogeneous distributed environments. ANSAware {{is being used}} at Lancaster {{as part of a}} broad platform to support the development of distributed multimedia applications. However the platform, and specifically ANSAware currently provides no support for object persistence or re-location. This paper describes the implementation of a number of enhancements to ANSAware which provide the necessary support. The approach taken, termed management by exception, is evaluated with regards to its performance and failure characteristics. 1. Introduction This paper describes work carried out as part of the Zenith project 1 aimed at producing a platform to support distributed multimedia design environments. Such environments, which include office information systems, geographical information systems and <b>integrated</b> <b>project</b> <b>support</b> <b>environments,</b> have a number of common requirements including the need to m [...] ...|$|R
40|$|Developments in {{software}} engineering {{have led to}} models of the system life cycle incorporating the use of prototyping and formal methods of program verification. These are becoming <b>supported</b> by <b>integrated</b> <b>project</b> <b>support</b> <b>environments</b> and permit the planning and monitoring of software development projects. In contrast, Knowledge Based Systems (KBS) are developed using informal views of the system life cycle. Tools {{have been developed to}} support some stages of the life cycle in an undisciplined manner. The commercial use of KBS needs development projects to be planned and monitored. This requires methods and tools based on systematic life cycle models to be established for KBS. This paper reviews the current state of life cycle approaches to software engineering and KBS development projects in order to provide a direction for the development of methodical KBS life cycle models. - 2 - Introduction Over the past 20 years it has become accepted in the software engineering community that [...] ...|$|R
40|$|Version and {{configuration}} control are mechanisms for managing source code and system builds. In {{the development of}} very large systems, built by large teams, development management is the dominant factor. In this paper we examine management support for development through integrated environments and investigate the implications for environment architectures. We do so by defining a project scenario {{that is to be}} performed with <b>integrated</b> <b>project</b> <b>support</b> <b>environments.</b> The scenario has been carefully designed to not only determine the scope of management functionality provided by a particular environment, but also to probe implications for the architecture of environments. The implications discussed in this paper are: focus on user activities; the integration of project management and development support concepts; the ability to reinforce and avoid conflict with particular organizational models; the ability to support evolution and change of the product, environment, and organization; and the capability for adaptation and insertion into a work environment. The scenario is part of a methodology for evaluation of environments currently used at the Software Engineering Institute...|$|R
40|$|The paper {{describes}} the Zenith research project, {{which is being}} carried out at the Universities of Kent and Lancaster, UK. It is a research prototype of an object management system that is intended to meet the data-management requirements {{of the next generation}} of application domains, such as office information systems, <b>integrated</b> <b>project</b> <b>support</b> <b>environments,</b> and geographical information systems. Zenith is designed to provide a flexible and adaptable platform for the management of distributed multimedia objects, on top of which specialized applications can easily be built. The design of the system reflects this goal. The object-management layer provides the high-level abstractions required for managing complex objects, and the base-services layer is responsible for the management of primitive entities stored on conventional and specialized devices, while maintaining appropriate location, media, and other transparencies. The earlier sections of the paper briefly discuss the background to the project, including the context of the Zenith environment and the philosophy that underlies its design. Subsequent sections concentrate on the object model and the object-oriented design of the prototype system architecture. Finally, the current status and implementation issues are presented, followed by some brief concluding remarks...|$|R
40|$|The {{software}} engineering community has recognised {{the need for}} <b>integrated</b> <b>project</b> <b>support</b> <b>environments</b> (IPSEs) for some time. With such a system the user is provided with an integrated set of software tools with which to operate. Given this set of integrated software tools rather than a set of ad hoc tools the cost of software and <b>project</b> <b>support</b> throughout its life cycle is reduced. The technique of integration {{as a method of}} cost saving, applies to all levels in the hierarchy of problem solving, both hardware and software. This paper discusses one such level, that in which the IPSE is implemented and in particular the use of a persistent store as an enabling technology for IPSEs. The facilities of the language PS-algol necessary to support an IPSE are illustrated by example and it is demonstrated how an IPSE's base may be provided by a persistent store that supports first class procedures as data objects. The need for a type secure object system which allows static and dynamic binding is demonstrated and finally the secure transactional base of PS-algol is shown to be a necessary and sufficient condition to provide secure version control and concurrent access to both programs and data. Keywords IPSE Persistence PS-algol transaction...|$|R
40|$|Current <b>project</b> <b>support</b> <b>environments</b> provide little {{direct support}} for group working. This paper postulates an {{architecture}} for future <b>project</b> <b>support</b> <b>environments</b> and describes an interaction metaphor appropriate {{for such an}} environment. Techniques for exploiting this metaphor {{in order to provide}} support for cooperative working are described. Finally a means of describing cooperation patterns within the environment is discussed and an editor which supports the construction of these description is introduced...|$|R
40|$|<b>Integrated</b> <b>Project</b> <b>supported</b> by the 7 th Framework Programme of the EC Dissemination level PU Public X PP Restricted {{to other}} {{programme}} participants (including Commission Services) RE Restricted {{to a group}} specified by the consortium (including Commission Services) CO Confidential, only {{for members of the}} consortium (including Commission Services) Executive Summary: Evaluation of Core Framework This document constitutes Deliverable D 5. 2 of project FP 7 - 231620 (HATS), an <b>Integrated</b> <b>Project</b> <b>supported</b> by the 7 th Framework Programme of the EC within the FET (Future and Emerging Technologies) scheme. Full information on this project, including the contents of this deliverable, is available online a...|$|R
40|$|NGCR) program {{set up a}} <b>Project</b> <b>Support</b> <b>Environment</b> Standards Working Group (PSESWG) to help in {{the task}} of {{establishing}} interface standards that will allow the U. S. Navy to more easily and effectively assemble software-intensive <b>Project</b> <b>Support</b> <b>Environments</b> (PSEs) from commercial sources. A major focus of PSESWG is the development of a service-based reference model that will provide the context for categorizing and relating existing standards and the identification of interface areas that may benefit from future standardization. This paper presents a report on this referenc...|$|R
40|$|<b>Integrated</b> <b>Project</b> <b>supported</b> by the 7 th Framework Programme of the EC Dissemination level PU Public X PP Restricted {{to other}} {{programme}} participants (including Commission Services) RE Restricted {{to a group}} specified by the consortium (including Commission Services) CO Confidential, only {{for members of the}} consortium (including Commission Services...|$|R
5000|$|University of Wales, Aberystwyth awarded {{internal}} {{funding to}} further develop its ‘integrated <b>project</b> <b>support</b> <b>environment</b> for teaching software engineering’. Ratcliffe, M. B., Stotter-Brooks, T. J., Bott M. F. & Whittle, B. R. ‘The TIPSE: An IPSE for Teaching’, Software Engineering Journal, 7, (5), pp 347-356, September 1992.|$|R
40|$|ECMA TR/ 55. The {{second and}} third editions of TR/ 55, {{published}} jointly by ECMA and NIST, were {{the product of the}} joint working groups ECMA TC 33 -TGRM (Task Group for the Reference Model) and NIST/ISEE (Integrated Software Engineering Environment Working Group), and provided a basis for many other environment activities. One of these, the U. S. Navy's Next Generation Computer Resources (NGCR) <b>Project</b> <b>Support</b> <b>Environment</b> Standards Working Group (PSESWG) had the goal of establishing standards for interfaces in the particular domain of <b>project</b> <b>support</b> <b>environments.</b> As an initial step toward this goal, the working group produced this reference model for a <b>project</b> <b>support</b> <b>environment.</b> As a point of departure, the PSESWG chose the ECMA/NIST Frameworks Reference Model, which is essentially contained as a subset of the PSE model. A brief precis of the Frameworks Reference Model, and its relation to the overall PSE model, is described in chapter 7 of this document. The working group that produced this model met as part of the NGCR program. In addition, however, the working group met jointly with both NIST/ISEE and ECMA TC 33 -TGRM, and members of both of those groups participated in its development. The third edition of ECMA TR/ 55 was expanded and modified to ensure that TR/ 55 and this Technical Report, ECMA TR/ 69, are in harmony...|$|R
5000|$|For more {{information}} visit:EU Twinning <b>Project</b> to <b>Support</b> the <b>Environment</b> Sector ...|$|R
40|$|Many {{candidate}} biomarkers {{of human}} ageing {{have been proposed}} in the scientific literature but in all cases their variability in cross-sectional studies is considerable, and therefore no single measurement has proven to serve a useful marker to determine, on its own, biological age. A plausible {{reason for this is}} the intrinsic multi-causal and multi-system nature of the ageing process. The recently completed MARK-AGE study was a large-scale <b>integrated</b> <b>project</b> <b>supported</b> by the European Commission. The major aim of this project was to conduct a population study comprising about 3200 subjects in order to identify a set of biomarkers of ageing which, as a combination of parameters with appropriate weighting, would measure biological age better than any marker in isolation...|$|R
40|$|The {{proposed}} DoD standard Common APSE Interface Set (CAIS) {{was developed}} as a framework set of interfaces that will support the transportability and interoperability of tools in the <b>support</b> <b>environments</b> of the future. While the current CAIS version is a promising start toward fulfilling those goals and current prototypes provide adequate testbeds for investigations in support of completing specifications for a full CAIS, {{there are many reasons}} why the proposed CAIS might fail to become a usable product and the foundation of next-generation (1990 'S) <b>project</b> <b>support</b> <b>environments</b> such as NASA's Space Station software <b>support</b> <b>environment.</b> The most critical threats to the viability and acceptance of the CAIS include performance issues (especially in piggybacked implementations), transportability, and security requirements. To make the situation worse, the solution to some of these threats appears to be at conflict with the solutions to others...|$|R
40|$|In {{this paper}} we {{describe}} {{the use of a}} <b>Project</b> <b>Support</b> <b>Environment</b> (PSE) services reference model as an analysis technique that helps in describing, understanding, and comparing aspects of integration in a PSE. The model is briefly described, before being used as the basis for discussing a number of issues with regard to PSE integration. A major focus of this paper is a discussion of the interfaces of interest in a PSE—interfaces within a single service, between services, and between services and the PSE end-users. The paper concludes with a discussion of possible interpretations and developments of the model to suit different user requirements...|$|R
40|$|International audienceMany {{candidate}} biomarkers {{of human}} ageing {{have been proposed}} in the scientific literature but in all cases their variability in cross-sectional studies is considerable, and therefore no single measurement has proven to serve a useful marker to determine, on its own, biological age. A plausible {{reason for this is}} the intrinsic multi-causal and multi-system nature of the ageing process. The recently completed MARK-AGE study was a large-scale <b>integrated</b> <b>project</b> <b>supported</b> by the European Commission. The major aim of this project was to conduct a population study comprising about 3200 subjects in order to identify a set of biomarkers of ageing which, as a combination of parameters with appropriate weighting, would measure biological age better than any marker in isolation...|$|R
5000|$|The {{vegetable}} yardis an <b>integrated</b> {{rural development}} <b>project</b> <b>supported</b> by the NGOs ASRADEC, USAID and NCOS (Belgium)for {{the villages of}} Bagaya, , and [...] to stimulateagricultural activities like cultivation, education and product commercialization.|$|R
40|$|<b>Integrated</b> <b>Project</b> <b>supported</b> by the 7 th Framework Programme of the EC Dissemination level PU Public X PP Restricted {{to other}} {{programme}} participants (including Commission Services) RE Restricted {{to a group}} specified by the consortium (including Commission Services) CO Confidential, only {{for members of the}} consortium (including Commission Services) Executive Summary: Survey on State of the Art- Diversity Awareness and Management Diversity is a central issue in modern software systems, Different variants of systems are developed simul-taneously to address different application contexts or customer requirements. Diversity impacts all phases of software development and leads to an increase of complexity. Variability has to be anticipated in re-quirements analysis, design, implementation, and validation stages and must be realized in the developed artifacts. In this deliverable, existing approaches to deal with system diversity in each of these phases of the software engineering process are surveyed. In particular, quality assurance techniques for diverse systems are considered. Since diverse systems are long-lived and have to adapt to changing requirements, technique...|$|R
40|$|This {{document}} {{describes the}} assessment methodologies and assessment criteria {{to be used}} to assess the PCIS architecture documents. Keywords: Software Engineering Framework, PCIS, Assessment, Structured Questionnaires, Fagan Inspection, Risk Analysis, Completeness, Traceability, Scenario Analysis, PCTE. NATO UNCLASSIFIED NATO UNCLASSIFIED This page intentionally empty NATO UNCLASSIFIED 3 of 89 PCIS Programme NATO UNCLASSIFIED FINAL Acknowledgments (1) The work done by the PCIS assessment team was sponsored by NATO under the Special Working Group on Ada <b>Project</b> <b>Support</b> <b>Environments.</b> Work started in September 1992, and was completed in December 1993. (2) Funding from the US DoD (Ada Joint Program Office), UK MoD, NATO Communication and Information Systems Agency (NACISA), French MoD (Direction de l'Electronique et l'Informatique) and Italian MoD is gratefully acknowledged. (3) The following people have contributed to the assessment of the PCIS Framework: Mike BOYER, Audrey CANNING, [...] ...|$|R
40|$|Abstract. Setting up {{effective}} and efficient mechanisms for controlling soft-ware and system development projects is still challenging in industrial practice. On the one hand, necessary prerequisites such as established development proc-esses, understanding of cause-effect relationships on relevant indicators, and sufficient sustainability of measurement programs are often missing. On the other hand, there are more fundamental methodological deficits related to the controlling process itself and to appropriate tool support. Additional activities that would guarantee the usefulness, completeness, and precision of the result-ing controlling data are widely missing. This article presents a conceptual archi-tecture for so-called Software Project Control Centers (SPCC) that addresses these challenges. The architecture includes mechanisms for getting sufficiently precise and complete data and supporting the information needs of different stakeholders. In addition, an implementation of this architecture, the so-called Specula <b>Project</b> <b>Support</b> <b>Environment,</b> is sketched, and results from evaluating this implementation in industrial settings are presented...|$|R
40|$|This project, {{funded by}} the Overseas Development Administration (ODA), aims to improve rapid cassava {{processing}} methods in rural households where a need is evident. The development and adoption of appropriate processing methods will be through participatory research involving, to a high degree, those who will use the technology. The project is being undertaken {{in partnership with the}} Tanzania Food and Nutrition Centre, as lead collaborator; Regional Agriculture and Livestock Development Office, Mtwara; Agricultural Research Institute Naliendele, Mtwara; and Rural <b>Integrated</b> <b>Project</b> <b>Support</b> Programme, a FINNIDA funded project in Mtwara and Lindi. This participatory rural appraisal (PRA) study included eight villages in two districts of Southern Tanzania and aimed to: (1) obtain an inventory of existing traditional processing methods; (2) document information on farmers and processors preferences for processed products and situations that influence their choice of processing method, such as varietal preferences, storability, food safety, marketing and indigenous knowledge; (3) identify processing needs and constraints to develop improved processing methods; and (4) learn from the experiences of previous cassava processing technology transfer activities undertaken by the extension services...|$|R
40|$|The {{proliferation}} of software tools has simplified the tasks of software development. As demands and costs for improving software quality escalate, more powerful development supprt environments are required {{to carry out the}} tasks. However, some obstacles have precluded software developers from attaining those demands and objectives, such as tool use, training, productivity metrics and measurement, and maintenance problems. Various CASE tools are employed to aid in the develo~ertt process. In many cases, these teds are developed by independent vendors to run on different platforms. The results of these tool applications are therefore incompatible. To ease the burden of tool dkrepancies and incompatibility, standardized public tool interfaces were proposed to permit tools developed by different vendors to coexis ~ interoperate and be able to transport across com uter systems. This paper surveys some of the predominant I%egrated <b>Project</b> <b>Support</b> <b>Environments</b> (IPSE) to establish a viable architectural framework and requirements for a Virtual Software Communication System (VSTC) prototype...|$|R
