364|671|Public
50|$|A <b>knowledge</b> <b>engineer</b> {{integrates}} {{knowledge into}} computer systems {{in order to}} solve complex problems normally requiring {{a high level of}} human expertise.|$|E
50|$|A {{person who}} interacts with human {{subjects}} {{in order to}} elicit information from them may be called an elicitor, an analyst, experimenter, or <b>knowledge</b> <b>engineer,</b> depending {{on the field of}} study.|$|E
5000|$|It is {{important}} that a <b>knowledge</b> <b>engineer</b> incorporates validation procedures into their systems within the program code. After the knowledge-based system is constructed, it can be maintained by the domain expert [...]|$|E
50|$|<b>Knowledge</b> <b>engineers</b> are {{involved}} with validation and verification.|$|R
5000|$|<b>Knowledge</b> <b>engineers</b> {{interpret}} and organize {{information on how}} to make systems decisions [...]|$|R
40|$|Ontology {{development}} involves {{people with}} different background knowledge and expertise. It is an elaborate process, where sophisticated tools for experienced <b>knowledge</b> <b>engineers</b> are available. However, domain experts need simple tools {{that they can}} use to focus on ontology instantiation. In this paper, we propose a methodology with a separation of concern between domain experts and <b>knowledge</b> <b>engineers.</b> This separation allows domain experts to focus on information processing and ontology instantiation while providing immediate feedback to the <b>knowledge</b> <b>engineers</b> on usability of the ontology being developed. We have designed and implemented OINTED, an adaptive online ontology instance editor that supports this methodology. We present usage examples of OINTED that highlight three main features: the intuitive visualization of concepts, instances, and relationships within an ontology; the seamless integration in pre-existing problem solving environment; and the assistance in ontology evolution. OINTED complements existing tools suited for <b>knowledge</b> <b>engineers</b> by enabling immediate feedback and a shorter ontology development life cycle...|$|R
5000|$|McDermott's 1980 {{paper on}} R1 won the AAAI Classic Paper Award in 1999. Legendarily, {{the name of}} R1 comes from McDermott, who {{supposedly}} said as he was writing it, [...] "Three years ago I couldn't spell <b>knowledge</b> <b>engineer,</b> now I are one." ...|$|E
5000|$|As an {{undergraduate}} student at Ryerson University, Rahnama {{began his career}} at Rogers Communications as a wireless applications developer in 2000 {{under the supervision of}} Brad Fortner. In 2003, he worked at Alpha Global Labs as a software and <b>knowledge</b> <b>engineer,</b> working on medical expert systems and the applicability of mobile devices in medical settings.|$|E
50|$|Validation is {{the process}} of {{ensuring}} that something is correct or conforms to a certain standard. A <b>knowledge</b> <b>engineer</b> is required to carry out data collection and data entry, but they must use validation {{in order to ensure that}} the data they collect, and then enter into their systems, fall within the accepted boundaries of the application collecting the data.|$|E
40|$|The {{communication}} between <b>knowledge</b> <b>engineers</b> and domain experts {{is essential for}} the development and smooth running of an expert system. Poor {{communication between}} these two may result in catastrophic effects on the whole system. This paper focuses on the communication process between <b>knowledge</b> <b>engineers</b> and domain experts. The paper not only indicates the pitfalls of this communication but it also presents some advanced techniques & methodologies for enhancin...|$|R
5000|$|Expert legal {{knowledge}} {{can be difficult to}} represent or formalize within the structure of an expert system. For <b>knowledge</b> <b>engineers,</b> challenges include: ...|$|R
40|$|Translation {{templates}} {{were very}} important translation knowledge in transfer-based MT system. They could be learned automatically from bilingual corpus and were written manually by MT <b>knowledge</b> <b>engineers.</b> But {{there were lots}} of noises in template base which would decrease the translation quality. This paper presented a manually-editing tool that provided edition functions including automatic evaluation of templates, edition of templates, insertion of templates and deletion of templates. In this tool, MT <b>knowledge</b> <b>engineers</b> could check and edit translation templates according to automatic evaluation scores. This tool aimed at helping to optimize template base in MT system which would eliminate the conflicts between translation templates and the errors in translation templates. Experimental results indicated that after MT <b>knowledge</b> <b>engineers</b> edited translation templates in this tool, translation assessment score of open test corpus improved 3. 85 % under 3 g bleu metric...|$|R
50|$|MultiNet is {{supported}} by a set of software tools and has been used to build large semantically based computational lexicons. The tools include a semantic interpreter WOCADI which translates natural language expressions (phrases, sentences, texts) into formal MultiNet expressions, a workbench MWR+ for the <b>knowledge</b> <b>engineer</b> (comprising modules for automatic knowledge acquisition and reasoning), and a workbench LIA+ for the computer lexicographer supporting the creation of large semantically based computational lexica.|$|E
50|$|Peter Nordin {{was born}} in 1965 in Helsingborg but moved to Gothenburg in 1967, where he was raised. He began studies at Chalmers University of Technology in 1984 and {{completed}} the M.S. in computer science and engineering in 1988 and studied economics. He then worked as a <b>knowledge</b> <b>engineer</b> for artificial intelligence (AI) company, Infologics AB, focusing {{on research and development}} of knowledge-based systems and complex system configuration.|$|E
5000|$|... ‘Object’, ‘Object Type’ for {{declarative}} knowledge, ‘Event’, ‘Event Type’, for temporal objects, and ‘Meta Types’ {{for expressing}} upper ontology. Theobjects {{in this group}} are essentially any thing about which the <b>knowledge</b> <b>engineer</b> intends to express and store in the knowledge base, i.e., they are the objects of discourse. The instances of these component classes can be stored with or without expressing ‘instance of’ or ‘sub-class of’ relations among them.|$|E
5000|$|Often, <b>knowledge</b> <b>engineers</b> are {{employed}} {{to translate the}} information elicited from domain experts into terms which cannot be easily communicated by the highly technalized domain expert [...]|$|R
50|$|The {{inherent}} {{complexity of}} {{law as a}} discipline raises immediate challenges for legal expert system <b>knowledge</b> <b>engineers.</b> Legal matters often involve interrelated facts and issues, which further compound the complexity.|$|R
50|$|The machine {{learning}} program KI, developed by Murray and Porter at the University of Texas at Austin, {{was created to}} study the use of automated and semi-automated knowledge integration to assist <b>knowledge</b> <b>engineers</b> constructing a large knowledge base.|$|R
5000|$|Les Racines du mal (The Roots Of Evil) is a 1995 crime {{novel by}} the French writer Maurice G. Dantec. Set {{in the near}} future, it {{tells the story of}} a <b>knowledge</b> <b>engineer</b> who is brought in by the police to find a group of serial killers. He is {{assisted}} by the [...] "neuromatrice", an artificial intelligence he helped develop, which can access any computer system and create psychological profiles based on scattered hints and facts about a person.|$|E
5000|$|While {{learning}} {{the basics of}} HTML is relatively straightforward, learning a knowledge representation language or tool requires the author {{to learn about the}} representation's methods of abstraction and their effect on reasoning. For example, understanding the class-instance relationship, or the superclass-subclass relationship, is more than understanding that one concept is a “type of” another concept. … These abstractions are taught to computer scientists generally and knowledge engineers specifically but do not match the similar natural language meaning of being a [...] "type of" [...] something. Effective use of such a formal representation requires the author to become a skilled <b>knowledge</b> <b>engineer</b> in addition to any other skills required by the domain. … Once one has learned a formal representation language, it is still often much more effort to express ideas in that representation than in a less formal representation …. Indeed, this is a form of programming based on the declaration of semantic data and requires an understanding of how reasoning algorithms will interpret the authored structures.|$|E
40|$|We {{describe}} OntoComP, a Protégé 4 plugin {{that supports}} knowledge engineers in completing DL-based ontologies. More precisely, OntoComP supports a <b>knowledge</b> <b>engineer</b> in checking whether an ontology contains {{all the relevant}} information about the application domain, and in extending the ontology appropriately {{if this is not}} the case. It acquires complete knowledge about the application domain efficiently by asking successive questions to the <b>knowledge</b> <b>engineer.</b> By using novel techniques from Formal Concept Analysis, it ensures that, on the one hand, the interaction with the <b>knowledge</b> <b>engineer</b> is kept to a minimum, and, on the other hand, the resulting ontology is complete in a certain well-defined sense...|$|E
40|$|Concept {{exploration}} is {{a knowledge}} acquisition tool for interactively exploring the hierarchical structure of finitely generated lattices. Applications comprise {{the support of}} <b>knowledge</b> <b>engineers</b> by constructing a type lattice for conceptual graphs, and the exploration of large formal contexts in formal concept analysis...|$|R
40|$|A {{prototype}} Knowledge-Based System Developer (KBSD) {{has been}} developed for aerospace applications by utilizing artificial intelligence technology. The KBSD directly acquires knowledge from domain experts through a graphical interface then builds expert systems from that knowledge. This raises {{the state of the}} art of knowledge acquisition/expert system technology to a new level by lessening the need for skilled <b>knowledge</b> <b>engineers.</b> The feasibility, applicability, and efficiency of the proposed concept was established, making a continuation which would develop the prototype to a full-scale general-purpose knowledge-based system developer justifiable. The KBSD has great commercial potential. It will provide a marketable software shell which alleviates the need for <b>knowledge</b> <b>engineers</b> and increase productivity in the workplace. The KBSD will therefore make knowledge-based systems available to a large portion of industry...|$|R
40|$|Teaching future <b>knowledge</b> <b>engineers,</b> the {{necessary}} skills for designing and implementing intelligent software solutions required by business, industry and research today, {{is a very}} tall order. These skills are not easily taught in traditional undergraduate computer science lectures; nor are the practical experiences easily reinforced in laboratory sessions. In an attempt to address this issue, a software development project, designed to take students through a complete process of knowledge engineering, was introduced in an undergraduate Intelligent Systems subject. In this project, students were required to act as domain experts, <b>knowledge</b> <b>engineers,</b> programmers, end users and project manager {{in the production of}} a game-playing expert system. The paper describes the project, its objectives and development, {{as well as some of}} the benefits...|$|R
40|$|The Designers ’ Workbench is a system, {{developed}} to support designers in large organizations, such as Rolls-Royce, {{by making sure}} that the design is consistent with the specification for the particular design {{as well as with the}} company’s design rule book(s). Currently, to capture the constraint information, a domain expert (design engineer) has to work with a <b>knowledge</b> <b>engineer</b> to identify the constraints, and it is then the task of the <b>knowledge</b> <b>engineer</b> to encode these into the Workbench’s knowledge base (KB). This is an error prone and time consuming task. It is highly desirable to relieve the <b>knowledge</b> <b>engineer</b> of this task, and so we have developed a tool, ConEditor+ that enable...|$|E
40|$|International audienceIn {{order to}} help the <b>{{knowledge}}</b> <b>engineer</b> during knowledge modelling phase, we developed an environment for the conceptual modelling language CML offered by the CommonKADS methodology. This environment, called Cokace, was designed using Centaur, a programming environment generator, that was usually exploited for building environments dedicated to software engineering languages. Thanks to Centaur, Cokace provides the <b>knowledge</b> <b>engineer</b> with structured edition, static validation and dynamic interpretation of CML expertise models. Cokace allows the <b>knowledge</b> <b>engineer</b> to simulate a reasoning on CML expertise models, and enables verification and evaluation of such expertise models before implementation of the final knowledge-based system. This work illustrates {{an example of the}} benefits knowledge engineering can get from well established techniques and tools available in software engineering...|$|E
40|$|When {{creating}} a knowledge base, a <b>knowledge</b> <b>engineer</b> faces design and modeling choices. The decisions taken may later affect {{the evolution of}} the knowledge base. Indeed, when new knowledge needs to be integrated, the knowledge base may have to undergo some rewriting and redesign, in order to incorporate the new information. Creating the Knowledge Base such that future changes are made easier is a major concern of the <b>knowledge</b> <b>engineer.</b> We refer to the ease of change as Elaboration Tolerance...|$|E
50|$|Both {{men were}} {{convinced}} that millions of lives could be transformed by merging medical research and technology R&D. They agreed {{that the way to}} achieve this would be to bring together doctors, researchers, biologists, engineers, robotics <b>engineers,</b> mathematicians and <b>knowledge</b> <b>engineers</b> to work at a single site.|$|R
40|$|Abstract: <b>Knowledge</b> <b>engineers</b> {{qualified}} to build expert systems {{are currently in}} short supply. We propose that production of useful and trustworthy expert systems can be significantly increased by pursuing the idea of articulate apprenticeship independent of computer implementations. Making theoretical progress in artificial intelligence should also help...|$|R
40|$|This chapter {{presents}} {{an overview of}} the Disciple approach and its military applications. Disciple is a theory, methodology, and family of agent shells for the development of intelligent agents by subject matter experts, with limited assistance from computer scientists or <b>knowledge</b> <b>engineers</b> [1]. A subject matte...|$|R
40|$|This study {{addresses}} {{the problems of}} knowledge acquisition in expert system development examines programs whose goal is to solve part of these problems. Among them are knowledge acquisition tools, which provide the <b>knowledge</b> <b>engineer</b> {{with a set of}} Artificial Intelligence primitives, knowledge acquisition aids, which offer to the <b>knowledge</b> <b>engineer</b> a guidance in knowledge elicitation, and finally, automated systems, which try to replace the human interviewer with a machine interface. We propose an alternative technique to these approaches: an interactive syntactic analyzer of an emerging knowledge base written with the expert system shell called Nexpert Object. This program intends to help the <b>knowledge</b> <b>engineer</b> during the editing of a knowledge base, both from a knowledge engineering and a knowledge representation point of view. The implementation is a Desk Accessory written in C, running on Macintosh 2 ̆ 2 concurrently 2 ̆ 2 with Nexpert Object...|$|E
40|$|This paper {{suggests}} that a distinction between knowledge acquisition methods should be made. On the one hand there are methods which aim to help the expert and <b>knowledge</b> <b>engineer</b> analyse what knowledge is involved in solving {{a particular type of}} problem and how this problem solving is carried out. These methods are concerned with classifying the different types of problem solving and providing tools and methods to help the <b>knowledge</b> <b>engineer</b> identify the appropriate approach and ensure nothing is omitted [...] A different approach to knowledge acquisition focuses on ensuring incremental addition of validated knowledge as mistakes are discovered (validated knowledge here means only that the earlier performance of the system is not degraded by the addition of new knowledge). The organisation of this knowledge is managed by the system rather than the expert and <b>knowledge</b> <b>engineer.</b> This would seem to correspond to human incremental development of expertise. From this perspective [...] ...|$|E
40|$|One view {{of expert}} system {{development}} separates the endeavor into two parts. First, a domain expert, {{with the aid}} of a <b>knowledge</b> <b>engineer,</b> articulates a procedure for performing the desired task in some external form. Next, the <b>knowledge</b> <b>engineer</b> operationalizes the external description within some computer language. This paper examines the nature of the processes that operationalize natural task descriptions. We exhibit a language based on a computational model of problem spaces for which these processes are quite simple. We describe the processes in detail, and discuss which aspects of our computational model determine the simplicity of these processes. 1 1...|$|E
40|$|This thesis {{discusses}} the issues involving {{the support of}} Living Ontologies: collaborating in the construction and maintenance of ontologies using the Internet. Ontologies define the concepts used in describing a domain: they are used by <b>knowledge</b> <b>engineers</b> as reusable components of knowledge-based systems. <b>Knowledge</b> <b>engineers</b> create ontologies by eliciting information from domain experts. However, experts often have different conceptualisations of a domain and <b>knowledge</b> <b>engineers</b> often have different ways of formalising their conceptualisations. Taking a constructivist perspective, constructing ontologies from multiple conflicting conceptualisations {{can be seen as}} a design activity, in which <b>knowledge</b> <b>engineers</b> make choices according to the context in which the representation will be used. Based on this theory, a methodology for collaboratively constructing ontologies might involve comparing differing conceptualisations and using these comparisons to initiate discussion, changes to the conceptualisations and the development of criteria against which they can be evaluated. APECKS (Adaptive Presentation Environment for Collaborative Knowledge Structuring) is designed to support this methodology. APECKS aims not only to support the collaborative construction of ontologies but also to use ontologies to present information to its users adaptively within a virtual environment. It demonstrates a number of innovations over conventional ontology servers, such as prompted knowledge elicitation from domain experts, automated comparisons between ontologies, the creation of design rationales and change tracking. A small evaluation of APECKS has shown that it is usable by domain experts and that automated comparisons between ontologies can be used to initiate alterations, investigations of others' conceptualisations and as a basis for discussion. Possible future development of APECKS includes tighter integration with a virtual environment and with other networked knowledge-based tools. Further research is also needed to develop the methodology on which APECKS is based, by investigating ways of comparing, combining and discussing ontologies...|$|R
40|$|The {{objective}} {{of this paper is}} to call the attention of <b>knowledge</b> <b>engineers</b> to natural languages, with two distinct kinds of arguments. The rst is that the most natural way of encoding, transmitting and reasoning about knowledge is through natural language (NL), and thus repositories of knowledge are almos...|$|R
40|$|Often <b>knowledge</b> <b>engineers</b> {{encounter}} situations {{during the}} interviewing {{process in which}} experts have difficulty expressing the knowledge to be captured. In these situations, the experts cannot readily present their knowledge so that the <b>knowledge</b> <b>engineers</b> can encode it in the chosen formalism (for example, in production rules). During {{the development of an}} expert system for underwriting homeowner insurance policies, this situation was occasionally encountered. When the experts could not express their knowledge in chunks suitable for encoding directly in production rules, circuit minimization techniques were used to construct the set of production rules from exhaustive tables of acquired knowledge. The techniques also served to find errors in the acquired knowledge. Circuit minimization techniques, therefore, have been found to provide valuable assistance in the knowledge engineering process, both in the acquisition and verification of knowledge...|$|R
