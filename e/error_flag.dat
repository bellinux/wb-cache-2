15|96|Public
50|$|All {{fields in}} the frame are stuffed with the {{exception}} of the CRC delimiter, ACK field and end of frame which are a fixed size and are not stuffed. In the fields where bit stuffing is used, six consecutive bits of the same type (111111 or 000000) are considered an error. An active <b>error</b> <b>flag</b> can be transmitted by a node when an error has been detected. The active <b>error</b> <b>flag</b> consists of six consecutive dominant bits and violates the rule of bit stuffing.|$|E
50|$|The {{start of}} an {{overload}} frame due to case 1 is only {{allowed to be}} started at the first bit time of an expected intermission, whereas overload frames due to case 2 start one bit after detecting the dominant bit. Overload Flag consists of six dominant bits. The overall form corresponds {{to that of the}} active <b>error</b> <b>flag.</b> The overload flag’s form destroys the fixed form of the intermission field. As a consequence, all other stations also detect an overload condition and on their part start transmission of an overload flag. Overload Delimiter consists of eight recessive bits. The overload delimiter is of the same form as the error delimiter.|$|E
40|$|This thesis {{describe}} {{approaches for}} autopilots for small unmanned aerial vehicles. Part of thesis is implementation of autopilot in Matlab/Simulink. The {{goal is to}} control computation model of the aircraft. Main part of thesis desribes high layer of control and navigation with focus on trajectory planning. Final algorithm is based on following the reference point between the aircraft and waypoint. Algorithm solves special positions of waypoints and <b>error</b> <b>flag...</b>|$|E
40|$|Abstract. A central {{question}} to learning science is: How much assistance {{is the right}} amount to provide to students as they learn with educational technology? Providing students with help allows them to proceed when they are struggling, yet can depress their motivation to learn on their own. Assistance withholding, on the other hand, encourages students to try to learn for themselves, yet {{can also lead to}} frustration when they are stuck. We are investigating this question in a project in the area of inquiry learning in science. We have developed a web-based computer program, Voyage to Galapagos (VTG), which helps individual students “follow ” the steps of Darwin through a simulation of the Galapagos Islands, guiding the student toward learning the theories of natural selection and evolution. Students are encouraged to explore the islands, take pictures of finches and iguanas, evaluate the animals' characteristics, and use scientific methodology and analysis to “discover ” evolution as they explore the simulated Galapagos Islands. We have designed a study in which we will examine five levels of assistance: (1) no support, (2) <b>error</b> <b>flagging</b> only, (3) <b>error</b> <b>flagging</b> and text feedback on <b>errors,</b> (4) <b>error</b> <b>flagging,</b> text feedback on errors, and hints, and (5) preemptive hints with <b>error</b> <b>flagging,</b> <b>error</b> feedback, and hints. Middle and high school students will participate in the study, which will take place later in 2012. In this paper we discuss the design of the software and our plans for varying assistance in the experiment...|$|R
3000|$|... [...]) will be {{generated}} {{to look for}} abnormal spikes or steps in the data, {{as well as to}} examine the relevant <b>error</b> <b>flags.</b> Other plots (e.g. monthly temporal correlation of each satellite dataset) and statistics (e.g. data availability) will also be computed. The daily Quick-Look products will be available to the general community.|$|R
5000|$|Exceptions {{are raised}} in the code via the throw (...) procedure. Try {{statements}} allow the program to bail out of any nested block, {{and serve as a}} better replacement for intra-procedure gotos (which are still supported under Pascaline). Since unhandled exceptions generate errors by default, the throw (...) procedure can serve as a general purpose <b>error</b> <b>flagging</b> system.|$|R
40|$|International audienceToday, the {{communication}} between the primary and secondary sides of most industrial gate drivers is limited to pulses gate control and an <b>error</b> <b>flag.</b> When an error occurs, from Vds monitoring or power supply supervision for example, no information is provided {{about the origin of}} the problem. In this paper, we propose a solution that allows exchanging information (like the details of the errors, measurement of some key parameters or configuration data) between the primary and the secondary sides of the gate driver. The communication protocol is CAN High Speed. Theoretical studies and prototype results are shown...|$|E
40|$|The U. S. Air Force models many {{naturally}} occurring phenomena. To validate such models, an automated data collection system is used. Since validation {{is dependent upon}} correct data, an inexpensive method to detect erroneous data was investigated. The method uses a Wiener filter to predict values one sample in advance. If the predicted value differs from the measured value by some constant, then erroneous data are detected. When applied to the meteorological parameter "temperature", a sixth-order filter was designed that would flag good data as correct 97. 64 % of the time with an <b>error</b> <b>flag</b> set at three standard deviations. This thesis outlines the software requirements, design, and testing necessary to use this method...|$|E
40|$|The NCP 57152 {{is a high}} precision, {{very low}} dropout (VLDO), low minimum input voltage and low ground current {{positive}} voltage regulator {{that is capable of}} providing an output current in excess of 1. 5 A with a typical dropout voltage of 330 mV at 1. 5 A load current and input voltage from 1. 8 V and up. The devices are stable with ceramic output capacitors. The device can withstand up to 18 V max input voltage. Internal protection features consist of output current limiting, built−in thermal shutdown and reverse output current protection. Logic level enable and <b>error</b> <b>flag</b> pins are available. The NCP 57152 is an Adjustable Voltage device and is available in D 2 PAK− 5 and DFN 8 packages...|$|E
5000|$|Most {{implementations}} include {{at least}} options to specify the number of queries to send per hop, time {{to wait for a}} response, the hop limit and port to use. Invoking traceroute with no specified options displays the list of available options, while man traceroute presents more details, including the displayed <b>error</b> <b>flags.</b> Simple example on Linux: ...|$|R
40|$|The NCV 7430 is a single−chip RGB driver {{intended}} for dedicated multicolor LED applications. The RGB LED driver contains a LIN interface (slave) for parametric programming of LED color and intensity. The device receives instructions through the LIN bus and subsequently drives the LEDs independently. The NCV 7430 {{acts as a}} slave on the LIN bus and the master can request specific status information (parameter values and <b>error</b> <b>flags).</b> The LIN address of the NCV 7430 can be programmed in the internal memory of the device. The NCV 7430 is fully compatible with automotive requirements...|$|R
40|$|The {{advent of}} second-generation {{intelligent}} computer tutors raises an important instructional design question: when should tutorial advice {{be presented in}} problem solving? This paper examines four feedback conditions in the ACT Programming Tutor. Three versions offer the student different levels of control over error feedback and correction: (a) immediate feedback and immediate error correction; (b) immediate <b>error</b> <b>flagging</b> and student control of error correction; (c) feedback on demand and student control of error correction. A fourth, No-tutor condition offers no step-by-step problem solving support. The immediate feedback group with greatest tutor control of problem solving yielded the most efficient learning. These students completed the tutor problems fastest, and the three tutor...|$|R
40|$|Abstract. This {{research}} aims {{to purpose}} the new method, {{which is called}} <b>Error</b> <b>Flag</b> Framework (EFF) to enhance accuracy fingerprinting indoor positioning of wireless device by using machine learning algorithms. EFF is compared with well-known machine learning classifiers; i. e. Decision Tree, Naive Bayes, and Artificial Neural Networks, by exploiting the signal strength from limited information. The performance comparison is done in terms of accuracy of classification of positions, precision of distance classified, and effects of classification of positions on results from quantity of learning data. The result of this study can suggest that EFF can increase performance for indoor positioning of every well-known classifier, especially when the quantity of learning data is large enough. Hence, EFF is the alternate way for implementing in positioning software by using the fingerprinting method...|$|E
40|$|A dual {{container}} has {{the property}} {{that when it}} is empty, the remove method will insert an explicit reservation (“antidata”) into the container, rather than returning an <b>error</b> <b>flag.</b> This convention gives the container explicit control over {{the order in which}} pending requests will be satisfied once data becomes available. The dual pattern also allows the method’s caller to spin on a thread-local flag, avoiding mem-ory contention. In this paper we introduce a new nonblocking construction that allows any nonblocking container for data to be paired with almost any nonblocking container for antidata. This construction pro-vides a composite ordering discipline—e. g., it can satisfy pending pops from a stack in FIFO order (for fairness) satisfy pending remove mins in LIFO order (to maximize retention of thread cache footprint), or satisfy pending dequeues in order of thread priority. ...|$|E
40|$|The NCP 59150 {{series are}} high precision, very low dropout (VLDO), low ground current {{positive}} voltage regulators that {{are capable of}} providing an output current in excess of 1. 5 A with a typical dropout voltage lower than 300 mV at 1. 5 A load current. The devices are stable with ceramic output capacitors. This series consists of Adjustable output voltage and fixed voltage versions. The NCP 59150 series can withstand up to 18 V max input voltage. Internal protection features consist of output current limiting, built−in thermal shutdown and reverse output current protection. Logic level enable and <b>error</b> <b>flag</b> pins are available on the 5 −pin and 8 −pin versions. The NCP 59150 series Adjustable Voltage devices are available in D 2 PAK− 5 and DFN 8 packages, the Fixed Voltage option are available in D 2 PAK− 5, D 2 PAK− 3 and DFN 8 packages...|$|E
5000|$|Supports all modes {{in which}} {{transfer}} speeds differ, from [...] "Mode 0" [...] to [...] "Mode 2". Using data transmission by DTC, CPU load is reduced sharply (Approx. 1/2). Using abundant <b>error</b> status <b>flags</b> to realize appropriate error processing.link ...|$|R
30|$|For the Level 1 b {{magnetic}} field data, the total field strength (F) {{and the strength}} of the North, East and Centre (BNEC components of the {{magnetic field}} are drawn as spatial maps to aid identification of spatial patterns or gaps. Time series plots of the measured F and BNEC values and the closure error (the absolute difference (F − ǀBNECǀ), as well as associated <b>error</b> <b>flags</b> and first derivatives (d B/dt and d F/dt) are generated to check for gross errors, steps or spikes. The spectra of differences between F and ǀBNECǀ and the correlation of data between satellites will be useful for examining periodic signals or identifying changes over time between them.|$|R
40|$|In {{this paper}} we {{introduce}} a general fault-tolerant quantum error correction protocol using flag circuits for measuring stabilizers of arbitrary distance codes. Flag circuits use extra ancilla qubits to signal when errors resulting from $v$ faults {{in the circuit}} have weight greater than $v$. The <b>flag</b> <b>error</b> correction protocol is applicable to stabilizer codes of arbitrary distance which satisfy a set of conditions and uses fewer qubits than other schemes such as Shor, Steane and Knill error correction. We give examples of infinite code families which satisfy these conditions and analyze the behaviour of distance-three and -five examples numerically. Requiring fewer resources than Shor <b>error</b> correction, <b>flag</b> <b>error</b> correction could potentially be used in low-overhead fault-tolerant error correction protocols using low density parity check quantum codes of large code length. Comment: 24 pages (16 pages main text), 19 figures, 7 tables. Comments welcome...|$|R
40|$|March 20 th thru March 21 st, 2002. A {{full set}} of papers is {{available}} from www. safetyevents. com In the past fifteen years, the maritime industry has suffered from incidents and accidents that have either stemmed directly or indirectly from human error. Some of these, such as the Exxon Valdez, grabbed the world's attention. Others, such as the Sea Empress, raised barely a ripple of public interest. What these events have consistently done, however, is elevate the awareness of issues related to mariner fatigue, human error, and human performance to maritime safety groups. International {{groups such as the}} International Maritime Organization (IMO) have put forth new guidance and law, according to international treaty, to address human <b>error.</b> <b>Flag</b> State safety and enforcement agencies (such as national coast guards) have implemented new laws and voluntary programs for their territorial waters. Port States controls have been aimed at identifying potentially high-risk or troublesome vessels. Classification Societies are generating new rules and guidance directed squarely at controlling the factors that influence and induce human error. Ship owners and operators are embracing this new guidance. This paper addresses the issues of human error in the marine industry by presenting an overview of one of the principal factors, crewmember fatigue, which effects or induces errors. The paper also discusses recent trends and initiatives by maritime safet...|$|E
40|$|The rapid {{adoption}} of FPGA-based systems {{in space and}} avionics demands dependability rules from the design to the layout phases to protect against radiation effects. Triple Modular Redundancy is a widely used fault tolerance methodology to protect circuits against radiation-induced Single Event Upsets implemented on SRAM-based FPGAs. The accumulation of SEUs in the configuration memory can cause the TMR replicas to fail, requiring a periodic write-back of the configuration bit-stream. The associated system downtime due to scrubbing and the probability of simultaneous failures of two TMR domains are increasing with growing device densities. We propose a methodology to reduce the recovery time of TMR circuits with increased resilience to Cross-Domain Errors. Our methodology consists of an automated tool-flow for fine-grain error detection, error flags convergence and non-overlapping domain placement. The fine-grain error detection logic identifies the faulty domain using gate-level functions while the <b>error</b> <b>flag</b> convergence logic reduces the overwhelming number of flag signals. The non-overlapping placement enables selective domain reconfiguration and greatly reduces the number of Cross-Domain Errors. Our results demonstrate an evident reduction of the recovery time due to fast error detection time and selective partial reconfiguration of faulty domains. Moreover, the methodology drastically reduces Cross-Domain Errors in Look-Up Tables and routing resources. The improvements in recovery time and fault tolerance are achieved at an area overhead of a single LUT per majority voter in TMR circuits...|$|E
40|$|The MIC 29150 / 29300 / 29500 / 29750 {{are high}} current, high accuracy, {{low-dropout}} voltage regulators. Using Micrel's proprietary Super ßeta PNP ™ process with a PNP pass element, these regulators feature 300 mV to 370 mV (full load) dropout voltages and very low ground current. Designed for high current loads, these devices also find applications in lower current, extremely low dropout-critical systems, where their tiny dropout voltage and ground current values are important attributes. The MIC 29150 / 29300 / 29500 / 29750 are fully protected against overcurrent faults, reversed input polarity, reversed lead insertion, overtemperature operation, and {{positive and negative}} transient voltage spikes. Five pin fixed voltage versions feature logic level ON/OFF control and an <b>error</b> <b>flag</b> which signals whenever the output falls out of regulation. Flagged states include low input voltage (dropout), output current limit, overtemperature shutdown, and extremely high voltage spikes on the input. On the MIC 29 xx 1 and MIC 29 xx 2, the ENABLE pin may be tied to VIN {{if it is not}} required for ON/OFF control. The MIC 29150 / 29300 / 29500 are available in 3 - and 5 -pin TO- 220 and surface mount TO- 263 packages. The MIC 29750 7. 5 A regulators are available in 3 - and 5 -pin TO- 247 packages. For applications with input voltage 6 V or below, see MIC 3715 x LDOs...|$|E
40|$|In {{the present}} study, we {{investigated}} {{the accuracy of}} offside judgements of assistant referees in the English Premier League. The moment in the match, the position and movement speed of the assistant referee, attacker and second-last defender, together with the angle of view for the assistant referee were all considered to underlie incorrect decisions. The error rate was 17. 5 % (868 of 4960 situations). As the English assistant referees tended not to signal in doubtful situations (c= 0. 91), there was an overall bias towards non-flag errors (773 non-flag <b>errors</b> vs. 95 <b>flag</b> <b>errors).</b> The flash-lag hypothesis could explain all <b>flag</b> <b>errors,</b> whereas the optical-error hypothesis could explain a proportion of the non-flag errors (45. 4 %). Fatigue, movement speed, and angle of view {{did not have a}} detrimental effect on offside decision making. In conclusion, there were fewer <b>flag</b> <b>errors</b> than in the 2002 and 2006 FIFA World Cups, whereas the number of non-flag errors rose. The increased awareness of factors involved in offside decision making and the instructions to give {{the benefit of the doubt}} to attackers could have contributed to this situation. status: publishe...|$|R
3000|$|If {{more than}} one {{comparison}} blocs returns [...] " 1 ", then we consider {{that we have a}} correspondence <b>error</b> and a <b>flag</b> is set.|$|R
40|$|A {{low power}} sparse scan readout {{architecture}} {{has been developed}} for the ATLAS pixel front-end IC. The architecture supports a dual discriminator and extracts the time over threshold (TOT) information along with a 2 -D spatial address $ 9 of the hits associating them with a unique 7 -bit beam crossing number. The IC implements level- 1 trigger filtering along with event building (grouping together all hits in a beam crossing) {{in the end of}} column (EOC) buffer. The $ 9 events are transmitted over a 40 MHz serial data link with the protocol supporting buffer overflow handling by appending <b>error</b> <b>flags</b> to events. This mixed-mode full custom IC is implemented in 0. 8 mu HP process to meet the $ 9 requirements for the pixel readout in the ATLAS inner detector. The circuits have been tested and the IC provides dead-time-less ambiguity free readout at 40 MHz data rate...|$|R
40|$|The {{purpose of}} this master thesis project {{is to develop a}} method for verifying the sample point {{position}} (SPP) of an electronic control unit (ECU). The thesis is performed in two phases; first a theoretical solution of the problem and also a practical implementation. To realize the theory a circuit board were constructed. The solution of the problem is then tested and verified on the design PCB. To be able to validate the test result special test instrument was used such as an oscilloscope with a controller-­‐‑area network (CAN) analyzer module. To analyse the sample point position the method used takes advantage of the built-­‐‑in error detection function, Stuff error. The Stuff error is a mechanism integrated in the CAN protocol and is provoked when it don’t perceive an expected stuff bit in the message sent over the CAN bus. To generate a stuff bit error the bit length of the stuff bit is decreased until the receiver no longer can interpret it. When this occurs an <b>error</b> <b>flag</b> is set and by keeping track of the number of steps that the length has been decreased the sample point position can be calculated. The accuracy of the calculation of the sample point position is within the given limits that have been set for this project. As seen in the report the results are SPP± 2 % which is close enough to know when data is sampled...|$|E
40|$|International Telemetering Conference Proceedings / October 13 - 16, 1986 / Riviera Hotel, Las Vegas, NevadaToday I will {{describe}} {{the application of}} the Autocorrelation function to the Magnetic Recording Channel. I will explain what is an autocorrelated function, how does it behave and where may it be applied in the Magnetic Recording channel. There will be a brief description of Kodak San Diego’s Autocorrelator and how we apply this technology. If I have done my job well {{at the end of this}} presentation you will have enough knowledge about autocorrelation to access your own application. Before I start, let me give a brief overview on the application of an Autocorrelator. The Autocorrelator can be used to collect information on signals in a magnetic recording system and display this information graphically as a statistical plot. Autocorrelation, in the time domain, is the counter part to a spectrum analyzer in the frequency domain (Fourier Pair). The information about the signal of interest must be stored for post analysis. This information called a database must then be processed by a computer. The computer passes the database through the autocorrelation algorithm and produces a second database. This second database represents a plot of the autocorrelated function. The next step is to plot the database on a video screen. This plot can be examined for periodicities, randomness, and relational influences on a captured signal. In our application, this signal is an <b>error</b> <b>flag</b> or a dropout flag. We want a statistical picture of the magnitude of errors and their relative frequency. The information gained from Autocorrelation can aid in solutions for: Error Correction Codes Media Evaluation/Qualifications Media Process Defect Identification Mechanical Eccentricities Modulation Code Performances System’s Figure of Merit To use a cliche, “one picture is worth a thousand words,” is exactly the point of the Autocorrelator’s graphical display. It yields information useful to those disciplines which often find difficulty in describing an event in understandable terms...|$|E
40|$|Technological advancements have {{transformed}} {{the way people}} interact with the world. The Internet now forms a critical infrastructure that links different aspects of our life like personal communication, business transactions, social networking, and advertising. In order to cater to this ever increasing communication overhead {{there has been a}} fundamental shift in the network infrastructure. Modern network routers often employ software programmable network processors instead of ASIC-based technology for higher throughput performance and adaptability to changing resource requirements. This programmability makes networking infrastructure vulnerable to new class of network attacks by compromising the software on network processors. This issue has resulted in the need for security systems which can monitor the behavior of network processors at run time. This thesis describes an FPGA-based security monitoring system for multi-core network processors. The implemented security monitor improves upon previous hardware monitoring schemes. We demonstrate a state machine based hardware programmable monitor which can track program execution flow at run time. Applications are analyzed offline and a hash of the instructions is generated to form a state machine sequence. If the state machine deviates from expected behavior, an <b>error</b> <b>flag</b> is raised, forcing a network processor reset. For testing purposes, the monitoring logic along with the multi-core network processor system is implemented in FPGA logic. In this research, we modify the network processor memory architecture to improve security monitor functionality. The efficiency of this approach is validated using a diverse set of network benchmarks. Experiments are performed on the prototype system using known network attacks to test the performance of the monitoring subsystem. Experimental results demonstrate that out security monitor approach provides an efficient monitoring system in detecting and recovering from network attacks with minimum overhead while maintaining line rate packet forwarding. Additionally, our monitor is capable of defending against attacks on processor with a Harvard architecture, the dominant contemporary network processor organization. We demonstrate that our monitor architecture provides no network slowdown {{in the absence of an}} attack and provides the capability to drop packets without otherwise affecting regular network traffic when an attack occurs...|$|E
40|$|As genetic maps become denser, {{the effect}} of {{laboratory}} typing errors becomes more serious. We review a general method for detecting errors in pedigree genotyping data that is {{a variant of the}} likelihood-ratio test statistic. It pinpoints individuals and loci with relatively unlikely genotypes. Power and significance studies using Monte Carlo methods are shown by using simulated data with pedigree structures similar to the CEPH pedigrees and a larger experimental pedigree used in the study of idiopathic dilated cardiomyopathy (DCM). The studies show the index detects errors for small values of theta with high power and an acceptable false positive rate. The method was also used to check for errors in DCM laboratory pedigree data and to estimate the error rate in CEPH-chromosome 6 data. The <b>errors</b> <b>flagged</b> by our method in the DCM pedigree were confirmed by the laboratory. The results are consistent with estimated false-positive and false-negative rates obtained using simulation...|$|R
50|$|A {{grey area}} exists when the edit is trivial (such as a typographic <b>error).</b> Some {{organizations}} <b>flag</b> all updates, others {{make a judgment}} call about what is considered a substantive update.|$|R
50|$|When {{the actual}} {{declaration}} {{of the body of}} the function is made, either the parameters are omitted or must be absolutely identical to the original forward declaration, or an <b>error</b> will be <b>flagged.</b>|$|R
40|$|A FORTRAN {{computer}} {{program for the}} semi analytic prediction of unsteady thrust augmenting ejector performance has been developed, based on a theoretical analysis for ejectors. That analysis blends classic self-similar turbulent jet descriptions with control-volume mixing region elements. Division of the ejector into an inlet, diffuser, and mixing region allowed flexibility in the modeling of the physics for each region. In particular, the inlet and diffuser analyses are simplified by a quasi-steady-analysis, justified by the assumption that pressure is the forcing function in those regions. Only the mixing region {{is assumed to be}} dominated by viscous effects. The present work provides an overview of the code structure, a description of the required input and output data file formats, and the results for a test case. Since there are limitations to the code for applications outside the bounds of the test case, the user should consider TEA as a research code (not as a production code), designed specifically as an implementation of the proposed ejector theory. Program <b>error</b> <b>flags</b> are discussed, and some diagnostic routines are presented...|$|R
40|$|We {{propose a}} general {{framework}} for assertion-based debugging of constraint logic programs. Assertions are linguistic constructions for expressing properties of programs. We define several assertion schemas for writing (partial) specifications for constraint logic programs using quite general properties, including user-defined programs. The framework {{is aimed at}} detecting deviations of the program behavior (symptoms) {{with respect to the}} given assertions, either at compile-time (i. e., statically) or run-time (i. e., dynamically). We provide techniques for using information from global analysis both to detect at compile-time assertions which do not hold in {{at least one of the}} possible executions (i. e., static symptoms) and assertions which hold for all possible executions (i. e., statically proved assertions). We also provide program transformations which introduce tests in the program for checking at run-time those assertions whose status cannot be determined at compile-time. Both the static and the dynamic checking are provably safe in the sense that all <b>errors</b> <b>flagged</b> are definite violations of the pecifications. Finally, we report briefly on the currently implemented instances of the generic framework...|$|R
40|$|NJ 4 We {{can improve}} {{numerical}} programming by recognizing that three {{aspects of the}} computing environment belong to intellectually separate compartmeTits. 'One is the syntax of the language, be it Ada, C, Fortran or Pascal, which gives legitimacy to various expressions without completely specifying their meaning. Another might be called "arithmetic semantics". It concerns the diverse values produced by! different computers for the same expression in a given language, including the • values delivered after exceptions like over/underfiow. The third compartment in-cludes diagnostic aids, like <b>error</b> <b>flags</b> and messages; these too can be specified in language-independent ways. However imperfect, this decoupling should spell out CZ for all concerned the nature of arithmetic responsibilities to be borne by hardware designers, by compiler writers and by operating system programmers. "Another of the great advantages of using the axiomatic approach is that axioms ofter a simple and flexible technique for leaving certain aspects of a language undefined, for example [...] . accuracy of floating point [...] . This is absolutely essen-tial for standardization purposes [...] . "- C. A. R. Hoare (1989...|$|R
40|$|The TOPEX/Poseidon Project Satellite Performance Analysis Team's (SPAT) {{roles and}} {{responsibilities}} have grown to include functions that are typically performed by other teams on JPL Flight Projects. In particular, SPAT Telecommunication's role has expanded beyond the nominal function of monitoring, assessing, characterizing, and trending the spacecraft (S/C) RF/Telecom subsystem to one of End-to-End Information Systems (EEIS) monitoring. This has been accomplished {{by taking advantage of}} the spacecraft and ground data system structures and protocols. By processing both the received spacecraft telemetry minor frame ground generated CRC flags and NASCOM block poly <b>error</b> <b>flags,</b> bit <b>error</b> rates (BER) for each link segment can be determined. This provides the capability to characterize the separate link segments, determine science data recovery, and perform fault/anomaly detection and isolation. By monitoring and managing the links, TOPEX has successfully recovered approximately 99. 9 percent of the science data with an integrity (BER) of better than 1 x 10 (exp 8). This paper presents the algorithms used to process the above flags and the techniques used for EEIS monitoring...|$|R
40|$|The {{closed loop}} {{prototype}} has operational bi-directional wireless links. The Wideband PCM-FSK receiver {{has been designed}} and characterized. Now that both links function, communication performance can be addressed. For example, noise problems with the received outlink signal that caused the PC program to lockup were just recently revealed and minimized by software "enhancements" to the Windows based PC program. A similar problem with inlink communication was uncovered several days before this report: A noise spike or dropout (expected events in the animal Habitat) caused an interrupt to the implant microcontroller which halted outlink transmission. Recovery of outlink transmission did not reliably occur. The problem has been defined and implant software is being modified to better recognize noise from data by changing the timing associated with valid data packet identification and by better utilizing the <b>error</b> <b>flags</b> generated by the microcontroller's SCI circuits. Excellent inlink performance will also require improvements in the implant's receiver. The biggest performance improvement can be provided by antenna design for the Habitat. The quarter wavelength whip antennas used with the demo prototype inlink leave much to be desired...|$|R
40|$|Praise for Higher-Order Perl [...] . As a programmer, your {{bookshelf}} {{is probably}} overflowing with books that {{did nothing to}} change the way you program [...] . orthink about programming. You’re going to need a completely different shelf for this book. While discussing caching techniques in Chapter 3, Mark Jason Dominus points out how a large enough increase in power can change the fundamental way you think about a technology. And that’s precisely what this entire book does for Perl. It raids the deepest vaults and highest towers of Computer Science, and transforms the many arcane treasures it finds—recursion, iterators, filters, memoization, partitioning, numerical methods, higher-order functions, currying, cutsorting, grammar-based parsing, lazy evaluation, and constraint programming—into powerful and practical tools for real-world programming tasks: file system interactions, HTML processing, database access, web spidering, typesetting, mail processing, home finance, text outlining, and diagram generation. Along the way it also scatters smaller (but equally invaluable) gems, like the elegant explanation of the difference between “scope ” and “duration ” in Chapter 3, or the careful exploration of how best to return <b>error</b> <b>flags</b> in Chapter 4. It even has practical tips for Perl evangelists...|$|R
