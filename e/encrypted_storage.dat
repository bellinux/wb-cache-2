39|56|Public
50|$|From version 3 onwards, FileZilla stored all saved usernames and {{passwords}} as plain text, allowing any malware {{that had}} gained even {{limited access to}} the user's system to read the data. FileZilla author Tim Kosse has been very reluctant to add <b>encrypted</b> <b>storage.</b> He stated that it gives {{a false sense of}} security, since well-crafted malware can include a keylogger that reads the master password used to secure the data. Users have argued that reading the master password to decrypt the <b>encrypted</b> <b>storage</b> is still harder than just reading the unecrypted storage. A fork called FileZilla Secure was started in November 2016 to add <b>encrypted</b> <b>storage.</b> In May 2017, <b>encrypted</b> <b>storage</b> was also added to the main version, 10 years after it was first requested. Kosse maintained that the feature did not really increase security, as long as the operating system is not secure.|$|E
5000|$|LUKS and GNOME Disks {{to install}} and use <b>encrypted</b> <b>storage</b> devices, e.g. for USB sticks ...|$|E
5000|$|... blaucloud : No User Limit each User get his ownCloud Instance in an <b>encrypted</b> <b>Storage.</b>|$|E
5000|$|Version 8: 2001 (Volcano query optimizer, <b>encrypted</b> data <b>storage</b> and transmission) ...|$|R
50|$|Tresorit officially {{launched}} its client-side <b>encrypted</b> cloud <b>storage</b> service after emerging from its stealth beta in April 2014.|$|R
50|$|The {{upcoming}} Nitrokey Storage {{provides the}} same features as the Nitrokey Pro and additionally contains an <b>encrypted</b> mass <b>storage.</b>|$|R
5000|$|Trustbox : A 3-layer <b>encrypted</b> <b>storage</b> {{supports}} privacy for {{an unlimited}} file version retrieval. Restore any file from {{any point in}} time.|$|E
5000|$|Kobeissi {{himself had}} been vocal in the past about other {{services}} using encryption. In a Forbes online article investigating the security of <b>encrypted</b> <b>storage</b> service MEGA, Kobeissi, who voiced concern along with other security researchers, noted: [...] "It's a nice website, {{but when it comes}} to cryptography they seem to have no experience". This made Cryptocat's own vulnerabilities a more high-profile discussion among security researchers. Nevertheless, MEGA eventually adopted Kobeissi's critique and implemented the suggested changes to their cryptographic code delivery methods.|$|E
5000|$|NetBSD {{provides}} {{various features}} in the security area. The Kernel Authorization framework (or Kauth) is a subsystem managing all authorization requests inside the kernel, and used as system-wide security policy. It allows external modules to plug-in the authorization process. NetBSD also incorporates exploit mitigation features, ASLR, restricted mprotect (...) and Segvguard from the PaX project, and GCC Stack Smashing Protection (SSP, or also known as ProPolice, enabled by default since NetBSD 6.0) compiler extensions. Verified Executables (or Veriexec) is an in-kernel file integrity subsystem in NetBSD. It allows the user to set digital fingerprints (hashes) of files, and take {{a number of different}} actions if files do not match their fingerprints. For example, one can allow Perl to run only scripts that match their fingerprints. The cryptographic device driver (CGD) allows using disks or partitions (including CDs and DVDs) for <b>encrypted</b> <b>storage.</b>|$|E
50|$|For {{security}} reasons {{certain types of}} data (e.g., credit-card information) may be kept <b>encrypted</b> in <b>storage</b> to prevent the possibility of unauthorized information reconstruction from chunks of storage snapshots.|$|R
40|$|As secure storage {{becomes more}} {{pervasive}} throughout the enterprise, the focus quickly moves from implementing <b>encrypting</b> <b>storage</b> devices to establishing effective and secure key management policies. Without the proper key generation, distribution, storage, and recovery, valuable {{data will be}} eventually compromised. How to manage keys becomes a challenging task. Adequate understanding of these new challenges is essential to effectively devise new key management policies and mechanisms to guard against them. In this paper we study key management systems and perform some scenarios used for deploying data-at-rest encryption solutions in storage area network (SAN) environment. Key words...|$|R
5000|$|When {{used for}} <b>encrypted</b> data <b>storage,</b> {{on the fly}} the data stream is {{automatically}} encrypted as it is written and decrypted when read back again, transparently to software. The acronym OTFE is typically used.|$|R
5000|$|The June 2013 {{release of}} the 5th {{generation}} models features a name change to AirPort Time Capsule, and a redesign with measurements 3.85 in square, and 6.6 in high. The square dimensions echo the size of both the latest AirPort Express and Apple TVs (2nd generation onwards), just with the height being significantly higher. The 2013 models feature the same [...] ports on the back as previous generations, and come in the same capacities as the 4th generation of 2 TB & 3 TB, but have introduced the newest Wi-Fi standard 802.11ac. The AirPort Extreme released {{at the same time}} is exactly the same in dimensions and I/O ports, just without the internal harddrive of the AirPort Time Capsule. 2013 models feature faster download speed, beam-forming improvements and wireless or desktop network control with iCloud integration. Airport is compatible with devices using the 802.11a, 802.11b, 802.11g, 802.11n and 802.11ac specifications. Also improved, Airport Utility has added one click Time Capsule format from the utility's Airport Time Capsule, Edit, Disks menu, allowing easy and rapid Erase Disk and Archive Disk to start over or configure Network. Disk Erase includes up to 35 passes and device includes <b>encrypted</b> <b>storage</b> plus optional WAN sharing, making Airport extremely secure and flexible for home, class and office environments. Airport Utility is a free download.|$|E
40|$|This {{paper is}} from the SANS Institute Reading Room site. Reposting is not {{permitted}} without express written permission. A Guide to <b>Encrypted</b> <b>Storage</b> Incident Handling Incident handling and response has become more complicated with {{the increased use of}} <b>encrypted</b> <b>storage</b> technology due, in part, to privacy legislation and regulatory compliance mandates. There are many works that have been created previously that discuss Incident Handling but very few relate to the current need to handle <b>encrypted</b> <b>storage.</b> Fortunately, there are tools and processes that aid the Incident Handler in performing their duties. In this paper, I give an overview of the Incident Handling process as it relates [...] . Copyright SANS Institut...|$|E
30|$|By use {{of these}} {{deployment}} models, we have shown[1] that through duplication and separation of duty, we can alleviate availability and integrity concerns, {{and to some extent}} also confidentiality by implementing <b>encrypted</b> <b>storage.</b> However, even with <b>encrypted</b> <b>storage,</b> we still have to trust the encryption provider with all our data. Furthermore, if the data needs to be processed in the cloud, the cloud processing provider in general also needs to have access.|$|E
50|$|In 2006, {{following}} a {{talk at the}} 23rd Chaos Communication Congress titled Unlocking FileVault: An Analysis of Apple's <b>Encrypted</b> Disk <b>Storage</b> System, Jacob Appelbaum & Ralf-Philipp Weinmann released VileFault which decrypts encrypted Mac OS X disk image files.|$|R
50|$|The base IEEE 1619 Standard Architecture for <b>Encrypted</b> Shared <b>Storage</b> Media {{uses the}} XTS-Advanced Encryption Standard (XEX-based Tweaked CodeBook mode (TCB) with {{ciphertext}} stealing (CTS); the proper name should be XTC (XEX TCB CTS), {{but that is}} already used to denote the ecstasy drug).|$|R
50|$|In cryptography, {{plaintext}} or cleartext is unencrypted information, {{as opposed}} to information <b>encrypted</b> for <b>storage</b> or transmission. Plaintext usually means unencrypted information pending input into cryptographic algorithms, usually encryption algorithms. Cleartext usually refers to data that is transmitted or stored unencrypted ('in the clear').|$|R
30|$|Like other {{anonymity}} applications, {{individual users}} {{can still be}} revealed by posting personal information in {{the contents of a}} message. Given time and access to the file structure of the device, it is also possible for the <b>encrypted</b> <b>storage</b> to be decrypted, for example via a brute force attack. Additionally, adversaries with a sufficient view of the network may still implement de-anonymization through timing analysis. We hope to address these vulnerabilities in future work.|$|E
40|$|Abstract. In {{this paper}} we {{address the problem of}} {{consistency}} for cryptographic file systems. A cryptographic file system protects the users â€™ data from the file server, which is possibly untrusted and might exhibit Byzantine behavior, by encrypting the data before sending it to the server. The consistency of the encrypted file objects that implement a cryptographic file system relies on the consistency of the two components used to implement them: the file storage protocol and the key distribution protocol. We first define two generic classes of consistency conditions that extend and generalize existing consistency conditions. We then formally define consistency for encrypted file objects in a generic way: for any consistency conditions for the key and file objects belonging to one of the two classes of consistency conditions considered, we define a corresponding consistency condition for encrypted file objects. We finally provide, in our main result, necessary and sufficient conditions for the consistency of the key distribution and file storage protocols under which the <b>encrypted</b> <b>storage</b> is consistent. Our framework allows the composition of existing key distribution and file storage protocols to build consistent encrypted file objects and simplifies complex proofs for showing the consistency of <b>encrypted</b> <b>storage.</b> ...|$|E
30|$|We {{developed}} SecurePost {{to support}} the most popular OSN platforms (Facebook and Twitter) and device types (Android smart phone), providing compatibility for older devices lacking some of the security features (e.g. <b>encrypted</b> <b>storage)</b> of newer phones. The application also provides a means of storing messages for later delivery to counter network disruption due to power loss or government censure. Because the project is open source and designed for modularity, other similar platforms and systems can be incorporated in the future.|$|E
5000|$|BullGuard Backup : 5 PC/license, fast upload speeds, mobile access, <b>encrypted</b> {{transfer}} and <b>storage,</b> password-protected settings, free 24/7 support.|$|R
5000|$|Cloud Archive for Email: <b>Encrypted</b> cloud <b>storage</b> which saves emails in {{triplicate}} in an immutable storage system. Users can access and search emails through an Outlook desktop client. Archive access is available via a Mac desktop app and apps for Android, BlackBerry, iOS and Windows Mobile devices.|$|R
40|$|As secure storage {{becomes more}} {{pervasive}} throughout the enterprise,the focus quickly moves from implementing <b>encrypting</b> <b>storage</b> devices toestablishing effective and secure key management policies. Without the properkey generation, distribution, storage, and recovery, valuable data will beeventually compromised [9]. Although {{a considerable amount}} of research hasbeen dedicated to encryption algorithms in the past decades, key managementbecomes an issue due to the quantity of data. For example, with millions of datayou will need million set of keys. To manage and keep track of these keys,complexity and operational inefficiency becomes an issue. How to manage keysbecomes a challenging task. Adequate understanding of these new challenges isessential to effectively devise new key management policies and mechanisms toguard against them. We discuss many of these methods in this new context tofill this ga...|$|R
30|$|Furthermore, the CloudPost {{provider}} has {{to define}} the multi-cloud environment in the deployment descriptor (see Listing ??). The PaaSHopper middleware allows the provider to specify {{the properties of the}} different PaaS platforms. For example, the private cloud provides secure communication (lines 12 â€“ 13 in Listing ??), OpenShift offers both secure communication and <b>encrypted</b> <b>storage</b> (lines 38 â€“ 39 in Listing ??), and GAE supports none of these properties (lines 25 â€“ 26 in Listing ??). This metadata allows the PolicyEngine to reason about these platforms.|$|E
40|$|Abstract. In {{this paper}} we {{introduce}} a new secure cryptographic scheme, named IES-CBIR, specifically designed for images and their outsourced storage and retrieval in large private image repositories. Our solution enables both <b>encrypted</b> <b>storage</b> and querying using Content Based Im-age Retrieval (CBIR), while preserving privacy. We have implemented a prototype system around the proposed scheme, and experimentally an-alyzed its performance when compared to similar proposals for privacy-preserving image retrieval. Our results show that IES-CBIR allows more efficient operations than existing proposals, {{both in terms of}} time and space overheads, while enabling less restrictive application scenarios...|$|E
30|$|Assuming {{that the}} {{document}} generation service is deployed on each PaaS platform of the multi-cloud environment (see Listing ??), then a tenant can constrain (via policies) which instance of this application component {{will be used}} for processing his requests. Such a tenant policy specifies the required properties of a certain application component. For example, the policy in Figure ?? specifies that, for a confidential document type, the document generation service must provide <b>encrypted</b> <b>storage</b> and secure communicaton, or must run in a private cloud. Tenants can further define other document types (that are mapped to message types in the middleware) and specify constraints for each type.|$|E
40|$|Abstract. As secure storage {{becomes more}} {{pervasive}} throughout the enterprise, the focus quickly moves from implementing <b>encrypting</b> <b>storage</b> devices to establishing effective and secure key management policies. Without the proper key generation, distribution, storage, and recovery, valuable {{data will be}} eventually compromised [9]. Although {{a considerable amount of}} research has been dedicated to encryption algorithms in the past decades, key management becomes an issue due to the quantity of data. For example, with millions of data you will need million set of keys. To manage and keep track of these keys, complexity and operational inefficiency becomes an issue. How to manage keys becomes a challenging task. Adequate understanding of these new challenges is essential to effectively devise new key management policies and mechanisms to guard against them. We discuss many of these methods in this new context to fill this gap...|$|R
50|$|Starting {{with the}} 3.0 version {{developments}} efforts were parallel on the Premium {{and on the}} Open Source Editions. PE efforts were focused on quality, transport reliability, performance and <b>encrypted</b> log <b>storage.</b> The Open Source Edition efforts focused on improving {{the flexibility of the}} core infrastructure to allow more and more different, non-syslog message sources.|$|R
50|$|The {{organization}} {{will continue to}} enhance IT security and privacy programs to address new and evolving risks by improving controls over sensitive data. In some cases, technology, such as scanning outgoing e-mail for sensitive information and <b>encrypting</b> removable <b>storage</b> devices, can mitigate potential risks. The other cornerstone of mitigating risk is educating employees of emerging security and privacy issues.|$|R
30|$|However, the {{processing}} of documents is often of a recurring nature, e.g. processing payslips and invoices {{at the end of}} the month, typically in the form of large document batches. The private data center of CloudPost thus faces high peaks in loads {{at the end of the}} month. To address these peak loads, the public PaaS platforms are used as spill-over. Evidently, also the decision which documents to process in the public cloud, depends on the applicable tenant policies, for example non-confidential documents (like advertising) will be generated in the public cloud, and confidential documents in public clouds that offer <b>encrypted</b> <b>storage</b> or in the private cloud.|$|E
40|$|International audienceIn {{this article}} we present grids as an {{architecture}} for medical image processing and health-care networks. We argue that confidential patient data should not be stored on the grid unprotected and explain why access control systems do not offer sufficient protection alone. Effective protection {{can be achieved by}} storing confidential data in encrypted form. Our proposal details a key management architecture, that allows <b>encrypted</b> <b>storage</b> and still enables users to access decryption keys for data they are authorized to see. Furthermore our architecture is robust against breakdowns, and denial of service attacks. It scales well with the number of users and does not introduce a single point of failure into the system...|$|E
40|$|Abstractâ€”This paper {{focuses on}} {{studying}} cloud storage data protection model and implementing <b>encrypted</b> <b>storage</b> of user data in double-key form. User data are encrypted with symmetric encryption algorithm and this secret key is encrypted with asymmetric encryption algorithm. The private key is managed {{and controlled by}} users. In this way, users guarantee the security of their own data with the sole private key. Providing effective protection for uploading and downloading of user data and good data storage and transmission support for cloud storage application through the data protection mechanism deployed at client, thus solving the biggest obstacle, i. e. security of cloud data {{in the application of}} cloud storage enterprises currently to a certain extent...|$|E
40|$|As secure storage {{becomes more}} {{pervasive}} throughout the enterprise, the focus quickly moves from implementing <b>encrypting</b> <b>storage</b> devices to establishing effective and secure key management policies. Without the proper key generation, distribution, storage, and recovery, valuable {{data will be}} eventually compromised [9]. Although {{a considerable amount of}} research has been dedicated to encryption algorithms in the past decades, key management becomes an issue due to the quantity of data. For example, with millions of data you will need million set of keys. To manage and keep track of these keys, complexity and operational inefficiency becomes an issue. How to manage keys becomes a challenging task. Adequate understanding of these new challenges is essential to effectively devise new key management policies and mechanisms to guard against them. We discuss many of these methods in this new context to fill this gap. Storage Security, Key Management, Storage Area Network...|$|R
40|$|Rekeying {{refers to}} an {{operation}} of replacing an existing key with a new key for encryption. It renews security protection, so as to protect against key compromise and enable dynamic access control in cryptographic storage. However, it is non-trivial to realize efficient rekeying in <b>encrypted</b> deduplication <b>storage</b> systems, which use deterministic content-derived encryption keys to allow deduplication on ciphertexts. We design and implement REED, a rekeying-aware <b>encrypted</b> deduplication <b>storage</b> system. REED builds on a deterministic version of all-or-nothing transform (AONT), such that it enables secure and lightweight rekeying, while preserving the deduplication capability. We propose two REED encryption schemes that trade between performance and security, and extend REED for dynamic access control. We implement a REED prototype with various performance optimization techniques and demonstrate how we can exploit similarity to mitigate key generation overhead. Our trace-driven testbed evaluation shows that our REED prototype maintains high performance and storage efficiency...|$|R
50|$|IronKey is {{the brand}} name {{of a family of}} <b>encrypted</b> USB {{portable}} <b>storage</b> devices owned by Kingston Digital, the flash memory affiliate of Kingston Technology Company, Inc.|$|R
