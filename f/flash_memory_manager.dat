1|4375|Public
50|$|CardTrick was {{announced}} in 1993 to support the flash memory being built into PCMCIA cards. CardTrick later evolved into the embedded <b>flash</b> <b>memory</b> <b>manager</b> FlashFX in 1995, moving Datalight into the raw flash memory market. The company grew rapidly in the late 1990s, receiving the WA Fast 50 award for the fastest growing companies in Washington state in 1997 and 1998.|$|E
25|$|Game {{progress}} can {{be saved}} on virtual GameCube Memory Cards, emulated Wii <b>flash</b> <b>memory,</b> and save states. Dolphin features a <b>Memory</b> Card <b>Manager</b> which allows transfer of save files to and from virtual GameCube memory cards.|$|R
40|$|Embedded {{devices such}} as {{personal}} digital assistants (PDAs), pocket PCs, palmtops, and handheld PCs are increasingly using <b>flash</b> <b>memory</b> for the permanent storage of databases. Databases achieve their fast data access speeds by using a <b>memory</b> <b>manager</b> which manages data pages in a memory buffer. The buffer manager uses a page replacement policy to evict pages when the memory buffer is full. An eviction of a dirty page {{will result in a}} write to <b>flash</b> <b>memory.</b> Unfortunately, writing to <b>flash</b> <b>memory</b> consumes a lot more energy than reading. Much of the previous work in page replacement policies has focused on reducing the number of page reads rather than writes. One of the few existing works to consider the effects of <b>flash</b> <b>memory’s</b> hardware constraints for database design is Lee et. al. ’s [Lee and Moon 2007] In-page Logging (IPL) approach. They demonstrated IPL significantly outperforms traditional disk-based databases when running on <b>flash</b> <b>memory.</b> However, they do not consider the energy efficiency of their approach in terms of the behaviour of the page replacement policy. This paper addresses this issue by presenting the Multi-Buffer manager which is customized for flash databases that uses a logging-based approach for managing updates such as IPL. Extensive experiments show the page replacement policy used plays a pivotal role in the performance of the flash database system. In particular, our Multi-Buffer manager can reduce energy consumption by up to 40 % compared to the state-of-the-art clean first flash-based buffer replacement policy (CFLRU) ...|$|R
5000|$|January 2010: HF S21 (two SDHC slots, 64 GB <b>flash</b> <b>memory,</b> {{electronic}} viewfinder), HF S20 (two SDHC slots, 32 GB <b>flash</b> <b>memory),</b> HF S200 (two SDHC slots); HF M31 (SDHC, 32 GB <b>flash</b> <b>memory),</b> HF M30 (SDHC, 8 GB <b>flash</b> <b>memory),</b> HF M300 (SDHC); HF R11 (32 GB <b>flash</b> <b>memory),</b> HF R10 (SDHC, 8 GB <b>flash</b> <b>memory),</b> HF R100 (SDHC) ...|$|R
30|$|In {{order to}} reduce the cost of SSD and {{maintain}} the speed performance and the durability, the hybrid SSD has been proposed[16, 17]. The basic idea is to use both SLC <b>flash</b> <b>memories</b> and MLC (usually 2 -bit/cell) <b>flash</b> <b>memories.</b> The SLC <b>flash</b> <b>memory</b> has an edge over the MLC <b>flash</b> <b>memory</b> in terms of the speed performance and the durability. However, the MLC <b>flash</b> <b>memory</b> is cheaper than the SLC <b>flash</b> <b>memory.</b> Therefore, combining them can allow both types of <b>flash</b> <b>memories</b> to complement each other[16 – 19].|$|R
40|$|Abstract — This paper {{focuses on}} design of NOR based <b>flash</b> <b>memory</b> {{controller}}. <b>Flash</b> <b>memory</b> controller manages data stored in <b>flash</b> <b>memory.</b> There are different commands {{that to be}} handled by the controller to operate <b>flash</b> <b>memory.</b> All these signals have been generated through <b>flash</b> <b>memory</b> controller. The results are verified through XILINX ISE simulation tool. Serial communication module is implemented by using Micro-blaze and output is verified on hardware by using LED’s...|$|R
50|$|There are 2 <b>Flash</b> <b>Memory</b> sockets {{available}} (80pin, 120ns), {{with the}} maximum <b>flash</b> <b>memory</b> supported being 16MB. Standard <b>flash</b> <b>memory</b> was 8MB on most routers and 4mb on 'Mission Specific' models. A boot ROM upgrade {{may be needed}} to use 16MB of flash. The 2500 ran its IOS directly from <b>flash</b> <b>memory.</b>|$|R
40|$|Various novel <b>flash</b> <b>memory</b> {{devices for}} both NOR and NAND types are reviewed. In NOR-type <b>flash</b> <b>memory</b> devices, 2 -bit/cell devices and their {{technology}} trends are addressed. Furthermore, multi-site -charge-trapping schemes with more-than- 2 -bit/cell operation are also {{studied in the}} fin SONOS (silicon oxide-nitride oxide semiconductor) <b>flash</b> <b>memory</b> having independent double gates and the stacked vertical-channel NOR <b>flash</b> <b>memory.</b> In the NAND-type <b>flash</b> <b>memory,</b> devices having extended word-lines are investigated. As well as the short-channel effect, fluctuation and process limitation issues are considered for the highly scaled devices. Some future perspectives, including a stacked array, are discussed for high-density NAND <b>flash</b> <b>memories...</b>|$|R
40|$|<b>Flash</b> <b>memory</b> shows {{promise for}} use in storage devices for mobile computers. However, <b>flash</b> <b>memory</b> cannot be {{overwritten}} unless erased in advance. Erase operations are slow that usually decrease system performance, and consume power. For power conservation, better system performance, and longer <b>flash</b> <b>memory</b> lifetime, system support for erasure management is necessary. In this report, a non-update-inplace scheme is proposed to implement a <b>flash</b> <b>memory</b> server. A new cleaning policy is used {{to reduce the number}} of erase operations and to evenly wear out <b>flash</b> <b>memory.</b> The policy uses a fine-grained method to effectively cluster hot data and cold data in order to reduce cleaning overhead. Performance evaluations show that erase operations are significantly reduced and <b>flash</b> <b>memory</b> is evenly worn. Keywords: <b>Flash</b> <b>Memory,</b> Cleaning Policy, Mobile Computer, and Embedded Systems 1. Introduction <b>Flash</b> <b>memory</b> is nonvolatile that retains data even after power is turned off and consumes relatively [...] ...|$|R
30|$|PDE {{systems on}} top of <b>flash</b> <b>memory.</b> <b>Flash</b> <b>memory</b> has {{significantly}} different nature compared to mechanical disks, e.g., <b>flash</b> <b>memory</b> is update unfriendly and vulnerable to wear (“Flash memory” section). All the aforementioned block-based PDEs unfortunately may suffer from deniability compromises in the underlying flash storage due to {{the handling of the}} unique nature of <b>flash</b> <b>memory.</b> This is because: The unique characteristics of <b>flash</b> <b>memory</b> require a special internal management, which creates a different view of data in <b>flash</b> <b>memory,</b> independent of the view on the block layer. By having access to the raw flash, the adversary can obtain this different view, which may allow it to observe those unexpected “traces” of sensitive data, whose existence needs to be denied. To eliminate the aforementioned deniability compromise, a few PDE systems directly incorporate PDE into <b>flash</b> <b>memory.</b>|$|R
40|$|A hold-up {{power supply}} for <b>flash</b> <b>memory</b> systems is provided. The hold-up power supply {{provides}} the <b>flash</b> <b>memory</b> {{with the power}} needed to temporarily operate when a power loss exists. This allows the <b>flash</b> <b>memory</b> system to complete any erasures and writes, and thus allows it to shut down gracefully. The hold-up power supply detects when a power loss on a power supply bus is occurring and supplies the power needed for the <b>flash</b> <b>memory</b> system to temporally operate. The hold-up power supply stores power {{in at least one}} capacitor. During normal operation, power from a high voltage supply bus is used to charge the storage capacitors. When a power supply loss is detected, the power supply bus is disconnected from the <b>flash</b> <b>memory</b> system. A hold-up controller controls the power flow from the storage capacitors to the <b>flash</b> <b>memory</b> system. The hold-up controller uses feedback to assure that the proper voltage is provided from the storage capacitors to the <b>flash</b> <b>memory</b> system. This power supplied by the storage capacitors allows the <b>flash</b> <b>memory</b> system to complete any erasures and writes, and thus allows the <b>flash</b> <b>memory</b> system to shut down gracefully...|$|R
40|$|The present {{invention}} {{provides a}} <b>flash</b> <b>memory</b> management system and method with increased performance. The <b>flash</b> <b>memory</b> management system provides {{the ability to}} efficiently manage and allocate <b>flash</b> <b>memory</b> use {{in a way that}} improves reliability and longevity, while maintaining good performance levels. The <b>flash</b> <b>memory</b> management system includes a free block mechanism, a disk maintenance mechanism, and a bad block detection mechanism. The free block mechanism provides efficient sorting of free blocks to facilitate selecting low use blocks for writing. The disk maintenance mechanism provides for the ability to efficiently clean <b>flash</b> <b>memory</b> blocks during processor idle times. The bad block detection mechanism provides the ability to better detect when a block of <b>flash</b> <b>memory</b> is likely to go bad. The flash status mechanism stores information in fast access memory that describes the content and status of the data in the flash disk. The new bank detection mechanism provides the ability to automatically detect when new banks of <b>flash</b> <b>memory</b> are added to the system. Together, these mechanisms provide a <b>flash</b> <b>memory</b> management system that can improve the operational efficiency of systems that utilize <b>flash</b> <b>memory...</b>|$|R
2500|$|... 1024 MB of SLC NAND <b>flash</b> <b>memory</b> (in 2006 the {{specifications}} called for 512MB of <b>flash</b> <b>memory)</b> ...|$|R
50|$|Many <b>flash</b> <b>memory</b> devices, such as USB memory sticks, {{include a}} <b>flash</b> <b>memory</b> {{controller}} on chip. <b>Flash</b> <b>memory</b> is inherently slower to access than RAM and often becomes unusable {{after a few}} million write cycles, which generally makes it unsuitable for RAM applications.|$|R
50|$|Softeq’s Minsk {{office has}} been the locus of NAND <b>flash</b> <b>memory</b> {{research}} for SanDisk. SanDisk’s instrument for modeling sub-20 nm NAND <b>flash</b> <b>memory</b> endurance behavior, developed in collaboration with Softeq, was showcased at the <b>Flash</b> <b>Memory</b> Summit 2013 in Santa Clara, California.|$|R
5000|$|... 1024 MB of SLC NAND <b>flash</b> <b>memory</b> (in 2006 the {{specifications}} called for 512 MB of <b>flash</b> <b>memory)</b> ...|$|R
50|$|<b>Flash</b> <b>memory</b> is a later form of EEPROM. In the industry, {{there is}} a {{convention}} to reserve the term EEPROM to byte-wise erasable memories compared to block-wise erasable <b>flash</b> <b>memories.</b> EEPROM occupies more die area than <b>flash</b> <b>memory</b> for the same capacity, because each cell usually needs a read, a write, and an erase transistor, while <b>flash</b> <b>memory</b> erase circuits are shared by large blocks of cells (often 512×8).|$|R
40|$|Abstract—In this paper, {{we present}} an {{efficient}} flash file system for <b>flash</b> <b>memory</b> storage. <b>Flash</b> <b>memory,</b> especially NAND <b>flash</b> <b>memory,</b> {{has become a}} major method for data storage. Currently, a block level translation interface is required between an existing file system and <b>flash</b> <b>memory</b> chips due to its physical characteristics. However, the approach of existing file systems on top of the emulating block interface has many restrictions and is, thus, inefficient because existing file systems are designed for disk-based storage systems. The flash file system proposed in this paper is designed for NAND <b>flash</b> <b>memory</b> storage while considering the existing file system characteristics. Our target performance metrics are the system booting time and garbage collection overheads, which are important issues in <b>flash</b> <b>memory.</b> In our experiments, the proposed flash file system outperformed other flash file systems both in booting time and garbage collection overheads. Index Terms—Flash file system, NAND <b>flash</b> <b>memory,</b> <b>flash</b> translation layer, scan, garbage collection. ...|$|R
40|$|Abstract NAND <b>flash</b> <b>memory</b> {{is one of}} {{the most}} aggressively scaled {{technologies}} among electronic devices re-cently. The massive increase in the capacity makes <b>flash</b> <b>memory</b> possible for enterprise applications, such as the database system. However, the characteristic of erase-before-write makes <b>flash</b> <b>memory</b> very challenging for the database management. A non-in-place update technique may be exploited to overcome the erase-before-write problem. In this paper, we provide a careful performance study of utilizing the non-in-place update technique for transactional database applications running on the <b>flash</b> <b>memory.</b> We deliberately design the experiment of the en-terprise database system on <b>flash</b> <b>memory,</b> with a careful study on the performance gain, and reveals some insights into the enterprise applications built on the <b>flash</b> <b>memory.</b> In particular, we carefully tune the system to gain the superiority to the existing ones. We describe experiments in detail showing the benefits of utilizing non-in-place update on <b>flash</b> <b>memory...</b>|$|R
40|$|<b>Flash</b> <b>memory</b> is {{suitable}} for embedded devices because it offers small, non-volatile, impact-resistant and low power consumption. However, in <b>flash</b> <b>memory,</b> the speeds of the read, write, and erase operations are different. In addition, <b>flash</b> <b>memory</b> features hardware characteristics including erase-before-write. Therefore, a flash translation layer (FTL) is required to efficiently perform operations to the <b>flash</b> <b>memory.</b> FTL allows the file system to consider the <b>flash</b> <b>memory</b> as a block device, and the existing file system can be used without any additional modifications. Most databases use the disk-aware cost model to perform query optimization. If the storage device for the database is replaced by <b>flash</b> <b>memory,</b> the cost model for the database query optimization must be changed to the flash-aware cost model. In this study, we propose a cost model for <b>flash</b> <b>memory,</b> and we compare {{the differences between the}} flash-aware and disk-aware cost models...|$|R
40|$|This paper {{describes}} a <b>Flash</b> <b>Memory</b> Server (FMS) for personal communication devices and embedded home information systems, such as set-top boxes and internet phones. <b>Flash</b> <b>memory</b> is small, lightweight, shock-resistant, nonvolatile, and requires little power. Writing to <b>flash</b> <b>memory</b> segments requires erasing the segment in advance. However, erase operations are slow and power-wasting that usually decrease system performance. The number of erase cycle is also limited. To {{reduce the number}} of erase operations needed and to evenly wear <b>flash</b> <b>memory,</b> a new <b>flash</b> <b>memory</b> management scheme has been designed. A new cleaning policy is also proposed to reduce cleaning overhead. Performance evaluations show that erase operations can be reduced by 55 %. 1. INTRODUCTION <b>Flash</b> <b>memory</b> is small, lightweight, shock resistant, nonvolatile, and requires little power [7, 8, 12]. <b>Flash</b> <b>memory</b> shows promise for use in storage devices for consumer electronics, embedded systems, and mobile computers. Examples ar [...] ...|$|R
40|$|The {{multi-level}} cell (MLC) NAND <b>flash</b> <b>memory</b> technology enables {{multiple bits}} of information to be stored on a single cell, thus {{making it possible to}} increase the density of the memory without increasing the die size. For most MLC <b>flash</b> <b>memories,</b> each cell can be programmed as a single-level cell or a multi-level cell during runtime. Therefore, it has a potential to achieve both the high performance of SLC <b>flash</b> <b>memory</b> and the high capacity of MLC <b>flash</b> <b>memory.</b> In this paper, we present a flexible flash file system, called FlexFS, which takes advantage of the dynamic reconfiguration facility of MLC <b>flash</b> <b>memory.</b> FlexFS divides the <b>flash</b> <b>memory</b> medium into SLC and MLC regions, and dynamically changes the size of each region to meet the changing requirements of applications. We exploit patterns of storage usage to minimize the overhead of reorganizing two different regions. We also propose a novel wear management scheme which mitigates the effect of the extra writes required by FlexFS on the lifetime of <b>flash</b> <b>memory.</b> Our implementation of FlexFS in the Linux 2. 6 kernel shows that it can achieve a performance comparable to SLC <b>flash</b> <b>memory</b> while keeping the capacity of MLC <b>flash</b> <b>memory</b> for both simulated and real mobile workloads. ...|$|R
40|$|The {{demand and}} the supply are {{increasing}} sharply {{in accordance with}} the growth of the Memory Semiconductor Industry. The <b>Flash</b> <b>Memory</b> above all is being utilized substantially in the Industry of smart phone, the tablet PC and the System on Chip (SoC). The <b>Flash</b> <b>Memory</b> is divided into the NOR-type <b>Flash</b> <b>Memory</b> and the NAND-type <b>Flash</b> <b>Memory.</b> A lot of study such as the Built-In Self Test (BIST), the Built-In Self Repair (BISR) and the Built-In Redundancy Analysis (BIRA), etc. has been progressed in the NOR-type fash Memory, the study for the Built-In Self Test of the NAND-type <b>Flash</b> <b>Memory</b> has not been progressed. At present, the pattern test of the NAND-type <b>Flash</b> <b>Memory</b> is being carried out using the outside test equipment of high price. The NAND-type <b>Flash</b> <b>Memory</b> is being depended on the outside equipment as there is no Built-In Self Test since the erasure of block unit, the reading and writing of page unit are possible in the NAND-type <b>Flash</b> <b>Memory.</b> The Built-In Self Test equipped with 2 kinds of finite state machine based structure is proposed, so as to carry out the pattern test without the outside pattern test equipment from the NAND-type <b>Flash</b> <b>Memory</b> which carried out the test dependant on the outside pattern test equipment of hig...|$|R
40|$|Recently, <b>flash</b> <b>memories</b> {{have become}} a {{competitive}} solution for mass storage. The <b>flash</b> <b>memories</b> have rather different properties compared with the rotary hard drives. That is, the writing of <b>flash</b> <b>memories</b> is constrained, and <b>flash</b> <b>memories</b> can endure only limited numbers of erases. Therefore, the design goals for the <b>flash</b> <b>memory</b> systems are quite different from these for other memory systems. In this paper, we consider the problem of coding efficiency. We define the "coding-efficiency" {{as the amount of}} information that one <b>flash</b> <b>memory</b> cell can be used to record per cost. Because each <b>flash</b> <b>memory</b> cell can endure a roughly fixed number of erases, the cost of data recording can be well-defined. We define "payload" as the amount of information that one <b>flash</b> <b>memory</b> cell can represent at a particular moment. By using information-theoretic arguments, we prove a coding theorem for achievable coding rates. We prove an upper and lower bound for coding efficiency. We show in this paper that there exists a fundamental trade-off between "payload" and "coding efficiency". The results in this paper may provide useful insights on the design of future <b>flash</b> <b>memory</b> systems. Comment: accepted for publication in the Proceeding of the 35 th IEEE Sarnoff Symposium, Newark, New Jersey, May 21 - 22, 201...|$|R
25|$|The {{floating}} gate may be conductive (typically polysilicon in most kinds of <b>flash</b> <b>memory)</b> or non-conductive (as in SONOS <b>flash</b> <b>memory).</b>|$|R
5000|$|January 2009: HF S10 (SDHC, {{built-in}} 32 GB <b>flash</b> <b>memory),</b> HF S100 (SDHC), HF20 (SDHC, built-in 32 GB <b>flash</b> <b>memory),</b> HF200 (SDHC) ...|$|R
5000|$|Vroegh v. Eastman Kodak Company, et al. is a {{class action}} {{complaint}} that alleges that the defendants, [...] "in marketing, advertising and/or packaging their <b>Flash</b> <b>Memory</b> Cards and <b>Flash</b> <b>Memory</b> Drives, Defendants misrepresent {{the size of the}} memory storage contained in the <b>Flash</b> <b>Memory</b> Cards and <b>Flash</b> <b>Memory</b> Drives." [...] The complaint accuses the defendants of [...] "false advertising, unfair business practices, breach of contract, fraud, deceit and/or misrepresentation, and violation of the California Consumers Legal Remedy Act".|$|R
40|$|Abstract—NAND <b>flash</b> <b>memory</b> is fast {{replacing}} traditional {{magnetic storage}} media due to its better performance and low power requirements. However the endurance of <b>flash</b> <b>memory</b> is still a critical issue in using it for large scale enterprise applications. Rethinking the basic design of NAND <b>flash</b> <b>memory</b> is essential to realize its maximum potential in large scale storage. NAND <b>flash</b> <b>memory</b> is organized as blocks and blocks in turn have pages. A block can be erased reliably only for {{a limited number of}} times and frequent block erase operations to a few blocks reduce the lifetime of the <b>flash</b> <b>memory.</b> Wear leveling helps to prevent the early wear out of blocks in the <b>flash</b> <b>memory.</b> In order to achieve efficient wear leveling, data is moved around throughout the <b>flash</b> <b>memory.</b> The existing wear leveling algorithms do not scale for large scale NAND flash based SSDs. In this paper we propose a static wear leveling algorithm, named as Rejuvenator, for large scale NAND <b>flash</b> <b>memory.</b> Rejuvenator is adaptive to the changes in workloads and minimizes the cost of expensive data migrations. Our evaluation of Rejuvenator is based on detailed simulations with large scale enterprise workloads and synthetic micro benchmarks. I...|$|R
40|$|Abstract—We {{present a}} method to abstract, formalize, and verify {{industrial}} <b>flash</b> <b>memory</b> implementations. <b>Flash</b> <b>memories</b> contain specialized transistors, e. g., floating gate and split gate devices, which preclude the use of traditional switch-level abstractions for their verification. We circumvent this problem through behavioral abstractions, which allow formalization of the behaviors of the design as interacting state machines. Behavioral abstractions are agnostic to transistor type, making them suitable for formalizing <b>flash</b> <b>memories.</b> We have verified industrial <b>flash</b> <b>memory</b> implementations based on both floating gate and split gate technologies. Our work provides the first formal functional verification results for industrial <b>flash</b> <b>memories.</b> Keywords—equivalence checking, formal analysis, simulation, spice, theorem proving I...|$|R
50|$|All J-series cameras {{have the}} {{standard}} CCD sensors. The first few models, the J10, J12 and the J50 use the xD-Picture Card <b>flash</b> <b>memory</b> format, whilst the later models use SD/SDHC <b>flash</b> <b>memory</b> format, {{these include the}} J100, J110W, J120 and the J150W. The J15fd uses both <b>flash</b> <b>memory</b> formats.|$|R
50|$|<b>Flash</b> <b>memory</b> stores {{information}} in {{an array of}} memory cells made from floating-gate transistors. <b>Flash</b> <b>memory</b> utilizes either NOR logic or NAND logic.|$|R
40|$|For {{the past}} few years, <b>flash</b> <b>memory</b> has been widely used because of its {{prominent}} advantages such as fast access speed, nonvolatility, high reliability, and low power consumption. However, <b>flash</b> <b>memory</b> still has several drawbacks {{that need to be}} overcome, e. g., the erase-before-write characteristic and a limited life cycle. Among these drawbacks, the erase-before-write characteristic causes the B-tree implementation on <b>flash</b> <b>memory</b> to be inefficient because it generates many erase operations. This study introduces a novel B-tree index structure using a write pattern converter (WPCB-tree) for <b>flash</b> <b>memory.</b> A WPCB-tree can minimize the risk of data loss and can improve the performance of the B-tree on <b>flash</b> <b>memory.</b> This WPCB-tree uses some blocks of <b>flash</b> <b>memory</b> as a buffer that temporarily stores all updated nodes. When the buffer is full, a buffer block is selected by a greedy algorithm, then the node pages in the block are converted into a sequential write pattern, and finally they are written into <b>flash</b> <b>memory.</b> In addition, in the case that all key values of a leaf node are continuously inserted, the WPCB-tree does not split the leaf node. As a result, this mechanism helps the WPCB-tree reduce the number of write operations on the <b>flash</b> <b>memory.</b> The experimental results show that the proposed B-tree variant on <b>flash</b> <b>memory</b> yields a better performance than that of other existing variants of the B-tree...|$|R
40|$|This thesis {{presents}} digital {{design and}} implementation of a controller module for serial <b>flash</b> <b>memories.</b> Firstly, the platform including the serial <b>flash</b> <b>memory</b> controller, <b>flash</b> <b>memories</b> and SPI (Serial Peripheral Interface) protocol have been investigated to solve the current problems related with controlling of serial <b>flash</b> <b>memories.</b> Then, in the implementation part of the thesis, the Serial <b>Flash</b> <b>Memory</b> Controller module has been designed by using VHDL (VHSIC Hardware Description Language-VHDL) and synthesized in CMOS 0. 35 Mm technology. Functional and gate-level simulations have been done with Cadence simulator. Lastly the final gate level netlist has been placed and routed with Cadence Silicon Ensemble. A {{great deal of attention}} has been given to design a generic controller that needs simple software and minimum processor access cycle. It is programmed from the processor for different operations of serial <b>flash</b> <b>memories.</b> The structure of the frame, control data and timings are controlled by hardware according to the programmed operation. In addition to this, our Serial <b>Flash</b> <b>Memory</b> Controller module can be used with different <b>flash</b> <b>memories.</b> This is very important property for reusability of the module. The Serial <b>Flash</b> <b>Memory</b> Controller module is capable to work up to 20 MHz serial communication speed and it can be integrated to processor platforms that have AMBA (Advanced Microcontroller Bus Architecture) APB (Advanced Peripheral Bus) interface...|$|R
40|$|Recent {{years have}} {{witnessed}} {{a proliferation of}} <b>flash</b> <b>memories</b> as an emerging storage technology with wide applications in many important areas. Like magnetic recording and optimal recording, <b>flash</b> <b>memories</b> have their own distinct properties and usage environment, which introduce very interesting new challenges for data storage. They include accurate programming without overshooting, error correction, reliable writing data to <b>flash</b> <b>memories</b> under low-voltages and file recovery for <b>flash</b> <b>memories.</b> Solutions to these problems can significantly improve the longevity and performance of the storage systems based on <b>flash</b> <b>memories.</b> In this work, we explore several new data representation techniques for efficient and reliable data storage in <b>flash</b> <b>memories.</b> First, we present a new data representation scheme?rank modulation with multiplicity ?to eliminate the overshooting and charge leakage problems for <b>flash</b> <b>memories.</b> Next, we study the Half-Wits ? stochastic behavior of writing data to embedded <b>flash</b> <b>memories</b> at voltages lower than recommended by a microcontroller?s specifications?and propose three software- only algorithms that enable reliable storage at low voltages without modifying hard- ware, which can reduce energy consumption by 30 %. Then, we address the file erasures recovery problem in <b>flash</b> <b>memories.</b> Instead of only using traditional error- correcting codes, we design a new content-assisted decoder (CAD) to recover text files. The new CAD can be combined with the existing error-correcting codes and the experiment results show CAD outperforms the traditional error-correcting codes...|$|R
50|$|M-Systems did {{not produce}} the <b>Flash</b> <b>memory</b> used in their devices. Instead they worked closely with other <b>flash</b> <b>memory</b> {{manufacturers}} to use multiple suppliers of memory. In July 1996, Samsung and M-Systems announced a cooperative agreement between them that would combine the Samsung NAND <b>flash</b> <b>memory</b> technology with the M-Systems' TrueFFS controller.|$|R
40|$|Abstract—The {{traditional}} {{virtual memory}} {{system is designed}} for decades assuming a magnetic disk as the secondary storage. Recently, <b>flash</b> <b>memory</b> becomes a popular storage alternative for many portable devices with the continuing improvements on its capacity, reliability and much lower power consumption than mechanical hard drives. The characteristics of <b>flash</b> <b>memory</b> are quite different from a magnetic disk. Therefore, in this paper, we revisit virtual memory system design considering limitations imposed by <b>flash</b> <b>memory.</b> In particular, {{we focus on the}} energy efficient aspect since power is the first-order design consideration for embedded systems. Due to the write-once feature of <b>flash</b> <b>memory,</b> frequent writes incur frequent garbage collection thereby introducing significant energy overhead. Therefore, in this paper, we propose three methods to reduce writes to <b>flash</b> <b>memory.</b> The HotCache scheme adds an SRAM cache to buffer frequent writes. The subpaging technique partitions a page into subunits, and only dirty subpages are written to <b>flash</b> <b>memory.</b> The duplication-aware garbage collection method exploits data redundancy between the main <b>memory</b> and <b>flash</b> <b>memory</b> to reduce writes incurred by garbage collection. We also identify one type of data locality that is inherent in accesses to <b>flash</b> <b>memory</b> in the virtual memory system, intrapage locality. Intrapage locality needs to be carefully maintained for data allocation in <b>flash</b> <b>memory.</b> Destroying intrapage locality causes noticeable increases in energy consumption. Experimental results show that the average energy reduction of combined subpaging, HotCache, and duplication-aware garbage collection techniques is 42. 2 %. Index Terms—Embedded systems, energy-efficient, NAND <b>flash</b> <b>memory,</b> virtual memory...|$|R
