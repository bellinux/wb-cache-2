0|3352|Public
50|$|<b>File</b> <b>Transfer</b> Consulting has {{partnered with}} Flux {{to provide a}} {{resource}} for designing managed <b>file</b> <b>transfer</b> systems. Flux {{is one of the}} tools that <b>File</b> <b>Transfer</b> Consulting uses to help meet its clients' managed <b>file</b> <b>transfer</b> needs. <b>File</b> <b>Transfer</b> Consulting's staff has developed managed <b>file</b> <b>transfer</b> tools that are used by more than 1,200 enterprises worldwide.|$|R
50|$|TeraCopy is a {{freemium}} <b>file</b> <b>transfer</b> utility {{designed as}} an alternative for the built-in Windows Explorer <b>file</b> <b>transfer</b> feature. Its focus is data integrity, <b>file</b> <b>transfer</b> reliability {{and the ability to}} pause or resume <b>file</b> <b>transfers.</b>|$|R
50|$|EFTP (various {{expansions}} of {{this have}} been given, including Easy <b>File</b> <b>Transfer</b> Protocol, Ether <b>File</b> <b>Transfer</b> Protocol, and Experimental <b>File</b> <b>Transfer</b> Protocol) {{was a very}} simple <b>file</b> <b>transfer</b> protocol developed {{as part of the}} PUP protocol suite at Xerox PARC in the late 1970s. It was part of the inspiration for the Trivial <b>File</b> <b>Transfer</b> Protocol (TFTP) in the TCP/IP suite.|$|R
50|$|At {{the outset}} of the IETF Secure Shell <b>File</b> <b>Transfer</b> project, the Secsh group stated that its {{objective}} of SSH <b>File</b> <b>Transfer</b> Protocol was to provide a secure <b>file</b> <b>transfer</b> functionality over any reliable data stream, and to be the standard <b>file</b> <b>transfer</b> protocol for use with the SSH-2 protocol.|$|R
5000|$|<b>File</b> transfer: <b>File</b> <b>Transfer</b> Protocol (FTP), Trivial <b>File</b> <b>Transfer</b> Protocol (TFTP) ...|$|R
40|$|Abstract. Many {{of the key}} {{features}} of <b>file</b> <b>transfer</b> mechanisms like reliable <b>file</b> <b>transferring</b> and parallel transferring are developed {{as part of the}} service. It makes very hard to re-use the same code for the different systems. We are trying to overcome this disadvantage by decoupling useful features of <b>file</b> <b>transfer</b> mechanisms from the implementation of the service and protocol, and instead placed into the messaging substrate. We may thus treat <b>file</b> <b>transfer</b> operations as a specific usage case for a more general messaging environment. This will allow us to provide <b>file</b> <b>transfer</b> quality of service to other <b>file</b> <b>transfer</b> tools that does not have same features. ...|$|R
50|$|Harbor <b>File</b> <b>Transfer</b> (HFT) is a {{high-speed}} managed <b>file</b> <b>transfer</b> solution for intra-enterprise data movement.|$|R
5000|$|Automate <b>file</b> <b>transfer</b> {{processes}} between {{trading partners}} and exchanges including detection and handling of failed <b>file</b> <b>transfers.</b>|$|R
5000|$|<b>File</b> <b>transfer</b> - {{lets you}} {{manipulate}} remote computers files and folders. Supports two-way <b>file</b> <b>transfer</b> with an auto-resume feature.|$|R
50|$|<b>File</b> <b>transfer</b> is the {{transmission}} of a computer file through a communication channel from one computer system to another. Typically, <b>file</b> <b>transfer</b> is mediated by a communications protocol. In the history of computing, {{a large number of}} <b>file</b> <b>transfer</b> protocols have been designed for different contexts.|$|R
25|$|Goodput or data {{transfer}} rate refers to the achieved average net bit rate that is delivered to the application layer, exclusive of all protocol overhead, data packets retransmissions, etc. For example, {{in the case of}} <b>file</b> <b>transfer,</b> the goodput corresponds to the achieved <b>file</b> <b>transfer</b> rate. The <b>file</b> <b>transfer</b> rate in bit/s can be calculated as the file size (in bytes) divided by the <b>file</b> <b>transfer</b> time (in seconds) and multiplied by eight.|$|R
50|$|By 1973, the <b>File</b> <b>Transfer</b> Protocol (FTP) {{specification}} {{had been}} defined (RFC 354) and implemented, enabling <b>file</b> <b>transfers</b> over the ARPANET.|$|R
5000|$|In computing, the SSH <b>File</b> <b>Transfer</b> Protocol (also Secure <b>File</b> <b>Transfer</b> Protocol, or SFTP) is {{a network}} {{protocol}} that provides <b>file</b> access, <b>file</b> <b>transfer,</b> and <b>file</b> management over any reliable data stream. It {{was designed by}} the Internet Engineering Task Force (IETF) {{as an extension of}} the Secure Shell protocol (SSH) version 2.0 to provide secure <b>file</b> <b>transfer</b> capabilities. The IETF Internet Draft states that, even though this protocol is described in the context of the SSH-2 protocol, it could be used in a number of different applications, such as secure <b>file</b> <b>transfer</b> over Transport Layer Security (TLS) and transfer of management information in VPN applications.|$|R
50|$|Crax Commander {{improves}} productivity {{by offering}} user configurable keyboard shortcuts, built-in text editor with sync coloring, full user interface customizing including fonts and colors, archive support, and built in <b>File</b> <b>Transfer</b> Protocol (FTP), Server Message Block (SMB), Apple Filing Protocol (AFP), SSH <b>File</b> <b>Transfer</b> Protocol (SSH), and SSH <b>File</b> <b>Transfer</b> Protocol (sFTP).|$|R
40|$|International audienceIn {{this article}} a three staged <b>file</b> <b>transfer</b> {{approach}} for the Grid is proposed. <b>File</b> <b>transfer</b> in the Grid {{can take place}} at three stages: deployment, user application execution, and retrieval (post-execution). Each stage has it's own environmental requirements, and therefore different techniques must be applied. The contributions {{presented in this article}} can be grouped in two. First, the integration of heterogeneous resource acquisition and <b>file</b> <b>transfer</b> protocols. This allows on-the-fly deployment and retrieval of files. Secondly, an asynchronous <b>file</b> <b>transfer</b> mechanism based on active objects, wait-by-necessity, and automatic continuation. The proposed <b>file</b> <b>transfer</b> model has been implemented using the ProActive middleware. ProActive provides, among others, a Grid infrastructure abstraction using deployment descriptors, and a programming model based on active objects with transparent futures. Finally, the proposed <b>file</b> <b>transfer</b> model is benchmarked and validated with a real case study: BLAST...|$|R
50|$|Shared {{file access}} {{should not be}} {{confused}} with <b>file</b> <b>transfer</b> using the <b>file</b> <b>transfer</b> protocol (FTP), or the Bluetooth IRDA OBject EXchange (OBEX) protocol. Shared access involves automatic synchronization of folder information whenever a folder is changed on the server, and may provide server side file searching, while <b>file</b> <b>transfer</b> is a more rudimentary service.|$|R
30|$|Small- and medium-size <b>file</b> <b>transfers</b> are {{fundamental}} to the infotainment applications in highway vehicular networks. This however is challenged by the dynamic connections among vehicles. This paper tackles the issue by developing a fuzzy logic-based collaborative forward scheme for integrated <b>file</b> <b>transfer</b> in VANET. In specific, a cluster of vehicles, based on the evaluation of transmission capability, are selected using a fuzzy logic-based scheme. Using both analysis and simulations, we have shown that our proposal outperforms the state-of-the-art <b>file</b> <b>transfer</b> scheme {{in terms of the}} maximum <b>file</b> <b>transfer</b> volume. The detailed experimental results of FL-CFT in terms of average connection time, average throughput, average transmission capability, maximum <b>file</b> <b>transfer</b> volume, and cluster size have been presented.|$|R
40|$|International audienceWe {{propose a}} <b>file</b> <b>transfer</b> {{approach}} for the Grid. We have identified that <b>file</b> <b>transfer</b> in the Grid {{can take place}} at three different stages: deployment, user application execution, and retrieval (postexecution). Each stage has different environmental requirements, and therefore we apply different techniques. Our contribution comes from: (i) integrating heterogeneous Grid resource acquisition protocols and <b>file</b> <b>transfer</b> protocols including deployment and retrieval, and (ii) providing an asynchronous <b>file</b> <b>transfer</b> mechanism based on active objects, wait-by-necessity, and automatic continuation. We validate and benchmark the proposed <b>file</b> <b>transfer</b> model using ProActive, a Grid programming middleware. ProActive provides, among others, a Grid infrastructure abstraction using deployment descriptors, and an active object model using transparent futures...|$|R
40|$|Workloads {{created from}} typical {{meteorology}} forecast workflows in LEAD are bursty in nature. As {{the number of}} simultaneous workflows increases, the burstiness aggravates and we start to encounter a problem in <b>file</b> <b>transfer</b> failure that can cause the <b>file</b> <b>transfer</b> servers to crash. Our solution addresses the problem by smoothing bursts in <b>file</b> <b>transfer</b> workloads and control for limited resources at the <b>file</b> <b>transfer</b> servers. With this new solution in place, we achieved 0 % failure rate whereas {{it used to be}} as high as 20 %. ...|$|R
50|$|Asiavision has {{launched}} a <b>file</b> <b>transfer</b> system for exchanging news items online. It operates alongside the existing satellite-based news exchange. Members upload and download news stories by logging into the Asiavision <b>file</b> <b>transfer</b> website. Members underwent <b>file</b> <b>transfer</b> training {{at a meeting of}} Asiavision news and technical coordinators in New Delhi in November 2009, hosted by DDI.|$|R
50|$|Connect:Direct {{falls under}} a {{category}} of <b>file</b> <b>transfer</b> products called managed <b>file</b> <b>transfer</b> ("MFT"), which are used by businesses and government for transfer of critical electronic data.|$|R
5000|$|Android <b>File</b> <b>Transfer</b> is {{a simple}} MTP client. However, Android <b>File</b> <b>Transfer</b> hasn’t been updated {{for several years and}} the program is {{labelled}} Abandonware by Android Central.|$|R
50|$|As {{more and}} more {{companies}} decide that FTP is inappropriate for secure <b>file</b> <b>transfer,</b> Managed <b>File</b> <b>Transfer</b> is beginning {{to be perceived as}} a necessity, not an option.|$|R
40|$|AbstractThe one-to-multiple <b>file</b> <b>transfer</b> {{problem has}} not been solved under the Linux system. In this paper, we take socket {{programming}} to accomplish Client/Server model based <b>file</b> <b>transfer</b> system and develop efficient software which not only support multiple clients and <b>files</b> <b>transferring</b> simultaneously, but also support transmission resuming from breakpoint. Our research focuses on solving the multi-thread concurrency, transmission resuming from breakpoint, thread pool, buffer queue {{and other aspects of}} problem. Our work is the basic foundation of FTP servers, <b>file</b> <b>transfer</b> software in local area network and large-scale examination system, etc...|$|R
50|$|MassTransit Enterprise, a Managed <b>File</b> <b>Transfer</b> server from GroupLogic, Inc, (Arlington, Virginia, USA), runs on Windows and Macintosh {{operating}} systems {{and provides a}} range of managed <b>file</b> <b>transfer</b> functions.|$|R
50|$|CFT (Cross <b>File</b> <b>Transfer)</b> (product name: Axway Transfer CFT) is {{a secure}} {{computer}} <b>file</b> <b>transfer</b> program and protocol from Axway Inc, used extensively in France and banking industries in Europe.|$|R
50|$|The stock 32K RAM {{could hold}} up to 10 typewritten pages. The main methods of <b>file</b> <b>transfer</b> were via the modem or the RS-232C port and a <b>file</b> <b>transfer</b> program.|$|R
50|$|Pidgin {{supports}} <b>file</b> <b>transfers</b> {{for many}} protocols. It lacks some protocol-specific features like the folder sharing available from Yahoo. Direct, peer-to-peer <b>file</b> <b>transfers</b> are supported over protocols such as XMPP and MSN.|$|R
5000|$|Unlike AS1 or AS3 <b>file</b> <b>transfers,</b> AS2 <b>file</b> <b>transfers</b> offer several [...] "MDN return" [...] options {{instead of}} the {{traditional}} options of [...] "yes" [...] or [...] "no". Specifically, the choices are: ...|$|R
40|$|<b>File</b> <b>Transfer</b> Protocol (FTP) is a {{protocol}} which used for <b>file</b> <b>transfer</b> operation via port 21. Various tools {{are being used}} for <b>file</b> <b>transfer</b> management. These tools may be either client or web based. In this work a web based voice controlled ftp tool (Wb-FTP) is proposed. And have measured performance analysis of this tool and compared with other ftp tools. This tool has been designed with Asp. NET and C # language. The developed software is robust enough to cope with all <b>file</b> <b>transfer</b> operations. This study shows that voice control is reliable and preferable for essential ftp operations...|$|R
2500|$|Pidgin {{supports}} <b>file</b> <b>transfers</b> {{for many}} protocols. It lacks some protocol-specific features like the folder sharing available from Yahoo. [...] Direct, peer-to-peer <b>file</b> <b>transfers</b> are supported over protocols such as XMPP and MSN.|$|R
5000|$|Like {{any other}} AS <b>file</b> <b>transfer,</b> AS1 <b>file</b> <b>transfers</b> {{typically}} require {{both sides of}} the exchange to trade X.509 certificates and specific [...] "trading partner" [...] names before any transfers can take place.|$|R
40|$|In this research, {{we propose}} an architecturalsolution to {{implement}} <b>file</b> <b>transfer</b> service (FTP) in IPv 6 environment network. IPv 6 {{is considered to}} be the nextgenerationInternet protocol. Thus, this study is toanalyze the size of <b>files</b> <b>transfer</b> performance and tomeasure Quality of Service (QoS) delivered by IPv 6 usingbest effort approach in comparison to IPv 4. This studyprimarily focuses on <b>file</b> <b>transfer</b> speed quality of FTP. Inthe experiment, both host clients and routers utilize thesame technical specification. In the same study also,network management system (NMS) is used to monitorand to capture the performance of <b>file</b> <b>transfer</b> in IPv 6 and IPv 4 environment. Based on the finding result, itshows that there is a slight but significant difference infile transfer performance between dual stack tunnellingIPv 4 and IPv 6 protocol. Small size <b>file</b> <b>transfer</b> will resultin lower and same delay performance outcome for bothIPv 4 and IPv 6, while large size <b>file</b> <b>transfer</b> over IPv 6 will result in higher delay performance as compared toIPv 4. In short, the significant result of IPv 6 delay isslightly higher than IPv 4. Hence, the quality of FTPmight be decreased if dual stack tunnelling isimplemented in IPv 6 environment. Nevertheless, LinkEfficiency and compression technique are able to lowerthe delay performance on <b>file</b> <b>transfer</b> over IPv 6 environment...|$|R
40|$|In {{looking at}} the XMPP {{protocol}} {{as an alternative to}} the ordinary way of <b>transferring</b> <b>files</b> within a health network setting, namely e-mail, performance and security are important factors to consider. For security reasons we preferred to use in-band over out-of-band <b>file</b> <b>transfer.</b> The tradeoff is that this method puts a higher strain on the XMPP server and is significantly slower than its counterpart, out-of-band. In researching a specific XMPP implementation, the Openfire XMPP server, and looking into how it deals with in-band <b>file</b> <b>transfers,</b> we have found some ways to increase in-band <b>file</b> <b>transfer</b> performance, but not in the originally intended way, which would be through improvements in the Openfire source code concerning in-band <b>file</b> <b>transfers...</b>|$|R
40|$|Abstract — In this paper, {{we discuss}} {{reliable}} and secure <b>file</b> <b>transfer</b> middleware called NaradaBrokering. It is our goal {{to show that}} reliability features can be decoupled from {{the implementation of the}} service and protocol, and instead placed into the messaging substrate. This will allow us to provide <b>file</b> <b>transfer</b> quality of service comparable to GridFTP in other <b>file</b> <b>transfer</b> tools (such as normal FTP, SCP, HTTP uploads, and similar mechanisms) ...|$|R
40|$|Effective <b>file</b> <b>transfer</b> between {{vehicles}} {{is fundamental}} to many emerging vehicular infotainment applications in the highway Vehicular Ad Hoc Networks (VANETs), such as content distribution and social networking. However, due to fast mobility, the connection between vehicles tends to be short-lived and lossy, which makes intact <b>file</b> <b>transfer</b> extremely challenging. To tackle this problem, we presents a novel Cluster-based <b>File</b> <b>Transfer</b> (CFT) scheme for highway VANETs in this paper. With CFT, when a vehicle requests a file, the transmission capacity between the resource vehicle and the destination vehicle is evaluated. If the requested file can be successfully transferred over the direct Vehicular-to-Vehicular (V 2 V) connection, the <b>file</b> <b>transfer</b> will {{be completed by the}} resource and the destination themselves. Otherwise, a cluster will be formed to help the <b>file</b> <b>transfer.</b> As a fully-distributed scheme that relies on the collaboration of cluster members, CFT does not require any assistance from roadside units or access points. Our experimental results indicate that CFT outperforms the existing <b>file</b> <b>transfer</b> schemes for highway VANETs. Comment: 7 pages, 14 figures, IEEE International Conference on Communication...|$|R
