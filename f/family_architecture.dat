65|227|Public
25|$|Rogers's nephew, James Gamble Rogers II (1901–1990) {{was also}} an architect, who {{designed}} homes in Winter Park, Florida for the Rogers <b>family</b> <b>architecture</b> firm Rogers, Lovelock and Fritz, where Rogers II's son John (Jack) Rogers is a principal architect.|$|E
50|$|The {{corporation}} has {{responsibility for}} driving for interoperability on Itanium platforms. To do this they support a specification, also called DIG64, that helps member companies develop {{better and more}} compelling products on Itanium processor <b>family</b> <b>architecture</b> systems.|$|E
50|$|Rogers's nephew, James Gamble Rogers II (1901-1990) {{was also}} an architect, who {{designed}} homes in Winter Park, Florida for the Rogers <b>family</b> <b>architecture</b> firm Rogers, Lovelock and Fritz, where Rogers II's son John (Jack) Rogers is a principal architect.|$|E
40|$|Product <b>family</b> <b>architectures</b> {{need to be}} {{captured}} much like "regular " software architectures. Unfortunately, representations for product <b>family</b> <b>architectures</b> are scarce and a deep understanding {{of all of the}} necessary features of such representations is still lacking. In this paper, we introduce an extensible XML-based representation that is suitable as a basis for rapidly defining new representations for product <b>family</b> <b>architectures.</b> We describe some of the details of this representation and present how Koala and Mae, two early representations for product <b>family</b> <b>architectures,</b> can be mapped onto our XML-based representation with relatively little effort. ...|$|R
40|$|The {{strengths}} of utilizing platforms and <b>family</b> <b>architectures</b> in product development are widely recognized. We perceive platforms as the scheme by which companies consciously aim to introduce {{one or more}} families of products aiming for different market segments, while utilizing the commonalities within these families for mass-production. <b>Family</b> <b>architectures</b> ar...|$|R
5000|$|... #Caption: The Windows NT {{operating}} system <b>family's</b> <b>architecture</b> {{consists of two}} layers (user mode and kernel mode), with many different modules within both of these layers.|$|R
50|$|The NXP ColdFire is a {{microprocessor}} that {{derives from the}} Motorola 68000 <b>family</b> <b>architecture,</b> manufactured for embedded systems development by NXP Semiconductors. It was formerly manufactured by Freescale Semiconductor (formerly the semiconductor division of Motorola) which merged with NXP in 2015.|$|E
50|$|The fifth {{generation}} Espace {{was unveiled}} at the 2014 Paris Motor Show in October 2014. It abandons the large MPV design of previous generations, instead having a mid size crossover styling. The car {{is based on}} the Renault-Nissan Common Module <b>Family</b> <b>architecture</b> developed by both Renault and Nissan.|$|E
5000|$|... pSOS (Portable Software On Silicon) is a {{real time}} {{operating}} system (RTOS), created in about 1982 by Alfred Chao, and developed/marketed {{for the first part}} of its life by his company Software Components Group (SCG). In the 1980s pSOS rapidly became the RTOS of choice for all embedded systems based on the Motorola 68000 <b>family</b> <b>architecture,</b> because it was written in 68000 assembler and was highly optimised from the start. It was also modularised, with early support for OS-aware debugging, plug-in device drivers, TCP/IP stacks, language libraries and disk subsystems. Later came source-level debugging, multi-processor support and further networking extensions.|$|E
5000|$|... #Caption: A large {{painting}} of Vonnegut on Massachusetts Avenue, Indianapolis, {{blocks away from}} the Kurt Vonnegut Museum and the Rathskellar, which was designed by his <b>family's</b> <b>architecture</b> firm.|$|R
40|$|This paper {{summarizes}} {{the work and}} achievements of the CAFÉ Task 2. 3 "Design for Quality" 1. A number of partners collaborated {{for two years in}} the context of the European CAFÉ project to jointly research how quality can be built into product <b>family</b> <b>architectures</b> and how the quality of product <b>family</b> <b>architectures</b> can be assessed. The main achievement of the collaboration is a common general process for design for quality accompanied by a metamodel that both have been instantiated by the different partners for their respective organizational context and projects. This paper briefly introduces this general process and metamodel...|$|R
40|$|The slide set {{consists}} of the following parts: Context and Purpose: This section {{sets the stage for}} the remainder of the document. It describes, first, the Café task in which the work was done. Then, the principal goal of IESE in the task is described. Our goal is to support the creation and evaluation of product <b>family</b> <b>architectures</b> with a pattern catalogue capturing best practices for product <b>family</b> <b>architectures.</b> Introduction to Patterns: This section introduces patterns and architectural styles. The Pattern Metamodel: The pattern metamodel that is used to capture patterns in the pattern catalogue is presented. This section comprises a metamodel for patterns, as well as a schema for the documentation of patterns. Pattern Catalogue Family Specific Quality Attributes: A number of patterns that are especially helpful for product <b>family</b> <b>architectures</b> are presented. In this initial version of this deliverable, there are only a few patterns given here. Conclusions: Initial conclusions are presented. Related Café Deliverables: Related deliverables created in the context of the Café project are presented in this section...|$|R
5000|$|The <b>family</b> <b>architecture</b> {{is based}} on a single-board 6U VME RISC processor, {{currently}} the 165 MHz Hewlett Packard HP744, which has up to 512 Mbytes (1 GB in two slot units) of dual-ported, error-correcting RAM with HP-UX for non real-time operations, or HP-RT operating systems for real-time operations. There are two graphics engine options available, Esterline offers 30 million vectors/s up to 2,048 × 2,048 resolution with 12 underlay and 12 overlay planes, while the HP Graphics option provides 31 million pixels/s up to 1,280 × 1,024 resolution and eight underlay and eight overlay planes. The video frame grabber has a 30 Hz frame rate with up to two windows managed by the X Window System using the Motif GUI.|$|E
50|$|Elisabeth Böhm studied {{architecture}} at the Technical University Munich {{where she}} met Gottfried Böhm whom she married in 1948. Her husband took over the <b>family</b> <b>architecture</b> business in Cologne from his father Dominikus Böhm who died in 1955. Initially, Elisabeth initially {{spent most of her}} time at home raising their four children, only spending short periods at the office. She later returned to more intensive work, developing plans for housing projects and housing estates. Of particular note are her interior designs for the castle of Godesburg, near Bonn (1959), the town hall of Bensberg in Bergisch Gladbach (1969) and for the modern additions to Kauzenburg Castle near Bad Kreuznach in the early 1970s. She was also behind the circular foyer designed in connection with the expansion of the Stuttgart Theatre in 1984.|$|E
5000|$|Matai titles (suafa, {{literally}} [...] "formal name") are {{bestowed upon}} family members during a cultural ceremony called a saofai which occurs only after discussion and consensus within the family. The saofai is a solemn ceremony which marks the formal {{acceptance of a}} new matai by their family and village into the circle of chiefs and orators. It involves the gathering of chiefs and orators in a fale tele meeting house, the exchanging of oratory speeches, the reciting of genealogies and a kava ceremony followed by a feast provided by the new matais <b>family.</b> <b>Architecture</b> of Samoa dictates seating positions inside the meeting house during the title bestowal including the position of those making the kava being situated at the rear. Once the ceremony is completed, the new matai is henceforth called by their new name.|$|E
5000|$|Dumbarton Oaks, Georgetown, Washington, D.C.; {{estate of}} Woods—Bliss <b>Family,</b> {{landscape}} <b>architecture</b> by Beatrix Farrand ...|$|R
40|$|Design of {{gracefully}} degrading systems, where functionality {{is gradually}} reduced {{in the face}} of faults, has traditionally been a very difficult and error-prone task. General approaches to graceful degradation are typically limited to re-implementation of the system for a number of pre-designated fallback configurations. We describe an architecture-based approach to gracefully degrading systems based upon Product <b>Family</b> <b>Architectures</b> (PFAs) combined with automatic reconfiguration...|$|R
5000|$|O'Hanlon {{moved to}} Sydney in 2016 and {{returned}} to athletics after taking up a part-time position in his <b>family's</b> <b>architecture</b> business. [...] At the 2017 World Para Athletics Championships in London, England, he won the Men's 100m T38 {{in a time of}} 11.07s (-1.6).In winning gold, O’Hanlon joined Neil Fuller in becoming Australia’s leading medallist at the World Para-Athletics Championships with 11 medals.|$|R
40|$|This report {{presents}} {{an approach to}} develop product families of a high quality. This is achieved by concentrating on business goal to be reached by a software product family and the resulting non-functional requirements during {{the definition of a}} software product <b>family</b> <b>architecture</b> and by using model-driven techniques to realize and implement the product <b>family</b> <b>architecture.</b> This technique is integrated in the PuLSE product family software engineering method developed at Fraunhofer IESE. The resulting PuLSE-MDD approach is presented in this report and illustrated by a case study. This report brings together various results from the CAFÉ and Families project in the fields of modeling of non-functional requirements, product <b>family</b> <b>architecture</b> development, and model-driven techniques...|$|E
40|$|Abstract. Recent {{research}} has focused on the concept of product <b>family</b> <b>architecture.</b> We address the more specific case of legacy product families, whose life spans across several years and product generations. We illustrate the method we use to describe legacy product <b>family</b> <b>architecture</b> and manage its evolution. To describe of the <b>family</b> <b>architecture</b> we use two architecture that is instantiated in every product, and contains architecturally significant rules for adding new components to the system. And the configuration architecture, which maps the product family features into the various products, thus, allowing to model commonality and variability. The concept of a family is an abstraction that automatically generates a new layer in every product. This layer includes all the software that is common to other products in the family, and is, naturally, less prone to change than the layer constituted by software which is specific to the product. In certain domains like mobile telecommunications, when new products are added to the family, they tend to share most of the stable features that belong to legacy products. This phenomenon abstracts the issues of architectural evolution from the single products to the entire family scope. We also sketch the process we follow to maintain the documents that model the product <b>family</b> <b>architecture.</b> Our approach combines reverse and forward architecting activities, and is currently applied in Nokia Mobile Phones. Research on the issues of architectural modelling is still insufficient: we propose some hints for future work. ...|$|E
40|$|High-capacity FPGAs pose device architects with {{a variety}} of {{problems}}. The most obvious of these problems is intercon-nect capacity. Others include interconnect performance, clock distribution and IO capacity. This paper describes these problems and the solutions to these problems chosen in the Xilinx XC 4000 EX <b>family</b> <b>architecture.</b> ...|$|E
40|$|With the {{emergence}} of aspect-oriented (AO) techniques, crosscutting concerns can be now explicitly modularized and exposed as additional variabilities in program families. Hence, the development of highly customizable software <b>family</b> <b>architectures</b> requires the explicit handling of crosscutting variabilities through domain engineering and application engineering steps. In this context, this paper presents a generative model that addresses the implementation and instantiation of variabilities encountered in AO software <b>family</b> <b>architectures.</b> The use of our model allows for an early specification and preparation of AO variabilities, which in turn can be explicitly customized by means of domain engineering activities. All the variabilities of the architecture are modeled using feature models. In application engineering, developers can request an instance of the AO architecture {{in a process of}} two stages: (i) the definition of a feature model instance which specifies the resolution of variabilities for the AO family architecture; and (ii) the definition of a set of crosscutting relationships between features. 1...|$|R
5000|$|OpenRISC: an {{open-source}} microprocessor <b>family,</b> with <b>architecture</b> specification licensed under GNU GPL {{and implementation}} under LGPL.|$|R
40|$|Table of Contents: Context and Purpose This section {{sets the}} stage for the {{remainder}} of the document. It describes, first, the Café task in which the work was done. Then, the principal goal of IESE in the task is described. Our goal is to support the creation and evaluation of product <b>family</b> <b>architectures</b> with quality models that enable a formalization of quality requirements, as well as to provide a collection product family specific quality attributes. Usage of Quality Models This section describes the different applications of quality models in the context of product <b>family</b> <b>architectures.</b> Requirements on Quality Models The requirements on quality models are derived from the usage scenarios presented in the last section. The Quality Model The quality model that is used to capture quality requirements is presented. Product Family Specific Quality Attributes A number of quality attributes that are especially important for product family engineering are presented. Conclusions Related Café Deliverables Related deliverables created in the context of the Café project are presented in this section...|$|R
40|$|Conference Name: 3 rd International Conference on Manufacturing Science and Engineering (ICMSE 2012). Conference Address: Xiamen, PEOPLES R CHINA. Time:MAR 27 - 29, 2012. Aiming at {{selecting}} appropriate {{parts in}} the product <b>family</b> <b>architecture</b> for innovating, a method for part analysis and selection in the renewal process of product <b>family</b> <b>architecture</b> is initially proposed. On the basis of parts analysis from the three aspects of cost effectiveness-commonality, performance sensitivity and demand-matching degree, a coupling spatial model CSM is established. With the fuzzy c-means clustering method, the parts were clustered, and the choice domain and the improvement direction were pointed out. Finally, {{a case study of}} part analysis and selection in the working device product family of the wheel loader was presented to illustrate the validity of the method...|$|E
40|$|Dynamic memory {{management}} is {{one part of}} the soft-ware system that influences the performance and the cost of a product the most. In the context of an embedded real-time system, several requirements must be taken into account. The system must be optimized due to the limitation of mem-ory. Real-time deadlines must be respected: the dynamic {{memory management}} system must allocate and deallocate blocks in due time. One more challenge is represented when a dynamic memory management system is developed for a product <b>family</b> <b>architecture,</b> which is representative of a set of related products. We present a scenarios-based approach to analyze and evaluate dynamic memory management sys-tems for embedded real-time systems in a software product <b>family</b> <b>architecture.</b> Architectural transformations and im-provements against the tradeoffs for the software product family are analyzed. 1...|$|E
40|$|This paper {{proposes a}} {{methodology}} {{to generate the}} diversity in a products family with Programmed Attributed Graph Grammars. Starting from the model of a Base-Product, this tool allows to obtain the <b>family</b> <b>architecture</b> and to generate the variants, using four types of operators. We illustrate our purpose with some parts of a kitchen...|$|E
5000|$|By 1981, the Flatiron Building {{was still}} {{owned by the}} Lynch <b>family.</b> Its <b>architecture</b> is {{characterized}} as Early Commercial and [...] "Vernacular-Gothic Details." ...|$|R
5000|$|The Motorola 68000 <b>family,</b> x86 <b>architecture,</b> {{and other}} {{computing}} platforms {{have a word}} size of 16 bits, representing 65536 possible values. (32- or 64-bit operations are supported equally or better in modern microprocessors.) ...|$|R
5000|$|... #Caption: Share of {{processor}} <b>architecture</b> <b>families</b> in TOP500 supercomputers by {{time trend}} ...|$|R
40|$|Building designs {{often have}} {{features}} {{that can be}} reuse across project. Many architects address the efficiency of reusing previous design by templates, fragment of existing floor plan. However, current template using practices is suffering from inefficiency in template retrieval and adaptation. In this thesis, a methodology of developing a building configurator, a building family design generation tool that manipulates templates, was proposed. The challenges of developing a building configurator that manipulate templates come from the challenges to well model, organize and utilize templates. Therefore, three constructs: product family data, constraints, and actions are identified to model template and building family knowledge; and Product <b>Family</b> <b>Architecture</b> and Intelligent Template concept were used to organize and utilize templates for the configuration process. Product <b>Family</b> <b>Architecture</b> (PFA) is a conceptual structure and overall logical organization of generating a family of products. PFA captures the possible product structure and product variant generation mechanism. Product <b>Family</b> <b>Architecture</b> captures relationship among templates, while intelligent template provides intelligence to each template. An intelligent template is a template that can reason, apply knowledge to adapt to requirements, and change toward objective. The intelligent template concept can be implemented by adding more design parameters, adding constraints and actions to a traditional template In this research, product family data, constraint, and action are defined as main elements to represent the PFA and Intelligent Template concepts. PFA represents the architectural {{knowledge of how to}} generate a building family from different templates; Intelligent Templates represents the design knowledge and constraints of each templates. This approach is applied to design and developed a configurator to the building design system of an architectural firm, Tecton Ltd...|$|E
40|$|AbstractProduct {{variety is}} a life reality {{that has to be}} handled by {{designers}} and manufacturers in order to reap the benefits of economy of scope. Product modularity has been the key design solution to manage the increased variety. Design Structure Matrix (DSM) has become the favorable tool by designers to express product or system component relationships, which is used later to cluster components into modules that have strong relationships among their components. This paper is presenting a simple and efficient methodology for designing a product <b>family</b> <b>architecture</b> from a given product family. It is a variant-oriented DSM approach to augment different product design variants into a one collective DSM. Modularity is then performed using Cladistics, a hierarchical classification tool, which is extensively used in biology, and has been also successfully implemented in engineering in design and manufacturing. The results are cascaded layers of component modules representing the underlying product <b>family</b> <b>architecture.</b> A case study of a family of seven kettle variants has been used to represent this novel approach and verify the quality of the results...|$|E
40|$|It {{is claimed}} that the {{characteristics}} of practical product family development for configuration are not clear enough for the academia. Therefore, the characteristics are studied with three participative case studies and interviews in seven companies. The industrial cases are being studied from four standpoints (as cases of business, development, modularisation and configuration). The summary of the characteristics is reported and {{an analysis of the}} cases is given. The need for relating the business process re-engineering to product <b>family</b> <b>architecture</b> is emphasised...|$|E
5000|$|Product <b>Family</b> Engineering (methods, <b>architectures,</b> techniques) in {{distributed}} and ambient computing, and ...|$|R
50|$|Microprocessors {{belonging}} to the PowerPC <b>architecture</b> <b>family</b> {{have been used in}} numerous applications.|$|R
40|$|The {{development}} of highly customizable software <b>family</b> <b>architectures</b> requires the explicit handling of crosscutting features through domain engineering and application engineering. This work explores {{the use of}} AOSD techniques in the customization and instantiation of product line architectures. Our method allows an improved customization and instantiation of frameworks by using crosscutting feature models. It also intends to provide guidelines to modularize the implementation of framework features using aspects. In this paper, we present an overview of our method by describing the main models that allows the implementation of aspect-oriented generative approaches. The method is illustrated by presenting its application in the refactoring of the JUnit framework. 1...|$|R
