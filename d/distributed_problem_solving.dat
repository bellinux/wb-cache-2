284|10000|Public
50|$|Multi-agent {{systems and}} <b>distributed</b> <b>problem</b> <b>solving</b> {{are the two}} main DAI approaches. There are {{numerous}} applications and tools.|$|E
5000|$|Nardi, B., and J. Miller (1990). An ethnographic {{study of}} <b>distributed</b> <b>problem</b> <b>solving</b> in {{spreadsheet}} development. Proceedings of the Conference on Computer-Supported Cooperative Work, pp. 197-208.|$|E
50|$|In the 1975 {{distributed}} {{artificial intelligence}} emerged as a subfield of artificial intelligence that dealt with interaction of intelligent agents2. Distributed artificial intelligence systems were conceived {{as a group of}} intelligent entities, called agents, that interacted by cooperation, by coexistence or by competition. DAI is categorized into Multi-agent systems and <b>distributed</b> <b>problem</b> <b>solving</b> 1. In Multi-agent systems the main focus is how agents coordinate their knowledge and activities. For <b>distributed</b> <b>problem</b> <b>solving</b> the major focus is how the problem is decomposed and the solutions are synthesized.|$|E
40|$|The Multiagent Systems {{paradigm}} offers expressively {{rich and}} natural fit mechanisms for modeling and negotiation for <b>solving</b> <b>distributed</b> <b>problems.</b> <b>Solving</b> complex and <b>distributed</b> real world <b>problems</b> in dynamic domains however presents a significant challenge and requires {{the integration of}} technology innovation and domain expertise to create intelligent solutions. Scheduling of patients, staff, and resources for elective surgery in an under-resourced and overburdened public health system presents {{an excellent example of}} this class of problems. In this paper, we discuss the research challenges presented by the problem and outline our efforts of applying distributed constraint optimization, intelligent decision support, and prediction based theater allocation to address these challenges. We also discuss how these technologies can be used to drive better planning and change management in the context of surgery scheduling. Griffith Sciences, School of Information and Communication TechnologyNo Full Tex...|$|R
40|$|In <b>Distributed</b> Cooperative <b>Problem</b> <b>Solving,</b> {{an agent}} must {{coordinate}} with other agents. Coordination among agents is realized only when an agent can understand, {{or at least}} predict, actions of the other agents. That is to say, an agent has to have some model of other agents inside itself. To make an agent adaptive in cooperating with others, it should observe other agents and dynamically establish models of others in order to plan its actions. In this paper, we regard an agent as a state transition machine (a finite state automaton) and propose a method of observing other agents and dynamically establishing models of others. A simple experiment of "Moving Robots" {{will be used to}} explain the method. 1 Introduction In the real world, we take action while managing continuous interactions. In particular, we need to coordinate our actions when becoming a member of an organization or a group and trying to achieve its goal. <b>Distributed</b> Cooperative <b>Problem</b> <b>Solving</b> (DCPS) is the proc [...] ...|$|R
40|$|In {{order to}} address {{problems}} stemming from the dynamic nature of distributed systems, {{there is a need}} to be able to express the often neglected notions of the evolution and change of the knowledge components of such systems. This need becomes more pressing when one considers the potential of the Internet for <b>distributed</b> knowledge-based <b>problem</b> <b>solving</b> [...] - and the pragmatic issues surrounding knowledge integrity...|$|R
5000|$|In <b>distributed</b> <b>problem</b> <b>solving</b> {{the work}} is divided among nodes and the {{knowledge}} is shared. The main concerns are task decomposition and synthesis of the knowledge and solutions.|$|E
5000|$|<b>Distributed</b> <b>problem</b> <b>solving</b> (DPS): {{the concept}} of agent, {{autonomous}} entities that can communicate with each other, was developed {{to serve as an}} abstraction for developing DPS systems. See below for further details.|$|E
50|$|To be more academic, {{software}} agent systems are a direct evolution from Multi-Agent Systems (MAS). MAS evolved from Distributed Artificial Intelligence (DAI), <b>Distributed</b> <b>Problem</b> <b>Solving</b> (DPS) and Parallel AI (PAI), thus inheriting all characteristics (good and bad) from DAI and AI.|$|E
30|$|A {{solution}} to the <b>distributed</b> <b>problem</b> presented in Sect. 3.1 is now offered as a coordinated, distributed, iteratively refined approximate dynamic program. To achieve this, the global problem must first {{be reduced to a}} set of <b>distributed</b> <b>problems.</b> This is achieved through a power flow based Ïµ decomposition. The <b>distributed</b> <b>problem</b> is then <b>solved</b> through an ADP algorithm whose approximation of state and optimal control is refined through the introduction of a central coordinator.|$|R
40|$|Shape grammars {{are well}} known {{approaches}} in design space exploration. This paper reviews the current work on shape grammars in design and suggests that considerable gains can be attained by integrating parametric shape grammar based design approaches with <b>distributed</b> constraint-based <b>problem</b> <b>solving.</b> Parametric grammars are represent design topologies while distributed constrain satisfaction {{can be used to}} maintain consistency and produce the space of feasible design solutions. Designers'decision making can be coordinated such that constraints cannot be violated and designs that exhibit the highest utility (value) are selected...|$|R
40|$|The {{purpose of}} this paper is to {{demonstrate}} the efficacy of collaborative evidence based information practice (EBIP) as an organizational effectiveness model. Shared leadership, appreciative inquiry and knowledge creation theoretical frameworks provide the foundation for change toward the implementation of a collaborative EBIP workplace model. Collaborative EBIP reiterates the importance of gathering the best available evidence, but it differs by shifting decision-making authority from "library or employer centric" to "user or employee centric". University of Colorado Denver Auraria Library Technical Services department created a collaborative EBIP environment by flattening workplace hierarchies, <b>distributing</b> <b>problem</b> <b>solving</b> and encouraging reflective dialogue. By doing so, participants are empowered to identify problems, create solutions, and become valued and respected leaders and followers. In an environment where library budgets are in jeopardy, recruitment opportunities are limited and the workplace is in constant flux, the Auraria Library case study offers an approach that maximizes the capability of the current workforce and promotes agile responsiveness to industry and organizational challenges. Collaborative EBIP is an organizational model demonstrating a process focusing first on the individual and moving to the collective to develop a responsive and high performing business unit, and in turn, organization...|$|R
50|$|Swarm {{intelligence}} (SI) is {{the property}} of a system whereby the collective behaviors of (unsophisticated) agents, interacting locally with their environment, cause coherent functional global patterns to emerge. SI provides a basis with which {{it is possible to}} explore collective (or <b>distributed)</b> <b>problem</b> <b>solving</b> without centralized control or the provision of a global model.|$|E
50|$|In {{computing}} cooperative <b>distributed</b> <b>problem</b> <b>solving</b> is {{a network}} of semi-autonomous processing nodes working together to solve a problem, typically in a multi-agent system. That {{is concerned with the}} investigation of problem subdivision, sub-problem distribution, results synthesis, optimisation of problem solver coherence and co-ordination. It is closely related to distributed constraint programming and distributed constraint optimization; see the links below.|$|E
40|$|Abstract. Traditional {{approaches}} to <b>distributed</b> <b>problem</b> <b>solving</b> have treated {{the problem as}} one of distributed search. In this paper, we propose an alternative, logic-based view of <b>distributed</b> <b>problem</b> <b>solving,</b> whereby agents cooperatively solve problems by exchanging information in order to derive the {{solution to a problem}} using logical deduction. In particular, we give a knowledge theoretic model of <b>distributed</b> <b>problem</b> <b>solving,</b> and show how various problem solving strategies can be represented within this scheme. ...|$|E
40|$|Management {{of urban}} {{atmospheric}} pollution necessitates advanced modeling and information processing techniques. The {{design of the}} prototype system DNEMO, {{which is based on}} a <b>distributed</b> adaptive <b>problem</b> <b>solving</b> approach is the focus of the research reported in this paper. Issues covered in the paper relate to the distributed nature of this environmental problem, handling noise and uncertainty in monitoring data, achieving graceful degradation of performance and system robustness, adaptation of system performance to long-term evolution of the monitored phenomena. The research reported can be applicable to a broad class of Environmental Monitoring applications, since the problems addressed are cormnon to many environmental problems...|$|R
40|$|The CCF project {{addresses}} {{enabling technologies}} to support collaborative, <b>distributed,</b> computer-based <b>problem</b> <b>solving</b> {{in the natural}} sciences. The goal is to evolve a virtual laboratory environment for physical and biological science disciplines, based on a cooperative computing substrate, that integrally supports a shared workspace, high performance computing, distributed data management, and AV as well as graphical scientific communication. Research foci include <b>problem</b> <b>solving</b> environments and methodologies for laboratory and instrument-based scientific disciplines, and computer science issues in heterogeneous distributed systems. New approaches are being investigated and developed for fast multiway communication, robust geographically distributed data management methodologies, high-performance computational transforms inlined within collaboration sessions, and related auxiliary issues such as active documents, security, archival storage, and experiment management and control. Keyw [...] ...|$|R
40|$|Abstract. Since {{cognition}} {{could be}} treated as problem-solving issues based on dynamical knowledge transferring and propagation, the meta-learning and group learning are put forward in conformance with meta-cognition and group cognition through New Product Development (NPD) analysis. To meet the globally <b>distributed</b> tendency of <b>problem</b> <b>solving</b> with cognitive intention based on Internet technology, a P 2 P-based <b>Problem</b> <b>Solving</b> Environment (PSE) is explored to facilitate Web-based knowledge transferring and propagation. By taking advantage of P 2 P-based PSE, an infrastructure of knowledge grid oriented toward cooperative cognition is structured to support E-Science. ...|$|R
40|$|Traditional {{approaches}} to <b>distributed</b> <b>problem</b> <b>solving</b> have treated {{the problem as}} one of distributed search. In this paper, we propose an alternative, logic-based view of <b>distributed</b> <b>problem</b> <b>solving,</b> whereby agents cooperatively solve problems by exchanging information in order to derive the {{solution to a problem}} using logical deduction. In particular, we give a knowledge theoretic model of <b>distributed</b> <b>problem</b> <b>solving,</b> and show how various problem solving strategies can be represented within this scheme. 1 Introduction <b>Distributed</b> <b>problem</b> <b>solving</b> is perhaps the paradigm example of activity in multi-agent systems [1]. It occurs when a group of logically decentralised agents cooperate to solve problems that are typically beyond the capabilities of any individual agent. Historically, <b>distributed</b> <b>problem</b> <b>solving</b> has been viewed and modelled as a kind of distributed search, whereby a collection of agents collaboratively traverse the search space of a problem in order to find a solution [ [...] ...|$|E
40|$|In {{this paper}} we presentamulti issue {{negotiation}} model {{which can be}} used for guiding agents during <b>distributed</b> <b>problem</b> <b>solving.</b> This model is composed of protocols which govern and manage agent interactions, and an agent architecture which represents decision mechanisms which assist agents during <b>distributed</b> <b>problem</b> <b>solving</b> processes...|$|E
40|$|In {{this paper}} {{we present a}} multi agent and multi issue {{negotiation}} model {{which can be used}} for guiding agents during <b>distributed</b> <b>problem</b> <b>solving.</b> This model is composed of protocols which govern and manage agent interactions, and an agent architecture which represents decision and action mechanisms which assist agents during <b>distributed</b> <b>problem</b> <b>solving</b> processes. ...|$|E
40|$|This paper {{presents}} Bast, an object-oriented {{library of}} reliable distributed protocols. We show how Bast {{can be used}} to build fault-tolerant distributed applications, and how new protocols can be added to it. We discuss some distributed protocol design issues and the way these issues are circumvented in Bast. We briefly describe our Smalltalk and Java implementations of Bast, together with some performance results. 1 Introduction Reliable distributed applications are challenging to build, because programmers have to deal with many complex issues, e. g., reliable communication, failure detection, replication management, transaction management, etc. Each of these issues actually corresponds to a <b>distributed</b> <b>problem</b> to <b>solve,</b> and programmers have to face a <b>distributed</b> <b>problems</b> "jungle" (Figure 1) to choose the right protocol for the right problem, or to compose existing protocols and make them work together. Bast 1 is an extensible object-oriented library of reliable distributed pr [...] ...|$|R
40|$|In {{these studies}} I examine {{the role of}} <b>distributed</b> {{cognition}} in <b>problem</b> <b>solving.</b> The major hypothesis explored is that intelligent behavior results from the interaction of internal cognition, external objects, and other people, where a cognitive task can be distributed among a set of representations, some internal and some external. The Tower of Hanoi problem {{is used as a}} concrete example for these studies. In Experiment 1 I examine the effects of the distribution of internal and external representations on <b>problem</b> <b>solving</b> behavior. Experiments 2 and 3 focus on the effects of the structural change of a <b>problem</b> on <b>problem</b> <b>solving</b> behavior and how these effects depend {{on the nature of the}} representations. The results of all studies show that distributed cognitive activities are produced by the interaction among the internal and external representations. External representations are not simply peripheral aids. They are an indispensable part of cognition. Two of the factors determining the performance of a <b>distributed</b> <b>problem</b> space and the distribution of representations across an internal mind and the external world...|$|R
40|$|Distributed {{computing}} environments allow collaborative <b>problem</b> <b>solving</b> across {{teams and}} organisations. A fundamental precondition for collaboration {{is the ability}} to find available participants and be able to exchange information. One way to approach this conceptual formulation are central directories or registry services. A major disadvantage of centralized components is, that they limit the flexibility to form ad hoc networks that are targeted to <b>solve</b> a specific <b>problem.</b> To facilitate flexible and dynamic collaborations, ideas from decentralized and self-organising networks can be combined with concepts of service oriented computing. This project aims to investigate potential solutions for dynamic discovery of network participants and outlines how to manage challenges associated with the development of a discovery protocol for distributed systems. During the course of this project a prototypical implementation was created that integrates into the open source <b>distributed,</b> collaborative <b>problem</b> <b>solving</b> environment RCE [9]. It is currently developed at the German Aerospace Center (DLR) but is planned to make the framework available to broader community...|$|R
40|$|Research in <b>{{distributed}}</b> <b>problem</b> <b>solving</b> in {{the last}} years focused on distributed applications which cooperate to accomplish a task. Another level of <b>distributed</b> <b>problem</b> <b>solving</b> is that of human teams which are distributed in space and cooperate in solving a problem. In this paper we will introduce <b>distributed</b> <b>problem</b> <b>solving</b> from the `human level', brie#y present the accompanying research area of ComputerSupported Cooperative Work #CSCW# and the di#erent basic mechanisms of computer support for workgroup computing, and then focus on the awareness information that is of special importance for supporting coordinated cooperation of groups with unstructured tasks. 1 Introduction The emergence of high-speed local area computer networks {{at the beginning of the}} 1970 s resulted in distributed systems becoming an important topic in computer science. As a sub-discipline of distributed systems, <b>distributed</b> <b>problem</b> <b>solving</b> #DPS# emerged by combining the ideas of distributed systems and [...] ...|$|E
40|$|Abstract. <b>Distributed</b> <b>problem</b> <b>solving</b> {{involves}} the collective effort of multiple problems solvers to combine their knowledge, information, and capabilities {{so as to}} develop solutions to problems that each could not have solved as well (if at all) alone. The challenge in <b>distributed</b> <b>problem</b> <b>solving</b> is thus in marshalling the distributed capabilities in the right ways so that the problem solving activities of each agent complement {{the activities of the}} others, so as to lead efficiently to effective solutions. Thus, while working together leads to <b>distributed</b> <b>problem</b> <b>solving,</b> there is also the distributed problem of how to work together that must be solved. We consider that problem to be a distributed planning problem, where each agent must formulate plans for what it will do that take into account (sufficiently well) the plans of other agents. In this paper, we characterize the variations of <b>distributed</b> <b>problem</b> <b>solving</b> and distributed planning, and summarize some of the basic techniques that have been developed to date. ...|$|E
40|$|We {{contrast}} {{two approaches}} {{to the problem of}} information gathering that may be characterized as distributed processing and <b>distributed</b> <b>problem</b> <b>solving.</b> The former is characteristic of most existing information gathering systems, while the latter is central to research in multi-agent systems. We examine features of complex information carrying environments and the information gathering task that demonstrate both the utility of viewing information gathering as <b>distributed</b> <b>problem</b> <b>solving</b> and difficulties with viewing it as distributed processing. We propose a new approach to information gathering based on the <b>distributed</b> <b>problem</b> <b>solving</b> paradigm and its attendant body of research in multi-agent systems and distributed artificial intelligence. This approach, called Cooperative Information Gathering, involves concurrent, asynchronous discovery and composition of information spread across a network of information servers. Top level queries drive the creation of partially elaborat [...] ...|$|E
40|$|Constraint logic {{programming}} is a paradigm {{based on the}} notion of constraints and mechanisms for their resolution. The new concept of solver collaboration enables to <b>solve</b> <b>problems</b> that cannot be tackled or efficiently solved with a single solver. We propose BALI, an environment for designing/executing solver collaborations. BALI is a heterogeneous <b>distributed</b> collaborative <b>problem</b> <b>solving</b> system. In the constraint {{logic programming}} (CLP) framework, the need for cooperation and combination (i. e. collaboration) of solvers is widely recognized. The general view consists in doing several solvers collaborate in order to process constraints that cannot be solved (or efficiently solved) by a single solver. Some systems, like CoSAc (Monfroy, Rusinowitch, & Schott 1996), have already been proposed for realizing solver cooperation. Although they significantly ease integration and cooperation, they provide only one paradigm (asynchronous or synchronous communication) and do not provid [...] ...|$|R
40|$|Bioinformatics {{applications}} are naturally distributed, due to distribution of involved data sets, experimental data and biological databases. They require high computing power, {{owing to the}} large size of data sets and the complexity of basic computations, may access heterogeneous data, where heterogeneity is in data format, access policy, distribution, etc., and require a secure infrastructure, because they could access private data owned by different organizations. The <b>Problem</b> <b>Solving</b> Environment (PSE) is an approach and a technology that can fulfil such bioinformatics requirements. The PSE {{can be used for}} the definition and composition of complex applications, hiding programming and configuration details to the user that can concentrate only on the specific problem. Moreover, Grids can be used for building geographically <b>distributed</b> collaborative <b>problem</b> <b>solving</b> environments and Grid aware PSEs can search and use dispersed high performance computing, networking, and data resources. In this work, the PSE solution has been chosen as the integration platform of bioinformatics tools and data sources. In particular an experiment of multiple sequence alignment on large scale, supported by the LIBI PSE, is presented...|$|R
40|$|A {{real-time}} software controller that successfully integrates domain-based and resource-based control reasoning {{to perform}} task execution in a dynamically changing environment is described. The {{design of the}} controller {{is based on the}} concept of partitioning the process to be controlled into a set of tasks, each of which achieves some process goal. It is assumed that, in general, there are multiple ways (tasks) to achieve a goal. The controller dynamically determines current goals and their current criticality, choosing and scheduling tasks to achieve those goals in the time available. It incorporates rule-based goal reasoning, a TMS-based criticality propagation mechanism, and a real-time scheduler. The controller has been used to build a knowledge-based situation assessment system that formed a major component of a real-time, <b>distributed,</b> cooperative <b>problem</b> <b>solving</b> system built under DARPA contract. It is also being employed in other applications now in progress...|$|R
40|$|In {{this paper}} we show {{the design of}} a {{language}} which is applicable for control of multiple autonomous unmanned vehicles as well as for <b>distributed</b> <b>problem</b> <b>solving,</b> in general. The language, under the working name CCL (Common Control Language) is a natural extension of behavior-based robotic architectures allowing both fast reaction and deliberation in realtime. CCL provides a powerful support for <b>distributed</b> <b>problem</b> <b>solving</b> based on the cost optimization mechanism, and combines the best of the world of declarative and imperative programming. 1...|$|E
40|$|Agents are {{a central}} concept in Distributed Artificial Intelligence. What truly defines an agent {{and in what}} manner they are used is very broad. <b>Distributed</b> <b>Problem</b> <b>Solving</b> and Multiagent Systems are fields within Distributed Artificial Intelligence that use the agent concept quite extensively. This paper {{investigate}} {{the manner in which}} agents play a role in these two fields. An agent based approaches from both <b>Distributed</b> <b>Problem</b> <b>Solving</b> and Multiagent Systems to solving the task scheduling problem are examined and compared. A clear dinction is then made between the two fields. ...|$|E
40|$|We {{describe}} {{a framework for}} the automated verification of multi-agent systems which do <b>distributed</b> <b>problem</b> <b>solving,</b> e. g. query answering. Each reasoner uses facts, messages and Horn clause rules to derive new information. We show how to verify correctness of <b>distributed</b> <b>problem</b> <b>solving</b> under resource constraints, such as {{the time required to}} answer queries and the number of messages exchanged by the agents. The framework allows the use of abstract specifications consisting of Linear Time Temporal Logic (LTL) formulas to specify some of the agents in the system. We illustrate the use of the framework on a simple example...|$|E
40|$|For {{advanced}} and complicated knowledge processing, {{we need to}} integrate various kinds of problem-solvers such as constraint solvers, databases, and application programs. A heterogeneous <b>distributed</b> cooperative <b>problem</b> <b>solving</b> system HELIOS achieves this integration by introducing capsule and environment modules. To integrate heterogeneous problem-solvers that may be implemented in different languages and may have different knowledge representations, their heterogeneity should be preserved. Capsules and environments are introduced into HELIOS for this purpose. A capsule surrounds each problem-solver and translates the contents of communication {{to and from the}} internal representation and a common representation. We call an encapsulated problem-solver an agent. An environment is a module which provides a field giving common representation, and agents communicate and cooperate with each other in each environment. Since an encapsulated environment with its agents can be considered as an ag [...] ...|$|R
40|$|In the FGCS {{project and}} its Follow-on project, we have {{designed}} {{and developed a}} nested relational database management system, Kappa, a deductive objectoriented database (DOOD) language (or a knowledge representation language), QUIXOT E, and a heterogeneous <b>distributed</b> cooperative <b>problem</b> <b>solving</b> system, Helios, for knowledge information processing applications. In this paper, {{from the viewpoint of}} database and knowledge-base management systems, I overview their objectives and features, and summarize their contributions. Especially. I focus mainly on their language aspects rather than systems. Further, by reflecting their experiences, I discuss some directions of future database from an application point of view. 1 Introduction In the FGCS (Fifth Generation Computer Systems, 1982 - 1993) project[Kurozumi 92] and its Follow-on project (1993 - 1995) [Uchida et al 93], we have been engaged in various knowledge information processing applications such as natural language processing, genetic in [...] ...|$|R
40|$|In {{order to}} address {{problems}} stemming from the dynamic nature of distributed systems, {{there is a need}} to be able to express the often neglected notions of the evolution and change of the knowledge components of such systems. This need becomes more pressing when one considers the potential of the Internet for <b>distributed</b> knowledge-based <b>problem</b> <b>solving</b> â and the pragmatic issues surrounding knowledge integrity. In this paper, we introduce a formal calculus for describing transformations in the âlife cyclesâ of knowledge components, along with ideas about the nature of distributed environments in which the ideas underpinning the calculus can be realised. The formality and level of abstraction of this language encourage the analysis of knowledge histories and allows useful properties about this knowledge to be inferred. These ideas are illustrated through the discussion of a particular case-study in knowledge evolution...|$|R
