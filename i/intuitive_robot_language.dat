0|296|Public
5000|$|... 2009: Schleicher {{presented}} [...] "mocap": <b>intuitive</b> <b>robot</b> {{teaching that}} does not require programming knowledge.|$|R
40|$|Robotic {{commands}} {{in natural}} language usually contain various spatial descriptions that are semantically similar but syntactically different. Mapping such syntactic variants into semantic concepts {{that can be}} understood by robots is challenging due to the high flexibility of natural language expressions. To tackle this problem, we collect robotic commands for navigation and manipulation tasks using crowdsourcing. We further define a <b>robot</b> <b>language</b> and use a generative machine translation model to translate robotic commands from natural <b>language</b> to <b>robot</b> <b>language.</b> The main {{purpose of this paper}} is to simulate the interaction process between human and robots using crowdsourcing platforms, and investigate the possibility of translating natural <b>language</b> to <b>robot</b> <b>language</b> with paraphrases...|$|R
25|$|For {{examples}} of how this would look in popular <b>robot</b> <b>languages</b> see industrial <b>robot</b> programming.|$|R
40|$|In this paper, {{we make a}} {{comparative}} review {{of a variety of}} "intermediate-level" <b>robot</b> <b>languages</b> that have emerged in recent years. We also describe a <b>robot</b> programming <b>language</b> called FROB (for Functional ROBotics). FROB is an example of an embedded, domain-specific language, hosted by the Haskell programming language...|$|R
50|$|The KUKA <b>Robot</b> <b>Language,</b> {{also known}} as KRL, is a {{proprietary}} programming language similar to Pascal and used to control KUKA robots.|$|R
40|$|Purpose - The {{purpose of}} this paper is to present a CAD-based human-robot {{interface}} that allows non-expert users to teach a robot in a manner similar to that used by human beings to teach each other. Design/methodology/approach - <b>Intuitive</b> <b>robot</b> programming is achieved by using CAD drawings to generate robot programs off-line. Sensory feedback allows minimization of the effects of uncertainty, providing information to adjust the robot paths during robot operation. Findings - It was found that it is possible to generate a robot program from a common CAD drawing and run it without any major concerns about calibration or CAD model accuracy. Research limitations/implications - A limitation of the proposed system has to do with the fact that it was designed to be used for particular technological applications. Practical implications - Since most manufacturing companies have CAD packages in their facilities today, CAD-based robot programming may be a good option to program robots without the need for skilled robot programmers. Originality/value - The paper proposes a new CAD-based robot programming system. Robot programs are directly generated from a CAD drawing running on a commonly available 3 D CAD package (Autodesk Inventor) and not from a commercial, computer aided robotics (CAR) software, making it a simple CAD integrated solution. This is a low-cost and low-setup time system where no advanced robot programming skills are required to operate it. In summary, robot programs are generated with a high-level of abstraction from the <b>robot</b> <b>language.</b> Comment: Industrial Robot: An International Journa...|$|R
40|$|This paper {{introduces}} the Fast and <b>Intuitive</b> <b>Robot</b> Programming (FINROP) project {{that aims to}} promote a novel and efficient way of developing robotic applications. To this end, the project will implement a constraint-based programming approach, so that generated robot motions are adapted at runtime to different contexts within the same application, enabling the flexibility typically needed for small, highly customised batch size productions. Finally, {{the effectiveness of the}} solution is evaluated by applying this approach in real industrial scenarios proposed by the project's industrial partners. status: accepte...|$|R
40|$|Abstract — Today’s {{industrial}} robots require expert knowl-edge {{and are not}} profitable for small and medium sized enterprises with their small lot sizes. It is our strong belief that more <b>intuitive</b> <b>robot</b> programming in an augmented reality robot work cell can dramatically simplify re-programming and leverage robotics technology in short production cycles. In this paper, we present a novel augmented reality system for defining virtual obstacles, specifying tool positions, and specifying robot tasks. We evaluate the system in a user study and, more specifically, investigate the input of robot end-effector orientations in general. I...|$|R
40|$|We {{believe that}} one of the major impediments to {{involvement}} in the field of robotics and AI is the difficulty end-users face in creating viable robot control policies. We seek to address this difficulty with lifelong robot learning and have developed an <b>intuitive</b> <b>robot</b> control interface using the Nintendo Wii remote to aid in this task. From three large public demos and several smaller ones, we have gotten a multitude of positive responses on the interface. We also believe that others can find similar successes in the field of HRI using undergraduate researchers...|$|R
40|$|Abstract — This paper {{proposes a}} new concept to augment direct robot {{programming}} with sensor-based branching and looping. The objective is to derive a new robot programming paradigm in order to enable non-programmers to use robots for different tasks. Inspired by the ancient programming style based on the GOTO-statement, this approach requires the user to deal with only two basic concepts: Intuitive Control Expressions and Spatial Labels. This simplicity yields a very <b>intuitive</b> <b>robot</b> programming interface. We introduce these new concepts and derive some statements about the power and the limitations of this approach. C I...|$|R
40|$|Robot {{communication}} {{is necessary to}} complete collaborative tasks e ciently. The robots will need an adaptable language if we want themto function in new and changing environments. This paper reports steps already taken towards {{the creation of an}} adaptable <b>robot</b> <b>language</b> and discusses extensions to the work that are being examined. ...|$|R
50|$|Some {{examples}} of published <b>robot</b> programming <b>languages</b> are shown below.|$|R
40|$|Macro Record <b>Robot</b> <b>Language</b> (M. R. Roboto) {{places in}} the hands of the {{programmer}} a powerful tool for controlling GUI based operating systems. By simulating the actions of a user, one can test interactive applications and automate repetitive tasks with ease. M. R. Roboto provides a simple script-style interface, while leveraging the strengths of the Jav...|$|R
40|$|Abstract. This paper {{describes}} the testing tool ”ExmoR ” {{that allows the}} user to experiment with different control algorithms as map building and a routine to explore the environment. The intention {{is to give the}} user the possibility of easy testing the various control algorithms for the Khepera robot without any knowledge about the <b>robot</b> <b>language,</b> the control architecture or other robot details. ...|$|R
40|$|Abstract: Intelligent Space {{based on}} {{ubiquitous}} computing is a space which has distributed sensory intelligence and {{is equipped with}} actuators. The various devices of ubiquitous sensory intelligence cooperate with each other autonomously, and the whole space has high intelligence, where we can easily interact with computers and robots, and get useful services from them. This paper gives an overview {{of a system that}} is based on the Intelligent Space concept. The proposed system {{is one of the key}} components of the so called <b>Intuitive</b> <b>Robot</b> Programming (IRP), used for intelligent fast and effective programming of industrial robots. In IRP the desired motion of the robot is performed by a skilled worker. The human motion is captured and its path is edited and simulated. Finally the result can be programmed into the robot. ...|$|R
40|$|The use of robots in SME {{production}} environments requires programming {{systems that}} decrease programming effort {{and can be}} used by process experts rather than robotics experts. The core sources of information available to the robot system are human input, sensor data and model data. However most programming systems only connect one or two of these information sources to generate robot programs. The presented programming concept featuring hand-guided <b>robot</b> operation for <b>intuitive</b> <b>robot</b> instruction, use of workpiece CAD-models to retrieve nominal model information and a triangulation sensor for detection of workpiece contours features combination of all three sources of information and promises efficient robot programing for deburring applications in SME production. Finally a kinematic compensation approach is investigated which provides good positioning accuracy which is in particular important when dealing with workpieces of large dimensions...|$|R
40|$|Approved {{for public}} release, {{distribution}} unlimitedThe major problem addressed by {{this research is}} how to develop a motion control algorithm for stable and precise control of the motion of an autonomous mobile robot The approach taken was to clearly define the robot's motion descriptions and to design a high-level, machine independent <b>robot</b> control <b>language</b> called MML (Mode-based Mobile <b>robot</b> <b>Language).</b> The results are that the robot can implement line to line, line to circle, circle to circle path tracking or the combinations of these. Based on the motion control algorithm which was developed in this thesis, the robot is able to use external sensors to execute complicated missions such as obstacle avoidance (sonar is used in this thesis work). Republic of China Army autho...|$|R
40|$|Abstract—The idea {{of service}} robots to assist humans in {{everyday}} life {{has been around for}} many years. Although there is much work in developing different abilities for this kind of robots, little attention has been paid for the integration of these behaviors into a complete functional system. In this paper we present our service robot called Markovito. Markovito integrates different skills to interact with humans and its environment in order to: i) deliver messages and objects between people, ii) search for an object, iii) navigate to different destination points, and iv) follow a person under user requests. Experiments has shown that Markovito is reliable in the execution of these tasks, while keeping a simple and <b>intuitive</b> <b>robot</b> software architecture able to incorporate new abilities in the near future. Index Terms—Service mobile robot, MDP, navigation, perception, human-robot interaction...|$|R
40|$|To {{survive on}} a global market, small and medium size {{enterprises}} (SMEs) require affordable and competitive industrial automation for high qual-ity flexible manufacturing. This thesis contributes {{to the development of}} robot concepts that fit the needs of SMEs. A major part of the thesis deals with the modeling of the three degree-of-freedom (DOF) Gantry-Tau par-allel kinematic robot, which has the potential to fulfill the requirements on accuracy, mechanical stiffness and conceptual flexibility of a robot for SMEs. Additionally, concepts that aid the SMEs to achieve the required accuracy and a more <b>intuitive</b> <b>robot</b> operation were developed and evalu-ated. The modeling of the Gantry-Tau robot includes both kinematic and dy-namic modeling. Based on the nominal kinematic model, kinematic error models were developed, as well as kinematics for the F 1 -type Gantry-Tau, a Gantry-Tau architecture extended to 6 DOF. The modeling was evalu...|$|R
40|$|The {{major problem}} {{addressed}} by {{this research is}} how to develop a motion control algorithm for local motion planning of an autonomous mobile robot. The approach taken was to clearly define the robot's motion descriptions and to design a high-level, machine independent <b>robot</b> control <b>language</b> called MML (Model-based Mobile <b>robot</b> <b>Language).</b> The results are that the robot can implement smooth rotation, symmetric, and initial motion tracking on an given environment. Based on the motion control algorithm developed in this thesis, the robot with rigid body can be applicable in both local and global motion planning. The experimental results were successful. The algorithms were implemented first on a simulator, then on the autonomous mobile robot Yamabico- Ji. Given an initial and final configuration, the vehicle demonstrated the capability to safely achieve its goal. NANARepublic of Korea Army author...|$|R
40|$|This paper {{displays}} {{the development of}} a robot for information distribution. The design looks for a simple and <b>intuitive</b> <b>robot,</b> with good performance, capable to provide updated information. "UN-MÉTODO" methodology is used, which allows specify the system from user requirements, going trough its nonfunctional requirements until combining them with the organizational objectives. The design initializes with a verbal description, which is been refined step by step by means of a preconceptual scheme, a processes diagram, an goals diagram and the characterization of nonfunctional requirements, until UML diagramming is reached. This way a semiformal specification can be reached, is such a way, both, user and organizational requirements can be fulfilled, resources can be optimized and development schedules can be accomplished. At {{the end of the process}} executable files can be obtained for the system. In short time is expected to characterize those different elements than constitute the robot...|$|R
40|$|Abstract—This paper {{presents}} {{the development of}} a software application for Off-line robot task programming and simulation. Such application is designed to assist in robot task planning and to direct manipulator motion on sensor based programmed motion. The concept of the designed programming application is to use the power of the knowledge base for task accumulation. In support of the programming means, an interactive graphical simulation for manipulator kinematics was also developed and integrated into the application as the complimentary factor to the robot programming media. The simulation provides the designer with useful, inexpensive, off-line tools for retain and testing robotics work cells and automated assembly lines for various industrial applications. Keywords—Robot programming, task-level programming, <b>robot</b> <b>languages,</b> <b>robot</b> simulation, robotics software. R I...|$|R
40|$|The {{major problem}} {{addressed}} by {{this research is}} how to plan a safe motion for autonomous vehicles in a two dimensional, rectilinear world. With given start and goal configurations, the planner performs motion planning which will lead a vehicle to achieve its task safely. During the planning, {{in addition to the}} safety consideration, motion's smoothness is also taken into account. The approach taken was to divide whole motion planning task into two layers. The top layer finds a global path by decomposing the free space into convex regions, then searching for an optimal global path class. The bottom layer performs local motion planning which further subdivides the planning problem into mid-portion and end-portion motion planning. The local motion planning is carried out region by region along the global path class. As results, simple motion instructions are generated for each region. For execution of planned motion, a software system, Model-based Mobile <b>robot</b> <b>Language</b> (MML- 11), was developed. This easy- to-use <b>robot</b> <b>language</b> provides users a convenient tool to program their applications through its function library. The results of the research were implemented in MML- 1 l and tested on an experimental robot Yamabico- 11 successfully. (AN) NANARepublic of China Army author...|$|R
40|$|In {{this paper}} {{we present a}} {{client-server}} based architecture for programming several actors and sensors in a heterogeneous system architecture. To integrate all the different computer systems an object-oriented library builds the communication base. This general communication system (GECOS) provides secure communication via RPC, Shared Memory, CAN or Ethernet. The ROBCL - <b>robot</b> control <b>language</b> is a library providing prototypes for actors and sensors in a robotic laboratory. Using the ROBCL library {{it is possible to}} run several programs simultaneously in the same environment, using different or the same devices. Because of a security concept it is not possible that two programs control an actor at the same time by mistake. Keywords: robot programming, objectoriented <b>robot</b> <b>language,</b> communication layer, control I. Introduction At the beginning of robot programming, it was extremely difficult to couple several sensors and actors. Programs for all actors had to be written, which are s [...] ...|$|R
40|$|The {{advantages}} {{and performance of}} genetic programming {{in the use of}} error recovery planning in robotic assembly systems are presented. A framework is developed and coupled with a 3 D robotic simulation software for the generation of error recovery logic in assembly systems to generate robust recovery porgrams in <b>robot</b> <b>language</b> itself. Performance of the system is evaluated with the simulations made on a three dimensionally modeled automated assembly line. The obtained results showed that the system is efficient of generating robust recovery plans for different error states. 1 DEVELOPED FRAMEWOR...|$|R
50|$|By using a Post {{processor}} and Off-line programming (robotics) software {{it is possible}} to handle brand-specific <b>robot</b> programming <b>language</b> from a universal programming language, such as Python (programming language).|$|R
40|$|Abstract—In this paper, {{we propose}} an {{architecture}} for easily constructing a robot controller. The architecture is a multi-agent system which has eight agents: the Man-machine interface, Task planner, Task teaching editor, Motion planner, Arm controller, Vehicle controller, Vision system and CG display. The controller has three databases: the Task knowledge database, the Robot database and the Environment database. Based on this controller architecture, we are constructing an experimental power distribution line maintenance robot system and {{are doing the}} experiment for the maintenance tasks, for example, “Bolt insertion task”. Keywords—Robot controller, Software library, Maintenance <b>robot,</b> <b>Robot</b> <b>language,</b> Agent system...|$|R
40|$|Cooperating robots can bene t from communication. Our robots {{create their}} own {{adaptable}} synthetic <b>robot</b> <b>languages</b> (ASRLs). We have shown that robots can develop &quot;, context dependent, and compositional ASRLs using reinforcement learning techniques. (See (Yanco 1994) for a complete description of this work.) We have demonstrated that the robots are able to develop ASRLs using two di erent reinforcement schemes: task-based reinforcement and individual reinforcement. In task-based reinforcement, the robots only receive positive reinforcement when the task is completed properly. This reinforcement method is preferable in situations where {{it can not be}} determined who performed the correct actions to reach the goal...|$|R
40|$|The role of gaze in {{interaction}} {{has been}} an area of increasing interest {{to the field of}} human-robot interaction. Mutual gaze, the pattern of behavior that arises when humans look directly at each other’s faces, sends im-portant social cues and is a developmental precursor in humans to joint attention and language learning. In preparation for learn-ing a computational model of mutual gaze, data from human-human pairs in a conversa-tional task was collected using a gaze-tracking system and face detection algorithm. The results presented show the potential of this automated method. Future applications for interaction-based <b>robot</b> <b>language</b> learning are discussed. 1...|$|R
50|$|She {{joined the}} AI {{laboratory}} at the University of Edinburgh in 1968 {{as a research}} scientist.She helped develop the <b>robot</b> command <b>language</b> RAPT, and worked with Robin Popplestone and Rod Burstall amongst others.|$|R
40|$|This {{monograph}} by Florian Röhrbein, Germano Veiga and Ciro Natale is an edited {{collection of}} 15 authoritative {{contributions in the}} area of robot technology transfer between academia and industry. It comprises three parts on Future Industrial Robotics, Robotic Grasping as well as Human-Centered Robots. The book chapters cover almost all the topics nowadays considered ‘hot’ within the robotics community, from reliable object recognition to dexterous grasping, from speech recognition to <b>intuitive</b> <b>robot</b> programming, from mobile robot navigation to aerial robotics, from safe physical human-robot interaction to body extenders. All contributions stem from the results of ECHORD – the European Clearing House for Open Robotics Development, a large-scale integrating project funded by the European Commission within the 7 th Framework Programme from 2009 to 2013. ECHORD’s two main pillars were the so-called experiments, 51 small-sized industry-driven research projects, and the structured dialog, a powerful interaction instrument between the stakeholders. The results described in this volume are expected to shed new light on innovation and technology transfer from academia to industry in the field of robotics...|$|R
40|$|Robots {{have great}} {{potential}} for assisting disabled people with basic manipulation tasks. However, robots have traditionally been difficult for non-experts to program, even for simple tasks. In addition, the brittleness of typical robot programs, which do not use sensing to detect changes in the robot's environment, make them unreliable in the loosely structured environments in which service robots operate. We present in this paper a graphical programming language, RoboGlyph, that uses an intuitive, graphical representation for <b>robot</b> control. This <b>language</b> has been tested for controlling a robot arm for service tasks, and it {{has proved to be}} a significant improvement over traditional <b>robot</b> programming <b>languages.</b> Even novice programmers are able to build reliable programs to perform simple tasks. However, any <b>robot</b> level <b>language</b> poses difficulties for users who are unfamiliar with robot control, especially when complex task programs must be created. The goals of the user are usually m [...] ...|$|R
40|$|Abstract — Neural {{networks}} {{have been proposed}} as an ideal cognitive modeling methodology {{to deal with the}} symbol grounding problem. More recently, such neural network approaches have been incorporated in studies based on cognitive agents and robots. In this paper we present a new model of symbol grounding transfer in cognitive <b>robots.</b> <b>Language</b> learning simulations demonstrate that robots are able to acquire new action concepts via linguistic instructions. This is achieved by autonomously transferring the grounding from directly grounded action names to new higher-order composite actions. The robot’s neural network controller permits such a grounding transfer. The implications for such a modeling approach in cognitive science and autonomous robotics are discussed...|$|R
40|$|Abstract — Most {{commercial}} {{manufacturers of}} industrial robots require their robots to be programmed in a proprietary language {{tailored to the}} domain – a typical domain-specific language (DSL). However, these languages oftentimes suffer from shortcomings such as controller-specific design, limited expressiveness {{and a lack of}} extensibility. For that reason, we developed the extensible Robotics API for programming indus-trial robots on top of a general-purpose language. Although be-ing a very flexible approach to programming industrial <b>robots,</b> a fully-fledged <b>language</b> can be too complex for simple tasks. Additionally, legacy support for code written in the original DSL has to be maintained. For these reasons, we present a lightweight implementation of a typical robotic DSL, the KUKA <b>Robot</b> <b>Language</b> (KRL), on top of our Robotics API. This work deals with the challenges in reverse-engineering the language and mapping its specifics to the Robotics API. We introduce two different approaches of interpreting and executing KRL programs: tree-based and bytecode-based interpretation. I...|$|R
40|$|Most {{commercial}} {{manufacturers of}} industrial robots require their robots to be programmed in a proprietary language {{tailored to the}} domain - a typical domain-specific language (DSL). However, these languages oftentimes suffer from shortcomings such as controller-specific design, limited expressiveness {{and a lack of}} extensibility. For that reason, we developed the extensible Robotics API for programming industrial robots on top of a general-purpose language. Although being a very flexible approach to programming industrial <b>robots,</b> a fully-fledged <b>language</b> can be too complex for simple tasks. Additionally, legacy support for code written in the original DSL has to be maintained. For these reasons, we present a lightweight implementation of a typical robotic DSL, the KUKA <b>Robot</b> <b>Language</b> (KRL), on top of our Robotics API. This work deals with the challenges in reverse-engineering the language and mapping its specifics to the Robotics API. We introduce two different approaches of interpreting and executing KRL programs: tree-based and bytecode-based interpretation. Comment: 1 st International Workshop on Domain-Specific Languages and models for ROBotic system...|$|R
40|$|International audienceOne central {{property}} of cognitive systems {{is the ability}} to learn and to improve continually. We present a <b>robot</b> control <b>language</b> that combines programming and learning in order to make learning executable in the normal <b>robot</b> program. The <b>language</b> constructs of our learning language RoLL rely on the concept of hierarchical hybrid automata to enable a declarative, explicit specification of learning problems. Using the example of an autonomous household robot, we point out some instances where learning–and especially continued learning–makes the robot control program more cognitive...|$|R
