20|69|Public
2500|$|In {{this version}} the counter [...] "y" [...] is called [...] "r2", and the {{function}} f( [...] x, r2 [...] ) deposits its number in register [...] "r3". Perhaps the reason Boolos-Burgess-Jeffrey clear r3 is to facilitate an unconditional jump to loop; {{this is often}} done by use of a <b>dedicated</b> <b>register</b> [...] "0" [...] that contains [...] "0": ...|$|E
50|$|<b>Dedicated</b> <b>register</b> stack management.|$|E
50|$|A stack {{register}} is {{a computer}} central processor register whose purpose is {{to keep track of}} a call stack. On an accumulator-based architecture machine, this may be a <b>dedicated</b> <b>register</b> such as SP on an Intel x86 machine. On a general register machine, it may be a register which is reserved by convention, such as on the PDP-11 or RISC machines. Some designs such as the Data General Eclipse had no <b>dedicated</b> <b>register,</b> but used a reserved hardware memory address for this function.|$|E
50|$|Interrupt SystemInterrupt {{system of}} CER-12 {{consists}} {{of a number of}} <b>dedicated</b> <b>registers</b> and software. It supports up to 32 interrupt channels.|$|R
50|$|The AVR32B CPU cores are {{designed}} for fast interrupts. They have <b>dedicated</b> <b>registers</b> to hold these values for interrupts, exceptions and supervisor calls. The AVR32B cores also support a Java virtual machine in hardware.|$|R
30|$|During the MVA, {{every effort}} was made to keep the {{procedure}} room a relaxed and comfortable environment. One <b>dedicated</b> <b>registered</b> nurse and one health care assistant (HCA) were present to support the clinician performing the procedure. The patient was positioned on a couch in a lithotomy position and a HCA stood beside her to offer psychological support (Vocal Local) and Entonox if required.|$|R
50|$|Many CISC-stype CPU designs, {{including}} the x86, Z80 and 6502, have a <b>dedicated</b> <b>register</b> {{for use as}} the call stack stack pointer with dedicated call, return, push, and pop instructions that implicitly update the <b>dedicated</b> <b>register,</b> thus increasing code density. Some CISC processors, like the PDP-11 and the 68000, also have special addressing modes for implementation of stacks, typically with a semi-dedicated stack pointer as well (such as A7 in the 68000). In contrast, most RISC CPU designs do not have dedicated stack instructions and therefore {{most if not all}} registers may be used as stack pointers as needed.|$|E
50|$|Processors in {{embedded}} systems, {{which have}} higher requirements for real-time behaviors, might support multithreading by decreasing the thread-switch time, perhaps by allocating a <b>dedicated</b> <b>register</b> file for each thread instead of saving/restoring a common register file.|$|E
50|$|The zero flag is {{a single}} bit flag that is a central feature on most {{conventional}} CPU architectures (including x86, ARM, PDP-11, 68000, 6502, and numerous others). It is often stored in a <b>dedicated</b> <b>register,</b> typically called status register or flag register, along with other flags. The zero flag is typically abbreviated Z or ZF or similar in most documentation and assembly languages.|$|E
5000|$|Each Player and its {{associated}} Missile has a <b>dedicated</b> color <b>register</b> separate from the Playfield colors.|$|R
5000|$|... s, {{a single}} {{instruction}} performing an operation on many homogeneous values in parallel, possibly in <b>dedicated</b> SIMD <b>registers</b> ...|$|R
5000|$|The {{concept of}} a random-access machine (RAM) starts with the {{simplest}} model of all, the so-called counter machine model. Two additions move {{it away from the}} counter machine, however. The first enhances the machine with the convenience of indirect addressing; the second moves the model toward the more conventional accumulator-based computer with the addition of one or more auxiliary (<b>dedicated)</b> <b>registers,</b> the most common of which is called [...] "the accumulator".|$|R
50|$|The branch {{instructions}} include conditional and unconditional relativebranches. A branch {{using the}} address in a register is provided; arelative branch which adds a scaled register operand to the programcounter is provided to support jump tables. Branches {{to up to}} instructions distance are encoded in a single word.The procedure calling instructions include relative calls, calls via theconstant pool, indexed calls via a <b>dedicated</b> <b>register</b> and calls via aregister. Most calls within a single program module can be encoded in asingle instruction; inter-module calling requires at most two instructions.It {{is up to the}} callee to save the link-register if it is not a leaf-function, a single instruction extends the stack and saves the link register.|$|E
5000|$|On the Atom {{line was}} the modern {{simplified}} revision of P5. It includes single copies of register file share with thread and decoder. The register file is a dual-port design, 8/16 entries GPRS, 8/16 entries debug register and 8/16 entries condition code are integrated {{in the same}} file. However it has an eight-entries 64 bit shadow based register and an eight-entries 64 bit unnamed register that are now separated from main GPRs unlike the original P5 design and located after the execution unit, and the file of these registers is single-ported and not expose to instruction like scaled shadow register file found on Core/Core2 (shadow register file are made of architectural registers and Bonnell did not due to not have [...] "Shadow Register File Architecture"), however the file can be use for renaming purpose {{due to lack of}} out of order execution found on Bonnell architecture. It also had one copy of XMM floating point register file per thread. The difference from Nehalem is Bonnell do not have a unified register file and has no <b>dedicated</b> <b>register</b> file for its hyper threading. Instead, Bonnell uses a separate rename register for its thread despite it is not out of order. Similar to Bonnell, Larrabee and Xeon Phi also each have only one general-purpose integer register file, but the Larrabee has up to 16 XMM register files (8 entries per file), and the Xeon Phi has up to 128 AVX-512 register files, each containing 32 512-bit ZMM registers for vector instruction storage, which can be as big as L2 cache.|$|E
50|$|Unlike Alpha, Sparc, and MIPS {{that only}} allows one {{register}} file to load/fetch one operand at the time; {{it would require}} multiple register files to achieve superscale. The ARM processor {{on the other hand}} does not integrate multiple register files to load/fetch instructions. All GPRs hold no special purpose to the instruction set (the ARM ISA does not require accumulator, index, and stack/base points. Registers do not have an accumulator and base/stack point can only be used in thumb mode). Any GPRs can propagate and store multiple instructions independently in smaller code size that is small {{enough to be able to}} fit in one register and its architectural register act as a table and shared with all decoder/instructions with simple bank switching between decoders. The major difference between ARM and other designs is that ARM allows to run on the same general-purpose register with quick bank switching without requiring additional register file in superscalar. Despite x86 sharing the same mechanism with ARM that its GPRS can store any data individually, x86 will confront data dependency if more than three non-related instructions are stored, as its GPRs per file are too small (eight in 32 bit mode and 16 in 64 bit, compared to ARM's 13 in 32 bit and 31 in 64 bit) for data, and it is impossible to have superscalar without multiple register files to feed to its decoder (x86 code is big and complex compared to ARM). Because most of x86's front-end become much larger and much more power hungry than the ARM processor in order to be competitive (example: Pentium M & Core 2 duo, bay trail). Some third-party x86 equivalent processor even became noncompetitive to ARM due having no <b>dedicated</b> <b>register</b> file architecture. Particularly for AMD, Cyrix and VIA that cannot bring any reasonable performance without register renaming and out of order execution, which leave only Intel Atom to be the only in-order x86 processor core in the mobile competition. This was until x86 in Nehalem merged both of its integer and floating point register into one single file and the introduction of a large physical register table and enhanced allocator table in its front-end before renaming in its out-of-order internal core.|$|E
5000|$|The American Bulldog is {{registered}} by many organisations <b>dedicated</b> to <b>registering</b> [...] "pure-breed" [...] animals. However, some {{specialize in}} registering American Bulldogs only.|$|R
5000|$|The {{stack pointer}} {{is used to}} manage the {{run-time}} stack. Rarely, other data stacks are addressed by <b>dedicated</b> address <b>registers,</b> see stack machine.|$|R
50|$|In some {{instruction}} sets {{such as the}} MIPS architecture, a <b>dedicated</b> flag <b>register</b> is not used; jump instructions instead check {{a register}} for zero.|$|R
30|$|In {{order to}} obtain data from the mobile device, we use its serial interface. The {{corresponding}} driver is very efficiently implementable in terms of memory, compared to other hardware devices that transfer data from the mobile device, such as the USB interface. In general, our driver consists of reading and writing from a <b>dedicated</b> <b>register</b> of the UART interface.|$|E
40|$|The tone hole {{geometry}} of a clarinet is optimized numerically. The instrument is modeled as {{a network of}} one dimensional transmission line elements. For each (non-fork) fingering, we first calculate the resonance frequencies of the input impedance peaks, and compare them with the frequencies of a mathematically even chromatic scale (equal temperament). A least square algorithm is then used to minimize the differences and to derive the {{geometry of}} the instrument. Various situations are studied, with and without <b>dedicated</b> <b>register</b> hole and/or enlargement of the bore. With a <b>dedicated</b> <b>register</b> hole, the differences can remain less than 10 musical cents throughout the whole usual range of a clarinet. The positions, diameters and lengths of the chimneys vary regularly over the whole length of the instrument, in contrast with usual clarinets. Nevertheless, we recover one usual feature of instruments, namely that gradually larger tone holes occur when {{the distance to the}} reed increases. A fully chromatic prototype instrument has been built to check these calculations, and tested experimentally with an artificial blowing machine, providing good agreement with the numerical predictions...|$|E
40|$|A {{critical}} {{problem in}} wide-issue superscalar processors is the limit on cycle time {{imposed by the}} central register file and operand bypass network. In this paper, a distributed register file architecture that employs fully distributed functional unit clusters is presented. It utilizes a local register mapping table and a <b>dedicated</b> <b>register</b> transfer network to support distributed register operations. In addition, an eager transfer mechanism is developed to reduce penalties caused by incomplete operand transport interconnection. Distributed register files can be employed to reduce operand access time {{by a factor of}} two with associated average IPC penalties of 14 % and 21 % on 4 - and 8 -way superscalar architectures across a broad range of symbolic, scientific, and multimedia applications. The IPC penalties are only 3 % and 10 % for SpecINT 2000 applications. 1...|$|E
5000|$|A {{programmable}} sound generator, or PSG, {{is a sound}} {{chip that}} generates sound waves by synthesizing multiple basic waveforms, and often some kind of noise generator (all controlled by writing data to <b>dedicated</b> <b>registers</b> in the sound chip, hence the name) and combining and mixing these waveforms into a complex waveform, then shaping the amplitude envelope of the resulting waveform using attack, decay, sustain, and release time periods, so that the resulting waveform then mimics {{a certain kind of}} sound.|$|R
5000|$|Historical {{convention}} <b>dedicates</b> a <b>register</b> to [...] "the accumulator", an [...] "arithmetic organ" [...] {{that literally}} accumulates its number during {{a sequence of}} arithmetic operations: ...|$|R
50|$|Wat Mongkolratanaram is a Buddhist Thai temple on {{the bank}} of the Palm River in Tampa, Florida. Was {{initiated}} in 1981 and <b>dedicated,</b> <b>registered</b> as the temple on May 19, 1981. The visions of the Thai Temple are: to be a center for meditation study and practice, a center of Thai Cultural and Asian cultural practice, a school for Thai language and Buddhism study, be a center of communication and support between Thais living aboard and Thai government officers, and to be the center for all denomination international religious support group.|$|R
40|$|One {{important}} {{problem in}} code generation for embedded processors is {{the design of}} efficient compilers for ASIPs with application specific architectures. This paper outlines {{the design of a}} C compiler for an industrial ASIP for telecom applications. The target ASIP is a network processor with special instructions for bit-level access to data registers, which is required for packet-oriented communication protocol processing. From a practical viewpoint, we describe the main challenges in exploiting these application specific features in a C compiler, and we show how a compiler backend has been designed that accomodates these features by means of compiler intrinsics and a <b>dedicated</b> <b>register</b> allocator. The compiler is fully operational, and first experimental results indicate that C-level programming of the ASIP leads to good code quality without the need for time-consuming assembly programming...|$|E
40|$|We {{present a}} {{technique}} {{for reducing the}} power dissipation {{in the course of}} writebacks and committments in a datapath that uses a dedicated architectural register file (ARF) to hold committed values. Our mechanism capitalizes on the observation that most of the produced register values are short–lived, meaning that the destination registers targeted by these values are renamed by the time the results are written back. Our technique avoids unnecessary writebacks into the result repository (a slot within the Reorder Buffer or a physical register) as well as writes into the ARF by caching (and isolating) short–lived operands within a small <b>dedicated</b> <b>register</b> file. Operands are cached in this manner till they can be safely discarded without jeopardizing the recovery from possible branch mispredictions or reconstruction of the precise state in case of interrupts or exceptions. The power/energy savings are validated using SPICE measurements of actual layouts in a 0. 18 micron CMOS process. The energy reduction in the ROB and the ARF is in the range of 20 – 25 % and this is achieved with no increase in the cycle time, little additional complexity and no IPC drop. 1...|$|E
40|$|Maternal hyperphenylalaninemia {{constitutes}} a potential hazard to the fetus {{for whom the}} risks of postnatal mental retardation, microcephaly, and congenital malformations are elevated. Preconception and intragestational dietary treatment can apparently improve the outcome of such pregnancies. In the absence of predictive mechanisms for pregnancies at risk and preventive measures involving reproductive counseling and treatment, {{there could be a}} rebound in the population frequency of mental retardation related to disorders of phenylalanine metabolism in subsequent generations. We describe a program serving a population of six million that includes screening, diagnosis, treatment, and counseling of the hyperphenylalaninemias. The program has recently added a simple <b>dedicated</b> <b>register</b> for males and females with hyperphenylalaninemia to supplement traditional methods for continuous surveillance of probands. We registered 153 patients: 43 females and 56 males with phenylketonuria, 23 females and 31 males with benign hyperphenylalaninemia, of which 22, 7, 27 and 5, respectively, had reached their 12 th birthday in an 1981. Regional centers in the program provided counseling about the consequences of maternal hyperphenylalaninemia and the options to prevent them. No family has rejected the principle or fact of the Register and its goals...|$|E
50|$|In February 2012, Voting for America/Project Vote filed {{a federal}} lawsuit suit {{on behalf of}} {{organizations}} <b>dedicated</b> to <b>registering</b> citizens to vote challenging Texas' burdensome restrictions on voter registration drives.|$|R
50|$|Tests for equality/inequality {{could be}} {{performed}} against a {{value on the}} display (the x <b>register)</b> and a <b>dedicated</b> test <b>register,</b> t. The result of the test would cause the next instruction to be conditionally skipped.|$|R
50|$|The AVR32A CPU cores are for {{inexpensive}} applications. They do {{not provide}} <b>dedicated</b> hardware <b>registers</b> for shadowing the register file, status and return address in interrupts. This saves chip area {{at the expense of}} slower interrupt-handling.|$|R
40|$|Abstract—This paper {{presents}} dynamic reconfiguration of {{a register}} file of a Very Long Instruction Word (VLIW) processor implemented on an FPGA. We developed an open-source recon-figurable and parameterizable VLIW processor core {{based on the}} VLIW Example (VEX) Instruction Set Architecture (ISA), capable of supporting reconfigurable operations as well. The VEX architecture supports up to 64 multiported shared registers in a register file for a single cluster VLIW processor. This register file accounts for {{a considerable amount of}} area in terms of slices when the VLIW processor is implemented on an FPGA. Our processor design supports dynamic partial reconfiguration allowing the creation of <b>dedicated</b> <b>register</b> file sizes for different applications. Therefore, valuable area can be freed and utilized for other implementations running on the same FPGA when not the full register file size is needed. Our design requires 924 slices on a Xilinx Virtex-II Pro device for dynamically placing a chunk of 8 registers, and places registers in multiples of 8 registers to simplify the design. Consequently, when 64 registers is not needed at all times, the area utilization can be reduced during run-time. I...|$|E
40|$|International audienceWe {{introduce}} an automata-theoretic {{method for}} the verification of distributed algorithms running on ring networks. In a distributed algorithm, an arbitrary number of processes cooperate {{to achieve a}} common goal (e. g., elect a leader). Processes have unique identifiers (pids) from an infinite, totally ordered domain. An algorithm proceeds in synchronous rounds, each round allowing a process to perform a bounded sequence of actions such as send or receive a pid, store it in some register, and compare register contents wrt. the associated total order. An algorithm {{is supposed to be}} correct independently of the number of processes. To specify correctness properties, we introduce a logic that can reason about processes and pids. Referring to leader election, it may say that, {{at the end of an}} execution, each process stores the maximum pid in some <b>dedicated</b> <b>register.</b> Since the verification of distributed algorithms is undecidable, we propose an underapproximation technique, which bounds the number of rounds. This is an appealing approach, as the number of rounds needed by a distributed algorithm to conclude is often exponentially smaller than the number of processes. We provide an automata-theoretic solution, reducing model checking to emptiness for alternating two-way automata on words. Overall, we show that round-bounded verification of distributed algorithms over rings is PSPACE-complete...|$|E
40|$|How can {{the concept}} of {{sustainable}} development policies and measures (SD-PAMs) be operationalized in a multilateral climate regime? The strategic approach {{is to focus on}} policies and measures that are firmly within the national sustainable development priorities of developing countries but which, through the inclusion in an international climate framework, recognize, promote and support means of meeting these policy priorities on a lower-carbon trajectory. The concept of SD-PAMs is further elaborated in two ways: (1) possible methods for quantifying SD-PAMs and (2) policy design. An important step in operationalizing {{the concept of}} SD-PAMs is the examination of available methods to quantify their benefits. Four ways to quantify the effect of SD-PAMs on development and emissions are identified: (1) case studies, (2) national energy modelling, (3) analysis of sectoral data and (4) inclusion of policies in global emission allocation models. Each of the methodological approaches has its strengths and weaknesses, but these approaches are demonstrated as being capable of quantifying the effect of SD-PAMs on development and emissions. Formalizing the commitment of SD-PAMs could be aided by more fully elaborating these methodologies. Formal recognition could be given either by listing countries in an Annex to the Convention or by including the pledged policies in a <b>dedicated</b> <b>register.</b> Regular reporting on the sustainable development and climate benefits of SD-PAMs could take place through national communications or a separate reporting mechanism. Incentives for SD-PAMs could come from both climate and non-climate funding. Development funding through other agencies could also be mobilized. International finance will be critical, as will the mobilization of domestic investment...|$|E
25|$|Often cash {{registers}} {{are attached to}} scales, barcode scanners, checkstands, and debit card or credit card terminals. Increasingly, <b>dedicated</b> cash <b>registers</b> are being replaced with general purpose computers with POS software. Cash registers use bitmap characters for printing.|$|R
5000|$|SIMD: 2xVMX128 with <b>dedicated</b> (128×128 bit) <b>register</b> {{file for}} each core, {{one for each}} thread ...|$|R
50|$|In {{most modern}} {{computer}} architectures, {{there is some}} division of floating-point operations from integer operations. This division varies significantly by architecture; some, like the Intel x86 have <b>dedicated</b> floating-point <b>registers,</b> while some take {{it as far as}} independent clocking schemes.|$|R
