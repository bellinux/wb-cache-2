0|8356|Public
40|$|Figure 6 - Screenshots {{of several}} stages in an {{exemplary}} sequence {{of using the}} <b>Dynamic</b> <b>Key</b> <b>function</b> in Symbiota. (A) Using the Dynamic Map interface, a rectangle is selected; the coordinates correspond to the bounding box are selected. Users can restrict the subsequent checklist creation process ("Build Checklist") through specification of a Taxon Filter (i. e., higher taxa down to family, listed alphabetically). (B) Using these search criteria, the module will search vouchers in Symbiota that may satisfy these conditions, and integrate the pertinent voucher list into a taxon (family/species) list with 2178 species-level matches. The Dynamic Key interface (left menu) is initially simple, including choices regarding e. g. habit. (C) In this example, selecting only two criteria from the list will (1) reduce the count of taxon matches to 6 and (2) display a remaining taxa-specific list of traits suitable for further determination, drawn from the character inheritance hierarchy of the corresponding key in Symbiota. These can either be further scrutinized with the dynamic key or determined through viewing of individual species profile pages...|$|R
25|$|<b>Dynamic</b> <b>function</b> stage, where {{motion is}} an {{underlying}} idea. The {{idea of a}} function began emerging with Sharaf al-Dīn al-Tūsī, but algebra did not decisively move to the <b>dynamic</b> <b>function</b> stage until Gottfried Leibniz.|$|R
40|$|Function allocation, as {{a process}} used in the {{construction}} of dependable complex systems, is a significant aspect of the design and implementation of interactive systems. It involves a documented and rational process for deciding what aspects of the system should be controlled by which human roles in the system and how the system should be automated to support these roles effectively. As computer systems have become more advanced, and the control of systems more complex, the notion of <b>dynamic</b> <b>function</b> allocation becomes increasingly desirable where in certain situations the automation may take over or give back function to the human user. In this paper we explore a further variant of <b>dynamic</b> <b>function</b> allocation that reflects typical work activity where the dynamic scheduling of activities takes place on the time dimension. The paper discusses this approach to <b>dynamic</b> <b>function</b> allocation called <b>dynamic</b> <b>function</b> scheduling and discusses the role that timed model checking may play in helping identify dependable <b>dynamic</b> <b>function</b> scheduling solutions...|$|R
5000|$|Screen-labeled <b>function</b> <b>keys</b> are {{a special}} case of soft <b>key</b> (<b>function</b> <b>keys)</b> where keys are placed near a screen, which {{provides}} labels for them. These are today most commonly found in kiosk applications, such as automated teller machines and gas pumps. Screen-label <b>function</b> <b>keys</b> generally date to the late 1960s, and kiosk applications were particularly common in the 1990s and 2000s. Most recently, these keys have found use in point of sale systems; NCR Corporation claims that their DynaKey system [...] "has been proven to reduce training time and cashier errors". An alternative to screen-labeled <b>function</b> <b>keys</b> is buttons (virtual keys) on a touchscreen, where the label is directly pushable. The increased prevalence of touchscreens in the 2000s {{has led to a}} decrease in screen-labeled <b>function</b> <b>keys.</b> However, screen-labeled <b>function</b> <b>keys</b> are inexpensive and robust, and provide tactile feedback.|$|R
40|$|A {{keyboard}} {{has many}} <b>function</b> <b>keys</b> and each <b>function</b> <b>key</b> can have multiple functions when used with control, shift and alt keys, {{it is difficult}} for a user to remember the functionality of the <b>function</b> <b>keys.</b> We need a mechanism to indicate the operations assigned to each <b>function</b> <b>key</b> for different software programs. A keyboard guide or template is used for this purpose. This article illustrates 10 inventions on keyboard <b>key</b> guide and <b>function</b> <b>key</b> templates selected from US patent database. Various mechanisms of keyboard templates have been proposed, including static, dynamic, manual, mechanical, onscreen display and others. Comment: Published in TRIZsite Journal, June 2005, also available at [URL]...|$|R
5000|$|... #Caption: Archimedes 400/1 series computer. The <b>function</b> <b>keys</b> on the {{keyboard}} are the standard grey; on BBCbranded models, the <b>function</b> <b>keys</b> were red ...|$|R
50|$|Two rows of {{user defined}} <b>function</b> <b>keys</b> with paper labels {{were some of}} the {{earliest}} implementation of general <b>function</b> <b>keys.</b> They would be the basis for later screen labeled <b>function</b> <b>keys</b> used in later Hewlett Packard (and IBM) terminals and computers, and now widely adopted in calculators, bank terminals, and gas pumps.|$|R
5000|$|IBM 3270: {{probably}} {{the origin of}} <b>function</b> <b>keys</b> on keyboards, circa 1972. On this mainframe keyboard early models had 12 <b>function</b> <b>keys</b> in a 3×4 matrix {{at the right of}} the keyboard; later that changed to a numeric keypad, and the <b>function</b> <b>keys</b> moved {{to the top of the}} keyboard, and increased to 24 keys in two rows.|$|R
40|$|Abstract. In this paper, an {{improved}} artificial bee colony algorithm (IABC) for dynamic environment optimization has been proposed. As {{we compared the}} IABC with greedy algorithm (GA), Particle swarm optimization (PSO) and original artificial bee colony algorithm (ABC), the result of <b>dynamic</b> <b>function</b> optimization shows that the IABC can obtain satisfactory solutions and good tracing performance for <b>dynamic</b> <b>function</b> in time...|$|R
40|$|Function allocation, as {{a process}} used in the {{construction}} of dependable complex systems, is growing in significance. It involves a documented and rational process for deciding what aspects of the system should be controlled by which human roles in the system and how the system should be automated to support these roles more effectively. As computer systems have become more advanced and the control of systems more complex <b>dynamic</b> <b>function</b> allocation has become increasingly desirable in situations where the automation may take over or give back function to the human user. This position statement briefly discusses an approach to <b>dynamic</b> <b>function</b> allocation called <b>dynamic</b> <b>function</b> scheduling where <b>dynamic</b> scheduling of activities takes place on the time dimension and discusses the role that tools may play in helping identify dependable <b>dynamic</b> <b>function</b> scheduling solutions. Complex work systems typically involve teams of people co-operating and using technology to achieve work goals. These goals are usually achieved under time constraint. In order to achieve them in a timely and reliable manner, the implementation of the functions that achieve the goals may vary according to situation. This topic is dealt with in research into <b>dynamic</b> <b>function</b> allocation (see [Hancock and Scallen, 1998] and [Scerbo, 1996] for an overview). The overall focu...|$|R
50|$|The keys shown grey in the figure, {{all being}} <b>function</b> <b>keys,</b> {{constitute}} {{the left and}} right function zones, while all other keys constitute the alphanumeric zone. The reference grid position of any <b>function</b> <b>key</b> may vary according to the specifications listed below. Especially, on a keyboard with considerably more than 47 keys in the alphanumeric zone, the right <b>function</b> <b>keys</b> will get higher column numbers.|$|R
5000|$|In {{the classic}} Mac OS, the <b>function</b> <b>keys</b> could be {{configured}} by the user, with the <b>Function</b> <b>Keys</b> control panel, {{to start a}} program or run an AppleScript. macOS assigns default functionality to , , and [...] (Exposé); [...] (Dashboard); and / (decrease/increase contrast). On newer Apple laptops, all the <b>function</b> <b>keys</b> are assigned basic actions such as volume control, brightness control, [...] (since the laptops lack a keypad), and ejection of disks. Software functions {{can be used by}} holding down the Fn key while pressing the appropriate <b>function</b> <b>key,</b> and this scheme can be reversed by changing the macOS system preferences.|$|R
5000|$|It {{provides}} static {{change to}} the laryngeal framework but {{does not have any}} effect on the <b>dynamic</b> <b>function.</b>|$|R
5000|$|... #Caption: The upper {{keyboard}} has {{the main}} <b>function</b> <b>keys.</b> The SHIFT and ALPHA keys {{are used to}} access the many different <b>functions</b> each <b>key</b> could be.|$|R
50|$|Credit card {{machines}} have four-twelve <b>function</b> <b>keys.</b>|$|R
5000|$|... HP calculators {{use this}} {{arrangement}} to implement hierarchical trees of functions. They are rarely found on PC applications, {{even though the}} first IBM PC BASIC labeled <b>function</b> <b>key</b> use {{at the bottom of}} the screen, and there were 12 <b>function</b> <b>keys,</b> patterned after use on IBM terminals.|$|R
50|$|A <b>function</b> <b>key</b> {{is a key}} on a {{computer}} or terminal keyboard which can be programmed so as to cause an operating system command interpreter or application program to perform certain actions, a form of soft key. On some keyboards/computers, <b>function</b> <b>keys</b> may have default actions, accessible on power-on.|$|R
50|$|<b>Function</b> <b>keys</b> {{are used}} to change view modes. You can switch to the help mode and the proc info mode via F1 and F2 keys, respectively. On {{terminals}} that can't use <b>function</b> <b>keys</b> like GNOME Terminal, ? and / keys can be used alternatively for help and proc modes.|$|R
5000|$|Keyboard: 56 keys, QWERTY layout {{with full}} {{standard}} spacing, 8 programmable <b>function</b> <b>keys,</b> 4 dedicated command keys. These last 12 are tactile [...] "button"-style keys. Almost all keys {{other than the}} 12 <b>function</b> <b>keys</b> are capable of rollover (without phantom keys appearing depressed), so multi-key combinations can be used.|$|R
50|$|Ordinarily the VIC-20's <b>function</b> <b>keys</b> {{could only}} {{be used in a}} program, by {{scanning}} for the appropriate key code when reading the keyboard. In the VIC-20's direct mode they were not available to do anything. With the Super Expander the <b>function</b> <b>keys</b> could be assigned to execute commands in immediate mode. By default they came pre-programmed with the most common BASIC commands, in a similar fashion to GW-BASIC on the IBM PC. The user could then assign their own commands, or any arbitrary string in fact, to the <b>function</b> <b>keys.</b>|$|R
5000|$|... #Caption: ATM in Mercer Island, Washington with <b>function</b> <b>keys</b> ...|$|R
5000|$|... to {{separate}} a guard (boolean expression) from its expression in a <b>dynamic</b> <b>function.</b> Two colons {{are used for}} an Error guard (one or more error numbers).|$|R
5000|$|<b>Function</b> <b>keys</b> on a {{terminal}} may either generate short fixed sequences of characters, often {{beginning with the}} escape character (ASCII 27), or the characters they generate may be configured by sending special character sequences to the terminal. On a standard computer keyboard, the <b>function</b> <b>keys</b> may generate a fixed, single byte code, outside the normal ASCII range, which is translated into some other configurable sequence by the keyboard device driver or interpreted directly by the application program. <b>Function</b> <b>keys</b> may have (abbreviations of) default actions printed on/besides them, or they may have the more common [...] "F-number" [...] designations.|$|R
5000|$|... 10 <b>Function</b> <b>Keys</b> at the top, pre-programmed with shortcuts (LIST, etc.).|$|R
5000|$|... #Caption: Flexowriter {{keyboard}} (1968) with 13 <b>function</b> <b>keys</b> on the right.|$|R
5000|$|Large spacing between keys, {{especially}} the top <b>function</b> <b>keys</b> and others.|$|R
5000|$|The {{number of}} <b>function</b> <b>keys</b> on most PC {{keyboards}} (F1 through F12) ...|$|R
5000|$|Mode-specific {{functions}} are accessible via a unified <b>function</b> <b>key</b> as in fx-4800P ...|$|R
50|$|DeskMate version 1.0 was {{included}} with the original Tandy 1000 and did not work correctly on non-Tandy computers. This was mainly due {{to the use of}} the <b>function</b> <b>keys</b> - as most non-Tandy PCs either did not come with an F12 button or with one that did not act in the same way as a Tandy F12 <b>function</b> <b>key.</b>|$|R
5000|$|In Gypsy, {{the user}} could select the source text, press the [...] "Copy" [...] <b>function</b> <b>key,</b> select the {{destination}} text or insertion point, {{and press the}} [...] "Paste" [...] <b>function</b> <b>key.</b> Between Copy and Paste, the system was, as usual, not in a mode. The user could invoke other commands, such as opening a different document.|$|R
25|$|Adding {{additional}} sophistication to this braking system, {{could be}} done by additional factors such as traction, speed, inertia, set up in <b>dynamic</b> <b>functions,</b> according to the designed fuzzy system.|$|R
50|$|Keyboard: Keytronic {{full stroke}} 93-key with numeric key pad & 17 <b>function</b> <b>keys.</b>|$|R
5000|$|To {{the arrow}} <b>keys</b> or editing <b>functions</b> (Home / End or <b>Function</b> <b>Keys).</b>|$|R
40|$|Dysregulation of {{regulated}} exocytosis {{is linked}} to an array of pathological conditions, including neurodegenerative disorders, asthma and diabetes. Understanding the molecular mechanisms underpinning neuroexocytosis including the processes that allow neurosecretory vesicles to access and fuse with the plasma membrane and to recycle post-fusion, is therefore critical {{to the design of}} future therapeutic drugs that will efficiently tackle these diseases. Despite considerable efforts to determine the principles of vesicular fusion, the mechanisms controlling the approach of vesicles to the plasma membrane in order to undergo tethering, docking, priming, and fusion remain poorly understood. All these steps involve the cortical actin network, a dense mesh of actin filaments localized beneath the plasma membrane. Recent work overturned the long-held belief that the cortical actin network only plays a passive constraining role in neuroexocytosis functioning as a physical barrier that partly breaks down upon entry of Ca 2 + to allow secretory vesicles to reach the plasma membrane. A multitude of new roles for the cortical actin network in regulated exocytosis have now emerged and point to highly <b>dynamic</b> novel <b>functions</b> of <b>key</b> myosin molecular motors. Myosins are not only believed to help bring about dynamic changes in the actin cytoskeleton, tethering and guiding vesicles to their fusion sites, but they also regulate the size and duration of the fusion pore, thereby directly contributing to the release of neurotransmitters and hormones. Here we discuss the functions of the cortical actin network, myosins and their effectors in controlling the processes that lead to tethering, directed transport, docking, and fusion of exocytotic vesicles in regulated exocytosis...|$|R
40|$|Are you {{entering}} {{one or more}} of {{the same}} SAS ® Display Manager System (DMS) commands repeatedly during a session? The DMS offers a convenient way of capturing and saving frequently entered commands in a user-defined macro, and then saving the macro as a <b>function</b> <b>key</b> of your choosing. Are you typing SAS ® code for data exploration during program development or validation, only to delete it soon afterwards? If you are, then this code can be placed in a macro, too, and assigned to a <b>function</b> <b>key.</b> This paper illustrates the purpose and steps that you use to assign a user-defined macro to a <b>function</b> <b>key...</b>|$|R
50|$|Their modern use {{may have}} been popularized by IBM keyboards: first the IBM 3270 terminals, then the IBM PC. IBM use of <b>function</b> <b>keys</b> dates to the IBM 3270 line of terminals, {{specifically}} the IBM 3277 (1972) with 78-key typewriter keyboard or operator console keyboard version, which both featured 12 programmed <b>function</b> (PF) <b>keys</b> in a 3×4 matrix {{at the right of}} the keyboard. Later models replaced this with a numeric keypad, and moved the <b>function</b> <b>keys</b> to 24 keys {{at the top of the}} keyboard. The original IBM PC keyboard (PC/XT, 1981) had 10 <b>function</b> <b>keys</b> (F1-F10) in a 2×5 matrix at the left of the keyboard; this was replaced by 12 keys in 3 blocks of 4 at the top of the keyboard in the Model M ("Enhanced", 1984).|$|R
