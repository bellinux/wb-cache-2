125|731|Public
2500|$|The IBM System/360 Model 67, {{which was}} {{introduced}} Aug. 1965, included an MMU that {{was called a}} <b>dynamic</b> <b>address</b> translation (DAT) box. [...] It had the unusual feature of storing accessed and dirty bits outside of the page table. [...] They refer to physical memory rather than virtual memory, and are accessed by special-purpose instructions. [...] This reduces overhead for the OS, which would otherwise need to propagate accessed and dirty bits from the page tables to a more physically oriented data structure. [...] This makes OS-level virtualization easier.|$|E
2500|$|APL gained its {{foothold}} on mainframe timesharing {{systems from}} the late 1960s through the early 1980s, {{in part because it}} would run on lower-specification systems that were not equipped with <b>Dynamic</b> <b>Address</b> Translation hardware. Additional improvements in performance for selected IBM System/370 mainframe systems included the [...] "APL Assist Microcode" [...] in which some support for APL execution was included in the actual firmware as opposed to APL being exclusively a software product. Somewhat later, as suitably performing hardware was finally becoming available in the mid- to late-1980s, many users migrated their applications to the personal computer environment.|$|E
5000|$|RFC 5061 Stream Control Transmission Protocol (SCTP) <b>Dynamic</b> <b>Address</b> Reconfiguration ...|$|E
40|$|This paper {{proposes a}} {{protocol}} independent <b>Dynamic</b> <b>Addressing</b> scheme for Wireless Media Access Protocols, and discusses related systems and performance issues. <b>Dynamic</b> <b>Addressing</b> allows {{spatial and temporal}} reuse of MAC addresses, thereby reducing the address size {{by a factor of}} 8. This reduces the control overhead in a MACAW [2] style protocol by 30 % to 70 %, and produces an overall performance improvement of 5 % to 33 %. <b>Dynamic</b> <b>Addressing</b> also serves as an enabling technology for two important features in wireless media access protocols - security, and real-time support - as described in related papers. We are implementing the <b>Dynamic</b> <b>Addressing</b> scheme {{as a part of the}} LCMACA wireless media access protocol. 1 Introduction Recent years have witnessed the rapid development of mobile computing devices, such as PDAs, palmtops, and portable computers. A crucial technology that has enabled this development is wireless networking. In the very near future, wireless LANs connecting a variety [...] ...|$|R
50|$|Stevenson, Herbert F. Keswick's Authentic Voice: Sixty-five <b>Dynamic</b> <b>Addresses</b> Delivered at the Keswick Convention 1875-1957. London: Marshall, Morgan & Scott, 1959.|$|R
40|$|With today’s rapidly {{improving}} link-layer technology, and {{the widespread}} adoption of wireless networking, {{the creation of}} large-scale ad hoc networks {{could be construed as}} all but inevitable. Current ad hoc protocol suites do not scale to work efficiently in networks of more than a few hundred nodes. We believe the main reason behind the lack of scalability is that current protocols use flat and static addressing. In this paper, we provide an initial design of a routing layer based on <b>dynamic</b> <b>addressing</b> by providing a separation between address and identity. Each node has a unique permanent identifier and a transient routing address, which indicates its location in the network at any given time. We propose mechanisms to implement <b>dynamic</b> <b>addressing</b> efficiently. Our initial design suggests that <b>dynamic</b> <b>addressing</b> is a promising approach and worth further examination...|$|R
5000|$|Optional MMU {{supporting}} both {{memory protection}} and <b>dynamic</b> <b>address</b> translation.|$|E
5000|$|A Self Configuring and Self Administrating Name System with <b>Dynamic</b> <b>Address</b> Assignment ...|$|E
5000|$|A <b>Dynamic</b> <b>Address</b> Translation {{mechanism}} {{that can be}} used to implement a virtual memory system ...|$|E
40|$|Abstract Online {{services}} {{often use}} IP addresses as client identifierswhen enforcing access-control decisions. The academic community has typically eschewed this approach, how-ever, {{due to the}} effect that NATs, proxies, and <b>dynamic</b> <b>addressing</b> have on a server's ability to identify individualclients. Yet, it is unclear to what extent these edge technolo-gies actually impact the utility of using IP addresses as client identifiers. This paper provides some insights intothis phenomenon. We do so by mapping out the size and extent of NATs and proxies, as well as characterizing thebehavior of <b>dynamic</b> <b>addressing...</b>|$|R
40|$|Abstract [...] - In {{this paper}} we have {{analyzed}} the algorithms, {{in which we}} can analyze the dynamic generation of IP addresses. This concept is based on the application level server logs. The algorithm will take the input (either DNS or IPs) from log on server to produce the identification and signification of <b>dynamic</b> IP <b>addresses</b> for the user in university campus use <b>dynamic</b> IP <b>address.</b> <b>Dynamic</b> IP <b>address</b> may be counted in a fraction of total number of static IP address which can change in a certain time of span. On the basis of this concept we can study and research that how <b>dynamic</b> IP <b>address</b> can use in our university (SGVU) campus WI-FI network. By these results we can analyze the importance of <b>dynamic</b> IP <b>addresses</b> for resolving different types of internet attacks and IP conflicts. We expect the benefits of dynamic IP generation is to enhance the security level of the university WI-FI network and to protect ou...|$|R
5000|$|Distribution: Lock server and 64-bit object IDs support <b>dynamic</b> <b>addressing</b> space (with each {{federation}} {{capable of}} managing up to 65,535 individual databases and 10^24 bytes (one quadrillion gigabytes, or a yottabyte) of physical addressing space).|$|R
5000|$|The use of Virtual {{memory and}} <b>Dynamic</b> <b>Address</b> Translation (DAT) on the IBM S/360-67 in 1967.|$|E
50|$|It {{included}} <b>Dynamic</b> <b>address</b> translation (DAT) hardware, a pre-requisite {{for the new}} {{virtual memory}} operating systems (OS/VS1, OS/VS2).|$|E
5000|$|The [...] "DAT Box" [...] (<b>Dynamic</b> <b>Address</b> Translation), {{announced}} as {{an addition to}} the S/370 series in 1972 ...|$|E
40|$|The Stream Control Transmission Protocol (SCTP) is a {{reliable}} message-based transport protocol {{developed by the}} IETF that could replace TCP in some applications. SCTP allows endpoints to have multiple IP addresses {{for the purposes of}} fault tolerance. There is on-going work to extend the SCTP multihoming functions to support <b>dynamic</b> <b>addressing</b> and endpoint mobility. This paper explains how the multihoming and mobility features can be exploited for denial-of-service attacks, connection hijacking, and packet flooding. We propose implementation guidelines for SCTP and changes to the mobility extensions that prevent most of the attacks. The same lessons apply to multihomed TCP variants and other transport-layer protocols that incorporate some flavor of <b>dynamic</b> <b>addressing.</b> 1...|$|R
5000|$|Because PROFINET uses TCP/IP a MAC and IP address are used. A MAC address changes if {{the device}} is replaced. An IP address {{is a form of}} <b>dynamic</b> <b>addressing.</b> Because there was a need for a fixed address a device name is used.|$|R
40|$|A {{static memory}} {{reference}} exhibits a unique property when its <b>dynamic</b> memory <b>addresses</b> are congruent {{with respect to}} some non-trivial modulus. Extraction of this congruence information at compile-time enables new classes of program optimization. In this paper, we present methods for forcing congruence among the <b>dynamic</b> <b>addresses</b> of a memory reference. We also introduce a compiler algorithm for detecting this property. Our transformations do not require interprocedural analysis and introduce almost no overhead. As a result, they {{can be incorporated into}} real compilation systems...|$|R
50|$|The {{invention}} of <b>dynamic</b> <b>address</b> translation (the function provided by an MMU) originally reduced {{the need for}} position-independent code because every process could have its own independent address space (range of addresses). However, multiple simultaneous jobs using the same code created a waste of physical memory. If two jobs run entirely identical programs, <b>dynamic</b> <b>address</b> translation provides a solution by allowing the system simply to map two different jobs' address 32K to the same bytes of real memory, containing the single copy of the program.|$|E
5000|$|It offered [...] "dynamic {{relocation}} of problem programs using the <b>dynamic</b> <b>address</b> translation facilities of the 2067 Processing Unit, permitting response, within seconds, to many simultaneous users" ...|$|E
5000|$|... thereby {{permitting}} {{operations on}} up to 2^24-1 bytes (16 MB), vs. the 256-byte limits on the 360's MVC and CLC, but lacked a DAT (<b>Dynamic</b> <b>Address</b> Translation) box.|$|E
5000|$|Connection through routers, {{firewalls}} and <b>dynamic</b> IP <b>addresses</b> ...|$|R
50|$|All {{consumer}} plans {{provide a}} <b>dynamic</b> IP <b>address</b> only.|$|R
40|$|For Internet {{telephony}} systems, it {{is necessary}} to establish a connection between a caller and recipient using the Internet Protocol (IP) address before actual voice communication can take place. A problem of <b>dynamic</b> IP <b>addressing</b> arises when the connection to the Internet is made through an Internet Service Provider (ISP) since the IP address is dynamically allocated only at connection time. This paper discusses a <b>dynamic</b> IP <b>addressing</b> system to support the establishment of connections between users. A number of <b>dynamic</b> IP <b>addressing</b> methods that are classified as on-line methods, namely, WorldWide -Web approach, Exchange Server and Dynamic Domain Name System, or off-line methods, namely, Electronic Mail and Directory Service Lookup, are proposed, implemented and contrasted. Keywords: <b>Dynamic</b> IP <b>addressing,</b> Internet telephony systems, voice communication 2 1. Introduction Recently, as a result of declining costs of computer hardware, advances in computer technology and phenomenal g [...] ...|$|R
5000|$|<b>Dynamic</b> <b>Address</b> Translation (DAT) {{with support}} for 24 or 32-bit virtual {{addresses}} using segment and page tables (up to 16 segments each containing up to 256 4096 byte pages) ...|$|E
50|$|Virtual Memory (VM) {{and demand}} paging support {{were added to}} UMMPS in November 1967, making MTS the first {{operating}} system to use the <b>Dynamic</b> <b>Address</b> Translation (DAT) features that {{were added to the}} IBM S/360-67.|$|E
5000|$|... full {{virtual memory}} {{through a new}} {{microcode}} floppy disk on the 370/145 and a hardware upgrade to include a DAT box on the 370/155 and 370/165. A <b>Dynamic</b> <b>Address</b> Translation (DAT) option was not announced until 1972; ...|$|E
50|$|End {{users of}} Internet access receive an {{allocation}} of IP addresses, often {{only a single}} address, by their Internet service provider. The assigned addresses may either be fixed (i.e. static), or may change from time to time, a situation called <b>dynamic.</b> <b>Dynamic</b> <b>addresses</b> are generally given only to residential customers and small businesses, as most enterprises specifically require static addresses.|$|R
40|$|Abstract- In this paper, a {{reliability}} analysis {{is carried out}} to state a performance comparison between two recently proposed proactive routing algorithms. These protocols are able to scale in ad hoc and sensor networks by resorting to <b>dynamic</b> <b>addressing,</b> {{to face with the}} topology variability, which is typical of ad hoc, and sensor networks. Numerical simulations are also carried out to corroborate the results of the analysis. I...|$|R
40|$|Today’s Internet {{contains}} {{a large portion}} of “dynamic ” IP addresses, which are assigned to clients upon request. A significant amount of malicious activities have been reported from dynamic IP space, such as spamming, botnets, etc [...] Accurate identification of <b>dynamic</b> IP <b>addresses</b> will help build blacklists of suspicious hosts with more confidence, and help track the sources of different types of anomalous activities. In this paper, we contrast traffic activity patterns between static and <b>dynamic</b> IP <b>addresses</b> in a large campus network, as well as their activity patterns when countering outside scanning traffic. Based on the distinct characteristics observed, we propose a scanning-based technique for identifying <b>dynamic</b> IP <b>addresses</b> in blocks. We conduct an experiment using a month-long data collected from our campus network, and instead of scanning our own network, we utilize identified outside scanning traffic. The experiment results demonstrate a high classification rate with low false positive rate. As an on-going work, we also introduce our design of an online classifier that identifies <b>dynamic</b> IP <b>addresses</b> in any network in real-time. 1...|$|R
50|$|RFC 3330 defines {{an address}} block 169.254.0.0/16 {{for the special}} use in link-local {{addressing}} for IPv4 networks. In IPv6, every interface, whether using static or <b>dynamic</b> <b>address</b> assignments, also receives a local-link address automatically in the block fe80::/10.|$|E
5000|$|... "Unifying the {{architecture}} and control programs {{of business and}} scientific computers both large and small" [...] (championed by Brooks/Amdahl; this group rejected <b>dynamic</b> <b>address</b> translation, fearing [...] "unevaluated techniques or technologies" [...] {{as the basis of}} an entire product line), versus ...|$|E
50|$|IPAM {{tools are}} {{increasingly}} important as new IPv6 networks are deployed with larger address pools, different subnetting techniques {{and more complex}} 128-bit hexadecimal numbers, which are not as easily human-readable as IPv4 addresses. IPv6 networking, mobile computing, and multihoming require more <b>dynamic</b> <b>address</b> management.|$|E
40|$|This paper {{introduces}} a novel method, UDmap, to identify dynamically assigned IP addresses and analyze their dynamics pattern. UDmap is fully automatic, and relies only on application-level server logs {{that are already}} available today. We applied UDmap to a month-long Hotmail user-login trace and identified {{a significant number of}} <b>dynamic</b> IP <b>addresses</b> – more than 102 million. This suggests that the portion of <b>dynamic</b> IP <b>addresses</b> in the Internet is by no means negligible. In addition, using this information combined with a three-month Hotmail email server log, we were able to establish that 97 % of mail servers setup on <b>dynamic</b> IP <b>addresses</b> sent out solely spam emails, likely controlled by zombies. Moreover, these mail servers sent out a large amount of spam – counting towards over 42 % of all spam emails to Hotmail. These results highlight the importance of being able to accurately identify <b>dynamic</b> IP <b>addresses</b> for spam filtering, and we expect similar benefits of it for phishing site identification and botnet detection. To our knowledge, this is the first successful attempt to automatically identify and understand IP dynamics...|$|R
40|$|Damian Clifford and Jessica Schroers, legal {{researchers}} at KU Leuven, {{look at whether}} <b>dynamic</b> IP <b>addresses</b> fall {{within the scope of}} European Data Protection legislation given the identifiability of users based on the processing of IP addresses. In this post, they examine the written submissions and the hearing of the the Court of Justice of the European Union (CJEU) which provide some direction on whether <b>dynamic</b> IP <b>addresses</b> can be interpreted as personal data...|$|R
25|$|Windows Vista {{features}} a <b>Dynamic</b> System <b>Address</b> Space that allocates virtual memory and kernel page tables on-demand. It also supports very large registry sizes.|$|R
