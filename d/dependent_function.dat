218|2390|Public
5000|$|All {{values have}} a type, {{such as a}} base type (e.g. [...] is read as “ is a boolean”) or a (<b>dependent)</b> <b>{{function}}</b> type (e.g. [...] is read as “ is a function from natural numbers to booleans”).|$|E
5000|$|... getopt is {{a system}} <b>dependent</b> <b>function.</b> The {{implementation}} of getopt in GNU C Library does permute {{the contents of the}} argument vector as it scans, so that eventually all the non-option arguments are at the end. On the contrary, the implementation of getopt in BSD C Library does not permute the argument vector and returns -1 if it encounters a non-option argument.|$|E
5000|$|Epigram is {{essentially}} a typed lambda calculus with generalized algebraic data type extensions, except for two extensions. First, types are first-class entities, of type types are arbitrary expressions of type , and type equivalence is {{defined in terms of}} the types' normal forms. Second, it has a <b>dependent</b> <b>function</b> type; instead of , , where [...] is bound in [...] to the value that the function's argument (of type [...] ) eventually takes.|$|E
5000|$|The symbols [...] and [...] {{represent}} scheme <b>dependent</b> <b>functions</b> (of {{the limited}} extrapolated cell edge variables), i.e., ...|$|R
5000|$|The type [...] has a {{constructor}} (or introduction rule) {{for each}} type former in the type theory. The one for <b>dependent</b> <b>functions</b> would be: ...|$|R
5000|$|The PROPT {{system uses}} the TomSym {{symbolic}} source transformation engine to model optimal control problems. It {{is possible to}} define independent variables, <b>dependent</b> <b>functions,</b> scalars and constant parameters: ...|$|R
5000|$|A {{function}} whose type {{of return}} value varies with its argument (i.e. {{there is no}} fixed codomain) is a <b>dependent</b> <b>function</b> {{and the type of}} this function is called dependent product type, pi-type or simply dependent type. For this example, the dependent type would be written asor asIf [...] is a constant function, the corresponding dependent product type is equivalent to an ordinary function type. That is, [...] is judgementally equal to [...]|$|E
50|$|In {{the case}} of the LF logical framework, the meta-language is the λΠ-calculus. This is a system of first-order <b>dependent</b> <b>function</b> types which are related by the propositions as types {{principle}} to first-order minimal logic. The key features of the λΠ-calculus are that it consists of entities of three levels: objects, types and kinds (or type classes, or families of types). It is predicative, all well-typed terms are strongly normalizing and Church-Rosser and the property of being well-typed is decidable. However, type inference is undecidable.|$|E
50|$|Primary {{injuries}} {{are caused by}} blast overpressure waves, or shock waves. These are especially likely {{when a person is}} close to an exploding munition, such as a land mine. The ears are most often affected by the overpressure, followed by the lungs and the hollow organs of the gastrointestinal tract. Gastrointestinal injuries may present after a delay of hours or even days. Injury from blast overpressure is a pressure and time <b>dependent</b> <b>function.</b> By increasing the pressure or its duration, the severity of injury will also increase.|$|E
5000|$|These methods make differing {{assumptions}} about the flow, but all {{take into account the}} general form of the constraint [...] for general flow <b>dependent</b> <b>functions</b> [...] and [...]|$|R
40|$|In general, {{contemporary}} nursing {{literature from}} Western countries {{does not take}} a bold stand on the very controversial issue of the <b>dependent</b> and independent <b>functions</b> of the nurse practitioner. The authors write {{as if they are}} skating on very thin ice. Text books on nursing imply {{a great deal about the}} practice potential of nurses but ever and anon there is a subtle reversion to the concept that nursing has certain <b>dependent</b> <b>functions,</b> meaning functions that require a doctor’s authorisation, and certain independent functions that are carried out on the nurse’s own initiative, and responsibility. In general the majority of authors consulted appear to subscribe to the concept postulated by Sarney when he says A good nursing practice act will separate the independent functions (what nurse can do on her own) from the <b>dependent</b> <b>functions</b> (what she can do only under the direction o f a doctor) (Sarney 1968 : 18) ...|$|R
50|$|LinuxSampler, as {{the name}} indicates, was {{originally}} conceived to run on Linux, {{but thanks to the}} abstraction of audio and MIDI drivers and platform <b>dependent</b> <b>functions,</b> the sampler was successfully ported to Windows, OS X and FreeBSD.|$|R
5000|$|At {{the level}} of {{formulas}} and types, the correspondence says that implication behaves {{the same as a}} function type, conjunction as a [...] "product" [...] type (this may be called a tuple, a struct, a list, or some other term depending on the language), disjunction as a sum type (this type may be called a union), the false formula as the empty type and the true formula as the singleton type (whose sole member is the null object). Quantifiers correspond to <b>dependent</b> <b>function</b> space or products (as appropriate). [...] This is summarized in the following table: ...|$|E
5000|$|A {{logic is}} {{represented}} in the LF logical framework by the judgements-as-types representation mechanism. This is inspired by Per Martin-Löf's development of Kant's notion of judgement, in the 1983 Siena Lectures. The two higher-order judgements, the hypothetical [...] and the general, , correspond to the ordinary and <b>dependent</b> <b>function</b> space, respectively. The methodology of judgements-as-types is that judgements are represented as the types of their proofs. A logical system [...] is represented by its signature which assigns kinds and types to a finite set of constants that represents its syntax, its judgements and its rule schemes. An object-logic's rules and proofs are seen as primitive proofs of hypothetico-general judgements [...]|$|E
5000|$|Reciprocal space (also called [...] "k-space") is {{the space}} in which the Fourier {{transform}} of a spatial function is represented (similarly the frequency domain is {{the space in}} which the Fourier transform of a time <b>dependent</b> <b>function</b> is represented). A Fourier transform takes us from [...] "real space" [...] to reciprocal space or vice versa. Reciprocal space comes into play regarding wave-mechanics: As a plane wave can be written by an oscillatory term [...] with wave vector [...] and angular frequency , it {{can be regarded as}} both a function of [...] and [...] (and the spectroscopic part as a function of both [...] and [...] ). In space, the periodicity oscillates with [...] - therefore for a given phase, [...] and [...] are reciprocal to each other: [...] and [...]|$|E
40|$|We prove both {{necessary}} and sufficient second order conditions of extrema for variational problems involving any higher order continuously twice differentiable Lagrangians with multi-valued <b>dependent</b> <b>functions</b> of several variables. Our analysis is {{performed in the}} framework of the finite dimensional total jet space...|$|R
5000|$|Predicate {{logic is}} an {{extension}} of propositional logic, adding quantifiers. Howard and de Bruijn extended lambda calculus to match this more powerful logic by creating types for <b>dependent</b> <b>functions,</b> which correspond to [...] "for all", and dependent pairs, which correspond to [...] "there exists".|$|R
5000|$|We {{follow the}} {{approach}} of Kermani (Kermani, et al., 2003), and present a third-order upwind biased scheme, where the symbols [...] and [...] again represent scheme <b>dependent</b> <b>functions</b> (of the limited reconstructed cell edge variables). But for this case they are based upon parabolically reconstructed states, i.e., ...|$|R
40|$|Prof. Cai Wen [1] {{defined the}} 1 -D Distance and 1 -D <b>Dependent</b> <b>Function</b> in 1983. F. Smarandache [6] {{generalized}} them to n-D Distance and n-D <b>Dependent</b> <b>Function</b> respectively in 2012 during his postdoc research at Guangdong University of Technology in Guangzhou. O. I. Şandru [7] extended the last results in 2013. Now [2015], {{as a further}} generalization, we unify all these results into a single formula for the n-D Distance and respectively for the n-D <b>Dependent</b> <b>Function...</b>|$|E
40|$|Abstract. Extension theory {{are widely}} used in many fields such as machinery, manufacturing, meterials and automation. <b>Dependent</b> <b>function</b> {{is the core of}} {{extension}} set. On the basis of extension distance between the point and the infinite interval, we construct the formulas of location value and the corresponding elementary <b>dependent</b> <b>function</b> whose discussion field is an infinite interval and positive field finite, and get some properties. The proposed function allows extension theory in the areas of materials science and engineering science with a broader scope...|$|E
40|$|The lL-calculus is a {{dependent}} type theory with both linear and intuitionistic <b>dependent</b> <b>function</b> spaces. It {{can be seen}} to arise in two ways. Firstly, in logical frameworks, where it is the language of the RLF logical framework and can uniformly represent linear and other relevant logics. Secondly, it is a presentation of the proof-objects of BI, the logic of bunched implications. BI is a logic which directly combines linear and intuitionistic implication and, in its predicate version, has both linear and intuitionistic quantifiers. The lL-calculus is the dependent type theory which generalizes both implications and quantifiers. In this paper, we describe the categorical semantics of the lL-calculus. This is given by Kripke resource models, which are monoid-indexed sets of functorial Kripke models, the monoid giving an account of resource consumption. We describe a class of concrete, set-theoretic models. The models are given by the category of families of sets, parametrized over a small monoidal category, in which the intuitionistic <b>dependent</b> <b>function</b> space is described in the established way, but the linear <b>dependent</b> <b>function</b> space is described using Day's tensor product...|$|E
5000|$|Polymorphic {{functions}} {{are an important}} example of <b>dependent</b> <b>functions,</b> that is, <b>functions</b> having <b>dependent</b> type. Given a type, these functions act on elements of that type (or on elements of a type constructed (derived, inherited) from that type). A polymorphic function returning elements of type C would have a polymorphic type written as ...|$|R
30|$|Our {{solution}} for overcoming these difficulties is as follows. The mixing process is modeled stochastically and inferred {{on the basis}} of this model. To handle source number uncertainty, we introduce a nonparametric Bayesian approach. The reverberation is absorbed by using frequency-domain processing. Unified analysis of the source separation and permutation resolution is used to optimize these mutually <b>dependent</b> <b>functions.</b>|$|R
40|$|Abstract. Let W ≤ ¯d. We wish {{to extend}} the results of [2] to classes. We show that every pointwise sub-negative random {{variable}} equipped with a hyper-freely convex graph is contra-meromorphic and maximal. This reduces the results of [2] to a recent result of Zhao [17]. The goal of the present article is to extend generic, <b>dependent</b> <b>functions.</b> 1...|$|R
40|$|Abstract. Dependent {{types are}} useful for statically {{checking}} detailed specifications of programs and detecting pattern match or array bounds errors. We propose a novel approach to applications of dependent types to practical programming languages: Instead of requiring programmers’ declaration of <b>dependent</b> <b>function</b> types (as in Dependent ML) or trying to infer them from function definitions only (as in size inference), wemine the output specification of a <b>dependent</b> <b>function</b> from the function’s call sites, and then propagate that specification backward to infer the input specification. We have implemented a prototype type inference system which supports higher-order functions, parametric polymorphism, and algebraic data types based on our approach, and obtained promising experimental results. ...|$|E
40|$|Is quasi-Newton {{iteration}} utilizing Broyden/Fletcher/Goldfarb/Shanno {{update on}} inverse Hessian matrix. Capable of solving constrained optimization unconstrained optimization and constraints only problems with {{one to five}} independent variables from one to five constraint functions and one <b>dependent</b> <b>function</b> optimized...|$|E
40|$|The -calculus is a {{dependent}} type theory with both linear and intuitionistic <b>dependent</b> <b>function</b> spaces. It {{can be seen}} to arise in two ways. Firstly, in logical frameworks, where it is the language of the RLF logical framework and can uniformly represent linear and other relevant logics. Secondly, it is a presentation of the proof-objects of BI, the logic of bunched implications. BI is a logic which directly combines linear and intuitionistic implication and, in its predicate version, has both linear and intuitionistic quantiers. The -calculus is the dependent type theory which generalizes both implications and quantiers. In this paper, we study the categorical semantics of the -calculus. This is given by Kripke resource models, which are a monoid-indexed set of functorial Kripke models, the monoid giving an account of resource consumption. A class of concrete, set-theoretic models is given by the category of families of sets parametrized over a small monoidal category, in which the intuitionistic <b>dependent</b> <b>function</b> space is described in the established way, but the linear <b>dependent</b> <b>function</b> space is described using Day's tensor product. Keywords: dependent type theory, categorical semantics, logical frameworks, sub-structural logics...|$|E
40|$|Key words: durability; evaluation; {{concrete}} bridges in service; fuzzy mathematic theory. Abstract: Assessment of {{the structure}} durability of concrete bridge in service is crucial for determining whether their service performance is meeting the design requirements or not. In this paper we classify the whole structure of bridge into two levels, i. e. bridge structure and bridge components. A two-level-multi-index model for evaluating the durability of concrete bridges in service is established based on the <b>dependent</b> <b>functions</b> of various factors, in which the <b>dependent</b> <b>functions</b> are chosen {{in accordance with the}} difference of various factors affecting the deterioration of durability of components. In this model, the durability of the bridge is divided into five different fuzzy levels: intact, disrepaired, damaged, severely damaged, and dangerous. Finally, based on fuzzy mathematics theory, the durability level of a bridge in practice is evaluated by using the maximum subordination principle...|$|R
40|$|We present new second derivative, {{generally}} covariant {{theories of}} gravity for spherically symmetric spacetimes (general covariance {{is in the}} t-r plane) belonging to the class where the spherically symmetric Einstein-Hilbert theory is modified {{by the presence of}} g_θθ <b>dependent</b> <b>functions.</b> In 3 + 1 dimensional vacuum spacetimes there is three-fold infinity of freedom in constructing such theories as revealed by the presence of three arbitrary g_θθ <b>dependent</b> <b>functions</b> in the Hamiltonian (matter Hamiltonian also has the corresponding freedom). This result is not a contradiction to the theorem of Hojman et. al. [1] which is applicable to the full theory whereas the above conclusion is for symmetry reduced sector of the theory (which has a much reduced phase space). In the full theory where there are no special symmetries, the result of Hojman et. al. will continue to hold. In the process we also show that theories where the constraint algebra is deformed by the presence of g_θθ <b>dependent</b> <b>functions</b> - {{as is the case in}} the presence of inverse triad corrections in loop quantum gravity - can always be brought to the form where they obey the standard (undeformed) constraint algebra by performing a suitable canonical transformation. We prove that theories obtained after performing canonical transformation are inequivalent to the symmetry reduced general relativity and that the resulting theories fall within the purview of the theories mentioned above. Comment: Significant changes made to the draft, title changed, conclusions remain unchanged. 24 page...|$|R
40|$|Generalized Ito {{formulae}} are proved {{for time}} <b>dependent</b> <b>functions</b> of continuous real valued semi-martingales. The conditions involve left {{space and time}} first derivatives, with the left space derivative required to have locally bounded two-dimensional variation. In particular a class of functions with discontinuous first derivative is included. An estimate of Krylov allows further weakening of these conditions when the semi-martingale is a diffusion. ...|$|R
40|$|The lambdaLambda-calculus is a {{dependent}} type theory with both linear and intuitionistic <b>dependent</b> <b>function</b> spaces. It {{can be seen}} to arise in two ways. Firstly, in logical frameworks, where it is the language of the RLF logical framework and can uniformly represent linear and other relevant logics. Secondly, it is a presentation of the proof-objects of a structural variation, with Dereliction, of a fragment of BI, the logic of bunched implications. As such, it is also closely related to linear logic. BI is a logic which directly combines linear and intuitionistic implication and, in its predicate version, has both linear and intuitionistic quantifiers. The lambdaLambda-calculus is the dependent type theory which generalizes both implications and quantifiers. In this paper, we study the categorical semantics of the lambdaLambda-calculus, gives a theory of 'Kripke resource models', i. e. monoid-indexed sets of functorial Kripke models, in which the monoid gives an account of resource consumption. A class of concrete, set-theoretic models is given by the category of families of sets parametrized over a small monoidal category, in which the intuit ionistic <b>dependent</b> <b>function</b> space is described in the established way, but the linear <b>dependent</b> <b>function</b> space is described using Day's tensor product...|$|E
40|$|Abstract: This paper {{proposes a}} {{cooperative}} censoring spectrum sensing {{scheme based on}} <b>dependent</b> <b>function</b> of exten-sion theory for Cognitive Radio Sensor Networks (CRSN). The scheme uses the <b>dependent</b> <b>function</b> of Extension theory to identify {{the presence or absence}} of the licensed user's (LU) signal, and then calculate the related degree through de-pendent function to identify the initial test results of licensed users, and then send these results to the fusion center. Use a trust evaluation scheme based on noise jamming and channel attenuation for each node, and then this trust evaluation re-sult of each node is sent to the fusion center. The fusion center makes the final decision by the K-M rule. Simulation re-sults show that the proposed scheme could improve the detect probability effectively...|$|E
40|$|Asymptotic {{expansions}} {{are derived}} for the posterior distribution of a data <b>dependent</b> <b>function</b> {{of the mean}} of randomly censored survival data. The main result is a correction term for the transformed variable. Applications to average and fixed parameter confidence intervals are discussed. Parameter transformations Posterior distributions Normal likelihood...|$|E
40|$|The {{semantics}} of {{assignment and}} mutual exclusion in concurrent and multi-core/multi-processor systems is presented with attention to low level architectural features {{in an attempt}} to make the presentation realistic. Recursive functions on event sequences are used to define state <b>dependent</b> <b>functions</b> and variables in ordinary (non-formal-method) algebra. Comment: Technical report on using recursive functions for the low level semantics of concurrent system...|$|R
40|$|When {{programs}} {{communicate with}} other programs, flexibility is demanded. Programs {{do not necessarily}} have information about each other. When assigning types to these communications {{a certain amount of}} dynamic typing is unavoidable. But we do not want our entire language to become dynamically typed, and consequently an interface between the statically and dynamically typed parts of the program has to be defined. Such an interface, using dynamics, has been introduced by Abadi et al. Leroy and Mauni extended the system of dynamics to allow the inclusion of polymorphic objects in dynamics. In this paper we extend the system even further with a restricted form of type <b>dependent</b> <b>functions,</b> which allow us to abstract over the types of the dynamics on functional level. In Clean, these type <b>dependent</b> <b>functions</b> will be implemented by overloading. 1 Introduction When programs communicate with other programs, or possibly with other incarnations of themselves, flexibility is demanded. Programs do [...] ...|$|R
40|$|Cosas is {{a library}} for doing macros-free type-dependent generic {{programming}} in Scala: 	<b>Dependent</b> <b>functions</b> {{which can be}} parametric and composed. All operations are implemented as <b>dependent</b> <b>functions.</b> They can wrap std FunctionXs. 	KLists as heterogeneous lists with a bound on the their types, covariant on both element types and bound. They are now a basic building block of the library. Interoperable with std Lists. Support for basic dependently typed operations on them: foldLeft and foldRight, map, etc. Common functions on KLists implemented in terms of these combinators. 	Types include now product and function types. Records are wrappers over product types with no duplicate elements. Denotations are covariant on the value. Removed subset types. 	code reorg there are now separate packages instead of objects 	test coverage is almost 100 % now. Set up codacy and scoverage. 	drop Scala 2. 10 due to the amazing amount of workarounds needed, and 2. 12 being already in milestone stage. 	drop shapeless dependency cosas is now dependency-free...|$|R
