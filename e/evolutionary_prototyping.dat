79|53|Public
5000|$|When {{developing}} a system using <b>evolutionary</b> <b>prototyping,</b> {{the system is}} continually refined and rebuilt.|$|E
50|$|<b>Evolutionary</b> <b>prototyping</b> (also {{known as}} {{breadboard}} prototyping) {{is quite different}} from throwaway prototyping. The main goal when using <b>evolutionary</b> <b>prototyping</b> is to build a very robust prototype in a structured manner and constantly refine it. The reason for this approach is that the evolutionary prototype, when built, forms the heart of the new system, and the improvements and further requirements will then be built.|$|E
50|$|In <b>evolutionary</b> <b>prototyping,</b> {{developers}} {{can focus}} themselves to develop {{parts of the}} system that they understand instead of working on developing a whole system.|$|E
50|$|DSDM prototypes can {{sometimes}} be throwaway or <b>evolutionary.</b> <b>Evolutionary</b> <b>prototypes</b> may be evolved horizontally (breadth then depth) or vertically (each section is built in detail with additional iterations detailing subsequent sections). <b>Evolutionary</b> <b>prototypes</b> can eventually evolve into final systems.|$|R
40|$|<b>Evolutionary</b> <b>prototype</b> {{selection}} {{has shown}} its effectiveness {{in the past}} in the prototype selection domain. It improves in most of the cases the results offered by classical pro-totype selection algorithms but its computational cost is expensive. In this paper, we analyze the behavior of the <b>evolutionary</b> <b>prototype</b> selection strategy, considering a com-plexity measure for classification problems based on overlapping. In addition, we have analyzed different k values for the nearest neighbour classifier in this domain of study to see its influence on the results of PS methods. The objective consists of predicting when the <b>evolutionary</b> <b>prototype</b> selection is effective for a particular problem, based on this overlapping measure...|$|R
50|$|The {{development}} team, {{with the}} change requests in hand from all the sites, then produce a new <b>evolutionary</b> <b>prototype</b> using conventional methods.|$|R
50|$|Software {{prototyping}} {{has many}} variants. However, {{all of the}} methods are in some way based on two major forms of prototyping: throwaway prototyping and <b>evolutionary</b> <b>prototyping.</b>|$|E
50|$|Evolutionary Systems Development is a {{class of}} methodologies that attempt to {{formally}} implement <b>evolutionary</b> <b>prototyping.</b> One particular type, called Systemscraft is described by John Crinnion in his book Evolutionary Systems Development.|$|E
50|$|The {{basis of}} Systemscraft, not unlike <b>evolutionary</b> <b>prototyping,</b> {{is to create}} a working system from the initial {{requirements}} and build upon it in a series of revisions. Systemscraft places heavy emphasis on traditional analysis being used throughout the development of the system.|$|E
50|$|An <b>evolutionary</b> <b>prototype</b> is {{constructed}} and {{made into a}} baseline using conventional development strategies, specifying and implementing only the requirements that are well understood.|$|R
40|$|Evolutionary {{algorithms}} {{has been}} recently used for prototype selection showing good results. An important {{problem that we}} can find is the scaling up problem that appears evaluating the <b>Evolutionary</b> <b>Prototype</b> Selection algorithms in large size data sets. In this paper, we offer a proposal to solve the drawbacks introduced by the evaluation of large size data sets using <b>evolutionary</b> <b>prototype</b> selection algorithms. In order to do this we have proposed a combination of stratified strategy and CHC as representative evolutionary algorithm model. This study includes a comparison between our proposal and other non-evolutionary prototype selection algorithms combined with the stratified strategy. The results show that stratified <b>evolutionary</b> <b>prototype</b> selection consistently outperforms the non-evolutionary ones, the main advantages being: better instance reduction rates, higher classification accuracy and reduction in resources consumption. Ó 2004 Elsevier B. V. All rights reserved...|$|R
50|$|<b>Evolutionary</b> <b>prototypes</b> have an {{advantage}} over throwaway prototypes {{in that they are}} functional systems. Although they may not have all the features the users have planned, they may be used on an interim basis until the final system is delivered.|$|R
50|$|The {{spiral model}} is a risk-driven process model {{generator}} for software projects. Based on the unique risk patterns of a given project, the spiral model guides a team to adopt elements {{of one or more}} process models, such as incremental, waterfall, or <b>evolutionary</b> <b>prototyping.</b>|$|E
5000|$|Davis' {{belief is}} that to try to [...] "retrofit quality onto a rapid prototype" [...] is not the correct method when trying to combine the two approaches. His idea is to engage in an <b>evolutionary</b> <b>prototyping</b> {{methodology}} and rapidly prototype {{the features of the}} system after each evolution.|$|E
5000|$|Developer {{attachment}} to prototype: Developers can also {{become attached to}} prototypes they have {{spent a great deal}} of effort producing; this can lead to problems, such as attempting to convert a limited prototype into a final system when it does not have an appropriate underlying architecture. (This may suggest that throwaway prototyping, rather than <b>evolutionary</b> <b>prototyping,</b> should be used.) ...|$|E
40|$|The aim of {{this thesis}} is to {{identify}} mechanisms for supporting collaboration around physical artefacts in co-located and remote settings. To explore the research question in the project, a Research through Design approach has been adopted. A technology probe - an <b>evolutionary</b> <b>prototype</b> of a remote collaboration system - {{will be used to}} fuel the research. The prototype will facilitate collaboration between small groups around physical artefacts in an augmented learning environment. The prototype will inform future collaborative augmented reality technology design...|$|R
40|$|Abstract. Unbalanced {{data in a}} {{classification}} problem appears when {{there are many more}} instances of some classes than others. Several solutions were proposed to solve this problem at data level by undersampling. The aim of this work is to propose <b>evolutionary</b> <b>prototype</b> selection algorithms that tackle the problem of unbalanced data by using a new fitness function. The results obtained show that a balancing of data performed by evolutionary under-sampling outperforms previously proposed under-sampling methods in classification accuracy, obtaining reduced subsets and getting a good balance on data. ...|$|R
40|$|It is {{estimated}} {{in a recent}} OECD International Adult Literacy Survey that up to 500, 000 Irish adults are functionally illiterate, that is many people have difficulty in reading and understanding everyday documents. We address this problem by allowing users to interact with speech enabled e-Learning literacy content using multimodal interfaces. We present two experimental prototypes that explore technical solutions and identify an application architecture suitable for literacy e-Learning. The implementation of an <b>evolutionary</b> <b>prototype</b> that uses client side technology is described and feedback from {{this phase of the}} project is reported. 1...|$|R
5000|$|Operational {{prototyping}} {{was proposed}} by Alan Davis {{as a way}} to integrate throwaway and <b>evolutionary</b> <b>prototyping</b> with conventional system development. [...] "It offers the best of both the quick-and-dirty and conventional-development worlds in a sensible manner. Designers develop only well-understood features in building the evolutionary baseline, while using throwaway prototyping to experiment with the poorly understood features." ...|$|E
50|$|Numerous {{models have}} been created to develop software, some of which {{emphasize}} construction more than others. Some models are more linear from the construction point of view, such as the waterfall and staged-delivery life cycle models. These models treat construction as an activity which occurs only after significant prerequisite work has been completed—including detailed requirements work, extensive design work, and detailed planning. Other models are more iterative, such as <b>evolutionary</b> <b>prototyping,</b> Extreme Programming, and Scrum. These approaches tend to treat construction as an activity that occurs concurrently with other software development activities, including requirements, design, and planning, or overlaps them.|$|E
40|$|<b>Evolutionary</b> <b>prototyping</b> {{focuses on}} the {{iteration}} of software planning, implementation, and evaluation while gathering a correct and consistent set of requirements. The process lends particular strength to building quality software due, in part, to the ongoing clarification of existing requirements and the discovery of previously missing or unknown requirements. Traditionally, however, the iterative reexamination of a system’s requirements {{has not been the}} panacea that practitioners sought due to the predisposition for requirements creep and the difficulty in managing it. This thesis describes the use of <b>evolutionary</b> <b>prototyping</b> in conjunction with an aggressive risk-mitigation strategy. Together, these techniques support successful requirement discovery and clarification and guard against the negative effects of requirements creep; an aspect that general <b>evolutionary</b> <b>prototyping</b> methodologies have not mastered. These techniques are embodied in a comprehensive software development model, which has been christened as the EPRAM (<b>Evolutionary</b> <b>Prototyping</b> with Risk Analysis and Mitigation) model. To ensure that quality i...|$|E
40|$|In this paper, {{we present}} an {{approach}} to the object-oriented software development which is based on: i) automatic generation of a throwaway prototype from the initial specification in a formal, declarative, object-oriented specification language, ii) validation of user requirements and refinement of the specification by using this prototype, and iii) automatic translation from the validated specification types to programming classes including the semantics of the formal specification by means of assertions. The last step is achieved by using an object-oriented implementation language supporting Eiffel-like assertions and the "Design by Contract" technique; therefore, these classes force the first <b>evolutionary</b> <b>prototype</b> (that will evolve to the final software) to be formally consistent with the validated specification. This approach {{is supported by a}} high level CARE (Computer-Aided Requirements Engineering) tool...|$|R
40|$|Abstract—Prototype {{generation}} {{is an appropriate}} data reduction process for improving the efficiency and {{the efficacy of the}} nearest neighbor rule. Specifically, <b>evolutionary</b> <b>prototype</b> generation techniques have been highlighted as the best performing methods. However, these methods can sometimes be inefficient when the data scale up. In other data reduction techniques, such as prototype selection, an stratification procedure has been successfully developed to deal with large data sets. In this study, we test the combination of stratification with prototype generation techniques, considering data sets with more than 10000 instances. We compare some of the most representative prototype reduction methods and perform a study of the effects of stratification in their behavior. The results, contrasted with nonparametric statistical tests, show that several prototype generation techniques present a better performance than previously analyzed methods...|$|R
40|$|This paper {{reports on}} the human factors {{considered}} {{in the design and}} implementation of a digital museum for historic costume. Starting with a thorough elicitation and analysis of the qualitative as well as the functional needs of its users, an <b>evolutionary</b> <b>prototype</b> has been developed for a model of digital archiving that delivers a gratifying web experience, visually and interactively. The prototype is a standards and best practices based information system with the interface designed to be accessible for anyone with World Wide Web experience. An online category thesaurus has been developed to enhance the classification of, and access to, images and data about historic costume. Standards and protocols of the Open Archive Initiative (OAI) and the Museums Online Archive California (MOAC) are being implemented to broaden the user base by making the system portable and extendible...|$|R
40|$|<b>Evolutionary</b> <b>prototyping</b> {{focuses on}} {{gathering}} a correct and consistent set of requirements. The process lends particular strength to building quality software {{by means of}} the ongoing clarification of existing requirements and the discovery of previously missing or unknown requirements. Traditionally, the iterative reexamination of a systems requirements has not been the panacea that practitioners sought, due to the predisposition for requirements creep and the difficulty i n managing it. This paper proposes the combination o f <b>evolutionary</b> <b>prototyping</b> and an aggressive riskmitigation strategy. Together, these techniques support successful requirements discovery and clarification, and they guard against the negative effects of requirements creep. We embody these techniques in a comprehensive software development model, which we call the EPRAM (<b>Evolutionary</b> <b>Prototyping</b> with Risk Analysis and Mitigation) model. The model was intentionally designed to comply with the Level 2 Key Process Area of the Software Engineering Institutes Capability Maturity Model. Validation is currently underway on several software development efforts that employ the model to support the rapid development of electronic commerce applications. 1...|$|E
40|$|In {{this paper}} we discuss Software Quality Assurance (SQA) issues in the {{environment}} of an information system project, based on rapid <b>evolutionary</b> <b>prototyping.</b> The information system project provides a specialized software support for a sophisticated human resources management system in educational departments of Argentine provinces. This paper presents a general structure of this project and benefits of a specific software development model. In this context we focus on SQA issues. The selection of organizational concepts, design methods, and related tools were primarily based on satisfying SQA goals. In particular, the rapid <b>evolutionary</b> <b>prototyping</b> approach helped in substantially reducing costly errors in early stages of system design and software development. Key words: Rapid Evolutionary Development; Human Resources Information System; Software Quality Assurance. 1. The project environment 1. 1 Administrative Reform Programs and the Educational Human Resources Management Project [...] ...|$|E
40|$|This paper {{presents}} {{a case study}} based on a complex software engineering project {{that took place in}} a Portuguese SME, Small to Medium sized Enterprise. Our initial goal was to evaluate and adapt Software Engineering theory to the reality of SMEs, usually working in chaotic environments, and following no standard method. We refer to such absence of method as the just do it process model. We shortly present the project, critically discuss its results, and summarise what we believe has been learnt from the experience. We will consider the highly interactive collaboration model, <b>evolutionary</b> <b>prototyping</b> model, object-oriented A&D methods, and CASE tool support. We will discuss its theoretical principles and evaluate its expected advantages and shortcoming on the project mentioned. Finally we propose a new model for <b>evolutionary</b> <b>prototyping,</b> better adapted to the reality of the environment we faced...|$|E
40|$|Classification {{problems}} with an imbalanced class distribution have received an increased {{amount of attention}} within the machine learning community over the last decade. They are encountered in {{a growing number of}} real-world situations and pose a challenge to standard machine learning techniques. We propose a new hybrid method specifically tailored to handle class imbalance, called EPRENNID. It performs an <b>evolutionary</b> <b>prototype</b> reduction focused on providing diverse solutions to prevent the method from overfitting the training set. It also allows us to explicitly reduce the underrepresented class, which the most common preprocessing solutions handling class imbalance usually protect. As part of the experimental study, we show that the proposed prototype reduction method outperforms state-of-the-art preprocessing techniques. The preprocessing step yields multiple prototype sets that are later used in an ensemble, performing a weighted voting scheme with the nearest neighbor classifier. EPRENNID is experimentally shown to significantly outperform previous proposals...|$|R
40|$|A Federated System is a {{collection}} of independent, cooperative, possibly heterogeneous and autonomous computer systems (usually database systems) which allows sharing all or some of its data. A Service-oriented Architecture is an application architecture whose functionalities are defined as independent services which offer transparent communication between physically distributed components, possibly heterogeneous and autonomous. In this context, it is interesting to analyze how a Federated System can be designed within the ideas proposed by Service-Oriented Architectures. This paper presents the design of a Service-Oriented Architecture for Federated Systems. The architecture supports many users sharing data; access control to the data based on access rights which generates many views from a data source, as well as allowing a high automation level for the integration and querying processes. In addition, the bases of a federation’s management framework are defined. This framework, as well as the architecture, is validated through an <b>evolutionary</b> <b>prototype</b> towards a completely functional implementation. II Workshop de Ingeniería de Software y Bases de Datos (WISBD...|$|R
40|$|Charles Darwin has {{proposed}} {{the theory that}} evolution of live organisms is based on random variation and natural selection. Jacques Monod in his classic book Chance and Necessity, published 40 years ago, presented his thesis “that the biosphere does not contain a predictable class of objects or events, but constitutes a particular occurrence, compatible indeed with the first principles, but not deducible from those principals and therefore, essentially unpredictable. ” Recent discoveries in eye evolution are in agreement with both of these theses. They confirm Darwin's assumption of a simple eye prototype and lend {{strong support for the}} notion of a monophyletic origin of the various eye types. Considering the complexity of the underlying gene regulatory networks the unpredictability is obvious. The evolution of the Hox gene cluster and the specification of the body plan starting from an <b>evolutionary</b> <b>prototype</b> segment is discussed. In the course of evolution, a series of similar prototypic segments gradually undergoes cephalization anteriorly and caudalization posteriorly through diversification of the Hox genes...|$|R
40|$|We {{discuss the}} {{prototyping}} language PROSET (Pro-totyping with Sets) {{as a language}} for experimental and <b>evolutionary</b> <b>prototyping,</b> focusing its attention on al-gorithm design. Some of PROSET’S features include generative communication, flexible exception handling and the integration of persistence. A discussion of some issues pertaining to the compiler and the pro-gramming environment conclude the paper. ...|$|E
40|$|This paper {{describes}} {{a major part}} of an architecting methodology developed for safety-critical fault-tolerant software systems. The methodology coverage centers on specificationdriven prototyping. This approach to prototyping is seen to be superior to the customary approaches of throwaway and <b>evolutionary</b> <b>prototyping.</b> A still developmental form of representation, higher-level statecharts, provides a suitably expressive prototype specification language...|$|E
40|$|Keywords: New ways {{of working}} and {{learning}}, technology-enhanced learning (e-learning), learning-on-demand, participatory design, <b>evolutionary</b> <b>prototyping,</b> empirical analysis 2 Abstract Over a 2 -year period, we {{have participated in}} the introduction of e-learning in a Norwegian service company, a gas station division of an oil company. This company has an advanced computer network infrastructure for communication and information sharing, but the primary task of the employees is serving customers. We identify some challenges to introducing e-learning in this kind of environment. A primary emphasis has been on using participatory design techniques during the planning stages and <b>evolutionary</b> <b>prototyping</b> during the implementation stages. We describe a conceptual framework for analysis that takes into account technological, pedagogical and organizational factors. The data we present include interview excerpts and video recorded images and it documents the planning, implementation, and preliminary use of a moderately successful e-learning pilot system. The paper provides new insight into the successful co-existence of old and new technologies and multiple information seeking strategies...|$|E
40|$|In this design-based {{research}} project, I developed two simulations {{to be used}} as student tools in a massively multiplayer online game targeted at STEM education, the Radix Endeavor. I designed both the underlying agent-based model as well as the user interface for each simulation, and furthermore designed quests for my simulations for the purposes of playtesting. My final ecological prototype is able to authentically model fairly complex food webs of six or more organisms, and my final <b>evolutionary</b> <b>prototype</b> can handle complex fitness relationships between the individual traits of a single population and various environmental factors. In my thesis, I discuss the design and implementation of these simulations, the feedback we received from students, the overall effectiveness of my prototypes, and recommendations for further work. by Mark Zhang. Thesis: M. Eng., Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, 2013. Cataloged from PDF version of thesis. Includes bibliographical references (pages 74 - 75) ...|$|R
40|$|Airline Crew Management System is {{developed}} {{for the purposes of}} managing the cabin crew in Malaysia Airlines. This system gives the ability to the Management to manage their crew wisely. This new system makes the management to overcome their current problem in the current system and provides best service towards to achieve a good standard in crew management. The system {{is developed}} according to the user's requirement that was obtained through an early research done before developing this system. Airline Crew Management System is user friendly, straight forward and clear where it is easy for all cabin crew to use it, even with less computer knowledge. As for the methodology of this system, <b>Evolutionary</b> <b>Prototype</b> Model was selected. This gives an easier development process to the developer. Other than that, Three-Tier architecture was implemented in this system design. Unified Modeling Language (UML) definitely gave the developer a clearer picture of the system designing. PUP and java script was selected as a programming language and MySQL server is selected as the database administrator. Basically, Airline Crew Management System was developed to manage all the cabin crew in Malaysia Airlines efficiently and systematically...|$|R
40|$|Usability is an {{important}} aspect of product development that deals with the quality of interaction between the user and the product. Capturing requirements is aimed at understanding what the users expect the system to do. This report attempts to apply principles from both the Usability Engineering and the Requirements Engineering methodologies {{in the development of a}} subsystem for managing an e-commerce solution. The main focus is on the user interface design, which is developed by iterating the three phases of design, usability testing and evaluation, until the desired level of usability is achieved. Prototyping was central to the rapid development, but the use of software prototyping tools instead of paper-mockups would reasonably have improved the usefulness of the evaluations. The desired usability level was set to reach a specified fix point, instead of attempting to achieve some absolute usability metrics as is typically practiced. The former approach was apparently simpler to use without the broader experience otherwise needed to write reasonable requirements. The transition from the throw-away prototype to the implemented <b>evolutionary</b> <b>prototype</b> in ASP. NET posed some interesting problems that are further discussed...|$|R
