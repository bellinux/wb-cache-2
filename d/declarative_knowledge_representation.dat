44|10000|Public
2500|$|The name Prolog {{was chosen}} by Philippe Roussel as an {{abbreviation}} for [...] (French for programming in logic). [...] It was created around 1972 by Alain Colmerauer with Philippe Roussel, based on Robert Kowalski's procedural interpretation of Horn clauses. [...] It was motivated {{in part by the}} desire to reconcile the use of logic as a <b>declarative</b> <b>knowledge</b> <b>representation</b> language with the procedural representation of knowledge that was popular in North America in the late 1960s and early 1970s. [...] According to Robert Kowalski, the first Prolog system was developed in 1972 by Colmerauer and Phillipe Roussel. The first implementations of Prolog were interpreters. However, David H. D. Warren created the Warren Abstract Machine, an early and influential Prolog compiler which came to define the [...] "Edinburgh Prolog" [...] dialect which served {{as the basis for the}} syntax of most modern implementations.|$|E
50|$|This uses a <b>declarative</b> <b>knowledge</b> <b>representation</b> {{formalism}} and {{the methods}} of Answer Set Programming. One such solver is CMODELS {{which can be used}} for small problems but larger ones require heuristics. Preprocessing is used to determine the informative characters. CMODELS transforms them into a propositional theory that uses a SAT solver to compute the models of this theory.|$|E
50|$|Learning-related {{structures}} {{organize information}} {{in such a}} way that new learning builds on relevant prior knowledge. We use this into two ways. One is prerequisite-based structure which is based on prerequisite relationship of all the information and skills in the course. The other is Knowledge structure. The knowledge structure idea is seen in learning enterprises. The unifying element in an enterprise is a <b>declarative</b> <b>knowledge</b> <b>representation</b> of enterprise itself. A strong emphasis is placed on the purposeful and interrelated qualities of the knowledge, and hence, various theories related to schema. The declarative knowledge of the enterprise is referred to as an enterprise schema.|$|E
40|$|In {{this paper}} we shall {{describe}} a program (MECHO), written in Prolog[14], which solves {{a wide range}} of mechanics problems from statements in both predicate calculus and English. Mecho uses the technique of meta-level inference to control search in natural language understanding, common sense inference, model formation and algebraic manipulation. We argue that this is a powerful technique for controlling search while retaining the modularity of <b>declarative</b> <b>knowledge</b> <b>representations...</b>|$|R
40|$|The goal of my {{research}} is to uncover fundamental principles {{for the construction of}} real-time AI systems that employ <b>declarative</b> <b>knowledge</b> <b>representations</b> and general reasoning engines. There are many advantages to such an architecture: The same knowledge can be used for multiple tasks, such as diagnosis, prediction, control, and explanation. General knowledge can be applied to novel problems and environments. New, improved reasoning engines can be used without re-engineering the entire system...|$|R
40|$|Abstract – In {{artificial}} intelligence {{to solve the}} problem user require a knowledge base, consist all information related to problem domain and a method for manipulating the knowledge for finding the solution. For better result knowledge should be organized in better way. Hence, a structure for that knowledge is required. The <b>knowledge</b> <b>representation</b> techniques are divided in to two categories declarative and procedural. The main objective {{of this paper is to}} present the comparative study between three <b>declarative</b> <b>knowledge</b> <b>representations</b> techniques namely predicate logic, semantic net and frames...|$|R
5000|$|The name Prolog {{was chosen}} by Philippe Roussel as an {{abbreviation}} for [...] (French for programming in logic). It was created around 1972 by Alain Colmerauer with Philippe Roussel, based on Robert Kowalski's procedural interpretation of Horn clauses. It was motivated {{in part by the}} desire to reconcile the use of logic as a <b>declarative</b> <b>knowledge</b> <b>representation</b> language with the procedural representation of knowledge that was popular in North America in the late 1960s and early 1970s. According to Robert Kowalski, the first Prolog system was developed in 1972 by Colmerauer and Phillipe Roussel. The first implementations of Prolog were interpreters. However, David H. D. Warren created the Warren Abstract Machine, an early and influential Prolog compiler which came to define the [...] "Edinburgh Prolog" [...] dialect which served {{as the basis for the}} syntax of most modern implementations.|$|E
40|$|IDP 3 is a knowledge-base system, {{offering}} a rich, <b>declarative</b> <b>knowledge</b> <b>representation</b> language, {{a range of}} inferences and built-in interaction with a procedural language. In this paper, we give {{an overview of the}} system and show how multiple inferences are combined to obtain state-of-the-art model generation. status: publishe...|$|E
40|$|We are {{investigating}} computational models for humancomputer interaction {{based on a}} uniform, <b>declarative,</b> <b>knowledge</b> <b>representation.</b> We describe a new implementation of our work called Equuleus, a system for interactive, adaptive, document presentation. Equuleus achieves this by using annotated descriptions of a document to be presented and a planner to plan the document’s presentation. All presentation {{occurs as a result}} of planning and re-planning presentation goals...|$|E
40|$|<b>Knowledge</b> <b>Representation</b> (KR) is {{the area}} of AI {{concerned}} with how knowledge can be represented symbolically and manipulated in an automated way by reasoning programs. KR {{is a combination of}} data structure and interpretive procedures that leads to knowledgeable behavior. In this paper, an attempt is made to shed more light on KR, and to look at some techniques for it in the real world, with the view to understand their relevance and to realize their crucial usefulness in the development of effective knowledge based (KB) systems. This paper explains various <b>declarative</b> <b>knowledge</b> <b>representations</b> techniques...|$|R
40|$|In {{artificial}} intelligence {{to solve the}} problem user require a knowledge base, consist all information related to problem domain and a method for manipulating the knowledge for finding the solution. For better result knowledge should be organized in better way. Hence, a structure for that knowledge is required. The knowledge representationtechniques are divided in to two categories declarative and procedural. The main objective {{of this paper is to}} present the comparative study between three <b>declarative</b> <b>knowledge</b> <b>representations</b> techniques namely predicate logic, semantic net and frames...|$|R
40|$|This paper {{presents}} a {{brief review of}} early learner modelling in Intelligent Tutoring Systems focusing particularly on procedural <b>knowledge</b> <b>representations</b> vs. <b>declarative</b> <b>knowledge</b> <b>representations.</b> It then tracks the paradigm shift from traditional learner modelling, which emphasises <b>knowledge</b> <b>representation,</b> to distributed learner modelling, which focuses on the modelling process. Learner models in distributed, multi-agent environments are created by different agents for different purposes, are often fragmented and local, and only make sense in the specific context of creation. My work, in particular, is aimed at defining a taxonomy of purposes and retrieving information relevant to a particular purpose “just-in-time ” in order to assemble and integrate fragmented learner model information about a learner. Examples of my approach will be drawn from the I-Help system. Some open issues in this approach are also given in this paper, which motivate my further investigation and exploration...|$|R
40|$|The SLDNFA-system {{results from}} the LP+ project at the K. U. Leuven, which investigates logics and proof {{procedures}} for these logics for <b>declarative</b> <b>knowledge</b> <b>representation.</b> Within this project inductive definition logic (ID-logic) is used as representation logic. Different solvers are being developed for this logic and {{one of these is}} SLDNFA. A prototype of the system is available and used for investigating how to solve efficiently problems represented in ID-logic...|$|E
40|$|The SLDNFA-system {{results from}} the LP+ project at the K. U. Leuven, which investigates logics and proof {{procedures}} for these logics for <b>declarative</b> <b>knowledge</b> <b>representation.</b> Within this project inductive definition logic (ID-logic) is used as representation logic. Different solvers are being developed for this logic and {{one of these is}} SLDNFA. A prototype of the system is available and used for investigating how to solve efficiently problems represented in ID-logic. Comment: 6 pages conference:NMR 2000, special track on System descriptions and demonstratio...|$|E
40|$|The {{goal of the}} LP+ {{project at}} the K. U. Leuven is to design an {{expressive}} logic, suitable for <b>declarative</b> <b>knowledge</b> <b>representation,</b> and to develop intelligent systems based on Logic Programming technology for solving computational problems using the declarative specications. The ID-logic is an integration of typed classical logic and a definition logic. Different abductive solvers for this language are being developed. This paper is {{a report of the}} integration of high order aggregates into ID-logic and the consequences on the solver SLDNFA...|$|E
40|$|One of {{the main}} {{problems}} with the automatic generation of expressive musical performances is that human performers use musical knowledge that is not explicitly noted in musical scores. Moreover, this knowledge is tacit, difficult to verbalize, and therefore it must be acquired {{through a process of}} observation, imitation, and experimentation. For this reason, AI approaches based on <b>declarative</b> <b>knowledge</b> <b>representations</b> have serious limitations. An alternative approach is that of directly using the knowledge implicit in examples from recordings of human performances. In this paper, we describe a case-based reasoning system that generates expressive musical performances based on examples of expressive human performances. 1 Introduction One of the major difficulties in the automatic generation of music is to endow the resulting piece with the expressivity that characterizes human performances. Following musical rules, whatever sophisticated and complete they are, is not enough to a [...] ...|$|R
40|$|In {{this brief}} paper we {{describe}} several extensions and improvements of a previously reported system (Arcos, L'opez de M'antaras, & Serra 1998) capable of generating expressive music by imitating human performances. The system {{is based on}} Case-Based Reasoning (CBR) and Fuzzy techniques. Introduction One of the major difficulties in the automatic generation of music is to endow the resulting piece with the expressiveness that characterizes human performers. Following musical rules, no mater how sophisticated and complete they are, {{is not enough to}} achieve expression, and indeed computer music usually sounds monotonous and mechanical. The main problem is to grasp the performers personal touch, that is, the knowledge brought about when performing a score. A large part of this knowledge is implicit and very difficult to verbalize. For this reason, AI approaches based on <b>declarative</b> <b>knowledge</b> <b>representations</b> are very useful to model musical knowledge an indeed we represent such knowle [...] ...|$|R
40|$|Planning has {{traditionally}} used {{some form of}} predicate calculus {{as the basis for}} its representation. From the early days of STRIPS in 1970 to the recent planner TWEAK in 1987, domain knowledge and world models that represent {{the current state of the}} domain, have been represented as conjunctions of atomic formulae. Whereas this has been adequate for <b>declarative</b> <b>knowledge,</b> the <b>representation</b> of procedural <b>knowledge</b> (i. e. the actions and their effects that are reasoned about during planning) has been largely left to ad hoc schemes of a non-logical nature. In this paper we present a unifying framework based on a <b>knowledge</b> <b>representation</b> system with good expressive power for both forms of knowledge. Domain knowledge, actions and plans are all represented within the same formalism, giving distinct advantages over previous approaches. 1...|$|R
40|$|Abstract. Being a formal, <b>declarative</b> <b>knowledge</b> <b>representation</b> model, ontologies are {{the basis}} for Web applications, such as the service discovery. Because of their {{inherent}} heterogeneity, ontologies need to be matched {{before they can be}} made better use of. Most approaches in ontology matching belong to rule-based or learning-based ones, both with disadvantages. In this paper, we propose Superconcept Formation System (SFS), a learning-based matching algorithm combined with rulebased techniques. We explain our main idea, analyze the challenges, and demonstrate its promising prospect by preliminary experiment results...|$|E
40|$|We {{present a}} {{recently}} started research project. The {{goal of the}} project is to integrate into one system a number of techniques, execution mechanisms and development tools that were designed in various areas in Logic Programming in the past. Main components are: a strong support for (<b>declarative)</b> <b>knowledge</b> <b>representation,</b> including aspects of incomplete knowledge, first order logic constraints and definitional knowledge; integration of different computational mechanisms, including resolution, abduction, tabling and constraint solving; integration within the development environment of semantics-based development tools, including (source-level) optimization, abstract interpretation based analysis and termination analysis. status: publishe...|$|E
40|$|This paper {{presents}} {{alternatives to}} the traditional programming methodologies found in current finite element analysis systems. Artificial intelligence based representations are discussed, as are their incorporation in FOOBAR, a finite element system under development by the authors. Particularly useful architectures include constraint satisfaction paradigms, object-oriented techniques, and <b>declarative</b> <b>knowledge</b> <b>representation.</b> The development of FOOBAR is based on these ideas, which functionally decompose what 2 ̆ 2 to compute from 2 ̆ 2 how 2 ̆ 2 to compute it. We expect the resulting system to provide an intelligent, flexible environment for exploring research issues in finite element analysis. 2 ̆...|$|E
40|$|We {{describe}} a representation {{and a set}} of inference methods that combine logic programming techniques with probabilistic network representations for uncertainty (influence diagrams). The techniques emphasize the dynamic construction and solution of probabilistic and decision-theoretic models for complex and uncertain domains. Given a query, a logical proof is produced if possible; if not, an influence diagram based on the query and the knowledge of the decision domain is produced and subsequently solved. A uniform <b>declarative,</b> first-order, <b>knowledge</b> <b>representation</b> is combined with a set of integrated inference procedures for logical, probabilistic, and decision-theoretic reasoning. Comment: Appears in Proceedings of the Third Conference on Uncertainty in Artificial Intelligence (UAI 1987...|$|R
40|$|The paper settles a {{research}} branch {{in the realm}} of logic-oriented, hybrid <b>knowledge</b> <b>representation.</b> Terminological <b>knowledge</b> <b>representation</b> and reasoning can now be utilized for more realistic applications as an integral component of a computationally complete, <b>declarative</b> hybrid <b>knowledge</b> <b>representation</b> formalism with integrated special-purpose reasoners of concrete domains such as real-closed fields or finite-domain constraints. The paper presents technical results exploring the impact of "role interaction" on the decidability of the subsumption problem of terminological logics. In particular, decision procedures are presented for common reasoning problems in an expressive terminological logic that is parametrized by a concrete domain. A refined minimal belief logic which avoids certain problems concerning the non-propositional case (which ocurred surprisingly) is the basis of the model-theoretic semantics of a very general generic rule formalism integrating goal-directed (i. e., top-down) and data-driven (i. e., bottom-up) reasoning in a declarative manner. A mechanical engineering application (production planning of lathes) is used to demonstrate how the theoretical results can be employed in realistic applications...|$|R
25|$|Hayes and Kowalski in Edinburgh {{tried to}} {{reconcile}} the logic-based <b>declarative</b> approach to <b>knowledge</b> <b>representation</b> with Planner's procedural approach. Hayes (1973) developed an equational language, Golux, in which different procedures could be obtained by altering {{the behavior of the}} theorem prover. Kowalski, on the other hand, developed SLD resolution, a variant of SL-resolution, and showed how it treats implications as goal-reduction procedures. Kowalski collaborated with Colmerauer in Marseille, who developed these ideas in the design and implementation of the programming language Prolog.|$|R
40|$|Contents 1 Introduction 3 2 Constraint {{propagation}} 5 3 Constraint satisfaction as search 7 4 Tractable classes 9 5 Constraint optimization {{and soft}} constraints 10 6 Constraint programming 11 7 Summary 13 Article definition: Constraints are a <b>declarative</b> <b>knowledge</b> <b>representation</b> formalism {{that allows for}} a compact and expressive modeling of many real-life problems. Constraint satisfaction and propagation tools, as well as constraint programming languages, are successfully used to model, solve, and reason about many classes of problems, such as design, diagnosis, scheduling, spatiotemporal reasoning, resource allocation, configuration, network optimization, and graphical interfaces. 2 1 Introduction Constraint satisfaction problems. A constraint satisfaction problem (CSP) consists of a finite set of variables, each associated with a domain of values, {{and a set of}} constraints. Each of t...|$|E
40|$|The SLDNFA-system {{results from}} the LP+ project at the K. U. Leuven, which investigates logics and proof {{procedures}} for these logics for <b>declarative</b> <b>knowledge</b> <b>representation.</b> Within this project inductive definition logic (ID-logic) is used as representation logic. Different solvers are being developed for this logic and {{one of these is}} SLDNFA. A prototype of the system is available and used for investigating how to solve efficiently problems represented in ID-logic. General Information The LP+ project at the K. U. Leuven aims at developing and investigating logics suitable for <b>declarative</b> <b>knowledge</b> <b>representation.</b> To be able to represent problem domains in a declarative way, the logic must be capable to express the knowledge of the expert in a natural and graceful way. Therefore a suited logic has to deal with two mayor types of knowledge: definitional and assertional knowledge (Denecker 1995). This view is incorporated in ID-logic, a conservative extension of classical logic with a generalized notion of non monotone inductive definitions (Denecker 1998). In this setting, reasoning and problem solving in ID-logic is connected to model generation or satisfiability checking. This is in general a undecidable problem, therefore the implemented system SLDNFA can handle only a restricted class of problems. This class is still a large one: it involves scheduling, planning, simple theories like N-queens, [...] . The SLDNFA-system, {{which is one of the}} solvers developed in the project to reason on ID-logic theories, is an integration of abductive logic programming (Kakas, Kowalski, & Toni 1993) and constraint logic programming (Jaffar & Maher 1994). The current implementation is a prototype programmed as a meta program on top of Sicstus Prolog 3. 7. 1. Description of the System The SLDNFA-system consists of two layers: a general knowledge representation logic (ID-logic) and an actual problem solver (SLDNFA). Before describing how thes...|$|E
40|$|Abstract. We {{describe}} {{the reconstruction of}} a phylogeny {{for a set of}} taxa, with a character-based cladistics approach, in a <b>declarative</b> <b>knowledge</b> <b>representation</b> formalism, and show how to use computational methods of answer set program-ming to generate conjectures about the evolution of the given taxa. We have ap-plied this computational method in two domains: to historical analysis of lan-guages, and to historical analysis of parasite-host systems. In particular, using this method, we have computed some plausible phylogenies for Chinese dialects, for Indo-European language groups, and for Alcataenia species. Some of these plausible phylogenies are different from the ones computed by other software. Using this method, we can easily describe domain specific information (e. g. tem-poral and geographical constraints), and thus prevent the reconstruction of some phylogenies that are not plausible. ...|$|E
40|$|Dmitri Boulanger Ulrich Geske GMD-FIRST, Rudower Chaussee 5, 12489 Berlin, Germany email: fdmitri,geskeg@first. gmd. de Abstract Using {{the logic}} {{programming}} system Minerva, Java and DMBS Oracle {{for development of}} a GIS-oriented constraint database systems is discussed. The central topic is a possibility to develop systems, which are approaching industrial standards. Namely, a technology for building applications, which need high quality graphical interfaces, which use data stored in commercial SQL databases and which enjoy advantages of of logic programming and constraint solving is the main goal. A number of important basic elements of the corresponding toolkit, which is currently under development, are introduced. Key Words: logic programming, Java, object-oriented programming, declarative semantics, constraint database systems, persistence, GIS applications 1 Introduction For a large class of important applications a <b>declarative</b> logic-based <b>knowledge</b> <b>representation</b> is a crucial [...] ...|$|R
40|$|Abstract—This paper {{proposes a}} <b>declarative</b> {{language}} for <b>knowledge</b> <b>representation</b> (Ibn Rochd), and its environment of exploitation (DeGSE). This DeGSE system {{was designed and}} developed to facilitate Ibn Rochd writing applications. The system was tested on several knowledge bases by ascending complexity, culminating in a system for recognition of a plant or a tree, and advisors to purchase a car, for pedagogical and academic guidance, or for bank savings and credit. Finally, {{the limits of the}} language and research perspectives are stated. Keywords—Knowledge representation, declarative language, Ibn Rochd, DeGSE, facets, cognitive approach...|$|R
40|$|The {{goal of the}} {{enterprise}} modelling efforts at IBM is to develop methods to model an organizational unit's knowledge and activities. Ultimately, enterprise modelling should support an ongoing, incremental automation process. The problem we address here is the applicability of <b>declarative</b> AI <b>knowledge</b> <b>representation</b> (KR) to enterprise modelling. Does KR have a useful role to play? What is it? What are its limitations? In an initial case study {{in the area of}} purchasing, we find that much nonautomated guidelines information can be represented successfully using standard logicist methods. We show how to create very-high-level specifications with wellunderstood semantics. These specifications are useful as descriptive information in non-executable form; they help identify ambiguities, inconsistencies, and omissions in less formal guidelines information. We also show that these very-high-level specifications are partially executable using standard logicist inference methods such as rule-bas [...] ...|$|R
40|$|Abstract. The {{developments}} {{in information technology}} {{during the last decade}} have been rapidly changing the possibilities for data and knowledge access. To respect this, several <b>declarative</b> <b>knowledge</b> <b>representation</b> formalisms have been extended with the capability to access data and knowledge sources that are external to a knowledge base. This article reviews some of these formalisms that are centered around Answer Set Programming, viz. HEX-programs, modular logic programs, and multi-context systems, which were developed by the KBS group of the Vienna University of Technology in cooperation with external colleagues. These formalisms were designed with different principles and four different settings, and thus have different properties and features; however, as argued, they are not unrelated. Furthermore, they provide a basis for advanced knowledge-based information systems, which are targeted in ongoing research projects. ...|$|E
40|$|We {{describe}} {{the reconstruction of}} a phylogeny {{for a set of}} taxa, with a character-based cladistics approach, in a <b>declarative</b> <b>knowledge</b> <b>representation</b> formalism, and show how to use computational methods of answer set programming to generate conjectures about the evolution of the given taxa. We have applied this computational method in two domains: to historical analysis of languages, and to historical analysis of parasite-host systems. In particular, using this method, we have computed some plausible phylogenies for Chinese dialects, for Indo-European language groups, and for Alcataenia species. Some of these plausible phylogenies are different from the ones computed by other software. Using this method, we can easily describe domain specific information (e. g., temporal and geographical constraints), and thus prevent the reconstruction of some phylogenies that are not plausible...|$|E
40|$|Shape grammars are {{generative}} formalisms {{that allow}} spatial computations {{to be carried}} out on shapes.  This paper examines the assumptions, methodologies, and formalisms underlying shape grammar research in relation to architectural form and its making. The paper first establishes the criteria for evaluating the adequacy of a given generative system.  Then, it applies them to the evaluation of the shape grammar formalism.  Issues of the representation of style and language, procedural and <b>declarative</b> <b>knowledge</b> <b>representation,</b> as well as, the specificity and generalizability of the formalism will be addressed. The paper argues that, in its present state, shape grammar leaves a great deal to be desired in terms of its descriptive power and generalizability. The paper concludes by exploring some of the desired characteristics for languages of architectural form...|$|E
40|$|Two {{kinds of}} <b>knowledge,</b> i. e. <b>declarative</b> <b>knowledge</b> and {{procedural}} knowledge, should be represented {{and used in}} applied Al system in medicine. The authors constructed a <b>knowledge</b> <b>representation</b> form which is suitable for the description of <b>declarative</b> <b>knowledge.</b> Basic classifications can be represented in a form of hierarchy. The authors introduced description of relations between hierarchies(cross-hierarchy representation) instead of former 2 -dimensional tabular descriptions. The authors applied this form of <b>knowledge</b> <b>representation</b> to an antibiotics medication counseling system called ANTICIPATOR...|$|R
50|$|Loom is a {{language}} and environment for constructing intelligent applications. At its {{heart is a}} <b>knowledge</b> <b>representation</b> and reasoning system that combines a Frame-based language with an automatic classifier engine. <b>Declarative</b> <b>knowledge</b> in Loom consists of definitions, rules, facts, and default rules. A deductive engine called a classifier utilizes forward chaining, semantic unification, and object-oriented truth maintenance technologies in order to compile the <b>declarative</b> <b>knowledge</b> into a network designed to efficiently support on-line deductive query processing.|$|R
40|$|Mathematical logicians had {{developed}} {{the art of}} formalizing <b>declarative</b> <b>knowledge</b> long {{before the advent of}} the computer age. But they were interested primarily in formalizing mathematics. Because of the important role of nonmathematical knowledge in AI, their emphasis was too narrow from the perspective of <b>knowledge</b> <b>representation,</b> their formal languages were not sufficiently expressive. On the other hand, most logicians were not concerned about the possibility of automated reasoning; from the perspective of <b>knowledge</b> <b>representation,</b> they were often too generous in the choice of syntactic constructs. In spite of these differences, classical mathematical logic has exerted significant influence on <b>knowledge</b> <b>representation</b> research, and it is appropriate to begin this Handbook with a discussion of the relationship between these fields. The language of classical logic that is most widely used in the theory of <b>knowledge</b> <b>representation</b> is the language of first-order (predicate) formulas. These are the formulas that John McCarthy proposed to use for representing <b>declarative</b> <b>knowledge</b> in his Advice Taker paper [171], and Alan Robinson proposed to prove automatically using resolution [230]. Propositional logic is, of course, the most important subse...|$|R
