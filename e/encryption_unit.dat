22|8|Public
5000|$|In an {{external}} array controller, the <b>encryption</b> <b>unit</b> {{can either be}} placed either on the front-end side or the back-end side of the array controller. There are different advantages and disadvantages in placing the <b>encryption</b> <b>unit</b> either on the front-end side or the back-end side: ...|$|E
50|$|The {{placement}} of the <b>encryption</b> <b>unit</b> may highly impact the secureness of your controller based encryption implementation. Therefore, this issue must be taken account for when designing your implementation to mitigate all security risks.|$|E
50|$|For an {{internal}} array controller configuration, the array controller is generally a PCI bus card situated inside the host computer. As {{shown in the}} diagram, the PCI array controller would contain an <b>encryption</b> <b>unit</b> where plaintext data is encrypted into ciphertext. This separate <b>encryption</b> <b>unit</b> is utilized to prevent and minimize performance reduction and maintain data throughput. Furthermore, the Key Management Client will generally be an additional service within the host computer applications where it will authenticate all keys retrieved from the Key Server. A major disadvantage {{to this type of}} implementation would be that encryption components are required to be integrated within each host computer and therefore is redundant on large networks with many host devices.|$|E
40|$|International Telemetering Conference Proceedings / November 14 - 16, 1978 / Hyatt House Hotel, Los Angeles, CaliforniaA {{review is}} {{presented}} of some new, low-cost, easy-to-use hardware for interfacing small-scale digital systems to telecommunications and data link networks. Devices featured are binary serial interfaces, protocol controllers (including SDLC and HDLC), data <b>encryption</b> <b>units</b> (including the new NBS Federal Standard), modems, and information encoders. Compatibility with existing microprocessors and future trends are discussed...|$|R
40|$|International Telemetering Conference Proceedings / October 30 -November 02, 1995 / Riviera Hotel, Las Vegas, NevadaThis paper {{describes}} {{the use of}} an open architecture, low-cost, turnkey Telemetry, Tracking and Command (TT&C) processor system. The workstation based system was developed to satisfy the requirement for ground station equipment to handle and process multiple vehicle platforms for telemetry, command and tracking (tone or PRN), including STDN, SGLS and CCSDS link formats. The open architecture of the system allows for easy interface with external equipment for control of antenna systems, <b>encryption</b> <b>units</b> and other related station equipment. Reconfiguration for the various data formats and for system verification is done through a graphical user interfaces using operationally proven commercial-off-the-shelf (COTS) software and hardware. The open architecture of the system will allow for modifications and upgrades to be cost effective...|$|R
40|$|Abstract: Hardware {{implementations}} of bulk <b>encryption</b> <b>units</b> for {{wireless communications}} {{are presented in}} this paper. These units {{are based on the}} Triple DES (TDES) block cipher. The hardware modules can be configured in order to implement either the TDES or the DES block cipher. Three different hardware implementations of TDES are proposed. The first two implementations are based on the pipeline design technique, while the third implementation uses the traditional feedback logic design technique (looping). In addition, the DES block cipher’s S-BOXes have been implemented by Look Up Tables (LUTs) and/or ROM blocks. Comparing with the LUTs, the ROM blocks implementation approach provides higher performance. But, the LUTs implementation approach is used in cases where the ROM blocks are not available. For high-speed performance applications the loop unrolling architecture is selected. The proposed implementation of this architecture achieves 7. 36 Gbps data throughput whilst the 16 -stage pipeline 2. 45 Gbps. The implementation data throughput which is based on the looping architecture is 121 Mbps, but is used significant less hardware resources. Keywords: Triple-DES, DES, block cipher, S-Box, cryptography, VLSI implementation...|$|R
5000|$|Introduced into {{production}} in 2013 and developed for applications requiring high accuracy analogue {{functions such as}} measuring instruments and meters, the RX21A includes at 24-bit Delta-sigma ADC with Programmable Gain Amp built-in enabling up to 64 times analog signal amplification. Also incorporated is a Data <b>Encryption</b> <b>Unit</b> for [...] encryption / decryption of the [...] AES.|$|E
50|$|With {{different}} {{configurations of}} a hardware or software array controller, {{there are different}} types of solutions {{for this type of}} encryption. Each of these solutions can be built into existing infrastructures by replacing or upgrading certain components. Basic components include an encryption key server, key management client, and commonly an <b>encryption</b> <b>unit</b> which are all implemented into a storage network.|$|E
50|$|For the {{software}} array controller encryption, a software array controller driver directs data into individual host bus adapters. In the diagram on the right, {{there are multiple}} host bus adapters with hardware encryption units used for better performance requirements. In contrast, this type of encryption can be implemented with only 1 host bus adapter connected to a network of multiple hard drives and would still function. Performance will definitely be reduced since there will only be one <b>encryption</b> <b>unit</b> processing data. Key management will be done much like the internal array controller encryption mentioned before with the Key Management Client implemented as a service within the Host Computer.|$|E
40|$|Abstract — Software {{protection}} is increasingly necessary for uses in commercial systems, digital content distributors, and military systems. The Secure Software (SecSoft) architecture {{is one of}} several architectures attempting to provide hardware enforced software protection. The advantage of the SecSoft architecture is increased software protection without alteration to the fundamental interaction of software, operating systems, and developer tools. This work presents the design, implementation, and performance analysis of a fast, flexible hardware <b>Encryption</b> Management <b>Unit</b> (EMU) for such architectures. The EMU provides selective decryption of software instructions residing in page–sized sections of memory, without modification to the core processor. Results are derived from a FPGA based prototype platform containing different cryptographic routines operating with a standard processor. I...|$|R
40|$|Main memory {{contains}} {{transient information}} for all resident applications. However, if memory chip contents survives power-off, e. g., via freezing DRAM chips, sensitive data such as passwords and keys can be extracted. Main memory persistence {{will soon be}} the norm as recent advancements in MRAM and FeRAM position non-volatile memory technologies for widespread deployment in laptop, desktop, and embedded system main memory. Unfortunately, the same properties that provide energy efficiency, tolerance against power failure, and “instant-on ” powerup also subject systems to offline memory scanning. In this paper, we propose a Memory <b>Encryption</b> Control <b>Unit</b> (MECU) that provides memory confidentiality during system suspend and across reboots. The MECU encrypts all memory transfers between the processor-local level 2 cache and main memory to ensure plaintext data is never written to the persistent medium. The MECU design is outlined and performance and security trade-offs considered. We evaluate a MECU-enhanced architecture using the SimpleScalar hardware simulation framework on several hardware benchmarks. This analysis shows the majority of memory accesses are delayed by less than 1 ns, with higher access latencies (caused by resume state reconstruction) subsiding within 0. 25 seconds of a system resume. In effect, the MECU provides zero-cost steady state memory confidentiality for non-volatile main memory. ...|$|R
40|$|Non-volatile {{memories}} provide energy efficiency, tolerance against power failure, and “instant-on” power-up. These {{memories are}} likely to replace traditional volatile memory in next-generation laptops and desktops. However, the move to non-volatile memory introduces new vulnerabilities; sensitive data such as passwords and keys residing in main memory persists across reboots and can be probed during hardware suspension. In this paper, we propose a Memory <b>Encryption</b> Control <b>Unit</b> (MECU) to address the vulnerabilities introduced by non-volatile memories. The MECU encrypts all memory transfers between the level 2 cache and main memory. The keys used to encrypt memory blocks are derived from secret information present on removable authentication tokens, e. g., smart card, or other similar secure storage devices. This provides protection against physical attacks in absence of the token. A MECU design is outlined and performance, memory, and security trade-offs considered. We evaluate a MECU-enhanced architecture using the SimpleScalar hardware simulation framework on several hardware benchmarks. The performance analysis shows that we can secure non-volatile memories with minimal overhead—the majority of memory accesses are delayed by less than 1 ns, with limited degradation subsiding within 67 µs of a system resume. In effect, we provide zero-cost steady state confidentiality for main memory. ...|$|R
50|$|In {{the case}} of an {{external}} array controller setup, the array controller would be an independent hardware module connected to the network. Within the hardware array controller would be an <b>Encryption</b> <b>unit</b> for data encryption as well as a Key Management Client for authentication. Generally, there are few hardware array controllers to many host devices and storage disks. Therefore, it reduces deployment complexity to implement into fewer hardware components. Moreover, the lifecycle of an array controller is generally much longer than host computers and storage disks, therefore the encryption implementation will not need to be reimplemented as often as if encryption was done at another point in the storage network.|$|E
40|$|Abstract — The {{demand for}} {{security}} in wireless communication channels is rapidly growing. In this exertion a proposed <b>encryption</b> <b>unit</b> which adopts the AES (Advanced Encryption Standard) as the encryption algorithm is presented. In previous work a customized {{version of the}} “AES ” block cipher to suit proprietary data encryption applications is introduced [1]. In this paper, a hardware implementation of the algorithm, using Field Programmable Gate Arrays (FPGA) is presented. Furthermore, the structure of <b>Encryption</b> <b>unit,</b> the implemented micro-architecture, the simulation, and implementation results will be discussed. In addition, the {{detailed description of the}} various micro-architecture modules is included...|$|E
40|$|This paper {{presents}} an implementation of an Advanced Encryption Standard (AES) <b>encryption</b> <b>unit</b> using dynamic reconfiguration {{based on the}} Xilinx Spartan- 3 FPGA platform. The proposed design reuses resource of FPGA by adapting dynamic reconfiguration {{to reduce the number}} of resource used in the circuit. By changing circuits at runtime, the size of the whole circuit is limited to the largest reconfigurable module. The implementation of the dynamic reconfigurable AES <b>encryption</b> <b>unit</b> on XC 3 S 200 - 4 FT 256 requires only 359 slices, while achieving throughput about 18 Kbps, and 16 Mbps if assume that there is no reconfiguration delay...|$|E
40|$|Privacy of {{data storage}} {{has long been}} a central problem in {{computer}} security, having direct implications for many Internet-era applications such as storage/computation outsourcing and the Internet of Things (IoT). Yet, the prevailing way we protect our data - through encryption techniques - doesn't protect where we read or write in our data. This additional information, the access pattern, can be used to reverse-engineer proprietary programs as they run, reveal a user's physical location or health information, and more, even if data is correctly encrypted. This thesis studies a cryptographic primitive called Oblivious RAM (ORAM) which provably hides a client's access pattern as seen by untrusted storage. While ORAM is very compelling from a privacy standpoint, it incurs a large performance overhead. In particular, ORAM schemes require the client to continuously shuffle its data in untrusted storage. Early work on ORAM proves that this operation must incur a client-storage bandwidth blowup that is logarithmic in the dataset size, which can translate to > 100 x in practice. We address this challenge by developing new tools for constructing ORAMs that allow us to achieve constant bandwidth blowup while requiring only small client storage. A reoccurring theme is to grant untrusted storage the ability to perform untrusted computation on behalf of the client, thereby circumventing lower bound results from prior work. Using these tools, we construct a new ORAM called Ring ORAM, the first small client storage ORAM to achieve constant online bandwidth blowup. At the same time, Ring ORAM matches or improves upon the overall bandwidth of all prior ORAM schemes (given equal client storage), up to constant factors. Next, we more heavily exploit computation at the storage to construct Onion ORAM, the first scheme with constant worst-case and overall bandwidth blowup that does not require heavy weight cryptographic primitives such as fully homomorphic encryption (FHE). Instead, Onion ORAM relies on more efficient additively or somewhat homomorphic encryption schemes. Finally, we demonstrate a working ORAM prototype, built into hardware and taped-out in 32 nm silicon. We have deployed the design as the on-chip memory controller for a 25 core processor. This proves the viability of a single-chip secure processor that can prevent software IP or data theft through a program's access pattern to main memory (having applications to computation outsourcing and IoT). From a technical perspective, this work represents the first ORAM client built into silicon and the first hardware ORAM with small client storage, integrity verification, or <b>encryption</b> <b>units.</b> We propose a number of additional optimizations to improve performance in the hardware setting. by Christopher W. Fletcher. Thesis: Ph. D., Massachusetts Institute of Technology, Department of Electrical Engineering and Computer Science, 2016. Cataloged from PDF version of thesis. Includes bibliographical references (pages 117 - 122) ...|$|R
40|$|Operating {{systems and}} data {{protection}} tools are employing sophisticated password derived encryption key techniques {{in order to}} encrypt data. Such techniques impose a significant computational burden on forensic tools that attempt dictionary attacks are requiring cryptographic hash generation functions to be called several thousand times for each password attempted. In order to improve throughput, forensic analysis tools are designed to operate in a distributed manner over a dedicated network of workstations. This paper describes an FPGA-based hardware implementation of the standard PKCS# 5 technique published by RSA Laboratories for generating password-derived encryption keys. This is the most computationally demanding step required when performing a dictionary attack on modern password-protected systems. The initial FPGA implementation incorporates four password-derived <b>encryption</b> key generation <b>units</b> operating at a frequency of 150 MHz and is capable of processing over 510 passwords per second. The implementation’s performance can be easily improved by incorporating additional key generation units...|$|R
40|$|Abstract — This <b>{{encryption}}</b> <b>unit</b> adopts the AES (Advanced Encryption Standard) as the {{encryption algorithm}} {{because it has}} been extensively challenged, evaluated, and, it is the most popularly used symmetric key algorithm. In this paper, we propose a customized version of the “AES ” block cipher to suit proprietary data encryption applications. We designed the customization of the AES to cover three main AES cryptographic functions, these are: S-box Generation, Mix Column Transformation, and Key Expansion Function. The S-Box generation process results in a new S-Box. The new S-Box is tested to be sure of satisfying the required cryptographic features: algebraic degree, non linearity, propagation criteria, correlation immunity, and balancedness. The customized AES is tested also against statistical randomness properties. The <b>encryption</b> <b>unit</b> is finally designed, implemented, and tested using FPGA technology...|$|E
40|$|Abstract — This <b>{{encryption}}</b> <b>unit</b> adopts the AES (Advanced Encryption Standard) as the {{encryption algorithm}} {{because it has}} been extensively challenged, evaluated, and, it is the most popularly used symmetric key algorithm. In this paper, we propose a customized version of the “AES ” block cipher to suit proprietary data encryption applications. We designed the customization of the AES to cover three main AES cryptographic functions, these are: S-box Generation, Mix Colum...|$|E
40|$|Abstract — This paper {{discusses}} the efficient {{usage of the}} Advanced Encryption Standard (AES) {{that may be used}} to correct erroneous errors and its implementation as aerror correction algorithm with a view of lowering the power as a part of secured wireless communication. Our low power AES crypto module has optimized architecture of data <b>encryption</b> <b>unit</b> and key schedule unitwhich could be applicable to wireless sensor networks. We also details low power design methods used to design our low power AES module...|$|E
40|$|Abstract — IPsec is a {{powerful}} mechanism for protecting network communications. However, it is often viewed as difficult to use due to the elaborate configuration {{that is needed to}} ensure correct (and secure) operation. In this paper, we seek to answer {{the question of how to}} build IPsec VPNs without affecting the network assets. We exploit “repeater-encryption”, which is similar to the IPsec bump-in-the-wire mode of operation. Our IPsec <b>encryption</b> <b>unit</b> works at Layer- 2 of the network stack and does not encrypt control packets that are used for routing, address resolution and resource reservation. Although this is fairly straightforward for IPv 4 networks, IPv 6 introduces several new features and messages that complicate the operation of such a box. We report our findings of implementing transparent, repeater-based IPsec protection for IPv 4 and IPv 6. Our approach requires no configuration changes to other devices in the network, making it an attractive mechanism for security network traffic. We discuss the features of our IPsec <b>encryption</b> <b>unit</b> and show how it adapts to IPv 4 and IPv 6 networks. We also implement our approach on the OpenBSD IPsec stack to demonstrate its feasibility. We show that our transparent IPsec box can easily support speeds in excess of 100 Mbps. I...|$|E
40|$|This thesis {{presents}} a secure digital camera (SDC) that inserts biometric data into images found in forms of identification {{such as the}} newly proposed electronic passport. However, putting biometric data in passports makes the data vulnerable for theft, causing privacy related issues. An effective solution to combating unauthorized access such as skimming (obtaining data from the passport's owner who did not willingly submit the data) or eavesdropping (intercepting information as it moves from the chip to the reader) could be judicious use of watermarking and encryption at the source end of the biometric process in hardware like digital camera or scanners etc. To address such issues, a novel approach and its architecture {{in the framework of}} a digital camera, conceptualized as an SDC is presented. The SDC inserts biometric data into passport image with the aid of watermarking and encryption processes. The VLSI (very large scale integration) architecture of the functional units of the SDC such as watermarking and <b>encryption</b> <b>unit</b> is presented. The result of the hardware implementation of Rijndael advanced encryption standard (AES) and a discrete cosine transform (DCT) based visible and invisible watermarking algorithm is presented. The prototype chip can carry out simultaneous encryption and watermarking, which to our knowledge is the first of its kind. The <b>encryption</b> <b>unit</b> has a throughput of 500 Mbit/s and the visible and invisible watermarking unit has a max frequency of 96. 31 MHz and 256 MHz respectively...|$|E
40|$|Abstract—Recently, much {{research}} has been conducted for security for wireless sensor networks and ubiquitous computing. Security issues such as authentication and data integrity are major requirements to construct sensor network systems. Advanced Encryption Standard (AES) is considered as one of candidate algorithms for data encryption in wireless sensor networks. In this paper, we will present the hardware architecture to implement low power AES crypto module. Our low power AES crypto module has optimized architecture of data <b>encryption</b> <b>unit</b> and key schedule unit which could be applicable to wireless sensor networks. We also details low power design methods used to design our low power AES crypto module...|$|E
30|$|The RX 63 N has an Ethernet {{controller}} with dedicated direct {{memory access}} (DMA), which is suitable for networking (in holonic sense) and a hardware communication <b>encryption</b> <b>unit</b> (i.p. AES encryption and decryption functions) that is a must-have in all the devices approaching the Internet of Things. This MCU family is mostly interesting for their plenty of timers {{that can be used}} in motor control both for sensing and actuation, in particular, the multi-function timer pulse unit (MTU) designed for motor control and PWM generation and sensing. MTU is a multi-purpose timer peripheral that allows the sensing and output of a vast set of waveforms that are essentials in motor control issues.|$|E
40|$|In any {{wireless}} communication security is crucial during data transmission. The encryption and decryption of data {{is the major}} role in the {{wireless communication}} for security of the data. Encryption algorithms are used to ensure the security in the transmission channels. Similarly the area and the power consumption is another major thing to be viewed since most of the mobile terminals are battery operated. So a mobile terminal which has an <b>encryption</b> <b>unit</b> with less area and power consumption is appreciated. This paper deals with the Advanced Encryption Standard (AES) which works on a 128 bit data encrypting it with 128, 192, 256 bits of keys (ciphers) in a single hardware unit...|$|E
40|$|A {{system for}} {{encoding}} and decoding data words including an anti-analysis encoder unit for receiving an original plaintext and producing a recoded data, a data compression unit for receiving the recoded data and producing a compressed recoded data, and an <b>encryption</b> <b>unit</b> for receiving the compressed recoded data and producing an encrypted data. The recoded data has an increased non-correlatable data redundancy {{compared with the}} original plaintext in order to mask the statistical distribution of characters in the plaintext data. The system of the present invention further includes a decryption unit for receiving the encrypted data and producing a decrypted data, a data decompression unit for receiving the decrypted data and producing an uncompressed recoded data, and an anti-analysis decoder unit for receiving the uncompressed recoded data and producing a recovered plaintext that corresponds with the original plaintext...|$|E
40|$|The {{embedded}} based applications need {{sensitive data}} transfer between different nodes. In {{order to increase}} the speed and to reduce the hardware complexity, this proposed system focuses on the light weight security algorithm Tiny Encryption Algorithm TEA which can be implemented in microcontroller to adapt with many real time constraints such as memory, data loss and low cost. The additive feature of this proposed system is that it uses Key Generation Unit (KGU) to produce the random key to make it optimal for sensitive data transfer in many real-time applications. This above work uses microcontroller and the performances of this cryptosystem is analyzed by implementing the cryptographic algorithm TEA with key generation unit. The key generation unit uses the timers in microcontroller to generate the random bits. The work extends with implementing the two different modes of communication serial (UART) and wireless transmission (RF) to transfer the data from <b>encryption</b> <b>unit</b> to decryption unit...|$|E
40|$|The {{invention}} {{relates to}} a coder for providing encrypted data {{which is to}} be transmitted via a transmission medium (200), comprising an <b>encryption</b> <b>unit</b> (104) which is designed to encrypt, in blocks, data received by the coder, and a processing unit (106). Said processing unit (106) is designed to distribute an encrypted data block randomly to a plurality of channels which are associated with the transmission medium (200), and a subblock {{which is to be}} transmitted via one the of channels and which comprises one part of the encrypted data block, together with a channel identification associated with the channel and a code value which is based on encrypted data in the subblock which is to be transmitted and the channel identification, for transmission via the associated channel of the transmission medium (200). A transmission medium for securely transmitting data comprises a multi-core optical fibre (200), wherein at least one core of said multi-core fibre (200) defines a data channel (2021 - 2024) for the transmission of data, and wherein at least one core of the multi-core fibre (200) defines a monitoring channel (2041, 2042) ...|$|E
40|$|An {{actuation}} {{control system}} and method utilises wireless coupling {{of a key}} and an actuator to effect actuation of a device such as a lock or sensor. In one example, for securely controlling the operation of a closure member (not shown) such as a door of a container, the system comprises a key shown generally at (10) and an actuator, in this case comprising a lock actuator shown generally at (12). In this embodiment, the key (10) includes a primary coil P, a resonant filter (14), a power amplifier (16), a filter (18), a modulator (20) and demodulator (22), an <b>encryption</b> <b>unit</b> (24) and decryption unit (26), a rechargeable power pack (28), a memory device (30), a power circuit (32), a GPS Global Positioning Satellite) device (34), a controller (36), an LCD display (38) and an interface device (40). The lock actuator (12) comprises a secondary coil S, a combined resonant filter and modulator (42), a memory device (44), a locking device (46), a controller (48), a sensor (50), a demodulator (52) and a power circuit (54). In use, the lock actuator (12) is arranged to be integral with, mounted on or attached to a closure member such as a door of a container, for example. The key (10) may be portable, or else maybe fixed to or integral with a key station (not shown). When the key (10) is brought into sufficiently {{close proximity to the}} lock actuator (12) (dependent upon the specific circuitry and power available) the primary coil P of the key (10) and the secondary coil S of the lock actuator (12), which are tuned for resonance by the resonant filters (14) (of the key) and (42) (of the lock actuator), become inductively coupled, and if the key is authorised it may be used to effect actuation of the lock, thereby {{to gain access to the}} container, power being derived by the actuator from the key, through their wireless coupling...|$|E

