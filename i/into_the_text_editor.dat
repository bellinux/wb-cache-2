0|10000|Public
50|$|Programs {{were mostly}} still entered using punched cards or paper tape. See {{computer}} programming in the punch card era. By the late 1960s, data storage devices and computer terminals became inexpensive enough that programs could {{be created by}} typing directly <b>into</b> <b>the</b> computers. <b>Text</b> <b>editors</b> were developed that allowed changes and corrections to be made much more easily than with punched cards.|$|R
40|$|Abstract This {{article focuses}} on the Subversion version control system, and in partic-ular its {{integration}} <b>into</b> <b>the</b> TextMate <b>text</b> <b>editor.</b> TextMate is a <b>text</b> <b>editor,</b> for <b>the</b> Mac OS X operating system, that has excellent support for working with LATEX documents and projects, and its seamless Subversion integration makes it very easy to add version control to your workflow. Version control systems {{have been used by}} computer programmers for many years for work on projects involving multiple authors. They have been invaluable in keeping track of the contributions of each party to the project, the changes that took place and when they happened, and so on. Subversion {{is one of the most}} popular version control systems today, and it is integrated into many <b>text</b> <b>editors</b> and online collaboration sites. ...|$|R
50|$|Because neither {{version of}} the EPG {{software}} was capable of silent remote administration for its locally customizable features, cable company employees were required to visit their headend facilities {{in order to make}} all necessary adjustments to the software in person. Consequently, EPG channel viewers would often see its otherwise continuous listings interrupted without warning each time a cable company technician brought up its administrative menus to adjust settings, view diagnostics information, or hunt-and-peck new local <b>text</b> advertisements <b>into</b> <b>the</b> menus' built-in <b>text</b> <b>editor.</b>|$|R
50|$|Updating to Posterous {{was similar}} to other {{blogging}} platforms. Posting could be done by logging <b>into</b> <b>the</b> website's rich <b>text</b> <b>editor,</b> but it was particularly designed for mobile blogging. Mobile methods include sending an email, with attachments of photos, MP3s, documents, and video (both links and files). Many social media pundits considered Posterous to be the leading free application for lifestreaming. The platform received wide attention when leading social media expert Steve Rubel declared he was moving his blogging activity entirely to Posterous.|$|R
40|$|We discuss ways of {{improving}} navigation facilities in hypertext systems, considering theoretical and implementation issues, from a {{natural language processing}} research perspective. The key claim is that certain ideas from the theory of discourse structure can be exploited to improve the context-sensitivity of navigation facilities. In particular, (i) after a node is reached by a jump, links to other nodes can by dynamically suppressed where these are rendered irrelevant by the user's mode of arrival; and (ii) at any point after a jump (or sequence of jumps), the user can easily return to a limited set of structurally accessible nodes. The approach therefore combines certain advantages of navigation based on document structure with those based on individual interaction histories. The ideas have been tested by altering the implementation of Info, the hypertextual help system built <b>into</b> <b>the</b> Emacs <b>text</b> <b>editor,</b> which runs on Unix, Macintosh and pc systems. Evaluation studies are currently b [...] ...|$|R
40|$|Abstract-In this paper, {{we explain}} how {{inheritance}} and dynamic binding make object-oriented programs difficult to maintain, and we give a concrete {{example of the}} problems that arise. We show that the difficulty {{lies in the fact that}} conventional tools are poorly suited for work with object-oriented languages, and we argue that semantics-based tools are essential ‘for effective maintenance of object-oriented programs. We then describe a system we have developed for working with C++ programs. This system comprises a relational database system for information about programs and an interactive database interface integrated with a te&t editor. We describe our system architecture, detail the database relations, provide informal evidence on the system’s effectiveness, and compare it to other research with similar goals. Index Terms- C++, object-oriented languages and environments, programming environments, semantic analysis of code, software maintenance, software representation in relational databases. To help programmers deal with problems such as these, we have developed the XREF editing module and its underlying relational database XREFDB. XREF is a set of interactive routines integrated <b>into</b> <b>the</b> GNU Emacs <b>text</b> <b>editor</b> [2]. These routines allow programmers to obtain information about programs they are working on through special editor commands. (Equivalent functionality is available through annotedit, <b>the</b> primary <b>text</b> <b>editor</b> in <b>the</b> FIELD programming environment [3], [4]. However, because Emacs is more familiar to most readers than is annotedit, in this paper we focus on the Emacs interface to XREFDB.) XREFDB is a relational database whose relations were specifically designed to support queries about programming languages. The relations it offers are sufficient to capture most features present in commonly used prpgramming languages, including object-oriented languages such as C++. I...|$|R
50|$|Another {{important}} application type {{is that of}} <b>the</b> <b>text</b> <b>editor.</b> A <b>text</b> <b>editor</b> occupies <b>the</b> full area of display, displays one or more text documents, {{and allows}} the user to edit <b>the</b> documents. <b>The</b> <b>text</b> <b>editor</b> has, for many uses, {{been replaced by the}} word processor, which usually provides rich formatting features that <b>the</b> <b>text</b> <b>editor</b> lacks. <b>The</b> first word processors used <b>text</b> to communicate <b>the</b> structure of the document, but later word processors operate in a graphical environment and provide a WYSIWYG simulation of the formatted output.|$|R
5000|$|The {{identifiers}} must be unique. In particular, {{they must}} be unique across all sessions managed by the session manager: the identifier of <b>the</b> <b>text</b> <b>editor</b> running on [...] is different not only from <b>the</b> same <b>text</b> <b>editor</b> running on [...] but also different from <b>the</b> <b>text</b> <b>editor</b> running on [...] in another session. The identifier of a client remains the same even if the session is shut down and restarted.|$|R
5000|$|Emacs {{editing mode}} key {{bindings}} {{are taken from}} <b>the</b> <b>text</b> <b>editor</b> Emacs.|$|R
50|$|There is also {{incremental}} reading {{support for}} <b>the</b> <b>text</b> <b>editors</b> Emacs and Yi.|$|R
50|$|Sam is <b>the</b> {{preferred}} <b>text</b> <b>editor</b> {{of several}} eminent programmers. It {{was the first}} full screen editor Ken Thompson liked. Sam is <b>the</b> <b>text</b> <b>editor</b> used by Bjarne Stroustrup and Brian Kernighan. Others, like Dennis Ritchie, have transitioned to use acme instead.|$|R
50|$|One of {{the first}} {{implementation}} of this feature appears in <b>the</b> <b>text</b> <b>editor</b> elvis.|$|R
5|$|On {{a second}} PDP-1 in the physics department, Daniel L. Murphy wrote <b>the</b> <b>Text</b> <b>Editor</b> and Corrector (TECO) <b>text</b> <b>editor,</b> later used to {{implement}} Emacs.|$|R
25|$|<b>The</b> <b>text</b> <b>editor</b> UltraEdit uses JavaScript 1.7 as {{internal}} scripting language, introduced with version 13 in 2007.|$|R
30|$|Step/click 2 – 3 : from M 5 (forum) to M 11 (writing in <b>the</b> <b>text</b> <b>editor).</b>|$|R
5000|$|<b>The</b> <b>text</b> <b>editor</b> UltraEdit uses JavaScript 1.7 as {{internal}} scripting language, introduced with version 13 in 2007.|$|R
50|$|Around {{the same}} time Corel {{included}} WordPerfect, with its full functionality, in CorelDraw Graphics Suite as <b>the</b> <b>text</b> <b>editor.</b>|$|R
5000|$|CTSS had <b>the</b> <b>text</b> <b>editor</b> QED, <b>the</b> {{predecessor}} of ed and vim, {{with regular}} expressions added by Ken Thompson.|$|R
50|$|UltraEdit-32 {{was renamed}} to UltraEdit in version 14.00. Version 22.2 {{was the first}} native 64-bit version of <b>the</b> <b>text</b> <b>editor.</b>|$|R
5000|$|In {{order for}} the {{sessions}} to be restored properly, different instances of the same application must be recognized as different by the session manager. For this reason, the session manager chooses a unique identifier for each instance of each application. This way, the session manager is able to distinguish between <b>the</b> <b>text</b> <b>editor</b> that is running on [...] and <b>the</b> <b>text</b> <b>editor</b> running on , {{even if they are}} two instances of the same program.|$|R
50|$|Plain {{text files}} {{can be read}} in {{read-only}} mode or edited by using a <b>text</b> <b>editor</b> bundled with MoonShell. After <b>the</b> <b>text</b> <b>editor</b> is closed, <b>the</b> main MoonShell app is loaded.|$|R
50|$|This page shows a table {{contrasting}} {{the features}} of <b>the</b> <b>text</b> <b>editors</b> that interface to TeX (or LaTeX or its other incarnations).|$|R
50|$|Implement {{different}} modes, {{similar to}} <b>the</b> <b>text</b> <b>editors</b> vi and emacs. That is, keys have different functions {{depending on the}} mode the window manager is in.|$|R
50|$|<b>The</b> <b>text</b> <b>editor</b> is used {{to display}} netlists and {{simulation}} logging information, and to edit files included by certain components (e.g. SPICE netlists, or Touchstone files).|$|R
50|$|Uniface Version 4 (1988):Uniface 4 {{improved}} <b>the</b> <b>text</b> <b>editor</b> (now form editor), improved {{printing and}} display support, introduced support for MS-DOS, {{and added a}} CASE tool interface.|$|R
50|$|PaperClip is {{also the}} name given to <b>the</b> <b>text</b> <b>editor</b> ROM portion of the Commodore PET Execudesk office suite. The ROM was written by Steve Douglas as well.|$|R
50|$|Murphy {{attended}} MIT from 1961 {{and graduated}} in 1965.In 1962 he created of <b>the</b> <b>text</b> <b>editor</b> <b>Text</b> <b>Editor</b> and Corrector (TECO) later implemented {{on most of}} the PDP computers.He also developed a simple software demand paging system in software for the PDP-1 while at MIT.|$|R
5000|$|In {{order to}} support code folding, <b>the</b> <b>text</b> <b>editor</b> must provide a {{mechanism}} for identifying [...] "folding points" [...] within a text file. Some <b>text</b> <b>editors</b> provide this mechanism automatically, while others provide defaults that can either be overridden or augmented by the user.|$|R
50|$|Elastic tabstops is a {{tabulation}} style {{which requires}} support from <b>the</b> <b>text</b> <b>editor,</b> where entire blocks of text are kept automatically aligned when {{the length of}} one line in the block changes.|$|R
50|$|In {{addition}} to the basic management abilities described previously, snippet management features can be classified according to the scope of interactivity between snippets and <b>the</b> <b>text</b> <b>editor</b> or application that hosts them.|$|R
50|$|Conkeror is a Mozilla-based {{web browser}} {{designed}} to be navigated primarily by a computer keyboard. Its design is mainly patterned after <b>the</b> <b>text</b> <b>editor</b> GNU Emacs, with some influence from other programs, including vi.|$|R
5000|$|... edit {{represents}} <b>the</b> actual <b>text</b> <b>editor.</b> On <b>the</b> top of <b>the</b> <b>text</b> <b>editor</b> {{there is}} a tab bar for switching between multiple opened <b>text</b> files. <b>The</b> edit tab contains <b>the</b> <b>text</b> editing window. Below that window {{there is a}}nother window which displays the editing history and below the history there is the FIF, the [...] "Famous Input Field" [...] follows. The FIF is a special command line for entering TEA-specific commands. The editing history and the FIF are also visible in the four other tabs.|$|R
50|$|INP can be {{used for}} any small to medium {{database}} or data entry task. Basic applications of INP can be designed and implemented by persons familiar with Unix and <b>the</b> <b>text</b> <b>editor,</b> but without programming experience.|$|R
5000|$|Third-party plugins are {{available}} from the PlugRing repository and plugin announcement forum (in Russian). Some popular plugins include regular expression search and replace (both in <b>the</b> <b>text</b> <b>editor</b> and across multiple files), syntax highlighting and auto-completion for <b>the</b> <b>text</b> <b>editor,</b> SFTP/SCP and Windows Registry virtual file systems, 7-zip integration, a hex editor and a picture viewer (which overlays a DirectX surface over Far's console window). [...] Wrappers {{are available}} which allow using some Total Commander plugins with Far Manager, and vice versa. Plugins can be developed using the native C/Pascal API, or using wrappers which permit plugin development in other platforms and languages, such as [...]NET (including PowerShell), and Lua.|$|R
5000|$|Seascope runs on PyQt4 and {{integrates}} <b>the</b> Scintilla <b>text</b> <b>editor.</b>|$|R
50|$|As {{provided}} in an update, the JavaScript command line features an autocomplete function. <b>The</b> <b>text</b> <b>editor</b> also provides <b>the</b> ability to write full functions. Firebug requires a user to refresh a web {{page in the}} event of a crash.|$|R
