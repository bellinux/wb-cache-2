3601|3668|Public
5|$|Although the Saturn {{is remembered}} for several well-regarded games, {{including}} Nights into Dreams, the Panzer Dragoon series, and the Virtua Fighter series, its reputation is mixed {{due to its}} complex <b>hardware</b> <b>design</b> and limited third-party support. Sega's management {{has been criticized for}} its decision-making during the system's development and discontinuation.|$|E
5|$|The Dream was {{released}} to mostly positive reception. While the Dream was praised for its solid and robust <b>hardware</b> <b>design,</b> {{the introduction of}} the Android operating system was met with criticism for its lack of certain functionality and third-party software in comparison to more established platforms, but was still considered to be innovative due to its open nature, notifications system, and heavy integration with Google's services.|$|E
5|$|The Spectrum {{is based}} on a Zilog Z80 A CPU running at 3.5MHz (or NEC D780C-1 clone). The {{original}} model has 16KB (16×1024 bytes) of ROM and either 16KB or 48KB of RAM. <b>Hardware</b> <b>design</b> was by Richard Altwasser of Sinclair Research, and the outward appearance was designed by Sinclair's industrial designer Rick Dickinson.|$|E
40|$|In {{this paper}} {{we present a}} novel {{approach}} to the specification and verification of system-level <b>hardware</b> <b>designs.</b> It is based on Timing Diagrams, a graphical specification language with an intuitive semantics, which is especially appropriate for the description of asynchronous distributed systems such as <b>hardware</b> <b>designs.</b> Timing Diagrams and their semantics are formally defined based on a translation to Temporal Logic. It is shown that for the resulting type of formulas there is an efficient model checking procedure, thus allowing fully automatic verification of <b>hardware</b> <b>designs...</b>|$|R
5000|$|<b>Hardware</b> <b>designed</b> to {{exclusively}} support high-level programming languages ...|$|R
5000|$|... {{evaluating}} different <b>hardware</b> <b>designs</b> without building costly physical hardware systems.|$|R
5|$|Ireland became {{home to one}} of Microsoft's {{international}} {{production facilities}} in 1985, and on November 20 Microsoft released its first retail version of Microsoft Windows (Windows 1.0), originally a graphical extension for its MS-DOS operating system. In August, Microsoft and IBM partnered {{in the development of a}} different operating system called OS/2. OS/2 was marketed in connection with a new <b>hardware</b> <b>design</b> proprietary to IBM, the PS/2. On February 16, 1986, Microsoft relocated their headquarters to a corporate office campus in Redmond, Washington. Around one month later, on March 13, the company went public with an IPO, raising US$61 million at US$21.00 per share. By the end of the trading day, the price had risen to US$28.00. In 1987, Microsoft eventually released their first version of OS/2 to OEMs. By then the company was the world's largest producer of software for personal computers—ahead of former leader Lotus Development—and published the three most-popular Macintosh business applications. That year the company purchased Forethought, the developer of PowerPoint and Microsoft's first major software acquisition.|$|E
25|$|While the Nintendo 64 {{units for}} each region use {{essentially}} identical <b>hardware</b> <b>design,</b> regional lockout chips prevent games from one region from being {{played on a}} Nintendo 64 console from a different region.|$|E
25|$|It {{was this}} aspect of the <b>hardware</b> <b>design</b> that enabled {{third-party}} companies such as Activision and Imagic to develop Atari 2600 games without Atari's consent in the 1980s. This led Atari to incorporate authentication features in its later console, the Atari 7800, to prevent other companies from creating and selling their own 7800 titles without Atari's permission.|$|E
50|$|Ray-tracing {{hardware}} is {{special-purpose computer}} <b>hardware</b> <b>designed</b> for accelerating ray tracing calculations.|$|R
5000|$|... m0n0wall is {{installed}} on embedded <b>hardware</b> <b>designed</b> and manufactured by some companies.|$|R
50|$|Lower {{the cost}} of {{removable}} storage by reusing <b>hardware</b> <b>designed</b> for internal use.|$|R
25|$|Formal {{methods are}} a {{particular}} kind of mathematics based techniques for the specification, development and verification of software and hardware systems. The use of formal methods for software and <b>hardware</b> <b>design</b> is motivated by the expectation that, as in other engineering disciplines, performing appropriate mathematical analysis can contribute to the reliability and robustness of a design.|$|E
25|$|The {{attitude}} at {{the time}} was that <b>hardware</b> <b>design</b> was more mature than compiler design so this was in itself also a reason to implement parts of the functionality in hardware or microcode rather than in a memory constrained compiler (or its generated code) alone. After the advent of RISC, this philosophy became retroactively known as complex instruction set computing, or CISC.|$|E
25|$|Cenker {{worked for}} 18 years at RCA Astro-Electronics and its {{successor}} company GE Astro Space. Cenker worked on <b>hardware</b> <b>design</b> and systems design concerning satellite attitude control. He also worked on in-orbit operations, {{as well as}} spacecraft assembly, test, and pre-launch operations. He spent two years on the Navy navigation satellite program, but {{spent most of his}} career working on commercial communications satellites.|$|E
50|$|TTPCom Ltd of Royston, Hertfordshire for Software and <b>hardware</b> <b>designs</b> for mobile devices.|$|R
50|$|Model {{checking}} is {{most often}} applied to <b>hardware</b> <b>designs.</b> For software, because of undecidability (see computability theory) the approach cannot be fully algorithmic; typically it may fail to prove or disprove a given property. In embedded systems <b>hardware</b> <b>designs</b> {{it is possible to}} validate (verify against some specified requirements) a specification delivered i.e. by means of UML activity diagrams or control interpreted Petri nets.|$|R
40|$|This report {{presents}} {{results of}} tests performed in neutral buoyancy bytwopressure-suited test subjects to simulate extravehicular activity (EVA) tasks {{associated with the}} on-orbit construction and repair of precision re ectors. The purpose of the tests was to evaluate the EVA compatibility of (1) joint <b>hardware</b> <b>designed</b> to enable quick assembly of truss structure components, (2) two di erent <b>hardware</b> <b>designs</b> for attachment of precision re ector surface panels to a supporting truss structure, and (3) panel replacement tool <b>hardware</b> <b>designed</b> to enable astronauts to replace a damaged panel during EVA. Although a precision re ector spacecraft would most likely havea doubly curved re ector surface, {{the purpose of these}} tests was achieved with at mockup surface panel...|$|R
25|$|Aside from minor {{adjustments}} to reflect its <b>hardware</b> <b>design</b> differences, the system software of the Nintendo 2DS is otherwise {{identical to that}} of the 3DS, remaining compatible with all games released for the 3DS and DS (excluding those requiring the Game Boy Advance cartridge slot), and offering online features such as Nintendo Network for multiplayer and online gaming, Nintendo eShop for downloading and purchasing games, and StreetPass and SpotPass.|$|E
25|$|In {{the early}} 1980s, most home {{computers}} manufactured in Japan {{such as the}} NEC PC-6001 and PC-8000 series, Fujitsu's FM-7 and FM-8, and Hitachi's Basic Master featured a variant of then Microsoft BASIC interpreter integrated into their on-board ROMs. The <b>hardware</b> <b>design</b> of these computers and the various dialects of their BASICs were incompatible. Other Japanese consumer electronics firms such as Panasonic, Canon, Casio, Yamaha, Pioneer, and Sanyo were searching for ways to enter the new home computer market.|$|E
25|$|Although powerful, the {{internal}} modem was commercially impractical. Not {{only did it}} require special driver software, but a different <b>hardware</b> <b>design</b> was needed for every computer bus, including Apple II, S-100, TRS-80, and others. Some popular computers, like the Atari 400, did not even integrate internal slots. An obvious solution was to use the RS-232 serial port; modems were serial devices and generally driven off RS-232 anyway, and most computer designs included an RS-232 port, or some variant.|$|E
3000|$|C++ {{implements}} Object-Orientation on the C language. Many Hardware Engineers {{may consider}} that the principles of Object-Orientation are fairly remote from the creation of Hardware components. Nevertheless, Object-Orientation was created from design techniques used in <b>Hardware</b> <b>designs.</b> Data abstraction is the central aspect of Object-Orientation {{which can be found}} in everyday <b>hardware</b> <b>designs</b> with the use of publicly visible [...] "ports" [...] and private [...] "internal signals". Moreover, component instantiation found in <b>hardware</b> <b>designs</b> is almost identical to the principle of [...] "composition" [...] used in C++ for creating hierarchical <b>design.</b> <b>Hardware</b> components can be modelled in C++, and to some extent, the mechanisms used are similar to those used in HDLs. Additionally C++ provides inheritance as a way to complement the composition mechanism and promotes design reuse.|$|R
5000|$|The <b>hardware</b> <b>designs</b> and {{application}} firmware are copyrighted by Bowling & Grippo [...] {{and subject to}} patents.|$|R
40|$|We {{describe}} IODINE, a tool {{to automatically}} extract likely design properties using dynamic analysis. A practical bot-tleneck in the formal verication of <b>hardware</b> <b>designs</b> {{is the need to}} manually specify design-specic properties. IODINE presents a way to automatically extract properties such as state machine protocols, request-acknowledge pairs, and mu-tual exclusion between signals from design simulations. We show that dynamic invariant detection for <b>hardware</b> <b>designs</b> can infer relevant and accurate properties...|$|R
25|$|The Cr-48's <b>hardware</b> <b>design</b> broke {{convention}} {{by replacing}} certain keys with shortcut keys, {{such as the}} function keys, and replacing the caps lock key with a dedicated search key, which can be changed back to caps lock in the OS's keyboard settings. Google addressed complaints that the operating system offers little functionality when the host device is not connected to the Internet, demonstrated an offline version of Google Docs, and announced a 3G plan that would give users 100MB of free data each month, with additional paid plans available from Verizon.|$|E
25|$|In 2003, {{the team}} {{presented}} {{the idea to}} the Microsoft Chairman Bill Gates, in a group review. Later, the virtual team was expanded and a prototype nicknamed T1 was produced within a month. The prototype {{was based on an}} IKEA table with a hole cut in the top and a sheet of architect vellum used as a diffuser. The team also developed some applications, including pinball, a photo browser, and a video puzzle. Over the next year, Microsoft built more than 85 prototypes. The final <b>hardware</b> <b>design</b> was completed in 2005.|$|E
25|$|Midway through {{production}} of the Clip, SanDisk updated to a new <b>hardware</b> <b>design</b> based on an updated Austriamicrosystems SOC. The updated design moderately improved battery life by introducing a more efficient ARM9E processor {{in place of the}} previous ARM9 core. Aside from requiring different firmware upgrades, there were no functional changes to the software. The updated SOC would however form the basis for the Clip+ and Clip Zip products. Rockbox was released for the Clip v1 on November 21, 2009, and then for the Clip v2 on May 14, 2010.|$|E
50|$|Paparazzi {{supports}} for multiple <b>hardware</b> <b>designs,</b> including STM32 and LPC2100 series microcontrollers. A number of CAD files have been released.|$|R
30|$|To the {{knowledge}} of the authors, limited research has been carried out in the field of estimating the implementation difficulty of <b>hardware</b> <b>designs.</b>|$|R
50|$|System {{can also}} be used {{referring}} to a framework, be it software or <b>hardware,</b> <b>designed</b> to allow software programs to run, see platform.|$|R
25|$|Richard Stallman, {{the founder}} of the Free Software movement, was in 1999 skeptical on the idea and {{relevance}} of Free hardware (his terminology what is now known as open-source hardware). In a 2015 Wired article he adapted his point of view slightly; while he still sees no ethical parallel between free software and free hardware, he acknowledges the importance. Also, Stallman uses and suggest the term free <b>hardware</b> <b>design</b> over open source hardware, a request which is consistent with his earlier rejection of the term open source software (see also Alternative terms for free software).|$|E
25|$|Even {{before the}} 'wish list' was completed, <b>hardware</b> <b>design</b> company Varisys {{had been chosen}} as a partner based on their track record both with the PowerPC {{architecture}} and with parallel computing. The decision to form a partnership with Varisys had the consequence of bringing XMOS chips to the AmigaOne X1000, {{as it is the}} connection between XMOS and the Varisys team, dating back to earlier work on the Inmos Transputer, that led to the suggestion of including an XMOS XCore chip on the X1000 motherboard. This XCore chip is referred to by A-Eon as the 'Xena' Coprocessor.|$|E
25|$|Open-source {{hardware}} (OSH) {{consists of}} physical artifacts of technology designed and {{offered by the}} open design movement. Both free and open-source software (FOSS) and open-source hardware are created by this open-source culture movement and apply a like concept {{to a variety of}} components. It is sometimes, thus, referred to as FOSH (free and open-source hardware). The term usually means that information about the hardware is easily discerned so that others can make it – coupling it closely to the maker movement. <b>Hardware</b> <b>design</b> (i.e. mechanical drawings, schematics, bills of material, PCB layout data, HDL source code and integrated circuit layout data), in addition to the software that drives the hardware, are all released under free/libre terms. The original sharer gains feedback and potentially improvements on the design from the FOSH community. There is now significant evidence that such sharing can drive a high return on investment for investors.|$|E
50|$|When completed, The ISS {{will include}} a number of modules devoted to {{scientific}} activity {{as well as other}} <b>hardware</b> <b>designed</b> for the same purpose.|$|R
40|$|Very {{large-scale}} integrated (VLSI) <b>hardware</b> <b>designs</b> {{can be seen}} as {{distributed systems}} at several levels of abstraction: from the cores in a multicore architecture down to the Boolean gates in its circuit implementation, <b>hardware</b> <b>designs</b> com-prise of interacting computing nodes with non-negligible communication delays. The resulting similarities to classic large-scale distributed systems become even more accented in mission critical <b>hardware</b> <b>designs</b> that are required to operate correctly in the presence of component failures. We advocate to act on this observation and treat fault-tolerant hardware de-sign as the task of devising suitable distributed algorithms. By means of problems related to clock generation and distribution, we show that (i) design and analy-sis techniques from distributed computing can provide new and provably correct mission critical hardware solutions and (ii) studying such systems reveals many interesting and challenging open problems for distributed computing. 2...|$|R
40|$|This paper {{describes}} {{the use of}} model-based diagnosis for locating bugs in <b>hardware</b> <b>designs.</b> We restrict our view to <b>hardware</b> <b>designs</b> written in {{a subset of the}} commonly used hardware description language VHDL. This subset includes all synthesizeable (register transfer level) programs. This are programs which can be automatically converted into a gate level description without changing their behavior. Therefore almost all VHDL programs are elements of this subset. We show the conversion of VHDL programs into a logical representation. Take this representation and apply model-based diagnosis. The resulting diagnoses are mapped back to the VHDL code fragments of the original program explaining misbehaviors. Finally, we specify some rules optimizing the obtained results. We further present some arguments showing that the proposed debugging technique scales up to large <b>designs.</b> Introduction Since <b>hardware</b> <b>designs</b> continue to become larger and more complex the verification t [...] ...|$|R
