3831|0|Public
25|$|Embedded or <b>event-driven.</b>|$|E
25|$|<b>Event-driven</b> SOA {{is a form}} of service-oriented {{architecture}} (SOA), combining the intelligence and proactiveness of <b>event-driven</b> architecture with the organizational capabilities found in service offerings. Before <b>event-driven</b> SOA, the typical SOA platform orchestrated services centrally, through pre-defined business processes, assuming that what should have already been triggered is defined in a business process. This older approach (sometimes called SOA 1.0) does not account for events that occur across, or outside of, specific business processes. Thus complex events, in which a pattern of activities—both non-scheduled and scheduled—should trigger a set of services is not accounted for in traditional SOA 1.0 architecture.|$|E
25|$|<b>Event-driven</b> {{strategies}} concern {{situations in}} which the underlying investment opportunity and risk are associated with an event. An <b>event-driven</b> investment strategy finds investment opportunities in corporate transactional events such as consolidations, acquisitions, recapitalizations, bankruptcies, and liquidations. Managers employing such a strategy capitalize on valuation inconsistencies in the market before or after such events, and take a position based on the predicted movement of the security or securities in question. Large institutional investors such as hedge funds {{are more likely to}} pursue <b>event-driven</b> investing strategies than traditional equity investors because they have the expertise and resources to analyze corporate transactional events for investment opportunities.|$|E
25|$|<b>Event-driven</b> SOA {{software}} {{could allow}} homeowners to customize {{many different types}} of electricity devices found within their home to a desired level of comfort or economy. The <b>event-driven</b> software could also automatically respond to changing electricity prices, in as little as five-minute intervals. For example, to reduce the home owner's electricity usage in peak periods (when electricity is most expensive), the software could automatically lower the target temperature of the thermostat on the central heating system (in winter) or raise the target temperature of the thermostat on the central cooling system (in summer).|$|E
25|$|Unlike {{sequential}} or procedural systems (in which clients must poll {{for change}} requests), <b>event-driven</b> SOA allows systems and components to respond dynamically, in real time, as events occur. SOA 2.0 complements and extends SOA 1.0 by introducing long-running processing capabilities.|$|E
25|$|The {{integration}} of regularized models {{can be done}} by standard stiff solvers for ordinary differential equations. However, oscillations induced by the regularization can occur. Considering non-smooth models of mechanical systems with unilateral contacts and friction, two main classes of integrators exist, the <b>event-driven</b> and the so-called time-stepping integrators.|$|E
25|$|Infinite loops {{are used}} to assure a program segment loops forever or until an {{exceptional}} condition arises, such as an error. For instance, an <b>event-driven</b> program (such as a server) should loop forever, handling events as they occur, only stopping when the process is terminated by an operator.|$|E
25|$|The {{system will}} likely {{be an example of}} <b>event-driven</b> architecture, {{bottom-up}} made (based on the context of processes and operations, in real-time) and will consider any subsidiary level. Therefore, model driven and functional approaches will coexist with new ones able to treat exceptions and unusual evolution of processes (multi-agent systems, B-ADSc, etc.).|$|E
25|$|Other <b>event-driven</b> {{strategies}} include: credit arbitrage strategies, which {{focus on}} corporate fixed income securities; an activist strategy, where the fund takes large positions in companies {{and uses the}} ownership {{to participate in the}} management; a strategy based on predicting the final approval of new pharmaceutical drugs; and legal catalyst strategy, which specializes in companies involved in major lawsuits.|$|E
25|$|Hedge fund {{strategies}} are generally classified among four major categories: global macro, directional, <b>event-driven,</b> and relative value (arbitrage). Strategies within these categories each entail characteristic risk and return profiles. A fund may employ a single strategy or multiple strategies for flexibility, risk management or diversification. The hedge fund's prospectus, {{also known as}} an offering memorandum, offers potential investors information about key aspects of the fund, including the fund's investment strategy, investment type, and leverage limit.|$|E
25|$|The <b>event-driven</b> SOA {{software}} could {{shut off}} the heating element of water heaters to the pre-set response limits established by individual homeowners. For example, if the market price of electricity for a given hour exceeded the home owner's limit, the home owner could plan to go without recharging the water's hot temperature for that hour, when prices were high, and opt to delay the hot water temperature recharge to the next hour when electricity market prices might be lower.|$|E
25|$|SOA 2.0 <b>event-driven</b> {{programming}} is structured around {{the concept of}} decoupled relationships between event producers and event consumers: an event consumer doesn't care where or why an event occurs; rather, it's concerned {{that it will be}} invoked when the event has occurred. Systems and applications that separate event producers from event consumers typically rely on an event dispatcher, or channel. This channel contains an event queue that acts as an intermediary between event producers and event handlers.|$|E
25|$|All these {{criteria}} would be managed through the home owner's personal computer with internet connection, programming the various devices around {{the home to}} consume electricity only when the management software approves of the consumption. The savings represented by this technique, and enabled by <b>event-driven</b> SOA, is like improving the gas mileage in your vehicle. It makes your home energy use more efficient by enabling the consumption of electricity when the real-time prices are lower and inhibiting the consumption of electricity when real-time prices are higher.|$|E
25|$|Windows Forms Designer: The Windows Forms {{designer}} is used {{to build}} GUI applications using Windows Forms. Layout can be controlled by housing the controls inside other containers or locking them {{to the side of}} the form. Controls that display data (like textbox, list box and grid view) can be bound to data sources like databases or queries. Data-bound controls can be created by dragging items from the Data Sources window onto a design surface. The UI is linked with code using an <b>event-driven</b> programming model. The designer generates either C# or VB.NET code for the application.|$|E
25|$|Simple API for XML (SAX) is a lexical, <b>event-driven</b> API {{in which}} a {{document}} is read serially and its contents are reported as callbacks to various methods on a handler object of the user's design. SAX is fast and efficient to implement, but difficult to use for extracting information at random from the XML, since it tends to burden the application author with keeping track of {{what part of the}} document is being processed. It is better suited to situations in which certain types of information are always handled the same way, no matter where they occur in the document.|$|E
25|$|Jones' firm {{currently}} manages $17.7 billion (as of June 1, 2007). Their investment {{capabilities are}} broad and diverse, including global macro trading, fundamental equity {{investing in the}} U.S. and Europe, emerging markets, venture capital, commodities, <b>event-driven</b> strategies, and technical trading systems. Jones, with his colleague Hunt Taylor, {{was instrumental in the}} creation of FINEX, the financial futures division of the New York Board of Trade, and {{in the development of the}} U.S. dollar index futures contract that trades there. He also served as chairman of the New York Cotton Exchange from August 1992 through June 1995.|$|E
25|$|Example 3: A {{potential}} use of <b>event-driven</b> SOA {{could be}} a virtual electricity market where home clothes dryers can bid {{on the price of}} the electricity they use in a real-time market pricing system. The real-time market price and control system could turn home electricity customers into active participants in managing the power grid and their monthly utility bills. Customers can set limits on how much they would pay for electricity to run a clothes dryer, for example, and electricity providers willing to transmit power at that price would be alerted over the grid and could sell the electricity to the dryer.|$|E
25|$|Corporate {{transactional}} events generally {{fit into}} three categories: distressed securities, risk arbitrage, and special situations. Distressed securities include such events as restructurings, recapitalizations, and bankruptcies. A distressed securities investment strategy involves {{investing in the}} bonds or loans of companies facing bankruptcy or severe financial distress, when these bonds or loans are being traded at a discount to their value. Hedge fund managers pursuing the distressed debt investment strategy aim to capitalize on depressed bond prices. Hedge funds purchasing distressed debt may prevent those companies from going bankrupt, as such an acquisition deters foreclosure by banks. While <b>event-driven</b> investing in general tends to thrive during a bull market, distressed investing works best during a bear market.|$|E
25|$|New {{technology}} is available {{and has been}} piloted by the US Department of Energy that may be better suited to real-time market pricing. A potential use of <b>event-driven</b> SOA could be a virtual electricity market where home clothes dryers can bid {{on the price of}} the electricity they use in a real-time market pricing system. The real-time market price and control system could turn home electricity customers into active participants in managing the power grid and their monthly utility bills. Customers can set limits on how much they would pay for electricity to run a clothes dryer, for example, and electricity providers willing to transmit power at that price would be alerted over the grid and could sell the electricity to the dryer.|$|E
25|$|An early {{development}} of sequential control was relay logic, by which electrical relays engage electrical contacts which either start or interrupt {{power to a}} device. Relays were first used in telegraph networks before being developed for controlling other devices, such as when starting and stopping industrial-sized electric motors or opening and closing solenoid valves. Using relays for control purposes allowed <b>event-driven</b> control, where actions could be triggered out of sequence, in response to external events. These were more flexible in their response than the rigid single-sequence cam timers. More complicated examples involved maintaining safe sequences for devices such as swing bridge controls, where a lock bolt needed to be disengaged before the bridge could be moved, and the lock bolt could not be released until the safety gates had already been closed.|$|E
500|$|Darabont wrote a 60-page pilot {{script for}} [...] "Days Gone Bye". His initial script for the episode was split {{in half and}} embellished. Darabont {{explained}} that he did this to [...] "slow the narrative down and dig into the characters more deeply, so it's not just plot-driven, <b>event-driven</b> stuff. You really want to drag these characters into the equation." [...] Darabont felt that instituting visual maneuvers would increase the surreal atmosphere of a scene. Upon reading the script, Kirkman thought that producers were consistent with his comic, adding that they could possibly improve his initial work. [...] "Reading that pilot was just a revelation. It's extremely faithful. There {{are things that are}} so much like the comic, I can't really remember the nuance of what's different and what's not from the comic. He's definitely being more faithful than I expected, and everything that he's changing is brilliant. I couldn't be happier. I think the fans of the book are going to just love it." [...] The episode shares its name with volume one of the comic book series.|$|E
500|$|Cisneros's fiction {{comes in}} various forms—as novels, poems, and short stories—by which she {{challenges}} both social conventions, with her [...] "celebratory breaking of sexual taboos and trespassing across the restrictions that limit {{the lives and}} experiences of Chicanas", and literary ones, with her [...] "bold experimentation with literary voice and her development of a hybrid form that weaves poetry into prose". Published in 1991, Woman Hollering Creek and Other Stories {{is a collection of}} twenty-two short stories that form a collage of narrative techniques, each serving to engage and affect the reader in a different way. Cisneros alternates between first person, third person, and stream-of-consciousness narrative modes, and ranges from brief impressionistic vignettes to longer <b>event-driven</b> stories, and from highly poetic language to brutally frank realist language. Some stories lack a narrator to mediate between the characters and the reader; they are instead composed of textual fragments or conversations [...] "overheard" [...] by the reader. For example, [...] "Little Miracles, Kept Promises" [...] is composed of fictional notes asking for the blessings of patron saints, and [...] "The Marlboro Man" [...] transcribes a gossiping telephone conversation between two female characters.|$|E
500|$|... 2007 saw {{the show}} undergo a revamp, which {{included}} a switch to recording in HDTV, {{the introduction of a}} new family, the departure of several existing characters and {{a new version of the}} show's familiar theme song and opening titles. In addition, episode titles were abandoned, having been in use for the previous three years. Daniel Bennett, the new head of drama at Network Ten, announced that the crux of the Ramsay Street story would go [...] "back to basics" [...] and follow a less sensational path than of late with the emphasis on family relations and suburban reality. Executive producer Ric Pellizzeri said new writers, actors and sets would bring the soap back to its glory days. He added [...] "We moved too far into <b>event-driven</b> stories rather than the character-driven stories that made Neighbours what it is". The relaunch failed to attract more viewers in Australia. Pellizzeri left the series at the end of 2007 and former Neighbours scriptwriter, Susan Bower, became the new executive producer. In 2008, Neighbours was branded [...] "too white" [...] by black and Asian viewers in Britain and in Australia there was talk of a [...] "White Australia policy" [...] when it came to casting actors for soaps. In response to the criticism, Bower made a decision to add more ethnically diverse extras, small walk on roles and speaking parts, as well as introducing the character of Sunny Lee (played by Hany Lee) an exchange student from South Korea.|$|E
2500|$|<b>Event-driven</b> integrators {{distinguish}} between smooth {{parts of the}} motion in which the underlying structure of the differential equations does not change, and in events or so-called switching points at which this structure changes, i.e. time instants at which a unilateral contact closes or a stick slip transition occurs. At these switching points, the set-valued force (and additional impact) laws are evaluated {{in order to obtain}} a new underlying mathematical structure on which the integration can be continued. [...] <b>Event-driven</b> integrators are very accurate but are not suitable for systems with many contacts.|$|E
2500|$|JWt (pronounced [...] "jay-witty") is an {{open source}} widget-centric web {{application}} framework for the Java programming language developed by Emweb. It has an API that uses established GUI application development patterns. The programming model is component-based and <b>event-driven,</b> similar to Swing.|$|E
2500|$|As a multi-paradigm language, JavaScript {{supports}} <b>event-driven,</b> functional, and imperative (including object-oriented and prototype-based) [...] programming styles. It has an API {{for working}} with text, arrays, dates, regular expressions, and basic manipulation of the DOM, but the language itself does not include any I/O, such as networking, storage, or graphics facilities, relying for these upon the host environment {{in which it is}} embedded.|$|E
2500|$|A {{real-time}} {{operating system}} is an operating system that guarantees to process events or data by a specific moment in time. A real-time operating {{system may be}} single- or multi-tasking, but when multitasking, it uses specialized scheduling algorithms so that a deterministic nature of behavior is achieved. An <b>event-driven</b> system switches between tasks based on their priorities or external events while time-sharing operating systems switch tasks based on clock interrupts ...|$|E
2500|$|In the August, 1977 {{issue of}} the Communications of the ACM, W. R. Franta and Kurt Maly {{published}} an article entitled [...] "An efficient data structure for the simulation event set" [...] describing an event queue data structure for discrete <b>event-driven</b> simulation systems that demonstrated [...] "performance superior to that of commonly used simple linked list algorithms," [...] good behavior given non-uniform time distributions, and worst case complexity , [...] "n" [...] being the number {{of events in the}} queue.|$|E
2500|$|Mealy machine: The FSM {{also uses}} input actions, i.e., output depends on input and state. The {{use of a}} Mealy FSM leads often to a {{reduction}} {{of the number of}} states. The example in figure 7 shows a Mealy FSM implementing the same behaviour as in the Moore example (the behaviour depends on the implemented FSM execution model and will work, e.g., for virtual FSM but not for <b>event-driven</b> FSM). There are two input actions (I:): [...] "start motor to close the door if command_close arrives" [...] and [...] "start motor in the other direction to open the door if command_open arrives". The [...] "opening" [...] and [...] "closing" [...] intermediate states are not shown.|$|E
2500|$|While {{many games}} rely on {{emergent}} principles, video games commonly present simulated story worlds where emergent behavior occurs {{within the context}} of the game. The term [...] "emergent narrative" [...] has been used to describe how, in a simulated environment, storyline can be created simply by [...] "what happens to the player." [...] However, emergent behavior is not limited to sophisticated games. In general, any place where <b>event-driven</b> instructions occur for AI in a game, emergent behavior will exist. For instance, take a racing game in which cars are programmed to avoid crashing, and they encounter an obstacle in the track: the cars might then maneuver to avoid the obstacle causing the cars behind them to slow and/or maneuver to accommodate the cars in front of them and the obstacle. The programmer never wrote code to specifically create a traffic jam, yet one now exists in the game.|$|E
5000|$|SEDA - Staged <b>event-driven</b> {{architecture}} decomposes complex, <b>event-driven</b> architectures into stages ...|$|E
50|$|Nginx uses an {{asynchronous}} <b>event-driven</b> {{approach to}} handling requests. Nginx's modular <b>event-driven</b> architecture can provide more predictable performance under high loads.|$|E
50|$|The <b>event-driven</b> {{algorithm}} used by CircuitLogix is general-purpose {{and supports}} non-digital types of data. For example, elements can use real or integer values to simulate DSP functions or sampled data filters. Because the <b>event-driven</b> algorithm is {{faster than the}} standard SPICE matrix, simulation time is greatly reduced for circuits that use <b>event-driven</b> models in place of analog models.|$|E
50|$|Esper {{extends the}} SQL-92 {{standard}} for its engine and enterprise framework, providing Aggregate function, Pattern matching, event windowing and joining. Esper implements <b>Event-driven</b> programming and <b>event-driven</b> architecture.|$|E
50|$|Building {{applications}} and systems around an <b>event-driven</b> architecture allows these {{applications and}} systems to be constructed {{in a manner}} that facilitates more responsiveness, because <b>event-driven</b> systems are, by design, more normalized to unpredictable and asynchronous environments.|$|E
50|$|User {{interfaces}} {{are commonly}} programmed using an <b>event-driven</b> architecture, so GUI builders also simplify creating <b>event-driven</b> code. This supporting code connects widgets with the outgoing and incoming events that trigger the functions providing the application logic.|$|E
