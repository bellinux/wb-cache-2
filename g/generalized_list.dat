17|47|Public
40|$|AbstractIn this paper, we {{show that}} the Alon–Tarsi theorem for choosability in graphs has an {{analogous}} version for the <b>generalized</b> <b>list</b> T-colorings—a concept which captures both the channel assignment problem and the T-colorings. We apply this result to cycles for <b>generalized</b> <b>list</b> labelings with a condition at distance two...|$|E
40|$|In {{this unit}} {{students}} will {{learn how to}} assess the needs requirements and evaluate options in order to implement and maintain a GIS laboratory and how to plan and manage GIS project work. A <b>generalized</b> <b>list</b> of questions to ask when beginning any project and list of tasks are presented to illustrate a common approach to project management...|$|E
40|$|We {{study the}} notion of a <b>generalized</b> <b>list</b> T-coloring which is a common {{generalization}} of the channel assignment problem and the T-coloring. An instance of the <b>generalized</b> <b>list</b> T-coloring is described by a triple (G;; t) where G is a graph, is a mapping which assigns the vertices of G lists of numbers (colors) and t is a mapping which assigns each edge of G a set of forbidden dierences. We require that 0 2 t(e) for each edge e of G. The goal is to nd a labeling c of the vertices of G with c(v) 2 (v) for each vertex v, and jc(u) c(v) j 62 t(uv) for each edge uv of G. An instance is balanced if the size of the list (v) for each vertex v is equal to the sum of the sizes of t(e) for edges e incident with v...|$|E
40|$|List matrix {{partitions}} {{are restricted}} binary list constraint satisfaction problems which <b>generalize</b> <b>list</b> homomorphisms and many graph partition problems arising, e. g., {{in the study}} of perfect graphs. Most of the existing algorithms apply to concrete small matrices, i. e., to partitions problems, provide algorithms for their solution, and discuss their implications...|$|R
40|$|We {{introduce}} a new variant of graph coloring called correspondence coloring which <b>generalizes</b> <b>list</b> coloring and allows for reductions previously only possible for ordinary coloring. Using this tool, we prove that excluding cycles of lengths 4 to 8 is sufficient to guarantee 3 -choosability of a planar graph, thus answering a question of Borodin. Comment: 22 pages, 3 figures; v 2 : improves presentatio...|$|R
5000|$|Under this definition, {{the first}} {{uncountable}} ordinal [...] can be enumerated by the identity function on [...] {{so that these}} two notions do not coincide. More generally, it is a theorem of ZF that any well-ordered set can be enumerated under this characterization so that it coincides up to relabeling with the <b>generalized</b> <b>listing</b> enumeration. If one also assumes the Axiom of Choice, then all sets can be enumerated so that it coincides up to relabeling with the most general form of enumerations.|$|R
40|$|A <b>generalized</b> <b>list</b> {{of motives}} which are topical {{for the period}} of personality’s early professionalization is sug-gested in the article. It is made on the ground of the {{analysis}} of a series of publications, devoted to this problem. The list can {{serve as the basis for}} comparison and monitoring of the dynamics of young specialists motivational profiles; the optimization of the systems of stimulating them, and the management of the professional self-actualizatio...|$|E
40|$|In this paper, {{we study}} the service request (ticket) allo-cation problem which arises in every IT service {{delivery}} or-ganization. We {{refer to this}} problem as Ticket Allocation Problem (TAP). We first show that TAP is an instance of the online scheduling problem on unrelated machines, which {{is known to be}} a hard problem. Next, we describe a base-line model, namely push model, that deals with the TAP. The push model is an industry wide standard and can be used with any known online scheduling algorithm for unre-lated machines. To elaborate this further, we discuss a well known <b>Generalized</b> <b>List</b> Scheduling algorithm which can be used by the push model. We prove a bound for this algo-rithm’s competitive ratio which beats all the known bounds. We show that push model suffers from an inherent ineffi-ciency due to scheduler having incomplete and imprecise information regarding agents ’ proficiency. Finally, we show that if the scheduling algorithm used by the push model can be converted into a truthful auction mechanism then all the inefficiencies of the push model can be overcome. We re-fer to the resulting model as the pull model. To illustrate the idea, we map the <b>Generalized</b> <b>List</b> Scheduling algorithm into a truthful auction mechanism. Through simulation ex-periments, we show that the auction based pull model re-sults in higher efficiency than the push model. 1...|$|E
40|$|AbstractWe {{consider}} {{the problem of}} scheduling a partially ordered set of unit execution time (UET) tasks on m > 1 processors {{where there is a}} communication delay of unit time between any pair of distinct processors. We show that the problem of finding an optimal schedule is NP-hard. A greedy schedule is one where no processor remains idle if there is some task available which it could process. We establish that the length of an arbitrary greedy schedule, ωcg satisfies wcg 3 − 2 m wcopt − 1 − 1 m where ωcopt is the length of the optimal schedule. We define a <b>generalized</b> <b>list</b> schedule (a type of greedy schedule) and discuss anomalous behavour of such schedules with respect to speed-up. The relevance of these results to the implementation of parallel languages is discussed...|$|E
30|$|It {{is clear}} from the {{previous}} definition that the Clarke generalized partial directional derivative inherits all properties of the Clarke <b>generalized</b> directional derivative <b>listed</b> in Lemma  2.2.|$|R
40|$|We <b>generalize</b> the <b>list</b> {{decoding}} algorithm for one-point (strongly) algebraic-geometric codes by Guruswami and Sudan to all algebraic-geometric codes. Moreover, our algorithm {{works for}} a generalized Hamming distance with real weight coefficients rather than integer weight coefficients. This is more suitable for soft-decision decoding where these weight coefficients are, for instance, absolute values of log-likelihoods. Given a vector y 2 F...|$|R
40|$|We <b>generalize</b> the <b>list</b> {{decoding}} algorithm for Hermitian codes {{proposed by}} Lee and O’Sullivan [11] based on Gröbner bases to general one-point AG codes, under an assumption weaker than one used by Beelen and Brander [3]. Our generalization {{enables us to}} apply the fast algorithm to compute a Gröbner basis of a module proposed by Lee and O’Sullivan [11], which was not possible in another generalization by Lax [10]...|$|R
40|$|The aim of {{the work}} is to study the changes of {{ecological}} situation in the Mongolian freshwater reservoirs and to reveal the general tendencies of transforming natural country conditions in the holocoen. The diatom analysis of the Mongolian lake bottomset deposits has been performed firstly. The first <b>generalized</b> <b>list</b> of the holocoen diatom flora has been drawn out. The general and regional changes of natural situation in the Mongolian holocoen have been revealed, the early representations about them have been corrected. The investigation results can be applied at performing ecological monittoring, long-term forecasting of the environment changes in the different country regions and at determining character of the contaminated waters under influence of the different type antropogenic actionAvailable from VNTIC / VNTIC - Scientific & Technical Information Centre of RussiaSIGLERURussian Federatio...|$|E
40|$|Tests {{were made}} in a 10 % 7 speed open jet wind tunnel to obtain the effects on the flutter of an M-wing of {{variation}} of inertia parameters of a. nacelle at the wing kink. The effect of fuselage mobility was also investigated, The results show that for the p~articular wing tested a nacelle mass up to about 0. 8 of that of the wing can be tolerated at the kink without a si,o;niPicant adverse effect on flut'kr, and, in general, an aft position of nacelle e. g. is to be preferred. Lower flutter speed s are associated with symmetric fuselage freedoms than with antisymmetric ones. The latter result is thought to apply to M-wings in general {{but the majority of}} the results obtained cannot be <b>generalized.</b> <b>LIST</b> OF CONTEM'I'...|$|E
40|$|An {{important}} {{class of}} applications with real-time data transport requirements {{is defined by}} applications requiring transmission of data units at regular intervals. These applications, which we call continuous media (CM) clients, include video conferencing, voice communication, and high-quality digital sound. The design of a data transport service for CM clients and its underlying protocol (within the XUNET II project) is presented in this paper. The service makes use, in particular, of an a priori characterization of future data transmission requests by CM clients. First, we will give {{a few examples of}} CM clients and their specific data transmission needs. From these clients, we then extract a <b>generalized</b> <b>list</b> of data transport requirements for CM and describe the basic features of a service designed to meet these requirements. This service provides unreliable, in-sequence transfer (simplex, periodic) of so-called stream data units (STDUs) between a sending and a receiving client, with [...] ...|$|E
50|$|Its syntax {{is closer}} to the earlier {{commercial}} language Miranda than the subsequently standardized Haskell. It lacks some of features of Haskell (such as the deriving clause in data type definitions) but includes a number of features which were not adopted by Haskell (although some were later incorporated intio GHC, such as <b>generalizing</b> the <b>list</b> comprehension syntax to support any monad, which is now available using the MonadComprehensions extension).|$|R
40|$|AbstractList {{partitions}} <b>generalize</b> <b>list</b> colourings. Sandwich problems generalize recognition problems. The polynomial dichotomy (NP-complete versus polynomial) of list partition {{problems is}} solved for 4 -dimensional partitions {{with the exception}} of one problem (the list stubborn problem) for which the complexity is known to be quasipolynomial. Every partition problem for 4 nonempty parts and only external constraints is known to be polynomial {{with the exception of}} one problem (the 2 K 2 -partition problem) for which the complexity of the corresponding list problem is known to be NP-complete. The present paper considers external constraint 4 nonempty part sandwich problems. We extend the tools developed for polynomial solutions of recognition problems obtaining polynomial solutions for most corresponding sandwich versions. We extend the tools developed for NP-complete reductions of sandwich partition problems obtaining the classification into NP-complete for some external constraint 4 nonempty part sandwich problems. On the other hand and additionally, we propose a general strategy for defining polynomial reductions from the 2 K 2 -partition problem to several external constraint 4 nonempty part sandwich problems, defining a class of 2 K 2 -hard problems. Finally, we discuss the complexity of the Skew Partition Sandwich Problem...|$|R
40|$|The Very Portable Optimizer is a {{compiler}} {{tool for}} machine-independent program optimization. Optimizations are {{performed at the}} <b>generalized</b> Register Transfer <b>List</b> level so that any machine platform can be targeted. During this process, VPO utilizes a checking routine called &quot;gatekeeper &quot; to ensure that optimizations will translate to instructions for a given machin...|$|R
40|$|Discrete AlgorithmsInternational audienceThe <b>generalized</b> <b>list</b> T-coloring is {{a common}} {{generalization}} of many graph coloring models, including classical coloring, L(p,q) -labeling, channel assignment and T-coloring. Every vertex from the input graph has a list of permitted labels. Moreover, every edge has a set of forbidden differences. We ask for a labeling of vertices of the input graph with natural numbers, in which every vertex gets a label from its list of permitted labels and the difference of labels of the endpoints of each edge {{does not belong to}} the set of forbidden differences of this edge. In this paper we present an exact algorithm solving this problem, running in time O*((τ+ 2) n), where τ is the maximum forbidden difference over all edges of the input graph and n is the number of its vertices. Moreover, we show how to improve this bound if the input graph has some special structure, e. g. a bounded maximum degree, no big induced stars or a perfect matching...|$|E
40|$|The paper {{describes}} LFL, a <b>generalized</b> <b>list</b> processing language. LFL {{allows the}} user to define multiple cell structures and cell sizes at runtime, thereby allowing nonhomogeneous list structures. The paper examines {{the problems associated with}} list tracing in systems allowing multiple cell-types. Complex list tracing during garbage collection in LFL is avoided: (1) by creating a doubly-linked super list of all allocated cells and (2) by using a reference count scheme. No marking phase is required for garbage collection. The problem of developing insertion and deletion procedures for lists with cells having multiple types of pointer structures is discussed and LFL solutions are given. LPL statements can handle singly-linked, doubly-linked, left-right-linked, and some multi-linked pointer structures automatically. The design philosophy and the data organization for LPL are discussed in detail. Examples of the definition of cell structures are given, and all of the LPL list manipulation and creation statements arc examined and discussed...|$|E
40|$|The <b>generalized</b> <b>list</b> T-coloring is {{a common}} {{generalization}} of many graph coloring models, including classical coloring, L(p, q) -labeling, channel assignment and T-coloring. Every vertex from the input graph has a list of permitted labels. Moreover, every edge has a set of forbidden differences. We ask for a labeling of vertices of the input graph with natural numbers, in which every vertex gets a label from its list of permitted labels and the difference of labels of the endpoints of each edge {{does not belong to}} the set of forbidden differences of this edge. In this paper we present an exact algorithm solving this problem, running in time O∗((τ + 2) n), where τ is the maximum forbidden difference over all edges of the input graph and n is the number of its vertices. Moreover, we show how to improve this bound if the input graph has some special structure, e. g. a bounded maximum degree, no big induced stars or a perfect matching...|$|E
40|$|We <b>generalize</b> the <b>list</b> {{decoding}} algorithm for Hermitian codes {{proposed by}} Lee and O'Sullivan based on Gröbner bases to general one-point AG codes, under an assumption weaker than one used by Beelen and Brander. Our generalization {{enables us to}} apply the fast algorithm to compute a Gröbner basis of a module proposed by Lee and O'Sullivan, which was not possible in another generalization by Lax. Comment: article. cls, 14 pages, no figure. The order of authors was changed. To appear in Journal of Symbolic Computation. This is an extended journal paper version of our earlier conference paper arXiv: 1201. 624...|$|R
40|$|<b>List</b> homomorphisms <b>generalize</b> <b>list</b> {{colourings}} in {{the following}} way: Given graphs G; H, and lists L(v) ` V (H); v 2 V (G), a list homomorphism of G to H {{with respect to the}} lists L is a mapping f : V (G) ! V (H) such that uv 2 E(G) implies f(u) f(v) 2 E(H), and f(v) 2 L(v) for all v 2 V (G). The list homomorphism problem for a fixed graph H asks whether or not an input graph G together with lists L(v) ` V (H), v 2 V (G), admits a list homomorphism with respect to L. The list homomorphism problem was introduced by Feder and Hell, who proved that for reflexive graphs H (that is, for graphs H in which every vertex has a loop), the problem is polynomial time solvable if H is an interval graph, and is NP-complete otherwise. Here we consider graphs H without loops, and find that the problem is closely related to circular arc graphs. We show that the list homomorphism problem is polynomial time solvable if the complement of H is a circular arc graph of clique covering number two, and is NP-complete otherwise. For the purposes of the proof we give a new characterization of circular arc graphs of clique covering number two, by the absence of a structure analogous to Gallai's asteroids. Both results point to a surprising similarity between interval graphs and the complements of circular arc graphs of clique covering number two. Key Words: Homomorphisms, list-homomorphisms, retractions, asteroidal triples, circular arc graphs, algorithms, complexity. ...|$|R
40|$|AbstractWe {{present a}} new {{algorithm}} for CRT list decoding. An instance of the, CRT list decoding problem consists of integers B, 〈p 1,…,pn〉 and 〈r 1,…,rn〉, where p 1 n/ 3. The bounds we obtain {{are similar to}} the bounds obtained by Guruswami and Sudan for Reed–Solomon list decoding. Hence, our algorithm reduces the gap between CRT list decoding and list decoding of Reed–Solomon codes. In addition, we give a new application for CRT list decoding: finding smooth integers in short intervals. Problems of this type come up in several algorithms for factoring large integers. We define and solve a <b>generalized</b> CRT <b>list</b> decoding problem and discuss how it might be used within the quadratic sieve factoring method...|$|R
30|$|The survey {{instrument}} {{consisted of a}} consent form and a questionnaire containing 17 single and multi-part questions, intended to elicit the respondents’ perceptions regarding {{the importance of a}} number of ecosystem services and service metrics. Several demographic questions were included and respondents could make additional open-form comments on any aspect of the survey. Three multi-part questions provided the primary data used in the current study (see Additional file 1). One question asked respondents to rate the importance of a <b>generalized</b> <b>list</b> of ecosystem services to his/her household on a scale from 1 (“NOT IMPORTANT AT ALL”) to 6 (“EXTREMELY IMPORTANT”). Six of these were analyzed in this study; water flow regulation, water quality regulation, greenhouse gas regulation, scenic beauty, provision of timber products, and provision of firewood and other energy feedstocks. Two additional questions asked respondents to rate the importance of several metrics of water flow regulation (flood prevention and drought prevention) and water quality regulation (water that is safe to drink; and water that smells and tastes good) to their families on the same [1, 6] scale.|$|E
40|$|Presented in {{this chapter}} are data on the {{principal}} hydrolysis products of Russian VX (RVX) with excess and equimolar quantity of water, {{as well as a}} <b>generalized</b> <b>list</b> of compounds extracted from samples of construction materials of a former RVX production facility. Toxicokinetic experiments have been conducted to determine decrease of O-alkyl methylphosphonates in blood plasma of rats after i. m. administration of RVX. MS/MS peptide spectra obtained with commercially available human albumin incubated with RVX revealed covalent binding of RVX to Tyr 411 and Tyr 150. A new covalent adduct of N,N-diethyl- 2 -aminoethanthiol (a RVX hydrolysis product) with blood plasma proteins has been detected by HPLC–MS/MS, and this can be another marker of exposure to RVX. New data on effects developed under chronic exposure of rats to RVX are presented: these are kinetic parameters of blood platelet aggregation and electrophysiology of Nervus tibialis. According to these data, morphofunctional changes {{at the level of the}} microcirculatory bed may prove to be a significant factor in the etiology of delayed effects...|$|E
40|$|Abstract To avoid signal {{interference}} in mobile communicationit is necessary that the channels used by base stations for broadcast communication within their cells are chosen sothat the same channel is never concurrently used by two neighboring stations. We model this channel allocationproblem as a <b>generalized</b> <b>list</b> coloring problem and we provide two distributed solutions {{which are also}} able to copewith crash failures by limiting {{the size of the}} network affected by a faulty station in terms of the distance from thatstation. Our first solution uses a powerful synchronization mechanism to achieve a response time that depends onlyon Δ, the maximum degree of the signal interference graph,and a failure locality of 4. Our second solution is a simple randomized solution in which each node can expect to pick f=(4 Δ) colors where f is the size of the list at the node; theresponse time of this solution is a constant and the failure locality 1. Besides being efficient (their complexity mea-sures involve only small constants), the protocols presented in this work are simple and easy to apply in practice, pro-vided the existence of distributed infrastructure in networks that are in use...|$|E
40|$|This paper {{presents}} {{a method of}} indexing cases for case-based evaluation assistant systems of novice programs. Program lists in evaluation cases should be represented in intact target programming language, because special forms of program lists put heavy burdens on teachers who are users of the systems. However, intact forms of program lists cannot cover that many variations. Therefore, indexes to cases should be constructed by using information of <b>generalized</b> program <b>lists</b> in order to expand the variations of program lists covered by one case. We propose a three level index of evaluation cases for novice programs written in a simple assembly language. Practical use in actual classes and retrieval experiments demonstrated {{the effectiveness of the}} proposed index method...|$|R
40|$|<b>List</b> {{partitions}} <b>generalize</b> <b>list</b> colourings and list homomorphisms. Each {{symmetric matrix}} M over 0; 1; defines a list partition problem. Different choices {{of the matrix}} M lead to many well-known graph theoretic problems including the problem of recognizing split graphs and their generalizations, finding homogeneous sets, joins, clique cutsets, stable cutsets, skew cutsets and so on. We develop tools which allow us to classify the complexity of many list partition problems and, in particular, yield the complete classification for small matrices M. Along the way, we obtain a variety of specific results including: generalizations of Lov'asz's communication bound {{on the number of}} cliqueversus -stable-set separators; polynomial-time algorithms to recognize generalized split graphs; a polynomial algorithm for the list version of the Clique Cutset Problem; and the first subexponential algorithm for the Skew Cutset Problem of Chv'atal. We also show that the dichotomy (NP -complete versus polynomial-time solvable), conjectured for certain graph homomorphism problems would, if true, imply a slightly weaker dichotomy (NP -complete versus quasipolynomial) for our list partition problems 1. E-mail: tomas@theory. stanford. edu. y School of Computing Science, Simon Fraser University, Burnaby, B. C., Canada, V 5 A 1 S 6. E-mail: pavol@cs. sfu. ca. Supported by a Research Grant from the National Sciences and Engineering Research Council. z Departamento da Ciencia da Computac~ao - I. M., COPPE/Sistemas, Universidade Federal do Rio de Janeiro, RJ, 21945 - 970, Brasil. E-mail: sula@cos. ufrj. br. Supported by CNPq and PRONEX 107 / 97. x Department of Computer Science, Stanford University, CA 94305 - 9045. E-mail: rajeev@cs. stanford. edu. Supported by an ARO MURI Grant DAAH 04 [...] 96 [...] 1 [...] ...|$|R
40|$|It is {{well known}} that a clique with k + 1 {{vertices}} is the only minimal obstruction to k-colourability of chordal graphs. A similar result is known for the existence of a cover by ℓ cliques. Both of these problems are in fact partition problems, restricted to chordal graphs. The first seeks partitions into k independent sets, and the second is equivalent to finding partitions into ℓ cliques. In an earlier paper we proved that a chordal graph can be partitioned into k independent sets and ℓ cliques if and only if it does not contain an induced disjoint union of ℓ + 1 cliques of size k + 1. (A linear time algorithm for finding such partitions can be derived from the proof.) In this paper we expand our focus and consider more general partitions of chordal graphs. For each symmetric matrix M over 0, 1, ∗, the M-partition problem seeks a partition of the input graph into independent sets, cliques, or arbitrary sets, with certain pairs of sets being required to have no edges, or to have all edges joining them, as encoded in the matrix M. Moreover, the vertices of the input chordal graph can be equipped with lists, restricting the parts to which a vertex can be placed. Such (<b>list)</b> partitions <b>generalize</b> (<b>list)</b> colourings and (list) homomorphisms, and arise frequently in the theory of graph perfection. We show that many M-partition problems that are NP-complete in general become solvable in polynomial time for chordal graphs, even in the presence of lists. On the other hand, we show that there are M-partition problems (without lists) that remain NP-complete for chordal graphs. It is not known whether or not each list M-partition problem is NP-complete or polynomial, but {{it has been shown that}} each is NP-complet...|$|R
40|$|To avoid signal {{interference}} in mobile communication {{it is necessary}} that the channels used by base stations for broadcast communication within their cells are chosen so that the same channel is never concurrently used by two neighboring stations. We model this channel allocation problem as a <b>generalized</b> <b>list</b> coloring problem and we provide two distributed solutions, which are also able to cope with crash failures, by limiting the size of the network affected by a faulty station in terms of the distance from that station. Our first solution uses a powerful synchronization mechanism to achieve a response time that depends only on Δ, the maximum degree of the signal interference graph, and a failure locality of 4. Our second solution is a simple randomized solution in which each node can expect to pick f/ 4 Δ colors where f is the size of the list at the node; the response time of this solution is a constant and the failure locality 1. Besides being efficient (their complexity measures involve only small constants), the protocols presented in this work are simple and easy to apply in practice, provided the existence of distributed infrastructure in networks that are in use...|$|E
40|$|Scheduling {{precedence}} graphs with communication {{times is}} the theoretical basis for achieving efficient parallelism in message-passing machines. The lack of global {{information on the}} tasks, due to communication, has lead to develop local scheduling heuristics such as the Earliest-Task-First. Using knowledge on computation, com-munication, and system topology, a class of global priority-based scheduling heuris-tics called <b>Generalized</b> <b>List</b> Scheduling is proposed. The task-level is evaluated by backward scheduling the computation over the multiprocessor by using the best local heuristic. This leads to realistic measurement of the task priority for use in forward GLS scheduling. Experimental evaluation of local and GLS heuristics is carried out using extensive random graph generation and altering over the communication, inherent parallelism, and system topology. Analysis shows that local heuristics rely on locally maximiz-ing the processor efficiency and gives acceptable deviations only when the inherent parallelism {{is large enough to}} cover the effective communication. This leads the local heuristics to achieve bounded speedup. GLS scheduling is based on combining two strategies: 1) differentiate critical com-putation and communications from others by scheduling critical paths first, and 2) im-plement effective management of processor utilization in order to increase the speedup. GLS scheduling maintains acceptable relative deviation versus change in parallelism, communication, and multiprocessor topology. The time complexity of GLS heuris-tics is O(pn 2), where p and n are the number of processors and that of the tasks, respectively...|$|E
40|$|AbstractTrigraph list {{homomorphism}} problems, {{also known}} as list matrix partition problems, <b>generalize</b> graph <b>list</b> colouring and digraph list homomorphism problems. While digraph list homomorphism problems enjoy a dichotomy (each problem is NP-complete or polynomial time solvable), such dichotomy is not necessarily expected for trigraph list homomorphism problems, and in the few cases where dichotomy has been proved, for small trigraphs, the progress has been slow. In this paper, we prove dichotomy for trigraph list homomorphism problems where the underlying graph of the trigraph is a tree. In fact, we show that for these trigraphs the trigraph list homomorphism problem is polynomially equivalent to a related digraph list homomorphism problem. The result can be extended to a larger class of trigraphs, and we illustrate the extension on trigraph cycles...|$|R
40|$|List comprehensions are {{a widely}} used {{programming}} con- struct, in languages such as Haskell and Python and in {{technologies such as}} Microsoft's Language Integrated Query. They <b>generalize</b> from <b>lists</b> to arbitrary monads, yielding a lightweight idiom of imperative programming in a pure functional language. When the monad has the additional structure of a so-called ringad, corresponding to 'empty' and 'union' operations, then {{it can be seen}} as some kind of collection type, and the comprehension notation can also be extended to incorporate aggrega- tions. Ringad comprehensions represent a convenient notation for expressing database queries. The ringad structure alone does not provide a good explanation or an efficient implementation of relational joins; but by allowing heterogeneous comprehensions, involving both bag and indexed table ringads, we show how to accommodate these too...|$|R
40|$|This paper {{describes}} a methodology for performing a thermodynamic {{analysis of a}} process, and it demonstrates how such a study {{can be useful in}} identifying areas in the process with the greatest potential for improvement in energy use. The basis is a typical modern ethane cracker. The processing sequence was divided into subsections and the 'lost work' of each section quantified. Combustion and radiant heat transfer in the furnaces and boilers alone result in the loss of 50 % of the availability that enters the plant. Based on these data, some suggestions for significant process improvement are analyzed. For situations where entropy calculations are impractical, a <b>generalized</b> check <b>list</b> is presented which identifies areas of potential economic impact for the process developer/designer, as a partial substitute for the full analysis...|$|R
40|$|Trigraph list {{homomorphism}} problems, {{also known}} as list matrix partition problems, <b>generalize</b> graph <b>list</b> colouring and digraph list homomorphism problems. While digraph list homomorphism problems enjoy a dichotomy (each problem is -complete or polynomial time solvable), such dichotomy is not necessarily expected for trigraph list homomorphism problems, and in the few cases where dichotomy has been proved, for small trigraphs, the progress has been slow. In this paper, we prove dichotomy for trigraph list homomorphism problems where the underlying graph of the trigraph is a tree. In fact, we show that for these trigraphs the trigraph list homomorphism problem is polynomially equivalent to a related digraph list homomorphism problem. The result can be extended to a larger class of trigraphs, and we illustrate the extension on trigraph cycles...|$|R
