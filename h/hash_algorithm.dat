342|775|Public
25|$|Systems {{that use}} {{passwords}} for authentication {{must have some}} way to check any password entered to gain access. If the valid passwords are simply stored in a system file or database, an attacker who gains sufficient access to the system will obtain all user passwords, giving the attacker access to all accounts on the attacked system, and possibly other systems where users employ the same or similar passwords. One way to reduce this risk is to store only a cryptographic hash of each password instead of the password itself. Standard cryptographic hashes, such as the Secure <b>Hash</b> <b>Algorithm</b> (SHA) series, are very hard to reverse, so an attacker who gets hold of the hash value cannot directly recover the password. However, knowledge of the hash value lets the attacker quickly test guesses offline. Password cracking programs are widely available that will test {{a large number of}} trial passwords against a purloined cryptographic hash.|$|E
2500|$|Cryptographic hash {{functions}} are a third type of cryptographic algorithm. They take {{a message of}} any length as input, and output a short, fixed length hash, {{which can be used}} in (for example) a digital signature. For good hash functions, an attacker cannot find two messages that produce the same hash. MD4 is a long-used hash function that is now broken; MD5, a strengthened variant of MD4, is also widely used but broken in practice. The US National Security Agency developed the Secure <b>Hash</b> <b>Algorithm</b> series of MD5-like hash functions: SHA-0 was a flawed algorithm that the agency withdrew; SHA-1 is widely deployed and more secure than MD5, but cryptanalysts have identified attacks against it; the SHA-2 family improves on SHA-1, but it isn't yet widely deployed; and the US standards authority thought it [...] "prudent" [...] from a security perspective to develop a new standard to [...] "significantly improve the robustness of NIST's overall <b>hash</b> <b>algorithm</b> toolkit." [...] Thus, a hash function design competition was meant to select a new U.S. national standard, to be called SHA-3, by 2012. The competition ended on October 2, 2012 when the NIST announced that Keccak would be the new SHA-3 <b>hash</b> <b>algorithm.</b> Unlike block and stream ciphers that are invertible, cryptographic hash functions produce a hashed output that cannot be used to retrieve the original input data. Cryptographic hash {{functions are}} used to verify the authenticity of data retrieved from an untrusted source or to add a layer of security.|$|E
50|$|An easy {{example of}} MAC address anonymization {{would be to}} use a simple <b>hash</b> <b>algorithm.</b> Given an address of 11:22:33:44:55, the MD5 <b>hash</b> <b>algorithm</b> {{produces}} 8,093,140,232,281,458,246 (0x70509c29768f0646).|$|E
5000|$|SHA-256 <b>hashing</b> <b>algorithm</b> as {{the default}} {{password}} <b>hashing</b> <b>algorithm</b> ...|$|R
30|$|We {{perform a}} lot of testing to measure the <b>hashing</b> <b>algorithm</b> (with the {{restricted}} blocking method) against the previous NMF <b>hashing</b> <b>algorithm</b> [20]. Experimental {{results show that the}} use of the restricted blocking strategy can effectively improve the performance of the NMF <b>hashing</b> <b>algorithm</b> for the rotation operations.|$|R
40|$|Abstract: Cryptographic <b>hash</b> <b>algorithms</b> are {{important}} building blocks in cryptographic protocols, providing authentication and assurance of integrity. While many different <b>hash</b> <b>algorithms</b> are available including MD 5, Tiger, and HAVAL, {{it is difficult}} to compare them since they do not necessarily use the same techniques to achieve their security goals. This work informally describes a framework in four parts which allows different <b>hash</b> <b>algorithms</b> to be compared based on their strengths and weaknesses. By breaking down cryptographic <b>hash</b> <b>algorithms</b> into their preprocessing, postprocessing, compression function, and internal structure components, weaknesses in existing algorithms can be mitigated and new algorithms can take advantage of strong individual components. ...|$|R
50|$|In TLS 1.3, a {{cipher suite}} {{represents}} an AEAD encryption algorithm and a <b>hash</b> <b>algorithm</b> used in HKDF. For example, TLS_AES_128_GCM_SHA256 indicates AES_128_GCM {{is used to}} encrypt messages, and SHA256 is the underlying <b>hash</b> <b>algorithm</b> in HKDF. Non-AEAD encryption algorithms (such as AES_128_CBC) {{are not allowed to}} be used.|$|E
5000|$|Secure <b>Hash</b> <b>Algorithm</b> 2 (SHA-256 and SHA-384) â€” {{message digest}} ...|$|E
5000|$|The SHA-1 <b>hash</b> <b>algorithm</b> uses 0123456789ABCDEFFEDCBA9876543210F0E1D2C3 as {{its initial}} hash value.|$|E
30|$|We {{discuss the}} effect of the block size on the NMF <b>hashing</b> <b>algorithm.</b> The bigger block size is, the <b>hashing</b> <b>algorithm</b> is more {{resistant}} to rotation since a bigger block will include the more public pixels for the same rotation angle.|$|R
5000|$|... <b>hashing</b> <b>algorithms</b> MD5, RIPEMD-128/160, SHA-1, SHA-2 and Whirlpool; ...|$|R
30|$|From {{the above}} {{experimental}} analysis, {{we can see}} that the NMF <b>hashing</b> <b>algorithm</b> with the restricted blocking strategy can provide stronger performance than the recently reported NMF <b>hashing</b> <b>algorithm</b> [20] in the presence of rotation with the loose and crop modes while keeping the robustness to other attacks.|$|R
5000|$|FreeBSD {{implemented}} {{support for}} the NT LAN Manager <b>hash</b> <b>algorithm</b> to provide easier compatibility with NT accounts. [...] The NT-Hash algorithm {{is known to be}} weak, as it uses the deprecated md4 <b>hash</b> <b>algorithm</b> without any salting. FreeBSD used the [...] prefix for this. Its use is not recommended, as it is easily broken.|$|E
5000|$|Hash the document, d, to {{be signed}} (with a public <b>hash</b> <b>algorithm).</b>|$|E
5000|$|SHA-3 (Secure <b>Hash</b> <b>Algorithm</b> 3) is {{the latest}} member of the Secure <b>Hash</b> <b>Algorithm</b> family of standards, {{released}} by NIST on August 5, 2015. The reference implementation source code was dedicated to public domain via CC0 waiver. [...] Although {{part of the same}} series of standards, SHA-3 is internally quite different from the MD5-like structure of SHA-1 and SHA-2.|$|E
40|$|This study {{focuses on}} the second group of <b>hashing</b> <b>algorithms</b> and criticizes the <b>hashing</b> <b>algorithms</b> using Feistel Network which are widely {{utilized}} in text mining studies. We propose a new approach which is mainly built on the substitution boxes (s-boxes), {{which is in the}} core of all Feistel Networks and processes the text faster than the other implementations...|$|R
5000|$|Crypto++ A {{comprehensive}} C++ public-domain {{implementation of}} encryption and <b>hash</b> <b>algorithms.</b> FIPS validated ...|$|R
40|$|This paper {{presents}} {{the implementation of}} hash functions for IPSEC chip. There is an increasing interest in high-speed cryptographic accelerators for IPSEC applications such as VPNs (virtual private networks). Because diverse algorithms are used in Internet, various <b>hash</b> <b>algorithms</b> are required for IPSEC chip. Therefore, we implemented SHA- 1, HAS- 160 and MD 5 in one chip. These <b>hash</b> <b>algorithms</b> are designed {{to reduce the number}} of gates. SHA- 1 module is combined with HAS- 160 module. As the result, the required logic elements are reduce by 27 %. These <b>hash</b> <b>algorithms</b> have been implemented using Altera's EP 20 K 1000 EBC 652 - 3 with PCI bus interface...|$|R
5000|$|... #Caption: A {{sub-block}} {{from the}} compression {{function of the}} RIPEMD 160 <b>hash</b> <b>algorithm</b> ...|$|E
50|$|The Toeplitz <b>Hash</b> <b>Algorithm</b> {{is used in}} many network {{interface}} controllers for receive side scaling.|$|E
5000|$|Hardware {{support for}} AES encryption, secure <b>hash</b> <b>algorithm</b> SHA-1 and SHA-256 and Random Number Generation ...|$|E
50|$|The {{data input}} {{to any of}} those <b>hash</b> <b>algorithms</b> is {{described}} somewhere around https://github.com/ipfs/go-ipfs/tree/master/merkledag.|$|R
50|$|The {{motivation}} behind {{algorithm is}} calculating {{the similarity between}} two input strings. So, the hashing function {{should be able to}} reduce the size of input and at the same time keep the characteristics of the input. Other <b>hashing</b> <b>algorithms</b> like MD5 or SHA-1, the output is completely unrelated with the input and those <b>hashing</b> <b>algorithms</b> are not suitable for string similarity check.|$|R
50|$|Ethash is the <b>hashing</b> <b>algorithm</b> used {{natively}} for the proof-of-work {{function in}} Ethereum-based blockchain currencies.|$|R
50|$|The {{particular}} <b>hash</b> <b>algorithm</b> used {{is often}} {{indicated by the}} file extension of the checksum file.|$|E
50|$|Office 2013 uses 128-bit AES, however <b>hash</b> <b>algorithm</b> {{has been}} updated to SHA-2 class, {{and it is}} SHA-512 by default.|$|E
5000|$|... {{contains}} the Base64 encoded result of applying the <b>hash</b> <b>algorithm</b> to the transformed resource(s) {{defined in the}} [...] element attributes.|$|E
50|$|Some other <b>hashing</b> <b>algorithms</b> {{that are}} used for proof-of-work include CryptoNight, Blake, SHA-3, and X11.|$|R
5000|$|The Goldmont {{microarchitecture}} provides new instructions with hardware accelerated secure <b>hashing</b> <b>algorithm,</b> SHA1 and SHA256.|$|R
50|$|The FNV <b>hash</b> <b>algorithms</b> and {{reference}} FNV source code {{have been released}} into the public domain.|$|R
50|$|A prime {{motivation}} for {{the publication of the}} Secure <b>Hash</b> <b>Algorithm</b> was the Digital Signature Standard, in which it is incorporated.|$|E
50|$|Secure <b>Hash</b> <b>Algorithm</b> - {{a widely}} used family of hash {{algorithms}} developed by NSA based on earlier designs by Ron Rivest.|$|E
50|$|FORK-256 is a <b>hash</b> <b>algorithm</b> {{designed}} {{in response to}} security issues discovered in the earlier SHA-1 and MD5 algorithms. After substantial cryptanalysis, the algorithm is considered broken.|$|E
40|$|Hashing is so {{commonly}} used in computing that one might expect hash functions to be well understood, and that choosing a suitable function should not be difficult. The results of investigations into the performance of some widely used <b>hashing</b> <b>algorithms</b> are presented and it is shown {{that some of these}} algorithms are far from optimal. Recommendations are made for choosing a <b>hashing</b> <b>algorithm</b> and measuring its performanc...|$|R
50|$|The Trusted Platform Module (TPM) as {{specified}} by the TCG provides many security functions including special registers (called Platform Configuration Registers - PCRs) which hold various measurements in a shielded location {{in a manner that}} prevents spoofing. Measurements consist of a cryptographic hash using a Secure <b>Hashing</b> <b>Algorithm</b> (SHA); the TPM v1.0 specification uses the SHA-1 <b>hashing</b> <b>algorithm.</b> More recent TPM versions (v2.0+) call for SHA-2.|$|R
40|$|<b>Hash</b> <b>Algorithms</b> take a {{large number}} of bits of {{information}} and 2 Ì† 2 hash 2 Ì† 2 them into a smaller set. Different types of <b>hash</b> <b>algorithms</b> are used for cryptographic purposes. Ethan Heilman has designed a cryptographic attack on some <b>hash</b> <b>algorithms</b> that repeatedly applies the algorithm, then studies the cycle structure created. To determine if it is computationally feasible to apply this attack, it is essential {{to be able to find}} the largest order of an element in the symmetric group in an efficient way. This is a problem which can be partially answered by brute force techniques and by Group Theory. We discuss some methods that provide some solutions...|$|R
