387|10000|Public
25|$|The {{court is}} not {{included}} in the New York State Courts Electronic <b>Filing</b> <b>System</b> (NYSCEF).|$|E
25|$|Flex machine – The {{hardware}} was {{custom and}} microprogrammable, with an operating system, (modular) compiler, editor, garbage collector and <b>filing</b> <b>system</b> all written in ALGOL 68RS. The command shell Curt {{was designed to}} access typed data similar to Algol-68 modes.|$|E
25|$|In August 2013, former High Court justice Ian Callinan {{recommended}} 23 more {{changes to}} the Victorian parole system. In particular, he recommended that a full-time parole board be established to replace the current part-time one and that prisoners should {{have to prove that}} they were low risk reoffenders before being granted parole. An electronic database, to replace the paper <b>filing</b> <b>system</b> currently in use, was also recommended.|$|E
50|$|<b>File</b> <b>system</b> types can be {{classified}} into disk/tape <b>file</b> <b>systems,</b> network <b>file</b> <b>systems</b> and special-purpose <b>file</b> <b>systems.</b>|$|R
40|$|From its inception, UNIX {{has been}} built around two {{fundamental}} entities: processes and files. In this chapter, {{we look at the}} implementation of files in Solaris and discuss the framework for <b>file</b> <b>systems.</b> 14. 1 <b>File</b> <b>System</b> Framework Solaris OS includes a framework, the virtual <b>file</b> <b>system</b> framework, under which multiple <b>file</b> <b>system</b> types are implemented. Earlier implementations of UNIX used a single <b>file</b> <b>system</b> type for all of the mounted <b>file</b> <b>systems,</b> typically, the UFS <b>file</b> <b>system</b> from BSD UNIX. The virtual <b>file</b> <b>system</b> framework was developed to allow Sun’s distributed computing <b>file</b> <b>system</b> (NFS) to coexist with the UFS <b>file</b> <b>system</b> in SunOS 2. 0; it became a standard part of System V in SVR 4 and Solaris OS. We can categorize Solaris <b>file</b> <b>systems</b> into the following types: Storage-based. Regular <b>file</b> <b>systems</b> that provide facilities for persistent storage and management of data. The Solaris UFS and PC/DOS <b>file</b> <b>systems</b> are examples. Network <b>file</b> <b>systems.</b> <b>File</b> <b>systems</b> that provide <b>files</b> that are accessible in a local directory structure but are stored on a remote network server; for example, NFS. Pseudo <b>file</b> <b>systems.</b> <b>File</b> <b>systems</b> that present various abstractions as files in a <b>file</b> <b>system.</b> The /proc pseudo <b>file</b> <b>system</b> represents the address space of a process as a series of files. 657 658 Chapter 14 <b>File</b> <b>System</b> Framework The framework provides a single set of well-defined interfaces that are <b>file</b> <b>system</b> independent; the implementation details of each <b>file</b> <b>system</b> are hidden behind these interfaces. Two key objects represent these interfaces: the virtual file, or vnode, and the virtual <b>file</b> <b>system,</b> or vfs objects. The vnode interfaces implement file-related functions, and the vfs interfaces implement <b>file</b> <b>system</b> management functions. The vnode and vfs interfaces direct functions to specific <b>file</b> <b>systems,</b> {{depending on the type of}} <b>file</b> <b>system</b> being operated on. Figure 14. 1 shows the <b>file</b> <b>system</b> layers. File-related functions are initiated through a system call or from another kernel subsystem and are directed to the appropriate <b>file</b> <b>system</b> by the vnode/vfs layer...|$|R
50|$|Distributed <b>file</b> <b>systems</b> can be {{optimized}} for different purposes. Some, {{such as those}} designed for internet services, including GFS, are {{optimized for}} scalability. Other designs for distributed <b>file</b> <b>systems</b> support performance-0intensive applications usually executed in parallel. Some examples include: MapR <b>File</b> <b>System</b> (MapR-FS), Ceph-FS, Fraunhofer <b>File</b> <b>System</b> (BeeGFS), Lustre <b>File</b> <b>System,</b> IBM General Parallel <b>File</b> <b>System</b> (GPFS), and Parallel Virtual <b>File</b> <b>System.</b>|$|R
25|$|In {{the early}} 1980s, Taylor worked with New Orleans civil rights {{attorney}} Mary Howell to obtain a multi-million-dollar settlement {{in a series of}} civil rights cases that arose from the alleged torture and killing of several African Americans by New Orleans police officers in the Algiers section of the city. Taylor also worked in the mid 80's with People's Law Office colleagues Cunningham, Haas, Stainthorp, Michael Deutsch and Peter Schmiedel on the “street files” cases, during which Chicago police detective Frank Laverty brought to light the Chicago Police Department’s secret <b>filing</b> <b>system</b> in which detectives concealed evidence that supported a criminal defendant’s innocence.|$|E
25|$|A {{file system}} can present a file of a {{particular}} type as a volume in its own right, similar to a loop device. The OS refers to this functionality as an image <b>filing</b> <b>system.</b> This allows transparent handling of archives and similar files, which appear as directories with some special properties. Files inside the image file appear in the hierarchy underneath the parent archive. It is not necessary for the archive to contain the data it refers to: some symbolic link and network share filesystems put a reference inside the image file and go elsewhere for the data.|$|E
25|$|Voicemail is the {{managing}} of telephone messages from a centralized data storing system. Voicemail is stored on hard disk drives, media generally used by computers {{in order to}} store other forms of data. Messages are recorded in digitized natural human voice similar to how music is stored on a compact disc. To retrieve and to play back messages, a user calls the system from any phone, {{and his or her}} messages can be retrieved immediately. The first voicemail system, known as the Speech <b>Filing</b> <b>System</b> (SFS), was invented by Stephen J. Boies in 1973. What started as a research project at the IBM Thomas J. Watson Research Center, the first working prototype became available to telephone users in 1975.|$|E
50|$|For example, {{to migrate}} a FAT32 <b>file</b> <b>system</b> to an ext2 <b>file</b> <b>system.</b> First {{create a new}} ext2 <b>file</b> <b>system,</b> then copy the data to the <b>file</b> <b>system,</b> then delete the FAT32 <b>file</b> <b>system.</b>|$|R
5000|$|Blue Whale Clustered <b>file</b> <b>system</b> (BWFS) is {{a shared}} disk <b>file</b> <b>system</b> (also called {{clustered}} <b>file</b> <b>system,</b> shared storage <b>file</b> <b>systems</b> or SAN <b>file</b> <b>system)</b> made by Tianjin Zhongke Blue Whale Information Technologies Company in China.|$|R
5000|$|Virtual <b>file</b> <b>system</b> (VFS): A VFS is a <b>file</b> <b>system</b> used to {{help the}} user to hide the {{different}} <b>file</b> <b>systems</b> complexities. A user can use the same standard <b>file</b> <b>system</b> related calls to access different <b>file</b> <b>systems.</b>|$|R
25|$|Due to {{the sheer}} savagery {{of the murders}} and the {{precision}} of the eviscerations upon the victims' bodies, police theorized that the killings had been conducted by either a group harvesting organs to sell for transplant, {{the work of a}} Satanic cult, or a mentally ill individual. Much of the police effort concentrated upon the theory that the killer must be either mentally ill, homosexual, or a paedophile, and the alibis of all individuals who had either spent time in psychiatric wards or had been convicted of homosexuality or paedophilia were checked and logged in a card <b>filing</b> <b>system.</b> Registered sex offenders were also investigated and, if their alibi was corroborated, eliminated from the inquiry.|$|E
25|$|Many {{counties}} use the New York State Courts Electronic <b>Filing</b> <b>System</b> {{for electronic}} court filing (e-filing, like the federal PACER system). The New York State Reporter of the New York State Law Reporting Bureau {{is the official}} reporter of decisions and is required to publish every opinion, memorandum, and motion sent to it by the Court of Appeals and the Appellate Divisions of the Supreme Court in the New York Reports and Appellate Division Reports, respectively. The appellate term and trial court opinions are published selectively in the Miscellaneous Reports. The State Reporter is appointed by the Court of Appeals. The current versions are the New York Reports 3d (cited as N.Y.3d), the Appellate Division Reports 3d (cited as A.D.3d) and the Miscellaneous Reports 3d (cited as Misc.3d).|$|E
500|$|While Mulder is gone, The Smoking Man (William B. Davis) {{searches}} Mulder's apartment, {{believing he}} is not dead. Scully does some research into the phone records, coming {{to the conclusion that}} Ostelhoff was calling Skinner. Mulder meanwhile continues through the Department of Defense Headquarters finding more fake alien bodies inside. He heads through a tunnel to The Pentagon, where he finds an elaborate <b>filing</b> <b>system</b> and warehouse of evidence, the same warehouse that The Smoking Man was seen leaving {{at the very end of}} [...] "Pilot". Mulder ultimately tracks down a small metal vial that he believes may contain Scully's cure.|$|E
5000|$|Use default {{settings}}. Default {{settings are}} defined per <b>file</b> <b>system</b> at the <b>file</b> <b>system</b> level. For ext3 <b>file</b> <b>systems</b> {{these can be}} set with the tune2fs command. The normal default for Ext3 <b>file</b> <b>systems</b> is equivalent to (no acl support). Modern Red Hat based systems set acl support as default on the root <b>file</b> <b>system</b> but not on user created Ext3 <b>file</b> <b>systems.</b> Some <b>file</b> <b>systems</b> such as XFS enable acls by default. Default <b>file</b> <b>system</b> mount attributes can be overridden in /etc/fstab.|$|R
40|$|Abstract. HFS+ <b>file</b> <b>system</b> is a <b>file</b> <b>system</b> of the Mac OS. In {{order to}} achieve data {{manipulation}} of the <b>file</b> <b>system</b> based on the Windows OS for further computer forensics, {{not only do we}} introduce the principle and structure of HFS+ <b>file</b> <b>system,</b> but also propose a efficient method to analyze the <b>file</b> <b>system.</b> Research contains the exploration of the <b>file</b> <b>system</b> and program implementation to analyze the <b>file</b> <b>system...</b>|$|R
40|$|With the {{emergence}} of Storage Networking, distributed <b>file</b> <b>systems</b> that allow data sharing through shared disks will become vital. We refer to Cluster <b>File</b> <b>Systems</b> as a distributed <b>file</b> <b>systems</b> optimized for environments of clustered servers. The requirements such <b>file</b> <b>systems</b> is that they guarantee <b>file</b> <b>systems</b> consistency while allowing shared access from multiple nodes in a shared-disk environment. In this paper we evaluate three approaches for designing a cluster <b>file</b> <b>system</b> - conventional client/server distributed <b>file</b> <b>systems,</b> symmetric shared <b>file</b> <b>systems</b> and asymmetric shared <b>file</b> <b>systems.</b> These alternatives are considered by using our prototype cluster <b>file</b> <b>system,</b> HAMFS (Highly Available Multi-server <b>File</b> <b>System).</b> HAMFS is classified as an asymmetric shared <b>file</b> <b>system.</b> Its technologies are incorporated into our commercial cluster <b>file</b> <b>system</b> product named SafeFILE. SafeFILE offers a disk pooling facility that supports off-the-shelf disks, and balances file load across these disks automatically and dynamically. From our measurements, we identify the required disk capabilities, such as multi-node tag queuing. We also identify the advantages of an asymmetric shared <b>file</b> <b>system</b> over other alternatives...|$|R
500|$|While he {{was living}} with Maynard, Salinger {{continued}} to write in a disciplined fashion, a few hours every morning. According to Maynard, by 1972 he had completed two new novels. In a rare 1974 interview with The New York Times, he explained: [...] "There is a marvelous peace in not publishing... I like to write. I love to write. But I write just for myself and my own pleasure." [...] According to Maynard, he saw publication as [...] "a damned interruption". In her memoir, Margaret Salinger describes the detailed <b>filing</b> <b>system</b> her father had for his unpublished manuscripts: [...] "A red mark meant, if I die before I finish my work, publish this 'as is,' blue meant publish but edit first, and so on." [...] A neighbor said that Salinger {{told him that he}} had written 15 unpublished novels.|$|E
2500|$|... (Proceeding 09-191) on the Electronic Comment <b>Filing</b> <b>System</b> {{from the}} FCC ...|$|E
2500|$|MS-DOS 2.x – Support for 10 MB {{hard disk}} drives, FAT16, user installable device drivers and tree-structure <b>filing</b> <b>system</b> ...|$|E
50|$|There {{are various}} User Mode <b>File</b> <b>System</b> (FUSE)-based <b>file</b> <b>systems</b> for Unix-like {{operating}} systems (Linux, etc.) {{that can be}} used to mount an S3 bucket as a <b>file</b> <b>system.</b> Note that as the semantics of the S3 <b>file</b> <b>system</b> are not that of a Posix <b>file</b> <b>system,</b> the <b>file</b> <b>system</b> may not behave entirely as expected.|$|R
50|$|Other Unix virtual <b>file</b> <b>systems</b> {{include the}} <b>File</b> <b>System</b> Switch in System V Release 3, the Generic <b>File</b> <b>System</b> in Ultrix, and the VFS in Linux. In OS/2 and Microsoft Windows, the virtual <b>file</b> <b>system</b> {{mechanism}} {{is called the}} Installable <b>File</b> <b>System.</b>|$|R
40|$|Abstract—Researches on {{technologies}} about testing {{aggregate bandwidth}} of <b>file</b> <b>systems</b> in cloud storage systems. Through the memory <b>file</b> <b>system,</b> network <b>file</b> <b>system,</b> parallel <b>file</b> <b>system</b> theory analysis, {{according to the}} cloud storage system polymerization bandwidth and concept, developed to cloud storage environment <b>file</b> <b>system</b> polymerization bandwidth test software called FSPoly. In this paper, use FSpoly to luster <b>file</b> <b>system</b> testing, find reasonable test methods, and then evaluations latest development in cloud storage <b>system</b> <b>file</b> <b>system</b> performance by using FSPoly. Keywords-cloud storage, aggregate bandwidth, <b>file</b> <b>system,</b> performance evaluation I...|$|R
2500|$|A Nazi {{ordinance}} dated 21 September 1940, forced Jews of the [...] "occupied zone" [...] {{to declare}} themselves as such at {{a police station}} or sub-prefectures (sous-préfectures). Under the responsibility of André Tulard, head of the Service on Foreign Persons and Jewish Questions at the Prefecture of Police of Paris, a <b>filing</b> <b>system</b> registering Jewish people was created. Tulard had previously created such a <b>filing</b> <b>system</b> under the Third Republic, registering members of the Communist Party (PCF). In the department of the Seine, encompassing Paris and its immediate suburbs, nearly 150,000 persons, unaware of the upcoming danger and assisted by the police, presented themselves at police stations {{in accordance with the}} military order. The registered information was then centralized by the French police, who constructed, under the direction of inspector Tulard, a central <b>filing</b> <b>system.</b> According to the Dannecker report, [...] "this <b>filing</b> <b>system</b> is subdivided into files alphabetically classed, Jewish with French nationality and foreign Jewish having files of different colours, and the files were also classed, according to profession, nationality and street [...] ". These files were then handed over to Theodor Dannecker, head of the Gestapo in France, under the orders of Adolf Eichmann, head of the RSHA IV-D. They were used by the Gestapo on various raids, among them the August 1941 raid in the 11th arrondissement of Paris, which resulted in 3,200 foreign and 1,000 French Jews being interned in various camps, including Drancy.|$|E
2500|$|Not all ROMs offered star {{commands}} (ROMs containing data files, for instance), but any ROM could [...] "hook" [...] into certain vectors {{to enhance}} the system's functionality. Often the ROM was a device driver for mass storage combined with a <b>filing</b> <b>system,</b> starting with Acorn's 1982 Disc <b>Filing</b> <b>System</b> whose API became the de facto standard for floppy disc access. The Acorn Graphics Extension ROM (GXR) expanded the VDU routines to draw geometric shapes, flood fills and sprites. During 1985 Micro Power designed and marketed a Basic Extension ROM, introducing statements such as WHILE, ENDWHILE, CASE, WHEN, OTHERWISE, and ENDCASE, as well as direct mode commands including VERIFY.|$|E
2500|$|In {{addition}} to creating boxes and flat collages and making short art films, Cornell also kept a <b>filing</b> <b>system</b> of over 160 visual-documentary [...] "dossiers" [...] on themes that interested him; the dossiers served as repositories from which Cornell drew material and inspiration for boxes like his [...] "penny arcade" [...] portrait of Lauren Bacall. He had no {{formal training in}} art, although he was extremely well-read and was conversant with the New York art scene from the 1940s through to the 1960s.|$|E
40|$|We propose and {{evaluate}} an approach for decoupling persistent-cache management from general <b>file</b> <b>system</b> design. Several distributed <b>file</b> <b>systems</b> maintain a persistent cache {{of data to}} speed up accesses. Most of these <b>file</b> <b>systems</b> retain complete control over various aspects of cache management, such as granularity of caching, and policies for cache placement and eviction. Hardcoding cache management into the <b>file</b> <b>system</b> often results in sub-optimal performance as the clients of the <b>file</b> <b>system</b> are prevented from exploiting information about their workload in order to tune cache management. We introduce xCachefs, a framework that allows clients to transparently augment the cache management of the <b>file</b> <b>system</b> and customize the caching policy based on their resources and workload. xCachefs {{can be used to}} cache data persistently from any slow <b>file</b> <b>system</b> to a faster <b>file</b> <b>system.</b> It mounts over two underlying <b>file</b> <b>systems,</b> which can be local disk <b>file</b> <b>systems</b> like Ext 2 or remote <b>file</b> <b>systems</b> like NFS. xCachefs maintains the same directory structure as in the source <b>file</b> <b>system,</b> so that disconnected reads are possible when the source <b>file</b> <b>system</b> is down. ...|$|R
40|$|In this note, we {{introduce}} a simple <b>file</b> <b>system</b> implementation, known as vsfs (the Very Simple <b>File</b> <b>System).</b> This <b>file</b> <b>system</b> is a simplified {{version of a}} typical UNIX <b>file</b> <b>system</b> and thus serves to introduce {{some of the basic}} on-disk structures, access methods, and policies that you will find in many <b>file</b> <b>systems</b> today. The <b>file</b> <b>system</b> is pure software; unlike our development of CPU and memory virtualization, we will not be adding hardware features to make some aspect of the <b>file</b> <b>system</b> work better (though we will want to pay attention to device characteristics to make sure the <b>file</b> <b>system</b> works well). Because of the great flexibility we have in building a <b>file</b> <b>system,</b> many different ones have been built, literally from AFS (the Andrew <b>File</b> <b>System)</b> to ZFS (Sun’s Zettabyte <b>File</b> <b>System).</b> All of these <b>file</b> <b>systems</b> have different data structures and and do some things better or worse than their peers. Thus, the way we will be learning about <b>file</b> <b>systems</b> is through case studies: first, a simple <b>file</b> <b>system</b> (vsfs) in this chapter to introduce most concepts, and then a series of studies of real <b>file</b> <b>systems</b> to understand how they can differ in practice...|$|R
5000|$|FFS2, Unix <b>File</b> <b>System,</b> Berkeley Fast <b>File</b> <b>System,</b> the BSD Fast <b>File</b> <b>System</b> or FFS ...|$|R
2500|$|The speech upgrade {{also added}} two empty sockets {{next to the}} {{keyboard}} intended to take 16KB serial ROM cartridges containing either extra speech phoneme data (in addition to the default speech ROM fitted to the motherboard), or general software accessed through the ROM <b>Filing</b> <b>System.</b> The original plan was that some games would be released on cartridges, but due to the limited sales of the speech upgrade, little or no software was ever produced for these sockets. The cut-out space next to the keyboard (nicknamed the [...] "ashtray") was more commonly used to install other upgrades, such as a ZIF socket for conventional paged ROMs.|$|E
2500|$|The {{inspector}} general's {{report also}} accused cemetery officials of {{lying under oath}} and engaging in sexual harassment. Deputy cemetery superintendent Thurman Higgenbotham was accused of illegally hacking into a cemetery employee's personnel files. An Army Criminal Investigative Command investigation (completed in May 2009) concluded Higginbotham had also lied to investigators about accessing the employee's files. A report which investigated whether Higginbotham had fired a whistleblower {{has not yet been}} released. The report said cemetery officials were also negligent in continuing to use a paper <b>filing</b> <b>system</b> instead of a computerized database to keep track of cemetery operations. A new burial management system was to have been installed which would have [...] "triple verified" [...] burial records, but implementation of the system had lagged significantly.|$|E
2500|$|Before computerization, manual {{filing systems}} {{were used in}} large {{fingerprint}} repositories. Manual classification systems {{were based on the}} general ridge patterns of several or all fingers (such as {{the presence or absence of}} circular patterns). This allowed the filing and retrieval of paper records in large collections based on friction ridge patterns alone. [...] The most popular systems used the pattern class of each finger to form a key (a number) to assist lookup in a <b>filing</b> <b>system.</b> [...] Classification systems include the Roscher system, the Juan Vucetich system, and the Henry Classification System. [...] The Roscher system was developed in Germany and implemented in both Germany and Japan, the Vucetich system (developed by a Croatian-born Buenos Aires Police Officer) was developed in Argentina and implemented throughout South America, and the Henry system was developed in India and implemented in most English-speaking countries.|$|E
40|$|File Allocation Table (FAT) <b>file</b> <b>system</b> is {{the most}} common <b>file</b> <b>system</b> used in {{embedded}} devices such as smart phones, digital cameras, smart TVs, tablets, etc. Typically these embedded devices use Solid State Drives (SSD) as storage devices. The ExFAT <b>file</b> <b>system</b> is future <b>file</b> <b>system</b> for embedded devices and it is optimal for SSDs. This paper discourses the methodologies for Geotagging as a <b>file</b> <b>system</b> metadata instead of file data in FAT and ExFAT <b>file</b> <b>systems.</b> The designed methodologies of this paper adheresthe compatibility with the FAT <b>file</b> <b>system</b> specification and existing ExFAT <b>file</b> <b>system</b> implementations...|$|R
40|$|Abstract—As <b>file</b> <b>system</b> {{capacities}} {{reach the}} petascale, {{it is becoming}} increasingly difficult for users to organize, find, and manage their data. <b>File</b> <b>system</b> search has the potential to greatly improve how users manage and access files. Unfortunately, existing <b>file</b> <b>system</b> search is designed for smaller scale systems, making it difficult for existing solutions to scale to petascale <b>files</b> <b>systems.</b> In this paper, we motivate the importance of <b>file</b> <b>system</b> search in petascale <b>file</b> <b>systems</b> and present a new fulltext <b>file</b> <b>system</b> search design for petascale <b>file</b> <b>systems.</b> Unlike existing solutions, our design exploits <b>file</b> <b>system</b> properties. Using a novel index partitioning mechanism that utilizes <b>file</b> <b>system</b> namespace locality, we are able to improve search scalability and performance and we discuss how such a design can potentially improve search security and ranking. We describe how our design can be implemented within the Ceph petascale <b>file</b> <b>system.</b> I...|$|R
40|$|HDFS is a {{distributed}} <b>file</b> <b>system</b> {{designed to}} hold very large amounts of data (terabytes or even petabytes), and provide high-throughput access to this information. Files are stored in a redundant fashion across multiple machines to ensure their durability to failure and high availability to very parallel applications. This paper includes the step by step introduction to the <b>file</b> <b>system</b> to distributed <b>file</b> <b>system</b> and to the Hadoop Distributed <b>File</b> <b>System.</b> Section I introduces What is <b>file</b> <b>System,</b> Need of <b>File</b> <b>System,</b> Conventional <b>File</b> <b>System,</b> its advantages, Need of Distributed <b>File</b> <b>System,</b> What is Distributed <b>File</b> <b>System</b> and Benefits of Distributed <b>File</b> <b>System.</b> Also the analysis of large dataset and comparison of mapreducce with RDBMS, HPC and Grid Computing communities have been doing large-scale data processing for years. Sections II introduce the concept of Hadoop Distributed <b>File</b> <b>System.</b> Lastly section III contains Conclusion followed with the References...|$|R
