10000|713|Public
5|$|Japanese ethnographer Ino Kanori {{was charged}} {{with the task of}} {{surveying}} the entire population of Taiwanese aborigines, applying the first systematic study of aborigines on Taiwan. Ino's research {{is best known for his}} <b>formalization</b> of eight peoples of Taiwanese aborigines: Atayal, Bunun, Saisiat, Tsou, Paiwan, Puyuma, Ami and Pepo (Pingpu). This is the direct antecedent of the taxonomy used today to distinguish people groups that are officially recognized by the government.|$|E
5|$|The Arévalo {{government}} also floated {{the idea of}} a Central American Federation, as being the only way that a democratic government could survive in the region. He approached several leaders of democratic Central American countries, but was rejected by all except Castañeda Castro, the president of El Salvador. The two leaders began talks to build a union, and set up several commissions to look into the issue. In late 1945 they announced the formation of the union, but the <b>formalization</b> of the process got delayed by internal troubles in both countries, and in 1948 the Castro government was toppled in a military coup led by Óscar Osorio.|$|E
5|$|When {{interpreted}} as a proof within a first-order set theory, such as ZFC, Dedekind's categoricity proof for PA shows that each model of set theory has a unique model of the Peano axioms, up to isomorphism, that embeds as an initial segment of all other models of PA contained within that model of set theory. In the standard model of set theory, this smallest model of PA is the standard model of PA; however, in a nonstandard model of set theory, {{it may be a}} nonstandard model of PA. This situation cannot be avoided with any first-order <b>formalization</b> of set theory.|$|E
40|$|Abstract. We present modular <b>formalizations</b> of {{the model}} {{specification}} language Reactive Modules and the temporal logic CTL ∗ in the proof assistant Coq. In our <b>formalizations,</b> both shallow and deep embeddings of each language are given. The modularity of our <b>formalizations</b> allows proofs and theorems to be reused across different embeddings. We illustrate the advantages of our modular <b>formalizations</b> by proving the mutual exclusion property of the Bakery algorithm in different embeddings. ...|$|R
40|$|In this paper, we revisit <b>formalizations</b> of information-theoretic {{security}} for symmetric-key encryption and key agreement protocols {{which are very}} fundamental primitives in cryptography. In general, we can formalize information-theoretic security in various ways: some {{of them can be}} formalized as stand-alone security by extending (or relaxing) Shannon’s perfect secrecy; some of them can be done based on composable security. Then, a natural question about this is: what is the gap between the <b>formalizations?</b> To answer the question, we investigate relationships between several <b>formalizations</b> of information-theoretic {{security for}} symmetric-key encryption and key agreement protocols. Specifically, for symmetric-key encryption protocols which may have decryption-errors, we deal with the following <b>formalizations</b> of security: <b>formalizations</b> extended (or relaxed) from Shannon’s perfect secrecy by using mutual information and statistical distance; information-theoretic analogue of indistinguishability by Goldwasser and Micali; and the ones of composable security by Maurer et al. and Canetti. Then, we explicitly show that those <b>formalizations</b> are essentially equivalent under both one-time and multiple-use models. Under the both models, we also derive lower bounds on the adversary’s (or distinguisher’s) advantage and secret-key size required under all of the above <b>formalizations.</b> Although some of them may be already known, we can explicitly derive them all at once through our relationships between the <b>formalizations.</b> In addition, we briefly observe impossibility results which easily follow from the lower bounds. The similar results are also shown for key agreement protocols which may have agreement-errors...|$|R
40|$|<b>Formalizations</b> {{are used}} in systems {{development}} to support the description of artifacts and to shape and regulate developer behavior. The limits to applying <b>formalizations</b> in these two ways are discussed based on examples from systems development practice. It is argued that <b>formalizations,</b> for example {{in the form of}} methods, are valuable in some situations, but inappropriate in others. The alternative to uncritically using <b>formalizations</b> is that systems developers reflect on the situations in which they find themselves and manage based on a combination of formal and informal approaches. 1. Introduction For several years computer scientists have engaged in discussions on methods for program development. These discussions have not always left practitioners with clear advice on and guidelines for programming. On the contrary, a major aspect such as the significance of <b>formalizations</b> has provoked clearly conflicting viewpoints. Our interest lies with methods for developing c [...] ...|$|R
5|$|On March 2, 1899, the Army {{received}} an assignation of funds and authorization meant to formally organize troops in Puerto Rico. On March 24, 1899, the General Commander of the Puerto Rico Department, Mayor General Guy V. Henry ordered {{the creation of}} the Porto Rico Battalion of Volunteer Infantry. Formed by four companies named A through D and assigned to San Juan, Mayagüez and Ponce, the unit was activated on May 20, 1899, led by Major Lorenzo Davinson. Shortly afterwards, each company received additional men for a total of 112. Major Ebon Swift replaced Davison as commander. The <b>formalization</b> of this move was notified in General Order 65, issued by the new General Commander Gen. George Davis. On February 12, 1900, the Mounted Battalion was organized and both were later designated Porto Rico Regiment, U.S. Volunteers. The following year, the units were renamed Porto Rico Provisional Regiment of Infantry. The Band and First Battalion were sent to Washington on March 4, 1901, to participate in the inauguration of McKinley.|$|E
5|$|The way the {{painting}} shows {{the progress of}} time is also without precedent in Western art. The death of a blameless victim had typically been presented as a conclusive episode, imbued with the virtue of heroism. The Third of May offers no such cathartic message. Instead, there is a continuous procession of the condemned in a mechanical <b>formalization</b> of murder. The inevitable outcome {{is seen in the}} corpse of a man, splayed {{on the ground in the}} lower left portion of the work. There is no room left for the sublime; his head and body have been disfigured to a degree that renders resurrection impossible. The victim is portrayed bereft of all aesthetic or spiritual grace. For the rest of the picture the viewer's eye level is mostly along the central horizontal axis; only here is the perspectival point of view changed, so that the viewer looks down on the mutilated body.|$|E
25|$|The legal {{principle}} of homesteading, then, is a <b>formalization</b> of the homestead principle {{in the same}} way that the right of adverse possession is a <b>formalization</b> of the pre-existing {{principle of}} squatter's rights.|$|E
5000|$|The set [...] of {{formulae}} {{that are}} free for negation in [...] {{can be defined}} in different ways, leading to different <b>formalizations</b> of the closed-world assumption. The following are the definitions of [...] being free for negation in the various <b>formalizations.</b>|$|R
40|$|This paper revisits <b>formalizations</b> of information-theoretic {{security}} for symmetric-key encryption and key agreement protocols {{which are very}} fundamental primitives in cryptography. In general, we can formalize information-theoretic security in various ways: some {{of them can be}} formalized as stand-alone security by extending (or relaxing) Shannon's perfect secrecy or by other ways such as semantic security; some of them can be done based on composable security. Then, a natural question about this is: what is the gap between the <b>formalizations?</b> To answer the question, we investigate relationships between several <b>formalizations</b> of information-theoretic {{security for}} symmetric-key encryption and key agreement protocols. Specifically, for symmetric-key encryption protocols in a general setting including the case where there exist decryption-errors, we deal with the following <b>formalizations</b> of security: <b>formalizations</b> extended (or relaxed) from Shannon's perfect secrecy by using mutual information and statistical distance; information-theoretic analogues of indistinguishability and semantic security by Goldwasser and Micali; and composable security by Maurer et al. and Canetti. Then, we explicitly show the equivalence and non-equivalence between those <b>formalizations.</b> Under the model, we also derive lower bounds on the adversary's (or distinguisher's) advantage and the size of secret-keys required under all of the above <b>formalizations.</b> Although some of them may be already known, we can explicitly derive them all at once through our relationships between the <b>formalizations.</b> In addition, we briefly observe impossibility results which easily follow from the lower bounds. The similar results are also shown for key agreement protocols in a general setting including the case where there exist agreement-errors in the protocols. Comment: 25 pages. Submitted to IEEE Trans. Inf. Theor...|$|R
40|$|We compare four {{different}} <b>formalizations</b> of possibly infinite sequences in theorem provers based on higher-order logic. The <b>formalizations</b> {{have been carried}} out in different proof tools, namely in Gordon's HOL, in Isabelle and in PVS. The comparison considers different logics and proof infrastructures, but emphasizes on the proof principles that are available for each approach. The different <b>formalizations</b> discussed have been used not only to mechanize proofs of different properties of possibly in nite sequences, but also for the verification of some non-trivial theorems of concurrency theory...|$|R
25|$|First-order {{logic is}} the {{standard}} for the <b>formalization</b> of mathematics into axioms and is studied in the foundations of mathematics.|$|E
25|$|The factors {{affecting}} the Open Source Movement’s legal <b>formalization</b> are primarily based on recent political discussion over copyright, appropriation, and intellectual property.|$|E
25|$|Marcus Hutter's {{universal}} {{artificial intelligence}} builds upon Solomonoff's mathematical <b>formalization</b> of the razor {{to calculate the}} expected value of an action.|$|E
40|$|AbstractThe present work is {{dedicated}} to the study of modes of data-presentation in the range between text and informant within the framework of inductive inference. In this study, the learner alternatingly requests sequences of positive and negative data. We define various <b>formalizations</b> of valid data presentations in such a scenario. We resolve the relationships between these different <b>formalizations,</b> and show that one of these is equivalent to learning from informant. We also show a hierarchy formed (for each of the <b>formalizations</b> studied) by considering the number of switches between requests for positive and negative data...|$|R
40|$|Machine {{learning}} algorithms for prediction {{are increasingly}} being used in critical decisions affecting human lives. Various fairness <b>formalizations,</b> with no firm consensus yet, are employed to prevent such algorithms from systematically discriminating against people based on certain attributes protected by law. The aim {{of this article is}} to survey how fairness is formalized in the machine learning literature for the task of prediction and present these <b>formalizations</b> with their corresponding notions of distributive justice from the social sciences literature. We provide theoretical as well as empirical critiques of these notions from the social sciences literature and explain how these critiques limit the suitability of the corresponding fairness <b>formalizations</b> to certain domains. We also suggest two notions of distributive justice which address some of these critiques and discuss avenues for prospective fairness <b>formalizations...</b>|$|R
5000|$|... #Subtitle level 2: Proof-theoretic versus model-theoretic <b>formalizations</b> of non-monotonic logics ...|$|R
25|$|The lattice basis {{originated}} in the 19th century {{with the work of}} Boole, Peirce, and others seeking an algebraic <b>formalization</b> of logical thought processes.|$|E
25|$|In {{the formal}} {{language}} <b>formalization</b> of an antimatroid we may also identify {{a subset of}} words that determine the whole language, the basic words.|$|E
25|$|Bertrand du Castel and Timothy Jurgensen {{demonstrate}} through <b>formalization</b> that Boyer's explanatory model matches physics' epistemology in positing {{not directly}} observable entities as intermediaries.|$|E
40|$|Despite {{the wide}} array of {{frameworks}} proposed for the formal specification and analysis of privacy laws, there has been comparatively little work on expressing large fragments of actual privacy laws in these frameworks. We attempt to {{bridge this gap by}} giving complete logical <b>formalizations</b> of the transmission-related portions of the Health Insurance Portability and Accountability Act (HIPAA) and the Gramm-Leach-Bliley Act (GLBA). To this end, we develop the PrivacyLFP logic, whose features include support for disclosure purposes, real-time constructs, and self-reference via fixed points. To illustrate these features and demonstrate PrivacyLFP’s utility, we present <b>formalizations</b> of a collection of clauses from these laws. Due to their size, our full <b>formalizations</b> of HIPAA and GLBA appear in a companion technical report. We discuss ambiguities in the laws that our <b>formalizations</b> revealed and sketch preliminary ideas for computer-assisted enforcement of such privacy policies...|$|R
2500|$|<b>Formalizations</b> of {{the natural}} numbers have their own {{representations}} of 1: ...|$|R
5000|$|Again <b>formalizations</b> {{show that}} the {{underlying}} principle must be the righthand head rule: ...|$|R
25|$|Lisp's <b>formalization</b> of {{quotation}} {{has been}} noted by Douglas Hofstadter (in Gödel, Escher, Bach) and others {{as an example of}} the philosophical idea of self-reference.|$|E
25|$|Wiener is {{considered}} the originator of cybernetics, a <b>formalization</b> {{of the notion of}} feedback, with implications for engineering, systems control, computer science, biology, neuroscience, philosophy, and the organization of society.|$|E
25|$|Summer 2007 {{was marked}} by the <b>formalization</b> of the long-standing {{relationship}} between Arias and the Japanese film distribution and production company Asmik Ace Entertainment. Arias {{is the first to}} join the roster of Asmik's artist management division.|$|E
50|$|With R. Lande, E. Housworth and others, {{mathematical}} <b>formalizations</b> of recombination {{in higher}} organisms.|$|R
40|$|This paper {{reports on}} the formal proof of {{correctness}} of a compiler from a substantial subset of Java source language to Java bytecode in the proof environment Isabelle. This work is based on extensive previous <b>formalizations</b> of Java, which comprise all relevant features of object-orientation. We place particular emphasis on describing the e#ects of design decisions in these <b>formalizations</b> on the compiler correctness proof...|$|R
40|$|We study {{asymptotic}} {{versions of}} reachable sets of linear systems for two intuitive <b>formalizations</b> of onepulse controls given constraints of asymptotic character. The {{results are presented}} for the simplest example of linear control systems, the double integrator, though they admit a straightforward extension to a generic linear system. We suppose that the coefficient at the control is a piecewise continuous function. To illustrate the developed theoretical framework for both <b>formalizations,</b> we demonstrate examples of linear control systems, the double integrator, though they admit a straightforward extension to a generic linear system. We suppose that the coefficient at the control is a piecewise continuous function. To illustrate the developed theoretical framework for both <b>formalizations,</b> we demonstrate examples of attraction sets, asymptotic versions of reachable sets...|$|R
25|$|By {{the early}} 1980s Meredith McGuire, a {{professor}} of sociology and anthropology, saw a process of <b>formalization</b> (transition of charismatic to rational management), resulting from Rawat's desire to consolidate his power and authority over the movement in the United States.|$|E
25|$|Palko, Gy Bulcsu (1986) {{considered}} {{structured analysis}} for analyzing and designing hierarchic systems {{by using an}} iconic language, and suggested that such was an application of the universal characteristics Leibniz's project {{to the language of}} structured analysis and the <b>formalization</b> of an iconic control system.|$|E
25|$|A 'massive' <b>formalization</b> of {{property}} titles for small and medium rural properties. It {{is estimated that}} a fifth of all rural properties, and nearly half of small ones, have title problems, a problem which prevents {{the existence of a}} real market for land and investments and which has facilitated land dispossession during the conflict.|$|E
5000|$|McCarthy, J. 1998. [...] "Elaboration tolerance". In Working Papers of the Fourth International Symposium on Logical <b>formalizations</b> of Commonsense Reasoning, Commonsense-1998.|$|R
50|$|The {{essence of}} the {{rule-based}} conceptual <b>formalizations</b> is that rules build on facts, and facts build on concepts as expressed by terms.|$|R
40|$|This {{paper is}} self-contained. In the {{remainder}} of this section, we explain the two ring buffer algorithms and discuss our disagreements with Lamport. In Section 2, we give a brief introduction to evolving algebras. In Section 3, we present our <b>formalizations</b> of the ring buffer algorithms as evolving algebras. In Section 4, we define a version of lock-step equivalence and prove that our <b>formalizations</b> of these algorithms are equivalent in that sense. Finally, we discuss the inequivalence of these algorithms in Section 5...|$|R
