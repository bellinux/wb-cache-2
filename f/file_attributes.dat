114|132|Public
25|$|The flist program {{provided}} {{a list of}} files in the user's minidisk, and allowed sorting by any file attribute. The <b>file</b> <b>attributes</b> could be passed to scripts or function-key definitions, making it simple to use flist as part of CMS EXEC, EXEC 2 or XEDIT scripts.|$|E
25|$|A {{file manager}} or file browser is a {{computer}} program that provides a user interface to manage files and folders. The most common operations performed on files or groups of files include creating, opening (e.g. viewing, playing, editing or printing), renaming, moving or copying, deleting and searching for files, as well as modifying <b>file</b> <b>attributes,</b> properties and file permissions. Folders and files may be displayed in a hierarchical tree based on their directory structure. Some file managers contain features inspired by web browsers, including forward and back navigational buttons.|$|E
25|$|Various {{differences}} between file systems make supporting all file systems difficult. Allowed characters in file names, case sensitivity, {{and the presence}} of various kinds of <b>file</b> <b>attributes</b> makes the implementation of a single interface for every file system a daunting task. Operating systems tend to recommend using (and so support natively) file systems specifically designed for them; for example, NTFS in Windows and ext3 and ReiserFS in Linux. However, in practice, third party drivers are usually available to give support for the most widely used file systems in most general-purpose operating systems (for example, NTFS is available in Linux through NTFS-3g, and ext2/3 and ReiserFS are available in Windows through third-party software).|$|E
5000|$|In MS-DOS {{and other}} DOS systems, file {{directory}} entries include a Hidden <b>File</b> <b>attribute</b> which is manipulated using the attrib command. Use the command line command [...] {{to display the}} <b>files</b> with the <b>attribute</b> of hidden.|$|R
40|$|A {{presentation}} covering work {{carried out}} during summer 2012 to improve ARSF holdings at NEODC. It explains work carried outto improve the ARSF metadata holdings at the NEODC by improving information held on per flight. Scripts used to ingest ATM data into the NEODC archive {{and to create}} preview images of the ATM data are explained. Additional steps explaining the preparation of <b>file</b> <b>attribute</b> information on specific flights for use in CEDA's <b>File</b> <b>Attribute</b> Catalogue (CEDA FAtCat) are also explained...|$|R
5000|$|The archive bit is a <b>file</b> <b>attribute</b> used by Microsoft {{operating}} systems, by OS/2 and by AmigaOS. Typically {{its state}} indicates {{whether or not}} the file has been backed up, in other words archived.|$|R
500|$|The {{porbeagle}} {{has very}} rarely, if ever, bitten swimmers or boats. As of 2009, the International Shark Attack <b>File</b> <b>attributes</b> three bites to this species, one provoked and none fatal, and two on boats. One older anecdote {{tells of a}} fisherman who provoked a porbeagle into leaping from the water and tearing his clothes. In another account of a swimmer bitten by a [...] "mackerel shark", the species responsible {{could easily have been}} a misidentified shortfin mako or great white shark. Recently in the North Sea, adult porbeagles have been filmed charging at divers working on oil platforms, sometimes even brushing lightly against them without doing harm. These rushes do not appear to have predatory intent and may instead be motivated by curiosity or defense.|$|E
2500|$|Released in February 2014, Gerber X2 adds {{additional}} metadata to the image. Attributes {{allow to}} add metadata to a Gerber <b>file.</b> <b>Attributes</b> are akin to labels providing information associated with image files, or features within them. Examples of metadata conveyed by attributes are: ...|$|E
50|$|Lists {{the basic}} <b>file</b> <b>attributes</b> available.|$|E
50|$|Files and {{directories}} are differentiated {{only by a}} <b>file</b> <b>attribute</b> {{that indicates}} its nature (similar to Unix). The <b>attributes</b> of a <b>file</b> are stored in the directory entry that describes the file, and optionally in the extended attribute record.|$|R
50|$|Upon {{download}} of an application, {{a particular}} extended <b>file</b> <b>attribute</b> ("quarantine flag") {{can be added}} to the downloaded <b>file.</b> This <b>attribute</b> is added by the application that downloads the file, such as a web browser or email client, but is not added by torrent downloaders, such as Transmission (BitTorrent client), nor Bit Torrent. This behavior is disabled by default for third-party applications and developers need to opt into it. The system can also force this behavior upon individual applications.|$|R
50|$|As {{the archive}} bit is a <b>file</b> <b>attribute</b> and {{not part of}} the file itself, the {{contents}} of the file are unrelated to the status of the archive bit and remain unchanged even if the setting of the archive bit is changed.|$|R
5000|$|For DFM, storage {{management}} and user-defined <b>file</b> <b>attributes.</b>|$|E
50|$|Linux kernel 2.6.35 {{added support}} for {{extended}} <b>file</b> <b>attributes.</b>|$|E
5000|$|Extended <b>file</b> <b>attributes</b> (EA), Access control list (ACL) support ...|$|E
5000|$|The ext4 {{file system}} does not honor the [...] "secure deletion" [...] <b>file</b> <b>attribute,</b> which is {{supposed}} to cause overwriting of files upon deletion. A patch to implement secure deletion was proposed in 2011, but did not solve the problem of sensitive data ending up in the file system journal.|$|R
5000|$|Copy {{directory}} {{contents of}} [...] to [...] (including <b>file</b> data, <b>attributes</b> and timestamps), recursively with empty directories (...) : ...|$|R
50|$|The {{repository}} stores {{information about}} fields (or data elements) {{in the application}} including descriptions, column headings, edit codes, visualizations, default values, help text, and prompt programs. It holds information about files and application database including physical files, logical files (or views), relationships, <b>file</b> definition <b>attributes,</b> <b>file</b> validation rules, trigger programs, multilingual definitions, virtual fields, and predetermined join fields. Objects and components used for event-driven Windows applications also reside in the repository.|$|R
5000|$|... lsattr : list <b>file</b> <b>attributes</b> on a Linux second {{extended}} {{file system}} ...|$|E
5000|$|... {{additional}} <b>file</b> <b>attributes</b> in many replies, {{to avoid}} the need to re-fetch them; ...|$|E
50|$|DirSync Pro {{preserves}} (synchronizes) DOS <b>file</b> <b>attributes,</b> POSIX file permissions and ownerships {{and supports}} symbolic links.|$|E
50|$|NetWare 2.x {{implemented}} {{a number of}} features inspired by mainframe and minicomputer systems that were not available in other operating systems of the day. The System Fault Tolerance (SFT) features included standard read-after-write verification (SFT-I) with on-the-fly bad block re-mapping (at the time, disks did not have that feature built in) and software RAID1 (disk mirroring, SFT-II). The Transaction Tracking System (TTS) optionally protected files against incomplete updates. For single files, this required only a <b>file</b> <b>attribute</b> to be set. Transactions over multiple files and controlled roll-backs were possible by programming to the TTS API.|$|R
5000|$|... (System) Snapshot: When set, {{indicates}} that the file or directory is a snapshot <b>file.</b> This <b>attribute</b> is maintained by the system, and cannot be set, even by the super-user.|$|R
5000|$|Also, a {{traditional}} file system can retrieve and search data {{based only on}} the filename, because the only knowledge it has about the data {{is the name of}} the files that store the data. [...] A better solution is to tag <b>files</b> with <b>attributes</b> that describe them. Attributes are metadata about the files such as the type of file (such as document, picture, music, creator, etc.). This allows files to be searched for by their attributes, in ways not possible using a folder hierarchy, such as finding [...] "pictures which have person X". The attributes can be recognizable by either the file system natively, or via some extension. Desktop search applications take this concept a step further. They extract data, including <b>attributes,</b> from <b>files</b> and index it. To extract the data, they use a filter for each file format. This allows for searching based on both the <b>file's</b> <b>attributes</b> and the data in it.|$|R
5000|$|In Linux, the [...] and [...] {{commands}} {{can be used}} {{to change}} and display <b>file</b> <b>attributes.</b>|$|E
50|$|Richacls use ext4 {{extended}} <b>file</b> <b>attributes</b> (xattrs) {{to store}} ACLs. Entries in ACL are called ACE (Access Control List Entry).|$|E
50|$|As with <b>file</b> <b>{{attributes}},</b> tasks have attributes as well, such as {{the task}} priority (which is assigned at compile time or execution time, or can be changed while the task is running), processor time, wait time, status, etc. These task attributes can be accessed programmatically as can <b>file</b> <b>attributes</b> of files. The parent task is available programmatically as a task attribute that is of type task. For example, 'myself.initiator.name' gives {{the name of the}} process that initiated the current process.|$|E
5000|$|Several Microsoft {{operating}} systems provided {{a set of}} modifiable file characteristics that could be accessed and changed through a low-level system call. For example, as of release 4.0, the first six bits of the <b>file</b> <b>attribute</b> byte indicated {{whether or not a}} file was read-only (as opposed to writeable), hidden, a system file, a volume label, a subdirectory, or if the file had been [...] "archived" [...] (with the bit being set if the file had changed since the last use of the BACKUP command). However, initial releases of the operating system did not provide user-level method for reading or changing these values.|$|R
25|$|Extended Gerber, or RS-274X. This is {{the current}} Gerber format. In 2014, the {{graphics}} format was extended with the option to add meta-information to the graphics objects. <b>Files</b> with <b>attributes</b> are called X2 files, without X1 files.|$|R
40|$|This paper {{presents}} the results of simulating <b>file</b> name and <b>attribute</b> caching on client machines in a distributed file system. The simulation used trace data gathered on a network of about 40 workstations. Caching was found to be advantageous: a cache on each client containing just 10 directories had a 91 % hit rate on name lookups. Entry-based name caches (holding individual directory entries) had poorer performance for several reasons, resulting in a maximum hit rate of about 83 %. <b>File</b> <b>attribute</b> caching obtained a 90 % hit rate with a cache on each machine of the <b>attributes</b> for 30 <b>files.</b> The simulations show that maintaining cache consistency between machines is not a significant problem; only 1 in 400 name component lookups required invalidation of a remotely cached entry. Process migration to remote machines had little effect on caching. Caching was less successful in heavily shared and modified directories such as /tmp, but there weren't enough references to /tmp overall to affect t [...] ...|$|R
50|$|By default, {{the file}} {{is located in}} the root {{directory}} of the bootable drive/partition (normally C:\) and has the hidden, read-only, and system <b>file</b> <b>attributes</b> set.|$|E
5000|$|Some {{attributes}} (such as {{the preferred}} filename, the basic <b>file</b> <b>attributes)</b> cannot be made non-resident. For non-resident attributes, their allocation map must fit within MFT records.|$|E
50|$|By default, {{the file}} {{is located in}} the root {{directory}} of the bootable drive/partition (normally C:\ for hard disks) and has the hidden, read-only, and system <b>file</b> <b>attributes</b> set.|$|E
5000|$|The MPPs, {{incorporating}} {{logic to}} process the various messages, are supplied by the installation, and use standard OS/360 data management macros , , , and [...] PL/I includes the [...] <b>file</b> declaration <b>attribute</b> to allow MPPs to be written in a high-level language.|$|R
5000|$|System Integrity Protection protects {{system files}} and {{directories}} that are flagged for protection. This happens either by adding an extended <b>file</b> <b>attribute</b> to a <b>file</b> or directory, {{by adding the}} file or directory to /System/Library/Security/rootless.conf or both. Among the protected directories are: /System, /bin, /sbin, /usr (but not /usr/local). The symbolic links from /etc, /tmp and /var to /private/etc, /private/tmp and /private/var are also protected, although the target directories are not themselves protected. Most preinstalled Apple applications in /Applications are protected as well. The kernel stops all processes without specific entitlements from modifying the permissions and contents of flagged files and directories and also prevents code injection, runtime attachment and DTrace with respect to protected executables.|$|R
5000|$|File system {{analysis}} - file name, file type, <b>file</b> size, date <b>attributes,</b> last accessed & last modified ...|$|R
