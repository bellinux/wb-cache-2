4801|10000|Public
25|$|The KLM was {{designed}} to be a quick and easy to use system <b>design</b> <b>tool,</b> which means that no deep knowledge about psychology is required for its usage. Also, task times can be predicted (given the limitations) without having to build a prototype, recruit and test users, which saves time and money. See the example for a practical use of the KLM as a system <b>design</b> <b>tool.</b>|$|E
25|$|In essence, {{his method}} made {{stability}} transparent {{to both the}} time and frequency domains and, furthermore, his frequency domain-based analysis was much faster and simpler than the traditional time-domain-based method. This provided engineers with a fast and intuitive stability analysis and system <b>design</b> <b>tool</b> that remains widely used today. He, along with Harry Nyquist, also developed the theoretical conditions applicable to the stability of amplifier circuits.|$|E
500|$|This {{approach}} is especially {{useful in the}} design of mechanical filters—these use mechanical devices to implement an electrical function. [...] However, the technique can be used to solve purely mechanical problems, and can also be extended into other, unrelated, energy domains. [...] Nowadays, analysis by analogy is a standard <b>design</b> <b>tool</b> wherever more than one energy domain is involved. [...] It has the major advantage that the entire system can be represented in a unified, coherent way. [...] Electrical analogies are particularly used by transducer designers, by their nature they cross energy domains, and in control systems, whose sensors and actuators will typically be domain-crossing transducers. [...] A given system being represented by an electrical analogy may conceivably have no electrical parts at all. [...] For this reason domain-neutral terminology is preferred when developing network diagrams for control systems.|$|E
40|$|NASAs In-Space Propulsion Technology (ISPT) {{program has}} been {{developing}} technologies for lowering the cost of planetary science missions. The technology areas include electric propulsion technologies, spacecraft bus technologies, entry vehicle technologies, and <b>design</b> <b>tools</b> for systems analysis and mission trajectories. The electric propulsion technologies include critical components of both gridded and non-gridded ion propulsion systems. The spacecraft bus technologies under development include an ultra-lightweight tank (ULTT) and advanced xenon feed system (AXFS). The entry vehicle technologies include {{the development of a}} multi-mission entry vehicle, mission <b>design</b> <b>tools</b> and aerocapture. The <b>design</b> <b>tools</b> under development include system analysis tools and mission trajectory <b>design</b> <b>tools...</b>|$|R
2500|$|Game-Maker {{consists}} of a text-mode wrapper, tying together a collection of WYSIWYG <b>design</b> <b>tools.</b> The tools produce proprietary resources that are compiled together and parsed with RSD's custom XFERPLAY game engine. The <b>design</b> <b>tools</b> include: ...|$|R
40|$|ChipWise is a VLSI design environment, {{developed}} at the University of Kent, which integrates symbolic <b>design</b> <b>tools</b> obtained from industry with <b>design</b> <b>tools</b> for hand craft layout. Since 1989, ChipWise has been used {{at a number of}} UK higher-educational institutions for teaching VLSI design skills, and became part of the UK Higher Education ECAD Initiative in 1990. The paper describes the <b>design</b> <b>tools</b> and their use in student design projects at the University of Kent...|$|R
500|$|To {{obtain the}} graphic details {{seen in the}} game, Rubin, Gavin, and Baggett {{researched}} visibility calculation in video games that followed Doom and concluded that extensive pre-calculation of visibility would allow the game to render {{a larger number of}} polygons. Following experimentation in free-roaming camera control, the team settled with a branching rail camera that would follow along next to, behind, or in front of the character, generally looking at him, moving on a [...] "track" [...] through the world. Because only 800 polygons could be visible on the screen at a time, parts of the game's landscape would be hidden from view using trees, cliffs, walls, and twists and turns in the environment. Because the production used an entirely Silicon Graphics and IRIX-based tool pipeline, the programmers used $100,000 Silicon Graphics workstations instead of the $3,000 personal computers that were the standard at the time. Gavin created an algorithmic texture packer that would {{deal with the fact that}} the 512 × 240 video mode left too little texture memory. Meanwhile, Baggett created bidirectional 10x compressors that would reduce the 128-megabyte levels down to 12 megabytes and allow them to be compatible with the PlayStation's 2-megabyte random access memory. The levels proved to be so large that the first test level created could not be loaded into Alias PowerAnimator and had to be cut up into 16 chunks. Each chunk took about 10 minutes to load even on a 256-megabyte machine. To remedy the situation, Baggett created the DLE, a level <b>design</b> <b>tool</b> where component parts of a level were entered into a text file, with a series of Adobe Photoshop layers indicating how the parts were combined. To code the characters and gameplay of the game, Andy Gavin and Dave Baggett created the programming language [...] "Game-Oriented Object LISP" [...] (GOOL) using LISP syntax.|$|E
2500|$|This {{ability to}} predict the onset of {{turbulent}} flow is an important <b>design</b> <b>tool</b> for equipment such as piping systems or aircraft wings, but the Reynolds number is also used in scaling of fluid dynamics problems, and is used to determine dynamic similitude between two different cases of fluid flow, such as between a model aircraft, and its full size version. Such scaling is not linear {{and the application of}} Reynolds numbers to [...] both situations allows scaling factors to be developed.|$|E
2500|$|C#Builder was {{released}} in 2003 as a native C# development tool, competing with Visual Studio [...]NET. As of the 2005 release, C#Builder, Delphi for Win32, and Delphi for [...]NET have been combined into a single IDE called [...] "Borland Developer Studio" [...] (though the combined IDE is still popularly known as [...] "Delphi"). In late 2002 Borland purchased <b>design</b> <b>tool</b> vendor TogetherSoft and tool publisher Starbase, makers of the StarTeam configuration management tool and the CaliberRM requirements management tool (eventually, CaliberRM was renamed as [...] "Caliber"). The latest releases of JBuilder and Delphi integrate these tools to give developers a broader set of tools for development.|$|E
40|$|The {{development}} of a system capable of integrating a range of building <b>design</b> <b>tools</b> poses many challenges. Our framework for integrating <b>design</b> <b>tools</b> provides a structured approach, allowing individual parts to be developed independently. In this paper, we describe the overall framework and suggest a method for modelling and implementing each portion of the framework. Furthermore, we illustrate how such a system can integrate several <b>design</b> <b>tools</b> and be realized as a functional design system. ...|$|R
40|$|This paper {{presents}} {{an experience of}} using digital <b>design</b> <b>tools</b> in the character design classroom. These materials have become a necessity for a classroom instruction. However, {{it can be found}} that although the character design classroom needs effective digital <b>design</b> <b>tools</b> that are easier to use for <b>design</b> working, these <b>tools</b> should be used based on appropriateness. The teacher should have enough knowledge and skill in the digital <b>design</b> <b>tools</b> because the teacher must be able to advise the appropriate digital tools for students that can help the students to work well in this area...|$|R
40|$|In this paper, {{we present}} a new model for {{concurrency}} control that supports cooperation of <b>design</b> <b>tools</b> and de-signers in a design environment. We capture characteristic access and cooperation behaviour of <b>design</b> <b>tools</b> by activ-ity types to guide a concurrency control component in ac-cess synchronization, conflict handling and inter-tool communication. Activity types allow to characterize coop-erative work situations more precisely. This allows to im-prove designers awareness of conflicts {{in an environment of}} concurrently running <b>design</b> <b>tools</b> and supports them in interactive conflict resolution. ...|$|R
2500|$|... 1994: {{acquired}} Cadis, Aachen, Germany. Through this acquisition Synopsys got {{the communication}} systems and DSP <b>design</b> <b>tool</b> suit named COSSAP. COSSAP stood for Communication System Simulation and Application Processor. Synopsys carried out various communication (predominantly wireless modems) design and consulting activities using this tool (and later the evolved new tool Co-centric System Studio). The Cadis group was a spin-off development initiative from Institute for Integrated Signal Processing Systems (ISS), RWTH Aachen, spearheaded by Professor Heinrich Meyr and Professor Gerd Ascheid. COSSAP was a competing product to SPW from Cadence (now maintained and enhanced by Coware). Synopsys stopped support on COSSAP since 2003 and promoted the enhanced tool Concentric System Studio.|$|E
2500|$|The {{most common}} sound <b>design</b> <b>tool</b> {{is the use}} of {{layering}} to create a new, interesting sound out of two or three old, average sounds. [...] For example, the sound of a bullet impact into a pig carcass may be mixed with the sound of a melon being gouged to add to the [...] "stickiness" [...] or [...] "gore" [...] of the effect. [...] If the effect is featured in a close-up, the designer may also add an [...] "impact sweetener" [...] from his or her library. [...] The sweetener may simply be the sound of a hammer pounding hardwood, equalized so that only the low-end can be heard. [...] The low end gives the three sounds together added weight, so that the audience actually [...] "feels" [...] the weight of the bullet hit the victim.|$|E
2500|$|Hydro Thunder Hurricane was {{developed}} {{using a combination}} of proprietary and third-party tools. [...] 3D models were created in Maya. [...] Co-founder and Lead Programmer Ralf Knoesel created a plugin which integrated with Maya that allowed artists to see what the boat would look like in-game. The engine was built from the ground up, and unitizes FMOD for sound and Bullet Physics Library as part of the game's physics system. [...] Level construction and placement of props was done in BarracudaEditor, the team's level <b>design</b> <b>tool.</b> [...] During the development process Vector Unit maintained a PC build of the game which allowed artists and other team members to test their assets in-game without moving to a Xbox 360 Debug Kit. A team of seven people worked to create the game; two programmers, four artists, and one sound designer. [...] The game took fourteen months from initial prototype to final build to complete.|$|E
40|$|The {{development}} of a system capable of integrating a range of building <b>design</b> <b>tools</b> poses many challenges. Our framework for integrating <b>design</b> <b>tools</b> provides a structured approach, allowing individual parts to be tackled independently. In this paper we detail the framework and its individual components. A method for modelling and implementing each component is described, showing how such an integrated system can be realised. To illustrate, a system developed using the framework and which integrates several <b>design</b> <b>tools</b> is described. 1...|$|R
40|$|This {{research}} {{explores the}} relationship between unexpected outcomes generated through parametric <b>design</b> <b>tools</b> and the <b>design</b> creative process. We conducted an empirical study to observe how designers behave while encountering unexpected outcomes using parametric <b>design</b> <b>tools</b> {{as well as other}} kinds of <b>design</b> <b>tools.</b> From our study, there are some indications that the space of possible design solutions of the participants was expanded with the existence of unexpected outcomes. The preliminary result is encouraging. Further studies may need to address experience designers and novice designers separately...|$|R
40|$|This paper {{discusses}} why participatory <b>design</b> <b>tools</b> {{are suitable}} for modern place branding. First we give {{an overview of the}} academic area of current place branding theory, followed by an overview of the academic area of participatory design. We then discuss problems in place brand-ing theory and how participatory <b>design</b> <b>tools</b> could be used to overcome them. Finally we turn to empirical examples where we have experimented with participatory <b>design</b> <b>tools</b> in a place branding process, ending with a summary and suggestions for further research...|$|R
2500|$|In {{the early}} 1980s, the {{availability}} of bit-slice and 16-bit microprocessors started to revolutionize high-resolution computer graphics terminals which now increasingly became intelligent, semi-standalone and standalone workstations. Graphics and application processing were increasingly migrated to the intelligence in the workstation, rather than continuing to rely on central mainframe and mini-computers. Typical of the early move to high-resolution computer graphics intelligent workstations for the computer-aided engineering market were the Orca 1000, 2000 and 3000 workstations, developed by Orcatech of Ottawa, a spin-off from Bell-Northern Research, and led by David Pearson, an early workstation pioneer. The Orca 3000 was based on Motorola 68000 and AMD bit-slice processors and had Unix as its operating system. It was targeted squarely at the sophisticated end of the design engineering sector. Artists and graphic designers {{began to see the}} personal computer, particularly the Commodore Amiga and Macintosh, as a serious <b>design</b> <b>tool,</b> one that could save time and draw more accurately than other methods. [...] The Macintosh remains a highly popular tool for computer graphics among graphic design studios and businesses. Modern computers, dating from the 1980s, often use graphical user interfaces (GUI) to present data and information with symbols, icons and pictures, rather than text. Graphics are one of the five key elements of multimedia technology.|$|E
5000|$|DatabaseSpy — multi-database data management, query, and <b>design</b> <b>tool</b> ...|$|E
5000|$|Adobe Illustrator is a vector {{graphics}} illustration and <b>design</b> <b>tool..</b>|$|E
5000|$|... {{sophisticated}} <b>design</b> <b>tools</b> {{for greater}} production efficiency.|$|R
40|$|This paper {{questions}} the new uses of <b>design</b> <b>tools</b> and representations in the indus-trial field. A {{two months in}} situ observation of real industrial practices shows (i) how strongly CAD (Computer-Aided <b>Design)</b> <b>tools</b> are integrated in work prac-tices, in preliminary design phases as well, and (ii) how design actors sometimes deviate this tool from its initial objectives {{to use it in}} complement of sketches’ contributions. A multi-layered study built on an anthropo-based approach helps us to deepen the “mediating objects ” analysis. It also suggests considering the com-plementarities of <b>design</b> <b>tools</b> instead of their differences in order to propose an-other kind of <b>design</b> support <b>tool.</b> 1...|$|R
5000|$|Gaming and Entertainment Systems (Technology, Security, <b>Design,</b> <b>Tools)</b> ...|$|R
50|$|Improved FetchSpecification {{building}} in the EOModeler Plugin <b>design</b> <b>tool</b> in Xcode.|$|E
50|$|Adds better SQL Generation in the EOModeler Plug-in <b>design</b> <b>tool</b> in Xcode.|$|E
5000|$|Forward engineering, as a <b>design</b> <b>tool</b> for {{producing}} software from graphical descriptions.|$|E
50|$|The biggest {{disadvantage}} of the clockless CPU {{is that most}} CPU <b>design</b> <b>tools</b> assume a clocked CPU (a synchronous circuit), so making a clockless CPU (designing an asynchronous circuit) involves modifying the <b>design</b> <b>tools</b> to handle clockless logic and doing extra testing to ensure the design avoids metastability problems.|$|R
40|$|We {{describe}} {{the application of}} three formal <b>design</b> <b>tools</b> to {{a case study in}} the design of a distributed system. The case study in question involves the specification of an asynchronous message router; the three <b>design</b> <b>tools</b> are process algebra (specifically Milner’s Calculus of Communicating Systems CCS), the modal p-calculus an...|$|R
5000|$|Graziella Kuhn: Pixel Painting: Create Artworks with Game <b>Design</b> <b>tools</b> ...|$|R
5000|$|Matisse4MyEclipse - {{based on}} NetBeans GUI <b>design</b> <b>tool</b> (previously known as Matisse) ...|$|E
5000|$|SDL Suite by IBM (acquired from Telelogic) an SDL <b>Design</b> <b>Tool</b> (COMMERCIAL) ...|$|E
5000|$|CircuitMaker - free PCB <b>design</b> <b>tool</b> {{targeted}} at students, hobbyists, hackers and makers.|$|E
5000|$|... #Subtitle level 3: Screen generators, <b>design</b> <b>tools,</b> and {{software}} factories ...|$|R
5000|$|... #Subtitle level 3: UFAD <b>design</b> <b>tools</b> for zone airflow {{requirements}} ...|$|R
40|$|Digital {{products}} are generally controlled by buttons and icons, an approach which emphasises the user’s cognitive skills. We propose to take {{respect for the}} user as a whole as a starting point, including his perceptual-motor and emotional skills. Designers should create a context for experience, rather than a product. Aesthetical interaction becomes the central theme. As a consequence, we believe that <b>design</b> <b>tools</b> should also change. To create a context for experience, the designer needs tools, which allow him to explore beautiful and engaging interactions. In the first section, the theoretical part of this tutorial, we will explain our view on product design and human-computer interaction (HCI). Moreover, we show the possibilities of existing <b>design</b> <b>tools</b> to create contexts for experience and briefly demonstrate our search for new computer aided <b>design</b> <b>tools,</b> especially gestural <b>design</b> <b>tools...</b>|$|R
