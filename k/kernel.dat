10000|10000|Public
5|$|Like {{the other}} BSD kernels (and those of most modern {{operating}} systems), DragonFly employs a built-in <b>kernel</b> debugger {{to help the}} developers find <b>kernel</b> bugs. Furthermore, , a debug <b>kernel,</b> which makes bug reports more useful for tracking down kernel-related problems, is installed by default, {{at the expense of}} a relatively small quantity of disk space. When a new <b>kernel</b> is installed, the backup copy of the previous <b>kernel</b> and its modules are stripped of their debugging symbols to further minimize disk space usage.|$|E
5|$|Prune <b>kernel</b> oil, {{marketed as}} a gourmet cooking oil Similar in {{composition}} to peach <b>kernel</b> oil.|$|E
5|$|On the {{completion}} of this task, BootX takes over the startup process configuring the keyboard and display, claiming and reserving memory for various purposes and {{checking to see if}} various key combinations are being pressed. After this process has been completed BootX displays the grey Apple logo, spins the spinning wait cursor, and proceeds to load the <b>kernel</b> and some <b>kernel</b> extensions and start the <b>kernel.</b>|$|E
40|$|In this paper, {{we present}} classes of <b>kernels</b> for machine {{learning}} from a statistics perspective. Indeed, <b>kernels</b> are positive definite functions and thus also covariances. After discussing key properties of <b>kernels,</b> {{as well as}} a new formula to construct <b>kernels,</b> we present several important classes of kernels: anisotropic stationary <b>kernels,</b> isotropic stationary <b>kernels,</b> compactly supportedkernels, locally stationary <b>kernels,</b> nonstationary <b>kernels,</b> andseparable nonstationary <b>kernels.</b> Compactly supportedkernels andseparable nonstationary <b>kernels</b> are of prime interest because they provide a computational reduction for kernelbased methods. We describe the spectral representation of the various classes of <b>kernels</b> and conclude with a discussion on the characterization of nonlinear maps that reduce nonstationary <b>kernels</b> to either stationarity or local stationarity...|$|R
5000|$|Many {{different}} <b>kernels</b> are implemented, {{ranging from}} <b>kernels</b> for numerical data (such as gaussian or linear <b>kernels)</b> to <b>kernels</b> on special data (such as strings over certain alphabets). The currently implemented <b>kernels</b> for numeric data include: ...|$|R
40|$|Abstract. We derive {{a family}} of <b>kernels</b> on {{dynamical}} systems by applying the Binet-Cauchy theorem to trajectories of states. Our derivation provides a unifying framework for all <b>kernels</b> on dynamical systems currently used in machine learning, including <b>kernels</b> derived from the behavioral framework, diffusion processes, marginalized <b>kernels,</b> <b>kernels</b> on graphs, and the <b>kernels</b> on sets arising from the subspace angle approach. In the case of linear time-invariant systems, we derive explicit formulae for computing the proposed Binet-Cauchy <b>kernels</b> by solving Sylvester equations, and relate the proposed <b>kernels</b> to existing <b>kernels</b> based on cepstrum coefficients and subspace angles. Besides their theoretical appeal, these <b>kernels</b> can be used efficiently in the comparison of video sequences of dynamic scenes that can be modeled as the output of a linear time-invariant dynamical system. One advantage of our <b>kernels</b> is that they take the initial conditions of the dynamical systems into account. As a first example, we use our <b>kernels</b> to compare video sequences of dynamic textures. As a second example, we apply our <b>kernels</b> {{to the problem of}} clustering short clips of a movie. Experimental evidence shows superior performance of our <b>kernels.</b> Keywords: Binet-Cauchy theorem, ARMA models and dynamical systems, Sylveste...|$|R
5|$|Since release 1.8 DragonFly has a {{virtualization}} mechanism {{similar to}} User-mode Linux, allowing a user to run another <b>kernel</b> in the userland. The virtual <b>kernel</b> (vkernel) is run in completely isolated environment with emulated network and storage interfaces, thus simplifying testing <b>kernel</b> subsystems and clustering features.|$|E
5|$|The LWKT {{subsystem}} {{is being}} employed to partition work among multiple <b>kernel</b> threads (for {{example in the}} networking code there is one thread per protocol per processor), reducing competition by removing the need to share certain resources among various <b>kernel</b> tasks.|$|E
5|$|The vkernel runs {{on top of}} {{hardware}} abstractions provided by the real <b>kernel.</b> These include the kqueue-based timer, the console (mapped to the virtual terminal where vkernel is executed), the disk image and virtual <b>kernel</b> Ethernet device (VKE), tunneling all packets to the host's tap interface.|$|E
40|$|Abstract. We {{propose a}} family of <b>kernels</b> based on the Binet-Cauchy theorem, and its {{extension}} to Fredholm operators. Our derivation provides a unifying framework for all <b>kernels</b> on dynamical systems currently used in machine learning, including <b>kernels</b> derived from the behavioral framework, diffusion processes, marginalized <b>kernels,</b> <b>kernels</b> on graphs, and the <b>kernels</b> on sets arising from the subspace angle approach. In the case of linear time-invariant systems, we derive explicit formulae for computing the proposed Binet-Cauchy <b>kernels</b> by solving Sylvester equations, and relate the proposed <b>kernels</b> to existing <b>kernels</b> based on cepstrum coefficients and subspace angles. We show efficient methods for computing our <b>kernels</b> which make them viable for the practitioner. Besides their theoretical appeal, these <b>kernels</b> can be used efficiently in the comparison of video sequences of dynamic scenes that can be modeled as the output of a linear time-invariant dynamical system. One advantage of our <b>kernels</b> is that they take the initial conditions of the dynamical systems into account. As a first example, we use our <b>kernels</b> to compare video sequences of dynamic textures. As a second example, we apply our <b>kernels</b> {{to the problem of}} clustering short clips of a movie. Experimental evidence shows superior performance of our <b>kernels.</b> Keywords: Binet-Cauchy theorem, ARMA models and dynamical systems, Sylveste...|$|R
40|$|Tests were {{conducted}} {{to determine whether the}} lesser grain borer, Rhyzopertha dominica (F.) (Coleoptera: Bostrychidae), selects rough rice (Oryza sativa L. (Poales: Poaceae)) <b>kernels</b> with cracked hulls for reproduction when these <b>kernels</b> are mixed with intact <b>kernels.</b> Differing amounts of <b>kernels</b> with cracked hulls (0, 5, 10, and 20 %) of the varieties Francis and Wells were mixed with intact <b>kernels,</b> and the number of adult progeny emerging from intact <b>kernels</b> and from <b>kernels</b> with cracked hulls was determined. The Wells variety had been previously classified as tolerant to R. dominica, while the Francis variety was classified as moderately susceptible. Few F 1 progeny were produced in Wells regardless of the percentage of <b>kernels</b> with cracked hulls, few of the <b>kernels</b> with cracked hulls had emergence holes, and little frass was produced from feeding damage. At 10 and 20 % <b>kernels</b> with cracked hulls, the progeny production, number of emergence holes in <b>kernels</b> with cracked hulls, and the amount of frass was greater in Francis than in Wells. The proportion of progeny emerging from <b>kernels</b> with cracked hulls increased as the proportion of <b>kernels</b> with cracked hulls increased. The results indicate that R. dominica select <b>kernels</b> with cracked hulls for reproduction...|$|R
50|$|For a {{slightly}} more general form, adding several of these <b>kernels</b> yields sum of separable <b>kernels</b> (SoS <b>kernels).</b>|$|R
5|$|According to {{developer}} Matthew Dillon, {{progress is}} being made to provide both device input/output (I/O) and virtual file system (VFS) messaging capabilities that will enable the remainder of the project goals to be met. The new infrastructure will allow many parts of the <b>kernel</b> to be migrated out into userspace; here they will be more easily debugged as they will be smaller, isolated programs, instead of being small parts entwined in a larger chunk of code. Additionally, the migration of select <b>kernel</b> code into userspace has the benefit of making the system more robust; if a userspace driver crashes, it will not crash the <b>kernel.</b>|$|E
5|$|FreeBSD has {{implemented}} {{a number of}} Microsoft Windows native NDIS <b>kernel</b> interfaces to allow FreeBSD to run Windows-only network drivers.|$|E
5|$|FreeBSD has {{similarities}} with Linux, {{with two}} major differences {{in scope and}} licensing: FreeBSD maintains a complete operating system, i.e. the project delivers <b>kernel,</b> device drivers, userland utilities and documentation, as opposed to Linux delivering a <b>kernel</b> and drivers only and relying on third-parties for system software; and FreeBSD source code is generally released under a permissive BSD license {{as opposed to the}} copyleft GPL used by Linux.|$|E
40|$|International audienceThe <b>kernels</b> {{are popular}} methods {{to measure the}} {{similarity}} between words for classification and learning. We generalize the definition of rational <b>kernels</b> in order to apply <b>kernels</b> to the comparison of languages. We study this generalization for factor and subsequence <b>kernels</b> and prove that these <b>kernels</b> are defined for parameters chosen in an appropriate interval. We give different methods to build weighted transducers which compute these <b>kernels...</b>|$|R
40|$|Support vector {{machines}} {{could be}} used to create classifiers by learning Boolean functions in high dimensional feature space when using Boolean <b>kernels.</b> However, currently the classification performance of Boolean <b>kernels</b> is poor. In this paper we present three Boolean <b>kernels,</b> and we also reveal the inductive bias embodied in these <b>kernels.</b> In order to improve the classification performance of the Boolean <b>kernels,</b> we present an approach to apply the Boolean <b>kernels</b> with the inductive bias of Occam’s razor. Experiment result shows that the classification performance of Boolean <b>kernels</b> could be improved by our approach...|$|R
40|$|We define {{left and}} right <b>kernels</b> of {{representations}} of Hopf algebras. In the case of group algebras, {{left and right}} <b>kernels</b> coincide {{and they are the}} usual <b>kernels</b> of modules. In the general case we show that these <b>kernels</b> coincide with the categorical left and right Hopf <b>kernels</b> of morphisms of Hopf algebras defined in AD. Brauer's theorem for <b>kernels</b> over group algebras is generalized to Hopf algebras. Comment: 16 pages, submitte...|$|R
5|$|Several {{flavors of}} the Linux <b>kernel</b> exist for each port. For example, the i386 port has flavors for IA-32 PCs {{supporting}} Physical Address Extension and real-time computing, for older PCs, and for x86-64 PCs. The Linux <b>kernel</b> does not officially contain firmware without sources, although such firmware {{is available in}} non-free packages and alternative installation media.|$|E
5|$|System {{calls are}} being split into userland and <b>kernel</b> {{versions}} and being encapsulated into messages. This will {{help reduce the}} size {{and complexity of the}} <b>kernel</b> by moving variants of standard system calls into a userland compatibility layer, and help maintain forwards and backwards compatibility between DragonFly versions. Linux and other Unix-like OS compatibility code is being migrated out similarly.|$|E
25|$|<b>Kernel</b> density {{estimation}} univariate <b>kernel</b> density estimation.|$|E
40|$|Our {{recent work}} on {{applications}} of near-infrared spectroscopy (NIRS) to entomological problems is reviewed. 1. Using an automated NIRS system scanning individual wheat <b>kernels</b> {{at the rate}} of 15 per minute we were able to differentiate between uninfested <b>kernels</b> and <b>kernels</b> infested with tate-instar larvae of Rhv:opertlza dominic-a, Sitophilus o?yae. or Sitotroga cerea/ella. The ability to rapidly scan individual <b>kernels</b> indicates potential for automated segregation of infested <b>kernels</b> from bulk grain. 2. The automated MRS system was used to differentiate uninfested wheat <b>kernels,</b> <b>kernels</b> infested with rice weevils, and <b>kernels</b> that contained rice weevils that were parasitised by Anisopreroma/us calandrae. Being able to distinguish <b>kernels</b> containing parasitoids would be useful for quality control in commercial insectaries that rear biological control agents, and would be useful for research on natural enemies. 3. Th...|$|R
40|$|We {{generate}} various new <b>kernels</b> {{by taking}} derivatives of known <b>kernels</b> {{with respect to}} scale. This {{is different from the}} well-known scale mixtures used before. The resulting <b>kernels</b> are analyzed theoretically to some extent, and a few illustrations are provided. On the side, we provide a simple recipe that explicitly constructs new <b>kernels</b> from the negative Laplacian of known <b>kernels.</b> ...|$|R
40|$|The {{purpose of}} {{the first part of}} the study was to develop a {{simplified}} near-infrared reflectance (NIR) spectroscopy method for detecting insect larvae in individual wheat <b>kernels.</b> Discriminant analysis, based on Mahalanobis distances calculated from log 1 /R data at only four discrete wavelengths, yielded better results for classification of sound and insect infested wheat <b>kernels</b> than principal component analysis (PCA) using the spectral region from 1100 to 1900 nm. This simplified technique was then used to detect 3 - and 4 -week-old larvae of granary and maize weevils in wheat <b>kernels.</b> A model developed from a calibration set containing sound <b>kernels</b> and <b>kernels</b> infested with 3 - week-old larvae was applied to a validation set containing sound <b>kernels,</b> sound air-dried <b>kernels,</b> <b>kernels</b> containing 3 -week-old larvae of granary and maize weevils, <b>kernels</b> containing 4 -week-old larvae of granary and maize weevils, and infested air-dried <b>kernels</b> containing dead larvae of both species. Correct classification rates of 92, 98, 77, 73, 95, 98, 96, and 94...|$|R
25|$|Programs and {{subsystems}} in {{user mode}} {{are limited in}} terms of to what system resources they have access, while the <b>kernel</b> mode has unrestricted access to the system memory and external devices. The Windows NT <b>kernel</b> {{is known as a}} hybrid <b>kernel.</b> The architecture comprises a simple <b>kernel,</b> hardware abstraction layer (HAL), drivers, and a range of services (collectively named Executive), which all exist in <b>kernel</b> mode.|$|E
25|$|The {{architecture}} of Windows NT's <b>kernel</b> {{is considered a}} hybrid <b>kernel</b> because the <b>kernel</b> itself contains tasks such as the Window Manager and the IPC Managers, with a client/server layered subsystem model.|$|E
25|$|Also, {{because of}} {{the design of the}} Windows <b>kernel,</b> <b>Kernel</b> Patch Protection cannot {{completely}} prevent <b>kernel</b> patching. This has led to additional criticism that since KPP is an imperfect defense, the problems caused to antivirus makers outweigh the benefits because authors of malicious software will simply find ways around its defenses. Nevertheless, <b>Kernel</b> Patching can still prevent problems of system stability, reliability, and performance caused by legitimate software patching the <b>kernel</b> in unsupported ways.|$|E
40|$|The main {{disadvantage}} of most existing set <b>kernels</b> {{is that they}} are based on averaging, which might be inappropriate for problems where only specific elements of the two sets should determine the overall similarity. In this paper we propose a class of <b>kernels</b> for sets of vectors directly exploit-ing set distance measures and, hence, incorporating various semantics into set <b>kernels</b> and lending the power of regular-ization to learning in structural domains where natural dis-tance functions exist. These <b>kernels</b> belong to two groups: (i) <b>kernels</b> in the proximity space induced by set distances and (ii) set distance substitution <b>kernels</b> (non-PSD in gen-eral). We report experimental results which show that our <b>kernels</b> compare favorably with <b>kernels</b> based on averaging and achieve results similar to other state-of-the-art meth-ods. At the same time our <b>kernels</b> systematically improve over the naive way of exploiting distances. ...|$|R
40|$|We {{propose a}} {{comprehensive}} survey of tree <b>kernels</b> {{through the lens}} of the mapping <b>kernels</b> framework. We arguethat most existing tree <b>kernels,</b> as well as many more that are presented {{for the first time in}} this paper, fall into a typology of <b>kernels</b> whose seemingly intricate computation can be efficiently factorized to yield polynomial time algorithms. Despite this fact, we argue that a naive implementation of such <b>kernels</b> remains prohibitively expensive to compute. We propose an approach whereby some computations for smaller trees are cached, which speeds up considerablythecomputationofallthesetree <b>kernels.</b> We provideexperimental evidence of this fact as well as preliminary results on the performance of these <b>kernels.</b> 1...|$|R
5|$|Helicoverpa zea earns its {{nickname}} {{the corn}} earworm for its widely known destruction of cornfields. The corn earworm feeds on {{every part of}} corn, including the <b>kernels.</b> Severe feeding {{at the tip of}} <b>kernels</b> allows entry for diseases and mold growth. Larvae begin feeding on the <b>kernels</b> once they have reached third instar. Larvae penetrate 9 to 15cm into the ear, with deeper penetration occurring as the <b>kernels</b> harden. Larvae do not eat the hard <b>kernels,</b> but take bites out of many <b>kernels,</b> lowering the quality of the corn for processing.|$|R
25|$|<b>Kernel</b> mode {{consists}} of executive services, which is itself {{made up of}} many modules that do specific tasks: <b>kernel</b> drivers, a <b>kernel,</b> and a Hardware Abstraction Layer (HAL).|$|E
25|$|The Windows <b>kernel</b> is {{designed}} so that device drivers have the same privilege level as the <b>kernel</b> itself. In turn, device drivers are expected to not modify or patch core system structures within the <b>kernel.</b> In x86 editions of Windows, Windows does not enforce this expectation that drivers not patch the <b>kernel.</b> But because the expectation is not enforced on x86 systems, some programs, notably certain security and antivirus programs, were designed to perform needed tasks through loading drivers that modified core <b>kernel</b> structures.|$|E
25|$|Independently, in 1991, Linus Torvalds {{released}} {{the first version}} of the Linux <b>kernel.</b> Early Linux developers ported GNU code, including the GNU C Compiler, to the <b>kernel.</b> The free software community adopted the use of the Linux <b>kernel</b> as the missing <b>kernel</b> for the GNU operating system. This work filled the remaining gaps in providing a completely free operating system.|$|E
40|$|In this paper, {{we propose}} {{a family of}} <b>kernels</b> for the data {{distributions}} belonging to the exponential family. We call these <b>kernels</b> generative <b>kernels</b> because they {{take into account the}} generative process of the data. Our proposed method considers the geometry of the data distribution to build a set of efficient closed-form <b>kernels</b> best suited for that distribution. We compare our generative <b>kernels</b> on multinomial data and observe improved empirical performance across the board. Moreover, our generative <b>kernels</b> perform significantly better when training size is small, an important property of the generative models. ...|$|R
50|$|Helicoverpa zea earns its {{nickname}} {{the corn}} earworm for its widely known destruction of cornfields. The corn earworm feeds on {{every part of}} corn, including the <b>kernels.</b> Severe feeding {{at the tip of}} <b>kernels</b> allows entry for diseases and mold growth. Larvae begin feeding on the <b>kernels</b> once they have reached third instar. Larvae penetrate 9 to 15 cm into the ear, with deeper penetration occurring as the <b>kernels</b> harden. Larvae do not eat the hard <b>kernels,</b> but take bites out of many <b>kernels,</b> lowering the quality of the corn for processing.|$|R
40|$|We {{introduce}} a general family of <b>kernels</b> based on weighted transducers or rational relations, rational <b>kernels,</b> {{that can be}} used for analysis of variable-length sequences or more generally weighted automata, in applications such as computational biology or speech recognition. We show that rational <b>kernels</b> can be computed efficiently using a general algorithm of composition of weighted transducers and a general single-source shortest-distance algorithm. We also describe several general families of positive definite symmetric rational <b>kernels.</b> These general <b>kernels</b> can be combined with Support Vector Machines to form efficient and powerful techniques for spoken-dialog classification: highly complex <b>kernels</b> become easy to design and implement and lead to substantial improvements in the classification accuracy. We also show that the string <b>kernels</b> considered in applications to computational biology are all specific instances of rational <b>kernels.</b> ...|$|R
