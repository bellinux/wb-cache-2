990|10000|Public
25|$|Druid ({{open-source}} <b>data</b> <b>store)</b> is {{a popular}} open-source distributed <b>data</b> <b>store</b> for OLAP queries that is used at scale in production by various organizations.|$|E
25|$|Beginning with Subversion 1.2, FSFS {{became the}} default <b>data</b> <b>store</b> for new repositories.|$|E
25|$|Apache Kylin is a {{distributed}} <b>data</b> <b>store</b> for OLAP queries {{originally developed}} by eBay.|$|E
40|$|<b>Data</b> <b>storing</b> {{is today}} very {{important}} topic. Because of Web 2. 0 and software-as-a-service applications {{there is growing}} need for scalability and new types of <b>data</b> <b>stores.</b> The aim of this thesis is to help understand competing SQL and NoSQL <b>data</b> <b>stores</b> and their target use cases. Author mapped last trends in <b>data</b> <b>storing</b> and application architecture and tried to find how concrete <b>data</b> <b>stores</b> address them. There is also experimental part with benchmark and simple application that demonstrate <b>data</b> <b>store's</b> connectors and their speed...|$|R
40|$|The {{corporate}} data warehouse integrates data from various operational <b>data</b> <b>stores</b> of a company. These operational <b>data</b> <b>stores</b> may be heterogeneous {{with respect to}} the represented information. The hetero-homogeneous data warehouse modeling approach overcomes issues associated with the integration of heterogeneous information from the operational <b>data</b> <b>stores</b> b...|$|R
40|$|Abstract — The main {{aspect of}} NoSQL <b>data</b> <b>stores</b> is “shared nothing ” {{horizontal}} scaling, which {{enables them to}} support {{a large number of}} simple read/write operations per second. Most of the NoSQL <b>data</b> <b>stores</b> generally do not provide strict ACID properties. The idea is that by giving up strict ACID constraints high performance and scalability can be achieved. The objective {{of this paper is to}} study and compare the features of the most popular NoSQL <b>data</b> <b>stores</b> like Bigtable (used in Google), Dynamo (used in Amazon) and Cassandra (used in Facebook). The significance of these <b>data</b> <b>stores</b> is that most of the NoSQL <b>data</b> <b>stores</b> available today are developed using the concepts put forwarded by Bigtable and Dynamo. They can be considered as the foundation stones of today’s NoSQL <b>data</b> <b>stores...</b>|$|R
25|$|The store's {{back-end}} software uses WebObjects – Apple's own {{application server}} it acquired from NeXT. Content is uploaded to iTunes <b>data</b> <b>store</b> using an internal Apple program called iTunes Producer, which automatically encodes and adds metadata to uploaded files.|$|E
25|$|Several {{vulnerability}} {{issues were}} discovered and exploited by malicious users. One such issue is DNS cache poisoning, in which data is distributed to caching resolvers under {{the pretense of}} being an authoritative origin server, thereby polluting the <b>data</b> <b>store</b> with potentially false information and long expiration times (time-to-live). Subsequently, legitimate application requests may be redirected to network hosts operated with malicious intent.|$|E
25|$|Windows Vista {{introduces}} {{an overhaul}} of the previous Windows NT operating system loader architecture NTLDR. Used by versions of Windows NT since its inception with Windows NT 3.1, NTLDR has been completely replaced with a new architecture designed to address modern firmware technologies such as the Unified Extensible Firmware Interface. The new architecture introduces a firmware-independent <b>data</b> <b>store</b> and is backward compatible with previous versions of the Windows operating system.|$|E
30|$|Document <b>data</b> <b>stores</b> {{have similar}} {{limitations}} to key-value <b>data</b> <b>stores,</b> {{such as the}} lack of built-in support for relationships among documents and transactional operations involving multiple documents.|$|R
3000|$|Security is an {{important}} aspect of <b>data</b> <b>stores</b> that is overlooked by many NoSQL implementations. In this section, the <b>data</b> <b>stores</b> surveyed are compared with regard to the following features: [...]...|$|R
5000|$|Build {{a global}} user {{identity}} by correlating unique user accounts across various <b>data</b> <b>stores,</b> and enrich identities with attributes pulled from multiple <b>data</b> <b>stores,</b> {{based on a}} link between user entries.|$|R
25|$|All Hawk-Eye {{systems are}} based on the {{principles}} of triangulation using the visual images and timing data provided by a number of high-speed video cameras located at different locations and angles around the area of play. For tennis there are ten cameras. The system rapidly processes the video feeds by a high-speed camera and ball tracker. A <b>data</b> <b>store</b> contains a predefined model of the playing area and includes data on the rules of the game.|$|E
25|$|Microsoft Data Access Components (MDAC; {{also known}} as Windows DAC) is a {{framework}} of interrelated Microsoft technologies that allows programmers a uniform and comprehensive way of developing applications that can access almost any <b>data</b> <b>store.</b> Its components include: ActiveX Data Objects (ADO), OLE DB, and Open Database Connectivity (ODBC). There have been several deprecated components as well, such as the Microsoft Jet Database Engine, MSDASQL (the OLE DB provider for ODBC), and Remote Data Services (RDS). Some components have also become obsolete, such as the former Data Access Objects API and Remote Data Objects.|$|E
25|$|Unlike {{analytics}} products {{offered by}} SAS Institute, R does not natively handle datasets larger than main memory. In 2010 Revolution Analytics introduced ScaleR, a package for Revolution R Enterprise {{designed to handle}} big data through a high-performance disk-based <b>data</b> <b>store</b> called XDF (not related to IBM's Extensible Data Format) and high performance computing across large clusters. The release of ScaleR marked a push away from consulting and services alone to custom code and a la carte package pricing. ScaleR also works with Apache Hadoop and other distributed file systems and Revolution Analytics has partnered with IBM to further integrate Hadoop into Revolution R. Packages to integrate Hadoop and MapReduce into open source R {{can also be found}} on the community package repository, CRAN.|$|E
3000|$|Enable {{user input}} a genome {{sequence}} and select public <b>data</b> <b>stores</b> and only those company specific private <b>data</b> <b>stores</b> that he/she is authorized to view, {{in order to}} find matching genomes [...]...|$|R
40|$|National audienceIn the CoherentPaaS project, we are {{developing}} the Cloud Multidatastore Query Language (CloudMdsQL). CloudMdsQL is a functional SQL-like language, capable of querying multiple heterogeneous <b>data</b> <b>stores</b> {{within a single}} query that may contain embedded invocations to each <b>data</b> <b>store's</b> native query interface. In this paper, we introduce the problem of effcient query processing of multiple <b>data</b> <b>stores</b> with CloudMdsQL, and our approach to solve it...|$|R
30|$|In addition, {{existing}} {{surveys have}} not described the rationale or method for choosing the specific <b>data</b> <b>stores</b> {{to include in}} their studies [11 – 14]. For example, Sakr et al. stated, “…we give a brief introduction about some of those projects” [14], or Hecht and Jablonski “The most prominent stores are …” [11]; however, the method for choosing the <b>data</b> <b>stores</b> included in their studies were not presented. In contrast, this work uses a systematic approach to choose which <b>data</b> <b>stores</b> {{to include in the}} study. Additionally, this survey includes different <b>data</b> <b>stores</b> than the existing surveys [11 – 14].|$|R
2500|$|Connection: The {{connection}} {{object is}} ADO's {{connection to a}} <b>data</b> <b>store</b> via OLE DB. The connection object stores information about the session and provides methods of connecting to the <b>data</b> <b>store.</b> As some data stores have different methods of establishing a connection, some methods may not be supported in the connection object for particular OLE DB providers. A connection object connects to the <b>data</b> <b>store</b> using its 'Open' method with a connection string which specifies the connection as a list of key value pairs (for example: [...] "Provider='SQLOLEDB';Data Source='TheSqlServer'; Initial Catalog='Northwind';Integrated Security='SSPI';"). The start of which must identify the type of <b>data</b> <b>store</b> connection that the connection object requires. This must be either: ...|$|E
2500|$|OLE DB is the {{database}} access interface technology used by MDAC. OLE DB providers {{can be created}} to access such simple data stores as a text file or spreadsheet, through to such complex databases as Oracle and SQL Server. However, because different <b>data</b> <b>store</b> technology can have different capabilities, OLE DB providers may not implement every possible interface available. The capabilities that are available are implemented {{through the use of}} COM objects an OLE DB provider will map the <b>data</b> <b>store</b> technology's functionality to a particular COM interface. Microsoft calls the availability of an interface to be [...] "provider-specific" [...] as it may not be applicable depending on {{the database}} technology involved. Additionally, however, providers may also augment the capabilities of a data store; these capabilities are known as services in Microsoft parlance.|$|E
2500|$|OLE DB (also called OLEDB or OLE-DB) allows MDAC {{applications}} {{access to}} {{different types of}} (...) stores in a uniform manner. Microsoft has used this technology to separate the application from data can store in the website the <b>data</b> <b>store</b> {{that it needs to}} access. This was done because different applications need access to different types and sources of data, and do not necessarily {{need to know how to}} access technology-specific functionality. The technology is conceptually divided into consumers and providers. The consumers are the applications that need access to the data, and the provider is the software component that exposes an OLE DB interface through the use of the Component Object Model (or COM).|$|E
5000|$|Often {{companies}} have multiple <b>data</b> <b>stores</b> and <b>data</b> is scattered across multiple <b>data</b> <b>stores.</b> [...] "Agility theory emphasizes auto-discovery of each new data source, and automated upgrade of metadata repositories to automatically accommodate the new information".|$|R
5000|$|Given their sorting and naming features, it's not {{uncommon}} for subscript/variable names {{to be used as}} <b>data</b> <b>stores</b> themselves, independent of any <b>data</b> <b>stored</b> at their locations. This feature is often used for database indexes. E.g., [...]|$|R
5000|$|More {{frequently}} accessed <b>data</b> is <b>stored</b> on the SSD and the larger, {{less frequently}} accessed <b>data</b> <b>stored</b> on the HDD.|$|R
5000|$|Druid ({{open-source}} <b>data</b> <b>store)</b> is {{a popular}} open-source distributed <b>data</b> <b>store</b> for OLAP queries that is used at scale in production by various organizations.|$|E
5000|$|Connection: The {{connection}} {{object is}} ADO's {{connection to a}} <b>data</b> <b>store</b> via OLE DB. The connection object stores information about the session and provides methods of connecting to the <b>data</b> <b>store.</b> As some data stores have different methods of establishing a connection, some methods may not be supported in the connection object for particular OLE DB providers. A connection object connects to the <b>data</b> <b>store</b> using its 'Open' method with a connection string which specifies the connection as a list of key value pairs (for example: [...] ""). The start of which must identify the type of <b>data</b> <b>store</b> connection that the connection object requires. This must be either: ...|$|E
50|$|The managed <b>data</b> <b>store</b> is a {{subscriber}} to {{the active}} keys {{delivered by the}} active key provider. The managed <b>data</b> <b>store</b> uses the active keys to do asymmetric encryption, timestamping and archive the data into a locked database.|$|E
30|$|Document <b>data</b> <b>stores</b> {{have also}} been chosen in {{scenarios}} in which high development productivity and low maintenance cost are essential. The flexibility of the data model mentioned in the previous paragraphs, in tandem with easy mapping of documents to object oriented constructs [60], makes these <b>data</b> <b>stores</b> especially suited for fast application development. Moreover, many modern applications provide services using REST interfaces based on JSON representations that can be directly mapped to document <b>data</b> <b>stores.</b>|$|R
40|$|A {{system for}} {{on-board}} anomaly resolution for a vehicle has a data repository. The <b>data</b> repository <b>stores</b> <b>data</b> related to different systems, subsystems, and {{components of the}} vehicle. The <b>data</b> <b>stored</b> is encoded in a tree-based structure. A query engine is coupled to the data repository. The query engine provides a user and automated interface and provides contextual query to the data repository. An inference engine is coupled to the query engine. The inference engine compares current anomaly data to contextual <b>data</b> <b>stored</b> in the <b>data</b> repository using inference rules. The inference engine generates a potential solution to the current anomaly by referencing the <b>data</b> <b>stored</b> in the <b>data</b> repository...|$|R
30|$|As {{the basic}} data model, we {{consider}} the case of <b>data</b> <b>stored</b> in relational tables. The relational data model is still widely applied today although alternatives exist (like tree- or graph-structured <b>data</b> or <b>data</b> <b>stored</b> in a simple key-value format).|$|R
50|$|C1 CMS can be {{regarded}} as a CMS without database by default with an option of migrating its <b>data</b> <b>store</b> to a Microsoft SQL Server database. As the CMS without database it uses XML files for its <b>data</b> <b>store.</b>|$|E
5000|$|Event-centric: Data events (which {{may have}} {{initially}} originated from a device, application, user, <b>data</b> <b>store</b> or clock) and event detection logic which may conditionally discard the event, initiate an event-related process, alert a user or device manager, or update a <b>data</b> <b>store.</b>|$|E
5000|$|Directory Server - an X500/LDAP-compliant {{hierarchical}} <b>data</b> <b>store.</b>|$|E
50|$|After allocating 2 {{delay element}} for <b>storing</b> the {{temporary}} <b>data,</b> {{we need to}} schedule <b>data</b> <b>stored</b> at which register.The following table shows the <b>data</b> <b>stored</b> in each register R1 and R2, such {{that the number of}} multiplexer could be minimized.|$|R
30|$|Pokorny [13], Cattell [12], and Sakr et al.[14] {{have also}} {{reviewed}} NoSQL <b>data</b> <b>stores.</b> They portrayed {{a number of}} NoSQL <b>data</b> <b>stores,</b> describing their <b>data</b> models and their main underlying principles and features. However, in contrast to this work, they did not perform direct feature comparison among <b>data</b> <b>stores.</b> Sadalage and Fowler [15] described the principles on which NoSQL stores are based and why they may be superior to traditional databases. They introduced several solutions, {{but they did not}} compare features as is done in this work.|$|R
40|$|The {{last few}} years have seen a drastic {{increase}} in the amount and the heterogeneity of NoSQL <b>data</b> <b>stores.</b> Consequently, exploration and comparison of these <b>data</b> <b>stores</b> have become difficult. Once chosen, {{it is hard to}} migrate to different <b>data</b> <b>stores.</b> Recently, a number of data access middleware platforms for NoSQL have emerged that provide access to different NoSQL <b>data</b> <b>stores</b> from standardized APIs. However, there are two key concerns related to: (i) the performance overhead introduced by these platforms, and (ii) the effort required to migrate between different <b>data</b> <b>stores.</b> In this paper, we present two complementary studies that provide answers to the above mentioned concerns for three of the most mature data access middleware platforms: Impetus Kundera, Playorm, and Spring Data. First, we evaluate the performance overhead introduced by these platforms for the CRUD operations. Second, we compare the cost of migration with and without these platforms. Our study shows that, despite their similarity in design, these platforms are still substantially different performance-wise. Both studies are complementary as they show the trade-off inherent in adopting a data access middleware platform for NoSQL: by allowing some performance overhead, the developer gain benefits in terms of portability and easy migration across heterogeneous <b>data</b> <b>stores.</b> status: accepte...|$|R
