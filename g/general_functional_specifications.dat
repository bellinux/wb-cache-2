0|2640|Public
3000|$|... where {{spending}} {{denotes the}} amount of public funding devoted to education, ∆ denotes the log-first difference of the indicator and f is a <b>general</b> <b>functional</b> form <b>specification.</b> The subscript t is a time index, while i is a country index, both common notations in a panel setting.|$|R
40|$|Whereas {{consumer}} theory employs {{several different}} empirical specifications for estimating indirect utility functions, producer theory {{has relied on}} the Translog specification to estimate the indirect production function. In this paper, we apply Lewbel’s more <b>general</b> <b>functional</b> <b>specification</b> and investigate its implications for the estimation of indirect production functions in productivity analysis. An attractive feature of the Lewbel model is that it nests both the Translog and the almost ideal supply system, offering a method to assess the empirical validity of all three specifications. Aggregate U. S. production data are {{used to examine the}} performance of the three models in an empirical application. duality, indirect production function, nested test, C 32, C 52, Q 12,...|$|R
40|$|Mobile Agent Systems are {{not fully}} {{utilized}} because many security problems need to be solved. SMAG system is a new Mobile Agent System that is designed and implemented in this thesis. The system greatly reduces the security threats of mobile agents. It also incorporate a “mobile agent generator” that accepts <b>general</b> <b>functional</b> <b>specification</b> for an agent, and then it generates the executable. SMAG system contains new security mechanisms. These mechanisms protect all system components, such as View Security Mechanism and Simulator Mechanism to protect mobile agents, Generation Mechanism and Agent Virtual Machine to protect Service Providers and Controller mechanism to protect mobile agents' mobility and integrity. By using C# and. NET framework, SMAG system has been implemented. To illustrate the SMAG system, a Bookshop system has been designed and implemented by using the system infrastructure...|$|R
50|$|A <b>functional</b> <b>specification</b> (also, <b>functional</b> spec, specs, <b>functional</b> <b>specifications</b> {{document}} (FSD), <b>functional</b> requirements <b>specification)</b> {{in systems}} engineering and software {{development is a}} document that specifies the functions that a system or component must perform (often part of a requirements specification) (ISO/IEC/IEEE 24765-2010).|$|R
5000|$|When {{the team}} agrees that <b>functional</b> <b>specification</b> {{consensus}} is reached, the functional spec is typically declared [...] "complete" [...] or [...] "signed off". After this, typically the software development and testing team write source code and test cases using the <b>functional</b> <b>specification</b> as the reference. While testing is performed, {{the behavior of}} the program is compared against the expected behavior as defined in the <b>functional</b> <b>specification.</b>|$|R
40|$|In {{this work}} we present the {{contribution}} to the <b>functional</b> <b>specification</b> of the systems MRP/MRPII, identifying the characteristics that such systems should present, starting from the existent literature on the theme. Once the <b>functional</b> <b>specification</b> of the system MRP/MRPII was established, we verified these characteristics in ERP- Enterprise Resource Planning. The representative ERP, SAP R/ 3, was selected through the uses of models established in the literature and also based in additional information and the MRP/MRPII, present in SAP R/ 3, the selected ERP, was analized {{in comparison with the}} <b>functional</b> <b>specification.</b> The obtained results showed that SAP R/ 3 assists to the requirements of the <b>functional</b> <b>specification...</b>|$|R
50|$|The National Archives of Australia (NAA) {{published}} the <b>Functional</b> <b>Specifications</b> for Electronic Records Management Systems Software (ERMS), {{and the associated}} Guidelines for Implementing the <b>Functional</b> <b>Specifications</b> for Electronic Records Management Systems Software, as exposure drafts in February 2006.|$|R
40|$|A {{transformational}} {{programming approach}} is proposed {{as a means}} for developing a class of parallel algorithms from clear <b>functional</b> <b>specifications</b> to efficient networks of communicating sequential processes (CSP). A foundation for the systematic refinement of <b>functional</b> <b>specifications</b> into CSP processes is established. Techniques for exhibiting implicit parallelism in <b>functional</b> <b>specification</b> are developed. Their use is illustrated by deriving new efficient parallel algorithms to several problems. Derivation and reasoning are conducted in an equational style using the calculus for program synthesis developed by Bird and Meertens...|$|R
50|$|<b>Functional</b> <b>specifications</b> for an {{electronic}} health record.|$|R
40|$|The paper investigates a {{methodology}} for representing knowledge in logic programming using <b>functional</b> <b>specifications.</b> The methodology {{is illustrated by}} an example formalizing several forms of inheritance reasoning. We also introduce and study a new specification constructor which corresponds to removal of the closed world assumption from input predicates of <b>functional</b> <b>specifications...</b>|$|R
50|$|Note {{that this}} is very {{different}} from functional testing, which attempts to validate that the circuit under test functions according to its <b>functional</b> <b>specification.</b> This is closely related to functional verification problem of determining if the circuit specified by the netlist meets the <b>functional</b> <b>specifications,</b> assuming it is built correctly.|$|R
50|$|In the ordered {{industrial}} {{software engineering}} life-cycle (waterfall model), <b>functional</b> <b>specification</b> describes {{what has to}} be implemented. The next, Systems architecture document describes how the functions will be realized using a chosen software environment. In non industrial, prototypical systems development, <b>functional</b> <b>specifications</b> are typically written after or as part of requirements analysis.|$|R
40|$|This paper {{provides}} a theoretical {{explanation for the}} sensitivity of technical efficiency measures to the choice of <b>functional</b> <b>specification</b> in stochastic production frontier models. It is shown that inappropriate <b>functional</b> <b>specifications</b> translate into a misspecification in the conditional mean of the stochastic frontier regression model. This misspecification, in turn, results in estimates of technical efficiency, confidence intervals and production elasticities being biased, even asymptotically. Monte-Carlo simulations reveal that {{the severity of the}} bias depends on the <b>functional</b> <b>specification</b> and the percentage contribution of the variance of technical inefficiency to the total variance of the composed errors. ...|$|R
5000|$|A {{functional}} requirement in a <b>functional</b> <b>specification</b> might state as follows: ...|$|R
5000|$|ISO/IEC 18023-1:2006(E) Information {{technology}} - SEDRIS - Part 1: <b>Functional</b> <b>specification</b> ...|$|R
50|$|In {{software}} development, a <b>functional</b> <b>specification</b> (also, <b>functional</b> spec or specs or <b>functional</b> <b>specifications</b> document (FSD)) is the set {{of documentation}} that describes {{the behavior of a}} computer program or larger software system. The documentation typically describes various inputs that can be provided to the software system and how the system responds to those inputs.|$|R
5000|$|Verification and Validation (V&V): Embedded {{throughout}} the software development process (e.g. user requirements <b>specification,</b> <b>functional</b> <b>specification,</b> design specification, code review, unit tests, integration tests, system tests).|$|R
50|$|A <b>functional</b> <b>specification</b> {{is closely}} related to the {{requirement}} specification and may show functional block diagrams.|$|R
40|$|This paper {{examines}} {{the effect of}} <b>functional</b> form <b>specification</b> on the estimation of technical efficiency using a panel data set of 125 olive-growing farms in Greece for the period 1987 – 93. The generalized quadratic Box-Cox transformation is {{used to test the}} relative performance of alternative, widely used, functional forms and to examine the effect of prior choice on final efficiency estimates. Other than the <b>functional</b> <b>specifications</b> nested within the Box-Cox transformation, the comparative analysis includes the minflex Laurent translog and generalized Leontief that possess desirable approximation properties. The results indicate that technical efficiency measures are very sensitive to the choice of <b>functional</b> <b>specification.</b> Perhaps most importantly, the choice of functional form affects the identification of the factors affecting individual performance – the sources of technical inefficiency. The analysis also shows that while specification searches do narrow down the set of feasible alternatives, the identification of the most appropriate <b>functional</b> <b>specification</b> might not always be (statistically) feasible. Copyright Springer-Verlag Berlin Heidelberg 2003 Key words: Stochastic frontiers, <b>functional</b> <b>specifications,</b> Box-Cox transformation, technical efficiency, Greek olive oil., JEL Classification System Numbers: C 12, C 13, C 23, C 52, Q 12,...|$|R
40|$|Design is an {{important}} but little understood intelligent activity. Conceptual design is the transformation of <b>functional</b> <b>specifications</b> to an initial concept of an artifact that achieves them. Human designers rely heavily {{on the use of}} sketches, which {{can be thought of as}} qualitative models of a device. An appealing model of conceptual design is that of a mapping from qualitative <b>functional</b> <b>specifications</b> to a corresponding qualitative object model...|$|R
50|$|Equipment {{can then}} be {{described}} by an Equipment <b>Functional</b> <b>Specification</b> (EFS) which lists the atomic functions and their interconnection.|$|R
50|$|Specification-Based Test Design Techniques {{base on the}} (<b>functional)</b> <b>specification</b> of {{the system}} under test.They are also called black-box testing.|$|R
50|$|HSSP {{specification}} work {{is divided}} into two foundational components: <b>functional</b> <b>specifications</b> (manifested as Service Functional Models) and technical specifications (resulting in technology adoptions). The <b>functional</b> <b>specification</b> work is being originated within health industry standards communities, such as HL7 and CEN. The functional models enumerate what capabilities are to be supported but not how they are supported. The technical specification work details exactly how those functions are manifested and ultimately realized in a technology platform.|$|R
40|$|<b>Functional</b> <b>specifications</b> {{have been}} used to specify and verify designs of a number of reactive, {{discrete}} systems. In this paper we extend this specification style to deal with real-time and hybrid systems. As mathematical foundation we employ Banach's fixed point theory in metric spaces. The goal is to show that the theory used for discrete <b>functional</b> <b>specifications</b> smoothly carries over to real-time and hybrid systems. An example of a thermostat specification illustrates the method...|$|R
2500|$|The {{identification}} of test relevant aspects usually follows the (<b>functional)</b> <b>specification</b> (e.g. requirements, use cases …) {{of the system}} under test.|$|R
50|$|Non Intrusive: It {{is based}} on <b>functional</b> <b>specification,</b> {{architectural}} view whereas not on source code or binaries which makes it invasive too.|$|R
40|$|Abstract. This paper extends Object-Z with Real-Time and {{describes}} {{the characters of}} real-time system: delay, timeout and multithread. Real-Time Object-Z consists two parts: <b>functional</b> <b>specification</b> and filter specification. The both for any time critical system can be developed with two parts. <b>Functional</b> <b>specification</b> developed with Object-Z formerly can be reused. The main benefit {{is that it is}} convenient to deal with the timing variables defined in the specification developed with our approach. Using our approach, we can develop real-time specification and reason about the real-time properties conveniently...|$|R
5000|$|The {{development}} {{team was}} headed by David Liddle, and would eventually grow {{to more than}} 200 developers. A {{good part of the}} first year was taken up by meetings and planning, the result of which was an extensive and detailed <b>functional</b> <b>specification,</b> internally termed the [...] "Red Book". This became the bible for all development tasks. It defined the interface and enforced consistency in all modules and tasks. All changes to the <b>functional</b> <b>specification</b> had to be approved by a review team which maintained standards rigorously.|$|R
5000|$|The {{documentation}} typically {{describes what}} is needed by the system user as well as requested properties of inputs and outputs (e.g. of the software system). A <b>functional</b> <b>specification</b> is the more technical response to a matching requirements document, e.g. the Product Requirement Document [...] "PRD". Thus it picks up {{the results of the}} requirements analysis stage. On more complex systems multiple levels of <b>functional</b> <b>specifications</b> will typically nest to each other, e.g. on the system level, on the module level and on the level of technical details.|$|R
40|$|A {{feasibility}} study {{to develop a}} requirements analysis and <b>functional</b> <b>specification</b> for a data management system for large-scale DNA sequencing laboratories resulted in a <b>functional</b> <b>specification</b> for a Sequencing Information Management System (SIMS). This document reports {{the results of this}} {{feasibility study}}, and includes a <b>functional</b> <b>specification</b> for a SIMS relational schema. The SIMS is an integrated information management system that supports data acquisition, management, analysis, and distribution for DNA sequencing laboratories. The SIMS provides ad hoc query access to information on the sequencing process and its results, and partially automates the transfer of data between laboratory instruments, analysis programs, technical personnel, and managers. The SIMS user interfaces are designed for use by laboratory technicians, laboratory managers, and scientists. The SIMS is designed to run in a heterogeneous, multiplatform environment in a client/server mode. The SIMS communicates with external computational and data resources via the internet...|$|R
3000|$|Review {{of models}} for {{predicting}} {{the concentration of}} chemicals in air, water and soil to human exposure, including mathematical and <b>functional</b> <b>specification</b> of the multimedia software [...]...|$|R
5000|$|... 2009: UK Libraries' {{programmer}} Dr. Michael Slone {{works with}} Boyd and Weig to further develop OHMS and prepare initial <b>functional</b> <b>specification.</b> Team: Doug Boyd, Eric Weig, Michael Slone.|$|R
5000|$|<b>Functional</b> <b>Specification</b> of Electronic Health Record (EHR) / Personal Health Record (PHR) systems - a {{standardized}} description {{of health and}} medical functions sought for or available in such software applications ...|$|R
50|$|In the end, many {{features}} {{from the}} Star <b>Functional</b> <b>Specification</b> were not implemented. The product {{had to get}} to market, and the last several months before release focused on reliability and performance.|$|R
5000|$|Input {{involves}} {{different types}} of requirements, <b>functional</b> <b>specifications,</b> detailed designing of documents, proper source code, security specifications. This is the preparation stage of white-box testing to layout all of the basic information.|$|R
40|$|This paper {{describes}} the <b>functional</b> <b>specification</b> and verification portions of El Greco, {{a system for}} high-level, heterogeneous <b>functional</b> <b>specification,</b> efficient compiled simulation, and software and hardware implementation. Specifications {{in the form of}} dataflow graphs, hierarchical finite state machines, or a mixture, are supported. These specifications can be arbitrarily nested, as in Ptolemy [1]. When dataflow graphs are placed in a control context, the graph execution is fully controllable; its execution can be restarted or suspended and parameters can be changed. We describe system modeling and simulation generation in El Greco and compare to other approaches. 1...|$|R
