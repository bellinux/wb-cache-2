0|10000|Public
40|$|One {{important}} {{advantage of}} logic programming {{is that it}} allows the implicit exploitation of parallelism. Towards this goal, we suggest that or-parallelism can be efficiently exploited in tabling systems and propose two alternative approaches, Or-Parallelism within Tabling (OPT) and Tabling within Or-Parallelism (TOP). We then focus on OPT approach where environment copying is used to implement or-parallelism. We give the necessary data structures and data areas and describe an algorithm for the public completion operation. Keywords: Parallel Logic Programming, Or-parallelism, Tabling. 1 Introduction Prolog is an extremely popular and powerful logic programming language. Prolog is widely used to program symbolic computing applications in areas such as Artificial Intelligence, Natural Language, Knowledge Based Systems, Machine Learning, Database Management or <b>Expert</b> <b>Systems.</b> <b>Prolog's</b> popularity was also sparked by the success in Prolog compilation technology which has enabled Prolog pro [...] ...|$|R
40|$|An {{optimizing}} translation {{mechanism for}} the dynamic interaction between a logic-based <b>expert</b> <b>system</b> written in <b>PROLOG</b> and a relational database accessible through SQL is presented. The mechanism makes use of an intermediate language that decomposes the optimization problem and makes the proposed approach target-language independent. It can either facilitate <b>expert</b> <b>system</b> - database interaction, e. g., when integrating <b>expert</b> <b>systems</b> int...|$|R
40|$|New {{programming}} {{languages are}} available in the market place that ease the design of intelligent tasks executed by the computer. PROLOG {{is one of the leading}} programming languages of this kind that allows programs which result from precise observation of experts and that learn from experience. In order to test the impact of Artificial Intelligence and the use of PROLOG, twenty students were trained to use this language, and were compared with twenty other students in a high school. The students learned how to build an <b>expert</b> <b>system</b> using <b>PROLOG.</b> The hypothesis was that these students would develop abilities to find relationships between concepts and therefore develop some problem solving abilities. Two tests each divided into three subtests were used to measure the ability to find analogies between ideas, to find relationships between visual concepts and to use logical thinking. The results showed that there was no significant relationship between designing an <b>expert</b> <b>system</b> using <b>PROLOG</b> and finding relationships between concepts despite the fact that PROLOG is based on the logic of predicates and that predicates are the relations which link the different characteristics of an object. Source: Masters Abstracts International, Volume: 33 - 04, page: 1067. Supervisor: L. Horton. Thesis (M. Ed.) [...] University of Windsor (Canada), 1993...|$|R
40|$|AbstractWe {{discuss the}} use of metainterpreters for {{building}} <b>expert</b> <b>systems</b> in <b>PROLOG.</b> Three issues are covered. The first is a technique for mixing a metainterpreter into an object program imbuing it with the functionality specified by the matainterpreter. Mixing a metainterpreter into a PROLOG program consists of two steps: partially evaluating the metainterpreter {{with respect to the}} object program and pushing down the metaarguments of the metainterpreter into the object program. The second issue is a classification of metainterpreters into structural, contextual, and behavioral enhancements. Examples are given of useful enhancements for building <b>expert</b> <b>systems.</b> Finally, we discuss the combination of several metainterpreters and how a programming environment for building <b>expert</b> <b>systems</b> could be built based on the ideas in this paper...|$|R
40|$|The most {{important}} aim of <b>expert</b> <b>systems</b> is {{to emulate the}} expert. The majority of existing <b>expert</b> <b>systems</b> for design try to achieve this by integrating the phases of the design process within one software environment thus achieving an overall automation. These integrated systems tend to support design by numerous repeated analysis due to their inability to suggest good preliminary solutions. The feedback from numerical analyses is needed to modify the preliminary solutions. It is argued here that human experts have {{a different approach to}} design problems. They try to minimize the iterative nature of design by suggesting preliminary solutions which have a higher chance of succeeding at the subsequent detailed design stage. <b>Expert</b> <b>systems</b> {{should be able to do}} the same. Ideally, good preliminary solutions should be tailored to the requirements; this means that they should take account of the majority of constraints and structural behaviors quantitatively while selecting the values for key design parameters. It is suggested here that the numerical processing power of the computer should be used to obtain good preliminary solutions by developing design algorithms, which can take account of governing factors at an early stage of the design process. These in turn can be used to encapsulate knowledge in the <b>expert</b> <b>systems</b> instead of the 'heuristics' which are used to incorporate past experience in existing <b>expert</b> <b>systems.</b> In order to develop these design algorithms, it is necessary to unravel the rationale behind each decision made during the preliminary design stage. In this thesis, the work carried out to rationalize the philosophy of the design process of prestressed concrete spine beams is explained in detail. The main advantage of this approach is that the <b>expert</b> <b>system</b> is compact and fast in execution. It is also capable of guiding the designer in a consultation session either by suggesting appropriate values or allowable ranges for key design parameters, as is done by a human expert. Keywords: Prestressed Concrete, Spine Beams, Bridges (structures), <b>Expert</b> <b>Systems,</b> <b>Prolog,</b> Deep Knowledg...|$|R
40|$|We {{describe}} a shell for <b>expert</b> <b>systems</b> written in <b>Prolog.</b> The shell provides a consultation environment {{and a range}} of explanation capabilities. The design of the shell is modular, making it very easy to extend the shell with extra features required by a particular <b>expert</b> <b>system.</b> The novelty of the shell is twofold. Firstly, it has a uniform design consisting of an integrated collection of meta-interpreters. Secondly, there is a new approach for explaining 'why not,' when a query to the system fails...|$|R
40|$|The {{purpose of}} the {{proposed}} thesis is to: 1. Define <b>expert</b> <b>systems</b> and discuss various implementation techniques for the components of <b>expert</b> <b>systems.</b> This includes discussion on knowledge representation, inference methods, methods for dealing with uncertainty, and methods of explanation. Specifically, the {{focus will be on}} the implementation of rule-based expert systems; 2. Apply selected <b>expert</b> <b>system</b> techniques to a case study. The case study will be a rule-based <b>expert</b> <b>system</b> in <b>Prolog</b> to recognize and identify musical chords from tonal harmony. The system will have a general knowledge base containing fundamental rules about chord construction. It will also contain some knowledge that will allow it to deduce non-trivial chords. Furthermore, it will contain procedures to deal with uncertainty and explanation; 3. Explain general concepts about music theory and tonal chord classification to put the case study in context; and 4. Discuss the limitations of <b>expert</b> <b>systems</b> {{based on the results of}} the case study and the current literature. Department of Computer ScienceThesis (M. S. ...|$|R
40|$|The {{first part}} of the thesis {{provides}} an introduction to the logic programming language Prolog and some areas of current research. The use of compilation to make Prolog faster and more efficient is studied and a modified representation for complex structures is presented. Two programming tools are also presented. The second part of the thesis focuses on one problem which arises when implementing an <b>Expert</b> <b>System</b> using <b>Prolog.</b> A practical three-valued Prolog implementation is described. An interpreter accepts three-valued formulae and converts these into a Prolog representation. Formulae are in clausal form which allows disjunctive conclusions to rules. True and false formulae are stated explicitly and therefore the interpreter is able to perform useful consistency checks when information is added to the data base...|$|R
40|$|This paper {{introduces}} the STRATEGY 1, a Distributed Military Strategy <b>Expert</b> <b>System</b> on the ETHERNET {{used in the}} requirement prediction for Chinese defense. It describes the system architecture, the methodology of distributed problem solving by multiple <b>expert</b> <b>systems</b> using LISP, <b>PROLOG</b> and Fuzzy, the communication among workstations and graphic display of results by AUTOCAD and AUTOLISP. At the 5 th International Conference on Distributed Computing Systems in 1985, Prof. J. B. Dennis pointed out that by now all programs of the Artificial Intelligence could only run on a single computer, but they should run on a distributed system in the future. Recently some scientists said that the Second Generation <b>Expert</b> <b>System</b> would be a distributed <b>expert</b> <b>system.</b> ...|$|R
40|$|This thesis {{evaluates the}} benefit of meshing {{mathematical}} programming and <b>expert</b> <b>systems</b> for solving capital budgeting problems, using constraint logic programming methods. A review of modelling capabilities of mathematical programs for capital budgeting, and of financial <b>expert</b> <b>systems</b> leads to defining the respective role and potential of each method, and to the proposal of a two-tiered project selection approach: project evaluation and resource allocation. With emphasis placed on a tight coupling of the two tiers, logic programming is {{shown to be a}} language of choice to implement mathematical programming within an <b>expert</b> <b>system</b> shell. <b>Prolog</b> has the requisite properties to deal with both logical considerations and optimization problems. Although Prolog was not primarily designed to solve optimization problems, it is shown that the backtracking mechanism of the Prolog language is powerful enough for that purpose; it liberates the programmer from having to implement tree-search programs. A generate and test program is written in Turbo-Prolog, and compared to a more sophisticated test and generate implementation that uses methods of constraint satisfaction programming. Continuous capital budgeting problems are solved in CLP(R), an experimental extension of Prolog that enables the solution of simultaneous algebraic constraints, as required to solve linear programs...|$|R
40|$|The {{blackboard}} architecture, {{in which}} a set of independent knowledge sources communicate {{by means of a}} global data base known as a blackboard, has been suggested as a generally useful design for knowledge-based systems. Teraphim is a domain-independent frame work for writing blackboard-based <b>expert</b> <b>systems</b> in <b>Prolog.</b> It implements concepts common to a range of previous blackboard architecture programs, such as HEARSAY-III and BB 1. Teraphim includes as its basic elements a partitioned blackboard, a simple blackboard-controlled scheduler, a set of general-purpose scheduling heuristics to control the scheduler, a generic knowledge source with the ability to ask the user questions about incomplete data, modifiable methods of reasoning about uncertain data, and a simple explanation facility that traces the origins of terms on the problem blackboard. Trials of the system indicate that {{it can be used to}} implement <b>expert</b> <b>systems</b> to solve either synthesis or analysis problems. The blackboard architecture of Teraphim lends itself to experimentation with the kinds of knowledge representation and control knowledge needed to solve problems. Prolog proved to be a convenient language for writing blackboard-based systems...|$|R
40|$|The use of {{database}} management systems (DBMS) and AI to minimize human {{involvement in the}} planning of optical navigation pictures for interplanetary space probes is discussed, with application to the Galileo mission. Parameters characterizing the desirability of candidate pictures, and the program generating them, are described. How these parameters automatically build picture records in a database, and {{the definition of the}} database structure, are then discussed. The various rules, priorities, and constraints used in selecting pictures are also described. An example is provided of an <b>expert</b> <b>system,</b> written in <b>Prolog,</b> for automatically performing the selection process...|$|R
40|$|Opium is {{a system}} for {{analysing}} and debugging Prolog programs. Its kernel comprises an execution tracer and a programming language {{with a set of}} primitives for trace and source analysis. In this report we show the power of Opium for supporting abstract views of Prolog executions. Abstract views give high-level points of view about executions. They filter out irrelevant details; they restructure the remaining information; and they compact it so that the information given at each step has a reasonable size. The examples of abstract views given in the following are a goal execution profile, some data abstractions, an instantiation profile, a failure analysis, a loop analysis, and a kind of explanation for an <b>expert</b> <b>system</b> written in <b>Prolog...</b>|$|R
40|$|Automated {{techniques}} were {{developed for the}} extraction and characterization of absorption features from reflectance spectra. The absorption feature extraction algorithms were successfully tested on laboratory, field, and aircraft imaging spectrometer data. A suite of laboratory spectra {{of the most common}} minerals was analyzed and absorption band characteristics tabulated. A prototype <b>expert</b> <b>system</b> was designed, implemented, and successfully tested to allow identification of minerals based on the extracted absorption band characteristics. AVIRIS spectra for a site in the northern Grapevine Mountains, Nevada, have been characterized and the minerals sericite (fine grained muscovite) and dolomite were identified. The minerals kaolinite, alunite, and buddingtonite were identified and mapped for a site at Cuprite, Nevada, using the feature extraction algorithms on the new Geophysical and Environmental Research 64 channel imaging spectrometer (GERIS) data. The feature extraction routines (written in FORTRAN and C) were interfaced to the <b>expert</b> <b>system</b> (written in <b>PROLOG)</b> to allow both efficient processing of numerical data and logical spectrum analysis...|$|R
40|$|Cybercrime is {{the name}} given to a recent {{phenomenon}} that covers computer fraud, theft of intellectual property or confidential data, harassment, defacement of a website, illegal use or abuse of a network or the perpetration of any crime {{with the use of}} a computer. At present the Cybercriminal is fully equipped to operate with relative impunity. SYSTEM 5 is proposed as an integrated methodology to address the problem of Cybercrime. It consists of five phases: (i) pre-incident, (ii) incident/formulation of a response strategy, (iii) incident/computer forensics process, (iv) post-incident and (v) legal phase. It profiles the Cybercriminal's motivations and techniques of attack; it models the computer attack, determines the attacker's objectives during each phase and enables the formulation of a response strategy. The response strategy encompasses evidence retrieval and analysis which is carried out within legal constraints and requirements. A prototype <b>Expert</b> <b>System</b> in <b>Prolog</b> was implemented. The approach was evaluated by an independent group of experts who concluded that SYSTEM 5 contributes significantly to the domain of computer forensics. They also concluded that the methodology is capable of deployment in a variety of legal jurisdictions. The research identifies potential avenues for expansion through the addition of new attack vectors and the refinement of the <b>Expert</b> <b>System.</b> Keywords: Computer Forensics, Attack Model, Adversary Model, Vulnerability, Worm, Virus, Computer Incident Response, Artificial Intelligence (AI), <b>Expert</b> <b>System</b> (Shell), Inference Engine, Prolog, Unified Modelling Language (UML), Chain of Custody, Search and Seizure, Evidence Retrieval, Forensic Duplication, Bit Level Image, Expert Witness Testimony, Local Area Network (LAN), Transmission Control Protocol/Internet Protocol (TCPIIP), Intrusion Detection System (IDS) ...|$|R
40|$|Database Logic was {{proposed}} in the late 1970 's as a generalization of first-order logic {{in order to deal}} in a uniform manner with relational, hierarchic, and network databases. At about the same time, the study of deductive (relational) databases has become important, primarily as a vehicle for the development of <b>expert</b> database <b>systems.</b> Also, <b>Prolog,</b> the main logic programming language, has become prominent for many applications in artificial intelligence, and its connections with deductive databases have been investigated. Although the relational model provides a suitable framework for traditional, essentially data processing applications, several researchers have found the need for complex objects in newer applications, such as engineering databases. In this paper we show how database logic can be extended in two directions: 1) to include complex objects, and 2) to provide deductive capabilities for hierarchic and network databases...|$|R
40|$|Air-traffic {{congestion}} and frequent saturation of major airports require improved Air Traffic Control procedures {{to make the}} flow of traffic more uniform and increase system capacity. Advanced technologies allow an increased aircraft controllability that makes trajectory planning feasible. A computerized Flight Path Generator for Air Traffic Control has been designed and is described herein. This tool is intended to aid controllers in their decision-making process for guiding aircraft to the runway before landing. The flight path generation program has been developed {{in the form of}} an <b>Expert</b> <b>System</b> in a <b>Prolog</b> and Lisp environment. A computationally tractable symbolic representation framework for aircraft motion in space is introduced. Several Artificial Intelligence techniques are combined to design a planner, based on partially predefined sequences of actions involving mathematical descriptions, such as movement in space with a time requirement. The adequacy of an <b>Expert</b> <b>System</b> to develop new flight approach procedures and adaptive separation criteria is highlighted. Symbolic conflict detection and resolution are presented as an extension to the Flight Path Generator in an <b>Expert</b> <b>System</b> environment. July 1987 Also issued as an M. S. thesis, Massachusetts Institute of Technology, Dept. of Aeronautics and Astronautics, 1987 Includes bibliographical references (p. 145 - 150...|$|R
50|$|Research on <b>expert</b> <b>systems</b> {{was also}} active in France. While in the US the focus {{tended to be}} on {{rule-based}} systems, first on systems hard coded on top of LISP programming environments and then on <b>expert</b> <b>system</b> shells developed by vendors such as Intellicorp, in France research focused more on <b>systems</b> developed in <b>Prolog.</b> The advantage of <b>expert</b> <b>system</b> shells {{was that they were}} somewhat easier for nonprogrammers to use. The advantage of Prolog environments was that they weren't focused only on if-then rules; Prolog environments provided a much fuller realization of a complete First Order Logic environment.|$|R
40|$|A {{real-time}} <b>expert</b> <b>system</b> {{is being}} developed {{to serve as the}} astronaut interface for a series of Spacelab vestibular experiments. This <b>expert</b> <b>system</b> is written in a version of Prolog that is itself written in Forth. The Prolog contains a predicate {{that can be used to}} execute Forth definitions; thus, the Forth becomes an embedded real-time operating <b>system</b> within the <b>Prolog</b> programming environment. The <b>expert</b> <b>system</b> consists of a data base containing detailed operational instructions for each experiment, a rule base containing Prolog clauses used to determine the next step in an experiment sequence, and a procedure base containing Prolog goals formed from real-time routines coded in Forth. In this paper, we demonstrate and describe the techniques and considerations used to develop this real-time <b>expert</b> <b>system,</b> and we conclude that Forth-based Prolog provides a viable implementation vehicle for this and similar applications...|$|R
40|$|In {{this work}} is {{described}} a new complex training system, named SPprolog, intended for training and self-training in logic programming language - <b>Prolog.</b> This <b>system</b> includes elements related to Prolog and logic programming, and the elements of independent, complex, self-sufficient training system which is capable considerably to increase the quality of self-training, and to be effective assistant in training. The most useful application of the system can be in distance education and self-training. The main elements of SPprolog system are: Functionally expanded (in comparison with existing <b>systems)</b> <b>Prolog</b> development environment, with the multipurpose code editor, the automated organization system of the personal tools, automated advice mode "Expert Advice", based on the incorporated <b>expert</b> <b>system</b> for cultivated, effective and optimized programming; Link to foreign Prolog programs compiler which allow to compile the program to independent executable; Built in intellectual, interactive, multimedia Prolog interpreter integrated with <b>expert</b> <b>system</b> and {{the elements of the}} intellectuality, allowing to lead detailed program interpretation, with popular and evident, explanation of the theory and mechanisms used in it, applying audiovisual effects to increase the level of naturalness of process of explanation; Full digital training course of Prolog programming language presented {{in the form of the}} matrix of knowledge and supplied system of consecutive knowledge reproduction for self-training and evaluation; an intensive course of training to the Prolog language and Spprolog system, based on the programmed, consecutive set of actions, allowing using the previous two mechanisms of sys-tem for popular and evident explanation of the main principles of work of <b>system</b> and <b>Prolog</b> language. training, prolog, environment, Spprolog...|$|R
40|$|Due {{to their}} size, {{existing}} <b>expert</b> <b>systems</b> often run on stand-alone PCs, workstations or mainframes. Additionally, they are frequently integrated into other <b>systems</b> (e. g. <b>PROLOG</b> knowledge bases with C/C++ GUI user interfaces and databases). While business via the Internet is continually growing, currently certain vendors are considering offering their services via the World Wide Web. This article discusses {{the first steps}} towards creating an Internet consultation for plant protection experts and farmers. We illustrate parts {{of the knowledge base}} of the plant protection <b>expert</b> <b>system</b> PRO PLANT and use the Java INference Engine and Networked Interactor (Jinni) for this purpose. Keywords: <b>Expert</b> <b>systems,</b> knowledge bases and decision support 1 Introduction With the abundance of new business opportunities via the Internet, companies are considering offering new services within their existing software systems. Some services (e. g. news, results etc.) are easily transferable to th [...] ...|$|R
40|$|In {{previous}} works, we {{have developed}} a novel class of agents called <b>expert</b> <b>system</b> agents. We have presented applications of the <b>expert</b> <b>system</b> agents in medicine. The medical <b>expert</b> <b>system</b> agents eliminate some disadvantages of the medical <b>expert</b> <b>systems.</b> The possibility to use medical <b>expert</b> <b>system</b> agents in flexible hybrid medical diagnosis systems proves practically their intelligence. In this paper, we propose the endowment of the <b>expert</b> <b>system</b> agents with hybrid components. The proposed agents are called hybrid <b>expert</b> <b>system</b> agents. A hybrid <b>expert</b> <b>system</b> agent can solve more efficiently a larger variety of problems than the <b>expert</b> <b>system</b> agents can...|$|R
40|$|A {{problem-solving}} approach {{involving the}} integration of <b>expert</b> <b>systems</b> and optimization techniques is presented. A class of <b>expert</b> <b>systems</b> called tandem <b>expert</b> <b>systems</b> is introduced. Three variants of the tandem <b>expert</b> <b>system,</b> the data-reducing, model-based, and model-modifying <b>expert</b> <b>systems,</b> are explained with examples. It is emphasized that optimization techniques can be used more frequently in future <b>expert</b> <b>systems...</b>|$|R
40|$|The paper {{presents}} {{a conception of}} the Semantic Web <b>Expert</b> <b>System</b> which is the logical continuation of the <b>expert</b> <b>system</b> development. The Semantic Web <b>Expert</b> <b>System</b> emerges {{as the result of}} evolution of <b>expert</b> <b>system</b> concept and it means <b>expert</b> <b>system</b> moving toward the Web and using new Semantic Web technologies. The proposed conception of the Semantic Web <b>Expert</b> <b>System</b> promises to have new useful features that distinguish it from other types of <b>expert</b> <b>system...</b>|$|R
40|$|AbstractProlog {{is one of}} {{the most}} {{important}} candidates to build <b>expert</b> <b>systems</b> and AI-related programs and has potential applications in embedded <b>systems.</b> However, <b>Prolog</b> is not suitable to develop many kinds of components, such as data acquisition and task scheduling, which are also crucial. To make the best use of the advantages and bypass the disadvantages, it is attractive to integrate Prolog with programs developed by other languages. In this paper, an IPC-based method is used to integrate backward chaining inference implemented by Prolog into applications or embedded <b>systems.</b> A <b>Prolog</b> design pattern is derived from the method for reuse, whose principle and definition are provided in detail. Additionally, the design pattern is applied to a target system, which is free software, to verify its feasibility. The detailed implementation of the application is given to clarify the design pattern. The design pattern can be further applied to wide range applications and embedded systems and the method described in this paper can also be adopted for other logic programming languages...|$|R
40|$|Includes bibliographical {{references}} (pages 61 - 62) <b>Expert</b> <b>Systems</b> are {{the latest}} computer software systems developed to solve classes of problems different from problems solved by conventional software programs. <b>Expert</b> <b>Systems</b> approach o problem {{in the same manner}} that humans reason and think. They are capable of this reasoning because of their stored knowledge of a specific area within their memory and their ability to reason. The use of this knowledge allows the <b>Expert</b> <b>System</b> to arrive at particular conclusions and solutions to a problem, similar to the conclusions that human experts arrive at. The novelty of this technology results in defining a need for an explanatory overview of <b>Expert</b> <b>Systems</b> and guidelines to building <b>Expert</b> <b>Systems</b> especially for managers interested in incorporating <b>Expert</b> <b>Systems</b> development and use in the company's framework of operation. This paper was conceived to stress the importance of <b>Expert</b> <b>Systems</b> to managers, provide an overview of the history, trends and projections of the <b>Expert</b> <b>Systems</b> market, explain simply the technical concepts of <b>Expert</b> <b>Systems</b> and differentiate the types of <b>Expert</b> <b>Systems.</b> Another major area covered is the provision of basic guidelines for managers to follow when building <b>Expert</b> <b>Systems</b> to eliminate major costly mistakes and to insure their success. Guidelines are presented regarding the identification of problem domain end task, project planning and more importantly the selection of an <b>Expert</b> <b>System</b> development tool to build the <b>Expert</b> <b>System.</b> The two main highlights of this paper are the discussion of the development of an actual <b>Expert</b> <b>System</b> built and the evaluation of eight PC-based commercial development tools. In conclusion, this paper would serve as a primary source of reading material for managers who are interested in both learning about <b>Expert</b> <b>Systems</b> end understanding the development process involved in building <b>Expert</b> <b>Systems.</b> Keywords: Artificial Intelligence, Domain <b>Expert,</b> <b>Expert</b> <b>System,</b> ExpertSystem development tool, Knowledge-Based System, Manager, PC-based too...|$|R
40|$|The {{research}} {{discusses the}} use and usefulness of Agricultural <b>Expert</b> <b>Systems</b> as information source, Those <b>Expert</b> <b>Systems</b> as very important supporting tools for helping people in the decision making process, also this research discusses the role of Central laboratory of Agricultural <b>Expert</b> <b>Systems</b> (CLAES) to support and development the Agricultural <b>Expert</b> <b>System</b> as the main supportive unit to Agricultural <b>Expert</b> <b>Systems</b> in Egyp...|$|R
40|$|In this paper, {{research}} and applications of <b>expert</b> <b>systems</b> in production planning and scheduling are reviewed. Components of <b>expert</b> <b>systems</b> are briefly discussed. Relationship between <b>expert</b> <b>system</b> and operations research approaches are presented. Integration of operations {{research and}} <b>expert</b> <b>system</b> techniques is explored...|$|R
40|$|This master thesis {{contains}} the basic information about knowledge and <b>expert</b> <b>systems.</b> The thesis {{contains the}}oretic text about {{architecture of the}} <b>expert</b> <b>systems</b> and representation knowledge. The text regarding on representation knowledge contains examples of different ways of knowledge representation for <b>expert</b> <b>systems.</b> In the next part is described the design and all functions of the <b>expert</b> <b>systems.</b> This <b>expert</b> <b>system</b> uses frames representation...|$|R
40|$|The work {{deals with}} {{intelligent}} embedded systems, {{particularly with the}} problem of application of <b>expert</b> <b>systems</b> in embedded architectures. It summarizes the state of art and challenges in areas of embedded <b>systems</b> and rule-based <b>expert</b> <b>systems,</b> and gives motivations for implementing <b>expert</b> <b>systems</b> in embedded architectures. We design architecture of <b>expert</b> <b>system</b> and hardware architecture of embedded system suitable for implementation of embedded <b>expert</b> <b>systems.</b> We also devise a universal representation for knowledge bases of embedded <b>expert</b> <b>systems.</b> We propose two methods of hardware acceleration of inference in embedded <b>expert</b> <b>systems.</b> One of the devised methods we experimentally evaluate and claim its remarkable contribution to inference process of <b>expert</b> <b>systems</b> and its suitability for utilization in embedded <b>expert</b> <b>systems.</b> Based on the performed experiments and acquired experience we synthesize a set of rules for implementation of <b>expert</b> <b>systems</b> in embedded architectures which contribute to the problem area of intelligent embedded systems development. The devised method for hardware accelerated inference enables implementation of <b>expert</b> <b>systems</b> even in embedded architectures where it has not been possible with the current state of art, thus facilitating further adoption of intelligent embedded systems...|$|R
40|$|The {{acceptance}} of an <b>expert</b> <b>system</b> {{by the end}} user has been {{regarded as one of}} the major criteria of <b>expert</b> <b>systems</b> success. <b>Expert</b> <b>systems</b> are characterized by its requirement for heavy and complex interaction with the end user. This paper introduces an approach for interacting with multiple <b>expert</b> <b>system</b> applications through a unified domain-specific intelligent interface agent. The proposed intelligent interface agent communicates with different <b>expert</b> <b>system</b> applications transparently from the end user, and makes the necessary actions when needed. This approach increases the usability of <b>expert</b> <b>system</b> applications and introduces a new methodology for <b>expert</b> <b>systems</b> development using multi-agent systems (MAS). The proposed approach has been applied by the Central Laboratory for Agricultural <b>Expert</b> <b>Systems</b> (CLAES) where two <b>expert</b> <b>system</b> applications – diagnosis and irrigation – have been interfaced by an intelligent interface agent. According to our proposed approach a number of advantages have been accomplished at both practical and theoretical levels...|$|R
40|$|PCLIPS (Parallel CLIPS) {{is a set}} of {{extensions}} to the C Language Integrated Production <b>System</b> (CLIPS) <b>expert</b> <b>system</b> language. PCLIPS {{is intended}} to provide an environment for the development of more complex, extensive <b>expert</b> <b>systems.</b> Multiple CLIPS <b>expert</b> <b>systems</b> are now capable of running simultaneously on separate processors, or separate machines, thus dramatically increasing the scope of solvable tasks within the <b>expert</b> <b>systems.</b> As a tool for parallel processing, PCLIPS allows for an <b>expert</b> <b>system</b> to add to its fact-base information generated by other <b>expert</b> <b>systems,</b> thus allowing systems to assist each other in solving a complex problem. This allows individual <b>expert</b> <b>systems</b> to be more compact and efficient, and thus run faster or on smaller machines...|$|R
40|$|In {{this paper}} {{we will see}} how an <b>expert</b> <b>system</b> could be created. <b>Expert</b> <b>system</b> {{is a set of}} {{programs}} that manipulate encoded knowledge to solve problems in a specialized domain that normally requires human expertise. In this paper some of the applications of <b>expert</b> <b>systems</b> in different domains are discussed. Also we will look into the characteristics, advantages, and limitations of <b>expert</b> <b>systems.</b> The users and life cycle of <b>Expert</b> <b>systems</b> is also discussed...|$|R
40|$|Abstract: Systemized {{analysis}} of trends towards integration and hybridization in contemporary <b>expert</b> <b>systems</b> is conducted, and a particular class of applied <b>expert</b> <b>systems,</b> integrated <b>expert</b> <b>systems,</b> is considered. For this purpose, terminology, classification, and models, {{proposed by the}} author, are employed. As examples of integrated <b>expert</b> <b>systems,</b> Russian systems designed in this field and available {{to the majority of}} specialists are analyzed...|$|R
40|$|<b>Expert</b> <b>systems</b> {{methodology}} {{has shown}} considerable promise as an information technology. However, limited {{knowledge of how}} current information technol-ogies relate to the decision process impedes the adoption of <b>expert</b> <b>systems.</b> Thus, a consistent theoretical development of how <b>expert</b> <b>systems</b> relate to the decision process is presented. The significance of developing an economic theory of <b>expert</b> <b>systems</b> is substantiated with an empirical application investi-gating a soybean pest management decision process. Pest management recom-mendations from extension bulletins and the <b>expert</b> <b>system</b> are compared with an expert's recommendations. Results indicate the potential improvement in decision-making processes with the adoption of <b>expert</b> <b>systems...</b>|$|R
40|$|Even though medical <b>expert</b> <b>systems</b> {{have been}} one of the {{earliest}} and prototypical applications of <b>expert</b> <b>system</b> technology, progress in the field has been disappointingly slow. Medical <b>expert</b> <b>system</b> developers face a number of difficult challenges, in part because the process of <b>expert</b> <b>system</b> development is poorly understood (c. f. developments in software engineering), resulting in a paucity of applicable process models and methodologies. In this paper the challenges encountered by medical <b>expert</b> <b>system</b> developers are conceptualised into a three-layer model, and strategies devised to overcome the above challenges are arranged into a software process model suitable for medical <b>expert</b> <b>system</b> development...|$|R
