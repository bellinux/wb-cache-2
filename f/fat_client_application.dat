0|2682|Public
5000|$|<b>Fat</b> <b>client</b> <b>{{application}}s</b> perform all application processing tasks on client systems, but data is centralized in {{a server}} {{so that it}} can be managed, {{so that it can}} be accessed by any authorized <b>client</b> <b>application,</b> so that all <b>client</b> <b>applications</b> work with up-to-date data, and so that only the records, stream sections, or database tables affected by an <b>application</b> are transmitted. <b>Client</b> <b>application</b> programs must be distributed to all clients that work with the centralized data.|$|R
40|$|Based on {{the global}} DinoHunter {{scenario}} this paper introduces "DinoPick" and "DinoQuiz" providing storytelling based edutainment applications for museums using mobile devices (PDAs). Both applications are realized as interactive learning applications enabling museum visitors such as kids or pupils {{to learn about the}} world of Dinosaurs via picking on dinosaur images or via a multiple-choice quiz game. Initially these applications have been realized as <b>fat</b> <b>client</b> <b>applications</b> and currently are being transmitted to thin <b>client</b> <b>applications</b> using W-LAN and the Ekahau positioning engine for locating users and streaming Open GL data of animated dinosaurs from a rendering server to clients...|$|R
40|$|Facing low {{developed}} {{communication infrastructure}} {{in developing countries}} {{we had to find}} a solution to support requirements of modern real time web-based information systems in order {{to be a part of}} greater e-Government system. This paper focuses on differences between web and <b>fat</b> <b>client</b> <b>applications,</b> especially caring about the optimization of traffic load in order to increase interactivity of end user and the system. Unpredictable number of end users forces us to build highly scalable and flexible system that would be very easy to use, even with the low end hardware and improperly educated end users. Paper also accents the idea of infrastructural independence, with the mean of the hardware and software that client runs. Practical implementation of the system in real time is the best possible way to present thesis mentioned above...|$|R
50|$|In one classification, client {{computers}} and devices are either <b>fat</b> <b>clients,</b> thin clients, or hybrid clients.|$|R
50|$|A <b>fat</b> <b>client,</b> {{also known}} as a rich client or thick client, is a client that {{performs}} the bulk of any data processing operations itself, and does not necessarily rely on the server. The personal computer is a common example of a <b>fat</b> <b>client,</b> because of its relatively large set of features and capabilities and its light reliance upon a server. For example, a computer running a CAD program (such as AutoCAD or CATIA) that ultimately shares the result of its work on a network is a <b>fat</b> <b>client.</b>|$|R
5000|$|Diskless Remote Boot in Linux: similar booting {{system to}} LTSP <b>fat</b> <b>clients</b> ...|$|R
5000|$|In process {{access to}} Ingres NET for <b>FAT</b> <b>clients</b> making {{distribution}} easier.|$|R
5000|$|LTSP v5.x {{added support}} for a thin client type known as [...] "fat clients". With the advent of inexpensive, {{relatively}} powerful computer hardware, the idea to run applications locally on the thin client while offering the manageability of a thin client solution became a reality. In {{the case of a}} LTSP <b>fat</b> <b>client,</b> the root filesystem is not a rudimentary chroot but a full Linux installation as a chroot. The <b>fat</b> <b>client</b> uses LDM to authenticate to the LTSP server and mounts user home directories using SSH and FUSE. The local CPU and RAM is used on the <b>fat</b> <b>clients,</b> which provides a few benefits.|$|R
5000|$|... #Caption: A stylized {{illustration}} of a tower personal computer, {{a form of}} <b>fat</b> <b>client</b> ...|$|R
50|$|A hybrid {{client is}} a mixture of the above two client models. Similar to a <b>fat</b> <b>client,</b> it {{processes}} locally, but relies on the server for storing persistent data. This approach offers features from both the <b>fat</b> <b>client</b> (multimedia support, high performance) and the thin client (high manageability, flexibility). A device running an online version of the video game Diablo III is an example of hybrid client.|$|R
50|$|Administration is also {{typically}} {{done through}} browser-based interfaces, but some systems {{require the use}} of a <b>fat</b> <b>client.</b>|$|R
50|$|The DDM {{architecture}} {{was initially}} designed {{to support the}} <b>fat</b> <b>client</b> model of distributed applications; it also supports whole-file transfers.|$|R
50|$|Alternatively {{end users}} can use <b>fat</b> <b>clients</b> like Mozilla Thunderbird or Microsoft Outlook {{as well as}} mobile devices to connect to the backend.|$|R
50|$|Both {{thin client}} and {{diskless}} node architectures employ diskless clients which have advantages over <b>fat</b> <b>clients</b> (see above), but differ {{with regard to}} the location of processing.|$|R
30|$|The TEE {{functional}} API {{will offer}} to the <b>client</b> <b>applications</b> various REE software interfaces {{that will be}} the programming interfaces dedicated to exposing inbuilt TEE capabilities for the <b>client</b> <b>application</b> developers [19]. The TEE client API executes efficient communications between <b>client</b> <b>applications</b> and trusted <b>applications</b> [17]. The <b>client</b> <b>applications</b> of REE can access the TEE components and exchange data with the trusted applications of TEE through the TEE client API as a low-level communication interface. The REE communication agent provides REE support for messaging between the <b>client</b> <b>application</b> and the trusted application.|$|R
50|$|Their creators {{claim that}} {{programs}} built with RCP are portable to many operating systems while being {{as rich as}} client-server applications which use so called <b>fat</b> <b>clients</b> or traditional clients.|$|R
5000|$|Casting : Mimie Mathy (Joséphine Delamarre), Olivia Brunaux (Véronique Maillard), Valérie Vogt (Corinne), Patrick Catalifo (Wadeck Maréchal), Laura Martel (Vanessa Maillard), Marie Coesens (Chloé Maillard), Vincent Grass (<b>Fat</b> <b>client),</b> Jean Dell (The officer), ...|$|R
5000|$|A {{convergence}} {{is occurring}} between various technologies {{associated with the}} notion of live web meetings. The phrase Web conferencing has been used to describe group discussions over the internet. These discussions are often implemented using Synchronous conferencing protocols and are commonly used for webinars, where one meeting participant lectures to other participants while presenting some information that is rendered to all participants by a common <b>client</b> <b>application</b> (web or <b>fat</b> <b>client).</b> The term Telepresence refers to a set of technologies which allow a person tofeel as if they were present, to give the appearance that they were present, or to have an effect, at a location other than their true location. Telepresence requires that the senses of the user, or users, are provided with suchstimuli as to give the feeling of being in that other location. Additionally, the user(s) may be given the ability to affect the remote location. As the analysts at IDC describe, the goal is to create a sensory experience that communicates the full range of human interactions in a live meeting.|$|R
50|$|Traditionally, ClearQuest has {{comprised}} a <b>fat</b> <b>client</b> and {{a number}} of databases existing on a backend RDBMS server to store all captured data. ClearQuest supports various backend databases including Oracle, SQL Server and IBM DB2.|$|R
5000|$|A <b>fat</b> <b>client</b> {{refers to}} a device that has {{sufficient}} speed and size to run programs and is loaded locally with software needed for operation. It can stand alone. Some advantages {{of this type of}} system are: ...|$|R
50|$|A WPS {{is usually}} not invoked directly. More often, it is invoked by a <b>client</b> <b>application</b> that {{provides}} the user with interactive controls. This <b>client</b> <b>application</b> {{may or may not}} be web-based.|$|R
40|$|Goal of this bachelors {{thesis is}} to {{describe}} development of mobile application for the Android platform working with geolocating and to create functional web server application, which allows using web interface to create data for <b>client</b> <b>application</b> and also collect and display statistical data about movement of <b>client</b> <b>application</b> users. Server application is based on framework Nette (PHP) and <b>client</b> <b>application</b> on Android development kit (Java) ...|$|R
50|$|IMPAX 6 {{features}} {{both local}} and remote access.The client can connect to the PACS server from home or office locations. This is accomplished via thin and <b>fat</b> <b>client</b> technology. The latest version is Impax 6.5, which features a stethoscope login screen.|$|R
50|$|If {{the phone}} {{supports}} it, well written <b>client</b> <b>applications</b> can fully hide the native phone user interface. Otherwise users {{will have two}} different screens from which to dial calls: the built-in one and the <b>client</b> <b>application.</b>|$|R
50|$|Variations in the {{distribution}} include <b>FAT</b> <b>client</b> (Requires Ingres NET for communication), Thin eClient (can be used without Ingres NET but needs to use the Application Server instead (DCOM)), and finally mClient for Mobile Windows Clients (HTTP services required to interface to the Application server).|$|R
5000|$|... #Subtitle level 3: Centrally hosted thick <b>client</b> <b>applications</b> ...|$|R
50|$|A local exploit {{requires}} prior {{access to}} the vulnerable system and usually increases the privileges of the person running the exploit past those granted by the system administrator. Exploits against <b>client</b> <b>applications</b> also exist, usually consisting of modified servers that send an exploit if accessed with a <b>client</b> <b>application.</b>|$|R
50|$|Cloud {{computing}} architecture {{refers to}} the components and subcomponents required for cloud computing. These components typically consist of a front end platform (<b>fat</b> <b>client,</b> thin client, mobile device), back end platforms (servers, storage), a cloud based delivery, and a network (Internet, Intranet, Intercloud). Combined, these components make up cloud computing architecture.|$|R
50|$|Greater network {{bandwidth}} (i.e. capacity) {{will also be}} used in a diskless model, compared to a <b>fat</b> <b>client</b> model. This {{does not necessarily mean that}} a higher capacity network infrastructure will need to be installed—it could simply mean that a higher proportion of the existing network capacity will be used.|$|R
5000|$|Programming a TCP <b>client</b> <b>application</b> {{involves}} the following steps: ...|$|R
5000|$|A {{registered}} user can install the Java-based <b>client</b> <b>application</b> (SWT-GUI): ...|$|R
5000|$|Combine {{the many}} {{disparate}} protocols inside the IM <b>client</b> <b>application.</b>|$|R
5000|$|Multiple global {{variable}} scope: Request, Session, <b>Client,</b> <b>Application,</b> Server, Cluster ...|$|R
5000|$|... client - a <b>client</b> <b>application</b> {{running on}} target mobile device ...|$|R
5000|$|Users {{can send}} SMS {{messages}} from any Nymgo <b>client</b> <b>application.</b>|$|R
50|$|A simple web-based {{tool for}} quick ad hoc displays. PI Vision {{is a thin}} client tool {{and can be used}} {{anywhere}} an Internet connection is available, as opposed to the other end-user tools that are considered <b>fat</b> <b>client</b> and require a local installation. Prior to March 2017, PI Vision was called PI Coresight.|$|R
