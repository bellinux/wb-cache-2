0|329|Public
50|$|The SIM (System Integration Module), which {{eliminates}} much <b>glue</b> <b>logic</b> {{by providing}} <b>chip</b> selects and address decoding. The SIM {{also provides a}} clock generator, watchdogs for various system operations, configuration of processor pins, a periodic timer, and an interrupt controller.|$|R
50|$|The {{software}} {{equivalent of}} <b>glue</b> <b>logic</b> is called <b>glue</b> code.|$|R
5000|$|Typical {{functions}} of <b>glue</b> <b>logic</b> may include (but {{are not limited}} to): ...|$|R
5000|$|ZK - a Java Ajax {{framework}} that allows <b>glue</b> <b>logic</b> written in Jython ...|$|R
5000|$|Knowledge of a {{scripting}} language {{to write the}} <b>glue</b> <b>logic</b> (running on the server): ...|$|R
50|$|In electronics, <b>glue</b> <b>logic</b> is {{the custom}} logic {{circuitry}} used to interface {{a number of}} off-the-shelf integrated circuits.|$|R
50|$|RPD-1 - {{floppy disk}} controller, {{due to its}} {{complexity}} (discrete <b>glue</b> <b>logic)</b> was built on two boards connected by cable. This came very late.|$|R
40|$|Field-programmable gate arrays are a {{dominant}} implementation medium for digital circuits, especially for <b>glue</b> <b>logic.</b> Unfortunately, {{they do not}} support asynchronous circuits. This is a significant problem because many aspects of <b>glue</b> <b>logic</b> and communication interfaces involve asynchronous elements, or require the interconnection of synchronous components operating under independent clocks. We describe Montage, the first FPGA to explicitly support asynchronous circuit implementation, and its mapping software. Montage {{can be used to}} realize asynchronous interface circuits or to prototype complete asynchronous systems, thus bringing the benefits of rapid prototyping to asynchronous design. Keywords: Asynchronous Circuits, FPGA Architectures, Prototyping 1. Introduction Asynchronous circuits are becoming more prevalent. Most commonly they occur in the interfaces and the <b>glue</b> <b>logic</b> that binds the components of a system. One {{reason for this is that}} asynchronous logic is adaptable to delay [...] ...|$|R
30|$|The Graz University {{system uses}} an FPGA for <b>glue</b> <b>logic</b> integration. However, it also needs {{a fairly large}} FPGA to {{accommodate}} all the image sensor addressing logic, the USB interface logic and to eternally manage its stereovision ROI function. In contrast, our system places a very flexible Multi-ROI function {{and all of the}} associated pixel addressing onto the image sensor, which greatly simplifies the external <b>glue</b> <b>logic</b> required. An FPGA is therefore not essential although the use of a small FPGA or ASIC (Application-Specific Integrated Circuit) would result in reduced size and power consumption.|$|R
40|$|Abstract Embedded {{systems are}} {{becoming}} increasingly common in our everyday lives. As technology progresses, these systems {{become more and more}} complex, and designers handle this increasing complexity by reusing existing components (Intellectual Property blocks). At the same time, the systems must fulfill strict requirements on reliability and correctness. This paper proposes a formal verification methodology which smoothly integrates with component-based system-level design using a divide and conquer approach. The methodology assumes that the system consists of several reusable components, each of them already formally verified by their designers. The components are considered correct given that the environment satisfies certain properties imposed by the component. The methodology verifies the correctness of the <b>glue</b> <b>logic</b> inserted between the components and the interaction of the components through the <b>glue</b> <b>logic.</b> Each such <b>glue</b> <b>logic</b> is verified one at a time using model checking techniques. Experimental results have shown the efficiency of the proposed methodology and demonstrated that it is feasible to apply such a verification methodology on real-life examples...|$|R
40|$|This paper {{proposes a}} formal {{verification}} methodology which is smoothly integrated with component-based system-level design, using a {{divide and conquer}} approach. The methodology assumes that the system consists of several reusable components, each of them already verified by their designers and which are considered correct {{under the assumption that}} the environment satisfies certain properties assumed by the component. What remains to be verified is the <b>glue</b> <b>logic</b> inserted between the components. Each such <b>glue</b> <b>logic</b> is verified one at a time using model checking techniques. A big difficulty with such an approach is the question how to handle the connected components {{and the rest of the}} system in the verification of the <b>glue</b> <b>logic,</b> which only constitutes a small part of the design. In this paper, algorithms for generating a model corresponding to the rest of the system are discussed together with guidelines on how and when to use them. The methodology is illustrated by a small case study on a mobile telephone. 1...|$|R
40|$|Embedded {{systems are}} {{becoming}} increasingly common in our everyday lives. As technology progresses, these systems {{become more and more}} complex. Designers handle this increasing complexity by reusing existing components. At the same time, the systems must fulfill strict functional and non-functional requirements. This thesis presents novel and efficient techniques for the verification of component-based embedded system designs. As a common basis, these techniques have been developed using a Petri net based modelling approach, called PRES+. Two complementary problems are addressed: component verification and integration verification. With component verification the providers verify their components so that they function correctly if given inputs conforming to the assumptions imposed by the components on their environment. Two techniques for component verification are proposed in the thesis. The first technique enables formal verification of SystemC designs by translating them into the PRES+ representation. The second technique involves a simulation based approach into which formal methods are injected to boost verification efficiency. Provided that each individual component is verified and is guaranteed to function correctly, the components are interconnected to form a complete system. What remains to be verified is the interface <b>logic,</b> also called <b>glue</b> <b>logic,</b> and the interaction between components. Each <b>glue</b> <b>logic</b> and interface cannot be verified in isolation. It must be put into the context in which it is supposed to work. An appropriate environment must thus be derived from the components to which the <b>glue</b> <b>logic</b> is connected. This environment must capture the essential properties of the whole system with respect to the properties being verified. In this way, both the <b>glue</b> <b>logic</b> and the interaction of components through the <b>glue</b> <b>logic</b> are verified. The thesis presents algorithms for automatically creating such environments as well as the underlying theoretical framework and a step-by-step roadmap on how to apply these algorithms...|$|R
5000|$|Transistor-transistor logic Small Scale Integration <b>logic</b> <b>chips</b> - {{no longer}} used for CPUs ...|$|R
50|$|The AdLib used Yamaha's YM3812 sound chip which {{produces}} sound via FM synthesis. The AdLib card {{consisted of a}} YM3812 chip with off-the-shelf external <b>glue</b> <b>logic</b> to plug into a standard PC-compatible ISA 8-bit slot.|$|R
5000|$|TTL {{became the}} {{foundation}} of computers and other digital electronics. Even after much larger scale integrated circuits made multiple-circuit-board processors obsolete, TTL devices still found extensive use as the <b>glue</b> <b>logic</b> interfacing more densely integrated components.|$|R
50|$|Many new TTL and CMOS <b>glue</b> <b>logic</b> designs {{continued}} {{appearing on}} the market for several more years. Names like Meziere, Terminator, K&R, ATI, Digital Delay (Ike Hamma), Biondo, Davis, D&D (Danny Duberry) and others figure prominently in the history of drag racing delay boxes. Some of the <b>glue</b> <b>logic</b> type designs had large LED (light emitting diode) readouts to display the timer setting, others featured attractive backlighted LCDs (liquid crystal displays), still others used thumbwheels of varying size and quality. All delay boxes on the market were quartz crystal accurate by the year 1990. Several years elapsed before other delay box designs appeared with embedded microprocessors.|$|R
40|$|This paper {{proposes a}} formal {{verification}} methodology which smoothly integrates with component-based systemlevel design, using a {{divide and conquer}} approach. The methodology assumes that the system consists of several reusable components, each of them already verified by their designers and which are considered correct {{under the assumption that}} the environment satisfies certain properties assumed by the component. What remains to be verified is the <b>glue</b> <b>logic</b> inserted between the components. Each such <b>glue</b> <b>logic</b> is verified one at a time using model checking techniques. Experiments, performed on a real-life example (mobile telephone), demonstrating the efficiency and intuitivity of the methodology, are moreover thoroughly presented. Three different properties have been verified on one part of the system. 1...|$|R
50|$|The system {{interface}} {{was similar to}} that of the Alpha 21364. There were integrated memory controllers that provided ten RDRAM channels. Multiprocessing was facilitated by a router that provided links to other 21464s, and it architecturally supported 512-way multiprocessing without <b>glue</b> <b>logic.</b>|$|R
50|$|The latest {{revision}} {{is entirely}} solid-state, {{consisting of a}} single large FPGA chip as the board's <b>glue</b> <b>logic,</b> an SPROM (Serial Programmable Read-Only Memory) chip, containing the FPGA's operating code, a few SRAM chips for buffering and a solid-state or 'Flash' drive.|$|R
5000|$|Bottom row: 1 MHz clock crystal, 4 × TTL <b>logic</b> <b>chips</b> {{providing}} address decoding for {{the memory}} and I/O expansion, 5V regulator.|$|R
50|$|Gary, {{short for}} Gate Array, {{has been used}} in the Amiga 500, 2000(B) and CDTV. Gary {{provides}} <b>glue</b> <b>logic</b> for bus control and houses supporting functions for the floppy disk drive. It integrates many functions built discretely in the earlier Amiga 1000 in order to reduce costs.|$|R
50|$|There {{are also}} {{exhibits}} on very-large-scale integrated (VLSI) <b>logic</b> <b>chips,</b> historical arithmetic books {{dating back to}} Johannes Gutenberg's times, {{and the relationship between}} art and science.|$|R
5000|$|Memory testers are {{designed}} to detect two types of faults that affect the functional behavior of a system ( [...] memory <b>chip,</b> <b>logic</b> <b>chips</b> or PCB board). They are ...|$|R
5000|$|Increasingly {{inexpensive}} <b>logic</b> <b>chips</b> {{such as the}} 7400 series allowed cheap dedicated circuitry {{for improved}} user interfaces such as keyboard input, instead of simply a row of switches to toggle bits one at a time.|$|R
5000|$|Low-power Schottky TTL (LS) - {{used the}} higher {{resistance}} values of low-power TTL and the Schottky diodes {{to provide a}} good combination of speed (9.5ns) and reduced power consumption (2 mW), and PDP of about 20 pJ. Probably {{the most common type}} of TTL, these were used as <b>glue</b> <b>logic</b> in microcomputers, essentially replacing the former H, L, and S sub-families.|$|R
5000|$|Disc Filing System (DFS) This was an {{optional}} component for the Acorn BBC Micro, {{offered as a}} kit with a disk controller chip, a ROM chip, {{and a handful of}} <b>logic</b> <b>chips,</b> to be installed inside the computer ...|$|R
40|$|A <b>logic</b> <b>chip</b> delay-test method {{based on}} system timing In this paper {{we present a}} novel {{approach}} to delay-testing of VLSl <b>logic</b> <b>chips</b> based on the level-sensitive scan design (LSSD) methodology. The objective of the delay test is to reduce significantly the failures of multi-chip modules at system integration test while minimizing the complexity and cost of subassembly testing. Because system timing data are used to derive test specifications, the delay defects that {{are most likely to}} cause a system path failure are detected a high percentage of the time. With the implementation of the delay test in the wafer production line, the system final-test failure rate of multi-chip modules used in IBM mainframe machines has dropped significantly...|$|R
40|$|Control Loop Feedback Mechanism for Generic Array <b>Logic</b> <b>Chip</b> Multiprocessor is presented. The {{approach}} {{is based on}} control-loop feedback mechanism to maximize the efficiency on exploiting available resources such as CPU time, operating frequency, etc. Each Processing Element (PE) in the architecture {{is equipped with a}} frequency scaling module responsible for tuning the frequency of processors at run-time according to the application requirements. We show that generic array <b>logic</b> <b>Chip</b> Multiprocessors with large inter-processor First In First Outputs (First In First Outs) buffers can inherently hide much of the Generic Array Logic performance penalty while executing applications that have been mapped with few communication loops. In fact, the penalty can be driven to zero with sufficiently large First In First Outs and the removal of multiple-loop communication links. We present an example mesh-connected Generic Array <b>Logic</b> <b>chip</b> multiprocessor and show it has a less than 1 % performance (throughput) reduction on average compared to the corresponding synchronous system for many DSP workloads. Furthermore, adaptive clock and voltage scaling for each processor provides an approximately 40 % power savings without any performance reduction. Comment: 4 pages and 8 figure...|$|R
40|$|A non-isolation {{method is}} {{proposed}} which enhances each hard, firm, or soft core {{with a very}} small amount of logic and low number of pins {{in order to facilitate}} its testability. The methodology is based on a provably good algorithm and allows the system{on{chip (SOC) designer to provide a small amount of extra routes and <b>glue</b> <b>logic</b> to enhance the testability of the SOC...|$|R
50|$|The {{approach}} {{taken in}} the Disk II controller is typical of Wozniak's designs. With a few small-scale <b>logic</b> <b>chips</b> and a cheap PROM (programmable read-only memory), he created a functional floppy-disk interface {{at a fraction of}} the component cost of standard circuit configurations.|$|R
40|$|Small, {{low-cost}} comparator with 24 -bit-precision yields ratio {{signal from}} pair of analog or digital input signals. Arithmetic <b>logic</b> <b>chips</b> (bit-slice) sample two 24 -bit analog-to-digital converters approximately once every millisecond and accumulate them in two 24 -bit registers. Approach readily modified to arbitrary precision...|$|R
40|$|This paper {{introduces}} Petri Nets (Peterson 1981) {{into the}} vexed question of lexical semantic representation. We argue that Petri Nets can offer {{new insights into}} the organization of lexical meaning. Petri Nets can furthermore be translated directly into linear logic, thus ensuring compatibility with the <b>glue</b> <b>logic</b> semantic construction already defined within LFG (Dalrymple 1999). The potential usefulness of Petri Nets is demonstrated with respect to light verbs in Urdu. ...|$|R
40|$|Tea is a {{high level}} {{scripting}} language for the Java environment. It has builtin support for all major programming paradigms, namely procedural, object oriented and functional. Its major strengths reside in its consistency, simplicity, easy extensibility and easy integration into any Java environment. These advantages are {{in addition to the}} intrinsic advantages of being a scripting language, these being rapid development turnaround, fast prototyping, <b>glueing</b> <b>logic</b> for components. ...|$|R
50|$|Inside the {{coprocessor}} unit {{a proprietary}} chip (the Tube ULA, manufactured initially by Ferranti) interfaced and logically isolated the host and coprocessor buses. This allowed the Tube {{to work with}} a completely different bus architecture in the coprocessor unit. The only other active components needed were a microprocessor, some RAM, a small ROM containing processor specific client code, <b>glue</b> <b>logic</b> such as an address decoder and a power supply.|$|R
50|$|Today, surface-mounted CMOS {{versions}} of the 7400 series are used in various applications in electronics and for <b>glue</b> <b>logic</b> in computers and industrial electronics. The original through-hole devices in dual in-line packages (DIP/DIL) were the mainstay of the industry for many decades. They are useful for rapid breadboard-prototyping and for education and remain available from most manufacturers. The fastest types and very low voltage versions are typically surface-mount only, however.|$|R
40|$|Embedded {{systems are}} {{becoming}} increasingly common in our everyday lives. As techonology progresses, these systems {{become more and more}} complex. Designers handle this increasing complexity by reusing existing components (Intellectual Property blocks). At the same time, the systems must still fulfill strict requirements on reliability and correctness. This thesis proposes a formal verification methodology which smoothly integrates with component-based system-level design using a divide and conquer approach. The methodology assumes that the system consists of several reusable components. Each of these components are already formally verified by their designers and are considered correct given that the environment satisfies certain properties imposed by the component. What remains to be verified is the <b>glue</b> <b>logic</b> inserted between the components. Each such <b>glue</b> <b>logic</b> is verified one at a time using model checking techniques. The verification methodology as well as the underlying theoretical framework and algorithms are presented in the thesis. Experimental results have shown the efficiency of the proposed methodology and demonstrated that it is feasible to apply it on real-life examples. Report code: LiU-Tek-Lic- 2003 : 57...|$|R
