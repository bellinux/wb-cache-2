307|207|Public
25|$|Floyd {{is also a}} {{co-author}} on {{the standard}} for TCP Selective acknowledgement (SACK), <b>Explicit</b> <b>Congestion</b> <b>Notification</b> (ECN), the Datagram Congestion Control Protocol (DCCP) and TCP Friendly Rate Control (TFRC).|$|E
25|$|Support for {{wireless}} networks {{is built}} into the network stack itself, and does not emulate wired connections, {{as was the case with}} previous versions of Windows. This allows implementation of wireless-specific features such as larger frame sizes and optimized error recovery procedures. Windows Vista uses various techniques like Receive Window Auto-scaling, <b>Explicit</b> <b>Congestion</b> <b>Notification,</b> TCP Chimney offload and Compound TCP to improve networking performance. Quality of Service (QoS) policies can be used to prioritize network traffic, with traffic shaping available to all applications, even those that do not explicitly use QoS APIs. Windows Vista includes in-built support for peer-to-peer networks and SMB 2.0. For improved network security, Windows Vista supports for 256-bit and 384-bit Diffie-Hellman (DH) algorithms, as well as for 128-bit, 192-bit and 256-bit Advanced Encryption Standard (AES) is included in the network stack itself, while integrating IPsec with Windows Firewall.|$|E
5000|$|Parameter type = 32768 : This {{parameter}} {{is reserved}} for <b>explicit</b> <b>congestion</b> <b>notification</b> support.|$|E
40|$|We are {{motivated}} {{by the fact that}} fixed Increase rates and Decrease ratios for AIMD cannot adjust TCP’s performance to the Internet’s diverse networking conditions. Indeed, we find that fixed values for the increase/decrease factors of AIMD restrain flexibility, which is a fundamental property of transport protocols in order to guarantee utilization and fairness in Modern and Future internetworks. We propose a new paradigm for hybrid AIMD designs that has the potential to adjust TCP’s behavior according to network conditions. The proposed Multi-Rate AIMD (MR-AIMD) increases additively the Additive Increase factor of AIMD in case of positive feedback and decreases multiplicatively (the AI factor) in case of negative feedback and <b>Explicit</b> <b>Congestion</b> <b>Notifications.</b> In other words, MR-AIMD takes into account ECN signals in order to quantify the level of network contention and adjusts its response accordingly. We show that MR-AIMD reduces retransmission effort significantly, when contention is high, becomes aggressive when contention decreases and tolerates against random, transient errors due to fading channels...|$|R
40|$|Abstract. We are {{motivated}} {{by the fact that}} fixed Increase rates and Decrease ratios for AIMD cannot adjust TCP’s performance to the Internet’s diverse networking conditions. Indeed, we find that fixed values for the increase/decrease factors of AIMD restrain flexibility, which is a fundamental property of transport protocols in order to guarantee utilization and fairness in Modern and Future internetworks. We propose a new paradigm for hybrid AIMD designs that has the potential to adjust TCP’s behavior according to network conditions. We explore whether and to which extend ECN signals can be useful for the adjustment of AIMD rates. The proposed Multi-Rate AIMD (MR-AIMD) increases additively the Additive Increase factor of AIMD in case of positive feedback and decreases multiplicatively (the AI factor) in case of negative feedback and <b>Explicit</b> <b>Congestion</b> <b>Notifications.</b> In other words, MR-AIMD takes into account ECN signals in order to quantify the level of network contention and adjusts its response accordingly. We show that MR-AIMD reduces retransmission effort significantly, when contention is high, becomes aggressive when contention decreases and tolerates against random, transient errors due to fading channels. ...|$|R
40|$|It {{has been}} found {{recently}} that feedback in an ATM network is useful {{in the long run}} to alleviate congestion. This general conclusion, although theoretically important, does not address the practical concern aa to how the network behaves when it is adjusting itself in short to medium range. The work reported in this paper is motivated by this practical concern. A new feedback based dynamic traffic control mechanism (called balanced mechanism) is proposed and compared with the pure PCC and an existing feedback based mechanism, known aa <b>Explicit</b> Forward <b>Congestion</b> <b>Notification</b> (EFCN). It is shown that the balanced mechanism outperforms both PCC and the EFCN...|$|R
5000|$|Lack of {{widespread}} support for <b>explicit</b> <b>congestion</b> <b>notification</b> and Quality of Service management on the Internet ...|$|E
5000|$|<b>Explicit</b> <b>Congestion</b> <b>Notification</b> an {{extension}} to IP and TCP communications protocols that adds a flow control mechanism ...|$|E
5000|$|... 8) Since RFC 3168, the {{remaining}} two bits (the two least significant bits) are used for <b>Explicit</b> <b>Congestion</b> <b>Notification</b> ...|$|E
40|$|With {{the advent}} of big data, data center {{applications}} are processing vast amounts of unstructured and semi-structured data, in parallel on large clusters, across hundreds to thousands of nodes. The highest performance for these batch big data workloads is achieved using expensive network equipment with large buffers, which accommodate bursts in network traffic and allocate bandwidth fairly even when the network is congested. Throughput-sensitive big data applications are, however, often executed in the same data center as latency-sensitive workloads. For both workloads to be supported well, the network must provide both maximum throughput and low latency. Progress {{has been made in}} this direction, as modern network switches support Active Queue Management (AQM) and <b>Explicit</b> <b>Congestion</b> <b>Notifications</b> (ECN), both mechanisms to control the level of queue occupancy, reducing the total network latency. This paper is the first study of the effect of Active Queue Management on both throughput and latency, in the context of Hadoop and the MapReduce programming model. We give a quantitative comparison of four different approaches for controlling buffer occupancy and latency: RED and CoDel, both standalone and also combined with ECN and DCTCP network protocol, and identify the AQM configurations that maintain Hadoop execution time gains from larger buffers within 5...|$|R
40|$|Streaming {{media is}} {{becoming}} increasingly important to many applications. Timely delivery of streaming media at the required rates {{is crucial to the}} correct functioning of applications relying on continuous input of streaming media. Compared to regular data transfer, streaming media is more sensitive to transmission delays and packet losses. Variations in transmission delays and packet losses are typically caused by network congestion which is, in turn, caused by high fluctuation in sending rates of data flows. Fluctuations in sending rate of individual data flow collectively lead to unstable network conditions, ineffective use of network bandwidth, and poor transfer quality (large delay, high data loss rate). In order to mitigate and eliminate network congestion, sending rates of data flows should be maintained as stable as possible. Fluctuation of sending rate is largely caused by transport-layer protocols. Congestion control schemes are necessary to make streaming media traffic adapt to the available network bandwidth by adjusting the sending rates of data streams. In time-critical data streaming applications, timely delivery of data is more important than reliable delivery of data. In this paper, we explore a weighted-fairness rate control method which does not rely on resource reservation or <b>explicit</b> <b>congestion</b> <b>notifications</b> in the network. This rate control method i...|$|R
40|$|Interconnection {{networks}} {{are a key}} component of a variety of systems. In real time, low-latency and contention-free interconnection {{networks are}} demanded for the execution of many applications in systems. In modern interconnection networks it is mandatory the use of an effective congestion management technique in order to keep network performance at maximum level under any situations. Although congestion may be avoided by scaling the network size, but the current trends are to reduce overall equipment cost and power consumption of a network,by plummeting the number of network components. Thus, the network will be prone to congestion, thereby becoming congestion free is mandatory for an efficient & effective network. Therefore, in this dissertation we describe the new congestion management technique (RECN-IQDD) suitable for any type of IQ (Input queue switch architecture: only queues at input port of a switch) switches with enhanced RECN(Regional <b>Explicit</b> <b>Congestion</b> Notification: an efficient Head-of-Line block elimination technique,with a cost effective Switching architecture to face the challenges of congestion management, has been recently proposed for Advanced Switching (AS). The idea behind RECN-IQDD is, starting with a simple input queued switch with a single queue per input port, to add some extra queues dynamically allocated for storing congested packets,to avoid HOL blocking and Distributed deallocates of set aside when congestion vanishes. so, HOL blocking is completely eliminated with less number of queues. Regarding the performance it leads to a significant reduction of the data memory area required at each port in the reduction factor of 5 times than RECN-CIOQ (Combined Input Output Queue- have queues at both Input port & Output port of a switch) and avoids the use of <b>explicit</b> <b>congestion</b> <b>notifications</b> and token-exchanging packets...|$|R
5000|$|Under Windows Vista, SecuROM {{will prevent}} a game from running if <b>explicit</b> <b>congestion</b> <b>notification</b> is enabled in Vista's {{networking}} configuration.|$|E
50|$|FECN means forward <b>explicit</b> <b>congestion</b> <b>notification.</b> The FECN bit {{can be set}} to 1 to {{indicate}} that congestion was experienced {{in the direction of}} the frame transmission, so it informs the destination that congestion has occurred.BECN means backwards <b>explicit</b> <b>congestion</b> <b>notification.</b> The BECN bit can be set to 1 {{to indicate}} that congestion was experienced in the network in the direction opposite of the frame transmission, so it informs the sender that congestion has occurred.|$|E
5000|$|... a 3-bit Traffic Class {{field for}} QoS (quality of service) {{priority}} and ECN (<b>Explicit</b> <b>Congestion</b> <b>Notification).</b> Prior to 2009 this field was called EXP.|$|E
30|$|In [25], {{the authors}} {{proposed}} FuzzyQoS, a stateless cross-layer AC protocol based on fuzzy logic theory for wireless ad hoc networks. The fuzzy approach aims {{to improve the}} control of traffic regulation rate and congestion control of multimedia applications. FuzzyQoS uses fuzzy thresholds to adapt the traffic transmission rate to the dynamic conditions. By monitoring {{the rate of change}} in queue length (variation rate) in addition to the queue length, FuzzyQoS provides a measure of queue state. Furthermore, by using <b>explicit</b> rate <b>congestion</b> <b>notification,</b> FuzzyQoS can make source nodes more responsive to sudden changes in the network traffic volume. The performance evaluation has shown that FuzzyQoS can achieve stable end-to-end delay under different network conditions. However, FuzzyQoS does not deal well with route failures. While searching for a new route, it reduces the data rate of affected sessions. This implies that FuzzyQoS can only support real-time applications with elastic throughput requirements.|$|R
40|$|The {{congestion}} control mechanism in TCP {{was first introduced}} by Jacobson in [7], which was later developed into TCP Tahoe. Since then, various end-to-end {{congestion control}} protocols have been proposed, including Reno [2], NewReno [6], SACK [4], and Vegas [3]. Among these protocols, TCP Reno is the standard congestion control algorithm for TCP traffic, according to [2]. However, TCP Reno detects congestion only when a packet loss occurs, i. e., when the sender receives duplicate acknowledgements (ACKs) or experiences a timeout. Hence, there are no <b>explicit</b> <b>congestion</b> <b>notifications</b> to end systems. Sync-TCP [13] is a newly proposed end-to-end congestion control protocol. It is based on TCP Reno, but it can detect congestion before a packet loss occurs. This is done {{with the help of}} one-way transit times (OTTs). These OTTs provide richer congestion signals which in turn can be used to change the congestion window more effectively. In recent years, the Internet has seen great growth in data transmission speed. However in high-speed networks, TCP congestion control is limiting the throughput [10]. There are several protocols proposed to deal with this problem, such as FAST TCP [8], High-Speed TCP [5], Scalable TCP [9], and BIC-TCP [12]. FAST TCP uses RTTs to detect congestion; however, all of the other high-speed protocols implement loss-based congestion detection. In this paper, we present a modification to Sync-TCP which provides better throughput and performance than TCP Reno in high-speed environments. We carry out simulations in ns- 2 [1] and compare our results with Reno and original Sync-TCP. 2. BACKGROUND AND RELATED WORK Sync-TCP [11, 13] is an end-to-end congestion control mechanism that makes use of one-way transit times (OTTs) in detecting network congestion. It is based on the idea of implementing the time-stamp option of TCP on the end systems. The forward path queuing delays can be determined by subtracting the minimum observed OTT from the current OTT. OTTs can determine the forward path queuing delays better than RTTs, because with RTT...|$|R
30|$|After {{detecting}} the congestion, neighbor sensor nodes should be informed about it. Two common methods {{are used for}} this issue. Congestion can be informed explicitly or implicitly. Protocols which perform notification process explicitly {{send a message to}} the relevant sensor nodes. Other protocols perform this step implicitly by inserting a <b>congestion</b> <b>notification</b> flag into the header of outgoing packets as a piggyback. Explicit notification brings an extra communication overhead to the network. Implicit notification requires fewer packet transmissions, but takes longer to effect. CODA and Fusion use explicit notification to inform neighbor nodes, whereas Siphon [21] and senTCP inform neighbor nodes implicitly. In [18], congestion is also notified implicitly, but the message includes the new rate of each child node instead of the congestion level. In I 2 MR, if an intermediate node detects congestion, it removes all pending packets from its own data transmit buffer and then sends a <b>congestion</b> <b>notification</b> packet, which is relayed reliably by all the upstream nodes along the path, to inform the source explicitly. In [20], congestion is notified explicitly. When the congestion has occurred, a <b>congestion</b> <b>notification</b> message, which contains the node id and path id, is sent back to the sources for each path id known by the node. On the other hand, SUIT does not use either <b>explicit</b> or implicit <b>congestion</b> <b>notification</b> because both methods are too slow to react for preventing congestion in event-based target monitoring applications where targets leave the FoV of sensors within a short interval.|$|R
5000|$|Floyd {{is also a}} {{co-author}} on {{the standard}} for TCP Selective acknowledgement (SACK), <b>Explicit</b> <b>Congestion</b> <b>Notification</b> (ECN), the Datagram Congestion Control Protocol (DCCP) and TCP Friendly Rate Control (TFRC).|$|E
50|$|RFC 2474 (which was {{released}} in the year 1998) reserved the first six bits of DS field (or IPv4 ToS) for the DiffServ Code Points (DSCP), and RFC 3168 reserved the last two bits for <b>Explicit</b> <b>Congestion</b> <b>Notification.</b>|$|E
5000|$|... 2) The TOS {{field has}} then been redefined as the Differentiated Services Code Point (DSCP-> RFC 2474) which {{consists}} of the first 6 bits and 2 bits used for a TCP mechanism called <b>Explicit</b> <b>Congestion</b> <b>Notification</b> (ECN) defined in RFC 3168.|$|E
40|$|This paper {{addresses}} {{the problem of}} fair allocation of bandwidth resources on lossy channels in hybrid heterogeneous networks. It discusses more particularly the ability of window-based congestion control to support non-congestion related losses. We investigate methods for efficient packet loss recovery by retransmission, and build on <b>explicit</b> <b>congestion</b> control mechanisms to decouple the packet loss detection from the congestion feedback signals. For different retransmission strategies that respectively rely on conventional cumulative acknowledgments or accurate loss monitoring, we show how the principles underlying the TCP retransmission mechanisms have to be adapted {{in order to take}} advantage of an <b>explicit</b> <b>congestion</b> feedback. A novel retransmission timer is proposed {{in order to deal with}} multiple losses of data segments and, in consequence, to allow for aggressive reset of the connection recovery timer. It ensures significant benefit from temporary inflation of the send-out window, and hence the fair share of bottleneck bandwidth between loss-prone and lossy connections. Extensive simulations analyze the performance of the new loss monitoring and recovery strategies, when used with two distinct <b>explicit</b> <b>congestion</b> control mechanisms. The first one relies on a coarse binary <b>congestion</b> <b>notification</b> from the routers. The second one, introduced in [D. Katabi, M. Handley, C. Rohrs, Internet congestion control for high bandwidth-delay product environments, ACM SIGCOMM (2002) 89 - 102], exploits accurate and finely-tuned router feed-backs to compute a precise congestion window adjustment. For both congestion control mechanisms, we observe that retransmissions triggered based on a precise monitoring of losses lead to efficient utilization of lossy links, and provide a fair share of the bottleneck bandwidth between heterogeneous connections, even for high loss ratios and bursty loss processes. <b>Explicit</b> window-based <b>congestion</b> control, combined with appropriate error control strategies, can therefore provide a valid solution to reliable and controlled connections over lossy network infrastructures. (c) 2008 Elsevier B. V. All rights reserved...|$|R
50|$|Backward ECN (BECN) {{is another}} {{proposed}} congestion mechanism. It uses ICMP source quench messages as an IP signalling mechanism {{to implement a}} basic ECN mechanism for IP networks, keeping <b>congestion</b> <b>notifications</b> at the IP level and requiring no negotiation between network endpoints. Effective <b>congestion</b> <b>notifications</b> can be propagated to transport layer protocols, such as TCP and UDP, for the appropriate adjustments.|$|R
40|$|The {{efficiency}} of queue management mechanisms {{depends on how}} well their control decisions helps in satisfying their objectives regarding congestion avoidance and control. These decisions are implemented and compelled during {{the design of the}} packet mark probability and the mark activation functions. If a packet is dropped / marked rather than being allowed to the buffer, a <b>congestion</b> <b>notification</b> is delivered and the congestion avoidance and control carries on to be applied at the router. If the queue management mechanism realizes the need to apply more aggressive congestion control, the recently arrived packet should be dropped to provide early <b>congestion</b> <b>notification.</b> In this paper, we design a new packet drop probability function with a built-in drop activation function for Fast <b>Congestion</b> <b>Notification</b> (FN) mechanism. This design enables the two control decisions, packet admissions and congestion control directing, to be made along with each other. This permits sending <b>congestion</b> avoidance <b>notification</b> as early as required even if the queue is almost empty, and preventing <b>congestion</b> <b>notification</b> even if the queue is almost full but the arrival rate is controllable, thus the buffer is fully utilized and the congestion is detected properly. Keywords...|$|R
50|$|Dr. Jain is the {{co-inventor}} of the DEC-bit {{scheme for}} congestion avoidance in computer networks {{which has been}} adapted for implementation in Frame Relay networks as forward <b>explicit</b> <b>congestion</b> <b>notification</b> (FECN), ATM Networks as Explicit Forward Congestion Indication (EFCI), and TCP/IP networks as Explicit Congestion Notification(ECN).|$|E
50|$|A DCCP {{connection}} contains acknowledgment traffic {{as well as}} data traffic. Acknowledgments inform a sender {{whether its}} packets have arrived, and whether they were marked by <b>Explicit</b> <b>Congestion</b> <b>Notification</b> (ECN). Acknowledgements are transmitted as reliably as the congestion control mechanism in use requires, possibly completely reliably.|$|E
50|$|The Per-Hop Behavior is {{determined}} by the DS field of the IP header. The DS field contains a 6-bit Differentiated Services Code Point (DSCP) value. <b>Explicit</b> <b>Congestion</b> <b>Notification</b> (ECN) occupies the least-significant 2 bits of the IPv4 Type of Service field (TOS) and IPv6 Traffic Class field (TC).|$|E
3000|$|... {{incrementally}} thus {{increasing the}} rate at which it signals <b>congestion</b> <b>notification.</b> Conversely, if the queue becomes empty or if the link is idle, BLUE reduces its marking probability, [...]...|$|R
40|$|This paper {{describes}} {{a method of}} extending TCP so that TCP connections can effectively carry hierarchically-encoded layered video streams, while being friendly to other competing connections. We call the method Receiver-based Delay Control (RDC). Under RDC, a TCP connection can slow down its transmission rate to avoid congestion by delaying ACK packet generation at the TCP receiver based on <b>congestion</b> <b>notifications</b> from routers. We present the principle behind RDC, {{argue that it is}} TCP-friendly, describe an implementation that uses 1 -bit <b>congestion</b> <b>notification</b> from routers, and demonstrate by simulations its effectiveness in streaming hierarchically-encoded layered video. key words: video streaming, layered video, TCP, retransmission timeout, delay control 1...|$|R
40|$|The {{effectiveness}} of queue management mechanisms relies on how good their control decisions will help in satisfying their goals regarding congestion avoidance and control. These decisions are implemented and compelled during {{the design of}} the packet mark probability and the mark activation functions. The design of Fast <b>Congestion</b> <b>Notification</b> (FN) drop/mark probability function enables the two control decisions, packet admissions and congestion control directing, to be made along with each other. This permits sending <b>congestion</b> avoidance <b>notification</b> as early as required even if the queue is almost empty, and preventing <b>congestion</b> <b>notification</b> even if the queue is almost full but the arrival rate is controllable. This leads to good buffer utilization and proper congestion detection. This paper demonstrates the drop/mark probability functions that the fast FN policy would exercise for different values of optimal queue size, and also for a specific optimal queue size value...|$|R
50|$|In {{computer}} networking, the Datagram Congestion Control Protocol (DCCP) is a message-oriented {{transport layer}} protocol. DCCP implements reliable connection setup, teardown, <b>Explicit</b> <b>Congestion</b> <b>Notification</b> (ECN), congestion control, and feature negotiation. The IETF published DCCP as RFC 4340, a proposed standard, in March 2006. RFC 4336 provides an introduction.|$|E
50|$|AIMD {{requires}} a binary signal of congestion. Most frequently, packet loss {{serves as the}} signal; the multiplicative decrease is triggered when a timeout or acknowledgement message indicates a packet was lost. It is also possible for in-network mechanisms to mark congestion (without discarding packets) as in <b>Explicit</b> <b>Congestion</b> <b>Notification</b> (ECN).|$|E
50|$|<b>Explicit</b> <b>Congestion</b> <b>Notification</b> (ECN) is an {{extension}} to the Internet Protocol and to the Transmission Control Protocol and is defined in RFC 3168 (2001). ECN allows end-to-end notification of network congestion without dropping packets. ECN is an optional feature {{that may be used}} between two ECN-enabled endpoints when the underlying network infrastructure also supports it.|$|E
40|$|Abstract — IEEE 802. 1 {{standards}} committee {{is working on}} a new specification for <b>congestion</b> <b>notification</b> in Ethernet networks. The goal of this work is to enable application of Ethernet in backend datacenter applications. Such applications typically use Fiber Channel and Infiniband due to their loss-free characteristics. A backward <b>congestion</b> <b>notification</b> (BCN) scheme has been proposed to avoid long delays and minimize loss in Ethernet networks. This paper presents an analysis of this scheme. We develop an analytical model to analyze the stability and the rate of convergence of the scheme. It is shown that BCN achieves proportional fairness and not max-min fairness. Simulation results are presented that validate the analytical results. I...|$|R
30|$|Router-assisted {{rate control}} {{mechanisms}} are targeted at adaptive transport protocols that can react to <b>congestion</b> <b>notification.</b> TCP is the canonical {{example of such}} an adaptive protocol and constitutes the bulk of Internet traffic [38]. However, UDP-based communications are increasingly being used for real-time delivery of audio and video data. We now evaluate the performance of gateway-assisted centralized rate control for such non-adaptive flows.|$|R
40|$|In Wireless Sensor Networks (WSN’s), {{congestion}} {{plays an}} important role in degrading the performance of the network. Under idle condition, the network load is very low whereas when an event is detected the network load becomes high which leads to congestion. Due to congestion the overall performance of the network degrades. Hence it is necessary to detect and control congestion. In this paper an efficient technique to detect and control congestion has been proposed. The congestion is detected by calculating a metric called Congestion Degree (Cd). It is the ratio between packet inter arrival time and packet inter service time. Once the congestion is detected, it is notified using Implicit <b>Congestion</b> <b>Notification</b> (ICN) signaling. On receiving the <b>congestion</b> <b>notification</b> signal, the transmission rate is controlled in order to reduce congestion. Further congestion control is implemented using Fuzzy Logic Controller. The performance of the network is measured for delivery ratio with different transmission rate and the PDR is compared with CODA...|$|R
