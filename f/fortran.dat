10000|4|Public
5|$|October: Intel announces new {{releases}} of Intel C++ Compiler and Intel <b>Fortran</b> Compiler for x86/x64, while Itanium support is only available in older versions.|$|E
5|$|Although both Futurama and The Simpsons {{were created}} by Matt Groening, overt {{references}} to the latter are mostly avoided in Futurama. One of the few exceptions to this rule is the appearance of Blinky, a three-eyed orange fish seen on The Simpsons, as Fry is going through the tube. A running gag of the series is Bender's fondness for Olde <b>Fortran</b> malt liquor, named after Olde English 800 malt liquor and the programming language <b>Fortran.</b> The drink was first introduced in this episode and became so {{closely associated with the}} character that he was featured with a bottle in both the Rocket USA wind-up toy and the action figure released by Moore Action Collectibles.|$|E
5|$|Much of the {{software}} available under the Cray-3 was derived from Cray Research and included for instance the X Window System, vectorizing <b>FORTRAN</b> and C compilers, NFS and a TCP/IP stack.|$|E
5|$|There {{was also}} {{significant}} condescension towards COBOL {{in the business}} community from users of other languages, for example <b>FORTRAN</b> or assembler, implying that COBOL could be used only for non-challenging problems.|$|E
5|$|During the 1950s, he {{programmed}} one of {{the earliest}} computers, the IBM 650, and with Ruth A. Weiss developed the L2 programming language, {{one of the}} earliest computer languages, in 1956. It was widely used within the Bell Labs, and also by external users, who knew it as Bell 2. It was superseded by <b>Fortran</b> when the Bell Labs' IBM 650 were replaced by the IBM 704 in 1957.|$|E
5|$|SAS version 4 {{had limited}} features, but made SAS more accessible. Version 5 {{introduced}} a complete macro language, array subscripts, and a full-screen interactive user interface called Display Manager. In 1985, SAS was rewritten in the C programming language. This {{allowed for the}} SAS' Multivendor Architecture that allows the software to run on UNIX, MS-DOS, and Windows. It was previously written in PL/I, <b>Fortran,</b> and assembly language.|$|E
5|$|The {{design of}} Perl can be {{understood}} as a response to three broad trends in the computer industry: falling hardware costs, rising labor costs, and improvements in compiler technology. Many earlier computer languages, such as <b>Fortran</b> and C, aimed to make efficient use of expensive computer hardware. In contrast, Perl was designed so that computer programmers could write programs more quickly and easily.|$|E
5|$|CAPS {{entreprise}} and Pathscale {{are also}} coordinating {{their effort to}} make hybrid multi-core parallel programming (HMPP) directives an open standard called OpenHMPP. The OpenHMPP directive-based programming model offers a syntax to efficiently offload computations on hardware accelerators and to optimize data movement to/from the hardware memory. OpenHMPP directives describe remote procedure call (RPC) on an accelerator device (e.g. GPU) or more generally a set of cores. The directives annotate C or <b>Fortran</b> codes to describe two sets of functionalities: the offloading of procedures (denoted codelets) onto a remote device and the optimization of data transfers between the CPU main memory and the accelerator memory.|$|E
5|$|He {{began in}} 1962 by writing a <b>Fortran</b> {{compiler}} for the PDP-4, before {{contributing to the}} development of the PDP-5 instruction set. Under Harlan Anderson (vice president of engineering), principal architect Gordon Bell led a team, including Kotok as an assistant logic designer, which developed the first commercial time-sharing computer, the PDP-6, designed and delivered in 1963–1964. Aiming at a scientific market, Digital machines had a 36-bit word length to accommodate artificial intelligence work in Lisp and to compete with IBM mainframe computers. In 1965, in what may have been the first around-the-world networking connection, a PDP-6 at the University of Western Australia in Perth was operated from Boston in the United States via a telex link.|$|E
5|$|On May 28 and 29 of 1959 (exactly {{one year}} after the Zürich ALGOL 58 meeting), a meeting was held at the Pentagon to discuss the {{creation}} of a common programming language for business. It was attended by 41 people and was chaired by Phillips. The Department of Defense was concerned about whether it could run the same data processing programs on different computers. <b>FORTRAN,</b> the only mainstream language at the time, lacked the features needed to write such programs.|$|E
25|$|The <b>Fortran</b> {{front end}} was g77 before version 4.0, which only {{supports}} <b>FORTRAN</b> 77. In newer versions, g77 is dropped {{in favor of}} the new GNU <b>Fortran</b> front end (retaining most of g77's language extensions) that supports <b>Fortran</b> 95 and large parts of <b>Fortran</b> 2003 and <b>Fortran</b> 2008 as well. A front-end for CHILL was dropped {{due to a lack of}} maintenance.|$|E
25|$|<b>Fortran</b> is a general-purpose, procedural, and {{imperative}} {{programming language}} that is especially suited to numeric computation and scientific computing. <b>Fortran</b> came to dominate this area of programming early on {{and has been in}} continual use for over half a century in computationally intensive areas such as numerical weather prediction, finite element analysis, computational fluid dynamics (CFD), computational physics, and computational chemistry. It {{is one of the most}} popular languages in the area of High-performance computing and programs to benchmark and rank the world's fastest supercomputers are written in <b>Fortran.</b> In 1956, John Backus and a team of researchers at IBM invented the <b>Fortran</b> programming language for the IBM 704 mainframe computer.|$|E
25|$|<b>Fortran</b> {{sequential}} unformatted files {{created with}} one endianness usually cannot be read {{on a system}} using the other endianness because <b>Fortran</b> usually implements a record (defined as the data written by a single <b>Fortran</b> statement) as data preceded and succeeded by count fields, which are integers equal {{to the number of}} bytes in the data. An attempt to read such file on a system of the other endianness then results in a run-time error, because the count fields are incorrect. This problem can be avoided by writing out sequential binary files as opposed to sequential unformatted.|$|E
25|$|In <b>Fortran</b> 90, the GO TO may {{be avoided}} by using an EXIT statement.|$|E
25|$|Many {{imperative}} programming languages (such as <b>Fortran,</b> BASIC, and C) are abstractions {{of assembly}} language.|$|E
25|$|In many {{versions}} of <b>FORTRAN</b> 66, $ {{could be used}} as an alternative to a quotation mark for delimiting strings.|$|E
25|$|Some languages, such as <b>Fortran,</b> have a {{three-way}} or arithmetic if, testing whether a numeric value is positive, negative or zero.|$|E
25|$|Takuya Ooura: General Purpose FFT Package, http://www.kurims.kyoto-u.ac.jp/~ooura/fft.html. Free C & <b>FORTRAN</b> {{libraries}} for computing fast DSTs in one, two {{or three}} dimensions, power of 2 sizes.|$|E
25|$|The {{original}} Interactive fiction Colossal Cave Adventure was programmed in <b>Fortran,</b> {{originally developed}} by IBM. Adventure's parsers could only handle two-word sentences {{in the form}} of verb-noun pairs.|$|E
25|$|Takuya Ooura: General Purpose FFT Package, http://www.kurims.kyoto-u.ac.jp/~ooura/fft.html. Free C & <b>FORTRAN</b> {{libraries}} for computing fast DCTs (types II-III) in one, two {{or three}} dimensions, power of 2 sizes.|$|E
25|$|In 1979, William Yerazunis wrote {{a partial}} version of APL in Prime Computer <b>FORTRAN,</b> {{extended}} it with graphics primitives, and released it. This {{was also the}} subject of his Masters thesis.|$|E
25|$|His first {{experience}} with actual computers was at the IBM New York Scientific Center {{when he was in}} high school. He was hired for the summer in 1970, following his senior year of high school, to write a numerical analysis program in <b>Fortran.</b> He completed the task after a couple of weeks ("I swore that I would never use <b>FORTRAN</b> again because I despised it as a language compared with other languages") and {{spent the rest of the}} summer writing a text editor in APL and a preprocessor for the PL/I programming language on the IBM System/360.|$|E
25|$|In <b>FORTRAN</b> and PL/I though, the keyword DO is {{used and}} it is called a do-loop, but it is {{otherwise}} identical to the for-loop described here and {{is not to be}} confused with the do-while loop.|$|E
25|$|In <b>Fortran,</b> the {{ampersand}} {{forces the}} compiler to treat two lines as one. This {{is accomplished by}} placing an ampersand {{at the end of}} the first line and at the beginning of the second line.|$|E
25|$|The ILE (Integrated Language Environment) {{programming}} environment allows programs from ILE compatible languages (C, C++, COBOL, RPG, <b>Fortran,</b> and CL), {{to be bound}} into the same executable and call procedures written {{in any of the}} other ILE languages.|$|E
25|$|The Neutral Density code {{comes as}} a package of Matlab or as a <b>Fortran</b> routine. It enables the user to fit neutral density {{surfaces}} to arbitrary hydrographic data and just 2 MBytes of storage are required to obtain an accurately pre-labelled world ocean.|$|E
25|$|A {{conditional}} {{using an}} if-then-else syntax {{was invented by}} McCarthy in a <b>Fortran</b> context. He proposed its inclusion in ALGOL, {{but it was not}} made part of the Algol 58 specification. For Lisp, McCarthy used the more general cond-structure. Algol 60 took up if-then-else and popularized it.|$|E
25|$|This {{notion is}} present in C and Perl, among others. Note that as in earlier {{languages}} such as Algol 60 and <b>FORTRAN,</b> spaces are allowed in identifiers, so that half pi is a single identifier (thus avoiding the underscores versus camel case versus all lower-case issues).|$|E
25|$|Notice {{that the}} end-loop marker {{specifies}} {{the name of}} the index variable, which must correspond to {{the name of the}} index variable in the start of the for-loop. Some languages (PL/I, <b>FORTRAN</b> 95 and later) allow a statement label on the start of a for-loop that can be matched by the compiler against the same text on the corresponding end-loop statement. <b>Fortran</b> also allows the EXIT and CYCLE statements to name this text; in a nest of loops this makes clear which loop is intended. However, in these languages the labels must be unique, so successive loops involving the same index variable cannot use the same text nor can a label be the same as the name of a variable, such as the index variable for the loop.|$|E
25|$|Originally {{named the}} GNU C Compiler, when it only handled the C {{programming}} language, GCC 1.0 {{was released in}} 1987. It was extended to compile C++ in December of that year. Front ends were later developed for Objective-C, Objective-C++, <b>Fortran,</b> Java, Ada, and Go among others.|$|E
25|$|Originally {{specified}} in 1958, Lisp is the second-oldest high-level programming language in widespread use today. Only <b>Fortran</b> is older, by one year. Lisp {{has changed since}} its early days, and many dialects have existed over its history. Today, the best known general-purpose Lisp dialects are Common Lisp and Scheme.|$|E
25|$|Lisp is {{a family}} of {{computer}} programming languages {{with a long history}} and a distinctive, fully parenthesized syntax. Originally specified in 1958, Lisp is the second-oldest high-level programming language in widespread use today where <b>Fortran</b> is the oldest. It was invented by John McCarthy in 1958.|$|E
25|$|Several {{programming}} languages (e.g., Ada, D, C++11, Smalltalk, PHP, Perl, Object Pascal, Java, C#, MATLAB, Mythryl, Visual Basic, Ruby, Python, JavaScript, <b>Fortran</b> 95 and later) {{have special}} constructs which allow implicit looping through {{all elements of}} an array, or all members of a set or collection.|$|E
25|$|The {{standard}} compiler releases since 4.6 include front ends for C (gcc), C++ (g++), Objective-C, Objective-C++, <b>Fortran</b> (gfortran), Java (gcj), Ada (GNAT), and Go (gccgo). A popular parallel language extension, OpenMP, is also supported. Version 5.0 {{added support}} for Cilk Plus, and since version 5.1, there is preliminary support for OpenACC.|$|E
25|$|The CDC 6600 {{series of}} {{computers}} were very early attempts at supercomputing and gained their {{advantage over the}} existing systems by relegating work to peripheral devices, freeing the CPU (Central Processing Unit) to process actual data. With the Minnesota <b>FORTRAN</b> compiler the 6600 could sustain 500kiloflops on standard mathematical operations.|$|E
25|$|In the 70's, geomodelling mainly {{consisted}} of automatic 2D cartographic {{techniques such as}} contouring, implemented as <b>FORTRAN</b> routines communicating directly with plotting hardware. The advent of workstations with 3D graphics capabilities during the 80's {{gave birth to a}} new generation of geomodelling software with graphical user interface which became mature during the 90's.|$|E
