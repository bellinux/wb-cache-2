2|37|Public
50|$|High school {{students}} are offered honors courses as well as accelerated math program. The school has a small teacher-student ratio in order to <b>keep</b> <b>instruction</b> personal and allow for more individual attention. Raleigh Christian Academy is accredited by the North Carolina Christian School Association (NCCSA) {{and is in the}} final stages of gaining accreditation through the American Association of Christian Schools (AACS).|$|E
40|$|We {{address the}} problem of {{improving}} cache predictability (worst-case performance) and performance in embedded systems through the use of software-assisted replacement mechanisms. These mechanisms require additional software controlled state information that a ects the cache replacement decision. Software instructions allow a program to kill a particular cache element, i. e., e ectively make the element the least recently used element, or keep that cache element, i. e., the element willnever be evicted. We prove basic theorems that provide conditions under which kill and keep instructions can be inserted into program code, such that the resulting performance is guaranteed {{to be as good as}} or better than the original program run using the standard LRU policy. We developed algorithms based on the theoretical results that, given an arbitrary program, determine when to perform software-assisted replacement, i. e., when to insert either a kill or <b>keep</b> <b>instruction.</b> Empirical evidence is provided that shows that performance and predictability (worst-case performance) can be improved for many programs. ...|$|E
5000|$|... in {{aiding the}} rural schools to <b>keep</b> their <b>instruction</b> {{abreast of the}} times ...|$|R
50|$|The K8 <b>keeps</b> the <b>instruction</b> {{and data}} caches {{coherent}} in hardware, {{which means that}} a store into an instruction closely following the store instruction will change that following instruction. Other processors, {{like those in the}} Alpha and MIPS family, have relied on software to <b>keep</b> the <b>instruction</b> cache coherent. Stores are not guaranteed to show up in the instruction stream until a program calls an operating system facility to ensure coherency.|$|R
50|$|As {{with the}} SIMD {{instruction}} set extensions on other RISC processors, VIS strictly {{conforms to the}} main principle of RISC: <b>keep</b> the <b>instruction</b> set concise and efficient.|$|R
5000|$|We {{can adjust}} the block sizes for the level-2 cache. This will stress the processor's ability to <b>keep</b> many <b>instructions</b> in flight simultaneously, {{and there is}} a good chance it will be unable to achieve full {{bandwidth}} from the level-2 cache.|$|R
40|$|Knowledge Acquisition: A Hidden Element in the Writing Process While much {{progress}} {{has occurred in}} recent years to make composition an accepted academic discipline, it is still too often described in terms of patterns and processes, steps and strategies. Granted, these terms are inescapable in most discussions of composition, particularly in the classroom. Yet they perpetuate the notion that composition is a skill rather than a discipline, and they thus work to <b>keep</b> writing <b>instruction</b> at the periphery of the curriculum. Knowledge Acquisition: A Hidden Element in the Writing Process While {{much progress}} has occurred {{in recent years to}} make composition an accepted academic discipline, it is still too often described in terms of patterns and processes, steps and strategies. Granted, these terms are inescapable in most discussions of composition, particularly in the classroom. Yet they perpetuate the notion that composition is a skill rather than a discipline, and they thus work to <b>keep</b> writing <b>instruction</b> at the periphery of the curriculum...|$|R
60|$|When {{you give}} your lectures at the Working Men's College, is it your habit to refer to special {{pictures}} in the National Gallery, or to special works {{of art in the}} British Museum?--Never; I try to <b>keep</b> whatever <b>instruction</b> I give bearing upon what is easily accessible to the workman, or what he can see at the moment. I do not count upon his having time to go to these institutions; I like to put the thing in his hand, and have it about.|$|R
6000|$|... "You are too acute by far," [...] said he; [...] "your {{imagination}} {{runs with}} you. I have said I like you, and I {{can teach you}} classics as well as another. Is it not enough {{to admit that the}} money I get for your <b>instruction</b> <b>keeps</b> me in champagne?" ...|$|R
40|$|This article {{summarizes}} {{our experiences}} trying to <b>keep</b> the <b>instruction</b> of computer sciences simple {{in an environment}} that is anything but simple. An analysis of the factors that contribute to the course's success shows {{that it is not the}} application of technology in various forms that is responsible but a careful instructional design based on sound pedagogical principles. We developed course material that combines problembased learning with e-learning to raise the motivation of natural science students taking an introductory information and communication technology class and to accommodate large classe...|$|R
5000|$|... 3. As I {{do every}} {{year during the}} spiritual exercises, I read the Testament that I wrote on 6 March 1979. I {{continue}} to <b>keep</b> the <b>instructions</b> it contains. What was added then, and also during the subsequent spiritual retreats, reflects the difficult and tense general situation that marked the 1980s. After autumn of the year 1989, this situation changed. The final decade {{of the last century}} was free of the previous tensions; {{this does not mean that}} it did not bring new problems and difficulties. In a special way may Divine Providence be praised for this, that the period known as the [...] "Cold War" [...] ended without violent nuclear conflict; the risk of it had been threatening the world in the previous period.|$|R
5|$|Retail {{copies of}} games are {{supplied}} on proprietary, DVD-type Wii optical discs, which are packaged in <b>keep</b> cases with <b>instructions.</b> In Europe, the boxes have a triangle {{at the bottom}} corner of the paper sleeve-insert side. The triangle is color-coded to identify the region for which the title is intended and which manual languages are included. The console supports regional lockout (software purchased in a region can be only played on that region's hardware).|$|R
40|$|Processors {{that can}} {{simultaneously}} execute multiple paths of execution will only exacerbate the fetch bandwidth problem already plaguing conventional processors. On a multiple-path processor, which speculatively executes less likely paths of hard-to-predict branches, {{the work done}} along a speculative path is normally discarded if that path {{is found to be}} incorrect. Instead, it can be beneficial to <b>keep</b> these <b>instruction</b> traces stored in the processor for possible future use. This paper introduces instruction recycling, where previously decoded instructions from recently executed paths are injected back into the rename stage. This increases the supply of instructions to the execution pipeline and decreases fetch latency. In addition, if the operands have not changed for a recycled instruction, the instruction can bypass the issue and execution stages, benefiting from instruction reuse. Instruction recycling and reuse are examined for a simultaneous multithreading architecture with mult [...] ...|$|R
40|$|Profess Kalven discusesses the {{committee}} 2 ̆ 7 s results, including {{the decision to}} include only one version of an instruction rather than to include various alternatives. The committee wanted to <b>keep</b> jury <b>instructions</b> clear, to eliminate unecessary instructions, and to weed many of the instructions that {{the committee}} had proposed in an earlier meeting. Additionally, the committee focused on ensuring instructions that did not comment on substantive law, enschewing negatively-phrased instructions, and favoring a 2 ̆ 2 good general instruction 2 ̆ 2 over a 2 ̆ 2 large number of specific instructions. 2 ̆ 2 Professor Kalven {{emphasizes the importance of}} communication throughout the process, both in drafting instructions and in communicating them to the jury. Professor Kalven then reviewed several examples of jury instructions that the Committee rejected, explaining the reasoning behind the rejections...|$|R
50|$|Finally, {{learners}} must obtain {{some type}} of satisfaction or reward from a learning experience. This satisfaction can be {{from a sense of}} achievement, praise from a higher-up, or mere entertainment. Feedback and reinforcement are important elements and when learners appreciate the results, they will be motivated to learn. Satisfaction is based upon motivation, which can be intrinsic or extrinsic. To <b>keep</b> learners satisfied, <b>instruction</b> should be designed to allow them to use their newly learned skills as soon as possible in as authentic a setting as possible.|$|R
50|$|Parties are {{required}} to train and educate their law enforcement personnel, civilian or military personnel, medical personnel, public officials, and other persons involved in the custody, interrogation, or treatment of any individual subjected to any form of arrest, detention, or imprisonment, regarding the prohibition against torture (Article 10). Parties also must <b>keep</b> interrogation rules, <b>instructions,</b> methods, and practices under systematic review regarding individuals who are under custody or physical control in any territory under their jurisdiction, {{in order to prevent}} all acts of torture (Article 11).|$|R
50|$|The I/E chip (DC328) {{contained}} an instruction buffer, a microsequencer, an execution unit and a mini-translation buffer (MTB). The instruction buffer is a two-entry 32-bit buffer that held prefetched instructions. It improved performance by maintaining {{a number of}} instructions ready for execution. The hardware attempted to <b>keep</b> the <b>instruction</b> buffer full at all times. The execution unit consisted of sixteen 32-bit general purpose registers defined by the VAX ISA, an arithmetic logic unit (ALU) and a shifter. The MTB is a translation lookaside buffer (TLB). It contained five page table entries (PTEs), one for instruction and four for data. In {{the event of a}} miss, the backup translation buffer (BTB) in the M chip is used. The I/E chip consisted of 60,000 transistors on a die measuring 354 mils by 358 mils (8.99 mm by 9.09 mm) for an area of 126,732 mil2 (81.76 mm2). It dissipated 5 W.|$|R
6000|$|... ----called to-day {{in great}} despair about his mistress, {{who has taken}} a freak of----. He began a letter to her, but was obliged to stop short--I {{finished}} it for him, and he copied and sent it. If he holds out, and <b>keeps</b> to my <b>instructions</b> of affected indifference, she will lower her colours. If she don't, he will, at least, get rid of her, and she don't seem much worth keeping. But the poor lad is in love--if that is the case, she will win. When they once discover their power, finita è la musica.|$|R
40|$|Code {{compression}} {{could lead}} to less overall system die area and therefore less cost. This is significant in the embedded system field where cost is very sensitive. In most of the recent approaches for code compression, only instruction ROM is compressed. Decompression is done between the cache and memory, and instruction cache is kept uncompressed. Additional saving could be achieved if the decompression unit is moved to between CPU and cache, and <b>keep</b> the <b>instruction</b> cache compressed as well. In this project we explored the issues for compressing the instruction cache. In the process, we constructed a high level implementation for a 64 -bit, 5 -stage pipeline MIPS like processor with compressed instruction cache. We developed a compression algorithm with instruction level random access within the compressed file. In addition we devised a branch compensation cache, a small cache mechanism to alleviate the unique branching penalties that branch prediction cannot reduce. 1...|$|R
50|$|A stored-program digital {{computer}} {{is one that}} <b>keeps</b> its program <b>instructions,</b> {{as well as its}} data, in read-write, random-access memory (RAM). Stored-program computers were an advancement over the program-controlled computers of the 1940s, such as the Colossus and the ENIAC, which were programmed by setting switches and inserting patch cables to route data and to control signals between various functional units. In the vast majority of modern computers, the same memory is used for both data and program instructions, and the von Neumann vs. Harvard distinction applies to the cache architecture, not the main memory (split cache architecture).|$|R
25|$|Many early RISC designs {{also shared}} the {{characteristic}} {{of having a}} branch delay slot. A branch delay slot is an instruction space immediately following a jump or branch. The instruction in this space is executed, {{whether or not the}} branch is taken (in other words the effect of the branch is delayed). This <b>instruction</b> <b>keeps</b> the ALU of the CPU busy for the extra time normally needed to perform a branch. Nowadays the branch delay slot is considered an unfortunate side effect of a particular strategy for implementing some RISC designs, and modern RISC designs generally do away with it (such as PowerPC and more recent versions of SPARC and MIPS).|$|R
40|$|Adaptive {{hypermedia}} {{has become}} a hot topic as web-based on-line <b>instruction</b> <b>keeps</b> thriving. We propose a framework that supports the definition of dynamic hypermedia presentations without assuming a pre-established approach for pedagogical knowledge representation. In our system authors a) define ontologies that best fit a specific domain or the author's understanding of the domain, and b) design abstract presentation models associated to knowledge categories. Web pages are generated dynamically from the domain and presentation model, with a strong correspondence between domain structure and the derived hyperspace structure. The system provides explicit support for adaptive presentation constructs, and admits external adaptive navigation mechanisms and user model update strategies...|$|R
50|$|Many early RISC designs {{also shared}} the {{characteristic}} {{of having a}} branch delay slot. A branch delay slot is an instruction space immediately following a jump or branch. The instruction in this space is executed, {{whether or not the}} branch is taken (in other words the effect of the branch is delayed). This <b>instruction</b> <b>keeps</b> the ALU of the CPU busy for the extra time normally needed to perform a branch. Nowadays the branch delay slot is considered an unfortunate side effect of a particular strategy for implementing some RISC designs, and modern RISC designs generally do away with it (such as PowerPC and more recent versions of SPARC and MIPS).|$|R
40|$|A loop buffer is {{a memory}} located between CPU and level one {{instruction}} cache, called IL 1 hereafter. The {{difference between the}} loop buffer and the cache dedicate for instructions is that the loop buffer only <b>keeps</b> the <b>instructions</b> in sequence. Therefore it contains the advantages of smaller size and high speed over the main cache. The instruction fetch unit can obtain the maximum benefit from loop buffer while the size of loop buffer {{is large enough to}} contain whole instructions in a loop, the instructions just need to be fetched from the cache only one time and then it can deliver instructions to CPU core at very low energy level. In the previous researches, the controller begins to detect the innermost loop at the fetch stage. The branches whether are predicted taken or not taken mainly depend on the branch predictor. Once the backward branches or the forward branches in the loop are miss-predicted, the controlled have to flush the instructions in the buffer, detect and refill a new loop from the main cache. Especially, the forward branches are so instable that the predictor cannot bring its value into play. Instead, this appearanc...|$|R
40|$|Current superscalar {{processors}} commit {{instructions in}} program order {{by using a}} reorder buffer (ROB). The ROB provides support for speculation, precise exceptions, and register reclamation. Howe-ver, committing instructions in program order may lead to significant performance degradation if a long latency operation blocks the ROB head. Several proposals have been published {{to deal with this}} problem. Most of them retire instructions speculatively. However, as speculation may fail, checkpoints are required in order to rollback the pro-cessor to a precise state, which requires both extra hardware to manage checkpoints and the enlargement of other major processor structures, which in turn might impact the processor cycle. This paper focuses on out-of-order commit in a nonspeculative way, thus avoiding checkpointing. To this end, we replace the ROB with a validation buffer (VB) structure. This structure <b>keeps</b> dispatched <b>instructions</b> until they are nonspeculative or mispeculated, which allows an early retirement. By doing so, the performance bottleneck is largely alleviated. An aggressive register reclamation mechanism targeted to this microarchitecture is also devised. As experimental results show, the VB structure is much more efficient than a typical ROB since, with only 32 entries, it achieves a performance close to an in-order commit microprocessor using a 256 -entry ROB. I...|$|R
40|$|The {{implementation}} of modern {{high performance computer}} is increasingly directed toward parallelism in the hardware. However, most of the current fetch units are limited to one branch prediction per cycle and therefore, can fetch {{no more than one}} basic block per cycle. While fetching a single basic block each cycle is sufficient for implementations that issue small number of instructions per cycle, it is not for processors with higher peak issue rates. In this paper we proposed a new architecture, which combine the enhanced branch target buffer with the block cache to fetch multiple blocks. The enhanced branch target buffer enhanced the capability of traditional branch target buffer to store multiple branch targets. Block cache <b>keeps</b> the <b>instruction</b> streams that collected at commit stage as blocks. These blocks are renamed and the renamed index is stored in the enhanced branch target buffer as the basic fetching unit. The proposed architecture has been simulated using SimpleScalar 2. 0 simulator. The results show that the average instruction fetch pet cycle reaches 4. 84 instructions, the average instruction issued per cycle is 3. 44 instructions and the average IPC is 2. 07. As compare to the baseline machine, we got 87 %, 84 %, and 56 % increase respectively. ...|$|R
40|$|This {{will be a}} hand {{on course}} as a lot have done {{previous}} training on spirometry but has not understood the total concept of spirometry because of the jargon they use. 1. Operator Performing the test This is {{a vital part of}} all spirometry tests and the outcome of the tests. • The operator must be familiar with the Spirometer. • Use the Spirometer's Manual. • <b>Keep</b> to the <b>instructions</b> laid out by the Manufacturer. • The Operator should have basic knowledge of spirometry. (What is required by South African Thoracic Society) Performing the Spirometry test • The greatest potential source of error is the failure of the patient to perform the test properly. • Spirometry must be performed correctly, because of the serious impact its results can have on a patient's life...|$|R
50|$|When an Om {{mother is}} teased {{to death by}} three Draag children, her {{orphaned}} infant is found by Master Sinh, a key Draag leader, and his daughter Tiwa, who keeps the boy as a pet and names him Terr. Tiwa loves Terr and is careful not to hurt him, but, in accordance with her parents' <b>instructions,</b> <b>keeps</b> him under control, giving him a collar with which she can pull him in any direction. She brings Terr to sessions in which she receives her education using headphones that transmit knowledge into her mind, and a defect in his collar allows him to receive the knowledge too. Around the time that Tiwa grows into her teens and first performs Draag meditation, which allows the species to travel with their minds, she loses some interest in Terr, who has become {{a young man and}} acquired much Draag knowledge. He escapes into the wilderness, stealing Tiwa's headphones.|$|R
2500|$|The Tank Corps also {{followed}} this routine, by sending recommendations about {{the distribution of}} its units, the training of tanks and affiliated infantry for approval by the Third Army HQ. The proposals {{were based on the}} [...] "Notes" [...] issued on 4 October, which summarised the experience gained by the Tank Corps since April and amendments were issued on 10 November. The Third Army HQ issued two [...] "Notes" [...] on 30 October, covering tank-infantry training and operations. In [...] "Tank and Infantry Operations Without Methodical Artillery Preparation" [...] of 30 October, each corps was told to <b>keep</b> the <b>instructions</b> secret to ensure surprise, that tank sections should attack specific areas, objectives should be reserved for an echelon of tanks each, that an advanced tank should keep German heads down, while the main body and infantry crossed German trenches, that the main body of tanks should stay on the British side of the German line being attacked, that tanks would be allotted according to the number of German positions in the area and work in threes to cover [...] of front. Only a platoon of infantry should work with each tank, to avoid bunching when moving through lanes in barbed wire made by the tanks and that infantry should move in section files. Further sections described the care needed when tanks crossed barbed wire, so that following tanks would not pull up the wire, the use and marking of trenches filled by fascines and the principles of tank-infantry co-operation.|$|R
40|$|Predication {{of control}} edges has the {{potential}} advantages of improving fetch bandwidth and reducing branch mispredictions. However, heavily predicated code in out-of-order processors can lose significant performance by deferring resolution of the predicates until they are executed, whereas in nonpredicated code those control arcs would have remained as branches, and would be resolved immediately in the fetch stage when they are predicted. Although predicate prediction can address this problem, three problems arise when trying to predict aggressively predicated code that contains multi-path hyperblocks: (1) How to maintain a high bandwidth of branch prediction to <b>keep</b> the <b>instruction</b> window full without having the predicate predictions interfere and without increasing the branch mispredictions, (2) how to determine which predicates in the multi-path hyperblocks should be predicted, and (3) how to achieve high predicate prediction accuracies without centralizing all prediction information in a single location. To solve these problems, this paper proposes a speculation architecture called hierarchical control prediction (HCP). In HCP, the control flow speculation is partitioned into two levels. In parallel with the branch predictor, which identifies the coarsegrain execution path by predicting the next hyperblock entry, HPC identifies and predicts the chain of predicate instructions along the predicted path of execution within each hyperblock, using encoded static path approximations in each branch instruction and local per-predicate histories to achieve high accuracies. Using a 16 -core composable EDGE processor as the evaluation platform, this study shows that hierarchical control prediction can address these issues comprehensively, accelerating single-threaded execution by 19 % compared to no predicate prediction, and thus achieving half of the 38 % performance gain that ideal predicate prediction would attain. 1...|$|R
5000|$|After {{leaving the}} bar, Walt leaves New Hampshire in a Volvo, with Marty Robbins' song [...] "El Paso" [...] {{playing on the}} tape deck. He returns to New Mexico and tracks down Gretchen and Elliott Schwartz (Jessica Hecht and Adam Godley) at their new house in Santa Fe, after posing as a {{reporter}} for The New York Times. In order to circumvent the suspicions of the DEA and Skyler he orders them to give his remaining $9.72 million to Walt Jr., who will inherit it upon turning eighteen, saying this is their chance to [...] "make things right". The Schwartzes believe there are snipers waiting outside, and after Walt tells them they'll always be watched to ensure they <b>keep</b> to his <b>instructions,</b> they agree. After Walt leaves, he pays Badger Mayhew (Matt L. Jones) and Skinny Pete (Charles Baker) for aiming red laser pointers at the Schwartzes and posing as hitmen. Walt learns from Badger and Skinny Pete that Jack Welker's (Michael Bowen) gang has been cooking and distributing blue meth and realizes Jesse (Aaron Paul) is still alive.|$|R
40|$|Abstract — The issue queue <b>keeps</b> the <b>instructions</b> {{that are}} waiting for the {{availability}} of input operands and issue slots. While some instructions remain for a few cycles in the issue queue, the instructions dependent on L 2 misses may remain there for hundreds of cycles due to the L 2 miss latency. Some authors have proposed mechanisms to extract these instructions from the issue queue. However, these mechanisms increase the issue-queue activity because the extracted instructions must be replayed, that is, issued twice (at least). Firstly, to be extracted from the issue queue. Secondly, after resolving the L 2 miss, to be executed. We propose delaying the insertion of some instructions in the issue queue. After predicting which load instructions are going to miss in L 2, the instructions dependent on these load instructions will be stored in an instruction buffer instead of being inserted in the issue queue. After resolving the miss, the instruction buffer will be traversed in order to insert in the issue queue the instructions dependent on the resolved memory access. The advantages of this proposal with respect to proposals that extract from the issue queue the instructions dependent on L 2 misses are twofold. First, it avoids filling the issue queue with instructions dependent on L 2 misses. Second, it reduces the amount of instruction replays. The evaluations show that delaying the insertion of instructions in the issue queue reduces the amount of instruction replays between 27 % and 31 % in integer benchmarks and between 33 % and 39 % in floating-point benchmarks with respect to processors that extract from the issue queue the instructions dependent on L 2 misses. The evaluations also show that this replay reduction does not harm processor performance. Index Terms — Instruction issue, L 2 hit/miss prediction, Instruction replays...|$|R
40|$|Master of ScienceDepartment of Computing and Information SciencesGurdip SinghDistributed {{applications}} that operate on networks of sensors {{to gather data}} are important in real world. TinyOS is an operating system designed to support wireless sensor networks.. It has interfaces and components, which provide functionalities for sensing parameters in the environment, packet communication and computation. These sensors have multiple purposes such as gathering different kinds of data and can be deployed in distributed networks to gather important information. NesC is a language {{which is used to}} write sensor applications for TinyOS which are deployment on the sensors. TinyViz is an application which simulates the NesC applications on a computer so that the applications can be tested first in the simulation environment and then can be tested on the sensors and deployed. However, TinyViz by default represents a static and closed environment where the conditions simulated may not be realistic. This project aims at providing real-world scenarios on the platform TinyViz, by communicating with TinyViz using Tython, a script language for this specific purpose. In terms of sensor network applications, events are classified into categories, which can be mapped to tangible parameters. This project takes as input the real-world parameters as input by the developer of the NesC applications {{in the form of a}} configuration file and converts them into implementable threads that run in parallel with TinyViz and <b>keep</b> sending <b>instructions</b> to the TinyViz which then simulates real-world environment. Thus, it helps simulate NesC applications in a realistic environment even before the real deployment. This is packaged as an Eclipse plug-in for portability and ease of implementation, using which developers of NesC applications can give as input configuration and obtain the files required for simulation. The implementation is done in java, using ‘Tython’...|$|R
40|$|When modern {{processors}} <b>keep</b> {{increasing the}} <b>instruction</b> window {{size and the}} issue width to exploit more instruction-level parallelism (ILP), the demand of larger physical register file {{is also on the}} increase. As a result, register file access time represents one of the critical delays and can easily become a bottleneck. In this paper, we first discuss the possibilities of reducing register pressure by shortening the lifetime of physical registers, and evaluate several possible register renaming approaches. We then propose an efficient dynamic register renaming algorithm named LAER (Late Allocation and Early Release), which can be implemented through a two-level register file organization. In LAER renaming scheme, physical register allocations are delayed until the instructions are ready to be executed, and the physical registers in the first level are released once they become non-active, with the values backupped in the second level. We show that LAER algorithm can significantly reduce the register pressure with minimal cost of space and logic complexity, which means the same amount of ILP exploited with smaller physical register file, thus shorter register file access time and higher clock speed, or the same size of physical register file to achieve much higher performance. ...|$|R
40|$|This short {{communication}} {{deals with}} the introduction of the concept of anticipator, which is one who anticipates, in the framework of computing anticipatory systems. The definition of anticipation {{deals with the}} concept of program. Indeed, the word program, comes from “pro-gram” meaning "to write before" by anticipation, and means a plan for the programming of a mechanism, or a sequence of coded instructions that can be inserted into a mechanism, or a sequence of coded instructions, as genes or behavioural responses, that is part of an organism. Any natural or artificial programs are thus related to anticipatory rewriting systems, as shown in this paper. All the cells in the body, and the neurons in the brain, are programmed by the anticipatory genetic code, DNA, in a low-level language with four signs. The programs in computers are also computing anticipatory systems. It will be shown, at one hand, that the genetic code DNA is a natural anticipator. As demonstrated by Nobel laureate McClintock [8], genomes are programmed. The fundamental program deals with the DNA genetic code. The properties of the DNA consist in self-replication and self-modification. The self-replicating process leads to reproduction of the species, while the self-modifying process leads to new species or evolution and adaptation in existing ones. The genetic code DNA <b>keeps</b> its <b>instructions</b> in memory in the DNA coding molecule. The genetic code DNA is a rewriting system, from DNA coding to DNA template molecule. The DNA template molecule is a rewriting system to the Messenger RNA molecule. The information is not destroyed during the execution of the rewriting program. On the other hand, it will be demonstrated that Turing machine is an artificial anticipator. The Turing machine is a rewriting system. The head reads and writes, modifying the content of the tape. The information is destroyed during the execution of the program. This is an irreversible process. The input data are lost. Peer reviewe...|$|R
40|$|The study {{aimed to}} 1) study {{the use of}} local wisdom and its {{problems}} in secondary schools and 2) examine the pattern of development of local wisdom contents used in secondary schools. The study is a qualitative research which was done by examining related texts and documents as well as field research which was participated by 100 informants including government officers and local people. The data was collected by using questionnaire, observation form, interview, and focus group. The data was then analyzed {{according to the study}} and present by descriptive analysis approach. Research results show that The problems of using local wisdom contents are classified into the following aspects; 1) Community aspect: learning and using local wisdom {{of the people in the}} community are related to local materials and ethnic; 2) Curriculum aspect: the studied schools has curriculums conforming to government policies; 3) Local wisdom instructors: local wisdom contents are instructed by local wisdom instructors in the studied schools. Local wisdom instructors from the university also take part in local wisdom education at the studied schools located in the same university campus; 4) Current local wisdom learning aspect: all of the studied schools value the local wisdom education. Local wisdom contents are found enclosed in the schools’ visions and missions. Problems on using local wisdom contents are the deficiency of financial support from the government, neglect of school administrators, discontinuity of learners and instructors affected by their transference reasons, and insufficiency of local wisdom philosophers who could not <b>keep</b> continuative <b>instruction</b> in harvest season according to their initiative occupation of farming. For the development pattern of the use of local wisdom contents in the studied schools, it was found that local wisdom contents are creatively developed to increase the economic value in industry, handicraft, art, and Thai medicine. The patterns of development are to production design, exhibit the products, and weave the academic networks among schools and enterprises both locally and nationally...|$|R
