0|10000|Public
30|$|The syntax {{of types}} and terms {{used in our}} {{formalisation}} is identical to [38], except that we require type annotations in every λ-abstraction. We restrict ourselves to type annotated λ-terms, since our main interest {{is the development of}} a correct type checker for this language. Allowing non-annotated λ-abstractions characterises a type inference problem that would require a <b>formalisation</b> <b>of</b> a unification algorithm. The <b>formalisation</b> <b>of</b> a unification algorithm has been studied elsewhere [26, 32]. We let a <b>formalisation</b> <b>of</b> the type inference problem for this trust-calculus for future work.|$|R
5000|$|... #Subtitle level 2: <b>Formalisation</b> <b>of</b> State Bodyguard Force (1909) ...|$|R
5000|$|... #Subtitle level 3: <b>Formalisation</b> <b>of</b> code-share {{relationship}} with British Airways ...|$|R
5000|$|... #Subtitle level 3: <b>Formalisation</b> <b>of</b> Statutes under Swiss law in 2006 ...|$|R
40|$|One of {{the main}} {{features}} of type theories that has made them so successful in the <b>formalisation</b> <b>of</b> mathematics {{is the fact that}} it is quite possible to have a decidable theory that is adequate for the <b>formalisation</b> <b>of</b> a large amount of mathematics. When implementing such a system, we do not need to fin...|$|R
40|$|In this work, {{we address}} the <b>formalisation</b> <b>of</b> {{symmetric}} nets, a subclass of coloured Petri nets, refinement in COQ. We first provide a <b>formalisation</b> <b>of</b> the net models, {{and of their}} type refinement in COQ. Then the COQ proof assistant is used to prove the refinement correctness lemma. An example adapted from a protocol example illustrates our work. ...|$|R
5000|$|Sjaak Brinkkemper. <b>Formalisation</b> <b>of</b> {{information}} systems modelling. PhD thesis Radboud University, Nijmegen 1990 ...|$|R
50|$|The <b>formalisation</b> <b>of</b> a {{language}} variety with {{the intervention of}} an institution (Milroy, 2002).|$|R
40|$|This {{data set}} {{contains}} a computer-checkable formal mathematical {{proof of the}} soundness and completeness of a proof system for the "consistent consequence" relation on Boolean equation systems, along with a <b>formalisation</b> <b>of</b> Boolean equation systems, the notion of solution and a <b>formalisation</b> <b>of</b> the relation between a solution of a Boolean equation system and a consistent consequence on such an equation system. The proofs can be machine-checked using the Coq proof assistant, version CoqIDE 8. 5 pl 2; these proofs accompany the paper "A <b>Formalisation</b> <b>of</b> Consistent Consequence for Boolean Equation Systems" by Van Delft, Geuvers & Willemse {{that is part of}} the (forthcoming) proceedings of the 8 th International Conference on Interactive Theorem Proving...|$|R
5000|$|Part 3 {{concerns}} the usability <b>of</b> the <b>formalisation</b> <b>of</b> System F<:. In particular, the challenge asks for: ...|$|R
50|$|He made {{contributions}} to the <b>formalisation</b> <b>of</b> analysis, which were published in 1828 in the Journal des Savants.|$|R
50|$|In 1898, the {{increased}} European population led to <b>formalisation</b> <b>of</b> governance {{in the formation}} of the Yukon Territory.|$|R
40|$|Morgan and Back have {{proposed}} different <b>formalisations</b> <b>of</b> procedures and parameters {{in the context}} of techniques of program development based on refinement. In this paper, we investigate a surprising and intricate relationship between these works and the substitution operator that renames the free variables of a program. In this study, we reveal an inconsistency in Morgan's refinement calculus and show that Back's <b>formalisation</b> <b>of</b> procedures does not have the same problem...|$|R
40|$|Small and Medium {{enterprises}} play {{a significant}} role in a nation's development. One of the most often neglected managerial aspect found in SMEs is the Human Resource Management. This report discusses the indigenous practices of SMEs that inhibit the <b>formalisation</b> <b>of</b> human resource development. The second section of this report critically analyses the HR practices of a small firm in India and proposes steps for <b>formalisation</b> <b>of</b> its HR strategy...|$|R
40|$|AbstractMorgan and Back have {{proposed}} different <b>formalisations</b> <b>of</b> procedures and parameters {{in the context}} of techniques of program development based on refinement. In this paper, we investigate a surprising and intricate relationship between these works and the substitution operator that renames the free variables of a program. In this study, we reveal an inconsistency in Morgan's refinement calculus and show that Back's <b>formalisation</b> <b>of</b> procedures does not have the same problem...|$|R
40|$|This paper {{presents}} a logical <b>formalisation</b> <b>of</b> accrual of arguments {{as a form}} <b>of</b> inference. The <b>formalisation</b> is given within the logical framework of Dung as instantiated by Pollock, and is shown to satisfy three principles that any treatment of accrual should satisfy. The <b>formalisation</b> <b>of</b> accrual as inference is contrasted to knowledge-representation treatments of accrual. Also, the formalisation is applied to some concepts from the theory of evidential legal reasoning. ...|$|R
30|$|Isabelle/HOL [36] is a proof {{assistant}} {{that has}} been used in several projects like the <b>formalisation</b> <b>of</b> a general purpose operating system kernel, in which C code can be extracted from the produced Isabelle theories [25]. The Archive of Formal Proofs [21] is a online repository for Isabelle developments that contains several <b>formalisations</b> <b>of</b> programming languages and mathematical theorems, such as the formal proofs of Volpano et al. type system for security [48, 52].|$|R
40|$|A second-level {{security}} protocol {{is defined as}} a {{security protocol}} that relies on an underlying security protocol in order to achieve its goals. The verification of classical authentication protocols has become routine, but second-level protocols raise new challenges. These include the <b>formalisation</b> <b>of</b> appeals to the underlying protocols, the modification of the threat model, and the <b>formalisation</b> <b>of</b> the novel goals. These challenges have been met using Isabelle and the Inductive Approach [14]...|$|R
5000|$|... #Caption: The {{pioneering}} {{computer scientist}} Alan Turing provided a <b>formalisation</b> <b>of</b> {{the concepts of}} algorithm and computation with the Turing machine ...|$|R
40|$|Argumentation has {{received}} steadily increasing {{attention in the}} multi-agent systems community over the past decade, with particular interest {{in the use of}} argument models from the informal logic community. The <b>formalisation</b> <b>of</b> such argument systems is a necessary step {{if they are to be}} successfully deployed, and their properties rigorously understood. However, there is as yet no widely accepted approach to the <b>formalisation</b> <b>of</b> argument systems. In this paper, we take as our starting point the view that arguments and dialogues are inherently meta-logical, and that any proper <b>formalisation</b> <b>of</b> argument must embrace this aspect of their nature. For example, a statement that serves as a justification of an argument is is statement about an argument: the argument for which the justification serves must itself be referred to in the justification. From this starting position, we develop a <b>formalisation</b> <b>of</b> arguments using a hierarchical first-order meta-logic, in which statements in successively higher tiers of the argumentation hierarchy refer to statements further down the hierarchy. This enables us to give a clean formal separation between object-level statements, arguments made about these object level statements, and statements about arguments...|$|R
50|$|The <b>formalisation</b> <b>of</b> the BIR {{occurred}} in 1927 upon {{the merger of}} the two societies. The BIR became a registered charity in 1963.|$|R
5000|$|At the {{beginning}} of the Qing dynasty, prior to the <b>formalisation</b> <b>of</b> the rank system, there were also non-standard titles used, such as: ...|$|R
50|$|The <b>formalisation</b> <b>of</b> S star {{classification}} in 1954 {{introduced a}} two-dimensional scheme {{of the form}} SX,Y. For example, R Andromedae is listed as S6,6e.|$|R
40|$|Most economists {{think that}} H-O works well in theory, but badly in reality, whereas the {{opposite}} {{is closer to the}} truth. After a long decline, H-O has recently experienced an empirical revival, but the standard Samuelsonian <b>formalisation</b> <b>of</b> the theory is still unsatisfactory. A modified <b>formalisation</b> <b>of</b> the theory, which gives trade costs more of a role, fits the evidence better. Appropriately interpreted, H-O is a useful part of the theory of economic development, as well as of international trade. ...|$|R
40|$|The {{issue of}} {{representing}} speech rhythm is understood {{in this paper}} as the search for relevant primary parameters {{that will allow the}} <b>formalisation</b> <b>of</b> speech rhythm. Current speech synthesisers show that phonological models are not satisfactory with respect to the modelling of speech rhythmicity. Our analysis indicates that this may be in part related to the <b>formalisation</b> <b>of</b> rhythmic representation. Based on the observation of other communicative systems facing the problem of representing rhythm, parameters are described for representing speech rhythmic structures...|$|R
5000|$|In mathematics, Takeuti's {{conjecture}} is the conjecture of Gaisi Takeuti that a sequent <b>formalisation</b> <b>of</b> second-order logic has cut-elimination (Takeuti 1953). It {{was settled}} positively: ...|$|R
40|$|We {{present an}} {{internal}} <b>formalisation</b> <b>of</b> a type heory with dependent types in Type Theory using {{a special case}} of higher inductive types from Homotopy Type Theory which we call quotient inductive types (QITs). Our <b>formalisation</b> <b>of</b> type theory avoids referring to preterms or a typability relation but defines directly well typed objects by an inductive definition. We use the elimination principle to define the set-theoretic and logical predicate interpretation. The work has been formalized using the Agda system extended with QITs using postulates...|$|R
40|$|AbstractThe {{application}} of concurrent calculi to the <b>formalisation</b> <b>of</b> biological systems constitutes a promising {{approach to the}} analysis of biological phenomena in silico. The peculiar nature of such systems inspired the introduction of specific features in biologically-oriented calculi, such as compartments to model more faithfully their highly organised structure. In this paper we present Sπ@, a conservative extension of the stochastic π-calculus which allows an intuitive and concise <b>formalisation</b> <b>of</b> multi-compartment systems with dynamic structure, despite retaining the simplicity of the original π-calculus. The possibility to encode into Sπ@ several bio-inspired, compartmentalised languages demonstrates its expressive power and flexibility. The calculus is accompanied by an extended version of Gillespie’s stochastic simulation algorithm, able to handle multiple compartments with varying volumes. An enhanced <b>formalisation</b> <b>of</b> the algorithm is also presented, in order to provide efficient simulation {{in the presence of a}} high number of compartments and reactions...|$|R
40|$|Abstract. A second-level {{security}} protocol {{is defined as}} a {{security protocol}} that relies on an underlying security protocol in order to achieve its goals. The verification of classical authentication protocols has become routine, but second-level protocols raise new challenges. These include the <b>formalisation</b> <b>of</b> appeals to the underlying protocols, the modification of the threat model, and the <b>formalisation</b> <b>of</b> the novel goals. These challenges have been met using Isabelle and the Inductive Approach [14]. The outcomes are demonstrated on a recent protocol for certified e-mail delivery by Abadi et al. [2]. ...|$|R
40|$|International audienceWe {{present a}} {{framework}} for validated numerical computations with real functions. The framework {{is based on a}} <b>formalisation</b> <b>of</b> abstract data types for basic floating-point arithmetic, interval arithmetic and function models based on Banach algebra. As a concrete instantiation, we develop an elementary smooth function calculus approximated by sparse polynomial models. We demonstrate formal verification applied to validated calculus by a <b>formalisation</b> <b>of</b> basic arithmetic operations in a theorem prover. The ultimate aim is to develop a formalism powerful enough for reachability analysis of nonlinear hybrid systems...|$|R
40|$|In {{this paper}} we discuss usability, and propose to take that notion as a <b>formalisation</b> <b>of</b> (un) definedness in typed lambda calculus, {{especially}} in calculi based on PCF. We discuss some important properties that make usability attractive as a <b>formalisation</b> <b>of</b> (un) definedness. There is a remarkable difference between usability and solvability: in the untyped lambda calculus the solvable terms are precisely the terms with a head normal form, whereas in typed lambda calculus the usable terms are between the terms with a normal form and the terms with a (weak) head normal form...|$|R
40|$|The World Bank’s ‘Doing Business’ {{reforms were}} {{originally}} expected {{to help the}} growth and <b>formalisation</b> <b>of</b> SMEs and micro enterprises. The expectations that reforms would support the growth and development of SMEs were challenged by scholars, but the reforms’ impact on the micro enterprises of the poor has received little scholarly attention. Drawing on a desk study and on field studies of street-vendors carried out in Tanzania in 2007 and 2011, this paper argues that the growth and <b>formalisation</b> <b>of</b> micro-businesses are badly served by the ‘Doing Business’ reform...|$|R
40|$|Syntax....................... 24 3. 3 Semantics.............................. 25 3. 3. 1 Semantic Objects...................... 26 3. 3. 2 Semantic Rules....................... 27 3. 3. 3 Errors and Non-Termination................ 28 3. 4 Timed Semantics.......................... 30 1 2 Contents 3. 4. 1 Nested Call Depth..................... 31 3. 4. 2 Total Number of Function Calls.............. 33 3. 5 Static Correctness.......................... 34 3. 6 Formalisation into HOL....................... 35 3. 6. 1 <b>Formalisation</b> <b>of</b> Types and Syntax............. 35 3. 6. 2 <b>Formalisation</b> <b>of</b> Semantics................. 41 3. 6. 3 Static Correctness...................... 48 3. 7 Types: An Aside....................... [...] . ...|$|R
5000|$|... {{flexible}} - in {{the sense}} that it is at the discretion of the local authorities to choose the appropriate type of tenure for the <b>formalisation</b> <b>of</b> an informal settlement.|$|R
40|$|This {{document}} {{represents the}} output from the Ottawa meeting. It {{should be pointed}} out that the structure of this document is likely to change following future editing meetings. The primary focus will be on the computational viewpoint language. It is expected that a direct <b>formalisation</b> <b>of</b> this viewpoint language will be given (although not as complex as that currently existing in this document) and mapping rules to different FDTs provided. Further work on formalising other viewpoint languages is likely to take place once this work is complete. To expedite the standardising process, the other viewpoint languages will be placed in an accompanying document. Thus the <b>formalisation</b> <b>of</b> the computational viewpoint language should not be restricted from progressing to CD status by the other viewpoint language formalisations. It is likely that the document containing the <b>formalisation</b> <b>of</b> the other viewpoint languages will be recombined with the computational language formalisation document when they are more complete. 2 Scope and Field of Applicatio...|$|R
40|$|Abstract. This paper {{deals with}} the {{application}} of constructive type theory {{to the theory of}} programming languages. The main aim of this work is to investigate constructive <b>formalisations</b> <b>of</b> the mathematics of programs. Here, we consider a small typed functional language and prove some properties about it, arriving at the property that establishes that well typed expressions cannot go wrong. First, we give the denitions and proofs in an informal style, and then we present and explain the <b>formalisation</b> <b>of</b> these denitions and proofs. For the formalisation, we use the proof editor ALF and its pattern matching facility. ...|$|R
