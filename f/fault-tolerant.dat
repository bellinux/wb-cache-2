7890|0|Public
5|$|The Pro-Line {{series was}} durable and <b>fault-tolerant,</b> with many models lasting for years. However, because they used {{solid-state}} amplifiers, {{they are not}} as highly regarded as the older tube-based Leslies, because they lack the characteristic sound when the amp is overdriven.|$|E
5|$|Parallel {{computing}} {{can also}} {{be applied to the}} design of <b>fault-tolerant</b> computer systems, particularly via lockstep systems performing the same operation in parallel. This provides redundancy in case one component should fail, and also allows automatic error detection and error correction if the results differ. These methods can be used to help prevent single event upsets caused by transient errors. Although additional measures may be required in embedded or specialized systems, this method can provide a cost effective approach to achieve n-modular redundancy in commercial off-the-shelf systems.|$|E
25|$|SpaceX uses {{multiple}} redundant s in a <b>fault-tolerant</b> design. Each Merlin {{engine is}} controlled by three voting computers, {{each of which has}} two physical processors that constantly check each other. The software runs on Linux and is written in C++.|$|E
25|$|In {{addition}} to PBFT and UpRight, {{there is the}} BFT-SMaRt library, a high-performance Byzantine <b>fault-tolerant</b> state machine replication library developed in Java. This library implements a protocol very similar to PBFT's, plus complementary protocols which offer state transfer and on-the-fly reconfiguration of hosts. BFT-SMaRt is the most recent effort to implement state machine replication, still being actively maintained.|$|E
25|$|The {{origins of}} the Internet date back to {{research}} commissioned by the United States Federal Government in the 1960s to build robust, <b>fault-tolerant</b> communication via computer networks. The linking of commercial networks and enterprises in the early 1990s {{marked the beginning of}} the transition to the modern Internet, and generated rapid growth as institutional, personal, and mobile computers were connected to the network. By the late 2000s, its services and technologies had been incorporated into virtually every aspect of everyday life.|$|E
25|$|The Russian Orbital Segment {{contains}} the Data Management System, which handles Guidance, Navigation and Control (ROS GNC) {{for the entire}} station. Initially, Zarya, the first module of the station, controlled the station until a short time after the Russian service module Zvezda docked and was transferred control. Zvezda {{contains the}} ESA built DMS-R Data Management System. Using two <b>fault-tolerant</b> computers (FTC), Zvezda computes the station's position and orbital trajectory using redundant Earth horizon sensors, Solar horizon sensors as well as Sun and star trackers. The FTCs each contain three identical processing units working in parallel and provide advanced fault-masking by majority voting.|$|E
25|$|Systems as {{complicated}} as computers require very high reliability. ENIAC remained on, in continuous operation from 1947 to 1955, for eight years before being shut down. Although a vacuum tube might fail, it would be replaced without bringing down the system. By the simple strategy of never shutting down ENIAC, the failures were dramatically reduced. The vacuum-tube SAGE air-defense computers became remarkably reliable – installed in pairs, one off-line, tubes likely to fail did so when the computer was intentionally run at reduced power to find them. Hot-pluggable hard disks, like the hot-pluggable vacuum tubes of yesteryear, continue the tradition of repair during continuous operation. Semiconductor memories routinely have no errors when they operate, although operating systems like Unix have employed memory tests on start-up to detect failing hardware. Today, the requirement of reliable performance is made even more stringent when server farms are the delivery platform. Google has managed this by using <b>fault-tolerant</b> software to recover from hardware failures, and is even working {{on the concept of}} replacing entire server farms on-the-fly, during a service event.|$|E
500|$|The {{successful}} {{techniques used}} by ant colonies {{have been studied}} in computer science and robotics to produce distributed and <b>fault-tolerant</b> systems for solving problems, for example Ant colony optimization and Ant robotics. This area of biomimetics has led to studies of ant locomotion, search engines that make use of [...] "foraging trails", <b>fault-tolerant</b> storage, and networking algorithms.|$|E
500|$|One of {{the main}} motivations for {{studying}} book embedding cited by [...] involves an application in VLSI design, to the organization of <b>fault-tolerant</b> multiprocessors. In the DIOGENES system developed by these authors, the CPUs of a multiprocessor system are arranged into a logical sequence corresponding to the spine of a book (although this sequence {{may not necessarily be}} placed along a line in the physical layout of this system). Communication links connecting these processors are grouped into [...] "bundles" [...] which correspond to the pages of a book and act like stacks: connecting one of the processors to {{the start of a new}} communications link pushes all the previous links upward in the bundle, and connecting another processor to the end of a communication link connects it to the one at the bottom of the bundle and pops all the other ones down. Because of this stack behavior, a single bundle can handle a set of communications links that form the edges of a single page in a book embedding. [...] By organizing the links in this way, a wide variety of different network topologies can be implemented, regardless of which processors have become faulty, as long as enough non-faulty processors remain to implement the network. [...] The network topologies that can be implemented by this system are exactly the ones that have book thickness at most equal to the number of bundles that have been made available.|$|E
2500|$|Part 3: Low-speed, <b>fault-tolerant,</b> medium-dependent {{interface}} ...|$|E
2500|$|The {{successful}} {{techniques used}} by ant colonies {{have been studied}} in computer science and robotics to produce distributed and <b>fault-tolerant</b> systems for solving problems. This area of biomimetics has led to studies of ant locomotion, search engines that make use of [...] "foraging trails", <b>fault-tolerant</b> storage and networking algorithms.|$|E
2500|$|... is a {{high-performance}} Byzantine <b>fault-tolerant</b> state machine replication library developed in Java with simplicity and robustness as primary requirements.|$|E
2500|$|SpaceX uses {{multiple}} redundant [...] in a <b>fault-tolerant</b> {{design in}} the Falcon9 rocket. Each Merlin engine is controlled by three voting computers, with two physical processors per computer that constantly check each other's operation. Linux is not inherently <b>fault-tolerant</b> (no operating system is, {{as it is a}} function of the whole system including the hardware), but the flight computer software makes it so for its purpose. For flexibility, commercial off-the-shelf parts and system-wide [...] "radiation-tolerant" [...] design are used instead of radiation hardened parts. , SpaceX has made 19 launches of the Falcon9 since 2010, out of which 18 have successfully delivered their primary payloads to Earth orbit, including some support missions for the International Space Station.|$|E
2500|$|In <b>fault-tolerant</b> {{computer}} systems, and {{in particular}} distributed computing systems, Byzantine fault tolerance (BFT) is the characteristic {{of a system that}} tolerates the class of failures known as the Byzantine Generals' Problem, which is a generalized version of the Two Generals' Problem – for which there is an unsolvability proof.|$|E
2500|$|In particular, {{his paper}} [...] "Self-stabilizing Systems in Spite of Distributed Control" [...] (1974) started the {{sub-field}} of self-stabilization. It is also considered {{as the first}} scientific examination of <b>fault-tolerant</b> systems. Dijkstra's paper was not widely noticed until Leslie Lamport's invited talk at the ACM Symposium on Principles of Distributed Computing (PODC) in 1983. In his report on Dijkstra's work on self-stabilizing distributed systems, Lamport regard it to be 'a milestone in work on fault tolerance' and 'a very fertile field for research'.|$|E
2500|$|Composite {{switches}} {{are inherently}} <b>fault-tolerant.</b> If a subswitch fails, the controlling computer can sense it during a periodic test. The computer marks all the {{connections to the}} subswitch as [...] "in use". This prevents new calls, and does not interrupt old calls that remain working. As calls in progress end, the subswitch becomes unused, and new calls avoid the subswitch because it's already [...] "in use." [...] Some time later, a technician can replace the circuit board. When the next test succeeds, the connections to the repaired subsystem are marked [...] "not in use", and the switch returns to full operation.|$|E
2500|$|USA - Unconventional Stellar Aspect (1990-22/NRL) - Sponsored by Naval Research Lab, Space Science Division, the USA {{experiment}} {{was designed to}} observe bright x-ray sources, mostly binary star systems, including a black hole, a neutron star, or a white dwarf, orbiting with a more typical star. In neutron stars, gravity has compressed matter down to densities larger than {{those found in the}} nucleus of an atom. In all of these types of binary systems, extraordinarily strong, relativistic gravitational forces and enormous magnetic fields act in concert to produce dramatic phenomena not observable from Earth-based laboratories. [...] In addition to providing valuable new information for astrophysicists and particle physicists, USA has been designed to make significant contributions to applied science, environmental science, and engineering research. It will use x-ray sources to test new approaches to satellite navigation and to conduct the first tomographic survey of Earth's atmosphere. It will also test new concepts for making spacecraft computers more reliable, an approach called <b>fault-tolerant</b> computing. [...] Finally, a unique feature of USA is that photon events are time tagged by reference to an onboard GPS receiver allowing precise absolute time and location determination. [...] USA operated from May 1, 1999, through November 16, 2000.|$|E
50|$|As a <b>fault-tolerant</b> time-triggered protocol, TTP {{provides}} autonomous <b>fault-tolerant</b> message transport at known {{times and}} with minimal jitter by employing a TDMA (Time-Division Multiple Access) strategy on replicated communication channels. TTP offers <b>fault-tolerant</b> clock synchronization that establishes the global time base without {{relying on a}} central time server.|$|E
5000|$|... “An Efficient, <b>Fault-Tolerant</b> Protocol for Replication Management,” <b>Fault-Tolerant</b> Distributed Computing, B. Simmons and A. Spector, editors, Springer-Verlag, 1990. With A. El Abbadi and F. Cristian.|$|E
50|$|Many {{distributed}} filesystems use replication {{to ensure}} fault tolerance and avoid {{a single point}} of failure. See the lists of distributed <b>fault-tolerant</b> file systems and distributed parallel <b>fault-tolerant</b> file systems.|$|E
5000|$|... #Caption: Distributed and <b>fault-tolerant</b> realtime {{computation}} ...|$|E
5000|$|Part 3: Low-speed, <b>fault-tolerant,</b> medium-dependent {{interface}} ...|$|E
50|$|Marathon Technologies Corp. {{was founded}} by senior {{executives}} and engineers responsible for developing Digital Equipment Corporation's VAXft <b>fault-tolerant</b> systems. The team used this experience to create the first software and networking technology that allowed multiple Windows/Intel servers to operate as a single <b>fault-tolerant</b> system.|$|E
5000|$|Designing <b>fault-tolerant,</b> {{redundant}} digital fieldbus physical layers ...|$|E
50|$|Chiron Filesystem is a <b>fault-tolerant</b> {{replication}} file system.|$|E
5000|$|Tandem Computers {{in their}} NonStop Himalaya <b>fault-tolerant</b> servers ...|$|E
5000|$|The {{successful}} {{techniques used}} by ant colonies {{have been studied}} in computer science and robotics to produce distributed and <b>fault-tolerant</b> systems for solving problems. This area of biomimetics has led to studies of ant locomotion, search engines that make use of [...] "foraging trails", <b>fault-tolerant</b> storage and networking algorithms.|$|E
5000|$|A <b>Fault-Tolerant</b> High Performance Cloud Strategy for Scientific Computing ...|$|E
5000|$|Tandem Computers {{developed}} an implementation for their <b>fault-tolerant</b> computers.|$|E
5000|$|List of file systems § Distributed <b>fault-tolerant</b> file systems ...|$|E
50|$|<b>Fault-tolerant</b> {{software}} has {{the ability}} to satisfy requirements despite failures.|$|E
50|$|<b>Fault-tolerant</b> {{systems are}} {{typically}} {{based on the}} concept of redundancy.|$|E
5000|$|... #Caption: A {{conceptual}} {{design of a}} segregated-component <b>fault-tolerant</b> computer design ...|$|E
5000|$|Tandem Computers {{for their}} NonStop Cyclone/R and CLX/R <b>fault-tolerant</b> servers ...|$|E
5000|$|List of file systems, Distributed {{parallel}} <b>fault-tolerant</b> file systems section ...|$|E
5000|$|List of {{file system}}s, the {{distributed}} <b>fault-tolerant</b> file system section ...|$|E
