715|1168|Public
25|$|Improved {{performance}} of <b>file</b> <b>access</b> via Shared Folders.|$|E
25|$|Like Windows for Workgroups 3.11, Windows 9x {{provides}} {{support for}} 32-bit <b>file</b> <b>access</b> based on IFSHLP.SYS, and unlike Windows 3.x, Windows 9x has {{support for the}} VFAT file system, allowing file names with a maximum of 255 characters instead of having 8.3 filenames.|$|E
25|$|A {{filename}} {{could be}} stored using different byte strings in distinct systems {{within a single}} country, such as if one used Japanese Shift JIS encoding and another Japanese EUC encoding. Conversion was not possible as most systems did not expose {{a description of the}} encoding used for a filename as part of the extended file information. This forced costly filename encoding guessing with each <b>file</b> <b>access.</b>|$|E
5000|$|Source: 2000 and 2010 Census Redistricting Data (Public Law 94-171) Summary <b>File</b> <b>accessed</b> on US Census Bureau [...] "American FactFinder" [...] site ...|$|R
5000|$|Completely {{automatic}} dependency detection. The Vesta builder records <b>file</b> <b>accesses</b> {{made during}} builds, {{rather than having}} the user explicitly specify as with the earlier Make tool.|$|R
5000|$|Contig can't {{defragment}} <b>files</b> <b>accessed</b> through directory mount points (as {{opposed to}} drive letter mounts). Using an additional (temporary) drive letter will circumvent this problem. See subst command.|$|R
25|$|Many {{operating}} systems support {{one or more}} vendor-specific or open networking protocols as well, for example, SNA on IBM systems, DECnet on systems from Digital Equipment Corporation, and Microsoft-specific protocols (SMB) on Windows. Specific protocols for specific tasks may also be supported such as NFS for <b>file</b> <b>access.</b> Protocols like ESound, or esd can be easily extended over the network to provide sound from local applications, on a remote system's sound hardware.|$|E
25|$|Over {{the years}} the {{computing}} model changed, and Unix's treatment of everything as a file or byte stream no longer was as universally applicable as it was before. Although a terminal could {{be treated as a}} file or a byte stream, which is printed to or read from, the same {{did not seem to be}} true for a graphical user interface. Networking posed another problem. Even if network communication can be compared to <b>file</b> <b>access,</b> the low-level packet-oriented architecture dealt with discrete chunks of data and not with whole files. As the capability of computers grew, Unix became increasingly cluttered with code. It is also because the modularity of the Unix kernel is extensively scalable. While kernels might have had 100,000 lines of code in the seventies and eighties, kernels of modern Unix successors like Linux have more than 13 million lines.|$|E
25|$|The Java class {{libraries}} serve three purposes {{within the}} Java platform. First, like other standard code libraries, the Java libraries provide the programmer a well-known {{set of functions}} to perform common tasks, such as maintaining lists of items or performing complex string parsing. Second, the class libraries provide an abstract interface to tasks that would normally depend heavily on the hardware and operating system. Tasks such as network access and <b>file</b> <b>access</b> are often heavily intertwined with the distinctive implementations of each platform. The java.net and java.io libraries implement an abstraction layer in native OS code, then provide a standard interface for the Java applications to perform those tasks. Finally, when some underlying platform does not support all of the features a Java application expects, the class libraries work to gracefully handle the absent components, either by emulation to provide a substitute, or at least by providing a consistent way to check {{for the presence of}} a specific feature.|$|E
50|$|SevenDust is a {{polymorphic}} virus, {{with some}} variant also being encrypted. It spreads by users running an infected executable. Some variants of SevenDust also delete all non-application <b>files</b> <b>accessed</b> during certain times.|$|R
5000|$|An {{overview}} of ISO 21500 {{as well as}} an abbreviated version [...] "the pocket guide" [...] available as a sample <b>file.</b> (<b>Accessed</b> March 2014) [...] and favorably commented upon by one industry observer.|$|R
30|$|Other {{bypassing}} {{strategies are}} possible, including pre-register allocation bypassing [28], recursively bypassing chain of operations on critical path, bypassing after the block is fully scheduled without changing schedule to reduce only register <b>file</b> <b>accesses,</b> etc.|$|R
2500|$|One {{approach}} to implementing cloud antivirus involves scanning suspicious files using multiple antivirus engines. This approach was proposed by an early {{implementation of the}} cloud antivirus concept called CloudAV. CloudAV was designed to send programs or documents to a network cloud where multiple antivirus and behavioral detection programs are used simultaneously {{in order to improve}} detection rates. Parallel scanning of files using potentially incompatible antivirus scanners is achieved by spawning a virtual machine per detection engine and therefore eliminating any possible issues. CloudAV can also perform [...] "retrospective detection," [...] whereby the cloud detection engine rescans all files in its <b>file</b> <b>access</b> history when a new threat is identified thus improving new threat detection speed. Finally, CloudAV is a solution for effective virus scanning on devices that lack the computing power to perform the scans themselves.|$|E
5000|$|... 32-bit {{disk access}} {{should not be}} {{confused}} with 32-bit <b>file</b> <b>access.</b> Although both technologies are similar, 32-bit disk access was introduced with Windows 3.1 and <b>file</b> <b>access</b> with Windows for Workgroups 3.11. 32-bit <b>file</b> <b>access</b> provided a 32-bit code path for Windows to directly access the disk bus by intercepting the MS-DOS Int 21H services while remaining in 386 protected mode and at CPU speeds, rather than handling the Int 21H services in real mode by MS-DOS. 32-bit disk access offers less performance and is less likely to work on many computers than 32-bit <b>file</b> <b>access.</b> 32-bit <b>file</b> <b>access</b> does not require 32-bit disk access.|$|E
50|$|Once you do that, your {{application}} {{will be able}} to save its documents locally or remotely transparently. Or simpler, the high level module using the new <b>file</b> <b>access</b> interfaces can be used indistinctly in local or remote <b>file</b> <b>access</b> scenarios making it reusable.|$|E
5000|$|The {{programmer}} specifies [...] in his Data Control Block (DCB) {{to indicate}} use of BDAM. Space for a direct <b>file</b> (<b>accessed</b> by BDAM) must be allocated in contiguous tracks by coding [...] in the DD statement.|$|R
30|$|Apart {{from these}} 12 count metrics, four more metrics are also used. The {{features}} examined for these metric computations are, Global and local variables defined or used, Functions called, <b>Files</b> <b>accessed,</b> I/O operations and defined/used parameters passed by reference and by value.|$|R
40|$|In {{this work}} {{we examine the}} user {{behavior}} of the National Center for Atmospheric Research’s (NCAR) archive. In particular we characterized user sessions and examined namespace locality of accesses within those sessions. Preliminary results suggest within a single session, repeat <b>file</b> <b>accesses</b> are uncommon, and that <b>accessed</b> <b>files</b> are localized within a small set of directories. This work provides a baseline and preliminary results {{for a more detailed}} future study. ...|$|R
5000|$|... raccess (remote <b>file</b> <b>access</b> via /net/machine/path/from/raccess/root...) ...|$|E
50|$|ALGOL 60 {{was criticized}} for having no {{standard}} <b>file</b> <b>access.</b>|$|E
50|$|Also, {{it should}} not be {{confused}} with 32-bit disk access. Although both technologies are similar, 32-bit disk access (also known as FastDisk) pre-dates Windows for Workgroups 3.11. 32-bit <b>file</b> <b>access</b> provided a 32-bit code path for Windows to directly access the disk bus by intercepting the MS-DOS Int 21H services while remaining in 386 protected mode, rather than handling the Int 21H services in real mode by MS-DOS. 32-bit disk access offers relatively less performance and is less likely to work on many computers than 32-bit <b>file</b> <b>access.</b> 32-bit <b>file</b> <b>access</b> does not need 32-bit disk access.|$|E
5000|$|A {{compressed}} {{file library}} (CFL) {{is designed to}} work as a virtual file system for programs, especially for video games. By compressing various game resources into one file, it is able to lower the number of <b>file</b> <b>accesses.</b> The resources can also be encrypted in the CFL.|$|R
2500|$|... http://www.google.com/patents?id=vatPAAAAEBAJ “Manifold”, U.S. Patent 2,262,627, <b>filed</b> 1938-11-15, <b>accessed</b> 2008-02-18 ...|$|R
5000|$|Variable and <b>file</b> based <b>access</b> to the {{resources}} in the device ...|$|R
5000|$|Distributed Data Management Architecture - access {{methods for}} {{distributed}} <b>file</b> <b>access.</b>|$|E
5000|$|... {{real-time}} remote <b>file</b> <b>access,</b> replication, collaboration & {{sharing with}} automatic file synchronization ...|$|E
5000|$|The client authenticates {{itself with}} the file manager and {{requests}} for the <b>file</b> <b>access.</b>|$|E
40|$|We {{address the}} problem of {{assigning}} non-partitioned files in a parallel I/O system where the <b>file</b> <b>accesses</b> exhibit Poisson arrival rates and fixed service times. We present two new file assignment algorithms based on open queueing networks which aim at simultaneously minimizing simultaneously the load balance across all disks as well as the variance of the service time at each disk. We first present an off-line algorithm, Sort Partition, which assigns to each disk <b>files</b> with similar <b>access</b> time. Next we show that, assuming that a perfectly balanced file assignment can be found for a given set of files, Sort Partition will find the file assignment with minimal mean response time. We then present an on-line algorithm, Hybrid Partition, that assigns groups of files with similar service times in successive intervals while guaranteeing that the load imbalance at any point does not exceed a certain threshold. We report on synthetic experiments which exhibit skew in <b>file</b> <b>accesses</b> and sizes, and we compare the performance of our new algorithms with the vanilla greedy file allocation algorithm...|$|R
50|$|DynamoRIO's API and event callbacks are {{designed}} to be cross-platform, enabling the same tool code to operate on both Windows and Linux and on both IA-32 and x86-64. DynamoRIO ensures tool transparency by isolating the tool's resources, such as its stack, memory, and <b>file</b> <b>accesses,</b> from the program upon which the tool is operating.|$|R
50|$|Copies of <b>files</b> <b>accessed</b> over MTP {{may remain}} on the host {{computer}} even after reboot, {{where they will be}} accessible to the user account which accessed them, as well as any other user accounts able to read that user account's files, including any administrative users. Windows 7's sensor platform supports sensors built into MTP-compatible devices.|$|R
50|$|In 1987, Greenberg and Sonya Keene {{authored}} RFC 1037. NFILE - a <b>file</b> <b>access</b> protocol.|$|E
50|$|In Unix's chmod, {{the value}} 777 grants all <b>file</b> <b>access</b> permissions to all user types.|$|E
5000|$|Distributed locking. This {{allows for}} full Posix {{filesystem}} semantics, including locking for exclusive <b>file</b> <b>access.</b>|$|E
50|$|TeamWare is {{implemented}} as a layer over the older SCCS, {{which is used}} to track changes to individual files. TeamWare works only by a system of <b>files</b> <b>accessed</b> by client programs (interacting without a server) and most distributed users of a repository access it by means of a mounted networked filesystem such as NFS.|$|R
5000|$|Part 2 (optional services): <b>File</b> system <b>access,</b> Data logging, Service Access points, ...|$|R
40|$|This paper {{presents}} a cache prefetching algorithm for mid-size and large storage systems. A storage system sees physical block addresses of the submitted I/O requests {{but has no}} knowledge of the mapping between these physical blocks and their corresponding files. Since I/O requests for various files arrive in an interleaved fashion at a storage system, it is difficult for the storage controller to determine if some of these <b>file</b> <b>accesses</b> are sequential. The cache prefetching algorithm addresses this problem by keeping track of past I/O request addresses and identifying sequential <b>file</b> <b>accesses</b> when the address of an incoming I/O request adjoins that of a past I/O request address. Only identified sequential streams are prefetched into the storage system cache. Simulations results show that the prefetching algorithm improves storage system performance by increasing the read-ahead hit rate of an array cache while reducing the read-ahead traffic generated to the disks...|$|R
