5|0|Public
40|$|<b>J-SEAL</b> 2 is a secure, portable, and {{efficient}} execution environment for mobile agents. The {{core of the}} system is a micro-kernel fulfilling the same functions as a traditional operating system kernel: protection, communication, domain termination, and resource control. This paper describes the key concepts of the <b>J-SEAL</b> 2 micro-kernel and how they are implemented in pure Java...|$|E
40|$|Prevention of denial-of-service attacks is {{indispensable}} for distributed agent systems to execute securely. To implement the required defense mechanisms, {{it is necessary}} to have support for resource control, i. e., accounting and limiting the consumption of resources like CPU, memory, and threads. Java is the predominant implementation language for mobile agent systems, even though resource control is a missing feature on standard Java platforms. Moreover, prevailing approaches to resource control in Java require substantial support from native code libraries, which is a serious disadvantage with respect to portability, since it prevents the deployment of applications on large-scale heterogeneous networks. This article describes the model and implementation mechanisms underlying the new resource-aware version of the <b>J-SEAL</b> 2 mobile agent kernel. The resource control model is based on a set of requirements, where portability is very significant, as well as a natural integration with the existing programming model. The implementation consists of a combination of Java byte-code rewriting with well-chosen enhancements in the <b>J-SEAL</b> 2 kernel. Realization of a resource control system may be prompted by motivations such as the need for application service providers to guarantee a certain quality of service, or to create the support for usage-based billing. In this article the design strategy is however focussed on security, and more specifically on preventing denial-of-service attacks originating from mobile agents running on the platform. Initial performance measurements are also presented, which back our approach. ...|$|E
40|$|Even {{though the}} benets of mobile agents have been {{highlighted}} in numerous research works, mobile agent applications {{are not in}} widespread use today. For the success of mobile agent applications, secure, portable, and e√Ücient execution platforms for mobile agents are crucial. However, available mobile agent systems {{do not meet the}} high security requirements of commercial applications, are not portable, or cause high overhead. Currently, the majority of mobile agent platforms is based on Java. These systems simply rely on the security facilities of Java, although the Java secu-rity model is not suited to protect agents and service components from each other. Above all, Java is lacking a concept of strong protection domains {{that could be used to}} isolate agents. The <b>J-SEAL</b> 2 mobile agent system extends the Java environment with a model of strong protection domains. The core of the system is a micro-kernel ful lling the same functions as a traditional operating system kernel: Protec...|$|E
40|$|Preventing abusive {{resource}} {{consumption is}} indispensable {{for all kinds}} of systems that execute untrusted mobile code, such as mobile object systems, extensible web servers, and web browsers. To implement the required defense mechanisms, some support for resource control must be available: accounting and limiting the usage of physical resources like CPU and memory, and of logical resources like threads. Java is the predominant implementation language for the kind of systems envisaged here, even though resource control is a missing feature on standard Java platforms. This paper describes the model and implementation mechanisms underlying the new resource-aware version of the <b>J-SEAL</b> 2 mobile object kernel. Our fundamental objective is to achieve complete portability, and our approach is therefore based on Java bytecode transformations. Whereas resource control may be targeted towards the provision of quality of service or of usage-based billing, the focus of this paper is on security, and more specifically on prevention of denial-of-service attacks originating from hostile or poorly implemented mobile code. Keywords Bytecode rewriting, Java, micro-kernels, mobile object systems, resource control, security 1...|$|E

