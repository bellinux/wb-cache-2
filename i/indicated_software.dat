1|334|Public
30|$|Digital image {{processing}} operations are related with global changes including image correction, filtering, colorization, or local {{changes in a}} selected region where altering processes take place. Commercial or artistic photomontages take the local changes in images into account. Along with the technologic improvement, some softwares, such as Adobe© Photoshop©, have been released for image editing. However, professional experience is required {{to be able to}} use those kinds of softwares efficiently, and editing photos by the <b>indicated</b> <b>software</b> is tiresome. In addition, the regions altered using those tools may include some visible artifacts.|$|E
50|$|SMF type 89 records <b>indicate</b> <b>software</b> product {{usage and}} are used to {{calculate}} reduced sub-capacity software pricing.|$|R
5000|$|... {{undesired}} differences, which <b>indicate</b> a <b>software</b> regression generally {{caused by}} a side-effect bug.|$|R
50|$|Fault {{reporting}} is an optional feature {{that can be}} forwarded to remote displays using simple configuration setting in all modern computing equipment. The system level of reporting that is appropriate for Condition Based Maintenance are critical, alert, and emergency, which <b>indicate</b> <b>software</b> termination due to failure. Specific failure reporting, like interface failure, can be integrated into applications linked with these reporting systems. There is no development cost if these are incorporated into designs.|$|R
40|$|Discovering {{patterns}} that <b>indicate</b> <b>software</b> reliability provides valuable information to software project managers. Software Quality Classification (SQC) modeling is a methodology {{that can be}} used to discover reliability patterns of large software projects. However, the patterns found by SQC modeling may not be accurate and robust owing to insufficient information used in the training process. This study compares two genetic programming-based SQC models using different volumes of data. These data were extracted from seven different NASA software projects. The results demonstrate that combining data from different projects can produce more accurate and reliable patterns...|$|R
5000|$|The {{character}} {{has been used}} on the Macintosh to mean folder, in particular {{as part of a}} folder name. For example, the game Bugdom, when included on some Mac OS 9 installations, was contained in a folder called [...] "Bugdom ƒ". This usage has died out with the advent of Mac OS X. The Macintosh Programmer's Workshop also used the character to <b>indicate</b> <b>software</b> dependencies, from which the folder usage derived (the folder contained the files required to run the program). The character is created on the Macintosh by pressing [...]|$|R
30|$|However, the “other” {{response}} {{option in}} all questions may have mitigated {{this problem by}} allowing people from other countries to provide responses <b>indicating</b> different <b>software</b> that is more suitable for their locality.|$|R
5000|$|International support: <b>indicates</b> if the <b>software</b> has {{support for}} {{multiple}} language environments and operating system ...|$|R
50|$|Both the Wolchok et al. {{report and}} a {{technical}} analysis released on Wikileaks <b>indicated</b> that <b>software</b> contains code libraries and a configuration file from the BSD-licensed computer vision library OpenCV. The Wikileaks document said the software violated the BSD license.|$|R
5000|$|Unicode {{filename}} support: <b>indicates</b> if the <b>software</b> has {{support for}} interoperations under file systems using different character encodings.|$|R
50|$|In computing, syslog is a {{standard}} for message logging. It allows separation of the software that generates messages, the system that stores them, and the software that reports and analyzes them. Each message is labeled with a facility code, <b>indicating</b> the <b>software</b> type generating the message, and assigned a severity label.|$|R
5000|$|For {{petroleum}} distributors, iRely {{offers the}} Energy Trac in-truck billing system. [...] In July 2012, iRely’s petroleum distribution truck software received certification from the National Type Elevation Program (NTEP) of the National Conference on Weights and Measures, <b>indicating</b> the <b>software</b> as met requirements for commercial weighing and measuring {{equipment in the}} U.S.|$|R
40|$|Software quality can be {{characterized}} as meeting customer requirements at the agreed cost within the established time frame. Currently, the sad state of <b>software</b> quality <b>indicates</b> new <b>software</b> development approaches might be warranted. One of the most dramatic examples of software project failures is the London Stock Exchange (called Taurus) developed eleven years late and 13, 200...|$|R
40|$|This paper states how {{software}} agents {{will influence}} the present marketing prototype in interactive media. It {{focuses on the}} importance of these in E-Commerce. E-Commerce is a platform for the online activities of commerce, increase in the activities of trade in cyberspace increases the business opportunities over internet. Software agents are the useful tools to help individuals to undertake their activities on E-Commerce surroundings. Software agents create different paths for communication. Software agents increase the effectiveness and efficiency in several levels of market processes. The agent technology builds the bridge between the previously existing physical market and consequences of virtual markets. Software agents will have dramatic competition effects by quick transfer of information through new technology. As the name <b>indicates</b> <b>software</b> agents acts as mediators for the processes of choosing products and merchants. Overall software agents act as a vehicle between E-Commerce and business...|$|R
40|$|Measures were {{recommended}} {{to assess the}} quality of software submitted to the AdaNet program. The quality factors {{that are important to}} software reuse are explored and methods of evaluating those factors are discussed. Quality factors important to software reuse are: correctness, reliability, verifiability, understandability, modifiability, and certifiability. Certifiability is included because the documentation of many factors about a software component such as its efficiency, portability, and development history, constitute a class for factors important to some users, not important at all to other, and impossible for AdaNet to distinguish between a priori. The quality factors may be assessed in different ways. There are a few quantitative measures which have been shown to <b>indicate</b> <b>software</b> quality. However, it is believed that there exists many factors that indicate quality and have not been empirically validated due to their subjective nature. These subjective factors are characterized by {{the way in which they}} support the software engineering principles of abstraction, information hiding, modularity, localization, confirmability, uniformity, and completeness...|$|R
40|$|Software defects are {{generally}} used to <b>indicate</b> <b>software</b> quality. However, {{due to the}} nature of software, we are often only able to know about the defects found and reported; either following the testing process or after being deployed. In software research studies, it is assumed that a higher amount of defect reports represents a higher amount of defects in the software system. In this paper, we argue that widely deployed programs have more reported defects, regardless of their actual number of defects. To address this question, we perform a case study on the Debian GNU/Linux distribution, a well-known free / open source software collection. We compare the defects reported for all the software packages in Debian with their popularity. We find that the number of reported defects for a Debian package is limited by its popularity. This finding has implications on defect prediction studies, showing that they need to consider the impact of popularity on perceived quality, otherwise they might be risking bias...|$|R
40|$|AbstractStatic program {{analysis}} complements traditional dynamic testing by discovering generic {{patterns and}} relations in source code, which <b>indicate</b> <b>software</b> deficiencies such as memory corruption, unexpected program behavior and memory leaks. Since static program analysis builds on approximations of a programʼs concrete behavior {{there is often}} a trade-off between reporting potential bugs that might be the result of an over-approximation and silently suppressing those defects in that grey area. While this trade-off is less important for small files it has severe implications when facing large software packages, i. e., 1, 000, 000 LoC and more. In this work we report on experiences with using our static C/C++ analyzer Goanna on such large software systems, motivate why a flexible property specification language is vital, and present a number of decisions that had to be made to select the right checks as well as a sensible reporting strategy. We illustrate our findings by empirical data obtained from regularly analyzing the Firefox source code...|$|R
25|$|In some cases, a {{page fault}} may <b>indicate</b> a <b>software</b> bug, {{which can be}} {{prevented}} by using memory protection as one of key benefits of an MMU: an operating system {{can use it to}} protect against errant programs by disallowing access to memory that a particular program should not have access to. Typically, an operating system assigns each program its own virtual address space.|$|R
40|$|Many {{organizations}} have embraced software development project only to abandon it later after considerable {{time and effort}} has been put in it. Project abandonment occurs when either problems arise in perceiving, analysing, designing, or configuring the system objectives or the technological basis for the system and its behavioural, political, or organizational issues directly or indirectly affect ways to bring the project to a successful completion within the estimated budget and schedule constraints, or when organizational environmental factors combined to reduce the project’s expected benefits or increase its expected costs. The study is investigative in nature using questionnaire method to collect data directly from the respondents. The research subjects were heads of computer units in government-owned tertiary institution in the South-East and South-South geopolitical areas of Nigeria who {{are expected to be}} well-informed about projects carried out in their organizations. The findings of the study, though preliminary in nature <b>indicates</b> <b>software</b> projects failure and abandonment as multifaceted issue defying easy explanations. Paying attention to these factors during software project development can help avoid failure and increase successful completion of the project...|$|R
40|$|Abstract—Software defects are {{generally}} used to <b>indicate</b> <b>software</b> quality. However, {{due to the}} nature of software, we are often only able to know about the defects found and reported; either following the testing process or after being deployed. In software research studies, it is assumed that a higher amount of defect reports represents a higher amount of defects in the software system. In this paper, we argue that widely deployed programs have more reported defects, regardless of their actual number of defects. To address this question, we perform a case study on the Debian GNU/Linux distribution, a well-known free / open source software collection. We compare the defects reported for all the software packages in Debian with their popularity. We find that the number of reported defects for a Debian package is limited by its popularity. This finding has implications on defect prediction studies, showing that they need to consider the impact of popularity on perceived quality, otherwise they might be risking bias. Index Terms—defects; quality; popularity; Debian I...|$|R
40|$|Static program {{analysis}} complements traditional dynamic testing by discovering generic {{patterns and}} relations in source code, which <b>indicate</b> <b>software</b> deficiencies such as memory corruption, unexpected program behavior and memory leaks. Since static program analysis builds on approximations of a program’s concrete behavior {{there is often}} a trade-o ↵ between reporting potential bugs that might be the result of an overapproximation and silently suppressing those defects in that grey area. While this trade-o ↵ is less important for small files it has severe implications when facing large software packages, i. e., 1, 000, 000 LoC and more. In this work we report on experiences with using our static C/C++ analyzer Goanna on such large software systems, motivate why a flexible property specification language is vital, and present a number of decisions that had to be made to select the right checks as well as a sensible reporting strategy. We illustrate our findings by empirical data obtained from regularly analyzing the Firefox source code. Keywords: Source code analysis, static analysis, C/C++, false positive reduction, case study, Firefox...|$|R
40|$|Context: In recent years, {{software}} researchers begun {{to benefit from}} qualitative synthesis to systematically build knowledge about the impact and preconditions of software technologies. Qualitative synthesis refers to qualitative research methods (as opposed to quantitative) used to bring together empirical evidence in a narrative or systematic review. However, only few of the qualitative syntheses published in software engineering have shown a rigorous approach to qualitative synthesis. Thus, the current qualitative synthesis findings are neither understandable nor trustworthy. Problem: These results <b>indicate</b> <b>software</b> researchers have difficulties in identifying quality issues in qualitative syntheses and in applying existing qualitative synthesis methods. I found three problems that have hindered the use of qualitative synthesis methods in software engineering. First, the lack of consensus on the meaning on quality has impeded the definition of quality criteria and {{the design of a}} quality appraisal instrument. Second, it is unclear to what extent qualitative synthesis methods are suitable for synthesizing evidence in software engineering. Finally, the lack of evidence on the suitability of qualitative synthesis methods has impeded their proper tailoring to software engineering needs and so, their effective use. Objectives: I aimed in this PhD thesis to design a reliable and valid quality appraisal instrument for qualitative synthesis; empirically evaluate the suitability of the most mature qualitative synthesis methods, i. e., meta-ethnography and thematic analysis; and enhance existing guidelines for meta-ethnography and thematic analysis. Contributions: First, I developed an instrument to support {{software researchers}} in appraising the quality of qualitative synthesis using psychometric guidelines. I operationalized the notion of quality of qualitative synthesis into four criteria: inter-subject comprehensibility, indication of the research process, trustworthiness, and relevance. Then, I designed and validated the instrument. The results of two empirical studies indicate the instrument has acceptable inter-rater agreement, substantial inter-rater reliability, good criterion validity, and high acceptance. Second, I designed and performed a multiple-case study to characterize the suitability of meta-ethnography and thematic analysis in software engineering. Third, I tailored the current guidelines for performing meta-ethnography and thematic analysis. I specified a prescriptive process; formalize the identification, extraction, and integration of evidence; and formalize the notation used for documenting synthesis findings. Then, I designed and performed interviews to validate the proposed guidelines. The results <b>indicates</b> <b>software</b> researchers perceived the proposed guidelines as understandable, useful, and easy to use...|$|R
50|$|A {{survey of}} the Nightscout {{community}} <b>indicated</b> that the <b>software</b> was most highly used by parents of young children with type 1 diabetes (less than 12 years of age), but is also used by adolescents and adults.|$|R
5000|$|In {{contrast}} to this, the free-software community tends to use version 1.0 {{as a major}} milestone, <b>indicating</b> that the <b>software</b> is [...] "complete", that it has all major features, and is considered reliable enough for general release.|$|R
30|$|In some applications, {{points of}} a metric space have {{associated}} ‘weights.’ For instance, {{in the study}} of molecules, one can represent a molecule as a union of balls in Euclidean space [93, 94]. For such data sets, one would therefore also consider a minimum filtration value (see Section  5.2 for the description of such filtration values) at which the point enters the filtration. In Table  2 (g), we <b>indicate</b> which <b>software</b> libraries implement this feature.|$|R
40|$|This article {{discusses}} {{avenues of}} improving productivity for both custom and mass-produced software. Some {{of the topics}} covered are: The importance of improving software productivity, measuring software productivity, analyzing software productivity, improving and <b>indicating</b> trends in <b>software</b> productivit...|$|R
5000|$|In general, data clumps {{should be}} refactored. The {{presence}} of data clumps typically <b>indicates</b> poor <b>software</b> design {{because it would}} be more appropriate to formally group the different variables together into a single object, and pass around only this object instead of the numerous primitives. Using an object to replace a data clump can reduce the overall code size as well as help the program code to remain better organized, easier to read, and easier to debug.|$|R
40|$|In Informatics, {{open source}} <b>indicates</b> a <b>software</b> whose authors (specifically, the rights holders) allow, indeed, and favor the free {{study and the}} {{modifications}} made by other independent programmers. This article describes the process of re-engineering the infrastructure and information systems, primarily or exclusively using open source software, in a large organization {{of the public sector}} in Ireland, Beaumont Hospital, Dublin at. The study identifies the main drivers of the organization: principle and pragmatism. It also offers an overview of the Italian background...|$|R
40|$|This paper {{describes}} Prospect, A {{systematic approach}} to software process elicitation, and its validation in an, industrial environment. Descriptive process models are important assets in software process improvement. A {{survey of the}} state of practice <b>indicates</b> that <b>software</b> process models are insufficient in quality, the models are developed in an uneconomic way, and the success of modeling activities depends largely on the Process Engineer's experience. We present the results of an empirical study to show that Prospect circumvents these problems...|$|R
50|$|Windows 98 {{includes}} an improved {{version of the}} Dr. Watson utility that collects and lists comprehensive information such as running tasks, startup programs with their command line switches, system patches, kernel driver, user drivers, DOS drivers and 16-bit modules. With Dr. Watson loaded in the system tray, whenever a software fault occurs (general protection fault, hang, etc.), Dr. Watson will intercept it and <b>indicate</b> what <b>software</b> crashed and its cause. All of the collected information is logged to the \Windows\DrWatson folder.|$|R
50|$|SoftEther Corporation is a Japanese {{software}} company. It {{was founded}} as an industry-academia-government venture in April 2004 by University of Tsukuba students, {{with the goal}} to develop the software of the same name, SoftEther VPN. The name <b>indicated</b> that a <b>software</b> emulates an Ethernet.|$|R
40|$|Public use {{data files}} of the Survey of Income and Program Participation (SIPP) are {{expected}} to be used by many different researchers, particularly in the areas of Sociology, Economics and public policy. Possible uses of SIPP Micro-Data Files can be broadly classified into two major areas: (1) computation of summary statistics such as means, totals and ratios for states, regions, and subpopulations like Blacks, Hispanics, low income families, etc. (beyond what is published by the Bureau of the Ccnsus in SIPP reports), and computation of variances of such statistics for tests of hypotheses and statistical inferences, (2) analytical studies to understand various socioeconomic phenomena such as factors affecting the dependency on welfare, or variables affecting the risk of experiencing an event; e. g., marriage, child birth, divorce or unemployment. These analytical studies will generally involve some form of rnultiwub analysis and statistical modeling techniques. Data analysts can usually compute summary statbtics from micro-data files easily. Estimation of variances and multivariate analysis of survey data are, however, not so easy. It is, therefore, desirable to wovide guidelines to tlsers on how to compute sampling errors and conduct a multivariate analysis or statistical modeling. The guidelines should also <b>indicate</b> <b>software</b> packages that arc appropriate for computation of variances or multivariate analyses s...|$|R
40|$|This paper {{presents}} a microkernel architecture for constraint programming organized around {{a number of}} small number of core functionalities and minimal interfaces. The architecture contrasts with the monolithic nature of many implementations. Experimental results <b>indicate</b> that the <b>software</b> engineering benefits are not incompatible with runtime efficiency...|$|R
50|$|On February 18, 2004, the Federal Trade Commission {{released}} a statement <b>indicating</b> that Bonzi <b>Software,</b> Inc. was ordered to pay $75,000 in fees, among other aspects, for violating the Children's Online Privacy Protection Act by collecting personal information from {{children under the age}} of 13 with BonziBuddy.|$|R
50|$|Dealership sales data {{suggests}} that many dealers more than double their profits per sale by using Drive Motors or a similar plugin. Statistics taken from the Drive Motors <b>software,</b> <b>indicates</b> that 45 percent of their online purchases takes place between 5pm and 4am, hours when dealerships are traditionally closed.|$|R
40|$|We {{present the}} results of a {{descriptive}} survey to ascertain the relevance and the typology of the software error/defect identification methods/approaches used in the industrial practice. The study involved indus- tries/organizations that develop and sell software as a main part of their business or develop software {{as an integral part of}} their products or services. The results <b>indicated</b> that <b>software</b> error/defect identifica- tion is very relevant and regard almost the totality of the interviewed companies. The most widely used and popular practice is testing. An increasing interest has been also manifested in distributed inspection methods...|$|R
