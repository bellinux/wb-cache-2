4970|4433|Public
5|$|Like all C++ class templates, instantiations of {{standard}} library containers with different allocator arguments are distinct types. A function expecting an std::vector argument will therefore only accept a vector <b>instantiated</b> with the default allocator.|$|E
25|$|In {{the more}} general case, where {{sub-goals}} share variables, other strategies can be used, such as choosing the subgoal that is most highly <b>instantiated</b> or that is sufficiently <b>instantiated</b> so that only one procedure applies. Such strategies are used, for example, in concurrent logic programming.|$|E
25|$|Oneness—That God {{is without}} peer, also that every divine {{attribute}} is <b>instantiated</b> {{in its entirety}} (the qualitative infinity of God). See also Monotheism and Divine simplicity.|$|E
5000|$|In {{the above}} UML class diagram, the [...] class that {{requires}} a [...] object doesn't <b>instantiate</b> the [...] class directly.Instead, the [...] refers to a separate [...] to create a product object,which makes the [...] independent of which concrete class is instantiated.Subclasses of [...] can redefine which class to <b>instantiate.</b> In this example, the [...] subclass implements the abstract [...] by <b>instantiating</b> the [...] class.|$|R
50|$|To <b>instantiate</b> {{a generic}} unit, the {{programmer}} passes actual parameters for each formal. The generic instance then behaves {{just like any}} other unit. It is possible to <b>instantiate</b> generic units at run-time, for example inside a loop.|$|R
5000|$|For other theorists (e.g., functionalists), who define mental {{states in}} terms of causal roles, any system that can <b>instantiate</b> {{the same pattern of}} causal roles, {{regardless}} of physical constitution, will <b>instantiate</b> the same mental states, including consciousness (...) [...]|$|R
25|$|Multiple sets of {{mnemonics}} or assembly-language syntax {{may exist}} {{for a single}} instruction set, typically <b>instantiated</b> in different assembler programs. In these cases, the most popular one is usually that supplied by the manufacturer and used in its documentation.|$|E
25|$|After the {{inevitable}} cooling of marketing hype, object libraries {{continue to be}} used in both object-oriented programming and distributed information systems. Class libraries are the rough OOP equivalent of older types of code libraries. They contain classes, which describe characteristics and define actions (methods) that involve objects. Class libraries are used to create , or objects with their characteristics set to specific values. In some OOP languages, like Java, the distinction is clear, with the classes often contained in library files (like Java's JAR file format) and the <b>instantiated</b> objects residing only in memory (although potentially able to be made persistent in separate files). In others, like Smalltalk, the class libraries are merely the starting point for a system image that includes the entire state of the environment, classes and all <b>instantiated</b> objects.|$|E
25|$|For {{refutation}} tableaux, {{the objective}} is to show that the negation of a formula cannot be satisfied. There are rules for handling each of the usual connectives, starting with the main connective. In many cases, applying these rules causes the subtableau to divide into two. Quantifiers are <b>instantiated.</b> If any branch of a tableau leads to an evident contradiction, the branch closes. If all branches close, the proof is complete and the original formula is a logical truth.|$|E
5000|$|... // Code somewhere// <b>instantiating</b> {{an object}} {{with the primary}} constructorlet c1 = new MyClass(42, [...] "string")// <b>instantiating</b> an object with {{additional}} constructorslet c2 = new MyClass(42)let c3 = new MyClass("string")let c4 = MyClass (...) // [...] "new" [...] keyword is optional ...|$|R
25|$|Propositional {{calculus}} restricts {{attention to}} abstract propositions, those built up from propositional variables using Boolean operations. Instantiation {{is still possible}} within propositional calculus, but only by <b>instantiating</b> propositional variables by abstract propositions, such as <b>instantiating</b> Q by Q→P in P→(Q→P) to yield the instance P→((Q→P)→P).|$|R
5000|$|... <b>instantiate</b> a frame {{parameter}} (a construction-time expression evaluation); ...|$|R
25|$|Aristotle {{disagreed}} with Plato on this point, arguing that all universals are <b>instantiated.</b> Aristotle {{argued that there}} are no universals that are unattached to existing things. According to Aristotle, if a universal exists, either as a particular or a relation, then there must have been, must be currently, or must be in the future, something on which the universal can be predicated. Consequently, according to Aristotle, if it is not the case that some universal can be predicated to an object that exists at some period of time, then it does not exist.|$|E
25|$|Armstrong rejects dispositionalism, {{the idea}} that dispositional {{properties}} (or powers as they are sometimes referred to) are ontologically significant and {{have an important role}} in explaining laws of nature. Armstrong believes that the challenge that dispositionalism presents for his account of laws of nature is not in the case of manifested dispositions (say, a glass dropping on the ground and breaking) but unmanifested dispositions (the fact that counter factually if one were to drop the glass on the ground, it would break). Armstrong simply states that the disposition is simply {{in the nature of the}} <b>instantiated</b> properties of the thing which is supposed to have the disposition.|$|E
25|$|The {{functionality}} is {{only provided}} via a public API, {{which can be}} used by any application to provide screen sharing functionality. Windows Desktop Sharing API exposes two objects: RDPSession for the sharing session and RDPViewer for the viewer. Multiple viewer objects can be <b>instantiated</b> for one Session object. A viewer can either be a passive viewer, who is just able to watch the application like a screencast, or an interactive viewer, who is able to interact in real time with the remote application. The RDPSession object contains all the shared applications, represented as Application objects, each with Window objects representing their on-screen windows. Per-application filters capture the application Windows and package them as Window objects. A viewer must authenticate itself before it can connect to a sharing session. This is done by generating an Invitation using the RDPSession. It contains an authentication ticket and password. The object is serialized and sent to the viewers, who need to present the Invitation when connecting.|$|E
5000|$|... // <b>Instantiate</b> {{a message}} Message msg = new MimeMessage(session); ...|$|R
5000|$|<b>Instantiate</b> a SQL {{object with}} the CreateSQL {{built-in}} function.|$|R
5000|$|... to <b>instantiate</b> the {{appropriate}} bean {{to perform the}} operation(s).|$|R
500|$|One of the cited main {{motivations for}} the decltype {{proposal}} was {{the ability to}} write perfect forwarding function templates. It is sometimes desirable to write a generic forwarding function that returns the same type as the wrapped function, regardless of the type it is <b>instantiated</b> with. Without decltype, it is not generally possible to accomplish this. An example, which also utilizes the trailing-return-type: ...|$|E
500|$|Classes and {{interfaces}} {{have been}} in COBOL since 2002. Classes have factory objects, containing class methods and variables, and instance objects, containing instance methods and variables. Inheritance and interfaces provide polymorphism. Support for generic programming is provided through parameterized classes, which can be <b>instantiated</b> to use any class or interface. Objects are stored as references which may be restricted to a certain type. There are two ways of calling a method: the [...] statement, which acts similarly to , or through inline method invocation, which is analogous to using functions.|$|E
500|$|Cardozo {{has been}} praised for {{his style of}} writing in Palsgraf. Posner noted that in {{the facts of the}} case Cardozo [...] "saw <b>instantiated</b> the basic {{principles}} of negligence law and was able to articulate them in prose of striking freshness, clarity, and vividness", in an opinion mostly written in short sentences and lacking footnotes or block quotes. University of Pennsylvania Law School Professor Kim Lane Scheppele noted that the opinion was [...] "written by Judge Benjamin Cardozo at the height of his formidable powers". Richard Polenberg, in his study of that jurist, stated, [...] "Cardozo had a genius for making it seem that the results he reached were logical, inevitable, and legally unassailable". Prosser stated, [...] "with due respect to the superlative style in which both [...] are written, neither of them wears well on long acquaintance. Both of them beg the question shamelessly, stating dogmatic propositions without reason or explanation." [...] Herzog was also less enthusiastic, noting that [...] "the majority opinion is unfortunately written in the curious idiolect I sometimes call Cardozo-speak." ...|$|E
5000|$|... #Subtitle level 3: Degrees {{of freedom}} <b>instantiating</b> the rules ...|$|R
5000|$|Mental {{practice}} can <b>instantiate</b> the same performance benefits as physical practice.|$|R
5000|$|... try { // <b>Instantiate</b> {{a message}} Message msg = new MimeMessage(session); ...|$|R
2500|$|An {{alternative}} claim, advanced {{especially by}} John Haugeland, {{is a kind}} of weak local supervenience claim; or, weaker still, mere global supervenience. The claim that mental properties supervene globally on physical properties requires only a quite modest commitment: any difference between two possible worlds with respect to their <b>instantiated</b> mental properties entails at least some difference in the physical properties <b>instantiated</b> in those two worlds. [...] Importantly, it does not require that the mental properties of an individual person supervene only on that person's physical state.|$|E
2500|$|Replacing P by x = 3 or {{any other}} {{proposition}} is called instantiation of P by that proposition. The result of instantiating P in an abstract proposition is called an instance of the proposition. [...] Thus [...] "x = 3 → x = 3" [...] is a tautology {{by virtue of being}} an instance of the abstract tautology [...] "P → P". All occurrences of the <b>instantiated</b> variable must be <b>instantiated</b> with the same proposition, to avoid such nonsense as P → x = 3 or x = 3 → x = 4.|$|E
2500|$|Wardrip-Fruin and Montfort {{argue that}} Borges [...] "may {{have been the}} most {{important}} figure in Spanish-language literature since Cervantes. He was clearly of tremendous influence, writing intricate poems, short stories, and essays that <b>instantiated</b> concepts of dizzying power." ...|$|E
5000|$|C++03 {{has this}} syntax to oblige the {{compiler}} to <b>instantiate</b> a template: ...|$|R
5000|$|... line 14: The {{main program}} starts here by <b>instantiating</b> the Application class.|$|R
30|$|The {{objective}} {{function of the}} ILP-Image minimizes {{the time required to}} <b>instantiate</b> a VN. The time needed to <b>instantiate</b> each virtual router is the sum of the times required to transfer the image and to boot the operating system of the image. We assume here that two or more images can be transferred simultaneously on the same physical link.|$|R
2500|$|The way {{sessions}} are <b>instantiated</b> was redesigned in Windows Vista and Windows Server 2008 {{to provide additional}} protection against shatter attacks. [...] Local user logins were moved from Session 0 to Session 1, thus separating the user's processes from system services that could be vulnerable.|$|E
2500|$|A {{predicate}} {{takes an}} entity or entities {{in the domain}} of discourse as input and outputs either True or False. Consider the two sentences [...] "Socrates is a philosopher" [...] and [...] "Plato is a philosopher". In propositional logic, these sentences are viewed as being unrelated and might be denoted, for example, by variables such as p and q. The predicate [...] "is a philosopher" [...] occurs in both sentences, which have a common structure of [...] "a is a philosopher". The variable a is <b>instantiated</b> as [...] "Socrates" [...] in the first sentence and is <b>instantiated</b> as [...] "Plato" [...] in the second sentence. While first-order logic allows for the use of predicates, such as [...] "is a philosopher" [...] in this example, propositional logic does not.|$|E
2500|$|Unphysical universes: If a {{state is}} a {{superposition}} of two states [...] and , i.e., , i.e., weighted by coefficients a and b, then if , what principle allows a universe with vanishingly small probability b to be <b>instantiated</b> {{on an equal footing}} with the much more probable one with probability a? This seems to throw away the information in the probability amplitudes.|$|E
40|$|In this paper, I {{provide an}} {{argument}} for pannormism, the view according to which there are normative properties all the way down. In particular, I argue for what I call the trickling down principle, which says {{that if there is}} a metaphysically basic normative property, then, if whatever <b>instantiates</b> it has a ground, that ground <b>instantiates</b> it as well...|$|R
5000|$|<b>Instantiate</b> the project/task {{manually}} from a template, or automatically {{through a}} business rule ...|$|R
5000|$|... {{which tells}} the {{compiler}} not to <b>instantiate</b> the template in this translation unit.|$|R
