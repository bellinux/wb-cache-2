137|23|Public
5|$|At JAMMA's 1992 Amusement Machine Show in Japan, {{held during}} 27–19 August 1992, Namco debuted a racing game called Sim Drive for the Namco System 22 arcade system board. It was {{a sequel to}} Eunos Roadster Driving Simulator, a Mazda MX-5 driving {{simulation}} arcade game that Namco developed with Mazda and released in 1990. Its 3D polygon graphics stood out for its use of <b>Gouraud</b> <b>shading</b> and texture mapping. After a location test at the show, where it was previewed by the November 1992 issue of Electronic Gaming Monthly, Sim Drive had a limited Japanese release in December 1992, but {{did not get a}} mass-market release. It served as a prototype for Ridge Racer.|$|E
25|$|Lawrence Holland and Edward Kilham's Totally Games studio, which {{released}} X-Wing {{the year}} before, designed TIE Fighter. Based on X-Wings game engine, TIE Fighter supports <b>Gouraud</b> <b>shading</b> and adds gameplay features and craft {{not available in}} X-Wing. TIE Fighter was updated and re-released several times, {{and it was a}} critical success. It is considered by some critics and gamers to be among the greatest video games of all time.|$|E
500|$|Physically, the Dreamcast {{measures}} [...] {{and weighs}} [...] [...] The Dreamcast's main CPU is a two-way 360MIPS superscalar Hitachi SH-4 32-bit RISC clocked at 200MHz with an 8 Kbyte instruction cache and 16 Kbyte data cache and a 128-bit graphics-oriented floating-point unit delivering 1.4GFLOPS. Its 100MHz NEC PowerVR2 rendering engine, {{integrated with the}} system's ASIC, is capable of drawing more than 3 million polygons per second and of deferred shading. Sega estimated that the Dreamcast was theoretically capable of rendering 7 million raw polygons per second, or 6 million with textures and lighting, but noted that [...] "game logic and physics reduce peak graphic performance." [...] Graphics hardware effects include trilinear filtering, <b>gouraud</b> <b>shading,</b> z-buffering, spatial anti-aliasing, per-pixel translucency sorting and bump mapping. The system can output approximately 16.77 million colors simultaneously and displays interlaced or progressive scan video at 640×480 video resolution. Its 67MHz Yamaha AICA sound processor, with a 32-bit ARM7 RISC CPU core, can generate 64 voices with PCM or ADPCM, providing ten times {{the performance of the}} Saturn's sound system. [...] The Dreamcast has 16 MB main RAM, along with an additional 8 MB of RAM for graphic textures and 2 MB of RAM for sound. [...] The system reads media using a 12x speed Yamaha GD-ROM Drive. In addition to Windows CE, the Dreamcast supports several Sega and middleware application programming interfaces. In most regions, the Dreamcast included a removable modem for online connectivity, which was modular for future upgrades. The original Japanese model and all PAL models had a transfer rate of 33.6kbit/s, while consoles sold in the US and in Japan after September 9, 1999 featured a 56 kbit/s dial-up modem.|$|E
5000|$|Pixel fillrate: with 1 full texture (diffuse map), <b>Gouraud</b> <b>shaded</b> 1.2 (37,750,000 32-bit pixel raster triangles) ...|$|R
5000|$|Pixel fillrate: with 2 full textures (diffuse map + {{specular}} or alpha or other), <b>Gouraud</b> <b>shaded</b> 0.6 (18,750,000 32-bit pixel raster triangles) ...|$|R
50|$|The game is {{displayed}} in full <b>gouraud</b> <b>shaded</b> 3D for DOS and fully textured 3D for the PlayStation. It features an over-the-shoulder viewpoint, {{with almost no}} platform sequences. The style {{of the game is}} action-adventure.|$|R
2500|$|Henri Gouraud – {{computer}} scientist; {{inventor of}} <b>Gouraud</b> <b>shading</b> ...|$|E
2500|$|Meanwhile, Hess {{began work}} on the {{buildings}} for each race, creating textures in Adobe Photoshop, which he then [...] "dirtied", so as to create a lived-in, real-world sense; for example, he ensured the diagonal lines of the Egyptian pyramids were crooked, as he felt to have them perfectly straight and geometrical would be unrealistic. The textures were then [...] "hand painted", and <b>Gouraud</b> <b>shading</b> was later added to complete the look.|$|E
2500|$|Also in the 1970s, Henri Gouraud, Jim Blinn and Bui Tuong Phong {{contributed to}} the {{foundations}} of shading in CGI via {{the development of the}} <b>Gouraud</b> <b>shading</b> and Blinn-Phong shading models, allowing graphics to move beyond a [...] "flat" [...] look to a look more accurately portraying depth. Jim Blinn also innovated further in 1978 by introducing bump mapping, a technique for simulating uneven surfaces, and the predecessor to many more advanced kinds of mapping used today.|$|E
5000|$|H. <b>Gouraud,</b> Continuous <b>shading</b> of curved surfaces. In Rosalee Wolfe (editor), Seminal Graphics: Pioneering {{efforts that}} shaped the field, ACM Press, 1998[...]|$|R
5000|$|... "I {{remember}} walking {{onto the}} E3 booth in 1995 with Ken {{and seeing the}} Polygon Man design {{on the side of}} the booth. Ken just went absolutely insane," [...] said Harrison. Kutaragi was upset that SCEA was spending its limited budget on an alternative brand. [...] "But the thing that really upset Ken was that the Polygon Man design wasn’t <b>Gouraud</b> <b>shaded,</b> it was flat shaded! So Polygon Man was taken out into the car park and quietly shot." ...|$|R
40|$|A {{discontinuity}} driven hierarchical meshing {{algorithm is}} presented which keeps polygons well shaped and avoids {{the generation of}} T-vertices. The concept of split-hints is introduced enabling us to store splitting information for later use rather than immediately anchoring T-vertices. The concept allows to easily combine hierarchical subdivision of a scene and introduction of discontinuity edges representing shadow boundaries. The complete splitting algorithm using split-hints is given in pseudo-code producing a triangle mesh {{which can be used}} for fast <b>Gouraud</b> <b>shaded</b> rendering...|$|R
2500|$|The company's final {{graphics}} chips, the GD546x [...] "Laguna" [...] {{series of}} PCI/AGP 3D-accelerators, were novel {{in that they}} {{were one of the}} few video cards to use Rambus RDRAM. The patented use of tiled memory used by the GD546x chips is still used by nearly all graphics processors today. However, like many other 2D/3D chips at the time were gate limited by the process technology available at the time, the feature set of perspective-correct texture mapping, bilinear filtering, single-pass lighting, <b>gouraud</b> <b>shading,</b> and alpha blending, was incomplete compared to the next generation of 3D chips. The GD546x family was limited by CPU processing at the time, CPU's could not feed it enough triangles which was the real performance block. The raw processing power of the GD546x was nearly 2.5 million 25 pixel triangles per second, much faster than competitors.|$|E
2500|$|LucasArts {{released}} the [...] space combat simulator in 1994. That same year, it {{released the}} Collector's CD-ROM Edition of X-Wing. This edition {{runs on the}} TIE Fighter game engine, itself based on the X-Wing engine. The newer engine supports <b>Gouraud</b> <b>shading</b> and other rendering enhancements. The Collector's CD-ROM Edition includes the base game and both expansions. It also includes some adjustments to missions, redesigned cutscenes, bonus missions, and voiceovers for the mission briefings and in-game radio messages. Erik Bauersfeld, who voiced Admiral Ackbar in Return of the Jedi provided the voice for Ackbar in the game. Additionally, Clive Revill, who voiced Emperor Palpatine in The Empire Strikes Back (pre-2004 version), portrayed Admiral Dodonna. Owners of a floppy disk version could send payment {{and the back of}} their instruction manual to LucasArts and receive a special [...] "Gold Edition" [...] of the CD-ROM version, which included the game on a golden CD-ROM and a free gift.|$|E
5000|$|Phong shading {{is similar}} to <b>Gouraud</b> <b>shading,</b> except that instead of interpolating the light intensities, the normals are {{interpolated}} between the vertices. Thus, the specular highlights are computed much more precisely than in the <b>Gouraud</b> <b>shading</b> model: ...|$|E
50|$|This {{video game}} {{features}} four <b>gouraud</b> <b>shaded</b> courses {{in order to}} produce continuous shading of surfaces represented by polygon meshes. Modes of gameplay are: tournament, match play, and practice. There are created golfers and the option for the player to create his own. The game allows golf handicapping. Up to eight players can play. There is a Mode 7 view camera that follows the ball after it is hit. Basic information like the wind speed, distance to the flag, the number of shots required to make par on a hole, and the number of shots already made on a hole are shown while playing the game.|$|R
5000|$|H. <b>Gouraud,</b> [...] "Continuous <b>shading</b> of curved surfaces," [...] IEEE Transactions on Computers, C-20(6):623-629, 1971.|$|R
50|$|The {{fighting}} {{system in}} Tobal 2 {{is the same}} as in the previous game. The player can freely navigate 3D fighting arenas under the condition that he or she faces the opponent. High, medium, and low attacks can be executed using assigned buttons. As in Tobal No. 1, the grappling and blocking system offers the player a variety of offensive and defensive maneuvers. A new unblockable fireball attack has been added for each character. Tobal 2 was released on the same day as Sony's Dual Analog Controller in Japan, noted as the first game compatible with the peripheral. Graphically, the game features <b>Gouraud</b> <b>shaded</b> and higher-resolution character models compared to Tobal No. 1, but still runs at 60 frames per second.|$|R
50|$|The game's {{graphics}} utilise <b>Gouraud</b> <b>shading.</b>|$|E
5000|$|Henri Gouraud, Computer scientist, {{inventor}} of <b>Gouraud</b> <b>shading</b> ...|$|E
5000|$|... blitting, rotation, stretching, reduction, alpha blending, <b>Gouraud</b> <b>shading</b> ...|$|E
40|$|Integrating {{the slope}} and setup {{calculations}} for triangles to the rasterizer offloads the host processor from intensive calculations and can significantly increase 3 D system performance. The processing on the host is greatly reduced {{and much less}} data is passed from the host to the graphics subsystem. A setup architecture handling generalized triangle meshes and computing all necessary parameters for a high-end raster pipeline to generate <b>Gouraud</b> <b>shaded,</b> texture- and bumpmapped triangles is described and its benefits on the final bandwidth are shown. To efficiently compute the slopes and color gradients for each triangle, some implementation aspects on division and multiplication pipelines are discussed. The Setup for Triangle Rasterization Anders Kugler University of Tübingen - Computer Graphics Laboratory (1) (1) Universität Tübingen Wilhelm-Schickard-Institut für Informatik Graphisch-Interaktive Systeme Auf der Morgenstelle 10 D- 72076 Tübingen - Germany email: kugler@gris. uni-t [...] ...|$|R
40|$|The {{approximation}} tree is a hybrid, hierarchical {{data structure}} for real-time terrain visualization which represents both geometry data and texture data of a terrain in a hierarchical manner. This framework can integrate different multiresolution modeling techniques operating on {{different types of}} data sets such as TINs, regular grids, and non-regular grids. An approximation tree recursively aggregates terrain patches which reference geometry data and texture data. The rendering algorithm selects patches based on a geometric approximation error and a texture approximation error. Terrain shading and thematic texturing, which can be generated in a preprocessing step, improve the visual quality of level of detail models and eliminate the defects resulting from a <b>Gouraud</b> <b>shaded</b> geometric model since they do {{not depend on the}} current (probably reduced) geometry. The approximation tree can be implemented efficiently using object-oriented design principles. A case study for cartographic lands [...] ...|$|R
40|$|Polygon Streams is a {{distributed}} system with multiple processors and strictly local communication. A unique custom VLSI chip that constitutes an independent processing module forms {{a stage of}} the PS pipeline. The number of these modules in PS is a variable that {{is determined by the}} application. PS features a modular architecture, multi-ported on-chip memory, bit-serial arithmetic, and a pipeline whose computation can be dynamically configured. The PS design closely subscribes to the system characteristics favored by VLSI. The task of scan conversion is very intensive in computation and pixel information access for rendering computer graphics images on raster scan displays. It is very coherent and suitable, however, for forward difference algorithms. The discrete and regular layout of the raster display in conjunction with the largely local effect of a pixel on an image, make rendering amenable to parallel architectures with localized memory and communication. These are precisely the attributes favored by VLSI and typical of PS. A modification of the Digital Differential Analyzer is implemented to <b>Gouraud</b> <b>Shade</b> and depth buffer convex polygons at high speeds. The scan conversion task is distributed over the processors to efficiently subdivide the image space and maximize concurrency of processor operation. A study of the tradeoffs and architectural choices of the PS reveal the merits and deficits of the PS approach in comparison with Pixel-Planes, Super-Buffers, and SLAMS...|$|R
5000|$|... {{reportedly}} 700,000 textured polygons/second without <b>gouraud</b> <b>shading</b> or {{additional effects}} ...|$|E
50|$|Phong shading {{improves}} upon <b>Gouraud</b> <b>shading</b> {{and provides}} a better approximation of the shading of a smooth surface. Phong shading assumes a smoothly varying surface normal vector. The Phong interpolation method works better than <b>Gouraud</b> <b>shading</b> when applied to a reflection model that has small specular highlights such as the Phong reflection model.|$|E
5000|$|Graphical capabilities: 2 million polygons per second, texture mapping, <b>Gouraud</b> <b>shading</b> ...|$|E
50|$|Development {{started in}} April 1995. Bubsy 3D was {{developed}} by Eidetic and published by Accolade in North America and Telstar in Europe. The game was designed by Michael Berlyn, and veteran games developer Marc Blank was also a key member of the development team. After the release of Bubsy 2, which Berlyn described as having almost killed the franchise, {{he and his team}} began work on Bubsy 3D. He cited the development as a challenge, due to having no experience with controls or tools for drawing environments in 3D. It was released in North America on October 31, 1996 and in Europe in August 1997. Due to the console's limitations at the time, flat shaded polygons were used instead of textured polygons. Bubsy 3D, however, {{is one of the few}} PlayStation games that run in high resolution. While the game's environment is flat-shaded, the characters are <b>Gouraud</b> <b>shaded</b> and texture mapped which makes them more visible. A release for the Sega Saturn in Spring of 1997 was planned but was ultimately cancelled. Due to its release coinciding with Super Mario 64, Berlyn was worried; he felt that Bubsy 3D could have had a chance with early 3D adopters, but that it was outshone by Mario. He attributed the game's failures to the coinciding releases, and the fact that he and his team were independent developers with limited resources while the creators of Super Mario 64 had total backing from Nintendo.|$|R
50|$|The Centre for Electronic Arts {{was renamed}} the Lansdown Centre for Electronic Arts {{after the death}} of the {{computer}} graphics pioneer John Lansdown, its head from 1993 until 1997. Its roots lay in the work of John Vince to develop computer graphics at the University (then a Polytechnic). From the 1970s, Vince and others developed two suites of computer graphics subroutines in the FORTRAN programming language, initially to create line drawings of 2D and 3D objects and, later, full colour images with smooth <b>Gouraud</b> and Phong <b>shading.</b>|$|R
40|$|Recent {{advances}} in realtime image compression and decompression hardware {{make it possible}} for a high-performance graphics engine to operate as a rendering server in a networked environment. If the client is a low-end workstation or set-top box, then the rendering task can be split across the two devices. In this paper, we explore one strategy for doing this. For each frame, the server generates a high-quality rendering and a low-quality rendering, subtracts the two, and sends the difference in compressed form. The client generates a matching low quality rendering, adds the decompressed difference image, and displays the composite. Within this paradigm, there is wide latitude to choose what constitutes a high-quality versus low-quality rendering. We have experimented with textured versus untextured surfaces, fine versus coarse tessellation of curved surfaces, Phong versus <b>Gouraud</b> interpolated <b>shading,</b> and antialiased versus nonantialiased edges. In all cases, our polygon-assisted compre [...] ...|$|R
5000|$|... {{reportedly}} 300,000 to 500,000 textured polygons/s with <b>gouraud</b> <b>shading,</b> {{lighting and}} effects ...|$|E
5000|$|... 3D {{graphical}} capabilities such as lighting, <b>Gouraud</b> <b>shading,</b> anti-aliasing {{and texture}} filtering ...|$|E
50|$|The {{most serious}} problem with <b>Gouraud</b> <b>shading</b> occurs when {{specular}} highlights {{are found in}} the middle of a large polygon. Since these specular highlights are absent from the polygon's vertices and <b>Gouraud</b> <b>shading</b> interpolates based on the vertex colors, the specular highlight will be missing from the polygon's interior. This problem is fixed by Phong shading.|$|E
40|$|A {{low-cost}} Raster Engine (RE) {{is designed}} and implemented {{to improve the}} performance of 3 D computer graphics and image composition application for video games, multimedia PCs and interactive TVs. Three operation modes: <b>Gouraud</b> and Phong <b>shading</b> algorithms, and image composition are incorporated in this chip. Modified digital differential analyzer (DDA), 2 -level pipeline, and constant execution time for calculating cos" 8 are proposed as the features of this design. The accelerator is implemented by 0. 8 um SPDM CMOS VLSI technology and able to release more then 50 % CPU loads. 1...|$|R
40|$|Algorithms are {{presented}} for polygonalizing implicitl y defined, quadric and cubic hypersurfaces in n> 3 dimensional space and furthermore displaying their projections in 3 D. The method relies on initially constructing the rational parametric equations of the implicitly defined hypersurfaces, and then polygonalizing thes e hypersurfaces by an adaptive generalized curvature de-pendent scheme. The number of hyperpolygons use d are optimal, {{in that they}} are the order of the minimu m number required for a smooth <b>Gouraud</b> like <b>shading</b> o f the hypersurfaces. Such hypersurface projection displays should prove useful in scientific visualization applications. The curvature dependent polygonal meshe s produced, should also prove very useful in finite difference and finite element analysis programs for multi-dimensional domains. 1 Introductio n Man has always strived to vault beyond the visual handicap of three dimensions. The power of algebra ha s allowed him to mathematically define and manipulate geometric objects in any dimensions. The advent o f sophisticated graphics workstations with true 3 D rendering capabilites may perhaps provide the springboar d to visualizing higher dimensional objects. This paper deals with algebraic hypersurfaces in n 3 dimensional space. An algebraic hypersurface is simply the set of zeros of a single multivariate polynomia l equation, f (x l, x 2 i • •., xn,) = 0 [17]. We further restrict ourselves to only polynomials of degree 2 and 3...|$|R
50|$|In {{comparison}} to Phong <b>shading,</b> <b>Gouraud</b> shading's strength and weakness {{lies in its}} interpolation. If a mesh covers more pixels in screen space than it has vertices, interpolating colour values from samples of expensive lighting calculations at vertices is less processor intensive than performing the lighting calculation for each pixel as in Phong shading. However, highly localized lighting effects (such as specular highlights, e.g. the glint of reflected light {{on the surface of}} an apple) will not be rendered correctly, and if a highlight lies {{in the middle of a}} polygon, but does not spread to the polygon's vertex, it will not be apparent in a Gouraud rendering; conversely, if a highlight occurs at the vertex of a polygon, it will be rendered correctly at this vertex (as this is where the lighting model is applied), but will be spread unnaturally across all neighboring polygons via the interpolation method.|$|R
