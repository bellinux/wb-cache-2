35|0|Public
2500|$|The {{system blocks}} content by {{preventing}} IP addresses from being routed through. [...] It consists of standard firewalls and proxy servers at the Internet gateways. The system also selectively engages in <b>DNS</b> <b>poisoning</b> when particular sites are requested. The {{government does not}} appear to be systematically examining Internet content, as this seems to be technically impractical. Researchers at the University of California, Davis, and at the University of New Mexico said that the censorship system is not a true firewall since banned material is sometimes able to pass through several routers or through the entire system without being blocked. Details for some commonly used technical methods for censoring are: ...|$|E
50|$|In {{order to}} perform {{redirection}} by DNS the captive portal uses DNS hijacking {{to perform an}} action similar to a man-in-the-middle attack. To limit the impact of <b>DNS</b> <b>poisoning</b> typically a TTL of 0 is used.|$|E
5000|$|An {{effective}} {{attack against}} DNS might involve targeting top-level domain servers (such as those servicing the [...]com domain) instead of root name servers. Alternatively, a man-in-the-middle attack or <b>DNS</b> <b>poisoning</b> attack could be used, though {{they would be}} more difficult to carry out.|$|E
5000|$|As {{with any}} other {{programming}} language, batch files can be used maliciously. Simple trojans and fork bombs are easily created, and batch files can do a form of <b>DNS</b> <b>poisoning</b> by modifying the hosts file. Batch viruses are possible, and can also spread themselves via USB flash drives by using Windows' Autorun capability.|$|E
5000|$|Web threats can {{be divided}} into two primary categories, based on {{delivery}} method - push and pull. [...] Push-based threats use spam, phishing, or other fraudulent means to lure a user to a malicious (often spoofed) website which then collects information and/or injects malware. Push attacks use phishing, <b>DNS</b> <b>poisoning</b> (or pharming), and other means to appear to originate from a trusted source.|$|E
50|$|In May 2012, UGNazi {{targeted}} the open source forum software, MyBB. UGNazi's Twitter account claims {{the attack was}} because the largest hacking forum on the Internet, HackForums, uses the MyBB software. The attack {{appears to have been}} done by <b>DNS</b> <b>poisoning.</b> The mybb.com domain had been edited to point toward the UGNazi website. At this time, there has been no evidence of server or data breaches.|$|E
5000|$|Later on, in {{an email}} to Yahoo Singapore, The Messiah said we {{reached out to}} our comrades from other {{fractions}} sic who together with us performed <b>DNS</b> <b>poisoning</b> on the [...]gov.sg sites, taking them down {{for a period of}} time. But there must have also been some patching that was done as some of our favourite point of entries into their networks seemed to be fixed.|$|E
50|$|In {{response}} to the threat to anonymity posed by date retention, Digitalcourage is running a Tor exit node on a rented server. The organisation also created a Tor client, similar to the Tor project′s own Tor Browser Bundle and aimed at simplicity and cross-platform use.As part of the campaign against the now abandoned law to introduce Internet blocking (Zugangserschwerungsgesetz), {{which would have been}} implemented by <b>DNS</b> <b>poisoning,</b> Digitalcourage is operating a public “anti-censorship” DNS server under the IP address 85.214.20.141.|$|E
5000|$|The {{system blocks}} content by {{preventing}} IP addresses from being routed through. It consists of standard firewalls and proxy servers at the Internet gateways. The system also selectively engages in <b>DNS</b> <b>poisoning</b> when particular sites are requested. The {{government does not}} appear to be systematically examining Internet content, as this seems to be technically impractical. Researchers at the University of California, Davis, and at the University of New Mexico said that the censorship system is not a true firewall since banned material is sometimes able to pass through several routers or through the entire system without being blocked. Details for some commonly used technical methods for censoring are: ...|$|E
50|$|The use of {{software}} repositories significantly reduces any threat of installation of malware, as the software repositories are checked by maintainers, {{who try to}} ensure that their repository is malware-free. Subsequently, to ensure safe distribution of the software, checksums are made available. These make it possible to reveal modified versions that may have been introduced by e.g. hijacking of communications using a man-in-the-middle attack or via a redirection attack such as ARP or <b>DNS</b> <b>poisoning.</b> Careful use of these digital signatures provides an additional line of defense, which limits the scope of attacks to include only the original authors, package and release maintainers and possibly others with suitable administrative access, depending on how the keys and checksums are handled.|$|E
50|$|The Zugangserschwerungsgesetz (Access Impediment Act, or ZugErschwG) was a German {{law that}} aimed {{to make it}} {{difficult}} to access sites on the World Wide Web with depictions of sexual activity by and against children (child pornography). The Federal Criminal Police Office would maintain a list of sites found to contain child pornography as defined by German criminal law. A two-fold strategy was intended: if it proved impossible to have offending sites taken down in appropriate time, German Internet service providers would be required to block access to the sites through methods such as <b>DNS</b> <b>poisoning.</b> Surfers would be redirected to a page showing a “stop” sign. Prosecution solely because of an attempt to access blocked site or domain was not planned.|$|E
5000|$|A {{widely publicized}} example of {{internet}} censorship is the [...] "Great Firewall of China" [...] (in reference both to {{its role as}} a network firewall and to the ancient Great Wall of China). The system blocks content by preventing IP addresses from being routed through and consists of standard firewall and proxy servers at the Internet gateways. The system also selectively engages in <b>DNS</b> <b>poisoning</b> when particular sites are requested. The government {{does not appear to be}} systematically examining Internet content, as this appears to be technically impractical. Internet censorship in the People's Republic of China is conducted under a wide variety of laws and administrative regulations, including more than sixty regulations directed at the Internet. Censorship systems are vigorously implemented by provincial branches of state-owned ISPs, business companies, and organizations.|$|E
5000|$|According to the Reporters without Borders (RSF) [...] "internet enemy list" [...] the {{following}} states engage in pervasive internet censorship: Cuba, Iran, Maldives, Myanmar/Burma, North Korea, Syria, Tunisia, Uzbekistan and Vietnam. A widely publicised {{example is the}} Great Firewall of China (in reference both to {{its role as a}} network firewall and to the ancient Great Wall of China). The system blocks content by preventing IP addresses from being routed through and consists of standard firewall and proxy servers at the Internet gateways. The system also selectively engages in <b>DNS</b> <b>poisoning</b> when particular sites are requested. The government {{does not appear to be}} systematically examining Internet content, as this appears to be technically impractical. Internet censorship in the People's Republic of China is conducted under a wide variety of laws and administrative regulations. In accordance with these laws, more than sixty Internet regulations have been made by the People's Republic of China (PRC) government, and censorship systems are vigorously implemented by provincial branches of state-owned ISPs, business companies, and organizations.|$|E
40|$|DNS implementers face {{numerous}} {{choices in}} architecting DNS resolvers, each with profound implications for security. Absent {{the use of}} DNSSEC, there are numerous interim techniques to improve DNS forgery resistance. We explore how different resolver architectures can affect the risk of <b>DNS</b> <b>poisoning.</b> The contributions of this work include: (A) We create a comprehensive, accurate model of <b>DNS</b> <b>poisoning.</b> We show how this model is more sensitive than other previous explanations of <b>DNS</b> <b>poisoning.</b> (B) We further catalog the major architectural choices DNS implementers can make in query management. We note real-world instances where these choices have weakened the security of resolvers, and measure the impact on security using our model. Our study revealed numerous, previously unknown vulnerabilities in common DNS servers. ...|$|E
40|$|Abstract – It is the DNS {{which makes}} away remembering strings of illogical numbers {{to use the}} internet. Converting {{readable}} names into their allotted IP is the basic function of a DNS server. Hence, it provides a very useful and a critical function to the users all over the world. Therefore, any unethical changes in a DNS server can make users not able to reach their desired sites. Hackers can then redirect the users to their malicious sites. This {{is an example of}} <b>DNS</b> <b>poisoning.</b> In this paper, we propose a possible solution to <b>DNS</b> <b>poisoning</b> by using multiple DNS servers...|$|E
40|$|We {{describe}} a novel, practical and simple technique to make DNS queries {{more resistant to}} poisoning attacks: mix {{the upper and lower}} case spelling of the domain name in the query. Fortuitously, almost all DNS authority servers preserve the mixed case encoding of the query in answer messages. Attackers hoping to poison a DNS cache must therefore guess the mixed-case encoding of the query, in addition to all other fields required in a <b>DNS</b> <b>poisoning</b> attack. This increases the difficulty of the attack. We {{describe a}}nd measure the additional protections realized by this technique. Our analysis includes a basic model of <b>DNS</b> <b>poisoning,</b> measurement of the benefits that come from case-sensitive query encoding, implementation of the system for recursive DNS servers, and large-scale real-world experimental evaluation. Since the benefits of our technique can be significant, we have simultaneously made this DNS encoding system a proposed IETF standard. Our approach is practical enough that, just weeks after its disclosure, it is being implemented by numerous DNS vendors. General Terms DNS, <b>DNS</b> <b>poisoning,</b> DNS transaction security, DNS forgery resistance, protocol security, network security, DNS security 1...|$|E
40|$|Abstract. We {{investigate}} {{defenses against}} DNS cache poisoning focus-ing on mechanisms {{that can be}} readily deployed unilaterally by the re-solving organisation, preferably in a single gateway or a proxy. <b>DNS</b> <b>poisoning</b> is (still) {{a major threat to}} Internet security; determined spoof-ing attackers are often able to circumvent currently deployed antidotes such as port randomisation. The adoption of DNSSEC, which would foil <b>DNS</b> <b>poisoning,</b> remains a long-term challenge. We discuss limitations of the prominent resolver-only defenses, mainly port and IP randomisation, 0 x 20 encoding and birthday protection. We then present two new (unilateral) defenses: the sandwich antidote and the NAT antidote. The defenses are simple, effective and efficient, and can be implemented in a gateway connecting the resolver to the Internet. The sandwich antidote is composed of two phases: poisoning-attack de-tection and then prevention. The NAT antidote adds entropy to DNS requests by switching the resolver’s IP address to a random address (be-longing to the same autonomous system). Finally, we show how to imple-ment the birthday protection mechanism in the gateway, thus allowing to restrict the number of DNS requests with the same query to 1 even when the resolver does not support this...|$|E
30|$|In the {{proposed}} approach, two records {{are kept in}} the white-list. First is the domain name and another is the IP address of the corresponding domain name. Whenever a user accesses the webpage for first time, {{the identity of the}} webpage is checked by the hyperlink relationship to make the decision. After making the decision, if the website is legitimate, then the system stores the detail in the white-list. Next time, when the user accesses the same domain name, the system extracts the IP address corresponding to that and matching is performed. We extract the IP address from the third party to protect the user from the <b>DNS</b> <b>poisoning</b> attack.|$|E
30|$|In this paper, we {{proposed}} a novel approach to protect against phishing attack using auto-updated white-list of legitimate sites accessed by the individual user. Furthermore, our approach is able to check the legitimacy of a webpage using hyperlink features. Our experimental {{results showed that the}} {{proposed a}}pproach is very effective in protecting against phishing attacks as it has 86.02  % true positive rate with a very less false positive rate of 1.48  %. Moreover, our proposed system is efficient to detect various other types of phishing attacks (i.e., <b>DNS</b> <b>poisoning,</b> embedded objects, zero-hour attack). Moreover, our approach is suitable for a real-time environment. In the future, the performance of the proposed system can be improved by taking the other features along with the hyperlinks; however, extracting other features will increase the running time complexity of the system.|$|E
40|$|Abstract—In this paper, {{we present}} new {{techniques}} to detect interposition attacks on stream-based connections in local and wide area networks. The approach developed here is general enough to apply uniformly to all circumstances where the man-in-the-middle attacker achieves interposition by corrupting higher-layer to low-layer address mappings. Thus, both {{the problem of}} local area network interposition through ARP poisoning, and the problem wide area interposition through <b>DNS</b> <b>poisoning</b> are addressed as special cases of our work. Like other solutions that reside between Layers 3 and 4 (e. g. IPSEC), our techniques enjoy the property {{that they do not}} require redesigning legacy software, as is the case for approaches that reside above Layer 4 (e. g. SSL/TLS). Unlike IPSEC, however, the developed system is tailored only to the detection of interposition attacks, and thus circumvents the overhead and complexity introduced i...|$|E
30|$|The fifth paper {{entitled}} “A novel {{approach to}} protect against phishing attacks at client side using auto-updated white-list” authored by Ankit Kumar Jain et al. [9] presents a novel approach {{to protect against}} phishing attacks using auto-updated white-list of legitimate sites accessed by the individual user. The proposed approach checks the legitimacy of a webpage using hyperlink features. Therefore, various hyperlinks (and features from the hyperlinks) from the source code of a webpage are extracted and apply to the proposed phishing detection system. Authors have performed various experiments and {{results show that the}} proposed approach is very effective in detecting and protecting against phishing attacks. Proposed approach has 86.02  % true positive rate while less than 1.48  % false negative rate. Moreover, various other types of phishing attacks (i.e., domain name system (<b>DNS)</b> <b>poisoning,</b> embedded objects, zero-hour attack) can also be detected efficiently using the proposed approach.|$|E
40|$|Abstract—Everyone is {{concerned}} about Internet security, yet most traffic is not cryptographically protected. Typical justification is that most attackers are off-path and cannot intercept traffic; hence, intuitively, challenge-response defenses should suffice to ensure authenticity. Often, the challenges re-use existing header fields to protect widelydeployed protocols such as TCP and DNS. We argue that this practice may often give an illusion of security. We review recent off-path TCP injection and <b>DNS</b> <b>poisoning</b> attacks, enabling attackers to circumvent existing challenge-response defenses. Both TCP and DNS attacks are non-trivial, yet practical. The attacks foil widely deployed security mechanisms, and allow {{a wide range of}} exploits, such as long-term caching of malicious objects and scripts. We hope that this review article will help improve defenses against off-path attackers. In particular, we hope to motivate, when feasible, adoption of cryptographic mechanisms such as SSL/TLS, IPsec and DNSSEC, providing security even against stronger Man-in-the-Middle attackers...|$|E
40|$|Everyone is {{concerned}} about the Internet security, yet most traffic is not cryptographically protected. The usual justification is that most attackers are only off-path and cannot intercept traffic; hence, challenge-response mechanisms suffice to ensure authenticity. Usually, the challenges re-use existing `unpredictable' header fields to protect widely-deployed protocols such as TCP and DNS. We argue that this practice may often only give an illusion of security. We present recent off-path TCP injection and <b>DNS</b> <b>poisoning</b> attacks, enabling attackers to circumvent existing challenge-response defenses. Both TCP and DNS attacks are non-trivial, yet very efficient and practical. The attacks foil widely deployed security mechanisms, such as the Same Origin Policy, and allow a wide range of exploits, e. g., long-term caching of malicious objects and scripts. We hope that this article will motivate adoption of cryptographic mechanisms such as SSL/TLS, IPsec and DNSSEC, and of correct, secure challenge-response mechanisms...|$|E
40|$|We present {{practical}} poisoning and name-server block- ing {{attacks on}} standard DNS resolvers, by off-path, spoofing adversaries. Our attacks exploit large DNS responses that cause IP fragmentation; such long re- sponses are increasingly common, mainly {{due to the}} use of DNSSEC. In common scenarios, where DNSSEC is partially or incorrectly deployed, our poisoning attacks allow 'com- plete' domain hijacking. When DNSSEC is fully de- ployed, attacker can force use of fake name server; we show exploits of this allowing off-path traffic analy- sis and covert channel. When using NSEC 3 opt-out, attacker can also create fake subdomains, circumvent- ing same origin restrictions. Our attacks circumvent resolver-side defenses, e. g., port randomisation, IP ran- domisation and query randomisation. The (new) name server (NS) blocking attacks force re- solver to use specific name server. This attack allows Degradation of Service, traffic-analysis and covert chan- nel, and also facilitates <b>DNS</b> <b>poisoning.</b> We validated the attacks using standard resolver soft- ware and standard DNS name servers and zones, e. g., org...|$|E
40|$|An analogy that {{is often}} used for the Domain Name System (DNS) {{is that it is}} the phonebook for the Internet. The DNS {{provides}} the mapping between the names that we use to identify applications, websites and e-mail recipients etc and the numerical addresses that are used by the components in networks. If an attacker can poison the DNS (i. e. make it return invalid information) then the user may unknowingly connect to the attacker’s service, rather than the correct one. The user may then be exposed to confidentiality, integrity and availability issues. In July 2008, security researcher Dan Kaminsky disclosed a significant issue in DNS that allowed an attacker to be able to poison the DNS with information of the attacker’s choosing. Whilst this had always been possible, it was believed there was a narrow window of opportunity to attack, and that during that narrow window the possibility of a successful attack was very low. Dan Kaminsky showed that this was not the case; this report includes an analysis that shows an attack of 259 seconds duration has a 75 % chance of success against vulnerable servers. Weaknesses exist in client and server applications and operating systems, their configuration, procedures, people and the DNS protocol that allow a range of different factors that may cause confidentiality, integrity and availability issues to users and applications that rely on the DNS. This report provides an overview of related vulnerabilities and attacks, two of which are investigated in more detail; cache poisoning and amplification attacks (a type of denial of service attack). <b>DNS</b> <b>poisoning</b> attacks can easily be conducted against servers not patched against the Kaminsky vulnerability. A tactical solution has been provided that makes these attacks harder, but still possible. A strategic solution is needed that provides a cryptographic response to cache poisoning. This report looks at two possible solutions to cache poisoning attacks: DNSSEC and DNSCurve, although neither provides the perfect solution. The DNS is vulnerable to use in amplification attacks. The DNS can be abused to generate multigigabit attacks that can be used against any target to prevent legitimate use of resources at the target. Although DNSSEC provides protection against <b>DNS</b> <b>poisoning</b> attacks it does make amplification attacks easier...|$|E
40|$|We {{present a}} new {{approach}} to authentication using Trusted Execution Environments (TEEs), by changing the location of authentication from a remote device (e. g. remote authentication server) to user device(s) that are TEE enabled. The authentication takes place locally on the user device and only the outcome is sent back to the remote device. Our approach uses existing features and capabilities of TEEs to enhance the security of user authentication. We reverse the way traditional authentication schemes work: instead of the user presenting their authentication data to a remote device, we request the remote device to send the stored authentication template(s) to the local device. Almost paradoxically, this enhances security of authentication data by supplying it only to a trusted device, and so enabling users to authenticate the intended remote entity. This addresses issues related with bad SSL certificates on local devices, <b>DNS</b> <b>poisoning,</b> and counteracts certain threats posed by the presence of malware. We present a protocol to implement such authentication system discussing its strengths and limitations, before identifying available technologies to implement the architecture...|$|E
40|$|Abstract—DNSSEC {{deployment}} is long overdue; however, {{it seems}} to be finally taking off. Recent cache poisoning attacks motivate protecting DNS, with strong cryptography, rather than with challenge-response ‘defenses’. Our goal is to motivate and help correct DNSSEC deployment. We discuss the state of DNSSEC deployment, obstacles to adoption and potential ways to increase adoption. We then present a comprehensive overview of challenges and potential pitfalls of DNSSEC, well known and less known, including: • Vulnerable configurations: we present several DNSSEC configurations, which are natural and, based on the limited deployment so far, expected to be popular, yet are vulnerable to attack. This includes NSEC 3 opt-out records and interdomain referrals (in NS, MX and CNAME records). • Incremental Deployment: we discuss potential for increased vulnerability due to popular practices of incremental deployment, and recommend secure practice. • Super-sized Response Challenges: DNSSEC responses include cryptographic keys and hence are relatively long; we explain how this extra-long responses cause interoperability challenges, and can be abused for DoS and even <b>DNS</b> <b>poisoning.</b> We discuss potential solutions...|$|E
40|$|In a {{computer}} network several communicating devices {{are connected to}} a common shared communication medium. A network interfacing card or a wireless network card is typically used to connect computers on a network. This {{gives rise to the}} need of unique identification mechanism to be followed for each of the connected devices. Media Access Control (MAC) addressing is used to properly identify communicating devices. The term MAC spoofing refers to a situation when somebody changes the MAC address of his computer or the network communicating device to impersonate someone else based upon this MAC address identification. Although MAC spoofing may be essential in some situations yet it has become potential threat for the network security as it sets ground for formulating and launching different types of Attacks like ARP Spoofing, <b>DNS</b> <b>Poisoning,</b> Denial of Services, Session Hijacking, Man in the Middle Attack etc. on a network. The {{purpose of this paper is}} to spread the awareness about MAC addressing, MAC spoofing techniques normally used, different types of attacks that can be based upon MAC spoofing and some of the counter measures that can be adopted by common network users...|$|E
40|$|Whenever {{there is}} {{communication}} between Client and Server over a public link and resources {{are to be}} accessed from remote systems, then proving an identity becomes quiet complex because there is need of proper access rights with authentication. Complete security at the transport layer starts with proof of authentication, majority organizations only use password for security but this research paper would include one more tier of security to the transport layer security protocol by using fingerprints for identity authentication. Bio Hashing {{with the help of}} Minutiae Points at the fingerprints would be used for mutual authentication. Complete comparative analysis of all the existing password authentication schemes on the basis of security requirements and attacks is done in this paper. Result is generated that which existing scheme could withstand security requirement of mutual authentication for using fingerprint as identity parameter along with password. Proof is generated that with mutual authentication intruders could not practice Phishing, IP or Server Spoofing, Smurf attack and <b>DNS</b> <b>Poisoning</b> etc. Research paper focuses on implementing Password and Fingerprints for mutual authentication in Multi Server environment which will generate an Ideal Password Authentication Scheme and will result in fortification o...|$|E
30|$|Most of the {{anti-phishing}} {{solutions are}} having two major limitations; {{the first is}} the need of a fast access time for a real-time environment and the second is the need of high detection rate. Black-list-based solutions have the fast access time but they suffer from the low detection rate while other solutions like visual similarity and machine learning suffer from the fast access time. In this paper, we propose a novel approach to protect against phishing attacks using auto-updated white-list of legitimate sites accessed by the individual user. Our proposed approach has both fast access time and high detection rate. When users try to open a website which is not available in the white-list, the browser warns users not to disclose their sensitive information. Furthermore, our approach checks the legitimacy of a webpage using hyperlink features. For this, hyperlinks from the source code of a webpage are extracted and apply to the proposed phishing detection algorithm. Our experimental results show that the proposed approach is very effective for protecting against phishing attacks as it has 86.02  % true positive rate while less than 1.48  % false negative rate. Moreover, our proposed system is efficient to detect various other types of phishing attacks (i.e., Domain Name System (<b>DNS)</b> <b>poisoning,</b> embedded objects, zero-hour attack).|$|E
30|$|In this paper, {{we propose}} a novel {{approach}} against phishing attacks using auto-updated white-list of legitimate sites accessed by the individual user. A white-list {{is a set of}} approved legitimate domains or URLs. A white-list contains the information of those sites which are legitimate and the user wishes to access. On the other hand, a black-list contains the information of those sites which are fake and the user does not wish to access. Moreover, the white-list data is small and more accurate as compared to the black-list. In our proposed solution, the current domain is matched with predefined legitimate domains called white-list. If the user tries to open any website which is not available in the white-list, then our system checks the legitimacy of the website. Furthermore, our approach uses the hyperlink features which are extracted from the source code of a webpage to make the decision. After checking the legitimacy of a webpage using hyperlink features, the system updates the domain in the white-list. When the user accesses the same domain next time, the system only matches the domain name and IP address. Our proposed approach comprises two major components. (i) First is the domain and IP address matching module. This module matches the present domain and IP address in the white-list. Matching of IP address protects against <b>DNS</b> <b>poisoning</b> or pharming attacks. We use third-party DNS to match domain name with IP address. (ii) The second module runs if the domain is not matched with the white-list. This module examines the features from the hyperlinks to take the decision.|$|E
40|$|Abstract—Satellites {{are being}} used to capture {{real-time}} images, video for various purposes, such as, observing the Earth, weather data, live images for tornado, cyclones, tsunami, etc. In future, these data can be accessed by terrestrial users through the Internet. Mobility protocols aim at providing uninterrupted real-time data communication facilities through seamless Internet connectivity to hosts or networks in motion, such as in bus, train, aircraft, and satellites. Mobile IP is an example of such a mobility protocol which uses Home Agent for mobility management, and requires signaling among the mobility agents, mobile node and the correspondent node for its operation. Originally, Mobile IP had no route optimization between end hosts; all traffic passes the mobility agents. However, recent mobility protocols, such as, Mobile IPv 6 incorporated Route Optimization between end hosts, by informing correspondent node and home agent about mobile node’s current location through binding updates. However, these binding updates are vulnerable to various attacks as unauthorized agent might send fabricated binding updates to fool mobile node, correspondent node or home agent. In short, the requirement of seamless connectivity in mobile environment and use of optimized route between end hosts have introduced several security vulnerabilities to mobility protocols. In this paper, we explain such security threats on various components of the space networks. Some of the major threats are traffic redirection attack, man-in-the-middle attack, bombing attack, denial-of-service attack, <b>DNS</b> <b>poisoning,</b> replay attack, etc. These attacks can affect the privacy and the integrity of the data. We also discuss possible protection mechanisms to protect network components from these security threats...|$|E
30|$|DNS cache {{poisoning}} exploits vulnerabilities in {{the domain}} name system. In this attack, hackers divert Internet traffic from the legitimate website to the phishing website. DNS is a distributed database because it becomes complex when all the Internet information is stored in a single place. To speed up the performance, one server caches the recently queried data from another server. ISP, home router, and user’s personal computer also maintain the DNS cache, so they can also solve the DNS query rather than refer to DNS server again and again for the same information. Whenever the user’s computer contacts to a domain name like “paypal.com,” a DNS resolver contacts to the nearest DNS server. The DNS server responds with an IP address. The user’s computer then connects directly to that numerical IP address corresponding to paypal.com. An attacker can change {{the information in the}} DNS cache and makes it poisoned. If the attacker gets control over DNS server and change some information, e.g., an attacker changed the IP address corresponding to paypal.com and put its own website IP address which is a phishing website, then the attacker gets all the information input by the user. In this attack, an Internet user always sees the correct URL in the web browser. Our phishing detection system compares the IP address of a suspicious site after matching the domain name. We retrieve the target’s IP address by performing DNS lookup. The purpose of using DNS lookup is to resolve the issue of <b>DNS</b> <b>poisoning</b> as sometimes the attacker changes the entry in DNS cache. Attempting to match these two IP addresses will reduce the false negative rate.|$|E
30|$|Tools {{that operate}} on the client side (i.e., user's machine) include user profile filters and {{browser-based}} toolbars. SpoofGuard [30], CatchingPhish [31], CallingID [32], CloudMark [33], NetCraft [34], FirePhish [35], eBay toolbar [36], and IE Phishing Filter [37] {{are some of the}} client side tools. User profile filters observe user's website visiting pattern and maintain a list of URLs in local database. When a user visit's a URL that is different from his/her website visits, it warns the user with a dialog. Toolbars are built and trained using the typical pattern of phishing website URLs. Some patterns of phish website URLs include IP address in the URL, long URLs, many dots in the URL, etc. This technique is very susceptible to technology changes (such as IPV 4 versus IPV 6, tiny URLs) and hence it is not robust. Moreover, most users do not pay attention to the warning dialogs and hence it is not an effective protection technique. Abu-Nimeh and Nair [38] presented a new attack using <b>DNS</b> <b>poisoning</b> that bypass the client side toolbars. Their evaluation of seven tools concluded that none of them were able to detect the attack there by making these tools ineffective. Jain and Richariya [39] implemented a prototype web browser to detect phishing URLs. Authors did not compare their implementation with other browser-based tools and hence the effectiveness of the tool is not clear. Lin et al. [40] evaluated domain highlighting, the approach where browser highlights the domain name in the address bar, and concluded that this approach cannot be relied upon solely to detect and prevent phishing attacks. Chen et al. [41] presented a scientific assessment of user interface design elements such as font type, color, message placement, icon type, etc., used in various tools and concluded that existing tools fail to consider preference of the user while displaying warning and errors. Author's findings conclude that users prefer customization and personalization of these tools. Felt and Wagner [42] examined the threat of phishing on mobile devices. Authors analyzed 100 mobile applications and 85 web sites and found that attackers can spoof mobile web site. Authors found that Android and Apple-sponsored sites are top phish targets.|$|E

