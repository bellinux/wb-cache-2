884|97|Public
50|$|A special type of <b>flow</b> <b>shop</b> {{scheduling}} {{problem is the}} permutation <b>flow</b> <b>shop</b> {{scheduling problem}} in which the processing order of the jobs on the resources {{is the same for}} each subsequent step of processing.|$|E
50|$|<b>Flow</b> <b>shop</b> {{scheduling}} problems, are a {{class of}} scheduling problems with a workshop or group shop in which the flow control shall enable an appropriate sequencing for each job and for processing {{on a set of}} machines or with other resources 1,2,...,m in compliance with given processing orders. Especially the maintaining of a continuous flow of processing tasks is desired with a minimum of idle time and a minimum of waiting time. <b>Flow</b> <b>shop</b> scheduling is a special case of job shop scheduling where there is strict order of all operations to be performed on all jobs. <b>Flow</b> <b>shop</b> scheduling may apply as well to production facilities as to computing designs.|$|E
5000|$|Open-shop scheduling, Job Shop Scheduling, <b>Flow</b> <b>Shop</b> Scheduling Problem, {{optimization}} {{problems in}} computer science.|$|E
40|$|We resolve an open {{question}} raised by Feige & Scheideler by showing that the best known approximation algorithm for <b>flow</b> <b>shops</b> is essentially tight {{with respect to the}} used lower bound on the optimal makespan. We also obtain a nearly tight hardness result for the general version of <b>flow</b> <b>shops,</b> where jobs are not required to be processed on each machine. Similar results hold true when the objective is to minimize the sum of completion times...|$|R
5000|$|In machine shops, {{particularly}} job <b>shops</b> and <b>flow</b> <b>shops,</b> the <b>flow</b> {{of a part}} {{through the}} various processing stations is a work flow.|$|R
40|$|In the past, we have {{demonstrated}} how fuzzy concepts {{can easily be}} used in the Johnson algorithm to manage uncertain scheduling on two-machine <b>flow</b> <b>shops.</b> This paper extends application to fuzzy <b>flow</b> <b>shops</b> with more than two machines. A new fuzzy heuristic flow-shop scheduling algorithm (the fuzzy Palmer algorithm) is then designed since optimal solutions seem unnecessary for uncertain environments. Also, the conventional Palmer algorithm is presented as a special case of the fuzzy Palmer algorithm with special assigned membership functions...|$|R
5000|$|Scheduling, e.g. <b>flow</b> <b>shop</b> {{scheduling}} {{where the}} resource management entity ensures local optimization and cooperation for global and local consistency ...|$|E
5000|$|<b>Flow</b> <b>shop</b> {{scheduling}} {{there are}} [...] jobs and [...] different stations. Each job should {{spend some time}} at each station, in a pre-determined order.|$|E
5000|$|E. Gerstl and G. Mosheiov. (2014). The optimal {{number of}} used {{machines}} in a two-stage flexible <b>flow</b> <b>shop</b> scheduling problem. Journal of Scheduling, 17, pp. 199-210.|$|E
40|$|Abstract—This {{study is}} {{concerned}} about how to optimize the production sequences to minimize the makespan in hybrid <b>flow</b> <b>shops</b> with limited intermediate buffers. An improved memetic algorithm (IMA) is proposed for solving the NP-hard problem. In this algorithm, the method of generating the initial population, the local search procedures, the selection, crossover and mutation operators are newly designed. Optimization results are compared between the IMA and other three scheduling algorithms proposed in previous literature. Comparison {{results show that the}} IMA proposed in this paper is feasible and efficient for scheduling hybrid <b>flow</b> <b>shops</b> with limited intermediate buffers...|$|R
40|$|In a {{distributed}} real-time {{system or}} communication network, tasks {{may need to}} be executed on more than one processor. For time-critical tasks, the timing constraints are typically given as end-to-end release times and deadlines. This thesis describes algorithms to schedule a class of systems where all the tasks execute on different processors in turn in the same order. This end-to-end scheduling problem is known as the flow-shop problem. We present several cases where the problem is tractable and evaluate two heuristic algorithms for the NP-hard general case. We generalize the traditional flow-shop model in two directions. First, we present two algorithms for scheduling <b>flow</b> <b>shops</b> where tasks can be serviced more than once by some processors. Second, we describe a technique to schedule <b>flow</b> <b>shops</b> that consist of periodic tasks and to analyze their schedulability. We generalize this technique and describe how {{it can be used to}} schedule distributed systems that can not be modeled by <b>flow</b> <b>shops.</b> We then describe how to combine local or global resource access protocols and end-to-end scheduling. Finally, we show that by using end-to-end scheduling we can simplify resource access protocol...|$|R
40|$|Global {{competition}} is forcing corporations {{to confront the}} weaknesses of inflexible mass production lines to enhance their profitability. New technological solutions are now required to overcome the problems of manufacturing customized items, and competitiveness means quick response to new demand, short cycle times, and on-time delivery in the diverse manufacturing environments. <b>Flow</b> <b>shops</b> and job shops are typical manufacturing environments, and in many cases, a manufacturing facility is a hybrid shop with significant interactions between these two. To address the above important goals, the newly evolving manufacturing systems are likely to require sophisticated computer integrated production management, where production scheduling plays an extremely important role and significantly affects the manufacturer 2 ̆ 7 s profitability. ^ The dissertation is to advance scheduling theory and its applications with emphasizing on permutation <b>flow</b> <b>shops,</b> job shops with transfer lots, and integrated order and production scheduling. The common characteristics of these environments are their focus on manufacturing a high variety of products, while coping with variable demand for each product. The objective is to meet demand {{in a timely fashion}} with low work-in-process and finished goods inventory, subject to relevant constraints including resource capacity, operation precedence, and processing times. ^ This dissertation presents novel 2 ̆ 2 separable 2 ̆ 2 integer programming formulations for permutation <b>flow</b> <b>shops,</b> job shops with transfer lots, and the integrated order and production scheduling. The problems are solved under the Lagrangian relaxation framework. Lagrange multipliers are used to relax coupling constraints, and the relaxed problems are decomposed into relevant subproblems which can be solved by using dynamic programming method, or directly. The multipliers are updated at the high level by using the recently developed Reduced Complexity Bundle Method. Numerical testing results show that the operation waiting times are substantially reduced by using lot splitting techniques, and the product deliveries and machine utilizations are significantly improved. ...|$|R
50|$|The {{proposed}} {{methods to}} solve <b>flow</b> <b>shop</b> scheduling {{problems can be}} classified as exact algorithm such as Branch and Bound and Heuristic algorithm such as genetic algorithm.|$|E
5000|$|F : <b>Flow</b> <b>shop</b> problem. Every job [...] {{consists}} of [...] operations [...] for , to be scheduled in that order. Operation [...] must be processed for [...] units on machine [...]|$|E
50|$|As {{presented}} by Garey et al. (1976), most of {{extensions of the}} <b>flow</b> <b>shop</b> scheduling problems are NP-Hard and few {{of them can be}} solved optimally in O(nlogn), for example F2|prmu|Cmax can be solved optimally by using Johnson's Rule.|$|E
40|$|This paper proposes two {{relax and}} fix {{heuristics}} for the simultaneous lot sizing and sequencing problem in permutation <b>flow</b> <b>shops</b> involving sequence-dependent setups and capacity constraints. To {{evaluate the effectiveness}} of mentioned heuristics, two lower bounds are developed and compared against the optimal solution. The results of heuristics are compared with the selected lower bound...|$|R
40|$|Abstract—This paper {{considers}} a scheduling problem in flexible <b>flow</b> <b>shops</b> environment {{with the aim}} of minimizing two important criteria including makespan and cumulative tardiness of jobs. Since the proposed problem is known as an Np-hard problem in literature, we have to develop a meta-heuristic to solve it. We considered general structure of Genetic Algorithm (GA) and developed a new version of that based on Data Envelopment Analysis (DEA). Two objective functions assumed as two different inputs for each Decision Making Unit (DMU). In this paper we focused on efficiency score of DMUs and efficient frontier concept in DEA technique. After introducing the method we defined two different scenarios with considering two types of mutation operator. Also we provided an experimental design with some computational results to show the performance of algorithm. The results show that the algorithm implements in a reasonable time. Keywords—Data envelopment analysis, Efficiency, Flexible <b>flow</b> <b>shops,</b> Genetic algorith...|$|R
40|$|Purpose of {{this paper}} is to analyse and compare the {{behavior}} of workload control models in <b>flow</b> <b>shops</b> of both the MTO (Make-To-Order) and MTS (Make-To-Stock) classes. A simulation model has been built, where a manufacturing cell is loaded through an input control mechanism with shop orders coming from a “pool”. The “pool” itself is fed with planned orders comin...|$|R
50|$|With George Dantzig and D. R. Fulkerson, Johnson {{pioneered the}} use of cutting-plane methods for integer linear {{programming}} in solving the travelling salesman problem. He also made important contributions {{to the theory of}} scheduling production processes, writing an early paper on the <b>flow</b> <b>shop</b> scheduling problem that set the stage for much future research.|$|E
5000|$|The company {{launched}} The Gadget <b>Flow</b> <b>Shop</b> in August 2016. In October 2016 The Next Web named The Gadget Flow one of {{the most}} promising tech startups of 2016. As of 2017, Huffington Post reported that the site had featured over 6,000 products. In 2017 Entrepreneur magazine listed the site as a [...] "secret weapon" [...] to crowdfunding success.|$|E
50|$|A {{constructive}} heuristic {{is a type}} of {{heuristic method}} which starts with an empty solution and repeatedly extends the current solution until a complete solution is obtained. It differs from local search heuristics which start with a complete solution and then try to improve the current solution further via local moves. Examples of some constructive heuristics developed for famous problems are: <b>flow</b> <b>shop</b> scheduling, vehicle routing problem, open shop problem.|$|E
40|$|Persons {{with disabilities}} have severe {{problems}} {{participating in the}} job market and their unemployment rate is usually much higher than the average of the population. This motivates the research of new modes of production which allow the inclusion of these persons at a low overhead. In this paper we study the inclusion of persons with disabilities into <b>flow</b> <b>shops</b> with the objective of minimizing the makespan. Since <b>flow</b> <b>shops</b> usually have only a few ma-chines, we focus on the inclusion of a single worker with disabilities into such a production line. We define the problem, propose several mathematical models for solving it, as well as realistic test instances. Computational tests show that the best model is able to optimally solve instances of moderate size. This allows us to study the potential benefits of this ap-proach. In particular, we observe that the increase in makespan is lower than expected and does not depend on severe disabilities of the workers...|$|R
40|$|Traditionally, {{manufacturing}} {{systems have}} mainly {{been treated as}} either job <b>shops</b> or <b>flow</b> <b>shops.</b> In job shops, parts may arrive with random routes, with each route having a low volume. In <b>flow</b> <b>shops,</b> the routes are fixed and acyclic, as in assembly lines. With the advent of semiconductor manufacturing plants, and more recently, thin film lines, this dichotomy needs to be expanded to consider another class of systems, which we call "re-entrant lines. " The distinguishing feature of these manufacturing systems is that parts visit some machines more than once {{at different stages of}} processing. Scheduling problems arise because several parts at different stages of processing may be in contention with each other for service at the same machine. There may be uncertainties in the form of random service or set-up times, as well as random machine failures and repairs. The goal of scheduling is to improve performance measures such as mean sojourn time in the system, which is also known as the mea [...] ...|$|R
40|$|Ideal {{schedules}} reach both minimum maximum {{completion time}} and minimum total completion time of jobs. It {{is known that}} there exist computable in polynomial time ideal nonpreemptive two-machine schedules of unit-time operation jobs with equal release dates and arbitrary precedence constraints on identical parallel machines, in <b>flow</b> <b>shops</b> and open shops. In this paper, we study the possibility of extending these results to the case where release dates can be different. ...|$|R
5000|$|F2|prmu|Cmax and F3|prmu|Cmax can {{be solved}} optimally by using Johnson's Rule (1954) but for general case there is no {{algorithm}} that guarantee the optimality of the solution.Here is minimization using Johnson's Rule:The <b>flow</b> <b>shop</b> contains n jobs simultaneously available at time zero and to be processed by two machines arranged in series with unlimited storage in between them. The processing time of all jobs are known with certainty. It is required to schedule n jobs on machines so as to minimize makespan. The Johnson's rule for scheduling jobs in two machine <b>flow</b> <b>shop</b> is given below:In an optimal schedule, job i precedes job j if min{pi1,pj2} < min{pj1,pi2}. Where as, pi1 is the processing time of job i on machine 1 and pi2 is the processing time of job i on machine 2. Similarly, pj1 and pj2 are processing times of job j on machine 1 and machine 2 respectively.The steps are summarized below for Johnson's algorithms:let,p1j=processing time of job j on machine 1p2j=processing time of job j on machine 2 ...|$|E
50|$|He {{is known}} for his highly cited {{pioneering}} research in the hardness of approximation;for his sub-linear and best possible approximation algorithm (unless P = NP) based on the farthest-first traversal for the metric k-center problem (k-tMM clustering);and for introducing the open-shop scheduling problem as well as algorithms for its solution that have found numerous applications in several research areas as well as for his research on <b>flow</b> <b>shop</b> scheduling, and job shop scheduling algorithms.He {{is the editor of the}} Handbook on Approximation Algorithms and Metaheuristics, and he is co-editor of Volume 1 (Computer Science and Software Engineering) of the Computing Handbook Set.|$|E
5000|$|The first {{structured}} {{method for}} documenting process flow, e.g. in <b>flow</b> <b>shop</b> scheduling, the flow process chart, {{was introduced by}} Frank and Lillian Gilbreth to members of ASME in 1921 as the presentation “Process Charts, First Steps in Finding the One Best Way to Do Work”. [...] The Gilbreths' tools quickly {{found their way into}} industrial engineering curricula. [...] In the early 1930s, an industrial engineer, Allan H. Mogensen began training business people in the use of some of the tools of industrial engineering at his Work Simplification Conferences in Lake Placid, New York. A 1944 graduate of Mogensen's class, Art Spinanger, took the tools back to Procter and Gamble where he developed their Deliberate Methods Change Program. Another 1944 graduate, Ben S. Graham, Director of Formcraft Engineering at Standard Register Corporation, adapted the flow process chart to information processing with his development of the multi-flow process chart to display multiple documents and their relationships.|$|E
40|$|Process choice, a {{major part}} of {{operations}} strategy, is a key decision that links operations to business strategy. Hayes and Wheelwright, among others, argue that the emphasis given to product customization and other competitive priorities should agree with process choice. Our empirical study investigates whether firms actually link their process choice to product customization and other competitive priorities as hypothesized, and whether compatible decision patterns lead to better performance. Analysis of data collected from managers at 144 U. S. manufacturing plants shows a strong correlation between process choice, product customization, and competitive priorities. Process choice is highly related with the degree of product customization, and also with the emphasis placed on the quality and cost competitive priorities. Job shops and batch shops tend to have more product customization, higher costs, and higher quality. Some continuous <b>flow</b> <b>shops</b> use part commonality and flexible automation to achieve more customization than would otherwise be expected. Without these initiatives, customization in continuous <b>flow</b> <b>shops</b> results in weak performance. operations management, process choice, operations strategy, manufacturing strategy...|$|R
40|$|Flexible <b>flow</b> <b>shops</b> are {{becoming}} increasingly common in industry practice because of higher workloads imposed by jobs on one or more stages, thus requiring two or more units of the same machine type. We present a methodology for solving this important problem, namely group scheduling, {{within the context of}} cellular manufacturing systems in order to minimize the total completion time of all groups of jobs considered in the planning horizon. Two different setup options, namely ############ and ###############, are investigated for jobs within the same group. A combined heuristic solution algorithm, comprised of single- and multiple-pass heuristics, is used for solving the problem. An example problem, consisting of three different problem instances of the same structure, is used to not only demonstrate the applicability of the solution algorithm, but also to identify the setup to ####### job run time ratios that should ###############prevail across all stages represented by two or more identical units in order to select ############### over ############ or vice versa. Keywords Group Scheduling; Flexible <b>Flow</b> <b>Shops</b> 1...|$|R
40|$|We present here {{some recent}} results in single product, capacitated production-inventory systems in {{discrete}} time. The key results are: (1) structure of optimal policy for single stage systems; (2) analyzing via a shortfall process; (3) using simulation to optimize; (4) an approximation using tail probabilities. We consider periodic demand, and multiple stages [...] serial, distribution and assembly. Related topics of re-entrant <b>flow</b> <b>shops,</b> lead time quotation {{and value of}} information are also discussed briefly...|$|R
5000|$|Pull {{strategy}} {{means that}} work centers request the materials {{needed for a}} specific production order from the store or from an upstream workplace (demand driven). Usually this means that semi-finished products (assemblies) are produced for a specific production order of the finished product and therefore stocks held in the supply chain are better managed (usually smaller). This {{can be accomplished by}} using Kanban. Kanban is essentially a production scheduling system. It can be used together with a Process control system to make a Manufacturing Execution System. A Process control system gathers data from the work places where the production order is executed. It receives the individual workloads assigned by the scheduling system to individual work places. The purpose of the scheduling system is to optimize the usage of resources. For scheduling the production of individual workplaces, Kanban can be used solely or a more complex optimization software is necessary. Usually a scheduling system based on an optimization software is necessary if the production is executed on machines and it is non-trivial to decide on which machine a specific production order should be executed in order to use resources optimally. Such a type of scheduling problem is known as Job shop scheduling or <b>Flow</b> <b>shop</b> scheduling. Job shop scheduling means that each production order needs to be executed only on one machine for completion and the problem is to get the optimal sequence of orders for a specific machine and, in case that we have several machines that are able to execute the same order, to assign the order to the machine that has available resources. <b>Flow</b> <b>shop</b> scheduling means that a production order has to pass several types of work-centers (machines) in a predefined order. This is a more complex problem than [...] "job shop scheduling" [...] because after completion of one work-step, the system has to assign an available machine for the next type of operation until all operations for a given production order are completed. Regardless of the type of scheduling problem the algorithm needed to accomplish this task has n! complexity (n factorial). There is a well known similar type of problem called the Travelling salesman problem. Only very small problems of this kind can be solved using Brute-force search. A simple example: Let's assume that we have only one machine and 20 production orders. Due dates have no importance. We want to put these 20 production orders in the optimal sequence so that the overall setup time is minimal. All setup times needed to switch from one order to the other are known and may be different: setting the machine up from order1 to order2 may need 1 minute, but from order 2 to order1 the time may be different from 1 minute. So we have permutations of size 2 for 20 objects which equals 320 distinct pairs of setup costs. But there are 20!= 2,432 * 10^18 distinct possibilities for putting the 20 orders in a sequence. Enumerating each possibility is not feasible because there are 2,432 * 10^18 possibilities. Therefore, Heuristic algorithms are used for solving problems of this kind. These algorithms do not guarantee to find the optimal solution, but they usually find a solution {{in the vicinity of the}} optimal solution in a reasonably short period of time.So the meaning of a MES is to be able to use such heuristic algorithms in order to fulfill the business policy. The business policy defines how the antagonistic restrictions are weighted, which of them are more important. These antagonistic restrictions are: delivery deadlines, machine setup time and machine usage. The scheduling system knows everything about the capabilities of the machines, the available tools and so on, and it can therefore make an optimal decision, which work-place (machine) should execute which part of the production order and when. Of course the operator should be able to refuse the order if something unpredictable has happened (a tool is missing or not operational etc.) and the system should be able to reschedule the order automatically or with the aid of a production planner or supervisor. A MES has to be a dynamic system which can react to the real and unpredictable events.|$|E
40|$|Abstract. Permutation <b>flow</b> <b>shop</b> {{scheduling}} {{problem is a}} complicated global optimum problem. In this paper, according to the characteristics of permutation <b>flow</b> <b>shop</b> {{scheduling problem}}, an improved bat algorithm was used to solve permutation <b>flow</b> <b>shop</b> scheduling problem. The algorithm was experimented and the experimental {{results show that the}} improved bat algorithm has better feasibility and validity for solving permutation <b>flow</b> <b>shop</b> scheduling problem...|$|E
40|$|Abstract: Flexible <b>flow</b> <b>shop</b> {{scheduling}} problem (also called blended <b>flow</b> <b>shop</b> {{scheduling problem}}) {{is a sort}} of complex Job Shop Scheduling problem. For the Flexible <b>Flow</b> <b>Shop</b> scheduling problem, only in very special cases, there are polynomial optimal algorithms. In most of the other cases, the problems are NP-Hard. It is a simplification of the original problem to solve Flexible <b>flow</b> <b>shop</b> scheduling with Greedy algorithm, and it is also a combination of efficiency and algorithm. In this paper, a greedy algorithm solving flexible <b>flow</b> <b>shop</b> scheduling problem is given, and the capability of the algorithm is evaluated...|$|E
40|$|This {{doctoral}} thesis introduces {{the problem of}} batching and scheduling non-permutation <b>flow</b> <b>shops</b> with m>= 2 batch processing machines in sequence and stage specific incompatible job families. Batches are builded at each stage according to family-specific parameters. This creates a stage-interdependent batching and scheduling problem. The thesis includes the corresponding integer linear program as well as problem specific heuristics and a metaheuristic dealing with the planning problem. All methods are evaluated by real problem instances...|$|R
40|$|We provide several non-approximability {{results for}} determin- istic {{scheduling}} problems whose {{objective is to}} minimize the total job completion time. Unless P = NP, none of the problems under consid- eration can be approximated in polynomial time within arbitrarily good precision. Most of our results are derived by Max SNP hardness proofs. Among the investigated problems are: scheduling unrelated machines with some additional features like job release dates, deadlines and weights, scheduling <b>flow</b> <b>shops,</b> and scheduling open shops...|$|R
40|$|Batch <b>flow</b> <b>shops</b> model {{systems that}} process {{a variety of}} job types using a fixed infrastructure. This model has {{applications}} in several areas including chemical manufacturing, building construction, and assembly lines. Since the throughput of such systems depends, often strongly, on the sequence in which they produce various products, scheduling these systems becomes a problem with very practical consequences. Nevertheless, optimally scheduling these systems is NP-complete. This paper demonstrates that batch <b>flow</b> <b>shops</b> can be represented as {{a particular kind of}} heap model in the max-plus algebra. These models are shown to belong to a special class of linear systems that are globally stable over finite input sequences, indicating that information about past states is forgotten in finite time. This fact motivates a new solution method to the scheduling problem by optimally solving scheduling problems on finite-memory approximations of the original system. Error in solutions for these “t-step” approximations is bounded and monotonically improving with increasing model complexity, eventually becoming zero when the complexity of the approximation reaches the complexity of the original system. United States. Department of Homeland Security. Science and Technology Directorate (Contract HSHQDC- 13 -C-B 0052) United States. Air Force Research Laboratory (Contract FA 8750 - 09 - 2 - 0219) ATK Thiokol Inc...|$|R
