123|596|Public
5000|$|Tailored Input/Output (I/O) SW, which handles {{communications}} with the <b>host</b> <b>platform.</b>|$|E
5000|$|Interaction {{with the}} <b>host</b> <b>platform,</b> {{including}} input/output and operating system calls ...|$|E
50|$|Dunlin {{acts as the}} <b>host</b> <b>platform</b> for {{production}} from the Osprey and Merlin subsea fields.|$|E
50|$|APS 2 added {{flexibility}} to integrate applications {{not only with}} <b>hosting</b> <b>platforms</b> but also with each other. APS 2 {{makes it possible to}} create custom user interface in <b>hosting</b> <b>platforms</b> for managing the integrated applications.|$|R
50|$|The Application Packaging Standard (APS) is a {{standard}} that defines a technology for integrating application software with <b>hosting</b> <b>platforms.</b> Integration of an application with <b>hosting</b> <b>platforms</b> is implemented by creating an APS package for this application, and APS package deployment creates an APS application.|$|R
5000|$|OurProject - <b>hosting</b> <b>platform</b> of {{non-profit}} organization Comunes ...|$|R
5000|$|The GNU autotools {{packages}} (i.e. autoconf, automake, and libtool) use {{the notion}} of a build platform, a <b>host</b> <b>platform,</b> and a target platform. The build platform is where the compiler is actually compiled. In most cases, build should be left undefined (it will default from host). The <b>host</b> <b>platform</b> is where the output artifacts from the compiler will be executed. The target platform is used when cross compiling cross compilers, it represents what type of object code the package itself will produce; otherwise the target platform setting is irrelevant. [...] For example, consider cross-compiling a video game that will run on a Dreamcast. The machine where the game is compiled is the <b>host</b> <b>platform</b> while the Dreamcast is the target platform.|$|E
5000|$|Functionally {{identical}} to the Z8030, but using a non-multiplexed [...] "Universal-Bus" [...] designed to allow use with any CPU or <b>host</b> <b>platform,</b> including the Z-80 ...|$|E
50|$|Most defense- and {{industrial}} customers today instead use the integration product Vidview, {{and the accompanying}} Vidview SDK, for integrating components of Vidhance into a <b>host</b> <b>platform.</b>|$|E
50|$|Introduction of Windows Azure, Microsoft's {{data center}} <b>hosting</b> <b>platform.</b>|$|R
5000|$|The {{following}} web <b>hosting</b> <b>platforms</b> allow installations of APS packages: ...|$|R
5000|$|... 11 October 2010 Launch of Fastrade on Web (FoW) - Exchange <b>hosted</b> <b>platform</b> ...|$|R
50|$|Since version 1.6, Python has {{included}} a mmap module in its Standard Library. Details of the module {{vary according to}} whether the <b>host</b> <b>platform</b> is Windows or Unix-like.|$|E
50|$|BriteCloud {{has been}} {{developed}} to protect platforms against these modern tracking systems. Dispensed from a standard 55mm flare cartridge, BriteCloud {{has been designed to}} draw threats away from the <b>host</b> <b>platform,</b> generating large miss distances.|$|E
50|$|The library transparently uses platform-specific code {{through various}} backends {{to access the}} {{capabilities}} of the <b>host</b> <b>platform.</b> Most of the time the developer does not have to write platform-specific code, except for starter classes (also called launchers) that require different setup depending on the backend.|$|E
50|$|The next crowd funding {{campaign}} for 2013/14 was organized over a self <b>hosted</b> <b>platform.</b>|$|R
5000|$|Dozens {{of places}} (including 7 cinemas) restaurants, galleries, hotels became <b>hosting</b> <b>platforms</b> for the fFestival; ...|$|R
5000|$|Developer, a <b>hosting</b> <b>platform</b> {{for open}} source {{projects}} similar to SourceForge.net, GNU Savannah and JavaForge ...|$|R
50|$|AWT {{existed before}} JFC. AWT was heavily {{criticized for being}} {{little more than a}} wrapper around the native {{graphical}} capabilities of the <b>host</b> <b>platform.</b> That meant that the standard widgets in the AWT relied on those capabilities of the native widgets, requiring the developer to also be aware of the differences between host platforms.|$|E
5000|$|Cross {{compiling}} GCC {{requires that}} {{a portion of}} the target platforms C standard library be available on the <b>host</b> <b>platform.</b> The programmer may choose to compile the full C library, but this choice could be unreliable. The alternative is to use newlib, which is a small C library containing only the most essential components required to compile C source code.|$|E
50|$|The Hubble Space Telescope Orbital Systems Test (<b>HOST)</b> <b>platform</b> carried {{experiments}} to validate components planned for installation {{during the third}} Hubble Space Telescope servicing mission and to evaluate new technologies in an earth orbiting environment. There were four experiments on the <b>HOST</b> <b>platform.</b> The NICMOS Cooling System allowed for zero-g verification of a reverse turbocharged Brayton cycle cooler, which allowed for longer life operation than the dewar system used on Hubble at the time.The HST 486 computer allowed for the identification of any radiation-susceptible parts in the DF-224 replacement computer to be carried on the third servicing mission, and demonstrate hardware and software responses to Single Event Upsets (SEUs). A solid state recorder compared on-orbit operation of the flight-spare solid state recorder with the unit installed in Hubble. A fiber optic line test used the same 4 kbit/s data stream that {{was sent to the}} orbiter's Payload Data Interrogator (PDI) and routed to a laptop computer for post-flight comparison.|$|E
40|$|Internet {{applications}} such as on-line news, retail, and financial sites have become commonplace in recent years. Due to the prevalence of these applications, <b>platforms</b> that <b>host</b> them have become an important and attractive business. These <b>platforms,</b> called <b>hosting</b> <b>platforms,</b> typically employ large clusters of servers to host multiple applications. <b>Hosting</b> <b>platforms</b> provide performance guarantees to the hosted applications, such as guarantees on response time or throughput, in return for revenue. ^ Two key features of Internet applications {{make the design of}} <b>hosting</b> <b>platforms</b> challenging. First, modern Internet applications are extremely complex. Existing resource management solutions rely on simple abstractions of these applications and are therefore fail to accurately capture this complexity. Second, these applications exhibit highly dynamic workloads with multi-time-scale variations. Managing the resources in a <b>hosting</b> <b>platform</b> to realize the often opposing goals of meeting application performance targets and achieving high resource utilization is therefore a difficult endeavor. In this thesis, we present resource management mechanisms that an Internet <b>hosting</b> <b>platform</b> can employ to address these challenges. ^ Our solution consists of resource management mechanisms operating at multiple time-scales. We develop a predictive dynamic capacity provisioning technique for Internet applications that operates at the time-scale of hours or days. A key ingredient of this technique is a model of an Internet application that is used for deriving the resource requirements of the application. We employ both queuing theory and empirical measurements to devise models of Internet applications. The second mechanism is a reactive provisioning technique that operates at the time-scale of a few minutes and utilizes virtual machine monitors for agile switching of servers in the <b>hosting</b> <b>platform</b> among applications. Finally, we develop a policing technique that operates at a per-request level. This technique allows a hosted application to remain operational even under extreme overloads where the arrival rates are an order of magnitude higher than the provisioned capacity. Our experiments on a prototype <b>hosting</b> <b>platform</b> consisting of forty Linux machines demonstrate the utility and feasibility of our techniques. ...|$|R
50|$|The current {{version of}} Simics is 5 and it is {{available}} for Microsoft Windows and Linux <b>host</b> <b>platforms.</b>|$|R
5000|$|SUSE Container as a Service Platform, an {{application}} development and <b>hosting</b> <b>platform</b> for container-based applications and services based on Kubernetes ...|$|R
5000|$|In {{order to}} make cross-compilation {{possible}} for Scheme code, CHICKEN imposes a model of separate compilation: A compiled module consists of two shared libraries. One library contains the actual code which will be used at runtime (compiled for the target platform), {{and the other is}} an [...] "import module", which will be used to load the code which runs at compile-time (on the <b>host</b> <b>platform),</b> such as procedural macro code.|$|E
5000|$|Smart Contracts are {{self-executing}} contractual states, {{stored on}} the blockchain. In brief an Automated Transaction is a [...] "Turing complete" [...] set of byte code instructions {{which will be}} executed by a byte code interpreter built into its host. An AT supporting <b>host</b> <b>platform</b> automatically supports various applications ranging from games of chance to automated crowdfunding and ensuring that [...] "long term savings" [...] are not lost forever.|$|E
50|$|The SCC's {{transmission}} rate could be timed from three sources. For basic RS-232-style communications, the SCC included an internal 300 Hz clock {{that could be}} multiplied by 1, 16, 32 to 64, providing data rates between 300 and 19,200 bit/s. Alternately, it could use {{the clock on the}} bus as provided by the <b>host</b> <b>platform,</b> and then divide that clock by 4, 8, 16 or 32 (the later two only in the original NMOS implementation). When used on a machine running at the common 8 MHz clock, this allowed for rates as high as 2 Mbit/s. Finally, the SCC also included inputs for the provision of an external clock. This worked similar to the host clock, but could be used to provide any reference clock signal, independent of the <b>host</b> <b>platform.</b> In this mode, the clock could be divided as in the internal case, or multiplied by 2 for even higher speeds, up to 32.3 Mbit/s in some versions. Using the external clock made it easy to implement LAN adaptors, which normally ran at speeds that were independent of the host computer.|$|E
5000|$|Externally <b>hosted</b> <b>platforms</b> that {{a school}} or {{institution}} exports content to (e.g., the proprietary Web Course Tools, or the open source Moodle) ...|$|R
40|$|The Application Placement Problem (APP, for short) {{arises in}} hosting platforms: {{clusters}} of servers {{that are used}} for hosting large, distributed applications such as Internet services. <b>Hosting</b> <b>platforms</b> imply a business relationship between an entity called the platform provider {{and a number of}} entities called the application providers. The latter pay the former for the resources on the <b>hosting</b> <b>platform,</b> in return for which, the former provides guarantees on resource availability for the applications. This implies that a <b>hosting</b> <b>platform</b> should <b>host</b> only applications for which it has sufficient resources. The objective of the APP is to maximize the number of applications that can be <b>hosted</b> on the <b>platform</b> while satisfying their resource requirements. The complexity of the APP is studied here, with the following results. The general APP is NP-hard; indeed, even restricted versions of the APP may not admit polynomial-time approximation schemes. However, several significant variants of the online version of the APP admit efficient approximation algorithms...|$|R
2500|$|... – LSE’s {{business}} {{solution for}} Post-Trade Services, Data Solutions and Reconciliations. It offers customers a global <b>hosted</b> <b>platform</b> for integrating matching, validation and reconciliations.|$|R
50|$|Posh {{does not}} provide {{alternatives}} where a <b>host</b> <b>platform</b> does not offer a feature, but informs through preprocessor macros what is supported and what is not. It sets macros to assist in compiling with various compilers (such as GCC, MSVC and OpenWatcom), and different host endiannesses. In its simplest form, only a single header file is required. In the optional C source file, there are functions for byte swapping and in-memory serialisation/deserialisation.|$|E
50|$|In {{the summer}} 2005, the online poker room Golden Palace hosted a promotional tournament in Las Vegas, {{at the old}} Binions, with a $100k {{giveaway}} prize. It was billed as the 2005 World Series of Poker Robots. The tournament was bots only with no entry fee. The bot developers were computer scientists from six nationalities who traveled at their own expense. The <b>host</b> <b>platform</b> was Poker Academy. The event also featured a demonstration headsup event with Phil Laak.|$|E
50|$|In {{the summer}} 2007, the University of Alberta hosted a highly {{specialized}} headsup tournament {{between humans and}} their Polaris bot, at the AAAI conference in Vancouver, BC, Canada. The <b>host</b> <b>platform</b> was written by the University of Alberta. There was a $50k maximum giveaway purse with special rules to motivate the humans to play well. The humans paid no entry fee. The unique tournament featured four duplicate style sessions of 500 hands each. The humans won by a narrow margin.|$|E
5000|$|Reseller and {{referrer}} {{programs offered}} by Elastichosts, include one called White-Label. The White-Label Reseller Program allows companies to rebrand Elastichosts cloud <b>hosting</b> <b>platform</b> and resell it.|$|R
40|$|Architected and {{implemented}} the web services APIs for Mitel’s <b>hosted</b> IP telephony <b>platform.</b> • Architected {{and implemented}} the middleware {{used by the}} <b>hosted</b> <b>platform</b> to communicate with multiple versions of the Mitel PBX. • Implemented multiple features on Mitel’s <b>hosted</b> <b>platform</b> portal using JSP, Servlets, Javascript, AJAX, HTML, and CSS in the front-end, and EJBs, JPA, Hibernate, and Postgres in the back-end. • Managed the agile development process in a team of five engineers as the Scrum Master. • Provided technical leadership on J 2 EE enterprise design patterns, frameworks, and object-oriented design patterns. • Established test-driven development in the team; built a test framework based on Selenium Webdriver and TestNG...|$|R
5000|$|Pantheon is a web {{development}} <b>hosting</b> <b>platform</b> for open-source Drupal and WordPress websites. It is an app-specific PaaS provider, sold on {{a monthly}} subscription basis, with several support tiers available.|$|R
