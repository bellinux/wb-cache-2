506|52|Public
5|$|The servers of LastPass were vulnerable, {{but due to}} {{additional}} encryption and <b>forward</b> <b>secrecy,</b> potential attacks {{were not able to}} exploit this bug. However, LastPass recommended that its users change passwords for vulnerable websites.|$|E
5|$|An attack {{may also}} reveal private keys of {{compromised}} parties, which would enable attackers to decrypt communications (future or past stored traffic captured via passive eavesdropping, unless perfect <b>forward</b> <b>secrecy</b> is used, {{in which case}} only future traffic can be decrypted if intercepted via man-in-the-middle attacks).|$|E
25|$|Since November 2013, Twitter has {{provided}} <b>forward</b> <b>secrecy</b> with TLS to users of its service. , 51.9% of TLS-enabled websites are configured to use cipher suites that provide <b>forward</b> <b>secrecy</b> to modern web browsers.|$|E
40|$|Providing <b>forward</b> and {{backward}} <b>secrecy</b> {{is still a}} big challenge in Unattended Wireless Sensor Networks (UWSNs), though some storage schemes have been proposed. Additionally, high storage requirement needs efficient storage techniques. In this paper, we propose a novel homomorphic encryption and key-evolution based scheme for efficient and secure data storage, which supports both <b>forward</b> {{and backward}} <b>secrecy</b> in UWSNs. We show that the stored data based on our scheme {{can be used to}} efficiently compute statistic values, e. g., expected value and variance of the sensed data, {{and at the same time}} the storage cost is significantly reduced using our scheme. Detailed analysis has been conducted to evaluate the scheme in terms of efficiency and securit...|$|R
40|$|Abstract: In mobile {{multihop}} relay (MMR) networks, Relay multicast rekeying algorithm (RMRA) {{is meant}} to ensure secure multicast communication and selective updating of keys in MMR networks. However, in RMRA, the rekeying is carried out after a specific interval of time, which cannot ensure the security for multicast communication on joining the member. Secondly, the rekeying scheme generates a huge communication overhead on the serving multihop relay base station (MR-BS) on frequent joining of members. Lastly, there is nothing about when a member left the group communication. Thus, the rekeying scheme of RMRA fails to provide <b>forward</b> and backward <b>secrecy</b> and also is not scalable. To solve this problem, an improved rekeying scheme based on broadcasting a new seed value on joining and leaving of a member for updating the ongoing key management is proposed. The proposed scheme solves the issue of <b>forward</b> and backward <b>secrecy</b> and the scalability in a very simplified way. The <b>forward</b> and backward <b>secrecy</b> of the proposed scheme has been extensively validated by formal method using rank theorem. Furthermore, mathematical derivation showed that the proposed scheme out-performed the RMRA in terms of communication cost and complexity...|$|R
40|$|Many {{applications}} in distributed computing systems, such as IP telephony, teleconferencing, collaborative workspaces, interactive chats and multi-user games, involve dynamic peer groups. In {{order to secure}} communications in dynamic peer groups, group key agreement protocols are needed. In this paper, {{we come up with}} a new group key agreement protocol, composed of a basic protocol and a dynamic protocol, for large-scale dynamic peer groups. Our protocols are natural extensions of one round tripartite Diffie-Hellman key agreement protocol. In view of it, our protocols are believed to be more efficient than those group key agreement protocols built on two-party Diffie- Hellman key agreement protocol. In addition, our protocols have the properties of group key <b>secrecy,</b> <b>forward</b> and backward <b>secrecy,</b> and key independence. ...|$|R
25|$|<b>Forward</b> <b>secrecy</b> is a {{property}} of cryptographic systems which ensures that a session key {{derived from a}} set {{of public and private}} keys will not be compromised if one of the private keys is compromised in the future. Without <b>forward</b> <b>secrecy,</b> if the server's private key is compromised, not only will all future TLS-encrypted sessions using that server certificate be compromised, but also any past sessions that used it as well (provided of course that these past sessions were intercepted and stored at the time of transmission). An implementation of TLS can provide <b>forward</b> <b>secrecy</b> by requiring the use of ephemeral Diffie-Hellman key exchange to establish session keys, and some notable TLS implementations do so exclusively: e.g., Gmail and other Google HTTPS services that use OpenSSL. However, many clients and servers supporting TLS (including browsers and web servers) are not configured to implement such restrictions. In practice, unless a web service uses Diffie-Hellman key exchange to implement <b>forward</b> <b>secrecy,</b> all of the encrypted web traffic to and from that service can be decrypted by a third party if it obtains the server's master (private) key; e.g., by means of a court order.|$|E
25|$|Since late 2011, Google has {{provided}} <b>forward</b> <b>secrecy</b> with TLS by default to users of its Gmail service, along with Google Docs and encrypted search among other services.|$|E
25|$|The TLS_DH_anon and TLS_ECDH_anon key {{agreement}} methods do not authenticate {{the server}} or the user and hence are rarely used {{because those are}} vulnerable to Man-in-the-middle attack. Only TLS_DHE and TLS_ECDHE provide <b>forward</b> <b>secrecy.</b>|$|E
40|$|Abstract. In 2008, Wan et al. {{presented}} an anonymous ID-based group key agreement scheme for wireless networks, {{for which they}} claim that it ensures anonymity and unlinkability of the group members, as well as <b>forward</b> and backward <b>secrecy</b> of the group session key. In this paper, we show that <b>forward</b> and backward <b>secrecy</b> do not hold for the protocol. We propose a correction that introduces a shielding factor that protects each member’s input to the group key. we also introduce a new feature that assures the correctness of the key as computed by all group members. This results in an increased compu-tation cost, due to extra public key operations, and a similar communication cost. We also show in which practical setting the protocol can be deployed...|$|R
40|$|Abstract—Park {{proposed}} a forward & backward Secure key management scheme in {{wireless sensor networks}} for Process Control Systems (PCSs) or Su-pervisory Control and Data Acquisition (SCADA) systems [7]. The scheme, however, is still vulnerable to an attack called "sandwich attack": two nodes cap-tured at times t 1 and t 2, respectively, surrenders all the group keys used between times t 1 and t 2. In this paper, we propose a fix to the scheme, which can limit the vulnerable time duration to an arbitrarily chosen time span while keeping the <b>forward</b> and backward <b>secrecy</b> of the scheme untouched. Index Terms—sandwich attack, node capture, wire-less sensor network, <b>forward</b> and backward <b>secrecy,</b> key management, process control systems, supervisory control and data acquisition. I...|$|R
40|$|Due to the {{explosive}} development of emerging applications such as, Multicast service, Pay-TV systems, Teleconference, and Collaborate tasks, engineers have proposed many conference key distribution mechanisms. Hwang et al. recently proposed an efficient group key exchange method for providing secure multicast communications, {{which is a}} transformation from the two-party key exchange protocol to the group one. In this article, we point out that Hwang et al. ’s protocol does not preserve the <b>forward</b> and backward <b>secrecy.</b> We therefore propose an improved version which not only inherits the advantage of previous literature, but also provides the <b>forward</b> and backward <b>secrecy</b> among group members. Besides, we give a formal analysis to the correctness of the new method based on BAN authentication logic...|$|R
25|$|In {{addition}} to the properties above, careful configuration of TLS can provide additional privacy-related properties such as <b>forward</b> <b>secrecy,</b> ensuring that any future disclosure of encryption keys cannot be used to decrypt any TLS communications recorded in the past.|$|E
25|$|The {{security}} of encryption that uses {{quantum key distribution}} relies on the foundations of quantum mechanics, in contrast to traditional public key cryptography, which relies on the computational difficulty of certain mathematical functions, and cannot provide any mathematical proof as to the actual complexity of reversing the one-way functions used. QKD has provable security based on information theory, and <b>forward</b> <b>secrecy.</b>|$|E
25|$|TextSecure: A {{stand-alone}} {{application for}} encrypted messaging on Android. TextSecure {{could be used}} to send and receive SMS, MMS, and instant messages. It used end-to-end encryption with <b>forward</b> <b>secrecy</b> and deniable authentication to secure all instant messages to other TextSecure users. TextSecure was merged with RedPhone to become Signal for Android. The source code is available under the GPLv3 license.|$|E
5000|$|Approximately thirty U.S.-based {{organizations}} {{also sent}} {{an open letter}} to Congress on April 21, 2008, criticizing the secrecy and lack of any sort of democratic oversight:"What differentiates the SPP from other security and trade agreements {{is that it is not}} subject to Congressional oversight or approval. The SPP establishes a corporate/government bureaucracy for implementation that excludes civil society participation. ... Facing a worrisome pact pushed <b>forward</b> in <b>secrecy,</b> it is time for Congress to halt this undemocratic approach and establish a process based on openness, accountability, and the participation of civil society.|$|R
40|$|Abstract. Process Control Systems (PCSs) or Supervisory Control and Data Acquisition (SCADA) {{systems have}} {{recently}} {{been added to the}} al-ready wide collection of wireless sensor networks applications. The PCS/ SCADA environment is somewhat more amenable to the use of heavy cryptographic mechanisms such as public key cryptography than other sensor application environments. The sensor nodes in the environment, however, are still open to devastating attacks such as node capture, which makes designing a secure key management challenging. In this paper, a key management scheme is proposed to defeat node capture attack by offering both <b>forward</b> and backward <b>secrecies.</b> Our scheme overcomes the pitfalls which Nilsson et al. 's scheme suffers from, and is not more ex-pensive than their scheme. Key words: wireless sensor network, <b>forward</b> and backward <b>secrecy,</b> key management, process control systems, supervisory control and data acquisition...|$|R
40|$|International audienceGroup-oriented {{services}} and wireless communication networks {{are among the}} emerging technologies {{of the last few}} years. Group key management, which is an important building bloc in securing group communication, has received a particularattention in both academic and industry research communities. This is due to the economical relevance of group-based applications, such as video on demand, videoconferencing, collaborative work. The key management concerns the distribution and updates of the key material each time a member joins or leaves the group. The dynamic aspect of group applications due to free membership joins and leaves in addition to members' mobility makes difficult the design of efficient and scalable key management protocols. Indeed, to secure group communication in mobile environment, the protocol must deal not only with dynamic group membership but also with dynamic member location. Thus, the challenges in designing secure and scalable key management protocols are: the dynamic updates of the key caused by frequent joins and leaves, the large size of the group and the mobility of group members. Many academic researches have addressed the first and the third challenges. However the mobility challenge has not been widely addressed. In this paper, we present our solution for group key management with a mobility support. Our protocol focuses on the above three challenges. It is highly scalable to dynamic groups and treats the nodes' mobility with a null re-keying cost and keeps perfect backward and <b>forward</b> <b>secrecies.</b> Our simulation studies show that our protocol makes better performance compared to other protocols while reducing the overall overhead and the number of re-keying messages and has no security failures...|$|R
25|$|In October 2014, the Electronic Frontier Foundation (EFF) {{included}} TextSecure, RedPhone, and Signal {{in their}} updated Surveillance Self-Defense (SSD) guide. In November 2014, all three received top {{scores on the}} EFF's Secure Messaging Scorecard, along with Cryptocat, Silent Phone, and Silent Text. They received points for having communications encrypted in transit, having communications encrypted with keys the providers don't have access to (end-to-end encryption), {{making it possible for}} users to independently verify their correspondent's identities, having past communications secure if the keys are stolen (<b>forward</b> <b>secrecy),</b> having their code open to independent review (open source), having their security designs well-documented, and having recent independent security audits.|$|E
25|$|The 2013 mass {{surveillance}} disclosures made it {{more widely}} known that IIS is particularly bad in supporting perfect <b>forward</b> <b>secrecy</b> (PFS), especially when {{used in conjunction with}} Internet Explorer. Possessing one of the long term asymmetric secret keys used to establish a HTTPS session should not make it easier to derive the short term session key to then decrypt the conversation, even at a later time. Diffie–Hellman key exchange (DHE) and elliptic curve Diffie–Hellman key exchange (ECDHE) are in 2013 the only ones known to have that property. Only 30% of Firefox, Opera, and Chromium Browser sessions use it, and nearly 0% of Apple's Safari and Microsoft Internet Explorer sessions.|$|E
25|$|Tor aims {{to conceal}} its users' identities and their online {{activity}} from surveillance and traffic analysis by separating identification and routing. It is an implementation of onion routing, which encrypts and then randomly bounces communications through {{a network of}} relays run by volunteers around the globe. These onion routers employ encryption in a multi-layered manner (hence the onion metaphor) to ensure perfect <b>forward</b> <b>secrecy</b> between relays, thereby providing users with anonymity in network location. That anonymity extends to the hosting of censorship-resistant content by Tor's anonymous hidden service feature. Furthermore, by keeping some of the entry relays (bridge relays) secret, users can evade Internet censorship that relies upon blocking public Tor relays.|$|E
50|$|The {{realisation}} of {{the necessity}} of civilian evacuation from the Channel Islands came very late. With no <b>forward</b> planning and <b>secrecy</b> being maintained, communications between the island governments and the UK took place in an atmosphere of confusion and misinterpretation. Opinion was divided and chaos ensued with different policies adopted by the different islands. The British government concluded its best policy was to make available as many ships as possible so that islanders had the option to leave if they wanted to.|$|R
40|$|Piao et al. {{proposed}} a polynomial-based key management scheme for secure intra-group and inter-group communication. In this note, {{we present a}} simple attack on this scheme and show {{that it does not}} satisfy group <b>forward</b> and backward <b>secrecy.</b> In other words, we show that when a node leaves a group, it can easily compute the new intragroup key based on its old key and the publicly broadcasted data. Similarly, we also show that when a node joins a group, it can discover the old keys...|$|R
40|$|With {{reference}} to a network consisting of sensor nodes connected by wireless links, we approach {{the problem of the}} distribution of the cryptographic keys. We present a solution based on communication channels connecting sequences of adjacent nodes. All the nodes in a channel share the same key. This result is obtained by propagating the key connecting the first two nodes to all the other nodes in the channel. The key propagation mechanism is also used for key replacement, as is required, for instance, in group communication to support forms of <b>forward</b> and backward <b>secrecy,</b> when a node leaves a group or a new node is added to an existing group...|$|R
2500|$|Even where Diffie-Hellman key {{exchange}} is implemented, server-side session management mechanisms can impact <b>forward</b> <b>secrecy.</b> The use of TLS session tickets (a TLS extension) causes the session {{to be protected}} by AES128-CBC-SHA256 regardless of any other negotiated TLS parameters, including <b>forward</b> <b>secrecy</b> ciphersuites, and the long-lived TLS session ticket keys defeat the attempt to implement <b>forward</b> <b>secrecy.</b> [...] Stanford University research in 2014 also found that of 473,802 TLS servers surveyed, 82.9% of the servers deploying ephemeral Diffie-Hellman (DHE) key exchange to support <b>forward</b> <b>secrecy</b> were using weak Diffie Hellman parameters. These weak parameter choices could potentially compromise {{the effectiveness of the}} <b>forward</b> <b>secrecy</b> that the servers sought to provide.|$|E
2500|$|... Pidgin scored {{seven out}} of seven points on the Electronic Frontier Foundation's secure {{messaging}} scorecard. They have received points for having communications encrypted in transit, having communications encrypted with keys the providers don't have access to (end-to-end encryption), {{making it possible for}} users to independently verify their correspondent's identities, having past communications secure if the keys are stolen (<b>forward</b> <b>secrecy),</b> having their code open to independent review (open source), having their security designs well-documented, and having recent independent security audits.|$|E
50|$|<b>Forward</b> <b>secrecy</b> {{is seen as}} an {{important}} security feature by several large Internet information providers. Since late 2011, Google provided <b>forward</b> <b>secrecy</b> with TLS by default to users of its Gmail service, Google Docs service, and encrypted search services.Since November 2013, Twitter provided <b>forward</b> <b>secrecy</b> with TLS to its users. Wikis hosted by the Wikimedia Foundation have all provided <b>forward</b> <b>secrecy</b> to users since July 2014.|$|E
40|$|A {{self-healing}} {{mechanism in}} key management {{is an important}} means for large-scale clustering wireless sensor networks that enable non-revoked nodes use their private information and the received broadcast messages to recover the lost session keys on their own. In this study, we propose a dynamic self-healing key management scheme for large-scale clustering wireless sensor networks {{that is based on}} Exclusion Basis System (EBS). We use forward and backward key chains to form cluster session key chain for self-healing, take t-degree polynomial keys to replace the original keys used in EBS. The analysis shows that the proposed scheme has the properties of <b>forward</b> and backward <b>secrecy</b> and resisting to a collusion attack, which is suitable for resource-constrained wireless sensor networks...|$|R
40|$|Process Control Systems (PCSs) or Supervisory Control and Data Acquisition (SCADA) {{systems have}} {{recently}} {{been added to the}} already wide collection of wireless sensor networks applications. The PCS/SCADA environment is somewhat more amenable to the use of heavy cryptographic mechanisms such as public key cryptography than other sensor application environments. The sensor nodes in the environment, however, are still open to devastating attacks such as node capture, which makes designing a secure key management challenging. In this paper, a key management scheme is proposed to defeat node capture attack by offering both <b>forward</b> and backward <b>secrecies.</b> Our scheme overcomes the pitfalls which Nilsson et al. 's scheme suffers from, and is not more expensive than their scheme...|$|R
40|$|Abstract — Sensors {{provides}} {{flexibility to}} the user to be deployed in any environment of user’s choice. In spite of many disadvantages, the beneficiary factors have provided a strong intention to use these nodes as a monitoring tool to ease human effort. To add better integrity to the data being transmitted, encryption key can be utilized. Authenticating the data enhances security to a larger extent. In this study the above concepts are being focused. The paper generates encryption key which not only provides integrity to the data being transmitted, but strongly authenticates {{the source of the}} generation of data. The model adopts <b>forward</b> and backward <b>secrecy.</b> The study maximizes the security against sinkhole, Sybil and wormhole attack. Keywords — prevention and detection technique, location- base...|$|R
50|$|In cryptography, <b>forward</b> <b>secrecy</b> (FS), {{also known}} as perfect <b>forward</b> <b>secrecy</b> (PFS), is a {{property}} of secure communication protocols in which compromise of long-term keys does not compromise past session keys. <b>Forward</b> <b>secrecy</b> protects past sessions against future compromises of secret keys or passwords. If <b>forward</b> <b>secrecy</b> is used, encrypted communications and sessions recorded in the past cannot be retrieved and decrypted should long-term secret keys or passwords be compromised in the future, even if the adversary actively interfered.|$|E
5000|$|Even where Diffie-Hellman key {{exchange}} is implemented, server-side session management mechanisms can impact <b>forward</b> <b>secrecy.</b> The use of TLS session tickets (a TLS extension) causes the session {{to be protected}} by AES128-CBC-SHA256 regardless of any other negotiated TLS parameters, including <b>forward</b> <b>secrecy</b> ciphersuites, and the long-lived TLS session ticket keys defeat the attempt to implement <b>forward</b> <b>secrecy.</b> [...] Stanford University research in 2014 also found that of 473,802 TLS servers surveyed, 82.9% of the servers deploying ephemeral Diffie-Hellman (DHE) key exchange to support <b>forward</b> <b>secrecy</b> were using weak Diffie Hellman parameters. These weak parameter choices could potentially compromise {{the effectiveness of the}} <b>forward</b> <b>secrecy</b> that the servers sought to provide.|$|E
50|$|Since late 2011, Google has {{provided}} <b>forward</b> <b>secrecy</b> with TLS by default to users of its Gmail service, along with Google Docs and encrypted search among other services.Since November 2013, Twitter {{has provided}} <b>forward</b> <b>secrecy</b> with TLS to users of its service. , 51.9% of TLS-enabled websites are configured to use cipher suites that provide <b>forward</b> <b>secrecy</b> to modern web browsers.|$|E
40|$|We use {{symmetric}} keys {{to encrypt}} and decrypt attribute values. These keys are distributed {{only to the}} brokers that are trusted with the attribute values. The system will never deliver these keys to clients. This reduces the number of nodes that are trusted with sensitive keys, and that take part in key management protocols. This does not affect security since local brokers encrypt and decrypt attribute values on behalf of connected clients, and deliver events to clients over secure links. To support cryptographic properties such as key freshness, and <b>forward</b> and backward <b>secrecy</b> [22], the system requires key management service(s). A representation of quantified trust relationships, the trust dependency graph, and a sample QuanTM application specific to the KeyNote trust management language, are also proposed...|$|R
40|$|Abstract: Problem statement: In grid environment, group {{communication}} {{is an important}} mechanism to realize large-scale information resource sharing. However providing security for {{group communication}} in grid environment is very difficult because the group is dynamic in nature. Scalable group re-keying {{is one of the}} important issues in secure group communication. These group keys should be updated whenever a member joins/leaves the group to maintain the <b>forward</b> and backward <b>secrecy.</b> Approach: In the recent years, cryptography in grid environment plays an important role that allows secure group communication among members in the dynamic group. Results: Our algorithm for key distribution falls into NP-class. Therefore the key distribution is safe. Conclusion: Performance of the proposed algorithm is computationally efficient and cryptographically strong for message generation and key distribution...|$|R
40|$|Alzaid et al. {{proposed}} a forward & backward secure key management scheme in {{wireless sensor networks}} for Process Control Systems (PCSs) or Supervisory Control and Data Acquisition (SCADA) systems. The scheme, however, is still vulnerable to an attack called the sandwich attack that can be launched when the adversary captures two sensor nodes at times t 1 and t 2, and then reveals all the group keys used between times t 1 and t 2. In this paper, a fix to the scheme is proposed in order to limit the vulnerable time duration to an arbitrarily chosen time span while keeping the <b>forward</b> and backward <b>secrecy</b> of the scheme untouched. Then, the performance analysis for our proposal, Alzaid et al. ’s scheme, and Nilsson et al. ’s scheme is given...|$|R
