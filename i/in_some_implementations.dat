99|10000|Public
25|$|The {{mechanics}} of the process are the same regardless of how many candidates the voter ranks, and how many are left unranked. <b>In</b> <b>some</b> <b>implementations,</b> the voter ranks as many or as few choices as they wish, while in other implementations the voter is required to rank either all candidates, or a prescribed number of them.|$|E
25|$|For efficiency, Prolog code is {{typically}} compiled to abstract machine code, often {{influenced by the}} register-based Warren Abstract Machine (WAM) instruction set. Some implementations employ abstract interpretation to derive type and mode information of predicates at compile time, or compile to real machine code for high performance. Devising efficient implementation methods for Prolog code is a field of active research in the logic programming community, and various other execution methods are employed <b>in</b> <b>some</b> <b>implementations.</b> These include clause binarization and stack-based virtual machines.|$|E
2500|$|Though many {{platforms}} feature custom extensions and letter case {{requirements and}} other minor syntactical features vary slightly <b>in</b> <b>some</b> <b>implementations,</b> the fundamental syntax rules, commands and features that define MML and {{are present in}} whole or in part in all implementations are as follows: ...|$|E
3000|$|... {{the seat}} generates comfort {{and is also}} used as output device for lateral warning <b>in</b> <b>some</b> <b>implementation</b> of the lane support function; [...]...|$|R
50|$|Indeed, as a {{last measure}} (if one does not control the platform, as <b>in</b> <b>some</b> <b>implementation</b> of digital rights management, such as Trusted Computing), one can in fact exploit the analog hole and use an analog {{recorder}} (video camera or microphone), though this suffers most from quality degradation.|$|R
50|$|Where {{number is}} an integer number to {{indicate}} the time period <b>in</b> seconds. <b>Some</b> <b>implementations</b> may support floating point numbers.|$|R
2500|$|The most {{unbalanced}} partition {{occurs when}} the pivot divides the list into two sublists of sizes [...] and [...] This may occur if the pivot {{happens to be the}} smallest or largest element in the list, or <b>in</b> <b>some</b> <b>implementations</b> (e.g., the Lomuto partition scheme as described above) when all the elements are equal.|$|E
2500|$|<b>In</b> <b>some</b> <b>implementations</b> {{an extra}} 'sentinel' or 'dummy' node may be added {{before the first}} data record or after the last one. This {{convention}} simplifies and accelerates some list-handling algorithms, by ensuring that all links can be safely dereferenced and that every list (even one that contains no data elements) always has a [...] "first" [...] and [...] "last" [...] node.|$|E
2500|$|The first {{release of}} MIPS32, based on MIPS II, added {{conditional}} moves, prefetch instructions, {{and other features}} from the R4000 and R5000 families of 64-bit processors. [...] The first release of MIPS64 adds a MIPS32 mode to run 32-bit code. The MUL and MADD (multiply-add) instructions, previously available <b>in</b> <b>some</b> <b>implementations,</b> {{were added to the}} MIPS32 and MIPS64 specifications, as were cache control instructions.|$|E
25|$|The {{following}} are non-standard characters and exist only <b>in</b> <b>some</b> cron <b>implementations,</b> such as Quartz java scheduler.|$|R
50|$|Though {{technically}} SRTP {{can easily}} accommodate new encryption algorithms, the SRTP standard states that new encryption algorithms besides those described cannot simply be added <b>in</b> <b>some</b> <b>implementation</b> of SRTP protocol. The only legal {{way to add}} a new encryption algorithm, while still claiming the compatibility with SRTP standard, is to publish a new companion standard track RFC which must clearly define the new algorithm.|$|R
50|$|<b>In</b> <b>some</b> DOS <b>implementations,</b> video modes above 7 are not documented. Under Multiuser DOS, {{the only}} valid {{argument}} {{in conjunction with}} PCTERM is 7.|$|R
2500|$|Question mark ( [...] ? [...] ): <b>In</b> <b>some</b> <b>{{implementations}},</b> {{used instead}} of '*' for leaving either day-of-month or day-of-week blank. Other cron implementations substitute [...] "?" [...] with the start-up time of the cron daemon, so that ? ? * * * * would be updated to 25 8 * * * * if cron started-up on 8:25am, and would run at this time every day until restarted again.|$|E
50|$|<b>In</b> <b>some</b> <b>implementations,</b> {{emulated}} through BIOS as a halting sequence.|$|E
50|$|<b>In</b> <b>some</b> <b>implementations</b> of Tiny BASIC, {{entering}} a command that divides any number by zero will return 65535.|$|E
50|$|Multi-session {{mastering}} is {{also possible}} <b>in</b> UDF, though <b>some</b> <b>implementations</b> {{may be unable to}} read disks with multiple sessions.|$|R
50|$|For example, a 1024×1024 4-bpp PVRTC texture {{would have}} 65536 blocks and take 524288 bytes of storage/memory space. <b>In</b> <b>some</b> {{hardware}} <b>implementations,</b> the blocks {{are arranged in}} Morton order.|$|R
25|$|Recent {{development}} <b>in</b> <b>some</b> popular <b>implementations</b> of forum software {{has brought}} social network features and functionality. Such features include personal galleries, pages {{as well as}} a social network like chat systems.|$|R
5000|$|Algol 68 <b>in</b> <b>some</b> <b>implementations</b> treat letter {{sequences}} prefixed by {{a single}} quote, , as being keywords (e.g., [...] ) ...|$|E
50|$|All queues are {{typically}} {{guaranteed to be}} fair and, <b>in</b> <b>some</b> <b>implementations,</b> may be guaranteed to be first in first out.|$|E
5000|$|<b>In</b> <b>some</b> <b>implementations,</b> the {{horizontal}} direction of scan alternates between lines; {{this is called}} [...] "serpentine scanning" [...] or boustrophedon transform dithering.|$|E
5000|$|<b>In</b> <b>some</b> CSV <b>implementations,</b> leading and {{trailing}} {{spaces and}} tabs are trimmed (ignored). Such trimming is forbidden by RFC 4180, which states [...] "Spaces are {{considered part of}} a field {{and should not be}} ignored." ...|$|R
30|$|We provide <b>in</b> {{this section}} <b>some</b> <b>implementation</b> {{guidelines}} for the proposed PSPF strategy. Comparison with the considered decode-and-forward schemes, in terms of implementation complexity, will also be made.|$|R
50|$|The Command {{pattern is}} a {{software}} design pattern {{which can be}} used to implement Multi-level Undo. The Memento pattern is useful for capturing the state of the program before user actions. This can be used for state reversal needed <b>in</b> <b>some</b> undo <b>implementations.</b>|$|R
5000|$|... /* Write {{beyond the}} end of arr. Undefined {{behaviour}} in standard C, will write to i <b>in</b> <b>some</b> <b>implementations.</b> */ arr2 = 20; ...|$|E
50|$|The NAMESERVER {{protocol}} {{is used by}} the DARPA Trivial Name Server, {{a server}} process called tnamed that is provided <b>in</b> <b>some</b> <b>implementations</b> of UNIX.|$|E
50|$|The mcount {{function}} {{may not be}} thread-safe <b>in</b> <b>some</b> <b>implementations,</b> so multi-threaded application profiles can be incorrect (typically it only profiles {{the main}} thread of application).|$|E
25|$|In September 2014, {{a variant}} of Daniel Bleichenbacher’s PKCS#1 v1.5 RSA Signature Forgery {{vulnerability}} was announced by Intel Security Advanced Threat Research. This attack, dubbed BERserk, {{is a result of}} incomplete ASN.1 length decoding of public key signatures <b>in</b> <b>some</b> SSL <b>implementations,</b> and allows a man-in-the-middle attack by forging a public key signature.|$|R
5000|$|<b>In</b> <b>some</b> old <b>implementations</b> of the BASIC {{programming}} language, user-defined {{functions are}} defined using the [...] "DEF FN" [...] syntax. More modern dialects of BASIC {{are influenced by}} the structured programming paradigm, where most or all of the code is written as user-defined functions or procedures, and the concept becomes practically redundant.|$|R
40|$|AaSTRXCeV. A new {{algorithm}} is presented for constructing auxiliary digital search trees {{to aid in}} exact-match substrlng searching. This algorithm has the same asymptotic running time bound as previously published algorithms, but is more economical <b>in</b> space. <b>Some</b> <b>implementation</b> considera-tions are discussed, and new work on the modification of these search trees in response to incremental changes in the strings they index (the update problem) is presented...|$|R
50|$|The {{structure}} contains structures ai_family and sockaddr {{with its}} own sa_family field. These are set to the same value when the structure is created with function getaddrinfo <b>in</b> <b>some</b> <b>implementations.</b>|$|E
50|$|<b>In</b> <b>some</b> <b>implementations,</b> {{a comment}} may begin {{anywhere}} on a line, including {{on the same}} line after properties or section declarations. In others, including the WinAPI function , comments must occur on lines by themselves.|$|E
5000|$|<b>In</b> <b>some</b> <b>implementations</b> of Jaro-Winkler, the prefix bonus [...] is {{only added}} when the {{compared}} strings have a Jaro distance above a set [...] "boost threshold" [...] The boost threshold in Winkler's implementation was 0.7.|$|E
50|$|<b>In</b> {{the past}} <b>some</b> <b>implementations</b> of Bluetooth {{proximity}} marketing require users to run Java applications on their phones {{to enable them}} to receive content. This has the advantage that only those who choose to will receive content. Others require no handset-side software.|$|R
50|$|<b>In</b> <b>some</b> cases, <b>implementation</b> of {{a simple}} random sample can be more {{difficult}} than some other types of designs (for example, grid samples) {{because of the difficulty}} of precisely identifying random geographic locations. Additionally, simple random sampling can be more costly than other plans if difficulties in obtaining samples due to location causes an expenditure of extra effort.|$|R
2500|$|This method {{reduces the}} {{complexity}} of the model at the simulation stage, and thereby saves time and computational power. A detailed discussion of the computational cost of population-based versus particle-based methods is summarised in a recent study by Hogg et al. The simulation follows each particle, and at each simulation step, a particle only [...] "sees" [...] the reactions (or rules) that apply to it. This depends {{on the state of the}} particle and, <b>in</b> <b>some</b> <b>implementation,</b> on the states of its neighbours in a holoenzyme or complex. As the simulation proceeds, the states of particles are updated according to the rules that are fired. Figure 2 illustrates the process of particle-based modeling using a simple system with three molecules of type A and one molecular tetramer of type B, which goes through three simulation steps following a simple set of rules.|$|R
