165|4512|Public
25|$|In March 2009, AVST shipped CallXpress 8.0 {{to provide}} a <b>fault</b> <b>tolerant</b> <b>system</b> through its multi-server architecture. The {{solution}} also delivered Neverfail continuous availability and disaster recovery deployment options.|$|E
25|$|The {{objective}} of Byzantine fault tolerance {{is to be}} able to defend against Byzantine failures, in which components of a system fail with symptoms that prevent some components of the system from reaching agreement among themselves, where such agreement is needed for the correct operation of the system. Correctly functioning components of a Byzantine <b>fault</b> <b>tolerant</b> <b>system</b> will be able to provide the system's service, assuming there are not too many faulty components.|$|E
5000|$|Comparator-checked <b>fault</b> <b>tolerant</b> <b>system</b> pattern {{provides}} a way to monitor the failure free behavior of a component.|$|E
40|$|This paper {{proposes a}} {{modelling}} approach suitable for formalizing <b>fault</b> <b>tolerant</b> <b>systems,</b> {{taking into account}} different fault scenarios. Verification of the properties of such systems is then performed using model checking. A general framework for the formal specification and verification of <b>fault</b> <b>tolerant</b> <b>systems</b> is defined starting from these principles, and experience with its application to two case studies is then presented...|$|R
50|$|The {{following}} {{areas have}} been identified for research leading to M.Tech./Ph.D. degrees : Artificial Intelligence, Functional Languages, Computer Networks, Computer Graphics and Real-Time <b>Fault</b> <b>Tolerant</b> <b>Systems.</b>|$|R
40|$|Security {{intrusions}} {{and successful}} attacks on computer systems will occur {{regardless of the}} quality of the control and protection systems in use. It is therefore necessary to build computer systems that offer essential services even in the presence of a successful attack. Such systems are called intrusion <b>tolerant.</b> Intrusion <b>tolerant</b> <b>systems</b> differ from <b>fault</b> <b>tolerant</b> <b>systems</b> by their threat models. <b>Fault</b> <b>tolerant</b> <b>systems</b> are designed to survive spontaneous errors (due to natural physical processes), whereas intrusion <b>tolerant</b> <b>systems</b> should withstand attacks from skilled, well informed and resourceful adversaries who would launch multi-stage attacks on the system, where also the detection and recovery mechanisms are targeted. Spontaneous errors may be statistically modeled, whereas a targeted attack cannot. The research on intrusion <b>tolerant</b> <b>systems</b> draws on knowledge and experience from several other research fields, i. a. computing security, distributed <b>systems</b> and <b>fault</b> <b>tolerant</b> <b>systems.</b> These fields bring with them slightly different perspectives into the research, which will be presented in the report. The construction of intrusion <b>tolerant</b> <b>systems</b> builds on top of a range of well know...|$|R
5000|$|In computing, System Fault Tolerance (SFT) is a <b>fault</b> <b>tolerant</b> <b>system</b> {{built into}} NetWare {{operating}} systems. Three levels of fault tolerance exist: ...|$|E
50|$|In March 2009, AVST shipped CallXpress 8.0 {{to provide}} a <b>fault</b> <b>tolerant</b> <b>system</b> through its multi-server architecture. The {{solution}} also delivered Neverfail continuous availability and disaster recovery deployment options.|$|E
50|$|CFS {{can be used}} in a <b>fault</b> <b>tolerant</b> <b>system</b> {{by using}} shared disk {{subsystems}} (dual ported SCSI or SAN), or by using DRBD. If the node that is currently directly accessing the file system crashes then the CFS mount fails over to the other node that is directly connected to the disk and the cluster now accesses the file system via that node.|$|E
40|$|In the thesis, a {{methodology}} alternative to existing methods of digital systems design with increased dependability implemented into FPGA is presented, new features {{which can be}} used in the implementation and testing of these systems are demonstrated. The research is based on the use of FPGA partial dynamic reconfiguration for the design of <b>fault</b> <b>tolerant</b> <b>systems.</b> In these applications, the partial dynamic reconfiguration {{can be used as a}} mechanism to correct the fault and recover the system after the fault occurrence. First, the general principles of diagnostics, testing and digital systems dependability are presented including a brief description of FPGA components and their architectures. Next, a survey of currently used methods and techniques used for the design and implementation of <b>fault</b> <b>tolerant</b> <b>systems</b> into FPGA is described, especially the methods used for fault detection and localization, their correction, together with the principles of evaluating <b>fault</b> <b>tolerant</b> <b>systems</b> design quality. Â  The most important part of the thesis is seen in the description of the design methodology, implementation and testing of <b>fault</b> <b>tolerant</b> <b>systems</b> implemented into FPGAs which uses SRAMs as the configuration memory. First, the methodology of developing and automated checker components design for digital systems and communication protocols is presented. Then, a reference architecture of a dependable system implemented into FPGA is demonstrated including several <b>fault</b> <b>tolerant</b> architectures based on the use of partial dynamic reconfiguration as the mechanism of fault correction and the recovery from it. The principles of controlling the reconfiguration process are described together with the description of the test platform which allows to test and verify the design of <b>fault</b> <b>tolerant</b> <b>systems</b> based on the methodology presented in the thesis. The experimental results and the contribution of the thesis are discussed in the conclusions...|$|R
40|$|The {{validation}} process comprises the activities required {{to insure the}} agreement of system realization with system specification. A preliminary validation methodology for <b>fault</b> <b>tolerant</b> <b>systems</b> documented. A general framework for a validation methodology is presented along {{with a set of}} specific tasks intended for the validation of two specimen system, SIFT and FTMP. Two major areas of research are identified. First, are those activities required to support the ongoing development of the {{validation process}} itself, and second, are those activities required to support the design, development, and understanding of <b>fault</b> <b>tolerant</b> <b>systems...</b>|$|R
40|$|This {{paper is}} {{concerned}} with the reinitialization of <b>fault</b> <b>tolerant</b> <b>systems</b> in which detection and isolation (FDI) techniques are used, on-line, to identify and compensate for system failures. Specifically, it will focus on FDI techniques which utilize analytic redundancy, arising from a knowledge of the plant dynamics, by analyzing the residuals of a no-fail filter designed on the assumption of no failures. In these types of <b>fault</b> <b>tolerant</b> <b>systems,</b> system failures have to propagate through the no-fail filter dynamics in order to get detected. Therefore, the no-fail filter must be reinitialized after the isolation of a failure so that the accumulated effects of the failure are removed. In this paper, various approaches to this reinitialization problem will be discussed...|$|R
50|$|RapidIO {{supports}} high availability, <b>fault</b> <b>tolerant</b> <b>system</b> design, including hot swap. The error {{conditions that}} require detection, and standard registers to communicate status and error information, are defined. A configurable isolation mechanism is also defined {{so that when}} {{it is not possible to}} exchange packets on a link, packets can be discarded to avoid congestion and enable diagnosis and recovery activities. In-band (port-write packet) and out-of-band (interrupt) notification mechanisms are defined.|$|E
50|$|The {{objective}} of Byzantine fault tolerance {{is to be}} able to defend against Byzantine failures, in which components of a system fail with symptoms that prevent some components of the system from reaching agreement among themselves, where such agreement is needed for the correct operation of the system. Correctly functioning components of a Byzantine <b>fault</b> <b>tolerant</b> <b>system</b> will be able to provide the system's service, assuming there are not too many faulty components.|$|E
5000|$|The above {{example of}} a 2oo3 <b>fault</b> <b>tolerant</b> <b>system</b> {{increases}} both mission reliability as well as safety. However, the [...] "basic" [...] reliability of the system will in this case still be lower than a non redundant (1oo1) or 2oo2 system. Basic reliability engineering covers all failures, including those that might not result in system failure, but do result in additional cost due to: maintenance repair actions; logistics; spare parts etc. For example, replacement or repair of 1 faulty channel in a 2oo3 voting system, (the system is still operating, although with one failed channel it has actually become a 2oo2 system) is contributing to basic unreliability but not mission unreliability. As an example, {{the failure of the}} tail-light of an aircraft will not prevent the plane from flying (and so is not considered a mission failure), but it does need to be remedied (with a related cost, and so does contribute to the basic unreliability levels).|$|E
40|$|<b>Fault</b> <b>tolerant</b> <b>systems</b> {{require the}} ability to detect and recover from {{physical}} damage caused by the hardware s environment, faulty connectors, and system degradation over time. This ability applies to military, space, and industrial computing applications. The integrity of Point-to-Point (P 2 P) communication, between two microcontrollers for example, {{is an essential part}} of <b>fault</b> <b>tolerant</b> computing <b>systems.</b> In this paper, different methods of fault detection and recovery are presented and analyzed...|$|R
5000|$|In {{the area}} of <b>fault</b> <b>tolerant</b> control <b>systems,</b> the main {{contribution}} of Jakob Stoustrup has been to introduce a number of optimization based methods in order to solve fault diagnosis and <b>fault</b> <b>tolerant</b> control problems.The results include explicit methods for time-varying, non-linear, and uncertain systems {{for the design of}} fault diagnosis and <b>fault</b> <b>tolerant</b> control <b>systems.</b> Inspired by his previous work in {{the area of}} robust control theory, Jakob Stoustrup and his co-workers has proposed a general architecture for the modeling and design of fault diagnosis and <b>fault</b> <b>tolerant</b> control <b>systems,</b> handling the above-mentioned challenges.|$|R
40|$|Abstract- This paper {{describes}} the design, implementation and usage of a secure scalable Byzantine <b>fault</b> <b>tolerant</b> MDS <b>system</b> in the Grid. The scalable Byzantine <b>fault</b> <b>tolerant</b> MDS <b>system</b> provides a hierarchy GIIS servers, a local GIIS domain can require the resource it needs from remote GIIS domain. By using the statemachine replication approach and quorum system technique, the scalable Byzantine <b>fault</b> <b>tolerant</b> MDS <b>system</b> can tolerate not only benign faults, but also arbitrary (Byzantine) ones. An optimizing key management and caching mechanism is also explored in this paper...|$|R
40|$|The {{design of}} a sensor <b>fault</b> <b>tolerant</b> <b>system</b> which uses {{analytical}} redundancy for the Terminal Configured Vehicle (TCV) research aircraft in a Microwave Landing System (MLS) environment was studied. The <b>fault</b> <b>tolerant</b> <b>system</b> provides reliable estimates for aircraft position, velocity, and attitude {{in the presence of}} possible failures in navigation aid instruments and onboard sensors. The estimates, provided by the <b>fault</b> <b>tolerant</b> <b>system,</b> are used by the automated guidance and control system to land the aircraft along a prescribed path. Sensor failures are identified by utilizing the analytic relationship between the various sensor outputs arising from the aircraft equations of motion...|$|E
40|$|AbstractâGeneralized {{algorithm}} of {{fault tolerance}} is pre-sented, using time, structural and information redundancy types. It is shown that algorithm of fault tolerance might be im-plemented using hardware and software. It is {{also shown that}} {{for the design of}} efficient <b>fault</b> <b>tolerant</b> <b>system</b> elements must be malfunction tolerant. The advantage of element malfunction tol-erance is proven in reliability terms. Reliability analysis of a <b>fault</b> <b>tolerant</b> <b>system</b> is performed with deliberate separation of malfunction and permanent faults. Special function of reliabil-ity gain is introduced and used to model system reliability. Maximum reliability of <b>fault</b> <b>tolerant</b> <b>system</b> is achievable with less than a duplication system and depends on malfunction/per-manent fault ratio and coverage of faults. System level of fault tolerance prerogative is the reconfiguration from permanent faults. I...|$|E
30|$|Performance {{evaluation}} criteriaâs {{identified in}} TableÂ  2 signify that authenticity of fault tolerant model will improve by incorporating {{more of its}} factors. It is perhaps impossible to consider all the criteriaâs while designing a <b>fault</b> <b>tolerant</b> <b>system.</b> However, more the considered points mentioned in TableÂ  2, better will be the designed <b>fault</b> <b>tolerant</b> <b>system.</b> Similarly, trying to achieve all of the defined criteriaâs, and architecture will be bulky that ultimately {{will result in the}} overall reduction in performance.|$|E
5000|$|... #Caption: Completely {{redundant}} system without SPOFs.(Note: Assumes Generator and Grid sources are each rated at N, Each UPS is rated at N and [...] "A/C" [...] and [...] "Electrical" [...] are in themselves completely <b>fault</b> <b>tolerant</b> <b>systems.</b>|$|R
40|$|In this paper, we {{describe}} a proactive recovery {{scheme based on}} service migration for long-running Byzantine <b>fault</b> <b>tolerant</b> <b>systems.</b> Proactive recovery is an essential method for ensuring long term reliability of <b>fault</b> <b>tolerant</b> <b>systems</b> that are under continuous threats from malicious adversaries. The primary benefit of our proactive recovery scheme is a reduced vulnerability window under normal operation. This is achieved by two means. First, the time-consuming reboot step {{is removed from the}} critical path of proactive recovery. Second, the response time and the service migration latency are continuously profiled and an optimal service migration interval is dynamically determined during runtime based on the observed system load and the user-specified availability requirement...|$|R
40|$|Two {{design rules}} which aid the {{construction}} of distributed computing systems {{and the provision of}} fault tolerance are described, namely that: (i) a distributed computing system should be functionally equivalent to the individual computing systems of which it is composed, and (ii) <b>fault</b> <b>tolerant</b> <b>systems</b> should be constructed from generalised <b>fault</b> <b>tolerant</b> components. The reasonin...|$|R
40|$|The {{problem of}} design for {{reliability}} of a <b>fault</b> <b>tolerant</b> <b>system</b> for uninterruptible power supplies is considered. Configuration of a <b>fault</b> <b>tolerant</b> <b>system</b> determines {{the structure of}} an uninterruptible power supply: power supply built from modules of the same type, stand-by sliding reserve for them, twice total reserve of the power supply with two accumulator batteries, the controls and diagnostics means. The developed tool for automated analytical model of fault tolerant systems generation and illustration of its capabilities in determination of requirements for repair service and accumulator batteries are given|$|E
30|$|The most {{important}} design goal in any <b>fault</b> <b>tolerant</b> <b>system</b> is availability that depicts a quality {{responsible for providing}} correct services. If problems are encountered in a distributed environment, then the availability characteristic of dependability {{must be able to}} handle the problems. Reliability is another important design goal of not only in grid but in any of the <b>fault</b> <b>tolerant</b> <b>system.</b> Reliability portrays the willingness for the provisioning of accurate services. A system is more available if that system is reliable and vice versa. Availability and reliability are directly proportional to each other (Charoenpornwattana et al. 2008).|$|E
40|$|An {{integrated}} hardware/software <b>fault</b> <b>tolerant</b> <b>system</b> for an earth oriented, {{computer controlled}} spacecraft is described. The design philosophy {{as well as}} the rationale behind the chosen <b>fault</b> <b>tolerant</b> <b>system</b> is outlined. In-flight performance of the system is included for several different instances where the Failure Detection and Correction system acted autonomously to protect the spacecraft. This system exceeded the expectations of the designers by demonstrating the capability to provide a measure of safety to the spacecraft for inadvertent and undesirable ground commands as well as satisfying its primary function of monitoring the flight hardware and software for failures...|$|E
40|$|Reliability is {{control and}} {{prevention}} of failures to reduce failure and improve operations by enhancing performance with system-level analysis and modelling are needed not only for predictability and comparability when partitioning end-to-end functions at design time levels of reliability. Reliability numbers by themselves will not motivate improvements, performance of two <b>fault</b> <b>tolerant</b> mechanisms dealing with repairable and non-repairable components that have failed. The improvement in the reliability and safety of a system with repairable components {{with respect to the}} <b>fault</b> <b>tolerant</b> <b>systems</b> under study correspond to a flexible arrangement of <b>fault</b> <b>tolerant</b> units (FTUâs). SFAS (Safety <b>Fault</b> <b>tolerant</b> Automotive <b>Systems)</b> and ECU are being compared to achieve effective results. Reliability principles are discussed which assist system improvement for reducing the high unreliability. CAN Controllers are used in automotive for <b>fault</b> <b>tolerant</b> embedded <b>system.</b> The existing reliability enhancement models are emphasizing various redundancy techniques both in hardware and software without focusing a formal way of recovery time minimization from the affected or degraded states in the automotive systems...|$|R
40|$|In this paper, we {{describe}} a novel proactive recovery {{scheme based on}} service migration for long-running Byzantine <b>fault</b> <b>tolerant</b> <b>systems.</b> Proactive recovery is an essential method for ensuring long term reliability of <b>fault</b> <b>tolerant</b> <b>systems</b> that are under continuous threats from malicious adversaries. The primary benefit of our proactive recovery scheme is a reduced vulnerability window. This is achieved by removing the time-consuming reboot step from the critical path of proactive recovery. Our migration-based proactive recovery is coordinated among the replicas, therefore, it can automatically adjust to different system loads and avoid the problem of excessive concurrent proactive recoveries that may occur in previous work with fixed watchdog timeouts. Moreover, the fast proactive recovery also significantly improves the system availability {{in the presence of}} faults...|$|R
40|$|Fault {{tolerance}} {{is achieved}} through multiply redundant hardware systems in large civil aircraft. This means of achieving fault tolerance is infeasible for small compact unmanned aerial vehicles. In this paper we apply a <b>fault</b> <b>tolerant</b> control <b>system</b> which exploits analytical redundancy rather than hardware redundancy to an actual UAV model currently in operation via model-in-the-loop simulation. The <b>fault</b> <b>tolerant</b> control <b>system</b> comprises a nonlinear model predictive controller integrated with an unscented Kalman filter for fault detection and identification. The {{results show that}} our <b>fault</b> <b>tolerant</b> control <b>system</b> design is able to identify engine failure within seconds of fault occurrence and distribute control authority to the healthy actuators to maintain safe flight...|$|R
40|$|In this paper, we {{will discuss}} about the key {{features}} to consider while designing for a <b>fault</b> <b>tolerant</b> <b>system.</b> Different models are being used in different applications such as space, air traffic control, nuclear power plant etc. A real time system must be reliable if a failure to meet its timing requirements may endanger human life, damage equipment etc. <b>Fault</b> <b>tolerant</b> <b>system</b> improves reliability by incorporating rating redundancy into the system design. This system is called the âexisting systemâ. Current space missions deal with such system. We have introduced another system called as the proposed model which deals with efficiency in terms of performance by removing the duplicity and dividing {{the total number of}} tasks among the different processors with a term called as âLoad Balancing â. So the actual mission can be completed before the time taken by the existing system to complete a mission. General Terms A <b>Fault</b> <b>Tolerant</b> <b>System</b> basically deals with safe and efficient execution of the different tasks used in On Board Computers used in Space application...|$|E
40|$|This paper {{describes}} {{the failure detection}} and isolation performance of a sensor <b>fault</b> <b>tolerant</b> <b>system</b> for the NASA Terminal Configured Vehicle (TCV) research aircraft in a Microwave Landing System (MLS) environment. The objective of the <b>fault</b> <b>tolerant</b> <b>system</b> is to detect failures in navigation-aid instruments and on-board sensors and to provide reliable estimates for the aircraft states in the possible presence of these sensor malfunctions. Analytic redundancy, which exists between the various sensor outputs due to the aircraft point mass equations of motion, is used to identify sensor failures. State estimates are used by an automatic guidance and control system to land the aircraft along a prescribed path...|$|E
40|$|This paper {{presents}} a novel technique for improved voting by adaptively varying the membership boundaries of a fuzzy voter to achieve realistic consensus among inputs of redundant modules of a <b>fault</b> <b>tolerant</b> <b>system.</b> We demonstrate that suggested dynamic membership partitioning mini-mizes {{the number of}} occurrences of incorrect outputs of a voter {{as compared to the}} fixed mem-bership partitioning voter implementations. Simulation results for the proposed voter for Triple Modular Redundancy (TMR) <b>fault</b> <b>tolerant</b> <b>system</b> indicate that our algorithm shows better safety and availability performance as compared to the existing one. However, our voter design is gener-al and thus it can be potentially useful for improving safety and availability of critical fault tole-rant systems...|$|E
40|$|This paper {{analyses}} {{different aspects}} of fault tolerance system. Meaning of fault tolerance system is given in detail then concepts related to <b>fault</b> <b>tolerant</b> computing are defined for example failures, errors, faults, types of faults, types of <b>fault</b> <b>tolerant</b> <b>systems.</b> <b>Fault</b> tolerance is the to increase dependability of the system so that cases of failures of system are tolerated without any loss. Various types of fault tolerance systems are discussed like software <b>fault</b> <b>tolerant,</b> hardware <b>fault</b> <b>tolerant,</b> critical applications...|$|R
40|$|Abstract â Reliability is {{control and}} {{prevention}} of failures to reduce failure and improve operations by enhancing performance with system-level analysis and modelling are needed not only for predictability and comparability when partitioning end-to-end functions at design time levels of reliability. Reliability numbers by themselves will not motivate improvements, performance of two <b>fault</b> <b>tolerant</b> mechanisms dealing with repairable and non-repairable components that have failed. The improvement in the reliability and safety of a system with repairable components {{with respect to the}} <b>fault</b> <b>tolerant</b> <b>systems</b> under study correspond to a flexible arrangement of <b>fault</b> <b>tolerant</b> units (FTUâs). SFAS (Safety <b>Fault</b> <b>tolerant</b> Automotive <b>Systems)</b> and ECU are being compared to achieve effective results. Reliability principles are discussed which assist system improvement for reducing the high unreliability. CAN Controllers are used in automotive for <b>fault</b> <b>tolerant</b> embedded <b>system.</b> The existing reliability enhancement models are emphasizing various redundancy techniques both in hardware and software without focusing a formal way of recovery time minimization from the affected or degraded states in the automotive systems...|$|R
40|$|Abstract. Although <b>fault</b> <b>tolerant</b> <b>systems</b> are badly needed, their {{development}} {{is not a}} trivial task. Considering <b>fault</b> <b>tolerant</b> distributed <b>systems,</b> this difficulty is even bigger, and any artifact that could make this task easier becomes highly valuable. In this paper, we propose and model a distributed consensus service and a f ault detection service, namely, DisCusS and FuSe, {{that can be used}} as building blocks in the development of distributed <b>fault</b> <b>tolerant</b> applications. We also show the compliance of FuSe to FT-CORBA fault detection, and give some insights {{on the use of the}} proposed consensus service in a possible FT-CORBA implementation. Moreover, this paper presents some comparative tests of the influence of adaptive and non-adaptive fault detectors over consensus...|$|R
