44|18|Public
5000|$|JoCaml is {{the first}} {{language}} where the join-pattern was implemented. Indeed, at the beginning all the different implementation was compiled with the JoCaml Compiler. JoCaml language {{is an extension of}} the OCaml language. It extends OCaml with support for concurrency and synchronization, the distributed execution of programs, and the <b>dynamic</b> <b>relocation</b> of active program fragments during execution ...|$|E
40|$|IEEE 802. 11 s is a draft IEEE 802. 11 {{amendment}} for mesh networking, defining how wireless devices can interconnect {{to create}} an ad-hoc network. It includes some mesh-specific optional MAC enhancements like Mesh Deterministic Access, Common Channel Framework, Intra-mesh Congestion Control and Power Management. Mesh Deterministic Access (MDA) is an access method that allows MPs to access the channel at selected times (called MDAOPs) with lower contention than would otherwise be possible. In this work we study Mesh Deterministic Access (MDA) feature. Specifically: we implement 802. 11 s in ns- 2 simulator and evaluate performance comparing results with those obtained with DCF. We also propose an improvement called <b>Dynamic</b> <b>Relocation.</b> <b>Dynamic</b> <b>Relocation</b> permits to overcome MDA limits by reallocating MDAOPs basing on statistics collected during transmission times. The effectiveness of MDA improved with <b>Dynamic</b> <b>Relocation</b> in a scenario with realistic traffic is then confirmed via a simulation analysis...|$|E
40|$|In these lecture notes, we give an {{overview}} of concurrent, distributed, and mobile programming using JoCaml. JoCaml {{is an extension of}} the Objective Caml language. It extends OCaml with support for concurrency and synchronization, the distributed execution of programs, and the <b>dynamic</b> <b>relocation</b> of active program fragments during execution...|$|E
40|$|ISBN: 978 - 1 - 4503 - 2032 - 0 International audienceEM {{emissions}} {{can be a}} {{rich source}} of leakage for side-channel analysis of cipher implementations. In this paper, we describe a set of novel countermeasures based on <b>dynamic</b> spatial <b>relocation</b> and <b>dynamic</b> mappings, and validate the protection provided by them against EM attacks. The countermeasures improve significantly the security of the circuit...|$|R
40|$|Ambulance {{logistics}} {{concerns the}} planning and control of a fleet of ambulances, where one important concept is preparedness. Preparedness {{is a way of}} evaluating the ability to serve potential patients with ambulances in a swift and efficient manner. Here, a quantitative measure for preparedness is developed and used in real-time decision support tools for <b>dynamic</b> ambulance <b>relocation</b> and automatic ambulance dispatching...|$|R
40|$|In this paper, the {{development}} of decision support tools for <b>dynamic</b> ambulance <b>relocation</b> and automatic ambulance dispatching is described. The ambulance dispatch problem is to choose which ambulance to send to a patient. The <b>dynamic</b> ambulance <b>relocation</b> problem occurs in the operational control of ambulances. The objective is to find new locations {{for some of the}} ambulances, to increase the preparedness in the area of responsibility. Preparedness is a way of evaluating the ability to serve potential patients with ambulances now and in the future. Computational tests using a simulation model show that the tools are beneficial in reducing the waiting periods for the patients. This is a post-peer-review, pre-copyedit version of an article published in Journal of the Operational Research Society. The definitive publisher-authenticated version: Tobias Andersson Granberg and Peter Värbrand, Decision support tools for ambulance dispatch and relocation, 2007, Journal of the Operational Research Society, (58), 195 - 201. is available online at: [URL] Palgrave Macmillan[URL]...|$|R
40|$|Conference Name: 2011 IEEE International Conference on Anti-Counterfeiting, Security and Identification, ASID 2011. Conference Address: Xiamen, China. Time:June 24, 2011 - June 26, 2011. IEEE Beijing Section; Xiamen UniversityIn this paper, a <b>dynamic</b> <b>relocation</b> cache {{scheme is}} {{proposed}} for low power processor. Based on an energy consumption function of cache system, which mapping the cache energy consumption problem to a binary ILP (Integer Linear Programming) problem, this <b>dynamic</b> <b>relocation</b> cache scheme map the static code to a dynamic location through an address mapping strategy which can relocate the compiler generated code {{to a single}} memory with execution sequence, thus provide high performance with small memory capacity. Finally, the full RTL model based on LEON 2 processor is implemented and simulated, and the experiment {{results show that the}} energy consumption of this cache scheme have approximate 25 % improvement comparing to traditional direct cache scheme for achieving the same IPC (Instructions Per Clock). ? 2011 IEEE...|$|E
40|$|There exists {{computational}} {{experience to}} the effect that search algorithms of the type introduced by Balas are frequently ineffective because of being tied to a rigid "natural" search origin. In this paper the <b>dynamic</b> <b>relocation</b> of the search origin to possibly more appropriate points is advocated. Details of such a procedure are given for the Simple Plant Location Problem. Computational improvements of, sometimes, a striking nature are presented. ...|$|E
40|$|Disasters strike {{suddenly}} and cause destruction which disrupts {{the availability of}} basic survival supplies for people living in affected areas. The efficiency of humanitarian organizations in providing relief has a direct and crucial impact on the survival, health, and recovery of affected people and their communities. To better prepare to respond to disasters, many relief organizations use supply pre-positioning. However, the real and potential needs of different locations change over time and when an organization uses traditional warehouse pre-positioning, relief operations are limited by set inventory locations {{that are difficult to}} alter. For this reason, a well known organization recently considered including a large supply holding ship in its operations. By holding inventory on a ship, the organization would be able to dynamically relocate its inventory over time in response to changing relief supply demand forecasts. To our knowledge, the research contained herein is the first to examine dynamic inventory relocation for responding to disasters over time. Specifically, we examine how to optimally relocate and manage inventory for a single mobile inventory to serve stochastic demand at a number of potential disaster sites over time. While we keep in mind the motivating example of a supply holding ship in the disaster relief setting throughout this dissertation, the model and most of the results are applicable to any type of mobile inventory, facility, or server in any setting. We first examine the <b>dynamic</b> <b>relocation</b> problem. We model the problem using dynamic programming and develop analytical and numerical results regarding optimal relocation policies, the optimal path and speed of relocation decisions, and the value of inventory mobility over traditional warehouse pre-positioning. To help overcome the computational complexity of the problem, we develop a heuristic which solves relatively large problem instances in our numerical experiments within 0. 5 % of optimality in less than 0. 1 % of the time required by an exact algorithm. As it is suboptimal to consider relocation decisions and inventory management decisions separately, we also examine the joint <b>dynamic</b> <b>relocation</b> and inventory management problem. To our knowledge, we are the first to examine the <b>dynamic</b> <b>relocation</b> and inventory management problem with stochastic demand. Similarly to the <b>dynamic</b> <b>relocation</b> problem, we model this problem using dynamic programming. We develop a number of analytical results characterizing the optimal relocation and inventory management policies. As the first to examine these problems, we hope this research serves as a catalyst for other research in this area; accordingly, we conclude this dissertation by discussing a number of areas for future research...|$|E
40|$|In {{this report}} we present {{the design of}} the Autonomous Transport Protocol (ATP). The basic service {{provided}} by ATP is a reliable transport connection between two endpoints (identified by content identifiers) independent of their physical location. Autonomy allows <b>dynamic</b> endpoints <b>relocation</b> on different end hosts without disrupting the transport connection between them. ATP depends on the existence of an underlying Instance-Based Network (IBN) to achieve its goals. An IB...|$|R
40|$|Allocates {{primary memory}} to {{processes}} Maps process address space to primary memory Minimizes access time using cost effective memory configuration ◮ Memory management approaches range from primitive bare-machine approach to sophisticated paging and segmentation strategies for implementing virtual memory. Relocating Executables ◮ Compile, Link, and Load phases. ◮ Source program, relocatable object modules, absolute program. ◮ <b>Dynamic</b> address <b>relocation</b> using relocation registers. ◮ Memory protection using limit registers. (violating the limit generates an hardware interrupt, often called segment violation, {{that results in}} a fatal execution error.) Building the address spac...|$|R
40|$|Abstract. In complex {{reconfigurable}} SoCs, the {{dynamism of}} applications requires an efficient {{management of the}} platform. To allow run-time allocation of resources, operating systems and reconfigurable SoC platforms should be developed together. The operating system requires hardware support from the platform to abstract the reconfigurable resources and to provide an efficient communication layer. This paper presents our work on interconnection networks which are used as hardware support for the operating system. We show how multiple networks interface to the reconfigurable resources, allow <b>dynamic</b> task <b>relocation</b> and extend OS-control to the platform. An FPGA implementation of these networks supports the concepts we describe. ...|$|R
40|$|We {{present a}} new swarm based {{algorithm}} called Honey Bee Foraging (HBF). This algorithm is {{modeled after the}} food foraging behavior of the honey bees and performs a swarm based collective foraging for fitness in promising neighborhoods in combination with individual scouting searches in other areas. The strength of the algorithm lies in its continuous monitoring of the whole scouting and foraging process with <b>dynamic</b> <b>relocation</b> of the bees if more promising regions are found. The algorithm {{has the potential to}} be useful for optimization problems of multimodal and dynamic nature...|$|E
40|$|Protocol Independent Multicast - Sparse Mode is {{the most}} widely used {{multicast}} routing architecture. It builds a shared distribution tree centered at a Rendezvous Point and then builds source-specific trees for those sources whose data traffic warrants it. Current implementations of the protocol decide on the locations of the Rendezvous Point administratively, which leads to congestion and delays. An attractive solution would be <b>dynamic</b> <b>relocation</b> of the Rendezvous Point depending on the members of the multicast group. In this thesis we present a Rendezvous Point calculation and relocation mechanism for Protocol Independent Multicast - Sparse Mode...|$|E
40|$|This {{research}} introduces {{methods of}} stochastic decision processes into location analysis. The specific model concerns making <b>dynamic</b> <b>relocation</b> decisions {{for a new}} facility (server) that must interact with existing facilities (customers) whose relocations are stochastic processes. The model is an infinite-horizon Markov decision chain whose solution gives a server relocation policy that minimizes the expected discounted sum of costs. Costs are location-dependent and are incurred in two ways: when the server makes choice relocations and when the server interacts with customers. The model captures {{the essence of a}} variety of familiar dynamic location decision situations. Some methodological developments that allow solution of large problems are reported. ...|$|E
40|$|The Bacillus subtilis Spo 0 J/Soj proteins, {{implicated in}} {{chromosome}} segregation and transcriptional regulation, show striking dynamics: Soj undergoes irregular relocations from pole to pole or nucleoid to nucleoid. Here {{we report on}} a mathematical model of the Soj dynamics. Our model, which is closely based on the available experimental data, readily generates <b>dynamic</b> Soj <b>relocations.</b> We show that the irregularity of the relocations {{may be due to}} the stochastic nature of the underlying Spo 0 J/Soj interactions and diffusion. We propose explanations for the behavior of several Spo 0 J/Soj mutants including the "freezing" of the Soj dynamics observed in filamentous cells. Our approach underlines the importance of incorporating stochastic effects when modelling spatiotemporal protein dynamics inside cells. Comment: 45 page...|$|R
40|$|In complex {{reconfigurable}} {{systems on}} chip (SoC), the dynamism of applications requires an efficient {{management of the}} platform. To allow run-time management of heterogeneous resources, operating systems (OS) and reconfigurable SoC platforms should be developed together. For run-time support of reconfigurable architectures, the OS must abstract the reconfigurable computing resources and provide an efficient communication layer. This paper presents our efforts to simultaneously develop the run-time support and the communication layer of reconfigurable SoCs. We show that networks-on-chip (NoC) are an ideal communication layer for dynamically reconfigurable SoCs, explain how our OS provides run-time support for <b>dynamic</b> task <b>relocation</b> and detail how hardware parts of the OS are integrated into the higher layers of the NoC. An implementation of the OS and of the dedicated communication layer on our reconfigurable architecture supports the concepts we describe...|$|R
40|$|<b>Dynamic</b> {{real-time}} <b>relocation</b> of ambulances {{throughout the}} day {{is one of the}} most important issues that emergency medical services have to consider. Ambulance relocation decisions must be made online under time constraints to guarantee timely response to future accidents as well as optimum regional coverage. We develop a two-stage optimization model to satisfy the objectives included in the problem. To find the optimum solution for our model, we use simulated annealing search along with various problem-specific heuristics. Our case study is based on real data from an emergency services provider in the city of Ottawa, corresponding to making online relocation decisions for emergency responders. We simulate sample days using a historical data set of accidents and apply our optimization models and heuristics during the simulation. We evaluate the performance of our model and solution methods using the simulation results...|$|R
40|$|The View Generator (VG) is {{a system}} that {{provides}} the necessary components for the definition, materialization, storage, maintenance and re-use of views over remote web-accessible databases. Through the system, clients identify web databases of interest, access their metadata and create personalized views that can be shared by other clients. Creating personalized views provides a more efficient way of data processing than directly issuing complex queries to the data sources {{especially in the case of}} light-weight and wireless clients that suffer from scarce local resources, limited bandwidth and high communication costs. VG's multi-tier architecture implemented using mobile Java agents allows automatic code deployment as well as <b>dynamic</b> <b>relocation</b> of views...|$|E
40|$|Location {{management}} scheme tracking the location information of a mobile user {{is required to}} deliver the incoming calls since the latest wireless communication networks allow <b>dynamic</b> <b>relocation</b> of mobile terminals. In this paper, we propose a mobile locality based location {{management scheme}} using the mobility information of mobile users to provide an efficient location management mechanism. In our scheme, the location registration process caches the location information of visited cells to reduce duplicated registrations of mobile users. The paging process exploits the locality of mobile user’s moving behavior patterns to predict the possible paging area. So, it can reduce the paging cost in a location search procedure. The performance of the proposed location management scheme is to be evaluated by an analytical model, and is {{compared with that of}} a Dynamic Location Management Scheme...|$|E
40|$|Computer Networks 36 � 2001) 117 ± 135 The X-Bone {{dynamically}} deploys {{and manages}} Internet overlays to reduce con®guration e€ort and increase network component sharing. The X-Bone discovers,con®gures,and monitors network resources to create overlays over existing IP networks. Overlays {{are useful for}} deploying overlapping virtual networks on shared infrastructure and for simplifying topology. The X-Bone extends current overlay management by adding dynamic resource discovery,deployment, and monitoring,and allows network components �hosts,routers) to participate simultaneously in multiple overlays. Its two-layer IP in IP tunneled overlays support existing applications and unmodi®ed routing,multicast,and DNS services in unmodi®ed host operating systems. This two-layer scheme uniquely supports recursive overlays,useful for fault tolerance and <b>dynamic</b> <b>relocation.</b> The X-Bone uses multicast to simplify resource discovery,and provides secure deployment as well as secure overlays. This paper presents the X-Bone architecture,and discusses its components an...|$|E
40|$|The yeast DASH {{complex is}} a heterodecameric {{component}} of the kinetochore necessary for accurate chromosome segregation. DASH forms closed rings around microtubules with a large gap between the DASH ring and the microtubule cylinder. We characterized the microtubule-binding properties of limited proteolysis products and subcomplexes of DASH, thus identifying candidate polypeptide extensions involved in establishing the DASH-microtubule interface. The acidic C-terminal extensions of tubulin subunits are not essential for DASH binding. We also measured the molecular mass of DASH rings on microtubules with {{scanning transmission electron microscopy}} and found that approximately 25 DASH heterodecamers assemble to form each ring. <b>Dynamic</b> association and <b>relocation</b> of multiple flexible appendages of DASH may allow the kinetochore to translate along the microtubule surface...|$|R
40|$|Virtualization of logic, routing, and {{communication}} resources in recent FPGA devices {{can provide a}} dramatic improvement in cost-efficiency for reconfigurable computing systems (RCSs). The presented work is “proof-of-concept” research for the virtualization of the above resources in partially reconfigurable FPGA devices with a tile-based architecture. The following aspects have been investigated, prototyped, tested, and analyzed: (i) platform architecture for hardware support of the dynamic allocation of Application Specific Virtual Processors (ASVPs), (ii) mechanisms for run-time on-chip ASVP assembling using virtual hardware Components (VHCs) as building blocks, and (iii) mechanisms for <b>dynamic</b> on-chip <b>relocation</b> of VHCs to predetermined slots in the target FPGA. All the above mechanisms and procedures have been implemented and tested on a prototype platform—MARS (multitask adaptive reconfigurable system) using a Xilinx Virtex- 4 FPGA. The on-chip communication infrastructure has been developed and investigated in detail, and its timing and hardware overhead were analyzed. It was determined that component relocation can be done without affecting the ASVP pipeline cycle time and throughput. The hardware overhead was estimated as relatively small compared to the gain of other performance parameters. Finally, industrial applications associated with next generation space-borne platforms are discussed, where the proposed approach can be beneficial...|$|R
40|$|AbstractWe {{present an}} {{upper bound on}} the {{performance}} provided by a protocol guaranteeing mutually exclusive access to a replicated resource in a network subject to component failure and subsequent partitioning. The bound is presented {{in terms of the}} performance of a single resource in the same network. The bound is tight and is the first such bound known to us. Since mutual exclusion is one of the requirements for maintaining the consistency of a database object, this bound provides an upper limit on the availability provided by any database consistency control protocol, including those employing <b>dynamic</b> data <b>relocation</b> and replication. We show that if a well-placed single copy provides availability A for 0 ≤ A ≤ 1, then no scheme can achieve availability greater than √A in the same network. We show this bound to be the best possible for any network with availability greater than 0. 25. We also prove that the problem of calculating A is #P-complete and describe a method for approximating the optimal location for a single copy which adjusts dynamically to current network characteristics. The bound presented here is most useful for high availabilities, which tend to be obtainable with modern networks and their constituent sites and links...|$|R
40|$|Abstract. State-of-the-art {{wireless}} communication networks allow <b>dynamic</b> <b>relocation</b> of mobile terminals. A location management mechanism {{is required to}} keep track of a mobile terminal for delivering incoming calls. In this paper, we propose a fuzzy logic-based location management method to reduce paging cost. In the proposed method, the location update uses an area-based method that uses direction-based method together with movement-based method, and the location search uses a fuzzy logic-based selective paging method based on the mobility information of mobile terminals. A partial candidate paging area is selected by fuzzy control rules, and then the fuzzy logic-based selective paging method pages only cells within the partial candidate paging area. The performance of the proposed fuzzy logic-based location management method is evaluated by an analytical model and by a simulation, and is compared with that of basic velocity paging (BVP) method. ...|$|E
40|$|Abstract. In these lecture notes, we give an {{overview}} of concurrent, distributed, and mobile programming using JoCaml. JoCaml {{is an extension of}} the Objective Caml language. It extends OCaml with support for concurrency and synchronization, the distributed execution of programs, and the <b>dynamic</b> <b>relocation</b> of active program fragments during execution. The programming model of JoCaml is based on the join calculus. This model is characterized by an explicit notion of locality, a strict adherence to local synchronization, and a natural embedding of functional programming à la ML. Local synchronization means that messages always travel to a set destination, and can interact only after they reach that destination; this is required for an efficient asynchronous implementation. Specifically, the join calculus uses ML’s function bindings and pattern-matching on messages to express local synchronizations. The lectures and lab sessions illustrate how to use JoCaml to progra...|$|E
40|$|The use {{of mobile}} sensors {{is of great}} {{relevance}} to monitor critical areas where sensors cannot be deployed manually. The presence of data collector sinks causes increased energy depletion in their proximity, due to the higher relay load under multi-hop communication schemes (sink-hole phenomenon). We propose a new approach towards the solution of this problem {{by means of an}} autonomous deployment algorithm that guarantees the adaptation of the sensor density to the sink proximity and enables their selective activation. The proposed algorithm also permits a fault tolerant and self-healing deployment, and allows the realization of an integrated solution for deployment, <b>dynamic</b> <b>relocation</b> and selective sensor activation. Performance comparisons between our proposal and previous approaches show how the former can efficiently reach a deployment at the desired variable density with moderate energy consumption under a wide range of operative settings...|$|E
40|$|Due to {{increasing}} international competition, shorter product life-cycles, variable demand, diverse customer needs and customized products, manufacturers are forced from mass production {{to the production}} of a large product mix. Traditional manufacturing systems, such as job shops and flow lines, cannot provide such requirements efficiently coupled with flexibility to handle these changes. Cellular Manufacturing (CM) is an alternate manufacturing system combining the high throughput rates of line layouts with the flexibility offered by functional layouts (job shops). The benefits include reduced set-up times, material handling, in-process inventory, better product quality, and faster response time. The benefits of CM can only be achieved by sufficiently incorporating the real-life structural and operational features of a manufacturing plant when creating the cellular layout. This research presents integrated CM models, with an extensive coverage of important manufacturing structural and operational features. The proposed Dynamic Cellular Manufacturing Systems (DCMSs) model considers several manufacturing attributes such as multiperiod production planning, <b>dynamic</b> system <b>relocation,</b> duplicate machines, machine capacities, available time for workers, worker assignments, and machine breakdowns. The objective is to minimize total manufacturing cost comprised of holding cost, outsourcing cost, intercell material handling cost, maintenance and overhead cost, machine relocation cost as well as salary, hiring, and firing costs of the workers. Numerical examples are presented to show the performance of the model. ...|$|R
40|$|In {{this work}} a {{collection}} of programs, called hiputils is presented. The toolchain constitutes an assembler, linker, dynamic loader, simulator and a static library creation utility for the HIP processor. A precise description {{of the process of}} creating, linking and loading of static and dynamic libraries in hiputils is given. A format for object files, static and dynamic libraries is also defined. Beside hiputils, linking and loading of programs and libraries is also described. Several object file formats, including COM, a. out and ELF are studied and compared. The three main tasks of linkers: storage allocation, symbol management and relocation are detailed. A description of libraries - static as well as dynamic - is also given, along with a description of <b>dynamic</b> loading and <b>relocation.</b> A mechanism, which allows code to run at an arbitrary start address is also depicted (position independent code). ...|$|R
40|$|Systems on a Chip {{concurrently}} execute {{multiple applications}} that may {{start and stop}} at run-time, creating many use-cases. Composability reduces the verifcation effort, by making the functional and temporal behaviours of an application independent of other applications. Existing approaches link applications to static address ranges that cannot be reused between applications that are not simultaneously active, wasting resources. In this {{paper we propose a}} composable virtual memory scheme that enables <b>dynamic</b> binding and <b>relocation</b> of applications. Our virtual memory is also predictable, for applications with real-time constraints. We integrated the virtual memory on, CompSOC, an existing composable SoC prototyped in FPGA. The implementation indicates that virtual memory is in general expensive, because it incurs a performance loss around 39 % due to address translation latency. On top of this, composability adds to virtual memory an insigni cant extra performance penalty, below 1 %...|$|R
40|$|The {{commercial}} {{proliferation of}} cellular voice and limited data service {{has created a}} great demand for mobile communications and computing. Current voice fax, email and paging services will give way to data transfer, video conferencing image transfer and video delivery. Achieving such an advanced level of tether less mobile multimedia service requires the development of wireless network that can provide not only the integrated services, but which can also provide <b>dynamic</b> <b>relocation</b> of mobile terminals. As a result, next generation mobile communication systems are currently been researched worldwide. Global roaming is a basic service of the future mobile network, where terminal mobility personal mobility and service provider portability must be supported. The concepts enabling us to provide universal personal communication include terminal mobility provided by wireless access, personal mobility based on personal numbers and service portability though use of intelligent network (IN) capabilities...|$|E
40|$|Abstract 1 The X-Bone {{dynamically}} deploys {{and manages}} Internet overlays to reduce configuration effort and increase network component sharing. The X-Bone discovers, configures, and monitors network resources to create overlays over existing IP networks. Overlays {{are useful for}} deploying overlapping virtual networks on shared infrastructure and for simplifying topology. The X-Bone extends current overlay management by adding dynamic resource discovery, deployment, and monitoring, and allows network components (hosts, routers) to participate simultaneously in multiple overlays. Its two-layer IP in IP tunneled overlays support existing applications and unmodified routing, multicast, and DNS services in unmodified host operating systems. This two-layer scheme uniquely supports recursive overlays, useful for fault tolerance and <b>dynamic</b> <b>relocation.</b> The X-Bone uses multicast to simplify resource discovery, and provides secure deployment as well as secure overlays. This paper presents the X-Bone architecture, and discusses its components and features, and their performance impact. 1...|$|E
40|$|AbstractPoly(ADP-ribosyl) ation is a {{very early}} {{cellular}} response to DNA damage. Poly(ADP-ribose) (PAR) accumulation is transient since PAR is rapidly hydrolyzed by poly(ADP-ribose) glycohydrolase (PARG). PARG may play {{a prominent role in}} DNA damage response and repair by removing PAR from modified proteins including PARP- 1. Using living cells, we provide evidence that in response to DNA damage induced by γ-irradiation the cytoplasmic 103 kDa PARG isoform translocates into the nucleus. We further observed that the nuclear GFP-hPARG 110 enzyme relocalizes to the cytoplasm in response to DNA damage. Using different GFP-PARG fusion proteins specific for the nuclear and cytoplasmic forms, we demonstrate their dynamic distribution between cytoplasm and nucleoplasm and a high mobility of major PARG isoforms by fluorescence recovery after photobleaching (FRAP). The <b>dynamic</b> <b>relocation</b> of all PARG isoforms presented in this report reveals a novel biological mechanism by which PARG could be involved in DNA damage response...|$|E
40|$|Energy {{consumption}} of network operators can be minimized by the <b>dynamic</b> and smart <b>relocation</b> of networking resources. In this paper, we propose {{to take advantage}} of network virtualization to enable a smart energy aware network provisioning. The virtualization of networking resources leads to the problem of mapping virtual demands to physical resources, known as Virtual Network Embedding (VNE). Our proposal modifies and improves exact existing energy aware VNE proposals where the objective is to switch off as many network nodes and interfaces as possible by allocating the virtual demands to a consolidated subset of active physical networking equipment. As exact energy efficient VNE approaches are hard to solve for large network sizes and have an adverse effect in the number of successful embeddings, an heuristic approach to reconfigure the allocation of already embedded virtual networks, minimizing the energy consumption, is also proposed. Peer ReviewedPostprint (published version...|$|R
40|$|In {{this report}} we present {{the design of}} the Autonomous Transport Protocol (ATP). The basic service {{provided}} by ATP is a reliable transport connection between two endpoints (identified by content identifiers) independent of their physical location. Autonomy allows <b>dynamic</b> endpoints <b>relocation</b> on different end hosts without disrupting the transport connection between them. ATP depends on the existence of an underlying Instance-Based Network (IBN) to achieve its goals. An IBN provides the flexibility of having different instances of the same content. It is up to the user of the IBN network to define the relation between these instances. An IBN allows its user to to map a content to a particular node. Application endpoints can send messages to other content-identified endpoints. Routing in the IBN is instance-based; the IBN can route a message to a specific content instance or to the nearest instance, if no exact match is found for the destination content instance. Moreover, the IBN replicates the stored contents in order to provide fault tolerance and IBN nodes along the query path can cache a content to provide fast answers to future queries. The ATP layer in the intermediate nodes between the source and destination endpoints can actively participate in the connection, for example, to buffer data for the destination endpoints during periods of unavailability. Data is transferred by a combination of active and passive operations, where the ATP layer of a node can decide whether to actively push the data to the destination or to passively wait for the destination endpoint to pull the data. The decision to whether to use the active or passive modes can be taken by a local policy on the node running the ATP protocol. (UMIACS-TR- 2003 - 52...|$|R
40|$|We present {{here the}} results of our study to monitor and {{characterize}} the available resource capacities on PlanetLab nodes for scheduling and <b>dynamic</b> <b>relocation</b> of migratory tasks. The available resource capacities on PlanetLab nodes can fluctuate significantly in a short time, and a node selected to execute a task may become unsuitable for it within a short time ranging from a few minutes to an hour. One way to overcome this problem is relocate the task to another node. This requires identifying the set of nodes that are mostly likely to meet the requirements of the task for a long duration. For this purpose we have developed a system for monitoring a collection of nodes for their available resource capacities. Using this system we have conducted a study to characterize the distribution of the number of nodes that meet a given resource capacity requirement, and the distribution of the duration for which a node satisfies the requirement. ...|$|E
