1345|138|Public
25|$|The {{point of}} {{exception}} handling routines {{is to ensure}} that the code can handle error conditions. In order to establish that exception handling routines are sufficiently robust, it is necessary to present the code with a wide spectrum of invalid or unexpected inputs, such as can be created via software <b>fault</b> <b>injection</b> and mutation testing (that is also sometimes referred to as fuzz testing). One of the most difficult types of software for which to write exception handling routines is protocol software, since a robust protocol implementation must be prepared to receive input that does not comply with the relevant specification(s).|$|E
50|$|<b>Fault</b> <b>injection</b> {{can take}} many forms. In the testing of {{operating}} systems for example, <b>fault</b> <b>injection</b> is often performed by a driver (kernel-mode software) that intercepts system calls (calls into the kernel) and randomly returning a failure {{for some of the}} calls. This type of <b>fault</b> <b>injection</b> is useful for testing low level user mode software. For higher level software, various methods inject faults. In managed code, it is common to use instrumentation. Although <b>fault</b> <b>injection</b> can be undertaken by hand, a number of <b>fault</b> <b>injection</b> tools exist to automate the process of <b>fault</b> <b>injection.</b>|$|E
5000|$|Grid-FIT (Grid - <b>Fault</b> <b>Injection</b> Technology) [...] is a {{dependability}} {{assessment method}} and tool for assessing Grid services by <b>fault</b> <b>injection.</b> Grid-FIT {{is derived from}} an earlier fault injector WS-FIT [...] which was targeted towards Java Web Services implemented using Apache Axis transport. Grid-FIT utilises a novel <b>fault</b> <b>injection</b> mechanism that allows network level <b>fault</b> <b>injection</b> {{to be used to}} give a level of control similar to Code Insertion <b>fault</b> <b>injection</b> whilst being less invasive.|$|E
40|$|International audienceLaser <b>fault</b> <b>injections</b> {{have been}} {{evolving}} rapidly {{with the advent}} of more precise, sophisticated and cost-efficient sources, optics and control circuits. In this paper, we show a methodology to improve the test coverage and to speed up analysis based on laser <b>fault</b> <b>injections</b> by only targeting standard cells of interest. We describe how to identify interesting spatial positions thanks to the use of some chemicals along with an automated Scanning Electron Microscope image acquisition, alignment and processing. Using the latter information, <b>fault</b> <b>injections</b> with a high success rate have been obtained against a hardware implemented AES module using a laser beam. With such tools and methodology, we show that attacks become much faster...|$|R
40|$|ISBN 978 - 1 - 4673 - 4953 - 6 International audienceIn large SoCs, {{managing}} {{the effects of}} soft-errors in flip-flops is essential, however, selective mitigation is necessary to minimize the area and power costs. The identification of the optimal set of flip-flops to protect typically requires compute-intensive fault-injection campaigns. We present new techniques which group similar flip-flops into clusters to significantly {{reduce the number of}} <b>fault</b> <b>injections.</b> The number of required <b>fault</b> <b>injections</b> can be significantly lower than the total number of flip-flops and in one industrial design with over 100, 000 flip-flops, by simulating only 2, 100 <b>fault</b> <b>injections,</b> the technique identified a set of 4. 1 % of the flip-flops, which when protected, reduced the critical failure rate by a factor of 7 x...|$|R
3000|$|... 31 {{generates a}} faulty nibble at {{the output of}} last round’s S-box layer, and single bit <b>faults</b> <b>injection</b> on several nibbles of S [...]...|$|R
5000|$|Xception is a {{commercial}} software tool developed by Critical Software SA used for black box and white box testing based on software <b>fault</b> <b>injection</b> (SWIFI) and Scan Chain <b>fault</b> <b>injection</b> (SCIFI). Xception {{allows users to}} test the robustness of their systems or just part of them, allowing both Software <b>fault</b> <b>injection</b> and Hardware <b>fault</b> <b>injection</b> for {{a specific set of}} architectures. The tool has been used in the market since 1999 and has customers in the American, Asian and European markets, especially in the critical market of aerospace and the telecom market. The full Xception product family includes: a) The main Xception tool, a state-of-the-art leader in Software Implemented <b>Fault</b> <b>Injection</b> (SWIFI) technology; b) The Easy Fault Definition (EFD) and Xtract (Xception Analysis Tool) add-on tools; c) The extended Xception tool (eXception), with the <b>fault</b> <b>injection</b> extensions for Scan Chain and pin-level forcing.|$|E
5000|$|MODIFI (MODel-Implemented <b>Fault</b> <b>Injection)</b> is a <b>fault</b> <b>injection</b> {{tool for}} {{robustness}} evaluation of Simulink behavior models. It supports fault modelling in XML for implementation of domain-specific fault models.|$|E
5000|$|The {{technique}} of <b>fault</b> <b>injection</b> {{dates back to}} the 1970s [...] when it was first used to induce faults at a hardware level. This type of <b>fault</b> <b>injection</b> is called Hardware Implemented <b>Fault</b> <b>Injection</b> (HWIFI) and attempts to simulate hardware failures within a system. The first experiments in hardware <b>fault</b> <b>injection</b> involved nothing more than shorting connections on circuit boards and observing the effect on the system (bridging faults). It was used primarily as a test of the dependability of the hardware system. Later specialised hardware was developed to extend this technique, such as devices to bombard specific areas of a circuit board with heavy radiation. It was soon found that faults could be induced by software techniques and that aspects of this technique could be useful for assessing software systems. Collectively these techniques are known as Software Implemented <b>Fault</b> <b>Injection</b> (SWIFI).|$|E
40|$|International audienceMicrocircuits {{dedicated}} to security in smartcards are targeted by {{more and more}} sophisticated attacks like fault attacks that combine physical disturbance and cryptanalysis. The use of simulation for circuit validation considering these attacks {{is limited by the}} time needed to compute the result of the chosen <b>fault</b> <b>injections.</b> Usually, this choice is made by the user according to his knowledge of the circuit functionality. The aim {{of this paper is to}} propose a generic and semi-automatic method to reduce the number of <b>fault</b> <b>injections</b> using types of data stored in registers (latch by latch...|$|R
40|$|International audienceIn this work, we analyze all {{existing}} RSA-CRT countermeasures {{against the}} Bellcore attack that use binary self-secure exponentiation algorithms. We test their security against a powerful adversary by simulating <b>fault</b> <b>injections</b> in a <b>fault</b> model that includes random, zeroing, and skipping faults {{at all possible}} fault locations. We find {{that most of the}} countermeasures are vulnerable and do not provide sufficient security against all attacks in this fault model. After investigating how additional measures can be included to counter all possible <b>fault</b> <b>injections,</b> we present three countermeasures which prevent both power analysis and many kinds of fault attacks...|$|R
40|$|Abstract. PRINCE {{is a new}} {{lightweight}} {{block cipher}} proposed at the ASIACRYPT’ 2012 conference. In this paper two observations on the linear layer of the cipher are presented. Based on the observations a differential fault attack {{is applied to the}} cipher under a random nibblelevel fault model. The attack uniquely determines the 128 -bit key of the cipher using less than 7 <b>fault</b> <b>injections</b> averagely. In the case with 4 <b>fault</b> <b>injections,</b> the attack limits the key to a space of size less than 2 18 statistically. Key words: lightweight cipher, PRINCE block cipher, differential fault attack...|$|R
50|$|Bebugging {{is a type}} of <b>fault</b> <b>injection.</b>|$|E
50|$|Often, {{it will be}} {{infeasible}} for the <b>fault</b> <b>injection</b> implementation to {{keep track}} of enough state to make the guarantee that the API functions make. In this example, a <b>fault</b> <b>injection</b> test of the above code might hit the assert, whereas this would never happen in normal operation.|$|E
5000|$|Application Testing Through <b>Fault</b> <b>Injection</b> Techniques, BlackHat Windows Security 2002 USA/Asia ...|$|E
40|$|In this work, we analyze all {{existing}} RSA-CRT countermeasures {{against the}} Bellcore attack that use binary self-secure exponentiation algorithms. We test their security against a powerful adversary by simulating <b>fault</b> <b>injections</b> in a <b>fault</b> model that includes random, zeroing, and skipping faults {{at all possible}} fault locations. We find {{that most of the}} countermeasures are vulnerable and do not provide sufficient security against all attacks in this fault model. After investigating how additional measures can be included to counter all possible <b>fault</b> <b>injections,</b> we present three countermeasures which prevent both power analysis and many kinds of fault attacks...|$|R
40|$|Abstract. Piccolo is a 64 -bit {{block cipher}} {{suitable}} for the constrained environments such as wireless sensor network environments. In this paper, we propose differential fault analysis on Piccolo. Based on a random byte fault model, our attack can recover the secret key of Piccolo- 80 by using an exhaustive search of 2 24 and six random byte <b>fault</b> <b>injections</b> on average. It can be simulated on a general PC within a few seconds. In the case of Piccolo- 128, we require an exhaustive search of 2 40 and eight random byte <b>fault</b> <b>injections</b> on average. This attack can be simulated on a general PC within one day. These results are the first known side-channel attack results on them...|$|R
40|$|We {{introduce}} a new approach for securing intellectual property in embedded software implementations by using the response of an implementation to <b>fault</b> <b>injections.</b> In our approach, the implementation serves as its own watermark that is recorded through its fault effects. There is no additional code for the watermark. A simulator that maps the <b>fault</b> <b>injections</b> to the executed instructions aids an automated characterization of program code. We provide a proof-of-concept implementation of our watermarking approach using an 8 -bit ATMega 163 microcontroller and several assembly implementations of AES encryption. The results show that our method is well-suited for detection of identical software copies. In addition, our method shows robust performance in detection of software copies {{with a large number}} of added dummy instructions...|$|R
5000|$|... #Subtitle level 2: <b>Fault</b> <b>injection</b> in {{functional}} properties or test cases ...|$|E
5000|$|<b>Fault</b> <b>injection</b> methods - {{intentionally}} introducing faults {{to gauge}} the efficacy of testing strategies ...|$|E
50|$|SWIFI {{techniques}} for software <b>fault</b> <b>injection</b> {{can be categorized}} into two types: compile-time injection and runtime injection.|$|E
40|$|Combining {{different}} cryptanalytic {{methods to}} attack a cryptosystem {{became one of the}} hot topics in cryptanalysis. In particular, algebraic methods in side channel and differential fault analysis (DFA) attracted a lot of attention recently. In [9], Hojśik and Rudolf used DFA to recover the inner state of the stream cipher Trivium which leads to recovering the secret key. For this attack, they required 3. 2 one-bit <b>fault</b> <b>injections</b> on average and 800 keystream bits. In this paper, we give an example of combining DFA attacks and algebraic attacks. We use algebraic methods to improve the DFA of Trivium [9]. Our improved DFA attack recovers the inner state of Trivium by using only 2 <b>fault</b> <b>injections</b> and only 420 keystream bits...|$|R
40|$|Part 4 : Access Control and Data ProtectionInternational audienceWe {{introduce}} a new approach for securing intellectual property in embedded software implementations by using the response of an implementation to <b>fault</b> <b>injections.</b> In our approach, the implementation serves as its own watermark that is recorded through its fault effects. There is no additional code for the watermark. A simulator that maps the <b>fault</b> <b>injections</b> to the executed instructions aids an automated characterization of program code. We provide a proof-of-concept implementation of our watermarking approach using an 8 -bit ATMega 163 microcontroller and several assembly implementations of AES encryption. The results show that our method is well-suited for detection of identical software copies. In addition, our method shows robust performance in detection of software copies {{with a large number}} of added dummy instructions...|$|R
40|$|In {{the area}} of fault attacks, lasers are a common method to inject faults into an {{integrated}} circuit. Against the background of decreasing structure sizes in ICs, it is of interest which fault model can be met with {{state of the art}} equipment. We investigate laser-based <b>fault</b> <b>injections</b> into the SRAM-cells of block RAMs of two different FPGAs with 90 nm and 45 nm feature size respectively. Our results show that individual bit manipulations are feasible for both, the 90 nm chip and the 45 nm chip, but with limitations for the latter. To the best of our knowledge, we are the first to investigate laser <b>fault</b> <b>injections</b> into 45 nm technology nodes. We provide detailed insights of our laser equipment and the parameters of our setup to give a comparison base for further research...|$|R
5000|$|Granted: <b>Fault</b> <b>injection</b> {{methods and}} {{apparatus}} along with Penny C. Leavy, Jonathan Walter Gary, and Riley Dennis Eller.|$|E
5000|$|Codenomicon Defensics [...] is a {{blackbox}} test automation {{framework that}} does <b>fault</b> <b>injection</b> {{to more than}} 150 different interfaces including network protocols, API interfaces, files, and XML structures. The commercial product was launched in 2001, {{after five years of}} research at University of Oulu in the area of software <b>fault</b> <b>injection.</b> A thesis work explaining the used fuzzing principles was published by VTT, one of the PROTOS consortium members.|$|E
50|$|<b>Fault</b> <b>injection</b> may be {{necessary}} to ensure that all conditions and branches of exception handling code have adequate coverage during testing.|$|E
40|$|Abstract FlexRay {{communication}} protocol {{is expected to}} become the de-facto standard for distributed safety-critical systems. This paper classifies the effects of transient single bit-flip <b>fault</b> <b>injections</b> into the FlexRay communication controller. In this protocol, when an injected fault is activated, this may result {{in one or more}} error types, i. e. : Boundar...|$|R
40|$|ISBN : 978 - 1 - 4244 - 1825 <b>Fault</b> <b>injections</b> {{can easily}} break a cryptosystem: hence, many {{dedicated}} error detection schemes have been proposed, relying on {{various forms of}} redundancy (e. g., temporal redundancy). In this paper, we analyze the error detection coverage of two AES implementations, based on the double-data-rate computation template, with emulated faults of several durations...|$|R
40|$|ISBN: 0769507190 Analyzing at {{an early}} stage of the design the {{potential}} faulty behaviors of a circuit becomes a major concern due to the increasing probability of faults. It is proposed to carry out such an analysis using <b>fault</b> <b>injections</b> in RT-level VHDL descriptions and hardware prototyping of the circuit under design. Injection of erroneous transitions is automated and results are presented...|$|R
50|$|Destructive testing {{attempts}} {{to cause the}} software or a sub-system to fail. It verifies that the software functions properly even when it receives invalid or unexpected inputs, thereby establishing the robustness of input validation and error-management routines. Software <b>fault</b> <b>injection,</b> {{in the form of}} fuzzing, is an example of failure testing. Various commercial non-functional testing tools are linked from the software <b>fault</b> <b>injection</b> page; there are also numerous open-source and free software tools available that perform destructive testing.|$|E
5000|$|TestApi is a shared-source API library, which {{provides}} facilities for <b>fault</b> <b>injection</b> testing {{as well as}} other testing types, data-structures and algorithms for [...]NET applications.|$|E
5000|$|Depending on the {{complexity}} of the API for the level where faults are injected, <b>fault</b> <b>injection</b> tests often must be carefully designed to minimize the number of false positives. Even a well designed <b>fault</b> <b>injection</b> test can sometimes produce situations that are impossible in the normal operation of the software. For example, imagine there are two API functions, [...] and , such that alone, each of these functions can possibly fail, but if [...] is called and succeeds, a subsequent call to [...] is guaranteed to succeed. Now consider the following code: ...|$|E
40|$|ISBN: 0818654104 On-line test {{mechanisms}} {{have been}} designed for the CPU of a programmable logic controller. Specific devices integrated in an ASIC processor perform control flow checking during both application and system program executions. A prototype has been implemented, demonstrating the very low overhead of the approach. Results of <b>fault</b> <b>injections</b> have then proved the dependability increase at system level...|$|R
40|$|This paper investigates {{differential}} fault {{attacks against}} AEZ v 4. 2 authenticated encryption scheme. AEZ uses three different 128 -bit keys (I, J, L) and can potentially work without a nonce {{or with a}} repeated nonce. Under these conditions, this paper identifies {{the best place to}} apply differential fault attacks. We exploit the structure of AEZ to minimise the total number of faults required for key recovery. We propose an approach that can reduce the number of <b>fault</b> <b>injections</b> required to retrieve all three AEZ keys, I, J and L, from six to four such that these keys are uniquely determined. As a second step, we further reduce the <b>fault</b> <b>injections</b> to three without reducing the success rate of the key recovery attack. This improvement to differential fault attacks on AEZ makes these attacks more practical. The attacks in this paper are verified experimentally using a generic implementation of AEZ v 4. 2 developed in C...|$|R
40|$|ISBN 978 - 1 - 4244 - 5833 - 2 International audienceProgrammable devices like SRAM-based FPGAs, {{thanks to}} their low cost and high flexibility, are {{increasingly}} used for security applications; the mam drawback is their configuration memory, sensitive to perturbations. Symmetric cryptosystems are highly vulnerable to <b>fault</b> <b>injections</b> [1], but very few papers have reported laser-based fault attacks onto a secure implementation on a SRAM-based FPGA...|$|R
