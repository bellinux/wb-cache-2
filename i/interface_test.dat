68|1430|Public
5|$|STS-125 {{was first}} {{assigned}} to Discovery with a launch date no earlier than May 2008. This originally moved the mission ahead of STS-119, ISS Assembly flight 15. Delays to several shuttle missions {{resulted in a}} change in mission ordering, and the orbiter was changed to Atlantis on 8 January 2007. The crew of Atlantis went to the Kennedy Space Center for the Crew Equipment <b>Interface</b> <b>Test</b> in early July 2008. This allowed the STS-125 crew to get familiar with the orbiter and the hardware they would be using during the flight.|$|E
5000|$|... #Caption: John D. Olivas {{checking}} equipment during crew equipment <b>interface</b> <b>test</b> for STS-117.|$|E
5000|$|ATE systems {{typically}} {{interface with}} an automated placement tool, called a [...] "handler", that physically places the Device Under Test (DUT) on an <b>Interface</b> <b>Test</b> Adapter (ITA) {{so that it}} can be measured by the equipment. There may also be an <b>Interface</b> <b>Test</b> Adapter (ITA), a device just making electronic connections between the ATE and the Device Under Test (also called Unit Under Test or UUT), but also it might contain an additional circuitry to adapt signals between the ATE and the DUT and has physical facilities to mount the DUT. Finally, a socket is used to bridge the connection between the ITA and the DUT. A socket must survive the rigorous demands of a production floor, so they are usually replaced frequently.|$|E
40|$|In work dualism of term "user interface", what {{influences}} on user <b>interface</b> <b>testing,</b> was considered. User <b>interface</b> <b>testing</b> types, software retesting place in software life cycle, software retesting conception, software retesting process neuronet categorical model and software retesting process neuronet technique were described. The conclusion about possibility software retesting conception using for user <b>interface</b> software <b>testing</b> reliability increase was infered...|$|R
5000|$|Supports both {{native and}} virtual (tunnel) <b>interfaces</b> (<b>tested</b> IPv6-IPv4, IPv6-IPv6 and TUN/TAP tunnels) ...|$|R
5000|$|Automated {{functional}} GUI(Graphical User <b>Interface)</b> <b>testing</b> {{tools are}} used to repeat system-level tests through the GUI ...|$|R
50|$|The company sells {{proprietary}} {{solutions and}} breakthrough technology in power management, protection, advanced communications, human <b>interface,</b> <b>test</b> & measurement, {{as well as}} wireless and sensing products. The Company's integrated circuits (ICs) are employed in communications, computer and computer-peripheral, automated test equipment, industrial and other commercial applications.|$|E
50|$|As of 2008, {{mainframe}} structure {{had been}} realised. Preliminary design review of all mainframe systems completed. OCM camera test and evaluation had been completed. Scatterometer qualification model hardware had been realized. ROSA interfaces with spacecraft systems had been finalised. Qualification model of scatterometer scan mechanism and the <b>interface</b> <b>test</b> with electronics {{had also been}} completed.|$|E
50|$|A crew {{equipment}} <b>interface</b> <b>test</b> (CEIT) was {{a training}} procedure that helped spaceflight crewmembers gain first-hand {{knowledge of the}} flight hardware used during a space shuttle mission. For International Space Station assembly tasks, NASA conducted CEIT activities in the Space Station Processing Facility at Kennedy Space Center (KSC).The last CEIT was conducted April 7-8, 2011 by the STS-135 crew involving the space shuttle Atlantis {{in preparation for the}} final flight of the shuttle program.|$|E
5000|$|The {{practice}} of component <b>interface</b> <b>testing</b> {{can be used}} to check the handling of data passed between various units, or subsystem components, beyond full integration testing between those units. The data being passed can be considered as [...] "message packets" [...] and the range or data types can be checked, for data generated from one unit, and tested for validity before being passed into another unit. One option for <b>interface</b> <b>testing</b> is to keep a separate log file of data items being passed, often with a timestamp logged to allow analysis of thousands of cases of data passed between units for days or weeks. Tests can include checking the handling of some extreme data values while other interface variables are passed as normal values. Unusual data values in an interface can help explain unexpected performance in the next unit. Component <b>interface</b> <b>testing</b> is a variation of black-box testing, with the focus on the data values beyond just the related actions of a subsystem component.|$|R
50|$|In {{software}} engineering, graphical user <b>interface</b> <b>testing</b> is {{the process}} of testing a product's graphical user interface to ensure it meets its specifications. This is normally done {{through the use of a}} variety of test cases.|$|R
50|$|In 2010 RTTS {{began work}} on an {{enterprise}} test tool for data testing. QuerySurge was released in early 2012. QuerySurge automates big data testing, data warehouse and ETL <b>testing,</b> data <b>interface</b> <b>testing,</b> data migration testing and database upgrade testing.|$|R
5000|$|The Semiconductor ATE {{architecture}} {{consists of}} master controller (usually a computer) that synchronizes {{one or more}} source and capture instruments (listed below). Historically, custom-designed controllers or relays were used by ATE systems. The Device Under Test (DUT) is physically connected to the ATE by another robotic machine called a Handler or Prober and through a customized <b>Interface</b> <b>Test</b> Adapter (ITA) or [...] "fixture" [...] that adapts the ATE's resources to the DUT.|$|E
5000|$|RS-232 {{breakout}} box: Typically, RS-232 breakout boxes offer {{complete control}} of RS-232 <b>interface,</b> <b>test,</b> re-wire and open signal lines. These devices are pocket-sized for circuit testing, monitoring and patching. The usually provide 10 interface signal powered LEDs to permanently monitor TD, RD, RTS, CTS, DSR, CD, TC, RC, DTR (E) TC signals, as well as enabling the breakout of individual circuits or reconfiguration or patching {{any or all of}} the 24 active switch positions.|$|E
50|$|STS-125 {{was first}} {{assigned}} to Discovery with a launch date no earlier than May 2008. This originally moved the mission ahead of STS-119, ISS Assembly flight 15. Delays to several shuttle missions {{resulted in a}} change in mission ordering, and the orbiter was changed to Atlantis on 8 January 2007. The crew of Atlantis went to the Kennedy Space Center for the Crew Equipment <b>Interface</b> <b>Test</b> in early July 2008. This allowed the STS-125 crew to get familiar with the orbiter and the hardware they would be using during the flight.|$|E
5000|$|Graphical user <b>interface</b> <b>testing.</b> A testing {{framework}} that generates user interface {{events such as}} keystrokes and mouse clicks, and observes the changes that result in the user interface, to validate that the observable behavior {{of the program is}} correct.|$|R
50|$|Processes.Any {{phase of}} {{software}} development can be crowdsourced, and that phase can be requirements (functional, user interface, performance), design (algorithm, architecture), coding (modules and components), testing (including security <b>testing,</b> user <b>interface</b> <b>testing,</b> user experience testing), maintenance, user experience, or {{any combination of}} these.|$|R
2500|$|Chrome is {{internally}} {{tested with}} unit testing, [...] "automated user <b>interface</b> <b>testing</b> of scripted user actions", fuzz testing, {{as well as}} WebKit's layout tests (99% of which Chrome is claimed to have passed), and against commonly accessed websites inside the Google index within 20–30 minutes.|$|R
40|$|STS- 121 /Discovery Flight Crew; Steve Lindsey(Commander), Mark Kelley(pilot), Mike Fossum, Lisa Nowak, Stephanie Nowak, Pierce Sellers, and Thomas Ryder {{performed}} the following activities: 1) Crew equipment <b>interface</b> <b>test</b> at SSPF; 2) Crew equipment <b>interface</b> <b>test</b> at Kennedy Space Center; and Payload Crew equipment <b>interface</b> <b>test</b> in SSPF...|$|E
40|$|The LIME <b>Interface</b> <b>Test</b> Bench is a {{collection}} of tools that allow to compile programs in a way such that they monitor interface specifications at runtime in Java and C programs. Specifications can be made using the LIME specification language. Another part of the LIME <b>Interface</b> <b>Test</b> Bench is the LIME Concolic Testing tool (LCT), which uses a combination of concrete and symbolic execution to explore large number of control flow paths in a program or parts of a program. The Java Card technology allows to use a limited subset of Java to develop applets that run on Smart Cards. These applets communicate with an off-card application using a simple packet-based protocol. This report describes a case study, in which the LIME <b>Interface</b> <b>Test</b> Bench was used to test a Java Card applet. The case study uses the "logical channels demo" applet, {{which is part of the}} Java Card Development Kit [1]. Ten different specifications were added to this applet. In order to use the applet in a realistic environment, an off-card application for the applet was developed. This off-card application was tested using LCT...|$|E
40|$|Abstract. This paper {{introduces}} {{an automated}} heuristic process {{able to achieve}} high accuracy when matching graphical user interface widgets across multiple versions of a target application. The proposed implemen-tation is flexible as it allows full customization {{of the process and}} easy integration with existing tools for long term graphical user <b>interface</b> <b>test</b> case maintenance, software visualization and analysis. 1...|$|E
25|$|On 13 June 2014, the Montford Point {{successfully}} completed LCAC <b>interface</b> <b>tests</b> {{off the coast}} of Camp Pendleton. LCACs moved Amphibious Assault Vehicles from the base and offloaded them onto the ship, demonstrating the ESD's ability to facilitate at-sea transfers to serve as a mobile seabase.|$|R
5000|$|This is {{the stage}} where unit <b>testing,</b> <b>interface</b> <b>testing</b> is performed. Quality {{assurance}} team {{make sure that the}} new code will not have any impact on the existing functionality and they test major functionalities of the system once after deploying the new code in their respective environment(i.e. QA environment) ...|$|R
25|$|Orthogonal array {{testing is}} a black box testing {{technique}} which is a systematic, statistical way of software testing. It is used {{when the number of}} inputs to the system is relatively small, but too large to allow for exhaustive testing of every possible input to the systems. It is particularly effective in finding errors associated with faulty logic within computer software systems. Orthogonal arrays can be applied in user <b>interface</b> <b>testing,</b> system testing, regression testing and performance testing.|$|R
40|$|Live footage {{shows the}} crewmembers of STS- 99, Commander Kevin R. Kregel, Pilot Dominic L. Pudwill Gorie, Mission Specialists Janet L. Kavandi, Janice E. Voss, Mamoru Mohri, and Gerhard P. J. Thiele, {{participating}} in Crew Equipment <b>Interface</b> <b>Test</b> (CEIT) {{activities at the}} Orbiter Processing Facility (OPF). The crew is shown checking out and learning about the equipment...|$|E
40|$|This paper {{introduces}} {{an automated}} heuristic process {{able to achieve}} high accuracy when matching graphical user interface widgets across multiple versions of a target application. The proposed implementation is flexible as it allows full customization {{of the process and}} easy integration with existing tools for long term graphical user <b>interface</b> <b>test</b> case maintenance, software visualization and analysis...|$|E
40|$|This paper {{deals with}} user {{interface}} testing automation. After a brief introduction {{a description of}} tools facilitating {{the making of a}} suite of automated web application user interface tests follows. Afterwards a proposition of an architecture design of an automation framework allowing its users to write user <b>interface</b> <b>test</b> easily is provided. The paper concludes with an analysis of practical examples and validation of the architecture design...|$|E
5000|$|MIN {{provides}} {{three different}} <b>interfaces</b> for <b>test</b> case execution: ...|$|R
5000|$|End User Experience: We plan {{to conduct}} formal User <b>Interface</b> <b>testing.</b> This {{involves}} defining {{a set of}} tasks and use cases, asking users with various levels of JAUS experience to accomplish those tasks, and measuring performance and collecting feedback, to look for areas where the overall user experience can be improved.|$|R
40|$|Abstract—This paper {{presents}} {{experiences in}} model-based graphical user <b>interface</b> <b>testing</b> of Android applications. We present how model-based testing and test automation was implemented with Android, including how applications were modeled, how tests were designed and executed, {{and what kind}} of problems were found in the tested application during the whole process. The main focus is on a case study that was performed with an Android application, the BBC News Widget. Our goal is to present actual data on the experiences and to discuss if advantages can be gained using model-based testing when compared with traditional graphical user <b>interface</b> <b>testing.</b> Another contribution of this paper is a description of a keyword-based test automation tool that was implemented for the Android emulator during the case study. All the models and the tools created or used in this case study are available as open source...|$|R
40|$|This book {{constitutes}} the refereed {{proceedings of the}} 7 th International Conference on Haptic and Audio Interaction Design, HAID 2012, held in Lund, Sweden, in August 2012. The 15 full papers presented were carefully reviewed and selected from numerous submissions. The papers are organized in topical sections on haptics and audio in navigation, supporting experiences and activities, object and <b>interface,</b> <b>test</b> and evaluation. NanoSi...|$|E
40|$|In the {{development}} process the testing and validation activities are important steps for quality assurance of any product or system. The System Testing and Validation Workshop (STV) {{is a series of}} events initiated in the year 2002 and seeks to provide answers to the many open issues related to testing and validation. In 2017 STV is held as a joint research workshop with the third International Workshop on User <b>Interface</b> <b>Test</b> Automation (INTUITEST) and is co-located with the 5 th User Conference on Advanced Automated Testing (UCAAT) ...|$|E
40|$|The {{objective}} of this research project {{is to develop a}} user interface “test bed” to measure the role of touchscreen kiosks with community connectivity. This <b>interface</b> <b>test</b> bed will apply the knowledge of interface design to the domain of public transit kiosks, with a particular focus on bike share stations. The value of this research is the ability to generate user feedback between community members using urban experiences. Safety, effectiveness and community connectivity of public transit is enhanced with this information interface. This report explains the test bed kiosk’s design, physical build, and hardware and software testing. User interaction studies for standards, accessibility and design criteria were done; 2 D and 3 D modeling, material sourcing and mockups were built. Hardware sensors for proximity included passive infrared (PIR), ultrasonic range finding and RGB-D technology using Microsoft Kinect. Tests measured interaction with user movement type, including the differentiation of pedestrians, cyclists and vehicles. Observed interaction tests were performed with human subjects review approval. The <b>interface</b> <b>test</b> bed will allow for future tests using more advanced sensors and include user intercept surveys. The prototype test bed is a tool to test interface design for connecting urban design theory classifying urban experience information to enhance transit, firstly through the specific application of public bike share...|$|E
40|$|The NOVA/IOPS (Input-Output Processor Simulator) is used {{to control}} all <b>interface</b> <b>testing</b> of the MDM (Multiplexer Demultiplexer) Breadboard S 10 10 M (serial input-output-input module) and the Matra Space Lab Inerface Unit (SL/BIU). The {{software}} handles bookkeeping such as word error rates, types of errors, display of error buffers, data display and test identification...|$|R
40|$|The {{test results}} for the onboard {{navigation}} (ONAV) Ground Based Expert System Trainer System for an aircraft/space shuttle navigation entry phase system are described. A summary of the test methods and analysis results are included. Functional inspection and execution, <b>interface</b> <b>tests,</b> default data sources, function call returns, status light indicators, and user interface command acceptance are covered...|$|R
40|$|This {{document}} {{describes the}} results of the formal qualification test (FQT) / Demonstration conducted on September 10, and 14, 1998 for the EOS AMSU-A 2 instrument. The purpose of the report is to relate {{the results of}} the functional performance and <b>interface</b> <b>tests</b> of the software. This is the final submittal of the EOS/AMSU-A Software Test report...|$|R
