1432|198|Public
25|$|Finite automata {{are often}} used in the <b>frontend</b> of {{programming}} language compilers. Such a <b>frontend</b> may comprise several finite state machines that implement a lexical analyzer and a parser.|$|E
25|$|Smuxi is a {{cross-platform}} IRC client for the GNOME desktop {{inspired by}} Irssi. It pioneered {{the concept of}} separating the <b>frontend</b> client from the backend engine which manages connections to IRC servers inside a single graphical application.|$|E
25|$|In {{military}} applications, a high-power {{vacuum tube}} can generate a 10100megawatt signal that can burn out an unprotected receiver's <b>frontend.</b> Such devices are considered non-nuclear electromagnetic weapons; they {{were introduced in}} the late 1990s by US and Russia.|$|E
40|$|Honeypots are {{a type of}} {{security}} tools aimed to capture malicious activity. Related to their data capture function, two main factors are important: scalability and fidelity. A hybrid honeypot is a special honeypot system consisting of <b>frontends</b> and backends that can achieve a good balance between scalability and fidelity, as the <b>frontends</b> can monitor large-scale IP address spaces and the backends can provide fully functional systems to guarantee fidelity. The traffic redirection function is used to bridge the <b>frontends</b> and the backends, allowing to redirect the interesting traffic from the <b>frontends</b> to the backends. In this paper, a dynamic hybrid honeypot system based transparent traffic redirection mechanism is proposed {{in order to address}} the identical-fingerprint problem. The experimental results show that this mechanism can keep the traffic redirection stealthy and effective...|$|R
5000|$|Replacement of the gnome-packagekit <b>frontends</b> {{with a new}} {{application}} installer, tentatively named gnome-software ...|$|R
50|$|Two {{graphical}} {{user interface}} (GUI) <b>frontends</b> are available for cscope which ease its use.|$|R
25|$|Since JavaScript {{is getting}} more {{important}} for web development (<b>frontend</b> overtakes many aspects which were done in backend before), there is also more consideration done about performance. Especially mobile devices could have problems with rendering and processing unoptimized complex logic.|$|E
25|$|The {{idea for}} Wubi {{was drafted by}} Agostino Russo taking {{inspiration}} from Topologilinux, which provided a loopmounted installation, and Instlux, that provided a simple Windows <b>frontend.</b> The idea was to merge the two concepts having a Windows installer that would loopmount an image of Ubuntu. Geza Kovacs later refined the specification and provided the first prototypes {{to show that the}} concept was sound. Oliver Mattos wrote the original user interface in NSIS.|$|E
25|$|Early builds of Boxee {{included}} a built-in BitTorrent client (not in the Windows version), with a <b>frontend</b> for it {{integrated into the}} Boxee interface, {{and there are also}} Torrent links to legal BitTorrent trackers download sites available incorporated by default. The built-in torrent client was later removed. Through Boxee's Python plugin system it was also possible for the end-users to make their own or add unofficial plugins made by third-party persons for other BitTorrent trackers.|$|E
5000|$|... abcde - a commandline tool, {{also for}} Linux, that also <b>frontends</b> popular {{libraries}} and metadata services.|$|R
50|$|The {{graphical}} <b>frontend's</b> {{progress bar}} is less reliable than the native console's progress indicator {{for the various}} backend utilities.|$|R
40|$|International audienceNunchaku {{is a new}} higher-order {{counterexample}} generator {{based on}} a sequence of transformations from polymorphic higher-order logic to first-order logic. Unlike its predecessor Nitpick for Isabelle, it is designed as a stand-alone tool, with <b>frontends</b> for various proof assistants. In this short paper, we present some ideas to extend Nunchaku with partial support for dependent types and type classes, to make <b>frontends</b> for Coq and other systems based on dependent type theory more useful...|$|R
2500|$|... : A git <b>frontend</b> with {{built-in}} authentication, issue handling, fork {{and a lot}} of features, written in go.|$|E
5000|$|A backend server and <b>frontend</b> client architecture, {{allowing}} multiple <b>frontend</b> client {{machines to}} be remotely served content {{from one or}} more backend servers. A single computer can perform as both the <b>frontend</b> client and the backend server.|$|E
50|$|Ordinarily an LDAP {{request is}} {{received}} by the <b>frontend,</b> decoded, and then passed to a backend for processing. When the backend completes a request, it returns a result to the <b>frontend,</b> which then sends the result to the LDAP client. An overlay {{is a piece of}} code that can be inserted between the <b>frontend</b> and the backend. It is thus able to intercept requests and trigger other actions on them before the backend receives them, and it can also likewise act on the backend's results before they reach the <b>frontend.</b> Overlays have complete access to the slapd internal APIs, and so can invoke anything the <b>frontend</b> or other backends could perform. Multiple overlays can be used at once, forming a stack of modules between the <b>frontend</b> and the backend.|$|E
40|$|A {{low cost}} {{solution}} for constructing receiver signal points is investigated that combines {{a large number}} of constrained radio frequency (RF) <b>frontends</b> with a limited number of full RF chains. The constrained RF front ends have low cost and are limited to on/off switching of antenna elements and a small number of phases. Severe degradations are typically observed for multi-user MIMO for these simple on/off antenna arrays. A few full RF <b>frontends</b> are shown to compensate for the signal errors of the high number of constrained RF <b>frontends</b> for various scenarios. An algorithm for such a hybrid RF (HRF) system is developed that achieves performance close to that of exhaustive search with respect to the mean square error of the constructed receiver signals for Rayleigh fading and the WINNER 2 Urban Macro channel model...|$|R
50|$|Additionally, Zenwalk is {{compatible}} with Slackware package management tools such as slapt-get and its <b>frontends,</b> and have similar functionality as that of netpkg.|$|R
40|$|Nunchaku {{is a new}} higher-order {{counterexample}} generator {{based on}} a sequence of transformations from polymorphic higher-order logic to first-order logic. Unlike its predecessor Nitpick for Isabelle, it is designed as a stand-alone tool, with <b>frontends</b> for various proof assistants. In this short paper, we present some ideas to extend Nunchaku with partial support for dependent types and type classes, to make <b>frontends</b> for Coq and other systems based on dependent type theory more useful. Comment: In Proceedings HaTT 2016, arXiv: 1606. 0542...|$|R
50|$|Conceptually, TYPO3 {{consists}} of two parts: the <b>frontend,</b> visible to visitors, and the administrative backend. The <b>frontend</b> displays the web content. The backend is responsible for administration and managing content. The core functions of TYPO3 include user privileges and user roles, timed display control of content (show/hide content elements), a search function for static and dynamic content, search-engine friendly URLs, an automatic sitemap, multi-language capability for <b>frontend</b> and backend, and more.|$|E
50|$|B2X’s {{service range}} {{comprises}} backend and <b>frontend</b> solutions and {{begins with the}} term SMART, followed by {{a description of the}} service application. Their backend solutions include SMARTLOGISTICS, SMARTREPAIR, SMARTPARTS and SMARTRECOVERY. B2X’s <b>frontend</b> solutions include SMARTAPP, SMARTWEB, SMARTHELP and SMARTBAR.|$|E
50|$|In the Foundation Phase, {{students}} will learn {{the foundation of}} <b>frontend</b> development by building a clone of Rdio, a streaming music service. In the Building Real Projects Phase, {{students will}} learn <b>frontend</b> frameworks and libraries including jQuery, AngularJS, and JavaScript testing frameworks.|$|E
50|$|HCC is an {{open source}} {{parallel}} C++ compiler for HSA and OpenCL 1.2. HCC provides compiler <b>frontends</b> for C++AMP, C++ source with parallel STL and OpenMP.|$|R
50|$|There are {{graphical}} <b>frontends</b> to NDISwrapper, such as Ndisgtk and NdisConfig, {{which allow}} NDISwrapper {{to be installed}} using a graphical user interface rather than console commands.|$|R
40|$|This paper {{presents}} an efficient time-domain simulation approach for telecommunication <b>frontends</b> at architectural level. It {{is based upon}} the use of complex damped exponen-tial modeling functions. These allow to construct accurate signal models for digitally modulated telecom signals, re-quiring only few modeling functions. Since these models are valid over a long range of time, they allow for a large timestep, which greatly speeds up time-domain simulation of the telecom <b>frontends.</b> Details of a simulation approach based upon this signal model are discussed. The approach is verified by experimental results. 1...|$|R
50|$|KPackage was KDE's {{package manager}} <b>frontend.</b>|$|E
5000|$|Interactive policy {{generation}} with graphical user interface: Policies can {{be generated}} interactively via a graphical <b>frontend</b> to Systrace. The <b>frontend</b> shows system calls and their parameters not currently covered by policy and allows the user to refine the policy until it works as expected.|$|E
50|$|In 1996, the SUSE Linux {{distribution}} has YaST as <b>frontend</b> {{for its own}} app repository. Mandriva Linux has urpmi with GUI <b>frontend</b> called Rpmdrake. Fedora and Red Hat Enterprise Linux has YUM in 2003 as {{a successor}} of YUP (developed at Duke University for Red Hat Linux).|$|E
40|$|Multi-standard {{capability}} of current wireless equipment requires a major {{degree of complexity}} and flexibility of classical radio <b>frontends.</b> Wideband architectures in combination with software defined radio (SDR) technologies can considerably reduce the demands on the analog <b>frontends.</b> Consequently, analog-to-digital converters (ADC) with high sampling rates and large dynamic range are necessary. Even though current ADCs are improving steadily, they are {{still one of the}} limiting components in software defined receivers. This paper gives an overview of the state-of-the-art of analog-to-digital converters and dynamic range enhancement techniques like signal averaging or nonuniform quantization...|$|R
50|$|A Web design toolkit, raswct, is {{provided}} which allows to establish Web query <b>frontends</b> easily, including graphical widgets for parametrized query handling, such as sliders for thresholds in queries.|$|R
50|$|As of May 2008, Cogito {{does not}} work well with recent Git versions, and Cogito users are advised to use Git {{directly}} or use some other <b>frontends</b> such as EasyGit.|$|R
5000|$|KTOWN: <b>frontend</b> for InfiniteReality2 cards (Onyx, Origin variation) ...|$|E
5000|$|Public <b>Frontend</b> (un{{registered}} {{users can}} contact registered users) ...|$|E
5000|$|... webstrict: UI <b>frontend</b> to DansGuardian (web content {{filtering}} tool) ...|$|E
5000|$|In 2016, an {{internal}} {{team of researchers}} coauthored the [...] "Receiver", [...] "Modem" [...] and [...] "Antenna" [...] chapters in a comprehensive book describing electronic design of transceiver <b>frontends</b> for backhauling.|$|R
40|$|The {{sensitivity}} {{characteristics of}} optical receiver <b>frontends</b> for high-speed data communications depend on modulation format, detector type, and specific operational constraints. A general mathematical {{model of the}} receiver sensitivity that fits to analytical as well as measured data is required to compare different receiver implementations and assess the reliability of data links under varying received power as common in free-space optical communication links. In this paper, a new approach based on Q-factor modeling is presented, compared with analytical receiver models, and applied to a multitude of exemplary receiver implementations. A methodology is introduced to generally apply the model to ideal or practical binary optical receiver <b>frontends...</b>|$|R
5000|$|Clients are the {{software}} <b>frontends</b> that {{communicate with the}} hardware drivers. They usually communicate with INDI hardware drivers via INDI server, though they can communicate with the drivers directly. There are many types of clients, most notably: ...|$|R
