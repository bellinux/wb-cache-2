538|1053|Public
25|$|Most {{operating}} systems that support dynamically linked libraries also support dynamically loading such libraries via a run-time linker API. For instance, Microsoft Windows uses the API functions LoadLibrary, LoadLibraryEx, FreeLibrary and GetProcAddress with Microsoft <b>Dynamic</b> <b>Link</b> Libraries; POSIX based systems, including most UNIX and UNIX-like systems, use dlopen, dlclose and dlsym. Some development systems automate this process.|$|E
25|$|There {{are three}} modules to Jet: One is the Native Jet ISAM Driver, a <b>dynamic</b> <b>link</b> library (DLL) that can {{directly}} manipulate Microsoft Access database files (MDB) using Indexed Sequential Access Method (ISAM). Another {{one of the}} modules contains the ISAM Drivers, DLLs that allow access {{to a variety of}} ISAM databases, among them xBase, Paradox, Btrieve and FoxPro, depending on the version of Jet. The final module is the Data Access Objects (DAO) DLL. DAO provides an API that allows programmers to access JET databases using any programming language.|$|E
25|$|There {{were three}} modules to Jet. One was the Native Jet ISAM Driver, a Jet <b>dynamic</b> <b>link</b> library (DLL) that could {{directly}} manipulate Microsoft Access database files (MDB), {{which was a}} modified form of an Indexed Sequential Access Method (ISAM) database. Another one of the modules were the ISAM Drivers, DLLs that allowed access to ISAM databases, among them being Xbase, Paradox, Btrieve and FoxPro files. The final module was the Data Access Objects (DAO) DLL, DAO allowed programmers access to the Jet engine. It was basically an object-oriented data language used by Access Basic and Visual Basic application developers to access Jet.|$|E
30|$|Interactive Simulation with Reciprocative <b>Dynamic</b> <b>Linking</b> (SIM-RDL): This applet offered {{affordance}} in {{the form}} of Reciprocative <b>Dynamic</b> <b>Linking.</b> This Reciprocative <b>Dynamic</b> <b>Linking</b> offered interactivity that allowed learners to select and manipulate each of the MERs.|$|R
30|$|During interviews, {{students}} demanded {{some additional}} features/content, such as more examples and audio commentary. Regarding learning preference, all 24 students advocated {{the need of}} Reciprocative <b>Dynamic</b> <b>Linking.</b> Students who learnt without Reciprocative <b>Dynamic</b> <b>Linking</b> explained what Reciprocative <b>Dynamic</b> <b>Linking</b> would be and how this feature could be added in the learning material that they had already used. After understanding about Reciprocative <b>Dynamic</b> <b>Linking,</b> all of them commented {{that they would have}} preferred learning from Reciprocative <b>Dynamic</b> <b>Linking</b> learning material and justified the reasons for their preferences using the keywords as mentioned above.|$|R
40|$|Through <b>dynamic</b> <b>linking,</b> Java {{supports}} a novel paradigm for code deployment, which ensures fast program start-up and linking {{with the most}} recent version of code. Thus Java <b>dynamic</b> <b>linking,</b> gives support for software evolution, by supporting a piece of code A which uses a piece of code B, to link at run-time with a version of code B which was created after A was created. <b>Dynamic</b> <b>linking</b> involves loading, verification, resolution and preparation of code. Programmers are normally {{not aware of the}} <b>dynamic</b> <b>linking</b> process. Nevertheless, in some situations, <b>dynamic</b> <b>linking</b> does manifest itself, and affects program execution and the integrity of the virtual machine. Therefore, {{there is a need for}} a description of <b>dynamic</b> <b>linking</b> at the level of the Java source language. We provide such a description, and demonstrate the process in terms of a sequence of source language examples, in which the effects if <b>dynamic</b> <b>linking</b> are explicit. 1...|$|R
2500|$|Another type of device {{drivers are}} [...]DRV drivers. These drivers are loaded in user-mode, and are {{commonly}} used to control devices such as multimedia devices. To provide access to these devices, a <b>dynamic</b> <b>link</b> library is required (such as MMSYSTEM.DLL).|$|E
2500|$|Microsoft {{asserted}} {{in court}} that IE was integrated with Windows 98, and that Windows 98 could not be made to operate without it. Australian computer scientist Shane Brooks later demonstrated that Windows 98 could in fact run with IE files removed. Brooks went on to develop software designed to customize Windows by removing [...] "undesired components", which {{is now known as}} LitePC. Microsoft has claimed that the software did not remove all components of Internet Explorer, leaving many <b>dynamic</b> <b>link</b> library files behind.|$|E
2500|$|OLE custom {{controls}} {{were introduced in}} 1994 {{as a replacement for}} the now deprecated Visual Basic Extension controls. Instead of upgrading these, the new architecture was based on OLE. In particular, any container that supported OLE 2.0 could already embed OLE custom controls, although these controls cannot react to events unless the container supports this. OLE custom controls are usually shipped {{in the form of a}} <b>dynamic</b> <b>link</b> library with the [...]ocx extension. In 1996 all interfaces for controls (except IUnknown) were made optional to keep the file size of controls down, so they would download faster; these were then called ActiveX Controls.|$|E
30|$|In this paper, {{we present}} {{the design of}} Reciprocative <b>Dynamic</b> <b>Linking</b> in ILEs {{developed}} for a topic on Signal Representation in the course on “Signals and Systems”; a second year course from Electrical Engineering undergraduate program. The paper reports the study conducted to investigate effect of Reciprocative <b>Dynamic</b> <b>Linking</b> on students’ Representational Competence assessed in the selected domain. The effect of Reciprocative <b>Dynamic</b> <b>Linking</b> on learners’ cognitive load was also investigated {{as a part of}} this study, as the proposed feature of Reciprocative <b>Dynamic</b> <b>Linking</b> was expected to offer the required instructional support to meet learners’ cognitive load demands. The results confirmed that Reciprocative <b>Dynamic</b> <b>Linking</b> could lead to higher learning, and it offered the required cognitive support to improve learners’ Representational Competence. The findings from semi-structured interviews and screen capture analysis corroborated the results. This paper provides details of how to design Reciprocative <b>Dynamic</b> <b>Linking</b> in ILEs and how it contributes towards improving learners’ Representational Competence.|$|R
3000|$|Use of Reciprocative <b>Dynamic</b> <b>Linking</b> {{affordances}} in SIM-RDL (used/not used): All {{students from}} SIM-RDL group used Reciprocative <b>Dynamic</b> <b>Linking.</b> That is, {{all of them}} manipulated both the MERs. Tab wise observations are as follows: [...]...|$|R
5000|$|A Novell lawyer {{has written}} that <b>dynamic</b> <b>linking</b> not being {{derivative}} [...] "makes sense" [...] but is not [...] "clear-cut", and that evidence for good-intentioned <b>dynamic</b> <b>linking</b> {{can be seen by}} the existence of proprietary Linux kernel drivers.|$|R
2500|$|On Windows 95, the MKDE {{interface}} (a Windows <b>dynamic</b> <b>link</b> library (DLL) called WBTRV32.DLL) determines what {{database access}} method is in use via the configuration file. If it detects both the client/server and workstation engines are {{installed on the}} same machine, it checks whether the target is set to workstation or server. If running on Windows NT and the server process NTMKDE.EXE is running along with the standalone workstation process W32MKDE.EXE it looks in the registry {{to determine if the}} target is a server or workstation. In both cases, if the MKDE interface is set to workstation, (the [...] "Standalone workstation" [...] configuration) it uses the MKDE (W32MKDE.EXE) to access the file directly. If it is set to server, the MKDE interface on the client uses a communications module (on Windows 95 this is W32BTICM.DLL, on Windows NT this is NTBTICM.DLL) that [...] "talks" [...] to the server. The server itself has its own matching communications module (again either W32BTICM.DLL or NTBTICM.DLL) that resides on the mapped drive. The server DLL communicates with the server MKDE (NTMKDE.EXE) which updates records, then sends a confirmation that the operation succeeded, back through the communications module to the client.|$|E
50|$|Functions {{defined in}} <b>Dynamic</b> <b>Link</b> Libraries can be used.|$|E
50|$|PBWin is a 32-bit {{compiler}} {{compatible with}} the Windows 9x series and the Windows NT series of operating systems, including Windows XP, Windows Server 2008, Windows Vista, and Windows 7. PBWin can create <b>Dynamic</b> <b>Link</b> Libraries. PBWin applications can read <b>Dynamic</b> <b>Link</b> Libraries.PBWin comes with a compiler, IDE including an editor and stepping debugger.|$|E
30|$|The {{study was}} set with the {{objectives}} {{to investigate the}} role of “Reciprocative <b>Dynamic</b> <b>Linking</b> in developing students” Representational Competence and to investigate its effect on students’ learning in an interactive learning environment. Additionally, it also analyzed impact of Reciprocative <b>Dynamic</b> <b>Linking</b> on cognitive load of learners. The results confirmed that Reciprocative <b>Dynamic</b> <b>Linking</b> contributed {{in the development of}} Representational Competence as needed for higher cognitive level tasks. It also attributed development of Representational Competence to increase in germane cognitive load of learners.|$|R
40|$|<b>Dynamic</b> <b>linking</b> is a {{requirement}} for portable executable content. Executable content cannot know, ahead of time, where {{it is going to}} be executed, nor know the proper operating system interface. This imposes {{a requirement}} for <b>dynamic</b> <b>linking.</b> At the same time, we would like languages supporting executable content to be statically typable, for increased efficiency and security. Static typing and <b>dynamic</b> <b>linking</b> interact in a security-relevant way. This interaction is the subject of this paper. One solution is modeled in PVS, and formally proven to be safe. ...|$|R
50|$|The linker (@LINK) is {{the modern}} linking {{environment}} which combines object modules {{into a new}} object module. It provides both static and <b>dynamic</b> <b>linking</b> capabilities. The most common usage is to combine the object modules of a program statically but to allow <b>dynamic</b> <b>linking</b> to libraries.|$|R
5000|$|SISO-STD-004.1-2004: <b>Dynamic</b> <b>Link</b> Compatible HLA API Standard for the HLA Interface Specification ...|$|E
5000|$|<b>Dynamic</b> <b>Link</b> Compatible HLA API Standard for the HLA Interface Specification Version 1.3 ...|$|E
5000|$|<b>Dynamic</b> <b>Link</b> Compatible HLA API Standard for the HLA Interface Specification (IEEE 1516.1 Version) ...|$|E
50|$|The single-level {{store and}} <b>dynamic</b> <b>linking</b> {{are still not}} {{available}} to their full power in other widely used operating systems, despite the rapid and enormous advance in the computer field since the 1960s. They are becoming more widely accepted and available in more limited forms, for example, <b>dynamic</b> <b>linking.</b>|$|R
30|$|The main {{objective}} of Reciprocative <b>Dynamic</b> <b>Linking</b> {{was to develop}} students’ Representational Competence {{that would lead to}} improvement in learning. Here, the responses clearly articulated how students were able to develop Representational Competence as they were better equipped to “relate and link MERs” with Reciprocative <b>Dynamic</b> <b>Linking.</b> The responses such as “able to find relations,” “chain of representations,” “relate better,” and “time and frequency domains go hand-in-hand” supported this claim. Overall, learners who learnt with Reciprocative <b>Dynamic</b> <b>Linking</b> showed improvement in Representational Competence for category I and category III questions.|$|R
5000|$|C {{translator}} (E2C) for standalone executables or <b>dynamic</b> <b>linking</b> ...|$|R
50|$|<b>Dynamic</b> <b>link</b> {{matching}} is a graph-based {{system for}} image recognition. It uses wavelet transformations to encode incoming image data.|$|E
50|$|Full Windows API support, {{including}} full {{file system}} and registry access, loading {{and execution of}} <b>dynamic</b> <b>link</b> libraries and executing files.|$|E
50|$|Others: There {{are other}} {{integration}} functions, such as Edit in Adobe Audition, <b>Dynamic</b> <b>Link</b> to Encore, and Reveal in Adobe Bridge.|$|E
30|$|Learning from {{interactive}} learning environments enriched with multiple external representations (MERs) is often beneficial. The learning benefits of MERs highly {{rely on the}} development of Representational Competence. Representational Competence refers to an ability to translate and see relations between MERs. The relevant research findings have consistently reported learners’ difficulty in relating and translating in MERs due to insufficient development of Representational Competence. Although <b>dynamic</b> <b>linking</b> is one of the strategies recommended to address this issue, it offers mixed results. This paper reports design of a new interaction feature that overcomes some of the limitations of traditional dynamically linked representations. We designed an additional interaction in dynamically linked MERs to support learners’ cognitive demands; we refer to this as Reciprocative <b>Dynamic</b> <b>Linking.</b> The goal of this additional affordance was to strengthen learners’ cross-representation cognitive linkage by promoting Representational Competence. The paper reports the study conducted to investigate effects of Reciprocative <b>Dynamic</b> <b>Linking</b> on students’ Representational Competence. The said study was conducted in a course on Signals and Systems from Electrical Engineering program (N[*]=[*] 24). The subjects were assigned to two conditions: a Simulation and a Simulation with Reciprocative <b>Dynamic</b> <b>Linking.</b> The representation competence was assessed with an instrument for measuring Representational Competence within Signals and Systems domain. The effect of Reciprocative <b>Dynamic</b> <b>Linking</b> on learners’ cognitive load was also investigated. The results confirmed that Reciprocative <b>Dynamic</b> <b>Linking</b> could lead to improvement in Representational Competence and thus, higher learning for “Apply and Analyze Procedural knowledge” categories of tasks. Reciprocative <b>Dynamic</b> <b>Linking</b> also promoted germane cognitive load of learners, as it could offer the required cognitive support to improve learners’ Representational Competence. The findings from semi-structured interviews and screen capture analysis corroborated the results. This paper provides details of how to design Reciprocative <b>Dynamic</b> <b>Linking</b> in {{interactive learning}} environments and its effect on learners’ Representational Competence. Apart from establishing learning effectiveness of Reciprocative <b>Dynamic</b> <b>Linking,</b> the study further contributes by confirming the role of cognitive processing of learners while learning from interactive learning environments. The findings from the study suggest designing strategies not for just creating highly interactive learning environments but equipping a given learning environment with conducive interaction features that foster learning.|$|R
40|$|In {{this paper}} we {{investigate}} {{the problem of}} synchronization of homogeneous nonlinear oscillators coupled by <b>dynamic</b> <b>links.</b> The output of the nonlinear oscillators is the input to the <b>dynamic</b> <b>links,</b> while the output of these dynamics links is the quantity available to the distributed controllers at the nodes to impose synchronization of the network. In particular inspired by the practical case of nonlinear oscillators connected over an electrical network, we extend a theoretical framework proposed {{to deal with the}} synchronization of non-linear oscillators to the case of networks with <b>dynamic</b> <b>links</b> and guarantee that synchronization is achieved...|$|R
5000|$|Compiler (can make {{executable}} files, {{libraries and}} <b>dynamic</b> <b>linked</b> libraries (DLL) files) ...|$|R
5000|$|... newLISP has an import function, {{which allows}} {{importing}} functions from DLLs (<b>Dynamic</b> <b>Link</b> Libraries) on Win32 or shared libraries on Linux/UNIX.|$|E
5000|$|Adobe <b>Dynamic</b> <b>Link</b> {{integrates}} After Effects with Premiere Pro {{and with}} Encore, allowing files {{to be transferred}} between the two without rerendering.|$|E
5000|$|... "The OPEN command opens {{communication}} with a device, {{which can be}} a disk file, a window, a <b>dynamic</b> <b>link</b> library or a serial communications port." ...|$|E
40|$|The Spring Operating System {{provides}} {{high performance}} <b>dynamic</b> <b>linking</b> of program images. Spring uses caching of both fixed-up program images and partially fixed-up shared libraries to make <b>dynamic</b> <b>linking</b> of program images efficient, {{to reduce the}} need for PIC (position-independent code), and to improve page sharing between different program images running the same libraries. The result is that with program image caching, dynamically-linked programs have a start-up cost similar to statically-linked programs regardless of the number of unresolved symbols in dynamically-linked program images and shared libraries. In addition, with library and program image caching, we have reduced the need for PIC and have increased page sharing. 1. Introduction <b>Dynamic</b> <b>linking</b> of shared libraries is used in most modern UNIX â systems. These systems include, among others, SunOS [2] and SVR 4 [11]. <b>Dynamic</b> <b>linking</b> has several good properties:. Unresolved symbols in a program {{do not have to be}} resolved [...] ...|$|R
40|$|This {{technical}} report concentrates {{on how to}} do (explicit) <b>dynamic</b> <b>linking</b> in the C++ programming language using the GNU C/C++ compiler under the UNIX systems SunOS 4. 1, SunOS 5. 4 (which is part of the Solaris 2. 4 distribution) and Linux 1. 3. 2 <b>Dynamic</b> <b>linking</b> in C++ <b>Dynamic</b> <b>linking</b> of shared C++ object files requires global constructors and destructors to be handled correctly. The C++ language specifications require that global constructors - 4 - are called before the main function and that global destructors are called in reverse order afterwards. There is no problem here with implicit <b>dynamic</b> <b>linking</b> because it happens at start-up time of the program. Explicit <b>dynamic</b> <b>linking</b> is used under control of the programmer using the functions of a programming interface to the services of the dynamic linker. Thus <b>dynamic</b> <b>linking</b> and unlinking happens at run time. The language specifications cannot be met in this case but they don't consider <b>dynamic</b> <b>linking</b> at all. So the specifications have to be weakened in order to meet this special case: In case of dynamically linking and unlinking an object file sometime at run time it is required that global constructors are called immediately after loading the file and before using any function or data defined within. Global destructors must be called in reverse order just before removing the file from the address space. No function and no data defined in the file may be called or used afterwards. If the linking or unlinking of an object file implies the usage or removal of libraries then the usual rules apply: Global constructors of libraries have to be called before those of the object file, global destructors of libraries have to be called after those of the object file. The programmer has to be aware of these modifications in orde [...] ...|$|R
30|$|To {{answer these}} {{research}} questions, {{we used the}} following types of learning environments: (a) Simulation (SIM) and (b) Interactive Simulation with Reciprocative <b>Dynamic</b> <b>Linking</b> (SIM-RDL). SIM and SIM-RDL were both designed for the same content for the selected topic. While SIM-RDL was designed with Reciprocative <b>Dynamic</b> <b>Linking</b> to offer reciprocative interface, SIM was designed without Reciprocative <b>Dynamic</b> <b>Linking.</b> The development of representation competence was assessed {{with the help of}} an instrument for measuring “Representational Competence within Signals and Systems domain.” Germane cognitive load was measured using validated a self-reported cognitive load subjective rating scale. The details of the instruments used are given in Section 5.3 of this paper.|$|R
