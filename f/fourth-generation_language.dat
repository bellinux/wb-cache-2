8|55|Public
50|$|Nomad Software is a {{relational}} database and <b>fourth-generation</b> <b>language</b> (4GL), originally {{developed in the}} 1970s by time-sharing vendor National CSS While it is still in use today, its widest use was in the 1970s and 1980s.|$|E
5000|$|The {{company might}} be {{considered}} {{an example of the}} [...] "merger mania" [...] of the 1990s and beyond.Aonix was formed in November 1996 by merging two software development tools companies: Interactive Development Environments, a modelling, analysis and design tools developer, and Thomson Software Products (TSP).TSP was based in Norwalk, Connecticut with engineering and support facilities in Norwalk and San Diego, California. TSP was established in July 1995, as a United States subsidiary of the French firm Thomson-CSF, formed by merging the Thomson subsidiary Alsys of San Diego with Must Software International of Norwalk. The staff in Norwalk continued to provide client/server <b>fourth-generation</b> <b>language</b> (4GL) and middleware products, while the ex-Alsys worked on high-performance Ada programming language development environments and the TeleUSE family of graphical user interface development tools.In December, 1998, Aonix was acquired by private equity firm The Gores Group (then known as Gores Technology Group).|$|E
40|$|The {{purpose of}} this thesis is to design and {{implement}} a concrete interface generation system. The concrete interface generator is a software system which takes a formal speci-fication as input and generates the specification part of an Ada implementation as output. Attribute grammars and <b>fourth-generation</b> <b>language</b> tools {{have been used in}} the implementation of this system. Spec. a formal language for writing black-box specifica-tions for large software systems, was used as the input for the concrete interface genera...|$|E
50|$|ABAP {{is one of}} {{the many}} application-specific <b>fourth-generation</b> <b>languages</b> (4GLs) first {{developed}} in the 1980s. It was originally the report language for SAP R/2, a platform that enabled large corporations to build mainframe business applications for materials management and financial and management accounting.|$|R
50|$|MLAB (Modeling LABoratory) is a multi-paradigm {{numerical}} {{computing environment}} and <b>fourth-generation</b> programming <b>language.</b>|$|R
5000|$|An {{intuitive}} database-oriented <b>fourth-generation</b> programming <b>language</b> (4GL) {{for creating}} databases, managing data, and writing applications ...|$|R
40|$|Past {{studies of}} {{software}} maintenance issues have largely {{concentrated on the}} average North American firm. While {{they have made a}} substantial contribution to good information system management practice, it is believed that further segmentation of sample data and cross-country comparisons will help to identify patterns of behaviour more akin to many less average organizations in North America and elsewhere. This paper compares the Singapore maintenance scene with the reported North American experience. Comparisons are also made between: Government organizations, Singapore corporations and multinational corporations (MNCs); mainframe and minicomputer installations; and <b>fourth-generation</b> <b>language</b> (4 GL) and non- 4 GL computer installations. Study findings, while in many cases were similar to earlier US studies, do show the importance of Singapore's young application portfolio, the widespread usage of 4 GLs and the severe maintenance personnel problems. ...|$|E
40|$|Approved {{for public}} release; {{distribution}} is unlimited. The {{purpose of this}} thesis is to design and implement a concrete interface generation system. The concrete interface generator is a software system which takes a formal specification as input and generates the specification part of an Ada implementation as output. Attribute grammars and <b>fourth-generation</b> <b>language</b> tools {{have been used in}} the implementation of this system. Spec, a formal language for writing black-box specifications for large software systems, was used as the input for the concrete interface generation system. Ada was chosen to be the computer language generated by the system. This thesis implements a subset of the Spec language, discusses the design methodology used in its implementation, and presents guidelines for the mapping of Spec to Ada. Included is a listing of the Spec grammar, the concrete interface generator systems source listing, a sample of input used to tet the system, and resulting output. Lieutenant, United States Nav...|$|E
40|$|Function Point Analysis (FPA) is a {{synthetic}} software estimation metric used for computing {{the size and}} complexity of applications. It was first introduced by Allan. J. Albrecht during the mid-seventies, {{as a result of}} a lengthy research based on applications that were developed using COBOL and PL/ 1 programming languages. The purpose of this researchÂ· is to investigate the possibility, and the most effective method, of automatically performing a Function Point Analysis on Oracle applications that consist of Oracle Forms and Oracle Reports. The research revealed a seemingly lack of other researches on this topic. As FPA was invented a few years prior to the birth of Oracle, and consequently that of fourth-generation languages, it had to be tailored to suit the <b>fourth-generation</b> <b>language</b> Oracle tools used to develop the Oracle applications. This experiment provided a proof of concept and resulted in a software that achieved its objective of automatically calculating Oracle applications, consisting of Oracle Forms and Oracle Reports, in an a posteriori manner...|$|E
5000|$|Several <b>Fourth-generation</b> {{programming}} <b>language</b> products (Powerhouse, Transact, Speedware, Protos) {{became available}} from third party vendors.|$|R
50|$|LINC ("Logic and Information Network Compiler") is a <b>fourth-generation</b> {{programming}} <b>language,</b> used {{mostly on}} Unisys computer systems.|$|R
50|$|OmniMark is a <b>fourth-generation</b> {{programming}} <b>language</b> used {{mostly in}} the publishing industry. It is a proprietary software product of Stilo International.|$|R
40|$|Statistical {{analyses}} {{are carried out}} and reported on in abundance at the RIVM. There {{is a lot of}} good software on the market for executing these analyses reliably. For good communication between statisticians and scientific researchers, who use statistical applications in their research, RIVM needs only a few standard packages. This also has financial advantages. For example, S-PLUS has been used since 1992 as the standard package in Division 5 and moreover in Division 2, as rapid development software combined with SAS. On 1 January of this year RIVM took out a completely new licence for S-PLUS, making the package available for Divisions 2, 3 / 4 and 5 at no extra costs, including the use of all the modules and the use of S-PLUS at home. This new situation {{was one of the reasons}} for preparing this document. The first three chapters, written for potential users and management, e. g. laboratory and department heads, IT heads in the Division 5 departments, and managers of interdepartmental projects like the Environmental Balance and Outlooks. These chapters deal with the broad application of S-PLUS as statistical and graphics package, and as a <b>fourth-generation</b> <b>language.</b> The overview of several S-PLUS applications within RIVM speaks for itself. The other chapters, providing a wealth of substantial information, are written especially for users. Included here are the installation instructions of S-PLUS for both home use and use at the RIVM. The report closes with four elaborate appendixes incorporating two introductory courses on the S-PLUS command language and the S-PLUS graphics user interface. This report is thus intended to promote the standard use of S-PLUS for good-quality, reproducible statistical analyses and optimal communication between researchers...|$|E
40|$|A Doctoral Thesis. Submitted in partial {{fulfillment}} of the requirements for the award of Doctor of Philosophy of Loughborough University. In the 1990 s the capital investment, the standards of technology involved, the complexity of co-ordination, the quality requirements and the speed of construction projects in the world, have been substantially increased in {{both public and private}} sectors. These changes have forced contractors to increase their efficiency of management, not only to satisfy their business and commercial requirements but also for their survival in the industry due to the highly competitive environment. The continuing development of information technology has a great impact on all disciplines including construction management, and good information is increasingly important to construction managers. The research described in the thesis is based on the construction industry of Hong Kong, which is a magnet for all the best construction contractors and professionals in the world, due to the sale of the projects involved and the commercial systems provided. However, the principles generated by this research are of more general application in the management of construction projects. The main outcomes of the research are as follows: a) The existing practices and the impacts of the new developments in the construction projects of Hong Kong have been examined. b) A model of construction management practice in Hong Kong has been developed by taking into consideration previous researches, published literatures, current practices and new impacts. c) A comprehensive computer system using a <b>fourth-generation</b> <b>language</b> has been developed. The system involves two levels of operation including the management practices of head office and construction sites. The functions provided by the system include estimation and quality assurance at head office level. The site level systems provide the functions of information control, cost control, materials control and progress control. The integration of information flow among these functions is the main consideration {{in the development of the}} system. The system has been put into field tested using the construction projects of Hong Kong as described in the thesis, and has been found to be effective...|$|E
50|$|Examples of {{end-user}} computing are systems built using <b>fourth-generation</b> programming <b>languages,</b> such as MAPPER or SQL, {{or one of}} the fifth-generation programming languages, such as ICAD.|$|R
40|$|AbstractâProductivity {{has been}} one of the major {{concerns}} with the increasingly high cost of software development. Choosing the right development language with high productivity is one approach to reduce development costs. Working on the large database with 4106 projects ever developed, we found the factors significant to productivity. After the removal of the effects of other factors on productivity, we compare the productivity differences of the ten general development programs. The study supports the fact that <b>fourth-generation</b> <b>languages</b> are more productive than thirdgeneration languages...|$|R
40|$|The {{increasing}} use {{of computer}} aided software engineering (CASE) tools, <b>fourth-generation</b> <b>languages</b> (4 GLs) and other similar development automation techniques, has reduced the impact of implementation methods and individual ability on development task difficulty. It has therefore been suggested that measures derived from software specification representations may provide a consistent basis for relatively accurate estimation of subsequent development attributes. To this end, this paper describes {{the development of a}} functional complexity analysis scheme that is applicable to system specification products, rather than to the traditional products of the lower-level design and construction phases...|$|R
5000|$|PowerHouse is a trademarked {{name for}} a byte-compiled <b>fourth-generation</b> {{programming}} <b>language</b> (or 4GL) originally produced by Quasar Corporation (later renamed Cognos Incorporated) for the Hewlett-Packard HP3000 mini-computer. It was initially composed of five components: ...|$|R
50|$|OpenROAD is a <b>fourth-generation</b> {{programming}} <b>language</b> (4GL) {{which include}} a suite of development tools, with built-in Integrated development environment (IDE) (Written in OpenROAD), Code Repository, allowing applications to be developed and deployed on Microsoft and UNIX/LINUX platforms.|$|R
50|$|CBL {{expanded}} its software development arm, introducing User-11, the first 4GL (<b>Fourth-generation</b> programming <b>language)</b> seen in New Zealand in 1981. The company {{also set up}} a data communications network and a New Zealand-wide timesharing service in the early 1980s.|$|R
5000|$|MARK IV is a <b>Fourth-generation</b> {{programming}} <b>language</b> {{that was}} created by Informatics, Inc. in the 1960s. Informatics took advantage of IBM's decision to unbundle their software; MARK IV was the first [...] "software product to have cumulative sales of $10 million".|$|R
50|$|Martin was {{an expert}} in the field of systems design, {{software}} development methodology, information engineering and computer-aided software engineering. He {{was one of the first}} to promote <b>fourth-generation</b> programming <b>languages,</b> and was one of the main developers of the Rapid Application Development methodology.|$|R
50|$|Informatics {{was one of}} {{the first}} {{established}} software and services companies. It developed the MARK-IV <b>Fourth-generation</b> programming <b>language</b> in the 1960s. MARK-IV became the first software package exceeding $1 million in revenue, after IBM was forced in 1969 to unbundle software from their hardware.|$|R
50|$|Low-code {{development}} platforms {{trace their}} roots back to <b>fourth-generation</b> programming <b>language</b> and {{rapid application development}} tools of the 1990s and early 2000s. Similar to these predecessor development environments, Low-code development platforms {{are based on the}} principles of model-driven design, automatic code generation, and visual programming.|$|R
5000|$|Aims {{to produce}} high quality systems quickly, {{primarily}} via iterative Prototyping (at any stage of development), active user involvement, and computerized development tools. These tools may include Graphical User Interface (GUI) builders, Computer Aided Software Engineering (CASE) tools, Database Management Systems (DBMS), <b>fourth-generation</b> programming <b>languages,</b> code generators, and object-oriented techniques.|$|R
50|$|GAMS was {{the first}} {{algebraic}} modeling language (AML) and is formally similar to commonly used <b>fourth-generation</b> programming <b>languages.</b> GAMS contains an integrated development environment (IDE) and is connected {{to a group of}} third-party optimization solvers. Among these solvers are BARON, COIN-OR solvers, CONOPT, CPLEX, DICOPT, Gurobi, MOSEK, SNOPT, SULUM, and XPRESS.|$|R
50|$|<b>Fourth-generation</b> {{programming}} <b>languages</b> (4GL) are {{a computer}} programming languages which aim {{to provide a}} higher level of abstraction of the internal computer hardware details than 3GLs. Fifth generation programming languages (5GL) are programming languages based on solving problems using constraints given to the program, rather than using an algorithm written by a programmer.|$|R
50|$|MATLAB (matrix laboratory) is a multi-paradigm {{numerical}} {{computing environment}} and <b>fourth-generation</b> programming <b>language.</b> A proprietary programming language developed by MathWorks, MATLAB allows matrix manipulations, plotting of functions and data, implementation of algorithms, creation of user interfaces, and interfacing with programs written in other languages, including C, C++, C#, Java, Fortran and Python.|$|R
50|$|<b>Fourth-generation</b> {{programming}} <b>languages</b> (4GL) and fifth-generation programming languages (5GL) do {{not have}} a simple one-to-many correspondence from high-to-low level primitives. There are some elements of interpreted language primitives embodied in 4GL and 5GL specifications, but the approach to the original problem is less a procedural language construct and are more oriented toward problem solving and systems engineering.|$|R
40|$|Is Ada Good for My Business? With {{product lines}} {{as diverse as}} Software through Pictures and NOMAD, Aonix has a long track record in {{providing}} software tools for third-generation and <b>fourth-generation</b> programming <b>languages</b> such as C, C++, Java, Smalltalk, and IDL. However, because Aonix is also {{a pioneer in the}} Ada compiler business, we are ofte...|$|R
40|$|Piccola is a {{language}} for composing applications from software components. It {{has a small}} syntax and a minimal set of features needed for specifying different styles of software composition. The core features of Piccola are communicating agents, which perform computations, and forms, which are the communicated values. Forms are a special notion of extensible, immutable records. Forms and agents allow us to unify components, static and dynamic contexts and arguments for invoking services. Through a series of examples, we present a tour of Piccola, illustrating how forms and agents suffice to express a variety of compositional abstractions and styles. 1. Introduction Piccola {{is intended to be}} a general-purpose language for software composition. Whereas existing programming languages appear to be suitable for implementing software components, and many scripting <b>languages</b> and <b>fourth-generation</b> <b>languages</b> have been developed {{to address the needs of}} particular component models, there has [...] ...|$|R
40|$|This paper {{presents}} an empirical study analysing {{the relationship between}} a set of metrics for <b>FourthâGeneration</b> <b>Languages</b> (4 GL) programs and their maintainability. An analysis has been made using historical data of several industrial projects and three different approaches: the first one relates metrics and maintainability based on techniques of descriptive statistics, and the other two are based on Data Mining techniques. A discussion on the results obtained with the three techniques is also presented, as well as a set of equations and rules for predicting the maintenance effort in this kind of programs. Finally, we have done experiments about the prediction accuracy of these methods by using new unseen data, which were not used to build the knowledge model. The results were satisfactory as the application of each technique separately provides useful perspective for the manager {{in order to get a}} complementary insight from data...|$|R
50|$|SheerPower 4GL is a <b>Fourth-generation</b> {{programming}} <b>language</b> {{developed by}} Touch Technologies, Inc http://www.ttinet.com. SheerPower 4GL {{is the result}} of porting Touch Technologies' Intouch 4GL programming language that runson OpenVMS (for DEC Alpha and VAX computers) to Windows, launching in 2000.Downloads are free from the official SheerPower 4GL website.http://www.sp4gl.com SheerPower 4GL is similar to the BASIC programming language, and is easy to learn.|$|R
50|$|DataFlex is {{produced}} by Data Access Worldwide located in Miami. The company was founded in 1976 and called Data Access Corporation.The product was available by at least 1982.It started as a relatively early example of a fully fledged and commercially used <b>fourth-generation</b> programming <b>language</b> (4GL). In its early forms, DataFlex was available for CP/M, MS-DOS, TurboDOS, Novell NetWare, OS/2, Unix, VAX/VMS and IBM AIX operating systems.|$|R
50|$|Syclo {{offers the}} Agentry mobile platform, an {{extensible}} framework based on <b>fourth-generation</b> programming <b>language</b> for developing, deploying, and managing a wireless business application architecture. Agentry also includes {{mobile device management}} capabilities embedded into its application platform. Syclo's SMART Mobile Suite of workflow-specific products, a software suite built on the Agentry platform, has been implemented by more than 750 customers in 35 countries and 20 different industries.|$|R
5000|$|Forth is {{so named}} because in 1968 [...] "the file holding the {{interpreter}} was labeled FOURTH, for 4th (next) generation softwareâbut the IBM 1130 operating system restricted file names to 5 characters." [...] Moore saw Forth as a successor to compile-link-go third-generation programming languages, or software for [...] "fourth generation" [...] hardware, not a <b>fourth-generation</b> programming <b>language</b> as the term {{has come to be}} used.|$|R
