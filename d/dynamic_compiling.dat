0|26|Public
5000|$|... (1984). A Vision of <b>Dynamic</b> Space. <b>Compiled</b> by Lisa Ullmann. London: The Falmer Press.|$|R
40|$|Dynamic {{compilation}} enables optimizations {{based on}} the values of invariant data computed at run-time. Using the values of these runtime constants, a dynamic compiler can eliminate their memory loads, perform constant propagation and folding, remove branches they determine, and fully unroll loops they bound. However, the performance benefits of the more efficient, dynamically-compiled code are offset by the run-time cost of the <b>dynamic</b> <b>compile.</b> Our approach to dynamic compilation strives for both fast dynamic compilation and high-quality dynamically-compiled code: the programmer annotates regions of the programs that should be compiled dynamically; a static, optimizing compiler automatically produces pre-optimized machine-code templates, using a pair of dataflow analyses that identify which variables will be constant at run-time; and a simple, dynamic compiler copies the templates, patching in the computed values of the run-time constants, to produce optimized, executable code. Our work targets general-purpose, imperative programming languages, initially C. Initial experiments applying dynamic compilation to C programs have produced speedups ranging from 1. 2 to 1. 8...|$|R
40|$|Instruction-set {{simulators}} {{are critical}} tools for the exploration and validation of new processor architectures. Due {{to the increasing}} complexity of architectures and time-to-market pressure, performance {{is the most important}} feature of an instruction-set simulator. Interpretive simulators are flexible but slow, whereas compiled simulators deliver speed at the cost of flexibility and compilation overhead. This paper presents a hybrid instruction-set compiled simulation (HISCS) technique for generation of fast instruction-set simulators that combines the benefit of both compiled and interpretive simulation. This paper makes two important contributions: i) it improves the interpretive simulation performance by applying compiled simulation at the instruction level using a novel template customization technique to generate optimized decoded instructions during compile time; and ii) it reduces the compile time overhead by combining the benefits of both static and <b>dynamic</b> <b>compiled</b> simulation. Our experimental results using two contemporary processors (ARM 7 and SPARC) demonstrate an order-of-magnitude reduction in compilation time as well as 70 % performance improvement on average over the best known published result in instruction-set simulation...|$|R
50|$|JobServer {{supports}} the soafaces developer API for modeling, configuring and deploying jobs. Jobs {{are composed of}} Tasklets and Weblets. Tasklets implement the backend processing of a job and Weblets implement the optional GUI customization for a job. A job can be composed {{of one or more}} Tasklets in a workflow chain. The GUI developer Weblet API, within soafaces, depends on GWT to support front-end HTML web application development. See Weblets implement a unique features with GWT, by supporting <b>dynamic</b> GWT <b>compiling</b> of java source code into javascript, similar to how JSPs are compiled into Java.|$|R
40|$|Traditionally, dynamically-typed {{languages}} {{have been}} difficult to compile efficiently. This thesis explores dynamic compilation, a recently developed technique for compiling dynamically-typed languages. A <b>dynamic</b> compiler <b>compiles</b> and optimizes programs as they execute, using information collected from the running program to perform optimizations that are impossible to perform in a conventional batch compiler. To explore these techniques we developed SKI, a dynamic compiler for Scheme. Tests on programs compiled by SKI, have shown that dynamic compilation techniques can give a substantial increase in the performance Scheme programs. In some cases they can increase performance by up to 400 %...|$|R
40|$|Microtremor {{measurements}} {{at seven}} elementary schools {{were carried out}} in order to <b>compile</b> <b>dynamic</b> characteristics data of school buildings in Fukui City. The {{results showed that the}} primary order natural frequencies of span direction were 3. 2 - 4. 1 Hz and those of longitudinal direction were 3. 6 - 4. 2 Hz. The ratio of f to f_ 0 (f : natural frequency of interaction system, f_ 0 : natural frequency of upper structure system) were 0. 64 - 1. 0. Predominant frequencies of the site ground were also obtained...|$|R
50|$|AFGROW {{also has}} new plug-in crack {{geometry}} interface that allows AFGROW {{to interface with}} any structural analysis program capable of calculating stress intensity factors (K) in the Windows environment. Users may create their own stress intensity solutions by writing and <b>compiling</b> <b>dynamic</b> link libraries (DLLs) using relatively simple codes. This includes the ability to animate the crack growth as is done in all other native AFGROW solutions. This interface also {{makes it possible for}} FE analysis software (for example, StressCheck) to feed AFGROW three-dimensional based stress intensity information throughout the crack life prediction process, allowing for a tremendous amount of analytical flexibility.|$|R
40|$|Abstract. In a {{deformation}} {{progress of}} a polyvinyl chloride sheet, the coupled deforming heat is recorded by a thermal infrared imager. In {{order to have}} a real-time study for the variation regularity of the deforming temperature field distribution, all infrared images are imported into MATLAB software as digital data through a <b>dynamic</b> link routine <b>compiled</b> based on MATLAB and Windows. By utilizing a gradient-based transition region extraction algorithm and an interpolation algorithm, the high-resolution recognized and reconstructed infrared images are obtained from original blurring images recorded in thermal infrared imager. The variations of temperature distribution are studied combining with the test data based on MATLAB...|$|R
50|$|Overhead: Because stored {{procedure}} {{statements are}} stored {{directly in the}} database, they may remove {{all or part of}} the compiling overhead that is typically needed in situations where software applications send inline (dynamic) SQL queries to a database. (However, most database systems implement statement caches and other methods to avoid repetitively <b>compiling</b> <b>dynamic</b> SQL statements.) Also, while they avoid some pre-compiled SQL, statements add to the complexity of creating an optimal execution plan because not all arguments of the SQL statement are supplied at compile time. Depending on the specific database implementation and configuration, mixed performance results will be seen from stored procedures versus generic queries or user defined functions.|$|R
40|$|Inference in {{graphical}} models {{has emerged}} as a promising technique for planning. A recent approach to decision-theoretic planning in relational domains uses forward inference in <b>dynamic</b> Bayesian networks <b>compiled</b> from learned probabilistic relational rules. Inspired by work in non-relational domains with small state spaces, we derive a backpropagation method for such nets in relational domains starting from a goal state mixture distribution. We combine this with forward reasoning in a bidirectional two-filter approach. We perform experiments in a complex 3 D simulated desktop environment with an articulated manipulator and realistic physics. Empirical results show that bidirectional probabilistic reasoning can lead to more efficient and accurate planning in comparison to pure forward reasoning. 1...|$|R
40|$|We {{present a}} method to assess the {{reliability}} of local structure prediction from sequence. We introduce a greedy algorithm for filtering and enrichment of <b>dynamic</b> fragment libraries, <b>compiled</b> with remote-homology detection methods such as HHfrag. After filtering false hits at each target position, we reduce the fragment library to a minimal set of representative fragments, which are guaranteed to have correct local structure in regions of detectable conservation. We demonstrate that the location of conserved motifs in a protein sequence can be predicted by examining the recurrence and structural homogeneity of detected fragments. The resulting confidence score correlates with the local RMSD of the representative fragments and allows us to predict torsion angles from sequence with better accuracy compared to existing machine learning methods...|$|R
40|$|Tree parsing as {{supported}} by code generator generators like BEG, burg, iburg, lburg and ml-burg {{is a popular}} instruction selection method. There are two existing approaches for implementing tree parsing: dynamic programming, and tree-parsing automata; each approach has its advantages and disadvantages. We propose a new implementation approach that combines the advantages of both existing approaches: we start out with <b>dynamic</b> programming at <b>compile</b> time, but at every step we generate a state for a tree-parsing automaton, which is used the next time a tree matching the state is found, turning the instruction selector into a fast tree-parsing automaton. We have implemented this approach in the Gforth code generator. The implementation required little effort and reduced the startup time of Gforth by up to a factor of 2. 5...|$|R
40|$|While all [...] optical {{networks}} offer {{large bandwidth}} for transferring data, the control mechanisms to dynamically establish all [...] optical paths incur large overhead. In this paper, we consider adapting all [...] optical multiplexed networks in multiprocessor or multicomputer environment by using compiled communication {{as an alternative}} to <b>dynamic</b> network control. <b>Compiled</b> communication eliminates the runtime overhead by managing network resources statically. Thus, it can employ complex off [...] line algorithms to improve resource utilization. We studied several off [...] line connection scheduling algorithms for minimizing the multiplexing degree required to satisfy communication requests. The performance of compiled communication is evaluated and compared with that of dynamically controlled communication for static communications in a number of application programs. Our results show that compiled communication out [...] performs dynamic communication to a large degree. Since most of the communication patter [...] ...|$|R
40|$|This {{document}} {{describes the}} work that consists of four main parts. Analysis of UML and related modeling standards was performed in the first – analytical – part. UML editors that are popular in the present market and their advantages were reviewed. The possibilities of making business in this area were discussed. The functionality, architectural solutions and architecture quality criteria of the developed system were reviewed {{in the second part}} of the work. Researches of possibilities of code and library generating from UML models are described in the third part of the work. The proposal to apply OCL expressions for element property validation was offered. The substantiation of realization of the system for element property validation by OCL restrictions is described in the last part of the work. The experiment that compares characteristics of the <b>compiled</b> <b>dynamic</b> class libraries speed and the generated dynamic class libraries speed is presented...|$|R
40|$|Sparse Arrays {{provide a}} new way to reduce the {{overhead}} of message lookup by providing constant time access with moderate space consumption. For some architectures, such as the SPARC processor, the Sparse Array technique gives an approximate speedup of 50 % over existing message lookup techniques. Sparse Arrays are especially useful for <b>compiled</b> <b>dynamic</b> languages like Objective-C, since such cannot take advantage of runtime compilation like in semi-compiled systems like Self and Smalltalk. However, it could easily be embedded in such systems to improve performance. This article describes the sparse array used as a data structure for dispatch tables in the GNU Objective-C runtime system. 1 Introduction It is a general problem in dynamically typed object oriented languages that the message lookup mechanism is a bottleneck. Implementations of dynamically typed object oriented languages have been using various caching techniques for reducing the overhead involved in message lookup. Sparse a [...] ...|$|R
40|$|<b>Dynamic</b> binary translators <b>compile</b> {{machine code}} {{from a source}} {{architecture}} to a target architecture at run time. Due to the hard time constraints of just-in-time compilation only highly efficient optimization algorithms can be employed. Common problems are an insufficient number of registers on the target architecture and the different handling of condition codes in source and target architecture. Without optimizations useless stores and computations are generated by the dynamic binary translator and cause significant performance losses. In order to eliminate these useless operations, a very fast liveness analysis is required. We present a dynamic liveness analysis algorithm that trades precision for fast execution and conducted experiments with the SpecInt 95 benchmark suite using our PowerPC to Alpha translator. The optimizations {{reduced the number of}} stores by about 50 percent. This resulted in a speed-up of 10 to 30 percent depending on the target machine. The dynamic liveness analysis results are very close to the most precise solution. ...|$|R
40|$|Dynamic {{languages}} {{are becoming increasingly}} popular for different software development scenarios such as rapid prototyping because of the flexibility and agile interactive development they offer. The benefits of dynamic {{languages are}}, however, counteracted by many limitations produced {{by the lack of}} static typing. In order to obtain the benefits of both approaches, some programming languages offer a hybrid dynamic and static type system. The existing IDEs for these hybrid typing languages do not provide any type-based feature when dynamic typing is used, lacking important IDE facilities offered for statically typed code. We have implemented a constraint-based type inference system that gathers type information of <b>dynamic</b> references at <b>compile</b> time. Using this type information, we have extended a professional IDE to offer those type-based features missed for dynamically typed code. Following the Separation of Concerns principle, the IDE has also been customized to facilitate the conversion of dynamically typed code into statically typed one, and vice versa...|$|R
50|$|VMware Workstation, Server, and ESX {{take a more}} {{optimized}} path {{to running}} target operating systems on the host than that of emulators (such as Bochs) which simulate the function of each CPU instruction on the target machine one-by-one, or that of <b>dynamic</b> recompilation which <b>compiles</b> blocks of machine-instructions {{the first time they}} execute, and then uses the translated code directly when the code runs subsequently (Microsoft Virtual PC for macOS takes this approach). VMware software does not emulate an instruction set for different hardware not physically present. This significantly boosts performance, but can cause problems when moving virtual machine guests between hardware hosts using different instruction sets (such as found in 64-bit Intel and AMD CPUs), or between hardware hosts with a differing number of CPUs. Software that is CPU agnostic can usually survive such a transition, unless it is agnostic by forking at startup, in which case, the software or the guest OS must be stopped before moving it, then restarted after the move.|$|R
40|$|Software updates are {{a fact of}} {{life which}} means {{updating}} to add new some features and fix some bugs. Current software update methodology is stop/restart. However, many system would prefer no-line upgrades in lien of having to stop and restart the system every time it must be patched. Dynamic software updating (DSU) address such difficulty by update a running program with new code and data on-the-fly. DSU is appealing compared to other approaches for on-line upgrades because it is quite general and on need for redundant hardware or special purpose software architectures. The challenge for making DSU practical is that DSU should be flexible, and yet safe, efficient, and easy to use. In this paper, we present Ginseng, a DSU implementation which can compile C programs specially to support <b>dynamic</b> updates. We <b>compile</b> programs so that they can not only be dynamically patched in the same time performs a series of safety analysis to prove type-safety of update while guaranteeing that date is kept up-to-date, but also generate most of an updat...|$|R
40|$|AbstractIn theory, the {{expressive}} power of an aspect language should {{be independent of}} the aspect deployment approach, whether it is static or dynamic weaving. However, {{in the area of}} strictly statically typed and compiled languages, such as C or C++, {{there seems to be a}} feedback from the weaver implementation to the language level: dynamic aspect languages offer noticeable fewer features than their static counterparts. Especially means for generic aspect implementations are missing, as they are very difficult to implement in dynamic weavers. This hinders reusability of aspects and the application of AOP to scenarios where both, runtime and compiletime adaptation is required. Our solution to overcome these limitations is based on a novel combination of static and dynamic weaving techniques, which facilitates the support of typical static language features, such as generic advice, in <b>dynamic</b> weavers for <b>compiled</b> languages. In our implementation, the same AspectC++ aspect code can now be woven statically or dynamically into the Squid web proxy, providing flexibility and best of bread for many AOP-based adaptation scenarios...|$|R
40|$|In this paper, a {{new method}} for an {{improved}} image password lock system by tracing position information of the pupil is described. The present technology relates to an efficient auto-detecting function, and in particular, to an image password lock system, which {{can provide the}} benefits of a novel password input mode without any contact. In this system, a PC camera device detects a movable target object to read a dynamic eye image data. Moreover, the dynamic eye image data has a predetermined shooting range set to be a whole-region image, and the whole-region image has a central region and a plurality of specific password regions. A target eye image is displayed by a display device, and then processed by an image processing device, thereby calculating a center coordinate point of the target eye image in the <b>dynamic</b> image data, <b>compiling</b> a password constituted by a movement position of the target object image, displaying the password, and validating the password. Therefore, {{the benefits of a}} novel password input mode without any contact, an efficient anti-theft function, are provided...|$|R
40|$|Wheel loaders in the V-type {{loading cycle}} are {{characterized}} by complicated loading conditions, nonlinear power-train system, and time-variable engine power distribution. Therefore, {{it is difficult to}} predict the fuel consumption of wheel loaders in the V-type loading cycle. The static matching methods cannot provide fuel consumption prediction for the loading cycle. In this paper, the prediction method and model of the fuel consumption for wheel loaders in the V-type loading cycle were proposed. Firstly, the hydraulic system data were tested when a wheel loader loaded three different materials in a typical V-type loading cycle. Secondly, the tested data were filtered by the 8 th-order Butterworth filter and the dimensionless power deduction equations of hydraulic power system for loading three different materials were obtained by Gaussian and linear fitting based on the filtered data in the loading cycle. Finally, fuel consumption was obtained with the <b>compiling</b> <b>dynamic</b> calculation program as well as input parameters of tested vehicle speed, throttle parameter, and the dimensionless equation. The simulation results agreed well with experiment results. Dynamic calculation program is applicable to calculate loading economy and can provide academic guidance for wheel loader’s design and optimization...|$|R
40|$|We {{describe}} an approach for <b>compiling</b> <b>dynamic</b> preferences into logic programs under the answer set semantics. An ordered logic program is an extended logic {{program in which}} rules are named by unique terms, and in which preferences among rules are given {{by a set of}} atoms of the form s ≺ t where s and t are names. An ordered logic program is transformed into a second, regular, extended logic program wherein the preferences are respected, in that the answer sets obtained in the transformed theory correspond with the preferred answer sets of the original theory. Our approach allows the specification of static orderings (in which preferences are external to a logic program), as well as dynamic orderings (in which preferences can appear within a program), and orderings on sets of rules. In large part then, we are interested in describing a general methodology for uniformly incorporating preference information in a logic program. Since the result of our translation is an extended logic program, we can make use of existing implementations, such as dlv and smodels. To this end, we have developed a compiler, available on the web, as a front-end for these programming systems...|$|R
40|$|In {{this paper}} a new {{generation}} line-focusing solar plants coupled to a s-CO 2 Brayton power cycles are studied. These innovative CSP will increase the plant energy efficiency, and subsequently optimizing the SF effective aperture area and SF investment cost for a fixed power output. Two SF configurations were assessed: the Configuration 1 with a condenser between the SF and the Balance Of Plant (BOP), for Turbine Inlet Temperatures (TIT) up to 400 oC, and the Configuration 2, for higher TIT up to 550 oC, with steam compressors in SF for pressure drop compensation. Both alternatives are interchangeable in the same CSP, and boosting with a backing boiler to warranty the plant performance. In relation to the BOP three configurations were studied the Recompression cycle (RC), the Partial Cooling with Recompression cycle (PCRC), and the Recompression with Main Compression Intercooling cycle (RCMCI), all these solutions without ReHeating. The methodology considered the thesis developed by Dyreby [1] as starting point, fixing the Brayton cycles recuperator conductance (UA), and optimizing the power cycles performance {{by means of the}} SUBPLEX [2] algorithm. The cycles optimal operating parameters were calculated with a “Windows” desktop application, called Supercritical_CSP (SCSP), calling the supercritical fluids properties database REFPROP, developed in C#, calling Fortran <b>compiled</b> <b>dynamic</b> linked libraries. The results obtained from the Brayton cycles optimizations were exported to Thermoflow [3] for SF simulation and design. The mathematical algorithms UOBYQA [4] and NEWOUA [5] were also integrated in the SCSP tool, for validating the SUBPLEX results. The HTF studied was Direct Steam Generation (DSG) in the SF, and the solar collectors simulated were PTC and LF. The plant net power output, the net efficiency, the SF effective aperture, were computed at DesignPoint. As main conclusion obtained it is confirmed minimum Pinch Point in heat exchangers is the main constrain, reaching a threshold in the net plant efficiency, when increasing the Low Temperatura Recuperator (LTR) and High Temperature Recuperator (HT) conductances UA. The shell-tubes heat exchanger types are the most suitable solution to couple the Balance Of Plant (BOP) and the SF. The target of future works will be aligned with the analysis of innovative linear solar collectors, as the Norwich Technologies company solution, for getting higher TIT as provided by Central Tower CSP. The s-CO 2 BOP equipments detail design and detailed cost estimation are pending items under industrial development. Finally, the annual plant performance calculation, considering the variable ambient temperature and Direct Normal Irradiance (DNI), and the TES integration, are future researching works for calculating the Levelized Cost Of Energy (LCOE) in this new generation line-focusing solar power plants...|$|R
40|$|Power {{consumption}} {{is the most}} challenging design constraint in the future VLSI circuit design. In this research work, we propose novel low power techniques on two different areas in VLSI circuit design. We propose a low power bus encoding scheme for the nanometer scale instruction bus and a low power routing methodology for the network-on-chip design. In very deep sub-micron designs, cross coupling capacitances become the dominant factor of the total bus capacitance loading and {{have a significant impact}} on the power consumption. Therefore, in the first part of this thesis, we will present two re-configurable bus encoding schemes, which are based on the correlation among the bit lines, to reduce the power consumption due to the cross coupling switching of the instruction buses. The instruction word is encoded by flipping and reordering the bit lines during compilation time to reduce the total switching capacitances. A crossbar is used to map back the data to the original instruction code before sending to the instruction decoder. The reordering can be re-configured during run-time by using different configurations of the crossbar. We propose two types of re-configuration, static and dynamic re-configuration. Static coding uses a fix flipping and re-configuring pattern after the corresponding program is <b>compiled.</b> <b>Dynamic</b> coding allows different re-configuring patterns during program execution. Experimental results show that by using the proposed schemes, significant energy reduction, 18 - 23 %, can be achieved. Comparisons with existing bit lines reordering encoding scheme have also been made and on average more than 15 % reduction can be obtained using our method. In the second part of this thesis, we propose a routing algorithm which assigns a dedicated path for each communication task in the tile-based Network-On-Chip (NOC). The optimization goal is to minimize the total communication energy. In our proposed algorithm, adaptive voltage swing is assigned for each link among the routing path so that power can be reduced, and at the same time, the start time and end time of each communication task is scheduled. During the routing assignment, the performance constraint must be satisfied and the maximal bandwidth of the link cannot be exceeded. In order to solve this challenging routing problem, we divide the routing algorithm into two steps. The first step is to assign the start time, end time and voltage swing for each communication task and the second step is to find a low power routing path in the tile-based NOC. The scheduling of the start time and the end time, and the voltage swing assignment problem is formulated as a non-linear-programming (NLP) problem. The path-finding problem is formulated as a graph optimization problem. Experimental results show that by using this proposed routing algorithm, an average 62 % energy reduction is achieved for random benchmarks and 57 % energy reduction is achieved for a real-life multimedia application comparing with the original communication energy...|$|R

