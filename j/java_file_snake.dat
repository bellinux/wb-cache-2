0|338|Public
50|$|Wart <b>snakes,</b> <b>Java</b> wart <b>snakes,</b> <b>file</b> <b>snakes,</b> {{elephant}} trunk snakes, dogface snakes.|$|R
50|$|Mehelya capensis, {{commonly}} known as the Cape <b>file</b> <b>snake,</b> is a species of large, non-venomous snake endemic to Africa, belonging to the family Colubridae. It is one of several species in the genus Mehelya, all of which are considered varieties of <b>file</b> <b>snake.</b> <b>File</b> <b>snakes</b> are set apart by their unusual scale patterns.|$|R
5000|$|Gonionotophis guirali (Mocquard, 1887) - Mocquard's <b>file</b> <b>snake</b> ...|$|R
5000|$|Gonionotophis stenopthalmus (Mocquard, 1887) - small-eyed <b>file</b> <b>snake</b> ...|$|R
5000|$|Gonionotophis gabouensis (Trape & Mané, 2005) - Gabou <b>file</b> <b>snake</b> ...|$|R
50|$|Also, Vernay is commemorated in the {{scientific}} name of the Angolan <b>file</b> <b>snake,</b> Mehelya vernayi.|$|R
50|$|Gonionotophis is a genus of {{colubrid}} snakes {{also known as}} African ground <b>snakes</b> and <b>file</b> <b>snakes.</b>|$|R
5000|$|JMLUnit, {{a tool to}} {{generate}} files for running JUnit tests on JML annotated <b>Java</b> <b>files.</b>|$|R
5000|$|A <b>Java</b> class <b>file</b> is a file (with the [...]class {{filename}} extension) containing Java bytecode {{that can}} be executed on the Java Virtual Machine (JVM). A <b>Java</b> class <b>file</b> is produced by a Java compiler from Java programming language source <b>files</b> (.<b>java</b> <b>files)</b> containing <b>Java</b> classes. If a source file {{has more than one}} class, each class is compiled into a separate class file.|$|R
40|$|The aim of {{this thesis}} is to design a web base system which {{provides}} functionality of comparison between two <b>java</b> <b>files</b> {{on the basis of}} point-to information (P 2 I). User will upload <b>Java</b> <b>files</b> and analysis of <b>Java</b> <b>files</b> called point-to analysis (P 2 A). System will store the files in the file system for reference and download in later time. System will extract the information called P 2 I from P 2 A and it will store that information in the database. Database should be flexible to accommodate the changes in P 2 A file and system should be able to extract the P 2 I and store it in database with minimum support of system administrator. ...|$|R
40|$|Dataset {{and source}} code for ICSME 2017 paper “Supervised vs Unsupervised Models: A Holistic Look at Effort-Aware Just-in-Time Defect Prediction” There are four {{different}} {{models in the}} paper (i. e., EALR, LT, CBS and OneWay). Each model was implemented in a single <b>Java</b> <b>file</b> in the model package. To reproduce the experiment results of each model in the paper, just run the main method in the corresponding <b>Java</b> <b>file...</b>|$|R
50|$|Mehelya is a genus of {{colubrid}} snakes from Africa. They are collectively called <b>file</b> <b>snakes</b> {{due to their}} unusual scalation. They are not venomous.|$|R
5000|$|... cscope {{was created}} to search content within C files, {{but it can also}} be used (with some limits) for C++ and <b>Java</b> <b>files.</b>|$|R
50|$|<b>File</b> <b>snakes</b> {{are found}} {{throughout}} much of sub-Saharan Africa, from the Cape of South Africa through Zimbabwe and Botswana to the Democratic Republic of the Congo and further.|$|R
5000|$|... will compile all the <b>Java</b> <b>files,</b> run any tests, and package the {{deliverable}} {{code and}} resources into [...] (assuming the artifactId is my-app and the version is 1.0.) ...|$|R
50|$|Though {{it is not}} venomous, the Cape <b>file</b> <b>snake</b> is {{a highly}} {{successful}} predator of other snakes, easily following a scent trail and apparently immune to all venom. It also preys on small vertebrates.|$|R
50|$|At {{the file}} system level a Magnolia module is a JAR, a <b>Java</b> <b>file</b> format used to package <b>Java</b> class <b>files</b> and {{resources}} (images, CSS, JavaScript) into one file. Deploying a Magnolia module involves copying the JAR <b>file</b> into the <b>Java</b> application server and restarting the Magnolia instance. Magnolia CMS recognizes the JAR file during the startup process and installs the module.|$|R
40|$|In {{this paper}} {{we present a}} case study about the {{clustering}} of maintenance activities applied on large software systems, from the complex networks perspective. We analyze several releases of two large Open Source Java software systems, using data extracted from Software Configuration Management systems and from Issue Tracking systems (ITS). We find that <b>Java</b> <b>files</b> affected by maintenance activity {{are likely to be}} connected with each other, forming interconnected clusters inside the software network associated to the software system. This means that <b>Java</b> <b>files</b> interested by the maintenance activities requested on ITS are likely to be connected each other through dependencies at the source code level. The information carried by the clusters of <b>Java</b> <b>files</b> may be used to improve strategies for large maintenance operations. Since the tendency to form clusters can vary across different systems, such analysis can also be a useful indicator of the impact of defects on source code files in different software systems...|$|R
50|$|Acrochordus javanicus, {{commonly}} known as the elephant trunk <b>snake</b> or Javan <b>file</b> <b>snake,</b> belongs to the family Acrochordidae which represents a group of primitive non-venomous aquatic snakes. It is also kept as an exotic pet.|$|R
50|$|There {{are also}} {{limitations}} in the script. Once the <b>Java</b> source <b>files</b> were compiled, {{they could not}} be decompiled. The mod creator had to either create their own code from scratch or use an existing third-party <b>Java</b> <b>file</b> from the game itself. Many mods for this game, especially 'VIP' mods, have their src folder removed so that users cannot edit the mod once it is published.|$|R
30|$|FM {{has been}} {{developed}} {{with the support of}} Java Emitter Templates (JET) in the Eclipse IDE (The Eclipse Foundation Eclipse Modeling Project). JET contains a framework that works as a generic generator and a compiler that translate templates into <b>Java</b> <b>files.</b> These templates are XML files, in which tags are instructions to generate an output based on input information and text is a fixed content inserted in the output independently of the input. The <b>Java</b> <b>files</b> originated from the JET templates reuse the JET framework to compose a domain-specific generator. Thus, FM depend on the JET plug-in to work.|$|R
40|$|We analyse {{the time}} {{evolution}} of two open source Java projects: Eclipse and Netbeans, both developed following agile practices, though {{to a different}} extent. Our study is centered on quality analysis of the systems, measured as defects absence, and its relation with software metrics evolution. The two projects are described through a software graph in which nodes are represented by <b>Java</b> <b>files</b> and edges describe the existing relation between nodes. We propose a metrics suite for <b>Java</b> <b>files</b> based on Chidamber and Kemerer suite, {{and use it to}} study software evolution and its relationship with bug count. Comment: 12 pages, 6 figures 2 table...|$|R
5000|$|OSWALD {{is capable}} of running <b>Java</b> code. <b>Java</b> <b>files</b> can be {{compiled}} on the device or delivered as compiled [...]class Files. A network access can be established through standard Sockets and ServerSockets, since the wireless interface supports IP.|$|R
40|$|<b>Java</b> class <b>files</b> {{are often}} {{distributed}} as jar files, which are collections of individually compressed class files (and possibility other files). Jar files are typically about 1 / 2 {{the size of}} the original class files due to compression. I have developed a wire-code format for collections of <b>Java</b> class <b>files.</b> This format is typically 1 / 2 to 1 / 5 of {{the size of the}} corresponding compressed jar file (1 / 4 to 1 / 10 the size of the original class files). 1 Introduction This paper examines techniques for compressing (collections of) <b>Java</b> class <b>files.</b> <b>Java</b> class <b>files</b> are generated by Java compilers, are the standard distribution medium for Java programs and are the usual way of providing programs to a Java virtual machine. <b>Java</b> class <b>files</b> contain a substantial amount of symbolic information. In the javac benchmark from SPEC JVM 98, only 21 % of the uncompressed class file size is actually taken up by the method bytecodes. One purpose of this is to avoid the need to recompile all Java classes th [...] ...|$|R
5000|$|EAR (enterprise archive) <b>files</b> provide {{composite}} <b>Java</b> archives {{that combine}} XML <b>files,</b> <b>Java</b> classes {{and other objects}} including JAR, WAR and RAR <b>Java</b> archive <b>files</b> for Enterprise Applications.|$|R
50|$|The Cape <b>file</b> <b>snake's</b> dorsal {{scales are}} {{strongly}} keeled with extensive pink-purple bare skin between the scales. Its colour is mostly grey to grey-brown, but occasionally dark olive to purple-brown. The prominent vertebral stripe is white to yellow, while the belly is ivory white to cream.|$|R
50|$|Like much of Kakadu, Anbangbang Billabong {{is home to}} a {{particularly}} large variety of bird life. The fluctating water levels draw waterfowl such as Magpie Geese, Pelicans, Darters, Spoonbills and Brolga. Other fauna known to frequent the billabong include Wallabies, <b>File</b> <b>Snakes,</b> Long-necked Turtles, Dingoes and Goannas.|$|R
50|$|JWS <b>files</b> contain <b>Java</b> class {{source code}} {{that should be}} exposed as Web service. The main {{difference}} between an ordinary <b>java</b> <b>file</b> and jws file is the file extension. Another difference is that jws files are deployed as source code and not compiled class files.|$|R
40|$|Extract] Marine {{reptiles}} are {{an important}} and well-documented component of the Great Barrier Reef (GBR), comprising a single species of crocodile (Crocodylidae), six species of marine turtles (five Chelonidae and one Dermochelyidae), at least 16 species of sea snakes (Hydrophiidae), one species of <b>file</b> <b>snake</b> (Acrochordidae) and one species of mangrove snake (Colubridae). Together these marine reptile species inhabit or traverse through each of the 70 bioregions identified by the Great Barrier Reef Marine Park Authority Representative Areas Program. These marine reptile species, {{with the exception of}} some of the snakes, have distributions that span large areas of the GBR. Crocodiles, marine turtles, <b>file</b> <b>snakes,</b> mangrove snakes and sea snakes all have life history traits, behaviour and physiology that are strongly influenced by temperature. All are ectothermic except for the leatherback turtle and thus their body temperatures fluctuate with environmental temperature. For egg laying species (crocodiles and turtles), the temperature of the nest determines incubation period, hatching success and hatching sex ratio. Thus as a group they are potentially vulnerable to climate change...|$|R
5000|$|...JAR (<b>file</b> format), <b>Java</b> {{installation}} <b>files</b> for mobile devices.|$|R
40|$|API for {{building}} researchobject. org RO bundles. Complies with RO bundle specification version 1. 0. This API {{is built on}} the <b>Java</b> 7 NIO <b>Files</b> and uses the <b>Java</b> 7 ZIP <b>file</b> provider to generate the RO Bundle. The class org. purl. wf 4 ever. robundle. Bundles complements the Java 7 <b>java.</b> nio. <b>Files</b> API with more specific helper methods to work with RO Bundles...|$|R
40|$|The Java VM {{has gone}} the “many complex instructions/large VM engine ” way. Each <b>Java</b> source <b>file</b> may contain several Java classes. The Java {{compiler}} compiles {{each of these}} classes to a single <b>Java</b> class <b>file.</b> The <b>Java</b> class <b>file</b> stores all necessary data regarding the class. There is a symbol table (called the Constant Pool) which stores strings, large literal integers and floats, names and of all fields and methods. Each method is compiled to Java bytecode, a stack VM format. The class file is (almost) isomorphic to the source. [2] 620 —Fall 2005 —...|$|R
5000|$|There are 10 basic {{sections}} to the <b>Java</b> Class <b>File</b> structure: ...|$|R
30|$|Event-B to Java {{translator}}: this translator {{is using}} syntax-directed translation to generate Java code from the context and concrete machine <b>files.</b> The generated <b>Java</b> <b>file</b> contains formal code {{in term of}} constants, variables, arrays, functions, and event; the generation approach is based on generating code from the Event-B specification using lexical and syntactic analysis.|$|R
40|$|This thesis {{focus on}} the {{structure}} of <b>Java</b> class <b>file</b> and disassembling bytecode instructions of Java language. Part of this thesis is a library, for disassembling <b>Java</b> class <b>files.</b> With this library one can explore the structure of a disassembled class file. Another part is a graphical application, which shows how to work with library...|$|R
50|$|Most valid <b>Java</b> <b>files</b> {{are also}} valid Groovy files. Although the two {{languages}} are similar, Groovy code {{can be more}} compact, {{because it does not}} need all the elements that Java needs. This makes it possible for Java programmers to learn Groovy gradually by starting with familiar Java syntax before acquiring more Groovy programming idioms.|$|R
