57|259|Public
500|$|... "Any AIA member, {{group of}} members, component, or Knowledge Community" [...] {{is allowed to}} {{nominate}} a project for the Twenty-five Year Award. A project may be nominated multiple times, {{as long as it}} still complies with the eligibility requirements. Nominees are judged by today's architectural standards in their <b>function,</b> <b>execution,</b> and creativity. The project and its site are judged together, with any changes in context taken into account.|$|E
5000|$|Compile-Time <b>Function</b> <b>Execution</b> (CTFE) {{allows a}} subset of D (restricted to safe operations) to be {{interpreted}} during compilation.|$|E
5000|$|This is {{an example}} of compile time <b>function</b> <b>execution.</b> Ordinary {{functions}} may be used in constant, compile-time expressions provided they meet certain criteria: ...|$|E
3000|$|..., in worst case, 27 SHA 1 -HMAC <b>function</b> <b>executions</b> are needed, {{which results}} in 337.5 [*]ms of CPU time used for these {{calculations}} in every sync period, where one sync period contains [...]...|$|R
40|$|The aim of {{the paper}} is to {{contribute}} to understanding of key supplier relationships patterns and responsibilities shared among partners in terms of relationship maintenance and relationship <b>functions</b> <b>execution.</b> These research aims are tested in research context of transition economy on example of 208 Russian companies from various industry sectors. We describe buyer-supplier interaction by analyzin...|$|R
30|$|Third, some {{application}} requests execute {{more than}} one query. In these cases, it may be beneficial to partition <b>functions</b> to group <b>execution</b> with data at a single location. Such grouping helps to eliminate latency overhead otherwise needed to move data to the location where the application-tier code executes. An {{example of this is}} shown in Figure  2 (b), where a sub-tree of <b>function</b> <b>executions</b> for TradeJdbc:login is labeled as “private” (gray nodes). By pushing this sub-tree to the private premise, the computation needed for working over account and accountprofile data in the two queries under TradeJdbc:login can be completed at the premise without multiple round-trips between locations.|$|R
50|$|Metaprogramming is {{supported}} by a combination of templates, compile time <b>function</b> <b>execution,</b> tuples, and string mixins. The following examples demonstrate some of D's compile-time features.|$|E
5000|$|String mixins, {{combined}} with compile-time <b>function</b> <b>execution,</b> allow generating D code using string operations at compile time. This {{can be used}} to parse domain-specific languages to D code, which will be compiled as part of the program: ...|$|E
50|$|If {{the value}} of {{only some of the}} {{arguments}} are known, the compiler may still be able to perform some level of compile-time <b>function</b> <b>execution</b> (partial evaluation), possibly producing more optimized code than if no arguments were known.|$|E
2500|$|By {{overwriting}} {{the return}} address in a stack frame. Once the <b>function</b> returns, <b>execution</b> will resume at the return address as {{specified by the}} attacker - usually a user-input filled buffer ...|$|R
40|$|Documentation of the {{preliminary}} software {{developed as a}} framework for a generalized integrated robotic system simulation is presented. The program structure is composed of three major functions controlled by a program executive. The three major functions are: system definition, analysis tools, and post processing. The system definition function handles user input of system parameters and definition of the manipulator configuration. The analysis tools function handles the computational requirements of the program. The post processing function allows for more detailed study of the results of analysis tool <b>function</b> <b>executions.</b> Also documented is the manipulator joint model software to be used as the basis of the manipulator simulation which {{will be part of the}} analysis tools capability...|$|R
5000|$|If {{during this}} <b>execution</b> <b>{{function}}</b> 'foo' was called at least once, then function coverage for this function is satisfied.|$|R
5000|$|The import {{expression}} and compile-time <b>function</b> <b>execution</b> also allow efficiently implementing domain-specific languages.For example, given a function {{that takes a}} string containing an HTML template and returns equivalent D source code, {{it is possible to}} use it in the following way: ...|$|E
5000|$|... "Any AIA member, {{group of}} members, component, or Knowledge Community" [...] {{is allowed to}} {{nominate}} a project for the Twenty-five Year Award. A project may be nominated multiple times, {{as long as it}} still complies with the eligibility requirements. Nominees are judged by today's architectural standards in their <b>function,</b> <b>execution,</b> and creativity. The project and its site are judged together, with any changes in context taken into account.|$|E
50|$|Compile-time <b>{{function}}</b> <b>execution</b> (or compile {{time function}} evaluation, or general constant expressions) {{is the ability}} of a compiler, that would normally compile a function to machine code and execute it at run time, to execute the function at compile time. This is possible if the arguments to the function are known at compile time, and the function does not make any reference to or attempt to modify any global state (is a pure function).|$|E
30|$|We have {{implemented}} our cross-tier partitioning as a framework. It conducts profiling, partitioning, {{and distribution of}} web applications which have their business logic implemented in Java. Besides the profiling data, the analyzer also accepts a declarative XML policy and cost parameters. The cost parameters encode the monetary costs charged by a chosen cloud infrastructure provider and expected environmental parameters such as available bandwidth and network latency. The declarative policy allows for specification of database table placement and co-location constraints. In general we consider the placement of privacy sensitive data {{to be the primary}} consideration for partitioning decisions. However, developers may wish to monitor and constrain the placement of <b>function</b> <b>executions</b> that operate over this sensitive data. For this purpose we rely on existing work using taint tracking [13] which we have integrated into our profiler.|$|R
50|$|The {{deficit is}} {{therefore}} not that patients lack the {{knowledge of how to}} use an object; they fully understand the function of each tool. Rather, the problem lies in that, when they attempt to interact with the tools (in a multiple-object task) in order to execute those <b>functions,</b> that <b>execution</b> is flawed.|$|R
40|$|MMM (Middleware for Method Management) is an {{infrastructure}} {{for managing the}} deployment, integration, distribution, and use of application services via the World Wide Web. Application services may range from a simple database access to a fully edged application package. MMM propagates a software leasing paradigm, {{as opposed to the}} classical software licensing model. Applications reside and execute on the software provider's platforms, managed through the MMM middleware. Users interact with the application services through a standard Internet browser, not requiring any additional software. This relieves user from software installation, maintenance, and upgrading overhead, while always oering the most recent software release. The MMM client component oers users a virtual le space, application service composition <b>functions,</b> <b>execution</b> support, and visualization features. These functions are all available through an Internet browser. The MMM implementation is based on standard Web techn [...] ...|$|R
50|$|AQtime is {{used for}} {{multiple}} optimization tasks to improve application performance and memory usage. It includes a set of profilers for analysis of different application aspects. It does sophisticated application performance analysis of <b>function</b> <b>execution</b> time down to the individual source code lines. It tracks performance issues and memory leaks. It analyzes resource usage and function call order. It monitors code coverage, Windows API compliance and includes other profilers for analyzing more application properties.|$|E
5000|$|The HPCC system {{architecture}} includes two distinct cluster processing environments, {{each of which}} can be optimized independently for its parallel data processing purpose. The first of these platforms is called a data refinery whose overall purpose is the general processing of massive volumes of raw data of any type for any purpose but typically used for data cleansing and hygiene, extract, transform, load processing of the raw data, record linking and entity resolution, large-scale ad-hoc complex analytics, and creation of keyed data and indexes to support high-performance structured queries and data warehouse applications. The data refinery is also referred to as Thor, a reference to the mythical Norse god of thunder with the large hammer symbolic of crushing large amounts of raw data into useful information. A Thor cluster is similar in its <b>function,</b> <b>execution</b> environment, filesystem, and capabilities to the Google and Hadoop MapReduce platforms.|$|E
50|$|D is {{designed}} with {{lessons learned from}} practical C++ usage rather than from a purely theoretical perspective. Although it uses many C and C++ concepts it also discards some, and is as such not compatible with C and C++ source code. D has, however, been constrained in its design by the rule that any code that is legal in both C and D should behave in the same way. D gained some features before C++ did, for example closures, anonymous functions, and compile time <b>function</b> <b>execution.</b> D adds to the functionality of C++ by also implementing design by contract, unit testing, true modules, garbage collection, first class arrays, associative arrays, dynamic arrays, array slicing, nested functions, lazy evaluation, and a re-engineered template syntax. D retains C++'s ability to perform low-level coding and to add inline assembler. C++ multiple inheritance is replaced by Java-style single inheritance with interfaces and mixins. On the other hand, D's declaration, statement and expression syntax closely matches that of C++.|$|E
40|$|Approved {{for public}} release; {{distribution}} unlimited. The failure of present-day interactive graphical systems {{to provide for}} an effective relationship between man and machine is examined. An inefficient communications link is shown to {{be the basis of}} the problem. The manner in which the user controls program flow and the hardware utilized in inputting commands are revealed as the basic components of communication. Program control is investigated. A revised control method is described which consists of a series of <b>function</b> <b>executions</b> and six basic phases of activity for program control. With respect to input hardware, more human factors analysis is advocated. To assist in this analysis, a function classification system is described. An example test is conducted to compare the relative merits of the light pen with menu, the teletype, and function switches. [URL] United States Nav...|$|R
40|$|Computational {{scientists}} often prototype {{data analysis}} scripts using high-level languages like Python. To speed up execution times, they manually refactor their scripts into stages (separate functions) and write extra code to save intermediate results to disk {{in order to}} avoid recomputing them in subsequent runs. To eliminate this burden, we enhanced the Python interpreter to automatically memoize (save) the results of long-running <b>function</b> <b>executions</b> to disk, manage dependencies between code edits and saved results, and re-use memoized results rather than re-executing those functions when guaranteed safe to do so. There is a ∼ 20 % run-time slowdown during the initial run, but subsequent runs can speed up by several orders of magnitude. Using our enhanced interpreter, scientists can write simple and maintainable code that also runs fast after minor edits, without having to learn any new programming languages or constructs. ...|$|R
40|$|This {{project is}} based on the {{implementation}} of a system that improves the production process of a company which sells clothes by catalog. SWOT tool is used to identify the present risks in the company, analyzing its impact level and assessing the controls to measure its effectiveness. The risk matrix allows to identify the main problems which affect the company, and allow improve or design new controls to mitigate each existing risk, with the strategies implementation that help to reach the proposed objectives. To contribute with the improvement of the activities of this process, the “ 5 S” management system keep an organized and productive area in a simple way, avoiding downtime in the <b>functions</b> <b>execution</b> and the efficiently use of the company resources, contributing with the strengthening of the labor relations between the employee and employer...|$|R
50|$|To address both batch {{and online}} aspects data-intensive {{computing}} applications, HPCC includes two distinct cluster environments, {{each of which}} can be optimized independently for its parallel data processing purpose. The Thor platform is a cluster whose purpose is to be a data refinery for processing of massive volumes of raw data for applications such as data cleansing and hygiene, extract, transform, load (ETL), record linking and entity resolution, large-scale ad hoc analysis of data, and creation of keyed data and indexes to support high-performance structured queries and data warehouse applications. A Thor system is similar in its hardware configuration, <b>function,</b> <b>execution</b> environment, filesystem, and capabilities to the Hadoop MapReduce platform, but provides higher performance in equivalent configurations. The Roxie platform provides an online high-performance structured query and analysis system or data warehouse delivering the parallel data access processing requirements of online applications through Web services interfaces supporting thousands of simultaneous queries and users with sub-second response times. A Roxie system is similar in its function and capabilities to Hadoop with HBase and Hive capabilities added, but provides an optimized execution environment and filesystem for high-performance online processing. Both Thor and Roxie systems utilize the same ECL programming language for implementing applications, increasing programmer productivity.|$|E
40|$|We derive an {{abstract}} computational model from a sequential computational model that is generally used for <b>function</b> <b>execution.</b> This abstract computational model {{allows for the}} concurrent execution of functions. We discuss concurrent models for <b>function</b> <b>execution</b> as implementations from the abstract computational model. We give {{an example of a}} particular concurrent function construct that can be implemented on a concurrent machine model using multi-threading. The result is a framework of computational models at different levels of abstraction {{that can be used in}} further development of concurrent computational models that deal with the problems inherent with concurrency...|$|E
40|$|This {{paper is}} {{dedicated}} to designing a new compiled programming language inspired by C++ and D programming languages. The paper focuses on a new concept called code hatching that innovates fields of metaprogramming and compile-time <b>function</b> <b>execution.</b> Prototype compiler is implemented and described, too...|$|E
40|$|Medical image {{segmentation}} demands a segmentation algorithm which works against noise. The most popular algorithm used in {{image segmentation}} is Fuzzy C-Means clustering. It uses only intensity values for clustering {{which makes it}} highly sensitive to noise. The comparison of the three fundamental image segmentation methods based on fuzzy logic namely Fuzzy C-Means (FCM), Intuitionistic Fuzzy C-Means (IFCM), and Type-II Fuzzy C-Means (T 2 FCM) is presented in this paper. These algorithms are executed in two scenarios– both in the absence and {{in the presence of}} noise and on two kinds of images– Bacteria and CT scan brain image. In the bacteria image, clustering differentiates the bacteria from the background and in the brain CT scan image, clustering is used to identify the abnormality region. Performance is analyzed on the basis cluster validity <b>functions,</b> <b>execution</b> time and convergence rate. Misclassification error is also calculated for brain image analysis...|$|R
40|$|This {{article is}} {{the report of}} a {{research}} that sought to address the different perspectives of the professionals {{of one of the}} Mental health services Center of Amazon, with respect to its insertion and conception as an actor directly involved on mental health care reform or Psychiatric Reform. The results were obtained through participate observations and interviews with the six college-educated professionals of this center, interpreted through content analysis of Bardin. It was found that the reform conception by the professionals is equivalent, but the medical area professionals, unlike the other areas ones, discredit the viability of the proposed attention model. However, it was unanimous the opinion that the center doesn’t have the adequate resources for its <b>functions</b> <b>execution.</b> Even with the adversities, the work of these professionals enables the desinstitucionalization on Amazon, allowing the mental disorders carriers the possibility of rescue their citizenship...|$|R
50|$|Adobe Flash Builder offers {{built-in}} code editors for MXML and ActionScript and a WYSIWYG {{editor for}} modifying MXML applications. Adobe Flash Builder includes an interactive debugger, allowing developers to step through code execution while inspecting variables and watching expressions. Flex Builder 3 added support for performance analysis. The profiling view displays statistical information about memory use {{in addition to}} <b>function</b> call <b>execution</b> time.|$|R
40|$|Abstract. With {{more and}} more {{attention}} are paid on energy security and environment, smart grid has become an important direction of future energy industry development all over the world. In order to fully exploit {{the role of government}} on the development of smart grid, this paper first discusses the insufficiency of government <b>function</b> <b>execution</b> during the construction of smart grid in China at present from the respects of smart grid planning, laws making, supervising, electric structure reform, and management <b>function</b> <b>execution.</b> Then this paper presents some suggestions on the fulfillment of government function on the construction of smart grid. Many measures should be taken from both macro and micro field to fulfill the government function on the construction of smart grid to realize healthy development of smart grid...|$|E
30|$|Fourth, {{since the}} {{trade-offs}} on function placement {{depend on the}} placement of data and vice-versa, we need a model that can reason simultaneously about both application-tier <b>function</b> <b>execution</b> and query plan execution. Thus {{the model for the}} data-tier should be compatible for integration with an approach to application partitioning such as the one described in Section  3.|$|E
40|$|Turing {{machine is}} model for {{general-purpose}} computing device. There are many implementation of Turing Machine. Khan and Khiyal (2006) presented a deterministic Turing model that simulates distributed processing. In current study we enhanced {{the model for}} complex tasks and enable to solve equation with several operands on the right hand, to perform nested conditional blocks, nested loop and updated the <b>function</b> <b>execution...</b>|$|E
50|$|Proteus is an {{interpreted}} language: {{programs are}} loaded into memory, pre-compiled and run; since the number ofbuilt-in <b>functions</b> is large, <b>execution</b> speed is usually {{very good and}} often {{comparable to that of}} compiled programs.|$|R
40|$|CAD-systems {{supporting}} hardware/software codesign map different {{tasks of}} an algorithm onto processors. Some of the processors are programmable {{and others are}} application specific. We propose a new MILP (mixed integer linear program) model that allows to determine a mapping optimizing a trade off <b>function</b> between <b>execution</b> time, processor and communication cost. The mapping also guarantees that all specified execution deadlines are met. We demonstrate the efficiency with practical examples...|$|R
40|$|Energy eciency is {{increasingly}} important for robotic manufacturing systems. An energy minimal schedule may be generated {{given that the}} energy consumption for each robot operation may be parameterized as a <b>function</b> of <b>execution</b> time. Existing approaches rely heavily {{on the use of}} models to generate functions describing energy consumption. We are interested in solving the problem using model-free approaches, such as Iterative Learning Control, model-free/iterative Dynamic Programming and derivative free optimization...|$|R
