8|5|Public
25|$|The {{instruction}} format used 3 bits for opcode, and 12 bits for address. Block I had 11 instructions: TC, CCS, INDEX, XCH, CS, TS, AD, and MASK (basic), and SU, MP, and DV (extra). The first eight, called basic instructions, were directly accessed by the 3-bit op. code. The final three were denoted as <b>extracode</b> instructions {{because they were}} accessed by performing a special type of TC instruction (called EXTEND) immediately before the instruction.|$|E
25|$|INDEX: Add {{the data}} {{retrieved}} at the address {{specified by the}} instruction to the next instruction. INDEX {{can be used to}} add or subtract an index value to the base address specified by the operand of the instruction that follows INDEX. This method is used to implement arrays and table look-ups; since the addition was done on both whole words, it was also used to modify the op. code in a following (<b>extracode)</b> instruction, and on rare occasions both functions at once.|$|E
50|$|<b>Extracode</b> mode {{had its own}} program address counter, {{and easy}} access to the {{instruction}} operands.|$|E
50|$|<b>Extracodes</b> {{were what}} would be called {{software}} interrupt or trap today. They were used to call mathematical procedures {{which would have been}} too inefficient to implement in hardware, for example sine, logarithm, and square root. But about half of the codes were designated as Supervisor functions, which invoked operating system procedures. Typical examples would be “Print the specified character on the specified stream” or “Read a block of 512 words from logical tape N”. <b>Extracodes</b> were the only means by which a program could communicate with the Supervisor. Other UK machines of the era, such as the Ferranti Orion, had similar mechanisms for calling on the services of their operating systems.|$|R
50|$|On smaller {{members of}} the series some {{expensive}} instructions (floating point for example) were also implemented as <b>extracodes.</b> The combination of the executive and hardware provided the same interface to programs running on any model of the range.|$|R
50|$|Like the 1901 the 1902 {{performed}} multiply {{and divide}} operations as <b>extracodes.</b> An optional commercial computing facility or CCF {{was available to}} add hardware multiply and divide. An optional floating point unit, the scientific computing facility, SCF was also available as a super-set of the CCF.|$|R
5000|$|... 128 {{high-speed}} index registers (B-lines) {{that could}} be used for address modification in the mostly double-modified instructions. The register address space also included special registers such as the <b>extracode</b> operand address, the exponent of the floating-point accumulator. Three of the 128 registers were program counter registers: 126 was supervisor control, 125 was <b>extracode</b> control, and 127 was user control. Register 0 always held value 0.|$|E
5000|$|Peripheral control through V-store addresses, {{interrupts}} and <b>extracode</b> routines, {{by reading}} and writing special wired-in store addresses.|$|E
5000|$|The {{instruction}} format used 3 bits for opcode, and 12 bits for address. Block I had 11 instructions: , , , , , , , and [...] (basic), and , , and [...] (extra). The first eight, called basic instructions, were directly accessed by the 3-bit op. code. The final three were denoted as <b>extracode</b> instructions {{because they were}} accessed by performing a special type of [...] instruction (called [...] ) immediately before the instruction.|$|E
50|$|All I/O {{operations}} were initiated by a privileged supervisor process, {{known as the}} executive. User processes communicated with executive using <b>extracodes,</b> instructions that caused a trap into the executive when run. Executive would then communicate with the appropriate peripheral via the Standard Interface, using functions not available to user processes. The subsequent data transfers would then occur across this interface, autonomously without further program involvement. The conclusion of the transfers (or error if any) would similarly be indicated back to the executive.|$|R
50|$|An {{extended}} {{version of the}} FP6000 executive was provided with the ICT 1904/1905, and new versions were written for the ICT 1906/7 and ICT 1901/2/3. An important task of these different versions was to hide the hardware differences between the different machines, providing emulation of missing instructions as <b>extracodes.</b> The concept was that applications, and later operating systems, were written to run on {{the combination of the}} hardware and the executive, and so would run on any member of the series, no matter how different the underlying hardware was.|$|R
5000|$|Add {{the data}} {{retrieved}} at the address {{specified by the}} instruction to the next instruction. [...] {{can be used to}} add or subtract an index value to the base address specified by the operand of the instruction that follows [...] This method is used to implement arrays and table look-ups; since the addition was done on both whole words, it was also used to modify the op. code in a following (<b>extracode)</b> instruction, and on rare occasions both functions at once.|$|E
50|$|The {{uppermost}} ten bits of a 48-bit Atlas {{machine instruction}} denoted which operation should be performed. If {{the most significant}} bit was set to zero, this was an ordinary machine instruction executed directly by the hardware. If the uppermost bit was set to one, this was an <b>Extracode</b> and was implemented as {{a special kind of}} subroutine jump to a location in the fixed store (ROM), its address being determined by the other nine bits. About 250 extracodes were implemented, of the 512 possible.|$|E

