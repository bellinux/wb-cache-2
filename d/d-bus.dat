146|0|Public
25|$|There {{are also}} actions {{performed}} by programs {{that affect the}} GUI. For example, there are components like inotify or <b>D-Bus</b> to facilitate communication between computer programs.|$|E
25|$|The GLib data {{structures}} and utilities library, GObject object and type system and GTK+ widget toolkit comprise {{the central part}} of GNOME development platform. This foundation is further extended with <b>D-Bus</b> IPC framework, Cairo 2D vector-based drawing library, Clutter accelerated graphics library, Pango international text rendering library, PulseAudio low-level audio API, GStreamer multimedia framework, and several specialized libraries including NetworkManager, PackageKit, Telepathy (instant messaging) and WebKit.|$|E
25|$|Besides {{externally}} visible components, such as X window managers, a non-obvious {{but quite}} central role {{is played by}} the programs hosted by freedesktop.org, such as <b>D-Bus</b> or PulseAudio; both major desktop environments (GNOME and KDE) include them, each offering graphical front-ends written using the corresponding toolkit (GTK+ or Qt). A display server is another component, which {{for the longest time}} has been communicating in the X11 display server protocol with its clients; prominent software talking X11 includes the X.Org Server and Xlib. Frustration over the cumbersome X11 core protocol, and especially over its numerous extensions, has {{led to the creation of}} a new display server protocol, Wayland.|$|E
5000|$|AF_BUS <b>D-Bus</b> optimization: {{performance}} improvement for <b>D-Bus</b> IPC mechanism ...|$|E
50|$|The <b>D-Bus</b> {{specification}} {{defines the}} wire protocol: {{how to build}} the <b>D-Bus</b> messages to be exchanged between processes within a <b>D-Bus</b> connection. However, it does not define the underlying transport method for delivering these messages.|$|E
50|$|The {{usage of}} <b>D-Bus</b> is {{steadily}} expanding beyond the initial scope of desktop environments to cover an increasing amount of system services. For instance, NetworkManager network daemon, BlueZ bluetooth stack and Pulseaudio sound server use <b>D-Bus</b> to provide part {{or all of}} its services, and systemd is promoting traditional system daemons to <b>D-Bus</b> services, such as logind. Another heavy user of <b>D-Bus</b> is Polkit, whose policy authority daemon is implemented as a service connected to the system bus.|$|E
5000|$|The <b>D-Bus</b> {{specification}} also defines several standard interfaces that objects {{may want}} to implement {{in addition to its}} own interfaces. Although technically optional, most <b>D-Bus</b> service developers choose to support them in their exported objects since they offer important additional features to <b>D-Bus</b> clients, such as introspection. These standard interfaces are: ...|$|E
5000|$|... #Caption: A [...] process {{acting as}} a <b>D-Bus</b> message bus daemon. Every process {{connected}} to the bus keeps one <b>D-Bus</b> connection with it.|$|E
5000|$|<b>D-Bus</b> was {{conceived}} as a generic, high-level inter-process communication system. To accomplish such goals, <b>D-Bus</b> communications {{are based on the}} exchange of messages between processes instead of [...] "raw bytes". <b>D-Bus</b> messages are high-level discrete items that a process can send through the bus to another connected process. Messages have a well-defined structure (even the types of the data carried in their payload are defined), allowing the bus to validate them and to reject any ill-formed message.In this regard, <b>D-Bus</b> is closer to an RPC mechanism than to a classic IPC mechanism, with its own type definition system and its own marshaling.|$|E
50|$|QtDBus is an {{implementation}} of <b>D-Bus</b> {{included in the}} Qt library since its version 4.2. This component is used by KDE applications, libraries and components to access the <b>D-Bus</b> services available in a system.|$|E
50|$|IBus employs <b>D-Bus</b> to {{communicate}} among ibus-daemon, services, and IM clients such as terminal emulators, editors and web browsers. ibus-daemon manages all clients and services by receiving registrations from services, and sending <b>D-Bus</b> message to corresponding services and IM client.|$|E
50|$|GDBus is an {{implementation}} of <b>D-Bus</b> based on GIO streams included in GLib, aiming {{to be used}} by GTK+ and GNOME. GDBus is not a wrapper of libdbus, but a complete and independent re{{implementation of}} the <b>D-Bus</b> specification and protocol.|$|E
50|$|The GNOME project {{decided that}} the 3.0 release will be free of ORBit and Bonobo meaning a <b>D-Bus</b> AT-SPI {{solution}} was required. In an effort to move AT-SPI forward, a <b>D-Bus</b> project was started in November 2006. This {{took the form of}} a performance and design review available on the GNOME wiki. Work began on the implementation in May 2007. The <b>D-Bus</b> version of AT-SPI, AT-SPI version 2, was released along with GNOME 3.0 in April 2011.|$|E
5000|$|Because of its {{original}} conception {{as a replacement for}} several component oriented communications systems, <b>D-Bus</b> shares with its predecessors an object model in which to express the semantics of the communications between clients and services. The terms used in the <b>D-Bus</b> object model mimic those used by some object oriented programming languages. That doesn't mean that <b>D-Bus</b> is somehow limited to OOP languages [...] - in fact, the most used implementation (...) is written in C, a procedural programming language.|$|E
5000|$|The [...] library (or its equivalent) {{internally}} uses {{a native}} lower-level IPC mechanism {{to transport the}} required <b>D-Bus</b> messages between the two processes in {{both ends of the}} <b>D-Bus</b> connection. <b>D-Bus</b> specification doesn't mandate which particular IPC transport mechanisms should be available to use, as it's the communications library that decides what transport methods it supports. For instance, in Linux and Unix-like operating systems [...] typically uses Unix domain sockets as the underlying transport method, but it also supports TCP sockets.|$|E
50|$|X.Org Server {{does not}} use <b>D-Bus.</b>|$|E
50|$|The NetworkManager {{project was}} among the first major Linux desktop {{components}} to utilize <b>D-Bus</b> and HAL extensively. Since June 2009, however, NetworkManager no longer depends on HAL, and since 0.9.10 (ca. 2014), neither does it require the <b>D-Bus</b> daemon to be running for root operation.|$|E
5000|$|<b>D-Bus</b> current open cross-language {{cross-platform}} Freedesktop.org Object Model ...|$|E
5000|$|DCOP - inter-process {{communication}} system (replaced with <b>D-Bus)</b> ...|$|E
5000|$|KDE's Desktop Communications Protocol (DCOP) {{deprecated}} by <b>D-Bus</b> ...|$|E
50|$|Each logical {{hardware}} device is {{represented as a}} <b>D-Bus</b> object, and its bus address {{is used as a}} unique identifier. Devices include abstractions like disk partitions and visible wireless networks. The device's functionality is exposed through <b>D-Bus</b> interfaces, and its state accessed through properties, a set of key-value pairs.|$|E
5000|$|<b>D-Bus,</b> a {{free and}} {{open-source}} inter-process communication (IPC) system.|$|E
50|$|The freedesktop.org project also {{developed}} a free and open-source software library called libdbus, as a reference implementation of the specification. This library is often confused with the <b>D-Bus</b> itself. Other implementations of the <b>D-Bus</b> client library also exist, such as GDBus (GNOME), QtDBus (Qt/KDE), dbus-java and sd-bus (part of systemd).|$|E
5000|$|<b>D-Bus</b> {{open source}} IPC program {{provides}} similar function to CORBA.|$|E
5000|$|Core infrastructure: Linux kernel, systemd, PulseAudio, X/Wayland, Glib and <b>D-Bus,</b> ...|$|E
5000|$|Kernel --> udev --> Network Manager <--> <b>D-Bus</b> <--> Evolution ...|$|E
50|$|In 2013, the systemd project rewrote libdbus in {{an effort}} to simplify the code, but it also {{resulted}} in a significant increase of the overall <b>D-Bus</b> performance. In preliminary benchmarks, BMW found that the systemd's <b>D-Bus</b> library increased performance by 360%. By version 221 of systemd, the sd-bus API was declared stable.|$|E
5000|$|Freedesktop.org <b>D-Bus</b> [...] - [...] current open cross-language {{cross-platform}} {{object model}} ...|$|E
50|$|The <b>D-Bus</b> {{standard}} has superseded ToolTalk in some Unix-like desktop environments.|$|E
5000|$|Two {{processes}} {{can use a}} <b>D-Bus</b> {{connection to}} exchange messages directly between them, {{but this is not}} the way in which <b>D-Bus</b> is normally intended to be used. The usual way is to always use a message bus daemon (i.e. [...] ) as a communications central point to which each process should establish its point-to-point <b>D-Bus</b> connection. When a process [...] - client or service - [...] sends a <b>D-Bus</b> message, the message bus process receives it in the first instance and delivers it to the appropriate recipient. The message bus daemon may be seen as a hub or router in charge of getting each message to its destination by repeating it through the <b>D-Bus</b> connection to the recipient process. The recipient process is determined by the destination bus name in the message's header field, or by the subscription information to signals maintained by the message bus daemon in the case of signal propagation messages. The message bus daemon can also produce its own messages as a response to certain conditions, such as an error message to a process that sent a message to a nonexistent bus name.|$|E
5000|$|<b>D-Bus</b> and {{socket support}} for {{communication}} between the daemon and search program ...|$|E
50|$|GNOME's {{session manager}} {{superseded}} XSMP with a <b>D-Bus</b> interface in version 2.24.|$|E
5000|$|<b>D-Bus,</b> {{a message}} bus akin to DCOP (KDE 3) and Bonobo (GNOME 2) ...|$|E
5000|$|Kimpanel support (A <b>D-Bus</b> based {{protocol}} for input method user interface, oriented from KDE) ...|$|E
5000|$|... lrcShow-X (free {{software}} for X Window System, uses <b>D-Bus</b> {{to communicate with}} audio player) ...|$|E
50|$|The project avoids use of Linux-based tools or frameworks, such as <b>D-Bus,</b> Polkit, and systemd.|$|E
