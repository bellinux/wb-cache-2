3078|2834|Public
5|$|In the 1970s, the Engineering and Water Supply Department chose an {{area at the}} top of the park, {{adjacent}} to Lower North East Road, to build a water treatment works. Based partly on seismic refraction traverses, a ridge underlain by dolomite and quartzite was deemed to be stable enough for construction. The site was also selected because of its hydraulic advantages; all other sites would have required the construction of a major pumping station. The exact placement of the site was made so that it could not be seen from the metropolitan area. It has a <b>design</b> <b>flow</b> of 313megalitres (ML) per day with a maximum capacity of 344ML. The plant was commissioned in 1980 and uses filtration and sedimentation techniques to clean water from the Mannum to Adelaide pipeline. It was the second plant in Adelaide, after the opening of the Hope Valley plant in 1977. Most of the water is piped directly from the River Murray, but some is sourced from Millbrook Reservoir.|$|E
25|$|A more {{detailed}} Physical <b>Design</b> <b>Flow</b> is shown below. Here {{you can see}} the exact steps and the tools used in each step outlined.|$|E
25|$|During the {{synthesis}} process, constraints {{are applied to}} ensure that the design meets the required functionality and speed (specifications). Only after the netlist is verified for functionality and timing it is sent for the physical <b>design</b> <b>flow.</b>|$|E
40|$|Vertical {{benchmarks}} {{are complex}} system designs represented at multiple levels of abstraction. More effective than componentbased CAD benchmarks, vertical benchmarks enable quantitative comparison of CAD techniques within or across <b>design</b> <b>flows.</b> This work describes {{the notion of}} vertical benchmarks and presents our benchmark, {{which is based on}} a commercial DSP, by comparing two alternative <b>design</b> <b>flows.</b> 2...|$|R
50|$|For modern PLD {{programming}} languages, <b>design</b> <b>flows,</b> and tools, see FPGA and Reconfigurable computing.|$|R
50|$|Samsung and Synopsys {{have also}} begun {{implementing}} double patterning in 22 nm and 16 nm <b>design</b> <b>flows.</b>|$|R
25|$|The {{first step}} in the {{physical}} <b>design</b> <b>flow</b> is Floorplanning. Floorplanning is the process of identifying structures that should be placed close together, and allocating space for them in such a manner as to meet the sometimes conflicting goals of available space (cost of the chip), required performance, and the desire to have everything close to everything else.|$|E
25|$|Each of {{the phases}} {{mentioned}} above has Design Flows associated with them. These Design Flows {{lay down the}} process and guide-lines/framework for that phase. Physical <b>Design</b> <b>flow</b> uses the technology libraries that are provided by the fabrication houses. These technology files provide information regarding the type of silicon wafer used, the standard-cells used, the layout rules (like DRC in VLSI), etc.|$|E
25|$|June 6, 2002: {{merger with}} Avanti Corporation, USA. Avanti was founded when several ex-Cadence {{employees}} bought the startup ArcSys, which had previously merged with ISS, gaining Avanti its DRC/LVS tool Hercules (including 3D silicon structure modeling), then bought Compass Design Automation, which had fully integrated IC <b>Design</b> <b>Flow</b> and ASIC Libraries, especially its {{place and route}} tool, which Avanti reworked to create Saturn and Apollo II; and it also bought TMA which brought their pioneering TCAD and Proteus Optical proximity correction tools. This was, by far, Synopsys' most significant and controversial acquisition. At the time Avanti was the #4 company in the EDA industry, and was struggling with a major lawsuit from Cadence for software theft.|$|E
50|$|<b>Design</b> <b>flows</b> are the {{explicit}} combination of electronic design automation tools {{to accomplish the}} design of an integrated circuit. Moore's law has driven the entire IC implementation RTL to GDSII <b>design</b> <b>flows</b> from one which uses primarily stand-alone synthesis, placement, and routing algorithms to an integrated construction and analysis <b>flows</b> for <b>design</b> closure. The challenges of rising interconnect delay led to {{a new way of}} thinking about and integrating design closure tools.|$|R
40|$|This paper {{introduces}} {{an environment}} for encapsulation and benchmarking of prototype algorithms {{in a context}} of realistic <b>design</b> <b>flows.</b> Application [...] specific parsers read the benchmark descriptions; standardized report generators summarize the benchmarking experiments. Tcl/Tk is used to implement the user interface, describe dynamically reconfigurable <b>design</b> <b>flows,</b> and execute them on local and remote CPUs. A number of university [...] based public [...] domain tools, as well as commercial tools, have been encapsulated within this environment...|$|R
50|$|Mohanty {{has worked}} on design space {{exploration}} and optimization of nanoelectronic integrated circuits. The key feature of these <b>design</b> <b>flows</b> {{is the need for}} only two manual layout (or physical design) iterations which saves significant design effort. These ultra-fast <b>design</b> <b>flows</b> rely on accurate metamodels of the analog and mixed-signal circuit components. His research significantly advances the state-of-the art in Design for Excellence (DfX) or Design for X, such as Design for Variability (DfV) and Design for Cost (DfC).|$|R
2500|$|The ASIC {{physical}} <b>design</b> <b>flow</b> {{uses the}} technology libraries that {{are provided by}} the fabrication houses. Technologies are commonly classified according to minimal feature size. Standard sizes, {{in the order of}} miniaturization, are 2μm, 1μm , 0.5μm , 0.35μm, 0.25μm, 180nm, 130nm, 90nm, 65nm, 45nm, 28nm, 22nm, 18nm, 14nm, etc. [...] They may be also classified according to major manufacturing approaches: n-Well process, twin-well process, SOI process, etc.|$|E
2500|$|Roads are {{designed}} and built for primary use by vehicular and pedestrian traffic. [...] Storm drainage and environmental considerations are a major concern. [...] Erosion and sediment controls are constructed to prevent detrimental effects. [...] Drainage lines are laid with sealed joints in the road easement with runoff coefficients and characteristics adequate for the land zoning and storm water system. [...] Drainage systems must be capable of carrying the ultimate <b>design</b> <b>flow</b> from the upstream catchment with approval for the outfall from the appropriate authority to a watercourse, creek, river or the sea for drainage discharge. (pp. 38–40) ...|$|E
2500|$|Many sewage {{treatment}} plants use centrifugal pumps {{to transfer the}} nitrified mixed liquor from the aeration zone to the anoxic zone for denitrification. [...] These pumps are {{often referred to as}} Internal Mixed Liquor Recycle (IMLR) pumps. [...] IMLR may be 200% to 400% the flow rate of influent wastewater (Q.) [...] This is in addition to Return Activated Sludge (RAS) from secondary clarifiers, which may be 100% of Q. [...] (Therefore, the hydraulic capacity of the tanks in such a system should handle at least 400% of annual average <b>design</b> <b>flow</b> (AADF.) [...] At times, the raw or primary effluent wastewater must be carbon-supplemented by the addition of methanol, acetate, or simple food waste (molasses, whey, plant starch) to improve the treatment efficiency. [...] These carbon additions should be accounted for in the design of a treatment facility's organic loading.|$|E
50|$|Each {{of these}} fixes may {{possibly}} cause other problems. This {{type of issue}} must be addressed as part of <b>design</b> <b>flows</b> and <b>design</b> closure.|$|R
50|$|Value stream mapping has {{supporting}} {{methods that}} are often used in Lean environments to analyze and <b>design</b> <b>flows</b> at the system level (across multiple processes).|$|R
3000|$|... {{many modern}} <b>design</b> <b>flows</b> are not {{mature enough to}} {{generate}} efficient and automatic real-time code, and combined with the previous item, cause potential adopters to wait until {{it is safe to}} switch.|$|R
5000|$|Complete <b>design</b> <b>flow,</b> from RTL to GDSII, was {{performed}} by the PASTA team. This {{was based on an}} in-house developed <b>design</b> <b>flow</b> using Synopsys Design Compiler for topological synthesis, and IC Compiler for automated place-and-route.|$|E
5000|$|... #Caption: Physical design steps {{within the}} digital <b>design</b> <b>flow</b> ...|$|E
5000|$|Post silicon validation, {{the final}} step in the EDA <b>design</b> <b>flow</b> ...|$|E
50|$|Each {{of these}} fixes may {{possibly}} cause other problems. This {{type of issue}} must be addressed as part of <b>design</b> <b>flows</b> and <b>design</b> closure. Re-analysis after design changes is a prudent measure.|$|R
50|$|The role of {{the experts}} is to assist and guide the contestants {{throughout}} each renovation. They {{need to make sure}} the house construction and <b>design</b> <b>flows</b> and also settle any disputes between teams.|$|R
40|$|The micro device <b>designing</b> <b>flow</b> {{begins with}} the mask design currently, which is not {{intuitive}} for designer and sometime made them confused. As a result, the manufacturability is hard to prove in advance with the traditional designing way. Especially for surface micro-machined device with multiple structural layers, the 2 D mask design cannot ensure the fabrication of complex 3 D device with high yields reliably. The rise of structural designing strategies gave a direction to change the traditional habit. On the other hand, the top-down method provides the advanced <b>designing</b> <b>flow,</b> which {{begins with the}} system level design. However, there still some key technologies to study further because of the novel design procedure. To improve the manufacturability of micro device, the <b>designing</b> <b>flow</b> based on <b>design</b> for manufacturability methodology is presented, which draw on the advantages and experience of the mechanical design method. The key technologies on the structural design level, the processes planning level and the fabricating level are introduced correspondingly. In addition, we present the framework to implement the method.  </p...|$|R
5000|$|An example <b>design</b> <b>flow</b> for semulation is {{depicted}} in the following block chart: ...|$|E
5000|$|... #Caption: This chart {{shows some}} of the <b>design</b> <b>flow</b> options for home theatre in the 2000s.|$|E
50|$|Previously Altera {{offered a}} {{publicly}} available ASIC <b>design</b> <b>flow</b> based on HardCopy ASICs, which transitioned an FPGA design, once finalized, {{to a form}} which is not alterable. This <b>design</b> <b>flow</b> reduced design security risks as well as costs for higher volume production. Design engineers could prototype their designs in Stratix series FPGAs, and then migrate these designs to HardCopy ASICs when they were ready for volume production.|$|E
5000|$|Researchers {{have used}} Verilator {{to develop new}} co-simulation environments, as part of general ASIC and FPGA <b>design</b> <b>flows</b> [...] and in {{performance}} and power analysis. Verilator is also a popular tool for student dissertations, for example.|$|R
40|$|Many {{different}} {{system description}} and specification languages {{are used in}} modern <b>design</b> <b>flows</b> to empha-size different aspects like modular architecture, multi-threaded behavior, abstract action-oriented behavior, and the desired temporal properties. However, the use of many specialized languages complicates the devel-opment of seamless and robust <b>design</b> <b>flows.</b> In this paper, we show that synchronous languages are power-ful enough to capture the mentioned aspects of system descriptions as simple syntactic sugar. In particular, we show how hardware structures, multi-threaded and action-oriented {{programs as well as}} property specifica-tion languages can be incorporated in a synchronous programming language so that a single core language with a powerful compiler can handle all design descrip-tions in a consistent way. ...|$|R
40|$|By {{utilizing}} {{massively parallel}} circuit design in FP-GAs, the overall system efficiency, {{in terms of}} computation efficiency and energy efficiency, can be greatly enhanced by offloading some computation-intensive tasks which are originally executed in the instruction set processor to the FPGA fabric. In essence, a hardware task scheduler is needed. However, {{most of the work}} in the literature considers scheduling algorithms which are unable or difficult to be implemented using the <b>design</b> <b>flows</b> in current development platform. Moreover, little of the work takes energy consumption into consideration. In this paper, we present the design of a hardware task scheduler which takes energy consumption into consideration, and can be readily implemented using current <b>design</b> <b>flows.</b> 1...|$|R
50|$|<b>Design</b> <b>Flow</b> Documentation for the LEON into FPGA are {{available}} from the manufacturer and from third party resources.|$|E
5000|$|Both netlist and synthesizable cores {{are called}} [...] "soft cores", as both allow a synthesis, {{placement}} and route (SPR) <b>design</b> <b>flow.</b>|$|E
5000|$|After the dam was completed, {{the tunnels}} are still used as flood control outlet works {{and have a}} <b>design</b> <b>flow</b> of [...]|$|E
25|$|One can use ASIC for Full Custom {{design and}} FPGA for Semi-Custom <b>design</b> <b>flows.</b> The reason being {{that one has}} the {{flexibility}} to design/modify design blocks from vendor provided libraries in ASIC. This flexibility is missing for Semi-Custom flows using FPGAs (e.g. Altera).|$|R
40|$|High-level {{synthesis}} {{tools are}} gaining {{more and more}} acceptance in industrial <b>design</b> <b>flows.</b> While they increase productivity in implementing a single complex hardware module, synthesizing and optimizing many hardware components simultaneously is still an open problem. In particular, resource sharing is typically only performed for single components, thereby neglecting optimization possibilities across concurrent modules. On the other hand, domain-specific models and specifications, which are generally seen as a key ingredient to {{raise the level of}} abstraction in future <b>design</b> <b>flows,</b> may enable such global optimizations. In this paper, we present a model-based approach for inter-process resource sharing which provides for efficient high-level synthesis of streaming applications modeled as a set of communicating processes. The applicability of the proposed approach is validated by a case study. 1...|$|R
40|$|Abstract- 26 {{students}} at the University of California, Los Angeles (UCLA) studied system level design methodologies through {{the design of a}} high-speed JPEG encoder. The results produced by 5 different <b>design</b> <b>flows</b> onto various target platforms demonstrate the high impact of tools on design quality. I...|$|R
