4|1677|Public
40|$|This {{research}} aims to {{know the}} management of curriculum at an Islamic boarding school, that is madrasa based. This research focuses on the factors that restricting and supporting in developing the curriculum of pesantren, {{as well as on}} its problem solving. Using qualitative approach, this research gathered the data through interviews, observation and documentation. The results showed that the management of curriculum development designed by PP. Muntasyirul Ulum MAN 3 Sleman, Yogyakarta include planning, organizing, implementing and evaluation. Curriculum development strategies were carried out by carrying out these steps: 1) Bench marking, 2) scientific visit, 3) trial and <b>error</b> <b>program,</b> 4) establishment of curriculum commission, 5) review process, open criticism and suggestions, and 6) evaluation during the end of the semester...|$|E
40|$|Former {{research}} shows that improperly deviding of compuonds {{continues to be a}} relevant topic with regard to pupils' writing competence. For instance, Walmsness (2000) found that the type of writing the pupil uses has a determining factor regarding to what extent pupils separate compounds. In this thesis it will therefore be examined more closely whether different writing tools matter, regarding to what extent the sample makes errors in orthography in relation to combined words, where improperly deviding of compounds as an error type is the main focus. The motivation for this examination has been to find indications of what type of writing tool that is best suited for teaching pupils to write in schools, especially in connection with orthography. The sample who participated in the research for the current thesis consisted of three ninth grade classes in Bergen county. In total, the sample consists of 47 pupils. The main group of this group consists 41 of these pupils. The data pool mainly consists of three dictations that were conducted in all three groups. The pupils answered each dictation utilizing a different writing tool; one by hand, one on a computer with an error correction program, and one on a computer without an error correction program. Additionally, the pupils responded to a questionnaire. Therefore, I have been able to examine different kinds of orthographic errors in relation to several variables, for example gender, learning difficulties and attitudes relating to reading and writing. This was done to examine whether any patterns could be discovered concerning this type of orthographic errors in the selected sample, in addition to finding out whether there are any particular causes explaining why the use of certain writing tools, leads to more and/or less orthographic errors of this type among the pupils. The results of this examination showed that separation of compounds is the most common error type regarding compounds in the present sample. The data analysis also revealed that pupils make the most errors regarding combined words when writing by hand, while the pupils make the lowest degree of errors when utilizing a computer with an error correction program. The pupils’ also made more mistakes when they used a computer without an <b>error</b> <b>program,</b> than by using a computer with an <b>error</b> <b>program,</b> but still less errors than by handwriting. It must also be noted that the pupils’ amount of errors regarding compounds is varying. While some pupils had few errors regarding separating compounds, others had many. Even so, statistically significant results were found, showing that boys make more errors regarding combined words than girls...|$|E
40|$|Tyt. z ekranu tytułowego. Praca doktorska. Akademia Górniczo-Hutnicza im. Stanisława Staszica (Kraków), 2007. Bibliogr. Dostępna także w wersji drukowanej. Tryb dostępu: Internet. Different {{approaches}} to imaging the near surface velocity heterogeneities in seismic exploration, {{description of the}} applied programs, Promax’s programs for velocity model editing, seismic modeling, turning ray tracing, turning ray tomography, interactive first break picking and database operations, Fortran programs for direct and inverse problem of the head wave tomography, program #RAYEDH, # INVERSDH, auxiliary Fortran programs, program for conversion ASCII velocity files from ProMAXŇ to binary files and text SURFER files, program for conversion binary velocity files from # INVERSDH to text SURFER files, calculation RMSDV, Root Mean Square velocity <b>error,</b> <b>program</b> for conversion ASCII files with picks from ProMAXŇ to text FORTRAN format, program for 2 D, spatial, smoothing of velocity fields, statics calculations, turning ray tracing, graphical presentation, results of the solution of direct and inverse problem of the refraction tomography, ray approach and the wave approach to seismic wave propagation, their role in tomographic inversion, imaging of near surface velocity heterogeneities of the medium in wave pattern of acoustic modeling, solution of direct and inverse problem of the refraction tomography for selected models and statics estimation, two layer model with gradient medium over refractor, depth 176 m, 120 m, model of gradient half-space, two layer model with constant velocities, three layer model, four layer model, analysis {{of the results of}} direct and inverse problem solution for model data, tomographic inversion of first breaks on field record...|$|E
40|$|We {{describe}} a design of fault-tolerant features for the PANSAT communications satellite, a design which can address {{a wide variety}} of possible faults. We discuss system <b>errors,</b> <b>program</b> <b>errors,</b> and data errors, each subdivided into a variety of types. We discuss "acceptance tests " {{that can be used to}} detect faults, and the appropriate remediation methods for each type...|$|R
5000|$|When a <b>program</b> <b>error</b> {{occurs in}} Windows, the system {{searches}} for a <b>program</b> <b>error</b> handler. A <b>program</b> <b>error</b> handler deals with errors as they arise during {{the running of}} a program. If the system does not find a <b>program</b> <b>error</b> handler, the system verifies that the program is not currently being debugged and considers the error to be unhandled. The system then processes unhandled errors by looking in the registry for a <b>program</b> <b>error</b> debugger for which Dr. Watson is the default. A third-party debugger {{can also be used}} in place of Dr. Watson. The Watcom C Compiler includes a similar crash-analysis tool named [...] "Dr. Watcom".|$|R
50|$|Program {{analysis}} {{is the general}} problem of examining a program and determining key characteristics (such as the absence of classes of <b>program</b> <b>errors).</b> <b>Program</b> transformation {{is the process of}} transforming a program in one form (language) to another form.|$|R
40|$|Class of 2014 AbstractSpecific Aims: To compare {{two groups}} of {{automated}} dispensing technology {{and their impact on}} medication safety and costs at an inpatient pharmacy. Methods: A total of 784 medications were audited for Pyxis refill errors, 352 prior to and 432 post implementation of Boxpicker and the ATP High Speed Tablet Packager. Data were collected by obtaining refill reports for automated dispensing. Every other medication on the refill report was audited for errors in the corresponding location of the automated dispensing cabinet. The rate of reported errors was obtained from a self-reported <b>error</b> <b>program,</b> Patient Safety Net (PSN). Analysis related to costs included automated dispensing cabinet related inventory and costs associated with bulk repackaging. All data associated with costs were obtained from pharmacy financial records. Main Results: There {{was no significant difference in}} the Pyxis refill error rate between Pyxis PARx and Boxpicker (0. 00284 % versus 0. 00231 %, respectively, p = 0. 88). The total number of automated dispensing cabinet problems reported through Patient Safety Net transiently increased during and after implementation of new automated technology. Value of pharmacy inventory costs associated with automation was $ 674, 460 prior to and $ 594, 789 post implementation of technology. Bulk repackaging with the ATP High Speed Automatic Tablet Packager resulted in an estimated cost savings of $ 203, 400 annually. Conclusion: Implementation of Boxpicker and ATP High Speed Tablet Packager resulted in no significant change in Pyxis refill error rates, a transient increase in reported automated dispensing cabinet problems, a decrease in inventory costs, and savings associated with bulk repackaging...|$|E
40|$|This paper {{appeared}} in the Proceedings of the 2000 Command and Control Research and Technology Symposium, Monterey, CA, June 2000. We describe a design of fault-tolerant features for the PANSAT communications satellite, a design which can address {{a wide variety of}} possible faults. We discuss system <b>errors,</b> <b>program</b> <b>errors,</b> and data errors, each subdivided into a variety of types. We discuss "acceptance tests" {{that can be used to}} detect faults, and the appropriate remediation methods for each type...|$|R
50|$|If the Production error {{occurred}} due to <b>programming</b> <b>errors</b> then a request is {{created for the}} Development team to correct <b>programming</b> <b>errors.</b> Problem is identified, defined and root cause analysis is performed. The <b>programming</b> <b>error</b> is fixed using normal SDLC process - analysis/design/programming/QA/testing/release. The {{new version of the}} Production job/program is deployed and verified/validated.|$|R
40|$|We {{study the}} frequentist {{properties}} of confidence intervals computed by the method known to statisticians as the Profile Likelihood. It is {{seen that the}} coverage of these intervals is surprisingly good {{over a wide range}} of possible parameter values for important classes of problems, in particular whenever there are additional nuisance parameters with statistical or systematic <b>errors.</b> <b>Programs</b> are available for calculating these intervals. Comment: 6 figure...|$|R
40|$|In this paper, {{we report}} on recent {{progress}} {{in the area of}} language-based software dependability. We give examples of using advanced type systems for statically detecting non-trivial <b>programming</b> <b>errors</b> in <b>programs.</b> We have chosen examples that are particularly applicable to concurrent, distributed and modular (or component-based) systems. Key-words: concurrency, distributed systems, provable dependability, software verification, type systems, modularity, components, language constructs and features...|$|R
40|$|To appearInternational audienceThe BSP model (Bulk Synchronous Parallel) {{simplifies}} the constructionand evaluation of parallel algorithms, with its simplifiedsynchronization structure and cost model. Nevertheless, imperativeBSP programs can suffer from synchronization <b>errors.</b> <b>Programs</b> with textually aligned barriers are free from such errors,and this structure eases program comprehension. Replicated synchronization is a sufficient {{condition for the}} absence of such errors. We propose a simplified formalization of barrier inference as data flowanalysis, which verifies statically whether an imperative BSP program hasreplicated synchronization, which is a sufficient condition for textual barrier alignment...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedFor many <b>program</b> <b>errors</b> and <b>program</b> checkout problems, on-line techniques provide a promising method of attack. An approach developed {{in connection with}} time -sharing computer systems is examined. Then Program Trace, an on-line diagnostic program developed by the author for the CDC 1604 computer, and a Data Display Model DD 65 display and control console is presented and examined in detail. [URL] United States Nav...|$|R
40|$|One of {{the largest}} {{challenges}} in software development {{is to ensure that}} the software is correct. Almost all software that is complex enough to accomplish a useful task contains <b>programming</b> <b>errors.</b> Unfortunately, developers must allocate their time to various activities and often, they do not have enough time for searching <b>programming</b> <b>errors.</b> The goal of this dissertation is to support developers in finding <b>programming</b> <b>errors</b> despite a limited time budget. Therefore, we focus on program analyses with three properties. First, the analyses are automatic, that is, the only input required to analyze a program is the source code (or byte code) of the program itself. In particular, an automatic analysis does not rely on formal specifications or manually written test suites. Second, the analyses are precise, that is, they report warnings that are guaranteed to point to <b>programming</b> <b>errors</b> or that have a high chance of pointing to <b>programming</b> <b>errors,</b> instead of false positives. Third, the analyses can be applied to real-world software with low human and computational effort, that is, they provide developers a push button approach for existing code. Thi...|$|R
5000|$|Cross-application {{scripting}} exploits {{a similar}} kind of <b>programming</b> <b>error</b> ...|$|R
40|$|The 2010 CWE/SANS Top 25 Most Dangerous <b>Programming</b> <b>Errors</b> {{is a list}} of {{the most}} {{widespread}} and critical <b>programming</b> <b>errors</b> that can lead to serious software vulnerabilities. They are often easy to find, and easy to exploit. They are dangerous because they will frequently allow attackers to completely take ove...|$|R
50|$|If the {{business}} application error occurred due to <b>programming</b> <b>errors,</b> then a request is {{created for the}} application development team to correct <b>programming</b> <b>errors.</b> If {{the business}} user needs new features or functions in the business application, then the required analysis/design/programming/testing/release is planned and {{a new version of}} the business software is deployed.|$|R
40|$|Investigation {{into the}} {{problems}} novices have with programming {{enables us to}} understand their obstacles and explore possible solutions. Most novice programmer errors are related to: language construct misconceptions, plan composition <b>errors,</b> <b>programming</b> environments, and inability to get assistance. Novice programmer difficulties are also attributed to textual and linear representations of programming languages, lack of problem solving skills, and poor understanding of OOP. Web can be incorporated to visually represent language constructs, plan integration, and program execution. Utilization of plans enhances problem solving ability and facilitates the correct implementation of programs. Web environments {{have contributed to the}} effective teaching and learning of programming...|$|R
50|$|If #XPCK {{finishes}} without <b>error</b> {{then the}} <b>program</b> #HWLD is run.|$|R
50|$|Due {{to human}} handler <b>errors</b> and <b>program</b> <b>errors,</b> Hydra did not fare {{well in the}} June 2005 PAL/CSS Freestyle Chess Tournament, an online tournament where players are allowed to access any and all {{resources}} to them, including computer engines, databases, as well as human grandmasters. Two versions of Hydra participated in the tournament- Hydra Chimera (without human intervention) scored 3½/8, and Hydra Scylla (with human intervention) scored 4/8. Neither version of Hydra qualified for the quarter-finals.|$|R
40|$|The use of {{disciplinary}} measures {{to deal with}} student behavior brings with it the responsibility to educate the student, not only academically, but socially. It is the social or behavioral component of education that is lacking in most Texas Disciplinary Alternative Education Program (DAEP) settings. The current DAEP model does not provide the means nor the method by which students? behavior can be remediated, so students? need for learning positive behaviors goes unmet. The Texas Education Code (TEC Chap. 37) mandates that DAEPs provide instruction in ?self-discipline,? {{but it does not}} specify how this instruction is to be delivered. In addition, it does not provide for oversight or evaluation, so these requirements may be inconsistently fulfilled, or not fulfilled at all. Many of the students who attend DAEPs have behavioral and emotional difficulties, and are considered at risk for academic failure. Although there have been programs to compensate for and remediate academic skill deficits, there is not one comprehensive program to help students learn appropriate behaviors and overcome risk factors. The Thinking <b>Errors</b> <b>program</b> was developed to help students become aware that the choices they make every day are influenced by poor patterns of thinking. It is designed to help students correct these thinking patterns and learn {{to take responsibility for their}} own decisions and behaviors. The purpose of this study is to evaluate the effectiveness of the Thinking <b>Errors</b> <b>program</b> in helping students change their behavior...|$|R
40|$|Computer system detects and {{displays}} actual and potential <b>errors</b> in <b>programs</b> for computer-controlled electron-beam welder. Uses personal computer, separate from welding computer. Programmed specifically to highlight <b>errors</b> in welding <b>program.</b> Eliminates need for preweld full-power test run reducing checkout time to about half hour. Assures much higher quality, damage-free welding. Used {{to create and}} edit new programs for welder. Control computer thereby free for production. Useful for checking programs for such other computer-controlled equipment as inertia welders, robots, machine tools, and heat treaters...|$|R
2500|$|Critical <b>Programming</b> <b>Errors</b> {{can also}} be {{classified}} per CISQ Characteristics. Basic example below: ...|$|R
40|$|Three {{integrity}} {{measures are}} introduced: contamination, channel suppression, and program suppression. Contamination {{is a measure}} of how much untrusted information reaches trusted outputs; it is the dual of leakage, which {{is a measure of}} information-flow confidentiality. Channel suppression is a measure of how much information about inputs to a noisy channel is missing from channel outputs. And program suppression is a measure of how much information about the correct output of a program is lost because of attacker influence and implementation <b>errors.</b> <b>Program</b> and channel suppression do not have confidentiality duals. As a case study, the relationship between quantitative integrity, confidentiality, and database privacy is examined. 1...|$|R
50|$|Business {{applications}} {{can fail}} when an unexpected error occurs. This error could occur {{due to a}} data error (an unexpected data input or a wrong data input), an environment error (an in frastructure related <b>error),</b> a <b>programming</b> <b>error,</b> a human error or a work flow error. When a business application fails one needs to fix the business application error {{as soon as possible}} so that the business users can resume their work. This work of resolving business application errors is known as business application support.|$|R
2500|$|Option {{types and}} Result types, {{alternative}} ways of handling <b>errors</b> in functional <b>programming</b> without exceptions ...|$|R
5000|$|In memory <b>errors,</b> the {{faulting}} <b>program</b> accesses {{memory that}} it should not access. Examples include: ...|$|R
5000|$|Memory {{corruption}} {{is one of}} the most intractable class of <b>programming</b> <b>errors,</b> for two reasons: ...|$|R
5000|$|Option {{types and}} Result types, {{alternative}} ways of handling <b>errors</b> in functional <b>programming</b> without exceptions ...|$|R
5000|$|... {{processing}} all hardware interrupts including page-faults {{and program}} interrupts due to <b>errors</b> in job <b>programs,</b> ...|$|R
5000|$|While {{they are}} powerful, {{it is easy}} to make <b>programming</b> <b>errors</b> that damage the database.|$|R
5000|$|These in turn {{are often}} caused by <b>programming</b> <b>errors</b> {{that result in}} invalid memory access: ...|$|R
5000|$|Dawn entered {{safe mode}} {{due to a}} <b>programming</b> <b>error</b> during its February 17, 2009 Mars flyby.|$|R
40|$|Advanced static-analysis {{tools for}} finding <b>programming</b> <b>errors</b> {{have become very}} popular recently. These detect many common generic <b>programming</b> <b>errors</b> such as null pointer dereferences, buffer overruns, and race conditions. Most major static-analysis tools also provide an {{interface}} {{that can be used}} to find domain-specific errors. This paper describes how custom domain-specific checkers can be used to improve software quality in complex embedded systems. 1...|$|R
40|$|<b>Programming</b> <b>errors</b> found early are the cheapest. Tools {{applying}} {{to the early}} stage of code development exist but either they suffer from false positives (“noise”) or they require strong user interaction. We propose to avoid this deficiency by defining {{a new class of}} <b>errors.</b> A <b>program</b> fragment is doomed if its execution will inevitably fail, in whatever state it is started. We use a formal verification method to identify such errors fully automatically and, most significantly, without producing noise. We report on preliminary experiments with a prototype tool...|$|R
5000|$|Eliminating {{opportunities}} for <b>programming</b> <b>errors</b> and divergent {{interpretations of the}} specification, esp. between IP and SoC teams ...|$|R
