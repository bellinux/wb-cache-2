33|234|Public
25|$|When {{opened by}} a text editor, human-readable content is {{presented}} to the user. This often consists of the file's plain text visible to the user. Depending on the application, control codes may be rendered either as literal instructions acted upon by the editor, or as visible <b>escape</b> <b>characters</b> that can be edited as plain text. Though there may be plain text in a text file, control characters within the file (especially the end-of-file character) can render the plain text unseen by a particular method.|$|E
50|$|Hamilton {{differs from}} other Unix shells {{in that it}} follows Windows {{conventions}} instead of Unix conventions for filename slashes, <b>escape</b> <b>characters,</b> etc.|$|E
50|$|MARC-8 uses {{a variant}} of the ISO-2022 encoding. It uses <b>escape</b> <b>characters</b> to {{represent}} characters beyond the 7-bit ASCII range of characters.|$|E
50|$|In {{computing}} and telecommunication, an <b>escape</b> <b>character</b> is {{a character}} which invokes an alternative interpretation on subsequent characters in a <b>character</b> sequence. An <b>escape</b> <b>character</b> is a particular case of metacharacters. Generally, the judgment of whether something is an <b>escape</b> <b>character</b> or not depends on context.|$|R
5000|$|JavaScript {{uses the}} \ (backslash) as an <b>escape</b> <b>character</b> for: ...|$|R
5000|$|Among other things, {{it must be}} {{possible}} to encode the character that normally terminates the string constant, plus {{there must be some}} way to specify the <b>escape</b> <b>character</b> itself. <b>Escape</b> sequences are not always pretty or easy to use, so many compilers also offer other means of solving the common problems. Escape sequences, however, solve every delimiter problem and most compilers interpret escape sequences. When an <b>escape</b> <b>character</b> is inside a string literal, it means [...] "this is the start of the escape sequence". Every escape sequence specifies one character which is to be placed directly into the string. The actual number of characters required in an escape sequence varies. The <b>escape</b> <b>character</b> is on the top/left of the keyboard, but the editor will translate it, therefore it is not directly tapeable into a string. The backslash is used to represent the <b>escape</b> <b>character</b> in a string literal.|$|R
5000|$|One {{method for}} {{avoiding}} delimiter collision {{is to use}} <b>escape</b> <b>characters.</b> From a language design standpoint, these are adequate, but they have drawbacks: ...|$|E
50|$|It {{was also}} popular in USENET networks, {{which in the}} late 1980s and early 1990s, {{generally}} did not allow transmission of 8-bit characters or <b>escape</b> <b>characters.</b>|$|E
50|$|Usual ways to <b>escape</b> <b>characters</b> in regex {{is using}} the {{backslash}} symbol (\). Another way is a double hyphen (--) which makes a total escaping of a row.|$|E
2500|$|... * / : < > ? \ | Windows/MS-DOS has no shell <b>escape</b> <b>character</b> ...|$|R
5000|$|... {{produces}} an ASCII <b>escape</b> <b>character.</b> It {{may be used}} to exit menus or modes.|$|R
5000|$|Escaped string literal (quote, {{followed}} by <b>escaped</b> <b>characters</b> or non-quotes, {{ending in a}} quote): [...] "(\.|^\")*" ...|$|R
5000|$|Generally, {{an escape}} {{character}} {{is not a}} particular case of (device) control characters, nor vice versa. If we define control characters as non-graphic, or as having a special meaning for an output device (e.g. printer or text terminal) then any escape character for this device is a control one. But <b>escape</b> <b>characters</b> used in programming (such as the backslash, [...] "\") are graphic, hence are not control characters. Conversely most (but not all) of the ASCII [...] "control characters" [...] have some control function in isolation, therefore are not <b>escape</b> <b>characters.</b>|$|E
5000|$|In many {{programming}} languages, strings are delimited using quotes. In some cases, <b>escape</b> <b>characters</b> (and other methods) {{are used}} to avoid delimiter collision. Example : [...] "He said : \"Hello\"".|$|E
50|$|This {{encoding}} scheme allows the easy mixing of 7-bit ASCII and 8-bit Japanese {{without the need}} for the <b>escape</b> <b>characters</b> employed by ISO-2022-JP, which is based on the same character set standards.|$|E
5000|$|Stropping (syntax) - in some {{conventions}} {{a leading}} character (such as an apostrophe) functions as an <b>escape</b> <b>character</b> ...|$|R
5000|$|A {{vertical}} tab (VT) also exists and has ASCII decimal character code 11 ( [...] or [...] ), <b>escape</b> <b>character</b> [...]|$|R
5000|$|Windows PowerShell : Uses the backquote as the <b>escape</b> <b>{{character}}.</b> For example, a newline {{character is}} denoted [...] Most common programming languages use a backslash as the <b>escape</b> <b>character</b> (e.g., [...] ), but because Windows allows the backslash as a path separator, it is impractical for PowerShell to use backslash {{for a different}} purpose. Two backticks produce the [...] character itself. For example, the nullable boolean of [...]NET is specified in PowerShell as [...]|$|R
50|$|In {{computer}} programming, leaning toothpick syndrome (LTS) is {{the situation}} in which a quoted expression becomes unreadable because it contains a large number of <b>escape</b> <b>characters,</b> usually backslashes ("\"), to avoid delimiter collision.|$|E
50|$|In {{contrast}} to escape sequences and <b>escape</b> <b>characters,</b> padding delimiters provide yet {{another way to}} avoid delimiter collision. Visual Basic, for example, uses double quotes as delimiters. This is similar to escaping the delimiter.|$|E
5000|$|Unlike {{traditional}} HTML {{with its}} large range of character entity references, in XML {{there are only}} five predefined character entity references. These are used to <b>escape</b> <b>characters</b> that are markup sensitive in certain contexts: ...|$|E
50|$|XES is {{sometimes}} known as UDK, from User Defined Key, the character which introduces the printer command, usually the <b>escape</b> <b>character</b> (ESC).|$|R
50|$|Some {{programming}} languages {{also provide}} {{other ways to}} represent special characters in literals, without requiring an <b>escape</b> <b>character</b> (see e.g. delimiter collision).|$|R
5000|$|Quoted-printable, which encodes 8-bit {{data into}} 7-bit data of limited line lengths, uses the equals sign [...] "=" [...] as an <b>escape</b> <b>character.</b>|$|R
50|$|A control {{character}} is a character that, in isolation, has some control function, such as carriage return (CR). Escape sequences, by contrast, consist {{of one or more}} <b>escape</b> <b>characters</b> which change the interpretation of subsequent characters.|$|E
50|$|An {{alternative}} to using unicode <b>escape</b> <b>characters</b> for non-Latin-1 character in ISO 8859-1 character encoded Java *.properties files {{is to use}} the JDK's XML Properties file format which by default is UTF-8 encoded, introduced starting with Java 1.5.|$|E
5000|$|... text can be {{rendered}} unreadable when littered with numerous <b>escape</b> <b>characters,</b> a problem {{referred to as}} leaning toothpick syndrome (due to use of \ to escape / in Perl regular expressions, leading to sequences such as [...] "\/\/"); ...|$|E
5000|$|Control codes {{generated}} by the shell <b>escape</b> <b>character</b> , although the sequence [...] {{can be used to}} represent a single [...] character in the filename.|$|R
50|$|Note the use {{of double}} {{backslash}}es, because C++ uses backslash as an <b>escape</b> <b>character.</b> The C++11 raw string feature {{could be used to}} avoid the problem.|$|R
5000|$|QP {{works by}} using the equals sign [...] as an <b>escape</b> <b>character.</b> It also limits line length to 76, as some {{software}} has limits on line length.|$|R
5000|$|Escape {{sequences}} {{are similar}} to <b>escape</b> <b>characters,</b> except they usually consist {{of some kind of}} mnemonic instead of just a single character. One use is in string literals that include a doublequote (") character. For example in Perl, the code: ...|$|E
50|$|One {{disadvantage}} of Ascii85 is that encoded data may contain <b>escape</b> <b>characters</b> such as backslash and quote, which have special meaning in many programming languages {{and in some}} text-based protocols. Other base-85 encodings like Z85 {{are designed to be}} safe in source code.|$|E
5000|$|The string {{constant}} [...] {{provides a}} description of the output, with placeholders marked by [...] <b>escape</b> <b>characters,</b> to specify both the relative location and the type of output that the function should produce. The return value yields the number of printed characters.|$|E
5000|$|In many {{programming}} languages, an <b>escape</b> <b>character</b> also forms some escape sequences {{which are}} referred to control characters. For example, line break has an escape sequence of [...]|$|R
50|$|Some {{of these}} {{encoding}} (quoted-printable and percent encoding) {{are based on}} a set of allowed characters and a single <b>escape</b> <b>character.</b> The allowed characters are left unchanged, while all other characters are converted into a string starting with the <b>escape</b> <b>character.</b> This kind of conversion allows the resulting text to be almost readable, in that letters and digits are part of the allowed characters, and are therefore left as they are in the encoded text.These encodings produce the shortest plain ASCII output for input that is mostly printable ASCII.|$|R
50|$|Automatic self configuration: Using Link Control Protocol {{it has to}} {{negotiate}} protocol features like Address-and-Control-Field-Compression (ACFC), <b>escaped</b> <b>characters,</b> and the compression, encryption (like MPPE) and authentication methods to use.|$|R
