5|2|Public
5000|$|FORTRAN (<b>FORmula</b> <b>TRANslator),</b> a compiler, runtime package, and [...] "load and go" [...] OS for the {{scientific}} language compiler.|$|E
5000|$|... 1957: FORTRANIBM revolutionizes {{programming}} {{with the}} introduction of FORTRAN (<b>Formula</b> <b>Translator),</b> which soon becomes the most widely used computer programming language for technical work. FORTRAN is still the basis for many important numerical analysis programs.|$|E
50|$|COMTRAN (COMmercial TRANslator) is {{an early}} {{programming}} language developed at IBM. It was intended as the business programming equivalent of the scientific programming language FORTRAN (<b>FORmula</b> <b>TRANslator).</b> It served {{as one of the}} forerunners to the COBOL language. Developed by Bob Bemer, in 1957, the language was the first to feature the programming language element known as a picture clause.|$|E
40|$|In {{this paper}} {{prototype}} assistant for the formalization of requirements is presented, which translates Natural Language expressions into Temporal Logic <b>formulae.</b> The <b>translator</b> is realized using a general development environment for Natural Language processing {{and it has}} been interfaced with a verification environment of behavioural properties on reactive systems...|$|R
40|$|In {{this paper}} {{we present a}} {{prototype}} translator from Natural Language expressions into Temporal Logic <b>formulae.</b> The <b>translator</b> is realized using a general development environment for Natural Language processing {{and it has been}} interfaced with a verification environment of behavioural properties on concurrent systems specified by process algebras. This too 1 can be viewed as an aid to override the many imprecisions that frequently occur in the passage from informal requirements expressed by means of Natural Language expressions to Temporal Logic formulae...|$|R
40|$|SPIRAL is a {{generator}} for libraries of fast software implementations of linear signal processing transforms. These libraries are {{adapted to the}} computing platform and can be re-optimized as the hardware is upgraded or replaced. This paper describes {{the main components of}} SPIRAL: the mathematical framework that concisely describes signal transforms and their fast algorithms; the formul{{a generator}} that captures at the algorithmic level the degrees of freedom in expressing a particular signal processing transform; the <b>formula</b> <b>translator</b> that encapsulates the compilation degrees of freedom when translating a specific algorithm into an actual code implementation; and, finally, an intelligent search engine that finds within the large space of alternative formulas and implementation...|$|E
40|$|Abstract The paper {{describes}} SPIRAL, {{a generator}} of libraries for fast software implementations of signal processing transforms. These libraries are {{adapted to the}} computing platform and can be re-optimized as the hardware is upgraded or replaced. The three key components of SPIRAL are: a formula generator that captures at the algorithmic level the degrees of freedom in expressing a particular signal processing transform; a <b>formula</b> <b>translator</b> that encapsulates the compilation degrees of freedom when translating a specific algorithm into an actual code implementation; and, finally, an intelligent search engine that finds within the large space of alternative formulas and implementations the &quot;best &quot; match to the given computing platform. We present experiments that demonstrate SPIRAL's excellent performance. 1 Introduction Digital signal processing poses {{one of the most}} data-intensive and performance-critical computational challenges for developers of high-performance software. An ideal implementation is adapted to the given computing platform in order to achieve optimal performance...|$|E

