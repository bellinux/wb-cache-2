173|99|Public
5|$|I-195 curves {{southeast}} and passes under the BWI Trail {{ahead of its}} partial cloverleaf interchange with MD 170 (Aviation Boulevard), {{also known as the}} Airport Loop. The Airport Loop provides access to long-term parking lots, the consolidated rental car facility, hotels, cargo and general aviation facilities, and the BWI Rail Station. The circumferential highway also provides <b>indirect</b> <b>access</b> to I-97 for traffic heading to Annapolis or the Chesapeake Bay Bridge. At this interchange, I-195 ends and the roadway continues as MD 995A towards the entrance to BWI Airport.|$|E
5|$|The Poinciana Parkway is a two-lane, controlled-access toll highway, {{designed}} to be expanded to a four-lane expressway, that runs between the Polk-Osceola County line and the Cypress Parkway (CR 580) in Poinciana, with a large section crossing undeveloped swampland. The highway is contiguous with Kinney Harmon Road in Polk County, which connects the Poinciana Parkway with US 17/US 92 in Loughman. Across US 17/92, the road continues as the Ronald Reagan Parkway (former County Road 54), which provides <b>indirect</b> <b>access</b> from the Poinciana Parkway to Interstate 4.|$|E
25|$|In January 2000, the <b>indirect</b> <b>access</b> {{fixed-line}} telephone service was launched, using Portugal Telecom's infrastrutctures and the 1091 prefix. It used the brands toq 1091 (for home customers; now discontinued {{in favour of}} Vodafone at Home/Vodafone Casa) and Voz Pri (for business customers; still used {{as part of the}} business solutions).|$|E
5000|$|<b>Indirect</b> {{register}} <b>access</b> (address register, {{data register}} in mapped memory) ...|$|R
40|$|Synchronizing Personal Digital Assistants with host {{systems can}} result in <b>indirect</b> <b>accesses</b> that bypass {{security}} requirements. In this {{paper we propose a}} framework for analyzing the security vulnerabilities that can arise from synchronization. This framework provides us with the basis of a paradigm for analyzing the access-control vulnerabilities of systems comprised of secure and non-secure components...|$|R
40|$|The use of {{pointers}} presents {{serious problems}} for software productivity tools for software understanding, restructuring, and testing. Pointers enable <b>indirect</b> memory <b>accesses</b> through pointer dereferences, {{as well as}} indirect procedure calls (e. g., through function pointers in C). Such <b>indirect</b> <b>accesses</b> and calls can be disambiguated with pointer analysis. In this paper we evaluate the precision of one specific pointer analysis (the FA pointer analysis by Zhang et al.) {{for the purposes of}} call graph construction for C programs with function pointers. The analysis is incorporated in a production-strength code-browsing tool from Siemens Corporate Research in which the program call graph is used as a primary tool for code understanding. The FA pointe...|$|R
25|$|North Carolina Highway 610 (NC 610) is {{a primary}} state highway in the U.S. state of North Carolina. The highway connects Main Street in {{southern}} High Point with North Carolina Highway 62 east of Archdale. The highway provides <b>indirect</b> <b>access</b> between High Point and Interstate 85/Interstate 74. The current highway was established in 1930 and its routing has remained unchanged since.|$|E
500|$|North of Allentown, {{the route}} runs through more {{farmland}} before passing under the Blue Mountain in the Lehigh Tunnel and entering Carbon County in the Pocono Mountains. Here, I-476 crosses over the Lehigh River and interchanges with U.S. 209 near Lehighton. Continuing through mountainous areas, {{it has an}} E-ZPass-only exit for Pennsylvania Route 903 and cuts through Hickory Run State Park before interchanging with Interstate 80 and Pennsylvania Route 940 just {{to the north of}} the state park. The route continues through mountainous terrain, heading into Luzerne County and coming to an interchange with Pennsylvania Route 115 in Bear Creek that provides access to nearby Wilkes-Barre. The route comes to a toll barrier near Pittston that marks the northern end of the toll ticket system in the Northeast Extension. A short distance later, an interchange with Pennsylvania Route 315 provides <b>indirect</b> <b>access</b> to Interstate 81 and Scranton. Past this interchange, I-476 enters Lackawanna County and crosses built-up areas of the Wyoming Valley as it skirts around Scranton, with a mainline toll plaza and an exit to Keyser Avenue. North of Scranton in Clarks Summit, the route crosses a valley on the , [...] John J. Fitzgerald Bridge, comes to a hairpin curve, and ends at an interchange with connections to I-81, US6 and US11. US 6 joins the turnpike for less than [...] to connect between I-81 and US 11. As this is north of the Clarks Summit toll plaza, no toll is collected on this short segment.|$|E
2500|$|The Green Line (opened 1995) is a {{light rail}} line running between Redondo Beach and Norwalk, largely in the median of the 105 Freeway. It {{provides}} <b>indirect</b> <b>access</b> to Los Angeles International Airport via a shuttle bus.|$|E
5000|$|<b>Indirect</b> memory <b>access</b> {{using the}} H and L {{registers}} (HL) as a 14-bit data pointer (the upper two bits are ignored).|$|R
40|$|Real {{parallel}} applications find little {{benefits from}} code portability {{that does not}} guarantee acceptable efficiency. In this paper, we describe the new features of a framework that allows the development of Single Program Multiple Data (SPMD) applications adaptable to different distributed-memory machines, varying from traditional parallel computers to networks of workstations. Special programming primitives providing <b>indirect</b> <b>accesses</b> to the platform and data domain guarantee code portability and open the way to runtime optimizations carried out by a scheduler and a runtime support...|$|R
40|$|Bitwise instructions, {{loops and}} <b>indirect</b> data <b>access</b> pose {{difficult}} {{challenges to the}} verification of microcontroller programs. In particular, {{it is necessary to}} show that an indirect write does not mutate registers, which are indirectly addressable. To prove this property, among others, this paper presents a relational binary-code semantics and details how this can be used to compute program invariants in terms of bit-level congruences. Moreover, it demonstrates how congruences can be combined with intervals to derive accurate ranges, as well as information about strided <b>indirect</b> memory <b>accesses...</b>|$|R
2500|$|Pennsylvania Route 214 (PA 214) is an [...] {{state highway}} located in York County, Pennsylvania. [...] The western {{terminus}} is at PA 616 in Seven Valleys. [...] The eastern terminus is at PA 74 in Dallastown. PA 214 is a two-lane undivided road {{that runs through}} rural areas {{to the south of}} York. Along the way, the route passes through Loganville, where it has <b>indirect</b> <b>access</b> to Interstate 83 (I-83). PA 214 was designated between PA 616 in Seven Valleys and PA 74 in Dallastown in the 1960s. In 2009, the route was shifted to bypass West Ore Street through the western portion of Loganville to the north in order to provide more direct access to I-83.|$|E
5000|$|Connectivity and legacy voice services: Leased lines, <b>Indirect</b> <b>access,</b> direct access, special numbers, etc.|$|E
50|$|Exit 105 {{southbound}} in Eatontown south had a ramp to Wayside Road {{added in}} 2017, providing (<b>indirect)</b> <b>access</b> to Route 18.|$|E
40|$|Applications that {{manipulate}} sparse data structures contain memory reference {{patterns that}} are un-known at compile time due to <b>indirect</b> <b>accesses</b> such as A[B[i]]. To exploit parallelism and improve locality in such applications, prior work {{has developed a}} number of run-time reordering transformations (RTRTs). This paper presents the Sparse Polyhedral Framework (SPF) for specifying RTRTs and com-positions thereof and algorithms for automatically generating efficient inspector and executor code to implement such transformations. Experimental {{results indicate that the}} performance of automatically generated inspectors and executors competes with the performance of hand-written ones in some cases. ...|$|R
40|$|The use of {{pointers}} creates {{serious problems}} for optimizing compilers and software engineering tools. Pointers enable <b>indirect</b> memory <b>accesses</b> through pointer dereferences, {{as well as}} indirect procedure calls (e. g., through function pointers in C). Such <b>indirect</b> <b>accesses</b> and calls can be disambiguated with pointer analysis. In this paper we evaluate the precision of a pointer analysis by Zhang et al. [17] {{for the purposes of}} call graph construction for C programs with function pointers. The analysis uses an inexpensive, almost-linear, flow- and context-insensitive algorithm. To measure analysis precision, we compare the call graph computed by the analysis with the most precise call graph obtainable by a large category of pointer analyses. Surprisingly, for all our data programs the analysis from [17] achieves the best possible precision. This result indicates that for the purposes of call graph construction, even inexpensive analyses can provide very good precision, and therefore the use of more expensive analyses may not be justified...|$|R
40|$|<b>Indirect</b> memory <b>accesses,</b> where a load is fed {{by another}} load, are {{ubiquitous}} because of rich data structures and sophisticated software conventions, {{such as the}} use of linkage tables and position independent code. Unfortunately, they can be costly: if both loads miss, two round trips to memory are required even though the role of the first load is often limited to fetching the address of the second load. To reduce the total latency of such <b>indirect</b> <b>accesses,</b> a new instruction called load squared is introduced. A load squared does two fetches, the first fetch reading the target address of the second. (An offset is optionally added to the result of the first fetch.) The load squared operation is performed by memory-side logic (typically, the memory controller if it isn’t located on the main processor chip). In this study, load squared is not an architecturally visible instruction: the micro-architecture transparently decides which loads should be replaced by loads squared. We show that performance is sometimes improved significantly, and never degraded. 1...|$|R
50|$|Bogue Inlet Drive (Emerald Isle)- Provides {{access to}} Bogue Inlet Pier in Emerald Isle, {{as well as}} <b>indirect</b> <b>access</b> to the soundfront marina.|$|E
5000|$|USBs for Cuba is launched: USBs {{have given}} <b>indirect</b> <b>access</b> to Internet {{to a small}} number of Cubans. The program USBs for Cuba aims to {{increase}} that number.|$|E
50|$|The {{notation}} of HFTP {{was introduced}} in Lftp client to distinguish between plain FTP protocol and <b>indirect</b> <b>access</b> via HTTP proxy. Lftp supports hftp URL scheme to select HFTP protocol explicitly.|$|E
40|$|The use of {{pointers}} presents {{serious problems}} for software productivity tools for software understanding, restructuring, and testing. Pointers enable <b>indirect</b> memory <b>accesses</b> through pointer dereferences, {{as well as}} indirect procedure calls (e. g., through function pointers in C). Such <b>indirect</b> <b>accesses</b> and calls can be disambiguated with pointer analysis. In this paper we evaluate the precision of a pointer analysis by Zhang et al. [22, 21] {{for the purposes of}} call graph construction for C programs with function pointers. The analysis is incorporated in a production-strength codebrowsing tool from Siemens Corporate Research in which the program call graph is used as a primary tool for code understanding. The analysis by Zhang et al. uses an inexpensive, almostlinear, flow- and context-insensitive algorithm. To measure analysis precision, we compare the call graph constructed by this analysis with the most precise call graph obtainable by a large category of existing pointer analyses. Surprisingly, for all our data programs the analysis from [22, 21] achieves the best possible precision. This result indicates that for the purposes of call graph construction, even inexpensive pointer analyses can provide very good precision, and therefore the use of more expensive analyses may be unnecessary. ...|$|R
40|$|In {{languages}} like C, {{the use of}} pointers creates seriousproblems {{for software}} productivity tools that use some form of semantic code analysis {{for the purposes of}} software un-derstanding, restructuring, and testing. Pointers enable <b>indirect</b> memory <b>accesses.</b> For example, consider the followingsequence of statements...|$|R
5000|$|... 1992 [...] "Hegemony on a shoestring: <b>indirect</b> {{rule and}} <b>access</b> to {{resources}} in Africa," [...] Africa 62, 3:327-55.|$|R
50|$|Transportation to Metropark in New Jersey allows {{access to}} Amtrak and New Jersey Transit routes. Bus {{service to the}} Port Authority Bus Terminal {{provides}} <b>indirect</b> <b>access</b> to JFK, LaGuardia and other transit options in New York City.|$|E
5000|$|The Green Line (opened 1995) is a {{light rail}} line running between Redondo Beach and Norwalk, largely in the median of the 105 Freeway. It {{provides}} <b>indirect</b> <b>access</b> to Los Angeles International Airport via a shuttle bus.|$|E
50|$|Hart Crag is most {{commonly}} climbed {{as part of}} the Fairfield horseshoe. This popular fellwalk makes a circuit of Rydale, claiming 8 Wainwrights over a distance of 10 miles. Starting at Bridgend, Hartsop Above How provides another means of <b>indirect</b> <b>access.</b>|$|E
40|$|This paper {{describes}} new compiler and run-time {{techniques to}} handle array accesses involving several levels of indirection {{such as those}} arising in sparse and irregular problems. The lack of information at compile-time in such problems has typically required the insertion of expensive runtime support. We propose new data distributions {{which can be used}} with standard sparse matrix representations to achieve much more efficient resolution of indirections at runtime. Unlike previous methods, our techniques require only a single communication phase to access non-local data, even in the presence of multiple levels of indirections. Likewise, the methods presented here are novel in that they allow the compiler to use the semantic relations of the array elements involved in the <b>indirect</b> <b>accesses</b> to perform a number of optimizations...|$|R
2500|$|... intraosseous {{infusion}} (into {{the bone}} marrow) is, in effect, an <b>indirect</b> intravenous <b>access</b> because {{the bone marrow}} drains directly into the venous system. This route is occasionally used for drugs and fluids in emergency medicine and pediatrics when intravenous access is difficult. Recreationally the colloquial term 'boning' is used.|$|R
40|$|In {{this paper}} we {{describe}} efficient symbolic evaluation techniques {{to compute the}} values of variables and symbolic expressions, and to determine the condition under which control flow reaches a program statement at compile time. Computations are represented as algebraic expressions over the input data which maintains the crucial relationship between input data and the resulting analysis information. Our symbolic evaluation techniques comprise accurate modeling of assignment and conditional statements, loops, recurrences, arrays (including <b>indirect</b> <b>accesses)</b> and procedures. Efficiency and accuracy is highly improved by aggressive usage of simplification techniques. Examples including program verification, dependence analysis, array privatization, communication vectorization, and elimination of redundant communication are used to illustrate how our symbolic evaluation techniques support program optimization {{in the context of}} a distributed memory parallelizing compiler. 1 Introduction I [...] ...|$|R
50|$|The PDP-8 was {{optimized}} for simplicity of design. Compared to more complex machines, unnecessary features were removed, and logic was shared when possible. Instructions used autoincrement, autoclear and <b>indirect</b> <b>access</b> {{to increase the}} software's speed, reduce memory use and substitute inexpensive memory for expensive registers.|$|E
50|$|This {{junction}} was {{the original}} western terminus of the road. It provides {{direct access to the}} suburb of Baberton and <b>indirect</b> <b>access</b> to the A70, for Lanark, or the centre of Edinburgh. This junction offers only connections to and from the eastern stretch of the A720.|$|E
50|$|In January 2000, the <b>indirect</b> <b>access</b> {{fixed-line}} telephone service was launched, using Portugal Telecom's infrastrutctures and the 1091 prefix. It used the brands toq 1091 (for home customers; now discontinued {{in favour of}} Vodafone at Home/Vodafone Casa) and Voz Pri (for business customers; still used {{as part of the}} business solutions).|$|E
40|$|Nowadays the {{performance}} gap between processors and main memory makes an efficient {{usage of the}} memory hierarchy necessary for good program performance. Several techniques have been proposed for this purpose. Nevertheless most of them consider only regular access patterns, while many scientific and numerical applications give place to irregular patterns. A typical case is that of <b>indirect</b> <b>accesses</b> due {{to the use of}} compressed storage formats for sparse matrices. This paper describes an analytic approach to model both regular and irregular access patterns. The application modeled is an optimized sparse matrix-dense matrix product algorithm with several levels of blocking. Our model can be directly applied to any memory hierarchy consisting of K- way associative caches. Results are shown for several current microprocessor architectures. Keywords: Sparse matrix, irregular computation, cache performance, memory hierarchy, probabilistic analytical model. 1 Introduction Despit [...] ...|$|R
5000|$|One side {{benefit is}} that {{compilations}} are faster because the header file changes less often. Note, possible disadvantage of d-pointer pattern is <b>indirect</b> member <b>access</b> through pointer (in example, pointer to object in dynamic storage), which is sometimes slower than access to plain, not-a-pointer member. The d-pointer is heavily {{used in the}} Qt [...] and KDE libraries.|$|R
40|$|Real {{parallel}} applications find little {{benefits from}} code portability {{that does not}} guarantee acceptable efficiency. In this paper, we describe the new features of a framework that allows the development of Single Program Multiple Data (SPMD) applications adaptable to different distributed-memory machines, varying from traditional parallel computers to networks of workstations. Special programming primitives providing <b>indirect</b> <b>accesses</b> to the platform and data domain guarantee code portability and open the way to runtime optimizations carried out by a scheduler and a runtime support. 1 Introduction The SPMD paradigm is the most widely adopted model for a large class of problems. However, this programming paradigm does not facilitate portability because it requires {{the choice of a}} specific domain decomposition, and the insertion of communications and parallel primitives in a decomposition dependent way. If we want a parallel application to be portable with efficiency (perfor- mance [...] ...|$|R
