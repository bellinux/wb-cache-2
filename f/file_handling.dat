124|310|Public
25|$|Native {{handling}} of snapshots and backup/replication {{which can be}} made efficient by integrating the volume and <b>file</b> <b>handling.</b> ZFS can routinely take snapshots several times an hour of the data system, efficiently and quickly. (Relevant tools are provided at a low level and require external scripts and software for utilization).|$|E
50|$|User-friendlier <b>file</b> <b>handling</b> with {{multiple}} file uploads.|$|E
50|$|<b>File</b> <b>handling</b> {{features}} include: Project Manager, Git/SVN/CVS version control.|$|E
40|$|Each file on an NFS server {{is uniquely}} {{identified}} by a persistent <b>file</b> <b>handle</b> {{that is used}} whenever a client performs any NFS operation. NFS <b>file</b> <b>handles</b> reveal significant amounts {{of information about the}} server. If attackers can sniff the <b>file</b> <b>handle,</b> then {{they may be able to}} obtain useful information. For example, the encoding used by a <b>file</b> <b>handle</b> indicates which operating system the server is running. The fields of the <b>file</b> <b>handle</b> contain information such as the date that the file system was createdâ€”often the same time that the OS was installed. Since an NFS <b>file</b> <b>handle</b> contains relatively little random data, it is not difficult to guess. If attackers can guess a <b>file</b> <b>handle,</b> then they can bypass the normal mounting procedures. This allows an attacker to access data without appropriate accounting and logging. We have analyzed <b>file</b> <b>handles</b> on three common server operating systems: Linux, FreeBSD, and Solaris. Each one of them suffers from deficiencies when constructing <b>file</b> <b>handles.</b> We have modified the NFS server on Linux to use only randomly-generated <b>file</b> <b>handles</b> over the network. This makes it more difficult for an attacker to guess a <b>file</b> <b>handle,</b> or from utilizing information contained within a <b>file</b> <b>handle.</b> To persistently store <b>file</b> <b>handles</b> we use an in-kernel port of Berkeley DB. Our performance evaluation shows an acceptable overhead. ...|$|R
5000|$|Other {{resources}} include <b>file</b> <b>handles</b> or network sockets - for example, copying one file {{to another}} is most simply done with two file handles: one for input, one for output, and thus has a [...] "file handle working set" [...] size of two. If only one <b>file</b> <b>handle</b> is available, copying {{can still be}} done, but requires acquiring a <b>file</b> <b>handle</b> for the input, reading from it (say into a buffer), releasing it, then acquiring a <b>file</b> <b>handle</b> for the output, writing to it, releasing it, then acquiring the input <b>file</b> <b>handle</b> again and repeating. Similarly a server may require many sockets, {{and if it is}} limited would need to repeatedly release and re-acquire sockets. Rather than thrashing, these resources are typically required for the program, and if it cannot acquire enough resources, it simply fails.|$|R
5000|$|... #Subtitle level 2: Redirecting to {{and from}} the {{standard}} <b>file</b> <b>handles</b> ...|$|R
5000|$|CIFF Specification on File/Directory {{organization}} and <b>File</b> <b>Handling</b> Protocol ...|$|E
5000|$|Automatic <b>file</b> <b>handling</b> (listeners {{interact}} with multiple MP3 files {{as a single}} book).|$|E
5000|$|Ldr are loader {{functions}} for PE <b>file</b> <b>handling</b> and starting of new processes.|$|E
50|$|Files are {{accessed}} by applications in Windows by using <b>file</b> <b>handles.</b> These <b>file</b> <b>handles</b> can be explored with the Process Explorer utility. This utility {{can also be}} used to force-close handles without needing to terminate the application holding them. This can cause an undefined behavior, since the program will receive an unexpected error when using the force-closed handle and may even operate on an unexpected <b>file</b> since the <b>handle</b> number may be recycled.|$|R
5000|$|... a READDIRPLUS operation, to get <b>file</b> <b>handles</b> and {{attributes}} {{along with}} file names when scanning a directory; ...|$|R
25|$|Resource leaks, where {{a finite}} system {{resource}} (such as memory or <b>file</b> <b>handles)</b> become exhausted by repeated allocation without release.|$|R
5000|$|Switch, a {{workflow}} tool which integrates and automates <b>file</b> <b>handling</b> {{and third}} party software.|$|E
50|$|Checks that a {{file with}} a {{specified}} name exists. This check {{is essential for}} programs that use <b>file</b> <b>handling.</b>|$|E
5000|$|Common {{functions}} such as: <b>file</b> <b>handling,</b> find in files code locator, go to line, tabs, automatic indentation, editor zoom, etc.|$|E
50|$|It relocates DOS kernel, COMMAND.COM interpreter, DOS {{resources}} (e.g.: buffers, <b>file</b> <b>handles,</b> stacks, lastdrive). It supports DOS 3.2 or higher.|$|R
5000|$|Resource leaks, where {{a finite}} system {{resource}} (such as memory or <b>file</b> <b>handles)</b> become exhausted by repeated allocation without release.|$|R
5000|$|... {{the device}} grants special {{rights to the}} process <b>file</b> <b>handle</b> whose auth token matches the {{received}} token from the DRM-Master ...|$|R
50|$|It is {{a variant}} with {{additional}} support for IDE editing. It also enhances <b>file</b> <b>handling,</b> file editing, HTML editing over UltraEdit.|$|E
5000|$|A central idea in {{creating}} Liberty BASIC was {{to model the}} handling of windows after the syntax for <b>file</b> <b>handling.</b> For example, (from the Liberty BASIC Help File): ...|$|E
5000|$|The Scientology policy, [...] "Entheta Letters and the Dead <b>File,</b> <b>Handling</b> of" [...] {{was cited}} as an exhibit in the New Zealand {{government}} inquiry into Scientology called the Dumbleton-Powles Report.|$|E
5000|$|Resource Tracking - The {{creation}} {{and destruction of}} system object <b>handles</b> (like <b>file</b> <b>handles,</b> GDI handles and so on) is monitored, and an end-of-session report is generated showing which handles remain {{at the time of}} a normal process termination.|$|R
5000|$|Agent - it {{plugs into}} the JavaTM Virtual Machine and {{collects}} I/O analysis data, like open <b>file</b> <b>handles,</b> I/O byte counters etc.|$|R
50|$|The Job File Table (JFT) is a DOS data {{structure}} in the Program Segment Prefix (PSP). It starts at PSP offset 0x18 and is 20 bytes long. For each open <b>file</b> <b>handle,</b> DOS stores the index into the System File Table (SFT). A <b>file</b> <b>handle</b> that is returned by open, _open and other similar functions is simply an index into the JFT where DOS stored the SFT entry index for the file or device that the program opened.|$|R
5000|$|As of version 2.7.1, Free Pascal {{implemented}} basic ISO Pascal mode, {{though many}} {{things such as}} [...] and [...] procedure and file buffer variable concept for <b>file</b> <b>handling</b> were still absent.|$|E
5000|$|The {{language}} {{was developed by}} Jordan Baruch specifically for the GE Medinet project (Ed Yourdon's first [...] "Death March" [...] project). It added implicit <b>file</b> <b>handling</b> capabilities and was influential on MUMPS.|$|E
50|$|The C64 KERNAL uses a vector {{table at}} page 3 to allow {{redirection}} of common kernal <b>file</b> <b>handling</b> and basic functions. This feature {{is used by}} IDEDOS to hook into the C64 kernal.|$|E
50|$|Prior to AmigaOS 3.5, AmigaDOS <b>file</b> <b>handles</b> {{maintained}} a 32-bit wide offset parameter (unsigned), telling {{where to start}} the next read or write operation. The biggest size for any single Amiga file under these operating systems therefore comes to 232 = 4 GiB. After Amiga OS 3.5, <b>file</b> <b>handles</b> may reference 264 = 16 EiB files. However, OFS-formatted disks continue to retain the 32-bit limitations, for that is an intrinsic limitation of the format as recorded on the media.|$|R
5000|$|FILESHIGH (MS-DOS 7.0 and DR-DOS 7.02 {{and higher}} and FreeDOS only) : Same as FILES, but {{explicitly}} loads <b>file</b> <b>handles</b> into upper memory.|$|R
50|$|In {{computer}} programming, it may {{refer to}} using a single in-memory resource (such as a <b>file</b> <b>handle)</b> to handle multiple external resources (such as on-disk files).|$|R
50|$|In C files do {{not exist}} as a {{built-in}} type (they are defined in a system header) and all I/O takes place via library calls. Pascal has <b>file</b> <b>handling</b> built into the language.|$|E
50|$|This {{technique}} {{was used for}} {{a few of the}} many fast-load systems made (such as JiffyDOS). Others were simply more efficient in I/O and <b>file</b> <b>handling,</b> offering marginal to good improvement. Other products added parallel hardware.|$|E
50|$|This period {{witnessed}} {{the growth of}} the service sector and substantial resources were devoted to staff training. In 1972, microfilming was stepped up to save space and reduce <b>file</b> <b>handling.</b> Property tax billing and collection were also computerised.|$|E
5000|$|The {{container}} {{calls the}} servlet's [...] method to relinquish any {{resources such as}} <b>file</b> <b>handles</b> that are allocated for the servlet; important data may be saved to a persistent store.|$|R
5000|$|... {{also known}} as a <b>file</b> <b>handle,</b> this is an opaque type {{containing}} the information about a file or text stream needed to perform input or output operations on it, including: ...|$|R
50|$|The QSAM {{application}} program interface can {{be compared with the}} interface offered by open, read, write and close calls (using <b>file</b> <b>handles)</b> in other operating systems such as Unix and Windows.|$|R
