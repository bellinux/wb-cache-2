12|744|Public
5|$|There are two {{versions}} of the PowerBook100's QWERTY layout keyboard: a domestic US version with 63keys and an international ISO version with 64keys. The caps lock key on the PowerBook100 did not have a locking position or a lighted indicator of its status, and to compensate, the System7 operating system software includes an <b>extension</b> <b>file</b> that causes an icon of the international caps lock symbol (⇪) to appear in the upper right-hand corner of the menu bar when Caps Lock is active.|$|E
50|$|Being {{interrupted}} by any condition, the file transmitted is saved with the <b>extension</b> <b>file.</b> BAD til the last byte received correctly. In the next connection/transmission, the same {{will be completed}} automatically.|$|E
5000|$|Archives {{created with}} PackIt used the [...]pit file <b>extension.</b> <b>File</b> {{extensions}} are not normally {{needed on the}} Mac, but were commonly used on archives because they would typically be stored on some other system that would require them (PC's for instance). These files were generally stored in MacBinary format on such machines, however, making the extension somewhat superfluous. Later versions of PackIt would recognize a MacBinary header {{if it had been}} left on, and strip it off automatically.|$|E
5000|$|Xtras for Microsoft Windows (32-bit) have an [...]X32 <b>file</b> <b>extension.</b> Xtras for Mac OS {{generally}} have an [...]XTR <b>extension.</b> The <b>file</b> <b>extension</b> *.X16 {{is reserved for}} Xtras for Microsoft Windows (16-bit).|$|R
50|$|Several {{file types}} can be {{translated}} directly in OmegaT. OmegaT determines the file type by the <b>file</b> <b>extension.</b> The <b>file</b> <b>extension</b> handling and preferred encoding can be customised to override default settings.|$|R
50|$|ASEC, the {{abbreviation}} {{referring to}} Android Secure encrypted files, {{is a type}} of <b>file</b> <b>extension.</b> This <b>file</b> <b>extension</b> is specifically associated with Google’s Android operating system. It was first introduced with Android 2.2 (code name Froyo) in May 2010. Like other <b>file</b> <b>extensions,</b> it is a group of characters {{at the end of a}} period that represents the actual format and organization of a file.|$|R
50|$|The use of Rad-50 was {{the source}} of the {{filename}} size conventions used by the PDP-11 operating systems. Using Rad-50 encoding, six characters of a filename could be stored in two 16-bit words, while three more <b>extension</b> (<b>file</b> type) characters could be stored in a third 16-bit word. The period that separated the filename and its extension was implied (i.e., was not stored and always assumed to be present). Rad-50 was also commonly used in the symbol tables of the various PDP-11 programming languages.|$|E
50|$|There are two {{versions}} of the PowerBook 100's QWERTY layout keyboard: a domestic US version with 63 keys and an international ISO version with 64 keys. The caps lock key on the PowerBook 100 did not have a locking position or a lighted indicator of its status, and to compensate, the System 7 operating system software includes an <b>extension</b> <b>file</b> that causes an icon of the international caps lock symbol (⇪) to appear in the upper right-hand corner of the menu bar when Caps Lock is active.|$|E
40|$|At this time, X LATEX {{produces}} a final PDF output file {{but it gets}} this output {{by means of the}} transformation of a XDV (extended DVI) intermediate file. This excludes most of the possibilities offered by pdfLATEX that, since version 1. 40. 9 {{and with the help of}} an <b>extension</b> <b>file</b> pdfx. sty, can directly produce a PDF/A- 1 b compliant output. This paper explains how to overcome this by resorting to the ubiquitous Ghostscript program...|$|E
5000|$|TMPEXT (PTS-DOS only) : Specifies the <b>file</b> <b>extension</b> for {{temporary}} <b>files.</b>|$|R
5000|$|List of {{detected}} <b>file</b> <b>extensions,</b> and {{the percentage}} of space each <b>file</b> <b>extension</b> takes up.|$|R
5000|$|The URI handler that checks URLs for {{verification}} of certain <b>file</b> <b>extensions</b> and <b>file</b> formats uses case sensitive comparison techniques and doesn’t check all potential file formats.|$|R
40|$|Added {{support for}} solvent_dsl in user defined systems of YAML pages Removed Command Line Interface {{ability to do}} yank prepare and yank run Added ability to {{overwrite}} individual YAML commands from command line Added YAML feature to extend_simulation without modifying YAML files or command line every iteration NaN's generated during simulations serialize system, state, and integrator which can be passed off for debugging to others Backend website updating and pushes improved Improved GROMACS <b>extension</b> <b>file</b> handlin...|$|E
30|$|To {{illustrate}} the use with two objectives, {{suppose that the}} user wants to satisfy the mutation testing with a reduced number of test cases. Hence, he/she selected the corresponding fitness functions, the algorithm NSGA-II, and provided the following set of parameters values: 50 to population size, 10, 000 to maximum number of evaluations, 0 to <b>extension</b> <b>file</b> size (NSGA-II does not use an external file), 0.1 to crossover rate (corresponding to 10 %) and 0.5 to mutation rate (corresponding to 50 %).|$|E
30|$|If {{the user}} {{additionally}} wants a high pairwise coverage {{he needs to}} select the three fitness functions, besides all the other parameters. Suppose that he/she provided the following parameters to NSGA-II: 50 to population size, 10, 000 to maximum number of evaluations, 0 to <b>extension</b> <b>file</b> size, 0.1 to crossover rate and 0.9 to mutation rate. No value for maximum number of products was provided. This means that all the products generated by FaMa were used to compose matrices MA and MP. To generate the mutants, a percentage of 100 % was also used in FMTS for all operators. The equivalent mutants and invalid pairs were discarded, totaling a number of 227 active mutants and 420 pairs.|$|E
5000|$|The CMF format {{uses the}} [...]CMF {{filename}} <b>extension.</b> <b>Files</b> {{can be identified}} by the file signature {{in the first four}} bytes, which will be the ASCII characters [...] "CTMF" [...] (Creative Technology Music File) if the file is in CMF format.|$|R
5000|$|SMIL files take {{either a}} [...] or [...] <b>file</b> <b>extension.</b> However, SAMI <b>files</b> and Macintosh self {{mounting}} images also use , which creates some ambiguity at first glance. As a result, SMIL files commonly use the [...] <b>file</b> <b>extension</b> to avoid confusion.|$|R
50|$|<b>File</b> <b>Extensions.</b> The tool determines which code {{counter to}} use for each file from the <b>file</b> <b>extension.</b>|$|R
40|$|Scientific {{workflows}} feature complex precedence {{constraints that}} are mostly dictated by data dependencies between tasks. The inter-task communication (data staging) in these complex workflow applications incurs significant overheads {{resulting in a}} major hindering factor of high performance and effective resource utilization. As the scale of these applications becomes increasingly large due primarily to the recent explosive growth of data, addressing this hindrance is of great practical importance. In this paper, we present a resource multiplexing (RM) technique, which leverages data staging aiming to minimize idle times between execution of tasks due to inter-task communication overheads. In particular, we incorporate RM into our DEWE framework 1 with making a set of extensions to the framework. The rationale behind RM is each slot or core pairs up the actual workflow task and the RM-enabled file loading DEWE <b>extension</b> (<b>File</b> Client) {{in the way that}} their resource usage is complementary. We demonstrate the efficacy of our multiplexing technique in a data-intensive computing environment using an astronomy application. Our results from experiments conducted in Amazon EC 2 demonstrate that our multiplexing technique is effective with the reduction in resource idle time between jobs by 57 % on average and up to 91 %. 6 page(s...|$|E
40|$|This thesis {{introduces}} a fault injector, called "Pulad", specifically developed for finding application vulnerabilities. Most previous approaches for finding application vulnerabilities involved static verification methods. With these methods, the source code is not executed. Since vulnerabilities {{can only be}} revealed when they are exploited, {{the use of a}} dynamic verification method, executing the source code, seems needed. The main two dynamic verification areas are software testing and fault injection. This thesis focuses on fault injection. Pulad, the fault injector described in this thesis consists of two main parts called the "collector" and the "fault injector". The goal of the collector is to record all the environment-application interactions when the application is running. These interactions focusing on the environment files are then analyzed and the following fields are uploaded into a database including the file name, file <b>extension,</b> <b>file</b> size, file directory, number of times the file was used, file permission (includes symbolic link and ownership) and number of times an error occurred. The fault injector allows to inject faults either using a graphical user interface (GUI) or directly through a text file. The faults in the files include the file name, the directory name, the execution path, the library path, the file existence, the file ownership, the file permission, etc. For each of the faults, the specific type of fault needs to be indicated. Moreover, the interaction points where the faults should be injected are also provided by the user...|$|E
40|$|Tez (Yüksek Lisans) [...] İstanbul Teknik Üniversitesi, Fen Bilimleri Enstitüsü, 2015 Thesis (M. Sc.) [...] İstanbul Technical University, Instıtute of Science and Technology, 2015 Proje saha yönetiminin en önemli aşamalarından birisi gerçekleştirilen imalatların işveren ve kalite kontrol kriterlerine uygunluğunun denetlenmesidir. Bu bağlamda projede görev alan firma personelleri hiyerarşik bir yapılanma içerisinde yapım projesinin her bir mahalinde tüm iş kalemleri için saha imalat kontrollerini gerçekleştirmektedirler. Geleneksel anlamda hem küresel çapta hem de Türkiye ‘de veri yönetimi evrak tabanlı formlar üzerinden yürütülmektedir. Özellikle iş kalemi ve mahal sayısı bakımından zengin olan orta ve büyük ölçekli yapım projelerinde evrak tabanlı bu formların sayısı binler ile ifade edilebilmektedir. Evrak sayısının fazla olması özellikle veri yönetiminde güçlük, ağır doküman yükü, veri kayıpları, raporlama ve geri bildirim sürelerinde uzamalar gibi problemleri beraberinde getirmektedir. Çalışma kapsamında saha imalat kontrollerinde tespit edilen problemleri çözmeyi hedefleyen Taşınabilir Aygıt Saha Kontrol (TASK) modeli önerilmiştir. Önerilen model oluşturulurken günümüz bilişim teknolojileri yoğun olarak kullanılmış ve iki adet prototip geliştirilmiştir. Bunlardan ilki saha imalat kontrollerini yerinde gerçekleştirmeyi mümkün kılan Android işletim sistemli taşınabilir cihazlarda kullanılması düşünülen Prototip I yazılımıdır. Diğeri ise yapım projesinin şantiye ve teknik ofislerinde imalat takip ve raporlama işlemleri için Windows işletim sistemli bilgisayarlarda kullanılmak üzere geliştirilen Prototip II yazılımıdır.   Android işletim sistemi üzerinde çalışan Prototip I yazılımı ile saha imalat kontrollerinde sıklıkla kullanılan kâğıt tabanlı iş teslim ve kalite kontrol formları dijital platformda oluşturulmuştur. İmalat kontrolleri neticesinde ortaya çıkan veriler projenin herhangi bir aşamasında anlık erişim sağlanmak üzere ağ tabanlı TASK modeli ortak veritabanında depolanmıştır. Depolanan veriler Windows işletim sistemini kullanan Prototip II tarafından işlenerek gerekli raporlamalar anlık olarak oluşturulabilmiştir. Allplan, Revit ve ArchiCAD gibi BIM (Yapı Bilgi Modellemesi) uygulamalarından alınan yapım projesine ait IFC uzantılı dosyalar Prototip II içerisine entegre edilerek iş teslimleri üç boyutlu ortamda görselleştirilebilmiştir. Geliştirilen modelin süre etkinliğini ölçmek adına çalışma kapsamında doğrulama analizi gerçekleştirilmiştir. Doğrulama analizinde, geleneksel saha imalat kontrollerinden alınan örneklemler ile TASK modelinden alınan örneklemler çok yönlü olarak değerlendirilmiş ve TASK modeli ile etkin sonuçlar alındığı tespit edilmiştir. One of {{the most}} crucial stages of {{construction}} field management is to inspect conformity of completed work items according to quality control and employer work acceptance criteria. In this scope, field inspections are carried out for each individual location and for all work items existing in the construction project by companies’ staff in a hierarchical manner. Traditionally, data management is carried out through paper-based sheets. Especially in medium to large scale construction projects, number of paper-based inspection sheets can be stated in thousands. In such cases, excessive amount of control documents bring in data management and site tracking problems which, in return, cause data loss, reporting and feedback delays. These problems have been discussed in many researches and tools {{have been developed to}} amend site inspection efficiency. Most of the solutions, which were proposed by researchers to overcome site inspection problems, took advantage of information technologies. Earlier models suggested that Personal Digital Assistants (PDAs) could be used to inspect work items and materials at construction field. Thus, related reports regarding defected work items and materials could be created and corrective actions could be taken. Recent models, on the other hand, suggested that site inspections could be made via mobile devices operating on IOS and Android platforms. With suggested models, work defects could be detected and related notifications could be sent to subcontractor for corrective actions. Despite the fact that these models obtained successful results in defect management, site inspections were not carried out for all work items at every location of the construction project regarding work acceptance criteria determined by the employer. In addition, it is observed that {{there is a lack of}} integrity between Building Information Modelling (BIM) and site inspections, so that results obtained from site inspections can be visualized in 3 D IFC (Industry Foundation Classes) models of the building. In the scope of this study, Mobile Device Field Inspection (TASK) model is proposed to overcome mentioned site inspection problems and fill the gap in the literature. While developing TASK model, modern-day information technologies were used extensively and two software have been developed in the process, which were named as Prototype I, and Prototype II. Prototype I software was developed with JAVA programming language for Android based mobile devices, so that site inspections could be carried out at construction field. Prototype II software, on the other hand, was developed with C# programming language for Windows based computers, so that progress and conformity reports could be generated by processing data obtained from site inspections. In addition to reporting, IFC <b>extension</b> <b>file,</b> which is exported from BIM model of the building, can be imported into Prototype II and site inspection progress can be visualized in three-dimensional environment. Main purpose of the TASK model is to manage site inspection activities with mobile devices and generate related reports at any stage of the construction project instantaneously by preventing data loss and feedback delays. Thus, problems encountered in traditional paper-based site inspection models could be minimized and intercommunication between employer and subcontractors could be improved. To be able to achieve this objective, a shared MySQL database, which was located in a web server, has been included inside TASK model. Thus, data created with site inspections could be stored and related reports could be generated in both of the prototypes. Communication between prototypes and shared database have been established by the help of PHP scripts, which also handle logical operations for TASK model database management. TASK model stages can be divided into four main components, which are (1) system data input, (2) BIM integration, (3) site inspections and (4) reporting. System data input is the first stage of the TASK model. System data can be defined as project-based information, which is going to be utilized at site inspections. This includes project locations, work items, quality control acceptance criteria, companies, company users, drawings, contracts, technical specifications etc. System administrator of the TASK model, who is an individual authorized by the employer, inputs these data into TASK model shared database with the help of either Prototype I or Prototype II modules prior to initiation of the construction project. While data entry, system administrator links project locations with work items and determines quality control acceptance criteria of each work item. Thus, when construction project initiates, related data is viewed by quality control engineers and related acceptance status can be marked on digital work delivery forms. Within the scope of this study, system data entry of project locations was automated with Prototype II. IFC files exported from BIM applications can be imported into 3 D IFC module of Prototype II and project locations existing in the BIM model can be inserted into TASK model shared database automatically. Second stage of the TASK model is to provide integrity between BIM and site inspections. If location based system data was inserted into TASK model shared database via 3 D IFC model of the Prototype II, site inspection and BIM model integrity can be established with TASK model. At any stage of the construction project, TASK model users can select related work items and view site inspection acceptance status of the whole construction project in a three dimensional environment. After selecting related work item, locations where work item is in conformity status are colored with green color and where work item is in hold or non-conformity status are colored with red color. Thus, subcontractors and employer will have a visual understanding of the current site inspection status at any stage of the construction project. Third stage of the TASK model is to carry out site inspections on digital quality control and delivery forms by the help of Prototype I, which operates on mobile Android operating system. System data, which is inserted into TASK database by system administrator, is processed by Prototype I and digital quality control forms are created on mobile device. TASK users from both subcontractor and employer companies carry out site inspections of work items at related locations of the project with their mobile devices in a hierarchical manner. Employer acceptance criteria items are viewed on Prototype I and conformities with related items for the completed work are determined. Items, which confirm employer acceptance criteria, are marked as “accepted”, and items, which do not confirm related criteria, are marked as “rejected”. For rejected items, Prototype I sends related notifications to subcontractor, which is at the very bottom of the project organizational hierarchy, for corrective actions to be taken. For accepted items, Prototype I sends related notifications to users, who work for the upper level company inside the project organizational hierarchy.   In site inspection stage of the TASK model, drawings and technical specifications, which are uploaded to TASK model FTP server by system administrator, can be viewed on mobile devices with the help of Prototype I. In addition, photographs can be taken with Prototype I for defected work items. Thus, other TASK users can have a deeper understanding of the work item nonconformities. Also, TASK users can comment on work items, where they have encountered nonconformities that are not included in employer acceptance requirements. When site inspection is completed, Prototype I stores related data in TASK database while notifying TASK users in a hierarchical manner. Last stage of TASK model is to create reports regarding data obtained from site inspections. At any stage of the construction process, reports can be generated on both of the prototypes instantly. Reports mainly consist of conformity status of all work items at each location of the project. These reports help understanding quality control acceptance progress of the project. Therefore, data generated inside these reports can be shared with different departments of the companies for progress payments or cost monitoring. Especially, thanks to flexible structure of reporting module inside Prototype II, different reports can be created in accordance with company needs.   To be able to measure time effectiveness of the TASK model, a verification analysis was conducted. In the analysis, site inspection activity was divided into nine steps from system data input to reporting. For each step, time samples from both traditional site inspections and TASK model were collected and related comparisons were made. It was observed that TASK model, when compared to traditional site inspections, provided better results in terms of time efficiency. Yüksek LisansM. Sc...|$|E
5000|$|Audiobook and podcast files, {{which also}} contain {{metadata}} including chapter markers, images, and hyperlinks, {{can use the}} extension [...]m4a, but more commonly use the [...]m4b extension. An [...]m4a audio file cannot [...] "bookmark" [...] (remember the last listening spot), whereas [...]m4b <b>extension</b> <b>files</b> can.|$|R
5000|$|Unlike pages, {{that have}} [...] ".aspx" [...] <b>file</b> <b>extension,</b> ASP.NET {{handlers}} by default have [...] ".ashx" [...] <b>file</b> <b>extension.</b>|$|R
5000|$|The [...] ".md5" [...] <b>file</b> <b>extension,</b> or a <b>file</b> named [...] "MD5SUMS", {{indicates}} a checksum file containing 128-bit MD5 hashes in md5sum format.|$|R
5000|$|U.S. Patent and Trademark Office Trademark Trial and Appeal Board: In a July 14, 2006 {{order by}} the Trademark Trial and Appeal Board (TTAB), Stoller was {{sanctioned by the}} Board for filing more than 1100 {{requests}} of an extension of time to file oppositions for time period between November 2005 and March 2006. The Board vacated all the time <b>extensions</b> <b>filed</b> during that time period and prohibits Stoller from <b>filing</b> any additional <b>extensions</b> for two years. [...] Stoller {{will be able to}} <b>file</b> <b>extensions</b> again after two years but only if the <b>extension</b> is <b>filed</b> by an attorney. The appeal to the Court of Appeals for the Federal Circuit was dismissed for lack of jurisdiction. The time for filing any appeal to the district court has lapsed.|$|R
5000|$|Using a {{hard-coded}} predefined <b>file</b> <b>extension</b> to suffix {{the path}} does not limit {{the scope of}} the attack to files of that <b>file</b> <b>extension.</b>|$|R
5000|$|The <b>file</b> <b>extension</b> is [...] "JPG" [...] for Exif {{files and}} [...] "THM" [...] for Exif files that {{represent}} thumbnails of other files than [...] "JPG". Other file formats use different <b>extensions.</b> Multiple <b>files</b> sharing a number (even if the <b>file</b> <b>extension</b> or the four alphanumeric characters are different) are considered related {{and form a}} DCF object.Prior {{to the introduction of}} DCF 2.0, some camera vendors (e.g. Minolta and Konica Minolta) chose to use the <b>file</b> <b>extension</b> to indicate the recorded color space, that is, [...] "JPG" [...] was used for sRGB, whereas [...] "JPE" [...] was used for Adobe RGB.|$|R
5000|$|...properties is a <b>file</b> <b>extension</b> for <b>files</b> mainly used in Java related {{technologies}} {{to store the}} configurable parameters of an application. They {{can also be used}} for storing strings for Internationalization and localization; these are known as Property Resource Bundles.|$|R
5000|$|The {{most common}} {{filename}} <b>extension</b> for <b>files</b> containing HTML is [...]html. A common abbreviation {{of this is}} [...]htm, which originated because some early operating systems and file systems, such as DOS and the limitations imposed by FAT data structure, limited <b>file</b> <b>extensions</b> to three letters.|$|R
5000|$|The <b>file</b> <b>extension</b> for MXF <b>files</b> is [...] ".mxf". The Macintosh File Type Code {{registered}} with Apple for MXF files is [...] "mxf [...] ", including a trailing space.|$|R
5000|$|Variables are untyped {{and are not}} pre-declared. Miva Script {{uses the}} <b>file</b> <b>extensions</b> [...]mv, [...]mvc, and [...]mvt which is the common <b>file</b> <b>extension</b> for runtime {{compiled}} template source files.|$|R
5000|$|A SAMI file is a {{plain text}} file and {{therefore}} can be created or modified in any text editor. Its structure {{is very similar to}} HTML. The files may have either [...] or [...] <b>file</b> <b>extensions,</b> although using [...] may cause a <b>file</b> <b>extension</b> collision, since Synchronized Multimedia Integration Language (SMIL) files and Macintosh self mounting images also use this <b>file</b> <b>extension.</b>|$|R
5000|$|OpenMG is a SDMI-compliant {{digital rights}} {{management}} system by Sony. It is designed for audio files in ATRAC3 format. The compliant software, e.g. Sony SonicStage, is usually capable of transcoding MP3 and wav files to OpenMG/ATRAC3. The <b>file</b> <b>extensions</b> OpenMG-encrypted <b>files</b> use are [...]omg and [...]oma.|$|R
5000|$|Standardized {{preference}} {{settings for}} user-level import and export through a [...] ".prefs" [...] <b>extension</b> and <b>file</b> format.|$|R
2500|$|Since Locky was {{released}} {{there have been}} numerous variants released that used different <b>extensions</b> for encrypted <b>files.</b> Many of these extensions are named after gods of Norse and Egyptian mythology. When first released, the extension used for encrypted files was [...]Locky. Other versions utilized the [...]zepto, [...]odin, [...]shit, [...]thor, [...]aesir, and [...]zzzzz <b>extensions</b> for encrypted <b>files.</b> The current version, released in December 2016, utilizes the [...]osiris <b>extension</b> for encrypted <b>files.</b>|$|R
5000|$|The [...] <b>file</b> <b>extension</b> was {{originally}} used for floppy disk raw disk images only. A similar <b>file</b> <b>extension,</b> , {{is also used}} to refer to floppy disk image files by some programs. A variant of IMG, called IMZ, consists of a gzipped version of a raw floppy disk image. These files use the [...] <b>file</b> <b>extension,</b> and are commonly found in compressed images of floppy disks created by WinImage.|$|R
