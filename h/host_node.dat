43|353|Public
5000|$|... this is {{the energy}} of the springs with unit {{elasticity}} which connect each data point with its <b>host</b> <b>node.</b> It is possible to apply weighting factors to the terms of this sum, for example to reflect the standard deviation of the probability density function of any subset of data points [...]|$|E
50|$|VAXclustering {{was greatly}} {{aided by the}} {{introduction}} of terminal servers using the LAT protocol. By allowing ordinary serial terminals to access the host nodes via Ethernet, it became possible for any terminal to rapidly and easily connect to any <b>host</b> <b>node.</b> This made it much simpler to accomplish fail over of the user terminals from one node of the cluster to another.|$|E
5000|$|Let {{data set}} be {{a set of}} vectors [...] in a finite-dimensional Euclidean space. The elastic map is {{represented}} {{by a set of}} nodes [...] in the same space. Each datapoint [...] has a <b>host</b> <b>node,</b> namely the closest node [...] (if there are several closest nodes then one takes the node with the smallest number). The data set [...] is divided on classes [...]|$|E
30|$|Two-phase mapping {{approach}} (2 -Phase-Mapping) [14], {{which first}} pre-selects the mapping of <b>hosting</b> <b>nodes</b> and then maps virtual links.|$|R
5000|$|Failover support: As Cassandra is a {{distributed}} {{data store}} where <b>hosts</b> (<b>nodes)</b> may go down. Hector {{has its own}} failover policy.|$|R
40|$|Massive {{amount of}} {{information}} is available in large-scale net-works of autonomous data sources dispersed over a wide area. One fundamental challenge is how to manage this distributed information repository to support various infor-mation management tasks. More specifically, {{we need to address}} following issues: efficient search, data with arbi-trary attribute types (numeric or categorical), queries in ar-bitrary subspaces, and autonomy of <b>host</b> <b>nodes.</b> We propose a peer-to-peer data management infrastructure, DataSocial-Net, to tackle these issues. In DataSocialNet, <b>host</b> <b>nodes</b> sharing similar information establish acquaintances among each other to form a small world network that supports effi-cient search with light maintenance. DataSocialNet respects the autonomy of <b>host</b> <b>nodes</b> and supports queries in arbi-trary subspaces. In addition, we propose hybrid small world (HSW) to handle categorical data in DataSocialNet. We in-vestigate point query and range query, identify unique issues involved, and propose efficient query algorithms. 1...|$|R
50|$|SUNMOS uses a single-tasking kernel {{and does}} not provide demand paging. It takes control of all nodes in the {{distributed}} system. Once an application is loaded and running, it can manage all the available memory on a node and use the full resources provided by the hardware. Applications are started and controlled from a process called yod that runs on the <b>host</b> <b>node.</b> Yod runs on a Sun frontend for the nCUBE 2, and on a service node on the Intel Paragon.|$|E
50|$|OpenComRTOS {{comes with}} a number of tools. Visual Designer is a visual {{modelling}} environment whereby the user specifies node topology and application topology in a graphical way. From these diagrams an application specific runtime model is generated. Application specific code is provided in ANSI-C for each task. Runtime execution as well as inter-processor interactions are visualised using the Event Tracer. A System Inspector allows to read out and modify the datastructures.Additional modules are hostserver modules (these allow any task access to the <b>host</b> <b>node</b> services) and a Safe Virtual Machine for C. The latter requires about 3 KiBytes (10 KiBytes for program and data) and allows to dynamically download binary compiled c code at runtime.|$|E
40|$|Most high-dimensional {{indexing}} structures {{proposed for}} similarity query in content-based image retrieval (CBIR) systems are treestructured. The {{quality of a}} high-dimensional tree-structured index is mainly determined by its insertion algorithm. Our approach focuses on an important phase in insertion, that is, the tree descending phase, when the tree is explored to find a <b>host</b> <b>node</b> to accommodate the vector to be inserted. We propose to integrate a heuristic algorithm in tree descending {{in order to find}} a better <b>host</b> <b>node</b> and thus improve the quality of the resulting index. A heuristic criteria for child selection has been developed, which takes into account both the similarity-based distance and the radius-increasing of the potential <b>host</b> <b>node.</b> Our approach has been implemented and tested on an image database. Our experiments show that the proposed approach can improve the quality of high-dimensional indices without much run-time overhead. 1 Introduction Visual data ma [...] ...|$|E
40|$|Accessing {{resources}} on nodes in clusters of COTS PCs from other nodes, using e. g. NFS, can induce a signi cant workload on the <b>nodes</b> <b>hosting</b> the resources. For some workloads, for instance a node handling database queries, {{it may be}} beneficial to allow a node that wish to use a remote resource {{to take control of}} the remote resource on the hardware level. We present a prototype of a system where a node access a device on a remote node's I/O bus directly, inducing only a minimal workload on the <b>hosting</b> <b>node.</b> The prototype uses a SCI network to control a SCSI device on the <b>hosting</b> <b>node's</b> I/O bus. We empirically show that our system can reduce the CPU workload of the <b>hosting</b> <b>node</b> compared to local access, and that remote access to the resource in question has performance nearly as good as local access. The prototype system is only meant to be a first step towards a truly distributed solution, but demonstrates that the approach works in practice and performs well...|$|R
50|$|Two {{advantages}} of this design are high reliability and anonymity. Information remains available {{even if the}} publisher node goes offline, and is anonymously spread over many <b>hosting</b> <b>nodes</b> as encrypted blocks, not entire files.|$|R
30|$|To {{overcome}} these issues, proposals {{in the literature}} have considered either relaxing networking QoS by focusing only on the computing requirements [11, 13] or adopting a two-phase approach [14, 15, 18], which first pre-selects the mapping of <b>hosting</b> <b>nodes</b> and then maps virtual links.|$|R
3000|$|... ● The boot {{procedure}} of a VM depends {{not only on}} the used virtual machine type: The VM must be transmitted from the S 3 /Walrus to the <b>host</b> <b>node,</b> if it is not already in the cache.|$|E
40|$|In this paper, {{we propose}} SnuCL, an OpenCL {{framework}} for heterogeneous CPU/GPU clusters. We {{show that the}} original OpenCL semantics naturally fits to the heterogeneous cluster programming environment, and the framework achieves high performance and ease of programming. The target cluster architecture consists of a designated, single <b>host</b> <b>node</b> and many compute nodes. They are connected by an interconnection network, such as Gigabit Ethernet and InfiniBand switches. Each compute node is equipped with multicore CPUs and multiple GPUs. A set of CPU cores or each GPU becomes an OpenCL compute device. The <b>host</b> <b>node</b> executes the host program in an OpenCL application. SnuCL provides a system image running a single operating system instance for heterogeneous CPU/GPU clusters to the user. It allows the application to utilize compute devices in a compute node {{as if they were}} in the <b>host</b> <b>node.</b> No communication API, such as the MPI library, is required in the application source. SnuCL also provides collective communication extensions to OpenCL to facilitate manipulating memory objects. With SnuCL, an OpenCL application becomes portable not only between heterogeneous devices in a single node, but also between compute devices in the cluster environment. We implement SnuCL and evaluate its performance using eleven OpenCL benchmark applications...|$|E
40|$|This paper {{describes}} a health status protocol for distributed real-time systems that use TTCAN, Flexray, or other networks which support both time-triggered and event-triggered communication. The protocol allows {{a group of}} co-operating processes to establish a consistent view of each other’s health status over time. It extends the instantaneous view, of operational status of each process, provided by a process group membership protocol. The health status and membership protocols are intended for systems where processes (not nodes) are considered the smallest unit of failure, and where process failures can be detected and recovered locally by the <b>host</b> <b>node.</b> Such systems require a decision function that determines whether a process failure is temporary (the process is being recovered by the <b>host</b> <b>node)</b> or permanent (local recovery is not possible or was unsuccessful). Our protocol ensures that such decisions are made consistently among correct nodes despite symmetrical and asymmetrical omission failures...|$|E
50|$|Network {{traffic is}} {{displayed}} using a graphical interface. Each node represents a specific host. Links represent connections to <b>hosts.</b> <b>Nodes</b> and links are color-coded to represent different protocols forming {{the various types}} of traffic on the network. Individual nodes and their connecting links grow and shrink in size with increases and decreases in network traffic.|$|R
5000|$|... <b>host</b> (or <b>node</b> or server) - {{network device}} that {{contains}} the file ...|$|R
50|$|Both the {{computers}} of Internet users and {{the computers}} that serve pages to users are <b>host</b> <b>nodes,</b> while the nodes that connect the networks in between are gateways. For example, the computers that control traffic between company networks or the computers used by {{internet service providers}} (ISPs) to connect users to the internet are gateway nodes.|$|R
40|$|A {{prototype}} Meteosat weather image dissemination {{system has}} been developed. This system receives half-hourly image transmissions from the Meteosat weather satellite, processes the data, and then disseminates the processed images {{to the general public}} via the Public Switched Telephone Network (PSTN). The most significant and essential feature of the system is the image classification algorithm. Chapter 2 discusses some image analysis techniques which are relevant to weather image dissemination, whilst Chapter 3,discusses the dissemination system itself. The prototype system comprises a Meteosat Primary Data User Station (PDUS), which classifies and compresses raw data, and transmits the compressed images to a <b>Host</b> <b>node.</b> It also comprises Remote nodes which access compressed images from the <b>Host</b> <b>node,</b> decompress them, and display them on a local PC display. All image transmissions are via the PSTN. An optimal classification algorithm is given in Chapter 4. Further development of the dissemination system is given in Chapter 5. Meteorological Office, Bracknel...|$|E
40|$|Abstract — In a real system, {{constraints}} develop due {{to different}} reasons such as actuator limits and safety requirements. The design a control system that achieves system constraints without considerable {{effect on the}} overall system performance is called constrained control system. Many techniques for designing a control system with constraints are scattered in literature. Some of them are implemented here. Controller design with constraints requires a real-time and fast operating system {{in order to achieve}} its goal successfully. RT-Lab is a real time operating system that runs in target and <b>host</b> <b>node.</b> The main feature and components of RT-lab are introduced. Moreover, two different techniques of control design with constraints are discussed and implemented on an experimental hybrid plant using RT-Lab. I...|$|E
40|$|Abstract- We study {{run-time}} issues, such as site allocation and query scheduling policies, in executing read-only queries in a hierarchical, distributed memory, multicomputer system. The particular architecture considered here {{is based}} on the hypercube interconnection. The data are stored in a base cube, which is controlled by a control cube and <b>host</b> <b>node</b> hierarchy. Input query trees are transformed into operation sequence trees, and the operation sequences become the units of scheduling. These sequences are scheduled dynamically at run-time. Algorithms for dynamic site allocation are provided. Several query scheduling policies that support interquery concurrency are also studied. Average query completion times and initiation delays are obtained for the various policies using simulations. Index Terms-Database systems, multicomputer systems, parallel database systems, query processing, scheduling, relational joins I...|$|E
40|$|It {{is shown}} that a network can be {{constructed}} on a given set of host computers such {{that the possibility of}} a network partition resulting from network node and link failure can be ruled out with an arbitrarily high degree of confidence. More precisely, a class of networks is exhibited on any given number of <b>host</b> <b>nodes</b> so that the probability of a network partition decreases exponentially with only a linear increase in connectivity cost. It has long been a folk theorem in network theory that as one increases the budget for the number of links of a network, the reliability of the network can be increased by a judicious choice of network topology. This paper makes this intuitive statement precise and analyzes one class of networks to illustrate it: bipartite networks where <b>host</b> <b>nodes</b> are connected to each of a set of hub nodes. The result has significant implications for availability of distributed databases and feasibility of the three-phase commit protocol which guarantees cr [...] ...|$|R
30|$|Another {{important}} point {{today is that}} not only hosts are identified and located based on IP addresses, but also that information is, since uniform resource locators (URL) have domain names, which in essence lead to IP addresses. The reason is that current Internet design defined a dual functionality for IP addresses: to identify <b>hosts,</b> <b>nodes</b> interfaces or content servers, and to locate them into the network. The original Internet design does not support mobile hosts.|$|R
30|$|In [14], {{the authors}} use a {{two-phase}} mapping approach, which first preselects the mapping of <b>hosting</b> <b>nodes</b> and then maps virtual links. Node mapping and link mapping are performed independently. Hence, non-join node and link embedding {{may result in}} a high number of blocked requests and in underused resources, meaning less profit for the cloud provider. In addition, the mapping is done using heuristic approaches, which may make the solution less than optimal.|$|R
40|$|AbstractWe {{investigate}} the effect, on {{the rate of}} convergence of {{a model of the}} asychronized parallel iteration method, of allowing the number of processors to differ from the number of splittings. Under certain regularization assumptions we prove that decreasing the number of processors increases the convergence rate. Our interpretation of this result for the model is as follows: increasing the number of processors means that each processor updates the global approximation in the <b>host</b> <b>node</b> with a local iteration which is computed from older global data. Hence the convergence rate is reduced. To prove our results we develop theorems for comparison of the spectral radii for certain nonnegative matrices which are of interest in their own right. We provide numerical examples to illustrate our results...|$|E
40|$|A {{distributed}} system consists of, possibly heterogeneous, computing nodes connected by communication network {{that do not}} share memory or clock. One of the main benefits of {{distributed system}}s is resource sharing which speeds up computation, enhances data availability and reliability. However resources must be discovered and allocated {{before they can be}} shared. Virtual caching is a new caching scheme which allows a <b>host</b> <b>node</b> to grant authority of caching pages in some fraction of its own cache to nearby nodes. However the virtual caching protocol doesn't mentions how a client node obtains virtual cache from remote host. To address this problem we formulate a resource discovery and allocation problem. We are focusing our attention on how to locate resources-surplus donor nodes and to determine how much of the request for resources of deficien...|$|E
40|$|Abstract. With {{their high}} {{computation}} throughput and outstanding performance-per-watt figures, the graphics processing units (GPU) {{are becoming increasingly}} important for high-performance computing (HPC) systems. Existing GPU execution environment restricts the GPU usage to local <b>host</b> <b>node.</b> This is suitable for standalone computer nodes, but becomes inefficient for HPC systems that consist {{of a large number}} of GPU-assisted nodes. In this paper, a novel framework is proposed to support dynamic GPU kernel/device mapping strategies for HPC sys-tems. Adaptive mapping policies are designed to mitigate the impact of network transfer overhead. The performance of the framework is stud-ied through extensive simulations. The results show that compared with existing local-only static mapping method, the proposed framework is capable of improving the system-wide GPU utilization rate and com-putation throughput, especially when the concurrent workloads exhibit different GPU usage intensities. ...|$|E
3000|$|... [*]The trusted {{absolute}} timestamping service: {{provides a}} global timestamp value shared between all 3 TCACs as each 3 TCAC {{is equipped with}} an internal clock that is synchronized with all other 3 TCACs’ clocks. The precision of the timestamp value {{is determined by the}} precision of the adopted clock synchronization protocol. Note that the 3 TCAE entity which asks its 3 TCAC for a trusted timestamp value will receive it after a variable delay that highly depends on the processing capabilities of the <b>hosting</b> <b>node.</b>|$|R
50|$|The {{station was}} {{decommissioned}} in April 1987, but {{the site is}} still 'actively' involved in solar scientific research, <b>hosting</b> a <b>node</b> of the Birmingham Solar Oscillations Network.|$|R
30|$|Computational complexity. Except for the <b>host</b> <b>nodes,</b> {{the update}} rules for both primal and dual {{variables}} remain the same. Each host however, serves a dual role: as an FC {{as well as}} an ordinary node. We know from Algorithm 1 that the computations performed per LFC involve averaging information from all connected nodes, which is simple compared to updating the local variables. Thus, the computational complexity remains of the same order, while the total computational cost decreases as less iterations are necessary to reach a target level of accuracy.|$|R
40|$|Abstract: An aqueous {{sensor network}} is {{described}} consisting of {{an array of}} sensor nodes that can be randomly distributed throughout a lake or drinking water reservoir. The data of an individual node is transmitted to the <b>host</b> <b>node</b> via acoustic waves using intermediate nodes as relays. Each node of the sensor network is a data router, and contains sensors capable of measuring environmental parameters of interest. Depending upon the required application, each sensor node can be equipped with different types of physical, biological or chemical sensors, allowing long-term, wide area, in situ multi-parameter monitoring. In this work the aqueous sensor network is described, with application to pH measurement using magnetoelastic sensors. Beyond ensuring drinking water safety, possible applications for the aqueous sensor network include advanced industrial process control, monitoring of aquatic biological communities, and monitoring of waste-stream effluents...|$|E
40|$|AbstractWe {{describe}} dense edge-disjoint embeddings of {{the complete}} binary tree with n leaves in the following n-node communication networks: the hypercube, the de Bruijn and shuffle-exchange networks and the two-dimensional mesh. For the mesh and the shuffle-exchange graphs each edge is regarded as two parallel (or anti-parallel) edges. The embeddings have the following properties: paths of the tree are mapped onto edge-disjoint paths of the host graph and at most two tree nodes (just {{one of which is}} a leaf) are mapped onto each <b>host</b> <b>node.</b> We prove that the maximum distance from a leaf to the root of the tree is asymptotically as short as possible in all host graphs except {{in the case of the}} shuffle-exchange, in which case we conjecture that it is as short as possible. The embeddings facilitate efficient implementation of many P-RAM algorithms on these networks...|$|E
40|$|This paper {{presents}} Chameleon, {{an adaptive}} infrastructure which allows {{different levels of}} availability requirements to be simultaneously supported in a networked environment. Chameleon provides dependability {{through the use of}} special agents [...] -reliable and mobile components that control all operations in the Chameleon environment. Three broad classes of agents are defined:. Managers oversee other agents and recover from failures in their subordinates.. Daemons provide communication gateways to the agents at the <b>host</b> <b>node.</b> They also make available a host's resources to the Chameleon environment.. Common agents implement specific techniques for providing application required dependability. Above all else, Chameleon provides a flexible architecture through which adaptive fault tolerance may be achieved in an unreliable and heterogeneous network. Key concepts used to accomplish this goal include the automated creation of new agents, the automatic extension of existing agents, the se [...] ...|$|E
30|$|Node level {{adaptation}} {{could be}} applied to add capacity by powering on a node. Power consumption could be reduced by using Dynamic Voltage and Frequency Scaling (DVFS) [18], before the node is powered off when not needed. Node configuration can also be adapted when a VM’s requirements extend beyond the capacity of its <b>hosting</b> <b>node,</b> so that it needs to be migrated to another node that has the required capacity. Migration {{can also be used to}} reduce power consumption, by consolidating VMs into fewer nodes and enabling some nodes to be switched off.|$|R
40|$|Abstract: MANET is Mobile Ad-Hoc Network {{which has}} been self-configured and {{infrastructure}} less using dynamically nature. MANET consists of mobiles nodes that are routers with <b>host</b> <b>nodes</b> and wireless communication devices. In the MANET, the transmitter and receiver nodes communicate using antennas which may be omnidirectional for broadcast purpose. In this paper, we compare the performance of routing protocols are- Geographical Routing Protocol (GRP) and Temporally-Ordered Routing Algorithm (TORA) Routing Protocol. The performance is evaluated by using “OPNET MODELER 14. 5 ” Simulator. The simulation performance parameters are – Traffic Received, Traffic Sent...|$|R
50|$|OpenComRTOS was {{developed}} for embedded systems and is written in portable ANSI-C, except the context switch and ISR interfaces.OpenComRTOS has been ported to the following targets:Freescale PowerPC, Texas Instruments C66xx DSP, Melexis MLX16, ARM Cortex M3/4, Xilinx MicroBlaze, LEON3, NXP CoolFlux DSP and to MS-Windows and Linux. The latter versions allow transparent integration of <b>host</b> <b>nodes</b> and serve as well cross development and simulation systems. As the RTOS kernel is identical for single or multi-processor nodes, supporting a multi-processor system requires only to write a small task level driver that can send and receives Packets.|$|R
