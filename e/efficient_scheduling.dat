745|1086|Public
5000|$|MP Synergy [...] - [...] a metascheduler {{based on}} Globus Toolkit {{technology}} that {{allows users to}} perform <b>efficient</b> <b>scheduling</b> within an organization that has multiple job schedulers already deployed and controlling independent clusters. [...] Supported schedulers include Grid MP, Sun Grid Engine, Platform LSF, PBS, LoadLeveler, and Condor.|$|E
5000|$|By rule, {{each of the}} Circuit Courts is {{required}} to have a differentiated case management plan “for the prompt and <b>efficient</b> <b>scheduling</b> and disposition of actions.” [...] Such plans vary by jurisdiction, but include the classification of cases by complexity and priority, to be assigned to particular scheduling “tracks” based on that classification. [...] Consistent with applicable court rule, the Circuit Courts have endeavored to make their differentiated case management plans as similar as possible; in practice, however, the plans do vary somewhat among the Circuit Courts.|$|E
50|$|The S-graph {{representation}} exploits problem-specific {{knowledge to}} develop <b>efficient</b> <b>scheduling</b> algorithms. In the scheduling problem, there are products, {{and a set}} of tasks, which have to be performed to produce a product. There are dependencies between the tasks, and every task has a set of needed equipment that can perform the task. Different processing times can be set for the same task in different equipment types. It is possible to have more pieces of equipment of the same type, or define changeover times between two tasks performed on a single piece of equipment.|$|E
40|$|We {{describe}} a novel technique for computing <b>efficient</b> <b>schedules</b> for multi-threaded real-time programs. The technique {{makes use of}} abstractions which are constructed by embedding {{the model of the}} program in a geometric space and then constructing a decomposition of this space. This embedding uses the model of PV diagrams. We introduce a timed version for PV programs and diagrams, which allows us to define the worst-case response time of the schedules, and then to use the geometric abstractions for computing <b>efficient</b> <b>schedules...</b>|$|R
40|$|An {{efficient}} {{execution of}} complex construction projects requires a comprehensive scheduling of all construction activities. For this, {{it is necessary}} to consider various restrictions and the availability of required resources. The generation of <b>efficient</b> <b>schedules</b> is a very challenging task, in fact an NP-hard optimization problem. An appropriate approach is the application of discrete-event simulation for the generation of valid schedules. Additionally, simulation is combined with optimization methods to determine <b>efficient</b> <b>schedules</b> regarding given objectives. The applied optimization techniques are evolutionary algorithms. Thus, operators have to be implemented that define the way of generating new schedules in the recombination step of the algorithm. In this paper an improved operator is presented that outperforms common operators for scheduling problems by considering technological dependencies between activities, so that {{it will be possible to}} determine <b>efficient</b> <b>schedules</b> for complex construction scheduling problems. An example of implementation is presented to validate the developed operator. ...|$|R
40|$|The {{acoustic}} propagation speed under water poses significant {{challenges to the}} design of underwater sensor networks and their medium access control protocols. Scheduling allows reducing the effects of long propagation delay of the acoustic signal and has significant impacts on throughput, energy consumption, and reliability. In this paper we propose two approaches for scheduling large-scale underwater networks. One approach is a centralized scheduling approach, which yields the most <b>efficient</b> <b>schedules</b> but has significant communication and computational overhead. Our second approach uses clustering to split up the network in independent clusters. This approach provides significant benefits in terms of communication and computation, but yields less <b>efficient</b> <b>schedules</b> than the centralized approach. We evaluate both approaches in terms of efficiency, communication overhead and computation overhead of the resulting schedule. We show that the centralized approach yield the best schedule at the cost of significant communication and computation overhead. The distributed scheduling approach yield less <b>efficient</b> <b>schedules</b> but offers significant communication and computational complexity advantages...|$|R
50|$|In {{the user}} plane, LTE and WLAN are {{aggregated}} at the Packet Data Convergence Protocol (PDCP) level. In the downlink, the eNB may schedule PDCP PDUs {{of the same}} bearer to be delivered to the UE either via LTE or WLAN. In order to perform <b>efficient</b> <b>scheduling</b> and to assign packets to LTE and WLAN links in the most efficient manner, the eNB can receive radio information about both links, including flow control indication. In order to avoid changes to the WLAN MAC, LWA uses an EtherType allocated for this purpose, so that LWA traffic is transparent to WLAN AP.|$|E
50|$|The C10k {{problem is}} the problem of {{optimising}} network sockets to handle a large number of clients at the same time. The name C10k is a numeronym for concurrently handling ten thousand connections. Note that concurrent connections {{are not the same as}} requests per second, though they are similar: handling many requests per second requires high throughput (processing them quickly), while high number of concurrent connections requires <b>efficient</b> <b>scheduling</b> of connections. In other words, handling many requests per second is concerned with the speed of handling requests, whereas a system capable of handling a high number of concurrent connections does not necessarily have to be a fast system, only one where each request will deterministically return a response within a (not necessarily fixed) finite amount of time.|$|E
50|$|To reduce {{communication}} costs some algorithms remove {{or reduce}} nodes' redundant sensor information and avoid forwarding data {{that is of}} no use. As nodes can inspect the data they forward, they can measure averages or directionality for example of readings from other nodes. For example, in sensing and monitoring applications, it is generally the case that neighboring sensor nodes monitoring an environmental feature typically register similar values. This kind of data redundancy due to the spatial correlation between sensor observations inspires techniques for in-network data aggregation and mining. Aggregation reduces the amount of network traffic which helps to reduce energy consumption on sensor nodes. Recently, {{it has been found}} that network gateways also {{play an important role in}} improving energy efficiency of sensor nodes by scheduling more resources for the nodes with more critical energy efficiency need and advanced energy <b>efficient</b> <b>scheduling</b> algorithms need to be implemented at network gateways for the improvement of the overall network energy efficiency.|$|E
40|$|Test {{scheduling}} is {{an important}} problem in system-on-a-chip (SOC) test automation. <b>Efficient</b> test <b>schedules</b> minimize the overall system test application time, avoid test resource conflicts, and limit power dissipation during test mode. In this paper, we present an integrated approach to several test scheduling problems. We first present a method to determine optimal schedules for reasonably sized SOCs with precedence relationships, i. e., schedules that preserve desirable orderings among tests. We also present an efficient heuristic algorithm to schedule tests for large SOCs with precedence constraints in polynomial time. We describe a novel algorithm that uses preemption of tests to obtain <b>efficient</b> <b>schedules</b> for SOCs. Experimental results for an academic SOC and an industrial SOC show that <b>efficient</b> test <b>schedules</b> can be obtained in reasonable CPU time...|$|R
40|$|Computer {{assisted}} scheduling {{techniques that}} produce conflict-free and <b>efficient</b> <b>schedules</b> {{have been developed}} and implemented to meet needs of the Manned Space Flight Network. CANS system provides effective management of resources in complex scheduling environment. System is automated resource scheduling, controlling, planning, {{information storage and retrieval}} tool...|$|R
40|$|Our goal is {{to develop}} an {{algebraic}} theory of process scheduling. We specify a syntax for denoting processes composed of actions with given durations. Subsequently, we propose axioms for transforming any specification term of a scheduling problem into a term of all valid schedules. Here a schedule is {{a process in which}} all (implementational) choices (e. g. precise timing) are resolved. In particular, we axiomatize an operator restricting attention to the <b>efficient</b> <b>schedules.</b> These schedules are representable as trees, because in an <b>efficient</b> <b>schedule</b> actions start only at time zero or when a resource is released, i. e. upon termination of the action binding a required resource. All further delay is useless. Nevertheless, we do not consider resource constraints explicitly here. We show that a normal form exists for every term of the algebra and establish both soundness of our axioms with respect to a schedule semantics and completeness for efficient processes. Introduction [...] ...|$|R
40|$|The {{classical}} scheduling literature considers {{many problems}} where a given set of jobs must be processed at minimum cost, subject to various resource constraints. The literature only considers {{the issue of}} revenue generation in a very limited way, by allowing a job to remain unprocessed and its revenue contribution to be lost. By contrast, we consider three diverse practical situations where <b>efficient</b> <b>scheduling</b> affects revenue in much more general and realistic ways. First, we study two make-to-order environments where <b>efficient</b> <b>scheduling</b> increases customer goodwill, thus stimulating demand in different ways. Second, we study two make-to-stock environments where <b>efficient</b> <b>scheduling</b> creates inventory, thus also stimulating demand in different ways. Third, we study new product markets where <b>efficient</b> <b>scheduling</b> leads to a company becoming the first mover, and thus acquiring a larger market share. In each case, we provide both a computationally efficient algorithm for scheduling and a proof that a much more efficient algorithm is unlikely to exist. For both the make-to-stock and make-to-order problems, we also describe heuristic approaches {{that are easy to}} implement, and we study their average performance. The results show that substantial benefits arise from considering the implications of <b>efficient</b> <b>scheduling</b> for revenue and net profit. The practical impact of our work is to demonstrate the importance of <b>efficient</b> <b>scheduling,</b> not only in controlling cost, but also in increasing revenue and net profit. manufacturing, scheduling, profit maximization, make-to-stock, make-to-order, algorithms, heuristics...|$|E
40|$|This paper {{present study}} of {{different}} scheduling algorithm and their comparison with genetic algorithm for operating system process scheduling. <b>Efficient</b> <b>scheduling</b> criteria {{play a significant}} role in overall system performance and throughput. To improve system performance an <b>efficient</b> <b>scheduling</b> mechanism is required. The scheduling is considered as NP hard problem. In this study it is found that the genetic algorithm gives the best result as compared to other scheduling algorith...|$|E
40|$|As {{real-time}} fault-tolerant scheduling {{is one of}} {{the main}} research areas in real-time fault-tolerant techniques, this paper proposes an <b>efficient</b> <b>scheduling</b> algorithm for BKCL(EBKCL). EBKCL can schedule the tasks with the fault-tolerant requirements(FTR) together with tasks without FTR. It is assumed in BKCL that there are no overlaps between the backup copies, however, the backup copies are allowed to be overlapped in EBKCL. The simulation experiment shows that the performance of EBKCL is better than that of BKCL. In order to enhance the performance of the BKCL, a dynamic scheduling algorithm is proposed, the performance simulation and analysis of DSA are also given in this paper. KEY WORDS Fault-tolerant, real-time task, <b>efficient</b> <b>scheduling,</b> performance analysis, heuristics, distributed systems...|$|E
40|$|Abstract. The goal of {{this paper}} is to develop an {{algebraic}} theory of process scheduling. We specify a syntax for denoting processes composed of actions with given durations. Subsequently, we propose axioms for transforming any specification term of a scheduling problem into a term of all valid schedules. Here a schedule is a process in which all (implementational) choices (e. g. precise timing) are resolved. In particular, we axiomatize an operator restricting attention to the <b>efficient</b> <b>schedules.</b> These schedules turn out to be representable as trees, because in an <b>efficient</b> <b>schedule</b> actions start only at time zero or when a resource is released, i. e. upon termination of the action binding a required resource. All further delay would be useless. Nevertheless, we do not consider resource constraints explicitly here. We show that a normal form exists for every term of the algebra and establish soundness of our axiom system with respect to a schedule semantics, as well as completeness for efficient processes...|$|R
40|$|Abstract We {{present a}} method {{based on the}} Multi-Objective Simulated Annealing techniques. Results of the {{computational}} experiment indicate that the proposed algorithms provide efficient solutions with little computational effort. For all the tested instances a net set of potentially <b>efficient</b> <b>schedules</b> has been obtained and compared with previously published results. ...|$|R
40|$|Purpose – In this paper, {{the authors}} propose the {{application}} of an intelligent engine to develop a set of computational schedules {{for the maintenance of}} vehicles to cover all scheduled flights. The aim of the paper is to maximize the utilization of ground support vehicles and enhance the logistics of aircraft maintenance activities. Design/methodology/approach – A mathematical model is formulated and the solution is obtained using genetic algorithms (GA). Simulation is used to verify the method using an Excel GA generator. The model is illustrated with a numerical case study, and the experience of this project is summarized. Findings – The results indicate that this approach provides an effective and <b>efficient</b> <b>schedule</b> for deploying the maintenance equipment resources of the company, China Aircraft Service Limited. Originality/value – The proposed model using the GA generator provides an effective and <b>efficient</b> <b>schedule</b> for the aircraft maintenance services industry. ...|$|R
40|$|<b>Efficient</b> <b>scheduling</b> for {{heterogeneous}} fractional lambda switching (FLS) networks {{is required}} but challenging. A heterogeneous network implies bandwidth mismatch between links of varied bit rates. Moreover, when non-immediate forwarding (NIF) {{is used in}} FLS, it increases the scheduling complexity exponentially, while decreasing the blocking probability. Thus, NIF scheduling presents a serious challenge for an algorithm {{to be used in}} a large heterogeneous FLS network. In this paper, an <b>efficient</b> <b>scheduling</b> algorithm that is combined with a flexible forwarding scheme is presented. The algorithm provides a full scheduling solution for an end-to-end request in heterogeneous FλS networks. Furthermore, the algorithm has linear complexity in single-channel networks and quadratic complexity in multiple-channel WDM networks...|$|E
40|$|Grid Computing is an {{important}} field that focuses on resource sharing. Grid Computing provides a secure, control and flexible resource access environment in a distributed network. One {{of the most critical}} issues in Grid Computing is <b>efficient</b> <b>scheduling</b> of the tasks. The main aim of Grid scheduling is to map the tasks onto the available processors and order their execution. Due to the dynamism and heterogeneity of the grid, an <b>efficient</b> <b>scheduling</b> algorithm that minimizes makespan with maximum resource is necessary. <b>Efficient</b> <b>scheduling</b> of jobs to the available grid resources makes effective utilization of the grid environment. Heuristic algorithms can be used for solving task scheduling problems, since it is shown to be NP-Complete. Efficiency of scheduling algorithms can be evaluated using the two important criteria makespan and resource utilization. A heuristic task scheduling algorithm that satisfies load balancing of resources on a grid environment is presented in this paper. This algorithm schedules the tasks which reduces the makespan of the jobs and increase the utilization of resources. The new heuristic task scheduling is compared with other traditional heuristics and the results are shown to predict that the new algorithm outperforms the other...|$|E
30|$|In {{the next}} sections, we specify the RMPA {{handover}} procedure by describing, first, the specific procedures {{that take place}} during each stage in the RMPA handover process and, then, the new RMPA scanning and handover policies used for <b>efficient</b> <b>scheduling</b> of the handover process.|$|E
50|$|Allocation {{of limited}} {{resources}} {{is based on}} the priority given to each of the project activities. Their priority is calculated using the Critical path method and heuristic analysis.For a case with a constraint on the number of resources, the objective is to create the most <b>efficient</b> <b>schedule</b> possible - minimising project duration and maximising the use of the resources available.|$|R
40|$|This master thesis {{examines}} {{the merits of}} using a more fine grained objective function for automatic rostering of airline crew at SAS. Creating <b>efficient</b> <b>schedules</b> for crew members at a modern airline is a complex and difficult task. A large set of rules (government laws and union agreements) apply, regarding work hours, rests, training etc. Computer support is used to create <b>efficient</b> <b>schedules.</b> A cost function is specified. The computer system tries to minimize {{the value of the}} cost function while not breaking any rules. The hypothesis has been made, that some of the rules used are too rigid. That is, some of the rules used within the system disallow some schedules which are in fact desirable. Some of the rules within the system are government laws. These may be coursegrained, but can, nonetheless never be broken. This work studies some rules which may be reimplemented in a more fine-grained fashion within the SAS scheduling optimization environment. Metrics are introduced...|$|R
40|$|This paper {{considers}} a single-machine scheduling problem {{in which the}} maximum tardiness and the total flowtime are two objectives to be minimized. Instead of enumerating all <b>efficient</b> <b>schedules,</b> the author considers the problem of minimizing the maximum of the weighted values of these two objective functions, which arises in interactive multicriteria decision making. The author proposes a strongly polynomial algorithm for this problem which runs in O(n^ 2 log n) time...|$|R
40|$|Abstract — <b>Efficient</b> <b>scheduling</b> for {{heterogeneous}} fractional lambda switching (FλS) networks {{is required}} but challenging. A heterogeneous network implies bandwidth mismatch between links of varied bit rates. Moreover, when non-immediate forwarding (NIF) {{is used in}} FλS, it increases the scheduling complexity exponentially, while decreasing the blocking probability. Thus, NIF scheduling presents a serious challenge for an algorithm {{to be used in}} a large heterogeneous FλS network. In this paper, an <b>efficient</b> <b>scheduling</b> algorithm that is combined with a flexible forwarding scheme is presented. The algorithm provides a full scheduling solution for an end-to-end request in heterogeneous FλS networks. Furthermore, the algorithm has linear complexity in single-channel networks and quadratic complexity in multiple-channel WDM networks. Index Terms — scheduling, search algorithms, fractional lambda switching, pipeline forwarding, optical networks I...|$|E
40|$|There are {{numerous}} approach to scheduling problems. Scheduling {{problem is a}} NP hard problem. This paper present the modified cross over genetic algorithm approach to single processor process scheduling. Single processor machine efficiency depends upon the <b>efficient</b> <b>scheduling</b> of single processor. The work present in this paper shows that processor scheduling can be optimize by apply <b>efficient</b> <b>scheduling</b> algorithm. Extensive computational experiments are carried out to get optimum efficiency of the proposed algorithm. Efficiency of the scheduling algorithm can be examined on number of factors. In this paper we consider average waiting time, turn around time and weighted turn around time as an optimization criteria of scheduling algorithms. Simulation in this paper evaluates the performance and efficiency of proposed algorithm. Experimental results indicates that MCOGA shoes better results than that of traditional scheduling algorithms...|$|E
40|$|Grid Computing {{has emerged}} as an {{important}} new field focusing on resource sharing. One {{of the most challenging}} issues in Grid Computing is <b>efficient</b> <b>scheduling</b> of tasks. In this paper, we propose a Load balancing algorithm for fair scheduling, and we compare it to other scheduling schemes such as the Earlies...|$|E
40|$|Abstract. The {{computation}} of <b>efficient</b> <b>schedules</b> of task graphs for parallel machines is a {{major issue}} in parallel computing. Such algorithms are often hard to understand and hard to evaluate. We present a framework for the visualization of scheduling algorithms. Using the LogP cost model for parallel machines, we simulate the effects of scheduling algorithms for specific target machines and task graphs before performing time and resource consumptive measurements in the real world. ...|$|R
40|$|Abstract: Task {{scheduling}} is {{an essential}} aspect of parallel processing. Much previous work {{is based on a}} simple system model that assumes fully connected processors and concurrent communication, which has strong influence on the efficiency of parallel program. This paper proposes a new scheduling algorithm that integrates communication contention by serializing the communications edges, which produces significantly more accurate and <b>efficient</b> <b>schedules</b> in experiments. Key words: communication contention; task scheduling; serializing 1...|$|R
40|$|This model {{provides}} the performance characterization required for efficient partitioning of parallel computations in two-tiered architectures. We illustrate the performance parameters chosen by extracting the model parameters for MPI {{programs on the}} Convex Exemplar SPP 1600 machine. Finally, we show {{the properties of the}} model by considering a favorite testbed, an acyclic, directed graphs called the Diamond DAG for which we derive and analyse <b>efficient</b> <b>schedules.</b> Keywords: two tiered multicomputers, computer clusters, parallel machine models, performance models, partitioning. ...|$|R
40|$|Many {{scientific}} applications {{running in}} Cloud Computing system are workflow applications that contains {{large number of}} tasks and in which tasks are connected by precedence relations. <b>Efficient</b> <b>scheduling</b> the workflow tasks become a challenging issue in Cloud Computing environments because the scheduling decides performance of the applications. Unfortunately, finding the optimal scheduling is known as NP-hard. Ant Colony Optimization algorithm {{can be applied to}} design <b>efficient</b> <b>scheduling</b> algorithms. Previous scheduling algorithms that use Ant Colony mechanism lack rapid adaptivity. This paper proposes a task scheduling algorithm that uses a modified Ant Colony Optimization. The modified version uses probability in order for ants to decide target machine. The proposed task scheduling algorithm is implemented in WorkflowSim in order to measure performance. The experimental results show that the proposed scheduling algorithm reduce average makespan to about 6. 4...|$|E
40|$|Task {{scheduling}} {{is concerned}} with the allocation of tasks onto underlying physical processors and the determination of the execution order of tasks residing on the same processor. <b>Efficient</b> <b>scheduling</b> of user tasks is critical to system and application performance in parallel programming. This paper proposes a new task mapping environment, ATME, dealing with the generation of an <b>efficient</b> <b>scheduling</b> policy when task computation time and communication data size may change, and when different execution paths through the task model may be followed. ATME manages the task execution by an adaptively-produced scheduling policy which is tailored for an individual user by following usage patterns of previous executions. Keywords Conditional parallel programming support, stochastic task scheduling, scheduling algorithm. 1 Introduction Parallel programming is intrinsically difficult due to the complexity of the partitioning of a program into tasks, task communication and synchronization, and [...] ...|$|E
40|$|Parallel I/O {{architectures}} {{are increasingly}} deployed for high performance computing and in shared data centers. In these environments {{it is desirable}} to provide QoS-based allocation of disk bandwidth to different applications sharing the I/O system. In this paper, we introduce a model of disk bandwidth allocation, and provide <b>efficient</b> <b>scheduling</b> algorithms to assign the bandwidth among the concurrent applications...|$|E
50|$|CitationAir {{was known}} for {{pioneering}} an <b>efficient</b> flight <b>schedule</b> based on in-house-developed software and it was responsible for introducing many non-owners to the Citations.|$|R
40|$|A {{decision-maker}} {{needs to}} schedule several activities that take uncertain {{time to complete}} and are only valuable together. Some activities {{are bound to be}} finished earlier than others, therefore resuting in waiting costs. We show how to schedule activities optimally, how to give independent agents performing them incentives that implement the <b>efficient</b> <b>schedule,</b> and how to form teams in the presence of uncertainty. The present paper offers insights into important economic decisions such as planning large projects and coordinating product development activities...|$|R
40|$|We {{study the}} most general {{communication}} paradigm on a multiprocessor, wherein each processor {{has a distinct}} message (of possibly distinct lengths) for each other processor. We study this paradigm, which we call chatting, on multiprocessors that do not allow messages once dispatched ever to be delayed on their routes. By insisting on oblivious routes for messages, we convert the communication problem to a pure scheduling problem. We introduce {{the notion of a}} virtual chatting schedule, and we show how <b>efficient</b> chatting <b>schedules</b> can often be produced from <b>efficient</b> virtual chatting <b>schedules.</b> We present a number of strategies for producing <b>efficient</b> virtual chatting <b>schedules</b> on a variety of network topologie...|$|R
