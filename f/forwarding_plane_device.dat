0|482|Public
50|$|The Open Networking Foundation (ONF), a user-led {{organization}} dedicated to promotion and adoption of software-defined networking (SDN), manages the OpenFlow standard. ONF defines OpenFlow as the first standard communications interface defined between the control and forwarding layers of an SDN architecture. OpenFlow allows direct access to and manipulation of the <b>forwarding</b> <b>plane</b> of network <b>devices</b> such as switches and routers, both physical and virtual (hypervisor-based). It {{is the absence of}} an open interface to the <b>forwarding</b> <b>plane</b> that has led to the characterization of today's networking devices as monolithic, closed, and mainframe-like. A protocol like OpenFlow is needed to move network control out of proprietary network switches and into control software that's open source and locally managed.|$|R
30|$|Controllers, in turn, {{make use}} of the Southbound API to {{interact}} with <b>devices</b> in the <b>Forwarding</b> <b>plane,</b> i.e., by issuing low-level instructions and collecting information. The Management API enables the Management <b>plane</b> to handle <b>devices</b> and services in all other planes, through legacy management protocols, such as SNMP, or new ones, such as OF-Config 1.|$|R
40|$|Software-Defined Networking (SDN) is a {{networking}} paradigm that decouples {{the control}} plane {{of a network}} from its <b>forwarding</b> <b>plane</b> and offers programmability of the data <b>plane</b> <b>devices</b> to manage and control the ongoing traffic flows. This paper presents the control plane architecture of a Datacentre network (DCN) and its operational services being developed for NEPHELEs optical network infrastructure. The heart of the proposed control plane overlay is an OpenDaylight SDN controller, which along-with its north and south-bound interfaces bridges {{the gap between the}} cloud applications and the DC network configuration at the data plane, in order to automatically adjust the underlying network to the Quality of Service (QoS) requirements at the application level. An application based traffic shaping use case is presented as a proof of concept of applicationaware networking in SDN-enabled data center networks...|$|R
40|$|Ever {{since the}} Internet appeared, network elements, such as routers, have been {{enhanced}} with much functionality. They tend to increasingly integrate more services, such as support and security mechanisms, which ensure Quality of Service. Similarly, processor performance {{continues to increase}} rapidly. Thus, {{these two types of}} evolution trigger the concept of separating the Control <b>plane</b> and the <b>Forwarding</b> <b>plane</b> in network elements. This study addresses the separation of the control <b>plane</b> and the <b>forwarding</b> <b>plane</b> in Next-Generation Routers. XML syntax is used to model, on the one hand, the suitable elements of the control <b>plane</b> and the <b>forwarding</b> <b>plane.</b> Implementation and prototyping results indicate that this syntax type for modeling provides a flexible platform, which is truly able to manage the heterogeneity of the material implementing the <b>Forwarding</b> <b>Plane...</b>|$|R
5000|$|Routing and <b>forwarding</b> <b>plane</b> separation: This {{has proven}} {{necessary}} for Internet development. It allows the <b>forwarding</b> <b>plane</b> to function while the routing system continues to evolve over time. NDN {{uses the same}} principle to allow the deployment of NDN with the best available forwarding technology while new routing system research is ongoing.|$|R
40|$|Multiprotocol Label Switching (MPLS) was {{originally}} conceived {{to improve the}} efficiency of packet forwarding in network equipments and it relies on a strict separation between the control and <b>forwarding</b> <b>planes</b> in the network functions {{as well as in}} the software and hardware architecture of the routers. The paper presents the results of an experimental study aimed at evaluating the performance of the control and <b>forwarding</b> <b>planes</b> in a metropolitan MPLS network, interconnecting three sites, located in Pisa and equipped with M 10 Juniper routers. In particular, experimental tests have been carried out to deeply investigate the behaviour of the network control and <b>forwarding</b> <b>planes</b> in different working conditions...|$|R
5000|$|VPLS, {{which uses}} the split horizon {{technique}} to avoid loops in the <b>forwarding</b> <b>plane</b> ...|$|R
50|$|Routers {{for more}} {{demanding}} applications accept greater cost and complexity to get higher throughput in their <b>forwarding</b> <b>planes.</b>|$|R
5000|$|The data plane (also user plane, bearer <b>plane,</b> or <b>forwarding</b> <b>plane)</b> {{carries the}} network's users' traffic, the actual payload.|$|R
50|$|OpenFlow is a {{communications}} protocol that gives {{access to the}} <b>forwarding</b> <b>plane</b> of a network switch or router over the network.|$|R
5000|$|While {{layer 2 switch}} remains more of a {{marketing}} term than a technical term, the products that were introduced as [...] "switches" [...] tended to use microsegmentation and full duplex to prevent collisions among devices connected to Ethernet. By using an internal <b>forwarding</b> <b>plane</b> much faster than any interface, they {{give the impression of}} simultaneous paths among multiple devices. 'Non-blocking' <b>devices</b> use a <b>forwarding</b> <b>plane</b> or equivalent method fast enough to allow full duplex traffic for each port simultaneously.|$|R
50|$|The M Series {{were also}} {{the first in the}} {{industry}} to offer a true decoupling of the Control <b>Plane</b> and the <b>forwarding</b> <b>plane.</b>|$|R
5000|$|<b>Forwarding</b> <b>plane</b> {{functions}} {{run in the}} forwarding element. [...] High-performance routers {{often have}} multiple distributed forwarding elements, so that the router increases performance with parallel processing.|$|R
30|$|More recently, {{programmable}} routers with reprogrammable hardware such as FPGAs {{have been}} proposed to simultaneously address the needs for flexibility, extensibility, and performance for the <b>forwarding</b> <b>plane.</b> Prominent projects in this category include the NetFPGA project[47], the RouteBricks project[49], and the SwitchBlade project[50]. Extensible open-source control plane software also exists with the Extensible Open Router Platform (XORP) open-source software suite[44] being a prominent example; XORP defines a fully extensible platform, suitable for both research and deployment, which builds upon the extensible Click framework in its <b>forwarding</b> <b>plane.</b>|$|R
40|$|NDN) is {{that its}} <b>forwarding</b> <b>plane</b> can detect and recover from network faults on its own. Consequently, NDN routers are able to handle network {{failures}} locally without relying on global routing convergence. This fundamental change prompts us to rethink the role of routing in NDN networks: does it still need a routing protocol? If so, what impact may an intelligent <b>forwarding</b> <b>plane</b> have on the design and operation of NDN routing protocols? Through analysis and extensive simulations, we show that a routing protocol remains necessary in NDN networks. Routing disseminates initial topology and policy information as well as long-term changes in them, and computes the routing table to guide the forwarding process. However, since the <b>forwarding</b> <b>plane</b> is capable of detecting failures and recovering quickly, routing no longer needs to handle short-term churns in the network. Freeing routing protocols from short-term churns can greatly improve their scalability and stability, enabling NDN to use routing protocols that were previously viewed as unsuitable for real networks. I...|$|R
50|$|This router {{architecture}} {{separates the}} Control Plane {{function of the}} routing table from the <b>Forwarding</b> <b>Plane</b> function of the forwarding table. This separation of control and forwarding provides uninterrupted performance.|$|R
30|$|In a real scenario, if a {{mobility}} management protocol {{has a high}} packet delivery cost, the <b>forwarding</b> <b>plane</b> introduces overhead to {{the network}} when the packets are sent or received using the tunnelling mechanism.|$|R
30|$|In Named Data Networking (NDN) architecture, packets carry data names {{rather than}} source or {{destination}} addresses. To realize this paradigm, each NDN router maintains three data structures CS, PIT, FIB in the <b>forwarding</b> <b>plane.</b> Designing a quick enough <b>forwarding</b> <b>plane</b> with high capacity {{is a major}} challenge within the overall NDN research area. In this paper, we present a novel implementation of FIB called MaFIB. The evaluations indicate that the excellent data structure and the efficient lookup algorithm of MaFIB can effectively reduce the memory cost and can accelerate the lookup process. Its outstanding performance in probability of false positive also makes MaFIB meet current network requirements.|$|R
40|$|This thesis {{looks at}} how Software Defined Networking (SDN) {{can be used}} to provide traffic {{engineering}} and to police traffic in an Operational Military Network (OMN). SDN is a concept where the control plane is separated from the <b>forwarding</b> <b>plane,</b> and the control plane is capable of controlling <b>forwarding</b> <b>plane</b> elements located on multiple network nodes using the OpenFlow protocol. Specifically, we have discussed the problems in OMNs, and possible SDN approaches to mitigate the challenges. Based on the findings, we have designed, developed and validated an SDN implementation capable of obtaining dynamic topology information and to enforce user-defined policies in order provide traffic engineering for flows, resources, and topology...|$|R
50|$|Software-defined {{networking}} {{can also}} be enhanced when source routing {{is used in the}} <b>forwarding</b> <b>plane.</b> Studies have shown significant improvements in convergence times {{as a result of the}} reduced state that must be distributed by the controller into the network.|$|R
40|$|Abstract. Programmable {{networks}} have accentuated {{the need for}} a clear separation of the control and <b>forwarding</b> <b>planes.</b> The IETF ForCES protocol allows control elements to be connected to logically separated forwarding elements. The FlexiNET IST project relies on dynamic service deployment, which requires router programmability in the control and/or <b>forwarding</b> <b>planes.</b> Moreover, to shorten the implementation and deployment time of control elements, {{there is a need for}} simple higher-level APIs that shield such elements from ForCES protocol and model details. This paper proposes a ForCES CE Gateway (ForCEG) architecture that fulfills these requirements and maps Web Service interfaces to ForCES messages while checking the validity of commands to ensure consistency of the router state. 1...|$|R
50|$|Depending on the {{specific}} router implementation, {{there may be a}} separate forwarding information base that is populated (i.e., loaded) by the control plane, but used by the <b>forwarding</b> <b>plane</b> to look up packets, at very high speed, and decide how to handle them.|$|R
50|$|In March 2006, ACCESS {{acquired}} IP Infusion, Inc., {{a provider}} of intelligent networking software, providing Layer 2 and Layer 3 carrier-class switching and routing {{as well as a}} comprehensive <b>forwarding</b> <b>plane</b> implementation supporting L2, L3 (IPv4 & v6), multicast and MPLS/Traffic Engineering.|$|R
40|$|Abstract—Named Data Networking (NDN) is a {{recently}} pro-posed general-purpose network architecture that leverages {{the strengths of}} Internet architecture while aiming to address its weaknesses. NDN names packets rather than end-hosts, and most of NDN’s characteristics are a consequence of this fact. In this paper, {{we focus on the}} packet forwarding model of NDN. Each packet has a unique name which is used to make forwarding decisions in the network. NDN forwarding differs substantially from that in IP; namely, NDN forwards based on variable-length names and has a read-write data plane. Designing and evaluating a scalable NDN forwarding node architecture is a major effort within the overall NDN research agenda. In this paper, we present the concepts, issues and principles of scalable NDN <b>forwarding</b> <b>plane</b> design. The essential function of NDN <b>forwarding</b> <b>plane</b> is fast name lookup. By studying the performance of the NDN reference implementation, known as CCNx, and simplifying its forwarding structure, we identify three key issues in the design of a scalable NDN forwarding plane: 1) exact string matching with fast updates, 2) longest prefix matching for variable-length and unbounded names and 3) large-scale flow maintenance. We also present five <b>forwarding</b> <b>plane</b> design principles for achieving 1 Gbps throughput in software implementation and 10 Gbps with hardware acceleration...|$|R
40|$|Named Data Networking (NDN) is a {{recently}} proposed new Internet architecture. By naming data instead of locations, {{it changes the}} very basic network service abstraction from "delivering packets to given destinations" to "retrieving data of given names. " This fundamental change creates an abundance of new opportunities {{as well as many}} intellectual challenges in application development, network routing and forwarding, communication security and privacy. The focus of this dissertation is a unique feature introduced by NDN: its adaptive <b>forwarding</b> <b>plane.</b> Communication in NDN is done by exchanges of Interest and Data packets. Consumers send Interest packets to request desired Data, routers forward them based on data names, and producers answer with Data packets, which take the same path of Interests but in reverse direction. During this process, routers maintain state information of pending Interests. This state information, coupled with the symmetric exchange of Interest and Data, enables NDN routers to detect loops, observe data retrieval performance, and explore multiple forwarding paths, all at the <b>forwarding</b> <b>plane.</b> Since NDN is still in its early stage, however, none of these powerful features has been systematically designed, valuated, or explored. In this dissertation, we present a concrete design of NDN's <b>forwarding</b> <b>plane</b> to make the network resilient and efficient. First, we design the basic adaptation mechanism and evaluate its effectiveness in circumventing prefix hijack attacks. Second, we propose a novel NACK mechanism for fast failure detection and evaluate its benefits in handling network failures. We also show that a resilient <b>forwarding</b> <b>plane</b> makes routing more stable and more scalable. Third, we design a congestion control mechanism, Dynamic Interest Limiting, to adapt traffic rate in a hop-by-hop and multipath fashion, which is effective even with a large number of flows in a large network topology...|$|R
3000|$|Indirect model. The second {{deployment}} {{paradigm is}} the indirect model, {{in which the}} AS connects indirectly to an operator network through the services of an SCS in order to utilize additional value-added services for M 2 M (e.g., control <b>plane</b> <b>device</b> triggering) [...]...|$|R
40|$|Sperimental {{study of}} {{friction}} on geosynthetic interfaces, employed in landfill top cover liners, using an Inclined <b>Plane</b> <b>Device.</b> Comparison of different interfaces, different inclined plane procedures {{and analysis of}} parameters influencing the interfacial behaviour. In particular: sample damage, temperature and different plane inclinatio...|$|R
40|$|In Software Defined Networking (SDN) {{the control}} plane is {{physically}} {{separate from the}} <b>forwarding</b> <b>plane.</b> Control software programs the <b>forwarding</b> <b>plane</b> (e. g., switches and routers) using an open interface, such as OpenFlow. This paper aims to overcomes two limitations in current switching chips and the OpenFlow protocol: i) current hardware switches are quite rigid, allowing “Match-Action ” processing on only a fixed set of fields, and ii) the OpenFlow specification only defines a limited repertoire of packet processing actions. We propose the RMT (reconfigurable match tables) model, a new RISC-inspired pipelined architecture for switching chips, and we identify the essential minimal set of action primitives to specify how headers are processed in hardware. RMT allows the <b>forwarding</b> <b>plane</b> to be changed in the field without modifying hardware. As in OpenFlow, the programmer can specify multiple match tables of arbitrary width and depth, subject only to an overall resource limit, with each table configurable for matching on arbitrary fields. However, RMT allows the programmer to modify all header fields much more comprehensively than in OpenFlow. Our paper describes {{the design of a}} 64 port by 10 Gb/s switch chip implementing the RMT model. Our concrete design demonstrates, contrary to concerns within the community, that flexible OpenFlow hardware switch implementations are feasible at almost no additional cost or power...|$|R
40|$|Abstract. The {{requirements}} on IP routers continue to increase, {{both from the}} control <b>plane</b> and the <b>forwarding</b> <b>plane</b> perspectives. To improve scalability, flexibility, and availability new ways to build future routers need to be investigated. This paper suggests a decentralized, modular system design for routers, based on control elements for functionalities like routing, and forwarding elements for packet processing. Further, we present measurements {{on the distribution of}} large routing tables in an experimental platform consisting of one control element and up to 16 forwarding elements. 1 Introduction and Related Work The growth of the Internet in combination with the demand for new services rapidly increase the requirements imposed on network systems, such as IP routers. The growing traffic volumes require higher performance of the <b>forwarding</b> <b>plane,</b> i. e., the router’s capacity to process and forward packets. New services often require bot...|$|R
50|$|Regardless {{of which}} mode is in use, either {{endpoint}} may also initiate an Echo function. When this function is active, {{a stream of}} Echo packets is sent, and the other endpoint then sends these back to the sender via its <b>forwarding</b> <b>plane.</b> This is {{used to test the}} forwarding path on the remote system.|$|R
40|$|Information-Centric Networking (ICN) is {{a recent}} {{paradigm}} that claims to mitigate some limitations of the current IP-based Internet architecture. The centerpiece of ICN is named and addressable content, rather than hosts or interfaces. Content-Centric Networking (CCN) is a prominent ICN instance that shares the fundamental architectural design with its equally popular academic sibling Named-Data Networking (NDN). CCN eschews source addresses and creates one-time virtual circuits for every content request (called an interest). As an interest is forwarded it creates state in intervening routers and the requested content back is delivered over the reverse path using that state. Although a stateful <b>forwarding</b> <b>plane</b> might be beneficial in terms of efficiency, and resilience to certain types of attacks, {{this has not been}} decisively proven via realistic experiments. Since keeping per-interest state complicates router operations and makes the infrastructure susceptible to router state exhaustion attacks (e. g., there is currently no effective defense against interest flooding attacks), the value of the stateful <b>forwarding</b> <b>plane</b> in CCN should be re-examined. In this paper, we explore supposed benefits and various problems of the stateful <b>forwarding</b> <b>plane.</b> We then argue that its benefits are uncertain at best and it should not be a mandatory CCN feature. To this end, we propose a new stateless architecture for CCN that provides nearly all functionality of the stateful design without its headaches. We analyze performance and resource requirements of the proposed architecture, via experiments. Comment: 10 pages, 6 figure...|$|R
30|$|Furthermore, CCN {{uses the}} {{adaptive}} <b>forwarding</b> <b>plane</b> {{to guide the}} routing and forwarding of packets [17]. An adaptive forwarding strategy can send Interests along optimum paths to avoid congestion and failures, balance payload, detect, and react to attacks such as prefix hijacking and Distributed Denial of Service (DDoS). On the adaptive <b>forwarding</b> <b>plane,</b> each NDN router maintains three data structures: a Pending Interest Table (PIT), a Forwarding Information Base (FIB) [18, 19], and a Content Store (CS). PIT stores all the Interests that a router has forwarded but not satisfied yet. FIB {{is similar to the}} routing table in IP network, which provides the path information for forwarding. However, CCN allows the simultaneous use of multiple interfaces to forward the same Interest and the IP network can only use one interface. What is more, CS is a temporary cache of Data which received recently, so it is convenient to satisfy future Interests and save the bandwidth of network.|$|R
30|$|Because of the {{evidenced}} {{benefits of}} SDN in wired networks, such as network programmability and flexible operation, {{it is natural}} to consider this paradigm as a framework to deliver the same benefits to wireless networks [5]. Before discussing the realization of SDN in the wireless world, we do a brief review on current SDN concepts. SDN is conceptually organized in four planes. (i) Application plane, (ii) Control <b>plane,</b> (iii) <b>Forwarding</b> <b>plane,</b> and (iv) Management plane [6]. Applications sitting on the Application plane are designed and operated by service providers that serve their own subscribers. Applications eventually issue requests for network resources, which are interpreted and translated into fine-grain configurations by network controllers at the Control plane. Besides handling requests coming from services, controllers also react upon receiving events generated by <b>devices</b> from the <b>Forwarding</b> <b>plane</b> (e.g., to recover from failure or performance degradation). Finally, the Management plane manages the components of an SDN architecture (e.g., applications, controllers, and devices) by monitoring and tuning {{the health of the}} whole network across planes to meet high-level policies and agreements.|$|R
40|$|A Testbed for Simulation-based Analysis of <b>Forwarding</b> <b>Plane</b> - Faras Mohan Dewal Master of Applied Science (Electrical and Computer Engineering) Concordia University, Montreal QC, 2016 This thesis {{presents}} a testbed capable of generating scalable realistic network traffic on a standalone machine. The functionality {{of the proposed}} testbed is to model a scalable network of client and server instances and generate network traffic to perform simulation based-analysis of <b>forwarding</b> <b>plane</b> designs. The testbed enables the designer to successfully conduct experiments on the design under test using realistic traffic profiles and assess the performance for multiple use cases. The proposed testbed defines simulation models for client and server nodes. The testbed modeling has been abstracted to three different levels. First, a base node design allows us to instantiate and manage multiple instances within the node. Second, a transmission protocol is implemented to enable data transfer between client and server instances. The final stage is the Internet application modeling stage. Our experiments show {{that we are able}} to reliably generate network traffic for up to 400 client and server instances on a standalone machine...|$|R
40|$|A unique {{feature of}} Named Data Networking (NDN) {{is that its}} <b>forwarding</b> <b>plane</b> can detect and recover from network faults on its own, {{enabling}} each NDN router to handle net-work failures locally without relying on global routing con-vergence. This new feature prompts us to re-examine the role of routing in an NDN network: does it still need a rout-ing protocol? If so, what impact may an intelligent forward-ing plane have on the design and operation of NDN routing protocols? Through analysis and extensive simulations, we show that routing protocols remain highly beneficial in an NDN network. Routing disseminates initial topology and policy information as well as long-term changes in them, and computes the routing table to guide the forwarding process. However, because the <b>forwarding</b> <b>plane</b> is capable of detect-ing and recovering from failures quickly, routing no longer needs to handle short-term churns in the network. Freeing routing protocols from short-term churns can greatly im-prove their scalability and stability, enabling NDN to use routing protocols that were previously viewed as unsuitable for real networks...|$|R
40|$|Nowadays, many IP {{backbone}} networks adopt separate {{control and}} <b>forwarding</b> <b>planes</b> for unicast and multicast traffic flows. Indeed, while MPLS (multiprotocol label switching) is widely deployed for unicast traffic, IP multicast {{is the only}} available solution for the delivery of "one-to-many" traffic flows. With P 2 MP LSPs (point-to-multipoint label switched paths) support, a unified control and <b>forwarding</b> <b>plane</b> may be devised. Such {{a reduction in the}} number of protocols used in the core of the network as well as in the number of encapsulations in the data plane, results in simplified network operations. The paper discusses the design and the development of the control and data planes extensions needed to provide P 2 MP LSP support in an MPLS node. In particular, such extensions, concerning the P 2 MP LSPs path computation, the RSVP-TE signalling protocol, and the forwarding mechanism, have been implemented as new software modules for an ad-hoc developed simulator, based on NS 2. Finally, tests have been performed to assess the behaviour of the new functionalities introduced in the simulator...|$|R
