437|146|Public
25|$|A sprite is a {{two-dimensional}} image or animation that is {{integrated into a}} larger scene. Initially including just <b>graphical</b> <b>objects</b> handled separately from the memory bitmap of a video display, this now includes various manners of graphical overlays.|$|E
25|$|SVG allows {{three types}} of graphic objects: vector graphic shapes such as paths and {{outlines}} consisting of straight lines and curves, bitmap images, and text. <b>Graphical</b> <b>objects</b> can be grouped, styled, transformed and composited into previously rendered objects. The feature set includes nested transformations, clipping paths, alpha masks, filter effects and template objects. SVG drawings can be interactive and can include animation, defined in the SVG XML elements or via scripting that accesses the SVG Document Object Model (DOM). SVG uses CSS for styling and JavaScript for scripting. Text, including internationalization and localization, appearing in plain text within the SVG DOM enhances the accessibility of SVG graphics.|$|E
25|$|In {{the early}} 1980s, Evans & Sutherland (E) {{decoupled}} their PS300 graphics processor/display, which contained its own display information transformable through a dataflow architecture. Complex <b>graphical</b> <b>objects</b> could be downloaded over a serial line (e.g. 9600, 56K baud) or Ethernet interface and then manipulated without {{impact on the}} host. The architecture was excellent for high performance display but very inconvenient for domain-specific calculations, such as electron-density fitting and energy calculations. Many crystallographers and modellers spent arduous months trying to fit such activities into this architecture. E designed a card for the PS-300 which had several calculation algorithms using a 100 bit wide finite state machine {{in an attempt to}} simplify this process but it was so difficult to program that it quickly became obsolete.|$|E
40|$|A {{method of}} {{providing}} graphics data, comprising generating a {{first set of}} data vectors specifying geometrical characteristics of a <b>graphical</b> <b>object</b> in a first digital picture, generating {{a second set of}} data vectors specifying geometrical characteristics of the <b>graphical</b> <b>object</b> in a second digital picture to be displayed after the first digital picture, generating a parameter st comprising information specifying intermediate geometrical characteristics of the <b>graphical</b> <b>object</b> in the first digital picture, and of the <b>graphical</b> <b>object</b> in the second digital picture, wherein the intermediate geometrical characteristics are geometrical characteristics of the <b>graphical</b> <b>object</b> in at least one third digital picture to be displayed after the first digital picture and before the second digital picture, and generating at least one data file comprising the first set of data vectors, the second set of data vectors and the parameter set...|$|R
5000|$|Gorm - GNUstep <b>Graphical</b> <b>Object</b> Relationship Manager (also UI builder) ...|$|R
5000|$|... e.g. {{dragging}} a color onto a <b>graphical</b> <b>object</b> {{to change its}} color, ...|$|R
500|$|Although {{advertised as}} a 3D game, Iridion 3D uses solely 2D {{graphics}} for texture scrolling and sprites which depict explosions and enemies. The developers {{create the illusion}} of 3D by looping background texturesa graphically intensive technique for the Game Boy Advance. <b>Graphical</b> <b>objects</b> shrink or enlarge to depict position relative to the player. Level environments feature changes such as progression from day to night. Kitchen, Majesco's vice president of handhelds, wrote that [...] "by pushing the graphics hardware of the Game Boy Advance to its technical limits, Iridion 3D provides a truly realistic 3D gaming experience." [...] He hoped that [...] "players will be amazed that such smooth environments and intense gameplay can now be achieved on a portable system." ...|$|E
50|$|Collision {{detection}} is {{a related}} concept for detecting intersections {{of two or}} more different <b>graphical</b> <b>objects,</b> rather than intersection of a cursor with one or more <b>graphical</b> <b>objects.</b>|$|E
5000|$|An {{abstract}} graphical {{data type}} (AGDT) {{is an extension}} of an abstract data type for computer graphics. AGDTs provide the advantages of the ADTs with facilities to build <b>graphical</b> <b>objects</b> in a structured way. Formally, an AGDT may be defined as a [...] "class of <b>graphical</b> <b>objects</b> whose logical behavior is defined by a set of graphical characteristics and a set of graphical operations".|$|E
5000|$|Interface Builder - Mac OS X {{and former}} NextStep <b>Graphical</b> <b>Object</b> Relationship Manager and UI builder ...|$|R
5000|$|A {{pointing}} task involves {{moving a}} cursor inside a <b>graphical</b> <b>object</b> and pressing a button, whereas a goal-crossing task involves moving a cursor beyond a boundary of a targeted <b>graphical</b> <b>object.</b> Goal crossing {{has been little}} investigated, despite sometimes being used on today's interfaces (e.g., mouse-over effects, hierarchical menus navigation, auto-retractable taskbars and hot corners). Still, several advantages of crossing over pointing have been identified: ...|$|R
40|$|In {{this paper}} we {{introduce}} {{the concept of}} a <b>graphical</b> <b>object,</b> the abstraction paradigms to study them, as well as their applications in computer graphics. Intuitively, a <b>graphical</b> <b>object</b> encompasses all the entities which are manipulated in a graphics system. This notion makes it possible to unify similar research topics that have appeared in the literature in a rather separated way. As an application, we use {{the concept of a}} <b>graphical</b> <b>object</b> to study the problem of object metamorphosis, which includes as a particular case the problem of image metamorphosis. Although we are not primarily concerned with implementation issues in this paper, the concepts we introduce can be exploited for systems design and development using object oriented programming. Key words. Objects, morphing, object representaion, shape representaion. ...|$|R
50|$|Nest <b>graphical</b> <b>objects</b> and {{transform}} them into 2D and 3D. Skew, bend and distort images and text.|$|E
5000|$|Filter Effects can {{be applied}} to the <b>graphical</b> <b>objects,</b> giving convincing, {{realistic}} effects such as glass, metallic, plastic and other 2D/3D filters.|$|E
5000|$|Interfacing is {{the process}} of using [...] "layers" [...] to simplify the {{communications}} between technologies and between people and technologies. One example of layered interfacing is the buttons and menus used by home computer operating systems. These <b>graphical</b> <b>objects</b> exist as a link to the underlying [...] "buttons" [...] of the operating system. The command console is one level below these <b>graphical</b> <b>objects</b> as it gives you an even closer link to the underlying functions of the operating system.|$|E
25|$|A rich set {{of event}} {{handlers}} such as onmouseover and onclick can be assigned to any SVG <b>graphical</b> <b>object.</b>|$|R
5000|$|A <b>graphical</b> <b>object</b> {{and method}} based user {{interface}} which is easy and intuitive {{to use and}} naturally reflects the underlying C++ classes; ...|$|R
5000|$|The hardlink method {{does not}} require a <b>graphical</b> <b>object</b> tag or any special {{software}} be loaded on the users cell phone, but does require the phone be internet enabled.|$|R
5000|$|... #Caption: BisQue user {{interface}} showing {{results of a}} cell nuclei detection module run (red dots are <b>graphical</b> <b>objects</b> indicating nuclei overlaying the image).|$|E
5000|$|Morphic is a {{graphics}} {{system which}} uses <b>graphical</b> <b>objects</b> called Morphs for simplified GUI-building which {{allow for a}} great degree of flexibility and dynamism.|$|E
5000|$|PowerBuilder [...]NET by Sybase is a 4GL {{tool that}} {{translates}} PowerBuilder code, <b>graphical</b> <b>objects</b> to XAML and allows deploying the application as a WPF target.|$|E
40|$|The present {{invention}} {{relates to}} an apparatus and {{a method for}} exploring a <b>graphical</b> <b>object</b> (2) on a screen (3) of a graphics interface (4) through the movement of a pointing device (5 A) for a user. Particularly, the apparatus (1) comprises an electronic device (6) having a buffer (7) for storage of information to be presented to said user; the pointing device (5 A) is operatively associated to said electronic device (6) to generate an input signal for addressing said buffer (7) and is characterized in that the pointing device (5 A) can define a one-to-one correspondence between {{the position of the}} pointing device (5 A) and the position of at least one portion of said <b>graphical</b> <b>object</b> (2) for a given movement of the pointing device (5 A) controlled by said user and in that it comprises programmed means (11) operating in said electronic device (6) for producing a signal perceptible by said user, as a function of said correspondence between the position of the pointing device (5 A) and the position of at least one portion of said <b>graphical</b> <b>object</b> (2) ...|$|R
50|$|Gorm (<b>Graphical</b> <b>Object</b> Relationship Modeller) is a {{graphical}} {{user interface}} builder application. It {{is part of the}} developer tools of GNUstep. Gorm is the equivalent of Interface Builder that was originally found on NeXTSTEP, then OPENSTEP, and finally on Mac OS X.|$|R
40|$|Gradual {{transformation}} from one <b>graphical</b> <b>object</b> or image (source) to another <b>graphical</b> <b>object</b> or image (target) is called morphing. It {{is useful for}} creating special effects in animation. This technology is very popular in film and advertisement industries. The idea is distorting the first image into the second one and possible to vice versa. The middle image is a key point of this technology that is neither first image nor second image. If it looks good then probably the entire animated sequence will look good. Complete overview {{and all of the}} challenges of this technology is needed to all researchers to work with it. This paper describes an overview and challenges of almost all morphing algorithms that is used in computer animation. Cross-dissolving is one of the problems in morphing technology...|$|R
50|$|Page layout: Create {{multiple}} {{pages with}} a size limit of 64 megapixels, and arrange <b>graphical</b> <b>objects</b> on created pages (each object can be up to 7.8 megapixels in size).|$|E
5000|$|Morphic (software), {{makes it}} easier to build and edit <b>graphical</b> <b>objects</b> by direct {{manipulation}} and from within programs; the whole Self (programming language) programming environment is built using Morphic ...|$|E
50|$|The Graphics Device Interface (GDI) is a Microsoft Windows {{application}} programming interface {{and core}} operating system component responsible for representing <b>graphical</b> <b>objects</b> and transmitting them to output devices such as monitors and printers.|$|E
5000|$|<b>Graphical</b> {{reusable}} <b>object</b> and {{event based}} programming and design environment ...|$|R
40|$|Our {{group has}} been {{developing}} a GUI framework called KSWorld [7] that draws upon Functional Reactive Programming (FRP) [3]. The core idea is to describe the application logic {{in terms of the}} graph of data dependency in a time-aware manner. As in other GUI frameworks, there is a type of basic <b>graphical</b> <b>object...</b>|$|R
40|$|Abstract. In this paper, {{we present}} an {{overview}} of the Grid OCL <b>graphical</b> <b>object</b> connecting language. Grid OCL is an extension of Grid, introduced last year, that allows users to interactively build complex data processing systems by selecting a set of desired tools and connecting them together graphically. Algorithms written in this way can now also be run outside the graphical environment. 1...|$|R
50|$|The {{graphical}} component, as {{the term}} suggests, deals with graphical data which can consist {{of different types}} of real world entities or objects represented graphically by shapes or geometries. For example, a street or road can be graphically represented by a linear geometry or a line. Other types of <b>graphical</b> <b>objects</b> can be individual symbols representing single location point objects like road markers. Areas are often represented by polygons especially for objects like boundaries. The system allows the user to configure different geometry styles for different type of real world objects. There are tools available within the system to digitize or create the <b>graphical</b> <b>objects.</b>|$|E
50|$|A sprite is a {{two-dimensional}} image or animation that is {{integrated into a}} larger scene. Initially including just <b>graphical</b> <b>objects</b> handled separately from the memory bitmap of a video display, this now includes various manners of graphical overlays.|$|E
5000|$|Chart Event (generated when a user {{is working}} with a chart, namely, when <b>{{graphical}}</b> <b>objects</b> are created and deleted, when a graphical object gets clicked on or moved with a mouse or when text on a chart gets edited etc.); ...|$|E
40|$|In {{this article}} we propose <b>graphical</b> <b>object</b> {{classification}} used for image matching in the Content-Based Image Retrieval (CBIR) system containing colour images. The part devoted to image processing and the inner structure of the database are signalled to the extent which {{is necessary for the}} reader to understand how the whole system works. Firstly, we discuss the theoretical construction of indexes for the <b>graphical</b> <b>object</b> classification. The indexes are based on feature vectors for each object and spatial relationships among objects for image retrieval. We present some classes and classfied objects. Secondly, we address the problem of the graphical query by example. In order to construct the graphical query we implement the user interface (GUI) which has been developed in the light of humancomputer interaction. GUI enables the user to design their own image which is further treated as a query for the database. The expected reply is a set of similar images presented to the user by the database...|$|R
40|$|Alloy is {{a little}} {{language}} for describing structural properties. It offers a declaration syntax compatible with <b>graphical</b> <b>object</b> models, and a set-based formula syntax powerful enough to express complex constraints and yet amenable to a fully automatic semantic analysis. Its meaning is given by translation to an even smaller (formally defined) kernel. This paper presents the language in its entirety, and explains its motivation, contributions and deficiencies...|$|R
5000|$|In {{computer}} graphics programming, hit-testing (hit detection, picking, or pick correlation [...] ) {{is the process}} of determining whether a user-controlled cursor (such as a mouse cursor or touch-point on a touch-screen interface) intersects a given <b>graphical</b> <b>object</b> (such as a shape, line, or curve) drawn on the screen. Hit-testing may be performed on the movement or activation of a mouse or other pointing device.|$|R
