0|838|Public
40|$|We {{start this}} project by {{describing}} the quantum model {{on which the}} quantum computation theory has been built. The main part of this project {{has to do with}} the Fourier transform on finite abelian groups and its use in P. Shor 0 <b>s</b> quantum <b>algorithm</b> for factorizing integers in polynomial time. As well, we describe L. <b>Grover</b> 0 <b>s</b> quantum <b>algorithm</b> for searching an element in an unstructured database of N elements (which is of order O(pN)) and we prove that <b>Grover</b> 0 <b>s</b> <b>algorithm</b> is optimal...|$|R
5000|$|<b>Grover</b> <b>S.</b> Resinger (October 20, 1915 - January 11, 1986) was an American {{coach in}} Major League Baseball during the 1960s and 1970s. Previously, {{he was a}} minor league third baseman and manager. A native of St. Louis, Missouri, the 5'9" [...] (175 cm), 160-pound (73 kg) Resinger batted and threw right-handed.|$|R
40|$|Contains the {{correspondence}} and {{minutes of the}} Executive Committee, including letters from Theodore Roosevelt, addresses of Bishop David Hummel Greer, Charles W. Eliot, former Pres. <b>Grover</b> <b>S.</b> Cleveland and others; and related material, both printed and manuscript, pertaining to the celebration held at Carnegie Hall, New York, Nov. 30, 1905. Includes also clippings describing various similar celebrations held throughout the countr...|$|R
40|$|Considers (88) H. R. 7525, (88) S. 486. Focuses on {{proposed}} modifications of investigative arrest and insanity plea restrictions. Also considers legislation concerning licensing violations for accounting and certain health care professions, and a draft bill on gun control. Includes LRS report "Compilation of D. C. and State Criminal Statutes Showing a Comparison of Mandatory Minimum and Maximum Sentences That Can Be Imposed in Connection with Certain Criminal Offenses," by Ruth H. Stromberg and <b>Grover</b> <b>S.</b> Williams, Jan. 27, 1964 (p. 713 - 764). Record {{is based on}} bibliographic data in CIS US Congressional Committee Hearings Index. Reuse except for individual research requires license from Congressional Information Service, Inc. Indexed in CIS US Congressional Committee Hearings Index Part VIIConsiders (88) H. R. 7525, (88) S. 486. Focuses on {{proposed modifications}} of investigative arrest and insanity plea restrictions. Also considers legislation concerning licensing violations for accounting and certain health care professions, and a draft bill on gun control. Includes LRS report "Compilation of D. C. and State Criminal Statutes Showing a Comparison of Mandatory Minimum and Maximum Sentences That Can Be Imposed in Connection with Certain Criminal Offenses," by Ruth H. Stromberg and <b>Grover</b> <b>S.</b> Williams, Jan. 27, 1964 (p. 713 - 764). Mode of access: Internet...|$|R
50|$|The Stanton Guard was {{organized}} at Detroit, Michigan in April 1862 by Captain <b>Grover</b> <b>S.</b> Wormer and mustered in on May 10, {{to serve as}} guards over General William G. Harding, Washington Barrow and Judge Joseph C. Guild, three Confederate sympathizers from Nashville, TN sent as prisoners to the fort on Mackinac Island. Upon {{the removal of the}} prisoners, it was mustered out of service on September 25, 1862. Capt Wormer afterward served as lieutenant colonel in the 8th Michigan Cavalry and colonel in the 30th Michigan Infantry.|$|R
50|$|Woodbury <b>S.</b> <b>Grover</b> was {{a member}} of the Wisconsin State Assembly.|$|R
40|$|Throughout {{the study}} of various {{theories}} of algorithms much {{work has been done}} in the area of traversal and solving optimization problems on graphs. Some of this work includes studies of finding the Minimal-Cost Spanning Trees (MST) in directed and undirected connected graphs. Several algorithms have been developed for such task. These algorithms tend to differ in performance based on various factors, such as graph density, size of problem spaces, range of weights that can be assigned to the edges of the graphs, edge weight distributions, etc. The data structures used by an algorithm can {{have a significant impact on}} algorithm 2 ̆ 7 s performance, for each of the aforementioned factors. This thesis presents the results of the experimental study of the impact the data structures have on performances of Kruskal 2 ̆ 7 s and Prim 2 ̆ 7 <b>s</b> <b>algorithms</b> for finding Minimum-Cost Spanning Trees in connected undirected graphs. The goal of this study is to compare performance of the practical implementations of Kruskal 2 ̆ 7 s and Prim 2 ̆ 7 <b>s</b> <b>algorithms</b> to their theoretical counterparts, as well as to measure and compare the differences in performances for various implementations of one algorithm, with respect to different implementation of the essential data structures. Performances of different algorithms are studied with respect to each-other for several variations of the types of data. As a result, a table depicting a schedule for use of the various implementations of either of the algorithms, as related to the type of graph used, is presented. The algorithms are implemented and executed on a single Sun UltraSparc workstation, in order to eliminate the discrepancies, which may result from the differences in the processor speeds and variable CPU loads on multiple test machines. The following implementations are studied: Kruskal 2 ̆ 7 <b>s</b> <b>Algorithm</b> with heapsort, and disjoint-sets using union-by-rank and path-compression heuristic Kruskal 2 ̆ 7 <b>s</b> <b>Algorithm</b> with counting sort and disjoint-sets using union-by-rank and path-compression heuristic Prim 2 ̆ 7 <b>s</b> <b>Algorithm</b> with brute force implementation of priority queues Prim 2 ̆ 7 <b>s</b> <b>Algorithm</b> with priority queue implemented using a proper implementation of binary heap with 2 ̆ 2 bubble-up 2 ̆ 2 performed each time a decrease-key operation is performed for a vertex Prim 2 ̆ 7 <b>s</b> <b>Algorithm</b> with priority queue implemented using a 2 ̆ 2 lazy 2 ̆ 2 implementation of binary heap with 2 ̆ 2 bubble-up 2 ̆ 2 performed after all decrease-key operations are performed for a vertex Prim 2 ̆ 7 <b>s</b> <b>Algorithm</b> with priority queue implemented using a binomial heap Prim 2 ̆ 7 <b>s</b> <b>Algorithm</b> with priority queue implemented using a Fibonacci heap Upon the conclusion of the experiment, the best results were obtained from the implementation of Prim 2 ̆ 7 <b>s</b> <b>algorithm</b> using the 2 ̆ 2 lazy 2 ̆ 2 heap implementation of a priority queue. For sparse graphs, Kruskal 2 ̆ 7 <b>s</b> <b>algorithm</b> with counting sort performed very well, while for higher density graphs, Prim 2 ̆ 7 <b>s</b> <b>algorithm</b> with binomial heap performed very well...|$|R
40|$|Abstract: 2 ̆ 2 The {{principal}} result {{described in}} this report is the design and implementation of a parallel version of Buchberger 2 ̆ 7 <b>s</b> <b>algorithm.</b> Its correctness is stated and some experimental results are given. The first parts are devoted to a partial review of Gro╠êbner bases, of Buchberger 2 ̆ 7 <b>s</b> <b>algorithm</b> which computes them, and {{of some of their}} applications. 2 ̆...|$|R
40|$|In this Comment on Feng 2 ̆ 7 s paper [Phys. Rev. A 63, 052308 (2001) ], we {{show that}} Grover 2 ̆ 7 <b>s</b> <b>algorithm</b> may be {{performed}} exactly using the gate set given, provided that small changes are made to the gate sequence. An analytic expression for the probability of success of Grover 2 ̆ 7 <b>s</b> <b>algorithm</b> for any unitary operator U instead of Hadamard gate is presented...|$|R
40|$|The {{intent of}} this thesis is to {{elucidate}} the quantum computing algorithm developed by Peter Shor called Shor 2 ̆ 7 <b>s</b> <b>algorithm.</b> We {{will provide a}} detailed description and simulation of the algorithm using MATLAB. Precursory information regarding quantum phenomena such as superposition, entanglement, and Dirac notation, will be described in great detail so that the reader may {{have a better understanding}} of the operations in Shor 2 ̆ 7 <b>s</b> <b>algorithm.</b> Quantum computers store and transport information quite differently than their classical counterparts. We will provide a quick overview of these differences to high- light the benefit of utilizing quantum phenomena in a computer in order to create massive parallel computations. Thus, reducing the complexity time for classical algorithms used to solve problems such as the prime factorization problem and the period finding problem. The Quantum Fourier Transform is a principle component in Shor 2 ̆ 7 <b>s</b> <b>algorithm.</b> We will explicitly define the Quantum Fourier Transform and show that it is a unitary transformation. We will also show how the Quantum Fourier Transform, as well as another unitary transformation called the Hadamard transform, functions in Shor 2 ̆ 7 <b>s</b> <b>algorithm.</b> One of the initial parameters in Shor 2 ̆ 7 <b>s</b> <b>algorithm</b> is to select a random variable. We will examine the erratic effects of this random variable as well as how it effects the probability of us successfully reducing an integer into a product of two primes. We will provide a thorough analysis of the randomness in Shor 2 ̆ 7 <b>s</b> <b>algorithm.</b> We will also show how measuring the state of our quantum system as well as selecting a suitable random variable impacts finding the period of the Quantum Fourier Transform which in turn will either give a high or low probability of obtaining a factor of some integer...|$|R
40|$|The Discrete Cosine Transform (DCT) {{is one of}} {{the basic}} digital coding algorithms. Moreover, DCT is used in {{standard}} algorithms such as image (JPEG) and video (MPEG, H. 26 x) compression. Many researches are working to optimize DCT for its important implementation. Our focus in this thesis is on reducing the number of DCT operation throughout its calculation. In this thesis, we design hardware implementations of 4 -point one-Dimensional DCT on Field Programmable Gate Arrays (FPGAs) technology using the Loeffler 2 ̆ 7 <b>s</b> <b>algorithm,</b> as multiplications required in Loeffler 2 ̆ 7 <b>s</b> <b>algorithm</b> are less than some other algorithms. Four and eight-point 1 -D DCT coefficients have been calculated and then translated to matrix. By using Loeffler 2 ̆ 7 <b>s</b> <b>algorithm</b> method, 4 and 8 -point DCT are translated to Loeffler 2 ̆ 7 <b>s</b> <b>algorithm</b> butterflies. The butterflies have number of stages that can be executed in series order. Only 4 -point DCT and 4 -point Loeffler 2 ̆ 7 <b>s</b> <b>algorithm</b> are designed here and their results are compared. The architecture of both algorithms is written in Verilog HDL code. Xilinx- ISE tool is used to synthesize the design. The code is downloaded into Spartan 3 -E family XC 3 S 500 E FPGA board. Finally, all of the possible numbers that we could simulate and implement are tested with different means (manual, simulation, and implementation). The results of these means are compared and found identical. All forms of testing worked correctly for the selected inputs...|$|R
40|$|A {{number of}} {{algorithms}} for recursive computation of the discrete cosine transform (DCT) {{have been developed}} recently. This paper presents a new method for computing the discrete cosine transform and its inverse using Bakhvalov's algorithm, a method developed for evaluation of a polynomial at a point. In this paper, we will focus on both {{the application of the}} algorithm to the computation of the DCT-I and its complexity. In addition, Bakhvalov <b>s</b> <b>algorithm</b> is compared with Clenshaw <b>s</b> <b>algorithm</b> for the computation of the DCT...|$|R
40|$|Pairing-based {{cryptography}} (PBC) provides novel security services, such as identity-based encryption, attribute-based encryption {{and anonymous}} authentication. The Miller 2 ̆ 7 <b>s</b> <b>Algorithm</b> {{is considered one}} of the most important algorithms in PBC and carries the most computation in PBC. In this thesis, two modified Miller 2 ̆ 7 <b>s</b> <b>algorithms</b> are proposed. The first proposed algorithm introduces a right-to-left version algorithm compared to the fact that the original Miller 2 ̆ 7 <b>s</b> <b>algorithm</b> works only in the fashion of left-to-right. Furthermore, this new algorithm introduces parallelable computation within each loop and thus it can achieve a much higher speed. The second proposal has the advantage over the original Miller 2 ̆ 7 <b>s</b> <b>algorithm</b> not only in parallelable computation but also in resistance to certain side channel attacks based on the new feature of the equilibrium of computational complexities. An elaborate comparison among the existing works and the proposed works is demonstrated. It is expected that the first proposed algorithm can replace the original Miller 2 ̆ 7 s if a right-to-left input style is required and/or high speed is of importance. The second proposed algorithm should be chosen over the original Miller 2 ̆ 7 s if side channel attack is a concern...|$|R
40|$|Spectral based {{heuristics}} {{belong to}} well-known commonly used methods which determines provably minimal graph bisection or outputs "fail" when the optimality cannot be certified. In this paper {{we focus on}} Boppana 2 ̆ 7 <b>s</b> <b>algorithm</b> which belongs {{to one of the}} most prominent methods of this type. It is well known that the algorithm works well in the random planted bisection model - the standard class of graphs for analysis minimum bisection and relevant problems. In 2001 Feige and Kilian posed the question if Boppana 2 ̆ 7 <b>s</b> <b>algorithm</b> works well in the semirandom model by Blum and Spencer. In our paper we answer this question affirmatively. We show also that the algorithm achieves similar performance on graph classes which extend the semirandom model. Since the behavior of Boppana 2 ̆ 7 <b>s</b> <b>algorithm</b> on the semirandom graphs remained unknown, Feige and Kilian proposed a new semidefinite programming (SDP) based approach and proved that it works on this model. The relationship between the performance of the SDP based algorithm and Boppana 2 ̆ 7 s approach was left as an open problem. In this paper we solve the problem in a complete way by proving that the bisection algorithm of Feige and Kilian provides exactly the same results as Boppana 2 ̆ 7 <b>s</b> <b>algorithm.</b> As a consequence we get that Boppana 2 ̆ 7 <b>s</b> <b>algorithm</b> achieves the optimal threshold for exact cluster recovery in the stochastic block model. On the other hand we prove some limitations of Boppana 2 ̆ 7 s approach: we show that if the density difference on the parameters of the planted bisection model is too small then the algorithm fails with high probability in the model...|$|R
40|$|Greengard 2 ̆ 7 <b>s</b> N-body <b>algorithm</b> {{claims to}} compute the {{pairwise}} interactions {{in a system of}} N particles in O(N) time for a fixed precision. In this paper, we show that the choice of precision is not independent of N and has a lower bound of log N. We use this result to show that Greengard 2 ̆ 7 <b>s</b> <b>algorithm</b> is not O(N) ...|$|R
40|$|In [5], Mehlhorn {{presented}} an algorithm for sorting nearly sorted sequences of length n in time 0 (n(1 +log(F/n))) where F {{is the number}} of initial inversions. More recently, Dijkstra[3] presented a new algorithm for sorting in situ. Without giving much evidence of it, he claims that his algorithm works well on nearly sorted sequences. In this note we show that smoothsort compares unfavorably to Mehlhorn 2 ̆ 7 <b>s</b> <b>algorithm.</b> We present a sequence of length n with O(nlogn) inversions which forces smoothsort to use time Omega(nlog n), contrasting to the time O(nloglogn) Mehlhorn 2 ̆ 7 <b>s</b> <b>algorithm</b> would need...|$|R
40|$|Abstract: 2 ̆ 2 Rosen 2 ̆ 7 <b>s</b> Partitioning <b>Algorithm</b> for {{nonlinear}} programming was developed using a gradient projection method for the master problem. Since then, developments in NLP algorithms {{have shown the}} power of the Han-Powell successive quadratic programming algorithm. Here, the formulas necessary for using the Han-Powell algorithm for the master problem of Rosen 2 ̆ 7 <b>s</b> <b>algorithm</b> are derived. Sensitivity results are used to handle the 2 ̆ 7 crossover 2 ̆ 7 problem. 2 ̆...|$|R
40|$|A {{tool for}} {{compiler}} testing is implemented. The tool {{is driven by}} a BNF grammar extended by a device called control flags to incorporate those parts of a language that are not controlled by context-free rules (for instance, use of declared names). The tool produced two sets of program strings such that each production in the grammar is used at least once. One set is produced by Purdom 2 ̆ 7 <b>s</b> <b>algorithm.</b> The other is produced by a new algorithm designed by the author which builds a tree and then produces a set of strings from it for compiler testing. The program strings produced from the new algorithm differ less in length than those from Purdom 2 ̆ 7 <b>s</b> <b>algorithm...</b>|$|R
40|$|AbstractRecent {{advances}} in high throughput sequencing technologies and concurrent refinements in 16 S rDNA isolation techniques have facilitated the rapid extraction and sequencing of 16 S rDNA content of microbial communities. The taxonomic affiliation of these 16 S rDNA fragments is subsequently obtained using either BLAST-based or word frequency based approaches. However, the classification accuracy of such methods is observed {{to be limited}} in typical metagenomic scenarios, wherein a majority of organisms are hitherto unknown. In this study, we present a 16 <b>S</b> rDNA classification <b>algorithm,</b> called C 16 S, that uses genus-specific Hidden Markov Models for taxonomic classification of 16 S rDNA sequences. Results obtained using C 16 S have been compared with the widely used RDP classifier. The performance of C 16 <b>S</b> <b>algorithm</b> was observed to be consistently higher than the RDP classifier. In some scenarios, this increase in accuracy {{is as high as}} 34 %. A web-server for the C 16 <b>S</b> <b>algorithm</b> is available at [URL]...|$|R
3000|$|The {{challenger}} [...] B [...] {{runs the}} KeyGen_R (<b>s)</b> <b>algorithm</b> {{to generate the}} receiver’s public–private key pair (pk_R, sk_R) and gives pk_R to [...] A _ 1. [...] A _ 1 generates the server’s public–private key pair 〈 pk_S, sk_S 〉 and gives pk_S to [...] B [...].|$|R
30|$|The server {{uses the}} IE 2 <b>S</b> <b>algorithm</b> and the Mobius [39] {{international}} standard platform. On the Mobius server, the data received from IAT is {{converted into a}} database through MySQL. This data is learned by the TensorFlow engine [40] using the Jupyter editor [41] with the Anaconda package.|$|R
40|$|In this {{correspondence}} additional {{results on}} majority-logic decoding of product codes are presented. If {{one of the}} component codes is decodable using Rudolph 2 ̆ 7 <b>s</b> nonorthogonal <b>algorithm,</b> and the other using Reed-Massey 2 ̆ 7 s L-step orthogonalization, then the resulting product code is majority-logic decodable in L steps, where nonorthogonal checks {{are used in the}} first step and orthogonal checks in the remaining steps. If the component codes are both decodable using Rudolph 2 ̆ 7 <b>s</b> <b>algorithm,</b> the product code is majority-logic decodable using the same procedure...|$|R
40|$|In this thesis, {{we propose}} a new {{systolic}} architecture {{which is based}} on the Faddeev 2 ̆ 7 <b>s</b> <b>algorithm.</b> Because Faddeev 2 ̆ 7 <b>s</b> <b>algorithm</b> is inherently general purpose, our architecture is able to perform a wide class of matrix computations. And since the architecture is systolic based, it brings massive parallelism to all of its computations. As a result, many matrix operations including addition, multiplication, inversion, LU-decomposition, transpose, and solutions to linear systems of equations can now be performed extremely fast. In addition, our design introduces several concepts which are new to systolic architectures: - It can be re-configured during run time to perform different functions with the uses of various control signals propagating throughout the arrays. - It allows for maximum overlaps of processing between consecutive computations, thereby increasing system throughput...|$|R
40|$|A {{method is}} given for {{computing}} the rate coefficient of a unimolecular reaction as an eigenvalue solution of an integral master equation, based on Nesbet 2 ̆ 7 <b>s</b> <b>algorithm,</b> which overcomes computational difficulties {{associated with this}} problem. An illustrative fit to pressure-dependent data on the pyrolysis of azoethane is presented...|$|R
500|$|Skiena, Steven <b>S.,</b> The <b>Algorithm</b> Design Manual, Springer, 2008, [...]|$|R
40|$|This paper {{presents}} a new pathfinding algorithm called the boundary iterative-deepening depth-first search (BIDDFS) algorithm. The BIDDFS compromises the increasing memory {{usage of the}} Dijkstra 2 ̆ 7 <b>s</b> <b>algorithm,</b> where the memory clears enables the BIDDFS to consume less memory than the Dijkstra 2 ̆ 7 <b>s</b> <b>algorithm.</b> The expansion redundancy of the iterative-deepening depth-first search (IDDFS) is also compensated; it is faster than the IDDFS {{in all of the}} testing instances conducted. The BIDDFS is further enhanced for bidirectional searching to allow expanding to fewer nodes and reducing pathfinding time. The bidirectional BIDDFS and the parallel bidirectional BIDDFS are also proposed. The proposed BIDDFS is further extended to the multi-goal BIDDFS, which is able to search for multiple goals present on the map in a single search. Simulation examples and comparisons have revealed the good performance of the proposed algorithms...|$|R
40|$|Let H be {{a finite}} group with an {{involution}} in Z(H). By the Brauer-Fowler theorem, {{there are only}} finitely many non-isomorphic simple groups which have H as a centralizer of the involution. We will explain our automatic GAP [7] program for Michler 2 ̆ 7 <b>s</b> <b>algorithm</b> [6] which constructs finite simple groups from this H...|$|R
40|$|The {{problem of}} {{scheduling}} a flow shop is discussed, {{and a general}} structure for paired-comparison based scheduling algorithms is identified;A special such algorithm for three machines is introduced, and the complete 3 -machine adaptation of Johnson 2 ̆ 7 <b>s</b> <b>algorithm,</b> suggested by Burns and Rooker is extended {{to the case of}} an arbitrary number of machines...|$|R
40|$|We give an {{algorithm}} for {{the hidden}} subgroup {{problem for the}} dihedral group D_N, or equivalently the cyclic hidden shift problem, that supersedes our first algorithm and is suggested by Regev 2 ̆ 7 <b>s</b> <b>algorithm.</b> It runs in exp(O(sqrt(log N))) quantum time and uses exp(O(sqrt(log N))) classical space, but only O(log N) quantum space. The algorithm also runs faster with quantumly addressable classical space than with fully classical space. In the hidden shift form, which is more natural for this algorithm regardless, it can also make use of multiple hidden shifts. It can also be extended with two parameters that trade classical space and classical time for quantum time. At the extreme space-saving end, the algorithm becomes Regev 2 ̆ 7 <b>s</b> <b>algorithm.</b> At the other end, if the algorithm is allowed classical memory with quantum random access, then many trade-offs between classical and quantum time are possible...|$|R
40|$|The {{theory of}} Gröbner bases {{has become a}} useful tool in {{computational}} commutative algebra. In this paper, we outline some basic results, as they are found in [1], including the concepts of terms ordering, multivariable polynomial division, Gröbner bases, Buchberger 2 ̆ 7 <b>s</b> <b>algorithm,</b> and syzygy modules. Specially, we present several equivalent definitions for Gröbner bases and prove how to compute a Gröbner basis for an ideal I of A = k[x 1, x 2, • • •, xn] generated by fl, f 2, • • •, f 8 through Buchberger 2 ̆ 7 <b>s</b> <b>algorithm.</b> As an application of Gröbner bases, we present a standard method (see [1]) to compute the syzygy module of a set f 1, f 2, • • •, f 8 of polynomials, illustrated with original examples. Finally, we implement these examples on the computer using the Mathematica package of [4]...|$|R
40|$|Shortest paths on road {{networks}} can be efficiently calculated using Dijkstra 2 ̆ 7 <b>s</b> <b>algorithm</b> (D). In addition to roads, multi-modal transportation networks include public transportation, bicycle lanes, etc. For paths on {{this type of}} network, further constraints, e. g., preferences in using certain modes of transportation, may arise. The regular language constrained shortest path problem deals {{with this kind of}} problem. It uses a regular language to model the constraints. The problem can be solved efficiently by using a generalization of Dijkstra 2 ̆ 7 <b>s</b> <b>algorithm</b> (D_RegLC). In this paper we propose an adaption of the speed-up technique uniALT, in order to accelerate D_RegLC. We call our algorithm SDALT. We provide experimental results on a realistic multi-modal public transportation network including time-dependent cost functions on arcs. The experiments show that our algorithm performs well, with speed-ups of a factor 2 to 20...|$|R
40|$|When you tackle {{a set of}} problems, do {{you like}} easy first or hard first? Do you lay out a problem solving {{strategy}} ahead of time, or dive right in? This issue explores many of the processes that mathematicians use, from teaching to research; we even get a peek into a mathematical poet 2 ̆ 7 <b>s</b> <b>algorithm</b> to write poetr...|$|R
40|$|Strassen <b>S</b> <b>algorithm</b> is an {{efficient}} method for mulliplying large matrices. We explore various ways of mapping Strassen ’s algorithm inlo reconfgurable hardware that contains {{one or more}} customisable instruction processors. Our approach has been implemented using Nios processors with custom inslrucfions and with custom-designed coprocessors, {{taking advantage of the}} additional logic and memory blocb available on a reconfgurable platform. 1...|$|R
40|$|Calculating {{the exact}} {{radiological}} path through a pixel or voxel space is a frequently encountered problem in medical image reconstruction from projections and greatly influences the reconstruction time. Currently, {{one of the}} fastest algorithms designed for this purpose was published in 1985 by Robert L. Siddon [1]. In this paper, we propose an improved version of Siddon 2 ̆ 7 <b>s</b> <b>algorithm,</b> resulting in a considerable speedup...|$|R
40|$|In {{this paper}} we prove an {{equivalence}} {{relation between the}} distance transform of a binary image, where the underlying distance {{is based on a}} positive definite quadratic form, and the erosion of its characteristic function by an elliptic poweroid structuring element. The algorithms devised by Shih and Mitchell [18] and Huang and Mitchell [7], for calculating the exact Euclidean distance transform (EDT) of a binary digital image manifested on a square grid, are particular cases of this result. The former algorithm uses erosion by a circular cone to calculate the EDT whilst the latter uses erosion by an elliptic paraboloid (which allows for pixel aspect ratio correction) to calculate the square of the EDT. Huang and Mitchell 2 ̆ 7 <b>s</b> <b>algorithm</b> [7] is arguably the better of the two because: (i) the structuring element can be decomposed into a sequence of dilations by 3 x 3 structuring elements (a similar decomposition is not possible for the circular cone) thus reducing the complexity of the erosion, and (ii) the algorithm only requires integer arithmetic (it produces squared distance). The algorithm is amenable to both hardware implementation using a pipeline architecture and efficient implementation on serial machines. Unfortunately the algorithm does not directly transpose to, nor has a corresponding analogue on, the hexagonal grid (the same is also true for Shih and Mitchell 2 ̆ 7 <b>s</b> <b>algorithm</b> [7]). In this paper, however, we show that if the hexagonal grid image is embedded in a rectangular grid then Huang and Mitchell 2 ̆ 7 <b>s</b> <b>algorithm</b> [7] can be applied, with aspect ratio correction, to obtain the exact EDT on the hexagonal grid...|$|R
40|$|Dijkstra {{has given}} a {{derivation}} of an efficient algorithm for a problem concerning monotonic subsequences, and extracted a proof of a related theorem from the algorithm. Here it is shown that a careful separation of concerns {{can lead to a}} beautiful conventional proof, a very different derivation of Dijkstra 2 ̆ 7 <b>s</b> <b>algorithm,</b> a more elegant proof from the algorithm, and the discovery of a duality property...|$|R
