4|10000|Public
2500|$|Section 2 imposes civil {{liability}} in tort for damage caused wholly or partly by a <b>defect</b> <b>in</b> <b>a</b> <b>product.</b> Liability falls on: ...|$|E
5000|$|However, design {{improvements}} to increase safety {{cannot be used}} against manufacturers in court {{to show that the}} product was unsafe. Rule 407 of the Federal Rule of Evidence specifically states, [...] "evidence of the subsequent measures is not admissible to prove: negligence; culpable conduct; a <b>defect</b> <b>in</b> <b>a</b> <b>product</b> or its design; or a need for a warning or instruction." [...] This means that evidence of changing the design of a product after an accident cannot be used in court against the manufacturer to prove it is liable for the damage.|$|E
40|$|The authors {{discuss the}} {{practical}} and legal problems involved in proving a <b>defect</b> <b>in</b> <b>a</b> <b>product</b> liability case. The essential differences between design defects and construction defects are characterized {{in terms of}} the requisites of proof of each. Primary emphasis is placed upon the effective and efficient discovery and utilization of evidence concerning design and construction standards {{and the extent to which}} these standards were considered and implemented in the design or construction process...|$|E
50|$|The {{aesthetic}} {{properties of}} <b>a</b> <b>product</b> {{contribute to the}} identity of a company or a brand. Faults or <b>defects</b> <b>in</b> <b>a</b> <b>product</b> that diminish its aesthetic properties, even those that do not reduce or alter other dimensions of quality, are often cause for rejection.|$|R
50|$|Constructive {{fraud is}} a legal fiction {{describing}} a situation where a person or entity gained an unfair advantage over another by deceitful or unfair methods. Intent {{does not need to}} be shown as in the case of actual fraud. Some unfair methods may include not telling customers about <b>defects</b> <b>in</b> <b>a</b> <b>product.</b>|$|R
40|$|This paper {{presents}} a methodology based on spatial autocorrelation function for assessing homogeneity of a mixture and more particularly {{for determining the}} size {{and the number of}} <b>defects</b> <b>in</b> the bulk of a mixture or materials. Intensity and scale of segregation are used as conceptual tools for assessing mixture homogeneity, and have been specially adapted for this particular case. Their performances are investigated for detecting <b>defects</b> <b>in</b> <b>a</b> <b>product</b> manufactured from <b>a</b> dry powder mixture, a bipolar plate used in fuel cell technology, through a simulation of the product on Matlab (92) ...|$|R
50|$|<b>In</b> engineering, <b>defect</b> {{tracking}} is {{the process}} of tracking the logged <b>defects</b> <b>in</b> <b>a</b> <b>product</b> from beginning to closure (by inspection, testing, or recording feedback from customers), and making new versions of the product that fix the defects. Defect tracking is important in software engineering as complex software systems typically have tens or hundreds or thousands of defects: managing, evaluating and prioritizing these defects is a difficult task. When the numbers of defects gets quite large, and the defects need to be tracked over extended periods of time, use of a defect tracking system can make the management task much easier.|$|R
40|$|Standard {{inspection}} methods {{underestimate the}} true number of <b>defects</b> or nonconformities <b>in</b> <b>a</b> complex <b>product</b> (e. g., automobile, mobile home, airplane, circuit board, computer program) when an inspector {{is unable to}} identify every defect with certainty. A nonlinear statistical model with a nonlinear constraint is developed for estimating the unknown number of <b>defects</b> <b>in</b> <b>a</b> <b>product</b> when inspection is imperfect. A sequential defect removal sampling plan is defined in which two or more inspectors examine <b>in</b> sequence <b>a</b> <b>product</b> or sample of products and then mark or correct any observed defects prior to the next inspection. The number of defects identified by each inspector provides the information needed to estimate the number of <b>defects</b> <b>in</b> the product {{in addition to the}} number of defects that have eluded all inspectors. A goodness-of-fit test of model assumptions is presented. A test of hypothesis regarding the unknown number of <b>defects</b> <b>in</b> quality improvement experiments also is described. imperfect inspection, nonlinear statistical model, quality management...|$|R
40|$|In many {{industrial}} process control situations {{the need to}} identify and classify defects is key to enabling process improvements. Inspection is used for this task. The process of constructing a classification scheme to correctly identify <b>defects</b> <b>in</b> <b>a</b> <b>product</b> is <b>a</b> difficult process. Many people assume that a description of {{what is to be}} identified exists. That is not necessarily true. Three types of uncertainty exist which make it difficult to define a complete model of an inspection environment. The domain knowledge is vague and nearly always incomplete, and the constraints on inspection equipment means the data output often produces ambiguous results. A method is required which will allow such uncertainties to be incorporated into an automated visual inspection system. Fuzzy Logic and Dempster Shafer have been used to aid the development of a classification scheme for identifying <b>defects</b> <b>in</b> plastic film. This paper discusses the implementation of the techniques to a real industrial p [...] ...|$|R
40|$|Six Sigma {{is one of}} {{the current}} quality tools that is being {{introduced}} in to the design and manufacture of products. The paper starts by introducing the reader to Design for Six Sigma (DFSS), on which the concept is based and the key stages within the DFSS process. The goal of DFSS is {{to reduce the amount of}} variation in the design so that fewer <b>defects</b> are seen <b>in</b> manufacturing. To reduce variation and <b>defects</b> <b>in</b> <b>a</b> <b>product</b> the designed tolerance and the manufacturing process capability need to be increased. However, there is little current published research on the effect that this would have on the overall assembled product and the customer requirements in modern military aircraft. One of the most crucial customer requirements within the military aircraft industry is that of weight. This research identifies the potential risk associated with meeting the customer requirements if variation reduction is implemented into the design. The findings in this research indicate that there could be potential issues, including excessive costs to the long term customer requirements...|$|R
40|$|Six Sigma is {{a method}} of {{management}} that strives for near perfection. The Six Sigma methodology uses data and rigorous statistical analysis to identify <b>defects</b> <b>in</b> <b>a</b> process or <b>product,</b> reduce variability and achieve as close to zero defects as possible. The paper presents the basic information on this methodology...|$|R
50|$|A {{fundamental}} problem with software testing is that testing under all combinations of inputs and preconditions (initial state) is not feasible, even with <b>a</b> simple <b>product.</b> This {{means that the}} number of <b>defects</b> <b>in</b> <b>a</b> software <b>product</b> can be very large and defects that occur infrequently are difficult to find in testing. More significantly, non-functional dimensions of quality (how {{it is supposed to be}} versus what it is supposed to do)—usability, scalability, performance, compatibility, reliability—can be highly subjective; something that constitutes sufficient value to one person may be intolerable to another.|$|R
40|$|It is not {{possible}} to eliminate all the mistakes people make. People are not mistake proofed by their nature. But organization can avoid these mistakes from reaching the customer, which is known as <b>a</b> <b>defect</b> <b>in</b> this case. Mistakes can be stopped as soon as they happen at least. Poka-yoke is very simple concept in nature. The basic concept of this is avoiding the problems by correcting the process. Poka-yoke is a quality assurance technique developed by Japanese manufacturing engineer Shigeo Shingo. The aim of Poka-yoke is to eliminate <b>defects</b> <b>in</b> <b>a</b> <b>product</b> by preventing or correcting mistakes as early as possible. So what is mistake proofing? The use of process or design features to prevent errors or their negative impact. Also known as Poka yoke, Japanese slang for “avoiding inadvertent errors ” which was formalized by Shigeo Shingo. A method that uses sensor or other devices for catching errors that may pass by operators or assemblers. Shigeo Shingo defines Poka Yoke as: Poka – “Inadvertent Mistake That Anyone Can Make ” [2] and Yoke – “To Prevent or Proof ” [1]. Poka-Yoke performs two key operations of ZDQ (Zero Defect Quality) i. e. identifying the defect immediately (Point of Origin Inspection) & quick feedback for corrective action. Poka-yoke detects an error, gives a warning, and can shuts down the process...|$|R
40|$|The grand {{challenge}} {{that is the}} focus of this conference targets the development of a practical methodology for software verification: a practical verification tool that would work like a language compiler does today. The objective of software verification is of course {{to reduce the number of}} design and coding <b>defects</b> <b>in</b> software <b>products,</b> <b>an...</b>|$|R
40|$|Collectors often {{greet the}} first report of {{a new type of}} minting error for {{commonly}} circulating coins with enthusiasm. A coin is a rare example of an object that can increase, rather than decrease, in value when it is faulty. In software design we are not so fortunate. Software faults are often intriguing, but they rarely increase the value of <b>a</b> <b>product.</b> Since the early days of computers, programmers have sought effective ways to defend against software bugs. Software verification techniques are meant to help the user locate possible <b>defects</b> <b>in</b> <b>a</b> software <b>product</b> reliably, and preferably mechanically. In this article we look at one line of research that has lead {{to one of the most}} widely used verification systems for distributed software today...|$|R
40|$|Abstract- Software defect {{prediction}} work {{focuses on the}} number of <b>defects</b> remaining <b>in</b> <b>a</b> software system. A prediction of the number of remaining <b>defects</b> <b>in</b> <b>an</b> inspected artefact can be used for decision making. An accurate prediction of the number of <b>defects</b> <b>in</b> <b>a</b> software <b>product</b> during system testing contributes not only to the management of the system testing process but also to the estimation of the product’s required maintenance. Defective software modules cause software failures, increase development and maintenance costs, and decrease customer satisfaction. It strives to improve software quality and testing efficiency by constructing predictive models from code attributes to enable a timely identification of fault-prone modules. In this paper, we will discuss data mining techniques that are association mining, classification and clustering for software {{defect prediction}}. This helps the developers to detect software defects and correct them. Unsupervised techniques may be used for <b>defect</b> prediction <b>in</b> software modules, more so in those cases where defect labels are not available...|$|R
40|$|Inadequate {{requirements}} cause {{many problems}} in software products. This paper reports on an experiment {{to reduce the}} number of requirement defects. We analysed the present <b>defects</b> <b>in</b> <b>a</b> real-life <b>product</b> and estimated the likely effect of 44 prevention techniques. We had hoped a novel combination of techniques would come up, but the best approach was quite well known, although new to the company: study the user tasks better, make early prototypes of the user interface, and test them for usability. This approach was tried out <b>in</b> <b>a</b> new development project in the same company. Due to the new approach, there was no doubt about require-ments during programming, and as a result it became the first project in the company that was completed on time and without stress. Usability was drastically improved, and as <b>a</b> result the <b>product</b> sold twice as many units as similar products, and at twice the unit price...|$|R
40|$|Defect {{removal and}} defect {{prevention}} techniques {{are no longer}} good enough to inspire confidence in software products. Techniques that help predict the number of remaining <b>defects</b> <b>in</b> software products can further boost customer confidence. Such techniques are easy to perform and have been used {{outside the realm of}} software engineering to produce reliable estimates for decades in the area of animal, bird, fish, and insect counts, and more recently for estimating the prevalence of the Severe Acute Respiratory Syndrome and cancer occurrences. This article describes the business case for removing defects and demonstrates how the usage of the Capture-Recapture Method (CRM) <b>in</b> <b>defect</b> removal activities can predict the number of estimated <b>defects</b> remaining <b>in</b> <b>a</b> <b>product.</b> This estimate can then be used to make quantified, data-driven decisions on how to proceed with <b>a</b> software <b>product.</b> <b>In</b> December of 2005, Ford, Marriott, Sam’s Club, and the Justice Department were all vilified <b>in</b> <b>a</b> nationally recognized information magazine for having customer data compromised through either theft or their inability to secure sensitive data [1]. Medical staff report that 770, 00...|$|R
40|$|Abstract—In {{this paper}} {{we use the}} value chain concept, which links the level of value of the final product to the fitness of working products, for {{planning}} inspection activities. Following this value chain an inspection tackles {{the risk of a}} lower level of value due to <b>defects</b> <b>in</b> <b>a</b> working <b>product</b> from two sides: Inspection lowers the frequency of loss with removal of defects and the size of potential loss with a focus on defects that have high impact on the value chain. Thus it is important to focus inspection activities on working products and potential defects, which a) would have serious impact on the level of value of the final system, if they go undetected; and b) would be much more costly to remove during later stages of development. We apply the framework to a simple example project to demonstrate the main concepts of inspection benefits and discuss how inspection costs and benefits can be compared for overall evaluation of inspection utility. Index Terms—Software inspection, value chain, conditionally earned value, risk, uncertainty. Stefan Biffl is currently with the Fraunhofer Institute for Experimenta...|$|R
40|$|Selected {{paper from}} APIEMS 20057 Abstract. With {{growing demand for}} zero defects, {{predicting}} reliability of software systems is gaining importance. Software reliability models are used to estimate the reliability {{or the number of}} latent <b>defects</b> <b>in</b> <b>a</b> software <b>product.</b> Most reliability models to estimate the reliability of software in the literature are based on the development lifecycle stages. However, in the maintenance phase, the software needs to be corrected for errors and to be enhanced for the requests from users. These decrease the reliability of software. Software Reliability Growth Models (SRGMs) have been applied successfully to model software reliability in development phase. The software reliability in maintenance phase exhibits many types of systematic or irregular behaviors. These may include cyclic behavior as well as long-term evolutionary trends. The cyclic behavior may involve multiple periodicities and may be asymmetric in nature. In this paper, SGRM has been adapted to develop a reliability prediction model for the software in maintenance phase. The model is established using maintenance data from a commercial shop floor control system. The model is accepted to be used for resource planning and assuring the quality of the maintenance work to the user...|$|R
40|$|Abstract. Usability Inspections are {{essential}} for early detection of <b>defects</b> <b>in</b> UI design, but they require sound usability knowledge. Usability Patterns are the state-of-the-art format for describing usability knowledge. Thus, it seems obvious to use them {{as a means for}} evaluating the design of user interfaces. <b>In</b> this paper <b>a</b> usability inspection method based on usability patterns is introduced, which may be especially well suited for practitioners in software development, who are in general not usability experts. 1 Introduction on Usability Inspections Inspections in Software Engineering are techniques to find <b>defects</b> <b>in</b> software <b>products.</b> <b>As</b> they can – opposed to testing – be performed on static artifacts (meaning not runable modules), they are excellent <b>in</b> finding <b>defects</b> very early, which knowingly saves time and money [1]...|$|R
40|$|Abstract. Inadequate {{requirements}} cause {{many problems}} in software products. This paper {{is a case}} study of requirement <b>defects</b> <b>in</b> <b>a</b> real-life <b>product.</b> We analyzed the cause of the defects and estimated the likely effect of about 50 prevention techniques. We had hoped a novel combination of techniques would come up, but facts suggested that the best approach was quite traditional, although new to the company: Study the user tasks better, make early prototypes of the user interface, and test them for usability. This approach was tried out <b>in</b> <b>a</b> new development project in the same company. Since the two projects differed in many ways, it was harder than expected to compare development costs and defect statistics. However, two unexpected results turned up: We could observe <b>a</b> drastic decrease <b>in</b> the number of usability problems per screen. Further, the new project was the first and only one among scores of other projects that was completed on time, without stress, and with high customer satisfaction. The reason, the developers reported, was that due to the new approach, there was no doubt about requirements during detailed design and programming. They became straightforward tasks. The new approach spread rapidly and is now applied on...|$|R
40|$|Abstract:- This paper {{presents}} {{the use of}} artificial intelligence techniques such as fuzzy logic for non-destructive X-ray testing of food products. The proposed original algorithm detects the presence of <b>defects</b> <b>in</b> <b>a</b> food <b>product</b> <b>in</b> two stages. <b>A</b> radiographic image obtained from the inspected product is first segmented into meaningful objects and then analyzed by a two stage fuzzy logic algorithm. The first stage of the algorithm checks whether a possible defect (an area from the radiographic image) corresponds from the geometrical point of view (shape, size, etc., characteristics that depends entirely {{of the nature of}} the product that is inspected). If the possible defect corresponds form the geometrical point of view, then the second stage of detection is applied. This stage verifies whether the possible defect fulfills some “logical ” criteria. These criteria are based on grey-level statistics for the corresponding area in question (i. e. between the possible defect area and the surrounding background there is a contrast difference of a certain level). Key-Words: fuzzy logic, non-destructive testing, image processing 1. Fuzzy approach Fuzzy logic (FL) is an easy and convenient approach for mapping an input space (referred as a universe of discourse) to an output space [1],[2]. I...|$|R
40|$|Abstract—An {{accurate}} {{prediction of}} the number of <b>defects</b> <b>in</b> <b>a</b> software <b>product</b> during system testing contributes not only to the management of the system testing process but also to the estimation of the product’s required maintenance. Here, a new approach, called Estimation of Defects based on Defect Decay Model (ED 3 M) is presented that computes an estimate {{of the total number of}} <b>defects</b> <b>in</b> <b>an</b> ongoing testing process. ED 3 M is based on estimation theory. Unlike many existing approaches, the technique presented here does not depend on historical data from previous projects or any assumptions about the requirements and/or testers’ productivity. It is a completely automated approach that relies only on the data collected during an ongoing testing process. This is a key advantage of the ED 3 M approach as it makes it widely applicable in different testing environments. Here, the ED 3 M approach has been evaluated using five data sets from large industrial projects and two data sets from the literature. <b>In</b> addition, <b>a</b> performance analysis has been conducted using simulated data sets to explore its behavior using different models for the input data. The results are very promising; they indicate the ED 3 M approach provides accurate estimates with as fast or better convergence time in comparison to well-known alternative techniques, while only using defect data as the input. Index Terms—Defect prediction, system testing, estimation theory, maximum likelihood estimator. Ç...|$|R
30|$|A Poisson {{process is}} often used to model the number of occurrences <b>in</b> <b>an</b> {{interval}} of time. In this regard, Poisson-based control charts have been developedand frequently applied <b>in</b> <b>an</b> industry context to monitor the number of <b>defects</b> and nonconformities <b>in</b> <b>a</b> <b>product</b> (Gardiner and Montgomery 1987; White et al. 1997) and <b>in</b> <b>a</b> health context to monitor patient mortality and spread of <b>an</b> infection <b>in</b> <b>a</b> hospital (Benneyan 1998; Limayea et al. 2008). The most commonly used control chart procedures adopted for Poisson-distributed data include c-charts (Shewhart 19261927), cumulative sum of quality characteristic measurement (CUSUM; Page 19541961; Brook and Evans 1972), and exponentially weighted moving average (EWMA; Roberts 1959; Trevanich and Bourke 1993; Borror and Rigdon 1998); see Woodall (1997) and Montgomery (2008) for more details. Furthermore, appropriate control charts and methods were developed in monitoring more complex Poisson data including correlated (Chiu and Kuo 2007; Niaki and Abbasi 2008; Niaki and Nafar 2008; Amiri et al. 2011) and auto-correlated observations (Weiß, 2007; Vermaat et al. 2008).|$|R
40|$|Abstract: Delivering a {{high quality}} {{reliable}} product is the main focus in any software development. The basic quality measure is the <b>defects</b> <b>in</b> the product. <b>Defects</b> found <b>in</b> the later phases of the product development are mainly because of faulty design and code and poor reviewing capability. The role of the reviewer and tester are crucial to avoid these defects. How do we study, evaluate and quantify the effectiveness of reviews in general and group in particular, during design review, test plan review and test cases review? An important parameter in such studies pertains to the estimation of an individual reviewer’s ability. This article proposes simple estimation framework and illustrates its potential applicability. _____________________________________________________________________________ Introduction: Software product development and <b>defects</b> co-exist <b>in</b> the information and software industry. Delivering {{a high quality}} reliable product is the main focus in any software development. The basic quality measure is the <b>defects</b> <b>in</b> the <b>product.</b> <b>A</b> systematic software process at different life cycle stages should be followed to deliver zero-defect high quality software. Yet, we come across many software products having defects at different stages, an...|$|R
40|$|Cavity <b>defect</b> occurs <b>in</b> <b>an</b> {{extruded}} <b>product</b> {{when the}} remaining billet reaches a certain thickness. This defect can create {{serious problem in}} the quality of products because it produces waste material and requires an extra operation for finishing. The requirement of wasting a certain portion of the product becomes undesirable especially for a relatively short, headed product. Since the occurrence of this <b>defect</b> is troublesome <b>in</b> industrial practice, it is important to study the conditions leading to the cavity formation. By using this prediction, {{it may be possible to}} stop the process before the cavity starts to develop. <b>In</b> this work, <b>a</b> new measuring technique to monitor the development of cavity <b>defect</b> <b>in</b> forward extrusion was studied. This technique uses electrical contact principle, which detects the contact between metal pins and the leading face of the billet. When the cavity develops, a void or gap between the punch and the billet interface develops, and breaks the electrical current of the circuit. The experiment of extrusion process was undertaken <b>in</b> parallel with <b>a</b> finite element analysis (FEA) using ABAQUS software. It was shown that at a certain distance the cavity <b>defect</b> was revealed. <b>In</b> this work, the cavity formation was investigated by a variation of die reduction. The influence of coefficient of friction, punch speed, and billet thickness was also observed. This study concentrated on improving the understanding of the behavior of metal flow and the development mechanism of cavity formation with the aim of providing general guidance for the extrusion industry in minimizing the cavity defect formation of the extruded product...|$|R
40|$|Thymidine kinase (TK) -negative (TK-) mutant {{strains of}} {{herpes simplex virus}} type 1 (HSV- 1) show reduced {{expression}} of alpha and beta viral genes during acute infection of trigeminal ganglion neurons following corneal infection (M. Kosz-Vnenchak, D. M. Coen, and D. M. Knipe, J. Virol. 64 : 5396 - 5402, 1990). It was surprising that <b>a</b> <b>defect</b> <b>in</b> <b>a</b> beta gene <b>product</b> would lead to decreased alpha and beta gene expression, given the regulatory pathways demonstrated for HSV infection of cultured cells. In this study, we have examined viral gene expression during reactivation from latent infection in explanted trigeminal ganglion tissue. In explant reactivation studies with wild-type virus, we observed viral productive gene expression over the first 48 h of explant incubation occurring <b>in</b> <b>a</b> temporal order (alpha, beta, gamma) {{similar to that in}} cultured cells. This occurred predominantly in latency-associated transcript-positive neurons but was limited to a fraction of these cells. In contrast, TK- mutant viruses showed greatly reduced alpha and beta gene expression upon explant of latently infected trigeminal ganglion tissue. An inhibitor of viral TK or an inhibitor of viral DNA polymerase greatly decreased viral lytic gene expression in trigeminal ganglion tissue latently infected with wild-type virus and explanted in culture. These results indicate that the regulatory mechanisms governing HSV gene expression are different in trigeminal ganglion neurons and cultured cells. We present a new model for viral gene expression in trigeminal ganglion neurons with implications for the nature of the decision process between latent infection and productive infection by HSV...|$|R
40|$|Software reviews (inspections) have {{received}} widespread attention for ensuring {{the quality of}} software, by finding and repairing <b>defects</b> <b>in</b> software <b>products.</b> <b>A</b> typical review process consists of two stages critical for defect detection: individual review followed by group review. This thesis addresses two attributes to improve {{our understanding of the}} task model: (1) the need for review meetings, and (2) the use of roles in meetings. The controversy of review meeting effectiveness has been consistently raised in the literature. Proponents maintain that the review meeting is the crux of the review process, resulting in group synergism and qualitative benefits (e. g. user satisfaction). Opponents argue that against meetings because the costs of organising and conducting them are high, and there is no net meeting gain. The persistence of these diverse views is the main motivation behind this thesis. Although commonly prescribed in meetings, roles have not yet been empirically validated. Three procedural roles (moderator, reader, recorder) were considered. A conceptual framework on software reviews was developed, from which main research questions were identified. Two experiments were conducted. Review performance was operationalised in terms of true defects and false positives. The review product was COBOL code. The results indicated that in terms of true defects, group reviews outperformed the average individual but not nominal group reviews (aggregate of individual reviews). However, groups have the ability to filter false positives from the individuals' findings. Roles provided limited benefits in improving group reviews. Their main function is to reduce process loss, by encouraging systematic consideration of the individuals' findings. When two or more reviewers find a defect during individual reviews, {{it is likely to be}} carried through to the meeting (plurality effect). Groups employing roles reported more 'new' false positives (not identified from preparation) than groups without roles. Overall, subjects' ability at the defect detection was low. This thesis suggests that reading technologies may be helpful for improving reviewer performance. The inclusion of an author role may also reduce the level of false positive detection. The results have implications on the design and support of the software review process...|$|R
50|$|Discovery of <b>defects</b> <b>in</b> <b>a</b> system.|$|R
5000|$|<b>A</b> <b>defect</b> <b>in</b> <b>a</b> gene {{caused by}} mutation, such as Cystic fibrosis.|$|R
5000|$|Detecting <b>defects</b> <b>in</b> <b>a</b> {{diamond and}} finding {{the best way to}} cut it.|$|R
50|$|Ageometresia or ageometria {{is a word}} {{describing}} <b>a</b> <b>defect</b> <b>in</b> <b>a</b> work of geometry.|$|R
5000|$|... #Caption: Schematic {{illustration}} of <b>defects</b> <b>in</b> <b>a</b> compound solid, using GaAs as an example.|$|R
2500|$|Fanconi anemia, <b>a</b> rare genetic <b>defect</b> <b>in</b> <b>a</b> {{cluster of}} {{proteins}} responsible for DNA repair ...|$|R
5000|$|... #Caption: A nanocavity can {{be created}} by {{introducing}} <b>a</b> <b>defect</b> <b>in</b> <b>a</b> photonic crystal lattice structure ...|$|R
