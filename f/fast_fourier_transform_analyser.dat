2|10000|Public
40|$|For speedier {{and more}} precise Q-measurements, a new system, {{based on a}} <b>Fast</b> <b>Fourier</b> <b>Transform</b> <b>analyser,</b> has been developed. The Q-value is {{calculated}} in 2. 8 ms from 5 12 beam position measurements from one pick-up, sampled at the revolution frequency (- 0. 5 MHz). Amplitude distortion due to rectangular windowing is corrected using amplitude-interpolation based on (sin X) /X fit. Frequency interpolation is then applied. For a pure sine-wave, a precision ti. 0001 is thus obtained over a 30 dB input range, whilst for an oscillation with a coherence time of 80 ps the precision is still rtO. 001 over a 35 dB input range. To follow rapid changes of machine parameters, e. g. at transition, interleaving of measurements yields a Q-value every 1. 8 ms. The Digital Signal Processor memory can store up to 106 ms worth of beam samples for subsequent sliding-FFT analysis. 1...|$|E
40|$|The aim of {{this thesis}} was to develop {{techniques}} to reliably identify, characterise and size emboli to help understand the clinical significance of such potentially devastating phenomena. Firstly a dual gated Doppler technique was developed to differentiate emboli from artefacts that produced excellent results when Doppler signals were analysed in the time domain. Several curious observations were noted, firstly the Doppler derived velocity did not correlate with the time of flight derived velocity, secondly the embolic signal duration in each sample gate was different, and finally an embolic signal was not always visible in both gates.;Another finding was the rapid frequency modulation apparent in some gaseous embolic signals. Several hypotheses have been proposed to explain this observation. Secondly attempts to differentiate gaseous from particulate emboli were investigated. The Wigner distribution analyser is presneted {{as an alternative to}} the conventional <b>fast</b> <b>Fourier</b> <b>transform</b> <b>analyser</b> and allows significant time resolution improvements. The sample volume length (SVL) of embolic signals was investigated as a new parameter for classifying emboli and when compared with previous parameter was found to produce the best sensitivity and specificity.;Finally the embolus to blood ratio (EBR) model is explored to assess its feasibility for sizing particulate emboli. Both dual and single frequency transducers were constructed and their beam characteristics were studied. Significant beam distortion and focusing occurred when skull bone was placed in front of the transducer which no longer produced uniform vessel insonation (a major assumption of the EBR model). In vitro experiments using the single frequency technique showed considerable EBR variability due to beam refraction and with the addition of intervening skull bone there were further errors introduced due to beam focusing effects. Statistical analysis showed that the experimental emboli could not be reliability separated, even into two size groups. Further work to improve the sizing of emboli is discussed...|$|E
40|$|SD all. pole {{modelling}} with autocorrelation method all-pole modelling with covariance method aortic {{component of}} the second heart sound bandwidth at- 30 dB of the spectrum decibel <b>fast</b> <b>Fourier</b> <b>transform</b> <b>fast</b> <b>Fourier</b> <b>transform</b> with Hamming window <b>fast</b> <b>Fourier</b> <b>transform</b> with Hanning window <b>fast</b> <b>Fourier</b> <b>transform</b> with rectangular window <b>fast</b> <b>Fourier</b> <b>transform</b> with sine-cosine window frequency of the most dominant spectral peak frequency of the second ominant spectral peak Hertz millisecond signal-to-noise standard eviation Correspondence {{should be addressed to}} Guy Cloutier, Clinica...|$|R
30|$|Downsample: take a <b>fast</b> <b>Fourier</b> <b>transform</b> (FFT), crop or {{multiply}} by a kernel (e.g., Gaussian) and take inverse <b>fast</b> <b>Fourier</b> <b>transform</b> (IFFT).|$|R
40|$|The <b>Fast</b> <b>Fourier</b> <b>Transform</b> (FFT) {{is one of}} the {{rudimentary}} {{operations in}} field of digital signal and image processing. Some of the very vital applications of the <b>fast</b> <b>Fourier</b> <b>transform</b> include Signal analysis, Sound filtering, Data compression, Partial differential equations, Multiplication of large integers, Image filtering etc. <b>Fast</b> <b>Fourier</b> <b>transform</b> (FFT) is an efficient implementation of the discrete <b>Fourier</b> <b>transform</b> (DFT). This paper concentrates {{on the development of the}} <b>Fast</b> <b>Fourier</b> <b>Transform</b> (FFT), based on Decimation-In- Time (DIT) domain, Radix- 2 algorithm, this paper uses VERILOG as a design entity. The input of <b>Fast</b> <b>Fourier</b> <b>transform</b> has been given by a keyboard using a test bench and output has been displayed using the waveforms on the Xilinx Design Suite 10. 1 and Modelsim 6. 4 b and synthesis results in Xilinx show that the computation for calculating the 32 -point <b>Fast</b> <b>Fourier</b> <b>transform</b> is efficient in terms of speed...|$|R
40|$|Aimed at {{solving the}} {{problems}} of Precision code’s complex acquisition procedures and its long acquisition time in satellite navigation, this paper makes an architecture analysis of the commonly used direct acquisition algorithms of Precision code, making an improvement of the common local pseudorandom code based glide <b>Fast</b> <b>Fourier</b> <b>Transform</b> acquisition architecture. Besides those, it also puts forward a local pseudorandom code based fixed <b>Fast</b> <b>Fourier</b> <b>Transform</b> acquisition architecture and improved pseudorandom code superposed <b>Fast</b> <b>Fourier</b> <b>Transform</b> acquisition architecture. Compared with common local pseudorandom code based glide <b>Fast</b> <b>Fourier</b> <b>Transform</b> acquisition architecture, the methods proposed efficiently simplify acquisition complexity and shorten acquisition time...|$|R
40|$|The <b>Fast</b> <b>Fourier</b> <b>Transform</b> appears {{frequently}} in scientific computing. Therefore {{it is desirable}} to implement it efficiently on parallel computers. In this thesis, we investigate several different aspects of parallel <b>Fast</b> <b>Fourier</b> <b>Transform</b> implementation techniques for distributed-memory message-passing systems such as hypercube multiprocessors. We describe various <b>Fast</b> <b>Fourier</b> <b>Transform</b> algorithms using a matrix notation. An error analysis is presented that considers the effect of different methods used in the computation of the <b>Fourier</b> <b>Transform</b> coefficients as well as accumulated roundoff. New implementations of one and two-dimensional <b>Fast</b> <b>Fourier</b> <b>Transforms</b> are presented along with comparisons with existing methods. New algorithms for symmetric transforms are also developed and the results show excellent speedup when implemented on the Intel iPSC hypercube...|$|R
40|$|Program computes 64 X 64 -point <b>fast</b> <b>Fourier</b> <b>transform</b> in {{less than}} 17 microseconds. Optimized 64 X 64 Point Two-Dimensional <b>Fast</b> <b>Fourier</b> <b>Transform</b> {{combines}} performance of real- and complex-valued one-dimensional <b>fast</b> <b>Fourier</b> <b>transforms</b> (FFT's) to execute two-dimensional FFT and coefficients of power spectrum. Coefficients used in many applications, including analyzing spectra, convolution, digital filtering, processing images, and compressing data. Source code written in C, 8086 Assembly, and Texas Instruments TMS 320 C 30 Assembly languages...|$|R
40|$|Abstract–The paper {{discusses}} {{the impact of}} the <b>fast</b> <b>Fourier</b> <b>transform</b> on the spectrum of time series analysis. It is shown that the computationally fastest way to calculate mean lagged products is to begin by calculating all Fourier coefficients with a <b>fast</b> <b>Fourier</b> <b>transform</b> and then to fast-Fourier-retransform a sequence made up of a 2 k + b 2 k (where ak + ibk are the complex Fourier coefficients). Also discussed are raw and modified Fourier periodograms, bandwidth versus stability aspects, and aims and computational approaches to complex demodulation. Appendices include a glossary, a review of complex demodulation without <b>fast</b> <b>Fourier</b> <b>transform,</b> and a short explanation of the <b>fast</b> <b>Fourier</b> <b>transform.</b> I. The Overall Situatio...|$|R
5000|$|... #Subtitle level 3: Discrete <b>Fourier</b> <b>Transforms</b> and <b>Fast</b> <b>Fourier</b> <b>Transforms</b> ...|$|R
50|$|A <b>Fast</b> <b>Fourier</b> <b>Transform</b> (FFT) is an {{algorithm}} {{which deals}} with the transformation of discrete values (in this case image pixels). When applied {{to a sample of}} finite values, a <b>Fast</b> <b>Fourier</b> <b>Transform</b> expresses any changes (motion) in terms of frequency components.|$|R
30|$|<b>Fast</b> <b>Fourier</b> <b>transform</b> has the {{tendency}} to produce large values which may introduce an artifact. In order to overcome the issue of artifact, a normalization procedure is proposed and integrated with <b>Fast</b> <b>Fourier</b> <b>transform.</b> The proposed normalization model is shown in Equations  1 and 2.|$|R
5000|$|The prime-factor FFT {{algorithm}} (also called Good-Thomas algorithm) {{uses the}} Chinese remainder theorem {{for reducing the}} computation of a <b>fast</b> <b>Fourier</b> <b>transform</b> of size [...] to the computation of two <b>fast</b> <b>Fourier</b> <b>transforms</b> of smaller sizes [...] and [...] (providing that [...] and [...] are coprime).|$|R
500|$|... {{spectral}} methods (such as Cooley–Tukey <b>fast</b> <b>Fourier</b> <b>transform)</b> ...|$|R
50|$|<b>Fast</b> <b>Fourier</b> <b>Transform</b> and Convolution algorithms, Springer-Verlag, 1981.|$|R
5000|$|... {{spectral}} methods (such as Cooley-Tukey <b>fast</b> <b>Fourier</b> <b>transform)</b> ...|$|R
40|$|Application of the <b>Fast</b> <b>Fourier</b> <b>Transform</b> (FFT) to the {{inversion}} of Laplace transforms {{is a recent}} development in {{the solution of the}} equations describing the behavior of chemical reactors. Chen and Hsu (1987) used the <b>Fast</b> <b>Fourier</b> <b>Transform</b> for the prediction of breakthrough curves of an isothermal fixed bed adsorber. The <b>Fast</b> <b>Fourier</b> <b>Transform</b> method has been further developed for the calculation of breakthrough curves in non-isothermal adsorbers (Mees et al., 1989). The purpose of this work is the application of this method to a practical engineering problem involving parameter estimation. Applied Science...|$|R
40|$|The aim of {{this thesis}} is to design the {{implementation}} of <b>fast</b> <b>Fourier</b> <b>transform</b> algorithm, {{which can be used}} in FPGA or ASIC circuits. Implementation will be done in Matlab and then this form of implementation will be used as a reference model for implementation of <b>fast</b> <b>Fourier</b> <b>transform</b> algorithm in VHDL. To verify the correctness ofdesign verification enviroment will be created and verification process wil be done. Program that will generate source code for various parameters of the module performing a <b>fast</b> <b>Fourier</b> <b>transform</b> will be created in the last part of this thesis...|$|R
40|$|The Sparse <b>Fast</b> <b>Fourier</b> <b>Transform</b> is {{a recent}} {{algorithm}} developed by Hassanieh et al. at MIT for Discrete <b>Fourier</b> <b>Transforms</b> on signals with a sparse frequency domain. A reference implementation of the algorithm exists and proves that the Sparse <b>Fast</b> <b>Fourier</b> <b>Transform</b> can be <b>faster</b> than modern FFT libraries. However, the reference implementation does {{not take advantage of}} modern hardware features like vector instruction sets or multithreading. In this Master Thesis the reference implementation’s performance will be analyzed and evaluated. Several optimizations are proposed and im-plemented in a high-performance Sparse <b>Fast</b> <b>Fourier</b> <b>Transform</b> library. The optimized code is evaluated for performance and compared to the reference implementation as well as the FFTW library. The main result is that, depending on the input parameters, the opti-mized Sparse <b>Fast</b> <b>Fourier</b> <b>Transform</b> library is two to five times faster tha...|$|R
5000|$|... #Subtitle level 2: Combination with <b>fast</b> <b>Fourier</b> <b>transform</b> FFT ...|$|R
40|$|The {{generation}} of the picture out of the SAR raw data is a computational intensive task. Both range compression and azimuth compression utilized <b>Fast</b> <b>Fourier</b> <b>Transform</b> (FFT) algorithms and Inverse <b>Fast</b> <b>Fourier</b> <b>Transform</b> (IFFT) in order to perform convolution with respective reference signal. Thus FFT and IFFT occupied about 70...|$|R
5000|$|... 2009 (for 1999): A <b>Fast</b> <b>Fourier</b> <b>Transform</b> Compiler, Matteo Frigo ...|$|R
2500|$|An inverse <b>Fast</b> <b>Fourier</b> <b>transform</b> {{can be used}} to {{efficiently}} synthesize frequencies that evenly {{divide the}} transform period or [...] "frame". By careful consideration of the DFT frequency-domain representation it is also possible to efficiently synthesize sinusoids of arbitrary frequencies using a series of overlapping frames and the inverse <b>Fast</b> <b>Fourier</b> <b>transform.</b>|$|R
40|$|Discrete <b>Fourier</b> <b>transforms</b> {{and other}} related Fourier methods have been {{practically}} implementable due to the <b>fast</b> <b>Fourier</b> <b>transform</b> (FFT). However there are many situations where doing <b>fast</b> <b>Fourier</b> <b>transforms</b> without complete data would be desirable. In this paper it is recognised that formulating the FFT algorithm as a belief network allows suitable priors to be set for the Fourier coe#cients...|$|R
40|$|Abstract. In {{this paper}} we {{describe}} a parallel algorithm for calculating nonequispaced <b>fast</b> <b>Fourier</b> <b>transforms</b> on massively parallel distributed memory architectures. These algorithms are implemented {{in an open}} source software library called PNFFT. Furthermore, we derive a parallel fast algorithm for the computation of the Coulomb potentials and forces in a charged particle system, {{which is based on}} the parallel nonequispaced <b>fast</b> <b>Fourier</b> <b>transform.</b> To prove the high scalability of our algorithms we provide performance results on a BlueGene/P system using up to 65536 cores. Key words and phrases: parallel nonequispaced <b>fast</b> <b>Fourier</b> <b>transform,</b> parallel <b>fast</b> summation, parallel particle mesh methods, NFF...|$|R
2500|$|... 1903– Carle David Tolmé Runge {{presents}} a <b>fast</b> <b>Fourier</b> <b>transform</b> algorithm ...|$|R
5000|$|CUFFT - CUDA <b>Fast</b> <b>Fourier</b> <b>Transform</b> library, see {{main and}} docs ...|$|R
2500|$|... 1942– G.C. Danielson and Cornelius Lanczos {{develop a}} <b>fast</b> <b>Fourier</b> <b>transform</b> algorithm.|$|R
5000|$|D = Doppler {{filter size}} (transmit pulses in each <b>Fast</b> <b>Fourier</b> <b>transform)</b> ...|$|R
5000|$|... 2000 CSIRO Medal for {{development}} {{and application of}} <b>fast</b> <b>Fourier</b> <b>transform</b> technology ...|$|R
5000|$|... hcFFT {{library for}} <b>Fast</b> <b>Fourier</b> <b>transform</b> written in C++ (optimized for HCC) ...|$|R
40|$|Abstract—We {{describe}} {{the application of}} Prony-like reconstruction methods {{to the problem of}} the sparse <b>Fast</b> <b>Fourier</b> <b>transform</b> (sFFT) [6]. In particular, we adapt both important parts of the sFFT, quasi random sampling and filtering techniques, to Prony-like methods. Key words and phrases: sparse <b>Fast</b> <b>Fourier</b> <b>Transform,</b> sFFT, Prony-like methods 2000 AMS Mathematics Subject Classification: 65 T 50 I...|$|R
5000|$|... where FFT and IFFT {{refer to}} the <b>fast</b> <b>Fourier</b> <b>transform</b> and inversefast <b>Fourier</b> <b>transform,</b> respectively, {{evaluated}} over [...] discretepoints.|$|R
2500|$|... 1965– James Cooley and John Tukey {{present an}} {{influential}} <b>fast</b> <b>Fourier</b> <b>transform</b> algorithm.|$|R
5000|$|... where IFFT {{denotes the}} inverse <b>Fast</b> <b>Fourier</b> <b>transform.</b> The {{asterisk}} denotes complex conjugate.|$|R
40|$|MATLAB ????????? ??????????? ??????????? ?? ?????????? (????????? ?? ???????????) ???????????? ???????????? ???????? ???????????? ????? ?? ???????????? ???????????? ?????? ? ??????? ? ????????????? ????????? ???????. ????????, ?? ???????????? ???????????? ???????????? ?????? ?????????? ?????? ?? ?????????? ??????????? ??????-???? ??? 2 dB ?? 15 dB. Digital {{wireless}} communication design for high speed data for orthogonal frequency division multiplexing {{system has been}} investigated. <b>Fast</b> <b>Fourier</b> <b>transform</b> and finite Radon transform were applied for the investigation. Block diagrams systems with <b>fast</b> <b>Fourier</b> <b>transform</b> and finite Radon transform has been presented. Simulation and comparison (normalized and non-normalized) of <b>fast</b> <b>Fourier</b> <b>transform</b> and finite Radon transform efficiency in orthogonal frequency division multiplexing system was carried out through MATLAB program. The application of finite Radon transform {{has been shown to}} provide the gain in the parameter signal to noise ratio from 2 dB to 15 ddB ?? 15 dB...|$|R
