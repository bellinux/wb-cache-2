220|93|Public
25|$|Designed {{for long}} term storage of data, and indefinitely scaled <b>datastore</b> sizes with zero data loss, and high configurability.|$|E
2500|$|... Reddit has {{decommissioned}} {{their physical}} servers and migrated to Amazon Web Services. Reddit uses PostgreSQL {{as their primary}} <b>datastore</b> and is slowly moving to Apache Cassandra, a column-oriented <b>datastore.</b> It uses RabbitMQ for offline processing, HAProxy for load balancing and memcached for caching. In early 2009, Reddit started using jQuery. On June 7, 2010, Reddit staff launched a revamped mobile interface featuring rewritten CSS, a new color scheme, and a multitude of improvements.|$|E
2500|$|The {{implementation}} of these cmdlet classes {{can refer to}} any [...]NET API and may be in any [...]NET language. In addition, PowerShell makes certain APIs available, such as WriteObject (...) , {{which is used to}} access PowerShell-specific functionality, such as writing resultant objects to the pipeline. Cmdlets can use [...]NET data access APIs directly or use the PowerShell infrastructure of PowerShell Providers, which make data stores addressable using unique paths. Data stores are exposed using drive letters, and hierarchies within them, addressed as directories. Windows PowerShell ships with providers for the file system, registry, the certificate store, as well as the namespaces for command aliases, variables, and functions. Windows PowerShell also includes various cmdlets for managing various Windows systems, including the file system, or using Windows Management Instrumentation to control Windows components. Other applications can register cmdlets with PowerShell, thus allowing it to manage them, and, if they enclose any <b>datastore</b> (such as databases), they can add specific providers as well.|$|E
5000|$|Drill is {{primarily}} focused on non-relational <b>datastores,</b> including Apache Hadoop text files, NoSQL and cloud storage. The following <b>datastores</b> are supported: ...|$|R
50|$|DataNucleus Access Platform is a fully {{compliant}} {{implementation of the}} Java Data Objects (JDO) 1.0, 2.0, 2.1, 2.2, 3.0, 3.1 specifications (JSR 0012, JSR 0243) and the Java Persistence API (JPA) 1.0, 2.0, 2.1, 2.2 specifications (JSR 0220, JSR 0317, JSR 0338), providing transparent persistence of Java objects. It supports persistence to the widest range of <b>datastores</b> of any Java persistence software, supporting all of the main object-relational mapping (ORM) patterns, allows querying using either JDOQL, JPQL or SQL, and comes with its own byte-code enhancer. It allows persistence to relational <b>datastores</b> (RDBMS), object-based <b>datastores</b> (db4o, NeoDatis ODB), document-based storage (XML, Excel, OpenDocument spreadsheets), web-based storage (JSON, Google Storage, Amazon Simple Storage Service), map-based <b>datastores</b> (HBase, Google's BigTable, Apache Cassandra), graph-based <b>datastores</b> (Neo4j), document stores (MongoDB) {{as well as other}} types of <b>datastores</b> (e.g. LDAP). Its plugins are OSGi-compliant so can be used equally in an OSGi environment.|$|R
30|$|Different from RDBMSs, {{characterized}} by a standard reference data model and query language, a variety of proprietary query languages have been proposed for NoSQL <b>datastores,</b> as well as different data models have been introduced for them. Recent surveys have classified NoSQL databases into three main categories {{on the basis of}} the adopted data model, namely key value, wide column, and document-oriented <b>datastores</b> [7]. Each of these classes is {{characterized by}} features that make the related <b>datastores</b> suited to specific application scenarios. Key-value <b>datastores</b> (e.g., Redis) 5 handle data modeled as pairs of keys and values. Data can be of primitive type or complex objects and are uniquely identified by a key. Such systems allow executing basic queries which retrieve values corresponding to given keys. They are very efficient in terms of used computational resources. Wide column stores (e.g., Cassandra) 6 are an evolution of key-value <b>datastores,</b> with more advanced data organization and analysis features. Data are collected into flexible tables, and they are modeled as heterogeneous records of variable size. Tables are flexible in that each row can be composed of a different set of columns, and columns, in turn, can be organized into column families. Finally, document-oriented <b>datastores</b> (e.g., MongoDB) model data as heterogeneous, hierarchical records, denoted as documents, which in turn are composed of sets of key-value pairs, each specifying a document field. Documents are grouped into collections, which in turn compose a database. Document-oriented <b>datastores</b> provide complex data management and analysis features and query languages and appear as the most flexible and complex currently available NoSQL <b>datastores.</b>|$|R
50|$|Google Cloud <b>Datastore</b> (Cloud <b>Datastore)</b> is {{a highly}} scalable, fully managed NoSQL {{database}} service offered by Google on the Google Cloud Platform. Cloud <b>Datastore</b> is built upon Google's Bigtable and Megastore technology.|$|E
5000|$|The <b>DataStore</b> {{object is}} the primary object which is used for communication, triggers, {{variable}} storage, and interface element parameters. Each element in the <b>DataStore</b> has a path separated by the period [...] ".". Each trigger has a path in this <b>DataStore.</b> Notifying (or setting a [...] ".action" [...] on any other element, e.g. [...] "MyChannelView.sometriggerORvariable.action") will cause the relevant trigger to execute. e.g. DataStore.Notify("MyChannel.someTrigger"); or DataStore.Set("MyChannel.someVariable"); This second example would trigger [...] "MyChannel.someVariable.action" [...] when the variable is Change. There is persistent storage in the <b>DataStore.</b>|$|E
5000|$|... eXtreme Scale: eXtreme Scale is a cross-process in-memory key/value <b>datastore</b> (a {{variety of}} NoSQL <b>datastore).</b> It uses {{sharding}} to achieve scalability across processes for both data and MapReduce-style parallel processing.|$|E
50|$|Upon her {{physical}} death Lieserl's awareness is downloaded {{into a number}} of <b>datastores,</b> granting her a supreme consciousness. These <b>datastores</b> are placed within one mouth, or Interface, of a man-made wormhole which is then suspended within the Sun. The other Interface of the wormhole is left in orbit around the Sun and the pumping away of superheated gas from the Interface within the sun to the other Interface provides a refrigeration effect enabling the <b>datastores</b> holding Lieserl's consciousness to survive.|$|R
30|$|NoSQL <b>datastores</b> {{represent}} highly flexible, scalable, {{and efficient}} data management systems for Big Data, based on different data models. Cattell 2011 classifies NoSQL systems into three classes, {{on the basis}} of the adopted data model, namely key value, wide column, and document-oriented <b>datastores,</b> each suited to specific application scenarios. Key-value <b>datastores</b> (e.g., Redis 8) can be seen as big hash tables with persistent storage services. Data are modeled by means of key-value pairs, where values of primitive or complex type are directly addressed by means of a key. Key value <b>datastores</b> are suited to application scenarios where efficient look-up operations are required. For instance, they are used to manage web session information and users profile data. Wide column stores (e.g., Cassandra 9) model data as records with variable structures, which are then grouped into tables with flexible schema. Wide column stores are a good fit for the data management requirements of blogging platforms and content management systems. Document-oriented <b>datastores</b> (e.g., MongoDB 10) model data as hierarchical records, denoted documents, whose fields either specify a primitive value, or are in turn records composed of multiple fields. Documents are partitioned into collections, which in turn are grouped in a database. Typical applications of document oriented <b>datastores</b> include event logging systems and content management systems.|$|R
5000|$|Pluggable {{architecture}} enables connectivity {{to multiple}} <b>datastores</b> ...|$|R
5000|$|Google Cloud <b>Datastore</b> - DBaaS {{providing}} a document-oriented database.|$|E
5000|$|Sysrepo is a YANG-based {{configuration}} {{and operational}} <b>datastore</b> for Unix/Linux applications.|$|E
5000|$|Online <b>datastore</b> - Use the SaaS {{platform}} to store data that is extracted ...|$|E
50|$|Transparent Cloud Tiering for Swift- and S3-compatible object <b>datastores</b> {{can be used}} as a cold tier for {{incremental}} volume snapshots {{and volume}} archives without live production access. This allows keeping hourly time machine copies or archiving VM images including attached volumes at a price point somewhat closer to tape media. Supported on-premise <b>datastores</b> include IBM Cloud Object Store (aka Cleversafe) and IBM Spectrum Scale object. Off-premise <b>datastores</b> would be popular S3-compatible cloud services like IBM Bluemix (aka Cleversafe cloud). Off-premise Transparent Cloud Tiering per default uses AES encryption, which is a licensed feature.|$|R
5000|$|SAN and iSCSI - block based access <b>datastores</b> {{over the}} network ...|$|R
5000|$|SQL and NoSQL <b>datastores</b> like Berkleydb, CouchDB, Db4O, Neo4j, NeoDatis, Memcached and Riak.|$|R
5000|$|Google App Engine's {{integrated}} Google Cloud <b>Datastore</b> database has a SQL-like syntax called [...] "GQL". GQL {{does not}} support the Join statement. Instead, one-to-many and many-to-many relationships can be accomplished using ReferenceProperty (...) [...] [...] This shared-nothing approach allows disks to fail without the system failing. Switching from a relational database to Cloud <b>Datastore</b> requires a paradigm shift for developers when modeling their data.|$|E
5000|$|As of January 2007, Dojo {{includes}} the following example server-side <b>datastore</b> implementations in the dojo.data namespace: ...|$|E
50|$|Speed Tables are a fast {{key-value}} <b>datastore</b> for Tcl {{that use}} skiplists for indexes and lockless shared memory.|$|E
30|$|In this paper, we survey {{issues and}} {{challenges}} related {{to the development of}} FGAC enforcement monitors and their integration into document-oriented NoSQL <b>datastores.</b> The analysis of the literature lead us to identify possible strategies to address issues related to the definition of policy specification criteria, enforcement strategies, the implementation of the proposed mechanisms by an enforcement monitor, and aspects related to integration of the monitor into existing document-oriented <b>datastores.</b> The analysis described in this paper is partially based on early research experiences on NoSQL <b>datastores</b> that we did with MongoDB [10, 12], as well as on ongoing research activities finalized to the generalization of the approach in [10, 12].|$|R
30|$|Overall, the {{research}} on the integration of FGAC into NoSQL <b>datastores</b> {{is still in the}} early stages. More specifically, for what document-oriented <b>datastores</b> are concerned, although the initial experiences that we had with MongoDB allowed us to identify some approaches to the definition and integration of FGAC into NoSQL systems, the proposed solutions need to be generalized to increase their applicability.|$|R
50|$|IIFP is a slimmed-down {{version of}} MIIS that {{is limited to}} {{synchronization}} between AD, ADAM, and exchange <b>datastores</b> http://forums.microsoft.com/TechNet/ShowPost.aspx?PostID=1848075&SiteID=17.|$|R
5000|$|Designed {{for long}} term storage of data, and indefinitely scaled <b>datastore</b> sizes with zero data loss, and high configurability.|$|E
5000|$|Full Virtualization (FV), which recovers a host as {{a virtual}} machine, and copies the data into the {{hypervisor}} <b>datastore</b> ...|$|E
5000|$|HyperDex can act {{both as a}} {{key-value}} <b>datastore</b> and {{a document}} store, supporting unstructured (schema-free), semi-structured, and structured (schema-based) data.|$|E
40|$|One of {{the main}} tasks {{in the early stages}} of a data {{warehouse}} project is the identification of the appropriate transformations and the specification of inter-schema mappings from the data sources to the data warehouse. In this article, we propose an ontology-based approach to facilitate the conceptual design of the back stage of a data warehouse. A graph-based representation is used as a conceptual model for the <b>datastores,</b> so that both structured and semi-structured data are supported and handled in a uniform way. The proposed approach is based on the use of Semantic Web technologies to semantically annotate the data sources and the data warehouse, so that mappings between them can be inferred, thereby resolving the issue of heterogeneity. Specifically, a suitable application ontology is created and used to annotate the <b>datastores.</b> The language used for describing the ontology is OWL-DL. Based on the provided annotations, a DL reasoner is employed to infer semantic correspondences and conflicts among the <b>datastores,</b> and to propose a set of conceptual operations for transforming data from the source <b>datastores</b> to the data warehouse. Copyright © 2007, IGI Global...|$|R
3000|$|Enforcement {{mechanisms}} The literature presents {{two main}} categories of enforcement approaches for FGAC, namely view-based and query rewriting mechanisms. The view-based mechanism consists in deriving authorized {{views of a}} resource, {{on the basis of}} the specified access control policies, and granting the permit to access that views instead of the original data resources. This approach suffers from several drawbacks. Indeed, different from relational databases, views are not supported by all NoSQL <b>datastores,</b> and thus ad hoc implementations are required within several NoSQL <b>datastores.</b>|$|R
30|$|SQL++ can be {{used with}} <b>datastores</b> {{adopting}} different data models, thus, the term data unit is used to denote a table row, or a document.|$|R
50|$|TIBCO ActiveSpaces is a {{distributed}} elastic peer-to-peer transactional <b>datastore</b> {{based on}} the tuple space concepts. It stores, retrieves and queries data stored into Spaces and distributes changes to that data in real-time in a true 'push' manner. It can function as an alternative <b>datastore</b> (with ACID properties and query filtering criteria expressed as SQL-compatible strings), messaging system (or {{a combination of the}} two), processing large amounts of data in a distributed manner.|$|E
5000|$|... Reddit has {{decommissioned}} {{their physical}} servers and migrated to Amazon Web Services. Reddit uses PostgreSQL {{as their primary}} <b>datastore</b> and is slowly moving to Apache Cassandra, a column-oriented <b>datastore.</b> It uses RabbitMQ for offline processing, HAProxy for load balancing and memcached for caching. In early 2009, Reddit started using jQuery. On June 7, 2010, Reddit staff launched a revamped mobile interface featuring rewritten CSS, a new color scheme, and a multitude of improvements.|$|E
5000|$|Perfect Dark - a P2P client which {{relies on}} a mixnet and {{distributed}} <b>datastore</b> to provide anonymity (freeware, written for Windows) ...|$|E
50|$|ObjectRocket is a cloud {{database}} (DBaaS) {{company based}} in Austin, Texas, specializing in NoSQL <b>datastores</b> including MongoDB and Redis. In 2013, they were acquired by Rackspace.|$|R
30|$|On {{the basis}} of the {{previous}} considerations, neither the view based, nor the query rewriting approaches proposed for RDBMSs can be directly applied with NoSQL document-oriented <b>datastores.</b>|$|R
50|$|BIRT Report {{designs are}} persisted as XML and can access {{a number of}} {{different}} data sources including JDO <b>datastores,</b> JFire Scripting Objects, POJOs, SQL databases, Web Services and XML.|$|R
