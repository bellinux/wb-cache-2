20|48|Public
50|$|In 1677, Henry Coggeshall {{created a}} two-foot <b>folding</b> <b>rule</b> for timber measure, called the Coggeshall slide rule, {{expanding}} the slide rule's use beyond mathematical inquiry.|$|E
5000|$|Measuring {{instruments}} {{similar in}} function to rulers are made portable by folding (carpenter's <b>folding</b> <b>rule)</b> or retracting into a coil (metal tape measure) {{when not in}} use. When extended for use, they are straight, like a ruler. The illustrations on this page show a [...] carpenter's rule, which folds down to a length of [...] to easily fit in a pocket, and a [...] tape, which retracts into a small housing.|$|E
50|$|Genome-wide surveys {{based on}} a {{quadruplex}} <b>folding</b> <b>rule</b> have been performed, which have identified 376,000 Putative Quadruplex Sequences (PQS) in the human genome, although {{not all of these}} probably form in vivo. A similar study has identified putative G-quadruplexes in prokaryotes. There are several possible models for how quadruplexes could influence gene activity, either by upregulation or downregulation. One model is shown below, with G-quadruplex formation in or near a promoter blocking transcription of the gene, and hence de-activating it. In another model, quadruplex formed at the non-coding DNA strand helps to maintain an open conformation of the coding DNA strand and enhance an expression of the respective gene.|$|E
40|$|Agarwala et al. {{proposed}} {{two main}} <b>folding</b> <b>rules,</b> namely, backbone <b>folding</b> and arrow folding, on triangular lattice in 2 D HP model [1]. However, these <b>folding</b> <b>rules</b> are {{not suitable for}} sequences with sparse H’s. In this paper, we propose two <b>folding</b> <b>rules,</b> which can support the weakness of their <b>folding</b> <b>rules.</b> The first rule is called starlike folding which is better than others for the sequences {{in the pattern of}} (HP +) +. The other rule is called compact starlike folding which is suitable for the sequences in the combined patterns of (HP +) + and H n. Together with backbone folding and arrow folding, we propose a general strategy of protein folding which suggests a suitable usage for all possible sequences. ...|$|R
50|$|Kate is a programmer's {{text editor}} that {{features}} syntax highlighting for over 200 file formats with code <b>folding</b> <b>rules.</b> The syntax highlighting is extensible via XML files. It supports UTF-8, UTF-16, ISO-8859-1 and ASCII encoding schemes and can detect a file's character encoding automatically.|$|R
40|$|AbstractSeveral crystal {{structures}} of RNA fragments, {{alone or in}} complex with a specific protein, have been recently solved. In addition, the structures of an artificial ribozyme, the leadzyme, and the cleavage product of a human pathogen ribozyme, have extended the structural diversity of ribozyme architectures. The attained set of <b>folding</b> <b>rules</b> and motifs expand the repertoire seen previously in tRNA structures...|$|R
5000|$|Bruno and Helmut are the series' {{commonly}} appearing {{two police}} officers. A kind of Laurel and Hardy pairing, Bruno is short, chubby, and very anal about {{all kinds of}} laws and regulations, while getting Werner and Andi locked up for any of their various misdemeanors (such as speeding, drunk driving, and illegal vehicle modifications) is his eternal dream, whereas Helmut is tall, skinny, and asinine, usually helpless {{when he is not}} ordered around by Bruno. Considering himself righteous law incarnate ("denkt, er ist der Staat", as the official Werner website puts it), pedantic Bruno is scared only by the Präsi. Their characters are illustrated well in a short story included in Werner Eiskalt, where Bruno orders Helmut to [...] "measure the phon volume" [...] of Werner's chopper bike's tail pipe in order to prove that it violates disturbance regulations. Helmut then uses a <b>folding</b> <b>rule</b> to measure the flame and smoke shooting from the pipe, and loyally reports to his superior Bruno that it's [...] "ten meters fifty of phon".|$|E
40|$|Abstract. In this paper, {{we propose}} more {{flexible}} applicability {{conditions for the}} <b>folding</b> <b>rule</b> that increase the power of existing unfold/fold systems for normal logic programs. Our generalized <b>folding</b> <b>rule</b> enables new transformation sequences that, in particular, are suitable for recursion introduction and local variable elimination. We provide some illustrative examples and give a detailed proof of correctness w. r. t. the Clark-Kunen semantics. ...|$|E
40|$|Abstract. We {{consider}} the folding transformation rule for constraint logic programs. We propose an algorithm for applying the <b>folding</b> <b>rule</b> {{in the case}} where the constraints are linear equations and inequations over the rational or the real numbers. Basically, our algorithm consists in reducing a rule application to the solution {{of one or more}} systems of linear equations and inequations. We also introduce two variants of the folding transformation rule. The first variant combines the <b>folding</b> <b>rule</b> with the clause splitting rule, and the second variant eliminates the existential variables of a clause, that is, those variables which occur {{in the body of the}} clause and not in its head. Finally, we present the algorithms for applying these variants of the <b>folding</b> <b>rule.</b> ...|$|E
40|$|We {{describe}} a novel computerized system for comparison of RNA secondary structures and demonstrate its use for experimental studies. The system {{is able to}} screen {{a very large number}} of structures, to cluster similar structures and to detect specific structural motifs. In particular, the system is useful for detecting mutations with specific structural effects among all possible point mutations, and for predicting compensatory mutations that will restore the wild type structure. The algorithms are independent of the <b>folding</b> <b>rules</b> that are used to generate the secondary structures...|$|R
40|$|This thesis {{explores the}} {{architectural}} opportunities embedded in geometric folding {{by studying the}} limitations and possibilities {{of a variety of}} patterns. In particular; the thesis focuses on the Yoshimura or diamond folding pattern. By manipulating specific rules guiding the diamond fold, the surface can be adapted to enclose a variety of volumes for different programs. The adaptations of the diamond <b>fold</b> <b>rules</b> are tested in a design for a pop-up fashion pavilion. The result is a geometric form that acts as a canopy, enclosure and inhabitable surface to hold program elements such as a marketplace, small fitting rooms, and a runway. by Yujing Li. Thesis (S. B.) [...] Massachusetts Institute of Technology, Dept. of Architecture, 2010. Includes bibliographical references (p. 52) ...|$|R
40|$|We {{study the}} folding {{of the regular}} {{triangular}} lattice in three dimensional embedding space, {{a model for the}} crumpling of polymerised membranes. We consider a discrete model, where folds are either planar or form the angles of a regular octahedron. These "octahedral" <b>folding</b> <b>rules</b> correspond simply to a discretisation of the 3 d embedding space as a Face Centred Cubic lattice. The model is shown to be equivalent to a 96 [...] vertex model on the triangular lattice. The folding entropy per triangle ln q_ 3 d is evaluated numerically to be q_ 3 d= 1. 43 (1). Various exact bounds on q_ 3 d are derived. Comment: 55 pages, uuencoded, uses harvmac (l mode) and epsf, 19 + 2 figures include...|$|R
40|$|Many {{inductive}} {{logic programming}} systems have operators reorganizing the program so far inferred, such as the intra-construction operator of CIGOL. At the same time, there is a similar reorganizing operator, called the “folding rule, ” developed in program transformation. We argue that there are advantages in using an extended <b>folding</b> <b>rule</b> as a reorganizing operator for inductive-inference systems. Such an extended <b>folding</b> <b>rule</b> allows an inductive-inference system not only to recognize already-learned concepts, but also to increase the efficiently of execution of inferred programs. ...|$|E
40|$|The {{contribution}} of this thesis consists in {{the extension of}} the techniques for the transformation of constraint logic programs and the development of methods for the application of these techniques to the proof of temporal properties of parameterized protocols. In particular, we first introduce a method for proving automatically the total correctness of an unfold/fold transformation by solving linear equations and inequations over the natural numbers. We also propose a transformation-based method for proving first order properties of constraint logic programs which manipulate finite lists of real or rational numbers. Then, we extend the standard folding transformation rule by introducing two variants of this rule. The first variant combines the <b>folding</b> <b>rule</b> with the clause splitting rule for obtaining a more powerful <b>folding</b> <b>rule.</b> The second variant is tailored to the elimination of the existential variables occurring in a clause. For the standard <b>folding</b> <b>rule</b> and its two variants we develop the corresponding algorithms for automating their application. Finally, we propose a program transformation framework for proving temporal properties of parameterized protocols. Using this framework we encode the protocols and the temporal properties we want to prove as logic programs, and then we use the unfold/fold transformation technique for proving whether or not the properties holds...|$|E
40|$|An unfold/fold program {{transformation}} {{system which}} extends the unfold/fold transformations of H. Tamaki and T. Sato {{is presented in}} this paper. The system consists of unfolding, simultaneous folding, and generalization + equality introduction rules. The simultaneous <b>folding</b> <b>rule</b> permits the folding {{of a set of}} folded clauses into a single clause, using a set of folding clauses, while the generalization + equality introduction rule facilitates the application of the simultaneous <b>folding</b> <b>rule</b> by performing appropriate abstractions. A proof of the correctness of the proposed transformations {{in the sense of the}} least Herbrand model semantics of the program is also presented. 1 Introduction Unfold/fold transformations were first proposed by R. Burstall and J. Darlington [BD 77] in the context of a functional language. In the context of logic programming, H. Tamaki and T. Sato [TS 84, TS 86] formulated unfold/fold transformations for definite clause programs so as to preserve the equivalence [...] ...|$|E
40|$|We {{address the}} problem of specializing a {{constraint}} logic program w. r. t. a specific context of use. We consider constraints over a generic domain and we assume that the context of use of a program is specified by a constrained atom. We follow an approach based on transformation rules and strategies. We present a novel transformation rule, called contextual constraint replacement, to be combined with the traditional unfolding and <b>folding</b> <b>rules.</b> We show the correctness of the transformation rules w. r. t. least models and we present a general strategy for automating the application of these rules. We show through examples the power of our method and its superiority w. r. t. existing methods for partial deduction of constraint logic programs based on extensions of Lloyd and Shepherdson's approach...|$|R
40|$|Jungles are acyclic hypergraphs which {{represent}} sets of terms such that common subterms can be shared. Term rewrite rules are translated into jungle evaluation rules which implement parallel term rewriting steps. By using additional hypergraph rules which "fold" equal subterms, even non-left-linear term rewriting {{systems can be}} implemented. As a side effect, these <b>folding</b> <b>rules</b> can speed up the evaluation process considerably. It is shown that terminating term rewriting systems result in terminating jungle evaluation systems which are capable to normalize every term. Moreover, confluent and terminating term rewriting systems give rise to confluent and terminating jungle evaluation systems, provided that the "garbage" produced by the evaluation steps is ignored. 1 Introduction Term rewriting is an interesting way of "computing by replacement" which is used in various areas of computing science: for the interpretation of functional and logical programming languages, for theorem [...] ...|$|R
40|$|AbstractWe {{address the}} problem of specializing a {{constraint}} logic program w. r. t. a constrained atom which specifies the context of use of the program. We follow an approach based on transformation rules and strategies. We introduce a novel transformation rule, called contextual constraint replacement, to be combined with variants of the traditional unfolding and <b>folding</b> <b>rules.</b> We present a general Partial Evaluation Strategy for automating the application of these rules, and two additional strategies: the Context Propagation Strategy which is instrumental for the application of our contextual constraint replacement rule, and the Invariant Promotion Strategy for taking advantage of invariance properties of the computation. We show through some examples the power of our method and we compare it with existing methods for partial deduction of constraint logic programs based on extensions of Lloyd and Shepherdson's approach...|$|R
40|$|AbstractTwo unfold/fold {{transformation}} {{systems for}} first-order programs, one basic {{and the other}} extended, are presented. The systems comprise an unfolding rule, a <b>folding</b> <b>rule</b> and a replacement rule. They are intended {{to work with a}} first-order theory Δ specifying the meaning of primitives, on top of which new relations are built by programs. They preserve the provability relationship Δ ∪ Γ ⊬ G between a call-consistent program Γ and a goal formula G such that Γ is strict with respect to G. They also preserve the logical consequence relationship in three-valued logic...|$|E
40|$|In 2006 Odyssey Marine Exploration {{recovered}} {{one half}} of a wooden <b>folding</b> <b>rule</b> from site T 7 a 35 f- 5, a shipwreck heavily impacted by the offshore fishing industry and located {{at a depth of}} 110 m in the Western Approaches to the English Channel. The 1 ft-long object is {{one half of}} a distinctive type of carpenter’s joint rule with a design that is characteristically English. The artifact is extremely rare and the earliest example found on a shipwreck. The very limited comparative examples on land suggest a possible date of manu-facture for the instrument between the 1660 s and 1690 s...|$|E
40|$|This paper makes a {{contribution}} to the calculational paradigm of program development, a paradigm in which programs are calculated from their specifications by applying meaning preserving transformations. It introduces program induction, a technique analogous to mathematical induction, and iteration folding, a refinement rule. Using program induction, a specification is decomposed into a base case and an inductive case and their solutions are sequentially composed to derive the final program. The iteration <b>folding</b> <b>rule</b> is applied to transform potentially infinite nested if statements into a while statement. Our technique and rule augment the existing repertoire of techniques and rules in the calculus of program refinement...|$|E
40|$|We {{consider}} {{the problem of}} determining the three-dimensional folding of a protein given its one-dimensional amino acid sequence, We use the HP model for protein fold-ing proposed by Dill [3], which models protein aa a chain of amino acid residues that are either hydrophobic or po-lar, and hydrophobic interactions are the dominant initial driving force for the protein folding. Hart and Istrail [5] gave approximation algorithms for folding proteins on the cubic lattice under HP model. In this paper, we examine {{the choice of a}} lattice by considering ite algorithmic and geomet-ric implicationa and argue that triangnhu lattice ie a more reasonable choice. We present a set of <b>folding</b> <b>rules</b> for a tri-angular lattice and analyze the approximation ratio which they achieve. In addition, we introduce a generaliaation of the HP model to account for residues having different level...|$|R
40|$|We {{address the}} problem of specializing a {{constraint}} logic program w. r. t. a constrained atom which specifies the context of use of the program. We follow an approach based on transformation rules and strategies. We introduce a novel transformation rule, called contextual constraint replacement, to be combined with variants of the traditional unfolding and <b>folding</b> <b>rules.</b> We present a general Partial Evaluation Strategy for automating the application of these rules, and two additional strategies: the Context Propagation Strategy which is instrumental for the application of our contextual constraint replacement rule, and the Invariant Promotion Strategy for taking advantage of invariance properties of the computation. We show through some examples the power of our method and we compare it with existing methods for partial deduction of constraint logic programs based on extensions of Lloyd and Shepherdson's approach...|$|R
40|$|Abstract. In {{this paper}} we present an {{overview}} of the unfold/fold proof method, a method for prov-ing theorems about programs, based on program transformation. As a metalanguage for specifying programs and program properties we adopt constraint logic programming (CLP), and we present a set of transformation rules (including the familiar unfolding and <b>folding</b> <b>rules)</b> which preserve the semantics of CLP programs. Then, we show how program transformation strategies can be used, similarly to theorem proving tactics, for guiding the application of the transformation rules and inferring the properties to be proved. We work out three examples: (i) the proof of predicate equiv-alences, applied to the verification of equality between CCS processes, (ii) the proof of first order formulas via an extension of the quantifier elimination method, and (iii) the proof of temporal prop-erties of infinite state concurrent systems, by using a transformation strategy that performs program specialization...|$|R
40|$|A formal {{specification}} can describe software models which {{are difficult to}} program. Transformational methods based on fold/unfold strategies have been proposed to palliate this problem. The objective of applying transformations is to filter out {{a new version of}} the specification where recursion may be introduced by a folding step. Among many problems, the "eureka" about when and how to define a new predicate is difficult to find automatically. We propose {{a new version of the}} <b>folding</b> <b>rule</b> which decides automatically how to introduce new predicates in a specification. Our method is based on finding similarities between formulas represented as parsing trees and it constitutes an assistance to the complex problem of deriving recursive specifications from non recursive ones...|$|E
40|$|We {{present a}} goal {{replacement}} rule whose main applicability condition {{is based on}} termination properties of the resulting transformed program. The goal replacement rule together with a multi-step unfolding rule forms a powerful and elegant transformation system for definite programs. It also sheds {{new light on the}} relationship between folding and goal replacement, and between different folding rules. Our explicit termination condition contrasts with other transformation systems in the literature, which contain conditions on folding and goal replacement, often rather complex, in order to avoid "introducing a loop" into a program. We prove that the goal replacement rule preserves the success set of a definite program. We define an extended version of goal replacement that also preserves the finite failure set. A powerful <b>folding</b> <b>rule</b> can be constructed as a special case of goal replacement, allowing folding with recursive rules, with no distinction between old and new predicates. A pro [...] ...|$|E
40|$|We {{show how}} the problem of verifying {{parameterized}} systems {{can be reduced to}} the problem of determining the equivalence of goals in a logic program. We further show how goal equivalences can be established using induction-based proofs. Such proofs rely on a powerful new theory of logic program transformations (encompassing unfold, fold and goal replacement transformations). We present this theory of logic program transformations which in particular, allows a more general <b>folding</b> <b>rule</b> (as compared to the state of the art). We show how our more general transformations are useful for constructing verification proofs of parameterized systems. Moreover these verification proofs can be largely automated, and are applicable to a variety of network topologies, including uni- and bi-directional chains, rings, and trees of processes. Unfold transformations in our system correspond to algorithmic model-checking steps, fold and goal replacement correspond to deductve steps. All three types of transfo [...] ...|$|E
40|$|In {{the past}} decades, a {{significant}} number of studies on the prediction of protein 3 D tertiary structures have been extensively made. However, the <b>folding</b> <b>rules,</b> the core issue of protein structure prediction, still stay unsolved. Given a target protein with its primary amino acid sequence, the protein backbone structure prediction (PSP) problem is to construct the 3 D coordinates of α-carbon atoms on the backbone. We propose a hybrid method by combining the homology model and the folding approach to solve the PSP problem. Our idea of protein folding is performed on the combined sliced cubic lattice, which mixes coarse lattices with fine lattices. Our computation is based on the HP (Hydrophobic-Polar) model, combined with the constraint of disulfide bonds. The folding is optimized by using the ant colony optimization (ACO) algorithm. Our experimental results show that our prediction accuracy is better than previous methods by the measurement of RMSD. Key words: bioinformatics, protein backbone...|$|R
40|$|We {{consider}} {{the problem of}} determining the threedimensional folding of a protein given its one-dimensional amino acid sequence. We use the HP model for protein folding proposed by Dill [3], which models protein as a chain of amino acid residues that are either hydrophobic or polar, and hydrophobic interactions are the dominant initial driving force for the protein folding. Hart and Istrail [5] gave approximation algorithms for folding proteins on the cubic lattice under HP model. In this paper, we examine {{the choice of a}} lattice by considering its algorithmic and geometric implications and argue that triangular lattice is a more reasonable choice. We present a set of <b>folding</b> <b>rules</b> for a triangular lattice and analyze the approximation ratio which they achieve. In addition, we introduce a generalization of the HP model to account for residues having different levels of hydrophobicity. After describing the biological foundation for this generalization, we show that in the new model we ar [...] ...|$|R
40|$|Abstract: DNA can {{be divided}} {{functionally}} into three categories: (1) genes, which code for proteins or specify non-messenger RNAs; (2) semons, short specific sequences involved in the replication, segregation, recombination or specific attachments of chromosomes, or chromosome regions (e. g. loops or domains) or selfish genetic elements; (3) secondary DNA which does not function by means of specific sequences. Probably more than 90 % of DNA in the biosphere is secondary DNA in the nuclei of plants and phytoplankton. The amount of genic DNA {{is related to the}} complexity of the organism, whereas the amount of secondary DNA increases proportionally with cell volume, not with complexity. This correlation is most simply explained by the skeletal DNA hypothesis, according to which nuclear DNA functions as the basic framework for the assembly of the nucleus and the total genomic DNA content functions (together with relatively invariant <b>folding</b> <b>rules)</b> in determining nuclear volumes. Balanced growth during the cell cycle requires that the cytonuclear ratio is basically constant irrespective of cell volume; thus nuclea...|$|R
40|$|Evolutionary {{strategies}} depend onthe ability ofevolving entities {{to conserve}} acquired features and to quickly adapt to new requirements as well. We use computer simulations of simpli ed exact biopolymers models {{to investigate the}} in uence of mutations on structure formation. Our computations on large ensembles of random RNA secondary structures showthatthe sequence to structure mappingisideally suited for evolutionary optimisation under pointmutations: from anyrandom structure it is not far to anytarget and yet most mutations will preserve the structure. The aim {{of this paper is}} to discuss the analogies as well as some recently developed methods to apply our approach to proteins: there we useDill'sHP-model of lattice proteins and apply a novel fast and e cient <b>folding</b> <b>rule.</b> There are remarkable similarities as both landscapes are rugged and structure formation largely depends on local interactions such that it is possible to accomplish a characterisation of the mapping similar to the RNA case. ...|$|E
40|$|Abstract. We {{present a}} goal {{replacement}} rule whose main applicability condition {{is based on}} termination properties of the resulting transformed program. The goal replacement rule together with a multi-step unfolding rule forms a powerful and elegant transformation system for definite programs. It also sheds {{new light on the}} relationship between folding and goal replacement, and between different folding rules. Our explicit termination condition contrasts with other transformation systems in the literature, which contain conditions on folding and goal replacement, often rather complex, in order to avoid “introducing a loop ” into a program. We prove that the goal replacement rule preserves the success set of a definite program. We define an extended version of goal replacement that also preserves the finite failure set. A powerful <b>folding</b> <b>rule</b> can be constructed as a special case of goal replacement, allowing folding with recursive rules, with no distinction between old and new predicates. A proof that Seki’s transformation system preserves recurrence, an important termination property, is outlined. ...|$|E
40|$|Folding of the {{triangular}} lattice in a discrete three-dimensional space is investigated {{by means of}} the transfer-matrix method. This model was introduced by Bowick and co-workers as a discretized version of the polymerized membrane in thermal equilibrium. The <b>folding</b> <b>rule</b> (constraint) is incompatible with the periodic-boundary condition, and the simulation has been made under the open-boundary condition. In this paper, we propose a modified constraint, which is compatible with the periodic-boundary condition; technically, the restoration of translational invariance leads to a substantial reduction of the transfer-matrix size. Treating the cluster sizes L < 7, we analyze the singularities of the crumpling transitions {{for a wide range of}} the bending rigidity K. We observe a series of the crumpling transitions at K= 0. 206 (2), - 0. 32 (1), and - 0. 76 (10). At each transition point, we estimate the latent heat as Q= 0. 356 (30), 0. 08 (3), and 0. 05 (5), respectively...|$|E
40|$|We {{consider}} a simple extension of logic programming where variables may range over goals and goals may be arguments of predicates. In this language we can write logic programs which use goals as data. We give practical evidence that, by exploiting this capability when transforming programs, {{we can improve}} program efficiency. We propose a set of program transformation rules which extend the familiar unfolding and <b>folding</b> <b>rules</b> and allow us to manipulate clauses with goals which occur as arguments of predicates. In order to prove the correctness of these transformation rules, we formally define the operational semantics of our extended logic programming language. This semantics is a simple variant of LD-resolution. When suitable conditions are satisfied this semantics agrees with LD-resolution and, thus, the programs written in our extended language can be run by ordinary Prolog systems. Our transformation rules are shown to preserve the operational semantics and termination. Comment: 51 pages. Full version of a paper that will appear in Theory and Practice of Logic Programming, Cambridge University Press, U...|$|R
40|$|Different {{chemical}} and mutational processes within genomes {{give rise to}} sequences with different compositions and perhaps different capacities for evolution. The evolution of functional RNAs may occur on a “neutral network” in which sequences with any given function can easily mutate to sequences with any other. This neutral network hypothesis is more likely {{if there is a}} particular region of composition that contains sequences that are functional in general, and if many different functions are possible within this preferred region of composition. We show that sequence preferences in active sites recovered by in vitro selection combine with biophysical <b>folding</b> <b>rules</b> to support the neutral network hypothesis. These simple active-site specifications and folding preferences obtained by artificial selection experiments recapture the previously observed purine bias and specific spread along the GC axis of naturally occurring aptamers and ribozymes isolated from organisms, although other types of RNAs, such as miRNA precursors and spliceosomal RNAs, that act primarily through complementarity to other amino acids do not share these preferences. These universal evolved sequence features are therefore intrinsic in RNA molecules that bind small-molecule targets or catalyze reactions...|$|R
40|$|RNA {{secondary}} structures with pseudoknots {{are often}} predicted by minimizing free energy, which is NP-hard. Most RNAs fold during transcription from DNA into RNA through a hierarchical pathway wherein secondary structures form prior to tertiary structures. Real RNA secondary structures often have local instead of global optimization because of kinetic reasons. The performance of RNA structure prediction may {{be improved by}} considering dynamic and hierarchical folding mechanisms. This study is a novel report on RNA folding that accords with the golden mean characteristic based on the statistical analysis of the real RNA secondary structures of all 480 sequences from RNA STRAND, which are validated by NMR or X-ray. The length ratios of domains in these sequences are approximately 0. 382 L, 0. 5 L, 0. 618 L, and L, where L is the sequence length. These points are just the important golden sections of sequence. With this characteristic, an algorithm is designed to predict RNA hierarchical structures and simulate RNA folding by dynamically folding RNA structures {{according to the above}} golden section points. The sensitivity and number of predicted pseudoknots of our algorithm are better than those of the Mfold, HotKnots, McQfold, ProbKnot, and Lhw-Zhu algorithms. Experimental results reflect the <b>folding</b> <b>rules</b> of RNA from a new angle that is close to natural folding...|$|R
