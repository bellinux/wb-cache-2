3|127|Public
2500|$|The default IEEE 754 {{exception}} handling behaviour of resumption following pre-substitution of a default value avoids the risks inherent in changing flow of program control on numerical exceptions. For example, in 1996 the maiden {{flight of the}} Ariane 5 (Flight 501) ended in a catastrophic explosion {{due in part to}} the Ada programming language {{exception handling}} policy of aborting computation on arithmetic error, which in this case was a 64-bit floating point to 16-bit integer conversion overflow. In the Ariane Flight 501 case, the programmers protected only four out of seven critical variables against overflow due to concerns about the computational constraints of the on-board computer and relied on what turned out to be incorrect assumptions about the possible range of values for the three unprotected variables because they reused code from the Ariane 4, for which their assumptions were correct. According to William Kahan, the loss of Flight 501 would have been avoided if the IEEE 754 exception-handling policy of default substitution had been used because the overflowing 64-bit to 16-bit conversion that caused the software to abort occurred in a piece of code that turned out to be completely unnecessary on the Ariane 5. The official report on the crash (conducted by an inquiry board headed by Jacques-Louis Lions) noted that [...] "An underlying theme in the development of Ariane 5 is the bias towards the mitigation of random failure. The supplier of the inertial navigation system (SRI) was only following the specification given to it, which stipulated that in the event of any <b>detected</b> <b>exception</b> the processor was to be stopped. The exception which occurred was not due to random failure but a design error. The exception was detected, but inappropriately handled because the view had been taken that software should be considered correct until it is shown to be at fault. [...] Although the failure was due to a systematic software design error, mechanisms can be introduced to mitigate this type of problem. For example the computers within the SRIs could have continued to provide their best estimates of the required attitude information. There is reason for concern that a software exception should be allowed, or even required, to cause a processor to halt while handling mission-critical equipment. Indeed, the loss of a proper software function is hazardous because the same software runs in both SRI units. In the case of Ariane 501, this resulted in the switch-off of two still healthy critical units of equipment." ...|$|E
40|$|Abstract. We {{propose a}} {{methodology}} to revise a Description Logic knowledge base when detecting exceptions. Our approach {{relies on the}} methodology for debugging a Description Logic terminology, addressing the problem of diagnosing incoherent ontologies by identifying a mini-mal subset of axioms responsible for an inconsistency. In the approach we propose, once {{the source of the}} inconsistency has been localized, the identified axioms are revised in order to obtain a consistent knowledge base including the <b>detected</b> <b>exception.</b> To this aim, we make use of a non-monotonic extension of the Description Logic ALC based on the com-bination of a typicality operator and the well established nonmonotonic mechanism of rational closure, which allows to deal with prototypical properties and defeasible inheritance. ...|$|E
40|$|Abstract. Exceptions occur {{frequently}} in supply-chains. Consequently, <b>detecting</b> <b>exceptions</b> timely {{is of great}} practical value. To enable a timely detection of exceptions, this paper develops an agent-based model for supply-chains. The participants are modeled as autonomous agents that can reason about their interactions and communicate with other agents. The communications of the agents create and manipulate commitments. Violation of commitments leads to exceptions. We provide two methods for detecting such violations. First one uses an AND/OR tree to break down a commitment into smaller commitments and to decide on violation when sub parts of a commitment are violated. The second one uses an ontology to predict if a commitment {{is going to be}} violated. Using both approaches jointly, we can <b>detect</b> <b>exceptions</b> in a timely manner. ...|$|R
5000|$|<b>Detecting</b> runtime <b>exceptions</b> {{by means}} of {{symbolic}} code execution, for Java only ...|$|R
40|$|The EPCIS {{specification}} {{provides an}} event oriented mechanism to record product movement information across stakeholders in supply chain business processes. Besides enabling {{the sharing of}} event-based traceability datasets, track and trace implementations must also be equipped with the capabilities to validate integrity constraints and <b>detect</b> runtime <b>exceptions</b> without compromising the time-to-deliver schedule of the shipping and receiving parties. In this paper we present a methodology for <b>detecting</b> <b>exceptions</b> arising during the processing of EPCIS event datasets. We propose an extension to the EEM ontology for modelling EPCIS exceptions and show how runtime <b>exceptions</b> can be <b>detected</b> and reported. We exemplify and evaluate our approach on an abstraction of pharmaceutical supply chains...|$|R
50|$|Verix {{developed}} a proprietary technology for ETL and data analysis {{based on the}} statistical, mathematical, machine learning, and bioinformatics fields. Large amounts of data from {{both internal and external}} data sources are analyzed, and algorithms applied to identify outliers, statistically significant anomalies, in the intersections between data sets. Verix performs automatic segmentation of the <b>detected</b> <b>exceptions,</b> known as Intelligent Business Alerts (Hotspots), then analyzes the business drivers attributed to the phenomena. Verix users are alerted to the Hotspots and probable causes, and can use the software to investigate further and make business decisions.|$|R
40|$|Abstract: Business {{processes}} {{managed by}} information systems rarely {{operate according to}} the pre defined scenario. Exceptions to the pre defined workflows occur frequently. This especially applies to the production processes, which are very complex and require a constant human involvement. Workflow management systems should be capable of responding adequately to the exceptions caused by the process environment. Moreover, the response should be automatic, if possible, i. e. the workflow should automatically adapt to the new situation, or otherwise, the system administrator should be informed, {{so that he could}} take appropriate actions. This paper presents workflow management system MD, which is capable of offering a satisfying solution to the <b>detected</b> <b>exceptions...</b>|$|R
40|$|Logistics {{consists}} of a complex network of organizations and processes where exception monitoring is critical {{for the success of}} logistics service. In order to <b>detect</b> <b>exceptions</b> effectively, exception monitoring requires proper understanding of the possible exceptions. However, the extant exception monitoring approaches or systems still lack sufficient emphasis in exceptions understanding. This paper presents a novel outbound logistics exception monitoring approach by incorporating multi-perspective ontologies and intelligent agents. Specially, the multi-perspective ontologies, involving static ontology, social ontology and dynamic ontology, are firstly employed to develop the taxonomy of the logistics exception, to reflect the situation dependencies of logistics exception and to represent the dynamic nature of business processes. From this point forwards, an outbound exception monitoring system is designed by introducing multi-intelligent agents, which can ensure autonomous, flexible, and collaborative exception monitor in logistics service. Finally, the presented approach and designed system are exhibited through a case study of two ubiquitous logistics exceptions, which indicates that the proposed multi-perspective ontologies provide better understanding of exceptions thereby enabling the designed outbound exception monitoring system to perform well...|$|R
40|$|Continuous Auditing (CA) {{has been}} {{investigated}} over time and it is, somewhat, in practice within nancial and transactional auditing {{as a part of}} continuous assurance and monitoring. Enterprise Information Systems (EIS) that run their activities in the form of processes require continuous auditing of a process that invokes the action(s) speci ed in the policies and rules in a continuous manner and/or sometimes in real-time. This leads to the question: How much could continuous auditing mimic the actual auditing procedures performed by auditing professionals? We investigate some of these questions through Continuous Process Auditing (CPA) relying on heterogeneous activities of processes in the EIS, as well as <b>detecting</b> <b>exceptions</b> and evidence in current and historic databases to provide audit assurance...|$|R
40|$|Many {{excepting}} instructions {{cannot be}} removed by exist-ing Partial Redundancy Elimination (PRE) algorithms be-cause the ordering constraints must be preserved between the excepting instructions, {{which we call}} exception depen-dencies. In this work, we propose Sentinel PRE, a PRE al-gorithm that overcomes exception dependencies and retains program semantics. Sentinel PRE first hoists excepting in-structions without considering exception dependencies, and then <b>detects</b> <b>exception</b> reordering by fast analysis. If an ex-ception occurs at a reordered instruction, it deoptimizes the code into the one before hoisting. Since we rarely encounter exceptions in real programs, the optimized code is executed in almost all cases. We implemented Sentinel PRE in a Java just-in-time compiler and conducted experiments. The re-sults show 9. 0 % performance improvement in the LU pro-gram in the Java Grande Forum Benchmark Suite. 1...|$|R
40|$|Anti-patterns and code-smells {{are signs}} in the source code which are not defects (does not prevent the program from {{functioning}} and does not cause compile errors) and are rather indicators of deeper and bigger problems. Exception handling is a programming construct de- signed to handle the occurrence of anomalous or exceptional conditions (that changes the normal flow of program execution). In this paper, we present an Eclipse plug-in (called as Parichayana) for <b>detecting</b> <b>exception</b> handling anti-patterns and code smells in Java programs. Parichayana is capable of automatically detecting several commonly occurring excep- tion handling programming mistakes. We extend the Eclipse IDE and create new menu entries and associated action via the Parichayana plug- in (free and open-source hosted on GitHub). We compare and contrast Parichayana with several code smell detection tools and demonstrate that our tool provides unique capabilities in context to existing tools. We have created an update site and developers can use the Eclipse up- date manager to install Parichayana from our site. We used Parichyana on several large open-source Java based projects and <b>detected</b> presence of <b>exception</b> handling anti-patternsComment: Tools Demo Paper (paper provides links to the video demo and source code...|$|R
40|$|This paper {{presents}} a static analysis that estimates uncaught exceptions in multithreaded Java programs. In Java, throwing exceptions across threads is deprecated {{because of the}} safety problem. Instead of restricting programmers' freedom, we extend Java language to support multithreaded exception handling and propose a tool to <b>detect</b> uncaught <b>exceptions</b> in the input programs...|$|R
40|$|Abstract. The {{proliferation}} of interconnected computing devices is fostering {{the emergence of}} environments where Web services made available to mobile users are a commodity. Unfortunately, inherent limitations of mobile devices still hinder the seamless access to Web services, and their use in supporting complex user activities. In this paper, we describe the design and implementation of a distributed, adaptive, and context-aware framework for personalized service composition and provisioning adapted to mobile users. Users specify their preferences by annotating existing process templates, leading to personalized service-based processes. To cater {{for the possibility of}} low bandwidth communication channels and frequent disconnections, an execution model is proposed whereby the responsibility of orchestrating personalized processes is spread across the participating services and user agents. In addition, the execution model is adaptive {{in the sense that the}} runtime environment is able to <b>detect</b> <b>exceptions</b> and react to them according to a set of rules. ...|$|R
40|$|In {{this paper}} we present the first {{exception}} analysis for a non-strict language. We augment a simply-typed functional language with exceptions, {{and show that}} we can define a type-based inference system to <b>detect</b> uncaught <b>exceptions.</b> We have implemented this exception analysis in the GHC compiler for Haskell, which has been recently extended with exceptions. We give empirical evidence that the analysis is practical...|$|R
30|$|Fuzzing (Sutton et al. 2007) is {{currently}} the most popular vulnerability discovery technique. Fuzzing was first proposed by Barton Miller at the University of Wisconsin in 1990 s. Conceptually, a fuzzing test starts with generating massive normal and abnormal inputs to target applications, and try to <b>detect</b> <b>exceptions</b> by feeding the generated inputs to the target applications and monitoring the execution states. Compared with other techniques, fuzzing is easy to deploy and of good extensibility and applicability, and could be performed {{with or without the}} source code. Besides, as the fuzzing test is performed in the real execution, it gains a high accuracy. What’s more, fuzzing requires few knowledge of target applications and could be easily scaled up to large scale applications. Though fuzzing is faced with many disadvantages such as low efficiency and low code coverage, however, outweighed the bad ones, fuzzing has become the most effective and efficient state-of-the-art vulnerability discovery technique currently.|$|R
40|$|Diagnosing {{exceptions}} in multi-agent systems (MAS) is {{a complex}} task due to the distributed nature of the data and control in such systems. This complexity is exacerbated in open environments where independently developed autonomous agents {{interact with each other}} in order to achieve their goals. Inevitably, exceptions would occur in such MAS and these exceptions can arise at one of three levels, namely environmental, knowledge and social levels. In this paper we propose a novel exception diagnosis system that is able to analyse and <b>detect</b> <b>exceptions</b> effectively. The proposed architecture consists of specialised exception diagnosis agents called sentinel agents. The sentinel agents are equipped with knowledge of observable abnormal situations, their underlying causes, and resolution strategies associated with these causes. The sentinel agent applies a heuristic classification approach to collect related data from affected agents in order to uncover the underlying causes of the observed symptoms. We illustrate and evaluate our proposed architecture using an agent-based grid computing case study...|$|R
50|$|Event Management, {{as defined}} by ITIL, is the process that {{monitors}} all events that occur through the IT infrastructure. It allows for normal operation and also <b>detects</b> and escalates <b>exception</b> conditions.|$|R
40|$|The {{original}} publication {{is available}} at www. springerlink. comThe proliferation of interconnected computing devices is fostering the emergence of environments where Web services made available to mobile users are a commodity. Unfortunately, inherent limitations of mobile devices still hinder the seamless access to Web services, and their use in supporting complex user activities. In this paper, we describe the design and implementation of a distributed, adaptive, and context-aware framework for personalized service composition and provisioning adapted to mobile users. Users specify their preferences by annotating existing process templates, leading to personalized service-based processes. To cater {{for the possibility of}} low bandwidth communication channels and frequent disconnections, an execution model is proposed whereby the responsibility of orchestrating personalized processes is spread across the participating services and user agents. In addition, the execution model is adaptive {{in the sense that the}} runtime environment is able to <b>detect</b> <b>exceptions</b> and react to them according to a set of rules. Quan Z. Sheng, Boualem Benatallah, Zakaria Maamar, Marlon Dumas and Anne H. H. Ng...|$|R
40|$|Abstract—Open multiagent systems {{consist of}} {{autonomous}} agents that are built by different vendors. In principle, open multiagent systems cannot provide any guarantees about {{the behaviors of}} their agents. This means that when agents are working together, such as carrying out a business protocol, one agent’s misbehavior may potentially create an exception for another agent and obstruct its proper working. Faced with such an exception, an agent {{should be able to}} identify the problem by verifying the compliance of other agents. Previous work on verification of protocols unrealistically assume that participants have full knowledge of a protocol. However, when multiple agents enact a protocol, each agent has access to its part of the protocol and not more. This will require agents to check verification by querying others and more importantly by discovering the contracts between them. Here, we propose a commitment-based framework for <b>detecting</b> <b>exceptions</b> in which an agent augments its part of the protocol with its knowledge to construct states that are previously hidden to the agent by generating possible commitments between other agents. The agent then queries others to confirm those states. Our framework is formalized using C+ and is tested using a realistic business scenario. I...|$|R
40|$|Abstract In {{this paper}} we present the first {{exception}} analysis for a non-strictlanguage. We augment a simply-typed functional language with exceptions, {{and show that}} we can define a type-based inference sys-tem to <b>detect</b> uncaught <b>exceptions.</b> We have implemented this exception analysis in the GHC compiler for Haskell, which has beenrecently extended with exceptions. We give empirical evidence that the analysis is practical. Categories and Subject Descriptors D. 3. 2 [Programming Languages]: Language Classifications [...] Applicative (functional) languages; F. 3. 2 [Logics and Meaning...|$|R
40|$|During a {{manufacturing}} operation, exceptions may occur dynamically and unpredictably. Their occurrence {{may lead to}} the degradation of system performance or, in the worst case scenario may interrupt the production process by causing errors in the schedule plan. This paper classifies three families of exceptions: (1) out-of-order events such as machine breakdowns, (2) operational out-of-ordinary events such as rush orders and (3) deteriorations of manufacturing resource performance such as reductions of machines' utilization. In all cases, in order to maintain an adequate level of system performance, it is necessary to <b>detect</b> <b>exceptions,</b> to diagnose them quickly and to recover them by taking corrective actions to avoid fault propagations. Decisions concerning how to deal with exceptions, i. e. which strategy to implement, depend on the manufacturing environment (dedicated line, flexible system, reconfigurable system or a mix of them) and the advantages arising from using a certain exception handling policy vary from one production system to another. The activity of reconfiguring manufacturing resources has been demonstrated to be a powerful operation strategy to handle machine breakdowns. This paper extends the concept of 'reconfiguration for exception handling' to other families of exceptions and proposes reconfiguration for their recovery. The reconfiguration process is handled by an agent-based control system that implements four negotiation processes among manufacturing resource agents...|$|R
40|$|Abstract In this paper, {{we first}} present a static analysisbased on set-based framework, which {{estimates}} exception propagation paths of Java programs. We constructan exception propagation graph from the static analysis information, {{which includes the}} origin of exceptions,handler of exceptions, and propagation paths of exceptions. We have implemented the exception propagationanalysis and a visualization tool which visualizes propagation paths of exceptions using the exception propa-gation graph. This propagation information can guide programmers to <b>detect</b> uncaught <b>exceptions,</b> handle ex-ceptions more specifically, and put exception handlers at appropriate places by tracing exception propagation...|$|R
40|$|A major {{objective}} of combination toxicology {{is to establish}} whether a mixture of chemicals will result in an effect similar to that expected {{on the basis of}} additivity. This requires understanding of the basic concepts of the combined toxicological action of the compounds of the mixture: simple similar action (dose addition), simple dissimilar action (effect or response addition), and interaction (synergism, potentiation, antagonism). The number of possible combinations of chemicals is innumerable, and in vivo testing of these mixtures is unattainable from an ethical, economical, or pragmatic perspective. Prediction of the effect of a mixture based on the knowledge of each of the constituents requires detailed information on the composition of the mixture, exposure level, mechanism of action, and receptor of the individual compounds. Often, such information is not or is only partially available and additional studies are needed. Research strategies and methods to assess joint action or interaction of chemicals in mixtures such as whole mixture testing, physiologically based toxicokinetic modeling and isobologram and dose response surface analyses are discussed. Guidance is given for risk assessment of both simple and complex mixtures. We hypothesize that, as a rule, exposure to mixtures of chemicals at (low) non-toxic doses of the individual constituents is of no health concern. To verify the hypothesis is a challenge; to timely <b>detect</b> <b>exceptions</b> to the rule is the real challenge of major practical importance...|$|R
50|$|Insufficient {{labeling}} requirements. Consumer products {{generally are}} required to list ingredients, but not the quantities of each, which makes angel dusting difficult for the consumer to <b>detect.</b> A partial <b>exception</b> is {{in the area of}} food products, where some helpful ingredients, like vitamins, may have specific quantities listed, although others, like omega-3 fatty acids, may not.|$|R
40|$|It is {{well-known}} that floating-point exceptions can be disastrous and writing exception-free numerical programs is very difficult. Thus, {{it is important}} to automatically detect such errors. In this paper, we present Ariadne, a practical symbolic execution system specifically designed and implemented for <b>detecting</b> floating-point <b>exceptions.</b> Ariadne systematically transforms a numerical program to explicitly check each exception triggering condition. Ariadne symbolically executes the transformed program using real arithmetic to find candidate real-valued inputs that can reach and trigger an exception. Ariadne converts each candidate input into a floating-point number, then tests it against the original program. In general, approximating floating-point arithmetic with real arithmetic can change paths from feasible to infeasible and vice versa. The key insight of this work is that, for the problem of <b>detecting</b> floating-point <b>exceptions,</b> this approximation works well in practice because, if one input reaches an exception, many are likely to, and {{at least one of them}} will do so over both floating-point and real arithmetic. To realize Ariadne, we also devised a novel, practical linearization technique to solve nonlinear constraints. We extensively evaluated Ariadne over 467 scalar functions in the widely used GNU Scientific Library (GSL). Our results show that Ariadne is practical and identifies a large number of real runtime exceptions in GSL. The GSL developers confirmed our preliminary findings and look forward to Ariadne’s public release, which we plan to do in the near future...|$|R
40|$|This paper {{presents}} a static analysis that estimates uncaught exceptions in multithreaded Java programs. In Java, throwing exceptions across threads is deprecated {{because of the}} safety problem. Instead of restricting programmers' freedom, we extend Java language to support multithreaded exception handling and propose a tool to <b>detect</b> uncaught <b>exceptions</b> in the input programs. Our analysis consists of two steps. The analysis firstly estimates concurrently evaluated expressions of the multithreads in Java programs by the synchronization relation among the threads. Using this concurrency information, program's exception flow is derived as set-constraints, whose least model is our analysis result. Both of these two steps are proved safe...|$|R
40|$|A {{census of}} α-helical {{membrane}} proteins in double-stranded DNA viruses infecting bacteria and archaea David M. Kristensen 1, 4 *, Usman Saeed 2, 3, Dmitrij Frishman 2, 3 and Eugene V. Koonin 1 Background: Viruses {{are the most}} abundant and genetically diverse biological entities on earth, yet the repertoire of viral proteins remains poorly explored. As the number of sequenced virus genomes grows into the thousands, {{and the number of}} viral proteins into the hundreds of thousands, we report a systematic computational analysis of the point of first-contact between viruses and their hosts, namely viral transmembrane (TM) proteins. Results: The complement of α-helical TM proteins in double-stranded DNA viruses infecting bacteria and archaea reveals large-scale trends that differ from those of their hosts. Viruses typically encode a substantially lower fraction of TM proteins than archaea or bacteria, with the notable exception of viruses with virions containing a lipid component such as a lipid envelope, internal lipid core, or inner membrane vesicle. Compared to bacteriophages, archaeal viruses are substantially enriched in membrane proteins. However, this feature is not always stable throughout the evolution of a viral lineage; for example, TM proteins {{are not part of the}} common heritage shared between Lipothrixviridae and Rudiviridae. In contrast to bacteria and archaea, viruses almost completely lack proteins with complicated membrane topologies composed of more than 4 TM segments, with the few <b>detected</b> <b>exceptions</b> being obvious cases of relatively recent horizontal transfer from the host. Conclusions: The dramatic differences between the membrane proteomes of cells and viruses stem from the fact that viruses do not depend on essential membranes for energy transformation, ion homeostasis, nutrient transport and signaling...|$|R
3000|$|... allele, {{characterized}} by a non-conservative A/C mutation in exon 6, was observed with the A allele being <b>detected,</b> with few <b>exceptions,</b> in accessions with AAC ranging from waxy to 22 % and higher than 24 %, and the C allele generally present in genotypes with an AAC from 22 to 24 % (Table  1). No polymorphisms were identified in exons 4 and 5, representative of the Wx [...]...|$|R
5000|$|VeriFlux is {{a formal}} methods based static {{analysis}} tool for programs written in Java. It is optimized {{for use with}} JamaicaVM, but {{can be used for}} any Java program. It can <b>detect</b> uncaught runtime <b>exceptions,</b> including RTSJ exceptions, and possible deadlocks in code using Java synchronization features. It has also been used for resource analysis. [...] It can be used for both full program analysis and partial program analysis.|$|R
40|$|Current JDK Java {{compiler}} {{relies on}} programmer's declarations (by throws clauses) for checking against uncaught exceptions of the input program. It is not elaborate enough to remove programmer's unnecessary handlers nor suggest to programmers for specialized handlings (when programmer's declarations are too broad). We propose a static analysis of Java programs that estimates their uncaught exceptions {{independently of the}} programmer's declarations. This analysis is designed and implemented based on set-based framework. Its cost-eectiveness is suggested by sparsely analyzing the program at method-level (hence {{reducing the number of}} unknowns in the ow equations). We have shown that our interprocedural exception analysis is more precise than JDK-style intraprocedural analysis, and also that our analysis can eectively <b>detect</b> uncaught <b>exceptions</b> for realistic Java programs...|$|R
40|$|The {{problem of}} an ageing {{population}} has become serious {{in the past}} few years as the degeneration of various physiological functions has resulted in distinct chronic diseases in the elderly. Most elderly are not willing to leave home for healthcare centers, but caring for patients at home eats up caregiver resources, and can overwhelm patients’ families. Besides, a lot of chronic disease symptoms cause the elderly to visit hospitals frequently. Repeated examinations not only exhaust medical resources, but also waste patients’ time and effort. To make matters worse, this healthcare system does not actually appear to be effective as expected. In response to these problems, a wireless remote home care system is designed in this study, where ZigBee is used to set up a wireless network for the users to take measurements anytime and anywhere. Using suitable measuring devices, users’ physiological signals are measured, and their daily conditions are monitored by various sensors. Being transferred through ZigBee network, vital signs are analyzed in computers which deliver distinct alerts to remind the users and the family of possible emergencies. The system could be further combined with electric appliances to remotely control the users’ environmental conditions. The environmental monitoring function can be activated to transmit in real time dynamic images of the cared to medical personnel through the video function when emergencies occur. Meanwhile, in consideration of privacy, the video camera would be turned on only when it is necessary. The caregiver could adjust the angle of camera to a proper position and observe the current situation of the cared when a sensor on the cared or the environmental monitoring system <b>detects</b> <b>exceptions.</b> All physiological data are stored in the database for family enquiries or accurate diagnoses by medical personnel...|$|R
50|$|Shrinkage {{in retail}} that {{is caused by}} {{employee}} actions typically occurs {{at the point of}} sale (POS) terminal. There are different ways to manipulate a POS system, such as a cashier giving customers unauthorized discounts, creating fraudulent returns, or simply removing cash from the register. These transactions that differ from normal transactions are called POS exceptions. Traditionally POS fraud is fought by surveillance staff monitoring a POS terminal or by manually searching in surveillance video recordings. Modern POS systems can have automatic alerts when specific <b>exceptions</b> are <b>detected.</b> Also <b>exception</b> reports and listings based on employees, refunds, price overrides, terminals etc. are possible to detect with modern systems. Modern networked based POS systems can also include network video to POS exception listings, giving quick access to detailed information of what has happened.|$|R
40|$|AbstractGround {{verification}} {{system is}} significant in aerospace engineering {{because it can}} verify the correctness and robustness of the entire system before spacecrafts are launched. Since expert system can <b>detect</b> errors or <b>exceptions</b> automatically, it is the core component of a verification system. As the data throughput in aerospace engineering is huge, and verification processing is complex, conventional serial expert system cannot satisfy the requirement in real-time processing. Therefore, in this paper, a High performance Distributed Expert System (HPDES) is proposed. Firstly, HPDES proposes a novel language, called CASES, for rule configuration, and then each rule is compiled into an intermediate code. This method allows rules to be added, deleted or modified dynamically. Secondly, {{in order to improve}} the performance to meet the requirement of real-time processing, Virtual Executable Environment (VEE) is proposed. VEE allows our expert system to run in parallel or distributed fashion. Thus, real-time processing capability is achieved by assigning different pattern detection tasks to different VEEs dynamically, which utilizes the power of modern parallel and distributed computer systems efficiently. Experiments in a real ground verification system shows that HPDES can <b>detect</b> errors and <b>exceptions</b> in the data stream from certain spacecraft efficiently...|$|R
30|$|Eleven {{out of the}} 12 most {{resistant}} genotypes with I* value < 27 {{carried the}} “A”-“C” combination at the two major loci <b>detected.</b> With the <b>exception</b> of the temperate japonica cvs. Bengal and Maioral, the other 10 genotypes belonged to the tropical japonica sub-population and were originating from the United States (5 accessions), Italy (4 accessions) and Brazil (1 accession). Sequences surrounding the SNPs associated to bakanae resistance on chromosomes 1 and 4 are provided in Additional file 6 : Figure S 5.|$|R
40|$|MASC (Manageable and Adaptive Service Compositions) 1 * is a policy-based {{middleware}} {{for monitoring}} and control of composite Web services execution. The monitorable requirements are specified in the WS-Policy 4 MASC language that extends WS-Policy by defining new types of {{monitoring and control}} policy assertions. This paper focuses on MASC monitoring capabilities to <b>detect</b> business <b>exceptions</b> and runtime faults. Our solutions are complementary to the existing approaches and provide: synchronous and asynchronous monitoring both at the SOAP messaging layer and the process orchestration layer, greater diversity of monitoring and control constructs, {{as well as the}} externalization of monitoring and adaptation actions from definitions of business processes. We implemented a MASC proof-of-concept prototype and evaluated it on monitoring and adaptation scenarios from a stock trading case study. Our performance studies indicate that MASC overhead and scalability are acceptable. 1...|$|R
40|$|Table 2 : Scores by vowel stress. In general, less {{stressed}} vowels {{are more}} di cult to <b>detect.</b> The <b>exception</b> is lax vowels, which {{are easier to}} detect in context (because they are always followed by consonants). tigated performance without fricative detection. As expected, performance is very poor when using broadband intensity (third row of table 1, 34 % TER!), but much better when using F 1 intensity (fourth row of table 1, 14. 8 % TER). It appears that fricative detection o ers essentially no performance gain when using the F 1 frequency band. Therefore, all subsequent experiments were done using the F 1 band without fricative detection. Details of the detector's performance by vowel stress {{are shown in table}} 2. As one might expect, full vowels (tense and lax) are easier to detect than schwas or syllabic sonorants. Lax vowels are the mos...|$|R
