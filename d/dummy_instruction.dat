2|5|Public
40|$|Loop {{structures}} in software code may reveal essential information about implemented algorithms and their parameters, {{even if the}} observer has no knowledge about which instructions are executed. Regular patterns can for instance be observed in power consumption, instruction fetches in external memory, or radiated EM energy. This paper addresses the use of dummy operations to obscure {{the details of the}} algorithm executed by the processor. We show that for a particular class of dummy insertion strategies, a Viterbi decoder can fairly reliably distinguish dummy fetches from real instruction fetches. In the second part of this paper, we study strategies to choose dummy fetches from a more general model. For certain situations, the optimum protection strategy appears to be deterministic (as opposed to random). Moreover, we show that in such a case, it is fundamentally not possible to enhance the security of the implementation by keeping the strategy for generating dummy fetches secret to the attacker. Author Keywords: Software protection; Secure processor; Viterbi decoder; <b>Dummy</b> <b>instruction...</b>|$|E
40|$|The rapid {{increase}} {{in the use of}} embedded systems for performing secure transactions, has proportionally increased the security threats which are faced by such devices. Side channel attack, a sophisticated security threat to embedded devices like smartcards, mobile phones and PDAs, exploits the external manifestations like processing time, power consumption and electromagnetic emission to identify the internal computations. Power analysis attack, introduced by Kocher in 1998, is used by adversaries to eavesdrop on confidential data while the device is executing a secure transaction. The adversary observes the power trace dissipated/consumed by the chip during the encryption/decryption of the AES cryptographic program and predicts the secret key used for encryption by extracting necessary information from the power trace. Countermeasures proposed to overcome power analysis are data masking, table masking, current flattening, circuitry level solutions, <b>dummy</b> <b>instruction</b> insertions, balancing bit-flips, etc. All these techniques are either susceptible to multi-order side channel attacks, not sufficiently generic to cover all encryption algorithms, or burden the system with high area cost, run-time or energy consumption. The initial solution presented in this thesis is a HW/SW based randomised instruction injection technique, which infuses random instructions at random places during the execution of an application. Such randomisation obfuscates the secure information from the power profile, not allowing the adversary to extract the critical power segments for analysis. Further, the author devised a systematic method to measure the security level of a power sequence and used it to measure the number of random instructions needed, to suitably confuse the adversary. The proposed processor model costs 1. 9 % in additional area for a simplescalar processor, and costs on average 29. 8 % in runtime and 27. 1 % in additional energy consumption for six industry standard cryptographic algorithms. This design is extended to a processor architecture which automatically detects the execution of the most common encryption algorithms, starts to scramble the power waveform by adding randomly placed instructions with random register accesses, and stops injecting instructions when it is safe to do so. This approach has less overheads compared to previous solutions and avoids software instrumentation, allowing programmers with no special knowledge to use the system. The extended processor model costs an additional area of 1. 2 %, and an average of 25 % in runtime and 28. 5 % in energy overheads for industry standard cryptographic algorithms. Due to the possibility of removing random injections using large number of samples (due to the random nature, a large number of samples will eliminate noise), the author proposes a multiprocessor 'algorithmic' balancing technique. This technique uses a dual processor architecture where two processors execute the same program in parallel, but with complementary intermediate data, thus balancing the bitflips. The second processor works in conjunction with the first processor for balancing only when encryption is performed, and both processors carry out independent tasks when no encryption is being performed. Both DES and AES cryptographic programs are investigated for balancing and the author shows that this technique is economical, while completely preventing power analysis attacks. The signature detection unit to capture encryption is also utilised, which is used in the instruction injection approach. This multiprocessor balancing approach reduces performance by 0. 42 % and 0. 94 % for AES and DES respectively. The hardware increase is 2 X only when balancing is performed. Further, several future extensions for the balancing approach are proposed, by introducing random swapping of encryption iterations between cores. FPGA implementations of these processor designs are briefly described {{at the end of this}} thesis...|$|E
40|$|In this paper, {{we present}} a new method to protect {{software}} against illegal acts of hacking. The key idea is to add a mechanism of self-modifying codes to the original program, so that the original program becomes hard to be analyzed. In the binary program obtained by the proposed method, the original code fragments we want to protect are camouflaged by <b>dummy</b> <b>instructions.</b> Then, the binary program autonomously restores the original code fragments within {{a certain period of}} execution, by replacing the <b>dummy</b> <b>instructions</b> with the original ones. Since the <b>dummy</b> <b>instructions</b> are completely different from the original ones, code hacking fails if the <b>dummy</b> <b>instructions</b> are read as they are. Moreover, the <b>dummy</b> <b>instructions</b> are scattered over the program, therefore, they are hard to be identified. As a result, the proposed method helps to construct highly invulnerable software without special hardware. ...|$|R
40|$|Graduation date: 2009 The Advent of multi-cores allows {{programs}} {{to be executed}} much faster than before. Cryptoalgorithms use long-bit words thus parallelizing these operations on multi-cores will achieve significant performance improvement. However, not all long-bit word operations in cryptosystems are suitable for parallel execution on multi-cores. In particular, long-bit words used in Elliptic Curves Cryptography (ECC) do not efficiently divide by the system word size. This causes some of the cores to be idle, which makes it vulnerable for attackers to guess how many operations occurred and thus what field size is being used. Multiplication {{is the most important}} part of public key cryptosystems. Long-bit word multiplication operations are needed for encryption and decryption. J. Fan et al. proposed using Montgomery multiplication on multi-cores using GF(2 ²⁵⁶) [25, 26], which is suitable for comput-er systems with 16 -bit or 32 -bit word size. Fan‟s Montgomery multiplication is suitable for most RSA. However, in ECC, some GFs will cause idle cores. For example, suppose GF(2 ¹³¹) is used (which is one of the recommended word size by NIST) on a quad-core with a 32 -bit word size, which requires [132 / 32] = 5 iterations with the last iteration requiring just a 3 -bit operation. This cause three of the cores to be idle during this time causing needless power consumption. The most general and the easiest way to make side channel attacks difficult is to insert <b>dummy</b> <b>instructions</b> to cover the idle processors. However, <b>dummy</b> <b>instructions</b> result in extra workloads that lead to performance degradation and increases in power consumption. In this thesis, we will present a multiplier adjuster technique to improve the execution time and the power consumption for the last unbalanced iteration. By appropriately applying <b>dummy</b> <b>instructions</b> between point-addition and point-doubling operations, a balanced point operation can be achieved in ECC. The performance and power-efficiency of the proposed method on multi-cores are analyzed for each GF used in ECC...|$|R
40|$|We {{introduce}} a new approach for securing intellectual property in embedded software implementations by using the response of an implementation to fault injections. In our approach, the implementation serves as its own watermark that is recorded through its fault effects. There is no additional code for the watermark. A simulator that maps the fault injections to the executed instructions aids an automated characterization of program code. We provide a proof-of-concept implementation of our watermarking approach using an 8 -bit ATMega 163 microcontroller and several assembly implementations of AES encryption. The results show that our method is well-suited for detection of identical software copies. In addition, our method shows robust performance in detection of software copies {{with a large number}} of added <b>dummy</b> <b>instructions...</b>|$|R
40|$|Part 4 : Access Control and Data ProtectionInternational audienceWe {{introduce}} a new approach for securing intellectual property in embedded software implementations by using the response of an implementation to fault injections. In our approach, the implementation serves as its own watermark that is recorded through its fault effects. There is no additional code for the watermark. A simulator that maps the fault injections to the executed instructions aids an automated characterization of program code. We provide a proof-of-concept implementation of our watermarking approach using an 8 -bit ATMega 163 microcontroller and several assembly implementations of AES encryption. The results show that our method is well-suited for detection of identical software copies. In addition, our method shows robust performance in detection of software copies {{with a large number}} of added <b>dummy</b> <b>instructions...</b>|$|R
40|$|An easy-to-understand {{primer on}} {{advanced}} calculus topics Calculus II {{is a prerequisite}} for many popular college majors, including pre-med, engineering, and physics. Calculus II For <b>Dummies</b> offers expert <b>instruction,</b> advice, and tips to help second semester calculus students get a handle on the subject and ace their exams. It covers intermediate calculus topics in plain English, featuring in-depth coverage of integration, including substitution, integration techniques and when to use them, approximate integration, and improper integrals. This hands-on guide also covers sequences and series, wi...|$|R

