6431|8313|Public
25|$|MINTO (Mixed Integer Optimizer, an <b>integer</b> <b>programming</b> solver {{which uses}} {{branch and bound}} algorithm) has {{publicly}} available source code but is not open source.|$|E
25|$|Algebraic {{geometry}} {{now finds}} applications in statistics, control theory, robotics, error-correcting codes, phylogenetics and geometric modelling. There are also connections to string theory, game theory, graph matchings, solitons and <b>integer</b> <b>programming.</b>|$|E
25|$|A {{particularly}} fast {{method for}} exact BN learning is {{to cast the}} problem as an optimization problem, and solve it using <b>integer</b> <b>programming.</b> Acyclicity constraints {{are added to the}} integer program (IP) during solving in the form of cutting planes. Such method can handle problems with up to 100 variables.|$|E
40|$|<b>Integer</b> <b>programs</b> are a {{class of}} {{optimization}} problems that have traditionally been studied using techniques from polyhedral theory and linear algebra. Although these methods {{have proved to be}} very successful for linear programming and have contributed much to the understanding of <b>integer</b> <b>programs,</b> many questions regarding <b>integer</b> <b>programs</b> still remain. Recently, tools from commutative algebra and algebraic geometry have provided some new insights into the structure of <b>integer</b> <b>programs,</b> via the theory of Grobner bases. This lecture is intended to be a tour through the main results that have been obtained by studying <b>integer</b> <b>programs</b> from this algebraic point of view...|$|R
50|$|These {{branches}} {{are closely}} intertwined however since many combinatorial optimization {{problems can be}} modeled as <b>integer</b> <b>programs</b> (e.g. shortest path) and conversely, <b>integer</b> <b>programs</b> can often be given a combinatorial interpretation.|$|R
40|$|In {{this paper}} we generalize N-fold <b>integer</b> <b>programs</b> and {{two-stage}} <b>integer</b> <b>programs</b> with N scenarios to N-fold 4 -block decomposable <b>integer</b> <b>programs.</b> We show that for fixed blocks but variable N, these <b>integer</b> <b>programs</b> are polynomial-time solvable for any linear objective. Moreover, {{we present a}} polynomial-time computable optimality certificate for the case of fixed blocks, variable N and any convex separable objective function. We conclude with two sample applications, stochastic <b>integer</b> <b>programs</b> with second-order dominance constraints and stochastic integer multi-commodity flows, which (for fixed blocks) can be solved in polynomial time {{in the number of}} scenarios and commodities and in the binary encoding length of the input data. In the proof of our main theorem we combine several non-trivial constructions from the theory of Graver bases. We are confident that our approach paves the way for further extensions...|$|R
25|$|Möbius ladders {{have also}} been used in {{computer}} science, as part of <b>integer</b> <b>programming</b> approaches to problems of set packing and linear ordering. Certain configurations within these problems {{can be used to}} define facets of the polytope describing a linear programming relaxation of the problem; these facets are called Möbius ladder constraints.|$|E
25|$|On {{the other}} hand, there are {{enormous}} positive consequences {{that would follow}} from rendering tractable many currently mathematically intractable problems. For instance, many problems in operations research are NP-complete, such as some types of <b>integer</b> <b>programming</b> and the travelling salesman problem. Efficient solutions to these problems would have enormous implications for logistics. Many other important problems, such as some problems in protein structure prediction, are also NP-complete; if these problems were efficiently solvable it could spur considerable advances in life sciences and biotechnology.|$|E
25|$|The {{question}} of whether P equals NP {{is one of the}} most important open questions in theoretical computer science because of the wide implications of a solution. If the answer is yes, many important problems can be shown to have more efficient solutions. These include various types of <b>integer</b> <b>programming</b> problems in operations research, many problems in logistics, protein structure prediction in biology, and the ability to find formal proofs of pure mathematics theorems. The P versus NP problem is one of the Millennium Prize Problems proposed by the Clay Mathematics Institute. There is a US$1,000,000 prize for resolving the problem.|$|E
40|$|We {{consider}} N-fold 4 -block decomposable <b>integer</b> <b>programs,</b> which simultaneously generalize N-fold <b>integer</b> <b>programs</b> and two-stage stochastic <b>integer</b> <b>programs</b> with N scenarios. In {{previous work}} [R. Hemmecke, M. Koeppe, R. Weismantel, A polynomial-time algorithm for optimizing over N-fold 4 -block decomposable <b>integer</b> <b>programs,</b> Proc. IPCO 2010, Lecture Notes in Computer Science, vol. 6080, Springer, 2010, pp. 219 [...] 229], it was proved that for fixed blocks but variable N, these <b>integer</b> <b>programs</b> are polynomial-time solvable for any linear objective. We extend this result to the minimization of separable convex objective functions. Our algorithm combines Graver basis techniques with a proximity result [D. S. Hochbaum and J. G. Shanthikumar, Convex separable optimization {{is not much}} harder than linear optimization, J. ACM 37 (1990), 843 [...] 862], which allows us to use convex continuous optimization as a subroutine. Comment: 16 pages. arXiv admin note: substantial text overlap with arXiv: 0911. 405...|$|R
40|$|One of {{the most}} {{interesting}} research directions within the field of algorithmic mechanism design revolves the study of hard combinatorial optimization problems. In this setting, many common techniques, which are broadly used by approximation algorithms, cannot be utilized as they violate certain monotonicity properties that are imperative for truthfulness. Consequently, it seems of the essence to develop alternative algorithmic methods, which can underlie truthful mechanisms. In particular, since many hard optimization problems can be formulated as instances of <b>integer</b> linear <b>programs,</b> it seems that devising techniques that apply to <b>integer</b> linear <b>programs</b> is significantly important. This perception reinforces by the observation that one {{of the most}} general and efficient ways to approximately solve such programs, which is linear programming-based randomized rounding, generally fails to be monotone. In this paper, we focus our attention on packing <b>integer</b> <b>programs,</b> and packing <b>integer</b> <b>programs</b> with choices. Our main findings can be briefly summarized as follows: 1. We develop a framework, which can be used as a building block to approximately solve packing <b>integer</b> <b>programs</b> and packing <b>integer</b> <b>programs</b> with choices. The framework i...|$|R
50|$|The {{spectrum}} auction is {{a one-sided}} smart market which is cleared by an <b>integer</b> <b>program.</b> Participants purchase radio spectrum from government. These combinatorial auctions are cleared as bid, {{rather than at}} prices based on dual variables. Only recently have researchers found robust means to obtain dual variables from <b>integer</b> <b>programs.</b>|$|R
25|$|When {{searching for}} optimal {{solutions}} to a linear function bound to linear equality and inequality constraints, {{the constraints of}} the problem can be used directly in producing the optimal solutions. There are algorithms that can solve any problem in this category, such as the popular simplex algorithm. Problems that can be solved with linear programming include the maximum flow problem for directed graphs. If a problem additionally requires that {{one or more of the}} unknowns must be an integer then it is classified in <b>integer</b> <b>programming.</b> A linear programming algorithm can solve such a problem if it can be proved that all restrictions for integer values are superficial, i.e., the solutions satisfy these restrictions anyway. In the general case, a specialized algorithm or an algorithm that finds approximate solutions is used, depending on the difficulty of the problem.|$|E
2500|$|If all of {{the unknown}} {{variables}} are required to be integers, then the problem is called an <b>integer</b> <b>programming</b> (IP) or integer linear programming (ILP) problem. [...] In contrast to linear programming, which can be solved efficiently in the worst case, <b>integer</b> <b>programming</b> problems are in many practical situations (those with bounded variables) NP-hard. 0-1 <b>integer</b> <b>programming</b> or binary <b>integer</b> <b>programming</b> (BIP) is the special case of <b>integer</b> <b>programming</b> where variables are required to be 0 or 1 (rather than arbitrary integers). This problem is also classified as NP-hard, {{and in fact the}} decision version was one of Karp's 21 NP-complete problems.|$|E
2500|$|A6: MP1: <b>INTEGER</b> <b>PROGRAMMING,</b> pg.245. (computer science, {{complexity}} theory) ...|$|E
40|$|Recently, {{there has}} been a {{significant}} interest in introducing stochastic dominance relations as constraints into stochastic optimization problems. Optimization with first order stochastic dominance constraints in discrete distribution case can be formulated as mixed <b>integer</b> <b>programs.</b> In this article, we present a method to safely approximate such kinds of mixed <b>integer</b> <b>programs...</b>|$|R
40|$|In {{this paper}} we {{describe}} {{a method that}} combines simulation and cutting plane methods to solve resource allocation and scheduling problems. We solve a relaxed linear (<b>integer)</b> <b>program</b> iteratively and pass the solution of each iteration to a simulation. The results of the simulation are used to generate constraints in the linear (<b>integer)</b> <b>program.</b> We provide conditions under which {{the solution of the}} linear (<b>integer)</b> <b>program</b> converges to an optimal solution of the unrelaxed problem. The concavity of the underlying service level function is critical for the method and we present a linear programming method to numerically check the concavity of a function...|$|R
50|$|In all cases, though, the {{solution}} {{quality of the}} linear program {{is at least as}} good as that of the <b>integer</b> <b>program,</b> because any <b>integer</b> <b>program</b> solution would also be a valid linear program solution. That is, in a maximization problem, the relaxed program has a value {{greater than or equal to}} that of the original program, while in a minimization problem such as the set cover problem the relaxed program has a value smaller than or equal to that of the original program. Thus, the relaxation provides an optimistic bound on the <b>integer</b> <b>program's</b> solution.|$|R
2500|$|George L. Nemhauser and Laurence A. Wolsey, <b>Integer</b> <b>programming</b> (pp.447–527); ...|$|E
2500|$|Alexander Schrijver, Theory of Linear and <b>Integer</b> <b>Programming.</b> John Wiley & sons, 1998, [...] (mathematical) ...|$|E
2500|$|J. E. Beasley, editor. Advances in Linear and <b>Integer</b> <b>Programming.</b> Oxford Science, 1996. (Collection of surveys) ...|$|E
40|$|It {{is shown}} how the dual of Fourier–Motzkin {{elimination}} {{can be applied}} to eliminating the constraints of an <b>Integer</b> Linear <b>Program.</b> The result will, in general, be to reduce the <b>Integer</b> <b>Program</b> to a single Diophantine equation together with a series of Linear homogeneous congruences. Extreme continuous solutions to the Diophantine equation give extreme solutions to the Linear Programming relaxation. Integral solutions to the Diophantine equation which also satisfy the congruences give all the solutions to the <b>Integer</b> <b>Program...</b>|$|R
30|$|We do {{not want}} to solve the <b>integer</b> <b>program</b> to {{calculate}} explicit routes. Later, we will present algorithms which avoid solving the <b>integer</b> <b>program</b> and yet work very well in practice. In the following section, we explain the various multicast routing algorithms considering the residual bandwidth of network and apply the proposed algorithm to each multicast routing algorithm.|$|R
40|$|International audienceA {{cutting plane}} {{algorithm}} {{is presented in}} order to solve linear <b>integer</b> <b>programs</b> in {{a finite number of}} iterations, under the assumption that the feasible region is bounded. The procedure also applies to the resolution of mixed <b>integer</b> <b>programs</b> in a finite number of iterations under the additional assumption that the optimal objective value is integral...|$|R
2500|$|<b>Integer</b> <b>programming</b> studies linear {{programs}} {{in which some}} or all variables are constrained to take on integer values. [...] This is not convex, and in general {{much more difficult than}} regular linear programming.|$|E
2500|$|... {{formulate}} {{the edge}} coloring problem as an integer program and describe their experience using an <b>integer</b> <b>programming</b> solver to edge color graphs. However, {{they did not}} perform any complexity analysis of their algorithm.|$|E
2500|$|If {{only some}} of the unknown {{variables}} are required to be integers, then the problem is called a mixed <b>integer</b> <b>programming</b> (MIP) problem. [...] These are generally also NP-hard because they are even more general than ILP programs.|$|E
40|$|This paper {{deals with}} {{improving}} {{complexity of the}} branch and bound method for solving a pure <b>integer</b> <b>program.</b> This improvement is achieved by formulating a characteristic pure <b>integer</b> <b>program</b> from all the Gomory constraints arising from the relaxed LP solution of the given problem. The number of sub-problems required in the branch and bound method reduce significantly...|$|R
40|$|Global routing is an {{essential}} phase {{during the process of}} physical design of integrated circuits. Combinatorially, this problem amounts to a set of interdependent Steiner tree problems. Several versions of the problem are of importance in practical applications. All of them can be formulated as <b>integer</b> <b>programs.</b> Several such formulations have been investigated in the past, and different solution methods have been developed for different formulations. In this paper we give an overview of <b>integer</b> <b>program</b> formulations of the global routing problem and their solution methods, and we introduce new concepts for solving this important combinatorial problem. Finally, we present <b>integer</b> <b>program</b> formulations that integrate placement with global routing...|$|R
40|$|We {{report on}} the use of {{conflict}} graphs in solving <b>integer</b> <b>programs.</b> A conflict graph represents logical relations between binary variables appearing in an <b>integer</b> <b>program.</b> We develop algorithms and data structures that allow the effective and efficient construction, management, and use of dynamically changing conflict graphs. Our computational experiments show that the techniques presented work very well in practice...|$|R
2500|$|Integer linear {{programming}} amounts to finding some integer solutions (optimal in some sense) of linear systems that include also inequations. [...] Thus systems of linear Diophantine equations are basic in this context, and textbooks on <b>integer</b> <b>programming</b> {{usually have a}} treatment of systems of linear Diophantine equations.|$|E
50|$|If all of {{the unknown}} {{variables}} are required to be integers, then the problem is called an <b>integer</b> <b>programming</b> (IP) or integer linear programming (ILP) problem. In contrast to linear programming, which can be solved efficiently in the worst case, <b>integer</b> <b>programming</b> problems are in many practical situations (those with bounded variables) NP-hard. 0-1 <b>integer</b> <b>programming</b> or binary <b>integer</b> <b>programming</b> (BIP) is the special case of <b>integer</b> <b>programming</b> where variables are required to be 0 or 1 (rather than arbitrary integers). This problem is also classified as NP-hard, {{and in fact the}} decision version was one of Karp's 21 NP-complete problems.|$|E
5000|$|The <b>Integer</b> <b>Programming</b> and Combinatorial Optimization (IPCO) conference, in <b>Integer</b> <b>programming,</b> is held {{in those}} years {{when there is no}} ISMP.|$|E
40|$|We {{define a}} class of <b>integer</b> <b>programs</b> with {{constraints}} that involve up to three variables each. A generic constraint in such <b>integer</b> <b>program</b> is of the form ax + by z + c, where the variable z appears only in that constraint. For such binary <b>integer</b> <b>programs</b> {{it is possible to}} derive half integral superoptimal solutions in polynomial time. The scheme is also applicable with few modifications to nonbinary integer problems. For some of these problems it is possible to round the half integral solution to a 2 -approximate solution. This extends the class of <b>integer</b> <b>programs</b> with at most two variables per constraint that were analyzed in [HMNT 93]. The approximation algorithms here provide an improvement in running time and range of applicability compared to existing 2 -approximations. Furthermore, we conclude that problems in the framework are MAX SNP-hard and at least as hard to approximate as vertex cover. Problems that are amenable to the analysis provided here are easily recognized. The [...] ...|$|R
5000|$|Agent level: mixed <b>integer</b> <b>programs</b> are solved to find agent demands at {{the current}} prices.|$|R
40|$|We {{provide an}} {{overview}} of our recent efforts to automatize Dantzig-Wolfe reformulation and column generation/branch-and-price for structured, large-scale <b>integer</b> <b>programs.</b> We present the need for and the benefits from a generic implementation which does not need any user input or expert knowledge. A focus is on detecting structures in <b>integer</b> <b>programs</b> which are amenable to a Dantzig-Wolfe reformulation. We give computational results and discuss future research topics...|$|R
