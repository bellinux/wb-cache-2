811|253|Public
5000|$|... 1996 - Lifetime Achievement Award, <b>Evolutionary</b> <b>Programming</b> Society ...|$|E
5000|$|... Method and Apparatus for Training a Neural Network using <b>Evolutionary</b> <b>Programming</b> - 1993 May 25 ...|$|E
5000|$|Evolutionary {{cybernetics}} - {{study of}} the evolution of informational systems (See also <b>evolutionary</b> <b>programming,</b> evolutionary algorithm) ...|$|E
5000|$|US {{patent on}} <b>evolutionary</b> <b>program</b> {{induction}} of machine code granted: Computer Implemented Machine Learning Method and System, Patent Number 5,841,947 ...|$|R
40|$|ABSTRACT We {{present a}} tool for {{selecting}} operators (crossover and mutation) and tuning control parameters of evolutionary algorithms (population size, crossover probability and mutation probability). This tool was designed {{with a focus on}} meta-evolution: the top level, a genetic algorithm optimizes an <b>evolutionary</b> <b>program</b> in lower level. Given the amount of computation that this may mean is used master-slave parallel configuration, implemented using MPICH 2. The experimental results confirm the validity and generality of this tool. Keywords: Genetic algorithms, <b>Evolutionary</b> <b>programs,</b> Meta-evolution, Control parameters. </p...|$|R
40|$|ABSTRACT: A {{most common}} process in image {{analysis}} is noise reduction, {{with the objective}} of diminishing image components considered to be extraneous. This paper presents an <b>Evolutionary</b> <b>Program</b> that evolves image noise reduction procedures in form of dynamical rules for Cellular Automata. The method takes advantage of the pattern processing capabilities of Cellular Automata combined with the search power of <b>Evolutionary</b> <b>Programs.</b> The fitness function that guides the evolutionary search consists on a measure of the noise reduction quality obtained from the application of the Cellular Automata on a set of reference images conveniently contaminated with several levels of white noise. The method is applied both to simple monochromatic and 256 grayscale images, with different noise content, observing a performance comparable or better to that of traditional noise reduction methods. This work shows that the hybridization of Cellular Automata with <b>Evolutionary</b> <b>Programs</b> is a very promising approach for the implementation of general adaptive image processing tools...|$|R
50|$|These terminologies {{denote the}} field of {{evolutionary}} computing and consider <b>evolutionary</b> <b>programming,</b> evolution strategies, genetic algorithms, and genetic programming as sub-areas.|$|E
50|$|<b>Evolutionary</b> <b>programming</b> - Similar {{to genetic}} programming, but the {{structure}} of the program is fixed and its numerical parameters are allowed to evolve.|$|E
5000|$|<b>Evolutionary</b> <b>programming</b> (EP) {{involves}} {{populations of}} solutions with primarily mutation and selection and arbitrary representations. They use self-adaptation to adjust parameters, and can include other variation operations such as combining information from multiple parents.|$|E
40|$|Abstract. Typical {{applications}} of evolutionary optimization involve the off-line approximation of extrema of static multi-modal functions. Methods which use a vari-ety of techniques to self-adapt mutation parameters {{have been shown}} to be more suc-cessful than methods which do not use self-adaptation. For dynamic functions, the interest is not to obtain the extrema but to follow it as closely as possible. This paper compares the on-line extrema tracking performance of an <b>evolutionary</b> <b>program</b> with-out self-adaptation against an <b>evolutionary</b> <b>program</b> using a self-adaptive Gaussian update rule over a number of dynamics applied to a simple static function. The experi-ments demonstrate that for some dynamic functions, self-adaptation is effective while for others it is detrimental. ...|$|R
50|$|Genetic programming, a biologically-inspired {{technique}} that involves evolving programs {{through the use}} of crossover and mutation, has been used to search for repairs to programs by altering a few lines of source code. The GenProg <b>Evolutionary</b> <b>Program</b> Repair software repaired 55 out of 105 bugs for approximately $8 each in one test.|$|R
5000|$|Canadian Institute for Advanced Research (CIAR) <b>Evolutionary</b> Biology <b>Program,</b> Advisory Committee ...|$|R
50|$|<b>Evolutionary</b> <b>programming</b> {{is one of}} {{the four}} major {{evolutionary}} algorithm paradigms. It is similar to genetic programming, but the structure of the program to be optimized is fixed, while its numerical parameters are allowed to evolve.|$|E
50|$|His awards {{include the}} Lifetime Achievement Award of the <b>Evolutionary</b> <b>Programming</b> Society (US, 1995) and the Evolutionary Computation Pioneer Award of the IEEE Neural Networks Society (US, 2002). In 1954, Rechenberg also became world {{champion}} {{in the field of}} model aeroplanes.|$|E
5000|$|Aleksandrov A., Kazakov S., Sergushichev A., Tsarev F., Shalyto A. The Use of <b>Evolutionary</b> <b>Programming</b> Based on Training Examples for the Generation of Finite State Machines for Controlling Objects with Complex Behavior // Journal of Computer and Systems Sciences International. 2013. Vol. 52. No. 3, pp. 410-425.|$|E
40|$|An <b>evolutionary</b> <b>program,</b> {{based on}} a real-code genetic {{algorithm}} (GA), is applied to calculate optimal control policies for bioreactors. The GA {{is used as a}} nonlinear optimizer in combination with simulation software and constraint handling procedures. A new class of GA-operators is introduced to obtain smooth control trajectories, which leads also to a drastic reduction in computational load. The proposed method is easy to understand and has no restrictions on the model type and structure. The performance and optimal trajectories obtained by the extended GA are compared with those calculated with two common methods: (i) dynamic programming, and (ii) a Hamiltonian based gradient algorithm. The GA proved to be a good and often superior alternative for solving optimal control problems. 1999 Elsevier Science B. V. All rights reserved. Keywords: Fed-batch bioreactor; Optimal control; Genetic algorithm; <b>Evolutionary</b> <b>program</b> 1. Introduction Bioreactors are often operated in batch or fedbatc [...] ...|$|R
40|$|<b>Evolutionary</b> <b>programs</b> (EPs) and <b>evolutionary</b> pattern search {{algorithms}} (EPSAs) are {{two general}} classes of evolutionary methods for optimizing on continuous domains. The relative performance {{of these methods}} has been evaluated on standard global optimization test functions, and {{these results suggest that}} EPSAs more robustly converge to nearoptimal solutions than EPs. In this paper we evaluate the relative performance of EPSAs and EPs on a real-world application: flexible ligand binding in the Autodock docking software. We compare the performance of these methods on a suite of docking test problems. Our results confirm that EPSAs and EPs have comparable performance, and they suggest that EPSAs may be more robust on larger, more complex problems. 1 Introduction <b>Evolutionary</b> <b>programs</b> (EPs) and <b>evolutionary</b> pattern search algorithms (EPSAs) are two classes of evolutionary algorithms (EAs) that have been specifically developed for solving problems of the form min x 2 R n f(x) : In particula [...] ...|$|R
40|$|Evolutionary {{computation}} is {{a promising}} technique for automating time-consuming and expensive software maintenance tasks, including bug repair. The {{success of this}} approach, however, depends at least partially on the choice of representation, fitness function, and operators. Previous work on evolutionary software repair has employed different approaches, {{but they have not}} yet been evaluated in depth. This paper investigates representation and operator choices for source-level <b>evolutionary</b> <b>program</b> repair in the GenProg framework [17], focusing on: (1) representation of individual variants, (2) crossover design, (3) mutation operators, and (4) search space definition. We evaluate empirically on a dataset comprising 8 C programs totaling over 5. 1 million lines of code and containing 105 reproducible, humanconfirmed defects. Our results provide concrete suggestions for operator and representation design choices for <b>evolutionary</b> <b>program</b> repair. When augmented to incorporate these suggestions, GenProg repairs 5 additional bugs (60 vs. 55 out of 105), with a decrease in repair time of 17 â€“ 43 % for the more difficult repair searches...|$|R
5000|$|Koza was {{featured}} in Popular Science {{for his work on}} <b>evolutionary</b> <b>programming</b> that alters its own code to find far more complex solutions. The machine, which he calls the [...] "invention machine", has created antennae, circuits, and lenses, and has received a patent from the US Patent Office.|$|E
5000|$|The IEEE Computational Intelligence Society is a {{professional}} society of the Institute of Electrical and Electronics Engineers (IEEE) focussing on [...] "the theory, design, application, and development of biologically and linguistically motivated computational paradigms emphasizing neural networks, connectionist systems, genetic algorithms, <b>evolutionary</b> <b>programming,</b> fuzzy systems, and hybrid intelligent systems in which these paradigms are contained".|$|E
50|$|CEC, {{which is}} {{organized}} by the IEEE Computational Intelligence Society {{in cooperation with the}} <b>Evolutionary</b> <b>Programming</b> Society, covers most subtopics of EC, such as Evolutionary robotics, Multiobjective optimization, Evolvable hardware, Theory of evolutionary computation, Evolutionary design etc. Papers can also be found that deal with topics which are related to rather than part of EC, such Ant colony optimization, Swarm intelligence and Quantum computing.|$|E
25|$|This {{interdisciplinary}} field investigates {{topics such}} as the parallels between language and music in the brain. Biologically inspired models of computation are often included in research, such as neural networks and <b>evolutionary</b> <b>programs.</b> This field seeks to model how musical knowledge is represented, stored, perceived, performed, and generated. By using a well-structured computer environment, the systematic structures of these cognitive phenomena can be investigated.|$|R
40|$|This paper {{introduces}} GNARL, an <b>evolutionary</b> <b>program</b> which induces recurrent {{neural networks}} that are structurally unconstrained. In contrast to constructive and destructive algorithms, GNARL employs a popula-tion of networks {{and uses a}} fitness function's unsupervised feedback to guide search through network space. Annealing is used in generating both gaussian weight changes and structural modifications. Applying GNARL to a complex search and collection task demonstrates {{that the system is}} capable of inducing networks with complex internal dynamics. ...|$|R
50|$|The easy Song Builder is an <b>evolutionary</b> {{composition}} <b>program.</b> The user decides which {{version of}} the song will be the germ for the next generation.|$|R
50|$|<b>Evolutionary</b> <b>programming</b> {{is often}} paired with other {{algorithms}} e.g. ANN {{to improve the}} robustness, reliability, and adaptability. Evolutionary models reduce error rates by allowing the numerical values to change within the fixed structure of the program. Designers provide their algorithms the variables, they then provide training data to help the program generate rules defined in the input space that make a prediction in the output variable space.|$|E
50|$|Dr. Lawrence Jerome Fogel (March 2, 1928 - February 18, 2007) was {{a pioneer}} in {{evolutionary}} computation and human factors analysis. He {{is known as the}} inventor of active noise cancellation and the father of <b>evolutionary</b> <b>programming.</b> His scientific career spanned nearly six decades and included electrical engineering, aerospace engineering, communication theory, human factors research, information processing, cybernetics, biotechnology, artificial intelligence, and computer science.|$|E
5000|$|Kenneth A De Jong is an American {{computer}} scientist {{and professor at}} George Mason University. He {{is one of the}} pioneers in evolutionary computation.Kenneth De Jong has been instrumental in unifying various evolutionary techniques like genetic algorithms, evolution strategies and <b>evolutionary</b> <b>programming</b> under one umbrella of evolutionary computation. He has been also instrumental in the research sub field of co-evolution in evolutionary computation Cooperative coevolution ...|$|E
40|$|Abstract. Multi-FPGA systems (MFS) {{are used}} for {{a great variety of}} applications, for instance, {{dynamically}} re-configurable hardware applications, digital circuit emulation, and numerical computation. There are a great variety of boards for MFS implementation. In this paper a methodology for MFS design is presented. The techniques used are <b>evolutionary</b> <b>programs</b> and they solve all of the design tasks (partitioning placement and routing). Firstly a hybrid compact genetic algorithm solves the partitioning problem and then genetic programming is used to obtain a solution for the two other tasks. ...|$|R
40|$|<b>Evolutionary</b> <b>program</b> {{induction}} using binary {{machine code}} {{is the fastest}} known Genetic Programming method. It is, in addition, the most well studied Genetic Programming system that uses a linear genome. This chapter describes recent advances in genetic programming of machine code. <b>Evolutionary</b> <b>program</b> induction using binary machine code was originally referred to as Compiling Genetic Programming System (CGPS). For clarity, the name was changed in early 1998 to Automatic Induction of Machine Codeâ€”Genetic Programming (AIM-GP). AIM-GP stores evolved programs as linear strings of native binary machine code, which are directly executed by the processor. The absence of an interpreter and complex memory handling increases the speed of AIM-GP by about two orders of magnitude. AIM-GP {{has so far been}} applied to processors with a fixed instruction length (RISC) using integer and floating-point arithmetic. We also describe several recent advances in the AIM-GP technology. Such advances include enabling the induction of code for CISC processors such as the INTEL x 86 as well as JAVA and many embedded processors. The new techniques also make AIM-GP more portable in general and simplify the adaptation to any processor architecture. Other additions include the use of floating point instructions, control flow instructions, ADFs and new genetic operators e. g. aligned homologous crossover. This chapter also discusses the benefit...|$|R
50|$|The Program Executive Office (PEO), Land Systems Marine Corps is {{executing}} the G/ATOR <b>program</b> as an <b>evolutionary</b> acquisition <b>program</b> consisting of four capabilities, {{referred to as}} blocks.|$|R
50|$|It {{was first}} used by Lawrence J. Fogel in the US in 1960 {{in order to use}} {{simulated}} evolution as a learning process aiming to generate artificial intelligence. Fogel used finite-state machines as predictors and evolved them.Currently <b>evolutionary</b> <b>programming</b> is a wide evolutionary computing dialect with no fixed structure or (representation), in contrast with some of the other dialects. It is becoming harder to distinguish from evolutionary strategies.|$|E
50|$|GECCO {{presents}} the latest high-quality results in genetic and evolutionary computation. Topics of interest include: genetic algorithms, genetic programming, evolution strategies, <b>evolutionary</b> <b>programming,</b> estimation of distribution algorithms, memetic algorithms, hyper-heuristics, evolutionary robotics, evolvable hardware, artificial life, ant colony optimization algorithms, swarm intelligence, artificial immune systems, digital entertainment technologies, evolutionary art, evolutionary combinatorial optimization, metaheuristics, evolutionary multi-objective optimization, evolutionary machine learning, search-based software engineering, theory, real-world applications, and more.|$|E
5000|$|For {{specific}} optimization {{problems and}} problem instances, other optimization algorithms {{may be more}} efficient than genetic algorithms in terms of speed of convergence. Alternative and complementary algorithms include evolution strategies, <b>evolutionary</b> <b>programming,</b> simulated annealing, Gaussian adaptation, hill climbing, and swarm intelligence (e.g.: ant colony optimization, particle swarm optimization) and methods based on integer linear programming. The suitability of genetic algorithms {{is dependent on the}} amount of knowledge of the problem; well known problems often have better, more specialized approaches.|$|E
5000|$|Kurt Dopfer 'Evolutionary Economics: Framework for analysis', in: K. Dopfer, ed. 2001. <b>Evolutionary</b> Economics: <b>Program</b> and Scope, Recent Economic Thought Series, Boston/Dordrecht/London: Kluwer Academic Publishers, pp. 1-44.|$|R
40|$|Abstract. The paper {{investigates the}} {{influence}} of versatile crossover and mutation operators on the efficiency of evolutionary search in solving two important classes of hard optimization problems. Chromosome representations of set partitions and permutations defined in the paper are not problemâ€“oriented and are described together with their versatile variation operators. The proposed representations are tested in <b>evolutionary</b> <b>programs</b> on standard partitions and permutation problems i. e. graph coloring (GCP) and traveling salesman (TSP). The optimization results {{vary depending on the}} problem class. They are relatively positive with respect to GCP and negative for TSP. ...|$|R
5000|$|University of Chicago Committee on <b>Evolutionary</b> Biology Ph.D. <b>Program</b> ...|$|R
