147|193|Public
5000|$|In Context Exact matching, {{as well as}} exact and <b>fuzzy</b> <b>matching</b> ...|$|E
50|$|SmartList is {{the only}} mailing list manager that uses <b>fuzzy</b> <b>matching</b> to {{accommodate}} for typos and derived email addresses.|$|E
50|$|OmegaT shares many {{features}} with mainstream CAT tools. These include creating, importing and exporting translation memories, <b>fuzzy</b> <b>matching</b> from translation memories, glossary look-up, {{and reference}} and concordance searching.|$|E
50|$|Users can insert <b>fuzzy</b> <b>matches</b> using a {{keyboard}} shortcut or using the mouse. OmegaT shows {{the degree of}} similarity in <b>fuzzy</b> <b>matches</b> using colours. OmegaT can also display the date, time {{and the name of}} the user who translated any given segment. Glossary matches can be inserted using the mouse. The user can choose to have the source text copied into the target text field, or to have the highest <b>fuzzy</b> <b>match</b> automatically inserted.|$|R
40|$|This article {{reports on}} a key-logging {{experiment}} carried out in order to investigate the effect that Translation Memory matches in the 70 %- 95 % range have on particular aspects of the translation process. Operationalising the translation process as text (re) production following Englund-Dimitrova (2005), Translog-II is used to investigate whether the use of <b>fuzzy</b> <b>matches</b> in this range can reduce cognitive effort based on Working Memory Capacity and recorded pauses, to study the effect that adapting and correcting <b>fuzzy</b> <b>matches</b> in this range has on linear and non-linear writing processes, and to examine variables related to revision, time and productivity. Results show that initial reading time and self-revision is longer {{in the case of}} <b>fuzzy</b> <b>match</b> correction compared to manual translation. Data also show however that cognitive load as measured by pauses is reduced and that productivity is also increased. Significant differences are also observed in terms of text production strategies between the translators who edited the <b>fuzzy</b> <b>matches</b> and those who translated without them...|$|R
50|$|In {{translation}} work, translation segments {{are compared}} with translation units {{stored in the}} translation memory, and exact or <b>fuzzy</b> <b>matches</b> can be shown and inserted in the translated text.|$|R
50|$|DataMatch Enterprise {{provides}} <b>fuzzy</b> <b>matching</b> {{and record}} linkage services for companies of all sizes. The company recently rolled {{out a new}} integration with CRM service Salesforce, as well as address verification services.|$|E
50|$|OmegaT is {{intended}} for professional translators. Its features include customisable segmentation using regular expressions, translation memory with <b>fuzzy</b> <b>matching</b> and match propagation, glossary matching, dictionary matching, translation memory and reference material searching, and inline spell-checking using Hunspell spelling dictionaries.|$|E
50|$|Examples of {{technologies}} available to integrate information include deduplication, and string metrics which allow {{the detection of}} similar text in different data sources by <b>fuzzy</b> <b>matching.</b> A host of methods for these research areas are available such as those presented in the International Society of Information Fusion.|$|E
50|$|Transderivational search (often {{abbreviated}} to TDS) is a psychological and cybernetics term, meaning when a search is being conducted for a <b>fuzzy</b> <b>match</b> {{across a broad}} field. In computing the equivalent function can be performed using content-addressable memory.|$|R
5000|$|Variants of regexes can be {{used for}} working with text in natural language, when it is {{necessary}} to take into account possible typos and spelling variants. For example, the text [...] "Julius Caesar" [...] might be a <b>fuzzy</b> <b>match</b> for: ...|$|R
40|$|In recent years, it is {{becoming}} more and more clear that the localisation industry does not have the necessary manpower to satisfy the increasing demand for high-quality translation. This has fuelled the search new and existing technologies that would increase translator throughput. As Translation Memory (TM) systems are the most commonly employed tool by translators, a number of enhancements are available to assist them in their job. One such enhancement would be to show the translator which parts of the sentence that needs to be translated match which parts of the <b>fuzzy</b> <b>match</b> suggested by the TM. For this information to be used, however, the translators have to carry it over to the TM translation themselves. In this paper, we present a novel methodology that can automatically detect and highlight the segments that need to be modified in a TM-­suggested translation. We base it on state-­of-the-art sub-­tree align- ment technology (Zhechev, 2010) that can produce aligned phrase-­based-­tree pairs from unannotated data. Our system operates in a three-­step process. First, the <b>fuzzy</b> <b>match</b> selected by the TM and its translation are aligned. This lets us know which segments of the source-­language sentence correspond to which segments in its translation. In the second step, the <b>fuzzy</b> <b>match</b> is aligned to the input sentence that is currently being translated. This tells us which parts of the input sentence are available in the <b>fuzzy</b> <b>match</b> and which still need to be translated. In the third step, the <b>fuzzy</b> <b>match</b> is used as an intermediary, through which the alignments between the input sentence and the TM translation are established. In this way, we can detect with precision the segments in the suggested translation that the translator needs to edit and highlight them appropriately to set them apart from the segments that are already good translations for parts of the input sentence. Additionally, we can show the alignments—as detected by our system—between the input and the translation, which will make it even easier for the translator to post-edit the TM suggestion. This alignment information can additionally be used to pre- translate the mismatched segments, further reducing the post-­editing load...|$|R
50|$|The bitap {{algorithm}} {{is perhaps best}} {{known as one of}} the underlying algorithms of the Unix utility agrep, written by Udi Manber, Sun Wu, and Burra Gopal. Manber and Wu's original paper gives extensions of the algorithm to deal with <b>fuzzy</b> <b>matching</b> of general regular expressions.|$|E
5000|$|In the 1990s, <b>fuzzy</b> <b>matching</b> {{began to}} take off as a {{prominent}} feature of TM tools, and despite some issues concerning the extra work involved in editing a fuzzy match [...] "proposal", {{it is still a}} popular subset of TM. It is currently a feature of most popular TM tools.|$|E
50|$|DataDetective is a {{data mining}} {{platform}} developed by Sentient Information Systems. Since 1992, this software is being applied in {{organizations that have}} the need for retrieving patterns and relations in their typically large databases. DataDetective does this by offering {{a broad spectrum of}} data analysis techniques, such as associative memory prediction, clustering, decision trees, <b>fuzzy</b> <b>matching,</b> but also basic statistics, graphs and geographical visualization.|$|E
40|$|Abstract. Professional translators of {{technical}} documents often use Translation Memory (TM) systems {{in order to}} capitalize on the repetitions frequently observed in these documents. TM systems typically exploit not only complete matches between the source sentence to be translated and some previously translated sentence, but also so-called <b>fuzzy</b> <b>matches,</b> where the source sentence has some substantial commonality with a previously translated sentence. These <b>fuzzy</b> <b>matches</b> can be very worthwhile {{as a starting point for}} the human translator, but the translator then needs to manually edit the associated TM-based translation to accommodate the differences with the source sentence to be translated. If part of this process could be automated, the cost of human translation could be significantly reduced. The paper proposes to perform this automation in the following way: a phrase-based Statistical Machine Translation (SMT) system (trained on a bilingual corpus in the same domain as the TM) is combined with the TM <b>fuzzy</b> <b>match,</b> by extracting from the fuzzy-match a large (possibly gapped) bi-phrase that is dynamically added to the usual set of “static ” bi-phrases used for decoding the source. We report experiments that show significant improvements in terms of BLEU and NIST scores over both the translations produced by the stand-alone SMT system and the fuzzy-match translations proposed by the stand-alone TM system. ...|$|R
40|$|To ensure {{high data}} quality, data {{warehouses}} must validate and cleanse incoming data tuples from external sources. In many situations, clean tuples must match acceptable tuples in reference tables. For example, product name and description fields in a sales record from a distributor must match the pre-recorded name and description fields in a product reference relation. A significant challenge {{in such a}} scenario is to implement an efficient and accurate <b>fuzzy</b> <b>match</b> operation that can effectively clean an incoming tuple if it fails to match exactly with any tuple in the reference relation. In this paper, we propose a new similarity function which overcomes limitations of commonly used similarity functions, and develop an efficient <b>fuzzy</b> <b>match</b> algorithm. We demonstrate the effectiveness of our techniques by evaluating them on real datasets. 1...|$|R
5000|$|Fuzzy match: When {{the match}} is not exact, it is a [...] "fuzzy" [...] match. Some systems assign {{percentages}} to {{these kinds of}} matches, in which case a <b>fuzzy</b> <b>match</b> is greater than 0% and less than 100%. Those figures are not comparable across systems unless the method of scoring is specified.|$|R
50|$|Some {{translation}} memories systems {{search for}} 100% matches only, {{that is to}} say that they can only retrieve segments of text that match entries in the database exactly, while others employ <b>fuzzy</b> <b>matching</b> algorithms to retrieve similar segments, which are presented to the translator with differences flagged. It {{is important to note that}} typical translation memory systems only search for text in the source segment.|$|E
50|$|A central {{feature is}} the hideable {{information}} panel at the bottom {{that can be used}} to view file properties and contents, generate reports, preview files (PNG, TIF, GIF, JPG, TGA, PSD, ICO; WAV, MP3, MPEG, AVI; TTF, PFB; HTML, EML, MSG, DOC, XLS, PDF, and many other formats) and find files. The search facility supports Boolean logic, regular expressions, whole word and <b>fuzzy</b> <b>matching,</b> binary string search, and multiple location search.|$|E
5000|$|<b>Fuzzy</b> <b>matching</b> is a {{technique}} used in computer-assisted translation as a special case of record linkage. It works with matches that may be less than 100% perfect when finding correspondences between segments of a text and entries in a database of previous translations. It usually operates at sentence-level segments, but some translation technology allows matching at a phrasal level. It is used when the translator is working with translation memory (TM).|$|E
40|$|Abstract—String {{similarity}} join {{that finds}} similar string pairs between two string sets {{is an essential}} operation in many applications, and has attracted significant attention recently in the database community. A significant challenge in similarity join is to implement an effective <b>fuzzy</b> <b>match</b> operation to find all similar string pairs which may not match exactly. In this paper, we propose a new similarity metrics, called “fuzzy token matching based similarity”, which extends token-based similarity functions (e. g., Jaccard similarity and Cosine similarity) by allowing <b>fuzzy</b> <b>match</b> between two tokens. We study the problem of similarity join using this new similarity metrics and present a signature-based method to address this problem. We propose new signature schemes and develop effective pruning techniques to improve the performance. Experimental results show that our approach achieves high efficiency and result quality, and significantly outperforms state-of-the-art methods. I...|$|R
40|$|We present {{two methods}} that merge ideas from {{statistical}} machine translation (SMT) and translation memories (TM). We use a TM to retrieve matches for source segments, and replace the mismatched parts with instructions to an SMT system {{to fill in the}} gap. We show that for <b>fuzzy</b> <b>matches</b> of over 70 %, one method outperforms both SMT and TM baselines. ...|$|R
40|$|Abstract—This paper {{gives an}} {{overview}} and analyzes the different existing anti spamming techniques both content based, non content based methods and {{a combination of}} the duo. It also suggests that a small change in one of the parameters in the <b>fuzzy</b> string <b>matching</b> method could be useful to produce better results. Index Terms —email, spam, computer forensics, <b>fuzzy</b> string <b>match...</b>|$|R
50|$|The unique {{identifiers}} are remembered during translation {{so that the}} target language document is 'exactly' aligned at the text unit level. If the source document is subsequently modified, then those text units that have not changed can be directly transferred to the new target version of the document {{without the need for}} any translator interaction. This is the concept of 'exact' or 'perfect' matching to the translation memory. xml:tm can also provide mechanisms for in-document leveraged and <b>fuzzy</b> <b>matching.</b>|$|E
5000|$|The TM tool {{searches}} the database to locate segments that are an approximate match for a segment {{in a new}} source text to be translated. The TM, in effect, [...] "proposes" [...] the match to the translator; it is then up to the translator to accept this proposal or to edit this proposal to more fully equate with the new source text that is undergoing translation. In this way, <b>fuzzy</b> <b>matching</b> can speed up the translation process and lead to increased productivity.|$|E
50|$|When {{an exact}} match cannot {{be found in}} the TM {{database}} for the text being translated, there is an option to search for a match that is less than exact; the translator sets the threshold of the fuzzy match to a percentage value less than 100%, and the database will then return any matches in its memory corresponding to that percentage. Its primary function is to assist the translator by speeding up the translation process; <b>fuzzy</b> <b>matching</b> is not designed to replace the human translator.|$|E
40|$|The paper {{describes}} an example-based parser for Chinese. Trees are retrieved from a treebank via a <b>fuzzy</b> <b>match.</b> Then tree and sentence are aligned. Subsequent structural adaptations handle unknown words, type shifting and metaphorical extentions of words. Derivational adaptations re-analyze awkward subtrees {{with the purpose}} to auto-correct badly matched trees and to insert deleted words, a strategy crucial for parsing long sentences. Experiments are presented in which dierent variants of this approach are tested...|$|R
5000|$|Glossaries {{are handled}} by the {{integrated}} terminology module. Glossaries can be imported in TMX or delimited text formats and exported as delimited text or MultiTerm XML. Glossaries can include two or more languages or language variants. Term matching with glossary entries can be based on many different parameters, taking into consideration capitalization, partial or <b>fuzzy</b> <b>matches</b> and other factors. Terms to be avoided can be marked as [...] "forbidden" [...] in the properties of a particular glossary entry.|$|R
50|$|In {{such cases}} the {{mechanism}} implements some <b>fuzzy</b> string <b>matching</b> algorithm and possibly some algorithm for finding {{the similarity between}} text fragment and pattern.|$|R
50|$|In {{translation}} work, fuzzy {{concepts are}} analyzed {{for the purpose}} of good translation. A concept in one language may not have quite the same meaning or significance in another language, or it may not be feasible to translate it literally, or at all. Some languages have concepts which do not exist in another language, raising the problem of how one would most easily render their meaning. In computer-assisted translation, a technique called <b>fuzzy</b> <b>matching</b> is used to find the most likely translation of a piece of text, using previous translated texts as a basis.|$|E
5000|$|SPSS: A {{dialog box}} for Propensity Score Matching is {{available}} from the IBM SPSS Statistics menu (Data/Propensity Score Matching), and allows the user to set the match tolerance, randomize case order when drawing samples, prioritize exact matches, sample with or without replacement, set a random seed, and maximize performance by increasing processing speed and minimizing memory usage. The FUZZY Python procedure can also easily be added as an extension to the software through the Extensions dialog box. This procedure matches cases and controls by utilizing random draws from the controls, based on a specified set of key variables. The FUZZY command supports exact and <b>fuzzy</b> <b>matching.</b>|$|E
50|$|Maveryx is an {{automated}} functional, {{graphical user interface}} (GUI), and regression test tool for Java and Android applications. Unlike other test tools, Maveryx does not use a GUI Map to create and run its automated tests. GUI test objects are recognized at execution time, by a GUI Objects Finder. This search engine supports exact and <b>fuzzy</b> <b>matching</b> algorithms to identify the test objects in the application's user interface. Avoiding GUI Maps allows starting automation early—long before the application is available for testing, while approximate matching gives the possibility to derive tests even from partial or lacking requirements, and to automate scripts resilient to frequent application changes. Maveryx is primarily used by Software Quality Assurance teams to perform automated testing in traditional and agile environments.|$|E
40|$|New {{function}} group formation algorithm based on attribute value for space group target was presented, {{which had the}} ability to realize {{function group}} formation. The uncertainty of measurement space was mapped into the fuzzy attribute value space, and the uncertainty of measurement space was resolved by the <b>fuzzy</b> <b>match</b> mechanism. With lower calculation complexity less than O(n 2), it was more efficient to generate group formation for maneuvering target by simulation results. Key words: Maneuvering target, Function group formation, Situatio...|$|R
40|$|In {{the private}} {{matching}} problem, a client and a server each hold {{a set of}} n input elements. The client wants to privately compute the intersection of these two sets: he learns which elements he has {{in common with the}} server (and nothing more), while the server gains no information at all. In certain applications {{it would be useful to}} have a <b>fuzzy</b> private <b>matching</b> protocol that reports a match even if two elements are only similar instead of equal. We consider this <b>fuzzy</b> private <b>matching</b> problem, in a semi-honest environment. First we show that the original solution proposed by Freedman et al. [9] is incorrect. Subsequently we present two <b>fuzzy</b> private <b>matching</b> protocols. The first, simple, protocol has a large bit message complexity. The second protocol improves this, but here the client incurs a O(n) factor time complexity. ...|$|R
5000|$|When {{the user}} goes to {{translate}} a segment in the Editor pane, OmegaT automatically searches the [...]tmx files in the /tm/ hierarchy for previous translation pairs with similar source sentences and displays {{them in the}} <b>Fuzzy</b> <b>Matches</b> pane for insertion into the Editor pane with a keyboard shortcut. The Glossary and Dictionary panes provide similar automatic look-up functions for any glossaries and dictionaries in the corresponding named folders in the project. The optional Machine Translation pane shows machine translations from Google Translate and similar services.|$|R
