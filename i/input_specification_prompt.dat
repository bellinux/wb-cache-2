0|443|Public
40|$|A set of <b>input</b> <b>specifications</b> is {{designed}} to enable engineers and scientists, {{who may not be}} computer experts, to describe the finite element analysis (FEA) procedures for a new application. The input directs PIER, a code derivation/generation system being developed in Common Lisp, to produce either sequential or parallel FEA codes. The PIER input employs common terminology and notations as used in standard FEA texts and can be intermixed with f 77 statements. A user can transcribe a textbook-like FEA procedure description into PIER input form with relative ease. The <b>input</b> <b>specification</b> supports the definition of the element mesh, nodal properties, data storage scheme, symbolic derivations, and numerical algorithms for the solution procedures. The user can also group high-level statements into modules to facilitate parallelization. PIER has an FEA knowledge base which includes two different FEA formulations (element-by-element and assembled stiffness matrix). The design, usage, and implementation of the <b>input</b> <b>specification</b> are described. Examples are given to further illustrate how to prepare PIER <b>input</b> <b>specifications.</b> ...|$|R
5000|$|HTML {{forms were}} to be {{replaced}} by XForms, an XML-based user <b>input</b> <b>specification</b> allowing forms to be displayed appropriately for different rendering devices.|$|R
50|$|The {{output of}} each {{software}} development process stage {{can also be}} subject to verification when checked against its <b>input</b> <b>specification</b> (see the definition by CMMI below).|$|R
40|$|Abstract—This paper {{presents}} {{a novel approach}} to construct Java programs automatically from the <b>input</b> functional program <b>specifications</b> on natural numbers from the constructive proofs of the <b>input</b> <b>specifications</b> using an inductive theorem prover called Poiti′n. The construction of a Java program from the <b>input</b> functional program <b>specification</b> involves two phases. The theorem prover is used to construct a higher order functional (HOF) program from the <b>input</b> <b>specification</b> expressed as an existential theorem. A set of mapping rules for a Programming Language Translation System (PLTS) is defined for translating functional expressions to their semantic equivalent Java code. The generated functional program is translated into intermediate Java code {{in the form of}} a Java function using the PLTS module. The generated Java function requires a small refinement to obtain a syntactically correct Java function. This Java function is encapsulated within a user defined Java class as a member operation, which is invoked within a Java application class consisting of a main function by creating objects resulting in an executable Java program. The constructed functional program and the generated Java program both are correct with respect to the <b>input</b> <b>specification</b> as they produce the same output...|$|R
50|$|This article “describes the {{mathematical}} formulation, numerical implementation, and <b>input</b> <b>specifications</b> of rubble mound {{structures in the}} Coastal Modeling System (CMS) operated through the Surface-water Modeling System (SMS)” (Li, et al., 1). Describing the <b>input</b> <b>specifications,</b> the authors write, “Working with the SMS interface, users can specify rubble mound structures in the CMS by creating datasets for different structure parameters. Five datasets are required for this application” (Li, et al., 3) and “users should refer to Aquaveo (2010) for generating a XMDF dataset (*.h5 file) under the SMS” (Li, et al., 5).|$|R
40|$|Multi-processor {{architectures}} {{have gained}} interest recently {{because of their}} ability to exploit programmable silicon parallelism at acceptable power-efficiency figures. Despite the potential benefit they offer over single-processor architectures, it is unresolved how one can write compact and efficient programs for multiple parallel cores. In this paper, we propose the use of a synchronous hardware description language to program a network of small PicoBlaze processors. The partitioning of a multiprocessor program over multiple cores is straightforward because the <b>input</b> <b>specification</b> is fully parallel. A systematic transformation process converts the parallel <b>input</b> <b>specification</b> into concurrent Pico-Blaze programs. We demonstrate the mapping of a cryptographic design (AES) onto four picoblaze processors, showing almost linear speedup over an equivalent single-core design. 1...|$|R
40|$|Since the hardware-software {{partitioning}} {{problem is}} a key aspect of the codesign of digital electronic systems, extensive researches have been performed with diverse definitions of partitioning problems. However, existent partitioning solutions are not applicable to many real applications partly because of restricted <b>input</b> <b>specification</b> or insufficient constraints. In this paper, we aim to identify the remaining issues to be solved in order to enlarge the target applications of automatic partitioning. We define the problem space with two axes of <b>input</b> <b>specification</b> and partitioning constraints and position each previous hardware/software partitioning algorithm in that space. We also list some of future partitioning problems that extend both dimensions of the problem space. At last we solve one remaining partitioning problem and show the experimental results. ...|$|R
40|$|JAGUAR (JAva GUi for Applied Research) is a Java {{software}} tool providing an advanced text editor and {{graphical user interface}} (GUI) to manipulate DAKOTA (Design Analysis Kit for Optimization and Terascale Applications) <b>input</b> <b>specifications.</b> This document focuses on the features necessary for a user to use JAGUAR...|$|R
50|$|Programming ability was not essential. A short {{sequence}} of file and <b>input</b> <b>specifications</b> could be created and stored {{as a source}} member. A component called Data File Utility (DFU) could then be used to generate on-screen displays {{that could be used}} to create and edit files and print reports.|$|R
50|$|But, for the ISO 9000, the {{specified}} requirements are {{the set of}} specifications, as just mentioned above, that must be verified. A specification, as previously explained, {{is the product of}} a software development process phase which receives another <b>specification</b> as <b>input.</b> A <b>specification</b> is verified successfully when it correctly implements its <b>input</b> <b>specification.</b> All the specifications can be verified except the SRS because it is the first one (it can be validated, though). Examples: The Design Specification must implement the SRS; and, the Construction phase artifacts must implement the Design Specification.|$|R
2500|$|Wall AC to USB power adapter, {{which has}} <b>input</b> <b>{{specifications}}</b> of 100–240 Volt 50–60Hz 0.4 Amp AC, and output specifications of 5.3 Volt 2.0 Amp DC. [...] It is cylindrical {{roughly the size}} of a [...] "D" [...] battery with a foldable 2-prong AC connector and a Standard-A USB socket.|$|R
30|$|Two of our nonstatistical {{baseline}} {{systems are}} trivial: a Random strategy that selects a random permutation {{from the set}} of possible candidate sentences, and a Left-to-Right template-based approach that simply fills in the sentence template with matching constituents {{in the same order}} as they occur in the randomised <b>input</b> <b>specification.</b>|$|R
5000|$|Wall AC to USB power adapter, {{which has}} <b>input</b> <b>{{specifications}}</b> of 100-240 Volt 50-60 Hz 0.4 Amp AC, and output specifications of 5.3 Volt 2.0 Amp DC. It is cylindrical {{roughly the size}} of a [...] "D" [...] battery with a foldable 2-prong AC connector and a Standard-A USB socket.|$|R
40|$|We {{present a}} {{hardware}} synthesis system that accepts system-level specifiations in both Verilog HDL and C. A synchronous semantics is assumed for both languages {{in order to}} guarantee a uniform underlying model. The rationale for mixed <b>input</b> <b>specifications</b> is to support hardware/software co-design by allowing the migration to hardware of system modules originally described in the C language...|$|R
3000|$|The {{input to}} the system is a shallow, {{possibly}} under-specified sentence representation similar to the specification considered in the Surface Realisation Shared Task [12]. As a case study, however, the <b>input</b> <b>specification</b> is presently more limited {{in the sense that}} we will only consider sentences in active voice according to a standard < NP-VP-NP > template order. 4 [...]...|$|R
40|$|Abstract. Configuring a {{composite}} Web service by setting endpoints reduces {{the cost of}} development, but raises {{the probability of a}} request message triggering runtime execution failures. Previous works on validation of composite Web services are not useful because the application developer cannot modify atomic/composite services and the specifications needed for validation are not always available. Therefore, in this paper, we address two issues: predicting the executability of composite Web services for each request message, and acquiring <b>input</b> <b>specifications</b> to improve the prediction. To resolve these issues, we model atomic/composite services in a formal specification. Moreover, we apply constraint acquisition algorithm to acquire <b>input</b> <b>specifications</b> of atomic Web services. We conduct an experiment in which the proposed method is applied to {{a composite}} Web service in practical use. The result shows that our method can detect almost all messages that will trigger execution failure at a rather early stage of specification acquisition. ...|$|R
40|$|L 3 DGEWorld 2. 1, {{a product}} of the L 3 DGE Project [1]. L 3 DGEWorld is a data {{visualisation}} tool based on the OpenArena derivative of the Quake III Arena game engine, being used in the monitoring and control of networks. The report describes the <b>input</b> interface <b>specification</b> for conveying information to the L 3 DGEWorld server for real-time visualisation and representation as a number of different metrics, and the output abstraction layer through which actions are conveyed from within the virtual environment and made available to external output daemons to interpret and perform real world actions based upon. Index Terms — L 3 DGEWorld, <b>Input,</b> <b>Specification</b> I...|$|R
40|$|Abstract. A {{generation}} algorithm {{based on}} an active chart parsing algorithm is introduced {{which can be used}} in conjunction with a Shake and Bake machine translation system. A concise Prolog implementation of the algorithm is provided, and some performance comparisons with a shift-reduce based algorithm are given which show the chart generator is much more efficient for generating all possible sentences from an <b>input</b> <b>specification.</b> ...|$|R
40|$|This paper {{describes}} a new loop based scheduling algorithm. The algorithm aims at reducing the runtime processing complexity of path based scheduling techniques. It partitions the control flow graph of the <b>input</b> <b>specification</b> into subgraphs before scheduling the different paths of each subgraph. Benchmark tests {{as well as}} simulation results on the scheduling algorithm indicate that the proposed algorithm results in sizeable reduction in runtim...|$|R
40|$|This paper {{describes}} the <b>input</b> <b>specification</b> {{language of the}} WAG Sentence Generation system. The input is {{described in terms of}} Halliday's (1978) three meaning components, ideational meaning (the propositional content to be expressed), interactional meaning (what the speaker intends the listener to do in making the utterance), and textual meaning (how the content is structured as a message, in terms of theme, reference, etc.) ...|$|R
40|$|Abstract—Prototyping of third-order sigma-delta analog {{to digital}} {{converters}} (Σ ∆ ADCs) {{has been presented}} in the paper. The method is based on implementation of field programmable analog arrays (FPAA) to configure and reconfigure proposed circuits. Three third-order Σ ∆ ADC structures have been con-sidered. The circuit characteristics have been measured and then {{the structure of the}} converters have been reconfigured to satisfy <b>input</b> <b>specifications.</b> Keywords—Sigma-delta converter, A/D converter, FPAA, MASH structure...|$|R
40|$|Salinas {{provides}} a massively parallel implementation of structural dynamics finite element analysis, required for high fidelity, validated models used in modal, vibration, static and shock analysis of weapons systems. This document {{provides a}} users {{guide to the}} input for Salinas. Details of <b>input</b> <b>specifications</b> for the different solution types, output options, element types and parameters are included. The appendices contain detailed examples, and instructions for running the software on parallel platforms...|$|R
40|$|This thesis {{developed}} the panel DEA model {{to measure the}} relative efficiency and the productivity change of 17 faculties in Universiti Teknologi MARA (UiTM), Shah Alam, covering the period, 2000 - 2005. Three types of approaches were used under the panel DEA model, namely, the contemporaneous, the inter-temporal and the productivity approaches. The first two approaches were incorporated under the two-stage approach to measure efficiency and {{to determine the effects}} of selected external factors on efficiency performance. To enhance the robustness of the results, the DEA models were constructed based on three alternative data sets which consisted of different <b>input</b> <b>specifications</b> (DEA 1, DEA 2 and DEA 3). In the first stage of the two-stage approach, two different types of DEA models were fitted on the three data sets. First, the original DEA models were used to compute the efficiency scores. Second, the Super Efficiency DEA models were applied to detect the outliers along the frontiers of the original DEA models. However, when a sensitivity test using the Spearman’s Rank Correlation Coefficient was applied, the results showed that the original DEA models were not sensitive to the existence of the outliers along their frontiers. In addition, the original DEA models were also found not to be sensitive to three different <b>input</b> <b>specifications.</b> Therefore, the original DEA models were considered to be robust and appropriate to be used to measure efficiency. Overall, the results showed that the efficiency scores from the three <b>input</b> <b>specifications</b> were consistent and their means of annual efficiency followed the same trend. Using trend analysis, it was shown that UiTM faculties displayed a mixture of patterns in their efficiency performance. A group of 8 faculties exhibited positive trend with non-science faculties consistently performed better than the nonscience faculties. Meanwhile, in the second stage of the two-stage approach, the influences of four selected nondiscretionary factors (age of faculties, percentage of associate professors and above, percentage of part-time students and ratio of non-academic staff to academic staff) on the efficiency of the faculties were determined using two statistical models, namely, OLS Regression and Tobit Regression. Both methods consistently show that the age of faculties has no effect on the efficiency performance across all <b>input</b> <b>specifications.</b> However, the percentage of associate professors and above and the staff ratio were found to be significant under DEA 1 and DEA 3 specifications. The first variable was negatively related but the second variable was positively related with efficiency. Meanwhile, only the percentage of parttime students was found to be significant and positively correlated with the efficiency scores under all <b>input</b> <b>specifications.</b> In the second approach of the panel DEA model, the DEA based Malmquist Total Factor Productivity (TFP) Index was used to measure the productivity change of the 17 UiTM faculties during the study period. Using DEA 1 and DEA 2 specifications, it was found that on the average, the 17 UiTM faculties experienced a decrease in their productivity levels over the study period. This was due to the decrease in the technological change but with slight improvement in the technical efficiency...|$|R
40|$|Conversion of the {{mechanical}} energy stored in vibrations into useful electrical energy is possible using three principles: electromagnetic, electrostatic and piezoelectric conversion. In order to build the appropriate device for a given application, a unifying model is proposed for these three principles. A methodology for comparison is presented based on this model in order to match the generator type to the <b>input</b> <b>specifications</b> (frequency, amplitude) and to the requirements at the electrical output, such as load impedance and voltage...|$|R
40|$|The PERMBASE {{project has}} {{provided}} a prototype environment that proves the feasibility of automatically generating performance models directly from system designs. The prototype uses UML as the <b>input</b> <b>specification</b> language, performs some transformations and basic model checking on the design and generates a performance model that {{is supported by a}} discrete event simulation engine. This position paper gives a brief introduction to the project, and defines the future aims and resultant research related to the project conclusions. 1...|$|R
30|$|It is {{question}} (3) {{that poses}} {{the most significant}} challenge to our evaluation work (and indeed to the evaluation of any language-dependent task). As discussed in Sect.  2, differences in target language and <b>input</b> <b>specification</b> make a direct comparison to, e.g., {{the participants in the}} Surface Realisation Shared Task [12] or to SimpleNLG [19] inappropriate. Thus, in what follows we will consider a number of simple, nonstatistical baseline systems, and also a rule-based realisation engine developed as an independent project [34].|$|R
40|$|Abstraction is {{a useful}} tool in verification, often {{allowing}} the proof of correctness of a large and complex system to be reduced to showing the correctness of a much smaller simpler system. We use the Nuprl theorem prover to verify the correctness of a simple but commonly occurring abstraction. From the formal proof, we extract a program that succeeds when the abstraction method is applicable to the concrete <b>input</b> <b>specification</b> and in this case, computes the abstracted system specification. One of the mai...|$|R
40|$|Abstract—We {{present a}} {{methodology}} and an optimization {{framework for the}} synthesis of on-chip communication through the assembly of components such as interfaces, routers, buses and links, from a target library. Models for functionality, cost, and performance of each element are captured in the library together with their composition rules. We develop a mathematical framework to model communication {{at different levels of}} abstraction from the point-to-point <b>input</b> <b>specification</b> to the library elements and the final implementation. Index Terms—Communication synthesis, System-on-chip, Interconnect synthesis, Performance optimization...|$|R
50|$|The non-programmer {{could create}} a short {{sequence}} of file and <b>input</b> <b>specifications</b> and store them as a source member. A component called Data File Utility could then be used to generate on-screen displays for creating and edit files and print reports. It was not quite the equal of say, Access 2007, but in twenty minutes a file and a report could be designed Alternatively, define the data files and have the system generate a simple report program, using the Create Auto Report command.|$|R
40|$|A {{generation}} algorithm {{based on}} an active chart parsing algorithm is introduced {{which can be used}} in conjunction with a Shake and Bake machine translation system. A concise Prolog implementation of the algorithm is provided, and some performance comparisons with a shift-reduce based algorithm are given which show the chart generator is much more efficient for generating all possible sentences from an <b>input</b> <b>specification.</b> Comment: 12 pages, uuencoded, unix compressed postscript, to appear in the Proceedings of AI' 96, the 11 th Canadian Conference on Artificial Intelligenc...|$|R
40|$|By {{focusing}} on the family of assignment problems (such as graph colouring, n-Queens, etc), we show how to adapt D. R. Smith's Kids approach for the synthesis of constraint programs, rather than applicative Refine programs with explicit constraint propagation and pruning code. Synthesis is guided by a global search program schema and can be fully automated with little effort, due to some innovative ideas. CLP(Sets) programs are equivalent in expressiveness to our <b>input</b> <b>specifications.</b> After optimisations, the synthesised programs would be competitive with hand-crafted ones...|$|R
40|$|An {{optimization}} method, {{based on}} linear programming, {{has been developed}} which determines the enrichment distribution in a multizone reactor such that the desired power distribution is achieved at BOL, {{as well as the}} poison distribution during reactor operation such that the reactor is kept critical and the desired power distribution is retained. For the numerical implementation of the method, the CYPRUS code has been written. Results of the application of the method are presented and <b>input</b> <b>specifications</b> {{for the use of the}} code are described...|$|R
40|$|This paper {{adopts a}} state {{estimator}} and a meter placement approach {{to improve the}} operation of medium voltage distribution grids. In the framework different <b>input</b> <b>specifications</b> are designated. Moreover, three common activities during normal operation are analyzed in detail: voltage regulation, switching consequence assessment, and loss estimation. To evaluate the performance of these activities, several indices are defined. To demonstrate the improvements that the framework may gain over the currently used operation strategy, an extensive case study is performed on a typical European distribution grid...|$|R
40|$|The 7 by 10 foot {{high speed}} tunnel {{performs}} {{a wide range}} of tests employing a variety of model installation methods. To support the reduction of static data from this facility, a generalized wind tunnel data reduction program had been developed for use on the Langley central computer complex. The capabilities of a version of this generalized program adapted for real time use on a dedicated on-site computer are discussed. The <b>input</b> <b>specifications,</b> instructions for the console operator, and full descriptions of the algorithms are included...|$|R
5000|$|Simplified {{molecular}} <b>input</b> line entry <b>specification</b> (SMILES notation) ...|$|R
40|$|A scheme {{has been}} {{developed}} for the movement of multiblock, structured grids due to surface deformation arising from aeroelastics, control surface movement, or design optimization. Elements of the method include a blending of a surface spline approximation and nearest surface point movement for block boundaries. Transfinite interpolation is employed for volume grid deformation. The scheme is demonstrated {{on a range of}} simple and complex aeroelastic aircraft applications using Navier-Stokes computational fluid dynamics and modal structural analyses on parallel processors. Results are robust and accurate, requiring only minimal user <b>input</b> <b>specification...</b>|$|R
