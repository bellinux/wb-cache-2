3025|6592|Public
25|$|Find an {{efficient}} (high-performance and fault tolerant) method to enforce Global serializability (global conflict serializability) in a heterogeneous <b>distributed</b> <b>environment</b> of multiple autonomous database systems. The database systems may employ different concurrency control methods. No limitation should {{be imposed on}} the operations of either local transactions (confined to a single database system) or global transactions (span two or more database systems).|$|E
5000|$|Performance of {{projects}} in an international, interdisciplinary and <b>distributed</b> <b>environment</b> ...|$|E
50|$|XML-based web {{services}} offer {{a way to}} access the diverse services and applications in a <b>distributed</b> <b>environment.</b>|$|E
40|$|This {{technical}} report {{consists of three}} related papers {{in the area of}} <b>distributed</b> programming <b>environments.</b> Incremental Attribute Evaluation in <b>Distributed</b> Language-Based <b>Environments</b> presents algorithms that extend existing technology for the generation of single-user language-based editors from attribute grammars to the cases of multiple-user concurrent and <b>distributed</b> <b>environments.</b> Multi-User <b>Distributed</b> Language-Based <b>Environment,</b> an extended abstract, provides additional information on how to apply the algorithms. Reliability in <b>Distributed</b> Programming <b>Environments</b> presents additional algorithms that extend our results to unreliable networks...|$|R
40|$|Cooperative {{software}} development in <b>distributed</b> <b>environments</b> has become common because of recent popularization of wide area network. In such a development fashion, reuse of software components is necessary {{as well as}} in personal or local development, and object-oriented technology is important as a basis. Reuse of object-oriented software components in <b>distributed</b> <b>environments,</b> however, has not become common yet as has been expected. This originates in not only difficulty in understanding characteristics of object-oriented software components whose structures are complicated, but also absence of support mechanisms for obtaining components in <b>distributed</b> <b>environments.</b> In this paper, first of all, we discuss what are to be handled as reusable object-oriented software components, then propose a management mechanism for promoting reuse of the components in <b>distributed</b> <b>environments...</b>|$|R
5000|$|... saga::sd- {{interface}} {{for service}} discovery in <b>distributed</b> <b>environments</b> ...|$|R
5000|$|Extreme {{programming}} (XP) {{was designed}} for a environment where all developers were co-located, {{which is not the}} case for Distributed Software Development. Furthermore, XP is heavily reliant on continuous communication between stakeholders and developers, which makes communication one of the five core values of XP. Consequently, communication on <b>distributed</b> <b>environment</b> is of utter importance for a XP development environment [...] and should be taken into account when applying this methodology on a <b>distributed</b> <b>environment.</b>|$|E
5000|$|Market {{economy is}} similar to insect-like swarm intelligence. There are {{autonomous}} agents in a <b>distributed</b> <b>environment,</b> but each individual only sees his own immediate benefit.|$|E
5000|$|As {{explained}} {{earlier on}} Success factors, developing software in a <b>distributed</b> <b>environment</b> brings several advantages, {{which is also}} a factor for companies starting to develop software globally, such as: ...|$|E
50|$|Issue {{trackers}} {{implementing the}} Volere Requirements template {{have been used}} successfully in <b>distributed</b> <b>environments.</b>|$|R
5000|$|Support <b>distributed</b> {{execution}} <b>environment</b> (<b>distributed</b> test bed) ...|$|R
5|$|The {{language}} {{is intended for}} use in developing software components suitable for deployment in <b>distributed</b> <b>environments.</b>|$|R
50|$|In a <b>distributed</b> <b>environment</b> where {{recoverable}} {{data are}} not partitioned among atomic commitment protocol participants, no such automatic resolution exists, and distributed deadlocks need to be resolved by dedicated techniques.|$|E
50|$|Note that PABR {{can only}} {{consider}} linear impairments. The nonlinear impairments, {{on the other}} hand, {{would not be possible}} to estimate in a <b>distributed</b> <b>environment</b> due to their requirement of global traffic knowledge.|$|E
50|$|REPLAY {{is written}} in Java, open source and {{oriented}} towards standards wherever possible. It is modular in design and envisaged to run on a singular machine {{as well as in}} a <b>distributed</b> <b>environment.</b>|$|E
5000|$|Problem-solving in <b>distributed</b> <b>environments,</b> ranging across Internet-based {{information}} systems, grids, sensor-based information networks, {{and mobile}} and wearable information appliances.|$|R
40|$|This {{study is}} {{undertaken}} {{within the context}} of MODELS, Moving to <b>Distributed</b> <b>Environments</b> for Library Services. The standards for serials holdings and their implementation in existing automated systems are considered not in the abstract but {{within the context of}} their usefulness in the <b>distributed</b> library <b>environment...</b>|$|R
40|$|With {{the advent}} of high speed networks, {{distributed}} cluster computing and metacomputing have assumed an enormous interest. However, software methods and techniques to make the full potential of these <b>distributed</b> <b>environments</b> available, are not yet mature. In this paper, we focus on dynamic load balancing of resources and applications {{as one of the}} crucial techniques to optimize performance in <b>distributed</b> <b>environments.</b> Some design and implementation details are described, and early experimental results are presented...|$|R
5000|$|A {{critical}} {{problem in}} deploying distributed systems is monitoring and debugging concurrently running processes. An SOAIF should provide native support for tracing, logging, and monitoring any process or service across the <b>distributed</b> <b>environment.</b>|$|E
50|$|Open Agent Architecture or OAA {{for short}} is a {{framework}} for integrating a community of heterogeneous software agents in a <b>distributed</b> <b>environment.</b> It is also a research project of the SRI International Artificial Intelligence Center.|$|E
50|$|Thanks to the {{concepts}} of asynchronous calls, futures, and no data sharing, an application written with ProActive doesn't need any structural change—actually, hardly any change at all—whether it runs in a sequential, multi-threaded, or <b>distributed</b> <b>environment.</b>|$|E
50|$|OPXs {{are used}} in <b>distributed</b> <b>environments,</b> serving {{locations}} that are {{too far from the}} PBX to be served by on-premises wiring.|$|R
40|$|Content-based {{retrieval}} allows to {{find information}} by searching about its content rather than about attributes like keywords. Based {{on the current}} state of content-based image and video retrieval, this paper addresses this problem in <b>distributed</b> <b>environments</b> with large, heterogeneous, and dynamically changing data repositories. Besides motivation, it describes an appropriate system architecture, and outlines an automatic and generic retrieval approach based on invariants. Keywords. Content-based retrieval, image retrieval, <b>distributed</b> <b>environments,</b> dynamic data repositories, invariant image transformations. 1...|$|R
40|$|The {{objective}} {{of this paper is}} to provide an economic and commercial context for QoS research in open <b>distributed</b> <b>environments.</b> The analyses are based on a telecommunications value chain model. The model is used to define possible roles for telecommunications companies, migrating from traditional telephony network operators towards privatised ICT companies in a new economy. Based on these developments, we advocate R&D activities aiming at standardised concepts and engineering principles to establish and control QoS in open <b>distributed</b> <b>environments...</b>|$|R
50|$|Phoromatic is an web-based remote test {{management}} {{system for the}} Phoronix Test Suite. It does automatic scheduling of tests. It is aimed at the enterprise. It can manage multiple test nodes simultaneously within a test farm or <b>distributed</b> <b>environment.</b>|$|E
50|$|In 2005 Scimore was created, and the {{database}} was separated {{into a separate}} company. The major improvements in 2006 were the SQL to DQL translator and new distribution algorithms, allowing for linear scalability in <b>distributed</b> <b>environment.</b> The embedded version where launched.|$|E
50|$|The largest online directories, such as Google and Yahoo, utilize {{thousands}} of computers to process billions of website documents using web crawlers or spiders (software), returning results for {{thousands of}} searches per second. Processing high query volumes requires software to run in a <b>distributed</b> <b>environment</b> with redundancy.|$|E
5000|$|... in <b>distributed</b> <b>environments</b> {{with high}} {{availability}} requirements and where desk-side technical support is not readily available, such as branch office and retail environments.|$|R
40|$|Today’s {{building}} industry not only demands {{more and more}} reduced construction time on building site, but also an advanced and mostly construction attendant design phase. Even though there is software available to support design processes in <b>distributed</b> <b>environments,</b> most applications only support simple document based exchange of information. In this paper a knowledge based system is presented to support cooperative, comprehensive design processes in <b>distributed</b> <b>environments.</b> The presented research project is financially supported by the German Research Community (DFG – Deutsche Forschungsgemeinschaft) ...|$|R
40|$|In this paper, {{we present}} a generic matrix class in Java and a runtime {{environment}} with continuous compilations aiming to support automatic parallelization of sparse computations on <b>distributed</b> <b>environments.</b> Our package comes {{with a collection of}} matrix classes including operators of dense matrix, sparse matrix, and parallel matrix on <b>distributed</b> memory <b>environments.</b> In our environment, a program such as conjugate gradient solver is written by users with high-level generic matrix notations in Java. At runtime, with the help of profiling information and cost model, our runtime system employs continuous compilation schemes to rewrite the matrix notations into corresponding parallel operations. Our system is particularly useful in optimizing sparse computations on <b>distributed</b> <b>environments.</b> Our runtime compilation environment selects compression and distribution schemes for sparse matrices on <b>distributed</b> memory <b>environments</b> according to the access patterns of the programs and the non-zero [...] ...|$|R
5000|$|... #Caption: Google Code Jam {{structure}} (2016). Numbers denote {{how many}} people advance to the next round. Colors denote format of the competition: yellow - you run your code locally and submit results and the source, blue - you submit your code and Google runs it in a <b>distributed</b> <b>environment.</b>|$|E
5000|$|In {{addition}} to anticipating information needed for decision makings, R-CAST agents also collaborate to seek and fuse {{information in a}} <b>distributed</b> <b>environment</b> such as Service-oriented architecture. R-CAST is developed at the Intelligent Agents Laboratory in the College of Information Sciences and Technology at Pennsylvania State University, led by Dr. John Yen.|$|E
50|$|This idea {{is further}} {{extended}} in generalized expectation maximization (GEM) algorithm, in which is sought only {{an increase in}} the objective function F for both the E step and M step as described in the As a maximization-maximization procedure section. GEM is further developed in a <b>distributed</b> <b>environment</b> and shows promising results.|$|E
40|$|Abstract. We {{present an}} {{approach}} to approximate reasoning by agents in <b>distributed</b> <b>environments</b> based on calculi of information granules. Approximate reasoning schemes are basic schemes of information granule construction. An important property of such schemes is their robustness with respect to input deviations. In <b>distributed</b> <b>environments,</b> such schemes are extended to rough neural networks that transform information granules into information granules rather than vectors of real numbers into (vectors of) real numbers. Problems of learning in rough neural networks from experimental data and background knowledge are outlined. ...|$|R
40|$|Abstract. Speedup {{is one of}} {{the main}} {{performance}} characteristics of distributed applications. It is usually defined as the ratio of application’s execution time on a single processor to the execution time, of the same workload, on a system composed on P processors. This chapter analyzes, in very general terms, the speedup that can be achieved in <b>distributed</b> <b>environments</b> and shows why some applications scale very well with the number of processors while others have strict limitations on the speedup that can be achieved in <b>distributed</b> <b>environments...</b>|$|R
40|$|This study characterizes and assesses {{alternative}} approaches to software component interoperability in <b>distributed</b> <b>environments</b> typical of C 4 ISR systems. Interoperability {{is the ability}} of systems to provide services to and accept services from other systems, and to use the services so exchanged to enable them to operate effectively together. This study characterizes and assesses {{alternative approaches}} to software component interoperability in <b>distributed</b> <b>environments.</b> Candidate approaches include wrappers, translators, data mediators, replicators, messaging, Object Request Broker (ORBs), and JINI for legacy systems and new systems...|$|R
