314|177|Public
2500|$|... by Peter Kelly, Paul Coddington, and Andrew Wendelborn; {{mentions}} <b>graph</b> <b>reduction</b> as {{a common}} means of evaluating lambda expressions and discusses the applicability of lambda calculus for distributed computing (due to the Church–Rosser property, which enables parallel <b>graph</b> <b>reduction</b> for lambda expressions).|$|E
50|$|A <b>graph</b> <b>reduction</b> {{machine is}} a {{special-purpose}} computer built to perform combinator calculations by <b>graph</b> <b>reduction.</b>|$|E
50|$|Notice that {{evaluation}} {{now only}} requires four steps. Outermost <b>graph</b> <b>reduction</b> {{is referred to}} as lazy evaluation and innermost <b>graph</b> <b>reduction</b> {{is referred to as}} eager evaluation.|$|E
40|$|Abstract. Dynamical {{networks}} {{are characterized by}} large complex graphs of interactions. We suggest a procedure of simplifying the structure of such graphs while preserving the spectrum of their weighted adjacency matrix. As the process of isospectral <b>graph</b> <b>reductions</b> maintains the spectrum of the ma-trix up to some known set {{it is possible to}} estimate the spectrum of the original matrix by considering Gershgorin-type estimates associated with the reduced matrix. The main result of this paper is that eigenvalue estimates improve for all known methods as the matrix size is reduced. Moreover, our procedure of isospectral <b>graph</b> <b>reductions</b> is very flexible and in particular can be used to obtain better eigenvalue estimates of a matrix with complex valued entries to whatever degree is desired. 1...|$|R
40|$|AbstractIn {{this paper}} {{properties}} of the <b>reduction</b> <b>graphs</b> of lambda terms are studied and some classes of <b>reduction</b> <b>graphs</b> are characterized. Condensed <b>reduction</b> <b>graphs</b> obtained by dividing out ‘cyclic equivalence’, and spectra, the partially ordered set of all reductions, are also considered. The partial ordering in the spectrum {{can be seen as}} a measure for the ‘significance’ of a reduction; reductions to the normal form and (more generally) cofinal reductions are the most significant reductions. The spectrum is proved to be the completion of the condensed <b>reduction</b> <b>graph...</b>|$|R
40|$|Formal {{models for}} gene {{assembly}} in ciliates have been developed, {{in particular the}} string pointer reduction system (SPRS) and the <b>graph</b> pointer <b>reduction</b> system (GPRS). The <b>reduction</b> <b>graph</b> is a valuable tool within the SPRS, revealing much information about how gene assembly is performed for a given gene. The GPRS is more abstract than the SPRS and not all information present in the SPRS is retained in the GPRS. As a consequence the <b>reduction</b> <b>graph</b> cannot be defined for the GPRS in general, but we show {{that it can be}} defined (in an equivalent manner as defined for the SPRS) if we restrict ourselves to so-called realistic overlap graphs. Fortunately, only these graphs correspond to genes occurring in nature. Defining the <b>reduction</b> <b>graph</b> within the GPRS allows one to carry over several results within the SPRS that rely on the <b>reduction</b> <b>graph.</b> ...|$|R
5000|$|Now {{evaluation}} with outermost <b>graph</b> <b>reduction</b> {{can proceed}} as follows: ...|$|E
5000|$|<b>Graph</b> <b>reduction.</b> Removal {{of one or}} more nodes from a graph using graph transformations.|$|E
50|$|As for trees, {{outermost}} and innermost reduction {{also applies}} to graphs. Hence we have <b>graph</b> <b>reduction.</b>|$|E
50|$|Thus {{blossoms}} can be contracted {{and search}} {{performed in the}} contracted <b>graphs.</b> This <b>reduction</b> {{is at the heart}} of Edmonds algorithm.|$|R
3000|$|... [...]) {{obtained}} by applying Algorithm 3 {{is the same}} as the cost of the shortest path calculated by Dijkstra’s algorithm in the original <b>graph</b> (without <b>reduction).</b>|$|R
40|$|We {{speed up}} the Monte Carlo {{simulation}} of static graph reliability models by adding <b>graph</b> <b>reductions</b> to zero-variance importance sampling (ZVIS) approximation techniques. ZVIS approximation samples the status of links sequentially, and at each step we check if series-parallel reductions can be performed. We present two variants of the algorithm and describe their respective advantages. We show that the method satisfies robustness properties as the reliability of links increases. We illustrate theoretically on small examples and numerically on large ones the gains that can be obtained, {{both in terms of}} variance and computational time. ...|$|R
5000|$|Residual node. In any {{contemplated}} {{process of}} <b>graph</b> <b>reduction,</b> the nodes to be {{retained in the}} new graph are called residual nodes.|$|E
50|$|The usual {{implementation}} strategy for lazy evaluation in functional languages is <b>graph</b> <b>reduction.</b> Lazy evaluation {{is used by}} default in several pure functional languages, including Miranda, Clean, and Haskell.|$|E
50|$|The key {{innovation}} of LML was {{to demonstrate}} how to compile a lazy functional language. Until then, lazy languages had been implemented via interpreted <b>graph</b> <b>reduction.</b> LML compiled to G-machine code.|$|E
40|$|The {{biological}} process of gene assembly has been modeled based on {{three types of}} string rewriting rules, called string pointer rules, defined on so-called legal strings. It {{has been shown that}} <b>reduction</b> <b>graphs,</b> graphs that are based on the notion of breakpoint graph in the theory of sorting by reversal, for legal strings provide valuable insights into the gene assembly process. We characterize which legal strings obtain the same <b>reduction</b> <b>graph</b> (up to isomorphism), and moreover we characterize which graphs are (isomorphic to) <b>reduction</b> <b>graphs.</b> Comment: 24 pages, 13 figure...|$|R
40|$|The {{control flow}} of {{programs}} can be represented by directed graphs. In this paper we provide a uniform and detailed formal basis for control flow graphs combining known definitions and results with new aspects. Two <b>graph</b> <b>reductions</b> are defined using only syntactical information about the graphs, but no semantical information about the represented programs. We prove some properties of reduced graphs and also about the paths in reduced graphs. Based on graphs, we define statement coverage and branch coverage such that coverage notions correspond to node coverage, and edge coverage, respectively...|$|R
40|$|Abstract—Control flow graphs are a {{well-known}} {{representation of the}} sequential control flow structure of programs with a multitude of applications. Not only single functions but also sets of functions or complete programs can be modeled by control flow graphs. In this case {{the size of the}} graphs can grow considerably and thus makes it difficult for software engineers to analyze the control flow. <b>Graph</b> <b>reductions</b> are helpful in this situation. In this paper we define reductions to subsets of nodes. Since executions of programs are represented by paths through the control flow graphs, paths should be preserved. Furthermore, the composition of reductions makes a stepwise analysis approach possible. I...|$|R
50|$|In {{computer}} science, <b>graph</b> <b>reduction</b> implements {{an efficient}} version of non-strict evaluation, an evaluation strategy where the arguments to a function are not immediately evaluated. This form of non-strict evaluation {{is also known}} as lazy evaluation and used in functional programming languages. The technique was first developed by Chris Wadsworth in 1971.|$|E
50|$|David A. Turner (born 1946) is a British {{computer}} scientist. He is {{best known}} for designing and implementing the first functional programming languages based on lazy evaluation, combinator <b>graph</b> <b>reduction,</b> and polymorphic types: SASL (1972), KRC (1981), and the commercially supported Miranda (1985). Miranda had a strong influence on the later Haskell programming language.|$|E
5000|$|Combinator <b>graph</b> <b>reduction</b> is a {{fundamental}} implementation technique for functional programming languages, in which a program is converted into a combinator representation which is mapped to a directed graph data structure in computer memory, and program execution then consists of rewriting parts of this graph ("reducing" [...] it) so as to move towards useful results.|$|E
40|$|Using {{extensions}} of linear algebra concepts to Reproducing Kernel Hilbert Spaces (RKHS), we define a unifying framework for random walk kernels on <b>graphs.</b> <b>Reduction</b> to a Sylvester equation {{allows us to}} compute many of these kernels in O(n 3) worst-case time. This includes kernels whose previous worst-case time complexity was O(n 6), such as the geometric kernels of G¨artner et al. [1] and the marginal graph kernels of Kashima et al. [2]. Our algebra in RKHS allow us to exploit sparsity in directed and undirected graphs more effectively than previous methods, yielding sub-cubic computational complexity when combined with conjugate gradient solvers or fixed-point iterations. Experiments on graphs from bioinformatics and other application domains show that our algorithms are often more than 1000 times faster than existing approaches...|$|R
40|$|We {{perform a}} {{detailed}} investigation of Bipartite Field Theories (BFTs), a general class of 4 d N = 1 gauge theories which {{are defined by}} bipartite graphs. This class of theories is considerably expanded by identifying {{a new way of}} assigning gauge symmetries to graphs. A new procedure is introduced {{in order to determine the}} toric Calabi-Yau moduli spaces of BFTs. For graphs on a disk, we show that the matroid polytope for the corresponding cell in the Grassmannian coincides with the toric diagram of the BFT moduli space. A systematic BFT prescription for determining <b>graph</b> <b>reductions</b> is presented. We illustrate our ideas in infinite classes of BFTs and introduce various operations for generating new theories from existing ones. Particular emphasis is given to theories associated to non-planar graphs...|$|R
40|$|Let X be a {{projective}} curve over {{a global}} field K. Gross and Schoen defined a modified diagonal cycle Δ on X 3, {{and showed that}} the height $${langle Delta, Delta rangle}$$ is defined in general. Zhang recently proved a formula which describe $${langle Delta, Delta rangle}$$ {{in terms of the}} self pairing of the admissible dualizing sheaf and the invariants arising from the <b>reduction</b> <b>graphs.</b> In this note, we calculate explicitly those graph invariants for the <b>reduction</b> <b>graphs</b> of curves of genus 3 and examine the positivity of $${langle Delta, Delta rangle}$$. We also calculate them for so-called hyperelliptic graphs. As an application, we find a characterization of hyperelliptic curves of genus 3 by the configuration of the <b>reduction</b> <b>graphs</b> and the property $${langle Delta, Delta rangle = 0 }$$...|$|R
50|$|In {{computer}} science, {{a linear}} graph grammar (also a connection <b>graph</b> <b>reduction</b> system or a port graph grammar) is {{a class of}} graph grammar on which nodes {{have a number of}} ports connected together by edges and edges connect exactly two ports together. Interaction nets are a special subclass of linear graph grammars in which rewriting is confluent.|$|E
5000|$|The {{concept of}} a <b>graph</b> <b>reduction</b> that allows {{evaluated}} values to be shared was first developed by Chris Wadsworth in his 1971 Ph.D. dissertation. This dissertation was cited by Peter Henderson and James H. Morris Jr. in 1976 paper, “A lazy evaluator” [...] that introduced the notion of lazy evaluation. In 1976 David Turner incorporated lazy evaluation into SASL using combinators.SASL was an early functional programming language first developed by Turner in 1972.|$|E
5000|$|The MALPAS toolset {{comprises}} five {{specific analysis}} tools that address various properties of a program. The input to the analysers {{needs to be}} written in MALPAS Intermediate Language (IL); this can be hand-written or produced by an automated translation tool from the original source code. Automatic translators exist for common high-level programming languages such as Ada, C and Pascal, as well as assembler languages such as Intel 80*86, PowerPC and 68000. The IL text is input into MALPAS via the [...] "IL Reader", which constructs a directed graph and associated semantics for the program under analysis. The graph is reduced using a series of <b>graph</b> <b>reduction</b> techniques.|$|E
40|$|Abstract: We {{perform a}} {{detailed}} investigation of Bipartite Field Theories (BFTs), a general class of 4 d N = 1 gauge theories which {{are defined by}} bipartite graphs. This class of theories is considerably expanded by identifying {{a new way of}} assigning gauge symmetries to graphs. A new procedure is introduced {{in order to determine the}} toric Calabi-Yau moduli spaces of BFTs. For graphs on a disk, we show that the matroid polytope for the corresponding cell in the Grassmannian coincides with the toric diagram of the BFT moduli space. A systematic BFT prescription for determining <b>graph</b> <b>reductions</b> is presented. We illustrate our ideas in infinite classes of BFTs and introduce various operations for generating new theories from existing ones. Particular emphasis is given to theories associated to non-planar graphs. ar X i...|$|R
40|$|In {{this paper}} {{we present a}} general {{procedure}} that allows for the reduction or expansion of any network (considered as a weighted graph). This procedure maintains the spectrum of the network's adjacency matrix up {{to a set of}} eigenvalues known beforehand from its graph structure. This procedure can be used to establish new equivalence relations on the class of all weighted graphs (networks) where two graphs are equivalent if they can be reduced to the same graph. Additionally, dynamical networks (or any finite dimensional, discrete time dynamical system) can be analyzed using isospectral transformations. By so doing we obtain stronger results regarding the global stability (strong synchronization) of dynamical networks when compared to other standard methods. Comment: Contains extensions of some results from the previous Arxiv submission "Isospectral <b>Graph</b> <b>Reductions...</b>|$|R
3000|$|The proof, to be {{detailed}} in the Section ‘Co-NP-completeness results’, is a reduction from 3 -EDGE-COLOURABILITY OF CUBIC GRAPHS which was {{proved to be}} NP-complete by Holyer [4]. We recall that a cubic graph is a 3 -regular <b>graph.</b> The <b>reduction</b> also proves that it is co-NP-complete to decide if Γ [...]...|$|R
40|$|<b>Graph</b> <b>reduction</b> is an {{implementation}} {{technique for}} the lazy l-calculus. It {{has been used}} to implement many non-strict functional languages, such as lazy ML, Gofer and Miranda. Parallel <b>graph</b> <b>reduction</b> allows for concurrent evaluation. In this paper, we present parallel <b>graph</b> <b>reduction</b> as a Chemical Abstract Machine, and show that the resulting testing semantics is adequate wrt testing equivalence for the lazy l-calculus. We also present a π-calculus implementation of the <b>graph</b> <b>reduction</b> machine, and show that the resulting testing semantics is also adequate...|$|E
40|$|Optimal <b>graph</b> <b>reduction</b> {{technology}} for the -calculus, as developed by Lamping, with modifications by Asperti, Gonthier, Abadi, and L'evy, has a well-understood local dynamics based on a standard menagerie of reduction rules, {{as well as a}} global context semantics based on Girard's geometry of interaction. However, the global dynamics of <b>graph</b> <b>reduction</b> has not been subject to careful investigation. In particular, graphs lose their structural resemblence to -terms after only a few <b>graph</b> <b>reduction</b> steps, and little is known about <b>graph</b> <b>reduction</b> strategies that maintain efficiency or structure. While the context semantics provides global information about the computation, its use as part of a reduction strategy seems computationally infeasible. We propose a tractable <b>graph</b> <b>reduction</b> strategy that preserves computationally relevant global structure, and allows us to efficiently bound the computational resources needed to implement optimal reduction. A simple canonical representation for gr [...] ...|$|E
40|$|An {{efficient}} evaluation {{technique is}} examined for lazy functional programs based on combinator <b>graph</b> <b>reduction.</b> <b>Graph</b> <b>reduction</b> {{is widely believed}} to be slow and inefficient, but an abstract machine called the Threaded Interpretive <b>Graph</b> <b>Reduction</b> Engine (TIGRE) achieves a substantial speedup over previous reduction techniques. The runtime system of TIGRE is a threaded system that permits self-modifying program execution with compiler-guaranteed safety. This paper describes an implementation of TIGRE in Forth for the Harris RTX 2000 stack processor...|$|E
40|$|Abstract: We inter-derive two prototypical {{styles of}} <b>graph</b> reduction: <b>reduction</b> {{machines}} a ̀ la Turner and graph rewriting systems a ̀ la Barendregt et al. To this end, we adapt Danvy et al. ’s mechanical program derivations {{from the world}} of terms to the world of graphs. We also outline how to inter-derive a third style of graph reduction: a graph evaluator. 1. ...|$|R
5000|$|A {{consequence}} and {{equivalent of}} this property, potentially holding for Zariski dense subgroups Γ {{of the special}} linear group over the integers, and in more general classes of algebraic groups G, is that the sequence of Cayley <b>graphs</b> for <b>reductions</b> Γp modulo prime numbers p, with respect to any fixed set S in Γ that is a symmetric set and generating set, is an expander family.|$|R
30|$|Figure 5 {{illustrates}} the frame work followed {{to shed light}} on the procedure followed after the collection of the data from Dataverse in XML format its then preprocessed to form the graph data network based on interactions and weight is represented as edges between nodes. Then the process of calculating similarities in graph based on the definitions and algorithms discussed on the previous section to output the <b>reduction</b> <b>graph</b> the similarity is also based on a threshold set to form the cliques then based on this <b>reduction</b> <b>graph</b> on a large network a path could be determined from this reduced graph.|$|R
