1|227|Public
40|$|International audienceThis paper {{provides}} an overview of the rationale of the Reconfigurable Media Coding framework developed by MPEG standardization committee to overcome the limits of traditional ways of providing decoder specifications. Such framework is an extension of the Reconfigurable Video coding framework now encompassing also 3 D <b>Graphics</b> <b>coding</b> standard. The idea of this approach is to specify decoders using an actor dataflow based representation consisting of self-contained processing units (coding tools) connected altogether and communicating by explicitly exchanging data. Such representation provides a specification for which several properties of the algorithms interesting for codec implementations are explicitly exposed and can be used for exploring different implementation objectives...|$|E
50|$|Rebranded Personal DECstation 5000 Series {{without any}} <b>graphics.</b> <b>Code</b> name MAXINE.|$|R
5000|$|Rebranded DECstation 5000 Model 200 Series {{without any}} <b>graphics.</b> <b>Code</b> name 3MAX. (5000/260 3MAX+) ...|$|R
50|$|Sirius {{is based}} on {{molecular}} <b>graphics</b> <b>code</b> and data structures developed {{as a part of}} the Molecular Biology Toolkit.|$|R
50|$|The free {{licensed}} 3D <b>graphics</b> <b>code</b> {{was committed}} to Mesa on 29 August 2014, and first appeared on Mesa 10.3 release.|$|R
50|$|Craig Artley, {{now with}} the Landmark {{division}} of Halliburton, made major contributions to the <b>graphics</b> <b>codes</b> while still a student at CWP and continues to make significant contributions to the general package.|$|R
5000|$|Major updates to the <b>graphics</b> <b>code</b> in May 2002 {{resulted}} in Chasys Draw DTFx (Direct Tool eFfects). The new <b>graphics</b> <b>code</b> being referred to here {{was actually a}} miniature bitmap abstraction engine that allowed for fast per-pixel operations and direct image buffer access (much as the DIB engine does for GDI). The engine was named JpDRAW. This version was also done in VB, but was much faster than all the previous versions. The new <b>graphics</b> <b>code</b> allowed for more tools to be implemented than was ever possible before. Later on in 2002, the developer decided to completely abandon VB as a programming platform and moved all the code to C/C++. The move to C/C++ allowed {{the development of a}} full-fledged graphics engine which was named JpDRAW2. Chasys was renamed to Chasys Draw Artist, and the CD5 image format was also updated to reflect the new features. By coincidence, the module that implemented the file format was the fifth module to be added, so the format was called Chasys Draw module 5, retaining the [...]cd5 file extension.|$|R
40|$|We {{introduce}} a {{convolutional neural network}} for inferring a compact disentangled graphical description of objects from 2 D images {{that can be used}} for volumetric reconstruction. The network comprises an encoder and a twin-tailed decoder. The encoder generates a disentangled <b>graphics</b> <b>code.</b> The first decoder generates a volume, and the second decoder reconstructs the input image using a novel training regime that allows the <b>graphics</b> <b>code</b> to learn a separate representation of the 3 D object and a description of its lighting and pose conditions. We demonstrate this method by generating volumes and disentangled graphical descriptions from images and videos of faces and chairs...|$|R
50|$|Later, Guionneau added {{multiple}} camera angles during game-play. Guionneau developed {{much of the}} original <b>graphics</b> <b>code</b> in TORCS and eventually added texture mapping to give more detail to the cars. Espié then worked on piecing together and finalizing code for release.|$|R
50|$|Chris Liner (homepage), while {{a student}} at the Center, contributed to many of the <b>{{graphics}}</b> <b>codes</b> used in the pre-workstation (i.e., graphics terminal) age of SU. Liner continues to promote the use of SU in his students' research at the University of Houston.|$|R
40|$|From an {{analysis}} of the graphemes in Bernart Dechepare's Linguae Vascorum Primitiae, the author shows that Basque referred to Navarrese Romance script to establish its own <b>graphic</b> <b>code.</b> She also demonstrates that this work contains valuable information {{for the study of the}} late stages of Romance of Navarre. </span...|$|R
5000|$|FreeBASIC {{provides}} built-in, QuickBASIC compatible graphics support through FBgfx, {{which is}} automatically included into programs {{that make a}} call to the [...] command. Its backend defaults to OpenGL on Linux and DirectX on Microsoft Windows. This abstraction makes FBgfx <b>graphics</b> <b>code</b> cross-platform compatible. However, FBgfx is not hardware accelerated.|$|R
5000|$|On-screen editing of content, Web <b>graphics,</b> program <b>codes,</b> and simulations.|$|R
5000|$|The {{anti-aliasing}} <b>graphics</b> rasterizer <b>code</b> {{uses the}} open source Pisces renderer {{used in the}} phoneME project.|$|R
2500|$|In 1982, {{he started}} working for Classroom Consortia Media, Inc., an {{educational}} software company, developing and writing Apple and IBM graphics libraries and tools for their software. [...] During his tenure there {{he created a}} drawing program called SuperDraw for CCM, and on his own wrote the core <b>graphics</b> <b>code</b> for what would later become PCPaint, as well as develop the GRASP GL library format.|$|R
40|$|Scholars with {{different}} backgrounds have carried out extensive surveys centred on how 3 D digital models, data acquisition and processing {{have changed over}} the years in fields of archaeology and architecture and more in general in the Cultural Heritage panorama: the current framework focused on reality-based modelling is then split in several branches: acquisition, communication and analysis of buildings (Pintus et alii, 2014). Despite the wide set of well-structured and all-encompassing surveys on the IT application in Cultural Heritage, several open issues still seem to be present, in particular once the purpose of digital simulacra is the one to fit with the “pre-informatics" legacy of architectural/archaeological representation (historical drawings with their <b>graphic</b> <b>codes</b> and aesthetics). Starting from a series of heterogeneous matters that came up studying two Italian UNESCO sites, this paper aims at underlining the importance of integrating different pipelines from different technological fields, in order to achieve multipurpose models, capable to comply with <b>graphic</b> <b>codes</b> of traditional survey, as well as semantic enrichment, and last but not least, data compression/portability and texture reliability under different lighting simulation...|$|R
5000|$|The code {{itself was}} {{patterned}} so that most control codes were together and all <b>graphic</b> <b>codes</b> were together, {{for ease of}} identification. The first two so called ASCII sticks (32 positions) were reserved for control characters. The [...] "space" [...] character had to come before graphics to make sorting easier, so it became position 20hex; for the same reason, many special signs commonly used as separators were placed before digits. The committee decided {{it was important to}} support uppercase 64-character alphabets, and chose to pattern ASCII so it could be reduced easily to a usable 64-character set of <b>graphic</b> <b>codes,</b> as was done in the DEC SIXBIT code (1963). Lowercase letters were therefore not interleaved with uppercase. To keep options available for lowercase letters and other graphics, the special and numeric codes were arranged before the letters, and the letter A was placed in position 41hex to match the draft of the corresponding British standard. The digits 0-9 are prefixed with 011, but the remaining 4 bits correspond to their respective values in binary, making conversion with binary-coded decimal straightforward.|$|R
40|$|A materialized text shows {{many faces}} in the mirror of time. In every printing, how {{ordinary}} it may seem, the graphic structure given carries meaning over and below the linguistic. Examples from different editions of the Bible and of Swedish literature demonstrate how {{the face of a}} text has been adapted to changing reading habits and literary taste. Scholarly text editors though have generally disregarded the <b>graphic</b> <b>coding</b> of source documents, even when authorial...|$|R
40|$|A <b>graphics</b> <b>code</b> {{which can}} be used for viewing the 13; {{geometric}} input to, or the output from, the panel code 13; SOFO 509 has been presented. The code also draws chordwise 13; pressure coefficient and section load distributions along 13; span. In all there are eight separate plots generated. 13; Input to this code is from a file output from the panel code SOFO 509. A Fortran listing of the code is given...|$|R
50|$|Hardware {{requirements}} are largely game-dependent. The performance bottleneck {{in most cases}} is the CPU rather than the GPU. This is especially the case in software mode, in which only the CPU is used for emulation. In hardware mode, the GPU emulates the graphics, but can still be a bottleneck if the internal resolution is set too high. Some games may also run slower due to unoptimized <b>graphics</b> <b>code</b> or weak video cards.|$|R
40|$|The {{focus of}} this {{bachelor}} thesis is identification of devices in smart grids by barcodes and QR codes. It contains description of symbologies of these <b>graphic</b> <b>codes</b> and tests their characteristics in reading, with an application, developed {{as a part of}} this thesis. Thesis contains recommendations and suggestions for physical identification of devices, based on theoretical knowledge and observations made by testing. Included application is also capable of registering devices on their installation...|$|R
40|$|An {{important}} part of software development involves testing {{the reliability of the}} software. R has good tools for checking that the software runs without catastrophic failure, but provides less support for checking that the software produces the correct output, particularly for <b>graphics</b> <b>code.</b> This paper discusses the sort of testing that would be desirable, several ways that this testing could be performed, and introduces some early attempts at providing tools for performing such testing. ...|$|R
40|$|This study aims to {{show how}} the Greek and the Latin scripts have been in contact in Egypt during the Roman period. We study the confusions of <b>graphic</b> <b>codes,</b> {{especially}} the alphabet-switching, in Latin papyri, comparing them with the same phenomenon which appears in the inscriptions throughout the Roman world. We try to understand whether this feature is motivated by phonetic confusions or is to be interpreted as an intentional graphic «mistake»...|$|R
40|$|Based {{upon the}} {{experiments}} showing three traits of Chinese characters as stimulus, the comparison {{has been made}} between the hearing-impaired and normal children in RT functions for the judgment involved in the verbal recording. The {{results show that the}} function of semantic code is more strongly correlated with recognition of Chinese character than the phonetic <b>code</b> and <b>graphic</b> <b>code</b> for both the hearing-impaired and normal children. For hearing-impaired children, a direct access that a semantic code is produced directly from the <b>graphic</b> <b>code</b> is observed. However, for normal children the strategly of grapheme-phoneme conversion rules to interpret the meaning of words is used. It&# 39;s shown that no significant differences of mental processing has been found between the hearing-impaired and normal children. Perhaps both the direct access and the grapheme-phoneme conversion form a comprehensive information procession activating each other. In reading Chinese character, the hearing-impaired and normal children is significantly effected by stroke under and character frequency. It is found that the normal children have more depth processing in reading Chinese sentences than the hearing-impaired children. 当前，我国心理学界对汉语的信息加工内部机制与过程的研究已取得了许多重要的成果。这一研究不仅对我们了解儿童的中文阅读方面有很大的帮助而且对推动认知心理学的发展有重要的理论意义和实用价值。本研究通地聋童与听力正常儿童的对照，以实验的方法探讨了两种儿童在汉语认知过程中的异同。进而对汉语中音、形、义在字、词、句子加工内部机制过程方面获得了一些新的知识。通过对听力正常儿童与聋童在中文阅读过程比较的理论探讨和实验研究，本研究的主要结论可以归纳如下： 1 ．笔画是汉字的一个重要基本特征。在汉字的加工过程中存在笔画数效应，它是影响汉字阅读速度的一个重要指标。 2 ．对汉字的熟悉程度是影响汉字加工过程的另一个重要因素。在汉字别过程中，当字频与不同被试对汉字的熟悉度相一致时，字频也具有相当重要的作用。 3 ．字音的激活是汉字加工过程中的一个重要的特征，既使是聋童也要经历“语音”的激活过程。语音激活过程也许是汉字识别中必不可少的一个环节。 4 ．字义在汉字的加工过程早期就可以出现，至少可以认为字义的出现不晚于字音的出现。 5 ．在听力正常儿童中字形对加工的影响消失的时间最快，由此可以推论，识别的汉字偏重于以字音和字义的方式贮存。聋童中情况要复杂一些，识别的汉字可能是以字音、字形、字义不占优势的方面混合贮存。 6 ．在句子加工过程中可以看出，聋童的加工深度方面不如听力正常儿童，但是在句中词汇和词汇中位置的影响方面有着一致性。聋童在阅读中表现出了更多的视觉方面的特性。总之，在汉语的加工方式上听力正常儿童与聋童有着更多的相似性，听力缺陷能从视觉部分得到一定程度的补偿...|$|R
40|$|Repetitive {{pattern is}} laden with meaning in many cultures. In Andean cultures, where no {{alphabetic}} writing system was developed during prehispanic times, patterns and <b>graphic</b> <b>codes</b> carried a large cultural load. It {{is crucial to}} have appropriate tools to investigate the integrated properties (symmetry, color, number, direction, etc.) in the <b>graphic</b> <b>codes</b> of the ancient Andes. In this paper, I will propose some modifications to the prevailing approach to symmetry classification that better fits the patterns in Andean textiles. Approaches to Symmetry Patterns, Modern and Ancient An approach to classifying symmetry patterns that is called “plane pattern analysis ” has been developed during the 20 th century. It grows out {{of the study of}} the structures of crystals (crystallography) and group theory, a branch of mathematics (Washburn and Crowe, 1988 : 3 - 41). While this approach allows the classification of patterns according to precepts in western mathematics and science, the resulting classification {{has little to do with}} the indigenous categories or the processes involved in the generation of Andean patterns. People of the ancient Andes obviously had an altogether different starting point and rules for generating patterns than those used by 20 th century scientists...|$|R
40|$|From {{windowing}} {{systems to}} virtual reality, real-time <b>graphics</b> <b>code</b> is ubiquitous. Programming models for constructing graphics software, however, have largely escaped {{the attention of}} programming languages researchers. This essay introduces the programming model of OpenGL, a ubiquitous API for real-time graphics applications, for a language-oriented audience. It highlights six broad problems with the programming model and connects them to traditions in PL research. The issues range from classic pitfalls, where established thinking can apply, to new open problems, where novel research is needed...|$|R
40|$|The paper {{presents}} the results of an experiment which aims on the one hand to the elaboration of a "missing" cartography able to illustrate with suitable <b>graphic</b> <b>codes</b> the main evolutionary phases of the urban fabric of the city of Ascoli Piceno taken from archival sources and historical maps {{and on the other hand}} the experimentation aims to verify the functionality and the possibilities that the use of Spatial Augmented Reality projection-based offers in the field of communication of cartographic heritage...|$|R
5000|$|May 5, 1987, Version 2.0F, {{interpreter}} version 2.425: Adds pull-down menus. Supports Hercules {{graphics and}} modifies the EGA <b>graphics</b> <b>code</b> {{to run on}} machines with a 80386 processor. Sold both in the original gray flip-lid box {{as well as a}} gold slipcover box. The gold slipcover box adds the sub-title Quest for the Crown for the first time, even as it is not mentioned in the game itself. First version of the game that was also available on 3.5" [...] 720K disks.|$|R
25|$|FlightGear {{started as}} an online {{proposal}} in 1996 by David Murr. He proposed a new flight simulator developed by volunteers over the Internet as alternative to proprietary, available simulators like the Microsoft Flight Simulator. The flight simulator was created using custom 3D <b>graphics</b> <b>code.</b> Development of an OpenGL based version was spearheaded by Curtis Olson starting in 1997. FlightGear incorporated other open-source resources, including the LaRCsim flight model from NASA, and freely available elevation data. The first working binaries using OpenGL {{came out in}} 1997.|$|R
5000|$|The open-sourced Pisces {{renderer}} {{used in the}} phoneME {{project has}} replaced the anti-aliasing <b>graphics</b> rasterizer <b>code.</b> This code is fully functional, but still needs some performance enhancements, ...|$|R
40|$|We have {{developed}} a relativistically-accurate computer <b>graphics</b> <b>code</b> and have used it to produce photo-realistic images and videos of scenes where special relativistic effects dominate, either in astrophysical contexts or in imaginary worlds where {{the speed of light}} is only a few metres per second. The videos have been integrated into our under-graduate teaching programme for several years. Recently we took the next step, encouraging undergraduate students to use the code to explore relativity, develop their own videos, and eventually package them together into Through Einstein's Eyes, a multimedia CD...|$|R
40|$|Based on {{state-of-the-art}} graphic-simplification {{techniques and}} progressive image-coding schemes, we propose a new hierarchical three-dimensional graphic-compression scheme in this research. This scheme progressively compresses an arbitrary polygonal mesh {{into a single}} bitstream. Along the encoding process, every output bit contributes to the reduction of coding distortion, and the contribution of bits decreases according to their order of position in the bitstream. At the receiver end, the decoder can stop at any point while giving a reconstruction of the original model with the best rate-distortion tradeoff. A series of models of continuous varying resolution can thus be constructed from the single bitstream. This property, which {{is referred to as}} the embedding property since the coding of a coarser model is embedded in the coding of a finer model, can be widely used in robust error control, progressive transmission and display, level-of-detail control, etc. It is demonstrated by experiments that an acceptable quality level can be achieved at a compression ratio of 20 to 1 for several test graphic models. Keywords—Embedded codecs, <b>graphic</b> <b>coding,</b> <b>graphic</b> simplification, progressive <b>coding.</b> I...|$|R
50|$|Apple's {{marketing}} {{name for}} all these early AGP models is Power Mac AGP <b>Graphics.</b> The <b>code</b> name Sawtooth was used internally before release and is a popular designation among enthusiasts.|$|R
40|$|For {{many years}} {{dyslexia}} has been incorrectly applied {{to those who}} have demonstrated difficulty in learning to read. Given the proper guidance and opportunities forbecoming sensitive to demonstrations of the workings of language and engaging their minds in learning, many students will overcome their so-called learning disabilities. However-, there are some language disorders that have a neurophysiological basis. One study suggests a lack of cerebral asymmetry may lead to dyslexia. Computerized axial tomography (CAT scan) has given support to the hypotheses that to the extent that learning to read involves gestalt perception and right hemispheric, processing,. abnormal specialization of the right hemisphere may also be an instrumental factor in developmental dyslexia. Other researchers have-Combined psycholinguistic methods with neurolinguistic methods to suggest that learning to use a <b>graphic</b> <b>code</b> cosies only after knowing the correspondences between acoustics and the <b>graphic</b> <b>code,</b> the grapheme-phoneme corresiondence rules. When these rules break down because of a neural coding problem, alexia and agraphia may occur. Other studies show that word-blindness (alexia without agraphia) may be caused by a variety of brain insults. A knowledge of the brain functions of language acquisition and,development in out-of-school life will lead to a development of improved language arts pedagogies. (HOD) 4 Reproductions supplied by EDRS are the best that can be made from the original document...|$|R
50|$|The {{correspondence}} between <b>code</b> numbers and <b>graphic</b> characters is represented, with row numbers made into line numbers and cell numbers made into column numbers, on the 94-line 94-column <b>graphic</b> character <b>code</b> table.|$|R
40|$|Issues in {{the field}} of {{intelligent}} scientific computing are addressed {{from the point of view}} of the development of a problem solving environment. These issues include how symbolic, numeric and <b>graphic</b> <b>code</b> should be linked, how a system might be constructed so that it is robust and survives a changing environment, and whether lan-guage translators have a role in the retention of the algorithmic content of existing code. The need for a substantial numerical library in Lisp is underlined. Ex-perience has led us to the conclusion that more homo-geneity rather than less makes for stronger software...|$|R
