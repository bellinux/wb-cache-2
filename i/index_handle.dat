0|129|Public
50|$|Many organisations {{support the}} <b>indexing</b> and <b>handling</b> of their {{collections}} by specialist libraries.|$|R
40|$|Abstract. It is {{proposed}} {{to set the}} structure of metal products quality as a hierarchical tree of properties. Input and output variables and also control parameters of technological processes are represented as universal multitudes in formalization {{of the process of}} production quality <b>indices</b> <b>handling</b> in hardware industry technologies. Presence of simultaneously diversified information initiating different types of independence, is characteristic of solving problems of metal products quality indices control...|$|R
5000|$|Redberry is an {{open source}} {{computer}} algebra system designed for symbolic tensor manipulation. Redberry provides common tools for expression manipulation, generalized on tensorial objects, as well as tensor-specific features: indices symmetries, LaTeX-style input, natural dummy <b>indices</b> <b>handling,</b> multiple <b>index</b> types etc. The HEP package includes tools for Feynman diagrams calculation: Dirac and SU(N) algebra, Levi-Civita simplifications, tools for calculation of one-loop counterterms etc. Redberry is written in Java and provides extensive Groovy-based programming language.|$|R
40|$|To support tempoml {{operators}} efficiently, indexing {{based on}} tempoml attributes must be supported. In this paper, we pmpose a dynamic and eficient index scheme called the time polygon (TP-index) for tempoml databases. In the scheme, tempoml data are mapped into a two-dimensional tempoml space, where the {{data can be}} clustered based on time. The data space is then partitioned into time polygons where each polygon corresponds to a data page. The time polygon directory can be organized as a hiemrchical <b>index.</b> The <b>index</b> <b>handles</b> long dumtion tempoml data elegantly and eficiently. Our performance analysis indicates that the time polygon index is efficient both in storage utilization and query search. 1...|$|R
50|$|The current (v 7.7) {{product range}} is Unicode-based {{and has an}} <b>index</b> that can <b>handle</b> over 1 TB of data per index.|$|R
5000|$|Abstract <b>index</b> {{notation}} <b>handles</b> braiding as follows. On {{a particular}} tensor product, an ordering of the abstract indices is fixed (usually {{this is a}} lexicographic ordering). The braid is then represented in notation by permuting the labels of the indices. Thus, for instance, with the Riemann tensorthe Bianchi identity becomes ...|$|R
500|$|Another {{method of}} <b>indexing</b> Nulls {{involves}} <b>handling</b> them as not distinct {{in accordance with}} the SQL:2003-defined behavior. For example, Microsoft SQL Server documentation states the following: ...|$|R
40|$|Abstract—Metric space searching is an {{emerging}} technique {{to address the}} problem of efficient similarity searching in many applications, including multimedia databases and other repositories handling complex objects. Although promising, the metric space approach is still immature in several aspects that are well established in traditional databases. In particular, most indexing schemes are not dynamic, that is, few of them tolerate insertion of elements at reasonable cost over an existing index and only a few work efficiently in secondary memory. In this paper we introduce a secondary-memory variant of the Dynamic Spatial Approximation Tree, which has shown to be competitive in main memory. The resulting <b>index</b> <b>handles</b> well the secondary memory scenario and is competitive with the state of the art, becoming a useful alternative in a wide range of database applications. Moreover, our ideas are applicable to other secondary-memory trees where there is little control over the tree shape. I...|$|R
40|$|Abstract. Metric space searching is an {{emerging}} technique {{to address the}} problem of efficient similarity searching in many applications, in-cluding multimedia databases and other repositories handling complex objects. Although promising, the metric space approach is still immature in several aspects that are well established in traditional databases. In particular, most indexing schemes are not dynamic. From the few dy-namic indexes, even fewer work well in secondary memory. That is, most of them need the index in main memory in order to operate efficiently. In this paper we introduce a secondary-memory variant of the Dynamic Spatial Approximation Tree with Clusters (DSACL-tree) which has shown to be competitive in main memory. The resulting <b>index</b> <b>handles</b> well the secondary memory scenario and is competitive with the state of the art. The resulting index is a much more practical data structure that can be useful in a wide range of database applications. ...|$|R
40|$|Metric space searching is an {{emerging}} technique {{to address the}} problem of e cient similarity searching in many applications, including multimedia databases and other repositories handling complex objects. Although promising, the metric space approach is still immature in several aspects that are well established in traditional databases. In particular, most indexing schemes are not dynamic. From the few dynamic indexes, even fewer work well in secondary memory. That is, most of them need the index in main memory in order to operate e ciently. In this paper we introduce a secondary-memory variant of the Dynamic Spatial Approximation Tree with Clusters (DSACL-tree) which has shown to be competitive in main memory. The resulting <b>index</b> <b>handles</b> well the secondary memory scenario and is competitive with the state of the art. The resulting index is a much more practical data structure that can be useful in a wide range of database applications. Presentado en el VII Workshop Bases de Datos y Minería de Datos (WBD...|$|R
40|$|AbstractIn Turkish {{literature}} it {{has been}} obseved {{that there is only}} a single study by using Rumelt's diversification index in order to explain the diversification strategy-organizational prformance relationship. Herfindahl index of diversification differed in many respects from Rumelt's index of diversification. Rumelt's <b>index</b> <b>handles</b> diversification in four groups as concentrated, main business based, related and unrelated. However Herfindahl Index grades the diversification as relateed, unrelated and for the total diversification in itself separately. By using diversification - organizational performance relationship on the basis of Herfindahl Index, the data of the balance sheets of the enterprises listed to the İstanbul Stock Exchange were received from the addresses www. kap. gov. tr and www. imkb. gov. tr. ROA and ROS values used as performance criteria have been obtained from balance sheet and income statements. The result that Herfindahl based diversification strategy applications and organizational performance relationship differ in the developed countries, but similar results in the developing countries were obtained {{at the end of the}} study...|$|R
25|$|It is {{possible}} to extend these definitions to <b>handle</b> <b>index</b> sets which are not sets of singletons, but this introduces an additional type level and is not needed for most purposes.|$|R
40|$|This paper {{defines the}} grammar class of {{sequentially}} indexed grammars. Sequentially indexed grammars {{are the result}} of a change in the <b>index</b> stack <b>handling</b> mechanism of <b>indexed</b> grammars [Aho 68, Aho 69]. Sequentially indexed grammars are different from linear indexed language class. Unlike indexed languages, sequentially indexed languages allow polynomial parsing algorithms. We give a polynomial algorithm for parsing with sequentially indexed gramamrs that is an extension of the Earley algorithm for parsing with context free grammars...|$|R
50|$|One {{major problem}} with {{pointers}} {{is that as}} long as they can be directly manipulated as a number, they can be made to point to unused addresses or to data which is being used for other purposes. Many languages, including most functional programming languages and recent imperative languages like Java, replace pointers with a more opaque type of reference, typically referred to as simply a reference, which can only be used to refer to objects and not manipulated as numbers, preventing this type of error. Array <b>indexing</b> is <b>handled</b> as a special case.|$|R
30|$|Non-text {{documents}} {{may have}} multidimensional descriptors such as ColorLayout or SIFT [28], automatically obtained {{for some of}} the video segments. These multidimensional descriptors are indexed with a specialized signature <b>index</b> designed to <b>handle</b> multiple high-dimensional descriptors [29]. Search based on the visual content is also integrated in the retrieval interface.|$|R
40|$|Preliminary process {{resiliency}} {{analysis is}} {{a necessary part of}} any modern process design methodology. This paper extends the Disturbance Cost (DC) resiliency index, previously developed for linear plants, to non-linear systems. As the nonlinear <b>index</b> can <b>handle</b> such non-linear features as input and output multiplicities, it can accommodate the analysis of the potential of a partial control strategy to improve process resiliency. The index reliably identifies potential resiliency problems associated with process design. This paper deals with the DC analysis of processes that can be described by closed-form models, demonstrates its application on the design of a continuous stirred tank reactor (CSTR) ...|$|R
40|$|This paper {{defines the}} grammar class of {{sequentially}} indexed grammars (SIGs) that {{results of a}} change in the <b>index</b> stack <b>handling</b> mechanism of <b>indexed</b> grammars [Aho 68, Aho 69]. SIGs are different from linear indexed grammars [Gaz 88] (the rule format is simpler) and they generate a strictly larger language class. We give a polynomial algorithm for parsing with SIGs that is a rather straightforward extension of the Earley algorithm for parsing with context free grammars. SIGs are attractive because of the simple rule format, the natural correspondence between indices and traces, and the perspicuity of the parsing scheme...|$|R
40|$|Indexes are {{critical}} for performance of database systems. Trees are effective <b>indexes</b> that <b>handle</b> both single-dimensional and multi-dimensional data. The R-tree is a commonly used multi-dimensional tree index for the spatial data and geographic information system (GIS). By using design pattern and following the C++ STL style, the R-tree index structure in this thesis is designed and implemented using generic programming techniques. The components {{are designed to be}} the STL style containers so that they have a uniform and clear interface and can be used like a standard container. The R-tree structure can adapt to different data types, user-defined key types, and support user-defined queries...|$|R
40|$|Now a day {{the usage}} of image is rapidly increased, so {{indexing}} the exact image in the data base is very difficult because an image will have more than 4000 features [1]. It is highly impossible to store and index these much amount of features for a single image representation. In-order to make an efficient indexing structure we have to reduce the image features by using association rules (i. e. frequent image features are to be identified) but reduction image feature does not affect reliability of image results. So {{in this paper we}} introduce new image indexing technique by using data cube (multidimensional <b>indexing)</b> for <b>handling</b> multidimensional image feature...|$|R
50|$|Libraries and <b>indexing</b> {{services}} <b>handle</b> them {{in various}} ways. The Library of Congress catalogs {{each part of}} them as an individual book with an individual call number and ISBN and a series note (technically a series added entry for the overall series, which has its ISSN, and usually a call number. As the Library of Congress receives two copies of most scholarly books as copyright deposits, it normally keeps one by individual call number and one by series call number. Most other libraries do not have that luxury and have to choose. The Anglo-American Cataloging Rules 2nd edition allows either of these options to be used.|$|R
40|$|Oﬀ-road {{motorcycle}} suspensions {{are subjected}} to severe solicitations like large jumps and bumps. Its optimisation requires assessing comfort and handling for which several indices {{can be found in}} the literature. However these indices were developed for other vehicles and it is not clear how they behave assessing large obstacles. To investigate this, four comfort <b>indices</b> and four <b>handling</b> <b>indices</b> are used to assess the performance of a motorcycle modelled with two degree of freedom under continuos and impulsive oﬀ-road excitations. It is found that the best suited indices are the Vibration Dose Value for comfort and the eighth order mean value of the contact force for <b>handling.</b> Additionally, these <b>indices</b> are used to optimise the damping on a ﬁve degree of freedom model of a motorcycle, with which is found that on each road scenario, the optimal damping is in between the damping for optimal comfort and optimal handling, and the ﬁnal selection depend on the relative preference between both objectives...|$|R
40|$|Most {{applications}} require storing multiple {{versions of}} data and involve a lot of temporal semantics in their schema. This requires maintenance and querying of temporal relations. A Bitemporal DBMS will simplify the development and maintenance of such applications by moving temporal support from the application into the DBMS engine. The success of such Bitemporal DBMSs relies mainly {{on the availability of}} high performance <b>indices</b> that <b>handle</b> update and search operations efficiently. A successful associative data structure (index) is the one that can efficiently partition the space of the attributes that are used within the keys. Temporal attributes have unique characteristics and should support now-relative intervals. These intervals grow as time grows and thus we need an <b>index</b> that can <b>handle</b> attributes with variable values. The proposed bitemporal index partitions the bitemporal space into four subspaces according to the end value of the temporal intervals. This results in separating those keys that have variable intervals from those that have fixed interval(s). In this thesis we have used on-the-shelf index that successfully indexes spatial attributes. But instead of representing the two temporal dimensions as a rectangle, we have represented them as 4 dimensional points. This results in better partitioning of each subtree space and in better search performance...|$|R
50|$|Instructions were of 1, 2 or 3 syllables. Most {{arithmetic}} {{took place}} {{at the top of the}} Nest and used zero-address, 1-syllable instructions, although address arithmetic and <b>index</b> updating were <b>handled</b> separately in the Q store. Q Store handling, and some memory reference instructions, used 2 syllables. Memory reference instructions with a 16-bit address offset, most jump instructions, and 16-bit literal load instructions, all used 3 syllables.|$|R
40|$|We {{consider}} {{the problems of}} computing aggregation queries in temporal databases, and of maintaining materialized temporal aggregate views efficiently. The latter problem is particularly challenging since a single data update can cause aggregate results to change over the entire time line. We introduce a new index structure called the SBtree, which incorporates features from both segment-trees and B-trees. SB-trees support fast lookup of aggregate results based on time, and can be maintained efficiently when the data changes. We also extend the basic SB-tree <b>index</b> to <b>handle</b> cumulative (also called moving-window) aggregates. For materialized aggregate views in a temporal database or warehouse, we propose building and maintaining SB-tree indices instead of the views themselves. 1...|$|R
40|$|Abstract In {{ubiquitous}} computing environments, the location-awareness of mobile devices {{is a fundamental}} functional requirement. Due {{to the lack of}} scalability, it is however impossible to store and manage a large number of mobile devices by a centralized server. In this paper, we propose DisTIN, an alternative method based on P 2 P method to <b>index</b> and <b>handle</b> the location data of mobile devices in fully distributed environment. Each mobile device stores the location and IP addresses of its neighbor devices determined by triangular network. And a query submitted to a mobile device can be processed via its neighbor devices linked by triangular network toward the query position without any centralized server. We also propose an update algorithm of DisTIN to handle the movement of mobile devices...|$|R
40|$|Abstract. We {{consider}} {{the problems of}} computing aggregation queries in temporal databases and of maintaining materialized temporal aggregate views efficiently. The latter problem is particularly challenging since a single data update can cause aggregate results to change over the entire time line. We introduce a new index structure called the SB-tree, which incorporates features from both segment-trees and B-trees. SB-trees support fast lookup of aggregate results based on time and can be maintained efficiently when the data change. We extend the basicSB-tree <b>index</b> to <b>handle</b> cumulative (also called moving-window) aggregates, considering separately cases when the window size {{is or is not}} fixed in advance. For materialized aggregate views in a temporal database or warehouse, we propose building and maintaining SB-tree indices instead of the views themselves...|$|R
40|$|In {{this article}} we {{consider}} the rotation invariant template matching problem from the combinatorial point of view. The problem {{is to find the}} places and orientations in an image where a pattern can be superimposed so that it is similar enough to the image. The traditional approach to this problem uses the Fast Fourier Transformation. We present a combinatorial approach that is inspired by string matching techniques. We show that this novel approach can yield search time improvements of orders of magnitude over the traditional technique. Along the article, we present and analyze several algorithms to deal with diverse variants of the problem: exact matching or permitting mismatches, sequential or <b>indexed</b> searching, <b>handling</b> two or three dimensional objects, and filters based on different techniques...|$|R
2500|$|In his reply, Cantor did {{not claim}} to have proved Dedekind's result. He did {{indicate}} how he proved his theorem about indexed numbers: [...] "Your proof that (n) [...] can be correlated one-to-one with the field of all algebraic numbers is approximately {{the same as the}} way I prove my contention in the last letter. I take n12+n22+···+n'ν2= and order the elements accordingly." [...] Cantor's ordering cannot <b>handle</b> <b>indices</b> that are 0.|$|R
5000|$|Another {{method of}} <b>indexing</b> Nulls {{involves}} <b>handling</b> them as not distinct {{in accordance with}} the SQL:2003-defined behavior. For example, Microsoft SQL Server documentation states the following: For indexing purposes, NULLs compare as equal. Therefore, a unique index, or UNIQUE constraint, cannot be created if the keys are NULL in more than one row. Select columns that are defined as NOT NULL when columns for a unique index or unique constraint are chosen.|$|R
50|$|Btrieve {{allows for}} {{duplicate}} key values in an <b>index.</b> Btrieve <b>handles</b> duplicate keys using either a linked duplicate method, or {{by using a}} repeating duplicate method (this terminology started being used when version 6.0 was released). The linked duplicate method used a pair of record pointers in the index page itself {{to point to the}} head and tail of a doubly linked list of duplicate keys. This meant that the order of the duplicate keys in the list was in the order they were entered. The duplicate key method did not use a linked list, but rather made all the keys unique by creating a new index key and appending the address of the record pointer {{to the end of the}} key. This means that the key is retrieved via its position order.|$|R
40|$|Paper Number:??? We {{consider}} {{the problems of}} computing aggregation queries in temporal databases, and of main-taining materialized temporal aggregate views efficiently. The latter problem is particularly challenging since a single data update can cause aggregate results to change over the entire time line. We introduce a new index structure called the SB-tree, which incorporates features from both segment-trees and B-trees. SB-trees support fast lookup of aggregate results based on time, and can be maintained efficiently when the data changes. We extend the basic SB-tree <b>index</b> to <b>handle</b> cumulative (also called moving-window) aggregates, considering separately cases when the window size {{is or is not}} fixed in advance. For ma-terialized aggregate views in a temporal database or warehouse, we propose building and maintaining SB-tree indices instead of the views themselves. ...|$|R
40|$|Abstract—RF MEMS {{switches}} {{have demonstrated}} excellent performance. However, before such switches can be fully im-plemented, they must demonstrate high reliability and robust power-handling capability. Numerical simulation {{is a vital}} part of design to meet these goals. This paper demonstrates a fully integrated electrothermal model of an RF MEMS switch which solves for RF current and switch temperature. The results show that the beam temperature increases with either higher input power or increased frequency. The simulation data are used to predict switch failure due to temperature-related creep and self pull-in over a wide range of operating frequency (0. 1 – 40 GHz) and power input (0 – 10 W). Self pull-in is found to be the dominant failure mechanism for an example geometry. <b>Index</b> Terms—Power <b>handling</b> capability, RF MEMS. I...|$|R
40|$|Abstract—in this paper, {{we present}} a way for {{students}} to access and operate laboratory equipment, controlled by a laboratory computer via a remote access program. In this way, the solution is not dependent on the specific laboratory equipment, {{as long as the}} equipment can be remotely controlled. The system can easily be altered to be used in another laboratory setup. Students are able to make reservations of experiment sessions through a web interface, which is administrated by the system administrator. The solution proposed in this paper is one way to speed up the development of remote accessible laboratories. Most of the proposed solution is based on open source software and the hardware is built on ordinary consumer parts, which makes the proposed remote laboratory architecture cost effective. <b>Index</b> Terms—Remote <b>handling,</b> Student experiments, Training, e-Learnin...|$|R
40|$|Abstract—The {{document}} here {{describes the}} method of accurate and efficient temperature sensing using multiple thermistors and then it suggests the method to mathematically analyze these incoming data and getting the final accurate result. This method of temperature sensing {{would prove to be}} very useful at instances where the temperature probes cannot remain intact with the subject at all times, moreover it also addresses issues of probe detachment and error <b>handling.</b> <b>Index</b> Terms—Probe detachment, thermistors, temperature. I...|$|R
40|$|Abstract- Uncertainty is a {{state of}} lack of certainty, where having {{incomplete}} knowledge can make it impossible to describe the outcome. There are many challenges that occur due to uncertainty. Uncertainty in events can cause losses of data, providing inaccurate data, noisy output. Thus the need to handle uncertainty is essential. This paper represents an outline of various methods through which the uncertainty can be analyzed and <b>handled.</b> <b>Index</b> Terms- Bayesian Network, fuzzy logic, probability, uncertainty U I...|$|R
40|$|Abstract—DNV {{standards}} {{are available for}} designing of Shipping Containers. These standards assures safe working requirements thru correct method of design, manufacture, testing, certification, marking and periodic inspection. A Offshore Container is designed, built and Tested according to DNV 2. 7. 1, {{which is used to}} hold a Compressor Unit in it. A Engine driven screw Compressor is given a outer shape of a Container, which has advantage of less space, ease of <b>handling.</b> <b>Index</b> Terms — DNV 2. 7. 1 (DET NORSKE VERITAS...|$|R
