0|10000|Public
25|$|The {{following}} proof demonstrates <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> {{first three}} characterizations given for e above. The proof {{consists of two}} parts. First, <b>the</b> <b>equivalence</b> <b>of</b> characterizations 1 and 2 is established, and then <b>the</b> <b>equivalence</b> <b>of</b> characterizations 1 and 3 is established.|$|R
30|$|So we {{now have}} <b>the</b> <b>equivalence</b> <b>of</b> (i), (ii), and (iii); next we show <b>the</b> <b>equivalence</b> <b>of</b> (iv) with {{any one of the}} first three.|$|R
30|$|After all {{the above}} discussions, {{as a general}} case, one may ask whether <b>the</b> <b>equivalence</b> <b>of</b> {{constants}} of generating functions implies <b>the</b> <b>equivalence</b> <b>of</b> generating functions directly.|$|R
30|$|<b>The</b> <b>equivalence</b> <b>of</b> (1), (2) and (3) was proved in [26] (for α= 0) and in [16] (for 0 <α<n). <b>The</b> <b>equivalence</b> <b>of</b> (1), (4) and (5) is {{contained}} in Lemma  2.1 below.|$|R
40|$|Education Muhammadiyah University of Surakarta. The aims of this {{research}} are to describe <b>the</b> <b>equivalence</b> <b>of</b> intention of expressive utterances in action film and its translation, and to describe <b>the</b> <b>equivalence</b> <b>of</b> politeness strategy of expressive utterances in action film and its translation. The type of {{this research}} is descriptive qualitative. The data source {{of this research}} is action film and its translation. The methods of analyzing data are observation and documentation. The techniques of analyzing data of this research are describing <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> intention by referring to the speech act theory and describing <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> politeness pattern by referring politeness strategy. Based on the result of the data analysis, <b>the</b> writer findsthe <b>equivalence</b> <b>of</b> <b>the</b> intentions and <b>the</b> <b>equivalence</b> <b>of</b> politeness pattern of expressive utterance in action film and its translation. The equivalece of intention of expressive utterance used in action film and its translation are: praising (22, 22...|$|R
40|$|In {{terms of}} the {{analysis}} of fixed point subgroup and tensor decomposability of certain matrices, we study <b>the</b> <b>equivalence</b> <b>of</b> of quantum bipartite mixed states under local unitary transformations. For non-degenerate case an operational criterion for <b>the</b> <b>equivalence</b> <b>of</b> two such mixed bipartite states under local unitary transformations is presented. Comment: 6 page...|$|R
40|$|Abstract Rule-based <b>equivalence</b> {{checking}} <b>of</b> {{high-level design}} descriptions proves <b>the</b> <b>equivalence</b> <b>of</b> two high-level design descriptions by applying <b>the</b> <b>equivalence</b> rules in a bottomup manner. Since the previous work derives <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> internal variables {{based on their}} names, the method often fails to prove <b>the</b> <b>equivalence</b> when variable names are changed. This paper proposes a method for improving the accuracy <b>of</b> <b>the</b> rule-based <b>equivalence</b> checking by identifying potential internal equivalences using random simulation. Experimental results using an example design shows that the proposed method can prove <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> designs before and after a practical design optimization...|$|R
3000|$|In <b>the</b> following, <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> maximum-likelihood estimators {{based on}} (9) and (10) is shown. First, both metrics are stated in vector/matrix notation. Then, <b>the</b> <b>equivalence</b> <b>of</b> both metrics is proven given the {{assumptions}} of Section 2.2. For readability, the terms h = h(θ) and [...]...|$|R
40|$|We {{establish}} <b>the</b> <b>equivalence</b> <b>of</b> some affine isoperimetric inequalities {{which include}} the -Petty projection inequality, the -Busemann-Petty centroid inequality, the "dual" -Petty projection inequality, and the "dual" -Busemann-Petty inequality. We also establish <b>the</b> <b>equivalence</b> <b>of</b> an affine isoperimetric inequality and its inclusion version for -John ellipsoids. </p...|$|R
50|$|The {{simplest}} {{example of}} an undecidable word problem occurs in combinatory logic: when are two strings of combinators equivalent? Because combinators encode all possible Turing machines, and <b>the</b> <b>equivalence</b> <b>of</b> two Turing machines is undecidable, it follows that <b>the</b> <b>equivalence</b> <b>of</b> two strings of combinators is undecidable.|$|R
30|$|Here <b>the</b> <b>equivalence</b> <b>of</b> (2.13) {{follows from}} (2.11).|$|R
30|$|We {{note that}} Theorem  1.4 follows from [29] and [18] directly. Indeed, <b>the</b> <b>equivalence</b> <b>of</b> (1), (2) and (3) was proved in [29] Theorems 3.1 and 3.2 for α= 0 and 0 <α<n, respectively, and <b>the</b> <b>equivalence</b> <b>of</b> (1), (4) and (5) was {{obtained}} in [18, Lemma  3].|$|R
40|$|This paper {{describes}} a probabilistic method for verifying <b>the</b> <b>equivalence</b> <b>of</b> two multiple-valued functions. Each function is hashed to an integer code by transforming it to a integer-valued polynomial and <b>the</b> <b>equivalence</b> <b>of</b> two polynomials is checked probabilistically. The hash codes for two equivalent functions {{are always the}} same. Thus, <b>the</b> <b>equivalence</b> <b>of</b> two functions can be verified with a known probability of error, arising from collisions between inequivalent functions. Such a probabilistic verification can be an attractive alternative for verifying functions that are too large to be handled by deterministic verification methods. 1...|$|R
40|$|AbstractThis article {{deals with}} <b>the</b> <b>equivalence</b> <b>of</b> {{representations}} of behaviors of linear differential systems. In general, {{the behavior of}} a given linear differential system has many different representations. In this paper we restrict ourselves to kernel and image representations. Two kernel representations are called equivalent if they represent one and the same behavior. For kernel representations defined by polynomial matrices, necessary and sufficient conditions for equivalence are well known. In this paper, we deal with <b>the</b> <b>equivalence</b> <b>of</b> rational representations, i. e. kernel and image representations that are defined in terms of rational matrices. As the first main result of this paper, we will derive a new condition for <b>the</b> <b>equivalence</b> <b>of</b> rational kernel representations of possibly noncontrollable behaviors. Secondly we will derive conditions for <b>the</b> <b>equivalence</b> <b>of</b> rational representations of a given behavior in terms of the polynomial modules generated by the rows of the rational matrices. We will also establish conditions for <b>the</b> <b>equivalence</b> <b>of</b> rational image representations. Finally, we will derive conditions under which a given rational kernel representation is equivalent to a given rational image representation...|$|R
30|$|<b>The</b> <b>equivalence</b> <b>of</b> {{statements}} (a)-(c) {{follows from}} Theorem  3.6.|$|R
40|$|AbstractQuantitative {{versions}} are given <b>of</b> <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> Brunn–Minkowski inequality and Minkowski's first inequality from the Brunn–Minkowski theory. Similar quantitative {{versions are}} obtained <b>of</b> <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> corresponding inequalities from Lutwak's dual Brunn–Minkowski theory. The main results are {{shown to be}} the best possible up to constant factors...|$|R
40|$|International audienceWe {{propose a}} logic and a {{deductive}} system for stating and automatically proving <b>the</b> <b>equivalence</b> <b>of</b> programs in deterministic languages having a rewriting-based operational semantics. The deductive system is circular {{in nature and}} is proved sound and weakly complete; together, these results say that, when it terminates, our system correctly solves the program-equivalence problem as we state it. We show that our approach is suitable for proving <b>the</b> <b>equivalence</b> <b>of</b> both terminating and non-terminating programs, and also <b>the</b> <b>equivalence</b> <b>of</b> both concrete and symbolic programs. The latter are programs in which some statements or expressions are symbolic variables. By proving <b>the</b> <b>equivalence</b> between symbolic programs, one proves in one shot <b>the</b> <b>equivalence</b> <b>of</b> (possibly, infinitely) many concrete programs obtained by replacing the variables by concrete statements or expressions. We also report on a prototype implementation of the proposed deductive system in the K Framework...|$|R
5000|$|... #Subtitle level 2: <b>The</b> <b>equivalence</b> <b>of</b> {{gravitational}} and inertial mass ...|$|R
40|$|Abstract. We study three similar bijections on set partitions. The first gives a {{bijective}} proof <b>of</b> <b>the</b> <b>equivalence</b> <b>of</b> two statistics with a q-Stirling distribution, Milne’s statistic and the intertwining number. The second proves <b>the</b> <b>equivalence</b> <b>of</b> {{a multivariate}} block size distribution to a covering statistic. <b>The</b> third demonstrates <b>equivalence</b> <b>of</b> <b>the</b> number of all set partitions up {{to a given}} size to set partitions of a larger size with second block a singleton. 1...|$|R
40|$|This {{research}} {{is aimed at}} classifying the variations of form of commissive utterances, describing <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> intention of commissive utterances, and describing <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> politeness pattern of commissive utterances in the Inception movie manuscipt and its translation. In collecting the data, the writer uses documentation method. The data are sentences which are intended as commissive utterences in Inception movie manuscript. In analyzing the commissive utterances and its subtitle, the steps are: finding the variation of forms of commissive utterances by applying language form theory, describing <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> intention by applying speech act theory and describing <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> politeness patterns by applying four types politeness strategy of Brown and Levinson. Having analyzed the data, the writer finds that the forms of commissive utterances and its subtitle are declarative sentence translated into declarative sentence (80...|$|R
40|$|Abstract – In this paper, {{we define}} <b>the</b> <b>equivalence</b> <b>of</b> logic {{circuits}} and examine their description in VHDL. We can describe logic circuit components as relations between {{input and output}} signals in VHDL and implement such circuits on FPGA. In this case, {{it is necessary to}} verify <b>the</b> <b>equivalence</b> <b>of</b> VHDL descriptions and the actual logic circuits constructed based on these descriptions. In a previous work, we proved the logical correctness of some circuits using the Mizar system. We also verified <b>the</b> <b>equivalence</b> <b>of</b> VHDL descriptions and the proved logic circuits. Keywords – formalized mathematics, gate, logic circuit, VHDL. 1...|$|R
5000|$|... (this {{follows from}} <b>the</b> <b>equivalence</b> <b>of</b> a {{conditional}} with its contrapositive).|$|R
5000|$|... #Subtitle level 2: More {{rigorous}} proof <b>of</b> <b>the</b> <b>equivalence</b> <b>of</b> contrapositives ...|$|R
5000|$|... #Subtitle level 2: <b>The</b> <b>equivalence</b> <b>of</b> {{biological}} {{aging and}} clock time-keeping ...|$|R
5000|$|The {{following}} rules describe <b>the</b> <b>equivalence</b> <b>of</b> lambda and let expressions, ...|$|R
3000|$|Besides <b>the</b> <b>equivalence</b> classes <b>of</b> ℱ-random variables, we {{also use}} <b>the</b> <b>equivalence</b> classes <b>of</b> ℱ-measurable sets. Let [...]...|$|R
40|$|This is a {{tutorial}} on finite automata. We {{present the}} standard material on determinization and minimization, {{as well as}} an account <b>of</b> <b>the</b> <b>equivalence</b> <b>of</b> finite automata and monadic second-order logic. We conclude with an introduction to the syntactic monoid, and as an application give a proof <b>of</b> <b>the</b> <b>equivalence</b> <b>of</b> first-order definability and aperiodicity...|$|R
40|$|In {{this paper}} we study the noncommutativity of a moving {{membrane}} with background fields. The open string variables are analyzed. Some scaling limits are studied. <b>The</b> <b>equivalence</b> <b>of</b> <b>the</b> magnetic and electric noncommutativities is investigated. <b>The</b> conditions for <b>equivalence</b> <b>of</b> noncommutativity <b>of</b> <b>the</b> T-dual {{theory in the}} rest frame and noncommutativity of the original theory in the moving frame are obtained. Comment: 12 pages, Latex, no figure. <b>The</b> <b>equivalence</b> <b>of</b> noncommutativities and also some scaling limits are adde...|$|R
40|$|Abstract: We {{propose a}} logic and a {{deductive}} system for stating and automatically proving <b>the</b> <b>equivalence</b> <b>of</b> programs in deterministic languages having a rewriting-based operational semantics. The deductive system is circular {{in nature and}} is proved sound and weakly complete; together, these results say that, when it terminates, our system correctly solves the program-equivalence problem as we state it. We show that our approach is suitable for proving <b>the</b> <b>equivalence</b> <b>of</b> both terminating and non-terminating programs, and also <b>the</b> <b>equivalence</b> <b>of</b> both concrete and symbolic programs. The latter are programs in which some statements or expressions are symbolic variables. By proving <b>the</b> <b>equivalence</b> between symbolic programs, one proves in one shot <b>the</b> <b>equivalence</b> <b>of</b> (possibly, infinitely) many concrete programs obtained by replacing the variables by concrete statements or expressions. We also report on a prototype implementation of the proposed deductive system in the K Framework. Key-words: Program Equivalence, Circular Reasoning, K framework...|$|R
2500|$|... where <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> forms {{stems from}} {{differentiation}} of Eq. 1: ...|$|R
5000|$|... {{therefore}} the second constraint for <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> networks holds if ...|$|R
5000|$|... where <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> forms {{stems from}} {{differentiation}} of Eq. 1: ...|$|R
3000|$|We give here {{a direct}} proof <b>of</b> <b>the</b> <b>equivalence</b> <b>of</b> {{statements}} (h 2), (h 3) (h 5) and (h 6). First, for any nonnegative X, we have <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> following four statements (to be shown later):E[e^c√(X)]<∞ for some constant [...] c> 0 iff m_k≤ c_ 0 ^k(2 k)!, [...] k= 1, 2,..., for some constant c [...]...|$|R
40|$|International audienceThis is a {{tutorial}} on finite automata. We {{present the}} standard material on determinization and minimization, {{as well as}} an account <b>of</b> <b>the</b> <b>equivalence</b> <b>of</b> finite automata and monadic second-order logic. We conclude with an introduction to the syntactic monoid, and as an application give a proof <b>of</b> <b>the</b> <b>equivalence</b> <b>of</b> first-order definability and aperiodicity...|$|R
40|$|In {{this paper}} {{characterizations}} of graphs satisfying heat kernel estimates {{for a wide}} class of space-time scaling functions are given. <b>The</b> <b>equivalence</b> <b>of</b> <b>the</b> two-sided heat kernel estimate and the parabolic Harnack inequality is also shown via <b>the</b> <b>equivalence</b> <b>of</b> <b>the</b> upper (lower) heat kernel estimate to the parabolic mean value (and super mean value) inequality...|$|R
30|$|<b>The</b> <b>equivalence</b> <b>of</b> (2) and (3) {{follows from}} HR and Kihlstrom et al. (1976).|$|R
