0|10000|Public
3000|$|... <b>data</b> <b>streams,</b> the RS has to {{separate}} the two <b>data</b> <b>streams</b> from the other received <b>data</b> <b>streams.</b> The superposed <b>data</b> <b>stream</b> needs to be transmitted simultaneously to [...]...|$|R
30|$|In the following, {{we explain}} {{the design of}} BCSA transceive beamforming. Based on the chosen BC strategy, the RS {{separates}} the <b>data</b> <b>streams</b> which {{are going to be}} transmitted in the BC phase and transmits to the corresponding node or nodes. For unicasting strategy, the RS separates all <b>data</b> <b>streams</b> and transmits each <b>data</b> <b>stream</b> to each corresponding receiving node. For hybrid uni/multicasting, for each group, the RS separates the unicasted <b>data</b> <b>stream</b> from the other <b>data</b> <b>streams</b> and transmits it to the corresponding node whose <b>data</b> <b>stream</b> is multicasted. The RS also separates the multicasted <b>data</b> <b>stream</b> from the other <b>data</b> <b>streams</b> and transmits it to the remaining nodes in the corresponding group. For multicasting strategy, the RS separates the superposition of two <b>data</b> <b>streams</b> from the others and transmits the superposed <b>data</b> <b>stream</b> to all nodes in the group.|$|R
50|$|The IRB {{protocol}} utilizes {{a control}} <b>data</b> <b>stream</b> and an audio <b>data</b> <b>stream.</b> The control <b>data</b> <b>stream</b> {{can be any}} protocol that will support compact data transfer, while the audio <b>data</b> <b>stream</b> generally uses existing audio streaming protocols.|$|R
40|$|In an {{internet}} end system, many applications with various requirements on their <b>data</b> <b>stream</b> transmission run simultaneously. The management of these <b>data</b> <b>streams</b> in a sending end system, {{and particularly the}} flow and congestion control for the <b>data</b> <b>streams</b> (if they exist at all), is for each <b>data</b> <b>stream</b> separate and independent from all other <b>data</b> <b>streams...</b>|$|R
40|$|In an {{internet}} end system, many applications with various requirements on their <b>data</b> <b>stream</b> transmission run simultaneously. The management of these <b>data</b> <b>streams</b> in a sending end system, {{and particularly the}} flow and congestion control for the <b>data</b> <b>streams</b> (if they exist at all), is for each <b>data</b> <b>stream</b> separate and independent from all other <b>data</b> <b>streams.</b> An interesting alternative to such a separate <b>data</b> <b>stream</b> management in a sending end system might be a common <b>data</b> <b>stream</b> management for all <b>data</b> <b>streams</b> in a sending end system. This common <b>data</b> <b>stream</b> management consists of two different aspects improving the overall performance, i. e., the throughput and the fairness, of the <b>data</b> <b>streams</b> of an end system. First, reuse {{of information about the}} current network conditions for an accurate adjustment of connection parameters of other <b>data</b> <b>streams</b> in an end system. This information can be implicitly obtained by some other <b>data</b> <b>streams</b> of the end system and/or explicitly obtained by a network performance probing approach from the end system. And second, a common congestion control between all <b>data</b> <b>streams</b> of an end system including TCP and UDP traffic. In this work some existing approaches for network information reuse, network performance probing...|$|R
3000|$|... <b>data</b> <b>streams</b> {{simultaneously}} to all nodes, one <b>data</b> <b>stream</b> for each node. For that purpose, the RS separates the received <b>data</b> <b>stream</b> spatially {{and in each}} BC phase transmits to each node one <b>data</b> <b>stream</b> {{from one of the}} other [...]...|$|R
40|$|An {{apparatus}} for mixing {{a plurality}} of input <b>data</b> <b>streams</b> is described, which has a processing unit adapted to compare the frames of the plurality of input <b>data</b> <b>streams,</b> and determine, based on the comparison, for a spectral component of an output frame of an output <b>data</b> <b>stream,</b> exactly one input <b>data</b> <b>stream</b> of the plurality of input <b>data</b> <b>streams.</b> The output <b>data</b> <b>stream</b> is generated by copying at least a part of an information of a corresponding spectral component of {{the frame of the}} determined <b>data</b> <b>stream.</b> Further or alternatively, the control values of the frames of the first and second input <b>data</b> <b>streams</b> are compared, and, if so, the control value is adopted...|$|R
40|$|DE 102007007830 A 1 UPAB: 20080912 NOVELTY - The device has a text {{data entry}} device (10) for {{entering}} text data (11 a) into a <b>data</b> <b>stream</b> {{to provide an}} escape-start-sequence into the <b>data</b> <b>stream.</b> The escape start sequence defines a set of data units (11 b) that are interpreted from an extension decoder, to provide the set into the <b>data</b> <b>stream</b> for providing an escape-continuation-sequence into the <b>data</b> <b>stream.</b> The escape-continuation-sequence defines another set of data units that is interpreted by the extension decoder together with the former set for providing the data units into the <b>data</b> <b>stream.</b> DETAILED DESCRIPTION - INDEPENDENT CLAIMS are also included for the following: (1) a method for producing a <b>data</b> <b>stream</b> (2) a method for reading a <b>data</b> <b>stream</b> with text <b>data</b> (3) a computer program with a program code for executing a method for producing a <b>data</b> <b>stream</b> and a method for reading a <b>data</b> <b>stream</b> with text <b>data</b> (4) a <b>data</b> <b>stream</b> with text <b>data.</b> USE - Device for producing a <b>data</b> <b>stream</b> (claimed). ADVANTAGE - The device enables high flexibility in data communication and processing. The method allows simple and complex receivers to process the <b>data</b> <b>stream...</b>|$|R
30|$|Our future {{research}} {{will focus on}} finding a proper method for <b>data</b> <b>stream</b> anonymization. In big <b>data,</b> <b>streaming</b> is an essential type in most data applications. The current anonymization method of MDSBA {{does not support the}} <b>data</b> <b>stream</b> anonymization. Most recent big data frameworks provide complete solutions for the <b>data</b> <b>stream.</b> We may need to amend the current MDSBA method to cope with the continuous <b>data</b> <b>streaming.</b>|$|R
40|$|<b>Data</b> <b>Streams</b> are {{infinite}} in nature. As a result, a query that executes over <b>data</b> <b>streams</b> specifies a ‘‘window’’ {{of focus}} or {{the part of}} the <b>data</b> <b>stream</b> that is of interest to the query. When new data items arrive into the <b>data</b> <b>stream,</b> the window may either expand or slide to allow the query to process these new data items. Hence, queries over <b>data</b> <b>streams</b> are continuous in nature, i. e., the query is continuously re-evaluated each time the query window slides. Window-based query processing on <b>data</b> <b>streams</b> refers to the various ways and techniques for processing and evaluating continuous queries over windows of <b>data</b> <b>stream</b> items...|$|R
3000|$|... in {{the second}} phase. Thus, S 2 needs to wait until it {{receives}} the <b>data</b> <b>stream</b> containing its own <b>data</b> <b>stream.</b> After performing self-interference cancellation, it performs known-interference cancellation to obtain the other <b>data</b> <b>stream.</b> After three phases, all nodes obtain the <b>data</b> <b>streams</b> from all other nodes.|$|R
40|$|A {{representation}} of a video sequence having a first <b>data</b> <b>stream</b> comprising first <b>data</b> portions, the first data portions comprising first timing information and a second <b>data</b> <b>stream,</b> the second <b>data</b> <b>stream</b> comprising a second data portion having second timing information, may be derived. Association information is associated to a second data portion of the second <b>data</b> <b>stream,</b> the association information indicating a predetermined first dat portion of the first <b>data</b> <b>stream.</b> A transport stream comprising {{the first and the}} second <b>data</b> <b>stream</b> as the {{representation of}} the video sequence is generated...|$|R
40|$|AbstractMobile Agent {{technology}} {{applied to}} the problem of mining <b>data</b> <b>streams</b> which, Mobile Agent application intelligence, distributed <b>data</b> <b>stream</b> mining to solve the noise present in the data processing is difficult to identify, classify slow, inefficient mining problems is proposed based on Mobile Agent distributed <b>data</b> <b>stream</b> mining model, the model design and data base displacement detection, <b>data</b> <b>stream</b> classification algorithms in a distributed environment to better address the problem of mining <b>data</b> <b>streams.</b> Mobile Agent based system for distributed <b>data</b> <b>stream</b> mining has a greater theoretical and practical significance...|$|R
40|$|Abstract: Online mining {{changes over}} <b>data</b> <b>streams</b> has been {{recognized}} {{to be an important}} task in data mining. Mining changes over <b>data</b> <b>streams</b> is both compelling and challenging. In this paper, we propose a new, single-pass algorithm, called MFC-append (Mining Frequency Changes of append-only <b>data</b> <b>streams),</b> for discovering the frequent frequency-changed items, vibrated frequency changed items, and stable frequency changed items over continuous append-only <b>data</b> <b>streams.</b> A new summary data structure, called Change-Sketch, is developed to compute the frequency changes between two continuous <b>data</b> <b>streams</b> as fast as possible. Moreover, a MFC-append-based algorithm, called MFC-dynamic (Mining Frequency Changes of dynamic <b>data</b> <b>streams),</b> is proposed to find the frequency changes over dynamic <b>data</b> <b>streams.</b> Theoretical analysis and experimental results show that our algorithms meet the major performance requirements, namely single-pass, bounded space requirement, and real-time computing, in mining <b>data</b> <b>streams...</b>|$|R
40|$|A <b>data</b> <b>stream</b> is {{a massive}} {{unbounded}} sequence of data elements continuously gen-erated at a rapid rate. Consequently, the knowledge embedded in a <b>data</b> <b>stream</b> {{is likely to be}} changed as time goes by. However, most of mining algorithms or frequency ap-proximation algorithms for a <b>data</b> <b>stream</b> do not able to extract the recent change of in-formation in a <b>data</b> <b>stream</b> adaptively. This paper proposes a sliding window method of finding recently frequent itemsets over an online <b>data</b> <b>stream.</b> The size of a window de-fines a desired life-time of the information of a transaction in a <b>data</b> <b>stream...</b>|$|R
40|$|<b>Data</b> <b>stream</b> mining is {{a process}} of extracting {{knowledge}} from continuous <b>data.</b> <b>Data</b> <b>Stream</b> classification is major challenges than classifying static data because of several unique properties of <b>data</b> <b>streams.</b> <b>Data</b> <b>stream</b> is ordered sequence of instances that arrive at a rate does not store permanently in memory. The problem making more challenging when concept drift occurs when data changes over time Major problems of <b>data</b> <b>stream</b> mining is: infinite length, concept drift, concept evolution. Novel class detection in <b>data</b> <b>stream</b> classification is a interesting research topic for concept drift problem here we compare different techniques for same...|$|R
40|$|EP 2194457 A 2 UPAB: 20100617 NOVELTY - The device (400) has a {{reference}} data generator (110) for producing {{a reference}} <b>data</b> <b>stream</b> (120) {{based on an}} input <b>data</b> <b>stream</b> (102), where the reference <b>data</b> <b>stream</b> includes a set of partial reference <b>data</b> <b>streams</b> {{with a set of}} markings. The markings indicate whether a chronological order between occurrences of the partial reference <b>data</b> <b>streams</b> is prescribed in the reference <b>data</b> <b>stream.</b> An analysis module (420) performs evaluation of a test object (402) based on the reference <b>data</b> <b>stream</b> and a test object output <b>data</b> <b>stream</b> (404). DETAILED DESCRIPTION - INDEPENDENT CLAIMS are also included for the following: (1) a method for testing a test object (2) a computer program with a program code for executing a method for testing a test object. USE - Testing device for black-box testing of a test object in an infotainment system and multimedia oriented systems transportation (MOST) system of a vehicle. ADVANTAGE - The markings indicate whether the chronological order between occurrences of the partial reference <b>data</b> <b>streams</b> is prescribed in the reference <b>data</b> <b>stream,</b> thus allowing the test object to be tested in a simple, accurate and inexpensive manner...|$|R
40|$|Uncertain <b>data</b> <b>streams</b> {{have been}} widely {{generated}} in many Web applications. The uncertainty in <b>data</b> <b>streams</b> makes anomaly detection from sensor <b>data</b> <b>streams</b> far more challenging. In this paper, we present a novel framework that supports anomaly detection in uncertain <b>data</b> <b>streams.</b> The proposed framework adopts an efficient uncertainty pre-processing procedure to identify and eliminate uncertainties in <b>data</b> <b>streams.</b> Based on the corrected <b>data</b> <b>streams,</b> we develop effective period pattern recognition and feature extraction techniques to improve the computational efficiency. We use classification methods for anomaly detection in the corrected <b>data</b> <b>stream.</b> We also empirically show that the proposed approach shows a high accuracy of anomaly detection {{on a number of}} real datasets. Comment: ACM Transactions on Internet Technology (TOIT), 16 (1 (4)), 201...|$|R
40|$|Today, we {{have many}} systems that {{generate}} <b>data</b> <b>stream.</b> All of the existing scalable system for storage of potentially infinite data were not designed for storing heterogeneous <b>data</b> <b>streams.</b> Utilization of these systems for the <b>data</b> <b>stream</b> persistence and <b>data</b> query would be highly inefficient. Hence, we aim at designing a system which makes use of characteristics of heterogeneous <b>data</b> <b>stream</b> viz. chronological, immutable and potentially infinite to support efficient storage and retrieval of social heterogeneous <b>data</b> <b>streams.</b> To elaborate, the system can 1. Store limitless data 2. Support time based range queries 3. Search patterns in single <b>data</b> <b>stream</b> 4. Search patterns between multiple <b>data</b> <b>streams.</b> To conclude, designing such a system {{is a first step}} towards enormous pool of future work...|$|R
5000|$|Encrypted-by-NTFS, sparse <b>data</b> <b>streams,</b> or {{compressed}} <b>data</b> <b>streams</b> {{cannot be}} made resident.|$|R
40|$|Abstract. The sensor networks, web {{click stream}} and astronomical {{applications}} generate a continuous flow of <b>data</b> <b>streams.</b> Most likely <b>data</b> <b>streams</b> are generated in a wireless environment. These <b>data</b> <b>streams</b> challenge {{our ability to}} store and process them in real-time with limited computing capabilities of the wireless environment. Querying and mining <b>data</b> <b>streams</b> have attracted attention {{in the past two}} years. The main idea behind the proposed techniques in mining <b>data</b> <b>streams</b> in to develop efficient approximate algorithms with an acceptable accuracy. Recently, we have proposed algorithm output granularity as an approach in mining <b>data</b> <b>streams.</b> This approach has the advantage of being resource-aware in addition to its generality. In this paper, a model for mining <b>data</b> <b>streams</b> in a wireless environment has been proposed. The model contains two novel contributions; a ubiquitous data mining system architecture and algorithm output granularity approach in mining <b>data</b> <b>streams.</b> ...|$|R
40|$|Massive <b>data</b> <b>streams</b> are now {{fundamental}} to many data processing applications. For example, Internet routers produce large scale diagnostic <b>data</b> <b>streams.</b> Such streams are rarely stored in traditional databases, and instead must be processed "on the fly" {{as they are}} produced. Similarly, sensor networks produce multiple <b>data</b> <b>streams</b> of observations from their sensors. There is growing focus on manipulating <b>data</b> <b>streams,</b> and hence, {{there is a need}} to identify basic operations of interest in managing <b>data</b> <b>streams,</b> and to support them efficiently...|$|R
40|$|This paper {{describes}} one of {{the first}} attempts to model the temporal structure of massive <b>data</b> <b>streams</b> in real-time using <b>data</b> <b>stream</b> clustering. Recently, many <b>data</b> <b>stream</b> clustering algorithms have been developed which efficiently find a partition of the data points in a <b>data</b> <b>stream.</b> However, these algorithms disregard the information represented by the temporal order of the data points in the stream which for many applications {{is an important part of}} the <b>data</b> <b>stream.</b> In this paper we propose a new framework called Temporal Relationships Among Clusters for <b>Data</b> <b>Streams</b> (TRACDS) which allows us to learn the temporal structure while clustering a <b>data</b> <b>stream.</b> We identify, organize and describe the clustering operations which are used by state-of-the-art <b>data</b> <b>stream</b> clustering algorithms. Then we show that by defining a set of new operations to transform Markov Chains with states representing clusters dynamically, we can efficiently capture temporal ordering information. This framework allows us to preserve temporal relationships among clusters for any state-of-the-art <b>data</b> <b>stream</b> clustering algorithm with only minimal overhead. To investigate the usefulness of TRACDS, we evaluate the improvement of TRACDS over pure <b>data</b> <b>stream</b> clustering for anomaly detection using several synthetic and realworld data sets. The experiments show that TRACDS is able to considerably improve the results even if we introduce a high rate of incorrect time stamps which is typical for real-world <b>data</b> <b>streams...</b>|$|R
3000|$|... - 1 nodes, the multicasted <b>data</b> <b>stream</b> is the {{transmitted}} <b>data</b> <b>stream</b> of the node {{who will}} receive the unicasted <b>data</b> <b>stream.</b> In the following, we derive the mathematical formulation of the procedure for hybrid uni/multicasting.|$|R
40|$|WO 2005013491 A UPAB: 20050406 NOVELTY - Method for {{converting}} {{and handling}} audio <b>data</b> <b>streams,</b> especially MP 3 <b>data</b> <b>streams</b> has the following steps: {{combination of the}} determining block audio data (44, 46), that are assigned to a determining block, from at least two data blocks, {{in order to obtain}} a resultant combined determining block data (48) that forms part of a second audio <b>data</b> <b>stream</b> formed from two or more first <b>data</b> <b>streams.</b> DETAILED DESCRIPTION - INDEPENDENT CLAIMS are also made for five further methods for handling audio <b>data</b> <b>streams</b> and five device for handling audio <b>data</b> <b>streams.</b> USE - Audio file format conversion, especially for combining individual audio data channels into a multi-channel audio <b>data</b> <b>stream.</b> ADVANTAGE - Format conversion is possible without use of backward pointers...|$|R
40|$|For low {{complexity}} error correction, a decoder modifies each reliability metric of {{an input}} <b>data</b> <b>stream</b> with a random perturbation value. The reliability metric comprises a weighted sum of a channel measurement for the input <b>data</b> <b>stream</b> and parity check {{results for the}} input <b>data</b> <b>stream.</b> In addition, the decoder may generate an output <b>data</b> <b>stream</b> {{as a function of}} the reliability metrics...|$|R
40|$|Analyzing {{clustering}} {{structures in}} <b>data</b> <b>streams</b> can provide critical information for making decision in realtime. Most {{research has been}} focused on clustering algorithms for <b>data</b> <b>streams.</b> We argue that, more importantly, we need to monitor the change of clustering structure online. In this paper, we present a framework for detecting the change of critical clustering structure in categorical <b>data</b> <b>streams,</b> which is indicated by the change of the best number of clusters (Best K) in the <b>data</b> <b>stream.</b> The framework extends the work on determining the best K for static datasets (the BkPlot method) to categorical <b>data</b> <b>streams</b> {{with the help of a}} Hierarchical Entropy Tree structure (HE-Tree). HE-Tree can efficiently capture the entropy property of the categorical <b>data</b> <b>streams</b> and allow us to draw precise clustering information from the <b>data</b> <b>stream</b> for highquality BkPLots. The experiments show that with the combination of HE-Tree and the BkPlot method we are able to efficiently and precisely detect the change of critical clustering structure in categorical <b>data</b> <b>streams.</b> ...|$|R
40|$|Abstract]: The {{explosion}} of <b>data</b> <b>streams</b> has sparked {{a lot of}} research interests in <b>data</b> mining on <b>streaming</b> <b>data</b> flow in recent years. Many <b>data</b> <b>streams</b> are inherently high dimensional and outlier detection from these <b>data</b> <b>streams</b> can potentially lead to discovery of useful abnormal and irregular patterns hidden in the streams. Outlier detection in <b>data</b> <b>streams</b> can be useful in many fields such as analysis and monitoring of network traffic data, web log, sensor networks and financial transactions...|$|R
30|$|Using {{unicasting}} strategy, in each BC phase, the RS transmits different <b>data</b> <b>streams</b> {{to different}} nodes. Each <b>data</b> <b>stream</b> is intended only for one receiving node. Consequently, in each BC phase each node sees the other <b>data</b> <b>streams</b> transmitted by the RS {{to the other}} nodes as interference. The <b>data</b> <b>stream</b> transmitted from the RS to each particular node is changed in each BC phase, such that within P - 1 BC phases, each node receives the <b>data</b> <b>streams</b> from all other nodes in its group.|$|R
40|$|<b>Data</b> <b>streams</b> are a {{prevalent}} {{and growing}} source of timely data. Existing systems that handle <b>streaming</b> <b>data</b> are often explicitly designed {{to serve the}} <b>data</b> <b>streams.</b> In the future we expect <b>data</b> <b>streams</b> {{to be viewed as}} just another input source to be consulted at will and on demand. These on-demand applications are often distributed, and either have significant computational or data access needs. This paper introduces an architecture for flexible access to real-time <b>streaming</b> <b>data</b> on the grid based on the following fundamental observations: Aggregation of <b>data</b> <b>streams</b> as <b>data</b> resource – for a class of <b>data</b> <b>stream</b> systems, a viable view of the <b>data</b> <b>streams</b> they produce is as a data resource, where the canonical data resource is a database. Stream access through database operations – an intuitive view of stream access operations is in terms of database operations, specifically by means of a database query language. The recent burgeoning interest in the database research community on the topic of streams attests to this viability. Grid service-based access to <b>data</b> <b>streams</b> – access to <b>data</b> <b>streams</b> has a natural realization through the proposed Global Grid Forum Grid Data Service specification, which currently specifies access to databases. The primary contributions of this paper are the definition of a <b>data</b> <b>stream</b> resource, an architecture for a <b>data</b> <b>stream</b> resource on the grid, and an identification of open research issues...|$|R
40|$|The <b>data</b> <b>stream</b> {{model has}} {{recently}} attracted attention for its applicability in numerous {{types of data}} (Henzinger et al, 1998). The clustering problem is a difficult problem for the <b>data</b> <b>stream</b> domain. Previous algorithms on clustering <b>data</b> <b>streams</b> such as those discussed in (Hulten et al, 2001) assume that the clusters are to be computed over the entire <b>data</b> <b>stream.</b> However, the exploration of th...|$|R
40|$|A {{method and}} {{apparatus}} for transmitting a byte-organized serial <b>data</b> <b>stream</b> from a transmitting station to a receiving station that may employ byte boundaries {{different than the}} transmitting station. The technique includes sending N different <b>data</b> <b>streams</b> from the remote terminal, where N {{is the number of}} different framing alignments that may be imposed on the unframed <b>data</b> <b>stream</b> by the network. The different <b>data</b> <b>streams</b> are chosen so that one will be framed by the network as the intended <b>data</b> <b>stream</b> regardless of which framing alignment is actually imposed...|$|R
3000|$|... nodes {{in group}} l. Prior to detection, each node has {{to cancel the}} self- and known-interference {{from each of the}} {{received}} <b>data</b> <b>streams</b> using the available side information. The side information can be its own transmitted <b>data</b> <b>stream</b> or a <b>data</b> <b>stream</b> which has been decoded in one of the previous BC phases. The general rule for selecting the two <b>data</b> <b>streams</b> for each group in each BC phase {{is that we have to}} ensure that the <b>data</b> <b>stream</b> of each node in each group is selected at least once.|$|R
40|$|In group communication, users {{often have}} {{different}} access rights to multiple <b>data</b> <b>streams.</b> Based on the access relation of users and <b>data</b> <b>streams,</b> users can form partially ordered relation, and <b>data</b> <b>streams</b> can form partially ordered relation. In this paper, we propose a key management scheme for hierarchical access control, which considers both partially ordered user relations and partially ordered <b>data</b> <b>stream</b> relations. We also propose an algorithm for constructing a logical key graph, which is suitable even when users and <b>data</b> <b>streams</b> have complex relations. Simulation {{results show that}} our scheme can significantl...|$|R
40|$|In this paper, {{we propose}} an online {{single-pass}} algorithm MFC-append (Mining Frequency Change patterns in append-only <b>data</b> <b>streams)</b> for online mining frequent frequency change items in continuous append-only <b>data</b> <b>streams.</b> An online space-efficient data structure called Change-Sketch is developed for providing fast response time to compute dynamic frequency changes between <b>data</b> <b>streams.</b> A modified approach MFCdynamic (Mining Frequency Change patterns in dynamic <b>data</b> <b>streams)</b> is also presented to mine frequency changes in dynamic <b>data</b> <b>streams.</b> The theoretic analyses show that our algorithms meet the major performance requirements of single-pass, bounded storage, and real time for <b>streaming</b> <b>data</b> mining. 1...|$|R
40|$|Abstract—With {{the limited}} memory and time, a fast and {{effective}} clustering can’t be achieved for massive, highspeed <b>data</b> <b>stream,</b> so this paper mainly studies the key method of <b>data</b> <b>stream</b> clustering under the restriction of resource, and then proposes a dynamic <b>data</b> <b>stream</b> clustering algorithm (D-DStream) based on wavelet network and density, which uses sliding window to process <b>data</b> <b>stream.</b> Firstly, apply wavelet network to compress <b>data</b> <b>stream</b> {{and build a}} much smaller synopsis data structure to save major characteristics of <b>data</b> <b>stream,</b> then cluster with two-phase density clustering algorithm. The results of experiment show that the D-DStream algorithm can successfully solve clustering problems caused by STREAM or others, also has high time efficiency and high clustering quality...|$|R
