103|371|Public
5|$|Some missions, {{typically}} dispatch missions, {{require a}} special item {{to be in}} possession in order to accept the mission. Others require a dispatch character to have a specific <b>job</b> <b>class.</b> In regards to items, this may mean another mission {{must be done to}} get an item that would allow you to perform the later mission.|$|E
5|$|The {{gameplay}} of Final Fantasy Tactics differs {{in several}} key areas from other {{titles in the}} Final Fantasy series. Instead of a generic battle screen, with the player's characters {{on one side and}} the enemies on the other, encounters take place on three-dimensional, isometric fields. Characters move on a battlefield composed of square tiles; movement and action ranges are determined by the character's statistics and <b>job</b> <b>class.</b> Battles are turn-based; a unit may act when its CT (Charge Time) reaches 100. Charge time is increased once every CT unit (a measure of time in battles) by an amount equal to the unit's speed statistic. When CT reaches 100 or greater, the unit may act. During battle, whenever a unit performs an action successfully, it gains Experience Points (EXP) and Job Points (JP).|$|E
25|$|Maple Story {{has added}} a Pirate <b>job</b> <b>class.</b>|$|E
50|$|According to this method, a {{predetermined}} number of job groups or <b>job</b> <b>classes</b> are established and jobs {{are assigned to}} these classifications. This method places groups of <b>jobs</b> into <b>job</b> <b>classes</b> or <b>job</b> grades. Separate <b>classes</b> may include office, clerical, managerial, personnel, etc. Following is {{a brief description of}} such a classification in an office.|$|R
50|$|Like {{previous}} installments in the Radiant Mythology series, {{the player}} character will {{be capable of}} changing <b>job</b> <b>classes</b> by talking with this game's Guild Leader. Some <b>job</b> <b>classes</b> have special requirements {{in order for them}} to be unlocked, and players will have to expend grade points in order to transform into them.|$|R
5000|$|... #Caption: Final Fantasy Tactics {{offers a}} wide {{selection}} of <b>Job</b> <b>Classes.</b> This particular character is currently a Wizard.|$|R
500|$|In battle, JP {{are rewarded}} for every {{successful}} action. JP {{are used to}} learn new abilities within each <b>job</b> <b>class.</b> Accumulating enough JP results in a job level up; new jobs are unlocked by attaining a certain level in the current <b>job</b> <b>class</b> (for instance, to become a Priest or Wizard, the unit must first attain Job Level 2 as a Chemist), which also allows the character to gain more JP in that class in battles. Once all the abilities of a <b>job</b> <b>class</b> have been learned, the class is [...] "Mastered". A soldier in a specific Job always has its innate skill equipped (Wizards always have [...] "Black Magic," [...] Knights always have [...] "Battle Skill") but a second job-skill slot and several other ability slots (Reaction, Support, and Movement) can be filled with any skill the particular soldier has learned from any <b>job</b> <b>class.</b> This deep level of customization and flexibility grants nigh-infinite replayability, contributing to the game's unusually enduring popularity.|$|E
500|$|During early {{development}} of Final Fantasy VII, Yuffie was envisioned as a 25-year-old ex-SOLDIER now {{working as a}} bounty hunter, seeking both the game's protagonist Cloud Strife and its antagonist Sephiroth, while also having a bounty on her own head. Her <b>job</b> <b>class</b> was originally listed as [...] "ninja (assassin)" [...] and she {{was intended to be}} a daughter of the long-deceased Kasumi Kisaragi. The Wutai sidequest present in the final incarnation of the game was significantly different. Her age and description was different for each of the several wanted posters; what Yuffie looks like, as her level, is determined on the last wanted poster viewed. She would also encounter the party in a random encounter, or attack Cloud when he is sleeping in an inn. The Wutai scenario required Yuffie to be recruited to complete it.|$|E
500|$|Final Fantasy XIs {{incarnation}} of Limit Breaks are [...] "Weapon Skills". Physical damage given and received fills a Tactical Points (TP) bar, {{to a maximum}} of 300. Any amount above 100 is able to be used up by being channelled into a weapon skill. These skills vary in effect depending on <b>job</b> <b>class,</b> what weapon is equipped, how full the TP bar is, and how proficient the player is with the weapon. If partying with other players, one may use these weapon skills in succession {{in order to create a}} [...] "Skillchain". A skillchain creates additional damage after a series of weapon skills are used. Building on this even further, magic used on a skillchain at the right time will receive a boost to its damage; this is called a [...] "Magic Burst". In order to create the best possible skillchains and magic bursts, players must work together, focusing on each other's actions and timing.|$|E
40|$|Abstract. We {{present a}} {{parallel}} job scheduling approach for coarsegrain timesharing which preempts jobs to disk and avoids any additional memory pressure. The approach provides control regarding the resource shares allocated to different <b>job</b> <b>classes.</b> We demonstrate {{that this approach}} significantly improves response times for short and medium jobs and that it permits controlling different desirable resource-shares for different <b>job</b> <b>classes</b> {{at different times of}} the day according to site policies. ...|$|R
5000|$|The game {{features}} the past <b>job</b> <b>classes</b> {{from the two}} previous installments in the Radiant Mythology series, as well as introducing new ones.|$|R
40|$|Resource {{management}} for a data center with multiple <b>job</b> <b>classes</b> is investigated in this thesis. We focus on strategies for allocating resources to an application mix {{such that the}} service level agreements (SLAs) of individual applications are met. A performance model with two interactive <b>job</b> <b>classes</b> is {{used to determine the}} smallest number of processor nodes required to meet the SLAs of both classes. For each class, the SLA is specified by the relationship: Prob(response time≤x) ≥y. Two allocation strategies are considered: shared allocation (SA) and dedicated allocation (DA). For the case of FCFS scheduling, analytic results for response time distribution are used to develop a heuristic algorithm that determines the allocation strategy (SA or DA) that requires fewer processor nodes. The effectiveness of this algorithm is evaluated over a range of operating conditions. The performance of SA with non-FCFS scheduling is also investigated. Among the scheduling disciplines considered, a new discipline called probability dependent priority (PDP) is found to have the best performance in terms of requiring the smallest number of nodes. Furthermore, we extend our heuristic algorithm for FCFS to three <b>job</b> <b>classes.</b> The effectiveness of this extended algorithm is evaluated. As to priority scheduling, the performance advantage of PDP is also confirmed for the case of three <b>job</b> <b>classes...</b>|$|R
50|$|The {{solution}} {{suggested by}} Martin utilized what is today called the Interface Segregation Principle. Applied to the Xerox software, an interface layer between the <b>Job</b> <b>class</b> and its clients was added using the Dependency Inversion Principle. Instead of having one large <b>Job</b> <b>class,</b> a Staple Job interface or a Print Job interface was created {{that would be}} used by the Staple or Print classes, respectively, calling methods of the <b>Job</b> <b>class.</b> Therefore, one interface was created for each job type, which were all implemented by the <b>Job</b> <b>class.</b>|$|E
50|$|As each <b>job</b> <b>class</b> is used, it {{increases}} in level and will over time eventually learn its <b>job</b> <b>class</b> specific Hi-ougi/Mystic Arte, {{which can be}} used to unleash a great deal of damage.|$|E
5000|$|There are twelve [...] {{different}} playable {{characters as}} of June 2017, each {{with three different}} <b>job</b> <b>class</b> paths (except Rose who has four) that can be chosen starting at level 15. Each <b>job</b> <b>class</b> path offers specialization in a different play style along with unique skills.|$|E
50|$|Generalized {{processor}} sharing is a multi-class {{adaptation of}} the policy which shares service capacity according to positive weight factors to all non-empty <b>job</b> <b>classes</b> at the node, irrespective {{of the number of}} <b>jobs</b> of each <b>class</b> present. Often it is assumed that the <b>jobs</b> within a <b>class</b> form a queue and that queue is served on a first-come, first-served basis, but this assumption is not necessary for many GPS applications.|$|R
50|$|Ragnarok Online {{features}} Mammonite as a skill {{exclusive to}} the Merchant <b>job</b> <b>classes.</b> This skill sacrifices {{a certain amount}} of zeny (in-game currency) to deal large damage to an enemy.|$|R
40|$|Copyright 2016 ICST. Obtaining {{response}} time moments in processor sharing (PS) queues is difficult due to serving of multiple jobs. Egaliatarian PS (EPS) queues {{are limited to}} one <b>class</b> of arriving <b>jobs.</b> Discriminatory PS (DPS) assigns weights to different <b>job</b> <b>classes</b> and offers more diverse modeling capabilities than EPS. It is known that {{response time}} is the representative metric for delay as specified in service level agreements (SLAs), which consider higher moments important. Hence, we build an automated numerical algorithm for calculating higher moments of response time in M/M/ 1 -DPS queues for multiple <b>job</b> <b>classes</b> and test two different case studies...|$|R
5000|$|In battle, JP {{are rewarded}} for every {{successful}} action. JP {{are used to}} learn new abilities within each <b>job</b> <b>class.</b> Accumulating enough JP results in a job level up; new jobs are unlocked by attaining a certain level in the current <b>job</b> <b>class</b> (for instance, to become a Priest or Wizard, the unit must first attain Job Level 2 as a Chemist), which also allows the character to gain more JP in that class in battles. Once all the abilities of a <b>job</b> <b>class</b> have been learned, the class is [...] "Mastered". A soldier in a specific Job always has its innate skill equipped (Wizards always have [...] "Black Magic," [...] Knights always have [...] "Battle Skill") but a second job-skill slot and several other ability slots (Reaction, Support, and Movement) can be filled with any skill the particular soldier has learned from any <b>job</b> <b>class.</b> This deep level of customization and flexibility grants nigh-infinite replayability, contributing to the game's unusually enduring popularity.|$|E
50|$|Case 1. Suppose {{that some}} {{interval}} in EFT(I) {{has the same}} <b>job</b> <b>class</b> as J.|$|E
5000|$|Ruri 瑠璃 (Mayuko Kobayashi): Main character. Curious and cheerful, {{she starts}} out without a <b>job</b> <b>class.</b>|$|E
40|$|Abstract- Load {{balancing}} is {{a crucial}} issue in parallel and distributed systems to ensure fast processing and optimum utilization of computing resources. Load balancing strategies try to ensure that every processor in the system does almost {{the same amount of}} work at any point of time. This paper investigates dynamic load-balancing algorithm for heterogeneous distributed systems where half of the processors have double the speed of the others. Two <b>job</b> <b>classes</b> are considered for the study, the <b>jobs</b> of first <b>class</b> are dedicated to fast processors. While second <b>job</b> <b>classes</b> are generic in the sense they can be allocated to any processor. The performance of the scheduler has been verified under scalability. Some simulation results are presented to show the effectiveness of genetic algorithms for dynamic load balancing...|$|R
40|$|Load sharing {{is key to}} the {{efficient}} operation of distributed systems. This paper investigates load sharing policies in a heterogeneous distributed system, where half of the total processors have double the speed of the others. Processor performance is examined and compared under a variety of workloads. Two <b>job</b> <b>classes</b> are considered. Programs of the first class are dedicated to fast processors, while second class programs are generic {{in the sense that they}} can be allocated to any processor. The objective is to find a policy that results in good overall performance while maintaining the fairness of individual <b>job</b> <b>classes.</b> Simulation results indicate that the performance of the best method depends on system load...|$|R
40|$|We study a resource-sharing network {{where each}} job {{requires}} the concurrent occupancy of {{a subset of}} links (servers/resources), and each link's capacity is shared among <b>job</b> <b>classes</b> that require its service. The real-Time allocation of the service capacity among <b>job</b> <b>classes</b> {{is determined by the}} so-called "proportional fair" scheme, which allocates the capacity among <b>job</b> <b>classes</b> taking into account the queue lengths and the shadow prices of link capacity. We show that the usual traffic condition is necessary and sufficient for the diffusion limit to have a stationary distribution. We also establish the uniform stability of the prelimit networks, and hence the existence of their stationary distributions. To justify the interchange of two limits, the limit in time and limit in diffusion scaling, we identify a bounded workload condition, and show it is a sufficient condition to justify the interchange for the stationary distributions and their moments. This last result is essential for the validity of the diffusion limit as an approximation to the stationary performance of the original network. We present a set of examples to illustrate justifying the validity of diffusion approximation in resource-sharing networks, and also discuss extensions to other multiclass networks via the well-known Kumar-Seidman/Rybko-Stolyar model. Department of Logistics and Maritime Studie...|$|R
50|$|Case 2. Suppose {{that there}} are no {{intervals}} in EFT(I) with the same <b>job</b> <b>class</b> as J.|$|E
50|$|First, {{notice that}} there is either some {{interval}} in EFT(I) with the same <b>job</b> <b>class</b> as J, or there isnt.|$|E
50|$|However, Snipers have a wider {{array of}} {{skills such as}} Poison Arrow and more AOEs than any other <b>job</b> <b>class.</b>|$|E
40|$|This paper {{considers}} {{the problem of}} dynamic admission control in a loss queueing system with two <b>classes</b> of <b>jobs.</b> The <b>classes</b> require an exponential amount of service time with different means and bring different revenues, whereas the arrivals occur according to a general distribution. We establish the existence of optimal acceptance thresholds for both <b>job</b> <b>classes</b> and show that under certain conditions there exists a preferred class. We also provide an example that demonstrates that for a Markov modulated Poisson arrival process there may be states in which both classes are rejected. 2...|$|R
40|$|In this paper, {{we present}} a {{capacity}} analysis of an automated transportation system in a flexible assembly factory. The transportation system, together with the workstations, is modeled as a network of queues with multiple <b>job</b> <b>classes.</b> Due to its complex nature, the steadystate behavior of this network is not described by a productform solution. Therefore, {{we present a}}n approximate method to determine {{the capacity of the}} network. We first study a number of key elements of the system separately and subsequently combine the results of this analysis in an Approximate Mean Value Analysis (AMVA) algorithm. The key elements are a buffer/transfer system (the bottleneck of the system), modeled as a preemptiverepeat priority queue with identical deterministic service times for the different <b>job</b> <b>classes,</b> a set of elevators, modeled as vacation servers, a number of work cells, modeled as multiserver queues, and several nonaccumulating conveyor belts, modeled as ample servers. The AMVA algorithm exploits the property that the initial multiclass queueing network can be decomposed into a sequence of singleclass queueing networks and hence is very efficient. Comparison of numerical results of the AMVA algorithm for the throughputs for the different <b>job</b> <b>classes</b> to simulation results shows that the AMVA algorithm is also accurate. For several series of instances, the maximum relative error that we found was only 4. 0 %...|$|R
50|$|Sibi Malayil’s family dramedy has a theme {{consistent}} with the Malayalam films of the 90s. Unemployment, disdain of blue collar <b>jobs,</b> <b>class</b> divisions and dowry issues. The characters are down to earth and struggle {{to make ends meet}} in their daily lives while never letting go of the innate goodness that defines them.|$|R
5000|$|Ragnarok Online -Assassins are {{the only}} <b>job</b> <b>class</b> in the game to dual-wield daggers, swords, and one axe with one dagger. They are also the only <b>job</b> <b>class</b> that can use Katars (कटार) (in the game, is {{considered}} a two-handed weapon). Their damage, depending on the build, relies heavily on the status points. (Critical Build->Luck, AGI/DEX, Dagger, etc.). In addition, they deal extra damage on the initial attack on the enemy when cloaked.|$|E
5000|$|Case 1. Suppose J1 and J2 were {{mapped to}} J [...] {{because they have}} the same <b>job</b> <b>class</b> as J [...]|$|E
50|$|The design {{problem was}} that a single <b>Job</b> <b>class</b> was used by {{almost all of the}} tasks. Whenever a print job or a {{stapling}} job needed to be performed, a call was made to the <b>Job</b> <b>class.</b> This resulted in a 'fat' class with multitudes of methods specific to a variety of different clients. Because of this design, a staple job would know about all the methods of the print job, even though there was no use for them.|$|E
50|$|The game plays as a {{tactical}} role-playing game, with the player navigating {{a team of}} characters across a grid in order to defeat an opposing party of characters in turn-based combat. The game's customization options for characters include 30 different <b>job</b> <b>classes,</b> 200 weapons to equip, and over 600 skill moves to learn.|$|R
40|$|We study a {{stochastic}} {{network that}} consists of two servers shared by two <b>classes</b> of <b>jobs.</b> <b>Class</b> 1 <b>jobs</b> require a concurrent occupancy of both servers while <b>class</b> 2 <b>jobs</b> use one server only. The traffic intensity is such that both servers are bottlenecks, meaning the service capacity {{is equal to the}} offered workload. The real-time allocation of the service capacity among the <b>job</b> <b>classes</b> {{takes the form of a}} solution to an optimization problem that maximizes a utility function. We derive the diffusion limit of the network and establish its asymptotic optimality. In particular, we identify a cost objective associated with the utility function, and show that it is minimized at the diffusion limit by the utility-maximizing allocation within a broad class of “fair ” allocation schemes. The model also highlights the key issues involved in multiple bottlenecks...|$|R
40|$|The {{motivation}} for the following paper were three models for a variant of a UNIX based multiprocessor operating system that was developed at the Institute for mathematical machines and dataprocessing IV [Jung 91]. These models were formerly analyzed by Markovian methods to get performance measures and the measurements of the real system were also available. This models had the following problems : ffl Class switching is allowed. There are more <b>job</b> <b>classes</b> in the system available which can switch their class. The problem then is {{that the number of}} <b>jobs</b> in each <b>class</b> is not longer constant but depends on the time when you examine the system. ffl Jobs have priorities with a mixed priority strategy. That means that some <b>job</b> <b>classes</b> can be preempted but others not. To reduce the time to analyze the system a new approximate technique is developed. The technique is based on the well known 'Mean Value Analysis' (MVA). This new technique can be applied to open and closed queueing networks. 1 [...] ...|$|R
