2008|7518|Public
5|$|During the trial, {{the defense}} {{presents}} evidence that Deng {{was convicted of}} prostitution two years ago. Deng denies the charge and says she had been gang-raped by the soldiers who killed her husband. Deng's credibility weakens further when the defense presents a surprise witness, Daniel Achok, who testifies that he had advised her to fabricate the gang rape on her application for political asylum. The jury reached verdicts {{on two of the}} three charges, finding DiStasio guilty of unlawful imprisonment and not guilty of assault but <b>deadlocks</b> on the rape charge, and Benson says that he will likely serve a year in prison.|$|E
5|$|To resolve {{prolonged}} <b>deadlocks</b> in papal {{elections in}} the earlier years, local authorities often resorted to the forced seclusion of the cardinal electors, such as first {{in the city of}} Rome in 1241, and possibly before that in Perugia in 1216. In 1269, when the forced seclusion of the cardinals alone failed to produce a pope, the city of Viterbo refused to send in any materials except bread and water. When even this failed to produce a result, the townspeople removed the roof of the Palazzo dei Papi in their attempt to speed up the election.|$|E
25|$|Under the Twelfth Amendment, the Senate has {{the power}} to elect the vice {{president}} if no vice presidential candidate receives a majority of votes in the Electoral College. The Twelfth Amendment requires the Senate to choose from the two candidates with the highest numbers of electoral votes. Electoral College <b>deadlocks</b> are rare. The Senate has only broken a deadlock once; in 1837, it elected Richard Mentor Johnson. The House elects the president if the Electoral College <b>deadlocks</b> on that choice.|$|E
40|$|Edge-chasing is {{the basis}} of many <b>deadlock</b> {{detection}} algorithms. This method detects a <b>deadlock</b> by propagating special messages called probes along dependency edges. When the initiator of a probe receives the probe back, it knows the existence of a <b>deadlock.</b> Once a <b>deadlock</b> is detected, a special message called token is sent to clean up those probes in the <b>deadlock</b> cycle which, if not removed, may later lead to phantom <b>deadlock</b> detections. Only after the token has traversed the entire <b>deadlock</b> cycle and returned to its initiator, the <b>deadlock</b> is resolved by aborting a so-called victim in the <b>deadlock</b> cycle. In a <b>deadlock,</b> all involved transactions are held waiting and all involved resources are locked up. It is thus desirable to resolve a <b>deadlock</b> as soon as it is detected, without waiting for the token message to go around the <b>deadlock</b> cycle. This paper proposes an algorithm that achieves this and thereby reduces the average <b>deadlock</b> persistence time by as much as two thirds [...] ...|$|R
50|$|Hammerstein's next recruit is <b>Deadlock,</b> Grand Wizard of the Knights Martial. <b>Deadlock</b> has {{foreseen}} why Hammerstein {{has come}} - {{if he can}} defeat <b>Deadlock</b> in combat, he will join him - but if he fails, <b>Deadlock</b> will claim his life. Despite <b>Deadlock's</b> psychic powers and black magic, Hammerstein wins the duel, and <b>Deadlock</b> reluctantly agrees to join the ABC Warriors.|$|R
30|$|Passive {{strategies}} {{solve the}} <b>deadlock</b> problem when a <b>deadlock</b> occurs, including <b>deadlock</b> detection strategy and <b>deadlock</b> relieving strategy. The efficiency of passive strategies {{depends on the}} speed of <b>deadlock</b> detection and <b>deadlock</b> relieving. After a <b>deadlock</b> is detected, the system can be unlocked by automatic or manual methods. While this approach tends to achieve high real-time performance and resource utilization, it requires full understanding of the <b>deadlock.</b> Abd El-Gwad et al. [17] proposed a <b>deadlock</b> detection protocol based on threads, which schedules the threads in order to detect which thread would initiate the <b>deadlock.</b> Aydin Aybar et al. [18] presented an approach to design a supervisory controller for a timed Petri nets (TPNs) to avoid <b>deadlock</b> by using the method of stretching. The presented approach determines the least restrictive controller which guarantees <b>deadlock</b> avoidance, whenever such a controller exists. Steghofer et al. [19] described a distributed <b>deadlock</b> avoidance algorithm for self-organizing resource flow systems. The algorithm leverages implicit local knowledge about the system structure and uses a simple coordination mechanism to detect loops in the resource flow. But this algorithm must use specific system architecture knowledge and its generality is not strong. Xing et al. [20] proposed a deadlock-free genetic scheduling algorithm to optimize the performance of automated manufacturing systems based on <b>deadlock</b> control policy, which embedded the optimal <b>deadlock</b> avoidance policy into the genetic algorithm and used the one-step look-ahead method in the optimal <b>deadlock</b> control policy.|$|R
25|$|In heavily {{automated}} {{production systems}} production planning and information gathering may be executed via the control system, {{attention should be}} paid however to avoid problems such as <b>deadlocks,</b> as these can lead to productivity losses.|$|E
25|$|Traditional {{computational}} problems {{take the}} perspective that we ask a question, a computer (or a distributed system) processes {{the question for}} a while, and then produces an answer and stops. However, there are also problems where {{we do not want}} the system to ever stop. Examples of such problems include the dining philosophers problem and other similar mutual exclusion problems. In these problems, the distributed system is supposed to continuously coordinate the use of shared resources so that no conflicts or <b>deadlocks</b> occur.|$|E
25|$|Justice O'Connor of the Ontario Superior Court of Justice {{ordered that}} a vote be {{conducted}} and administered by a referendum oversight committee (ROC) based on CFS bylaws (consisting of two representatives {{selected by the}} CFS and two representatives selected by the student association). Justice O'Connor modified the committee by appointing former Ontario Superior Court Justice James Chadwick as a fifth {{member of the committee}} to act as an independent third party to break <b>deadlocks</b> should the two parties disagree on administration of the vote.|$|E
30|$|In {{order to}} address this {{critical}} challenge, this paper proposes an efficient <b>deadlock</b> solving method, which aims at improving the efficiency of <b>deadlock</b> solving mechanisms in vehicle sensing systems. In summary, the major contributions of this paper include: 1) we analyze the <b>deadlock</b> problem in vehicle sensing systems based on the <b>deadlock</b> occurring conditions; and 2) we build a <b>deadlock</b> solving optimization model and propose a <b>deadlock</b> solving method based on co-evolutionary genetic algorithm for vehicle sensing systems, which can quickly solve the <b>deadlock</b> problem and ensure the minimum cost.|$|R
30|$|In this paper, we {{investigate}} {{the problem of}} <b>deadlock</b> in vehicle sensing systems in Internet of Vehicles. This paper proposes an efficient <b>deadlock</b> solving method for vehicle sensing systems. In this method, the <b>deadlock</b> problem is analyzed based on four <b>deadlock</b> occurred conditions. Tasks and resource allocation characteristics are described by mathematical expressions. Combining the quantity and cost of tasks, a <b>deadlock</b> solving optimization model is developed for vehicle sensing systems. To quickly solve the <b>deadlock</b> and to ensure the minimum cost, co-evolutionary genetic algorithm (CGA) is used to search for optimal <b>deadlock</b> solving strategies. Simulations are conducted and the experimental results show {{the efficiency of the}} proposed <b>deadlock</b> solving method based on CGA.|$|R
40|$|The flow of {{multiple}} concurrent jobs in an automated manufacturing system (AMS), all competing for a finite set of resources, {{often leads to}} a <b>deadlock</b> situation. In this paper, we develop Petri net and Markov chain models for manufacturing systems with blocking and <b>deadlock.</b> We compute {{the probability that the}} system in an absorbing (<b>deadlocked)</b> state, the mean time to <b>deadlock,</b> and the throughput before <b>deadlock,</b> etc., which can be used to compare performance of various prevention and avoidance strateges. A systematic method for designing locks and interlocks for <b>deadlock</b> avoidance using the reachability graph of the Petri net model is presented.. ...|$|R
25|$|The inaugural ICC Intercontinental Cup was {{completed}} on 22 November 2004 when Scotland won the title in Sharjah, United Arab Emirates. Scotland beat Canada by an innings and 84 {{runs in the}} final. The competition included 12 teams, divided by geographical region into four groups of three. Each team played the other two teams in its group once each. The top team in each group then progresses to the semi-finals, and the winners of those to the final. In order to encourage competitive play and avoid <b>deadlocks,</b> a point system including bonus points was used.|$|E
25|$|All {{the qualities}} of CO in the list above, except the first three, are also possessed by SS2PL, which is a special case of CO, but {{blocking}} and constraining. This partially explains the popularity of SS2PL as a solution (practically, the only solution, for many years) for achieving global serializability. However, property 9 above, automatic resolution of global <b>deadlocks,</b> has not been noticed for SS2PL in the database research literature until today (2009; except in the CO publications). This, since the phenomenon of voting-deadlocks in such environments and their automatic resolution by the atomic commitment protocol has been overlooked.|$|E
25|$|Originally, in Windows 9x, DirectShow {{used the}} Video Renderer filter. This drew the images using DirectDraw 3, but could also fall back to GDI or overlay drawing modes in some {{circumstances}} (depending upon the visibility of the video window and the video card's capabilities). It had limited access to the video window. Video for Windows had been plagued with <b>deadlocks</b> caused by applications' incorrect handling of the video windows, so in early DirectShow releases, the handle to the playback window was hidden from applications. There was also no reliable way to draw caption text or graphics {{on top of the}} video.|$|E
30|$|Vehicle {{sensing system}} is an {{important}} research topic in the research field of Internet-of-Vehicles (IoV). Reliability and real-time performance of vehicle sensing systems are greatly influenced when <b>deadlock</b> happens. When a <b>deadlock</b> is detected, identifying the optimal <b>deadlock</b> solving strategy can ensure that the system goes back to normal state quickly. In order to address this issue, this paper proposes an efficient <b>deadlock</b> solving method. Firstly, the <b>deadlock</b> problem in a vehicle sensing system is analyzed based on four <b>deadlock</b> occurring conditions (i.e., mutual exclusion, hold and wait, no preemption, and circular wait). Secondly, an optimization model is built to combine the quantity and cost of tasks in vehicle sensing systems. After that, a co-evolutionary genetic algorithm (CGA) is developed to search the optimal <b>deadlock</b> solving strategy. Finally, experiments by simulation are conducted and the experimental results show {{the efficiency of the}} proposed <b>deadlock</b> solving method for vehicle sensing systems.|$|R
30|$|<b>Deadlock</b> {{problem solving}} {{strategies}} {{can be classified}} into active strategies and passive strategies. Active strategies solve a <b>deadlock</b> before it occurs by online or offline methods. Active strategies include <b>deadlock</b> prevention strategy and <b>deadlock</b> avoiding strategy. The main purpose of <b>deadlock</b> prevention strategy {{is to ensure that}} the system always stays away from a <b>deadlock</b> state. It uses offline calculation mechanism to control the request and allocation of resource through imposing restrictions to the system. Various <b>deadlock</b> prevention strategies are proposed in recent years. Yi-Sheng et al. [15] proposed a <b>deadlock</b> prevention algorithm for sequence resource allocation systems, employing Petri nets to build and describe the systems of simple sequential the processes with resources (S 3 PGR) model. On the other hand, for the <b>deadlock</b> avoiding strategy, system state is monitored continuously in the process of system operation. The system scheduling policy will judge whether a process will lead to a <b>deadlock</b> or not and then decides the next system operation process. Ballaletal [16] proposed the MAXWIP (Max a work in progress) algorithm for <b>deadlock</b> avoidance in mobile wireless sensor network monitoring systems, which was described as Free Choice Multi-Reentrant Flow Line (FMRF) systems.The advantage of this method is that system operating efficiency can be kept in the greatest degree. But it must obtain all the system reachable states first, which is not realistic in medium- or large-scale systems.|$|R
40|$|Abstract: This paper {{addresses}} a scheduling and control method for <b>deadlock</b> avoidance operation in robotic manufacturing cells with flexible job sequences. The proposed scheduling method generates an optimal or near-optimal schedule avoiding <b>deadlock</b> even when an unexpected event such as machine failure happens. The proposed deadlock-free scheduling approach {{consists of two}} components: <b>deadlock</b> manager, and dynamic scheduler. The dead-lock manager builds and manages <b>deadlock</b> in a robotic manufacturing cell. The resources or machines in the robotic manufacturing cell are classified into two categories: potential dead-lock set and deadlock-safe set. This paper presents an efficient method to obtain a minimal potential <b>deadlock</b> set using a genetic algorithm. Scheduling with <b>deadlock</b> avoidance policy {{is applied to the}} potential <b>deadlock</b> set, and scheduling only is applied to the deadlock-safe set. The dynamic scheduler generates a deadlock-free schedule using piecewise shifting operations in a real-time operation phase. The proposed scheduling approach is shown by simulation to be efficient in managing <b>deadlock</b> inherent to the robotic manufacturing cells...|$|R
25|$|In 1866, Congress legislated {{a remedy}} for a {{situation}} under which <b>deadlocks</b> in state legislatures over the election of Senators were creating vacancies in the office. The act required the two houses of each legislature to meet in joint session on a specified day and to meet every day thereafter until a Senator was selected. The first comprehensive federal statute dealing with elections was adopted in 1870 {{as a means of}} enforcing the Fifteenth Amendment’s guarantee against racial discrimination in granting suffrage rights. Under the Enforcement Act of 1870, and subsequent laws, false registration, bribery, voting without legal right, making false returns of votes cast, interference in any manner with officers of election, and the neglect by any such officer of any duty required by state or federal law were made federal offenses. Provision was made for the appointment by federal judges of persons to attend at places of registration and at elections with authority to challenge any person proposing to register or vote unlawfully, to witness the counting of votes, and to identify by their signatures the registration of voters and election tally sheets.|$|E
500|$|Zywicki again {{argues that}} this was not a serious issue. <b>Deadlocks</b> were a problem, but they were the {{exception}} rather than the norm; many legislatures did not deadlock over elections at all. Most of those that did in the 19th century were the newly admitted western states, which suffered from [...] "inexperienced legislatures and weak party discipline...as western legislatures gained experience, <b>deadlocks</b> became less frequent." [...] While Utah suffered from <b>deadlocks</b> in 1897 and 1899, they became what Zywicki refers to as [...] "a good teaching experience," [...] and Utah never again failed to elect senators. Another concern was that when <b>deadlocks</b> occurred, state legislatures were unable to conduct their other normal business; James Christian Ure, writing in the South Texas Law Review, notes that this did not in fact occur. In a deadlock situation, state legislatures would deal with the matter by holding [...] "one vote at the beginning of the day—then the legislators would continue with their normal affairs".|$|E
500|$|Electoral <b>deadlocks</b> {{were another}} issue. Because state legislatures {{were charged with}} {{deciding}} whom to appoint as senators, the system relied {{on their ability to}} agree. Some states could not, and thus delayed sending representatives to Congress; in a few cases, the system broke down to the point where states completely lacked representation in the Senate. <b>Deadlocks</b> started to become an issue in the 1850s, with a deadlocked Indiana legislature allowing a Senate seat to sit vacant for two years. Between 1891 and 1905, 46 elections were deadlocked across 20 states; in one extreme example, a Senate seat for Delaware went unfilled from 1899 until 1903. The business of holding elections also caused great disruption in the state legislatures, with a full third of the Oregon House of Representatives choosing not to swear the oath of office in 1897 due to a dispute over an open Senate seat. The result was that [...] Oregon's legislature was unable to pass legislation that year.|$|E
30|$|When a <b>deadlock</b> is detected, a <b>deadlock</b> solving {{mechanism}} {{is needed to}} ensure that the system goes back to normal. Generally, the method of solving <b>deadlock</b> is to abort one or more tasks and consequently release the held resources, which can break the state of circular wait. This section first describes the <b>deadlock</b> solving optimization problem and then proposes an optimization method based on co-evolutionary genetic algorithm.|$|R
40|$|Open {{restricted}} queueing networks {{give rise}} to the phenomenon of <b>deadlock,</b> whereby some customers {{may be unable to}} ever leave a server due to mutual blocking. This paper explores <b>deadlock</b> in queueing networks with limited queueing capacity, presents a method of detecting <b>deadlock</b> in discrete event simulations, and builds Markov chain models of these <b>deadlocking</b> networks. The three networks for which Markov models are given include single and multi-server networks for one and two node systems. The expected times to <b>deadlock</b> of these models are compared to results obtained using a simulation of the stochastic process, together with the developed <b>deadlock</b> detection method. This paper aims to be of value to simulation modellers of queues...|$|R
40|$|AbstractThe <b>deadlock</b> gene is {{required}} {{for a number of}} key developmental events in Drosophila oogenesis. Females homozygous for mutations in the <b>deadlock</b> gene lay few eggs and those exhibit severe patterning defects along both the anterior–posterior and dorsal–ventral axis. In this study, we analyzed eggs and ovaries from <b>deadlock</b> mutants and determined that <b>deadlock</b> {{is required}} for germline maintenance, stability of mitotic spindles, localization of patterning determinants, oocyte growth and fusome biogenesis in males and females. <b>Deadlock</b> encodes a novel protein which colocalizes with the oocyte nucleus at midstages of oogenesis and with the centrosomes of early embryos. Our genetic and immunohistological experiments point to a role for <b>Deadlock</b> in microtubule function during oogenesis...|$|R
500|$|According to Judge Jay Bybee of the United States Court of Appeals for the Ninth Circuit, {{those in}} favor of popular {{elections}} for senators believed that two primary problems were caused by the original provisions: legislative corruption and electoral <b>deadlocks.</b> There {{was a sense that}} senatorial elections were [...] "bought and sold", changing hands for favors and sums of money rather than because of the competence of the candidate. Between 1857 and 1900, the Senate investigated three elections over corruption. In 1900, for example, William A. Clark had his election voided after the Senate concluded that he had bought votes in the Montana legislature. But analysts Bybee and Todd Zywicki believe this concern was largely unfounded; there was a [...] "dearth of hard information" [...] on the subject. In more than a century of legislative elections of U.S. senators, only 10 cases were contested for allegations of impropriety.|$|E
500|$|Serializing tokens {{are used}} to prevent {{concurrent}} accesses from other CPUs and may be held simultaneously by multiple threads, ensuring that only one of those threads is running at any given time. Blocked or sleeping threads therefore do not prevent other threads from accessing the shared resource unlike a thread that is holding a mutex. Among other things, the use of serializing tokens prevents many of the situations {{that could result in}} <b>deadlocks</b> and priority inversions when using mutexes, as well as greatly simplifying the design and implementation of a many-step procedure that would require a resource to be shared among multiple threads. The serializing token code is evolving into something quite similar to the [...] "Read-copy-update" [...] feature now available in Linux. Unlike Linux's current RCU implementation, DragonFly's is being implemented such that only processors competing for the same token are affected rather than all processors in the computer.|$|E
500|$|Reformers {{included}} William Jennings Bryan, while opponents counted respected {{figures such}} as Elihu Root and George Frisbie Hoar among their number; Root cared so strongly about the issue that {{after the passage of}} the Seventeenth Amendment, he refused to stand for re‑election to the Senate. Bryan and the reformers argued for popular election through highlighting perceived flaws with the existing system, specifically corruption and electoral <b>deadlocks,</b> and through arousing populist sentiment. Most important was the populist argument; that there was a need to [...] "Awaken, in the senators...a more acute sense of responsibility to the people", which it was felt they lacked; election through state legislatures was seen as an anachronism that was {{out of step with the}} wishes of the American people, and one that had led to the Senate becoming [...] "a sort of aristocratic body – too far removed from the people, beyond their reach, and with no special interest in their welfare". The settlement of the West and continuing absorption of hundreds of thousands of immigrants expanded the sense of [...] "the people." ...|$|E
40|$|In this paper, {{we present}} a formal model of <b>deadlock</b> in a {{distributed}} system and develop the <b>deadlock</b> specification in terms of time-dependent predicates. Primitive activities of processes in the distributed system are specified by the predicates so that system behaviors can be described by logic operations. With the formal model, we have an insight into the definition of <b>deadlock</b> in local views. A rigorous proof to show the equivalence of local-time and global-time <b>deadlock</b> specifications is presented. The local-time <b>deadlock</b> specification, which defines the timing of dependence between <b>deadlocked</b> processes, will be useful in the correctness verification of distributed <b>deadlock</b> detection/resolution algorithms. Department of Computer Science University of Missouri-Rolla Rolla, Missouri 1 Introduction A distributed system consists {{of a set of}} processors connected by bidirectional communication links, with processes and resources resident on each processor. Processes and resources com [...] ...|$|R
40|$|<b>Deadlock</b> {{detection}} and recovery-based routing schemes for wormhole networks have gained attraction because unlike <b>deadlock</b> avoidance-based schemes, {{they do not}} restrict routing adaptability. In order to alleviate the overhead of running a recovery procedure, the studies on <b>deadlock</b> detection {{have focused on the}} accuracy of <b>deadlock</b> detection, trying {{to reduce the number of}} false detections. This paper proposes both <b>deadlock</b> {{detection and}} recovery schemes. The proposed detection scheme is based on the turn model and designed to declare only one packet per simple cycle of blocked packets as <b>deadlocked.</b> Our recovery scheme adjusts the time-out value flexibly according to the utilization rate of the recovery resources, rather than fixing a single time-out value as in previous schemes. As a consequence, it not only prevents saturation of the recovery resources by <b>deadlocked</b> packets but also reduces congestion of normal buffers at heavy loads. Simulation experiments show that the proposed <b>deadlock</b> detection scheme significantly reduces the number of false <b>deadlock</b> detections over previous schemes for low to moderate time-out thresholds. It is also found that the proposed recovery scheme prevents overloading of the recovery resources, yielding better network performance...|$|R
40|$|<b>Deadlocked</b> threads cannot make further progress, and {{frequently}} tie up resources requested by still other threads, causing {{more and more}} threads {{to come to a}} standstill. Thus, a <b>deadlock</b> should not remain undetected and uncorrected for a long time. If deadlock-detection processes are run too frequently, however, valuable system resources may be wasted. Therefore, it is important to choose the right interval between successive <b>deadlock</b> detections. <b>Deadlock</b> recovery must follow <b>deadlock</b> detection to release held resources in the cyclic wait. In addition to restarting the entire system, it is desirable that programmers be able to implement fine-grained recovery actions such as releasing a resource currently not in use. Such fine-grained recovery actions often require the knowledge of program contexts and <b>deadlock</b> states. Unfortunately, modern programming languages lack language-level support for signaling <b>deadlock</b> conditions and for structuring resolution code. My thesis is that, under the assumption that the time to the first <b>deadlock</b> in the system (after a system restart) follows an exponential distribution, a reinforcement-learning approach is effective in scheduling <b>deadlock</b> detection for a restart-oriented system, and that runtime exceptions are a programming abstraction that allows programmers to write fine-grained deadloc...|$|R
500|$|When the war began, Lord Strathcona's Horse, a Canadian cavalry {{regiment}}, was mobilized {{and sent}} to England for training. The regiment served as infantry in French trenches during 1915, and were not returned to their mounted status until February 16, 1916. In {{the defense of the}} Somme front in March 1917, mounted troops saw action, and Lieutenant Frederick Harvey was awarded the Victoria Cross for his actions. Canadian cavalry generally had the same difficulties as other nations in breaking trench warfare <b>deadlocks</b> and were of little use on the front lines. However, in the spring of 1918, Canadian cavalry was essential in halting the last major German offensive of the war. On March 30, 1918, Canadian cavalry charged German positions in the Battle of Moreuil Wood, defeating a superior German force supported by machine gun fire. [...] The charge was made by Lord Strathcona's Horse, led by Gordon Flowerdew, later posthumously awarded the Victoria Cross for his actions during the charge. Although the German forces surrendered, three-quarters of the 100cavalry participating in the attack were killed or wounded in the attack against 300German soldiers.|$|E
2500|$|In {{order to}} {{encourage}} competitive play and avoid <b>deadlocks,</b> a point system including bonus points was used: ...|$|E
2500|$|Certain [...] "key matters" [...] will be {{designated}} as matters upon which <b>deadlocks</b> can arise. [...] These will usually be fairly fundamental matters {{relating to the}} management {{and control of the}} business.|$|E
40|$|Traditionally, <b>deadlock</b> {{resolution}} is performed by simply aborting any process or the lowest-priority process (called the victim) {{involved in a}} <b>deadlock</b> cycle. In message-passing applications where rollback propagation due to message dependencies is possible, the rollback of the victim may require other processes to roll back as well, and the restarted processes may get into the same <b>deadlock</b> again. We introduce the concept of guaranteed <b>deadlock</b> recovery which guarantees that a broken <b>deadlock</b> cycle will not be re-formed after the rollback, and show how to achieve this by carefully selecting the victim based on run-time dependency information. We also demonstrate a technique to incorporate a dynamic priority scheme into a distributed <b>deadlock</b> detection algorithm to perform guaranteed <b>deadlock</b> recovery. 1 Introduction Checkpointing and rollback recovery is a technique that periodically saves the volatile state of a process onto stable storage so that the state can be restored when the [...] ...|$|R
40|$|In {{automated}} manufacturing systems, <b>deadlock</b> avoidance policies guarantee deadlock-free operation while performance controllers, such as dispatching rules, {{attempt to}} achieve performance thresholds. In an automated system, dispatching rules must {{work within the}} constraints imposed by the <b>deadlock</b> avoidance policy in order to assure continuing system operation, and thus, the <b>deadlock</b> avoidance logic defines the decision space over which the dispatching rule can work. This paper investigates the interactions that arise between <b>deadlock</b> avoidance flexibility {{and the effectiveness of}} dispatching rules in achieving good system performance. Two major findings are that the positive effects of intelligent dispatching are highly influenced by the flexibility of the <b>deadlock</b> avoidance policy, and that a naive dispatching rule can sometimes achieve better system performance under an inflexible <b>deadlock</b> avoidance policy...|$|R
40|$|A P {{system is}} a {{computational}} model in computer science abstracted from the structure of real living cell that preforms some calculations under a certain conditions. They are distributed, parallel and run in a non-deterministic manner. This paper presents a model for solving the <b>deadlock</b> that could be happen between P system membranes. The P system model of degree n is used to simulate the <b>deadlock</b> that could be happen and the procedure of detecting the <b>deadlock</b> and removing it by triggering set of rules to interfere and solve the <b>deadlock</b> instead of killing the rules that cause the <b>deadlock...</b>|$|R
