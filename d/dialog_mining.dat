2|3|Public
40|$|Data is {{becoming}} increasingly crucial for training and (self-) evaluation of spoken dialog systems (SDS). Data is used to train models (e. g. acoustic models) and is ‘forgotten’. Data is generated on-line from the different components of the SDS system, e. g. the dialog manager, {{as well as from}} the world it is interacting with (e. g. news streams, ambient sensors etc.). The data is used to evaluate and analyze conversational systems both on-line and off-line. We need to be able query such heterogeneous data for further processing. In this paper we present an approach with two novel components: first, an architecture for SDSs that takes a data-centric view, ensuring persistency and consistency of data as it is generated. The architecture is centered around a database that stores dialog data beyond the lifetime of individual dialog sessions, facilitating <b>dialog</b> <b>mining,</b> annotation, and logging. Second, we take advantage of the state-fullness of the data-centric architecture by means of a lightweight, reactive and inference-based dialog manager that itself is stateless. The feasibility of our approach has been validated within a phone-based university help-desk application. We detail SDS architecture and dialog management, model, and data representation...|$|E
40|$|Specifying and {{implementing}} flexible human-computer dialogs, {{such as those}} used in kiosks and smart phone apps, is challenging because of the numerous and varied directions in which each user might steer a dialog. The objective {{of this research is}} to improve dialog specification and implementation. To do so we enriched a notation based on concepts from programming languages, especially partial evaluation, for specifying a variety of unsolicited reporting, mixed-initiative dialogs in a concise representation that serves as a design for dialog implementation. We also built a <b>dialog</b> <b>mining</b> system that extracts a specification in this notation from requirements. To demonstrate that such a specification provides a design for dialog implementation, we built a system that automatically generates an implementation of the dialog, called a stager, from it. These two components constitute a dialog modeling toolkit that automates dialog specification and implementation. These results provide a proof of concept and demonstrate the study of dialog specification and implementation from a programming languages perspective. The ubiquity of dialogs in domains such as travel, education, and health care combined with the demand for smart phone apps provide a landscape for further investigation of these results. Comment: combined/reorganized some figures/tables from version 4, and corrected typos; 22 pages, 5 tables, 5 figures, and 5 listing...|$|E
40|$|To {{generate}} {{natural language}} feedback for an intelligent tutoring system, {{we developed a}} simple planning model with a distinguishing feature: its plan operators are derived automatically, {{on the basis of}} the association rules mined from our tutorial <b>dialog</b> corpus. Automatically <b>mined</b> rules are also used for realization. We evaluated 5 different versions of a system that tutors on an abstract sequence learning task. The version that uses our planning framework is significantly more effective than the other four versions. We compared this version to the human tutors we employed in our tutorial dialogs, with intriguing results. ...|$|R
40|$|Abstract — Many language-oriented {{problems}} {{cannot be}} solved without semantic memory containing descriptions of concepts at different level of details. Automatic creation of semantic memories {{is a great}} challenge even for the simplest knowledge representation methods based on relations between concepts and keywords. Semantic memory based on such simple knowledge representation facilitates implementation of quite interesting linguistic competences {{that have not yet}} been demonstrated by more sophisticated rule or frame-based knowledge bases, for example CYC. These linguistic abilities include word games, such as the twenty questions game, that may be implemented using semantic memory built on relational model for knowledge representation. Creation of large-scale knowledge base for semantic memory involves mining structured information sources (ontologies, dictionaries, encyclopedic entries) and free texts (textbooks and internet sources). Quality of this knowledge may be improved using collaborative projects in which systems that already possess some linguistic competence actively interact with human users, mining their knowledge. In this article three <b>dialog</b> scenarios for <b>mining</b> human knowledge are introduced, and the data acquired into semantic memory structures through such interaction is described. I...|$|R
40|$|Temporal {{information}} in text is very useful for better {{natural language understanding}} and also different natural language applications like question answering, summarization, information extraction, <b>dialog</b> systems, text <b>mining,</b> and other practical applications. This problem has also been approached by researchers from linguistics, computer science, philosophy, and cognitive science, for last few decades. In this area paper we give a summary of literature for understanding temporal location and relations from computer science researchers’ viewpoint. The area being drastically changed in last decade, we have a separate chapter for Classic work and another chapter for Corpus based work. We then suggest and explain our work in progress, a Hybrid approach that tries {{to get the best}} from both worlds by extracting temporal information using deep understanding of text and then classifying the temporal relations using machine learning approaches. This is a work in progress, so {{we do not have a}} concrete result to claim that we will do better than state-of-the-art systems. But we tried to show that our hybrid approach has a better potential for this problem...|$|R

