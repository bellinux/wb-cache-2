1603|4|Public
25|$|This set is recursively <b>enumerable,</b> {{which means}} there is a computable {{function}} that lists all of the pairs (i,x) it contains (Moore and Mertens 2011, pp. 236–237). However, the complement of this set is not recursively <b>enumerable</b> (Moore and Mertens 2011, pp. 236–237).|$|E
25|$|Every recursively <b>enumerable</b> set is Diophantine.|$|E
25|$|R. Soare, 1987. Recursively <b>enumerable</b> {{sets and}} degrees, Springer.|$|E
25|$|Many of {{the first}} order {{theories}} described above can be extended to complete recursively <b>enumerable</b> consistent theories. This is no longer true {{for most of the}} following theories; they can usually encode both multiplication and addition of natural numbers, and this gives them enough power to encode themselves, which implies that Gödel's incompleteness theorem applies and the theories can no longer be both complete and recursively <b>enumerable</b> (unless they are inconsistent).|$|E
25|$|Complete {{arithmetic}} (also {{known as}} true arithmetic) is {{the theory of}} the standard model of arithmetic, the natural numbers N. It is complete but does not have a recursively <b>enumerable</b> set of axioms.|$|E
25|$|Because each finitary {{relation}} {{on the natural}} numbers can be identified with a corresponding set of finite sequences of natural numbers, the notions of computable relation and computably <b>enumerable</b> relation can be defined from their analogues for sets.|$|E
25|$|A {{numbering}} is an enumeration of functions; {{it has two}} parameters, e and x and outputs {{the value}} of the e-th function in the numbering on the input x. Numberings can be partial-recursive although some of its members are total recursive, that is, computable functions. Admissible numberings are those into which all others can be translated. A Friedberg numbering (named after its discoverer) is a one-one numbering of all partial-recursive functions; it is necessarily not an admissible numbering. Later research dealt also with numberings of other classes like classes of recursively <b>enumerable</b> sets. Goncharov discovered for example a class of recursively <b>enumerable</b> sets for which the numberings fall into exactly two classes with respect to recursive isomorphisms.|$|E
25|$|There are uncountably many {{sets that}} are not recursively <b>enumerable,</b> and the {{investigation}} of the Turing degrees of all sets is as central in recursion theory as {{the investigation of the}} recursively <b>enumerable</b> Turing degrees. Many degrees with special properties were constructed: hyperimmune-free degrees where every function computable relative to that degree is majorized by a (unrelativized) computable function; high degrees relative to which one can compute a function f which dominates every computable function g in the sense that there is a constant c depending on g such that g(x) < f(x) for all x > c; random degrees containing algorithmically random sets; 1-generic degrees of 1-generic sets; and the degrees below the halting problem of limit-recursive sets.|$|E
25|$|This is true {{simply because}} Diophantine sets, being equal to recursively <b>enumerable</b> sets, are also equal to Turing machines. It {{is a well}} known {{property}} of Turing machines that there exist universal Turing machines, capable of executing any algorithm.|$|E
25|$|To {{show that}} WKL0 is {{actually}} stronger than (not provable in) RCA0, it {{is sufficient to}} exhibit a theorem of WKL0 which implies that noncomputable sets exist. This is not difficult; WKL0 implies the existence of separating sets for effectively inseparable recursively <b>enumerable</b> sets.|$|E
25|$|That is, for any computably <b>enumerable</b> set of axioms for {{arithmetic}} (that is, a {{set that}} can in principle be printed out by an idealized computer with unlimited resources), {{there is a}} formula that is true of arithmetic, but which is not provable in that system.|$|E
25|$|If S is a Turing computable set, {{then both}} S and its {{complement}} are recursively <b>enumerable</b> (if T is a Turing machine giving 1 for inputs in S and 0 otherwise, we may build a Turing machine halting {{only on the}} former, and another halting only on the latter).|$|E
25|$|So, for example, {{there is}} a {{polynomial}} for which the positive part of its range is exactly the prime numbers. (On the other hand, no polynomial can only take on prime values.) The same holds for other recursively <b>enumerable</b> sets of natural numbers: the factorial, the binomial coefficients, the fibonacci numbers, etc.|$|E
25|$|That is, an {{infinite}} sequence is random if and only it withstands all recursively <b>enumerable</b> null sets. The other notions of random sequences include (but not limited to): recursive randomness and Schnorr randomness {{which are based}} on recursively computable martingales. It was shown by Yongge Wang that these randomness notions are generally different.|$|E
25|$|The {{depth of}} the study of general Diophantine {{equations}} is shown by the characterisation of Diophantine sets as equivalently described as recursively <b>enumerable.</b> In other words, the general problem of Diophantine analysis is blessed or cursed with universality, and in any case is not something that will be solved except by re-expressing it in other terms.|$|E
25|$|This is the recursion-theoretic {{branch of}} {{learning}} theory. It {{is based on}} Gold's model of learning in the limit from 1967 and has developed since then more and more models of learning. The general scenario is the following: Given a class S of computable functions, is there a learner (that is, recursive functional) which outputs for any input of the form (f(0),f(1),...,f(n)) a hypothesis. A learner M learns a function f if almost all hypotheses are the same index e of f {{with respect to a}} previously agreed on acceptable numbering of all computable functions; M learns S if M learns every f in S. Basic results are that all recursively <b>enumerable</b> classes of functions are learnable while the class REC of all computable functions is not learnable. Many related models have been considered and also the learning of classes of recursively <b>enumerable</b> sets from positive data is a topic studied from Gold's pioneering paper in 1967 onwards.|$|E
25|$|Another {{important}} question is the existence of automorphisms in recursion-theoretic structures. One of these structures {{is that one of}} recursively <b>enumerable</b> sets under inclusion modulo finite difference; in this structure, A is below B if and only if the set difference B'A is finite. Maximal sets (as defined in the previous paragraph) have the property that they cannot be automorphic to non-maximal sets, that is, if there is an automorphism of the recursive <b>enumerable</b> sets under the structure just mentioned, then every maximal set is mapped to another maximal set. Soare (1974) showed that also the converse holds, that is, every two maximal sets are automorphic. So the maximal sets form an orbit, that is, every automorphism preserves maximality and any two maximal sets are transformed into each other by some automorphism. Harrington gave a further example of an automorphic property: that of the creative sets, the sets which are many-one equivalent to the halting problem.|$|E
25|$|The major {{research}} on strong reducibilities {{has been to}} compare their theories, both for the class of all recursively <b>enumerable</b> sets {{as well as for}} the class of all subsets of the natural numbers. Furthermore, the relations between the reducibilities has been studied. For example, it is known that every Turing degree is either a truth-table degree or is the union of infinitely many truth-table degrees.|$|E
25|$|The related but {{different}} uniform word {{problem for a}} class K of recursively presented groups is the algorithmic problem of deciding, given as input a presentation P for a group G in the class K and two words in the generators of G, whether the words represent the same element of G. Some authors require the class K to be definable by a recursively <b>enumerable</b> set of presentations.|$|E
25|$|A first-order {{theory of}} a {{particular}} signature {{is a set of}} axioms, which are sentences consisting of symbols from that signature. The set of axioms is often finite or recursively <b>enumerable,</b> in which case the theory is called effective. Some authors require theories to also include all logical consequences of the axioms. The axioms are considered to hold within the theory and from them other sentences that hold within the theory can be derived.|$|E
25|$|There {{are several}} basic results about decidability of theories. Every {{inconsistent}} theory is decidable, as every formula in {{the signature of}} the theory will be a logical consequence of, and thus member of, the theory. Every complete recursively <b>enumerable</b> first-order theory is decidable. An extension of a decidable theory may not be decidable. For example, there are undecidable theories in propositional logic, although the set of validities (the smallest theory) is decidable.|$|E
25|$|When Post {{defined the}} notion of a simple set as an r.e. set with an {{infinite}} complement not containing any infinite r.e. set, he started to study the structure of the recursively <b>enumerable</b> sets under inclusion. This lattice became a well-studied structure. Recursive sets can be defined in this structure by the basic result that a set is recursive if and only if the set and its complement are both recursively <b>enumerable.</b> Infinite r.e. sets have always infinite recursive subsets; but on the other hand, simple sets exist but do not have a coinfinite recursive superset. Post (1944) introduced already hypersimple and hyperhypersimple sets; later maximal sets were constructed which are r.e. sets such that every r.e. superset is either a finite variant of the given maximal set or is co-finite. Post's original motivation in the study of this lattice was to find a structural notion such that every set which satisfies this property is neither in the Turing degree of the recursive sets nor in the Turing degree of the halting problem. Post did not find such a property and the solution to his problem applied priority methods instead; Harrington and Soare (1991) found eventually such a property.|$|E
25|$|Rice {{showed that}} for every nontrivial class C (which {{contains}} some but not all r.e. sets) the index set E = {e: the eth r.e. set We is in C} has the property that either the halting problem or its complement is many-one reducible to E, that is, can be mapped using a many-one reduction to E (see Rice's theorem for more detail). But, many of these index sets are even more complicated than the halting problem. These type of sets can be classified using the arithmetical hierarchy. For example, the index set FIN of class of all finite sets is on the level Σ2, the index set REC {{of the class of}} all recursive sets is on the level Σ3, the index set COFIN of all cofinite sets is also on the level Σ3 and the index set COMP of the class of all Turing-complete sets Σ4. These hierarchy levels are defined inductively, Σn+1 contains just all sets which are recursively <b>enumerable</b> relative to Σn; Σ1 contains the recursively <b>enumerable</b> sets. The index sets given here are even complete for their levels, that is, all the sets in these levels can be many-one reduced to the given index sets.|$|E
25|$|Besides the lattice of recursively <b>enumerable</b> sets, automorphisms {{are also}} studied for the {{structure}} of the Turing degrees of all sets as well as for {{the structure of}} the Turing degrees of r.e. sets. In both cases, Cooper claims to have constructed nontrivial automorphisms which map some degrees to other degrees; this construction has, however, not been verified and some colleagues believe that the construction contains errors and that the question of whether there is a nontrivial automorphism of the Turing degrees is still one of the main unsolved questions in this area (Slaman and Woodin 1986, Ambos-Spies and Fejer 2006).|$|E
25|$|For example, {{it may be}} used to {{represent}} sparse bitsets, i.e., subsets of a much larger, fixed <b>enumerable</b> set. In such a case, the trie is keyed by the bit element position within the full set. The key is created from the string of bits needed to encode the integral position of each element. Such tries have a very degenerate form with many missing branches. After detecting the repetition of common patterns or filling the unused gaps, the unique leaf nodes (bit strings) can be stored and compressed easily, reducing the overall size of the trie.|$|E
25|$|This {{branch of}} {{recursion}} theory analyzed the following question: For fixed m and n with 0<m<n, for which functions A {{is it possible}} to compute for any different n inputs x1,x2,...,xn a tuple of n numbers y1,y2,...,yn such that at least m of the equations A(xk) = yk are true. Such sets are known as (m,n)-recursive sets. The first major result in this branch of Recursion Theory is Trakhtenbrot's result that a set is computable if it is (m,n)-recursive for some m,n with 2m>n. On the other hand, Jockusch's semirecursive sets (which were already known informally before Jockusch introduced them 1968) are examples of a set which is (m,n)-recursive if and only if 2m<n+1. There are uncountably many of these sets and also some recursively <b>enumerable</b> but noncomputable sets of this type. Later, Degtev established a hierarchy of recursively <b>enumerable</b> sets that are (1,n+1)-recursive but not (1,n)-recursive. After a long phase of research by Russian scientists, this subject became repopularized in the west by Beigel's thesis on bounded queries, which linked frequency computation to the above-mentioned bounded reducibilities and other related notions. One of the major results was Kummer's Cardinality Theory which states that a set A is computable if and only if there is an n such that some algorithm enumerates for each tuple of n different numbers up to n many possible choices of the cardinality of this set of n numbers intersected with A; these choices must contain the true cardinality but leave out at least one false one.|$|E
25|$|The Chomsky hierarchy, {{sometimes}} referred to as the Chomsky-Schützenberger hierarchy, is a containment hierarchy of classes of formal grammars. The hierarchy imposes a logical structure across different language classes and provides a basis for understanding the relationship between grammars (devices that enumerate the valid sentences within languages). In order of increasing expressive power it includes regular (or Type-3) grammars, context-free (or Type-2) grammars, context-sensitive (or Type-1) grammars, and recursively <b>enumerable</b> (or Type-0) grammars. Each class is a strict subset of the class above it, i.e., each successive class can generate a broader set of formal languages (infinite sets of strings composed from finite sets of symbols, or alphabets) than the one below. In addition to being important in linguistics, the Chomsky hierarchy is also relevant in theoretical computer science, especially in programming language theory, compiler construction, and automata theory.|$|E
2500|$|A {{language}} is computably <b>enumerable</b> (synonyms: recursively <b>enumerable,</b> semidecidable) {{if there is}} a computable function [...] such that [...] is defined if and only if the word [...] is in the language. [...] The term <b>enumerable</b> has the same etymology as in computably <b>enumerable</b> sets of natural numbers.|$|E
2500|$|Although the halting {{problem is}} not computable, it is {{possible}} to simulate program execution and produce an infinite list of the programs that do halt. Thus the halting problem {{is an example of a}} recursively <b>enumerable</b> set, which is a set that can be enumerated by a Turing machine (other terms for recursively <b>enumerable</b> include computably <b>enumerable</b> and semidecidable). Equivalently, a set is recursively <b>enumerable</b> if and only if it is the range of some computable function. [...] The recursively <b>enumerable</b> sets, although not decidable in general, have been studied in detail in recursion theory.|$|E
2500|$|A set {{of natural}} numbers is called computably <b>enumerable</b> (synonyms: recursively <b>enumerable,</b> semidecidable) {{if there is}} a computable {{function}} [...] such that for each number , [...] is defined if and only if [...] is in the set. [...] Thus a set is computably <b>enumerable</b> if and only if it is the domain of some computable function. [...] The word <b>enumerable</b> is used because the following are equivalent for a nonempty subset [...] of the natural numbers: ...|$|E
2500|$|If {{there is}} an oracle machine that, when run with oracle B, [...] computes a partial {{function}} with domain A, then A {{is said to be}} B-recursively <b>enumerable</b> and B-computably <b>enumerable.</b>|$|E
2500|$|A {{degree is}} called r.e. (recursively <b>enumerable)</b> if it {{contains}} a recursively <b>enumerable</b> set. [...] Every r.e. degree is {{less than or equal}} to 0prime& but not every degree less than 0prime& is an r.e. degree.|$|E
2500|$|Given a recursively <b>enumerable</b> set A of {{positive}} integers that has insoluble membership problem, ⟨a,b,c,d | anban = cndcn : n ∈ A⟩ is a finitely generated {{group with a}} recursively <b>enumerable</b> presentation whose word problem is insoluble ...|$|E
2500|$|Many-one {{reductions}} are [...] "stronger" [...] than Turing reductions: if a set A is many-one reducible {{to a set}} B, then A is Turing reducible to B, but {{the converse}} does not always hold. Although the natural examples of noncomputable sets are all many-one equivalent, {{it is possible to}} construct recursively <b>enumerable</b> sets A and B such that A is Turing reducible to B but not many-one reducible to B. It can be shown that every recursively <b>enumerable</b> set is many-one reducible to the halting problem, and thus the halting problem is the most complicated recursively <b>enumerable</b> set with respect to many-one reducibility and with respect to Turing reducibility. Post (1944) asked whether every recursively <b>enumerable</b> set is either computable or Turing equivalent to the halting problem, that is, whether there is no recursively <b>enumerable</b> set with a Turing degree intermediate between those two.|$|E
2500|$|An {{important}} {{property of}} the primitive recursive functions {{is that they are}} a recursively <b>enumerable</b> subset of the set of all total recursive functions (which is not itself recursively <b>enumerable).</b> This means that there is a single computable function f(m,n) that enumerated the primitive recursive functions, namely: ...|$|E
2500|$|As {{intermediate}} results, Post defined natural {{types of}} recursively <b>enumerable</b> sets like the simple, hypersimple and hyperhypersimple sets. Post showed that these sets are strictly between the computable sets and the halting problem {{with respect to}} many-one reducibility. Post also showed {{that some of them}} are strictly intermediate under other reducibility notions stronger than Turing reducibility. [...] But Post left open the main problem of the existence of recursively <b>enumerable</b> sets of intermediate Turing degree; this problem became known as Post's problem. After ten years, Kleene and Post showed in 1954 that there are intermediate Turing degrees between those of the computable sets and the halting problem, but they failed to show that any of these degrees contains a recursively <b>enumerable</b> set. Very soon after this, Friedberg and Muchnik independently solved Post's problem by establishing the existence of recursively <b>enumerable</b> sets of intermediate degree. This groundbreaking result opened a wide study of the Turing degrees of the recursively <b>enumerable</b> sets which turned out to possess a very complicated and non-trivial structure.|$|E
