1568|2735|Public
25|$|A <b>fault</b> <b>model</b> of the fault's {{physical}} geometry.|$|E
25|$|The <b>fault</b> <b>model</b> {{database}} {{has been}} revised and expanded to cover over 350 fault sections, up from about 200 for UCERF2, and new attributes added to better characterize the faults. Various technical improvements {{have also been}} made.|$|E
2500|$|A {{significant}} {{achievement of}} UCERF is development of system-level approach called the [...] "grand inversion". This uses a supercomputer {{to solve a}} system of linear equations that simultaneously satisfies multiple constraints such as known slip rates, etc. The result is a model (set of values) that best fits the available data. In balancing these various factors it also provides an estimate of how much seismicity is not accounted for in the <b>fault</b> <b>model,</b> possibly in faults not yet discovered. The amount of slip occurring on unidentified faults has been estimated at between 5 and about 20mm/yr depending on the location (generally higher in the LA area) and deformation model, with one model reaching 30mm/yr just north of LA.|$|E
40|$|Abstract – In {{this paper}} {{we make a}} case for moving the level of test pattern {{generation}} for fabrication faults to the system level. Like many other researchers we feel it is necessary to handle the growing size and complexity of testing of digital systems. As the first step in this direction, system level <b>fault</b> <b>models</b> must be defined. Unlike logic level stuck-at <b>fault</b> <b>models</b> it is hard to define general <b>fault</b> <b>models</b> at the system level. In this paper, we argue that it is practical and efficient to define application area specific system level <b>fault</b> <b>models.</b> A NoC switch is used as a case study to explain the idea of such system level <b>fault</b> <b>models.</b> We propose two metrics to evaluate the efficiency of system level <b>fault</b> <b>models.</b> We also propose a method for generation of test patterns using system level <b>fault</b> <b>models.</b> Our initial evaluation experiments show that the test patterns generated using the proposed system level faults have much higher fault coverage than purely random test patterns but lower coverage than test pattern generated on actual implementation using the PODEM algorithm. The results of this case study demonstrate that application area specific system level <b>fault</b> <b>models</b> have a good potential for testing complex systems...|$|R
5000|$|MODIFI (MODel-Implemented Fault Injection) is a fault {{injection}} tool for robustness evaluation of Simulink behavior <b>models.</b> It supports <b>fault</b> <b>modelling</b> in XML for implementation of domain-specific <b>fault</b> <b>models.</b>|$|R
40|$|This pap er {{presents}} a notation for describing functional <b>fault</b> <b>models,</b> which may occur in memory devices. Using this notation, the spaceofall possible memory faults has been constructed. It {{has been shown}} that this space is in#nite, and contains the currently established functional <b>fault</b> <b>models.</b> New <b>fault</b> <b>models</b> in this space have been identi#ed and veri- #e d using resistive and cap acitive defect inje ction and simulation of a DRAM model...|$|R
5000|$|In {{the past}} several decades, the most popular <b>fault</b> <b>model</b> used in {{practice}} is the single stuck-at <b>fault</b> <b>model.</b> In this model, one of the signal lines in a circuit {{is assumed to be}} stuck at a fixed logic value, regardless of what inputs are supplied to the circuit. Hence, if a circuit has n signal lines, there are potentially 2n stuck-at faults defined on the circuit, of which some can be viewed as being equivalent to others. The stuck-at <b>fault</b> <b>model</b> is a logical <b>fault</b> <b>model</b> because no delay information is associated with the fault definition. It is also called a permanent <b>fault</b> <b>model</b> because the faulty effect is assumed to be permanent, in contrast to intermittent faults which occur (seemingly) at random and transient faults which occur sporadically, perhaps depending on operating conditions (e.g. temperature, power supply voltage) or on the data values (high or low voltage states) on surrounding signal lines. The single stuck-at <b>fault</b> <b>model</b> is structural because it is defined based on a structural gate-level circuit model.|$|E
50|$|Transistor <b>Fault</b> <b>model</b> is a <b>Fault</b> <b>model</b> used to {{describe}} faults for CMOS logic gates. At transistor level, a transistor may be stuck-short or stuck-open. In stuck-short, a transistor behaves as it is always conducts (or stuck-on), and stuck-open is when a transistor never conducts current (or stuck-off). Stuck-short will usually produce a short between VDD and VSS.|$|E
50|$|A <b>fault</b> <b>model</b> in an Aerospace {{context is}} a set of {{structured}} information which helps users or systems to identify and isolate a problem that occurs on an engine, Line-replaceable unit (LRU), or Auxiliary power unit (APU) during a flight. Associated with this <b>fault</b> <b>model</b> may be a suggested repair procedure along with references to Aircraft maintenance manuals (~ Light maintenance manual).|$|E
40|$|This thesis {{describes}} a diagnostic technique for explaining unanticipated modes of failure in continuous-variable systems. Previous approaches in model-based diagnosis have traditionally suffered from either a dependence on explicit <b>fault</b> <b>models</b> or {{a tendency to}} produce unintuitive results. This research aims at achieving the explanatory power of explicit <b>fault</b> <b>models,</b> without sacrificing the robustness of consistency-based diagnosis. The unique compositional nature of the process-centered models of Qualitative Process Theory makes the application of model-based diagnostic techniques both non-trivial and rewarding. Rather than relying on explicit <b>fault</b> <b>models,</b> this approach utilizes a general domain theory to model the broken device. Given a sufficiently broad domain theory, symptoms are {{explained in terms of}} a transformed physi-cal structure. Generative <b>fault</b> <b>models</b> replace explicit, pre-enumerated <b>fault</b> <b>models,</b> thereby increasing robustness for identifying novel faults. This approach combines the efficiency of the consistency-based approach with the explanatory power of abductive backchaining. Candi...|$|R
40|$|We {{address the}} problem of test set {{generation}} and test set reduction, to first detect, and later localize faults occurring in reversible circuits. Reversible Computation has high promise of low power consumption. Some new <b>fault</b> <b>models</b> are first presented here. An explanation of the new <b>fault</b> <b>models</b> is made based on a physical realization representing {{the state of the art}} in the reversible CMOS circuit technology. Evidence is then presented showing that the <b>fault</b> <b>models</b> presented in the current literature are not adequate for existing realizations of reversible logic such as CMOS. We designed a ATPG software package with a friendly graphical user interface to aid experimentation with various <b>fault</b> <b>models.</b> The purpose of this work is to give an overview of our findings and pave the way for a later paper fully addressing the CMOS <b>fault</b> <b>models.</b> The key experimental results are presented...|$|R
40|$|Abstract: In {{this paper}} the e ects of {{simultaneous}} memory access on the <b>fault</b> <b>modeling</b> for two-port memories are investigated. New <b>fault</b> <b>models</b> and their march tests are presented. The obtained tests are of order O(n 2), {{which makes them}} less practical for larger two-port memories. However, the complexity can be reduced toO(n), when the memory topology is taken into account. Key words: Two-port memories, memory <b>fault</b> <b>models,</b> weak <b>faults,</b> march tests, test length, fault coverage. ...|$|R
50|$|A {{differential}} fault attack {{has been}} published using 7 faulty cipher texts under random 4 bit nibble <b>fault</b> <b>model.</b>|$|E
5000|$|The delay <b>fault</b> <b>model,</b> {{where the}} signal {{eventually}} assumes the correct value, but more slowly (or rarely, more quickly) than normal.|$|E
5000|$|... the stuck-at <b>fault</b> <b>model.</b> A signal, or gate output, {{is stuck}} at a 0 or 1 value, {{independent}} of the inputs to the circuit.|$|E
40|$|Abstract: Recently, a {{framework}} describing {{the space of}} all <b>fault</b> <b>models</b> has been established. Subsequently, {{it has been shown}} that many new faults of that space do exist. Gradually, The number and complexity of observed memory <b>fault</b> <b>models</b> has been gradually increasing. As a result, it has become increasingly difficult to identify the precise functional <b>fault</b> <b>models</b> that a memory suffers from. This paper shows that there are two types of possible imprecision in describing faults: underspecification, which leads to tests with insufficient fault coverage, and overspecification, which leads to time-inefficient tests. A general method is presented to analyze faulty memory behavior based on electrical simulation and map it precisely onto the corresponding <b>fault</b> <b>models,</b> which makes it possible to generate time-optimal tests with optimal fault coverage...|$|R
30|$|Nishimura et al. (2011) {{constructed}} <b>fault</b> <b>models</b> for the 2011 Tohoku-oki earthquake sequence {{using the}} GPS kinematic time {{series of the}} GEONET stations. They successfully estimated the <b>fault</b> <b>models</b> of the foreshock, main-shock, and the Sanriku-oki and Ibaraki-oki aftershocks. However, they did not determine <b>fault</b> <b>models</b> for the outerrise aftershock or for afterslip associated with the foreshock and mainshock, because the original GPS kinematic time series {{did not have a}} sufficient signal-to-noise ratio for deriving reliable deformation fields to permit them to infer slip on the faults.|$|R
40|$|A two-port memory {{contains}} two duplicated sets of address decoders which operate independently. In this paper {{the effects of}} interference and shorts between the address decoders of the two ports on the <b>fault</b> <b>modeling</b> are investigated. <b>Fault</b> <b>models</b> and their tests are introduced, together with the test strategy...|$|R
50|$|Bridging to VDD or Vss is {{equivalent}} to stuck at <b>fault</b> <b>model.</b> Traditionally bridged signals were modeled with logic AND or OR of signals. If one driver dominates the other driver in a bridging situation, the dominant driver forces the logic to the other one, in such case a dominant bridging fault is used. To better reflect the reality of CMOS VLSI devices, a dominant AND or dominant OR bridging <b>fault</b> <b>model</b> is used where dominant driver keeps its value, while the other signal value {{is the result of}} AND (or OR) of its own value with the dominant driver.|$|E
50|$|A defect is {{an error}} caused in a device during the {{manufacturing}} process. A <b>fault</b> <b>model</b> is a mathematical {{description of how}} a defect alters design behavior. The logic values observed at the device's primary outputs, while applying a test pattern to some device under test (DUT), are called the output of that test pattern. The output of a test pattern, when testing a fault-free device that works exactly as designed, is called the expected output of that test pattern. A fault {{is said to be}} detected by a test pattern if the output of that test pattern, when testing a device that has only that one fault, is different than the expected output. The ATPG process for a targeted fault consists of two phases: fault activation and fault propagation. Fault activation establishes a signal value at the <b>fault</b> <b>model</b> site that is opposite of the value produced by the <b>fault</b> <b>model.</b> Fault propagation moves the resulting signal value, or fault effect, forward by sensitizing a path from the fault site to a primary output.|$|E
5000|$|The open <b>fault</b> <b>model.</b> Here a wire {{is assumed}} broken, {{and one or}} more inputs are {{disconnected}} from the output that should drive them. As with bridging faults, the resulting behavior depends on the circuit implementation.|$|E
40|$|This paper {{introduces}} and evaluates functional <b>fault</b> <b>models</b> for {{test pattern}} generation of sequential circuits at the finite state machine level. Evaluation of the proposed <b>fault</b> <b>models</b> against their gate level fault coverage on multi-level implementations is presented. The relationships between functional and gate level fault coverage are discussed...|$|R
40|$|The paper discuses an {{approach}} for defect-oriented testing of a combinational circuit from ISCAS’ 85 benchmarks. To the contrary of widely used stuck-at <b>fault</b> <b>models</b> defect-oriented testing <b>fault</b> <b>models</b> are more close to real life physical defects {{that may occur}} during a digital circuit manufacturing. The case study {{presented in this paper}} considers wired-AND and wired-OR bridging <b>fault</b> <b>models</b> of shorts, however the approach can be easily extended to more general methodology. The experimental results show high efficiency of the proposed method and provide statistical data for further analysis. 1...|$|R
40|$|For many safety-critical systems {{a safety}} case is built {{as part of}} the {{certification}} or acceptance process. The safety case assembles evidence to justify that the design and implementation of a system avoid hazardous software behavior. <b>Fault</b> <b>modeling</b> and analysis can provide a rich source of evidence that the design meets safety goals. However, there is currently little guidance available {{to bridge the gap between}} the <b>fault</b> <b>modeling</b> that developers perform and the mandated safety case. In this experience report we describe results and open issues from an investigation of how evidence from software toolsupported <b>fault</b> <b>modeling</b> and analysis of a spacecraft power system could assist in safety-case construction. The ways in which the software <b>fault</b> <b>models</b> can provide evidence for the safety case appears to be applicable to other critical systems. 1...|$|R
50|$|This <b>fault</b> <b>model</b> {{applies to}} gate level circuits, or {{a block of}} a {{sequential}} circuit which can {{be separated from the}} storage elements.Ideally a gate-level circuit would be completely tested by applying all possible inputs and checking that they gave the right outputs, but this is completely impractical: an adder to add two 32-bit numbers would require 264 = 1.8*1019 tests, taking 58 years at 0.1 ns/test.The stuck at <b>fault</b> <b>model</b> assumes that only one input on one gate will be faulty at a time, assuming that if more are faulty, a test that can detect any single fault, should easily find multiple faults.|$|E
50|$|The <b>fault</b> <b>model</b> {{database}} {{has been}} revised and expanded to cover over 350 fault sections, up from about 200 for UCERF2, and new attributes added to better characterize the faults. Various technical improvements {{have also been}} made.|$|E
5000|$|A {{formally}} verified algorithm for interactive consistency under {{a hybrid}} <b>fault</b> <b>model,</b> P Lincoln, J Rushby, Fault-Tolerant Computing, 1993. FTCS-23. Digest of Papers., 1993. Also appears in FTCS: Highlights from 25 Years, 1995, pp. 438-447 cited 111 ...|$|E
40|$|Abstract: Fault {{analysis}} of memory devices using defect injection and simulation {{is becoming increasingly}} impor-tant as the complexity of memory faulty behavior increases. In this paper, this approach is used to {{study the effects of}} opens and shorts on the faulty behavior of embedded DRAM (eDRAM) devices produced by Infineon Technolo-gies. The analysis shows the existence of previously de-fined memory <b>fault</b> <b>models,</b> and establishes new ones. The paper also investigates the concept of dynamic faulty be-havior and establishes its importance for memory devices. Conditions to test the newly established <b>fault</b> <b>models</b> are also given. Key words: Embedded DRAM, functional <b>fault</b> <b>models,</b> <b>fault</b> primitives, defect simulation, opens, shorts...|$|R
40|$|Generic, {{object-oriented}} <b>fault</b> <b>models,</b> built {{according to}} causal-directed graph theory, have been integrated into an overall software architecture dedicated to monitoring and predicting {{the health of}} mission- critical systems. Processing over the generic <b>fault</b> <b>models</b> is triggered by event detection logic that is defined according to the specific functional requirements {{of the system and}} its components. Once triggered, the <b>fault</b> <b>models</b> provide an automated way for performing both upstream root cause analysis (RCA), and for predicting downstream effects or impact analysis. The methodology has been applied to integrated system health management (ISHM) implementations at NASA SSC's Rocket Engine Test Stands (RETS) ...|$|R
40|$|When {{designing}} or analyzing applications or infrastructures {{with high}} reliability, safety, security, or survivability demands, the fundamental questions are: {{what is required}} of the application and can the infrastructure support these requirements. In the design and analysis of fault-tolerant systems, <b>fault</b> <b>models</b> have served us well to describe the theoretical limits. But with the inclusion of malicious acts, the direct application of <b>fault</b> <b>models</b> has exposed limited applicability. However, we {{can take advantage of}} the powerful <b>fault</b> <b>models</b> if we defer their direct application from the events that lead to faults, that is, the fault causes, and instead focus on the effects. This way one can avoid questions referring to the meaning of <b>fault</b> <b>models</b> in the context of previously unsuitable faults like Trojan horses or Denial of Service (DoS) attacks. Instead, we can use <b>fault</b> <b>models</b> at the level of abstraction where the application maps on the infrastructure. In this paper <b>fault</b> <b>models</b> are discussed in the context of system survivability and malicious act. It is shown that these models can be used to balance the demands put on the application and the capabilities of the underlying infrastructure. Active and imposed fault descriptions are defined that allow to match the mechanisms that provide survivability to the application with the infrastructure-imposed limitations. By defining a system as a collection of functionalities, individual functionalities and their associated fault descriptions can be analyzed in isolation. ...|$|R
5000|$|... single fault assumption: {{only one}} fault {{occur in a}} circuit. if we define k {{possible}} fault types in our <b>fault</b> <b>model</b> the circuit has n signal lines, by single fault assumption, {{the total number of}} single faults is k×n.|$|E
50|$|A {{short circuit}} between two signal lines is called {{bridging}} faults. Bridging to VDD or Vss {{is equivalent to}} stuck at <b>fault</b> <b>model.</b> Traditionally both signals after bridging were modeled with logic AND or OR of both signals. If one driver dominates the other driver in a bridging situation, the dominant driver forces the logic to the other one, in such case a dominant bridging fault is used. To better reflect the reality of CMOS VLSI devices, a Dominant AND or Dominant OR bridging <b>fault</b> <b>model</b> is used. In the latter case, dominant driver keeps its value, while the other one gets the AND or OR value of its own and the dominant driver.|$|E
50|$|He is {{credited}} with developing two approaches to detecting Transition Faults (a type of <b>Fault</b> <b>model)</b> that might occur during the manufacturing of semiconductor chips, viz., the Skewed-Load Transition Test (Launch-off-shift at-speed test) and the Broad-side delay test (Launch on Capture at-speed test).|$|E
40|$|Abstract. At CCS 2003, a new CRT-RSA {{algorithm}} {{was presented}} in [BOS 03], which was claimed to be secure against fault attacks for various <b>fault</b> <b>models.</b> At CCS 2004, David Wagner presented {{an attack on the}} proposed scheme, claiming that the so-called BOS scheme was insecure for all presented <b>fault</b> <b>models</b> [Wag 04]. However, the attack itself contains a flaw which shows that although the BOS scheme is broken in some <b>fault</b> <b>models,</b> it is not broken in the most realistic ”random fault model”. This paper points out the flaw in the attack on the BOS scheme, aiming to clarify this issue. Key words: CRT-RSA, fault attacks, smartcards, BOS-Scheme, Wag-ner’s attack...|$|R
40|$|Abstract. While {{discrete}} event {{systems have}} been widely applied for diagnosing distributed communicating systems, existing models may not completely satisfy the requirements {{for the application of}} fault identification and repair in software systems. This paper presents a model-based diagnosis approach that identifies possible faults based on generic <b>fault</b> <b>models</b> in abstract traces where events may be associated to multiple system components. We overcome the common limi-tation that precise <b>fault</b> <b>models</b> are available for each component and leverage generic <b>fault</b> <b>models</b> of classes of faults instead. We show that diagnoses rep-resenting entire classes of equivalent solutions can be computed based on local information and investigate the performance of our algorithm. ...|$|R
40|$|This paper {{outlines}} our {{method for}} deriving <b>Fault</b> <b>Models</b> {{for use with}} our WS-FIT tool {{that can be used}} to assess the dependability of SOA. Since one of the major issues with extracting these heuristic rules and <b>Fault</b> <b>Models</b> is the availability of software systems we examine the use of systems constructed through pedagogic activities to provide one source of information. 1...|$|R
