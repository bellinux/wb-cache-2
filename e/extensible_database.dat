85|76|Public
25|$|Features {{introduced}} in version 10.4 include Automator, an application {{designed to create}} an automatic workflow for different tasks; Dashboard, a full-screen group of small applications called desktop widgets that can be called up and dismissed in one keystroke; and Front Row, a media viewer interface accessed by the Apple Remote. Moreover, the Sync Services were included, which {{is a system that}} allows applications to access a centralized <b>extensible</b> <b>database</b> for various elements of user data, including calendar and contact items. The operating system then managed conflicting edits and data consistency.|$|E
5000|$|FOSD arose out of layer-based {{designs and}} levels of {{abstraction}} in network protocols and <b>extensible</b> <b>database</b> systems in the late-1980s. [...] A program was a stack of layers. Each layer added functionality to previously composed layers and different compositions of layers produced different programs. Not surprisingly, {{there was a need}} for a compact language to express such designs. Elementary algebra fit the bill: each layer was a function (a program transformation) that added new code to an existing program to produce a new program, and a program's design was modeled by an expression, i.e., a composition of transformations (layers). The figure to the left illustrates the stacking of layers i, j, and h (where h is on the bottom and i is on the top). The algebraic notations i(j(h)), i•j•h, and i+j+h have been used to express these designs.|$|E
5000|$|Laura Haas’s work {{dramatically}} {{changed the}} research and practice of information integration. She led the Starburst project on <b>extensible</b> <b>database</b> systems, showing how diverse information could be integrated into a relational database. Her research was the foundation for IBM's DB2 LUW query processor. She was the overall architect for Garlic, a novel data federation system that provides integrated access to many data sources from a high-level nonprocedural language, and personally invented and implemented query optimization techniques that allowed Garlic to process queries efficiently, exploiting {{the capabilities of the}} underlying data sources. [...] Haas led the development of IBM InfoSphere Federation Server based on this technology, and was the technical lead of the IBM team which helped establish the enterprise information integration market. Laura also led the Clio project, inventing the concept and basic algorithms for schema mapping, and embodying them in the first tool to compute necessary transformations to bring data from diverse sources into a common format automatically. [...] She continues to provide thought leadership and to pursue new research around information integration, most recently in the context of Big Data, through her role as the Director of IBM Research’s Accelerated Discovery Lab.|$|E
40|$|Multitasking {{language}} run-time systems {{appear in}} a vari-ety of commercial systems, ranging from applets running in web browsers and servlets in web servers to plugins runningin <b>extensible</b> <b>databases</b> and agents running in online markets. By enforcing the language's type system and restrict-ing the interfaces available to untrusted code, languagebased systems can often achieve very restrictive &quot;sandbox&quot;policies, limiting access to the file system, network, an...|$|R
40|$|Object-oriented {{databases}} {{are seen}} as potential successors to relational databases, {{at least in part}} because they provide a richer set of data modelling constructs. This paper addresses the challenge to interface designers posed by such constructs to support data browsing and modelling through powerful and perspicuous visualisations, with the additional requirement that the visualisations should be readily updatable when the semantic model is modified, as is possible in some <b>extensible</b> object-oriented <b>databases.</b> The paper describes a range of visualisations for the semantic modelling constructs of the <b>extensible</b> object-oriented <b>database</b> ADAM, and reports the results of a series of empirical evaluations to assess the effectiveness of these visualisations. These results support the belief {{that it is possible to}} make the advanced data modelling constructs of an <b>extensible</b> object-oriented <b>database</b> system accessible to non-specialist users, allowing the advantages of these systems to accrue [...] ...|$|R
40|$|Annotation of {{existing}} data {{is becoming a}} standard tool in many branches of e-science. Increasingly, databases are being built to receive annotation, and other tools are being developed to annotate existing databases. Annotation is becoming {{an important part of}} communication among scientists. In this paper we review various kinds of annotation systems and describe the importance of designing databases {{in such a way that}} they can receive annotation. This includes designing <b>extensible</b> <b>databases</b> and the need for some form of co-ordinate system for the attachment of annotations. 1 Annotation: adding to existin...|$|R
40|$|Database {{management}} systems {{will continue to}} manage large data volumes. Thus, efficient algorithms for accessing and manipulating large sets and sequences {{will be required to}} provide acceptable performance. The advent of object-oriented and <b>extensible</b> <b>database</b> systems will not solve this problem. On the contrary, modern data model...|$|E
40|$|Relational {{database}} management systems lack the requisite support for specialized {{applications such as}} engineering databases, electronic design databases, geographic databases, etc. <b>Extensible</b> <b>database</b> management systems attempt to fill this void by providing capabilities to define query language extensions and specialized storage structures that suit the particular application. However, they do not provide for having multiple concurrency control policies operating simultaneously. This feature appears useful for multi-application workloads since it would be best, from a performance viewpoint, if each application operated under its favourite concurrency control algorithm. The problem, however, is to maintain database integrity in this environment. In this paper, we {{address the issue of}} designing mechanisms that allow <b>extensible</b> <b>database</b> systems to simultaneously operate multiple concurrency control policies without loss of data integrity. The key properties of such a mechanism are: Firs [...] ...|$|E
40|$|Many {{complex and}} dynamic {{database}} {{applications such as}} product modeling and negotiation monitoring require a number of features that have been adopted in semantic models and databases such as active rules, constraints, inheritance, etc. Unfortunately, each feature has largely been considered in isolation. Furthermore, in a commercial negotiation, participants staking their financial well-beings will never accept a system they cannot gain a precise behavioral understanding of. We attack these problems with a rich and <b>extensible</b> <b>database</b> model, evolving databases, with a clear and precise semantics based on evolving algebras [3]. We also briefly describe a prototype implementation of the model [10]. I. Introduction T HE first contribution {{of this paper is}} a rich and <b>extensible</b> <b>database</b> model primarily aimed at capturing rapidly changing environments. We describe electronic commerce (EC) negotiation using this evolving database (EDB) that captures the state of traded products, of negoti [...] ...|$|E
40|$|The S-tree is {{a dynamic}} height-balanced tree similar in {{structure}} to B+trees. S-trees store fixed length bit-strings, which are called signatures. Signatures are used for indexing textbases, relational, object oriented and <b>extensible</b> <b>databases</b> {{as well as in}} data mining. In this article, methods of designing multi-disk B-trees are adapted to S-trees and new methods of parallelizing S-trees are developed. The resulting structures aim at achieving performance gain by accessing two or more disks simultaneously. Besides, two different searching techniques that exploit parallel disk accessing are devised. Performance results of experiments based on the new structures and searching techniques are also presented and commented...|$|R
5000|$|Informix Dynamic Server, {{also known}} as IDS, is an <b>extensible</b> Relational <b>Database</b> Management System {{originally}} developed by Informix Software Inc. (originally Relational Database Systems, Inc). IDS {{is now part of}} the IBM Software Group database portfolio.|$|R
40|$|Uncertainty {{management}} for geometric data is currently an important problem for (<b>extensible)</b> <b>databases</b> {{in general and}} for spatial databases, image databases, and GIS in particular. In these systems, spatial data are traditionally kept as determinate and sharply bounded objects; the aspect of spatial vagueness is not and cannot be treated by these systems. However, in many geometric and geographical database applications {{there is a need}} to model spatial phenomena rather through vague concepts due to indeterminate and blurred boundaries. Following previous work, we first describe a data model for fuzzy spatial objects including data types for fuzzy regions and fuzzy lines. We then, in particular, study the important class of metric operations on these objects. Keywords Fuzzy spatial data type, fuzzy region, fuzzy line, real-valued metric operation, fuzzy-valued metric operation, fuzzy sets 1...|$|R
40|$|In an <b>extensible</b> <b>database</b> system, {{evaluation}} of a query plan is done in cooperation between a collection of operator implementation functions and {{a component of the}} DBMS that we call the query processor. Basically, the query processor constructs an operator tree for the query plan and then calls an evaluator function which traverses the tree, calling the operator functions in each node. This seemingly simple strategy is {{complicated by the fact that}} operator functions must be able to call for the {{evaluation of}} parameter expressions (e. g. predicates), and must be able to process streams of objects in a pipelined manner. Although query processing along these lines is implemented in most database systems, and certainly in all <b>extensible</b> <b>database</b> systems, the details of programming the parameter passing, organizing the interaction between stream operators, etc. are tricky, and seem to be buried in the code of the respective systems. We are not aware of any simple, crisp, clear published [...] ...|$|E
40|$|This paper {{describes}} a real [...] world application built {{on top of}} the CORAL deductive database system. This application is meant to demonstrate the power of CORAL not only as a deductive database but also as a generic <b>extensible</b> <b>database</b> system. Mimsy is a stock market historical reporting system that can answer questions about daily stock market pricing data. The paper describes the Mimsy system, and issues related to its design and implementation. 1 Overview CORAL [RSS 92] is an extensible deductive database system developed at the University of Wisconsin. While providing all the functionality of a logic programming environment, CORAL also provides the functionality of a general [...] purpose <b>extensible</b> <b>database</b> system [RSSS 93]. The system includes an interpreter capable of processing a declarative rule [...] based language and an imperative environment where CORAL can be accessed from within a host language(C++ [ES 90]). This environment is geared toward the building of non [...] trivial database [...] ...|$|E
40|$|Sequence {{alignment}} is {{very important}} for molecular biologists. Blast is a well-known family of heuristic approaches to solve this problem efficiently. Special purpose algorithms and datastructures, however, do not support the data abstraction offered by database technology. In this paper, we show that modern <b>extensible</b> <b>database</b> management systems, like the Monet system, allow performance comparable to the special purpose solution, while offering the required data abstraction. ...|$|E
40|$|Database {{access in}} a casual {{environment}} has properties of an unstable environment; it is open, unrestricted, dynamic, interactive and unpredictable. Present database modeling approaches do not fulfil all requirements for access {{in this environment}} because they demand hindering restrictions and substantial professional expertise in practice. In existing organizations these preconditions can be met. However, in casual environments many charming advantages of databases are then lost. This paper presents some simple semantic requirements and solutions for databases in casual environments. They lead to self-supporting database systems with reliable and efficient database processing. The kernel of the solutions lies {{in the application of}} extremely simple data semantics. The resulting solutions are also useful in present professional database environments. Keywords: Internet databases, semantic data modeling, active <b>database</b> systems, <b>extensible</b> <b>databases,</b> metadata, schema evolution, end-user [...] ...|$|R
40|$|Abstract—Current {{database}} systems lack several specific functionalities {{that are}} needed by biological databases. bdbms is an <b>extensible</b> prototype <b>database</b> management system for supporting biological data. bdbms extends the current database systems with: (1) Annotation and provenance management, (2) Local dependency tracking, (3) Update authorization, and (4) Non-traditional and novel access methods. 1...|$|R
40|$|Many data-intensive {{applications}} require high-performance {{data management}} facilities, but utilize {{only a small}} fraction of the power of a general-purpose database system (DBMS). We believe single schema database systems (SSDs), i. e., special-purpose DBMSs that are designed for a single schema and a predeclared set of database operations, are a vital need of today's software industry. The challenge is to create a technology for economically building high-performance SSDs. SSD research will combine results from object-oriented databases, persistent object stores, module interconnection languages, rule-based optimizers, open-architecture systems, <b>extensible</b> <b>databases,</b> and generic data types. 1 Introduction There are many common data-intensive applications that do not use general-purpose database systems. Consider the lock manager of a database system (DBMS). It maintains a set of tables whose structures resemble that of relations. Each table stores a different number of "tuples" (e. g., l [...] ...|$|R
40|$|Modern <b>extensible</b> <b>database</b> {{systems support}} {{multimedia}} data through ADTs. However, {{because of the}} problems with multimedia query formulation, this support is not sufficient. Multimedia querying requires an iterative search process involving many different representations of the objects in the database. The support that is needed is very similar to the processes in information retrieval. Based on this observation, we develop the miR Ror architecture for multimedia query processing. We design a layered framework based on information retrieval techniques, to provide a usable query interface to the multimedia database. First, we introduce a concept layer to enable reasoning over low-level concepts in the database. Second, we add an evidential reasoning layer as an intermediate between the user and the concept layer. Third, we add the functionality to process the users ’ relevance feedback. We then adapt the inference network model from text retrieval to an evidential reasoning model for multimedia query processing. We conclude with an outline for implementation of miR Ror on top of the Monet <b>extensible</b> <b>database</b> system. ...|$|E
40|$|A {{system for}} {{managing}} {{a project that}} includes multiple tasks and a plurality of workers. Input information includes characterizations based upon a human model, a team model and a product model. Periodic reports, such as a monthly report, a task plan report, a budget report and a risk management report, are generated and made available for display or further analysis. An <b>extensible</b> <b>database</b> allows searching for information based upon context and upon content...|$|E
40|$|The Big Australian Speech Corpus project {{incorporates}} the strategic goals of 30 Chief Investigators from various speech science areas. Speech from 1000 geographically and socially diverse speakers is being recorded using a uniform and automated protocol plus standardized {{hardware and software}} to produce a widely applicable and <b>extensible</b> <b>database</b> – AusTalk. Here we describe the project’s major components and organization; share the lessons learnt from difficulties and challenges; and present the results achieved so far...|$|E
40|$|In {{applications}} like financial trading, scheduling, {{manufacturing and}} process control, time based predicates in queries and rules are very important. There {{is also a}} need to define lists of time points or intervals. We refer to these lists as calendars. This paper presents a system of calendars that allows specification of natural-language timebased expressions, maintenance of valid time in databases, specification of temporal conditions in database queries and rules, and user-defined semantics for date manipulation. A simple list based language is proposed to define, manipulate and query calendars. The design of the parser and an algorithm for efficient evaluation of calendar expressions is also described. The paper also describes the implementation of time-based rules in POSTGRES using the proposed system of calendars. Keywords: Calendars, Temporal <b>Databases,</b> Temporal Rules, <b>Extensible</b> <b>Databases.</b> 1 Introduction Temporal conditions and constraints arise very often in applications li [...] ...|$|R
40|$|Scientific {{applications}} require processing highvolume on-line {{streams of}} numerical data from instruments and simulations. We present an <b>extensible</b> stream <b>database</b> {{system that allows}} scalable and flexible continuous queries on such streams. Application dependent streams and query functions are defined through an object-relational model. Distributed execution plans for continuous queries are described as high-level data flow distribution templates...|$|R
40|$|The {{power of}} the Integrated Product Model can be {{extended}} well beyond the mere definition of geometry, and this extension offers significant benefits to shipbuilders. The nature of CAD/CAM data allows use of arbitrarily <b>extensible</b> linked <b>databases,</b> which can contain any other information that might be useful for manufacture, production engineering, procurement and even maintenance and operation of the ship throughout its lifecycle...|$|R
40|$|We {{describe}} a meta-querying system for databases containing queries {{in addition to}} ordinary data. In the context of such databases, a meta-query is a query about queries. Representing stored queries in XML, and using the standard XML manipulation language XSLT as a sublanguage, we show that just a few features need {{to be added to}} SQL {{to turn it into a}} fully-fledged meta-query language. The good news is that these features can be directly supported by <b>extensible</b> <b>database</b> technology. ...|$|E
40|$|Abstract. Bioinformatics {{research}} groups require information systems {{keeping track of}} experiments and their results. However, current solutions are often ad-hoc, difficult to maintain, extend, or use in different context. This paper presents Exp-DB, an infrastructure for the fast development of information systems for experiment tracking. Exp-DB provides a basic, <b>extensible</b> <b>database</b> design, components for accessing the data, and a web-based interface. It allows for fast implementation of an initial system even by non IT-experts which can then be extended step-by-step. ...|$|E
40|$|Traditional {{indexing}} {{techniques are}} not well suited for complex data types such as spatial, spatio-temporal, and multimedia data types, where an instance is a composite of multiple components. In this paper we propose two indexing techniques that allow the parts of a composite object to be indexed separately, called multiple entry indexing and double indexing. We present the implementation of these approaches in the Secondo <b>extensible</b> <b>database</b> system. The improvements in terms of performance of both approaches {{presented in this paper}} shown in an experimental evaluation. ...|$|E
40|$|With {{the spread}} of the Internet the {{computing}} model on server systems is undergoing several important changes. Recent research ideas concerning dynamic operating system extensibility are finding their way into the commercial domain, resulting in designs of <b>extensible</b> <b>databases</b> and Web servers. In addition, both ordinary users and service providers must deal with untrusted downloadable executable code of unknown origin and intentions. Across the board, Java has emerged as the language of choice for Internet-oriented software. We argue that, in order to realize its full potential in applications dealing with untrusted code, Java needs a flexible resource accounting interface. The design and prototype implementation of such an interface [...] - JRes [...] - is presented in this paper. The interface allows to account for heap memory, CPU time, and network resources consumed by individual threads or groups of threads. JRes allows limits to be set on resources available to threads and it can invoke [...] ...|$|R
40|$|Users of {{distributed}} {{databases and}} of distributed application frameworks require interoperation of heterogeneous data and components, respectively. In this paper, we examine how an <b>extensible,</b> objectrelational <b>database</b> system can integrate both modes of interoperability. We describe the Virtual Table Interface, a facility of the INFORMIX-Dynamic Server Universal Data Option, that provides simplified access to heterogeneous components {{and discuss the}} benefits of integrating data with application components. ...|$|R
40|$|Changes to the {{conceptual}} structure (meta-data) of a database {{are common in}} many application environments and are in general inadequately supported by existing database systems. An approach to supporting such meta-data evolution in a simple, <b>extensible,</b> object <b>database</b> environment is presented. Machine learning techniques are {{the basis for a}} cooperative user/system database design and evolution methodology. An experimental end-user database evolution tool based on this approach has been designed and implemented...|$|R
40|$|This paper {{presents}} {{the design and}} an initial performance evaluation of the query optimizer generator designed for the EXODUS <b>extensible</b> <b>database</b> system. Algebraic transformation rules are translated into an executable query optimizer, which transforms query trees and selects methods for executing operations according to cost functions associated with the methods. The search strategy avoids exhaustive search and it modifies itself {{to take advantage of}} past experience. Computational results show that an optimizer generated for a relational system produces access plans almost as good as those produced by exhaustive search, with the search time cut to a small fraction...|$|E
40|$|This paper {{presents}} {{the design and}} an mmal perfor-mance evaluation of the query ophrmzer generator designed for the EXODUS <b>extensible</b> <b>database</b> system. Algetic transformaaon rules are translated mto an executable query optmuzer. which transforms query trees and selects methods for executmg operattons accordmg to cost funcaons associ-ated with the methods The search strategy avoids exhaus-ave search and it mties Itself {{to take advantage of}} past expenence Computattonal results show that an opmzer generated for a relational system produces access plans almost as good as those produced by exhaushve search, ~rlth the search tune cut to a small fraction...|$|E
40|$|This short paper {{provides}} an overview of the Starburst Rule System, a production rules facility inte-grated into the Starburst <b>extensible</b> <b>database</b> system. The rule language is based on arbitrary database state transitions rather than tuple- or statement-level changes, yielding a clear and exible execution semantics. The rule system was implemented rapidly using the extensibility features of Starburst; it is integrated into all aspects of query and transaction processing, including concurrency control, autho-rization, recovery, etc. Using the Starburst Rule System, we have developed a number of methods for automatically generating database rule applications, including integrity constraints, materialized views, deductive rules, and semantic heterogeneity. ...|$|E
40|$|In {{order to}} better support the Internet the {{computing}} model on server systems is undergoing several important changes. First, recent research ideas concerning dynamic operating system extensibility are finding {{their way into the}} commercial domain, resulting in designs of <b>extensible</b> <b>databases</b> and Web servers. Second, both ordinary users and service providers must deal with untrusted downloadable executable code of unknown origin and intentions. Across the board, Java has emerged as the language of choice for Internet-oriented software. We argue that, in order to realize its full potential in applications dealing with untrusted code, Java needs a flexible resource accounting interface. The design and prototype implementation of such an interface – JRes- is presented in this paper. The interface allows to account for heap memory, CPU time, and network resources consumed by individual threads or collections of threads. JRes allows limits to be set on resources available to threads and it can invoke callbacks when these limits are exceeded. The JRes prototype described in this paper is implemented on top of standard Java virtual machines and requires only a small amount of native code. ...|$|R
40|$|Linguistic Databases {{that are}} {{currently}} available {{for research and development}} can be currently classified as a heterogeneous collection of different proprietary databases with minimal means, if any, of interoperability with other linguistic databases, making it hard to extend the database usefulness beyond the life of their originating projects (Cunningham, 1999). This paper discusses an interoperable <b>extensible</b> linguistic <b>database</b> system developed for the Maltilex Project at the University of Malta (Rosner et. al., 1999) ...|$|R
40|$|Abstract Background The {{explosion}} in biological information creates {{the need for}} databases {{that are easy to}} develop, easy to maintain and can be easily manipulated by annotators {{who are most likely to}} be biologists. However, deployment of scalable and <b>extensible</b> <b>databases</b> is not an easy task and generally requires substantial expertise in database development. Results BioBuilder is a Zope-based software tool that was developed to facilitate intuitive creation of protein databases. Protein data can be entered and annotated through web forms along with the flexibility to add customized annotation features to protein entries. A built-in review system permits a global team of scientists to coordinate their annotation efforts. We have already used BioBuilder to develop Human Protein Reference Database [URL], a comprehensive annotated repository of the human proteome. The data can be exported in the extensible markup language (XML) format, which is rapidly becoming as the standard format for data exchange. Conclusions As the proteomic data for several organisms begins to accumulate, BioBuilder will prove to be an invaluable platform for functional annotation and development of customizable protein centric databases. BioBuilder is open source and is available under the terms of LGPL. </p...|$|R
