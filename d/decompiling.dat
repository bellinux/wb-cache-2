57|146|Public
5|$|The product's license {{agreement}} allows home users to download, install {{and use it}} on an unlimited number of computers in their households free of charge, as long as each computer has a legitimately licensed copy of Microsoft Windows. Since October 2010, small businesses have also been allowed to install the product on up to 10 devices, but use in academic institutions and governmental locations is forbidden, as is reverse-engineering, <b>decompiling</b> or disassembling the product or working around its designed limitations.|$|E
500|$|Sega v. Accolade {{has been}} an {{influential}} case in matters involving reverse engineering of software and copyright infringement, and has been cited in numerous cases since 1993. [...] The case has redefined how reverse engineering with unlicensed products is seen in legal issues involving copyright. [...] Legally, the decision concurred {{that the nature of}} Accolade's work in reverse engineering the Sega Genesis was to access ideas that were deemed unprotected by copyright law, and could only be accessed by <b>decompiling.</b> [...] By the verdict, the console's functional principles were established not to be protected by copyright, and that when no other means were available, reverse engineering the copyrighted software to access information about the console's functional principles is protected by the fair use doctrine. [...] One such example of the precedent set by this case is Sony Computer Entertainment, Inc. v. Connectix Corporation, which cited Sega v. Accolade in deciding that reverse engineering the Sony PlayStation BIOS was protected by fair use and was non-exploitative.|$|E
5000|$|Maximum {{protection}} of executable code from <b>decompiling</b> and reliable autonomous work of trading robots.|$|E
50|$|Various applications, such as HTML Help Workshop and 7-Zip can <b>decompile</b> CHM files. The hh.exe utility on Windows and the extract_chmLib utility (a {{component}} of chmlib) on Linux can also <b>decompile</b> CHM files.|$|R
5|$|In 2006 {{the game}} was <b>decompiled</b> by Dennis Debro and a source code variant reconstructed.|$|R
50|$|First, {{a person}} or entity must have a license to use the program to be <b>decompiled.</b>|$|R
5000|$|The ACE's dialect of FORTH {{introduced}} several innovations. First As FORTH programming environment, {{it added}} syntax checking to control structures and definer constructions (a.k.a. [...] "Safe Compiling") {{as well as}} <b>decompiling</b> capabilities.|$|E
5000|$|The first, from 1995 (starting date of his {{internet}} presence) to 1999 {{was related}} to software reversing, software protection, <b>decompiling,</b> disassembling, and deep software code deconstruction. One of his products, the WDasm disassembler, which also included a debugger, was a popular download.|$|E
5000|$|Avoiding sources was {{compensated}} {{by inserting}} comments on code, thus recovering these too on <b>decompiling.</b> As {{a result of}} [...] "code is the source", modified words (edited) would demand actualization of all code using the one newly edited. This {{was done with the}} non standard REDEFINE command.|$|E
50|$|To modify, adapt, translate, reverse engineer, <b>decompile,</b> disassemble, and/or develop {{derivative}} {{works of the}} licensed software copy.|$|R
50|$|After the {{publisher}} stopped distribution, the assembler was <b>decompiled</b> and extension where added by TFA, released without changing the name.|$|R
5000|$|To allow <b>decompile,</b> it {{distinguished}} usual Forth definer and compiler words creation, {{replacing the}} CREATE [...]. DOES>, creation pair with: ...|$|R
50|$|The unlzx {{program can}} unpack Amiga LZX archives. The cabextract program can unpack Microsoft cabinet files using the LZX method. There are a {{multitude}} of cross-platform tools for <b>decompiling</b> or viewing CHM files, {{as stated in the}} CHM article. LIT files can be unpacked using the Convert LIT software.|$|E
5000|$|The license {{agreement}} for PROLOK {{depended on the}} Louisiana Software License Enforcement Act {{to give it the}} authority to prohibit users from <b>decompiling</b> or disassembling the software. The Act purported to permit certain {{license agreement}}s to contain [...] "...prohibitions on translating, reverse engineering, <b>decompiling,</b> disassembling, and/or creating derivative works based on the computer software." [...] Vault had included such a provision in its license agreement and claimed that Quaid violated this provision when it reverse engineered PROLOK. The district court held that the Louisiana License Act was unenforceable because it was preempted by the Copyright Act. The circuit court ruled only on the clause permitting a licensor to prohibit decompilation or disassembly, holding that this clause was preempted by the exemptions of 17 U.S.C. §117, which grant permission to make [...] "essential step" [...] and archival copies.|$|E
50|$|The Louisiana SLEA {{was first}} {{examined}} in court when Vault Corporation sued Quaid Software Ltd. for copyright infringement, trade secret misappropriation, and patent infringement. Vault argued that Quaid's actions in <b>decompiling</b> and disassembling PROLOK constituted {{a violation of}} the software license agreement. Therefore, by Louisiana’s Software License Enforce Act, Quaid would be in violation of the Louisiana Uniform Trade Secret Act for trade secret misappropriation.|$|E
40|$|Access to {{software}} is considered, {{with regard to}} the discipline provided by Art. 64 quater of the Italian Copyright law (which provides for a limited permission to <b>decompile</b> software). It is argued that in the proceedings stated by UE Commission against Microsoft a different approach emerges, according to which not only it is licit to <b>decompile,</b> even without the permission of the copyright holder, but the latter has the positive duty to provide sufficient information...|$|R
5000|$|Intermediate language: {{instrumentation}} {{added to}} assembly or <b>decompiled</b> bytecodes giving support for multiple higher-level source languages and avoiding (non-symbolic) binary offset re-writing issues.|$|R
40|$|There {{are several}} {{available}} obfuscation tools for protecting compiled Java programs—bytecode files. Most {{of the tools}} just scramble the identifier information stored in a bytecode file. This job can easily be done by textually substituting the identifiers with sequentially or randomly generated meaningless names. However, these new unique identifiers cannot deter an experienced reverse engineer too long. In this paper, we proposed several techniques that make the <b>decompiled</b> program difficult to understand and to recompile. Several techniques are proposed to introduce syntax and semantic errors into the <b>decompiled</b> program while keeping the original behaviors of the bytecode. The reverse engineer has to debug the 1 <b>decompiled</b> program manually. Although most of the methods we proposed are only scrambling the identifiers in a Java bytecode file, the bytecode file become much harder to be reverse engineered than other identifier scrambling techniques...|$|R
50|$|The ACE had an 8 kB ROM {{containing}} the Forth kernel and operating system, and the predefined dictionary of Forth words in about 5 kB. The remaining 3 kB of ROM supported several functionalities: {{floating point numbers}} library and character definitions table, tape recorder access, <b>decompiling</b> and redefining newly re-edited 'words' (i.e. routines). Some of the ROM was written in Z80 machine code, but some was also coded in Forth.|$|E
50|$|<b>Decompiling</b> allowed not {{to waste}} RAM in {{simulating}} an absent Block System, used with both disk and tape drivers (these last {{not to be}} confused with tape recorders). As replacement, it included an extra data file, for raw binary data. These solutions were unique to the Jupiter ACE, making Ace Forth much more than Forth alone on a disk-less entry computer. There was no need to buy, or load, Forth to get full usage of a cheap computer.|$|E
50|$|Groups {{opposed to}} {{software}} patents {{have argued that}} the proposed Unified Patent Court court to be run by patent judges, and may have strong ties to the patent industry. They assume therefore it allows software patents to be enforced despite rules that forbid them -such as explicitly allowing <b>decompiling</b> of software protected by patents in the Unified Patent Court Agreement- and failed attempts by the European Parliament to bring those provisions under EU law rather than under Unified Patent Court law.|$|E
40|$|Java {{programs}} distributed through internet {{are suffering}} of problems like reverse engineering, algorithms theft and unauthorized functional changes. The {{reason for this}} issue is that the bytecode from Java class file holds enough information to be <b>decompiled</b> into source code that resembles the original. In this paper, I discuss some practical obfuscation methods that make difficult {{the understanding of the}} <b>decompiled</b> programs. The methods analyzed are: lexical obfuscation, data obfuscation, control flow obfuscation, obfuscation methods that make use of the discrepancy between bytecode and source code. In order to evaluate the usefulness of these methods, some metrics will be described...|$|R
50|$|Andrea Capiluppi, Paolo Falcarin and Cornelia Boldyreff, <b>Decompile,</b> Defactor, Decouple: Measuring the Obfuscation Tirade to Protect Software Systems, Journal of Software Evolution and Process, Wiley (invited {{paper for}} special issue - under review).|$|R
50|$|Other spin offs (Trash'm One, AsmPro {{being the}} two most known) started to appear as well, which were all based on either the {{original}} V1.02 or a <b>decompiled</b> version of AsmOne with TFA's extensions.|$|R
50|$|In Vault Corp. v. Quaid Software Ltd., 655 F.Supp. 750 (US District Court, E.D. Louisiana 1987), the United States District Court for the Eastern District of Louisiana {{ruled that}} the SLEA was preempted by the Copyright Act, because, “Louisiana's License Act ‘touched upon the area’ of federal {{copyright}} law.” Upon appeal, the United States Court of Appeals for the Fifth Circuit affirmed the district court’s ruling. Thus, the Louisiana Revised Statutes 51:1963:4 provision for reverse engineering, <b>decompiling,</b> or disassembling, was invalidated.|$|E
50|$|The product's license {{agreement}} allows home users to download, install {{and use it}} on an unlimited number of computers in their households free of charge, as long as each computer has a legitimately licensed copy of Microsoft Windows. Since October 2010, small businesses have also been allowed to install the product on up to 10 devices, but use in academic institutions and governmental locations is forbidden, as is reverse-engineering, <b>decompiling</b> or disassembling the product or working around its designed limitations.|$|E
50|$|Several {{versions}} of the software made reverse engineering easy by packing resource data {{to the end of}} the executable with no encryption or internal obfuscation. A decompiler was released specifically for <b>decompiling</b> games distributed with the early iOS runner. Obfuscation programs were later developed and released to deter hackers from extracting the game resources from executable files built with the program. The latest version of the software, GM: Studio, makes it harder to decompile games given its compiled nature and it has built in obfuscation.|$|E
50|$|In 2011, Alex Kosinsky {{initiated}} {{a variant of}} JD-Eclipse which supports the alignment of <b>decompiled</b> code by the line numbers of the originals, which are often included in the original Bytecode as debug information.|$|R
50|$|Some compilers and post-compilation tools produce {{obfuscated}} code (that is, {{they attempt}} to produce output that {{is very difficult to}} <b>decompile).</b> This is done to {{make it more difficult to}} reverse engineer the executable.|$|R
5000|$|In February 2010 Red Gate {{released}} [...]NET Reflector 6 {{along with}} a commercial Pro edition that enabled users to step into <b>decompiled</b> code in the Visual Studio debugger {{as if it were}} their own source code.|$|R
50|$|These 2 {{defining}} pairs, {{instead of}} one alone, allowed the ACE to decompile its programs, unlike usual Forth systems. This <b>decompiling</b> ability was {{a solution to the}} absence of the more flexible disk system used by Forth. Not storing the source of a Forth program, but compiling the code after editing, it avoided completely the emulation of a disk/tape drive on RAM saving computer memory. It also saved time in reading and writing programs from cassette tape. This tape-friendly and RAM-saving solution was unique to the Jupiter ACE Forth.|$|E
50|$|The updated MQL4 {{features}} new {{graphical objects}} and new functions borrowed from MQL5 {{and used for}} analyzing charts. The protection system was completely modified for the executable files EX4, which made <b>decompiling</b> impossible. The MQL5 Standard libraries was transferred almost entirely with the only exception of the trade subsystem, which required adaptation. New data types were added and the micro substitution system expanded (conditional compiling #ifdef, #ifndef, #else, #endif), allowing the use of code from other languages based on С/C++. Structures, classes and object pointers were added as well (it {{should be noted that}} object pointers in MQL4/MQL5 are not similar in every way to the ones in С++).|$|E
5000|$|The Louisiana Software License Enforcement Act {{refers to}} the Software License Enforcement Act (SLEA) adopted {{by the state of}} Louisiana. The bill was voted into law in September 1984 under Title 51 (Trade and Commerce) of the Louisiana Revised Statutes by the Louisiana State Legislature. Sponsored and mostly written by Vault Corporation, the SLEA defines the {{permissible}} terms and conditions of a software license agreement and the requirements for enforceability. The reverse engineering, <b>decompiling</b> or disassembling provision of the Louisiana SLEA was invalidated by the United States Court of Appeals for the Fifth Circuit ruling in [...] Vault Corp. v. Quaid Software, Ltd., 847 F.2d 255 (5th Cir. 1988).|$|E
50|$|Part of Digital Eclipse's work include {{their own}} Eclipse Engine, {{a tool that}} allows them to <b>decompile</b> the code from older games into {{machine-readable}} format that is then used by the Eclipse Engine to play them on modern systems. While it may take some extra work by the company to <b>decompile</b> the older game into the proper format one time, this approach allows them to rapidly port the Eclipse version to any modern gaming system, including computer, console, or portable/mobile device with a minimum of effort. This engine has been used so far in the Mega Man Legacy Collection and The Disney Afternoon Collection.|$|R
5000|$|Next Byte Codes (NBC) is {{a simple}} open source {{language}} with an assembly language syntax {{that can be used}} to program the NXT brick. BricxCC also has the capability to <b>decompile</b> standard [...]rxe NXT executables to NBC ...|$|R
40|$|Java decompilers convert Java class {{files to}} Java source. Java class files may {{be created by}} a number of {{different}} tools including standard Java compilers, compilers for other languages such as AspectJ, or other tools such as optimizers or obfuscators. There are two kinds of Java decompilers, javac-specific decompilers that assume that the class file was created by a standard javac compiler and tool-independent decompilers that can <b>decompile</b> arbitrary class files, independent of the tool that created the class files. Typically javac-specific decompilers produce more readable code, but they fail to <b>decompile</b> many class files produced by other tools. This paper tackles {{the problem of how to}} make a toolindependent decompiler, Dava, produce Java source code that is programmer-friendly. In past work it has been shown that Dava can <b>decompile</b> arbitrary class files, but often the output, although correct, is very different from what a programmer would write and is hard to understand. Furthermore, tools like obfuscators intentionally confuse the class files and this also leads to confusing <b>decompiled</b> source files. syntax trees (ASTs) for arbitrary class files, we provide a new back-end for Dava. The back-end rewrites the ASTs to semantically equivalent ASTs that correspond to code that is easier for programmers to understand. Our new backend includes a new AST traversal framework, a set of simple pattern-based transformations, a structure-based data flow analysis framework and a collection of more advanced AST transformations that use flow analysis information. We include several illustrative examples including the use of advanced transformations to clean up obfuscated code. ...|$|R
