1019|7117|Public
5|$|However, in non-technical {{contexts}} and in {{software for the}} World Wide Web, the term URL remains widely used. Additionally, the term web address (which has no formal definition) often occurs in non-technical publications as a synonym for a URI that uses the scheme http or <b>https.</b> Such assumptions can lead to confusion, for example {{in the case of}} XML namespaces, which have a visual similarity to resolvable URIs.|$|E
5|$|The scheme, {{consisting}} of a sequence of characters beginning with a letter and followed by any combination of letters, digits, plus (+), period (.), or hyphen (-). Although schemes are case-insensitive, the canonical form is lowercase and documents that specify schemes must do so with lowercase letters. It {{is followed by a}} colon (:). Examples of popular schemes include <b>http(s),</b> ftp, mailto, file, data, and irc. URI schemes should be registered with the Internet Assigned Numbers Authority (IANA), although non-registered schemes are used in practice.|$|E
25|$|In June 2009, Soghoian co-authored an {{open letter}} to Google with 37 {{prominent}} security and privacy experts, urging the company to protect the privacy of its customers by enabling <b>HTTPS</b> encryption by default for Gmail and its other cloud based services. In January 2010, Google enabled <b>HTTPS</b> by default for users of Gmail, and subsequently for other products, including search. According to Google, it was already considering <b>HTTPS</b> by default. Soghoian has in recent years continued his <b>HTTPS</b> advocacy, calling on news media, law firms, government agencies and other organizations to encrypt their own websites.|$|E
5000|$|MPEG-DASH (Dynamic Streaming over <b>HTTP</b> - Standard), RTSP (Standard), RTP, RBS (Helix-to-Helix), RDT (Helix-to-Helix), <b>HTTP,</b> <b>HTTP</b> cloaking, <b>HTTP</b> Live {{streaming}} (HLS), <b>HTTP</b> progressive download, RTMP, RTMPT, RTMPS, MMS (Windows Media), MS-WMSP ...|$|R
50|$|<b>HTTP</b> proxies send <b>HTTP</b> {{requests}} {{through an}} intermediate proxying server. A client connecting through an <b>HTTP</b> proxy sends {{exactly the same}} <b>HTTP</b> request to the proxy as it would send to thedestination server unproxied. The <b>HTTP</b> proxy parses the <b>HTTP</b> request; sends its own <b>HTTP</b> request to the ultimate destination server; and then returns the response back to the proxy client. An <b>HTTP</b> proxy tool's security can be trusted {{as far as the}} operator of the proxy server can be trusted. <b>HTTP</b> proxy tools require either manual configuration of the browser or client side software that can configure the browser for the user. Once configured, an <b>HTTP</b> proxy tool allows the user transparently to use his normal browser interface.|$|R
5000|$|Direct <b>HTTP</b> request data: {{directly}} {{comes from}} <b>HTTP</b> request messages (<b>HTTP</b> request headers).|$|R
25|$|Firefox {{allowed for}} a sandbox {{security}} model to manage privileges accorded to JavaScript code, but that feature has since been deprecated. It limits scripts from accessing data from other websites based on the same-origin policy. It also provides support for smart cards to web applications, for authentication purposes. It uses SSL/TLS to protect communications with web servers using strong cryptography when using the <b>HTTPS</b> protocol. The freely available <b>HTTPS</b> Everywhere add-on enforces <b>HTTPS,</b> even if a regular HTTP URL is entered. Firefox now supports HTTP/2.|$|E
25|$|In January 2010, Google began {{rolling out}} <b>HTTPS</b> as the default for all users.|$|E
25|$|Public key {{authentication}} (usually implemented with a <b>HTTPS</b> / SSL client certificate) using a client certificate.|$|E
40|$|Previous {{research}} from two former students state {{the importance of}} identifying <b>HTTP</b> sessions[1]. The identification of <b>HTTP</b> sessions is not trivial, because <b>HTTP</b> is a sessionless protocol. In the header of the <b>HTTP</b> protocol[2] is no field defined that can identify a session. During this research project the behaviour of the <b>HTTP</b> protocol was analysed {{and the results were}} used to define methods to identify <b>HTTP</b> sessions. The methods are placed into two categories. One category defines the starting point of a <b>HTTP</b> session. The other category can correlate <b>HTTP</b> messages that belong to a specific <b>HTTP</b> session. The defined methods are based on web 1. 0. Some methods are mor...|$|R
30|$|The <b>HTTP</b> Responder: The <b>HTTP</b> {{responder}} replies to {{the stream}} of <b>HTTP</b> requests coming from embedded browsers. The previously recorded <b>HTTP</b> trace is given as an input to the SR-Proxy.|$|R
50|$|Early {{versions}} of <b>HTTP</b> 1.0 {{did have some}} security weaknesses relating to session hijacking, but they were difficult to exploit due {{to the vagaries of}} most early <b>HTTP</b> 1.0 servers and browsers. As <b>HTTP</b> 1.0 has been designated as a fallback for <b>HTTP</b> 1.1 since the early 2000s—and as <b>HTTP</b> 1.0 servers are all essentially <b>HTTP</b> 1.1 servers the session hijacking problem has evolved into a nearly permanent security risk.|$|R
25|$|According to Mozilla since January 2017 {{more than}} half of the Web traffic is {{encrypted}} with <b>HTTPS.</b>|$|E
25|$|WinInet.dll is the {{protocol}} handler for HTTP, <b>HTTPS</b> and FTP. It handles all network communication over these protocols.|$|E
25|$|These weak {{cleartext}} protocols used {{together with}} <b>HTTPS</b> network encryption resolve {{many of the}} threats that digest access authentication is designed to prevent.|$|E
5000|$|Wowza Streaming Engine: Multi-format {{streaming}} server for RTSP/RTP, RTMP, MPEG-TS, ICY, <b>HTTP</b> (<b>HTTP</b> Live Streaming, <b>HTTP</b> Dynamic Streaming, Smooth Streaming, MPEG-DASH), WebRTC ...|$|R
40|$|This paper {{investigates the}} {{performance}} of vari-ous versions of the HyperText Transfer Protocol (<b>HTTP)</b> over a geosynchronous satellite link. Both HTTP/ 1. 0, the currently popular form of the pro-tocol, and HTTP/ 1. 1, the recently standardized form of <b>HTTP,</b> are studied. Next, we quantify {{the impact of a}} moderate bit-error rate on the per-formance of <b>HTTP.</b> Finally, we expand the math-ematical model of <b>HTTP</b> presented in [HOT 97] to encompasses a wider range of <b>HTTP</b> behav-ior. We show this model accurately predicts <b>HTTP</b> throughput by comparing it with <b>HTTP</b> transfers made over a satellite channel. ...|$|R
50|$|The first {{documented}} {{version of}} <b>HTTP</b> was <b>HTTP</b> V0.9 (1991). Dave Raggett led the <b>HTTP</b> Working Group (<b>HTTP</b> WG) in 1995 {{and wanted to}} expand the protocol with extended operations, extended negotiation, richer meta-information, tied with a security protocol which became more efficient by adding additional methods and header fields. RFC 1945 officially introduced and recognized <b>HTTP</b> V1.0 in 1996.|$|R
25|$|WebDAV/Delta-V (over http or <b>https)</b> {{using the}} mod_dav_svn module for Apache 2. This mode uses the http://host/path access scheme or https://host/path for secure {{connections}} using ssl.|$|E
25|$|Since May 2015, Chinese Wikipedia {{has been}} blocked in China. This was done after Wikipedia started to use <b>HTTPS</b> {{encryption}} which made selective censorship impossible or more difficult.|$|E
25|$|Another approach, which avoids typing or cutting-and-pasting into a {{resolver}} is {{to include}} the DOI in a document as a URL which uses the resolver as an HTTP proxy, such as http://doi.org/ (preferred) or http://dx.doi.org/, both of which support <b>HTTPS.</b> For example, the DOI 10.1000/182 can {{be included in a}} reference or hyperlink as https://doi.org/10.1000/182. This approach allows users to click on the DOI as a normal hyperlink. Indeed, as previously mentioned, this is how CrossRef recommends that DOIs always be represented (preferring <b>HTTPS</b> over HTTP), so that if they are cut-and-pasted into other documents, emails, etc., they will be actionable.|$|E
40|$|Abstract—Many {{different}} existing {{technologies and}} techniques {{have been developed}} to accelerate Hyper Text Transfer Protocol (<b>HTTP)</b> with the aim of improving the end-user’s web browsing experience. However, there is no standard methodology for evaluating <b>HTTP</b> performance or for the evaluation of a given <b>HTTP</b> acceleration technology in a multi-user scenario. In this paper we present a framework HTTP-AE (<b>HTTP</b> Automated Evaluation) for measuring the end-user’s web browsing quality of experience. We describe how HTTP-AE can be used to automate the evaluation of <b>HTTP</b> performance and for the evaluation of <b>HTTP</b> acceleration technologies in multi-user environments. We present three case studies in which we evaluate three different <b>HTTP</b> acceleration technologies for satellite systems using HTTP-AE. In our first two case studies we show that typical browser <b>HTTP</b> acceleration techniques operate sub-optimally on satellite systems. In our third case study we show that in multi-user scenarios, <b>HTTP</b> acceleration technologies, which break the endto-end semantics of <b>HTTP,</b> can distribute network resources unfairly to the end-users...|$|R
40|$|A {{number of}} {{different}} approaches exist to deliver multimedia content to the end-user through the Web. Within classic client-server architectures, three main media delivery methods exist: <b>HTTP</b> download, real-time streaming, and <b>HTTP</b> streaming. The latter combines the advantages of both the <b>HTTP</b> download and the traditional streaming approach. In this paper, we provide an overview and analysis of two existing technologies {{which are based on}} <b>HTTP</b> streaming: Smooth Streaming and <b>HTTP</b> Live Streaming. Further, we propose an enhancement for <b>HTTP</b> Streaming, called BSD-based <b>HTTP</b> streaming. This enhanced media delivery technique works on an ordinary <b>HTTP</b> Web server, makes use of existing metadata specifications, and does not apply any restriction regarding the media formats used and the way media resources are organized on the server...|$|R
50|$|This {{reorganization}} provides tremendous flexibility: taking just Web Browser SSO {{alone as}} an example, a service provider {{can choose from}} four bindings (<b>HTTP</b> Redirect, <b>HTTP</b> POST and two flavors of <b>HTTP</b> Artifact), while the identity provider has three binding options (<b>HTTP</b> POST plus two forms of <b>HTTP</b> Artifact), {{for a total of}} twelve (12) possible deployments of the SAML 2.0 Web Browser SSO Profile.|$|R
25|$|On September 12, 2016, it was {{reported}} that starting with Chrome 56, users will be warned when they visit non-secure HTTP websites to encourage more sites to make the transition to <b>HTTPS.</b>|$|E
25|$|However, {{this use}} of <b>HTTPS</b> relies upon the end user to {{accurately}} validate that they are accessing the correct URL each time to prevent sending their password to an untrusted server, which results in phishing attacks.|$|E
25|$|Dillo {{does not}} support JavaScript, Java, Flash, right-to-left text, or complex text layout. Support for frames is also very limited; Dillo {{presents}} a link to each frame to allow the user to view them one at a time. A plug-in to add <b>HTTPS</b> support is likewise under development.|$|E
5000|$|<b>HTTP</b> security: some balancers {{can hide}} <b>HTTP</b> error pages, remove server {{identification}} headers from <b>HTTP</b> responses, and encrypt cookies so that end users cannot manipulate them.|$|R
5000|$|A common {{method is}} to direct all web traffic to a web server, which returns an <b>HTTP</b> {{redirect}} to a captive portal. [...] When a modern, internet-enabled device first connects to a network, it sends out a <b>HTTP</b> request and expects an <b>HTTP</b> status code of 204. If the device receives a <b>HTTP</b> 204 status code, it assumes it has unlimited internet access. Captive portal prompts are displayed when {{you are able to}} manipulate this first <b>HTTP</b> message to return a <b>HTTP</b> status code of 302 (redirect) to the captive portal of your choice.|$|R
40|$|While {{streaming}} protocols like RTSP/RTP {{have continued}} to evolved, <b>HTTP</b> has remained a primary method for Web-based video retrieval. The ubiquity and simplicity of <b>HTTP</b> makes it a popular choice for many applications. However, <b>HTTP</b> was not designed for retrieving data with just-in-time tolerances; <b>HTTP</b> servers have always taken an as-fast-as-possible approach to data delivery. For media with known bandwidth constraints (e. g., audio/video files), <b>HTTP</b> servers can be enhanced and optimized by taking these constraints into account. For these data types, we present our architecture for an <b>HTTP</b> streaming server using paced output. We discuss the scalability advantages of our <b>HTTP</b> streaming server architecture and compare it with traditional <b>HTTP</b> server response times and bandwidth usage. We also introduce an intelligent bursting mechanism and consider its effects on end user experience. 1...|$|R
25|$|In October 2014 users on Sky Broadband {{reported}} {{very slow}} and intermittent performance of image host Imgur. Clicking on an image would typically {{result in the}} site appearing to be down. Accessing via <b>HTTPS</b> causes images to load normally because it bypasses the proxy used on sites with blacklisted content.|$|E
25|$|BITS suspends any ongoing {{transfer}} {{when the}} network connection is lost or {{the operating system}} is shut down. It resumes the transfer from where it left off when (the computer is turned on later and) the network connection is restored. BITS supports transfers over SMB, HTTP and <b>HTTPS.</b>|$|E
25|$|Blowfish's {{use of a}} 64-bit {{block size}} (as opposed to e.g. AES's 128-bit block size) makes it {{vulnerable}} to birthday attacks, particularly in contexts like <b>HTTPS.</b> In 2016, the SWEET32 attack demonstrated how to leverage birthday attacks to perform plaintext recovery (i.e. decrypting ciphertext) against ciphers with a 64-bit block size such as Blowfish.|$|E
50|$|SOCKS {{operates}} {{at a lower}} level than <b>HTTP</b> proxying: SOCKS uses a handshake protocol to inform the proxy software about the connection that the client is trying to make, and then acts as transparently as possible, whereas a regular proxy may interpret and rewrite headers (say, to employ another underlying protocol, such as FTP; however, an <b>HTTP</b> proxy simply forwards an <b>HTTP</b> request to the desired <b>HTTP</b> server). Though <b>HTTP</b> proxying has a different usage model in mind, the CONNECT method allows for forwarding TCP connections; however, SOCKS proxies can also forward UDP traffic and work in reverse, while <b>HTTP</b> proxies cannot. <b>HTTP</b> proxies are traditionally {{more aware of the}} <b>HTTP</b> protocol, performing higher-level filtering (though that usually only applies to GET and POST methods, not the CONNECT method).|$|R
50|$|<b>HTTP</b> {{compression}} is asymmetric {{and transparent}} to the client. Support for <b>HTTP</b> compression {{is built into}} web servers and web browsers. All commercial ADN products currently support <b>HTTP</b> compression.|$|R
5000|$|Using <b>HTTP</b> {{pipelining}} or HTTP/2 {{instead of}} plain <b>HTTP</b> protocol ...|$|R
