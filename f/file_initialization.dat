0|49|Public
2500|$|Use <b>initialization</b> <b>file</b> mapping to nullify autorun.inf {{sections}} ...|$|R
50|$|Causes the <b>file</b> data <b>{{initialization}}</b> vector to {{be derived}} from the filename's initialization vector chain. The same data will be encrypted differently given a different filename or directory.|$|R
50|$|A {{separate}} configuration <b>file,</b> {{containing the}} <b>initialization</b> <b>file</b> for the monitor, is created for operation in monitor mode. Changing the operating mode from monitor to emulation or simulation mode will {{require that the}} real system be disconnected. Once the real system is disconnected, the model may be switched between simulation and emulation modes by enabling or disabling the internal control strategy.|$|R
5000|$|Do not {{automatically}} unset unless a switch is used (stored automatically in a mIRC <b>initialization</b> <b>file)</b> ...|$|R
50|$|Consequently, {{renaming}} a file {{when this}} mode is enabled requires {{that either the}} <b>file's</b> random <b>initialization</b> vector be offset by {{the change in the}} filename initialization vector chain, or the data be re-encoded. The authors of EncFS have chosen the former route as it is considerably faster, especially for large files.|$|R
50|$|Users can {{configure}} {{default actions}} or define key sequences for their editor by placing EDT commands in an <b>initialization</b> <b>file</b> which is executed upon starting the editor.|$|R
5000|$|The name [...] "INI file" [...] {{comes from}} the {{commonly}} used filename extension , which stands for [...] "initialization". Other common <b>initialization</b> <b>file</b> extensions are , , and , especially 'config.txt' occurrences.|$|R
50|$|Secondly we {{also need}} to develop a copy of Zend Framework. With the growth of complexity, {{additional}} code is required which will provide the functionality and that is relative small and focuses on the benefits of MVC system. If we look at the process in mode details we can observe the bootstrap <b>file</b> is <b>initialization</b> in one or another form.|$|R
50|$|To {{allow the}} target screens {{to be easily}} changed to provide {{additional}} challenges, the target locations and descriptions were read in from an <b>initialization</b> <b>file</b> when the MiniTSFO was started.|$|R
5000|$|Under Windows, the Profile API is the {{programming}} interface {{used to read}} and write settings from classic Windows [...]ini files. For example, the GetPrivateProfileString function retrieves a string from the specified section in an <b>initialization</b> <b>file.</b>|$|R
50|$|When Bash starts, it executes the {{commands}} {{in a variety}} of dot files. Though similar to Bash shell script commands, which have execute permission enabled and an interpreter directive like , the <b>initialization</b> <b>files</b> used by Bash require neither.|$|R
30|$|Initial conditions: The {{information}} about the zones in which the cells lie was provided through a comma separated values (CSV) file. The zones included 0 for cells not considered for any activity, 1 for the driveway, 2 for the excavation pit, 3 for the loading area of the excavator, and 4 for the trailer. Similarly, {{the positions of the}} excavator and corresponding loading area were also fed into the system through a CSV <b>file</b> during <b>initialization.</b>|$|R
30|$|The {{engine is}} {{programmed}} via a script (contain the entire program) enters a primitive compiler. The compiler outputs a (.hex and.mif) memory <b>initialization</b> <b>file</b> {{for the program}} memory. The output file containing the binary vector is downloaded into the program memory to begin the program fetching.|$|R
50|$|It is {{possible}} to exploit the I/O capabilities of the Preload JASS native (Commonly used to preload <b>files</b> during <b>initialization</b> to prevent in-game lag) to indirectly run code on a computer having certain builds of the Windows Operating System via writing batch files to the Startup folder. This exploit is rather limited however, as it requires a path, which is impossible to retrieve since reading environment variables is impossible. Despite the limitations, it {{is possible}} to use the Preload native along with its corresponding natives such as PreloadGenEnd to write files to a player's computer.|$|R
5000|$|One {{field for}} which DejaGnu is {{particularly}} well suited {{is that of}} embedded system design. It allows for testing to be done remotely on development boards; separate <b>initialization</b> <b>files</b> can be created for each operating system and board. This mainly focuses on embedded targets and remote hosts. DejaGnu is thus popular with many GNU projects, [...] at universities, and for private companies.|$|R
5000|$|<b>Initialization</b> <b>File</b> Mapping {{creates a}} mapping between an INI file and the Registry. It was {{introduced}} with Windows NT and Windows 95 {{as a way}} to migrate from storing settings in classic [...]ini files to the new Windows Registry. File mapping traps the Profile API calls and, using settings from the [...] Registry section, directs reads and writes to appropriate places in the Registry.|$|R
30|$|The runtime <b>file</b> {{contains}} an <b>initialization</b> procedure {{to notify the}} Trace Analyzer about all statically initialized variables (Step 3). It also contains operations to trap to the kernel to configure and enable Intel PT before the application starts execution (Step 4). During execution, the implemented primitives make Intel PT generate packets (Step 5 a). Intel PT writes the packets into a dedicated Trace Buffer in memory (Step 5 b).|$|R
30|$|In parallelization of K-means {{clustering}} algorithm, a <b>file</b> including <b>initialization</b> k cluster (s) {{center is}} created, {{and can be}} accessed by each machine in the cluster when it {{is placed on the}} HDFS. Obviously, the distance calculation between a data point and the k center and other data points and k center is independent of each other. Therefore, the distance calculation between different data points and k center can be performed in parallel in the MapReduce framework. In terms of research on parallel K-means clustering algorithm, there are many achievements, taking literatures [18, 19] for instance. In the paper, our designed parallelized K-means clustering algorithm mainly consists of Map function and Reduce function, with Combine operation being added after Map function.|$|R
5000|$|A code XML <b>file</b> has an <b>initialization</b> code block, scripts, and triggers. The {{language}} for code is either JavaScript or XQuery. The code flow model is {{unlike that of}} a procedural language (C++, Java, {{or any of the}} [...]NET languages). Sherlock uses triggers. There is a trigger queue that executes the bottom most trigger. This queue is first in first out. What makes this difficult is its non-linearity. Users can disrupt the flow by clicking elements of the interface.|$|R
5000|$|The end {{of message}} is {{indicated}} by hitting ctrl+d (and/or, dependent on the configuration settings, by writing a line consisting of a single '.'), causing the message to be passed asynchronously to the Mail transport agent. In order to send messages synchronously the [...] internal, POSIX-standardized variable sendwait has to be set, usually in the system-wide <b>initialization</b> <b>file</b> (usually /etc/mail.rc); dependent on the used [...] variant the (nonstandard) command-line option [...] can also be used, e.g., [...]|$|R
50|$|Besides the {{enhanced}} graphics and dispersion, several additional enhancements were made. The ship's location would move during {{the conduct of}} the fire mission and the user would see the pattern of rounds on the ground move along with the ship as its direction to the target shifted. The <b>initialization</b> <b>file</b> listed the direction, speed, and weapon type for each available firing platform. Also, the effects on the target would be judged on how close the rounds actually came to the target based on the caliber of the weapon.|$|R
40|$|Abstract?l$,X is {{implemented}} on various computer systems often {{with little or}} no consideration given to the time saving quality of an efficient editor. For both the novice and expert 'l$,X user, employing advanced EDT editor features greatly enhances the efficient use of m. Because there are volumes describing these various tools, it becomes necessary to reduce this vast amount of material to a manageable subset. This paper describes selected EDT features, such as editor <b>initialization</b> <b>files</b> and other commands which, when mastered by the user, enhance the editing power of w...|$|R
40|$|We {{continued}} developing assistant {{teaching materials}} for CAD/CAM education. In last year, we prepared many script programs {{to use for}} 3 D modeling, machine operation, custom M-code creation, and tool path generation by using both FreeCAD and Mach 3 CNC applications. In this report, we describe to prepare CAM learning environments by utilizing the LinuxCNC, which is a software system of the PC control for CNC machining. LinuxCNC is applications software of an open source working on Ubuntu, and has the hardware abstraction layer (HAL) {{that allows us to}} develop many kinds of milling topics or machine control. The configuration <b>file</b> for <b>initialization</b> and setting of the hardware was made for adapting the mini-CNC milling machine. PID control teaching materials for the DC motors are also prepared for fine positioning by applying the digital PID control with LinuxCNC. Both virtual five-axis milling machine and virtual robotic machine will be operated easily to understand the forward and inverse kinematics...|$|R
40|$|Ada Namelist Package, {{developed}} for Ada programming language, enables calling program {{to read and}} write FORTRAN-style namelist files. Features are: handling of any combination of types defined by user; ability to read vectors, matrices, and slices of vectors and matrices; handling of mismatches between variables in namelist file and those in programmed list of namelist variables; and ability to avoid searching entire input file for each variable. Principle benefits derived by user: ability {{to read and write}} namelist-readable files, ability to detect most <b>file</b> errors in <b>initialization</b> phase, and organization keeping number of instantiated units to few packages rather than to many subprograms...|$|R
40|$|The Simple Virtual Environments (SVE) C library {{provides}} a framework {{for the development of}} virtual environment (VE) applications. The library provides the default components of simple VE applications (such as fly-throughs), allowing these applications to be quickly implemented, and allows applications to selectively alter, enhance, or replace components such as user interactions, animations, rendering, and input device polling. The library also allows the hardware and software configuration (devices used and placement in the workspace, location of remote servers, directories, etc.) to be given at run-time using an <b>initialization</b> <b>file.</b> Therefore, SVE provides support for rapid prototyping as well as complete implementation of simple and complex VE applications...|$|R
40|$|To tackle this, the BiGCaT {{department}} of bioinformatics at Maastricht University, proposed an automated, well-documented and user-friendly pipeline the affyanalysisQC workflow {{which is called}} by the www. arrayanalysis. org server. The existing workflow allows for the quality control (QC) and preprocessing (normalisation) of Affymetrix microarray gene expression data sets. The code called by the webform can alternatively be run locally in R by setting few parameters in an <b>initialization</b> <b>file.</b> However the functionality offered by the affyanalysisQC needs to be extended for statistical analysis of normalized data and visualizing genes of interest on pathways for biological evaluation of the data. The presentation illustrates {{the extension of the}} pipeline by adding automated statistical analysis and biological evaluation modules to affyanalysisQC. |$|R
40|$|Described is {{a dynamic}} {{simulation}} package which can be configured for orbital test scenarios involving multiple bodies. The rotational and translational state integration methods are selectable for each individual body and may be changed during a run if necessary. Characteristics of the bodies are determined by assigning components consisting of mass properties, forces, and moments, which are the outputs of user-defined environmental models. Generic model implementation is facilitated by a transformation processor which performs coordinate frame inversions. Transformations are defined in the <b>initialization</b> <b>file</b> {{as part of the}} simulation configuration. The simulation package includes an initialization processor, which consists of a command line preprocessor, a general purpose grammar, and a syntax scanner. These permit specifications of the bodies, their interrelationships, and their initial states in a format that is not dependent on a particular test scenario...|$|R
40|$|The heterogeneity, {{increasing}} {{size and}} complexity of distributed systems impedes management strategies that deal with {{the system as a}} coherent entity. In this article we describe an experimental study with a comprehensive and partially automated approach to distributed systems management. In our distributed environmentmanagementpolicies are represented by rules. Interpretation of the rules and automated activation of appropriate management tools delegated to the processcentered software development environment Marvel. Rule chaining is supported in forward and backward direction. The encapsulation feature of Marvel allows an easy integration of prefabricated management tools. Monitoring and event creation is provided by generic monitoring agents. The behavior of an agent is completely controlled by an <b>initialization</b> <b>file</b> and via invocations at its management interface. ANSAware is used as distributed platform for the implementation of the generic smart agent concept. Short title: Rule [...] ...|$|R
5000|$|The IIGS System Software can be {{extended}} through various mechanisms. New Desk Accessories are small programs ranging from a calculator to simple word processors {{that can be used}} while running any standard desktop application. Classic Desk Accessories also serve as small programs available while running other applications, but they use the text screen and can be accessed even from non-desktop applications. Control Panels and <b>initialization</b> <b>files</b> are other mechanisms that allow various functions {{to be added to the}} system. Finder Extras permits new capabilities to be added to the Finder, drivers can be used to support new hardware devices, and users can also add [...] "tools" [...] that provide various functions that other programs can utilize easily. These features can be used to provide features that were never planned for by the system's designers, such as a TCP/IP stack known as [...] "Marinetti".|$|R
40|$|The {{purpose of}} this work was {{realization}} and implementation of two applications {{for the management of}} Radio Data System (RDS) messages. These applications will be subsequently used in the Czech Radio Ostrava to support two RDS services, namely the Traffic - Announcement Identification and Radiotext. Both applications are secured against unauthorized use by incompetent users through a password - protected access, access rights and encryption of passwords in <b>initialization</b> <b>files.</b> The text of this work is divided into three parts. The first describes the system RDS and services provided by it and implementation of RDS in the Czech Radio Ostrava. The second part deals with the realization of both applications and the last part describes the implementation itself. The work shows all applications windows. Work also includes all the flow charts. The list of all broken down by subroutines is given in the appendix...|$|R
5000|$|Most Windows {{applications}} still {{store their}} user settings in individual [...]ini (<b>initialization)</b> <b>files</b> {{spread across the}} disk. They additionally use the Windows Registry to store information which might be of interest for other software. For such programs the Windows Registry acts rather as a bulletin board, then as a user settings system. When such an application is removed (uninstalled), it is also rather the default then the exception, that its registry entries are not being purged and remain in the database. The Windows Registry is rather extensive and with time {{becomes more and more}} bloated. Without the user knowing exactly what to look for, a simple search can be compared to finding the [...] "needle in a haystack." [...] Therefore, with regards to purpose and volume, dconf cannot be compared to the Windows Registry. In fact the only commonality between dconf and the Windows Registry is the usage of a database.|$|R
40|$|The {{purpose of}} the Supervisor in an Extended Data Management Facility (EDMF) is to direct the Facility 2 ̆ 7 s {{handling}} of a user 2 ̆ 7 s request for service. The Supervisor fulfills its task {{through the use of}} five main functions: Access Control, Retrieval <b>Initialization,</b> <b>File</b> Searching, Record Validating and Record Formatting. The major and most important component of the Retrieval Initialization phase is the Retrieval Optimization subfunction. This report is concerned mainly with the design and implementation of the Access Control and Retrieval Optimization functions. Macro instructions are the mechanism through which a user 2 ̆ 7 s program can call upon the ECMF. The Authority Item check is the EDMF 2 ̆ 7 s security control over file access while the Prime Keyword Search is the method used to optimize the retrieval strategy. The Authority Item check and the Prime Keyword Search are two of the major concepts of the Extended Data Management Facility...|$|R
40|$|ABSTRACT: GELATIO {{is a new}} {{software}} framework for advanced data analysis and digital signal processing developed for the GERDA neutrinoless double beta decay experiment. The framework is tailored to handle the full analysis flow of signals recorded by high purity Ge detectors and photo-multipliers from the veto counters. It is designed to support a multi-channel modular and flexible analysis, widely customizable by the user either via human-readable <b>initialization</b> <b>files</b> or via a graphical interface. The framework organizes the data into a multi-level structure, from the raw data up to the condensed analysis parameters, and includes tools and utilities to handle the data stream between the different levels. GELATIO is implemented in C++. It relies upon ROOT and its extension TAM, which provides compatibility with PROOF, enabling the software to run in parallel on clusters of computers or many-core machines. It was tested on different platforms and benchmarked in several GERDA-related applications. A stable version is presently available for the GERDA Collaboration and {{it is used to}} provide the reference analysis of the experiment data...|$|R
40|$|GELATIO {{is a new}} {{software}} framework for advanced data analysis and digital signal processing developed for the GERDA neutrinoless double beta decay experiment. The framework is tailored to handle the full analysis flow of signals recorded by high purity Ge detectors and photo-multipliers from the veto counters. It is designed to support a multi-channel modular and flexible analysis, widely customizable by the user either via human-readable <b>initialization</b> <b>files</b> or via a graphical interface. The framework organizes the data into a multi-level structure, from the raw data up to the condensed analysis parameters, and includes tools and utilities to handle the data stream between the different levels. GELATIO is implemented in C++. It relies upon ROOT and its extension TAM, which provides compatibility with PROOF, enabling the software to run in parallel on clusters of computers or many-core machines. It was tested on different platforms and benchmarked in several GERDA-related applications. A stable version is presently available for the GERDA Collaboration and {{it is used to}} provide the reference analysis of the experiment data. Comment: 12 pages, 6 figures, submitted to JINS...|$|R
40|$|The {{project has}} had the object of test and {{characterization}} of the OBRA 5282 modulo, including the Freescale MCF 5282 microcontroller. Special focus {{has been given to}} the modules that may be used in the Ocean Bottom Seismometer (OBS) project at the SARTI center. A working environment for developing COBRA programs has been established using Metrowerks Codewarrior for Coldfire 6. 1 IDE. This includes linker command file, configuration files for Background Debugging Mode (BDM) operation and system <b>initialization</b> <b>files.</b> The systems interrupt controller has been tested, and in particular externally driven interrupts. Edge-triggered interrupts driven by anexternal generator were implemented and tested. An application for using the on-board Real Time Clock (RTC) has been made and tested. Interrupt-driven reads form the RTC has been successfully implemented. The COBRA 5282 boards QSPI interface has been tested, after making the necessary subroutines for initialization and setting up transfers. The QSPI module was connected to the acquisition board of the OBS project, and transferred and received data as expected. The project has resulted in a collection of functioning applications that may be used when finally implementing the full OBS software on the COBRA 5282 board...|$|R
50|$|The {{system control}} {{strategy}} now exists in two places, {{in the model}} and in the PLC. The source of the system control strategy can be selected using the OPERATING_MODE variable in the configuration file.The control strategy in the model is implemented using as asynchronous activity. A conditional is used {{as part of the}} activation conditions in all asynchronous activity entries used strictly for simulation mode. This enables the execution of the system control strategy in simulation mode and disables it in emulation mode. Two different configuration files are set up, one for each mode, to set the <b>initialization</b> <b>file,</b> operating mode, and other configuration differences between the modes.Running the real time simulator with the simulation mode configuration file causes the model to operate as a simulation. Running the real time simulator with the emulation mode configuration file runs the model as an emulation. The simulation runs with the internal system control strategy and disables the external connection to the PLC. Running in emulation mode disables the internal control strategy, and enables the interface to the PLC which supplies the external control strategy. The physical components of the real system are required for monitor mode.|$|R
