24|29|Public
2500|$|Changes to {{data types}} {{to be more}} like SQL Server's (LongText or Memo; Binary; LongBinary; Date/Time; Real; Float4; IEEESingle; Double; Byte or Tinyint; Integer or Integer {{synonyms}} Smallint, Integer2, and Short; LongInteger or LongInteger synonyms Int, Integer, and Counter; Currency or Money; Boolean and GUID); a new <b>decimal</b> <b>data</b> type ...|$|E
5000|$|PL/I {{natively}} supports both fixed-point and floating-point <b>decimal</b> <b>data.</b>|$|E
5000|$|IEEE 754 {{specifies}} three standard floating-point <b>decimal</b> <b>data</b> {{types of}} different precision: ...|$|E
5000|$|The {{effect can}} be {{demonstrated}} with decimal numbers.The following example demonstrates loss of significance for a <b>decimal</b> floating-point <b>data</b> type with 10 significant digits: ...|$|R
5000|$|... {{arithmetic}} formats: sets of binary and <b>decimal</b> floating-point <b>data,</b> which {{consist of}} finite numbers (including signed zeros and subnormal numbers), infinities, and special [...] "not a number" [...] values (NaNs) ...|$|R
5000|$|... : similarly, size {{of input}} <b>data</b> (<b>decimal,</b> in octets) if {{provided}} via HTTP header.|$|R
50|$|The 1130 {{supported}} only single-precision and double-precision {{binary data}} natively (16 and 32 bits) stored in big-endian format. Standard- and extended-precision floating-point (32 and 48 bits) and <b>decimal</b> <b>data</b> were supported {{through the use}} of subroutines.|$|E
50|$|With the {{introduction}} of System/360, IBM expanded 6-bit BCD alphamerics to 8-bit EBCDIC, allowing the addition of many more characters (e.g., lowercase letters). A variable length Packed BCD numeric data type is also implemented, providing machine instructions that perform arithmetic directly on packed <b>decimal</b> <b>data.</b>|$|E
5000|$|Some {{programming}} languages (or compilers for them) {{provide a}} built-in (primitive) or library <b>decimal</b> <b>data</b> type to represent non-repeating decimal fractions like 0.3 and -1.17 without rounding, {{and to do}} arithmetic on them. Examples are the [...] type of Python, and analogous types provided by other languages.|$|E
50|$|A Pick {{database}} has no data typing {{since all}} data is stored as characters, including numbers (which are stored as character <b>decimal</b> digits). <b>Data</b> integrity, {{rather than being}} controlled by the system, {{is controlled by the}} applications and the discipline of the programmers. Because a logical document in Pick is not fragmented (as it would be in SQL), intra-record integrity is automatic.|$|R
5000|$|Questions {{that are}} {{frequently}} asked in this exam are fractions, subtraction, multiplication, division, addition, area and volume, mass, perimeter, <b>decimal</b> points, average, <b>data,</b> digit numbers, percentage, money, time, date and [...]|$|R
50|$|The IBM 355 was {{announced}} on September 14, 1956 as {{an addition to}} the popular IBM 650. It used the mechanism of the IBM 350 with three access arms and stored 6 million <b>decimal</b> digits. <b>Data</b> was transferred {{to and from the}} IBM 653 magnetic core memory, an IBM 650 option that stored just sixty 10-digit words, enough for a single sector of disk or tape data.|$|R
5000|$|Changes to {{data types}} {{to be more}} like SQL Server's (LongText or Memo; Binary; LongBinary; Date/Time; Real; Float4; IEEESingle; Double; Byte or Tinyint; Integer or Integer {{synonyms}} Smallint, Integer2, and Short; LongInteger or LongInteger synonyms Int, Integer, and Counter; Currency or Money; Boolean and GUID); a new <b>decimal</b> <b>data</b> type ...|$|E
50|$|A <b>decimal</b> <b>data</b> type {{could be}} {{implemented}} {{as either a}} floating-point number or as a fixed-point number. In the fixed-point case, the denominator would be set to a fixed power of ten. In the floating-point case, a variable exponent would represent the power of ten to which the mantissa of the number is multiplied.|$|E
50|$|The decimal {{arithmetic}} feature provides {{instructions that}} operate on packed <b>decimal</b> <b>data.</b> A packed decimal number has 1-31 decimal digits {{followed by a}} 4-bit sign. All of the decimal arithmetic instructions except PACK and UNPACK generate a Data exception if a digit {{is not in the}} range 0-9 or a sign is not in the range A-F.|$|E
50|$|Some {{computer}} languages have implementations of decimal floating-point arithmetic, including PL/I, Java {{with big}} decimal, emacs with calc, and Python's decimal module.In 1987, the IEEE released IEEE 854, {{a standard for}} computing with decimal floating point, which lacked a specification for how floating-point data should be encoded for interchange with other systems. This was subsequently addressed in IEEE 754-2008, which standardized the encoding of <b>decimal</b> floating-point <b>data,</b> albeit with two different alternative methods.|$|R
40|$|Combination "Design Series Basic Input With PPI 8255 Intermediary Language Using C", {{a series}} {{composed}} of PCs, interface 8255, {{and a series}} of basic input modules that are interconnected with one another. 8255 PPI serves to mediate between the computer with the Combination the basic inputs. Combination of this function to enter data in the form of binary numbers and then output the results can be viewed on a computer screen in the form of <b>decimals.</b> For <b>data</b> processing in this circuit using the language C...|$|R
50|$|IBM 7070 was a <b>decimal</b> {{architecture}} intermediate <b>data</b> {{processing system}} that was introduced by IBM in 1958. It {{was part of the}} IBM 700/7000 series, and was based on discrete transistors rather than the vacuum tubes of the 1950s. It was the company's first transistorized stored-program computer.|$|R
50|$|A {{common use}} of fixed-point BCD numbers is for storing {{monetary}} values, where the inexact values of binary floating-point numbers {{are often a}} liability. Historically, fixed-point representations were the norm for <b>decimal</b> <b>data</b> types; for example, in PL/I or COBOL. The Ada programming language includes built-in support for both fixed-point (binary and decimal) and floating-point. JOVIAL and Coral 66 also provide both floating- and fixed-point types.|$|E
50|$|Although Excel {{nominally}} {{works with}} 8-byte numbers by default, VBA has {{a variety of}} data types. The Double data type is 8 bytes, the Integer data type is 2 bytes, and the general purpose 16 byte Variant data type can be converted to a 12 byte <b>Decimal</b> <b>data</b> type using the VBA conversion function CDec. Choice of variable types in a VBA calculation involves consideration of storage requirements, accuracy and speed.|$|E
50|$|Several {{microprocessor}} families offer limited decimal support. For example, the 80x86 {{family of}} microprocessors provide instructions to convert one-byte BCD numbers (packed and unpacked) to binary format {{before or after}} arithmetic operations. These operations were not extended to wider formats and hence are now slower than using 32-bit or wider BCD 'tricks' to compute in BCD (see http://www.cs.uiowa.edu/~jones/bcd/bcd.html). The x87 FPU has instructions to convert 10-byte (18 decimal digits) packed <b>decimal</b> <b>data,</b> although it then operates on them as floating-point numbers.|$|E
40|$|DwC 2 Map script : Explanation note: The script {{reads the}} <b>decimal</b> GPS <b>data</b> from our DwC Excel file {{and creates a}} dataframe with all {{observations}} for each species. In the next step it allows to construct the maps of the area from freely available on-line data and map the occurrences of thes species on these maps. The maps in Figs 15 – 16 were generated using this script. The script is available in Suppl. material 4 as a zip archive containing an R script, a PDF rendering and an HTML rendering...|$|R
50|$|Sperry Rand began {{shipment}} of UNIVAC III in 1962, and produced 96 UNIVAC III systems. Unlike the UNIVAC I and UNIVAC II, however, {{it was a}} binary machine as well as maintaining support for all UNIVAC I and UNIVAC II <b>decimal</b> and alphanumeric <b>data</b> formats for backward compatibility. This {{was the last of}} the original UNIVAC machines.|$|R
5000|$|Sony {{introduced}} its own floptical-like system in 1997 as the [...] "150 MB Sony HiFD" [...] which was originally supposed to hold 150 MB (157.3 <b>decimal</b> megabytes) of <b>data.</b> Although {{by this time}} the LS-120 had already garnered some market penetration, industry observers nevertheless confidently predicted the HiFD would be the real standard-floppy-killer and finally replace standard floppies in all machines.|$|R
50|$|The top two {{positions}} of a column are called zone punches, 12 (top) and 11. For <b>decimal</b> <b>data</b> the lower ten positions represent (from top to bottom) the digits 0 through 9. An arithmetic sign {{can be specified}} for a decimal field by overpunching the field's rightmost column with a zone punch: 12 for plus, 11 for minus (CR). For Pound sterling pre-decimalization currency a pence column represented the values zero through eleven; 10 (top), 11, then 0 through 9 as above. An arithmetic sign can be punched in the adjacent shilling column. Zone punches had other uses in processing, such as indicating a master card.|$|E
50|$|They {{operated}} {{directly on}} COBOL-68's primary <b>decimal</b> <b>data</b> types: strings {{of up to}} 100 digits, with one EBCDIC or ASCII digit character or two 4-bit binary-coded decimal BCD digits per byte. Portable COBOL programs did not use binary integers at all, so the B2500 did not either, not even for memory addresses. Memory was addressed down to the 4-bit digit in big-endian style, using 5-digit decimal addresses. Floating point numbers also used base 10 rather than some binary base, and had up to 100 mantissa digits. A typical COBOL statement 'ADD A, B GIVING C' may use operands of different lengths, different digit representations, and different sign representations. This statement compiled into a single 12-byte instruction with 3 memory operands.|$|E
40|$|Binary Coded Decimal (BCD) {{in which}} four bits {{are used for}} each decimal digit is a widely used {{encoding}} for <b>decimal</b> <b>data.</b> Decimal arithmetic and shifting are simplified by using operands in this form, and both rounding to a specified number of digits and conversions to or from characters are trivial. For the storage and simple manipulation of <b>decimal</b> <b>data,</b> BCD remains an appropriate encoding to use. In some situations, however, a more compact representation offers significant advantages. Decimal floating-point numbers in a compact form {{can be used to}} implement the requirements of the IEEE 854 standard and meet the increasing demands for decimal arithmetic in applications. An efficient encoding scheme for <b>decimal</b> <b>data</b> is described by Chen and Ho. Chen Ho encoding is a lossless compression of three decimal digits coded in BCD into 10 bits using an algorithm which can be applied or reversed using only simple Boolean operations. Densely Packed Decimal (DPD) is an refinement of the Chen ho encoding. It gives the same compression and speed advantages but is not limited to multiples of three digits. The DPD encoding allows arbitrary-length decimal numbers to be coded efficiently while keeping decimal digit boundaries accessible. This results in efficient decimal arithmetic and makes the efficient and optimized use of available resources such as storage or hardware registers. This thesis embodies the work done to implement the Densely Packed Decimal (DPD) encoding on hardware using digilent board containing VIRTEX-II Pro FPGA...|$|E
40|$|The aim of {{this study}} is to {{identify}} misconceptions of nine grade students on the topic of repeating <b>decimal</b> numbers. <b>Data</b> were obtained from forty students through “Diagnostic Test of Repeating Decimal Numbers” including open-ended questions. Questions were prepared according to the classification of misconceptions as overgeneralization, overspecialization, mistranslation and limited conception. As a part of rational numbers unit the topic of “representation of repeating decimals” is introduced at 6, 7, 8 and 9 grades in our schools. In spite of this, findings of this study illustrate that even nine grade students still have some common misconceptions about this topic. Findings illustrated that most students’ misconceptions were based on overgeneralization. In addition to this students also shared the other categories of misconceptions as well. Key Words:    Decimals, repeating decimals, misconceptions</p...|$|R
5000|$|Arrays of {{the above}} types were allowed with up to 7 dimensions, but no {{functions}} or operators worked on arrays; for example, there was no assignment of arrays. Unlike some other BASIC implementations of the time, MBASIC did not provide support for matrix operations, complex numbers, or a <b>decimal</b> (BCD) <b>data</b> type for financial calculations. All floating point operations were carried out in software since typical CP/M systems did not have floating point hardware. The built-in mathematics functions (sine, cosine, tangent, natural log, exponential, square root) only gave single precision results. A software pseudorandom number generator was provided; this relied on the user to key in a seed number to obtain a sequence of numbers useful for games and some simulations. MBASIC permitted but did not require the [...] keyword for assignment statements.|$|R
40|$|AbstractWe {{describe}} a simple package of Matlab programs which implements an extended-precision class in Matlab. We give {{some examples of}} how this class {{can be used to}} demonstrate the effects of rounding errors and truncation errors in scientific computing. The package is based on a representation called Double-Double, which represents each floating-point real as an unevalu- ated sum of IEEE double-precision floating point numbers. This allows Matlab computations that are accurate to 30 <b>decimal</b> digits. The <b>data</b> structure, basic arithmetic and elementary functions are implemented as a Matlab class, entirely using the Matlab programming language...|$|R
40|$|Nowadays, Decimal {{arithmetic}} {{is increasing}} in recent years, hence growth in <b>decimal</b> <b>data</b> processing systems like in all commercial, financial and internet based applications. Power reduction is one among the parameter plays {{a vital role}} in VLSI industry. Hence, In this paper, a BCD adder is reconfigured {{in order to reduce the}} power. This work concentrates on 14 -T(Transistors) full adder circuits is used in BCD adder. This work evaluates the performances of power and delay of BCD adder compared with conventional BCD adder using 50 nm technology...|$|E
40|$|The risk {{of product}} loss can be {{minimized}} by mathematical model of predictive {{success or failure}} of a product at the early design stage. Model is build from 30 graphics of strategy canvas industries. Canvas strategy contains success factors product overview. This research starts with standardise canvas intervaland factor successdescription. Next step is factors succesclasification, based on functionalemotional product orientation. The result of it are 66 data sets. Data set are constructed based on value innovation concept. Every data set consist ofone price factor, one innovation factor and one factor of succes indicator. The Mathematical model from desimal data obtained by Ordinary LeastSquare (OLS) estimation parameter method. Binary data obtained by Maximum Likelihood Estimator (MLE). Mathematical model selection base onmodel and coeficient significant (α= 0. 05). While model significances <b>decimal</b> <b>data</b> are then validated by One Way Analysis of Variance (ANOVA), binary data validated by Hosmer and Lemeshow analysis to testgoodness of fit of the model. Coefficient of significances are tested with t and wald statistic. Finally, mathematical model required is derived from prediction capability relied on R squareAdjusted for <b>decimal</b> <b>data</b> and R square Nagelkerke analysis for binary data. The result of this research is model with prediction capability up to 70 %. Thereare three models developed, new emotional model with 74. 1 % predictioncapability, functional velocity model (73. 1 %), and functional capability (70. 8 %) ...|$|E
40|$|The {{prominence}} of <b>decimal</b> <b>data</b> in commercial and financial applications has led researchers to pursue efficient techniques for performing decimal floating-point arithmetic. While several software implementations of decimal floating-point arithmetic have been implemented, {{there is a}} growing need to provide hardware support for decimal floating-point arithmetic {{to keep up with the}} processing demands of emerging commercial and financial applications. This paper evaluates and compares the performance of decimal floating-point arithmetic operations when implemented on superscalar processors using either software libraries or specialized hardware designs. Our comparisons show that hardware implementations of decimal floating-point arithmetic operations are one to two orders of magnitude faster than software implementations. 1...|$|E
40|$|Decimal {{floating}} point operations {{are important for}} applications that cannot tolerate errors from conversions between binary and decimal formats, for instance, commercial, financial, and insurance applications. In this paper we present five different radix- 10 digit recurrence dividers for FPGA architectures. The first one implements a simple restoring shift-and-subtract algorithm, whereas {{each of the other}} four implementations performs a nonrestoring digit recurrence algorithm with signed-digit redundant quotient calculation and carry-save representation of the residuals. More precisely, the quotient digit selection function of the second divider is implemented fully by means of a ROM, the quotient digit selection function of the third and fourth dividers are based on carry-propagate adders, and the fifth divider decomposes each digit into three components and requires neither a ROM nor a multiplexer. Furthermore, the fixed-point divider is extended to support IEEE 754 - 2008 compliant decimal floating-point division for <b>decimal</b> 64 <b>data</b> format. Finally, the algorithms have been synthesized on a Xilinx Virtex- 5 FPGA, and implementation results are given...|$|R
40|$|Decimal Floating Point {{operations}} {{are important for}} applications that cannot tolerate errors from conversions between binary and decimal formats, for instance, commercial, financial, and insurance applications. In this paper, we present a parallel decimal fixed-point multiplier designed to exploit the features of Virtex- 5 FPGAs. Our multiplier is based on BCD recoding schemes, fast partial product generation, and a BCD- 4221 carry save adder reduction tree. Pipeline stages {{can be added to}} target low latency. Furthermore, we extend the multiplier with an accurate scalar product unit for IEEE 754 - 2008 <b>decimal</b> 64 <b>data</b> format in order to provide an important operation with least possible rounding error. Compared to a previously published work, in this paper, we improve the architecture of the accurate scalar product unit and migrate to Virtex- 5 FPGAs. This decreases the fixed-point multiplier's latency by a factor of two and the accurate scalar product unit's latency even by a factor of five...|$|R
40|$|The aim of {{the study}} {{reported}} here was to examine the quality of understandings developed by young children in the area of fractions and <b>decimals.</b> Analysis of <b>data</b> showed that the existence of great disparity in Year 3 children 2 ̆ 7 s knowledge base of fractions. We discuss these results in light of levels of competence that are expected in K- 6 curriculum documents and with reference to past research on students 2 ̆ 7 knowledge of fractions. The results of this small study raise doubts about the progress being made in the teaching of fractions...|$|R
