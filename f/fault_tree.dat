1506|449|Public
5|$|The {{project was}} {{designed}} {{with a new}} methodology called <b>fault</b> <b>tree</b> analysis, which allowed {{the effects of a}} failure of a single part to be studied to determine its impact on other systems. To address concerns about safety and flyability, the 747's design included structural redundancy, redundant hydraulic systems, quadruple main landing gear and dual control surfaces. Additionally, some of the most advanced high-lift devices used in the industry were included in the new design, to allow it to operate from existing airports. These included slats running almost {{the entire length of the}} wing, as well as complex three-part slotted flaps along the trailing edge of the wing. The wing's complex three-part flaps increase wing area by 21 percent and lift by 90 percent when fully deployed compared to their non-deployed configuration.|$|E
25|$|Attack {{trees are}} related to the {{established}} <b>fault</b> <b>tree</b> formalism. <b>Fault</b> <b>tree</b> methodology employs boolean expressions to gate conditions when parent nodes are satisfied by leaf nodes. By including a priori probabilities with each node, it is possible to perform calculate probabilities with higher nodes using Bayes Rule. However, in reality accurate probability estimates are either unavailable or too expensive to gather. With respect to computer security with active participants (i.e., attackers), the probability distribution of events are probably not independent nor uniformly distributed, hence, naive Bayesian analysis is unsuitable.|$|E
25|$|Reliability {{engineering}} is {{the discipline of}} ensuring a system meets customer expectations for reliability throughout its life; i.e., it does not fail more frequently than expected. Next to prediction of failure {{it is just as}} much about prevention of failure. Reliability engineering applies to all aspects of the system. It is closely associated with maintainability, availability (dependability or RAMS preferred by some), and logistics engineering. Reliability {{engineering is}} always a critical component of safety engineering, as in failure modes and effects analysis (FMEA) and hazard <b>fault</b> <b>tree</b> analysis, and of security engineering.|$|E
30|$|<b>Fault</b> <b>Trees.</b> <b>Fault</b> <b>Trees</b> {{are another}} {{formalism}} for reliability analysis. The system is {{represented as a}} tree of inter-related components. If a component fails, it assumes the logical value true, and the failure propagation can be studied via the tree structure. In cloud computing, <b>Fault</b> <b>Trees</b> {{have been used to}} evaluate dependencies of cloud services and their effect on application reliability [73]. <b>Fault</b> <b>Trees</b> and Markov models are used to evaluate the reliability and availability of fault tolerance mechanisms. Jhawar and Piuri [74] uses <b>Fault</b> <b>Trees</b> and Markov models to evaluate the reliability and availability of a cloud system under different deployment contexts. Based on this evaluation, the authors propose an approach to identify the best mechanisms according to user’s requirements. Kiran et al. [75] presents a methodology to identify, mitigate, and monitor risks in cloud resource provisioning. <b>Fault</b> <b>Trees</b> are used to assess the probability of SLA violations.|$|R
40|$|This paper {{introduces}} {{an analysis}} method of coherent {{as well as}} noncoherent <b>fault</b> <b>trees</b> that overcomes this limitation because its computational cost is related to neither the number of basic events, nor the number of gates, nor the number of prime implicants of these trees. We present the concepts underlying the prototype tool METAPRIME, and the experimental results obtained with this tool on real life <b>fault</b> <b>trees.</b> These results show that these concepts allow us to completely analyse in seconds <b>fault</b> <b>trees</b> that no previously available technique could ever partially analyse, for instance noncoherent <b>fault</b> <b>trees</b> with more than 1...|$|R
40|$|The manual {{construction}} of <b>fault</b> <b>trees</b> for complex systems is an error-prone and time-consuming activity, encouraging automated techniques. In this paper we {{show how the}} retrenchment approach to formal system model evolution can be developed into a versatile structured approach for the mechanical {{construction of}} <b>fault</b> <b>trees.</b> The system structure {{and the structure of}} retrenchment concessions interact to generate <b>fault</b> <b>trees</b> with appropriately deep nesting. The same interactions fuel a structural approach to hierarchical <b>fault</b> <b>trees,</b> allowing a system and its faults to be viewed at multiple levels of abstraction. We show how this approach can be extended to deal with minimisation, thereby diminishing the post-hoc subsumption workload and potentially rendering some infeasible cases feasible...|$|R
2500|$|Since the Bayesian {{analytic}} {{techniques used}} in <b>fault</b> <b>tree</b> analysis cannot legitimately {{be applied to}} attack trees, analysts instead use other techniques to determine which attacks will be preferred by a particular attacker. [...] These may involve comparing the attacker's capabilities (time, money, skill, equipment) with the resource requirements of the specified attack. [...] Attacks which are near or beyond the attacker's ability to perform are less preferred than attacks that are perceived as cheap and easy. The degree to which an attack satisfies the adversary's objectives also affects the attacker's choices. [...] Attacks that are both within the adversary's capabilities, and which satisfy their goals, {{are more likely than}} those that do not.|$|E
5000|$|After {{selecting}} the undesired event and having analyzed the {{system so that}} we know all the causing effects (and if possible their probabilities) we can now construct the <b>fault</b> <b>tree.</b> <b>Fault</b> <b>tree</b> is based on AND and OR gates which define the major characteristics of the <b>fault</b> <b>tree.</b>|$|E
50|$|SAPHIRE {{has been}} {{designed}} to handle large fault trees, where a tree may have up to 64,000 basic events and gates. To handle the fault trees, two mechanisms for developing and modifying the <b>fault</b> <b>tree</b> are available - a graphical editor and a hierarchical logic editor. Analysts may use either editor; if the logic is modified SAPHIRE can redraw the <b>fault</b> <b>tree</b> graphic. Conversely, if the user modifies the <b>fault</b> <b>tree</b> graphic, SAPHIRE automatically updates the associated logic. Applicable objects available in the <b>fault</b> <b>tree</b> editors include basic events and several gate types, including: OR, AND, NOR, NAND, and N-of-M. In addition to these objects, SAPHIRE has a unique feature known as “table events” that allows the user to group up to eight basic events together on the <b>fault</b> <b>tree</b> graphic, thereby compacting the size of the <b>fault</b> <b>tree</b> on the printed page or computer screen. All of these objects though represent traditional static-type Boolean logic models. Models explicitly capturing dynamic or time-dependent situations are not available in current versions of SAPHIRE.|$|E
40|$|Abstract. Safety-critical {{systems are}} subject to {{rigorous}} safety analyses, e. g., hazard analyses. <b>Fault</b> <b>trees</b> are a deductive technique to derive the combination of faults which cause a hazard. There is a tight relationship between <b>fault</b> <b>trees</b> and system architecture as the components contain the faults and the component structure influences the fault combinations. In this paper, we describe an explorative case study on multiple evolution scenarios of a factory automation system. We report on the evolution steps on the system architecture models and <b>fault</b> <b>trees</b> and how the evolution steps in the different models relate to each other. ...|$|R
40|$|Abstract. For large systems, {{the manual}} {{construction}} of <b>fault</b> <b>trees</b> is errorprone, encouraging automated techniques. In this paper we {{show how the}} retrenchment approach to formal system model evolution can be developed into a versatile structured approach for the mechanical construction of <b>fault</b> <b>trees.</b> The system structure {{and the structure of}} retrenchment concessions interact to generate <b>fault</b> <b>trees</b> with appropriately deep nesting. The same interactions fuel a structural approach to hierarchical <b>fault</b> <b>trees,</b> allowing a system and its faults to be viewed at multiple levels of abstraction. We show how this approach can be extended to deal with minimisation, thereby diminishing the post-hoc subsumption workload and potentially rendering some infeasible cases feasible. The techniques we describe readily generalise to encompass timing, allowing glitches and other transient errors to be properly described. Lastly, a mild generalisation to cope with cyclic system descriptions allows the timed theory to encompass systems with feedback. ...|$|R
40|$|This paper {{presents}} constant propagation {{and common}} factors rewriting methods for boolean formula preprocessing. Formula rewriting performs symbolic simplification, {{and attempts to}} reconstitute hidden structure in the model that was lost by the conversion to a boolean formula. We show examples of <b>fault</b> <b>trees</b> whose assessment becomes feasible only after this kind of preprocessing. 1 INTRODUCTION <b>Fault</b> <b>trees</b> are widely used for safety analysis. In this context <b>fault</b> <b>trees</b> are treated as boolean formulae. The major problem of their assessment is combinatorial explosion in time and space. Binary Decision Diagrams (BDD) are the state-of-the-art compact representation for boolean formulae (Bryant, 1986; Rauzy, 1997). By limiting combinatorial growth, this representation makes possible the assessment of complex <b>fault</b> <b>trees,</b> both qualitatively by minimal cutset search and quantitatively by exact calculation of top event probability. In this paper we focus on a new method that enables the [...] ...|$|R
5000|$|In aerospace, {{the more}} general term [...] "system Failure Condition" [...] {{is used for the}} [...] "undesired state" [...] / Top event of the <b>fault</b> <b>tree.</b> These {{conditions}} are classified by the severity of their effects. The most severe conditions require the most extensive <b>fault</b> <b>tree</b> analysis. These [...] "system Failure Conditions" [...] and their classification are often previously determined in the functional Hazard analysis.|$|E
50|$|Dichotomic {{searches}} {{are often}} used in repair manuals, sometimes graphically illustrated with a flowchart similar to a <b>fault</b> <b>tree.</b>|$|E
50|$|Obtain event failure probabilities: If {{the failure}} {{probability}} {{can not be}} obtained use <b>fault</b> <b>tree</b> analysis to calculate it.|$|E
40|$|<b>Fault</b> <b>trees</b> (FT) are {{a popular}} {{industrial}} method for reliability engineering, for which Monte Carlo simulation {{is an important}} technique to estimate common dependability metrics, such as the system reliability and availability. A severe drawback of Monte Carlo simulation is {{that the number of}} simulations required to obtain accurate estimations grows extremely large in the presence of rare events, i. e., events whose probability of occurrence is very low, which typically holds for failures in highly reliable systems. This paper presents a novel method for rare event simulation of dynamic <b>fault</b> <b>trees</b> with complex repairs that requires only a modest number of simulations, while retaining statistically justified confidence intervals. Our method exploits the importance sampling technique for rare event simulation, together with a compositional state space generation method for dynamic <b>fault</b> <b>trees.</b> We demonstrate our approach using two parameterized sets of case studies, showing that our method can handle <b>fault</b> <b>trees</b> that could not be evaluated with either existing analytical techniques, nor with standard simulation techniques...|$|R
40|$|Reliability, availability, {{maintenance}} and safety (RAMS) analysis {{is essential in}} the evaluation of safety critical systems like nuclear power plants and the railway infrastructure. A widely used methodology within RAMS analysis are <b>fault</b> <b>trees,</b> representing failure propagations throughout a system. We present DFTCalc, a tool-set to conduct quantitative analysis on dynamic <b>fault</b> <b>trees</b> including the effect of a maintenance strategy on the system dependability...|$|R
40|$|Nowadays, {{people are}} {{increasingly}} dependent upon software-controlled systems. In {{the case of}} safety-critical systems, {{it is necessary to}} ensure their safety via appropriate analysis methods. However, the established methods (<b>fault</b> <b>trees,</b> Markov-models, [...] .) have some crucial disadvantages when it comes to dynamic failure behavior. To address this problem, this thesis extends the range of analysis technique for state event <b>fault</b> <b>trees</b> (SEFTs) by qualitative ones...|$|R
5000|$|C V Ramamoorthy, Gary S Ho, and Yih-Wu Han. <b>Fault</b> <b>tree</b> {{analysis}} of computer systems. AFIPS National Computer Conference, pages 13-17, 1977.|$|E
50|$|Again, since P (A ∩ B) usually {{becomes a}} very small error term, the {{exclusive}} OR gate has limited value in a <b>fault</b> <b>tree.</b>|$|E
50|$|Two common {{methods of}} {{answering}} this last question are Event Tree Analysis and <b>Fault</b> <b>Tree</b> Analysis - for explanations of these, see safety engineering.|$|E
40|$|Article {{describes}} {{the results of}} the development and using of Rare-Event Monte-Carlo Simulation Algorithms for Dynamic <b>Fault</b> <b>Trees</b> Estimation. For <b>Fault</b> <b>Trees</b> estimation usually analytical methods are used (Minimal Cut sets, Markov Chains, etc.), but for complex models with Dynamic Gates it is necessary to use Monte-Carlo simulation with combination of Importance Sampling method. Proposed article describes approach for this problem solution according for specific features of Dynamic <b>Fault</b> <b>Trees.</b> There are assumed, that failures are non-repairable with general distribution functions of times to failures (there may be Exponential distribution, Weibull, Normal and Log-Normal, etc.). Expessions for Importance Sampling Re-Calculations are proposed and some numerical results are consideredComment: 10 pages, 1 figur...|$|R
40|$|Abstract—Fault Tree 12 Analysis {{shows the}} {{possible}} causes {{of a system}} malfunction by enumerating the suspect components and their respective failure modes that may have induced the problem. Complex systems often use <b>fault</b> <b>trees</b> to analyze the faults. Fault diagnosis, when error occurs, is performed by engineers and analysts performing extensive examination of all data gathered during the mission. International Space Station (ISS) control center operates on the data feedback from the system and decisions are made based on threshold values by using <b>fault</b> <b>trees.</b> Since those decision-making tasks are safety critical and must be done promptly, the engineers who manually analyze the data are facing time challenge. To automate this process, this paper present an approach that uses decision trees to capture the contents of <b>fault</b> <b>trees</b> and detect <b>fault...</b>|$|R
40|$|For the {{certification}} of modern safety critical systems tree based failure models, like standardized <b>fault</b> <b>trees</b> (FTs), are frequently used methodologies. But {{when it comes}} to software-intensive systems these techniques have some crucial disadvantages, especially in modeling timing behavior. To deal with these weak points state/event <b>fault</b> <b>trees</b> (SEFTs) [6] were developed. However, these kind of <b>fault</b> <b>trees</b> can only be analyzed in a quantitative way. In this paper we propose an approach to analyze them qualitatively as well. This results in ordered event sequences which represent different ways for triggering a critical event of the underlying SEFTs, which {{can be seen as a}} time-dependent equivalent of the minimal cut set (MCS) analysis of standardized FTs. To evaluate our approach, we implemented the SEFTAnalyzer to apply it on a software-controlled fire alert system...|$|R
50|$|The first {{stages of}} the life cycle involve {{assessing}} the potential system hazards and estimating the risk they pose. One such method is <b>fault</b> <b>tree</b> analysis.|$|E
5000|$|THERP is {{compatible}} with Probabilistic Risk Assessments (PRA); the methodology of the technique means {{that it can be}} readily integrated with <b>fault</b> <b>tree</b> reliability methodologies. 3 ...|$|E
50|$|Related {{techniques}} in safety engineering and reliability engineering include failure mode and effects analysis, hazop, <b>fault</b> <b>tree,</b> and SAPHIRE (Systems Analysis Programs for Hands-on Integrated Reliability Evaluations).|$|E
40|$|This paper {{presents}} a methodology for {{quantitative risk analysis}} for offshore installations, that incorporates both technical and operational conditions. The basic building blocks of the methodology are barrier block diagrams, event <b>trees,</b> <b>fault</b> <b>trees,</b> and influence diagrams. Barrier block diagrams are used to illustrate the event scenarios {{and the effect of}} barrier systems on the scenarios. Event trees are used in the quantitative analysis of the scenarios, while <b>fault</b> <b>trees</b> are used to analyze the performance of the different barrier systems. Influence diagram are used to analyze the effect of risk influencing factors on the initiating events in the event trees and the basic events in the <b>fault</b> <b>trees.</b> The aim of the analysis is to reflect installation specific factors both with respect to technical systems, operational conditions as well as human and organizational factors...|$|R
40|$|International audienceThis paper {{presents}} a formal framework allowing {{to extend the}} simpliﬁcation of static <b>fault</b> <b>trees</b> to <b>fault</b> <b>trees</b> built with gates PRIORITY AND. The laws which make these simpliﬁcations possible have been demonstrated thanks to a homogeneous algebraic deﬁnition of each gate studied. These deﬁnitions use a mathematical model of events able {{to take into account}} their order of appearance. The processing of an example points out the possibilities oﬀered by this algebraic framework dedicated to non-repairable faults...|$|R
5000|$|... 1987 Version 1 of {{the code}} called IRRAS (now known as SAPHIRE) {{introduced}} an innovative way to draw, edit, and analyze graphical <b>fault</b> <b>trees.</b>|$|R
50|$|Attack {{trees are}} related to the {{established}} <b>fault</b> <b>tree</b> formalism. <b>Fault</b> <b>tree</b> methodology employs boolean expressions to gate conditions when parent nodes are satisfied by leaf nodes. By including a priori probabilities with each node, it is possible to perform calculate probabilities with higher nodes using Bayes Rule. However, in reality accurate probability estimates are either unavailable or too expensive to gather. With respect to computer security with active participants (i.e., attackers), the probability distribution of events are probably not independent nor uniformly distributed, hence, naive Bayesian analysis is unsuitable.|$|E
5000|$|<b>Fault</b> <b>tree</b> {{analysis}} and related software are developed to calculate (analytic or by simulation) {{availability of a}} system or a functional failure condition within a system including many factors like: ...|$|E
50|$|A <b>fault</b> <b>tree</b> {{is often}} {{normalized}} {{to a given}} time interval, such as a flight hour or an average mission time. Event probabilities depend {{on the relationship of}} the event hazard function to this interval.|$|E
40|$|Abstract: This paper {{presents}} a formal framework allowing {{to extend the}} simplification of static <b>fault</b> <b>trees</b> to <b>fault</b> <b>trees</b> built with gates PRIORITY AND. The laws which make these simplifications possible have been demonstrated thanks to a homogeneous algebraic definition of each gate studied. These definitions use a mathematical model of events able {{to take into account}} their order of appearance. The processing of an example points out the possibilities offered by this algebraic framework dedicated to non-repairable faults. Copyright c○ 2007 IFA...|$|R
40|$|Multiformalism {{approaches}} and automatic model generation are challenging {{issues in the}} context of the analysis of critical systems for which formal verification and validation are mandatory. Reusable model transformations may reduce the skill level required in formal modeling, time and cost of the analysis process, and they may support the integration among different formal languages. This paper investigates how the relationship existing between different classes of formal languages may be exploited to define new model transformations by extending existing definitions. Specifically, the inheritance relationship is considered with the ultimate goal of achieving formalisms integration also by developing proper reusable model transformations. This idea is applied to the integration between Repairable <b>Fault</b> <b>Trees</b> and Generalized Stochastic Petri Nets, where the inheritance relationship between <b>Fault</b> <b>Trees</b> and Repairable <b>Fault</b> <b>Trees</b> is the basis to define inheritable model transformations. The described techniques are demonstrated on the availability model of a modern railway controller...|$|R
25|$|Simulators {{may also}} be used to {{interpret}} <b>fault</b> <b>trees,</b> or test VLSI logic designs before they are constructed. Symbolic simulation uses variables to stand for unknown values.|$|R
