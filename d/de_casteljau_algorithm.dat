47|77|Public
50|$|The {{proof is}} a {{consequence}} of the <b>de</b> <b>Casteljau</b> <b>algorithm</b> for a Bezier curve of degree 2.|$|E
50|$|Quaternion Slerps are {{commonly}} used to construct smooth animation curves by mimicking affine constructions like the <b>de</b> <b>Casteljau</b> <b>algorithm</b> for Bézier curves. Since the sphere is not an affine space, familiar properties of affine constructions may fail, though the constructed curves may otherwise be entirely satisfactory. For example, the <b>de</b> <b>Casteljau</b> <b>algorithm</b> {{may be used to}} split a curve in affine space; this does not work on a sphere.|$|E
40|$|In this paper, we {{investigate}} {{the efficiency of}} various strategies for subdividing polynomial triangular surface patches. We give a simple algorithm performing a regular subdivision in four calls to the standard <b>de</b> <b>Casteljau</b> <b>algorithm</b> (in its subdivision version). A naive version uses twelve calls. We also show that any method for obtaining a regular subdivision using the standard <b>de</b> <b>Casteljau</b> <b>algorithm</b> requires at least 4 calls. Thus, our method is optimal. We give another subdivision algorithm using only three calls to the <b>de</b> <b>Casteljau</b> <b>algorithm.</b> Instead of being regular, the subdivision pattern is diamond-like. Finally, we present a "spider-like" subdivision scheme producing six subtriangles in four calls to the <b>de</b> <b>Casteljau</b> <b>algorithm.</b> 1 1 Introduction In this paper, {{we investigate}} the efficiency of various strategies for subdividing polynomial triangular surface patches. Subdivision methods based on {{a version of the}} <b>de</b> <b>Casteljau</b> <b>algorithm</b> splitting a control net into control s [...] ...|$|E
50|$|In the {{mathematical}} field of numerical analysis, <b>De</b> <b>Casteljau's</b> <b>algorithm</b> is a recursive method to evaluate polynomials in Bernstein form or Bézier curves, named after its inventor Paul <b>de</b> <b>Casteljau.</b> <b>De</b> <b>Casteljau's</b> <b>algorithm</b> {{can also be}} used to split a single Bézier curve into two Bézier curves at an arbitrary parameter value.|$|R
5000|$|... {{which we}} {{evaluate}} individually using <b>De</b> <b>Casteljau's</b> <b>algorithm.</b>|$|R
5000|$|<b>De</b> <b>Casteljau's</b> <b>algorithm</b> to {{evaluate}} polynomials in Bézier form ...|$|R
40|$|Abstract. In this paper, we {{investigate}} {{the efficiency of}} various strategies for subdividing polynomial triangular surface patches. We give a simple algorithm performing a regular subdivision in four calls to the standard <b>de</b> <b>Casteljau</b> <b>algorithm</b> (in its subdivision version). A naive version uses twelve calls. We also show that any method for obtaining a regular subdivision using the standard <b>de</b> <b>Casteljau</b> <b>algorithm</b> requires at least 4 calls. Thus, our method is optimal. We give another subdivision algorithm using only three calls to the <b>de</b> <b>Casteljau</b> <b>algorithm.</b> Instead of being regular, the subdivision pattern is diamond-like. Finally, we present a “spider-like ” subdivision scheme producing six subtriangles in four calls to the <b>de</b> <b>Casteljau</b> <b>algorithm.</b> 1...|$|E
40|$|Abstract. For {{evaluating}} polynomial curves {{in computer}} design the usual algorithm is the <b>de</b> <b>Casteljau</b> <b>algorithm.</b> Although it {{is simple and}} stable, this algorithm is not efficient, {{in the sense that}} it has not linear complexity. In this paper we discuss and compare the properties of four more efficient algorithms used under some circumstances as alternative to the <b>de</b> <b>Casteljau</b> <b>algorithm...</b>|$|E
40|$|We generalize the {{classical}} <b>De</b> <b>Casteljau</b> <b>algorithm</b> for generation of polynomial curves in IR"m, {{in the general}} setting of symmetric spaces. Most of our attention is focussed on Line groups because they appear {{in a variety of}} important physical systems and their special structure makes it possible to perform appropriate simplifications, in order to capture many of the interesting properties of polynomials in Euclidean space. For the particular cases of the rotation group SO(3) and the 2 -sphere, the performance of the <b>De</b> <b>Casteljau</b> <b>algorithm</b> is illustrated by some numerical simulationsAvailable from Departamento de Matematica, Universidade de Coimbra, 3000 Coimbra, Portugal / FCT - Fundação para o Ciência e a TecnologiaSIGLEPTPortuga...|$|E
5000|$|The {{geometric}} {{interpretation of}} <b>De</b> <b>Casteljau's</b> <b>algorithm</b> is straightforward.|$|R
50|$|A numerically stable way to {{evaluate}} polynomials in Bernstein form is <b>de</b> <b>Casteljau's</b> <b>algorithm.</b>|$|R
25|$|These {{representations}} rest on {{the process}} used in <b>De</b> <b>Casteljau's</b> <b>algorithm</b> to calculate Bézier curves.|$|R
40|$|Copyright 2003 IEEERuled surface {{design and}} its {{applications}} {{are widely used}} in CAGD (computer aided geometric design) and industrial areas. The dual <b>De</b> <b>Casteljau</b> <b>algorithm</b> [K. Sprott et. al., (1997) ] is for drawing ruled surfaces. However, it cannot draw any type of ruled surfaces. Here, the algorithm is extended to draw the hyperboloid which could be indefinite if it is drawn by the initial algorithm. The dual characteristics of ruled surfaces created by using the dual method are investigated. The special displacement method of the rulings with two parallel control screws is also discussed. The extension of the dual <b>De</b> <b>Casteljau</b> <b>algorithm</b> has shown the wider usage of the dual approach for drawing ruled surfaces...|$|E
40|$|International audienceThe {{computations}} of {{curves and}} surfaces points for CAD modeling are numerous and important. In {{the case of}} modeling using the Be´zier method, these may be achieved either with the <b>De</b> <b>Casteljau</b> <b>algorithm</b> in the Bernstein basis, or with the Horner algorithm in the power basis. The <b>De</b> <b>Casteljau</b> <b>algorithm</b> requires {{a greater number of}} operations than Horner's. However, we show that the equations of curves and surfaces in the power basis may be affected by a very important loss of significant digits on the polynomials coefficient; {{this is due to the}} required conversion matrices which are ill-conditioned. Examples are given. We conclude that the use of the Horner algorithm should be avoided for the computations of curves and surfaces points with the Be´zier method...|$|E
40|$|Ruled surface {{design and}} its {{applications}} {{are widely used}} in CAGD (Computer Aid Geometric Design) and industrial areas. The cylinder is a particular ruled surface. Its drawing methods {{lay the foundation for}} drawing other ruled surfaces, such as cones, with dual space drawing methods. In this paper, new methods are introduced for drawing cylinders. The underlying principle of these methods is the application and extension (variation) of the dual <b>De</b> <b>Casteljau</b> <b>algorithm</b> [11]. Based on this, a comprehensive study is carried out for the creation of cylinders. The dual <b>De</b> <b>Casteljau</b> <b>algorithm</b> is adjusted by adding boundary conditions to draw cylinders with smooth closed trajectories. The dual space drawing methods of the circular cylinder with boundary conditions and segment construction are also discussed. Rena Din...|$|E
50|$|Paul <b>de</b> <b>Casteljau</b> (born 1930 in Besançon, France.) is a French {{physicist}} and mathematician. In 1959, {{while working at}} Citroën, he developed an algorithm for evaluating calculations on a certain family of curves, which would later be formalized and popularized by engineer Pierre Bézier, and the curves called <b>De</b> <b>Casteljau</b> curve or Bézier curves. <b>De</b> <b>Casteljau's</b> <b>algorithm</b> is widely used, with some modifications, {{as it is the}} most robust and numerically stable method for evaluating polynomials. Other methods, such as Horner's method and forward differencing, are faster for calculating single points but are less robust. <b>De</b> <b>Casteljau's</b> <b>algorithm</b> is still very fast for subdividing a <b>De</b> <b>Casteljau</b> curve or Bézier curve into two curve segments at an arbitrary parametric location.|$|R
2500|$|This {{could be}} {{practical}} if [...] can be computed prior to many evaluations of however one should use caution as high order curves may lack numeric stability (<b>de</b> <b>Casteljau's</b> <b>algorithm</b> {{should be used}} if this occurs). Note that the empty product is 1.|$|R
2500|$|... {{when they}} were widely publicised by the French {{engineer}} Pierre Bézier, who used them to design automobile bodies at Renault. [...] The study of these curves was however first developed in 1959 by mathematician Paul <b>de</b> <b>Casteljau</b> using <b>de</b> <b>Casteljau's</b> <b>algorithm,</b> a numerically stable method to evaluate Bézier curves at Citroën, another French automaker.|$|R
40|$|Ruled surface {{design and}} its {{applications}} {{are widely used}} in CAGD(Computer Aid Geometric Design) and industrial areas. In this paper, the hyperbolic paraboloid is a particular ruled surface, which is drawn by using the dual <b>De</b> <b>Casteljau</b> <b>algorithm</b> [15]. The characteristics of the hyperbolic paraboloid are analysed in order to match the requirement of the dual <b>De</b> <b>Casteljau</b> <b>algorithm.</b> A new method for the screen representation of the ruling is introduced. The new method presents the ruling as a clipped line segment on the screen {{in order to show}} the proportion of the ruled surface on the screen. The two new methods represent the universal approach to draw ruled surfaces by a combination of the theoretical and practical aspects of dual methods. ...|$|E
40|$|Ruled surface {{design and}} its {{applications}} {{are widely used}} in CAGD (Computer Aided Geometric Design) and industrial areas. The hyperbolic paraboloid, the cylinder, the cone, and the hyperboloid are ruled surfaces with particular shapes. In this paper, dual space drawing methods for these particular ruled surfaces are proposed. The underlying principles of these methods are the applications, extensions and variations of the dual (space) <b>de</b> <b>Casteljau</b> <b>algorithm</b> [15]. The hyperbolic paraboloid is created by using the initial dual <b>de</b> <b>Casteljau</b> <b>algorithm</b> directly. The cylinder, the cone, and the hyperboloid, on the other hand, are created by using the extensions or variations of the dual <b>de</b> <b>Casteljau</b> <b>algorithm.</b> During the drawing processes, the screen representation of the rulings is presented. This treatment presents the rulings as clipped line segments {{on the computer screen}} in order to show the proportion of the ruled surface on the computer screen. In addition, the dual characteristics of Bezier surfaces are also discussed. The special construction method of the displacement matrix with two parallel control screws is demonstrated. The normal screw is normalized into the unit screw as well. These new methods show the universal possibility of the dual space approach for drawing ruled surfaces. Rena Ding, Yan Zhan...|$|E
40|$|A {{projective}} invariant {{generalization of}} the <b>de</b> <b>Casteljau</b> <b>algorithm</b> {{is described by}} using the cross ratio and an auxiliary line. We describe the implicit form of the section conics obtained by the algorithm pro-posed in this paper. Finally, we show how to construct specific conic sections using this approach...|$|E
5000|$|Bézier popularized {{but did not}} {{actually}} create the Bézier curve [...] - [...] using such curves to design automobile bodies. The curves were first developed in 1959 by Paul <b>de</b> <b>Casteljau</b> using <b>de</b> <b>Casteljau's</b> <b>algorithm,</b> a numerically stable method to evaluate Bézier curves. The curves remain widely used in computer graphics to model smooth curves.|$|R
50|$|However, the {{evaluation}} and summation steps are often combined in clever ways. For example, Bernstein polynomials are {{a basis for}} polynomials that can be evaluated in linear combinations efficiently using special recurrence relations. This {{is the essence of}} <b>De</b> <b>Casteljau's</b> <b>algorithm,</b> which features in Bézier curves and Bézier splines.|$|R
40|$|AbstractWe propose {{and analyze}} {{a class of}} {{algorithms}} for the generation of curves and surfaces. These algorithms encompass some well-known methods of subdivision for Bernstein-Bézier curves (<b>de</b> <b>Casteljau's</b> <b>algorithm)</b> and B-spline curves (Lane and Riesenfeld's algorithm). Several results concerning properties of the limiting curves as well as related questions are discussed...|$|R
40|$|Abstract. Removing some {{intermediate}} computations {{from the}} <b>de</b> <b>Casteljau</b> <b>algorithm</b> for Bézier curves generates {{a new class}} of curves called pruned Bézier curves. This class of curves includes the classical Ball curves and their generalizations as well as curves evaluated by Horner’s method. Here, we study the combinatorics of pruned Bézier curves. By solving recurrence relations we derive closed formulas for the number of pruned curves of various types, including those that are non-degenerate (bushes), those that are variation diminishing (hedges), those whose algorithms are symmetric, and those whose algorithms are distinct. We also observe that combinatorially these non-degenerate pruned Bézier schemes (bushes) are related to binary and ternary trees. The <b>de</b> <b>Casteljau</b> <b>algorithm</b> for evaluating Bézier curves consists of repeated affine combinations that can be arranged in a triangular fashion [6]...|$|E
40|$|We {{examine the}} <b>De</b> <b>Casteljau</b> <b>algorithm</b> {{in the context}} of Riemannian {{symmetric}} spaces. This algorithm, whose classical form is used to generate interpolating polynomials in R^n, was also generalized to arbitrary Riemannian manifolds by others. However, the implementation of the generalized algorithm is difficult since detailed structure, such as boundary value expressions, has not been available. Lie groups are the most simple symmetric spaces, and for these spaces we develop expressions for the first and second order derivatives of curves of arbitrary order obtained from the algorithm. As an application of this theory we consider the problem of implementing the generalized <b>De</b> <b>Casteljau</b> <b>algorithm</b> on an m-dimensional sphere. We are able to fully develop the algorithm for cubic splines with Hermite boundary conditions and more general boundary conditions for arbitrary m. [URL]...|$|E
40|$|Bernstein based {{interval}} analysis {{permits to}} trace algebraic curves and surfaces. In this paper, we propose {{to use the}} classical <b>de</b> <b>Casteljau</b> <b>algorithm</b> to improve {{the efficiency of the}} Bernstein based method. The proposed tracing method gives significant results with functions of high degree. These results are illustrated and compared with other interval analysis approaches. ...|$|E
50|$|In the {{mathematical}} subfield of numerical analysis de Boor's algorithm is a fast and numerically stable algorithm for evaluating spline curves in B-spline form. It is a generalization of <b>de</b> <b>Casteljau's</b> <b>algorithm</b> for Bézier curves. The algorithm was devised by Carl R. de Boor. Simplified, potentially faster variants of the de Boor algorithm {{have been created}} but they suffer from comparatively lower stability.|$|R
50|$|The {{mathematical}} {{basis for}} Bézier curves—the Bernstein polynomial—has been known since 1912, but its applicability to graphics was not realized for another half century.Bézier curves were widely publicized in 1962 by the French engineer Pierre Bézier, who {{used them to}} design automobile bodies at Renault. The study of these curves was however first developed in 1959 by mathematician Paul <b>de</b> <b>Casteljau</b> using <b>de</b> <b>Casteljau's</b> <b>algorithm,</b> a numerically stable method to evaluate Bézier curves at Citroën, another French automaker.|$|R
40|$|International audienceIn this mostly expository {{paper we}} {{explain how the}} Bernstein basis, widely used in {{computer-aided}} geometric design, provides an efficient method for real root isolation, using <b>de</b> <b>Casteljau’s</b> <b>algorithm.</b> We discuss the link between this approach and more classical methods for real root isolation. We also present a new improved method for isolating real roots in the Bernstein basis inspired by Roullier and Zimmerman...|$|R
40|$|International audienceBernstein {{coefficients}} {{provide a}} discrete approximation {{of the behavior}} of a polynomial inside an interval. This can be used for example to isolate real roots of polynomials. We prove a criterion for the existence of a single root in an interval and the correctness of the <b>de</b> <b>Casteljau</b> <b>algorithm</b> to compute efficiently Bernstein coefficients...|$|E
40|$|This {{paper is}} {{concerned}} with a generalization of the -Bernstein polynomials and Stancu operators, where the function is evaluated at intervals which are in geometric progression. It is shown that these polynomials can be generated by a <b>de</b> <b>Casteljau</b> <b>algorithm,</b> which is a generalization of that relating to the classical case and -Bernstein case...|$|E
40|$|AbstractIn {{computer}} aided geometric {{design a}} polynomial is usually represented in Bernstein form. This paper presents two compensated algorithms to accurately evaluate a polynomial and its derivative in Bernstein form with floating point coefficients. The principle {{is to apply}} error-free transformation to improve traditional <b>de</b> <b>Casteljau</b> <b>algorithm.</b> Forward error analysis and numerical experiments illustrate the accuracy of our algorithms...|$|E
40|$|The Bernstein {{basis is}} widely used in Computer Aided Design. We explain how, {{combined}} with Descartes's rule, the Bernstein basis, provides as well an efficient method for real root isolation, using <b>De</b> <b>Casteljau's</b> <b>algorithm,</b> and make the link with more classical methods. Most {{of the content of}} the paper can be found in previous authors' articles. However, we present a new improved method for isolating real roots...|$|R
5000|$|Here is {{an example}} {{implementation}} of <b>De</b> <b>Casteljau's</b> <b>algorithm</b> in Haskell:deCasteljau :: Double -> Double) -> (Double, Double)deCasteljau t b = bdeCasteljau t coefs = deCasteljau t reduced where reduced = zipWith (lerpP t) coefs (tail coefs) lerpP t (x0, y0) (x1, y1) = (lerp t x0 x1, lerp t y0 y1) lerp t a b = t * b + (1 - t) * a ...|$|R
30|$|To {{improve the}} {{efficiency}} of the HPM, a few modifications have been made by many researches. For instance, Javidi and Golbabai (2009) added the accelerating parameter to the perturbation equation for obtaining the approximate solution for nonlinear Fredholm integral equation. Ghorbani and Saberi-Nadjafi (2006) added a series of parameter and selective functions to HPM to find the semi-analytical solutions of nonlinear Fredholm and Volterra integral equations. Mohamad Nor et al. (2013) developed the new homotopy function using <b>De</b> <b>Casteljau</b> <b>algorithms</b> to solve the algebraic nonlinear problems.|$|R
