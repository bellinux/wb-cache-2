16|344|Public
5000|$|Final Decision Memorandum and <b>Implementation</b> <b>Instructions</b> (must be {{completed}} in 60 days) ...|$|E
5000|$|... #Subtitle level 2: 2000 <b>Implementation</b> <b>instructions</b> on Rules for Religious Activities {{of foreigners}} ...|$|E
50|$|BioRuby can be {{accessed}} via the terminal, Ruby IDEs or via a BioRubyOnRails <b>implementation.</b> <b>Instructions</b> for the installation and use of BioRubyOnRails {{can be found at}} bioruby.open-bio.org/wiki/BioRubyOnRails.|$|E
50|$|As {{a vendor}} {{interest}} group SIE is not {{bound to the}} statements of neutrality against proprietary solutions of regular standards organisations. That makes the SIE specification also include <b>implementation</b> <b>instruction</b> layer that is not possible in official standards organisations work. The <b>implementation</b> <b>instruction</b> layer has helped a lot in limiting dialects and makes certain the information interchange work in practice. Beside the vendors are members this is a key of the huge implementation rate in the Swedish domestic market.|$|R
50|$|There are {{a number}} of {{articles}} in the branch would press about very expensive XBRL projects with very sparse results of volume use. The contradiction between standards organisation ethics and applied technology (a common <b>implementation</b> <b>instruction</b> set) issues, is a hard thing to solve to make such projects more likely successful.|$|R
40|$|Laying the Foundation: Digital Humanities in Academic Libraries {{examines}} the library’s {{role in the}} development, <b>implementation,</b> and <b>instruction</b> of successful digital humanities projects. This title was made Open Access by libraries {{from around the world}} through Knowledge Unlatched. Includes bibliographical references and indexes. Laying the Foundation: Digital Humanities in Academic Libraries {{examines the}} library’s role in the development, <b>implementation,</b> and <b>instruction</b> of successful digital humanities projects. This title was made Open Access by libraries from around the world through Knowledge Unlatched. Mode of access: Internet...|$|R
50|$|OASIS is {{developing}} specifications for business process mechanisms, industry standard schemas, registry systems, and schema mechanisms. The CAM specification will allow these four components {{to be brought}} together in a consistent and standard way and publish assembly <b>implementation</b> <b>instructions</b> based on these OASIS specifications. This will facilitate the work of industry groups and allow development of software tools that work consistently with all these specifications.|$|E
5000|$|Torture (in {{the context}} of interrogation) has been defined as, “Physically and/or psychologically painful methods {{designed}} to elicit information from an individual". [...] "With respect to the last few decades, increasing evidence indicates that doctors are frequently involved when torture is carried out”. Physicians aided the military in its torture of prisoners in Camp Nama when the phrase was applied to them. The Secretary of U.S. Torture policy said, “ The use of isolation as an interrogation technique requires detailed <b>implementation</b> <b>instructions</b> ... including medical and psychological review ... including the presence or availability of qualified medical personnel.".|$|E
40|$|Abstract 1 - In {{this paper}} a new sensorless Direct Torque Control (DTC) {{algorithm}} for induction motor drive is proposed and tested. This algorithm provides decoupled {{control of the}} torque and flux with constant inverter switching frequency and a minimum torque and flux ripple. Compared to the other DTC methods, this algorithm is much simpler and has less mathematical operations, and can be implemented on most existing digital drive controllers. Algorithm is based on imposing the flux vector spatial orientation and rotation speed, which defines the unique solution for reference stator voltage. The implementation of the control scheme using DSP – based hardware is described, with complete experimental evidence and the straightforward <b>implementation</b> <b>instructions.</b> I...|$|E
50|$|The {{student or}} {{students}} chosen as peers must be properly coached before the peer relationship begins, both {{to understand the}} importance of the intervention and the methods which should be used. Instructors may model behaviors to the peer tutors and may role play with the peer tutors, allowing the peer tutors to experience both parts in the PMI relationship. Other methods for training could include visual aids, reinforcement for correct <b>implementation,</b> <b>instruction</b> manuals and video instructions. Once the PMI relationship begins, the teacher provides on-going feedback, watching the peer at all times while the intervention is being used. (Chan et al., 2009).|$|R
50|$|Over {{the life}} of the PDP-11, subtle {{differences}} arose in the <b>implementation</b> of <b>instructions</b> and combinations of addressing modes, though no implementation was regarded as correct. The inconsistencies did not affect ordinary use of the PDP-11.|$|R
2500|$|... an {{open-source}} C/C++ <b>implementation</b> with SIMD <b>instruction</b> sets (notably SSE4.1) {{under the}} MIT license ...|$|R
40|$|Preparing {{competent}} admin istrators {{to work in}} today's dynamic healthcare {{environment is}} a challenging task for contemporary educators. Experiential exercises in the classroom can contribute significantly to student training. This paper reviews the benefits to students of actively participating in simulations and role-plays, {{as well as the}} challenges in running such exercises A simulation designed specifically for healthcare administration students is presented with details and <b>implementation</b> <b>instructions.</b> The intent {{of this article is to}} impart to other educators the learning experiences in running this particular simulation to inspire dialogue and program improvement. Readers are encouraged to create simulation exercises with optimum relevance for their students. Information to obtain email versions of the simulation is also provided...|$|E
40|$|An {{overview}} {{is provided}} {{of the universal}} noiseless coding algorithms {{as well as their}} relationship to the now available FORTRAN implementations. It is suggested that readers considering investigating the utility of these algorithms for actual applications should consult both NASA's Computer Software Management and Information Center (COSMIC) and descriptions of coding techniques provided by Rice (1979). Examples of applying these techniques have also been given by Rice (1975, 1979, 1980). Attention is given to reversible preprocessing, general <b>implementation</b> <b>instructions,</b> naming conventions, and calling arguments. A general applicability of the considered algorithms to solving practical problems is obtained because most real data sources can be simply transformed into the required form by appropriate preprocessing...|$|E
40|$|This guidebook {{provides}} the basic information needed for inservice training in techniques for observing gifted characteristics in children from diverse population groups including economically disadvantaged {{and students with}} limited English proficiency. The training program {{is based on a}} specific Staff Development Model (SDM) and a Research-based Assessment Plan (RAP). Among seven assumptions of the SDM and RAP are the necessity of identifying giftedness through the observation of Traits, Aptitudes, and Behaviors (TABs) characteristic of gifted individuals and the importance of having TABs underlie measures used in evaluating students and designing programs and curricula. Part 1 presents a comprehensive overview of the SDM and the RAP, including their history, components, and necessary personnel. Part 2 provides specific <b>implementation</b> <b>instructions</b> ranging from such pre-planning steps as establishing necessary committees to determining a targe...|$|E
30|$|Implementation {{contains}} the concrete realization of planned instruction {{in a real}} setting, for instance an online setting. Characteristically, the <b>implementation</b> of <b>instruction</b> occurs under controlled conditions and critical examination. This is often closely associated with a formative evaluation during the development phase.|$|R
5000|$|The EDUC-8 was an 8 bit bit-serial {{design with}} 256 bytes of RAM. The {{internal}} clock speed was 500 kHz, with an instruction speed of approximately 10 kHz, {{due to the}} bit-serial <b>implementation.</b> The <b>instruction</b> set {{was based on the}} DEC PDP-8.|$|R
5000|$|Mentec M1 - Processor upgrade board; {{microcode}} <b>implementation</b> of PDP-11 <b>instruction</b> set by Mentec, using Atmel 0.35 μm ASIC.|$|R
40|$|Understanding {{the culture}} of other nations {{contributes}} {{to the development of}} responsible citizens in a democratic society. A classroom teaching team proved these activities to be successful. Five initial lessons introduce students to the study of Cnina by teaching Chinese geography. To enhance cultural understanding, 10 additional lessons focus on the following aspects of Chinese culture: (1) flags, (2) agriculture, (3) calligraphy, (4) calendar, (5) inventions, (6) karate, (7) tangrams, (8) crafts, (9) folk tales, and (10) Confucius. The unit culminates with plans for preparing Chinese dinner, having an open house, or organizing a homeroom meeting. Each lesson includes learner outcomes, materials, and <b>implementation</b> <b>instructions</b> for carrying out the activities. The lessons may be taught as a class activity or completed individually by students. A bibliography and supplementary materials are appended. (SM) ***************************************************************k******* Reproductions supplied by EDRS are the best that can be made from the original document...|$|E
40|$|Presented at the SCVUGM (South Central Voyager User Group Meeting) 2007. Stillwater, OK. The {{presentation}} is also archived {{at the conference}} website at [URL] this session, presenters from Wichita State University will discuss their implementation of dynamic library location maps in WebVoyage. This feature provides customized map displays in the online public access catalog. After selecting a search result, patrons are given the option to view a dynamic (or interactive) map that displays directional information including the library branch, floor on which the resource may be found, what direction to turn after exiting the elevator, department location, and general location of the shelving range. Maps are suitable for printing, and even provide a linking option for electronic resources. The presenters discuss how the dynamic mapping project evolved, the programming logic developed by Hongfe Li, Sai Deng's map creation, how to transfer data from the WebVoyage display to the processing program, how to combine data with the Voyager tables, and <b>implementation</b> <b>instructions.</b> WSU's dynamic mapping feature was first introduced to the Voyager community at the 2007 EndUser conference. We will review developments since the conference and discuss future enhancements...|$|E
40|$|The OpenOrbiter Small Spacecraft Development Initiative {{is working}} to create a set of designs and <b>implementation</b> <b>instructions</b> for a 1 -U CubeSat, called the Open Prototype for Educational NanoSats. These designs target a total parts cost of below USD $ 5, 000. This design will be made publically {{available}} to facilitate its use by others, with or without modification. A ‘side slotted ’ CubeSat design (where main circuit boards are placed in slots between the rails on the outside) has been developed for OpenOrbiter. This paper discusses the design choices that were made during the mechanical structure development of the OpenOrbiter CubeSat design, required to keep it within the mass, volume and monetary budgets. Choices like {{the design of the}} aluminum support structure, fastener mechanisms, circuit board layout and science package support structure are all discussed and their ease of construction and efficacy are considered. A discussion of ongoing work on the spacecraft’s mechanical fabrication and other subsystems is also presented. The paper also discusses how the design can, prospectively, be utilized by others and the ‘bigger picture’ benefits provided by the design approach and open hardware concept. I...|$|E
50|$|An {{interpreted}} {{language is}} a programming language for which most of its <b>implementations</b> execute <b>instructions</b> directly, without previously compiling a program into machine-language instructions. The interpreter executes the program directly, translating each statement into a sequence {{of one or more}} subroutines already compiled into machine code.|$|R
30|$|Alaugab (2007) {{examined}} {{the attitudes of}} female faculty members and students toward the adoption and acceptance of online instruction, the benefits of online <b>instruction</b> <b>implementation,</b> and to explore the significant barriers that could prevent the effective <b>implementation</b> of online <b>instruction.</b> The sample of the study comprised 310 female faculty members and students from two female institutions in Saudi Arabia. The findings indicated that female faculty members and students showed positive attitudes toward online instruction, as well as positive perceived usefulness and the most significant benefits of online instruction. In contrast, several barriers were revealed that could prevent the <b>implementation</b> of online <b>instruction.</b> The study concluded that female faculty members have the tendency to teach online courses and female students preferred {{to be involved in}} courses under an online environment.|$|R
50|$|Daily Oral Language and the Saxon method, a math programme, are {{specific}} <b>implementations</b> of programmed <b>instruction</b> which have {{an emphasis on}} repetition.|$|R
40|$|Two {{studies were}} {{conducted}} {{to examine the effects}} of providing home-based training for parents of behaviourally disturbed children attending a behaviour modification workshop, on parent attending behaviour and deviant child behaviour. Experiment 1 compared the effects of an Instructions No Feedback condition with Instructions plus Feedback, using a multiple baseline design. Instructions No Feedback comprised verbal and written instructions, lecture presentations, and modelling of behavioural procedures, and Instructions plus Feedback com¬prised therapists visiting the homes to provide brief differential feedback on programme <b>implementation.</b> <b>Instructions</b> plus Feedback resulted in increased levels of attending to appropriate behaviour, decreased levels of attending to deviant behaviour, and reduced levels of deviant child behaviour, when compared to Baseline and Instructions No Feedback conditions. Experiment 2 examined the effects of a home-based therapist feedback procedure with and without cueing. During Cueing plus Feedback a therapist provided parents with a visual cue to either ignore, praise, deliver time-out or display physical affection. Feedback once again comprised brief differential verbal feedback following home observation sessions. Although the Cueing plus Feedback and Feedback Alone conditions increased parents 2 ̆ 7 attention to appropriate behaviour, decreased attention to deviant behaviour and effectively modified deviant child behaviour when compared to Baseline, the two procedures did not differ clearly in their effects on either parent or child behaviour. Implications of the results for parent training research were discussed...|$|E
40|$|A split {{feasibility}} formulation for {{the inverse}} problem of intensity-modulated radiation therapy (IMRT) treatment planning with dose-volume constraints (DVCs) {{included in the}} planning algorithm is presented. It involves {{a new type of}} sparsity constraint that enables the inclusion of a percentage-violation constraint in the model problem and its handling by continuous (as opposed to integer) methods. We propose an iterative algorithmic framework for solving such a problem by applying the feasibility-seeking CQ-algorithm of Byrne combined with the automatic relaxation method (ARM) that uses cyclic projections. Detailed <b>implementation</b> <b>instructions</b> are furnished. Functionality of the algorithm was demonstrated through the creation of an intensity-modulated proton therapy plan for a simple 2 D C-shaped geometry and also for a realistic base-of-skull chordoma treatment site. Monte Carlo simulations of proton pencil beams of varying energy were conducted to obtain dose distributions for the 2 D test case. A research release of the Pinnacle 3 proton treatment planning system was used to extract pencil beam doses for a clinical base-of-skull chordoma case. In both cases the beamlet doses were calculated to satisfy dose-volume constraints according to our new algorithm. Examination of the dose-volume histograms following inverse planning with our algorithm demonstrated that it performed as intended. The application of our proposed algorithm to dose-volume constraint inverse planning was successfully demonstrated. Comparison with optimized dose distributions from the research release of the Pinnacle 3 treatment planning system showed the algorithm could achieve equivalent or superior results. Comment: Technical report, July 10, 2016; Revised January 10, 2017. Physics in Medicine and Biology, accepted for publicatio...|$|E
40|$|Nowadays, {{the use of}} agile {{software}} development methods like Scrum is common in industry and academia. Considering the current attacking landscape, {{it is clear that}} developing secure software should be a main concern in all {{software development}} projects. In traditional software projects, security issues require detailed planning in an initial planning phase, typically resulting in a detailed security analysis (e. g., threat and risk analysis), a security architecture, and instructions for security implementation (e. g., specification of key sizes and cryptographic algorithms to use). Agile software development methods like Scrum are known for reducing the initial planning phases (e. g., sprint 0 in Scrum) and for focusing more on producing running code. Scrum is also known for allowing fast adaption of the emerging software to changes of customer wishes. For security, this means that it is likely that there are no detailed security architecture or security <b>implementation</b> <b>instructions</b> {{from the start of the}} project. It also means that a lot of design decisions will be made during the runtime of the project. Hence, to address security in Scrum, it is necessary to consider security issues throughout the whole software development process. Secure Scrum is a variation of the Scrum framework with special focus on the development of secure software throughout the whole software development process. It puts emphasis on implementation of security related issues without the need of changing the underlying Scrum process or influencing team dynamics. Secure Scrum allows even non- security experts to spot security issues, to implement security features, and to verify implementations. A field test of Secure Scrum shows that the security level of software developed using Secure Scrum is higher then the security level of software developed using standard Scrum. Comment: The Ninth International Conference on Emerging Security Information, Systems and Technologies - SECURWARE 2015, Venice, Italy, 201...|$|E
5000|$|As {{with the}} {{precedents}} of with Lord Dunmore's Proclamation of November 7, 1775 and the Philipsburg Proclamation, Vice-Admiral Sir Alexander Cochrane issued a Proclamation in partial <b>implementation</b> of <b>instructions</b> from his superiors {{in which he}} {{made no mention of}} slaves although he presumed it would be read as encouraging them to join the British: ...|$|R
5000|$|Mentec M11 - Processor upgrade board; {{microcode}} <b>implementation</b> of PDP-11 <b>instruction</b> set by Mentec, {{using the}} TI 8832 ALU and TI 8818 microsequencer from Texas Instruments.|$|R
5000|$|In 2002, he {{was made}} a Fellow of the Computer History Museum [...] "for his {{development}} and <b>implementation</b> of reduced <b>instruction</b> set computer architecture and program optimization technology." ...|$|R
40|$|This {{document}} {{describes the}} guidelines adopted for software {{development of the}} Community Land Model (CLM) {{and serves as a}} reference to the entire code base of the released version of the model. The version of the code described here is Version 3. 0 which was released in the summer of 2004. This document, the Community Land Model Version 3. 0 (CLM 3. 0) User's Guide (Vertenstein et al., 2004), the Technical Description of the Community Land Model (CLM) (Oleson et al., 2004), and the Community Land Model's Dynamic Global Vegetation Model (CLM-DGVM) : Technical Description and User's Guide (Levis et al., 2004) provide the developer, user, or researcher with details of <b>implementation,</b> <b>instructions</b> for using the model, a scientific description of the model, and a scientific description of the Dynamic Global Vegetation Model integrated with CLM respectively. The CLM is a single column (snow-soil-vegetation) biogeophysical model of the land surface which can be run serially (on a laptop or personal computer) or in parallel (using distributed or shared memory processors or both) on both vector and scalar computer architectures. Written in Fortran 90, CLM can be run offline (i. e., run in isolation using stored atmospheric forcing data), coupled to an atmospheric model (e. g., the Community Atmosphere Model (CAM)), or coupled to a climate system model (e. g., the Community Climate System Model Version 3 (CCSM 3)) through a flux coupler (e. g., Coupler 6 (CPL 6)). When coupled, CLM exchanges fluxes of energy, water, and momentum with the atmosphere. The horizontal land surface heterogeneity is represented by a nested subgrid hierarchy composed of gridcells, landunits, columns, and plant functional types (PFTs). This hierarchical representation is reflected in the data structures used by the model code. Biophysical processes are simulated for each subgrid unit (landunit, column, and PFT) independently, and prognostic variables are maintained for each subgrid unit. Vertical heterogeneity is represented by a single vegetation layer, 10 layers for soil, and up to five layers for snow, depending on the snow depth. For computational efficiency, gridcells are grouped into ''clumps'' which are divided in cyclic fashion among distributed memory processors. Additional parallel performance is obtained by distributing clumps of gridcells across shared memory processors on computer platforms that support hybrid Message Passing Interface (MPI) /OpenMP operation. Significant modifications to the source code have been made over the last year to support efficient operation on newer vector architectures, specifically the Earth Simulator in Japan and the Cray X 1 at Oak Ridge National Laboratory (Homan et al., 2004). These code modifications resulted in performance improvements even on the scalar architectures widely used for running CLM presently. To better support vectorized processing in the code, subgrid units (columns and PFTs) are grouped into ''filters'' based on their process-specific categorization. For example, filters (vectors of integers) referring to all snow, non-snow, lake, non-lake, and soil covered columns and PFTs within each clump are built and maintained when the model is run. Many loops within the scientific subroutines use these filters to indirectly address the process-appropriate subgrid units...|$|E
50|$|The {{organization}} {{has been conducting}} the scouting/guiding programme to develop the skills provide physical fitness as well as proper training of disaster management to students. The organization shall be prepared to organize the training programme, seminar and other activities time to time among the youths under the <b>implementation</b> of <b>instructions</b> issued by Ministry of Youth Affairs & Sports Government of India.|$|R
5000|$|In an RTI model, {{fidelity}} {{is important}} {{at both the}} school level (e.g., implementation of the process) and the teacher level (e.g., <b>implementation</b> of <b>instruction).</b> Although the concept of fidelity of implementation is supported by research and is generally viewed as common sense, there are practical challenges associated with achieving high levels of fidelity.Factors that can reduce fidelity when implementing instruction include: ...|$|R
5000|$|Predication's primary {{drawback}} is in increased encoding space. In typical <b>implementations,</b> every <b>instruction</b> reserves a bitfield for the predicate specifying {{under what conditions}} that instruction should have an effect. When available memory is limited, as on embedded devices, this space cost can be prohibitive. However, some architectures such as Thumb-2 are able to avoid this issue (see below). Other detriments are the following: ...|$|R
40|$|Ashmore, Barbara A., The {{relationship}} between models of student laptop computer use and teacher instructional behavior. Doctor of Philosophy (Curriculum and Instruction), August 2001, 113 pp., 25 tables, 59 references. This {{study investigated the}} {{relationship between}} four models of student laptop computer use and three components of teacher instructional behavior: planning, <b>implementation</b> of <b>instruction,</b> and evaluation of instruction. The four models of use: full access, dispersed, class set, and mixed, represented the numerous ways teachers {{in public and private}} schools and school districts nationwide implemented student use of laptop computers. Teacher planning behavior was investigated with regard to time, frequency, complexity, difficulty, the need for revision, and use of technological resources and materials. <b>Implementation</b> of <b>instruction</b> was examined with regard to student grouping, instructional strategies, instructional content/subject matter, teacher and student roles, assignments and learning tasks, and instructional activities. The evaluation of instruction component was examined with regard to assessment tasks, grading, and assessment of homework...|$|R
5000|$|The RefLib scripts (<b>instruction</b> <b>implementations)</b> are [...] "near to formal". For {{a precise}} {{demonstration}} imagine {{the use of}} a C preprocessor to expand the RefLib script templates into standard instructions.|$|R
