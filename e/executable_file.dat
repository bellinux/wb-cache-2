448|471|Public
25|$|In computing, rpath designates the {{run-time}} search path hard-coded in an <b>executable</b> <b>file</b> or library. Dynamic linking loaders use the rpath to find required libraries.|$|E
25|$|Shared {{libraries}} can be statically linked, {{meaning that}} {{references to the}} library modules are resolved and the modules are allocated memory when the <b>executable</b> <b>file</b> is created. But often linking of shared libraries is postponed until they are loaded.|$|E
25|$|Self-extracting {{archives}} (including the executable installer of 7-Zip itself) {{are vulnerable}} to arbitrary code execution through DLL hijacking: they load and run a DLL named UXTheme.dll, {{if it is in}} the same folder as the <b>executable</b> <b>file.</b> 7-Zip 16.03 Release notes say that the installer and SFX modules have added protection against DLL preloading attack.|$|E
40|$|With {{the rapidly}} {{increasing}} complexity of computer {{systems and the}} sophistication of hacking tools and techniques, there is a crucial need for computer forensic analysis techniques. Very few techniques exist to support forensic analysis of unknown <b>executable</b> <b>files.</b> The existing techniques primarily inspect <b>executable</b> <b>files</b> to detect known signatures or are based on metadata information. A key goal of such forensic investigation is to identify malicious <b>executable</b> <b>files</b> that hackers might have installed in a targeted system. Finding such malware in a compromised system is difficult because {{it is hard to}} identify the purpose of the fragments of <b>executable</b> <b>files.</b> In this paper, we present a similarity-based technique that analyzes targeted <b>executable</b> <b>files</b> to identify a malware present in a compromised system. The technique involves assigning a similarity value to the fragments of <b>executable</b> <b>files</b> present in a compromised hard disk against a set of source files. We present some results based on the comparison of assembly instruction sequences of well-known hacking tools with those of various <b>executable</b> <b>files,</b> and suggest various ways to reduce the false positives...|$|R
5000|$|PE: Explorer: it {{lets you}} open and edit <b>executable</b> <b>files</b> called PE <b>files</b> (portable <b>executable</b> <b>files).</b> This {{includes}} [...]EXE, [...]DLLs and other less common file types.|$|R
50|$|Custom-made styles {{can be used}} using {{different}} methods, by means of manual replacement and automation by <b>executable</b> <b>files.</b> Many popular and freely distributed theme-patching <b>executable</b> <b>files</b> can be found online.|$|R
25|$|All of the modules {{required}} by a program are sometimes statically linked and copied into the <b>executable</b> <b>file.</b> This process, {{and the resulting}} stand-alone file, {{is known as a}} static build of the program. A static build may not need any further relocation if virtual memory is used and no address space layout randomization is desired.|$|E
25|$|A shared {{library or}} shared object is a file that is {{intended}} to be shared by executable files and further shared object files. Modules used by a program are loaded from individual shared objects into memory at load time or run time, rather than being copied by a linker when it creates a single monolithic <b>executable</b> <b>file</b> for the program.|$|E
25|$|Portables - Portable applications: Similar to RIPs, but in {{this case}} they're {{software}} applications instead of video games. The point of portable software {{is the fact that it}} can be placed on removable media (or any place on the local hard drive) and doesn't need installing; usually it is compressed into one <b>executable</b> <b>file,</b> by using software like VMware ThinApp or MoleBox.|$|E
5000|$|To {{store data}} bytes in a file, {{they have to}} be {{serialized}} in a [...] "file format". Typically, programs are stored in special file types, different from those used for other data. <b>Executable</b> <b>files</b> contain programs; all other files are also data <b>files.</b> However, <b>executable</b> <b>files</b> may also contain [...] "in-line" [...] data which is built into the program. In particular, some <b>executable</b> <b>files</b> have a data segment, which nominally contains constants and initial values (both data).|$|R
5000|$|Dll Inspector with resources/dependencies/objects views for <b>executable</b> <b>files</b> ...|$|R
50|$|Hiew (short for Hacker's view) is {{a popular}} console hex editor for Windows written by Eugene Suslikov (sen). Amongst its feature set {{is its ability to}} view files in text, hex and {{disassembly}} mode. The program is particularly useful for editing <b>executable</b> <b>files</b> such as COFF, PE or ELF <b>executable</b> <b>files.</b>|$|R
25|$|In computing, exec is a {{functionality}} of {{an operating}} system that runs an <b>executable</b> <b>file</b> {{in the context}} of an already existing process, replacing the previous executable. This act is also referred to as an overlay. It is especially important in Unix-like systems, although other operating systems implement it as well. Since a new process is not created, the original process identifier (PID) does not change, but the machine code, data, heap, and stack of the process are replaced by those of the new program.|$|E
25|$|Libraries are {{important}} in the program linking or binding process, which resolves references known as links or symbols to library modules. The linking process is usually automatically done by a linker or binder program that searches a set of libraries and other modules in a given order. Usually it is not considered an error if a link target can be found multiple times in a given set of libraries. Linking may be done when an <b>executable</b> <b>file</b> is created, or whenever the program is used at run time.|$|E
25|$|The BIOS {{directly}} controlled hardware components {{other than}} the CPU and main memory. It contained functions such as character input and output and the reading and writing of disk sectors. The BDOS implemented the CP/M file system and some input/output abstractions (such as redirection) {{on top of the}} BIOS. The CCP took user commands and either executed them directly (internal commands such as DIR to show a directory or ERA to delete a file) or loaded and started an <b>executable</b> <b>file</b> of the given name (transient commands such as PIP.COM to copy files or STAT.COM to show various file and system information). Third-party applications for CP/M were also essentially transient commands.|$|E
5000|$|DOS MZ <b>executable</b> <b>files</b> and the EXE stub of the Microsoft Windows PE (Portable <b>Executable)</b> <b>files</b> {{start with}} the {{characters}} [...] "MZ" [...] ( [...] ), the initials of the designer of the file format, Mark Zbikowski. The definition allows the uncommon [...] "ZM" [...] ( [...] ) as well for dosZMXP, a non-PE EXE.|$|R
5000|$|The JobScheduler {{can start}} <b>executable</b> <b>files,</b> shell scripts and {{database}} procedures.|$|R
5000|$|Source Code and <b>Executable</b> <b>Files</b> {{can be used}} in {{commercial}} applications; ...|$|R
25|$|Visual Studio 2008 {{features}} include an XAML-based designer (codenamed Cider), workflow designer, LINQ to SQL designer (for defining the type mappings and object encapsulation for SQL Server data), XSLT debugger, JavaScript Intellisense support, JavaScript Debugging support, support for UAC manifests, a concurrent build system, among others. It ships with an enhanced set of UI widgets, both for Windows Forms and WPF. It {{also includes a}} multithreaded build engine (MSBuild) to compile multiple source files (and build the <b>executable</b> <b>file)</b> in a project across multiple threads simultaneously. It also includes support for compiling icon resources in PNG format, introduced in Windows Vista. An updated XML Schema designer was released separately some time {{after the release of}} Visual Studio 2008.|$|E
25|$|Plings {{are also}} used in Acorn RISC OS to denote an {{application}} directory: a folder that when double clicked executes a program file inside called !Run. Other files in the appfolder generally contain resources the application needs to run. The appfolder {{can be viewed as}} a normal folder by double-clicking with the shift key held down. In addition, other special resource files such as !Boot (executed the first time the application containing it comes into view of the filer), !Sprites (an icon file containing icon definitions loaded if !Boot cannot be found) and !Help (a text, HTML or other <b>executable</b> <b>file</b> listed in the filer menu for the application) also start with a pling.|$|E
25|$|The early {{versions}} of Windows are {{often thought of}} as graphical shells, mostly because they ran on top of MS-DOS and use it for file system services. However, even the earliest Windows versions already assumed many typical operating system functions; notably, having their own <b>executable</b> <b>file</b> format and providing their own device drivers (timer, graphics, printer, mouse, keyboard and sound). Unlike MS-DOS, Windows allowed users to execute multiple graphical applications at the same time, through cooperative multitasking. Windows implemented an elaborate, segment-based, software virtual memory scheme, which allows it to run applications larger than available memory: code segments and resources are swapped in and thrown away when memory became scarce; data segments moved in memory when a given application had relinquished processor control.|$|E
5000|$|Compiler (can make <b>executable</b> <b>files,</b> {{libraries}} and dynamic linked libraries (DLL) files) ...|$|R
5000|$|Concealed {{messages}} in tampered <b>executable</b> <b>files,</b> exploiting redundancy in the targeted instruction set.|$|R
5000|$|Warn of {{attempts}} of <b>executable</b> <b>files</b> to terminate and stay resident (by normal methods).|$|R
25|$|Download {{and execute}} {{is a type}} of remote shellcode that {{downloads}} and executes some form of malware on the target system. This type of shellcode does not spawn a shell, but rather instructs the machine to download a certain <b>executable</b> <b>file</b> off the network, save it to disk and execute it. Nowadays, it is commonly used in drive-by download attacks, where a victim visits a malicious webpage that in turn attempts to run such a download and execute shellcode in order to install software on the victim's machine. A variation of this type of shellcode downloads and loads a library. Advantages of this technique are that the code can be smaller, that it does not require the shellcode to spawn a new process on the target system, and that the shellcode does not need code to clean up the targeted process as this can be done by the library loaded into the process.|$|E
2500|$|The first {{argument}} arg0 {{should be}} {{the name of the}} <b>executable</b> <b>file.</b> [...] Usually it is the same value as the path argument. [...] Some programs may incorrectly rely on this argument providing the location of the executable, but there is no guarantee of this nor is it standardized across platforms.|$|E
2500|$|The [...] "8.3" [...] {{filename}} {{format and}} the drive letter + colon combination survived into MS-DOS. The drive letter + colon convention has survived in Microsoft Windows {{and is still}} used today. In addition, file extensions (for example, [...]txt, [...]com (a compiled file), or [...]exe (an <b>executable</b> <b>file))</b> are still used to identify file types on many operating systems.|$|E
50|$|UEFI and EFI {{firmware}} use Portable <b>Executable</b> <b>files</b> for applications, {{as well as}} the Windows ABI.|$|R
5000|$|TurboDOS has no [...] "resident" [...] {{commands}}. All commands are <b>executable</b> <b>files.</b> The standard commands are:- ...|$|R
50|$|SWF2EXE {{is a type}} of {{computer}} software which enables the creation of <b>executable</b> <b>files</b> from SWF files.|$|R
2500|$|Also in May 2007, the <b>executable</b> <b>file</b> {{required}} by Pegasus Mail on Windows was falsely detected by Norton AntiVirus {{as being a}} Trojan and it was automatically removed, preventing Pegasus Mail from running. Norton AntiVirus had falsely identified three releases of Pegasus Mail as malware, and would delete the Pegasus Mail installer file when that happened. In response to this Pegasus Mail stated: ...|$|E
2500|$|Dynamic linking or {{late binding}} is linking {{performed}} while a program is being loaded (load time) or executed (run time), rather {{than when the}} <b>executable</b> <b>file</b> is created. A dynamically linked library (dynamic-link library or DLL under Windows and OS/2; dynamic shared object or DSO under Unix-like systems) is a library intended for dynamic linking. Only a minimum amount of work {{is done by the}} linker when the <b>executable</b> <b>file</b> is created; it only records what library routines the program needs and the index names or numbers of the routines in the library. The majority of the work of linking is done at the time the application is loaded (load time) or during execution (run time). Usually, the necessary linking program, called a [...] "dynamic linker" [...] or [...] "linking loader", is actually part of the underlying operating system. [...] (However, it is possible, and not exceedingly difficult, to write a program that uses dynamic linking and includes its own dynamic linker, even for an operating system that itself provides no support for dynamic linking.) ...|$|E
2500|$|Microsoft {{argued that}} Felten's changes did not truly remove Internet Explorer but only made its {{functionality}} inaccessible {{to the end}} user by removing icons, shortcuts and the iexplore.exe <b>executable</b> <b>file,</b> and making changes to the system registry. This led to a debate as to what exactly constitutes the [...] "web browser," [...] since much of the core functionality of Internet Explorer is stored in a shared dynamic-link library, accessible to any program running under Windows.|$|E
50|$|Authorware {{programs}} can be distributed as stand-alone <b>executable</b> <b>files,</b> or over the web which requires a proprietary Authorware Web Player.|$|R
5000|$|AWE {{applications}} distributed for use {{without the}} Absoft compiler {{need to have}} [...] included with 32-bit <b>executable</b> <b>files</b> or [...] for 64-bit <b>executable</b> <b>files.</b> These DLLs are released under the Free Software Foundation GNU General Public License (version 3 with GCC Library Exception).The interactive pop-ups, graphics, and spreadsheets are accessed bu a [...] statement. Distribution of executables with these features requires inclusion of [...] and [...] Qt is licensed under the LGPL v. 2.1.|$|R
5000|$|External — External <b>executable</b> <b>files</b> {{not part}} of the basic OS, but added by other parties for {{specific}} purposes and applications.|$|R
