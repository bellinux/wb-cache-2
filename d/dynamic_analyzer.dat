32|324|Public
25|$|Mars Environmental <b>Dynamic</b> <b>Analyzer</b> (MEDA), a set {{of sensors}} that will provide {{measurements}} of temperature, wind speed and direction, pressure, relative humidity and dust size and shape. It would be provided by Spain's Centro de Astrobiología.|$|E
5000|$|AppScan <b>Dynamic</b> <b>Analyzer</b> - Help secure web {{applications}} deployed on IBM Bluemix.|$|E
5000|$|Mars Environmental <b>Dynamic</b> <b>Analyzer</b> (MEDA), a set {{of sensors}} that will provide {{measurements}} of temperature, wind speed and direction, pressure, relative humidity and dust size and shape. It would be provided by Spain's Centro de Astrobiología.|$|E
5000|$|Bernd Bruegge, Tim Gottschalk, Bin Luo. A {{framework}} for <b>dynamic</b> program <b>analyzers.</b> In ACM SIGPLAN Notices, 28(10), 1993.|$|R
30|$|The water {{sorption}} isotherm of the tablets {{was determined}} using a <b>dynamic</b> water sorption <b>analyzer.</b>|$|R
40|$|Abstract. Formal dynamic {{analysis}} of Message Passing Interface (MPI) pro-grams is crucially {{important in the}} context of developing HPC applications. Ex-isting dynamic verification tools for MPI programs suffer from exponential sched-ule explosion, especially when multiple non-deterministic receive statements are issued by a process. In this paper, we focus on detecting message-orphaning deadlocks within MPI programs. For this analysis target, we describe a sound heuristic that helps avoid schedule explosion in most practical cases while not missing deadlocks in practice. Our method hinges on initially computing the po-tential non-deterministic matches as conventional <b>dynamic</b> <b>analyzers</b> do, but then including only the entries which are found relevant to cause a refusal deadlock (essentially a macroscopic-view persistent-set reduction technique). Experimen-tal results are encouraging. ...|$|R
30|$|Finally, the {{viscosity}} {{results suggest}} the foam generated with Blend- 1 exhibits higher viscosities {{compared to that}} obtained with the amphoteric surfactant. To the contrary the <b>dynamic</b> <b>analyzer</b> suggested the foam generated with the amphoteric surfactant is similar if not slightly better (refer to Table  3 and Fig.  5).|$|E
40|$|Two {{automated}} {{software verification}} and testing systems were developed {{for use in}} the analysis of computer programs. An evaluation of the static analyzer DAVE and the <b>dynamic</b> <b>analyzer</b> PET, which are used in the analysis of FORTRAN programs on Control Data (CDC) computers, are described. Both systems were found to be effective and complementary, and are recommended for use in testing FORTRAN programs...|$|E
40|$|In {{this paper}} we propose {{comprehensive}} security architecture called VICTOR to deal with different types of attacks on virtual machines. Our model {{takes into account the}} specific characteristics of operating system and applications running in each virtual machine (VM) at a fine granular level to deal with the attacks. Our architecture has several components such as entity validation, intrusion detection engine and <b>dynamic</b> <b>analyzer.</b> The entity validation component is used in the detection of attack traffic with spoofed source address, secure logging, and capturing information of the operating system and applications running in the virtual machines. The intrusion detection engine component is used for detection of known attacks and suspicious behaviour by monitoring the incoming and outgoing traffic of virtual machines. The <b>dynamic</b> <b>analyzer</b> is used for detection and validation of suspicious processes, detection of zero day attacks and fine granular isolation of malicious process or application that is generating the attack traffic. 4 page(s...|$|E
30|$|For modeling, {{we use a}} {{new type}} of {{constitutive}} relations describing the thermomechanical behavior of amorphous polymers over a wide temperature range. To define the model parameters for lightly-linked epoxy resin a series of experiments was conducted using the <b>Dynamic</b> Mechanical <b>Analyzer.</b>|$|R
5000|$|... #Caption: Diagram {{showing the}} flow cell {{cross-section}} perpendicular to the optical axis in a <b>dynamic</b> imaging particle <b>analyzer.</b>|$|R
40|$|Gallium (Ga) {{particles}} dispersed in {{polymethyl methacrylate}} were prepared by ultrasonic vibration and sedimentation method, and the melting behavior of Ga particles was studied by internal friction method via <b>dynamic</b> mechanical <b>analyzer</b> (DMA). Four internal friction peaks, related to phase transitions from solid α-, β-, γ - and δ-Ga phases to liquid are observed, and {{the mechanism of}} internal friction peaks was discussed. Gallium (Ga) particles dispersed in polymethyl methacrylate were prepared by ultrasonic vibration and sedimentation method, and the melting behavior of Ga particles was studied by internal friction method via <b>dynamic</b> mechanical <b>analyzer</b> (DMA). Four internal friction peaks, related to phase transitions from solid α-, β-, γ - and δ-Ga phases to liquid are observed, and the mechanism of internal friction peaks was discussed...|$|R
40|$|Abstract: This paper {{describes}} the dynamic characteristics of column type 6 -component force-moment sensors with force components Fx, Fy, Fz and moment components Mx, My, Mz. We have evaluated the dynamic {{characteristics of the}} force-moment sensors by using a shaker system and a multi-channel <b>dynamic</b> <b>analyzer</b> system. It reveals that the sensitivity decreases as the frequency increases except for the Fz component and that the sensor shows almost 90 o symmetry due to its geometry...|$|E
30|$|Spreitzenbarth et al. (2013) {{proposed}} Mobile-Sandbox, {{static and}} <b>dynamic</b> <b>analyzer</b> for Android applications, like in AASandbox. In the static analysis phase, Mobile-Sandbox parsed a manifest file, decompiled the application, and checked whether suspicious permissions are used or not. In the dynamic analysis phase, they executed the application on Droidbox, logged every {{operation of the}} application, and recorded native library calls executed by processes. They extracted native library calls by exploiting (ltrace 1997); ltrace is executed after installation process is completed.|$|E
40|$|This master thesis {{deals with}} the design and {{implementation}} of <b>dynamic</b> <b>analyzer</b> of parametrized contracts. In {{the first part of}} the thesis, the problematics of testing of parallel programs are discussed and issues when dealing with parallelism are described. Further, methods how to reveal concurrency bugs via dynamic analysis are described, in particular FastTrack and Contract validator. The second part of the thesis proposes an extension for RoadRunner framework and SearchBestie platform for contract validator with parameters...|$|E
40|$|Program {{analysis}} {{techniques and}} tools {{are essential to}} the development process because of the support they provide in detecting errors and deficiencies at different phases of development. The types of information rendered through analysis includes the following: statistical measurements of code, type checks, dataflow analysis, consistency checks, test data,verification of code, and debugging information. Analyzers can be broken into two major categories: dynamic and static. Static analyzers examine programs with respect to syntax errors and structural properties., This includes gathering statistical information on program content, such as the number of lines of executable code, source lines. and cyclomatic complexity. In addition, static analyzers provide the ability to check for the consistency of programs with respect to variables. <b>Dynamic</b> <b>analyzers</b> in contrast are dependent on input and the execution of a program providing the ability to find errors that cannot be detected through the use of static analysis alone. Dynamic analysis provides information on the behavior of a program rather than on the syntax. Both types of analysis detect errors in a program, but <b>dynamic</b> <b>analyzers</b> accomplish this through run-time behavior. This paper focuses on the following broad classification of dynamic analyzers: 1) Metrics; 2) Models; and 3) Monitors. Metrics are those analyzers that provide measurement. The next category, models, captures those analyzers that present the state of the program to the user at specified points in time. The last category, monitors, checks specified code based on some criteria. The paper discusses each classification and the techniques that are included under them. In addition, the role of each technique in the software life cycle is discussed. Familiarization with the tools that measure, model and monitor programs provides a framework for understanding the program's dynamic behavior from different, perspectives through analysis of the input/output data...|$|R
40|$|AbstractIn {{the present}} study, the damping {{behavior}} of hybrid composites {{has been investigated}} using <b>dynamic</b> mechanical <b>analyzer</b> (DMA). The composites were fabricated with 2, 4, 6, and 8 % by weight of rice husk ash (RHA) and SiC in equal proportions using two stage stir casting process. Damping measurements of all the specimens were obtained by <b>dynamic</b> mechanical <b>analyzer</b> (DMA) at different frequencies in air atmosphere. Scanning electron microscope (model JSM- 6610 LV) was used to study the microstructural characterization of the hybrid composites. It was observed that the dislocation density, which results from the thermal mismatch between the reinforcement and the matrix and the porosity of composites, has a great influence on the damping capacity of hybrid composites. The dislocation damping mechanisms were discussed {{with regards to the}} Granato–Lucke theory...|$|R
40|$|Shape memory {{characteristics}} of woven glass and carbon fiber fabric reinforced epoxy resin-based composites were assessed in bending mode using a <b>dynamic</b> mechanical <b>analyzer.</b> The reinforcement strongly improved the recovery stress but impaired the bending deformability. Composites with asymmetric fabric lay-up showed better performance when the reinforced section experienced local tension than compression during flexural loading...|$|R
40|$|This paper {{presents}} {{experimental measurement}} techniques for the characteristics {{and performance of}} an asymmetric disk-type ultrasonic motor with single-phase current drive. A single-phase driving circuitry with a constant-current output is proposed to provide a steady driving current for the motor's stator to maintain the driving frequencies at resonant and antiresonant frequencies of the stator. Experimental results obtained from the laser vibrometer, <b>dynamic</b> <b>analyzer,</b> and photodetector are employed to investigate and discuss the characteristics and speed servoing performance of the motor with its proposed driver and a simple proportional-integral (PI) speed controller via a digital signal processor (DSP) ...|$|E
40|$|AbstractWe {{consider}} {{the characteristics of}} sequential PROLOG programs using static and dynamic analyzers. They were developed to analyze ICOT-developed PROLOG programs and to collect various data items for studying program characteristics. Thirty-nine programs were statistically analyzed; two of these were also analyzed dynamically. The static analyzer is written in DEC- 10 PROLOG. It simply reads a program {{from the beginning and}} outputs various types of information about the program. The <b>dynamic</b> <b>analyzer</b> is also written in DEC- 10 PROLOG. It executes a program that can be executed in parallel by providing a goal for the program. During the execution, it collects various data including those obtained in the static analysis...|$|E
40|$|Within {{the field}} of {{computer}} software, simulation and verification are complementary processes. Simulation methods {{can be used to}} verify software by performing variable range analysis. More general verification procedures, such as those described in this paper, can be implicitly, viewed as attempts at modeling the end-product software. From software requirement methodology, each component of the verification system has some element of simulation to it. Conversely, general verification procedures can be used to analyze simulation software. A <b>dynamic</b> <b>analyzer</b> is described which can be used to obtain properly scaled variables for an analog simulation, which is first digitally simulated. In a similar way, it is thought that the other system components and indeed the whole system itself have the potential of being effectively used in a simulation environment...|$|E
40|$|Pb {{nanoparticles}} {{embedded in}} an Al matrix were prepared by ball milling {{and the internal}} friction behavior associated with the melting of Pb nanoparticles was studied by means of <b>dynamic</b> mechanical <b>analyzer.</b> The height H of internal friction peak {{was found to be}} dependent on the frequencies and heating rates, which indicates a first-order phase transition of Pb melting. The internal friction behavior of Pb nanoparticles is discussed with respect to the surface melting. Pb nanoparticles embedded in an Al matrix were prepared by ball milling and the internal friction behavior associated with the melting of Pb nanoparticles was studied by means of <b>dynamic</b> mechanical <b>analyzer.</b> The height H of internal friction peak was found to be dependent on the frequencies and heating rates, which indicates a first-order phase transition of Pb melting. The internal friction behavior of Pb nanoparticles is discussed with respect to the surface melting...|$|R
50|$|The WLF {{equation}} {{is a consequence}} of time-temperature superposition (TTSP), which mathematically is an application of Boltzmann's superposition principle. It is TTSP, not WLF, that allows the assembly of a compliance master curve that spans more time, or frequency, than afforded by the time available for experimentation or the frequency range of the instrumentation, such as <b>dynamic</b> mechanical <b>analyzer</b> (DMA).|$|R
40|$|Metamorphic viruses {{transform}} their code as they propagate, thus evading detection by static signature-based virus scanners, while keeping their functionality. They use code obfuscation techniques to challenge deeper static analysis {{and can also}} beat <b>dynamic</b> <b>analyzers,</b> such as emulators, by altering their behavior. To achieve this, metamorphic viruses use several metamorphic transformations, including register renaming, code permutation, code expansion, code shrinking, and garbage code insertion. In this thesis, an in-depth analysis of metamorphic viruses is presented, along with the techniques they use to {{transform their}} code to new generations. In order to give {{a better understanding of}} metamorphic viruses, a general discussion on malicious code and detection techniques is given first. Then, the description of several techniques to detect metamorphic viruses is given. A fair number of papers on metamorphic viruses exists in the literature, but no one is a complete discussion of all metamorphic techniques and detection methods. This thesis aims at a complete discussion of all metamorphic techniques used b...|$|R
40|$|This paper {{highlights}} a {{case study}} where about 950 nos. of cast in-situ bored piles were used as a deep foundation systm to support a large manufacturing plant in suburban Kuching, Sarawak, Malaysia. Localised moderately-strong metamorphic megagreywacke and extrusive igneous andesite are found occurring together with the more dominant but erractic, metamorphic phyllite due to regional metamorphism. Such combination of geology requires stringent quality control during construction to ensure sufficient bored pile socketing lengths into the mostly erratic phyllite. Fo this very reason, 33 nos. of Pile <b>Dynamic</b> <b>Analyzer</b> (PDA) and 4 nos. of Maintained Load tests were carried out to determine the ultimate static capacities of the installed bored piles. The PDA and Maintained Load test results show that all the tested piles meet the pre-determined design working loads...|$|E
40|$|The Java {{language}} {{supports the}} use of monitors, sockets, and remote method invocation for concurrent programming. Also, Java classes can be defined to simulate other types of concurrent constructs. However, concurrent Java programs, like other concurrent programs, are difficult to specify, design, code, test and debug. In this paper, we describe {{the design of a}} toolset, called JaDA (Java <b>Dynamic</b> <b>Analyzer),</b> that provides testing and debugging tools for concurrent Java programs. To collect run-time information or control program execution, JaDA requires transformation of a concurrent Java program into a slightly different Java program. We show that by modifying Java classes that support concurrent programming, Java application programs only need minor modifications. We also present a novel approach to managing threads that are needed for testing and debugging of concurrent Java programs. 1...|$|E
40|$|In {{this paper}} {{presents}} an experimental and numerical investigation of the natural frequency of composite material cantilever plates. The stacking sequence of tbe composite plate is Quasi-isotropic laminated plate is [2 (0 j/± 45 °/ 2 (90 °) ] " The plate was subjected to incremental cuts and tests to determine changes in new modal properties. The study included white noise and sinusoidal dynamic testing techniques and a virtual instrument <b>dynamic</b> <b>analyzer.</b> In this study also, determining the resonant frequencies of the undamaged and damaged plate, and evaluating the capabilities of piezoelectric ceramics (PZT's) for fault detection based on their sensitivity and accuracy changes in modal parameters. Numerical results are obtained using finite element software for the composite materials plates. The experimental and numerical results are very good agreement for the composite material cantilever plates with and without damage...|$|E
40|$|Purpose: To {{evaluate}} {{parameters and}} dynamic corneal densitometry {{with a new}} <b>dynamic</b> Scheimpflug <b>analyzer</b> (Corvis ST) in eyes having small-incision lenticule extraction (SMILE). Setting: Qvision, Vithas Virgen del Mar Hospital, Almería, Spain. Design: Retrospective case series. Methods: The study comprised eyes from the same institution having small-incision lenticule extraction surgery. Preoperative and 1 -month postoperative measurements were taken. Results: Forty-three eyes were evaluated. The mean difference in intraocular pressure (IOP) and biomechanically corrected IOP before and after surgery was 2. 24 mm Hg ± 1. 26 mm (SD) (P =. 001) and 0. 57 ± 1. 77 mm Hg (P =. 04), respectively. All <b>dynamic</b> Scheimpflug <b>analyzer</b> parameters changed significantly after surgery (P <. 05). The variation in each parameter was correlated with the removed corneal thickness (P <. 05), except the stiffness parameter at the first applanation (P =. 15). None of the 4 dynamic corneal densitometry parameters changed significantly {{as a result of}} surgery (P ≥. 29). A new sign, described as an inclined brightness fringe moving through the corneal periphery, appeared preoperatively in eyes with higher dynamic corneal densitometry. This sign was more prevalent postoperatively (48. 8 % versus 72. 1 %) (P =. 04). Conclusions: The biomechanically corrected IOP measured after surgery with the <b>dynamic</b> Scheimpflug <b>analyzer</b> showed better agreement with the preoperative values than IOP. The stiffness parameter was not dependent on the amount of removed corneal thickness. A new sign correlated with dynamic corneal densitometry was found and might be related to changes in corneal hydration and biomechanics...|$|R
40|$|Performing {{accurate}} and repeatable low frequency noise measurement {{is critical for}} modeling and simulation of flicker noise. Through the {{accurate and}} repeatable on-wafer measurement, low frequency noise characteristics of the 0. 18 mµ n-MOSFETs are discussed. And on-wafer flicker noise measurement system is presented. The on-wafer measurement system consists of cascade probe station, low noise current amplifier (SR 570), and <b>dynamic</b> signal <b>analyzer</b> (HP 35670 A) ...|$|R
40|$|A new USB powered {{portable}} 4 -channel {{real time}} <b>Dynamic</b> Signal <b>Analyzer</b> and its automotive applications are described. The design and architecture {{lend themselves to}} real time NVH measurements and analysis in the field, in-vehicle or on production lines. Built-in signal conditioning provides for direct sensor power while the embedded DSP provides for signal processing on-board. Performance and implementation of FFT, digital filters and order analyses are presented...|$|R
40|$|The tool of {{distributed}} {{computer environment}} simulation and analysis is described. The key {{features of this}} tool are: the possibility of both quantitative and algorithmic analysis of system to be modeled; the time complexity estimation subsystem which helps to avoid the instruction-level simulation of target computer system. A model development language overview is presented. Certain {{attention is paid to}} the algorithmic analysys and specification features along with the technology of model development. Keywords: Simulation, performance analysis, distributed computer systems, temporal logic 1. Introduction The DYANA system (<b>DYnamic</b> <b>ANAlyzer)</b> is the software system which is proposed to help analyze distributed computer environment operation. The design and development of the system were aimed at the following: ffl to develop the tool for describing software behavior for distributed systems as well as hardware of such systems; ffl to develop the tool for systems performance estimatio [...] ...|$|E
40|$|The {{tool for}} {{distributed}} computer environment simulation and analysis is described. Within the DYANA environment, both quantitative and algorithmic analysis of {{system to be}} modeled are possible. A unique model description is used {{for each type of}} analysis. The execution time estimation of the modeled program can be done without the instruction-level simulation of target computer system. The DYANA architecture and the model development language overview is presented. Keywords: Performance analysis, distributed computer systems, simulation, temporal logic 1. Introduction The DYANA system (<b>DYnamic</b> <b>ANAlyzer)</b> is the software system which is intended to analyze distributed computer environment operation. The design and development of the system were aimed at the following: ffl to develop the tool for describing software behavior for distributed systems as well as hardware of such systems; ffl to develop the tool for systems performance estimation under the different tradeoffs between ha [...] ...|$|E
40|$|We present ABETS, an assertion-based, <b>dynamic</b> <b>analyzer</b> {{that helps}} {{diagnose}} errors in Maude programs. ABETS uses slicing to automatically create reduced versions {{of both a}} run's execution trace and executed program, reduced versions in which any information that is not relevant to the bug currently being diagnosed is removed. In addition, ABETS employs runtime assertion checking to automate the identification of bugs so that whenever an assertion is violated, the system automatically infers accurate slicing criteria from the failure. We summarize the main services provided by ABETS, which also include a novel assertion-based facility for program repair that generates suitable program fixes when a state invariant is violated. Finally, we provide an experimental evaluation that shows the performance and effectiveness of the system. This paper is under consideration for publication in TPLP. Comment: Paper presented at the 32 nd International Conference on Logic Programming (ICLP 2016), New York City, USA, 16 - 21 October 2016, 15 pages, LaTeX, 3 PDF figure...|$|E
40|$|During {{software}} development, bugs are {{costly and}} difficult to find and fix. There are many static and <b>dynamic</b> <b>analyzers</b> now available that analyze the source code to identify possible defects. For higher quality software, static analysis and dynamic analysis {{should be used in}} a complementary manner. We present a comparative study of various static analysis tools for JAVA and C and discuss the techniques used by them. We explore the concept of partitioning a program such that the partitions can be analyzed separately. With such partitioning, potentially different analysis techniques can be applied to different program partitions, with each analysis having to deal with reduced code which can increase its effectiveness. Our experiments show that partitioning can indeed increase the effectiveness of static analysis. Our initial experience in using testing data for partitioning and applying static analysis only on the complementary partition indicates that it results in detection of more errors which might have gone unnoticed otherwise. Finally we discuss the merits and demerits of using our approach on some of these tools...|$|R
40|$|Abstract. The <b>dynamic</b> {{mechanical}} <b>analyzer</b> (DMA) {{was applied}} to investigate the damping properties of Mg- 6 Zn- 0. 6 Zr alloys. The {{results show that the}} as-cast Mg- 6 Zn- 0. 6 Zr alloy exhibits higher strain amplitude independent damping performance than that of as-homogenized. The strain amplitude dependent damping of the as-homogenized has the best damping performance with the strain amplitude from 3 × 10 - 5 to 6 × 1...|$|R
30|$|The thermal {{stability}} of barrier materials {{can be studied}} by thermal analysis using thermo gravimetric analyzer (TGA), thermo mechanical <b>analyzer</b> (TMA) or <b>dynamic</b> thermal <b>analyzer</b> (DMTA) techniques. Mass loss measurements at appropriate incident heat fluxes relate to volatilization and initial char formation, full char development, and subsequent char oxidation ([Kandola & Horrocks 2000]). Resistance to char oxidation is a particularly desirable characteristic, since deterioration would eventually result in {{a failure of the}} barrier material to protect the PUF core.|$|R
