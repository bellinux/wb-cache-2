19|2212|Public
2500|$|Even {{bootstrapping}} of the system, or <b>Initial</b> <b>Program</b> <b>Load</b> (IPL) in IBM nomenclature, {{is carried}} out by channels, although the process is partially simulated by the CPU (through an [...] "implied" [...] Start I/O [...] instruction, an [...] "implied" [...] Channel Address Word [...] at location 0 and an [...] "implied" [...] channel program [...] , also at location 0). Command chaining is assumed, so the [...] "implied" [...] CCW at location 0 falls through to {{the continuation of the}} channel program at locations 8 and 16, and possibly elsewhere should one of those CCWs be a transfer-in-channel (TIC).|$|E
5000|$|A {{bootstrap}} process (a {{process called}} <b>Initial</b> <b>Program</b> <b>Load</b> or IPL) ...|$|E
5000|$|... #Caption: <b>Initial</b> <b>program</b> <b>load</b> {{punched card}} for the IBM 1130 (1965) ...|$|E
5000|$|<b>Initial</b> <b>program</b> <b>loading</b> is {{typically}} done from a tape, a card reader, or a disk drive. Generally, {{the operating system}} was loaded from a disk drive; IPL from tape or cards was used only for diagnostics or for installing an operating system on a new computer.|$|R
40|$|Initial-computer-program-loading system {{provides}} startup information to all embedded data processors (EDP's) in general-purpose computer system. Remote processors given image of startup diskette so real local diskette and drive unneeded. System less complex and equipment costs less. Additional benefit, <b>initial</b> <b>program</b> <b>loading</b> tests bus. If boot-up program transmitted correctly, bus {{assumed to be}} operating properly...|$|R
50|$|Systems {{without an}} {{operating}} system were intended for users needing dedicated applications {{that did not}} require the full capabilities of either OS. Applications were built using a set of standalone programs, called the Base Program Preparation Facilities, consisting of a macro assembler, a link editor and some basic utilities. A set of modules, called Control Program Support (CPS), was linked with the application to provide task management, data processing input/output support and <b>initial</b> <b>program</b> <b>loading</b> for both disks and diskettes.|$|R
5000|$|High flexibility: the bootmanager can boot every {{operating}} system {{which can be}} booted by the <b>Initial</b> <b>Program</b> <b>Load.</b>|$|E
50|$|In the IBM System/360 and its successors, {{including}} the current z/Architecture machines, the boot process {{is known as}} <b>Initial</b> <b>Program</b> <b>Load</b> (IPL).|$|E
50|$|Dynamic Configuration Changes - Table size, system characteristics, and device {{configuration}} {{changes can}} be enabled and take effect after the next <b>Initial</b> <b>Program</b> <b>Load</b> (IPL) sequence, rather than during system generation.|$|E
25|$|A stored-program {{computer}} {{requires an}} <b>initial</b> computer <b>program</b> stored in its read-only memory to boot. The boot {{process is to}} identify and initialize {{all aspects of the}} system, from processor registers to device controllers to memory contents. Following the initialization process, this <b>initial</b> computer <b>program</b> <b>loads</b> the operating system and sets the program counter to begin normal operations.|$|R
50|$|In 1967, IBM tasked their San Jose, California {{development}} laboratory {{to develop}} a reliable and inexpensive system for loading microcode into their System/370 mainframes in a process called <b>Initial</b> Control <b>Program</b> <b>Load</b> (ICPL). The System/370 was IBM's first computer system family to make extensive usage of volatile read/write semiconductor memory for microcode, so for most models, whenever the power was turned on, the microcode had to be loaded (System/370's predecessor, System/360, generally used non-volatile read-only memory for microcode). IBM also wanted inexpensive media that could be sent out to customers with software updates.|$|R
5000|$|... #Caption: IBM System/3 console {{from the}} 1970s. <b>Program</b> <b>load</b> {{selector}} switch is lower left; <b>Program</b> <b>load</b> switch is lower right.|$|R
5000|$|<b>Initial</b> <b>Program</b> <b>Load</b> (IPL)PoOps is {{a process}} for loading a program when there isn't a loader {{available}} in storage, usually because the machine was just powered on or to load an alternative operating system. This process is sometimes known as Booting.|$|E
5000|$|Unlike the IBM 360, where a booting device {{could be}} {{selected}} from the system console, an IBM 1130 could only be [...] "booted" [...] (IPL'd: <b>Initial</b> <b>Program</b> <b>Load)</b> from an external device: a card reader or a paper tape reader.|$|E
50|$|In OS/360 load modules {{could be}} {{permanently}} loaded at <b>Initial</b> <b>Program</b> <b>Load</b> (IPL) time {{into an area}} of real storage known as the Link Pack Area (LPA). In SVS the LPA was split into three areas, each of which was searched in turn.|$|E
40|$|The Commission on Teacher Credentialing (Commission) is reorganizing its {{process for}} {{reviewing}} <b>initial</b> <b>program</b> proposals. Historically, {{the review of}} <b>initial</b> <b>program</b> proposals (program narrative addressing the adopted standards and supporting documentation) has been facilitated by staff from the Professional Services Division (PSD) and organized separately {{by the type of}} prospective credential program. To provide institutions specific dates when <b>initial</b> <b>program</b> proposals will be read, reduce delays in the review of <b>initial</b> <b>program</b> proposals, and to coordinate the necessary steps in reviewing a prospective program proposal, Commission staff has developed a comprehensive <b>initial</b> <b>program</b> review process that will support the timely review of all prospective <b>program</b> proposals. <b>Initial</b> <b>Program</b> Review (IPR) Beginning in February 2010, the staff will facilitate a two-day meeting on a monthly basis where all <b>initial</b> <b>program</b> proposals that have been received in the prior month will be reviewed. By coordinating the <b>Initial</b> <b>Program</b> Review (IPR) across all types of credential programs, but continuing to assign individuals to review programs in which they have experience, staff can reduce duplicative work of scheduling meetings, contacting individuals to review the submission, and arranging the travel and lodging for the reviewers. PSD staff is now publishing the dates for the IPR for February 2010 through July 2010. They are...|$|R
5000|$|... HIGH SCHOOL : Three -Year <b>Initial</b> <b>Program</b> April 2004 to April 2007 dated March 28, 2004. -EDUCATION : Three -Year <b>Initial</b> <b>Program</b> April 2004 to April 2007 dated March 28, 2004.|$|R
50|$|IBM's {{competitors}} {{also offered}} single button <b>program</b> <b>load.</b>|$|R
50|$|Remote <b>Initial</b> <b>Program</b> <b>Load</b> (RIPL or RPL) is a {{protocol}} for starting {{a computer and}} loading its operating system from server via a network. Such a server runs a network operating system such as LAN Manager, LAN Server, Windows NT Server, Novell NetWare, Solaris or Linux.|$|E
50|$|DOS-VS allowed up {{to seven}} {{concurrent}} programs, although five or six was a more common number due to the smaller scale of the hardware usually hosting DOS systems. Both DOS and DOS-VS allow the number of partitions to be set at IPL (<b>Initial</b> <b>Program</b> <b>Load),</b> the IBM term for Boot load.|$|E
50|$|The 711 was {{relatively}} slow and magnetic tape was much faster, {{so it was}} common for 7000 series installations to include an IBM 1401, with its high speed peripherals, to do card-to-tape and tape-to-line-printer operations off-line, with the 711 mainly used for <b>initial</b> <b>program</b> <b>load</b> of operating systems and diagnostics.|$|E
50|$|IBM's {{strategic}} {{transaction processing}} system, CICS (1970s onwards) uses dynamic loading extensively both for its kernel and for normal application <b>program</b> <b>loading.</b> Corrections to application programs {{could be made}} offline and new copies of changed <b>programs</b> <b>loaded</b> dynamically without needing to restart CICS (which can, and frequently does, run 24/7).|$|R
5000|$|A Job Control <b>Program</b> <b>loaded</b> by {{the monitor}} between jobs handled job setup.|$|R
5000|$|Automatic Initialization. High-speed radar <b>programs</b> <b>loading</b> from ROCS computer. (Raymond Cassette is removed) ...|$|R
50|$|All {{except the}} {{earliest}} digital computers are built with {{some form of}} minimal built-in loader, which loads a program or succession of programs from a storage medium, which then operate the computer. Initially a read-only medium such as punched tape or punched cards was used for <b>initial</b> <b>program</b> <b>load.</b> With the introduction of inexpensive read-write storage, read-write floppy disks and hard disks were used as boot media.|$|E
5000|$|Users log into VM, {{providing}} a userid and password, and then boot their own virtual machine. This {{can be done}} by issuing the command [...] "IPL CMS" [...] ("IPL" [...] = <b>initial</b> <b>program</b> <b>load,</b> traditional IBM jargon for booting a machine); though this is normally done automatically for the user. Personal customization is done by a standard shell script file named [...] "PROFILE EXEC", which sets up user-specified environmental defaults, such as which disks and libraries are accessed.|$|E
50|$|Partitions may {{be either}} static, that is defined at <b>Initial</b> <b>Program</b> <b>Load</b> (IPL) or boot time {{or by the}} {{computer}} operator, or dynamic, that is automatically created for a specific job. IBM System/360 Operating System Multiprogramming with a Fixed Number of Tasks (MFT) {{is an example of}} static partitioning, and Multiprogramming with a Variable Number of Tasks (MVT) is an example of dynamic. MVT and successors use the term region to distinguish dynamic partitions from static ones in other systems.|$|E
50|$|The {{following}} <b>program</b> <b>loads</b> the C POSIX {{library and}} {{uses it to}} call the standard mkdir function.|$|R
5000|$|When {{launched}} with administrator privileges, the <b>program</b> <b>load</b> {{in memory}} two files containing the attackers' demands : ...|$|R
5000|$|... a {{paper-tape reader}} (1000cps) for data and (<b>initial)</b> <b>program</b> input, ...|$|R
5000|$|Even {{bootstrapping}} of the system, or <b>Initial</b> <b>Program</b> <b>Load</b> (IPL) in IBM nomenclature, {{is carried}} out by channels, although the process is partially simulated by the CPU (through an [...] "implied" [...] Start I/O SIO [...] instruction, an [...] "implied" [...] Channel Address Word CAW [...] at location 0 and an [...] "implied" [...] channel program CCW [...] , also at location 0). Command chaining is assumed, so the [...] "implied" [...] CCW at location 0 falls through to {{the continuation of the}} channel program at locations 8 and 16, and possibly elsewhere should one of those CCWs be a transfer-in-channel (TIC).|$|E
5000|$|The {{boot process}} for the 2960 Series is worthy of a special mention: the OCP {{contained}} a mini OPER terminal and a cassette deck. At boot, the OCP would perform its <b>Initial</b> <b>Program</b> <b>Load</b> (IPL) from the nominated IPL device [...] The IPL code provided the means for the OCP to discover the system's hardware configuration, by enquiring down the Stream(s), Trunk(s) and Port(s) to find the default or manually elected boot device for the microcode set and/or Operating System to be booted. This process was called a GROPE or General Reconnaissance Of Peripheral Equipment. The cassette load method also allowed engineering staff to load and execute diagnostic software.|$|E
50|$|During <b>initial</b> <b>program</b> <b>load</b> (IPL) {{of current}} MVS systems, the Nucleus Initialization Program (NIP) reads {{necessary}} {{information from the}} I/O Definition File (IODF) and uses it to build the UCBs. The UCBs are stored in system-owned memory, in the Extended System Queue Area (ESQA). After IPL completes, UCBs are owned by Input/Output Support. Some of the information stored in the UCB are: device type (disk, tape, printer, terminal, etc.), address of the device (such as 1002), subchannel identifier and device number, channel path ID (CHPID) which defines {{the path to the}} device, for some devices the volume serial number (VOLSER), and a large amount of other information, including OS Job Management data.|$|E
50|$|The {{following}} <b>program</b> <b>loads</b> {{the local}} C standard library implementation and {{uses it to}} call the printf function.|$|R
50|$|The 2922 had no disk, however {{magnetic}} core had {{the property of}} retaining <b>programs</b> <b>loaded</b> from cards thru power on-off cycles.|$|R
50|$|The Datasette's {{speed was}} very slow (about 300 baud). <b>Loading</b> a large <b>program</b> at normal speed could {{take up to}} 30 minutes in extreme cases. Many European {{software}} developers wrote their own fast tape-loaders which replaced the internal KERNAL code in the C64 and offered loading times more comparable to disk drive speeds. Novaload {{was perhaps the most}} popular tape-loader used by British and American software developers. Early versions of Novaload had the ability to play music while a <b>program</b> <b>loaded</b> into memory, and was easily recognizable by its black border and digital bleeping sounds on loading. Other fast-loaders included load screens, displaying computer artwork while the <b>program</b> <b>loaded.</b> More advanced fast-loaders included minigames for the user to play while the <b>program</b> <b>loaded</b> from cassette. One such minigame fastloader was Invade-a-Load.|$|R
