103|504|Public
5|$|The Tu-70 was {{completed}} in October 1946, but did not make its first flight until 27 November. It began manufacturer's trials in October, but an engine fire on the fourth flight caused it to make a crash-landing. This was traced to a <b>design</b> <b>defect</b> in the American-built supercharger-control system, but identifying the problem and fixing it prolonged the manufacturer's trials through October 1947. It was redesignated as the Tu-70 when it went through the State acceptance trials which ended on 14 December. It met all the design goals, but was not accepted for production as all the factories were already committed to building aircraft with a higher priority and Aeroflot had no requirement for the type, being fully satisfied with its existing Lisunov Li-2 and Ilyushin Il-12 airliners.|$|E
25|$|On February 29, 2008, {{the launch}} service {{provider}} International Launch Services announced a contract which includes {{launch of the}} SIRIUS FM-6 satellite on a Proton Breeze M rocket. The launch planned for March 6, 2012, was canceled due to concerns with a <b>design</b> <b>defect</b> in the solar panel deployment. The Radiosat 6 (FM-6) satellite was launched on October 25, 2013, and will {{be put in a}} geostationary orbit around 115 degrees west which would service the western half of the United States.|$|E
25|$|The Royal Netherlands Navy's (RNN) Naval Aviation Service {{operated}} {{fleet of}} 24 Lynx {{for a total}} of 36 years, entering service in 1976 and phased out in 2012 after being extensively used. These performed search and rescue, anti-submarine warfare, anti-surface warfare and special forces support tasks while operating from the flightdecks of most RNN vessels during this period. In 1993, the RNN fleet were upgraded to a common Lynx SH-14D standard. In 1999, a <b>design</b> <b>defect</b> in the rotor-head used on some Lynx aircraft was responsible for the loss of a Dutch aircraft in 1999; this led to a number of Lynx worldwide to be temporarily grounded until retrofitted with new titanium rotor-heads. On 28 February 2011, a Dutch Lynx and three navy personnel were captured by Libyan forces while performing an evacuation mission inside the country. On 19 September 2012, the RNN performed its final operational Lynx flight.|$|E
5000|$|A {{closely related}} test is risk-utility test. Traditionally, the risk-utility {{test was used}} for <b>design</b> <b>defects,</b> while the {{consumer}} expectation test was applied to manufacturing defects. However, some jurisdictions apply the consumer expectation test to <b>design</b> <b>defects</b> as well. See Calles v. Scripto-Tokai Corp., 2007 WL 495315 (Ill. Feb. 16, 2007).|$|R
40|$|Maintenance is {{recognised}} as {{the most}} difficult and expansive activity of the software development process. Numerous techniques and processes have been proposed to ease the maintenance of software. In particular, several authors published <b>design</b> <b>defects</b> formalising “bad ” solutions to recurring design problems (e. g., anti-patterns, code smells). We propose a language and a framework to express <b>design</b> <b>defects</b> synthetically and to generate detection algorithms automatically. We show that this language is sufficient to describe some <b>design</b> <b>defects</b> and to generate detection algorithms, which have a good precision. We validate the generated algorithms on several programs. ...|$|R
5000|$|<b>Design</b> <b>defects</b> : The <b>design</b> {{of tobacco}} {{products}} defectively causes adverse health effects.|$|R
500|$|Some Hammond organs have {{an audible}} pop or click when a key is pressed. Originally, key click was {{considered}} a <b>design</b> <b>defect</b> and Hammond worked to eliminate or at least reduce it with equalization filters. However, many performers liked the percussive effect, {{and it has been}} accepted as part of the classic sound. Hammond research and development engineer Alan Young said, [...] "the professionals who were playing popular music [...] that the attack was so prominent. And they objected when it was eliminated." ...|$|E
2500|$|The {{theory of}} <b>design</b> <b>defect</b> was floated {{by the central}} {{government}} in its endeavour {{to do justice to}} the victims of the tragedy. Everyone else who was part of investigations into the case [...] "just toed the line of the central government....|$|E
2500|$|On September 17, 2012, {{a federal}} class action lawsuit was filed by California Leaf lessee Humberto Daniel Klee and Arizona Leaf owner David Wallak, accusing Nissan of concealing in its {{advertising}} that its Leaf vehicles have a <b>design</b> <b>defect</b> that {{causes them to}} prematurely lose battery life and driving range. The class action suit says that [...] "before purchase or lease, Nissan failed to disclose its own recommendations that owners avoid charging the battery beyond 80% in order to mitigate battery damage and failed to disclose that Nissan’s estimated 100 mile range {{was based on a}} full charge battery, which is contrary to Nissan’s own recommendation for battery charging." ...|$|E
5000|$|... {{monitoring}} {{products for}} manufacturing or <b>design</b> <b>defects,</b> highlighting safety concerns and monitoring safety recalls ...|$|R
40|$|Software {{engineers}} {{often need}} to identify in their systems “poor ” design choices—design defects—that hinder the development and maintenance, as opportunities of improvements and {{as a measure of}} the quality of their systems. However, the detection of <b>design</b> <b>defects</b> is difficult {{because of the lack of}} specifications and tools. We propose DECOR, a method to specify <b>design</b> <b>defects</b> systematically and to generate automatically detection algorithms. With this method, software engineers analyse and specify <b>design</b> <b>defects</b> at a high-level of abstraction using a unified vocabulary and a dedicated language for generating detection algorithms. To illustrate our method, in this paper, we specify 4 well-known <b>design</b> <b>defects,</b> the antipatterns Blob, Functional Decomposition, Spaghetti Code, and Swiss Army Knife and their 15 underlying code smells and we generate automatically their detection algorithms. We apply and validate the detection algorithms in terms of precision and recall and discuss the precision of these algorithms on 11 open-source object-oriented systems...|$|R
40|$|October 31, 2005 This catalog aims {{to provide}} a {{specification}} of some <b>design</b> <b>defects.</b> By <b>design</b> <b>defects,</b> we mean the two following categories of defects: <b>design</b> pattern <b>defects</b> [MOH 05] and antipatterns [BRO 98]. Code smells are not considered as <b>design</b> <b>defects</b> but we include them in this catalog because they represent indicators or symptoms {{of the presence of}} antipatterns. <b>Design</b> pattern <b>defects</b> are the distorted or degraded shapes of design patterns. We distinguish two types of <b>defects</b> related to <b>design</b> patterns, or design pattern defects: (1) distorted patterns and (2) degraded patterns. We define distorted patterns as micro-architectures similar but non-equal to these proposed by design patterns [GUÉ 01]. These patterns, following a design choice, have been altered in their structure and their class organization in order to response to specific constraints required by the environment. The degraded patterns are in the contrary bad design choices. An antipattern is a literary form that describes a common solution to a design pattern that rather leads to negative effects on quality [BRO 98]. Antipattern...|$|R
2500|$|In the Netherlands, the Dutch {{government}} grounded the 12 Dutch-registered CH 601 XLs on 24 October 2008. The {{planes were}} banned from flying pending {{an investigation into}} their structural strength, following the crash of a European variant of the design (Rotax powered and [...] maximum take-off weight) that killed two people. According to the Dutch government, since 2005 [...] "at least seven accidents with Zenith CH601 XL's have happened in which one or both wings have failed". Zenair Europe investigated these accidents, concluded that none are due to a <b>design</b> <b>defect</b> and, after a first-hand review of the wreckage, also rejected suggestions that the aircraft in the Dutch accident experienced a structural failure.|$|E
50|$|Excessive {{down-time}} {{is a type}} of <b>design</b> <b>defect</b> that impacts all large systems.|$|E
50|$|Due to a {{power adapter}} port <b>design</b> <b>defect,</b> HP-provided power adapter cannot fit flush, {{allowing}} the power adapter to come easily disconnected.|$|E
40|$|We define <b>design</b> <b>defects</b> as “poor ” design {{solutions}} that hinder {{the maintenance of}} programs. Thus, their detection and correction are important to improve the maintainability and {{reduce the cost of}} maintenance. The detection of <b>design</b> <b>defects</b> has been actively investigated by the community. However, their correction still remains a problem to solve. We propose a first method to correct these defects systematically using refactorings. Then, we introduce some challenges that our community must meet...|$|R
5000|$|Many requirements, architecture, and <b>design</b> <b>defects</b> are not {{uncovered}} {{and fixed}} until after significant {{effort has been}} wasted on their implementation.|$|R
5000|$|In {{aviation}} air safety, a tombstone mentality informally is {{a pervasive}} attitude of ignoring <b>design</b> <b>defects</b> until {{people have died}} because of them.|$|R
50|$|This model {{suffered}} from a <b>design</b> <b>defect</b> in its CPU wherein the date would often fail to change at midnight, especially when the batteries were fresh.|$|E
5000|$|On January 10, 1938, Northwest Airlines Flight 2, an L14H, crashed near Bozeman, Montana, due to {{structural}} failure {{caused by a}} <b>design</b> <b>defect,</b> killing all 10 passengers and crew on board.|$|E
50|$|Bruesewitz v. Wyeth, , is a United States Supreme Court {{case that}} decided whether {{a section of}} the National Childhood Vaccine Injury Act of 1986 preempts all vaccine <b>design</b> <b>defect</b> claims against vaccine manufacturers.|$|E
40|$|Abstract — Software Inspection is used {{to enhance}} {{software}} quality by detecting and removing software defects that mar software quality. Software <b>design</b> <b>defects</b> are <b>design</b> flaws which might not stop application from working but will hamper the process of extension and reuse of application. Software <b>design</b> <b>defects</b> manifest themselves {{in the form of}} AntiPatterns and Code Smells. In Software Inspection, we can detect Code Smells and Anti Patterns by using visualization or metrics based solution. But, currently there is no process that defines the steps to detect Code Smells and Anti Patterns by using Rule Based Checklist. In this paper, we propose Process-based Detection of Code Smells and Anti Patterns. We have defined Rule Set and Checklist for software <b>design</b> <b>defects</b> i. e. Code Smells and Anti Patterns and applied and validated the Rules set and Checklists on an industrial project...|$|R
30|$|Software {{failures}} or <b>design</b> <b>defects</b> affect software {{stability and}} reliability, and {{may result in}} safety incidents. Therefore, failures and defects can be avoided by providing sufficient aging information.|$|R
50|$|The joint {{investigation}} of this accident, and of BOAC 781 revealed manufacturer <b>design</b> <b>defects</b> and metal fatigue that resulted ultimately in the explosive decompression that caused both accidents.|$|R
50|$|Bruesewitz v. Wyeth, Inc., 561 F.3d 233 (3d Cir. 2009), affirmed 131 S. Ct. 1068 (2011): Smith {{held that}} plaintiff's negligent <b>design</b> <b>defect</b> claim was preempted by the National Childhood Vaccine Injury Act.|$|E
50|$|Ford contended {{the punitive}} damages on two grounds: 1) punitive damages are statutorily and constitutionally impermissible in <b>design</b> <b>defect</b> cases; and 2) {{there was no}} evidentiary support for a finding of malice or {{corporate}} responsibility for malice.|$|E
50|$|Transmission had {{a number}} of parts changed due to <b>design</b> <b>defect</b> that caused 2nd gear to slip and cause {{transmission}} failures. The input shaft {{and a number of other}} parts were upgraded and an internal service bulletin issued by Suzuki to its dealerships.|$|E
50|$|Software and <b>design</b> <b>defects</b> {{in certain}} models of {{consumer}} Minidisc player allow SCMS to be defeated. Professional-grade Minidisc systems costing several thousand US dollars may have SCMS disabled as standard.|$|R
5000|$|Carel J.J.M. Stolker and David I. Levine: Aviation {{products}} liability for manufacturing and <b>design</b> <b>defects.</b> In: The {{utilization of the}} world's air space and free outer space {{in the 21st century}} (2000) ...|$|R
40|$|Although {{processor}} {{design verification}} consumes ever-increasing resources, many <b>design</b> <b>defects</b> still slip into production silicon. In a few cases, such bugs have caused expensive chip recalls. To truly improve productivity, hardware bugs should be handled like system software ones, with vendors periodically releasing patches to fix hardware in the field. Based on {{an analysis of}} serious <b>design</b> <b>defects</b> in current AMD, Intel, IBM, and Motorola processors, this paper proposes and evaluates Phoenix — novel field-programmable on-chip hardware that detects and recovers from <b>design</b> <b>defects.</b> Phoenix taps key logic signals and, based on downloaded defect signatures, combines the signals into conditions that flag defects. On defect detection, Phoenix flushes the pipeline and either retries or invokes a customized recovery handler. Phoenix induces negligible slowdown, while adding only 0. 05 % area and 0. 48 % wire overheads. Phoenix detects all the serious defects that are triggered by concurrent control signals. Moreover, it recovers from most of them, and simplifies recovery for the rest. Finally, we present an algorithm to automatically size Phoenix for new processors. 1...|$|R
50|$|The National Transportation Safety has {{recognized}} {{the danger of}} rollovers, and the prevalence of rollovers {{as a result of}} the defect created by the design of many SUVs. NHTSA has actively campaigned against this <b>design</b> <b>defect</b> and has adopted and promoted its rollover safety and vehicle safety ratings, and has actively promoted the adoption of electronic stability control systems.|$|E
5000|$|The {{case was}} decided on February 22, 2011. The Court, in a 6-2 opinion by Justice Antonin Scalia, {{held that the}} [...] "plaintiffs <b>design</b> <b>defect</b> claims were {{expressly}} preempted by the Vaccine Act." [...] Thus, the court affirmed laws that vaccine manufacturers are not liable for vaccine-induced injury or death if they are [...] "accompanied by proper directions and warnings." ...|$|E
50|$|BOAC {{operated}} {{the first commercial}} jet service, from London to Johannesburg, in 1952 with the de Havilland Comet jetliner. This highly innovative aircraft travelled far faster and higher than the propeller aircraft, was much quieter, smoother, and had stylish blended wings containing hidden jet engines. However, due to a <b>design</b> <b>defect,</b> and use of aluminum alloys, the aircraft suffered catastrophic metal fatigue which led to several crashes.|$|E
40|$|Reducing <b>design</b> <b>defects</b> by {{proactive}} actions requires {{comprehensive understanding}} {{of how and why}} they happen. To achieve this, it is necessary to know the causal relationships of inherent factors, by which <b>design</b> <b>defects</b> arise. This paper represents a causal mechanism of defective design occurrence by considering interactions of underlying factors in designing process. The mechanism draws on the system approach to human errors to describe <b>defects</b> in <b>design</b> caused by designers' active failuresand failures of design reviews as defences to catch defects. It portrays the causal process of the failures with workplace factors and organizational factors as influencing factors. Workplace factors arise from designers' working conditions and include internal and external factors to the actors. Organizational factors comprise elements due to client and designer company's conditions. Then, two failure pathways are discussed to show how the factors lead to <b>design</b> <b>defects.</b> Two case studies are presented in this paper to clarify and explain the mechanism. Active Failures, Defective Design, Defences Failures, Human Error, Latent Factors, Mechanism, System Approach,...|$|R
30|$|Although {{the three}} {{classification}} methods of hidden failures appear different, {{all of them}} think over the classification from hardware and software, and then classified hidden failures by considering detailed factors like human behaviors and <b>design</b> <b>defects</b> of devices.|$|R
2500|$|... "the {{cumulative}} effect of all <b>design</b> <b>defects</b> and deficiencies in the design, construction and operations of nuclear power plants makes {{a nuclear power plant}} accident, in our opinion, a certain event. [...] The only question is when, and where.|$|R
