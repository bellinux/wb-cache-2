6|1|Public
5000|$|A {{basic set}} of file system {{commands}} and macros; a simple file naming convention, based on filename, filetype, and <b>filemode</b> (<b>filemode</b> = logical disk identifier or minidisk, {{a form of}} drive letter assignment) ...|$|E
5000|$|A1 is the <b>filemode</b> (default, {{indicating}} which disk {{the file}} is on) ...|$|E
5000|$|A CMS {{virtual machine}} can {{have up to}} ten minidisks {{accessed}} during one session. The user references the minidisks by a letter, part of a field called the <b>filemode.</b> The S disk contains CMS system files and is read-only; the Y disk is usually an extension of S. The read/write A disk contains user files such as customization data, program sources, and executables. Other drive letters B through Z can contain data {{as defined by the}} user. If a file is opened without a <b>filemode</b> letter specified (...) the disks will be searched in alphabetic order. The second character of the <b>filemode</b> is a number indicating read, write, and sharing attributes.|$|E
5000|$|Default <b>filemodes,</b> {{allowing}} disks to {{be searched}} in a fixed order ...|$|R
5000|$|CP/CMS uses drive {{letters to}} {{identify}} minidisks {{attached to a}} user session. A full file reference (pathname in today's parlance) consists of a filename, a filetype, and a disk letter called a <b>filemode</b> (e.g. A or B). Minidisks can correspond to physical disk drives, but more typically refer to logical drives, which are mapped automatically onto shared devices by the operating system as sets of virtual cylinders.|$|E
5000|$|Stream OpenFile(string name, <b>FileMode</b> mode = FileMode.Open, FileAccess access = FileAccess.Read) { ... }OpenFile("file.txt"); // use {{default values}} for both [...] "mode" [...] and [...] "access" [...] OpenFile("file.txt", mode: FileMode.Create); // use default value for [...] "access"OpenFile("file.txt", access: FileAccess.Read); // use default value for [...] "mode"OpenFile(name: [...] "file.txt", access: FileAccess.Read, mode: FileMode.Create); // name all {{parameters}} for extra readability, [...] // and use order different from method declaration ...|$|E
5000|$|In addition, to {{complement}} optional parameters, {{it is possible}} to explicitly specify parameter names in method calls, allowing to selectively pass any given subset of optional parameters for a method. The only restriction is that named parameters must be placed after the unnamed parameters. Parameter names can be specified for both optional and required parameters, and can be used to improve readability or arbitrarily reorder arguments in a call. For example:Stream OpenFile(string name, <b>FileMode</b> mode = FileMode.Open,FileAccess access = FileAccess.Read) { ... }OpenFile("file.txt"); // use default values for both [...] "mode" [...] and [...] "access"OpenFile("file.txt", mode: FileMode.Create); // use default value for [...] "access"OpenFile("file.txt", access: FileAccess.Read); // use default value for [...] "mode"OpenFile(name: [...] "file.txt", access: FileAccess.Read, mode: FileMode.Create);// name all parameters for extra readability,// and use order different from method declaration ...|$|E

