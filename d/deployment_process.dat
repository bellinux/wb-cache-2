426|332|Public
5000|$|Reliable Releases: The risks {{associated}} with a release have significantly decreased, and the release process has become more reliable. With CD, the <b>deployment</b> <b>process</b> and scripts are tested repeatedly before deployment to production. So, most errors in the <b>deployment</b> <b>process</b> and scripts have already been discovered. With more frequent releases, the number of code changes in each release decreases. This makes finding and fixing any problems that do occur easier, reducing the time {{in which they have}} an impact.|$|E
50|$|Chasqui I saw {{a unique}} <b>deployment</b> <b>process,</b> {{when it was}} {{deployed}} by hand during a spacewalk on the International Space Station in 2014.|$|E
50|$|Provisioning {{integration}} - Leverage the SOA {{governance system}} {{as part of}} the provisioning and <b>deployment</b> <b>process</b> of business services. Once integrated, bi-directional exchange of service information between participants is enabled.|$|E
40|$|This paper {{identifies}} the factors involved in successful development and deployment of business-to-business (B 2 B) virtual communities (VCs). The {{results of a}} cross case analysis involving four case studies are shown, whereby 59 factors that affect the development and <b>deployment</b> <b>processes</b> are identified and split into four key dimensions. As well as identifying the 59 factors, this paper also isolates the factors crucial to the development and <b>deployment</b> <b>processes.</b> The study’s findings indicate that cultural aspects associated with these processes have more impact than the resources available to the project, the technology selected or the functionality offered by the VC...|$|R
50|$|The Dell OpenManage Deployment Toolkit (DTK) {{includes}} {{a set of}} utilities for configuring and deploying Dell PowerEdge systems. The DTK is designed for customers who need to build scripted installations to deploy large numbers of servers in a reliable fashion without having to dramatically change their current <b>deployment</b> <b>processes.</b>|$|R
40|$|This {{case study}} report {{describes}} the research {{results of a}} case study at Planon into the processes of development, release, and deployment. The research was done to document the release and <b>deployment</b> <b>processes</b> at Planon, to uncover strengths and weaknesses in these processes, and to compare Planon to other product software vendors. The case study was performed by doing interviews and examining development documentation, Planon software, and internally used tools. The results of the case study are organizational descriptions, Planon software descriptions, and the descriptions of the development, release, and <b>deployment</b> <b>processes.</b> The main conclusions of the case study are twofold. First the case study shows that striving for more integrated software knowledge management can relieve the processes of release and deployment. Secondly, the case study displays that extensive variation management can effectively increase the customer base for a software vendor...|$|R
50|$|CAAFI {{participants}} meet {{regularly to}} update the state of alternative jet fuel developments in these areas, identify gaps and hurdles, and decide on next steps required in the research, development and <b>deployment</b> <b>process.</b>|$|E
5000|$|Request {{management}} tools allow {{employees to}} place requests for software products using a centralized form and process {{specifically designed to}} capture and assess specific license requirements {{as well as to}} manage and track the procurement and <b>deployment</b> <b>process.</b>|$|E
50|$|In {{the same}} vein, the {{practice}} of continuous delivery further extends CI by making sure the software checked in on the mainline is always {{in a state that}} can be deployed to users and makes the actual <b>deployment</b> <b>process</b> very rapid.|$|E
50|$|AppViewX SECURITY+ {{simplifies}} {{management of}} security policies, provides easier verification of existing policies, audits policy changes, and {{keeps track of}} <b>deployment</b> <b>processes.</b> It provides end-to-end visibility across multi-vendor security infrastructures and enables management of enterprise security policies from a single console. It allows firewall administrators, security administrators, and network operations teams to work in collaboration with application teams to achieve agility.|$|R
40|$|Some {{characteristics}} of morphological changes in nature are discussed and morphological changes in space structure systems are investigated. Essentially space structure systems change their forms and functions, since {{they must be}} initially stowed due to spatial constraints of transportation systems, and deployed in their designed orbits. Recently various concepts of membrane structures are proposed for future large space systems, since they can be compactly stowed, and can easily realize space structures with large area. In their developments, {{it is a major}} important issue to ensure the reliability of their <b>deployment</b> <b>processes.</b> From the viewpoint of <b>deployment</b> <b>processes,</b> various morphological changes of some plants, insects, and animals are investigated. The efficient characteristics in their morphological changes such as high redundancy, sequential deployment, utilization of gravity forces, and so on are introduced. A new concept of deployable membrane structure models derived especially from the observation of insects’ metamorphosis including eclosion of butterflies, dragonflies, cicadas, and so on is proposed. Numerical results of its deployment behavior are also shown. Nomenclatur...|$|R
50|$|The {{back end}} {{which is used}} to detect {{security}} issues in mobile apps is named Sherlock. The front end is known as Irene, and uses Ember as its framework. The front end development team works independent of the back end team and doesn’t need the server to be online during development. The front end and back end <b>deployment</b> <b>processes</b> are also different from each other.|$|R
50|$|In 2004 Scott {{was placed}} on active duty to support the Marine Corps review of the <b>deployment</b> <b>process</b> and in-country use of the Rapid Deployment Force in Haiti. After 60 days of his assignment, {{he and his team}} were re-positioned to Iraq in support of a focused {{collection}} effort on multiple assigned areas of interest. Mr. Reske only spent 32 days in Iraq.|$|E
50|$|Installation (or setup) of a {{computer}} program (including device drivers and plugins), is the act of making the program ready for execution. Because the process varies for each program and each computer, programs (including operating systems) often come with an installer, a specialized program responsible for doing whatever is needed for their installation. Installation {{may be part of}} a larger software <b>deployment</b> <b>process.</b>|$|E
50|$|The <b>deployment</b> <b>process</b> is {{inherently}} chaotic. Rapid deployments can still occur even with well-behaved canopies. On rare occasions deployment {{can even be}} so rapid that the jumper suffers bruising, injury, or death. Reducing the amount of fabric decreases the air resistance. This {{can be done by}} making the slider smaller, inserting a mesh panel, or cutting a hole in the slider.|$|E
40|$|In {{order to}} {{understand}} the nature of a given linguistic phenomena in the adult grammar, language acquisition research explores how children’s competence with respect to such a phenomena develops. However, diagnosing competence can be challenging because it is not directly observable. Researchers only have access to performance, which is mediated by additional factors and is not a direct reflection of competence. In this dissertation, I explore a case study of children’s early syntactic knowledge. My in-depth analysis of Principle C at 30 months provides novel insights into diagnostics for underlying competence by utilizing two distinct methods of analysis. The first analysis explores alternative mechanisms that have been proposed to account for early Principle C effects. By comparing across multiple linguistic contexts, I show that Principle C knowledge is the only mechanism which can account for all observed performance. The second analysis explores the <b>deployment</b> <b>processes</b> that are required to implement competence in performance. I present a novel analytic approach to identifying underlying knowledge which utilizes independent measures of these <b>deployment</b> <b>processes.</b> I show that individual differences in syntactic processing predict individual differences i...|$|R
40|$|This session {{presents}} two {{case studies}} {{of the use of}} open source content management systems (CMSs) in academic libraries. It includes an overview of the benefits and features of CMSs, demonstrates implementations of CMSs at both public sites and staff intranets, and provides a comparison of the two CMS software platforms used (Joomla and Plone) and <b>deployment</b> <b>processes,</b> detailing experiences in such areas as selecting a CMS, identifying resources for support and training, and encouraging staff adoption...|$|R
5000|$|... "Deployment {{is defined}} as a {{specified}} set of activities designed to put into practice an activity or program of known dimensions. According to this definition, <b>deployment</b> <b>processes</b> are purposeful and are described in sufficient detail such that independent observers can detect the presence and strength of the [...] "specific set of activities" [...] related to implementation. In addition, the activity or program being deployed is described in sufficient detail so that independent observers can detect its presence and strength." ...|$|R
50|$|All 6 {{microsatellites}} {{were launched}} {{on a single}} launch vehicle and deployed into a single parking orbit after launch. The spacecraft were then deployed into separate orbital planes {{through the use of}} precession due to the oblateness of the Earth and raised to a final orbital altitude {{over the course of several}} months. Scientific data were collected during the <b>deployment</b> <b>process,</b> along with experimental validation and calibration.|$|E
50|$|First aid {{during the}} {{exercise}} {{was provided by}} a Special purposes medical detachment. It was equipped with a modularized combat support hospital with a robotized <b>deployment</b> <b>process.</b> It included various modules - consultative/diagnostic, X-Ray module, antishock module, lab module.Ambulatory and special care were {{carried out in the}} military hospital, which is situated in Mulino, Nizhniy Novgorod Region. Exercise planners deployed more than 400 medical workers, 50 medical transportation units, including aeromedical transportation units.|$|E
50|$|Continuous {{delivery}} (CD) is {{a software}} engineering approach in which teams produce software in short cycles, {{ensuring that the}} software can be reliably released at any time. It aims at building, testing, and releasing software faster and more frequently. The approach helps reduce the cost, time, and risk of delivering changes by allowing for more incremental updates to applications in production. A straightforward and repeatable <b>deployment</b> <b>process</b> is important for continuous delivery.|$|E
40|$|Abstract. <b>Deployment</b> of {{software}} <b>processes</b> based on reference models is a knowledge-intensive task, i. e., {{a great amount}} of technical knowledge must be applied in order to guarantee conformance and adherence of processes deployed to the reference models adopted. Moreover, software process deployers have to deal with organizational and individual cultural problems on a regular basis, for instance, resistances to organizational changes. Therefore, the success {{of software}} <b>process</b> <b>deployment</b> within an organization or organizational unit depends on both technical and social aspects of the software <b>process</b> <b>deployment</b> strategy definition and execution. This paper presents the Taba Workstation, an enterprise-oriented Process-centered Software Engineering Environment (PSEE) constituted of an integrated set of tools to support software <b>process</b> <b>deployment</b> based on the Capability Maturity Model Integration (CMMI) and the Reference Model for Brazilian Software Process Improvement (MR-MPS). Software process appraisals demonstrated that the Taba Workstation constitutes {{one of the most important}} organizational assets to facilitate the success of software <b>process</b> <b>deployment</b> initiatives and to overcome the inherent difficulties. ...|$|R
40|$|International audienceOntologies {{provide a}} common layer which {{plays a major}} role in {{supporting}} information exchange and sharing. Their proliferation relies strongly on the automation of ontology building, integration and <b>deployment</b> <b>processes.</b> In this paper we introduce an integrated framework involving different and complementary dimensions to drive the (semi) automatic acquisition conceptual knowledge process from HTML Web pages. Our approach takes advantage from both structural and linguistic HTML document characteristics and is based on an incremental evaluation by the user of the conceptual quality...|$|R
40|$|Based on {{a vision}} that, in the future, {{applications}} will be flexibly {{built out of}} small-grained components, we argue that current technologies do not adequately support component deployment in such a setting. Specifically, current technologies realize <b>deployment</b> <b>processes</b> where most decisions are made by the application manufacturer. When using small-grained components, however, the component user needs to have {{more control over the}} deployment process; user-centric deployment is needed. In this paper, we describe our initial efforts at providing user-centric deployment...|$|R
5000|$|Release: The release {{activity}} {{follows from}} the completed development process, and is sometimes classified {{as part of the}} development process rather than deployment proper. It includes all the operations to prepare a system for assembly and transfer to the computer system(s) on which it will be run in production. Therefore, it sometimes involves determining the resources required for the system to operate with tolerable performance and planning and/or documenting subsequent activities of the <b>deployment</b> <b>process.</b>|$|E
5000|$|The general <b>deployment</b> <b>process</b> {{consists}} of several interrelated activities with possible transitions between them. These activities can {{occur at the}} producer side or at the consumer side or both. Because every software system is unique, the precise processes or procedures within each activity can hardly be defined. Therefore, [...] "deployment" [...] should {{be interpreted as a}} general process that has to be customized according to specific requirements or characteristics. A brief description of each activity will be presented later.|$|E
5000|$|The {{complexity}} and variability of software products has fostered {{the emergence of}} specialized roles for coordinating and engineering the <b>deployment</b> <b>process.</b> For desktop systems, end-users frequently also become the [...] "software deployers" [...] when they install a software package on their machine. The deployment of enterprise software involves many more roles, and those roles typically change as the application progresses from test (pre-production) to production environments. Typical roles involved in software deployments for enterprise applications may include: ...|$|E
5000|$|Researchers {{used the}} VSA {{framework}} to explore associations between individual/couple vulnerabilities, stress associated with <b>deployment,</b> adaptive <b>processes,</b> including communication {{and management of}} change, and emotional intimacy.|$|R
40|$|Streamline {{software}} development with Jenkins, the popular Java-based open source tool that has revolutionized the way teams think about Continuous Integration (CI). This complete guide {{shows you how}} to automate your build, integration, release, and <b>deployment</b> <b>processes</b> with Jenkins-and demonstrates how CI can save you time, money, and many headaches. Ideal for developers, software architects, and project managers, Jenkins: The Definitive Guide is both a CI tutorial and a comprehensive Jenkins reference. Through its wealth of best practices and real-world tips, you'll discover how easy it i...|$|R
40|$|For {{software}} vendors {{the processes}} of release, delivery, and deployment to customers are inherently complex. However, software vendors can greatly improve their product quality and quality of service by applying a model that focuses on customer interaction if such a model were available. This paper presents a model for customer configuration updating (CCU) that can evaluate the capabilities of a software vendor in these processes. Eight extensive case studies of medium to large product software vendors are presented and evaluated using the model, thereby uncovering issues in their release, delivery, and <b>deployment</b> <b>processes...</b>|$|R
5000|$|The mission {{included}} around 3,200 {{police and}} judicial personnel (1,950 international, 1,250 local), {{and began a}} four-month <b>deployment</b> <b>process</b> on 16 February 2008. In September 2012, the Kosovo Assembly voted to extend EULEX to 2014. In April 2014, the Kosovo Assembly once again voted to extend EULEX's mandate, this time until June 2016. [...] The European Council decided to extend {{the mandate of the}} EU Rule of Law Mission in Kosovo until 14 June 2018. Current Head of Mission of EULEX is Ms. Alexandra Papadopoulou ...|$|E
50|$|Similar to the {{precepts of}} lean manufacturing, the lean startup {{methodology}} seeks to eliminate wasteful practices and increase value-producing practices during the product development phase so that startups {{can have a}} better chance of success without requiring large amounts of outside funding, elaborate business plans, or the perfect product. Customer feedback during product development is integral to the lean startup process, and ensures that the producer does not invest time designing features or services that consumers do not want. This is done primarily through two processes, using key performance indicators and a continuous <b>deployment</b> <b>process.</b>|$|E
50|$|Since 2014, {{there has}} been much {{research}} interest in end-to-end ASR. Traditional phonetic-based (i.e., all HMM-based model) approaches required separate components and training for the pronunciation, acoustic and language model. End-to-end models jointly learn all the components of the speech recognizer. This is valuable since it simplifies the training process and <b>deployment</b> <b>process.</b> For example, a n-gram language model is required for all HMM-based systems, and a typical n-gram language model often takes several gigabytes in memory making them impractical to deploy on mobile devices. Consequently, modern commercial ASR systems from Google and Apple (as of 2017) are deployed on the cloud and require a network connection as opposed to the device locally.|$|E
5000|$|Soldier Support - Provides {{support to}} {{deploying}} or returning {{military personnel and}} civilian contractors during the <b>deployment</b> mobilization/demobilization <b>process</b> at Camp Atterbury, and hosting an annual, week-long Army JROTC leadership course; ...|$|R
40|$|Abstract — We {{study the}} {{optimization}} of malicious software removal or patch <b>deployment</b> <b>processes</b> across multiple networks. The well-known classical epidemic model {{is adapted to}} model malware propagation in this multi-network framework. We capture the trade-off between the infection spread and the patching costs in a cost function, leading to an optimal control problem. We linearize the system to derive feedback controllers using pole-placement, linear quadratic regulator (LQR) optimal control, and H ∞ optimal control, where we explicitly model measurement errors {{in the number of}} infected clients. The resulting patching strategies are analyzed numerically and their results are compared. I...|$|R
40|$|Product {{software}} release, delivery, and deployment {{are complex}} tasks for software vendors, system managers, and end-users of a software system. This position paper proposes {{a framework that}} manages software knowledge during the lifecycle of a software product, with special focus on the release, delivery, and <b>deployment</b> <b>processes</b> of software components. The first pillar of the framework manages components and their associated information on a local system. The second pillar of the framework enables knowledge sharing amongst system nodes in a network. Central to the framework is the underlying knowledge base, a distributed knowledge base that stores knowledge about software systems and its components...|$|R
