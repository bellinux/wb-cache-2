2|47|Public
40|$|In {{this paper}} we address the role of {{divergence}} and convergence in creative processes, and argue {{about the need to}} consider them in Computational Creativity research in the Genetic or Evolutionary Programming paradigm, being one ́s goal the problem of the <b>Halt</b> <b>Condition</b> in Genetic Programming. Here the candidate solutions are seen as evolutionary logic programs or theories, being the test whether a solution is optimal based on a measure of the quality-of-information carried out by those logical theories or programs. Furthermore, we present Conceptual Blending Theory as being a promising framework for implementing convergence methods within creativity programs, in terms of the logic programming framework...|$|E
40|$|Thermocapillary {{convection}} is {{studied in}} two immiscible liquid layers with one free surface, one liquid/liquid interface, and differential heating applied {{parallel to the}} interfaces. An analytical solution is introduced for infinite horizontal layers. The defining parameter for the flow pattern is lambda, {{the ratio of the}} temperature coefficient of the interfacial tension to that of the surface tension. Four different flow patterns exist under zero gravity conditions. 'Halt' conditions which halt the fluid motion in the lower encapsulated liquid layer have been found. A numerical experiment is carried out to study effects of vertical end walls on the double layer convection in a 2 D cavity. The <b>halt</b> <b>condition</b> obtained from the analytical study is found to be valid in the limit of small Reynolds numbers. The flow in the encapsulated liquid layer can be suppressed substantially...|$|E
3000|$|... {{the obvious}} <b>halting</b> <b>condition</b> is “until no new places are statically reachable”; of course, the {{algorithm}} terminates {{if we know}} that the set S_p of places statically reachable from dom(dec(p)) is finite; additionally, [...]...|$|R
5000|$|This program {{assumes that}} [...] is indexed by nonnegative integers. Consequently, for a [...] {{instruction}} ( [...] , , [...] ), the program interprets , , or an executed branch to [...] as a <b>halting</b> <b>condition.</b> Similar interpreters {{written in a}} -based language (i.e., self-interpreters, which may use self-modifying code as allowed {{by the nature of}} the [...] instruction) can be found in the external links below.|$|R
40|$|We {{consider}} (tissue) P systems using non-cooperative rules, {{but considering}} computations without <b>halting</b> <b>conditions.</b> As {{results of a}} computation we take {{the contents of a}} specified output membrane/cell in each derivation step, no matter whether this computation will ever halt or not, eventually taking only results completely consisting of terminal objects only. The computational power of (tissue) P systems using non-cooperative rules turns out to be equivalent to that of (E) 0 L systems...|$|R
40|$|We {{consider}} a new {{variant of the}} <b>halting</b> <b>condition</b> in P systems, i. e., a computation in a P system is already called halting if not for all membranes a rule is applicable anymore at the same time, whereas usually a computation is called halting if no rule is applicable anymore in the whole system. This new variant of partial halting is especially investigated for several variants of P systems working in different derivation modes...|$|R
40|$|Summary. The {{formalism}} of P {{systems is}} known for many years, yet just recently new derivation modes and <b>halting</b> <b>conditions</b> have been proposed. For developing comparable results, a formal description of their functioning, in particular, of the derivation step is necessary. We introduce a formal general framework for static membrane systems that aims to capture most of the essential features of (tissue) P systems and to define their functioning in a formal way. ...|$|R
40|$|Summary. We {{consider}} (tissue) P systems using non-cooperative rules, {{but considering}} computations without <b>halting</b> <b>conditions.</b> As {{results of a}} computation we take {{the contents of a}} specified output membrane/cell in each derivation step, no matter whether this computation will ever halt or not, eventually taking only results completely consisting of terminal objects only. The computational power of (tissue) P systems using non-cooperative rules turns out to be equivalent to that of (E) 0 L systems. ...|$|R
40|$|Summary. We {{consider}} a new {{variant of the}} <b>halting</b> <b>condition</b> in P systems, i. e., a computation in a P system is already called halting if not for all membranes a rule is applicable anymore at the same time, whereas usually a computation is called halting if no rule is applicable anymore in the whole system. This new variant of partial halting is especially investigated for several variants of P systems working in different derivation modes. ...|$|R
40|$|Abstract. We {{consider}} a new {{variant of the}} <b>halting</b> <b>condition</b> in P systems, i. e., a computation in a P system is already called halting if not for all membranes a rule is applicable anymore at the same time, whereas usually a computation is called halting if no rule is applicable anymore in the whole system. This new variant of partial halting is especially investigated for several variants of P systems using membrane rules with permitting contexts and working in different derivation modes...|$|R
50|$|The {{sentence}} φM {{states that}} (i) <, min, Ti's and Hq's are interpreted as above and (ii) that the machine eventually <b>halts.</b> The <b>halting</b> <b>condition</b> {{is equivalent to}} saying that Hq∗(s, t) holds for some s, t and q∗ ∈ Qa ∪ Qr and after that state, {{the configuration of the}} machine does not change. Configurations of a halting machine (the nonhalting is not finite) can be represented as a τ (finite) sentence (more precisely, a finite τ-structure which satisfies the sentence). The sentence φM is: φ ≡ α ∧ β ∧ γ ∧ η ∧ ζ ∧ θ.|$|R
40|$|Most {{programs}} stop {{quickly or}} never halt. (English summary) Adv. in Appl. Math. 40 (2008), no. 3, 295 – 308. A computable probability distribution {{on the set}} of natural numbers is constructed with the following property. For any given program p and any natural number k, one can compute a number T such that the probability that p <b>halts</b> <b>conditioned</b> by the event that it has not stopped in T steps is less than 2 −k. One consequence is that the set of halting programs can be written as the disjoint union of a computable set and a set with effectively vanishing probability. Reviewed by Marius Ziman...|$|R
40|$|Angiogenesis {{may be an}} {{important}} factor in the development of fibrotic lung disease. Prior studies have strongly suggested a role for angiogenic vascular remodeling in pulmonary fibrosis, and emerging evidence indicates that new vessel formation is critical in airway fibrosis. Bronchiolitis obliterans syndrome is a fibrotic occlusion of distal airways that is largely responsible for the morbidity and mortality of patients after lung transplantation. In this issue, Belperio et al. demonstrate a role for CXC chemokine receptor 2 in the regulation of angiogenesis-mediated airway fibroproliferation. By integrating an understanding of neovascularization into the study of events that occur between inflammation and fibrosis, it becomes increasingly possible to rationally design therapies that can <b>halt</b> <b>conditions</b> of maladaptive fibrosis...|$|R
30|$|In Figure 11, we {{see that}} both the VNS and the RS {{heuristics}} outperform the basic k-clique matching protocol. This {{can be attributed to}} the fact that nodes make much better use of the cliques formed by other nodes. Moreover, adding pruning mechanisms speeds up the convergence of each of the heuristics further. We see that the difference between using VNS and the RS heuristics is minimal, which means that we can often use the simpler and cheaper RS heuristics to achieve the same results. Apparently, having only a relatively small subset of neighbors already achieves the major effect also attained by VNS. A more comprehensive comparison between the basic protocol, VNS with various <b>halting</b> <b>conditions</b> and RS with various random subset sizes is presented in [24].|$|R
40|$|In {{this paper}} we discuss the usage of Accepting Networks of Evolutionary Processors (ANEPs for short) as {{deciding}} devices. In this context we define a new <b>halting</b> <b>condition</b> for this model, which seems more coherent {{with the rest of}} the theory than the previous such definition, and show that all the computability results reported so far remain valid in the new framework. Moreover, we give a direct and efficient simulation of an arbitrary ANEP by a complete ANEP, thus, showing that the efficiency of deciding a language by ANEPs is not influenced by the network’s topology. Finally, we obtain a surprising characterization of P NP[log] as the class of languages that can be decided in polynomial time by ANEPs. 1...|$|R
40|$|Model {{calibration}} is a {{major challenge}} faced by the plethora of statistical analytics packages that are in-creasingly used in Big Data applications. Identifying the optimal model parameters is a time-consuming process {{that has to be}} executed from scratch for every dataset/model combination even by experienced data scientists. We argue that the lack of support to quickly identify sub-optimal configurations is the principal cause. In this paper, we apply parallel online aggregation to identify sub-optimal configura-tions early in the processing by incrementally sampling the training dataset and estimating the objective function corresponding to each configuration. We design concurrent online aggregation estimators and define <b>halting</b> <b>conditions</b> to accurately and timely stop the execution. The end-result is online approxi-mate gradient descent—a novel optimization method for scalable model calibration. We show how online approximate gradient descent can be represented as generic database aggregation and implement the resulting solution in GLADE—a state-of-the-art Big Data analytics system...|$|R
30|$|The VNS {{algorithm}} {{is composed of}} two functions which are executed in turns. First, the shake function modifies the current solution C by randomly changing a few nodes such that a new solution C′ belongs to the d-th neighborhood structure of C. The goal of this step is to avoid getting stuck in a local optimum. Second, the local search function improves the new solution by {{trying to find a}} better one in the 1 st neighborhood structure of C′ (differing by a single node). This function can either return the first improvement found over C′ or the best improvement (in our simulations the first improvement node was used). In case no improvement is found d is increased, otherwise it is set to some default value. The VNS algorithm executes until a certain <b>halting</b> <b>condition</b> is reached, for example, when the execution time exceeds some limit. For more details on how the VNS was adopted to our protocol, we refer to [2].|$|R
40|$|AbstractThe Accepting Networks of Evolutionary Processors (ANEPs for short) are {{bio-inspired}} computational models {{which were}} introduced and thoroughly {{studied in the}} last decade. In this {{paper we propose a}} method of using ANEPs as deciding devices. More precisely, we define a new <b>halting</b> <b>condition</b> for this model, which seems more coherent {{with the rest of the}} theory than the previous such definitions, and show that all the computability related results reported so far remain valid in the new framework. Further, we are able to show a direct and efficient simulation of an arbitrary ANEP by an ANEP having a complete underlying graph; as a consequence of this result, we conclude that the efficiency of deciding a language by ANEPs is not influenced by the network’s topology. Finally, focusing on the computational complexity of ANEP-based computations, we obtain a surprising characterisation of PNP[log] as the class of languages that can be decided in polynomial time by such networks...|$|R
50|$|The {{attempt was}} {{originally}} planned for 2002, but adverse high altitude <b>conditions</b> <b>halted</b> attempts in that year. The launch {{site for the}} twelve-hour flight was decided to be from {{off the coast of}} Cornwall.|$|R
5000|$|Some of {{the best}} viewing {{conditions}} were to be had mid-Channel, where ferries were <b>halted</b> in calm <b>conditions</b> to obtain an excellent view. Hundreds of people who gathered {{on the island of}} Alderney also experienced the event.|$|R
50|$|A new {{investigation}} has identified a seemingly successful treatment for LRBA deficiency by targeting CTLA4. Abatacept, an approved drug for rheumatoid arthritis, mimics {{the function of}} CTLA4 and has found to reverse life-threatening symptoms. The study included nine patients that exhibited improved clinical status and <b>halted</b> inflammatory <b>conditions</b> with minimal infectious or autoimmune complications. The study also suggests that therapies like chloroquine or hydroxychloroquine, which inhibit lysosomal degradation, {{may prove to be}} effective, as well. Larger cohorts are required to further validate these therapeutic approaches as effective long-term treatments for this disorder.|$|R
40|$|Abstract. 1 There are {{increasing}} deployments of {{networked embedded systems}} and rising threats of malware intrusions on such systems. To mitigate this threat, it is desirable to enable commonly-used embedded processors known as flash MCUs to provide remote attestation assurances like the Trusted Platform Module (TPM) provides for PCs. However, flash MCUs have special limitations concerning cost, power efficiency, computation, and memory that influence how this goal can be achieved. Moreover, many types of applications require integrity guarantees for the system over an interval of time rather than just at a given instant. The aim {{of this paper is}} to demonstrate how an architecture we call a Cumulative Attestation Kernel (CAK) can address these concerns by providing cryptographically secure firmware auditing on networked embedded systems. To illustrate the value of CAKs, we demonstrate practical remote attestation for Advanced Metering Infrastructure (AMI), a core technology in emerging smart power grid systems that requires cumulative integrity guarantees. To this end, we show how to implement a CAK in less than one quarter of the memory available on low end AVR 32 flash MCUs similar to those used in AMI deployments. We analyze one of the specialized features of such applications by formally proving that remote attestation requirements are met by our implementation even if no battery backup is available to prevent sudden <b>halt</b> <b>conditions.</b> ...|$|R
50|$|Following the run, Guerrero {{ran out of}} fuel, and stalled on the backstretch. The {{next car}} out to qualify was Danny Sullivan, who had already left the pits. The {{resulting}} yellow light <b>condition,</b> <b>halted</b> qualifying for several minutes, and precipitated Sullivan {{to pull off the}} track and get back in line to qualify later.|$|R
25|$|In {{the event}} of a rain delay, {{darkness}} or other external <b>conditions</b> <b>halting</b> play, the match is resumed at a later time, with the same score as {{at the time of the}} delay, and the players at the same end of the court when rain halted play, or at the same position (north or south) if play is resumed on a different court.|$|R
40|$|Model {{calibration}} is a {{major challenge}} faced by the plethora of statistical analytics packages that are increasingly used in Big Data applications. Identifying the optimal model parameters is a time-consuming process {{that has to be}} executed from scratch for every dataset/model combination even by experienced data scientists. We argue that the incapacity to evaluate multiple parameter configurations simultaneously and the lack of support to quickly identify sub-optimal configurations are the principal causes. In this paper, we develop two database-inspired techniques for efficient model calibration. Speculative parameter testing applies advanced parallel multi-query processing methods to evaluate several configurations concurrently. The number of configurations is determined adaptively at runtime, while the configurations themselves are extracted from a distribution that is continuously learned following a Bayesian process. Online aggregation is applied to identify sub-optimal configurations early in the processing by incrementally sampling the training dataset and estimating the objective function corresponding to each configuration. We design concurrent online aggregation estimators and define <b>halting</b> <b>conditions</b> to accurately and timely stop the execution. We apply the proposed techniques to distributed gradient descent optimization [...] batch and incremental [...] for support vector machines and logistic regression models. We implement the resulting solutions in GLADE PF-OLA [...] a state-of-the-art Big Data analytics system [...] and evaluate their performance over terascale-size synthetic and real datasets. The results confirm that as many as 32 configurations can be evaluated concurrently almost as fast as one, while sub-optimal configurations are detected accurately in as little as a 1 / 20 ^th fraction of the time...|$|R
50|$|By 1975, {{before the}} dam's completion, Mozambique gained {{independence}} and construction {{came to a}} halt. Shortly thereafter the FRELIMO government restarted the project, but by the early 1980s economic decline and war time <b>conditions</b> <b>halted</b> further progress. A failure to maintain dam infrastructure or invest further in completion resulted in the Massingir dam not fulfilling its original purpose and full potential in the irrigation schemes of the Limpopo Valley downstream at Chokwe.|$|R
50|$|In July 1938, Japanese {{troops had}} tried to {{approach}} Nanchang during the Battle of Wuhan, but they were stopped at Xiushui River. Despite having gathered a strong force from their base at the Yangtze port 80 miles to the North, the Chinese force of 200,000 troops were well entrenched. These strong opposition measures, combined with unfavorable weather <b>conditions,</b> <b>halted</b> the Japanese advance to Nanchang in 1938 {{and led to a}} standstill during the winter months.|$|R
40|$|Malware often injects and executes {{new code}} to infect hypervisors, OSs and {{applications}} {{on a wide}} range of systems, from embedded systems to servers in data centers. In this dissertation, we design and evaluate approaches for remotely attesting software integrity and blocking infections on a variety of systems using integrity kernels. Existing hardware architectures provide inadequate support for integrity kernels. Despite this, we equip commodity embedded systems with compact integrity kernels. We also describe the limitations of existing non-embedded processors. Then, we develop an extended processor architecture that provides superior isolation, visibility, performance, and compatibility for integrity kernels. We were the first to demonstrate practical remote attestation for Advanced Metering Infrastructure (AMI), a core technology in emerging smart power grid systems that requires integrity guarantees for each meter over an interval of time rather than just at a given instant. Our prototype Cumulative Attestation Kernel (CAK) uses less than one quarter of the memory available on 32 -bit Atmel AVR 32 flash MCUs similar to those used in AMI deployments. We analyze one of the specialized features of such applications by constructing the first formal proof that security requirements are met by a system even when it experiences unexpected, repeated <b>halt</b> <b>conditions,</b> specifically concerning our prototype. We also developed the only remote attestation mechanism for 8 -bit Atmel AVR microcontrollers that communicate over networks like those in AMI and that run untrusted application firmware that can be remotely upgraded. We created the Integrity-Aware Processor (IAP), which is the only processor architecture with direct support for detecting attempts to execute unverified code. Using the IAP as a base, we developed the smallest integrity kernel that checks all code that ever executes in a target Linux system. It uses a network-hosted whitelist...|$|R
2500|$|In this {{proposal}} Museveni {{had offered to}} talk to the LRA, saying his government would under certain <b>conditions</b> <b>halt</b> operations against the LRA and open talks to end the conflict. [...] These steps were taken after numerous LRA commanders contacted either the government or third parties and expressed a willingness to end the conflict. [...] Senior LRA commander Brigadier Sam Kolo has stated that Joseph Kony has granted him the authority to negotiate on behalf of the rebels.|$|R
40|$|Specific {{divestiture}} {{dates and}} institutional public enterprise reform should {{probably not be}} a matter of hard conditionality for sectoral adjustment lending. One alternative is to establish institutional development projects that parallel adjustment operations. Another is to establish primary conditions, nonfulfillment of which would bring an operation to a <b>halt,</b> and secondary <b>conditions</b> (including most institutional and public enterprise reforms), nonfulfillment of which would evoke sanctions but not end operations. Banks&Banking Reform,Enterprise Development&Reform,Country Strategy&Performance,Municipal Financial Management,General Technology...|$|R
50|$|In this {{proposal}} Museveni {{had offered to}} talk to the LRA, saying his government would under certain <b>conditions</b> <b>halt</b> operations against the LRA and open talks to end the conflict. These steps were taken after numerous LRA commanders contacted either the government or third parties and expressed a willingness to end the conflict. Senior LRA commander Brigadier Sam Kolo has stated that Joseph Kony has granted him the authority to negotiate on behalf of the rebels.|$|R
5000|$|A {{debugger}} or debugging tool is {{a computer}} program {{that is used to}} test and debug other programs (the [...] "target" [...] program). The code to be examined might alternatively be running on an instruction set simulator (ISS), a technique that allows great power in its ability to <b>halt</b> when specific <b>conditions</b> are encountered, but which will typically be somewhat slower than executing the code directly on the appropriate (or the same) processor. Some debuggers offer two modes of operation, full or partial simulation, to limit this impact.|$|R
50|$|The {{offensive}} of admiral Kolchak {{ended with}} a failure {{in the summer of}} 1919. When the Red Army seized Petropavlovsk at the beginning of November 1919, the front was broken open and the Siberian Army began to disintegrate. Kolchak's government hastily ordered the evacuation of Omsk 6 November 1919, but this quickly turned into a disorderly rout along the Trans-Siberian Railway. The Entente had determined the order of the withdrawal, with the echelons of the Allied Forces first - Czechs, Serbs Romanians and Poles, and then the masses of Russian refugees and remaining White Armies. However the trains soon crawled to a <b>halt</b> in icy <b>conditions</b> of a terrible Siberian winter and began to break down.|$|R
40|$|A young West Indian {{woman with}} {{established}} {{sickle cell disease}} developed a severe episode of sickle chest syndrome. Conventional treatment including exchange transfusions and mechanical ventilation was to no avail, and an infusion of epoprostenol also failed to <b>halt</b> her worsening <b>condition.</b> When her arterial oxygen tension (PaO 2) had fallen to 6. 5 kPa (49 mm Hg) extracorporeal membrane oxygenation was instituted. Within two days her PaO 2 was greatly improved (maximum 11. 6 kPa; 87 mmHg), and by the sixth day pulmonary vascular resistance was reduced and angiography showed reperfusion of many vessels. The patient recovered and six months later showed a transfer factor close to the predicted range and normal spirometric values. Extracorporeal membrane oxygenation should be considered for severe sickle chest syndrome when conventional methods of artificial ventilation fail...|$|R
40|$|The {{attributes}} {{describing a}} data set may often be arranged in meaningful subsets, {{each of which}} corresponds to a different aspect of the data. An unsupervised algorithm (SCAD) that simultaneously performs fuzzy clustering and aspects weighting was proposed in the literature. However, SCAD may fail and <b>halt</b> given certain <b>conditions.</b> To fix this problem, its steps are modified and then reordered {{to reduce the number}} of parameters required to be set by the user. In this paper we prove that each step of the resulting algorithm, named ASCAD, globally minimizes its cost-function with respect to the argument being optimized. The asymptotic analysis of ASCAD leads to a time complexity which is the same as that of fuzzy c-means. A hard version of the algorithm and a novel validity criterion that considers aspect weights in order to estimate the number of clusters are also described. The proposed method is assessed over several artificial and real data sets. CNPqFAPES...|$|R
5|$|With the {{hurricane}} situated {{to the southwest}} of the Hawaiian Islands, Hurricane Hunters conducted several weather reconnaissance missions into the storm. On September2, they found maximum surface winds of 125mph (205km/h) and a minimum barometric pressure of 957mbar (hPa; 28.26inHg); this corresponded to the peak intensity of Uleki. At the time, Uleki displayed a well-organized, tight circulation. The hurricane meandered in the same general area {{over the next two}} days, executing several small loops, with a slight northward drift. During this time, its circulation increased in coverage but became less-organized as weakening ensued. Increased wind shear and restricted outflow took their toll on {{the hurricane}}. The cyclone's winds dropped to 80mph (130km/h) by 12:00UTC on September4 as it resumed its west-northwest track under the influence of a subtropical ridge away from the Hawaiian Islands. Uleki passed roughly halfway between Johnston Atoll and the French Frigate Shoals on September5. By September7, the weakened trend <b>halted</b> and environmental <b>conditions</b> favored reintensification. As Uleki neared the International Dateline, it regained winds of 105mph (165km/h).|$|R
