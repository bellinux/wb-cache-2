533|910|Public
25|$|The {{first step}} in the {{physical}} design flow is <b>Floorplanning.</b> <b>Floorplanning</b> is the process of identifying structures that should be placed close together, and allocating space for them in such a manner as to meet the sometimes conflicting goals of available space (cost of the chip), required performance, and the desire to have everything close to everything else.|$|E
25|$|Based on {{the area}} of the design and the hierarchy, a {{suitable}} floorplan is decided upon. <b>Floorplanning</b> takes into account the macros used in the design, memory, other IP cores and their placement needs, the routing possibilities, and also {{the area of the}} entire design. <b>Floorplanning</b> also determines the IO structure and aspect ratio of the design. A bad floorplan will lead to wastage of die area and routing congestion.|$|E
25|$|As {{a general}} rule, data-path {{sections}} benefit most from <b>floorplanning,</b> whereas random logic, state machines, and other non-structured logic can safely {{be left to}} the placer section of the place and route software.|$|E
40|$|<b>Floorplan</b> {{representations}} are {{a fundamental}} issue in designing <b>floorplan</b> algorithms. In this paper, we first derive {{the exact number}} of configurations of mosaic <b>floorplans</b> and slicing <b>floorplans.</b> We then present two non-redundant representations: a twin binary tree structure for mosaic <b>floorplans</b> and a slicing ordered tree for slicing <b>floorplans.</b> Finally, the relations between the state-of-the-art <b>floorplan</b> representations are discussed and their efficiency is explored. 1...|$|R
40|$|A <b>floorplan</b> is a {{rectangular}} dissection which describes the relative placement of electronic modules on the chip. It {{is called a}} mosaic <b>floorplan</b> {{if there are no}} empty rooms or cross junctions in the rectangular dissection. We study a subclass of mosaic <b>floorplans</b> called hierarchical <b>floorplans</b> of order $k$ (abbreviated HFO-${k}$). A <b>floorplan</b> is HFO-$k$ if it can be obtained by starting with a single rectangle and recursively embedding mosaic <b>floorplans</b> of at most $k$ rooms inside the rooms of intermediate <b>floorplans.</b> When $k= 2 $ this is exactly the class of slicing <b>floorplans</b> as the only distinct <b>floorplans</b> with two rooms are a room with a vertical slice and a room with a horizontal slice respectdeively. And embedding such a room is equivalent to slicing the parent room vertically/horizontally. In this paper we characterize permutations corresponding to the Abe-labeling of HFO-$k$ <b>floorplans</b> and also give an algorithm for identification of such permutations in linear time for any particular $k$. We give a recurrence relation for exact number of HFO- 5 <b>floorplans</b> with $n$ rooms which can be easily extended to any $k$ also. Based on this recurrence we provide a polynomial time algorithm to generate the number of HFO-$k$ <b>floorplans</b> with $n$ rooms. Considering its application in VLSI design we also give moves on HFO-$k$ family of permutations for combinatorial optimization using simulated annealing etc. We also explore some interesting properties of Baxter permutations which have a bijective correspondence with mosaic <b>floorplans.</b> Comment: 33 pages, 13 figure...|$|R
40|$|Abstract––In this paper, {{a corner}} block list — a new {{efficient}} topological representation for non-slicing <b>floorplan</b> is proposed with applications to VLSI <b>floorplan</b> and building block placement. Given a corner block list, {{it takes only}} linear time to construct the <b>floorplan.</b> Unlike the O-tree structure, which determines the exact <b>floorplan</b> based on given block sizes, corner block list defines the <b>floorplan</b> independent of the block sizes. Thus, the structure is better suited for <b>floorplan</b> optimization with various size configurations of each block. Based on this new structure and the simulated annealing technique, an efficient <b>floorplan</b> algorithm is given. Soft blocks and the aspect ratio of the chip {{are taken into account}} in the simulated annealing process. The experimental results demonstrate the algorithm is quite promising. 1...|$|R
25|$|In many design methodologies, Area and Speed are the {{subjects}} of trade-offs. This is due to limited routing resources, as the more resources used, the slower the operation. Optimizing for minimum area allows the design both to use fewer resources, and for greater proximity of the sections of the design. This leads to shorter interconnect distances, fewer routing resources used, faster end-to-end signal paths, and even faster and more consistent place and route times. Done correctly, there are no negatives to <b>floorplanning.</b>|$|E
5000|$|Physical design {{including}} <b>floorplanning,</b> {{place and}} route of logic gates ...|$|E
50|$|The {{first step}} in the {{physical}} design flow is <b>Floorplanning.</b> <b>Floorplanning</b> is the process of identifying structures that should be placed close together, and allocating space for them in such a manner as to meet the sometimes conflicting goals of available space (cost of the chip), required performance, and the desire to have everything close to everything else.|$|E
50|$|Sliceable <b>floorplans</b> {{have been}} used in a number of early Electronic Design Automation tools for a number of reasons. Sliceable <b>floorplans</b> may be {{conveniently}} represented by binary trees (more specifically, k-d trees), which correspond to the order of slicing. More importantly, a number of NP-hard problems with <b>floorplans</b> have polynomial time algorithms when restricted to sliceable <b>floorplans.</b>|$|R
5000|$|A sliceable <b>floorplan</b> is a <b>floorplan</b> {{that may}} be defined recursively as {{described}} below.|$|R
5000|$|Another {{approach}} is to restrict design methodology to certain classes of <b>floorplans,</b> such as sliceable <b>floorplans.</b>|$|R
5000|$|<b>Floorplanning</b> {{takes in}} some of the {{geometrical}} constraints in a design. Examples of this are: ...|$|E
50|$|Based on {{the area}} of the design and the hierarchy, a {{suitable}} floorplan is decided upon. <b>Floorplanning</b> takes into account the macros used in the design, memory, other IP cores and their placement needs, the routing possibilities, and also {{the area of the}} entire design. <b>Floorplanning</b> also determines the IO structure and aspect ratio of the design. A bad floorplan will lead to wastage of die area and routing congestion.|$|E
50|$|In modern {{electronic}} {{design process}} floorplans are created during the <b>floorplanning</b> design stage, {{an early stage}} in the hierarchical approach to integrated circuit design.|$|E
40|$|Abstract — Until recently, VLSI {{designers}} rarely considered yield issues {{when selecting}} a <b>floorplan</b> for a newly designed chip. This paper demonstrates that for large area VLSI chips, espe-cially those that incorporate some fault tolerance, {{changes in the}} <b>floorplan</b> can affect the projected yield. We study several general <b>floorplan</b> structures, make some specific recommendations, and apply them to actual VLSI chips. We conclude that the <b>floorplan</b> of a chip can affect its projected yield in a nonnegligible way, for chips with or without fault-tolerance. Index Terms—Clustering, defects, fault-tolerant IC’s, <b>floorplan,</b> large-area IC’s, yield...|$|R
40|$|A <b>floorplan</b> {{represents}} the relative relations between modules on an integrated circuit. <b>Floorplans</b> are commonly classified as slicing, mosaic, or general. Separable and Baxter permutations are classes of permutations {{that can be}} {{defined in terms of}} forbidden subsequences. It is known that the number of slicing <b>floorplans</b> equals the number of separable permutations and that the number of mosaic <b>floorplans</b> equals the number of Baxter permutations [17]. We present a simple and efficient bijection between Baxter permutations and mosaic <b>floorplans</b> with applications to integrated circuits design. Moreover, this bijection has two additional merits: (1) It also maps between separable permutations and slicing floorplans; and (2) It suggests enumerations of mosaic <b>floorplans</b> according to various structural parameters...|$|R
40|$|AbstractA <b>floorplan</b> {{represents}} the relative relations between modules on an integrated circuit. <b>Floorplans</b> are commonly classified as slicing, mosaic, or general. Separable and Baxter permutations are classes of permutations {{that can be}} {{defined in terms of}} forbidden subsequences. It is known that the number of slicing <b>floorplans</b> equals the number of separable permutations and that the number of mosaic <b>floorplans</b> equals the number of Baxter permutations [B. Yao, H. Chen, C. K. Cheng, R. L. Graham, <b>Floorplan</b> representations: complexity and connections, ACM Trans. Design Automation Electron. Systems 8 (1) (2003) 55 – 80]. We present a simple and efficient bijection between Baxter permutations and mosaic <b>floorplans</b> with applications to integrated circuits design. Moreover, this bijection has two additional merits: (1) It also maps between separable permutations and slicing floorplans; and (2) it suggests enumerations of mosaic <b>floorplans</b> according to various structural parameters...|$|R
50|$|As {{a general}} rule, data-path {{sections}} benefit most from <b>floorplanning,</b> whereas random logic, state machines, and other non-structured logic can safely {{be left to}} the placer section of the place and route software.|$|E
5000|$|In <b>{{floorplan}}ning,</b> {{the model}} of a floorplan of an integrated circuit {{is a set of}} isothetic rectangles called [...] "blocks" [...] within a larger rectangle called [...] "boundary" [...] (e.g., [...] "chip boundary", [...] "cell boundary").|$|E
50|$|Retail floor {{planning}} (also {{referred to}} as <b>floorplanning</b> or inventory financing) {{is a type of}} short term loan used by retailers to purchase high-cost inventory such as automobiles. These loans are often secured by the inventory purchased as collateral.|$|E
40|$|A "floorplan" is a {{rectangle}} subdivided into smaller rectangular sections by {{horizontal and vertical}} line segments. Each section in the <b>floorplan</b> is called a "block". Two <b>floorplans</b> are considered equivalent {{if and only if}} there is a one-to-one correspondence between the blocks in the two <b>floorplans</b> such that the relative position relationship of the blocks in one <b>floorplan</b> {{is the same as the}} relative position relationship of the corresponding blocks in another <b>floorplan.</b> The objects of "Mosaic floorplans" are the same as <b>floorplans,</b> but an alternative definition of equivalence is used. Two mosaic <b>floorplans</b> are considered equivalent if and only if they can be converted to each other by sliding the line segments that divide the blocks. Mosaic <b>floorplans</b> are widely used in VLSI circuit design. An important problem in this area is to find short binary string representations of the set of n-block mosaic <b>floorplans.</b> The best known representation is the "Quarter-State Sequence" which uses 4 n bits. This paper introduces a simple binary representation of n-block mosaic <b>floorplan</b> using 3 n- 3 bits. It has been shown that any binary representation of n-block mosaic <b>floorplans</b> must use at least (3 n-o(n)) bits. Therefore, the representation presented in this paper is optimal (up to an additive lower order term). "Baxter permutations" are a set of permutations defined by prohibited subsequences. Baxter permutations have been shown to have one-to-one correspondences to many interesting objects in the so-called "Baxter combinatorial family". In particular, there exists a simple one-to-one correspondence between mosaic <b>floorplans</b> and Baxter permutations. As a result, the methods introduced in this paper also lead to an optimal binary representation of Baxter permutations and all objects in the Baxter combinatorial family. Comment: 11 pages, 7 figure...|$|R
40|$|The {{existence}} of <b>floorplans</b> with given areas and adjacencies for the rooms cannot always be guaranteed. Rectangular, isometric and convex <b>floorplans</b> are considered. For each, {{the areas of}} the rooms and a graph representing the required internal adjacencies between the rooms is given. This thesis gives existence theorems for a <b>floorplan</b> satisfying these conditions. If the graph is maximal outerplanar, only a convex <b>floorplan</b> can always be guaranteed. <b>Floorplans</b> of each type can be found if the graph is a tree. A branching index is defined for a tree, and used to give the minimum number of vertices of degree 2 in any maximal outerplanar graph, in which the tree can be embedded. If the graph of adjacencies is a tree, and each room in the plan is external, once again only convex <b>floorplans</b> can always be guaranteed. Rectangular <b>floorplans</b> can always be found in some cases, depending on the embedding index of the tree...|$|R
50|$|If a {{block from}} a sliceable <b>floorplan</b> is cut ("sliced") in two by a {{vertical}} or horizontal line, the resulting <b>floorplan</b> is sliceable.|$|R
5000|$|Most car dealerships {{do not pay}} {{cash for}} the {{vehicles}} they buy at auto auctions. They rely on inventory financing, {{a line of credit}} extended by a bank or other institution to acquire vehicles. This is known in industry parlance as <b>floorplanning</b> (floor planning) or simply [...] "flooring" [...] vehicle inventory. Specialty finance companies cater to the used car dealer industry.|$|E
50|$|In many design methodologies, Area and Speed are the {{subjects}} of trade-offs. This is due to limited routing resources, as the more resources used, the slower the operation. Optimizing for minimum area allows the design both to use fewer resources, and for greater proximity of the sections of the design. This leads to shorter interconnect distances, fewer routing resources used, faster end-to-end signal paths, and even faster and more consistent place and route times. Done correctly, there are no negatives to <b>floorplanning.</b>|$|E
50|$|The large formats of {{the blocks}} enable quick {{construction}} and the <b>floorplanning</b> process is very flexible with gypsum blocks, as walls {{can also be}} added afterwards or removed. The width of the partition walls is with 60, 70, 80 or 100 mm extremely thin, which results in an increase of effective floor space. The slim though {{at the same time}} very sturdy and stable partitions are resistant against mechanical strain. Even heavy objects and handles in sanitary areas can be installed with standard plugs on any position on the walls.|$|E
40|$|We {{propose to}} use a corner block list (CBL) {{representation}} for mosaic <b>floorplans.</b> In a mosaic <b>floorplan,</b> each room has only one block assigned to it. Thus, there is a unique corner room on the to p {{right corner of the}} chip. Corner block deletion and corner block insertion keep the <b>floorplan</b> mosaic. Through a recursive deletion process, a mosaic <b>floorplan</b> can be converted to a representation that is named as CBL. Given a CBL, it takes only linear time to construct the <b>floorplan.</b> The CBL is used for the application to very large-scale integration <b>floorplan</b> and building block placement. We adopt a simulated annealing process for the optimization. Soft blocks and the aspect ratio of the chip are taken into account in the optimization process. The experimental results demonstrate that the algorithm is quite promising...|$|R
40|$|Given {{a set of}} modules with {{flexibility}} in shape, we show that there exists a slicing <b>floorplan</b> F such that area(F) minf(1 + 1 b p rc); 5 4; (1 + ff) gA total where A total is the total area of all the modules, A max is the maximum module area, ff = q 2 Amax rA total and r 2 is the shape flexibility of each module. Our result shows that slicing <b>floorplans</b> can provably pack modules tightly when the modules have {{flexibility in}} shape. Keywords : slicing <b>floorplan,</b> module, aspect ratio, shape flexibility This work {{was presented at the}} ACM International Symposium on Physical Design 1997. 1 1 Introduction <b>Floorplan</b> design {{plays an important role in}} the design of VLSI circuits in today's deep submicron technology. A slicing <b>floorplan</b> is a <b>floorplan</b> which can be obtained by recursively dividing a rectangle into two parts with either a vertical line or a horizontal line. Since slicing <b>floorplans</b> have very simple solution representations (e. g. slicing tree [4], Polish express [...] ...|$|R
40|$|A {{rectangular}} <b>floorplan</b> {{can always}} be found to satisfy area requirements for each room and adjacencies between rooms represented by a given tree, T. The branching index and embedding index of a tree are defined. If, further, each room is required to be external, then {{the existence of a}} rectangular <b>floorplan</b> is dependent upon the embedding index of T. Orthogonal <b>floorplans</b> in which each room is rectangular or L-shaped are always possible under the same conditions. Extensions to some other nonrectangular <b>floorplans</b> are given. ...|$|R
5000|$|Separate {{work done}} about 1979 at the University of Kaiserslautern {{produced}} a language called KARL ("KAiserslautern Register Transfer Language"), which included design calculus language features supporting VLSI chip <b>floorplanning</b> and structured hardware design. This work {{was also the}} basis of KARL's interactive graphic sister language ABL, whose name was an initialism for [...] "A Block diagram Language". ABL was implemented in the early 1980s by the Centro Studi e Laboratori Telecomunicazioni (CSELT) in Torino, Italy, producing the ABLED graphic VLSI design editor. In the mid-1980s, a VLSI design framework was implemented around KARL and ABL by an international consortium funded by the Commission of the European Union.|$|E
50|$|In FPOA we work at silicon {{object level}} {{a higher level}} than the gate level used in FPGA. This eases the {{learning}} curve and also speeds up development. Programming is done in System C. The Arrix Family released in 2006 was supported by FPOA design software, which enabled designers to create, verify, program and debug their algorithms on the devices.Summit Design's Visual Elite tool was used for behavioural simulation.MathStar's COAST (COnnection and ASsignment Tool) offered a graphical environment for <b>floorplanning</b> and placement it compiled to an intermediate code that maps to hardware resources. The Object compiler generated the file to be loaded into the FPGA. In 2007 MathStar struck a partnership with mentor graphics and subsequent release use Visual Elite editor from Mentor Graphics for behavioural simulation and functional verification.FPOAs also offered IP core library IP partners included professionals in the video market as well as machine vision market.|$|E
5000|$|In {{examining}} EDA design databases, it {{is useful}} to look at EDA tool architecture, to determinewhich parts are to be considered part of the design database, and which parts are the application levels.In addition to the database itself, many other components are needed for a useful EDA application. Associated with a database are one or more language systems (which, although not directly part of the database, are used by EDA applications such as parameterized cells and user scripts). On top of the database are built the algorithmic engines within the tool (such as timing, placement, routing, or simulation engines [...] ), and the highest level represents the applications built from these component blocks, such as <b>floorplanning.</b> The scope of the design database includes the actual design, library information, technology information, and the set of translators to and from external formats such as Verilog and GDSII.|$|E
40|$|Until recently, VLSI {{designers}} rarely considered yield issues {{when selecting}} a <b>floorplan</b> for a newly designed chip. This paper demonstrates that for large area VLSI chips, {{especially those that}} incorporate some fault tolerance, changes in the <b>floorplan</b> can affect the projected yield. We study several general <b>floorplan</b> structures, make some specific recommendations, and apply them to actual VLSI chips. We conclude that the <b>floorplan</b> of a chip can affect its projected yield in a non-negligible way, for chips with or without fault-tolerance. Index Terms [...] Clustering, defects, fault-tolerant ICs, <b>floorplan,</b> large-area ICs, yield. 1. Introduction In the process of designing a new chip, yield issues are rarely {{a factor in the}} choice of the <b>floorplan.</b> This is justified when the chip is relatively small and the defect distribution can be accurately described by either the Poisson or the compound Poisson yield models ([3]). In particular, in the most commonly used compound Poisson model, i. e [...] ...|$|R
40|$|Mosaic <b>floorplans</b> are {{rectangular}} structures {{subdivided into}} smaller rectangular sections and {{are widely used}} in VLSI circuit design. Baxter permutations are a set of permutations that {{have been shown to}} have a one-to-one correspondence to objects in the Baxter combinatorial family, which includes mosaic <b>floorplans.</b> An important problem in this area is to find short binary string representations of the set of n-block mosaic <b>floorplans</b> and Baxter permutations of length n. The best known representation is the Quarter-State Sequence which uses 4 n bits. This paper introduces a simple binary representation of n-block mosaic <b>floorplan</b> using 3 n− 3 bits. It has been shown that any binary representation of n-block mosaic <b>floorplans</b> must use at least (3 n−o(n)) bits. Therefore, the representation presented in this paper is optimal (up to an additive lower order term) ...|$|R
40|$|As VLSI {{technology}} {{enters the}} nanometer era, supply voltages continue to drop {{due to the}} reduction of power dissipation, but it makes power integrity problems even worse. Employing decoupling capacitances (decaps) in <b>floorplan</b> stage is a common approach to alleviating supply noise problems. Previous researches overestimate the decap budget and do not fully utilize the empty space of the <b>floorplan.</b> A <b>floorplan</b> usually {{has a lot of}} available space {{that can be used to}} insert the decap without increasing the <b>floorplan</b> area. Therefore, the goal of this work is to develop a better model to calculate the required decap to solve the power supply noise problem in area-array based designs, and increase the usage of available space in the <b>floorplan</b> to reduce the area overhead caused by decap insertion. The experimental results of this work are encouraging. Compared with previous approaches, our methodology reduces 38 % of the decap budget in average for MCNC benchmarks but can still meet the power supply noise requirements. The final <b>floorplan</b> areas with decap are also smaller than the numbers reported in previous works...|$|R
