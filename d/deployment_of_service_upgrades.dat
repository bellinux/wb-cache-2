0|10000|Public
5000|$|Straightforward discovery, {{storage and}} <b>deployment</b> <b>of</b> <b>services</b> in a service-oriented {{architecture}} ...|$|R
5000|$|Cisco Nexus Virtual Services Appliance - A {{dedicated}} hardware {{platform for}} the <b>deployment</b> <b>of</b> <b>services</b> critical to virtualization infrastructure ...|$|R
50|$|Deployment {{integration}} - Upon <b>deployment</b> <b>of</b> <b>services,</b> {{any party}} {{should have the}} ability to alert others to the existence <b>of</b> the <b>service</b> and the need to put the service and its definitions under management.|$|R
40|$|Abstract— Ad-hoc {{networks}} are an emerging technology with enormous potential. However, {{the lack of}} support for large-scale <b>deployment</b> <b>of</b> applications has hindered the adoption of these networks for commercial use. This paper addresses this shortcoming and details an architecture that supports largescale <b>deployment</b> <b>of</b> <b>services</b> in ad-hoc networks. I...|$|R
40|$|National audienceAutomated {{deployment}} is {{an important}} issue in large-scale distributed systems, such as web services choreographies that implement business processes encompassing multiple organizations. In this paper, we present the CHOReOS Enactment Engine, a novel extensible open source middleware system that provides a platform for automation <b>of</b> the distributed <b>deployment</b> <b>of</b> web <b>service</b> horeographies in cloud computing environments. We evaluated the choreographies enactment time experimentally, varying the amount <b>of</b> <b>services</b> to be deployed and the amount of virtual machines available to the deployment process. The CHOReOS Enactment Engine nabled the automated <b>deployment</b> <b>of</b> <b>service</b> compositions on the cloud in an automated and reproducible way...|$|R
50|$|The Deliver Phase {{concerns}} the envisioning, planning, building, stabilization, and <b>deployment</b> <b>of</b> requested <b>services.</b>|$|R
30|$|The use of Cloudlets in {{the context}} of Fog environments has proven to provide several {{advantages}} in terms of response times and energy consumption, among other benefits [23]. Thus, most multi-layer architectures (that include Cloud and Fog) incorporate the concept of Cloudlets for the <b>deployment</b> <b>of</b> <b>services</b> and applications in order to improve response times, Quality <b>of</b> <b>Service</b> (QoS), and other factors.|$|R
5000|$|Publication and <b>deployment</b> <b>of</b> Web <b>Services</b> with {{connectivity}} to databases, Web Services, Email, PDF documents, and messaging systems ...|$|R
50|$|Existing {{packaged}} application integration {{solutions are}} complex and require significant implementation effort, often including extensive manual coding for deployment purposes. An SOAIF provides native support for run time <b>deployment</b> <b>of</b> <b>services</b> across the network and dramatically reduces the overall costs of application integration and deployment by automating these time-consuming processes. It also allows extension of integration across business boundaries.|$|R
50|$|In Canada, the <b>deployment</b> <b>of</b> 2-1-1 <b>service</b> {{is subject}} to InformCanada {{accreditation}} and Canadian Radio-television and Telecommunications Commission (CRTC) approval.|$|R
40|$|Abstract. Cloud {{computing}} {{is becoming}} an interesting alternative as a flexible and affordable on-demand environment for deploying custom applications in the form <b>of</b> <b>services.</b> This work proposes a bio-inspired, self-organizing solution to support the allocation and deallocation of vir-tual machines and the <b>deployment</b> <b>of</b> <b>services</b> on virtual machines in a cloud infrastructure. The goal is twofold: to meet the service level agree-ments and to minimize the number of required virtual machines...|$|R
40|$|Abstract—In recent years, service-oriented {{systems are}} becom-ing {{increasingly}} complex, with growing size and heterogeneity. Developing and deploying such large-scale systems present several challenges, such as reliability, reproducibility, handling failures on infrastructure, scaling deployment time as composition size grows, coordinating deployment among multiple organizations, dependency management, and supporting requirements of adapt-able systems. However, many organizations still rely on manual deployment processes, which imposes difficulties in overcoming such challenges. In this paper, we propose a flexible and extensible middleware solution {{that addresses the}} challenges present in the large-scale <b>deployment</b> <b>of</b> <b>service</b> compositions. The CHOReOS Enactment Engine is a robust middleware infrastructure to automate the <b>deployment</b> <b>of</b> large-scale <b>service</b> compositions. We describe the middleware architecture and implementation and then present experimental results demonstrating the feasibility of our approach. I...|$|R
3000|$|... [*]Perceived Financial Risks: The <b>deployment</b> <b>of</b> SaaS <b>services</b> {{might involve}} unanticipated costs [25]. This {{includes}} the organization’s own security infrastructure and service customization [11, 15].|$|R
40|$|International audienceTo {{foster the}} {{industrial}} adoption <b>of</b> virtualized <b>services,</b> {{it is necessary}} to address two important problems: (1) the efficient analysis, dynamic composition and <b>deployment</b> <b>of</b> <b>services</b> with qualitative and quantitative service levels and (2) the dynamic control of resources such as storage and processing capacities according to the internal policies <b>of</b> the <b>services.</b> The position supported in this paper is to overcome these problems by leveraging service-level agreements into software models and resource management into early phases <b>of</b> <b>service</b> design...|$|R
5|$|In the 1950s, two {{additional}} generators {{were added to}} the power station, bringing the total to six. Between 1995 and 2003, the dam's six hydroelectric generators were upgraded, bringing the installed capacity of the power plant from 92 MW to 120 MW and increasing its generation 20%. Each autumn, a generator was taken out <b>of</b> <b>service,</b> <b>upgraded</b> and returned to <b>service</b> by spring <b>of</b> the next year. The sixth and final generator upgrade was completed in May 2003. Among the components principally upgraded were the turbine shafts and runners.|$|R
40|$|With {{the recent}} {{explosion}} in <b>deployment</b> <b>of</b> <b>services</b> to {{large numbers of}} customers over the Internet and in global services in general, {{issues related to the}} architecture of scalable servers are becoming increasingly important. However, our understanding of these types of applications is currently limited, especially on how well they scale to support large numbers of users. One such, novel, commercial class of applications, are interactive, multi [...] player game servers...|$|R
40|$|The <b>deployment</b> <b>of</b> <b>service</b> {{management}} systems in a multi-service environment opens a whole area of issues. Requirements for openness and reusability can be satisfied by following a service engineering approach where the service management functionality is decomposed to reusable service components. Such {{an approach that}} was based on TMN technology is presented in this paper and conclusions are drawn about the potential of other available technologies with regard to service management...|$|R
50|$|Reduce crime {{through the}} pro-active <b>deployment</b> <b>of</b> the police <b>service</b> dog.|$|R
5000|$|The govdex {{architecture}} {{recognizes that}} data and services remain {{the responsibility of}} the owning agency with govdex only providing a framework to facilitate the <b>deployment</b> <b>of</b> interoperable <b>services.</b>|$|R
50|$|HP Cloud Service Automation (HP CSA) is cloud {{management}} {{software from}} Hewlett-Packard {{that is used}} by companies and government agencies to automate the management of cloud-based IT-as-a-service, from order, to provision, and retirement. HP Cloud Service Automation orchestrates the provisioning and <b>deployment</b> <b>of</b> complex IT <b>services</b> such as <b>of</b> databases, middleware, and packaged applications (i.e., ERP, Exchange). The software speeds <b>deployment</b> <b>of</b> application-based <b>services</b> across hybrid cloud delivery platforms and traditional IT environments.|$|R
40|$|Peer-reviewedIn {{this paper}} {{we present a}} {{proposal}} of the architecture for a system which allows the <b>deployment</b> <b>of</b> <b>services</b> {{in a group of}} computers, connected in a peer-to-peer fashion. This architecture is divided in layers, and each of them contains some components which offer specific functions. By putting them together, we obtain a system with desirable characteristics such as scalability, decentralization, ability to deal with heterogeneity, fault tolerance, load-balancing, and self-* properties...|$|R
5000|$|IS: Integration Server: {{enabling}} {{the development and}} <b>deployment</b> <b>of</b> SOAP web <b>services</b> ...|$|R
25|$|The {{station is}} often also used as backup {{terminal}} when {{parts of the}} railway network are undergoing maintenance; the station received a wide variety <b>of</b> <b>services</b> during <b>upgrades</b> to the Aragó tunnel during winter of 2008.|$|R
5000|$|... {{identifying}} {{alternative ways}} for governmental agencies and public authorities {{to serve the}} citizens efficiently in areas/cases where the <b>deployment</b> <b>of</b> physical <b>services</b> and personnel is costly or not possible.|$|R
40|$|In this paper, {{we first}} motivate {{the need for}} {{innovative}} open service frameworks that ensure capability of self-adaptability and long-lasting evolvability (i. e., eternity). On this basis, we discuss how such frameworks should get inspiration from natural ecosystems, by enabling modelling and <b>deployment</b> <b>of</b> <b>services</b> as autonomous individuals in an ecosystem <b>of</b> other <b>services,</b> data sources, and pervasive devices. A reference architecture is presented to clarify the concepts expressed, and then several possible approaches to realise the idea are surveyed and critically analyzed...|$|R
5000|$|Service-oriented {{processes}} {{deployed in}} an SOAIF are composed <b>of</b> coarse-grained Web <b>services</b> ideally suited for easy change and replacement. By abstracting {{the details of}} message routing from service implementations, service-oriented tools decouple and enable running processes to be modified on-the-fly by simple service replacement or addition. The tools framework within an SOAIF supports the run-time <b>deployment</b> <b>of</b> <b>services,</b> allowing changed processes to be deployed instantly across the network. Our experience is that this significantly reduces solution deployment costs compared with traditional, broker-based solutions.|$|R
40|$|The {{adoption}} of the "Web Services" model for building a Grid framework created a considerable shift from the original concept of Grid {{which was based on}} "distributed job scheduling". The requirement for the access and integration of heterogeneous data resources over the Grid, and the advances in service-oriented data access standards {{led to the development of}} a service-oriented distributed query processor, which forms the basis of this thesis. The {{adoption of}} service-orientation raised the need for a framework which would allow demand-driven <b>deployment</b> <b>of</b> Web <b>Services</b> on available resources. Research into such concepts led to the development of DynaSOAr, a framework which proposed an alternative approach to distributed job scheduling by focussing entirely on the concept <b>of</b> <b>services,</b> rather than the more traditional jobs. DynaSOAr allows services to be deployed on demand to meet changing performance requirements and exploits the advances made in virtualization technologies to support the <b>deployment</b> <b>of</b> <b>services</b> and databases...|$|R
30|$|In this article, {{we provide}} an {{assessment}} of the economic gains in terms of service-related cost savings, provided by the joint <b>deployment</b> <b>of</b> several <b>services</b> against a <b>deployment</b> <b>of</b> a single <b>service.</b> This assessment is obtained by combining the technical architecture for train-to-wayside communication with Quality <b>of</b> <b>Service</b> (QoS) over heterogeneous wireless networks from [4] and a techno-economic model based on [5], whose cost model comes from industry data. Savings by resource sharing are estimated and the costs are distributed between actors, what is critical information for the business models of the involved actors.|$|R
40|$|International audiencePervasive devices, such as {{mobile phones}} or {{personal}} gateways, allows {{more and more}} to execute personal services and not only legacy services. This opportunity raises the challenge <b>of</b> deploying heterogeneous <b>services</b> non-previously considered in the environment. In this paper, we present an architecture for the semantic <b>deployment</b> <b>of</b> <b>services</b> in a pervasive environment. This architecture, based on a middleware distributed on each device, specially includes a Deployment Service interacting discovery and interoperability middleware services. This Deployment Service takes into account the semantic description <b>of</b> <b>services</b> and the semantic description <b>of</b> <b>deployment</b> itself to apply a semantically and timely local deployment strategy...|$|R
40|$|Summary. In this paper, {{we first}} motivate {{the need for}} {{innovative}} open service frameworks that ensure capability of self-adaptability and long-lasting evolvability (i. e., eternity). On this basis, we discuss how such frameworks should get inspiration from natural ecosystems, by enabling modelling and <b>deployment</b> <b>of</b> <b>services</b> as autonomous individuals in an ecosystem <b>of</b> other <b>services,</b> data sources, and pervasive devices. A reference architecture is presented to clarify the concepts expressed, and then several possible approaches to realise the idea are surveyed and critically analyzed. ...|$|R
40|$|In {{distributed}} {{organizational and}} business information systems’ contexts, Service-Oriented Architectures (SOA) provide standard-based and protocol independent solutions. Despite the advances in SOA models and design methodologies, the implementation and <b>deployment</b> <b>of</b> <b>service</b> choreographies are still made in an un-unified manner using the existing tools. We present a three-layered framework model based on deployment agents, which allows designing and implementing service choreographies in a unified and reusable manner using the Object-Oriented Paradigm concepts. Deployment agents contain automatic mechanisms for service deployment which will ease the management <b>of</b> <b>service</b> references involved in service compositions at development time...|$|R
5000|$|Intelligent Network (IN) {{solutions}} have revolutionized wireline networks. Rapid {{creation and}} <b>deployment</b> <b>of</b> <b>services</b> {{has become the}} hallmark of a wireline network based on IN concepts. Wireless Intelligent Network (WIN) will bring those same successful strategies into the wireless networks. The evolution of wireless networks to a WIN concept <b>of</b> <b>service</b> <b>deployment</b> delivers the following advantages, similar to the IN benefits reaped by wireline providers:• Multivendor product offerings that faster competition • Uniform services to subscribers across service areas • Efficient network use • Service creation and deployment ...|$|R
40|$|This paper {{describes}} an infrastructure for the deploy-ment and use <b>of</b> Web <b>Services</b> that are resilient {{to the failure}} of the nodes that host those services. The infra-structure presents a single interface that provides mecha-nisms for users to publish services and to find the services that are hosted. The infrastructure supports the auto-nomic <b>deployment</b> <b>of</b> <b>services</b> and the brokerage of hosts on which services may be deployed. Once deployed, ser-vices are autonomically managed in a number of aspects including load balancing, availability, failure detection and recovery, and lifetime management. Services are published and deployed with associated metadata de-scribing the service type. This same metadata may be used subsequently by interested parties to discover ser-vices. The infrastructure uses peer-to-peer (P 2 P) overlay technologies to abstract over the underlying network to deploy and locate instances <b>of</b> those <b>services.</b> It takes advantage of the P 2 P network to replicate directory ser-vices used to locate service instances (for using a ser-vice), <b>Service</b> Hosts (for <b>deployment</b> <b>of</b> <b>services)</b> and Autonomic Managers which manage the deployed ser-vices. The P 2 P overlay network is itself constructed using novel middleware based on Web Services and a variation of the Chord P 2 P protocol, which is self-configuring and self-repairing. 1...|$|R
40|$|Dynamic <b>deployment</b> <b>of</b> Web <b>services</b> is a {{term used}} {{frequently}} when describing the selection and <b>deployment</b> <b>of</b> a <b>service</b> to a grid host. Although current grid systems (such as Globus) provide dynamic <b>deployment,</b> the requirements <b>of</b> the <b>service</b> being deployed are not considered. Therefore truly dynamic deployment cannot be achieved as the services deployed are restricted to the grid system used. We present a dynamic deployment mechanism as part of self configuration in a service oriented grid environment. The dynamic deployment mechanism takes the requirements <b>of</b> the <b>service</b> into consideration, including parameters such as the operating system required to execute the service, the required software libraries, any additional required software packages, price and Quality <b>of</b> <b>Service</b> (QoS) parameters. <br /...|$|R
40|$|Abstract — The {{development}} of highly dynamic and pervasive environments has {{lead to a}} proliferation <b>of</b> <b>services</b> coming from different providers. These services are usually deployed independently of the context, platforms and devices present in the environment. We propose an ontology-based approach {{to take advantage of}} semantic to enable an optimized <b>deployment</b> <b>of</b> <b>services</b> in pervasive environments. We realize a deployment system which takes into account semantic description <b>of</b> <b>services,</b> semantic description <b>of</b> environment and semantic description <b>of</b> <b>deployment</b> itself to apply deployment strategies. Our semantic deployment is based on the Ontology Web Language for Services (OWL-S). We enrich the OWL-S with devices and platforms considerations...|$|R
40|$|This paper {{presents}} a model-based approach to service creation. We observe that the complexity <b>of</b> software <b>services</b> increases. To manage this complexity, and to quickly create specific services in an efficient and cost-effective way upon user request, models are used, going towards ‘higher-level’ programming. A service creation environment is developed {{that supports the}} modelling <b>of</b> <b>services</b> at successive abstraction levels, the analysis <b>of</b> <b>service</b> models, their actual implementation, and the testing and <b>deployment</b> <b>of</b> <b>service</b> implementations. Services {{are assumed to be}} developed from existing or newly developed software components. Components are modelled by describing their external behaviour, rather than their interface(s) only. This provides additional design information facilitating a systematic approach to service creation. This paper shows how we model services and their constituent components, and how we use these models...|$|R
