9|5|Public
40|$|This article {{examines}} aspects of copyright related to <b>informative</b> <b>documentation.</b> It focuses on audio-visual databases from a double perspective: {{on the one}} hand, the database as “archive” and, on the other, copyright aspects relating to the sources and different categories of the materials contained within the archive...|$|E
40|$|As {{concerns}} the conservation and enhancement of cultural heritage, drawing {{is a crucial}} tool to document, understand and portray complex architectural and archaeological reality. Graphic data or <b>informative</b> <b>documentation</b> about an extremely interesting historical and artistic site can be enriched by its intangible values: atmosphere, colour, light and the environment...|$|E
40|$|In {{the present}} study a carried out {{practice}} of cooperative learning in the University of Malaga is described during academic course 2009 - 2010 by the students of 2 º of Publicity and Public Relations, in the subject of <b>Informative</b> <b>Documentation.</b> The work in equipment and {{the integration of the}} collaborative tools of Web 2, 0 (blogs, wikis, Google Docs, etc) have been elements to reach the objectives proposed in this experience...|$|E
50|$|Previously {{known as}} Photojournalism (2007-2010) and News Photography (2011-2012). Honors {{excellence}} in the <b>informative</b> photographic <b>documentation</b> {{of an event}} or subject in real-time.|$|R
40|$|The use {{of types}} in {{capturing}} program invariants is overwhelming in practical programming. The type systems in languages such as ML and Java scale convincingly to realistic programs {{but they are}} of relatively limited expressive power. In this paper, we show {{that the use of}} a restricted form of dependent types can enable us to capture many more program invariants such as memory safety while retaining practical type-checking. The programmer can encode program invariants with type annotations and then verify these invariants through static type-checking. Also the type annotations can serve as <b>informative</b> program <b>documentation,</b> which are mechanically verified and can thus be fully trusted. We argue with realistic examples that this restricted form of dependent types can significantly facilitate program verification as well as program documentation...|$|R
5000|$|To make an {{informative}} process assistant {{from the business}} process model, certain modeling rules must be followed. The means e.g. that the individual actions must be deposited with its descriptions, {{the responsibility of the}} organisation units must be indicated explicitly or the paths also must be entered to the documents in the class tree. The fulfilment of these conditions means an additional time expenditure at the modeling, if these conditions are met, all employees are able to [...] "surf" [...] online through the intranet {{with the help of the}} process assistant by an <b>informative</b> enterprise <b>documentation.</b> They have the possibility between a graphic view and a texture based description according to their preferences and methodical previous knowledge. The graphic view is provided by the MO²GO Viewer, a viewer tool for MO²GO models. The process assistant and the MO²GO Viewer are connected so that the graphic representation of the process looked at can be accessed context sensitively from the process assistant.|$|R
40|$|Software Design and Documentation Language (SDDL) {{provides}} {{effective communication}} medium to support design and documentation of complex software applications. SDDL supports communication among {{all members of}} software design team and provides for production of <b>informative</b> <b>documentation</b> on design effort. Use of SDDL-generated document to analyze design {{makes it possible to}} eliminate many errors not detected until coding and testing attempted. SDDL processor program translates designer's creative thinking into effective document for communication. Processor performs as many automatic functions as possible, freeing designer's energy for creative effort. SDDL processor program written in PASCAL...|$|E
40|$|Abstract Formal methods tools {{have greatly}} {{influenced}} our abilityto increase {{the reliability of}} software and hardware systems by revealing errors and clarifying critical concepts. In thisarticle we show how a rich specification language and a theorem prover for it {{have contributed to the}} design and im-plementation of verifiably correct adaptive protocols. The protocol building team included experts in formal methodswho were able to use the theorem prover to help guide protocol construction at the pace of implementation that is notformally assisted. This example shows that formal methods can have alarge impact when being engaged at the earliest stages of design and implementation, because they add value to allsubsequent stages, including the creation of <b>informative</b> <b>documentation</b> needed for the maintenance and evolutionof software. 1...|$|E
40|$|The {{research}} aims {{to define}} the operative procedure for constructing digital archives based on threedimensional models generated by massive and fast acquisition of data regarding objects of architecture. Today digital objects have become a tradition in the cultural production and a business cycle with the objective to disseminate and communicate cultural data. The problem centers on a definition of data necessary for setting up digital archives. These data will be extracted from material obtained from surveys {{as well as from}} <b>informative</b> <b>documentation</b> and need to be chosen and structured. Hence the research aims at identifying the kind of information, tangible and intangible, principal and essential of the Architectural object and classifying them into distinctive and characteristic categories which make it possible to cognize the given object...|$|E
40|$|The {{ability to}} {{comprehend}} a program written by other individuals {{is becoming increasingly}} important in software development and maintenance. In an attempt to encourage undergraduate Computer Science students to write <b>informative</b> and usable <b>documentation,</b> the literate programming paradigm was incorporated into the teaching of one undergraduate Computer Science course at Augustana College. This paper describes the concept of literate programming, the experience of using literate programming to teach good programming practices, and {{the results from the}} experiment that showed that literate programming encourages more documentation. Introduction The ability to comprehend a program written by other individuals is becoming increasingly important in software development and maintenance. Studies have shown that 30 - 90 % of software expenditure is spent on maintaining existing software [15, 12]. Studies have also shown that maintenance programmers spend about half of their time studying the code [...] ...|$|R
40|$|This article {{explores the}} {{relationship}} between the lack of visible attention to formative assessment in degree specifications and its marginalization in practice. Degree specification documents form part of the quality apparatus emphasizing the accountability and certification duties of assessment. Ironically, a framework designed to assure quality may work to the exclusion of a pedagogic duty to students. This study draws on interview and documentary evidence from 14 programmes at a single UK university, supported by data from a national research project. The authors found that institutional quality frameworks focused programme leaders’ attention on summative assessment, usually atomized to the modular unit. The invisibility of <b>informative</b> assessment in <b>documentation</b> reinforced the tendency of modular programmes to have high summative demands, with optional, fragmented and infrequent informative assessment. Heavy workloads, modularity and pedagogic uncertainties compounded the problem. The article concludes with reflections about facilitating a more pervasive culture of formative assessment to improve student learning...|$|R
40|$|Formal methods tools {{have greatly}} {{influenced}} {{our ability to}} increase the reliability of software and hardware systems by revealing errors and clarifying critical concepts. In this article we show how a rich specification language and a theorem prover for it {{have contributed to the}} design and implementation of verifiably correct adaptive protocols. The protocol building team included experts in formal methods who were able to use the theorem prover to help guide protocol construction at the pace of implementation that is not formally assisted. This example shows that formal methods can have a large impact when being engaged at the earliest stages of design and implementation, because they add value to all subsequent stages, including the creation of <b>informative</b> <b>documentation</b> needed for the maintenance and evolution of software. 1...|$|E
40|$|The City of Refuge in Paris (1929 - 30) is an {{experimental}} building where Le Corbusier wanted to apply his famous proposal of environmental conditioning systems of buildings through {{the combination of}} two technological advances that supported his concept of machine à habiter: the mur neutralisant and respiration exacte. This paper presents a historical journey from the first attempts to carry out these two technological innovations to a complete <b>informative</b> <b>documentation</b> on the major decisions and changes made in the City of Refuge by collecting letters and reports of the main actors who intervened in it. The {{aim of this study}} is to investigate environmental conditioning through passive and active strategies in Le Corbusier's architecture, carrying this study out in the year 2013, which marks the 50 th anniversary of his death. The results and findings have allowed us to complete the analysis that architectural critics have produced on the City of Refuge, through understanding the real behaviour of the building as originally built, as well as the success that the combination of the mur neutralisant and the respiration exacte, advanced technologies for their time, could have had. At present these are once again being used in the design of active façades which deal with existing concerns about sustainability and energy efficiency...|$|E
40|$|Effective, {{efficient}} {{communication is}} {{an essential element of}} the software development process. The Software Design and Documentation Language (SDDL) provides an effective communication medium to support the design and documentation of complex software applications. SDDL supports communication between all the members of a software design team and provides for the production of <b>informative</b> <b>documentation</b> on the design effort. Even when an entire development task is performed by a single individual, it is important to explicitly express and document communication between the various aspects of the design effort including concept development, program specification, program development, and program maintenance. SDDL ensures that accurate documentation will be available throughout the entire software life cycle. SDDL offers an extremely valuable capability for the design and documentation of complex programming efforts ranging from scientific and engineering applications to data management and business sytems. Throughout the development of a software design, the SDDL generated Software Design Document always represents the definitive word on the current status of the ongoing, dynamic design development process. The document is easily updated and readily accessible in a familiar, informative form to all members of the development team. This makes the Software Design Document an effective instrument for reconciling misunderstandings and disagreements in the development of design specifications, engineering support concepts, and the software design itself. Using the SDDL generated document to analyze the design makes it possible to eliminate many errors that might not be detected until coding and testing is attempted. As a project management aid, the Software Design Document is useful for monitoring progress and for recording task responsibilities. SDDL is a combination of language, processor, and methodology. The SDDL syntax consists of keywords to invoke design structures and a collection of directives which control processor actions. The designer has complete control over the choice of keywords, commanding the capabilities of the processor in a way which is best suited to communicating the intent of the design. The SDDL processor translates the designer's creative thinking into an effective document for communication. The processor performs as many automatic functions as possible, thereby freeing the designer's energy for the creative effort. Document formatting includes graphical highlighting of structure logic, accentuation of structure escapes and module invocations, logic error detection, and special handling of title pages and text segments. The SDDL generated document contains software design summary information including module invocation hierarchy, module cross reference, and cross reference tables of user selected words or phrases appearing in the document. The basic forms of the methodology are module and block structures and the module invocation statement. A design is stated in terms of modules that represent problem abstractions which are complete and independent enough to be treated as separate problem entities. Blocks are lower-level structures used to build the modules. Both kinds of structures may have an initiator part, a terminator part, an escape segment, or a substructure. The SDDL processor is written in PASCAL for batch execution on a DEC VAX series computer under VMS. SDDL was developed in 1981 and last updated in 1984...|$|E

