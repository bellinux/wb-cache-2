0|1996|Public
40|$|AbstractWe propose an {{efficient}} implementation technique for graph transformation systems based on incremental updates. The {{essence of the}} technique is {{to keep track of}} all possible matchings of graph transformation rules in <b>database</b> <b>tables,</b> and <b>update</b> these <b>tables</b> incrementally to exploit the fact that rules typically perform only local modifications to models...|$|R
40|$|We propose an {{efficient}} implementation technique for graph transformation systems based on incremental updates. The {{essence of the}} technique is {{to keep track of}} all possible matchings of graph transformation rules in <b>database</b> <b>tables,</b> and <b>update</b> these <b>tables</b> incrementally to exploit the fact that rules typically perform only local modifications to models. Key words: graph transformation, graph pattern matching, relational databases. ...|$|R
5000|$|Version 4.0.7 of 30. August 2013 added {{a lot of}} enhancements, like a client/server feature with a local {{cache storage}} of the {{definition}} files of the used tokens, a completely new implementation of the MySQL support (including <b>database</b> <b>tables</b> creation and <b>update),</b> CHAP authentication (in addition to PAP authentication), QRcode generation for direct provisioning in Google Authenticator, fast creation of a user in a single command, ...|$|R
30|$|The {{example of}} large data mining (discussed in section case 3 : data mining and management) shows the {{challenge}} of organizing data in various <b>tables.</b> <b>Database</b> <b>update</b> and queries heavily depend on the data distribution among tables. The optimal distribution of data may not be easily attainable due {{to the complexity of}} the system measured by large number of tables and large number of attributes; (in our example, the number of tables exceeded 2000 tables, and the number of attributes in some tables exceeded 200). In this case, it is essential to develop adaptive algorithms to shuffle data across tables throughout the lifetime of the system, thus creating a dynamic database schema. In the case presented in section case 3 : data mining and management section, performance was dramatically improved after deploying dynamic data migration among the <b>tables</b> of the <b>database.</b>|$|R
50|$|A {{database}} {{index is}} a data structure that improves {{the speed of}} data retrieval operations on a <b>database</b> <b>table</b> {{at the cost of}} additional writes and storage space to maintain the index data structure. Indexes are used to quickly locate data without having to search every row in a <b>database</b> <b>table</b> every time a <b>database</b> <b>table</b> is accessed. Indexes can be created using one or more columns of a <b>database</b> <b>table,</b> providing the basis for both rapid random lookups and efficient access of ordered records.|$|R
50|$|In a {{relational}} database, {{a candidate}} key uniquely identifies each row of data values in a <b>database</b> <b>table.</b> A candidate key comprises a single column or {{a set of}} columns in a single <b>database</b> <b>table.</b> No two distinct rows or data records in a <b>database</b> <b>table</b> can have the same data value (or combination of data values) in those candidate key columns since NULL values are not used. Depending on its design, a <b>database</b> <b>table</b> may have many candidate keys but at most one candidate key may be distinguished as the primary key.|$|R
50|$|<b>Table</b> <b>updated</b> {{after the}} 2017 Championships.|$|R
50|$|<b>Table</b> <b>updated</b> on April 23, 2014 {{based on}} refs.|$|R
40|$|In {{this paper}} {{we are taking}} a <b>Database</b> <b>Table,</b> a <b>database</b> is an {{organized}} collection of data. We are performing a Horizontal Aggregation on that particular <b>Database</b> <b>Table,</b> there are three methods from which we are performing Horizontal Aggregation. These three methods give us the output as the dataset of that particular <b>database</b> <b>table.</b> A Dataset {{is a collection of}} data, usually presented in tabular form. By providing these dataset as an input to the C 4. 5 algorithm in WEKA, we are generating Decision tree for that <b>database</b> <b>table.</b> Three methods for Horizontal aggregation are SPJ, PIVOT and CASE. C 4. 5 is the Decision tree Generation Algorithm which generates Decision tree...|$|R
5000|$|All-time Pan Pacific Championships medal <b>table</b> (<b>Updated</b> after 2014 Championships) ...|$|R
5000|$|... #Caption: Eight-column form of {{periodic}} <b>table,</b> <b>updated</b> {{with all}} elements discovered to 2016 ...|$|R
5000|$|<b>Database</b> <b>table</b> import/export to/from comma-delimited or XML files.|$|R
50|$|Some of {{the common}} {{applications}} of views include loading a subset of data members from objects or columns from <b>database</b> <b>tables,</b> executing and handling results of arbitrary SQL queries, including aggregate queries, as well as joining multiple objects and/or <b>database</b> <b>tables</b> using object relationships or custom join conditions.|$|R
30|$|Utilisation metrics, e.g. memory, bandwidth, disk, <b>database</b> <b>tables</b> etc.|$|R
5000|$|It validates <b>database</b> <b>tables,</b> data models, <b>database</b> schema etc.|$|R
50|$|The RENAME {{statement}} {{is used to}} rename a <b>database</b> <b>table.</b>|$|R
5000|$|... <b>database</b> <b>tables,</b> {{with all}} elements, {{including}} their {{type and size}} ...|$|R
50|$|Persist {{does not}} require {{explicit}} mappings from POJOs to <b>database</b> <b>tables.</b> As {{long as there is}} some sort of naming conventions that relate database names with POJO names, Persist will require virtually no mappings. It can, however, be instructed to map Java classes and fields to <b>database</b> <b>tables</b> and columns using annotations.|$|R
50|$|The DROP {{statement}} destroys {{an existing}} <b>database,</b> <b>table,</b> index, or view.|$|R
5000|$|Creating two Python {{classes and}} {{according}} <b>database</b> <b>tables</b> in the DBMS: ...|$|R
5000|$|SQL {{integration}} {{to store}} users and permissions in SQL <b>database</b> <b>tables.</b>|$|R
5000|$|ABAP Dictionary for {{processing}} <b>database</b> <b>table</b> definitions and retrieving global types (SE11) ...|$|R
50|$|There can be {{more than}} one non-clustered index on a <b>database</b> <b>table.</b>|$|R
5000|$|... {{specifies}} {{a simple}} flat file <b>database</b> <b>table</b> using the CSV file format.|$|R
50|$|The {{active record}} pattern is an {{approach}} to accessing data in a <b>database.</b> A <b>database</b> <b>table</b> or view is wrapped into a class. Thus, an object instance is tied to a single row in the table. After creation of an object, a new row {{is added to the}} table upon save. Any object loaded gets its information from the database. When an object is updated, the corresponding row in the <b>table</b> is also <b>updated.</b> The wrapper class implements accessor methods or properties for each column in the table or view.|$|R
5000|$|The system's {{database}} access code is always {{consistent with the}} system's <b>database</b> <b>tables.</b>|$|R
5000|$|Possibility to map process {{variables}} externally to a <b>database</b> <b>table</b> of your choice.|$|R
50|$|The CREATE {{command is}} used to {{establish}} a new <b>database,</b> <b>table,</b> index, or stored procedure.|$|R
5000|$|... #Caption: [...] Entity {{relationship}} diagram, {{essential for}} the design of <b>database</b> <b>tables,</b> extracts, and metadata.|$|R
50|$|Mapping {{informs the}} ORM tool of what Java class object to store in which <b>database</b> <b>table.</b>|$|R
5000|$|Database index—a data {{structure}} that improves {{the speed of}} data retrieval operations on a <b>database</b> <b>table</b> ...|$|R
40|$|Abstract—Policy lookup {{is a very}} {{essential}} {{function in}} packet forwarding and network security. As it is becoming a main cause of bottleneck in many network systems, this letter introduces a new policy lookup algorithm called FRFC (Fast table building for Recursive Flow Classification). Although {{it is based on}} RFC which shows the best policy lookup speed but the worst policy <b>table</b> <b>update</b> speed, it achieves high performance in <b>table</b> <b>update</b> as well as policy lookup. FRFC divides the whole rule set into smaller sub-rule sets and by doing so, it speeds up the table building time by 50 times compared to RFC when the considered rule set size is 10, 000. With the rule set size increasing, the performance gap becomes larger. Index Terms—Packet classification, recursive flow classifica-tion, <b>table</b> <b>update.</b> I...|$|R
30|$|This paper realizes {{efficient}} {{performances by}} developing two novel encrypted <b>database</b> <b>tables.</b> These two encrypted <b>database</b> <b>tables</b> {{make it possible}} a server to access data directly. Prior papers'computational complexity is at least O(n), while our schemes' computational complexity is O(1) during a search process. Therefore, our scheme is approximately 935 times faster than Golle's scheme and around 16 times faster than Song's scheme for 10, 000 documents.|$|R
25|$|Whenever any <b>table</b> is <b>updated,</b> all reports {{referencing}} the <b>table</b> {{are also}} <b>updated.</b>|$|R
50|$|The {{following}} example defines {{an internal}} table with two fields with {{the format of}} <b>database</b> <b>table</b> VBRK.|$|R
5000|$|An {{electronic}} file {{such as a}} digital image, digital photo, electronic document, program file, <b>database</b> <b>table,</b> etc.|$|R
