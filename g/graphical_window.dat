18|117|Public
5000|$|... rio is {{the latest}} in a long series of {{graphical}} user interfaces developed at Bell Labs, mostly developed by Rob Pike, including the first <b>graphical</b> <b>window</b> system for UNIX (which predated X), the concurrent window system, and the Blit.|$|E
5000|$|Tk is a platform-independent GUI {{framework}} {{developed for}} Tcl. From a Tcl shell (tclsh), Tk may be invoked using the command [...] The program wish (WIndowing SHell) {{provides a way}} to bring up a tclsh shell in a <b>graphical</b> <b>window</b> as well as providing Tk.|$|E
50|$|A {{terminal}} multiplexer can {{be thought}} of as a text version of <b>graphical</b> <b>window</b> managers, or as a way of putting attach virtual terminals to any login session. It is a wrapper that allows multiple text programs to run at the same time, and provides features that allow the user to use the programs within a single interface productively.|$|E
50|$|Object Windows Library (OWL): A set of C++ {{classes to}} make it easier to develop {{professional}} <b>graphical</b> <b>Windows</b> applications.|$|R
50|$|The {{design of}} client {{software}} {{was just a}} few kilobytes of code and was based on Andy Wightman's own tiny ROMable <b>graphical</b> <b>windowing</b> system called GROW (<b>Graphical</b> ROMable Object <b>Windows)</b> which he had developed whilst at Digital Research in the early 1990s.|$|R
5000|$|Greeter - the <b>graphical</b> login <b>window</b> (provided by GNOME Shell) ...|$|R
50|$|GNU Screen can {{be thought}} of as a text version of <b>graphical</b> <b>window</b> managers, or as a way of putting virtual {{terminals}} into any login session. It is a wrapper that allows multiple text programs to run at the same time, and provides features that allow the user to use the programs within a single interface productively. This enables the following features: persistence, multiple windows, and session sharing.|$|E
50|$|Many modern {{programs}} with a graphical interface simulate the display style of text mode programs, notably {{when it is}} important to preserve the vertical alignment of text, e.g., during computer programming. There exist also software components to emulate text mode, such as terminal emulators or command line consoles. In Microsoft Windows, the Win32 console usually opens in emulated, <b>graphical</b> <b>window</b> mode. It can be switched to full screen, true text mode and vice versa by pressing the Alt and Enter keys together. This is no longer supported by the WDDM display drivers introduced with Windows Vista.|$|E
40|$|The aim of diploma thesis named “QRS {{detection}} using wavelet transform” is {{to simplify}} and accelerate {{the work of}} doctors. This {{can be achieved by}} using application for QRS detection, which can use one of four proposed algorithms. Application shows basic informations about inserted electrocardiogram. Part of this program is a <b>graphical</b> <b>window</b> with displayed record and with coloured marks on detected QRS complexes. By another algorythm are marks color-coded due to accurancy percentil of every detected complex. This program is designed for a several hours record from Holter ECG monitoring...|$|E
5000|$|Because IP Pascal modules can [...] "override" [...] each other, a {{graphical}} extension module (or {{any other}} type of module) can override the standard I/O calls implemented in a module below it. Thus, paslib implements standard Pascal statements such as read, write, and other support services. gralib overrides these services and redirects all standard Pascal I/O to <b>graphical</b> <b>windows.</b>|$|R
5|$|The update also {{removes the}} {{graphical}} user interface for the Windows System Assessment Tool, meaning that the Windows Experience Index is no longer displayed. The command line version of the tool remains available on the system. Microsoft reportedly removed the <b>graphical</b> <b>Windows</b> Experience Index {{in order to promote}} the idea that all kinds of hardware run Windows 8 equally well.|$|R
50|$|Haerr's {{experience}} with Windows and UNIX operating systems branched {{out to the}} newer, free Linux operating system. In 1999, he wrote a free <b>graphical</b> <b>windowing</b> system called Microwindows {{that could be used}} on small, embedded Linux systems. This system, because of its small size and free cost, enabled many others to build their own applications in the emerging PDA and mobile marketplace.|$|R
40|$|Input {{analysis}} {{which involves}} {{a large amount}} of statistical analysis {{is one of the major}} steps in simulation. A software package with a well-designed user-friendly <b>graphical</b> <b>window</b> interface has been developed to assist modelers in identifying the underlying statistical distribution of the input data. It integrates techniques for assessing sample independence, hypothesizing families of distributions, estimation of parameters, and performing goodness-of-fit tests in a graphical environment. This allows the modelers to use the package in an interactive way and efforts can be saved in specifying the input probability distribution. © 1997 Elsevier Science B. V. link_to_subscribed_fulltex...|$|E
40|$|The sensory, control, and {{operation}} {{systems of the}} 'MITy' Mars micro-rover are discussed. It is shown that the customized sun tracker and laser rangefinder provide internal, autonomous dead reckoning and hazard detection in unstructured environments. The micro-rover consists of three articulated platforms with sensing, processing and payload subsystems connected by a dual spring suspension system. A reactive obstacle avoidance routine makes intelligent use of robot-centered laser information to maneuver through cluttered environments. The hazard sensors include a rangefinder, inclinometers, proximity sensors and collision sensors. A 486 / 66 laptop computer runs the graphical user interface and programming environment. A <b>graphical</b> <b>window</b> displays robot telemetry in real time and a small TV/VCR is used for real time supervisory control. Guidance, navigation, and control routines work {{in conjunction with the}} mapping and obstacle avoidance functions to provide heading and speed commands that maneuver the robot around obstacles and towards the target...|$|E
40|$|In this paper, {{we present}} REXWERE, a {{software}} tool designed and implemented {{in order to}} extract knowledge from Web usage data {{in the form of}} recommendation fuzzy rules useful to provide personalized link suggestions to the visitor of a Web site. REXWERE employs a hybrid approach that combines fuzzy reasoning and neural learning within a working scheme made of several steps. Firstly, a fuzzy clustering process is applied to group similar user sessions into user profiles. Next, a neuro-fuzzy network is trained using information about user profiles in order to derive a set of recommendation fuzzy rules. Finally, a further learning step is performed to improve the accuracy of the derived recommendation model. Throughout the use of REXWERE, the user is guided by a wizard-based interface made of a sequence of panels. Each panel consists in a <b>graphical</b> <b>window</b> providing a basic function of the tool. An illustrative example is provided to show the use of REXWERE and to demonstrate its effectiveness in finding good recommendation rules...|$|E
50|$|In computing, Microwindows is a {{windowing}} system which is full featured {{enough to be}} used on a PC or a PDA. The Nano-X Window System is an Open Source project aimed at bringing the features of modern <b>graphical</b> <b>windowing</b> environments to smaller devices and platforms. The project was renamed to Nano-X Window System, due to legal threats from Microsoft regarding the Windows trademark.|$|R
50|$|The update also {{removes the}} {{graphical}} user interface for the Windows System Assessment Tool, meaning that the Windows Experience Index is no longer displayed. The command line version of the tool remains available on the system. Microsoft reportedly removed the <b>graphical</b> <b>Windows</b> Experience Index {{in order to promote}} the idea that all kinds of hardware run Windows 8 equally well.|$|R
50|$|By {{the end of}} 1990, Windows 3.0 was the top-selling software. The various <b>graphical</b> <b>Windows</b> {{applications}} {{had already}} started to reduce training time and enhance productivity on personal computers. At the same time, various Unix and Unix-based operating systems dominated technical workstations and departmental servers. The idea of a consistent application environment across heterogeneous environments was compelling to both enterprise customers and software developers.|$|R
40|$|Abstract:- The {{proposed}} system entitled ‘‘Target Detection and Offline {{analysis of}} RADAR data from MIL-STD- 1553 B’ ’ will detect the target, plots the {{position on the}} screen and help the pilots, test engineers and RADAR evaluation team during offline. The path of the TARGET and HOST/HACK aircrafts are analyzed along with navigation specific parameters. The system has the mechanism to save the HOST/HACK and TARGET information during flight. The system will also work in on-line mode. During the on-line mode the TARGET information is detected by the RADAR and is available on MIL-STD- 1553 B Bus. Using the Bus Monitor (BM) mode the relevant data is extracted. Using this data the flight position of the TARGET aircrafts are calculated. In off-line the recorded data’s are used to calculate the positions of the aircrafts and the paths of the aircrafts. It is plotted on the map in a <b>graphical</b> <b>window.</b> All the navigation details of the aircraft are displayed on a tote window for RADAR data analysis purpose. Key-Words:- RADAR, MIL-STD- 1553 B, UHF, TDMA, TARGET...|$|E
40|$|Abstract I {{present the}} small R package digitize, {{designed}} to extract data from scatterplots {{with a simple}} method and suited to small datasets. I present an application of this method to the ex-traction of data from a graph whose source is not available. The package digitize, that I present here, allows a user to load a graphical file of a scatterplot (with {{the help of the}} read. jpeg function of the ReadImages package) in the <b>graphical</b> <b>window</b> of R, and to use the locator function to calibrate and extract the data. Calibration is done by setting four reference points on the original graph axis, two for the x values and two for the y values. The use of four points for cal-ibration is justified {{by the fact that it}} makes calibra-tions on the axis possible, as y data are not taken into account for calibration of the x axis, and vice versa. This is useful when working on data that are not available in digital form, e. g. when integrating old papers in meta-analyses. Several commercial or free software packages allow a user to extract data from a plot in image format, among which we can cit...|$|E
40|$|Abstract:- In this paper, {{we present}} LODAP, a log data {{preprocessor}} which {{is able to}} extract user sessions starting from the requests stored in the log file of a Web site. LODAP is composed of several modules. A data cleaning module cleans the log file by removing useless records in order to retain only relevant requests encoding the user navigational behaviour. The data structuration module groups the remained requests in user sessions, by using a time-based method. Finally, the data filtering module considerably reduces the size of data concerning the extracted user sessions by deleting the least visited pages and the uninteresting sessions. In addition, a data summarization module creates reports which represent information summaries mined from the analyzed log file and containing the results provided by each module of LODAP. The implemented tool {{is characterized by a}} wizard-based interface which guides the analyst during the preprocessing of the log data through a sequence of “ panels”. Each panel is a <b>graphical</b> <b>window</b> which offers a basic functionality of the processor. Tests on the log files of a specific Web site show that the LODAP tool can effectively reduce the log dataset size and identify significant user sessions...|$|E
50|$|ICEs {{attach a}} {{computer}} terminal or personal computer (PC) to the embedded system. The terminal or PC provides an interactive user interface for the programmer {{to investigate and}} control the embedded system. For example, it is routine to have a source code level debugger with a <b>graphical</b> <b>windowing</b> interface that communicates through a JTAG adapter (emulator) to an embedded target system which has no graphical user interface.|$|R
50|$|Another notable feature was the {{combined}} use {{of both a}} command-line interface and graphical user interface. AmigaDOS was the disk operating system and command line portion of the OS and Workbench the native <b>graphical</b> <b>windowing,</b> icons, menu and pointer environment for file management and launching applications. Notably, AmigaDOS allowed long filenames (up to 107 characters) with whitespace and did not require filename extensions. The windowing system and user interface engine which handles all input events is called Intuition.|$|R
40|$|First public {{release of}} PIEFACE (Polyhedra Inscribing Ellipsoids for Analysing Coordination Environments). The most recent version {{can be found}} at [URL] PIEFACE is {{intended}} to fit ellipsoids to crystallographic polyhedra, for analysing distortions. This release represents the code used to generate the original research publication: J. Cumby and J. P. Attfield, Ellipsoidal Analysis of Coordination Polyhedra, Nature Communications, 8, 14235 (2017). Documentation {{can be found at}} [URL] A <b>graphical</b> <b>windows</b> installer (WinSetup_PIEFACE_ 1. 0. 0. 0. exe) is available from the GitHub release...|$|R
40|$|In {{this paper}} {{we focus on}} log data preprocessing, {{the first step of}} a common Web Usage Mining process. In particular, we present LODAP (LOg DAta Preprocessor), a {{software}} tool which we designed and implemented in order to perform preprocessing of log data. The working scheme of LODAP embraces several steps. Firstly, log files are cleaned by removing irrelevant data. Then, the remaining requests are structured into user sessions, encoding the browsing behavior of users. Successively, the uninteresting sessions and the least visited pages are removed {{in order to reduce the}} size of data concerning the previously extracted user sessions. In addition, LODAP allows to create reports containing the results obtained in each step and information summaries mined from the analysis of the considered log files. During the preprocessing through LODAP, the analyst is guided by a sequence of panels representing the wizard-based interface which characterizes the tool. Each panel is a <b>graphical</b> <b>window</b> which offers a basic function of the preprocessor. Preliminary results on log files of a specific Web site show that the implemented tool can effectively reduce the log data size and identify user sessions encoding the user browsing behavior in a significant manner...|$|E
40|$|We {{present a}} {{graphical}} user interface software environment that enables sleep specialists to analyze, quantify and display time-domain, frequency-domain, and nonlinear dynamics measures of heart rate variability (HRV) signal. A user-friendly {{graphical user interface}} (GUI) and appropriate signal processing algorithms were developed and implemented in MATLAB 6. 0, following the guidelines of the Task Force of the European Society of Cardiology and the North American Society for Pacing and Electrophysiology. This GUI provides the capacity to import or read sleep data (ECG, EEG, blood pressure, respiratory, oxygen saturation, etc.) under user control and displays them individually or collectively in a <b>graphical</b> <b>window</b> for visual comparison. It facilitates the user to analyze 2 min length of data {{at a time to}} carry out the analysis. Raw ECG data is preprocessed for reliable QRS detection and the HRV signal is derived, which is then displayed along with respiration signal in the analysis window. After this step time-domain, frequency domain, and nonlinear dynamics analyses of the HRV signal are performed to extract sensitive measures used in detecting and diagnosing sleep disordered breathing. The system was developed and validated using data from the MIT-BIH Polysomnographic Database and ECG-Apnea Database. After confirmation and reliability testing, this software tool was used to analyze sleep data for classification of normal and abnormal children suffering from sleep disordered breathing (SDB). Data from normal and children diagnosed with SDB showed that the system could potentially distinguish between normal children and children suffering from sleep disordered breathing. ...|$|E
40|$|Due to the {{character}} of the original source materials and the nature of batch digitization, quality control issues may be present in this document. Please report any quality issues you encounter to digital@library. tamu. edu, referencing the URI of the item. Includes bibliographical references. The advancement of distributed networks has increased the importance of network management. The growth of such networks must be consistent with the ability to manage them efficiently. The graphical user interface technology has assisted in designing of tools for network management. Various workstation vendors have developed such tools for their window systems, but many of the tools are not compatible for other systems. The X Window System, however, provides hardware independent and network transparent <b>graphical</b> <b>window</b> system. It can be used as an ideal platform for the development of network management system. Unfortunately, the complexity of information and display in this system makes it very important for efficient design techniques. A network management system, XRView, developed in this thesis demonstrates the usefulness of object-oriented modeling for user interface domain. It provides extensibility for flexibility in configuration and low response time for user events. The techniques developed here {{as a part of the}} implementation of XRView can be very useful in further development of more complex systems. The primary aim of this thesis is to design object-oriented architectural model and techniques for the user interface domain to facilitate the design requirements of hierarchical, extensible user interface based systems and highlight certain important aspects in the design of network management systems...|$|E
50|$|The <b>graphical</b> <b>windows</b> on the {{computer}} screen share some of the visual and functional characteristics of {{the computer}} icon. Windows can be minimized to an icon format to serve as a hyperlink to the window itself. Multiple windows can be open and even overlapping on the screen. However where the icon provides a single button to initiate some function, the principal function of the window is a workspace, which can be minimized to an icon hyperlink when not in use.|$|R
5000|$|... #Caption: The NeuronStudio <b>graphical</b> user {{interface}} (<b>Windows</b> version).|$|R
40|$|The present work {{describes}} {{the development and}} final result of a graphical user interface tailored for a mission-based parametric aircraft design optimization code which targets the preliminary design phase of unmanned aerial vehicles. This development was built from the XFLR 5 open source platform and further benefits from two-dimensional aerodynamic data obtained from XFOIL. For a better understanding, the most important <b>graphical</b> <b>windows</b> are shown. In order to demonstrate the graphical user interface interaction with the aircraft designer, {{the results of a}} case study which maximizes payload are presented...|$|R
40|$|A {{distributed}} {{operating system}} provides the same functionality and interface as a monolithic operating system. That is, for both systems {{the goal is}} to make the computing and storage facilities as provided by the hardware available to the users of the system. In distributed operating system new hardware can be added to the system to increase the storage or computing power, or to increase the availability of the storage and computing services. During and after this addition, the interface to the system remains unchanged. Transparency of access is a key concept. The top-level interface consists of sophisticated command interpreters and editors, supported by a high-resolution <b>graphical</b> <b>window</b> system. This software is run by workstations. Workstations are powerful computer units, consisting of a CPU, memory, a bitmap display, keyboard, a pointing device such as a mouse, and a network interface. In addition, workstations are often equipped with a disk. The CPU is at least as powerful as those used in traditional computer systems, and the amount of memory is equivalent or even larger. A workstation is dedicated to one individual. Consequently, the workstation is idle most of the time. It is therefore tempting to use it as the main computing resource for the owner and perhaps others as well. It could also be used autonomously {{from the rest of the}} system in case of a failure. We are opposed to these uses of workstations, since we believe that workstations should only provide the top-level interface. In this paper we will outline our reasons for this, and show how this principle has been applied in the Amoeba distributed operating system...|$|E
40|$|The Expectation Maximization (EM) {{algorithm}} {{is a method}} for learning the parameters of probabilistic graphical models when there is hidden or missing data. The goal of an EM {{algorithm is}} to estimate a set of parameters that maximizes {{the likelihood of the}} data. In spite of its success in practice, the EM algorithm has several limitations, including slow convergence, computational complexity, and inability to escape local maxima. Using multiple random starting points is a popular approach to mitigate the local maxima problem, but this method is time consuming. This work seeks to improve the understanding and performance of the EM algorithm. We combine evolutionary algorithms, which make use of stochastic search, with the multiple random starting points strategy for the EM algorithm. First, we propose a genetic algorithm for expectation maximization (GAEM), where we combine the global search property of genetic algorithms (GAs) and the local search property of EM. We investigate how different choices of population sizes, crossover and mutation probabilities, and selection techniques affect the solution quality. We found that small population sizes are sufficient to produce high solution quality and considerable speed-up compared to the traditional EM algorithm. Second, we develop an age-layered EM algorithm (ALEM), where we incorporate an age-layered population structure heuristic in which age is the number of iterations of an EM run. We focus on speeding up the EM algorithm for Bayesian networks. ALEM enables comparisons between similarly aged EM runs and discards less promising EM runs well before their convergence. Experimentally, we find that ALEM can significantly reduce the average number of iterations with no or minimal degradation in solution quality. Finally, we introduce an intuitive graphical user interface (GUI) to visualize and analyze graphs including Bayesian networks. In particular, the user can perform multi-focus zooming wherein he or she can compare multiple nodes in an overview <b>graphical</b> <b>window</b> and study their parameters in detail windows. For EM learning, this GUI helps to understand the progress of the estimated probability parameters...|$|E
5000|$|My Network Places - <b>Windows</b> <b>graphical</b> user {{interface}} for accessing network shares ...|$|R
2500|$|X uses a client–server model: an X server {{communicates}} {{with various}} client programs. The server accepts requests for <b>graphical</b> output (<b>windows)</b> and sends back user input (from keyboard, mouse, or touchscreen). The server may function as: ...|$|R
5000|$|... #Caption: A concept UI used {{to display}} the <b>graphical</b> {{capabilities}} of <b>Windows</b> Embedded Compact 7 ...|$|R
50|$|Scilab syntax {{is largely}} based on the MATLAB language. The {{simplest}} way to execute Scilab code is to type it in at the prompt, , in the <b>graphical</b> command <b>window.</b> In this way, Scilab {{can be used as}} an interactive mathematical shell.|$|R
