71|2|Public
2500|$|Planar graphs generalize to graphs <b>drawable</b> on {{a surface}} of a given genus. In this terminology, planar graphs have graph genus0, since the plane (and the sphere) are {{surfaces}} of genus0. See [...] "graph embedding" [...] for other related topics.|$|E
6000|$|... 42. Now if you {{can draw}} that stone, you can draw {{anything}}; I mean, anything that is <b>drawable.</b> Many things (sea foam, for instance) cannot be drawn at all, only the idea of them more or less suggested; but {{if you can}} draw the stone rightly, everything within reach of art is also within yours.|$|E
6000|$|... [I.] That {{they are}} not flat, but, however slightly, always {{hollowed}} into craters, or raised into hills, in one or another direction; so that any <b>drawable</b> outline of them does {{not in the least}} represent the real extent of their surfaces; and until you know how to draw a cup, or a mountain, rightly, you have no chance of drawing a leaf. My simple artist readers of long ago, when I told them to draw leaves, thought they could do them by the boughfull, whenever they liked. Alas, except by old William Hunt, and Burne Jones, I've not seen a leaf painted, since those burdocks of Turner's; far less sculptured--though one would think at first that was easier! Of which we shall have talk elsewhere; here I must go on to note fact number two, concerning leaves.|$|E
50|$|The client {{can request}} {{a number of}} graphic operations, such as {{clearing}} an area, copying an area into another, drawing points, lines, rectangles, and text. Beside clearing, all operations are possible on all <b>drawables,</b> both windows and pixmaps.|$|R
50|$|ANIMAL (first implementation: 1988 - revised: 2004) is an {{interactive}} environment for image processing that is oriented toward the rapid prototyping, testing, and modification of algorithms. To create ANIMAL (AN IMage ALgebra), XLISP of David Betz was extended {{with some new}} types: sockets, arrays, images, masks, and <b>drawables.</b>|$|R
50|$|Windows and pixmaps are collectively named drawables, {{and their}} content data resides on the server. A client can however request {{the content of}} a <b>drawable</b> to be {{transferred}} from the server to the client or vice versa.|$|E
5000|$|Planar graphs generalize to graphs <b>drawable</b> on {{a surface}} of a given genus. In this terminology, planar graphs have graph genus 0, since the plane (and the sphere) are {{surfaces}} of genus 0. See [...] "graph embedding" [...] for other related topics.|$|E
50|$|Canvas {{consists}} of a <b>drawable</b> region defined in HTML code with height and width attributes. JavaScript code may access the area through {{a full set of}} drawing functions similar to those of other common 2D APIs, thus allowing for dynamically generated graphics. Some anticipated uses of canvas include building graphs, animations, games, and image composition.|$|E
5000|$|... @Override public void display(GLAutoDrawable <b>drawable)</b> { GL4 gl4 = drawable.getGL (...) [...]getGL4 (...) gl4.glClearBufferfv(GL2ES3.GL_COLOR, 0, clearColor); gl4.glClearBufferfv(GL2ES3.GL_DEPTH, 0, clearDepth); { FloatUtil.makeLookAt(view, 0, eye, 0, at, 0, up, 0, tmp); FloatUtil.makePerspective({{projection}}, 0, reset, 45f, aspect, near, far); FloatUtil.multMatrix(projection, view); // projection *= view transformPointer.asFloatBuffer (...) [...]put(projection); } gl4.glUseProgram(programName); gl4.glBindVertexArray(vertexArrayName.get(0)); gl4.glBindBufferBase(GL2ES3.GL_UNIFORM_BUFFER /*target*/, 1 /*TRANSFORM0, index*/, bufferName.get(2) /*TRANSFORM, buffer*/); gl4.glBindTextureUnit(0 /*diffuse*/, textureName.get(0)); gl4.glBindSampler(0 /*diffuse*/, samplerName.get(0)); gl4.glDrawElements(GL.GL_TRIANGLES, elementCount, GL.GL_UNSIGNED_SHORT, 0); } ...|$|E
50|$|Features Configuration The castle of Zamora has a {{diamond-shaped}} floor. Three towers {{stand out}} (two with five points {{and one with}} seven). The entire building is flanked by a deep pit, to which in turn the great thickness of the walls with more than two meters in average gives security. To access it there is a bridge that was once <b>drawable</b> and that goes to a door with a pointed arch.|$|E
50|$|Essentially, the PPU {{supports}} {{two different}} kinds of <b>drawable</b> objects: movable (sprites) and non-movable (background). Both kinds of objects are composed of tiles, and moreover a sprite and background object can use the same tile. The difference is that a tile used as a sprite can move around, whereas a tile used as a background cannot. There are no collision detection registers for sprites as was common on most game systems of the era.|$|E
50|$|Rendering {{is done by}} {{presenting}} the library with a target XvMCSurface and up to two reference XvMCSurfaces for the motion compensation, a buffer of 8x8 blocks and a command buffer which describes {{how to use the}} 8x8 blocks along with motion compensation vectors to construct the data in the target XvMCSurface. When the pipeline starts at the iDCT level, Xv will perform the IDCT on the blocks before performing the motion compensation. A function is provided to copy/overlay a portion of the XvMCSurface to a <b>drawable</b> with arbitrary scaling.|$|E
50|$|Often {{a set of}} well-formedness {{conditions}} are imposed; these are topological or geometric constraints imposed {{on the structure of}} the diagram. For example, connectedness of zones might be enforced, or concurrency of curves or multiple points might be banned, as might tangential intersection of curves. In the adjacent diagram, examples of small Venn diagrams are transformed into Euler diagrams by sequences of transformations; some of the intermediate diagrams have concurrency of curves. However, this sort of transformation of a Venn diagram with shading into an Euler diagram without shading is not always possible. There are examples of Euler diagrams with 9 sets that are not <b>drawable</b> using simple closed curves without the creation of unwanted zones since they would have to have non-planar dual graphs.|$|E
5000|$|Xegl {{was said}} to be the future of Xgl and a {{long-term}} goal of X server development. It shares much of the drawing code with the Xglx server, but the initialization of the OpenGL <b>drawable</b> and context management is handled by the EGL API developed by Khronos (EGL is a window system-independent equivalent to the GLX and WGL APIs, which respectively enable OpenGL support in X and Microsoft Windows). The current implementation uses Mesa-solo to provide OpenGL rendering directly to the Linux framebuffer or DRI to the graphics hardware. [...] Xegl can only be run using Radeon R200 graphics hardware and development is currently stalled. [...] It is likely that it will remain so until the Xglx server has proven itself and the closed source drivers add support for the EGL API, when it should be a transparent replacement for the nested Xglx server.|$|E
50|$|Many {{personal}} computers {{introduced in the}} late 1970s and the 1980s were designed to use television receivers as their display devices, making the resolutions dependent on the television standards in use, including PAL and NTSC. Picture sizes were usually limited to ensure the visibility of all the pixels in the major television standards and {{the broad range of}} television sets with varying amounts of over scan. The actual <b>drawable</b> picture area was, therefore, somewhat smaller than the whole screen, and was usually surrounded by a static-colored border (see image to right). Also, the interlace scanning was usually omitted in order to provide more stability to the picture, effectively halving the vertical resolution in progress. 160 × 200, 320 × 200 and 640 × 200 on NTSC were relatively common resolutions in the era (224, 240 or 256 scanlines were also common). In the IBM PC world, these resolutions came to be used by 16-color EGA video cards.|$|E
50|$|The ECS {{architecture}} handles dependencies in a {{very safe}} and simple way. Since components are simple data buckets, they have no dependencies. Each system will typically register the components an entity must have for the system to operate on it. For example, a render system might register the model, transform, and <b>drawable</b> components. It will then check each entity for those components, and if the entity has them all the system will perform its logic on that entity. If not, the entity is simply skipped, with no need for complex dependency trees. However {{this can be a}} place for bugs to hide, since propagating values from one system to another through components may be very hard to debug. Having data separated from logic does not help reduce dependencies, reducing dependencies is done through proper design of code. You could move data from one class with 100 dependencies into a component, this does not solve the dependency problem but instead makes the class harder to debug. ECS may be used where uncoupled data needs to be bound to a given lifetime.|$|E
40|$|AbstractA graph is {{minimum weight}} <b>drawable</b> if it admits a straight-line drawing {{that is a}} minimum weight {{triangulation}} of the set of points representing the vertices of the graph. We study the problem of characterizing those graphs that are minimum weight <b>drawable.</b> Our contribution is twofold: We show that there exist infinitely many triangulations that are not minimum weight <b>drawable.</b> Furthermore, we present non-trivial classes of triangulations that are minimum weight <b>drawable,</b> along with corresponding linear time algorithms that take as input any graph from one of these classes and produce as output such a drawing. One consequence of our work is the construction of triangulations that are minimum weight <b>drawable</b> but not Delaunay <b>drawable</b> – that is, not <b>drawable</b> as a Delaunay triangulation...|$|E
40|$|A graph is {{minimum weight}} <b>drawable</b> if it admits a straight-line drawing {{that is a}} minimum weight {{triangulation}} of the set of points representing the vertices of the graph. In this paper we consider the problem of characterizing those graphs that are minimum weight <b>drawable.</b> Our contribution is twofold: We show that there exist infinitely many triangulations that are not minimum weight <b>drawable.</b> Furthermore, we present non-trivial classes of triangulations that are minimum weight <b>drawable,</b> along with corresponding linear time (real RAM) algorithms that take as input any graph from one of these classes and produce as output such a drawing. One consequence of our work is the construction of triangulations that are minimum weight <b>drawable</b> but none of which is Delaunay <b>drawable</b> [...] -that is, <b>drawable</b> as a Delaunay triangulation. 1 Introduction and Overview Recently much attention {{has been devoted to}} the study of combinatorial properties of well-known geometric structures [...] -often referred to a [...] ...|$|E
40|$|This paper {{studies the}} {{drawability}} problem for minimum weight triangulations, i. e. whether a triangulation {{can be drawn}} so that the resulting drawing is the minimum weight triangulations of the set of its vertices. We present {{a new approach to}} this problem that is based on an application of a well known matching theorem for geometric triangulations. By exploiting this approach we characterize new classes of minimum weight <b>drawable</b> triangulations in terms of their skeletons. The skeleton of a minimum weight triangulation is the subgraph induced by all vertices that do not belong to the external face. We show that all maximal triangulations whose skeleton is acyclic are minimum weight <b>drawable,</b> we present a recursive method for constructing infinitely many minimum weight <b>drawable</b> triangulations, and we prove that all maximal triangulations whose skeleton is a maximal outerplanar graph are minimum weight <b>drawable...</b>|$|E
40|$|A {{planar graph}} G is k-spine <b>drawable,</b> k >= 0, if {{there exists a}} planar drawing of G in which each vertex of G lies on one of k {{horizontal}} lines, and each edge of G is drawn as a polyline consisting of at most two line segments. In this paper we: (i) Introduce the notion of hamiltonian-with-handles graphs and show that a planar graph is 2 -spine <b>drawable</b> {{if and only if}} it is hamiltonian-with-handles. (ii) Give examples of planar graphs that are/are not 2 -spine <b>drawable</b> and present linear-time drawing techniques for those that are 2 -spine <b>drawable.</b> (iii) Prove that deciding whether or not a planar graph is 2 -spine <b>drawable</b> is NP-Complete. (iv) Extend the study to k-spine drawings for k >= 2, provide examples of non-drawable planar graphs, and show that the k-drawability problem remains NP-Complete for each fixed k >= 2. The {{authors would like to thank}} Sue Whitesides for the useful discussion about the topic of this paper. Research supported in part by ldquoProgetto ALINWEB: Algoritmica per Internet e per il Webrdquo, MIUR Programmi di Ricerca Scientifica di Rilevante Interesse Nazionale...|$|E
40|$|We {{consider}} planar upward {{drawings of}} directed graphs on arbitrary surfaces where the upward direction {{is defined by}} a vector field. This generalizes earlier approaches using surfaces with a fixed embedding in R 3 and introduces new classes of planar upward <b>drawable</b> graphs, where some of them even allow cycles. Our approach leads to a classifi- cation of planar upward embeddability. In particular, we show the coincidence of the classes of planar upward <b>drawable</b> graphs on the sphere and on the standing cylinder. These classes coincide with the classes of planar upward <b>drawable</b> graphs with a homogeneous field on a cylinder and with a radial field in the plane. A cyclic field in the plane introduces the new class RUP of upward <b>drawable</b> graphs, which can be embedded on a rolling cylinder. We establish strict inclusions for planar upward drawability on the plane, the sphere, the rolling cylinder, and the torus, even for acyclic graphs. Finally, upward drawability remains NP-hard for the standing cylinder and the torus; for the cylinder this was left as an open problem by Limaye et al. ...|$|E
40|$|Euler {{diagrams}} {{form the}} basis of many diagrammatic notations used to represent set theoretic relationships {{in a wide range of}} contexts including: file system information, statistical data representation, object-oriented modeling, logical specification and reasoning systems, and database search queries. An abstract Euler diagram is a formal abstract description of the information that is to be displayed as a concrete (or drawn) Euler diagram. If the abstract diagram can be visualized, whilst satisfying certain desirable visual properties (called well-formedness conditions), then we say the diagram is <b>drawable.</b> We solve the drawability problem for a given set of well-formedness conditions, identifying the properties which classify a diagram as <b>drawable</b> or undrawable. Furthermore, we present a high level algorithm which enables the generation of a concrete diagram from an abstract diagram, whenever it is <b>drawable...</b>|$|E
40|$|Thomassen {{characterized}} some 1 -plane embedding as {{the forbidden}} configuration such {{that a given}} 1 -plane embedding of a graph is <b>drawable</b> in straight-lines {{if and only if}} it does not contain the configuration [C. Thomassen, Rectilinear drawings of graphs, J. Graph Theory, 10 (3), 335 – 341, 1988]. In this paper, we characterize some 1 -plane embedding as the forbidden configuration such that a given 1 -plane embedding of a graph can be re-embedded into a straight-line <b>drawable</b> 1 -plane embedding of the same graph if and only if it does not contain the configuration. Re-embedding of a 1 -plane embedding preserves the same set of pairs of crossing edges. We give a linear-time algorithm for finding a straight-line <b>drawable</b> 1 -plane re-embedding or the forbidden configuration...|$|E
40|$|The main {{characteristic}} of visually pleasing curves used for product design is a monotonic curvature profile. Recently, a planar curve called Generalized Log Aesthetic Curve (GLAC) {{has been extended}} from the Log Aesthetic Curve (LAC), and it has an additional shape parameter, ν. This curve preserves the monotonicity of curvature and is said to produce visually pleasing curves. This paper delves on the <b>drawable</b> region of the GLAC segment which indicates the probable solutions of shape parameters from given interpolating points and the direction of travel at those points. The first section reviews the formulation of GLAC and its related bounds. The section describes the algorithm for identifying the <b>drawable</b> region. It {{is followed by the}} section describing how small changes of ν widen the <b>drawable</b> boundaries. The final section discusses the superiority of GLAC compared to LAC for use in industrial product design...|$|E
40|$|A {{natural way}} to draw two planar graphs whose vertex sets are matched is to assign each matched pair a unique y-coordinate. In this paper we {{introduce}} {{the concept of}} such matched drawings, which are a relaxation of simultaneous geometric embeddings with mapping. We study which classes of graphs allow matched drawings and show that (i) two 3 -connected planar graphs or a 3 -connected planar graph and a tree may not be matched <b>drawable,</b> while (ii) two trees or a planar graph and a planar graph of some special families-such as unlabeled level planar (ULP) graphs or the family of "carousel graphs"-are always matched <b>drawable.</b> ...|$|E
40|$|Thomassen {{characterized}} some 1 -plane embedding as {{the forbidden}} configuration such {{that a given}} 1 -plane embedding of a graph is <b>drawable</b> in straight-lines {{if and only if}} it does not contain the configuration [C. Thomassen, Rectilinear drawings of graphs, J. Graph Theory, 10 (3), 335 - 341, 1988]. In this paper, we characterize some 1 -plane embedding as the forbidden configuration such that a given 1 -plane embedding of a graph can be re-embedded into a straight-line <b>drawable</b> 1 -plane embedding of the same graph if and only if it does not contain the configuration. Re-embedding of a 1 -plane embedding preserves the same set of pairs of crossing edges. We give a linear-time algorithm for finding a straight-line <b>drawable</b> 1 -plane re-embedding or the forbidden configuration. Comment: Appears in the Proceedings of the 24 th International Symposium on Graph Drawing and Network Visualization (GD 2016). This is an extended abstract. For a full version of this paper, see Hong S-H, Nagamochi H. : Re-embedding a 1 -Plane Graph into a Straight-line Drawing in Linear Time, Technical Report TR 2016 - 002, Department of Applied Mathematics and Physics, Kyoto University (2016...|$|E
40|$|The {{concept of}} {{overheating}} {{is one of}} the known methods for manufacturing single polymer composites. This concept is validated on two categories of semi-crystalline polymers: the <b>drawable,</b> apolar (i. e., isotactic polypropylene [iPP], ultra-high molecular weight polyethylene [UHMWPE]) and the less <b>drawable,</b> polar ones (i. e., polyethyleneterephalate [PET] and polyamides [PA]). The interchain interactions in apolar polymers are relatively weak and therefore a high degree of drawability can be obtained. Polar polymers on the other hand have relative strong interchain interactions, they are therefore less <b>drawable.</b> A shift higher than 20 ?C of the melting temperature can be obtained in case of highly extended iPP (draw ratios 2 ̆ 6 gt; 14). Ultra-drawn PE shows only 10 ?C overheating upon constraining and this is mainly due to the change in chain mobility for PE in the hexagonal phase. In case of PET and PA 6, only draw ratios of 4 could be reached; however, temperature shifts of about 10 ?C for constrained fibers compared to unconstrained fibers could be measured. A proof of principle of the potential of the constraining concept for the manufacturing of single polymer composites is obtained by the preparation of single fiber model composites. The effect of the post-drawing conditions on overheating is examined in details on the example of iPP. It is concluded that both post-drawing temperature and ultimate draw ratio have a significant influence on the degree of overheating. POLYM. COMPOS., 26 : 114 - 120, 2005. ? 2004 Society of Plastics Engineer...|$|E
40|$|This paper {{investigates the}} {{following}} problem: Given a tree T, can {{we find a}} set of points in the plane such that the Voronoi diagram of this set of points is a drawing of T? We study trees that can be drawn as Voronoi diagrams both in the Euclidean and in the Manhattan metric. Characterizations of <b>drawable</b> trees are given and different drawing algorithms that take into account additional geometric constraints are presented...|$|E
40|$|In a fan-planar {{drawing of}} a graph there is no edge that crosses two other {{independent}} edges. We study 2 -layer fan-planar drawings, i. e., fan-planar drawings such that the vertices are assigned to two distinct horizontal layers and edges are straight-line segments that connect vertices of different layers. We characterize 2 -layer fan-planar <b>drawable</b> graphs and describe a linear-time testing and embedding algorithm for biconnected graphs. We also study the relationship between 2 -layer fan-planar graphs and 2 -layer right-angle crossing graphs...|$|E
40|$|AbstractThe aim of {{this study}} is to assess the {{dependence}} relationship of the sugarcane sector (represented by Ethanol and Sugar), Oil, BRL/USD Exchange Rate and Brazilian stock market (represented by the BOVESPA &# 8211; Bolsa de Valores de São Paulo &# 8211; Index). Our methodology is based on paircopulas constructions, in which tree specification are compared: Regular Vine, more general, and two particular cases, Canonical vine (C-vine) and <b>Drawable</b> vine (D-vine). Primary results are shown to be aligned with the existing literature but they can change significantly when conditional dependence is taken into account...|$|E
40|$|Project {{elaborate}} {{in terms}} of engineering studies branch 2303 T 002 submits proposal technology of production single parts from deep drawing press steel metal plate 11 305. 21. On the basis literary study problems blanking, deep drawing and calculations was designed drawing in instrument with holder, to extrusion components serves lower ejector. Combination tool is set on hydraulic press CTH 250 with nominal tensile by force 250 kN. <b>Drawable</b> tools (drawing punch, drawing die) and shear pin tools (blanking punch, blanking die) are made from instrumental steels 19 436. 3, heat treated condition to drawing documentation...|$|E
40|$|Abstract. An n-Venn diagram {{consists}} of n curves drawn {{in the plane}} {{in such a way}} that each of the 2 n possible intersections of the interiors and exteriors of the curves forms a connected non-empty region. A Venn diagram is convexly-drawable if it can be drawn with all curves convex and it is simple if at most two curves intersect at any point. A Venn diagram is called polar symmetric if its stereographic projection about the infinite outer face is isomorphic to the projection about the innermost face. We outline an algorithm that shows there are exactly 406 simple convexly <b>drawable</b> polar-symmetric 6 -Venn diagrams. Key words: Venn diagram, polar-symmetry...|$|E
40|$|The authors {{investigate}} {{the use of}} <b>drawable</b> (D-) vine structures to model the dependences existing among the main characteristics of a flood event, i. e., flood volume, flood peak, duration, and peak time. Firstly, different three- and four-dimensional probability distributions were built considering all the permutations of the conditioning variables. The Frank copula was used to model the dependence of each pair of variables. Then, the appropriate D-vine structures were selected using information criteria and a goodness-of-fit test. The influence of varying the data length on the selected D-vine structure was also investigated. Finally, flood event characteristics were simulated using the four-dimensional D-vine structure...|$|E
40|$|In this letter, {{the problem}} of sparse signal {{reconstruction}} from one bit compressed sensing measurements is investigated. To solve the problem, a variational Bayes framework with a new statistical multivariate model is used. The dependency of the wavelet decomposition coefficients is modeled with a multivariate Gaussian copula. This model can separate marginal structure of coefficients from their intra scale dependency. In particular, the <b>drawable</b> Gaussian vine copula multivariate double Lomax model is suggested. The reconstructed signal is derived by variational Bayes algorithm which can calculate closed forms for posterior of all unknown parameters and sparse signal. Numerical results illustrate {{the effectiveness of the}} proposed model and algorithm compared with the competing approaches in the literature...|$|E
40|$|A graph is 1 -planar {{if it has}} {{a drawing}} where each edge is crossed at most once. A drawing is RAC (Right Angle Crossing) if the edges cross only at right angles. The {{relationships}} between 1 -planar graphs and RAC drawings have been partially studied in the literature. It is known that there are both 1 -planar graphs that are not straight-line RAC <b>drawable</b> and graphs that have a straight-line RAC drawing but that are not 1 -planar [22]. Also, straight-line RAC drawings always exist for IC-planar graphs [9], a subclass of 1 -planar graphs. One of the main questions still open is whether every 1 -planar graph has a RAC drawing with at most one bend per edge. We positively answer this question...|$|E
40|$|AbstractIn this paper, {{we propose}} a {{methodology}} (in {{the form of}} a software package) for automatic extraction of the cancerous nuclei in lung pathological color images. We first segment the images using an unsupervised Hopfield artificial neural network classifier and we label the segmented image based on chromaticity features and histogram analysis of the RGB color space components of the raw image. Then, we fill the holes inside the extracted nuclei regions based on the maximum <b>drawable</b> circle algorithm. All corrected nuclei regions are then classified into normal and cancerous using diagnostic rules formulated with respect to the rules used by experimented pathologist. The proposed method provides quantitative results in diagnosing a lung pathological image set of 16 cases that are comparable to an expert’s diagnosis...|$|E
