81|967|Public
50|$|Quantum <b>Guarded</b> <b>Command</b> Language (qGCL) {{was defined}} by P. Zuliani in his PhD thesis. It is based on <b>Guarded</b> <b>Command</b> Language created by Edsger Dijkstra.|$|E
5000|$|The <b>guarded</b> <b>command</b> is {{the most}} {{important}} element of the <b>guarded</b> <b>command</b> language. In a <b>guarded</b> <b>command,</b> just as the name says, the command is [...] "guarded". The guard is a proposition, which must be true before the statement is executed. At the start of that statement's execution, one may assume the guard to be true. Also, if the guard is false, the statement will not be executed. The use of guarded commands makes it easier to prove the program meets the specification. The statement is often another <b>guarded</b> <b>command.</b>|$|E
50|$|If G is true, the <b>guarded</b> <b>command</b> may {{be written}} simply S.|$|E
5000|$|<b>Guarded</b> <b>commands</b> are {{suitable}} for quasi-delay-insensitive circuit design because the repetitionallows arbitrary relative delays for the selection of different commands. In this application,a logic gate driving a node y in the circuit consists of two <b>guarded</b> <b>commands,</b> as follows: ...|$|R
5000|$|The Coast <b>Guard</b> <b>command</b> enlisted {{identification}} badge {{is a temporary}} decoration which is awarded to those Coast Guard petty officers who serve as the senior enlisted advisor to a Coast <b>Guard</b> <b>command</b> {{when there are no}} chief petty officers present.|$|R
50|$|Supreme <b>Guard</b> <b>Command</b> (also {{known as}} Unit 963, the Escort Bureau, <b>Guard</b> <b>Command,</b> <b>Guard</b> Bureau and the General Guard Bureau) is the {{personal}} bodyguard force tasked with {{the protection of}} North Korea's ruling Kim family. The current Supreme Guard commander is General Yun Jong Rin.|$|R
5000|$|A <b>guarded</b> <b>command</b> is a {{statement}} of the form G &rarr; S, where ...|$|E
50|$|If {{all of its}} guards {{respond that}} they cannot , then the <b>guarded</b> <b>command</b> does nothing.|$|E
5000|$|In <b>guarded</b> <b>command</b> language: if error = true &rarr; x := 0 | error = false &rarr; skip fi ...|$|E
5000|$|... #Article: Texas State <b>Guard</b> <b>Commanding</b> General's Individual Award ...|$|R
5000|$|Texas State <b>Guard</b> <b>Commanding</b> General’s Individual Award Ribbon ...|$|R
5000|$|... 2nd Infantry Division Queen's <b>Guard,</b> <b>Commanding</b> General, 1996 ...|$|R
5000|$|In <b>guarded</b> <b>command</b> language: if a < b &rarr; c := true | a ≥ b &rarr; c := false fi ...|$|E
5000|$|In 1968 (with ALGOL 68), then in Edsger W. Dijkstra's 1974 <b>Guarded</b> <b>Command</b> Language the {{conditional}} and iterative code block are alternatively terminated with the block reserved word reversed: e.g. , [...] and ...|$|E
50|$|The <b>Guarded</b> <b>Command</b> Language (GCL) is a {{language}} defined by Edsger Dijkstra for predicate transformer semantics. It combines programming concepts in a compact way, {{before the program}} is written in some practical programming language. Its simplicity makes proving the correctness of programs easier, using Hoare logic.|$|E
5000|$|Border <b>Guard</b> <b>Command,</b> {{engaging}} border {{conflicts with}} insurgent groups ...|$|R
40|$|Abstract. We {{investigate}} {{conditions in}} the setting of the algebraic theory about processes known as ACP. We present ACP c, an extension of ACP with <b>guarded</b> <b>commands,</b> and its main models, called its full splitting bisimilation models. The conditions used in the <b>guarded</b> <b>commands</b> are taken from a Boolean algebra. We add two operators for condition evaluation to ACP c; and study their connection with alternative mechanisms found in other extensions of ACP with <b>guarded</b> <b>commands,</b> to wit state operators and signal emission. On purpose to incorporate the past in conditions, we add a retrospection operator on conditions to ACP c...|$|R
50|$|The Perl module Commands::Guarded {{implements}} a deterministic, rectifying variant on Dijkstra's <b>guarded</b> <b>commands.</b>|$|R
50|$|This paper {{suggests}} that {{input and output}} are basic primitives of programming and that parallel composition of communicating sequential processes is a fundamental program structuring method. When combined with a development of Dijkstra's <b>guarded</b> <b>command,</b> these concepts are surprisingly versatile. Their use is illustrated by sample solutions {{of a variety of}} familiar programming exercises.|$|E
5000|$|Consider the {{following}} program written in CSP 1978: :: Z!stop (...) || Y :: guard: boolean; guard := true; *→ Z!go (...) Z?guardAccording to Clinger 1981, this program illustrates global nondeterminism, since the nondeterminism arises from incomplete specification {{of the timing}} of signals between the three processes , , and [...] The repetitive <b>guarded</b> <b>command</b> {{in the definition of}} [...] has two alternatives: ...|$|E
5000|$|Actually, Dijkstra's <b>Guarded</b> <b>Command</b> Language (GCL) is an {{extension}} of the simple imperative language given until here with non-deterministic statements. Indeed, GCL aims to be a formal notation to define algorithms. Non-deterministic statements represent choices left to the actual implementation (in an effective programming language): properties proved on non-deterministic statements are ensured for all possible choices of implementation. In other words, weakest-preconditions of non-deterministic statements ensure ...|$|E
50|$|The Air National <b>Guard</b> <b>Command</b> {{operates}} over 50 fixed-wing light aircraft and helicopters.|$|R
5000|$|The Coast <b>Guard</b> <b>Command</b> (Alternate DVD Title: Coast Guard Orders) (Engan Keibi Meirei) ...|$|R
5000|$|Crimson <b>Guard</b> <b>Command</b> 3-pack (Toys [...] "R" [...] Us exclusive) (set 2 of 3) ...|$|R
50|$|The term is {{used with}} {{specific}} meaning in APL, Haskell, Clean, Erlang, occam, Promela, OCaml, Swift and Scala programming languages. In Mathematica, guards are called constraints. Guards are the fundamental concept in <b>Guarded</b> <b>Command</b> Language, a language in formal methods. Guards {{can be used}} to augment pattern matching with the possibility to skip a pattern even if the structure matches. Boolean expressions in conditional statements usually also fit this definition of a guard although they are called conditions.|$|E
50|$|Skip and Abort {{are very}} simple {{as well as}} {{important}} statements in the <b>guarded</b> <b>command</b> language. Abort is the undefined instruction: do anything. The abort statement does not even need to terminate. It is {{used to describe the}} program when formulating a proof, in which case the proof usually fails. Skip is the empty instruction: do nothing. It is used in the program itself, when the syntax requires a statement, but the programmer does not want the machine to change states.|$|E
5000|$|The basic {{language}} construct is the unit. A unit {{may be a}} formula, an enclosed clause, a routine text or one of several technically needed constructs (assignation, jump, skip, nihil). The technical term enclosed clause unifies some of the inherently bracketing constructs known as block, do statement, switch statement in other contemporary languages. When keywords are used, generally the reversed character sequence of the introducing keyword is used for terminating the enclosure, e.g. ( [...] if ~ then ~ else ~ fi, case ~ in ~ out ~ esac, for ~ while ~ do ~ od [...] ). This <b>Guarded</b> <b>Command</b> syntax was reused by Stephen Bourne in the common Unix Bourne shell. An expression may also yield a multiple value, which is constructed from other values by a collateral clause. This construct just looks like the parameter pack of a procedure call.|$|E
5000|$|... #Caption: Cadets of the KGB Moscow Higher Frontier <b>Guards</b> <b>Command</b> Academy {{during the}} parade.|$|R
2500|$|Dijkstra, Edsger W. (1975). <b>Guarded</b> <b>Commands,</b> Nondeterminacy and Formal Derivation of Programs. Commun. ACM 18(8): 453-457 ...|$|R
50|$|The Texas State <b>Guard</b> <b>Commanding</b> General's Individual Award may {{be awarded}} {{to members of}} the Texas State Guard.|$|R
40|$|The <b>guarded</b> <b>command</b> {{alternative}} and iterative constructs proposed by E. W. Dijkstra subsume the conventional {{alternative and}} iterative constructs. The extra flexibility of these <b>guarded</b> <b>command</b> constructs enables the programmer {{to express his}} ideas more directly and clearly. Moreover, Dijkstra has developed a calculus for the derivation of correct programs that utilizes these <b>guarded</b> <b>command</b> constructs. This thesis addresses the problem of efficiently implementing these <b>guarded</b> <b>command</b> constructs. Several new optimizations that are particularly well suited to the <b>guarded</b> <b>command</b> constructs are described. The most useful is the elimination of redundant boolean expressions. This optimization provides a means of implementing the <b>guarded</b> <b>command</b> alternative statement with efficiency comparable to the IF-THEN-ELSE statement. The main contribution of this thesis is {{a detailed description of}} an algorithm for eliminating redundant boolean expressions. The algorithm itself is presented in a program written in a PASCAL supplemented with the <b>guarded</b> <b>command</b> constructs. The basis method involves considering individual execution paths through the <b>guarded</b> <b>command</b> construct and applying rules of inference to recognize and avoid evaluation of many boolean expressions. It is shown that the number of execution paths through a <b>guarded</b> <b>command</b> construct remains small enough to make this method practical...|$|E
40|$|Abstract. The {{purpose of}} the paper is to provide an {{automatic}} transformation of parallel programs of an imperative probabilistic <b>guarded</b> <b>command</b> language (called Probmela) into probabilistic reactive module specifications. The latter serve as basis for the input language of the symbolic MTBDD-based probabilistic model checker PRISM, while Probmela is the modeling language of the model checker LiQuor which relies on an enumerative approach and supports partial order reduction and other reduction techniques. By providing {{the link between the}} model checkers PRISM and LiQuor, our translation supports comparative studies of different verification paradigms and can serve to use the (more comfortable) <b>guarded</b> <b>command</b> language for a MTBDD-based quantitative analysis. The challenges were (1) to ensure that the translation preserves the Markov decision process semantics, (2) the efficiency of the translation and (3) the compactness of the symbolic BDD-representation of the generated PRISM-language specifications. ...|$|E
40|$|LiQuor is a {{tool for}} verifying {{probabilistic}} reactive systems modelled Probmela programs, which are terms of a probabilistic <b>guarded</b> <b>command</b> language with an operational semantics based on (finite) Markov decision processes. LiQuor provides the facility to perform a qualitative or quantitative analysis for #-regular linear time properties by means of automata-based model checking algorithms...|$|E
5000|$|Refinement {{calculus}} - {{an extension}} of <b>guarded</b> <b>commands</b> (and Hoare logic) exploiting the lattice structure of predicate transformers ...|$|R
50|$|The {{repetition}} executes the <b>guarded</b> <b>commands</b> repeatedly until none of {{the guards}} are true. Usually {{there is only one}} guard.|$|R
5000|$|The Island {{houses a}} number of U.S. Coast <b>Guard</b> <b>commands</b> and its {{facilities}} are managed by Base Alameda. Tenant commands include: ...|$|R
