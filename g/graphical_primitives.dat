81|16|Public
50|$|From a programmer's {{point of}} view, a {{windowing}} system implements <b>graphical</b> <b>primitives.</b> For example: rendering fonts or drawing {{a line on}} the screen. It provides an abstraction of the graphics hardware for use by higher-level elements of the graphical interface such as a window manager.|$|E
50|$|FOX uses a {{technique}} {{similar to the}} Java Swing-style approach to display a graphical user interface to the screen, using only <b>graphical</b> <b>primitives</b> available on that platform, {{as opposed to the}} original Java AWT-style approach which used native widgets. This means that applications will have a similar look and feel across platforms. In theory, porting FOX to a new platform should also be easier than implementing support for native widgets.|$|E
5000|$|Director {{applications}} are authored on a timeline, similar to Adobe Flash. Director supports <b>graphical</b> <b>primitives</b> and playback controls such as video players, 3D content players, and Flash players. Director includes a scripting language called Lingo, and plug-in applications called Xtras, which {{are similar in}} functionality and design to ActiveX. Director supports a graphical user interface framework with basic controls, and allows interaction with external files and certain Windows APIs. Director {{has been used to}} create applications, 2D and 3D video games, self-running kiosks, and CDs and DVD launchers. Director supports many different image, audio, and video formats.|$|E
50|$|The main <b>graphical</b> <b>primitive</b> in SWF is the path, {{which is}} a chain of {{segments}} of primitive types, ranging from lines to splines or bezier curves. Additional primitives like rectangles, ellipses, and even text can be built from these. The graphical elements in SWF are thus fairly similar to SVG and MPEG-4 BIFS. SWF also uses display lists and allows naming and reusing previously defined components.|$|R
40|$|Abstract Polygonal lines {{constitute}} a key <b>graphical</b> <b>primitive</b> in 2 D vector graphics data. Thus, {{the ability to}} apply a digital watermark to such an entity would enable the watermarking of cartoons, drawings and Geographical Information Systems (GIS) data in vector graphics format. This paper builds on and extends an existing algorithm which achieves polygonal line wa-termarking by modifying the Fourier descriptors magnitude in an imperceptible way. Watermarks embedded by this technique can be detected in rotated, translated, scaled or reected polygonal lines. The detection of such watermarks had been previously carried out through a correlator detector. In this paper, analysis of the statistics of the Fourier descriptors is exploited to devise an optimal blind detector. Furthermore, the problem of water-marking multiple lines {{as well as other}} implementation issues are being addressed. Experimental results verify the imperceptibility and robustness of the proposed method. Index Terms watermarking, digital rights management, 2 D vector graphics, Fourier descriptor...|$|R
40|$|Text-to-scene {{conversion}} requires {{knowledge about}} how actions and locations {{are expressed in}} language and realized in the world. To provide this knowlege, we are creating a lexical resource (VigNet) that extends FrameNet by creating a set of intermediate frames (vignettes) that bridge between the high-level semantics of FrameNet frames and {{a new set of}} low-level <b>primitive</b> <b>graphical</b> frames. Vignettes {{can be thought of as}} a link between function and form – between what a scene means and what it looks like. In this paper, we describe the set of <b>primitive</b> <b>graphical</b> frames and the functional properties of 3 D objects (affordances) we use in this decomposition. We examine the methods and tools we have developed to populate VigNet with a large number of action and location vignettes...|$|R
5000|$|Eventually, the {{availability}} of usable implementations of Smalltalk for IBM PC-AT class machines allowed IBM advanced technology projects to experiment with Smalltalk. At about the same time, visual interface construction tools were {{coming up on the}} radar screens. Smalltalk research projects such as InterCons by David N. Smith of IBM, and Fabrik by a team at Apple led by Dan Ingalls were building interactive graphical applications built from composition of <b>graphical</b> <b>primitives.</b> Higher level construction of user interfaces was evidenced by other tools such as Jean-Marie Hullot's interface builder first done in Lisp and then evolved to become the Interface Builder tool in NeXTStep, and later Mac OS X, which allowed for building user interfaces by WYSIWYG composition of UI widgets which could be [...] "wired" [...] {{to each other and to}} application logic written in Objective-C.|$|E
40|$|This paper {{deals with}} the first step. This one {{extracts}} <b>graphical</b> <b>primitives</b> which compose the graphical shapes of document images [9] [7]. This step employs many methods in order to extract different graphical primitive types : pixel, vectorial (vector, arc, and curve), region (subset of connected pixels on image), and symbol (a symbolic label). These <b>graphical</b> <b>primitives</b> are next organized into higher-level structures like grap...|$|E
40|$|Numerous {{studies have}} {{demonstrated}} the benefits of utilizing iconic presentation models {{in the context of}} complex medical information. However, very little literature exists that addresses the design of the <b>graphical</b> <b>primitives</b> that constitute such mediums. Utilizing a method named “Presentation Discovery”, the authors of this study examine a manner in which objective techniques may be utilized to prototype such <b>graphical</b> <b>primitives</b> in order to increase the realized expressiveness of ensuing iconic presentation models...|$|E
50|$|The initial CGM {{implementation}} {{was effectively}} a streamed {{representation of a}} sequence of <b>Graphical</b> Kernel System <b>primitive</b> operations. It has been adopted to some extent {{in the areas of}} technical illustration and professional design, but has largely been superseded by formats such as SVG and DXF.|$|R
40|$|A new {{semi-automatic}} {{method for}} determining parameters for L-based plant modeling systems is introduced. It is shown {{that many of}} the parameters necessary to create realistic plants can be extracted semi-automatically from photographs of real plants. By replacing numerical parameters with a more intuitive set of <b>graphical</b> modeling <b>primitives,</b> it is possible to significantly speed up the design process of complex three-dimensional shapes, such as plants. We also explain how to add small scale detail and natural transitions to skeletal models of plants to further improve the design process...|$|R
40|$|The {{associative}} {{visualization of}} revisable product model data {{is of great}} importance for the usefulness and the acceptance of standards {{in the field of}} CAD data exchange. The outlines of a separate Presentation module which meets the resulting requirements are developed in this paper. Thereby Presentation is defined as the sum of interfacing areas between Graphics and CAD with regard to product model data visualization. The basic concepts of Presentation are introduced in a top-down approach starting with a global view on Graphics, CAD and standardization efforts in these domains. In a last refinement the linkages of product model data and <b>graphical</b> data <b>primitives</b> and attributes are examined especially those for representing product shape and annotation information...|$|R
40|$|This {{bachelor}} thesis describes {{process of}} creating of simple graphic editor with support of product feeds in web client environment. The purpose of editor is to create graphical presentations of products intended for social media campaigns through the <b>graphical</b> <b>primitives,</b> texts and images. Final thesis gives {{a detailed description of}} aforementioned process, where research of appropriate technologies, customer requirements, and last but not least interface design and its testing was studied. Further sections within this thesis deal with <b>graphical</b> <b>primitives</b> and image filters. They describe characterization of design, implementation and further integration was carried out to final solution of editor...|$|E
40|$|One of {{the hardest}} {{problems}} within real-time computer graphics is the realistic rendering of detailed outdoor scenes. Outdoor scenes with plants, grass and trees are di#cult to render in real-time {{mainly because of the}} extremely high number of <b>graphical</b> <b>primitives</b> needed for realistic visualization of them...|$|E
40|$|The {{usefulness}} {{of a collection}} of scanned graphical documents can be measured by the facilities available for their retrieval. We present an approach for indexing a collection of line drawings automatically. The indexing is based on the textual and graphical content of the drawings. This approach has been developed to facilitate `retrieval by example' in heterogeneous collections of graphical documents. No a priori knowledge about the application domain is assumed. Starting with a raster image, candidate character patterns and <b>graphical</b> <b>primitives</b> (i. e. line segments and arcs) are extracted. Candidate character patterns are classified by an OCR method and grouped into word hypotheses. Graphical features of various types are computed from groupings of <b>graphical</b> <b>primitives</b> (e. g. sequences of adjacent lines, pairs of parallel lines). Retrieval occurs with a weighted information retrieval system. Each document of the collection and each query are described with a set of indexing features w [...] ...|$|E
40|$|With {{widespread}} use of raster scan displays and the ever-increasing desire for faster interactivity, higher image com-plexity, and higher resolution in displayed images, several techniques have been proposed for rasterizing <b>primitive</b> <b>graphical</b> objects. This paper characterizes the performance of these techniques and shows how they evolve for more complex images on higher resolution displays. This charac-terization will not only show the strengths and deficiencies of existing rasterization techniques, but will also reveal new ar-chitectures for future raster graphics systems...|$|R
40|$|A {{technique}} for the configuration interaction (CI) study of many-electron systems is developed based on Rumer spin-coupling scheme for the antisymmetrized configuration state functions (CSF). Incorporating a new <b>graphical</b> approach, the <b>primitive</b> configurations have been generated in blocks of definite ionocities to permit ready association of possible spin functions {{with each of}} the primitive configurations. Simple as well as extended Hubard model Hamiltonians have been studied to test the efficiency of the method. Procedures have been incorporated to calculate various correlation functions using the spin-adapted CSFs without invoking explicit expansions in terms of slater determinants. (C) 1996, Inc...|$|R
40|$|In this paper, we show {{motion of}} ball {{with the help}} of {{computer}} graphics using OpenGL API [...] The purpose is to adequately show a continuous and meaningful eaningful motion sequence of ball when a user interacts with 3 D through camera. Here we create an object with vertex shader and fragment shader through OpenGL. By adding physics library to the ball it performs physical motion like falling down towards the ground {{with the help of}} gravity. The object gets collide with the ground and move on the ground, when force is applied it comes to resting state. The <b>primitive</b> <b>graphical</b> shape like sphere for ball can be created with OpenGL and color can be applied to through fragment shader...|$|R
40|$|The Iocalisation of <b>graphical</b> <b>primitives</b> is {{important}} task in image processing. This paper discusses problems of automatic computer-based detection and Iocalisation of elementary shape in image. A genetic algorithm {{is used for}} this task. The using of genetic algorithm allows efficiently reduce time needed to scan a task state space. A modification of genetic algorithm for shape detection is presented...|$|E
40|$|During {{the past}} few years our {{research}} efforts have been inspired by two different needs. On one hand, the number of non-expert users accessing databases is growing apace. On the other, information systems will no longer be characterized by a single centralized architecture, but rather by several heterogeneous component systems. In order to address such needs we have designed a new query system with both user-oriented and multidatabase features. The system’s main components are an adaptive visual interface, providing the user with different and interchangeable interaction modalities, and a “translation layer”, which creates and offers to the user the illusion of a single homogeneous schema out of several heterogeneous components. Both components are founded on a common ground, i. e. a formally defined and semantically rich data model, the Graph Model, and a minimal set of <b>Graphical</b> <b>Primitives,</b> in terms of which general query operations may be visually expressed. The Graph Model has a visual syntax, so that graphical operations can be applied on its components without unnecessary mappings, and an object-based semantics. The aim of this paper is twofold. We first present an overall view of the system architecture and then give a comprehensive description of {{the lower part of the}} system itself. In particular, we show how schemata expressed in different data models can be translated in terms of Graph Model, possibly by exploiting reverse engineering techniques. Moreover, we show how mappings can be established between well-known query languages and the <b>Graphical</b> <b>Primitives.</b> Finally, we describe in detail how queries expressed by using the <b>Graphical</b> <b>Primitives</b> can be translated in terms of relational expressions so to be processed by actual DBMSs...|$|E
40|$|Ames Research Graphics System (ARCGRAPH) {{collection}} of software libraries and software utilities assisting researchers in generating, manipulating, and visualizing graphical data. Defines metafile format containing device-independent graphical data. File format used with various computer-graphics-manipulation and -animation software packages at Ames, including SURF (COSMIC Program ARC- 12381) and GAS (COSMIC Program ARC- 12379). Consists of two-stage "pipeline" {{used to put}} out <b>graphical</b> <b>primitives.</b> ARCGRAPH libraries developed on VAX computer running VMS...|$|E
40|$|This paper {{presents}} a symbol spotting approach for indexing by content {{a database of}} line-drawing images. As line-drawings are digital-born documents designed by vectorial softwares, instead of using a pixel-based approach, we present a spotting method based on vector <b>primitives.</b> <b>Graphical</b> symbols are represented {{by a set of}} vectorial primitives which are described by an off-the-shelf shape descriptor. A relational indexing strategy aims to retrieve symbol locations into the target documents by using a combined numerical-relational description of 2 D structures. The zones which are likely to contain the queried symbol are validated by a Hough-like voting scheme. In addition, a performance evaluation framework for symbol spotting in graphical documents is proposed. The presented methodology has been evaluated with a benchmarking set of architectural documents achieving good performance results...|$|R
40|$|The basic {{building}} blockss of all <b>graphical</b> output are <b>primitives</b> such as polyline, polymarker, text, {{cell array}} and fill area. These primitives have additional data {{associated with them}} to render visual effect on the display surface of a workstation. I have explored and analyzed these primitives and implemented them by routines written in C language for IBM and IBM Compatible Personal Computers. Some of the algoriths for these routines were integrated and implemented in the Extensible Graphics Software(EGS). EGS is a prototype graphics system developed by the faculty and students of Ball State University to study and research graphics systems. I have created a font for English alphabets and digit characters. The font and any algorithms created in this thesis would be included and implemented for further development of EGS. An effective attempt is made in this thesis to show how a graphics system could be developed with a minimal dependency on hardware of computers. Department of Computer ScienceThesis (M. S. ...|$|R
40|$|Invited TutorialA {{multitude}} of different probabilistic programming languages exists today, all extending a traditional programming language with primitives to support modeling of complex, structured probability distributions, advanced inference and learning methods. At the same time, they extend probabilistic <b>graphical</b> models with <b>primitives</b> of programming languages {{to increase the}} expressive power of graphical models. I shall {{provide an overview of}} the underlying concepts and semantics of these languages as well as sketch their current inference and learning mechanisms. I shall also outline some emerging applications of these languages. During the talk I shall focus on probabilistic extensions of logic programming languages such as Prolog and Datalog, which have been developed since more than 20 years. One advantage of these languages is that they naturally fit both the statistical relational learning / artificial intelligence perspective as they define probability distributions over possible worlds as well as the probabilistic programming language perspective. This talk will be largely based on joint tutorials with Angelika Kimmig and the forthcoming survey paper : Luc De Raedt, Angelika Kimmig, Probabilistic (Logic) Programming Concepts, Machine Learning, in press. An early version of this paper can be found at [URL] publishe...|$|R
40|$|This Part of the Computer Graphics Interface Standard {{describes}} the functions needed for generating and displaying graphical output. The functionality incorporated {{in this part}} is concerned with <b>graphical</b> <b>primitives,</b> attributes, and control associated with promitives and attributes. It must be cinsidered in cinjunction with the more global control functions detailed in Part 2 of this standard. The functionality described in this Part pertains to Virtual Devices of class OUT and OUTIN...|$|E
40|$|Abstract—The {{extraction}} of component line segments and circular arcs from freehand strokes {{along with their}} relations {{is a prerequisite for}} sketch understanding. Existing approaches usually take three stages to segment a stroke: first identifying seg-mentation points, then classifying the substroke between each pair of adjacent segmentation points, and, finally, obtaining graphical representations of substrokes by fitting <b>graphical</b> <b>primitives</b> to them. Since a stroke inevitably contains noises, the first stage may produce wrong or inaccurate segmentation points, resulting in the wrong substroke classification in the second stage and inaccurately fitted parameters in the third stage. To overcome the noise sensitivity of the three-stage method, the segmental homogeneity feature is emphasized in this paper. We propose a novel approach, which first extracts <b>graphical</b> <b>primitives</b> from a stroke by a connected segment growing from a seed-segment and then utilizes relationships between the primitives to refine their control parameters. We have conducted experiments using real-life strokes and compared the proposed approach with others. Experimental results demonstrate that the proposed approach is effective and robust. Index Terms—Segmental homogeneity feature, sketch under-standing, stroke recognition, stroke segmentation. I...|$|E
40|$|Ames Research Graphics System, ARCGRAPH, is a {{collection}} of libraries and utilities which assist researchers in generating, manipulating, and visualizing graphical data. In addition, ARCGRAPH defines a metafile format that contains device independent graphical data. This file format is used with various computer graphics manipulation and animation packages at Ames, including SURF (COSMIC Program ARC- 12381) and GAS (COSMIC Program ARC- 12379). In its full configuration, the ARCGRAPH system consists of a two stage pipeline which may be used to output <b>graphical</b> <b>primitives.</b> Stage one is associated with the <b>graphical</b> <b>primitives</b> (i. e. moves, draws, color, etc.) along with the creation and manipulation of the metafiles. Five distinct data filters make up stage one. They are: 1) PLO which handles all 2 D vector primitives, 2) POL which handles all 3 D polygonal primitives, 3) RAS which handles all 2 D raster primitives, 4) VEC which handles all 3 D raster primitives, and 5) PO 2 which handles all 2 D polygonal primitives. Stage two is associated with the process of displaying <b>graphical</b> <b>primitives</b> on a device. To generate the various <b>graphical</b> <b>primitives,</b> create and reprocess ARCGRAPH metafiles, and access the device drivers in the VDI (Video Device Interface) library, users link their applications to ARCGRAPH's GRAFIX library routines. Both FORTRAN and C language versions of the GRAFIX and VDI libraries exist for enhanced portability within these respective programming environments. The ARCGRAPH libraries were developed on a VAX running VMS. Minor documented modification of various routines, however, allows the system to run on the following computers: Cray X-MP running COS (no C version); Cray 2 running UNICOS; DEC VAX running BSD 4. 3 UNIX, or Ultrix; SGI IRIS Turbo running GL 2 -W 3. 5 and GL 2 -W 3. 6; Convex C 1 running UNIX; Amhdahl 5840 running UTS; Alliant FX 8 running UNIX; Sun 3 / 160 running UNIX (no native device driver); Stellar GS 1000 running Stellex (no native device driver); and an SGI IRIS 4 D running IRIX (no native device driver). Currently with version 7. 0 of ARCGRAPH, the VDI library supports the following output devices: A VT 100 terminal with a RETRO-GRAPHICS board installed, a VT 240 using the Tektronix 4010 emulation capability, an SGI IRIS turbo using the native GL 2 library, a Tektronix 4010, a Tektronix 4105, and the Tektronix 4014. ARCGRAPH version 7. 0 was developed in 1988...|$|E
40|$|The {{goal of the}} {{research}} described in {{this paper is to}} develop an application-independent presentation tool that automatically designs effective graphical presentations (such as bar charts, scatter plots, and connected graphs) of relational information. Two problems are raised by this goal: The codifi-cation of graphic design criteria in a form that can be used by the presentation tool, and the generation {{of a wide variety of}} designs so that the presentation tool can accommodate a wide variety of information. The approach described in this paper is based on the view that graphical presentations are sentences of graphical languages. The graphic design issues are codified as expressiveness and effectiveness criteria for graphical languages. Expressiveness criteria determine whether a graphical language can express the desired information. Effectiveness criteria determine whether a graphical language exploits the capabilities of the output medium and the human visual system. A wide variety of designs can be systematically generated by using a composition algebra that composes a small set of <b>primitive</b> <b>graphical</b> languages. Artificial intelligence techniques are used to implement a prototype presentation tool called APT (A Presentation Tool), which is based on the composition algebra and the graphic design criteria...|$|R
40|$|In real life, {{documents}} contain several font types, styles, and sizes. However, many {{character recognition}} systems show good results for {{specific type of}} documents and fail to produce satisfactory results for others. Over the past decades, various pattern recognition techniques have been applied with the aim to develop recognition systems insensitive to variations in the characteristics of documents. In this paper, we present a robust recognition system for Ethiopic script using a hybrid of classifiers. The complex structures of Ethiopic characters are structurally and syntactically analyzed, and represented as a pattern of simpler <b>graphical</b> units called <b>primitives.</b> The pattern is used for classification of characters using similarity-based matching and neural network classifier. The classification result is further refined by using template matching. A pair of directional filters is used for creating templates and extracting structural features. The recognition system is tested by real life documents and experimental results are reported. © 2007 IEEE. Personal use of this material is permitted. However, permission to reprint/republish this material for advertising or promotional purposes or for creating new collective works for resale or redistribution to servers or lists, or to reuse any copyrighted component of this work in other works must {{be obtained from the}} IEEE. </p...|$|R
40|$|Errors in {{the chip}} {{assembly}} process {{are harder to}} find than errors in cell design, since they belong to no specific part of the design, but rather to the assembly as a whole. Assembly errors are more costly than call design errors also, since they often go unnoticed {{until late in the}} design cycle. Interactive graphic tools typically require that assembly be done with <b>primitive</b> <b>graphical</b> operations, which are inappropriate far the assembly task. Language-based tools give more powerful assembly operations, but remove the two dimensional view of the chip necessary to visualize many assembly operations. Riot is a simple Interactive graphical tool designed to facilitate the assembly of cells into integrated systems. Riot supplies the user with primitive operations of connection [...] abutment, routing and stretching - in an interactive graphic environment. Thus, the designer retains full control of the design, including the assignment of positions to instances of cells and the choice of connection mechanism. The computer takes care of the tedious and exacting implementation detail, guaranteeing that connections are actually made. The powerful connection primitives give the user of Riot the ability to quickly assemble a custom chip from a collection of low-level cells. This document provides a discussion of the motivation for Riot and a description of the Riot chip assembly system, its capabilities and its use...|$|R
40|$|In {{this paper}} {{we present a}} {{graphical}} query language for Geographica System. This language {{is based on a}} graphical Ouery-By-Example-li philosophy. A set of <b>graphical</b> <b>primitives</b> (icons) represents data or ope inclusion, intersection, etc. The user-defined query is made by compo! icons. The application of the icons defines the query as the data are supp graphical query is then transform_ ed into a functional-based-languag expression is compiled into specific Data Management System orders operators. The main contributions of this language are its simplicity to and its representative power...|$|E
40|$|Abstract. This paper {{deals with}} the problem of {{graphical}} knowledge management (formalization, modelling, representation and operationalization) in graphics recognition systems. We present here a “generic ” formalism for graphical knowledge, allowing various modellings for a given graphical shape. We use a modelling library based on this formalism for the management of our graphical knowledge. The use of this library allows to request graphical knowledge databases, according to the processings ’ requirements on <b>graphical</b> <b>primitives.</b> Like this, this approach allows interoperability between processings, especially for their combination. We present a “short ” system use-case of our approach to illustrate the interoperability between processings. ...|$|E
40|$|In a {{large number}} of {{notebooks}} that are created and used by users of CERN, many important components are those related to graphical visualization. These include, {{but are not limited to}} graphs and histograms of data and events from physical detectors. However, the information used to display the ROOT <b>graphical</b> <b>primitives</b> is too comprehensive and hence cause the physical space requirements of the notebooks to grow drastically as the number of graphs and plots increases. Analysis has been performed to trim out redundant information from the notebooks, as well as providing insight into browsing ROOT objects within a notebook...|$|E
40|$|Abstract—The Universal Visualization Platform (UVP), {{developed}} at UMass Lowell, {{is a general}} Java-based framework for information visualization and analysis. The UVP contains many advanced and novel features added by various researchers {{over the last six}} years, and many visual-analytic tools of the UVP have been tailored for use in specific applications. Tool extentions and modifications were difficult to implement due to the various requirements placed on them by the system, the most burdensome of which being selection interaction and session monitoring support. We developed a new framework, JyVis, to support ease of tool modification, extention, and development, even for non-developers. JyVis is a visualization framework based on an architecture comprised of two layers: a low-level visualization framework written in Java, and high-level program elements written in Jython (a freely available implementation of the high-level, dynamic, object-oriented language Python seamlessly integrated with the Java platform). The key features that distinguish JyVis from other visualization systems are that all JyVis tools are themselves Jython scripts, pluggable, and end-user-programmable. JyVis provides support for session logging and replay. This is accomplished by having all significant state changes occur via scripts, and recording those scripts to a cumulative session history file for later replay. The ability to define tools {{with a small amount of}} code is enabled by a rich set of high-level visualization <b>primitives</b> (<b>graphical</b> objects which automatically support selection interactions) and UI widgets (UI building blocks which automatically support session logging and replay). JyVis architecturally supports most features of the UVP, including multiple visualizations, multiple selections, multiple datasets, linking and brushing of selections between visualizations, pluggable visual-analytic tools, session logging with the ability to replay previous sessions, kinetic displays, sonification, and voice annotation. The ability to access and use tools across the internet, and the ability to have a shared system state across many distributed users via simple text communication is also architecturally supported by JyVis...|$|R
40|$|Abstract—We {{present a}} novel word image based {{document}} indexing scheme by combination of string matching and hash-ing. The word image representation {{is defined by}} string codes obtained by unsupervised learning over <b>graphical</b> <b>primitives.</b> The indexing framework is defined by distance based hashing function which does the object projection to hash space by preserving their distances. We have used edit distance based string matching for defining the hashing function and for approximate nearest neighbor based retrieval. The application of the proposed indexing framework is presented for two doc-ument image collections belonging to Devanagari and Bengali script. Keywords-Document image indexing, Distance based hash-ing, Edit distance, Shape descriptor I...|$|E
40|$|In {{this paper}} {{three types of}} {{visualization}} scenarios are discussed, where topology improves the readability of particular visualization results. The first type combines topology information represented by simple <b>graphical</b> <b>primitives</b> with other forms of visual representations. The second type uses the topology information to define the relevance of objects within the data. The relevance {{is reflected in the}} visualization by applying the cut-away concept. The third type of visualizations is based on the change of topology of the underlying data to increase visibility of the most interesting information. Every type handles topology in a different way. This illustrates various roles of topology in scientific visualization...|$|E
