114|901|Public
2500|$|This {{expresses the}} Tutte {{polynomial}} as {{an evaluation of}} the corank-nullity or rank <b>generating</b> <b>polynomial,</b> ...|$|E
2500|$|The shift {{register}} may be initialized with ones instead of zeroes. This {{is equivalent to}} inverting the first [...] bits of the message feeding them into the algorithm. [...] The CRC equation becomes , where [...] is {{the length of the}} message in bits. The change this imposes on [...] {{is a function of the}} <b>generating</b> <b>polynomial</b> and the message length, [...]|$|E
2500|$|In {{combinatorial}} mathematics, a rook polynomial is a <b>generating</b> <b>polynomial</b> of {{the number}} of ways to place non-attacking rooks on a board that looks like a checkerboard; that is, no two rooks may be in the same row or column. [...] The board is any subset of the squares of a rectangular board with m rows and n columns; we {{think of it as the}} squares in which one is allowed to put a rook. [...] The board is the ordinary chessboard if all squares are allowed and m = n = 8 and a chessboard of any size if all squares are allowed and m = n. [...] The coefficient of x'k in the rook polynomial R'B(x) is the number of ways k rooks, none of which attacks another, can be arranged in the squares of B. [...] The rooks are arranged in such a way that there is no pair of rooks [...] in the same row or column. [...] In this sense, an arrangement is the positioning of rooks on a static, immovable board; the arrangement will not be different if the board is rotated or reflected while keeping the squares stationary. The polynomial also remains the same if rows are interchanged or columns are interchanged.|$|E
5000|$|... where [...] is the {{binomial}} coefficient. For , the <b>generated</b> <b>polynomials</b> [...] are the Newton polynomials ...|$|R
40|$|For a given {{symmetric}} tensor, we aim {{at finding}} a new one whose symmetric rank is small and that {{is close to the}} given one. There exist linear relations among the entries of low rank symmetric tensors. Such linear relations can be expressed by polynomials, which are called <b>generating</b> <b>polynomials.</b> We propose a new approach for computing low rank approximations by using <b>generating</b> <b>polynomials.</b> First, we estimate a set of <b>generating</b> <b>polynomials</b> that are approximately satisfied by the given tensor. Second, we find approximate common zeros of these polynomials. Third, we use these zeros to construct low rank tensor approximations. If the symmetric tensor to be approximated is sufficiently close to a low rank one, we show that the computed low rank approximations are quasi-optimal. Comment: 24 page...|$|R
40|$|Abstract. The <b>generating</b> <b>polynomials</b> {{of higher}} power residue codes over finite fields are {{difficult}} to construct. This paper gives explicit expressions of generating idempotents of quartic residue codes over the field 4 F. The result will enable one to construct the <b>generating</b> <b>polynomials</b> of quartic residue codes over the field 4 F by computing the greatest common divisors of these generating idempotents and the polynomial 1 nx − with computer software such as Matlab and Maple...|$|R
5000|$|Here {{we present}} a simple Matlab {{implementation}} for an encoder.function encoded [...] = rsEncoder( [...] msg, m, prim_poly, n, k [...] ) %RSENCODER Encode message with the Reed-Solomon algorithm % m {{is the number of}} bits per symbol % prim_poly: Primitive polynomial p(x). Ie for DM is 301 % k is the size of the message % n is the total size (k+redundant) % Example: msg = uint8('Test') % enc_msg = rsEncoder(msg, 8, 301, 12, numel(msg)); [...] % Get the alpha alpha = gf(2, m, prim_poly); [...] % Get the reed-solomon <b>generating</b> <b>polynomial</b> g(x) g_x = genpoly(k, n, alpha); [...] % Multiply the information by X^(n-k), or just pad with zeros at the end to % get space to add the redundant information msg_padded = gf(zeros(1, n-k), m, prim_poly); [...] % Get the remainder of the division of the extended message by the [...] % reed-solomon <b>generating</b> <b>polynomial</b> g(x) reminder = deconv(msg_padded, g_x); % Now return the message with the redundant information encoded = msg_padded - reminder;end% Find the reed-solomon <b>generating</b> <b>polynomial</b> g(x), by the way this is the% same as the rsgenpoly function on matlabfunction g = genpoly(k, n, alpha) g = 1; % A multiplication on the galois field is just a convolution for k = mod(1 : n-k, n) g = conv(g, alpha [...]^ (k)); endend ...|$|E
5000|$|The shift {{register}} may be initialized with ones instead of zeroes. This {{is equivalent to}} inverting the first [...] bits of the message feeding them into the algorithm. The CRC equation becomes , where [...] is {{the length of the}} message in bits. The change this imposes on [...] {{is a function of the}} <b>generating</b> <b>polynomial</b> and the message length, [...]|$|E
5000|$|Mean-center the {{predictor}} variables. <b>Generating</b> <b>polynomial</b> terms (i.e., for , , , etc.) or interaction terms (i.e., , etc.) can cause some multicollinearity if the variable in question has a limited range (e.g., 2,4). Mean-centering will eliminate this {{special kind of}} multicollinearity. However, in general, this has no effect. It {{can be useful in}} overcoming problems arising from rounding and other computational steps if a carefully designed computer program is not used.|$|E
5000|$|The case of [...] <b>generates</b> Selberg's <b>polynomials,</b> and {{the case}} of [...] <b>generates</b> Stirling's {{interpolation}} <b>polynomials.</b>|$|R
5000|$|Since we {{have two}} {{derivatives}} to work with, we construct the set [...] Our divided difference table is then:and the <b>generated</b> <b>polynomial</b> isby taking the coefficients from the diagonal of the divided difference table, and multiplying the kth coefficient by , as we would when <b>generating</b> a Newton <b>polynomial.</b>|$|R
50|$|Thus, the Vandermonde {{polynomial}} (together {{with the}} symmetric <b>polynomials)</b> <b>generates</b> the alternating <b>polynomials.</b>|$|R
5000|$|Matrix {{multiplication}} {{is composed}} of multiplication and addition of the entries. Entries are 8 bit bytes treated as coefficients of polynomial of order [...] Addition is simply XOR. Multiplication is modulo irreducible polynomial [...] If processed bit by bit then after shifting a conditional XOR with 1B16 should be performed if the shifted value is larger than FF16 (overflow must be corrected by subtraction of <b>generating</b> <b>polynomial).</b> These are special cases of the usual multiplication in [...]|$|E
50|$|A cubic field K {{is called}} a cyclic cubic field, if it {{contains}} all three roots of its <b>generating</b> <b>polynomial</b> f. Equivalently, K is a cyclic cubic field {{if it is a}} Galois extension of Q, in which case its Galois group over Q is cyclic of order three. This can only happen if K is totally real. It is a rare occurrence in the sense that if the set of cubic fields is ordered by discriminant, then the proportion of cubic fields which are cyclic approaches zero as the bound on the discriminant approaches infinity.|$|E
50|$|In {{combinatorial}} mathematics, a rook polynomial is a <b>generating</b> <b>polynomial</b> of {{the number}} of ways to place non-attacking rooks on a board that looks like a checkerboard; that is, no two rooks may be in the same row or column. The board is any subset of the squares of a rectangular board with m rows and n columns; we {{think of it as the}} squares in which one is allowed to put a rook. The board is the ordinary chessboard if all squares are allowed and m = n = 8 and a chessboard of any size if all squares are allowed and m = n. The coefficient of x k in the rook polynomial RB(x) is the number of ways k rooks, none of which attacks another, can be arranged in the squares of B. The rooks are arranged in such a way that there is no pair of rooks in the same row or column. In this sense, an arrangement is the positioning of rooks on a static, immovable board; the arrangement will not be different if the board is rotated or reflected while keeping the squares stationary. The polynomial also remains the same if rows are interchanged or columns are interchanged.|$|E
40|$|A {{new method}} of <b>generating</b> <b>polynomials</b> using {{microprocessors}} is proposed. The <b>polynomial</b> is <b>generated</b> as a 16 -bit digital word. The algorithm for generating {{a variety of}} basic 'building block' functions and its implementation is discussed. A technique for <b>generating</b> a generalized <b>polynomial</b> based on the proposed algorithm is indicated. The performance of the proposed generator is evaluated using a commercially available microprocessor kit...|$|R
5000|$|The primary {{motivation}} in studying radicals is Hilbert's Nullstellensatz in commutative algebra. One {{version of this}} celebrated theorem states that for an algebraically closed field k, and for any finitely <b>generated</b> <b>polynomial</b> ideal J in the n indeterminates [...] over the field k, one haswhereand ...|$|R
40|$|AbstractIt is {{well-known}} that the denominators of Padé approximants {{can be considered}} as orthogonal polynomials with respect to a linear functional. This is usually shown by defining Padé-type approximants from so-called <b>generating</b> <b>polynomials</b> and then improving the order of approximation by imposing orthogonality conditions on the <b>generating</b> <b>polynomials.</b> In the multivariate case, a similar construction is possible when dealing with the multivariate homogeneous Padé approximants introduced by the second author. Moreover it is shown here, that several well-known properties of the zeroes of classical univariate orthogonal polynomials, {{in the case of a}} definite linear functional, generalize to the multivariate homogeneous case. For the multivariate homogeneous orthogonal polynomials, the absence of common zeroes is translated to the absence of common factors...|$|R
5000|$|The {{design of}} the 32-bit {{polynomial}} most commonly used by standards bodies, CRC-32-IEEE, {{was the result of}} a joint effort for the Rome Laboratory and the Air Force Electronic Systems Division by Joseph Hammond, James Brown and Shyan-Shiang Liu of the Georgia Institute of Technology and Kenneth Brayer of the MITRE Corporation. The earliest known appearances of the 32-bit polynomial were in their 1975 publications: Technical Report 2956 by Brayer for MITRE, published in January and released for public dissemination through DTIC in August, and Hammond, Brown and Liu's report for the Rome Laboratory, published in May. Both reports contained contributions from the other team. During December 1975, Brayer and Hammond presented their work in a paper at the IEEE National Telecommunications Conference: the IEEE CRC-32 polynomial is the <b>generating</b> <b>polynomial</b> of a Hamming code and was selected for its error detection performance. [...] Even so, the Castagnoli CRC-32C polynomial used in iSCSI or SCTP matches its performance on messages from 58 bits to 131 kbits, and outperforms it in several size ranges including the two most common sizes of Internet packet. The ITU-T G.hn standard also uses CRC-32C to detect errors in the payload (although it uses CRC-16-CCITT for PHY headers).|$|E
40|$|AbstractWe give {{a general}} convolution–multiplication {{identity}} for the multivariate and bivariate rank <b>generating</b> <b>polynomial</b> of a graph or matroid. The bivariate rank <b>generating</b> <b>polynomial</b> is transformable {{to and from}} the Tutte polynomial by simple algebraic operations. Several identities, almost all already known in some form, are specializations of this identity. Combinatorial or probabilistic interpretations are given for the specialized identities...|$|E
40|$|Abstract. We give {{a general}} multiplication-convolution {{identity}} for the multivariate and bivariate rank <b>generating</b> <b>polynomial</b> of a matroid. The bivariate rank <b>generating</b> <b>polynomial</b> is transformable {{to and from}} the Tutte polynomial by simple algebraic operations. Several identities, almost all already known in some form, are specialization of this identity. Combinatorial or probabilistic interpretations are given for the specialized identities. Subject classification number. 05 B 35 05 C 15 05 C 8...|$|E
40|$|Summation of the p-adic {{functional}} series ∑ε^n n! P_k^ε (n; x) x^n, where P_k^ε (n; x) is a polynomial in x and n with rational coefficients, and ε = ± 1, is considered. The {{series is}} convergent {{in the domain}} |x|_p ≤ 1 for all primes p. It is found the general form of polynomials P_k^ε (n; x) which provide rational sums when x ∈Z. A class of <b>generating</b> <b>polynomials</b> A_k^ε (n; x) plays {{a central role in}} the summation procedure. These <b>generating</b> <b>polynomials</b> are related to many sequences of integers. This is a brief review with some new results. Comment: 14 pages, accepted for publication in proceedings of 14 th International Conference on p-Adic Functional Analysis (Contemporary Mathematics, AMS...|$|R
40|$|In this paper, {{we study}} the {{relationship}} among left peaks, interior peaks and up-down runs of simsun permutations. Properties of the <b>generating</b> <b>polynomials,</b> including the recurrence relation, generating function and real-rootedness are studied. Moreover, we introduce and study simsun permutations of the second kind. Comment: 13 page...|$|R
50|$|The {{third class}} is formed by methods like CGS and BiCGSTAB. These also {{work with a}} three-term {{recurrence}} relation (hence, without optimality) and they can even terminate prematurely without achieving convergence. The idea behind these methods is to choose the <b>generating</b> <b>polynomials</b> of the iteration sequence suitably.|$|R
40|$|In {{this paper}} we {{construct}} a <b>generating</b> <b>polynomial</b> over the rationals for the generic Newton polygon for the L function of exponential sums {{of the family}} of f = x^d+ a x^s parameterized by a, and prove some of its key properties. The <b>generating</b> <b>polynomial</b> encodes information of and determines the generic Newton polygon at each prime p when p is large enough, and vice versa. Comment: 16 page...|$|E
40|$|A {{permutation}} {{representation of}} a Coxeter group $W$ naturally defines an absolute order. This family of partial orders (which includes the absolute order on $W$) is introduced and studied in this paper. Conditions under which the associated rank <b>generating</b> <b>polynomial</b> divides the rank <b>generating</b> <b>polynomial</b> of the absolute order on $W$ are investigated when $W$ is finite. Several examples, including a symmetric group action on perfect matchings, are discussed. As an application, a well-behaved absolute order on the alternating subgroup of $W$ is defined. Comment: 23 pages, 1 figure, revised version {{to be published in}} J. Algebraic Combinatoric...|$|E
40|$|AbstractThe paper {{proposes to}} render the mathematic {{relations}} between the mathematic ideal of a <b>generating</b> <b>polynomial</b> from GF (2), the generating matrix of the type 4 x 7 associated to this ideal and the <b>generating</b> <b>polynomial</b> g(x), {{as well as the}} relations between the generating matrix H of the type 3 x 7, associated to a second mathematic ideal and to a second <b>generating</b> <b>polynomial</b> h(x). These generating polynomials as well as the generating matrixes G and H are not randomly selected, they being part of an associative general linear algebra generated by a polynomial f(x) from GF(2) that has as dividends the polynomials g(x) and h(x). All these we shall concretely exemplify in the proposed paper. Much more, we shall observe, also by a concrete example furnished in this paper, the connecting relations that exist between the matrixes G and H and that are very important in the mathematic theory of encodings. Practically, in the theory of encodings by redundant symbols, if between two matrixes there is no total relation of orthogonally, than the decoding cannot be realized. Therefore a property of the two matrixes is strictly necessary, this fact being also exemplified and demonstrated in this article...|$|E
40|$|Title: <b>Generating</b> <b>polynomials</b> {{for number}} field sieve Author: Anežka Pejlová Department: Department of Algebra Supervisor: prof. RNDr. Aleš Drápal, CSc., DSc., Department of Algebra Abstract: The topic of this thesis is mainly focused on Kleinjung {{algorithm}} for <b>generating</b> <b>polynomials</b> within the General Number Field Sieve, {{which is the}} most efficient factorization algorithm nowadays. Commonly used consecu- tions are explained with respect to the fact whether they can be rigorously proven or they are based only on heuristic assumptions. Another contribution of this thesis is the attached implementation of Kleinjung algorithm develo- ped {{as a part of the}} Number Field Sieve project led by the Department of Algebra. The appropriateness of some heuristics used in the theory beyond the Kleinjung algorithm is supported by empirical data obtained from this implementation. Keywords: Number field sieve, Kleinjung algorith...|$|R
40|$|We {{prove that}} the <b>generating</b> <b>polynomials</b> of {{partitions}} of an $n$-element set into non-singleton blocks, counted {{by the number of}} blocks, have real roots only and we study the asymptotic behavior of the leftmost roots. We apply this information to find the most likely number of blocks. Comment: 16 page...|$|R
40|$|It is {{well-known}} that the denominators of Pad'e approximants {{can be considered}} as orthogonal polynomials with respect to a linear functional. This is usually shown by defining Pad'e-type approximants from socalled <b>generating</b> <b>polynomials</b> and then improving the order of approximation by imposing orthogonality conditions on the <b>generating</b> <b>polynomials.</b> In the multivariate case, a similar construction is possible when dealing with the multivariate homogeneous Pad'e approximants introduced by the second author. Moreover it is shown here, that several wellknown properties of the zeroes of classical univariate orthogonal polynomials, {{in the case of a}} definite linear functional, generalize to the multivariate homogeneous case. For the multivariate homogeneous orthogonal polynomials, the absence of common zeroes is translated to the absence of common factors. y This research was carried out while the author was visiting the University of Antwerp as a guest researcher ? Research Director FWO-V [...] ...|$|R
40|$|Loop invariants {{play a very}} {{important}} role in proving correctness of programs. In this paper, we address the problem of generating invariants of polynomial loop programs. We present a new approach, for <b>generating</b> <b>polynomial</b> equation invariants of polynomial loop programs through computing vanishing ideals of sample points. We apply rational function interpolation, based on early termination technique, to generate invariants of loop programs with symbolic initial values. Our approach avoids first-order quantifier elimination and cylindrical algebraic decomposition(CAD). An algorithm for <b>generating</b> <b>polynomial</b> invariants is proposed and some examples are given to illustrate the algorithm. Furthermore, we demonstrate on a set of loop programs with symbolic initial values that our algorithm can yield polynomial invariants with degrees high up to 15...|$|E
40|$|Abstract. In 2004, Choe, Oxley, Sokal and Wagner {{established}} a tight connection between matroids and multiaffine real stable polynomials. Recently, Brändén used this theory and a polynomial {{coming from the}} Vámos matroid to disprove the generalized Lax conjecture. Here we present a 10 -element extension of the Vámos matroid and prove that its basis <b>generating</b> <b>polynomial</b> is real stable (i. e. that the matroid has the half-plane property). We do this via large sums of squares computations and a criterion for real stability given by Wagner and Wei. Like the Vámos matroid, this matroid is not representable over any field and no power of its basis <b>generating</b> <b>polynomial</b> can be written as the determinant of a linear matrix with positive semidefinite Hermitian forms. 1...|$|E
40|$|In a {{pseudo-random}} {{testing of}} combinational circuits the pattern generator produces test vectors {{that are being}} applied to the tested circuit. The nature of the generator thus directly influences the fault coverage achieved. In this paper we discuss an influence {{of the type of}} the pseudo-random pattern generator on the fault coverage. In most cases the LFSR is used as a pattern generator, while its <b>generating</b> <b>polynomial</b> is primitive to ensure a maximal period. We show that using primitive polynomials is not necessary, and in most cases even undesirable. This fact is documented by statistical graphs. The necessity of properly selecting a <b>generating</b> <b>polynomial</b> and a LFSR seed is shown here, by designing a mixed-mode BIST for the ISCAS benchmarks...|$|E
40|$|Recently, Haglund and Visontai {{established}} {{the stability of}} the multivariate Eulerian <b>polynomials</b> as the <b>generating</b> <b>polynomials</b> of the Stirling permutations, which serves as a unification of some results of Bóna, Brenti, Janson, Kuba, and Panholzer concerning Stirling permutations. Let B_n(x) be the <b>generating</b> <b>polynomials</b> of the descent statistic over Legendre-Stirling permutations, and let T_n(x) = 2 ^nC_n(x/ 2), where C_n(x) are the second-order Eulerian polynomials. Haglund and Visontai proposed the problems of finding multivariate stable refinements of the polynomials B_n(x) and T_n(x). We obtain context-free grammars leading to multivariate stable refinements of the polynomials B_n(x) and T_n(x). Moreover, the grammars enable us to obtain combinatorial interpretations of the multivariate polynomials in terms of Legendre-Stirling permutations and marked Stirling permutations. Such stable multivariate polynomials provide solutions to two problems posed by Haglund and Visontai. Comment: 22 page...|$|R
40|$|Title: Supporting {{algorithms}} {{of number}} field sieve Author: Adéla Skoková Department: Department of Algebra Supervisor: prof. RNDr. Aleš Drápal, CSc., DSc. Abstract: In this work we study {{the first part}} of the algorithm of number field sieve, <b>generating</b> of <b>polynomials.</b> At first we describe all the algorithm of the sieve for understanding of the role of polynomials and their impact on the entire algorithm. Then we present their characteristics and evaluation. The last part is about the most effective know algorithms of <b>generating</b> <b>polynomials,</b> invented by Thorsen Klinjung. Keywords: GNFS, Number sieve, Number field, Kleinjung algorith...|$|R
40|$|Building upon {{works of}} Hironaka, Bierstone-Milman, Villamayor and W lodarczyk we give an a priori {{estimate}} for {{the complexity of}} the simplified Hironaka algorithm. As a consequence of this result we show that there exists a canonical Hironaka embedded desingularization and principalization over the fields of large characteristic (relatively to degree of <b>generating</b> <b>polynomials)</b> ...|$|R
