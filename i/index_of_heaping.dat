0|10000|Public
40|$|Heaping {{is often}} found in {{discrete}} quantitative data based on subject responses to open-ended interview questions or observer assessments. Heaping occurs when subjects or observers prefer some set of numbers as responses (e. g. multiples of 5) {{simply because of the}} features of this set. Although heaping represents a common type of measurement error, apparently no prior general measure <b>of</b> <b>heaping</b> exists. We present simple measures and tests <b>of</b> <b>heaping</b> in discrete quantitative data, illustrate them with data from an epidemiologic study, and evaluate the bias of these statistics. These techniques permit formal measurement <b>of</b> <b>heaping</b> and facilitate comparisons of the degree <b>of</b> <b>heaping</b> in data from different samples, substantive domains, and data collection methods. ...|$|R
40|$|We {{consider}} the classic problem <b>of</b> designing <b>heaps.</b> Standard binary heaps run faster in practice than Fibonacci heaps but have worse time guarantees. Here {{we present a}} new type <b>of</b> <b>heap,</b> a layered heap, that runs faster in practice than both standard binary and Fibonacci heaps, but has asymptotic insert times better than that <b>of</b> binary <b>heaps.</b> Our heap is defined recursively and maximum run time speed up occurs when a recursion depth of 1 is used, i. e. a <b>heap</b> <b>of</b> <b>heaps...</b>|$|R
40|$|The {{periodicity}} of {{the genus}} sequences <b>of</b> the <b>heaps</b> <b>of</b> finite quaternary games are examined. While the truncated genus sequence <b>of</b> the <b>heaps</b> <b>of</b> finite quaternary games becomes periodic, {{this is not true}} for the genus sequence in general. This contrasts with the known result that the genus sequence <b>of</b> the <b>heaps</b> <b>of</b> all finite subtraction games, a subset of finite quaternary games, becomes periodic. 1...|$|R
50|$|When {{played as}} a misère game, Nim {{strategy}} is different {{only when the}} normal play move would leave no <b>heap</b> <b>of</b> size two or larger. In that case, the correct move is to leave an odd number <b>of</b> <b>heaps</b> <b>of</b> size one (in normal play, the correct move would be to leave an even number <b>of</b> such <b>heaps).</b>|$|R
5000|$|... #Caption: Diagram <b>of</b> <b>heap</b> leach {{recovery}} for uranium (US NRC) ...|$|R
5000|$|... union <b>of</b> <b>heaps</b> with {{disjoint}} domains, undefined when domains overlap.|$|R
40|$|We {{present a}} first-order linearly typed {{assembly}} language, HBAL, {{that allows the}} safe reuse <b>of</b> <b>heap</b> space for elements of di#erent types. The linear types discipline ensures a single pointer property, but disallows aliasing. Since HBAL does not assume an external memory management system, programs run in a bounded amount <b>of</b> <b>heap</b> space...|$|R
25|$|Lazy {{initialization}} <b>of</b> <b>heap</b> initializes {{only when}} required, to improve performance.|$|R
40|$|We {{study the}} minimum number <b>of</b> <b>heaps</b> {{required}} to sort a random sequence using a generalization of Istrate and Bonchis's algorithm (2015). In a previous paper, the authors {{proved that the}} expected number <b>of</b> <b>heaps</b> grows logarithmically. In this note, we improve on the previous result by establishing the almost-sure and L 1 convergence...|$|R
40|$|AbstractGiven a free {{partially}} commutative monoid, {{we interpret}} equivalence classes of words (also called ‘traces’) in terms <b>of</b> Viennot's <b>heaps</b> <b>of</b> pieces. We study {{the notion of}} conjugacy applied to this context. Each heap has a unique representative in the set of ‘standard words’ which are lexicographically ordered. Then, by definition, Lyndon heaps are the minimal elements of the conjugacy classes <b>of</b> <b>heaps.</b> Most combinatorial properties of Lyndon words have a counterpart in the theory <b>of</b> Lyndon <b>heaps.</b> For instance, a ‘standard factorization’ exists, the set <b>of</b> Lyndon <b>heaps</b> provides a complete factorization of the monoid, etc...|$|R
40|$|We {{report the}} {{experimental}} findings of formation and motion <b>of</b> <b>heap</b> in granular materials in an inclined and vertically vibrated container. We show experimentally how the transport velocity <b>of</b> <b>heap</b> up container {{is related to}} the driving acceleration as well as the driving frequency of exciter. An analogous experiment was performed with a heap-shaped Plexiglas block. We propose that cohesion force resulted from pressure gradient in ambient gas plays a crucial role in enhancing and maintaining a heap, and ratchet effect causes the movement <b>of</b> the <b>heap.</b> An equation which governs the transport velocity <b>of</b> the <b>heap</b> is presented. Comment: 9 pages, 5 figures, submitted to PR...|$|R
50|$|A source <b>of</b> <b>heap</b> {{pollution}} in Java {{arises from the}} fact that type arguments and variables are not reified at run-time. As a result, different parameterized types are implemented by the same class or interface at run time. Indeed, all invocations of a given generic type declaration share a single run-time implementation. This results in the possibility <b>of</b> <b>heap</b> pollution.|$|R
40|$|A Fibonacci heap is a {{deterministic}} {{data structure}} implementing a priority queue with op-timal amortized asymptotic operation costs. An unaesthetic aspect <b>of</b> Fibonacci <b>heaps</b> {{is that they}} must maintain a “mark bit ” which serves only to ensure efficiency <b>of</b> <b>heap</b> operations, not their correctness. Karger proposed a simple randomized variant <b>of</b> Fibonacci <b>heaps</b> in which mark bits are replaced by coin flips. This modified data structure still has expected amortized cost O(1) for insert, decrease-key, and merge. Karger conjectured that this data structure has expected amortized cost O(log s) for delete-min, where s is the number <b>of</b> <b>heap</b> operations. In this paper, we give a tight analysis <b>of</b> randomized Fibonacci <b>heaps,</b> resolving Karger’s conjecture. Specifically, we obtain matching {{upper and lower bounds}} of Θ(log 2 s / log log s) for the runtime of delete-min. We also prove a tight lower bound of Ω(n) on delete-min {{in terms of the number}} <b>of</b> <b>heap</b> elements n. Finally, we give a simple additional modification to these heaps which yields a tight runtime O(log 2 n / log log n) for delete-min...|$|R
50|$|Some records <b>of</b> <b>Heap</b> Eng Moh Steamship Company {{are held}} in the National Archives of Singapore.|$|R
5000|$|Keep {{track of}} a free and live pointer and {{initialize}} both to the start <b>of</b> <b>heap.</b>|$|R
40|$|We {{describe}} {{the implementation of}} a first-order linearly typed assembly language, HBAL, that allows the safe reuse <b>of</b> <b>heap</b> space for elements of different types Linear typing ensures the single pointer property, disallowing aliasing, but allowing safe in-place-update compilation of a functional programming language. HBAL was designed as a target low-level language for Hofmann’s LFPL programs [5] that run in a bounded amount <b>of</b> <b>heap</b> spaceEje: FPG...|$|R
40|$|Heaps {{constitute}} a well-known data structure allowing {{the implementation of}} an e#cient O(n log n) sorting algorithm {{as well as the}} design of fast priority queues. Although heaps have been known for long, their combinatorial properties are still partially worked out: exact summation formulae have been stated, but most of the asymptotic behaviors are still unknown. In this paper, we present a number of general (not restricting to special subsequences) asymptotic results that give insight on the di#culties encountered in the asymptotic study of the number <b>of</b> <b>heaps</b> <b>of</b> a given size and of the cost <b>of</b> <b>heap</b> construction. In particular we exhibit the influence of arithmetic functions in the apparently chaotic behavior of these quantities. It is also shown that the distribution function of the cost <b>of</b> <b>heap</b> construction using Floyd's algorithm and other variants is asymptotically normal. ...|$|R
40|$|The aim of {{the study}} is to reduce the effect <b>of</b> <b>heaping</b> in the data of {{breastfeeding}} duration. The duration of Breastfeeding is usually determined using the retrospective records, which sometimes have the problem <b>of</b> <b>heaping.</b> Using the Malaysian Family Life Survey (MFLS), the retrospective data on breastfeeding durations is found to show heaping at 6, 12, 18 and 24 months. In some studies, multiples of five techniques are often used to reduce the effect <b>of</b> <b>heaping.</b> However, in this study we modify the multiple of five techniques to multiple of three techniques, which is particularly suitable for the data that have the heaped points for every six months periods during the duration. Based on this technique, a smooth distribution of breastfeeding durations is obtained...|$|R
5000|$|... #Caption: Part of {{the wall}} {{sectioned}} to show the state <b>of</b> <b>heaping</b> and hardening <b>of</b> earth (panchuk in Korean).|$|R
40|$|We {{introduce}} the rank-pairing <b>heap,</b> an implementation <b>of</b> <b>heaps</b> that combines the asymptotic efficiency <b>of</b> Fibonacci <b>heaps</b> with much <b>of</b> the simplicity <b>of</b> pairing <b>heaps.</b> Unlike all other heap implementations that match the bounds <b>of</b> Fibonacci <b>heaps,</b> our structure needs only one cut {{and no other}} structural changes per key decrease; the trees representing the heap can therefore evolve to have arbitrary structure. Although the data structure is simple, its analysis is not. Our initial experiments indicate that rank-pairing heaps perform almost as well as pairing heaps on typical input sequences and better on worst-case sequences...|$|R
40|$|AbstractComparator {{networks}} for constructing binary <b>heaps</b> <b>of</b> size n are presented which have size O(nloglogn) and depth O(logn). A lower bound of nloglogn−O(n) {{for the size}} <b>of</b> any <b>heap</b> construction network is also proven, implying that the networks presented are within a constant factor of optimal. We give a tight relation between the leading constants {{in the size of}} selection networks and in the size <b>of</b> <b>heap</b> construction networks...|$|R
40|$|We {{introduce}} the rank-pairing <b>heap,</b> an implementation <b>of</b> <b>heaps</b> that combines the asymptotic efficiency <b>of</b> Fibonacci <b>heaps</b> with much <b>of</b> the simplicity <b>of</b> pairing <b>heaps.</b> Other heap implementations that match the bounds <b>of</b> Fibonacci <b>heaps</b> {{do so by}} maintaining a balance condition on the trees representing the heap. In contrast to these structures but like pairing heaps, our trees can evolve to have arbitrary (unbalanced) structure. Also like pairing heaps, our structure requires at most one cut and no other restructuring per key decrease, in the worst case: the only changes that can cascade during a key decrease are changes in node ranks. Although our data structure is simple, its analysis is not...|$|R
40|$|Despite {{significant}} progress in the {{theory and practice of}} program analysis, analyzing properties <b>of</b> <b>heap</b> data has not reached the same level of maturity as the analysis of static and stack data. The spatial and temporal structure of stack and static data is well understood while that <b>of</b> <b>heap</b> data seems arbitrary and is unbounded. We devise bounded representations that summarize properties <b>of</b> the <b>heap</b> data. This summarization is based on the structure of the program that manipulates the heap. The resulting summary representations are certain kinds of graphs called access graphs. The boundedness of these representations and the monotonicity of the operations to manipulate them make it possible to compute them through data flow analysis. © AC...|$|R
60|$|Bettie {{saw with}} {{tenderness}} how devotedly poor Ed served Maud. He {{could not have}} taken a better method <b>of</b> <b>heaping</b> coals <b>of</b> fire on her head.|$|R
50|$|By 2008, Wrench in the Works {{had left}} Redscroll Records and signed onto Facedown Records where they {{released}} their second album, Lost Art <b>of</b> <b>Heaping</b> Coal.|$|R
2500|$|Heap and Sigsworth met in {{the mid-1990s}} on the London music scene, Sigsworth coming to the {{attention}} <b>of</b> <b>Heap</b> and her record label due to his writing/production/keyboard-playing work with Seal and Björk. Their first work together consisted <b>of</b> <b>Heap</b> providing extra vocals for Sigsworth's band Acacia. She subsequently contributed to the live Acacia lineup at several concerts, became a significant [...] "floating member" [...] of the band (although never a full member) and sang on all but one track on Acacia's ill-fated debut album Cradle.|$|R
40|$|A heap {{profile is}} a chart showing the {{contents}} <b>of</b> <b>heap</b> memory throughout a computation. Contents are depicted abstractly by showing how much space {{is occupied by}} memory cells in each of several classes. A good heap profiler can {{use a variety of}} attributes of memory cells to define a classification. Effective profiling usually involves a combination of attributes. The ideal profiler gives full support for combination in two ways. First, a section <b>of</b> the <b>heap</b> <b>of</b> interest to the programmer can be specified by constraining the values of any combination of cell attributes. Secondly, no matter what attributes are used to specify such a section, a heap profile can be obtained for that section only, and any other attribute can be used to define the classification. Achieving this ideal is not simple for some combinations <b>of</b> attributes. A <b>heap</b> profile is derived by interpolation of a series <b>of</b> censuses <b>of</b> <b>heap</b> contents at different stages. The obvious way to obtain census data is to traverse [...] ...|$|R
50|$|The ancient site of Cremna was {{identified}} {{in the district of}} Bucak in 1874, and excavations began in 1970. It stands on a hill dominating the ancient Cestrus River (today Aksu); very few of the site's old buildings are still standing, generally consisting <b>of</b> <b>heaps</b> <b>of</b> stone.|$|R
40|$|Purpose. The {{processes}} of biopassive detoxication are {{of special interest}} for the solution of environmental issues of detoxification <b>of</b> gold <b>heap</b> leach cyanide-bearing wastes whose detoxification period is unlimited. These processes are based on spontaneous degradation of cyanides {{under the influence of}} natural factors including the action of autochthonous bacterial community. The purpose of the work is to develop a biopassive detoxification technology <b>of</b> <b>heap</b> leach stockpiled wastes. Methods. A long-term experiment on ore mass storage under the conditions <b>of</b> <b>heap</b> leach ore pile zoning has been carried out in order to model the process of passive detoxification <b>of</b> gold <b>heap</b> leach stockpiled wastes. The content of toxic compounds in the ore mass has been determined using a chemical analysis based on standard procedures. Results. It is found that biochemical processes dominate over simple chemical oxidation during passive detoxification <b>of</b> the gold <b>heap</b> leach ore pile. Approximating biodegradation equations have been calculated for the major toxic compounds (thiocyanates and cyanides including copper and nickel cyanide complexes). The technology of biopassive detoxification <b>of</b> <b>heap</b> leach stockpiled wastes has been developed at an industrial <b>heap</b> leach site <b>of</b> the Sakha Republic (Yakutia) deposit. Water balance <b>of</b> the <b>heap</b> leach installation and detoxification time for the major mass of the ore pile have been calculated. Process circuit and process flow diagram of the proposed technology have been developed. Conclusions. The introduced technology eliminates the costs for reagent detoxification and is based on high economic and environmental efficiency as compared to conventional chemical technology. Introduction of additional modernizations of the irrigation circuit as well as removal and transportation of snow will be carried out at low capital and operational costs. The expected economic potential of the technology of bipassive detoxification <b>of</b> gold <b>heap</b> leach site will be 151429. 7 thousand rouble...|$|R
40|$|Heap {{allocation}} with copying {{garbage collection}} {{is believed to}} have poor memory subsystem performance. We conducted a study of the memory subsystem performance <b>of</b> <b>heap</b> allocation for memory subsystems found on many machines. We found that many machines support heap allocation poorly. However, with the appropriate memory subsystem organization, heap allocation can have good memory subsystem performance. 1 Introduction Heap allocation with copying garbage collection is widely believed to have poor memory subsystem performance [31, 38, 39, 24, 40]. To investigate this, we conducted an extensive study of memory subsystem performance <b>of</b> <b>heap</b> allocation intensive programs on memory subsystem organizations typical of many workstations. The programs, compiled with the SML/NJ compiler [3], do tremendous amounts <b>of</b> <b>heap</b> allocation, allocating one word every to 4 to 10 instructions. The programs used a generational copying garbage collector to manage their heaps. To our surprise, The authors [...] ...|$|R
50|$|The only heap that {{is reduced}} is heap A, so the winning move {{is to reduce}} the size <b>of</b> <b>heap</b> A to 1 (by {{removing}} two objects).|$|R
40|$|Comparator {{networks}} for constructing binary <b>heaps</b> <b>of</b> size n are presented which have size O(n log log n) and depth O(log n). A lower bound of n log log n O(n) {{for the size}} <b>of</b> any <b>heap</b> construction network is also proven, implying that the networks presented are within a constant factor of optimal. We give a tight relation between the leading constants {{in the size of}} selection networks and in the size <b>of</b> <b>heap</b> construction networks...|$|R
40|$|Abstract. We present Viennot’s theory <b>of</b> <b>heaps</b> <b>of</b> pieces, {{show that}} heaps are {{equivalent}} to {{elements in the}} partially commutative monoid of Cartier and Foata, and illustrate the main results of the theory by reproducing its application to the enumeration of parallelogram polyominoes due to Bousquet–Mélou and Viennot. 1...|$|R
50|$|Microsoft has {{included}} protections against heap resident buffer overflows since April 2003 in Windows Server 2003 and August 2004 in Windows XP with Service Pack 2. These mitigations were safe unlinking and heap entry header cookies. Later versions of Windows such as Vista, Server 2008 and Windows 7 include: Removal of commonly targeted data structures, heap entry metadata randomization, expanded role <b>of</b> <b>heap</b> header cookie, randomized heap base address, function pointer encoding, termination <b>of</b> <b>heap</b> corruption and algorithm variation. Normal Data Execution Prevention (DEP) and ASLR {{also help to}} mitigate this attack.|$|R
40|$|Abstract. This paper {{addresses}} {{the problem of}} establishing temporal properties of programs written in languages, such as Java, that make extensive use <b>of</b> the <b>heap</b> to allocate— and deallocate—new objects and threads. Establishing liveness properties is a particularly hard challenge. One of the crucial obstacles is that heap locations have no static names and the number <b>of</b> <b>heap</b> locations is unbounded. The paper presents a framework for the verification of Java-like programs. Unlike classical model checking, which uses propositional temporal logic, we use first-order modal logic to specify temporal properties <b>of</b> <b>heap</b> evolutions; this logic allows domain changes to be expressed, which permits allocation and deallocation to be modelled naturally. The paper also presents an abstract-interpretation algorithm that automatically verifies temporal properties expressed using the logic. ...|$|R
5000|$|In 1863, Victor Guérin noted {{about the}} ruins here: ”These ruins {{consist of a}} large number <b>of</b> <b>heaps</b> <b>of</b> {{irregular}} materials. Each <b>of</b> these <b>heaps</b> surrounds a cave hollowed in the rock, into which there is a descent of steps, or by an incline. These subterranean dwellings formed the basement of one-storied houses which stood above them. These have been pulled down and put up again several times, while the cellars are just the same as when they were cut in the rock." ...|$|R
