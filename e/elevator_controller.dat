23|19|Public
50|$|The SC/MP {{was also}} {{used as the basis}} of a single board {{microcontroller}} produced by Science of Cambridge (later Sinclair Research Ltd) called the MK14.Montgomery Elevator Co of Moline IL (later purchased by KONE, Inc) used the SC/MP as the basis for its first micro processor based <b>elevator</b> <b>controller</b> released in 1975. There are still many of these units running in buildings across the U.S.A.|$|E
5000|$|Machine room-less {{elevators}} {{are designed}} so {{that most of the}} components fit within the shaft containing the elevator car; and a small cabinet houses the <b>elevator</b> <b>controller.</b> Other than the machinery being in the hoistway, the equipment is similar to a normal traction or hole-less hydraulic elevator. The world's first machine room-less elevator, the Kone MonoSpace was introduced in 1996, by Kone. The benefits are: ...|$|E
50|$|The smooth {{operation}} of a destination dispatch system depends upon each passenger indicating their destination intention separately. In most cases, the elevator system has no way of differentiating a group of passengers from a single passenger if the group's destination is only keyed in a single time. This could potentially lead to an elevator stopping to pick up more passengers than the elevator actually has capacity for, creating delays for other users. This situation is handled by two solutions, a load vane sensor on the elevator or a group function button on keypad. The load vane tells the <b>elevator</b> <b>controller</b> {{that there is a}} high load in car and doesn't stop at other floors until the load is low enough to pick up more passengers. The group function button asks for how many passengers are going to a floor, and then the system sends the correct number of elevators to that floor if available.|$|E
50|$|The idea of {{destination}} control was originally conceived by Leo Port from Sydney in 1961, {{but at that}} time <b>elevator</b> <b>controllers</b> were implemented in relays and were unable to optimize the performance {{of destination}} control allocations.|$|R
40|$|This paper {{summarizes}} {{the development of}} a parallel approach based on evolution strategies (ES) that is capable of optimizing the neurocontroller of an <b>elevator</b> group <b>controller</b> [SWW 02]. It extends the architecture that was used for a simplified <b>elevator</b> group <b>controller</b> simulator [MAB 01, MN 02, BEM 03...|$|R
50|$|The next morning, Felix is {{summoned to}} the {{elevator}} factory by his boss, who angrily suspends him for his unauthorized visit to Rising Sun. That evening, the owners of Deta Liften and Rising Sun have a meeting inside a car, and reveal that the <b>elevator's</b> <b>controller,</b> made out of organic material, is going rogue by killing people in which makes them nervous.|$|R
40|$|The {{contribution}} {{of this paper}} is to propose and justify two general rules that can help to argue the costeffectiveness of use of the formal modelling language Coloured Petri Nets (CPN) : (1) Construction of CPN models should be explicitly based on high-quality documentation that software developers already produce; (2) Use of CPN models should be explicitly seen as prototyping. Rule (1) enables assessment of cost. We want to observe that the ratio of time used on CPN compared to time used on other documentation is small. Rule (2) enables us to argue benefit. Prototyping is seen as beneficial as witnessed by its wide-spread use and high acceptance in the software industry. We illustrate how the two rules can be complied with in the development of an <b>elevator</b> <b>controller.</b> We also make a more general comparison of CPN-based prototyping and traditional prototyping. Finally, we describe how a CPN model and a CPN-based prototype are used to argue for the correctness of the <b>elevator</b> <b>controller...</b>|$|E
40|$|Abstract. - A genetic {{algorithm}} (GAHCA) is proposed to control elevator groups of professional buildings. The {{genetic algorithm}} is {{compared with the}} universal controller algorithm in industry applications. In other to do so an ARENA simulation scenario has been generated during heavy lunchpeak traffic conditions. The results allow us to affirm that our genetic algorithm reaches a better performance attending to the system waiting times than traditional duplex algorithms. Keywords. - vertical traffic, genetic algorithm, <b>elevator,</b> <b>controller,</b> simulation, lunchpeak...|$|E
40|$|ELAN is a {{declarative}} language based on rewriting logic. The ELAN language {{is based on}} labelled conditional rewrite rules and on strategies for controlling their application. ELAN provides a strategy language to control labelled rules. In this paper we show {{how to use the}} ELAN strategy language for planning. We describe how to encode situations and actions and take advantage of ELAN strategies to build plans. We give an example of our approach by describing an <b>elevator</b> <b>controller...</b>|$|E
40|$|Efficient {{elevator}} group {{control is}} important for the operation of large buildings. Recent developments in this field include the use of fuzzy logic and neural networks. This paper summarizes the development of an evolution strategy (ES) that is capable of optimizing the neuro-controller of an <b>elevator</b> group <b>controller.</b> It extends the results that were based on a simplified <b>elevator</b> group <b>controller</b> simulator. A threshol...|$|R
40|$|Abstract. Efficient {{elevator}} group {{control is}} important for the oper-ation of large buildings. Recent developments in this field include the use of fuzzy logic and neural networks. This paper summarizes the de-velopment of an evolution strategy (ES) that is capable of optimizing the neuro-controller of an <b>elevator</b> group <b>controller.</b> It extends the re-sults that were based on a simplified <b>elevator</b> group <b>controller</b> simulator. A threshold selection technique is presented as a method to cope with noisy fitness function values during the optimization run. Experimental design techniques are used to analyze first experimental results. ...|$|R
50|$|The {{original}} Mindstorms Robotics Invention System kit contained two motors, two touch sensors, and one light sensor. The NXT {{version has}} three servo motors and one light, sound, and distance {{as well as}} 1 touch sensor. The NXT 2.0 has 2 touch sensors {{as well as a}} light and distance sensor, and support for 4 without using a sensor multiplexer. Lego Mindstorms may be used to build a model of an embedded system with computer-controlled electromechanical parts. Many kinds of real-life embedded systems, from <b>elevator</b> <b>controllers</b> to industrial robots, may be modelled using Mindstorms.|$|R
40|$|Abstract. In this paper, {{we first}} {{demonstrate}} how a coloured Petri nets (CPN) {{model can be}} used to capture requirements for a considered example system, an <b>elevator</b> <b>controller.</b> Then, we show how this requirements-level CPN model is transformed into a design-level object-oriented CPN model, which is structurally and conceptually closer to class diagrams and object-oriented programming languages. The CPN models reduce the gap between user-level requirements and the respective implementation, thus simplifying the implementation or code generation. Finally, we discuss the code generation from object-oriented CPN models...|$|E
40|$|Colloque avec actes sans comit√© de lecture. ELAN is a {{declarative}} language based on rewriting logic. The ELAN language {{is based on}} labelled conditional rewrite rules and on strategies for controlling their application. ELAN provides a strategy language to control labelled rules. In this paper we show {{how to use the}} ELAN strategy language for planning. We describe how to encode situations and actions and take advantage of ELAN strategies to build plans. We give an example of our approach by describing an <b>elevator</b> <b>controller...</b>|$|E
40|$|Approved {{for public}} release, {{distribution}} is unlimitedAn automatic <b>elevator</b> <b>controller</b> {{for the final}} phase of an Instrument Landing System approach is designed using optimization theory and the practicality of the controller investigated. The problem is discussed and the assumptions stated. Then a mathe- matical model for the aircraft and a desired flare-out approach path are derived. The aircraft and approach limitations are established and the model is tested. Dynamic programming and the Parametric Expansion Method provide the optimal control from which the controller is designed. A computer program is developed to investigate the controller. The results are inconclusive and a recommendation for further study is made. [URL] United States Nav...|$|E
40|$|We {{present an}} {{efficient}} algorithm for exact calculation and minimization of expected waiting times of all passengers using {{a bank of}} elevators. The dynamics of the system are represented by a discrete-state Markov chain embedded in the continuous phase-space diagram of a moving elevator car. The chain is evaluated efficiently using dynamic programming to compute measures of future system performance such as expected waiting time, properly averaged over all possible future scenarios. An <b>elevator</b> group <b>controller</b> based on this method significantly outperforms benchmark algorithms, and although slower than them, is completely within the computational capabilities of currently existing <b>elevator</b> bank <b>controllers...</b>|$|R
5000|$|Although quasi-standards {{exist that}} allow panels from {{different}} manufacturers to be networked with each other, {{they are not}} in favor with a lot of companies. One of the most common protocols used is BACnet which is common for various type of industrial networks. At least one system manufacturer, The Mircom Group of Companies provides a networkable Fire Alarm Control Panel with a BACnet inteface allowing non-proprietary interoperability of the Fire Alarm Control Panel FACP with other building systems. Typical interconnected systems to the Fire Alarm Control Panel include HVAC, Building Automation Controllers, Security/Access Control or <b>Elevator</b> <b>Controllers.</b> Interoperable systems greatly reduce the long term maintenance cost of a system and can provide greater emergency response than proprietary offerings.|$|R
40|$|This paper {{describes}} {{a theoretical framework}} {{that can be used}} for the implementation of software agents that reason, act, and perceive in incompletely known, dynamic software environments. Special attention is given to describing the way interagent communication is treated in this framework. We assume that the user provides a specification of each agent's primitive actions, and the relevant information about the software environment in which the agent is supposed to operate. On the basis of the primitive actions, the user can specify complex behaviors in a programming language, GOLOG, whose execution reflects the way the environment and the knowledge of the agent change from state to state. A simple domain consisting of two <b>elevator</b> <b>controllers</b> that negotiate the serving of a floor is used to present incrementally the details of our approach...|$|R
40|$|The low-altitude {{aircraft}} inspection of powerlines, or other linear infrastructure networks, {{is emerging as}} an important application requiring specialised control technologies. Despite some recent advances in automated control related to this application, control of the underactuated aircraft vertical dynamics has not been completely achieved, especially {{in the presence of}} thermal disturbances. Rejection of thermal disturbances represents a key challenge to the control of inspection aircraft due to the underactuated nature of the dynamics and specified speed, altitude, and pitch constraints. This paper proposes a new vertical controller consisting of a backstepping <b>elevator</b> <b>controller</b> with feedforward-feedback throttle controller. The performance of our proposed approach is evaluated against two existing candidate controllers...|$|E
40|$|Selected Papers of the Second International Workshop on Model-Based Methodologies for Pervasive and Embedded Software (MOMPES' 05), June 6, 2005, Rennes, France. In this paper,we first {{demonstrate}} how a coloured Petri nets(CPN) {{model can be}} used to capture requirements for a considered example system, an <b>elevator</b> <b>controller.</b> Then, we show how this requirements-level CPN model is transformed into a design-level object-oriented CPN model, which is structurally and conceptually closer to class diagrams and object-oriented programming languages. The CPN models reduce the gap between user-level requirements and the respective implementation, thus simplifying the imple- mentation or code generation. Finally, we discuss the code generation from object-oriented CPN models...|$|E
40|$|To {{address a}} frame concern in Jackson‚Äôs Problem Frames, {{we must make}} {{appropriate}} descriptions of: (1) the problem domain; (2) the requirements; (3) the specification of the machine. Based on these descriptions, we must give a con-vincing argument that the given domain properties and the machine specification together entail that the requirements are fulfilled. In this paper, we demonstrate how to address certain frame concerns {{with the use of}} the formal modelling language Coloured Petri Nets (CPN). Problem domain de-scription and machine specification are brought together in a CPN model, which is augmented with a graphical anima-tion. The CPN model is executable and we simulate it to address frame concerns. We illustrate the approach on the <b>elevator</b> <b>controller</b> example...|$|E
40|$|Today‚Äôs {{urban life}} cannot be {{imagined}} without elevators. The {{central part of}} an elevator system, the <b>elevator</b> group <b>controller,</b> assigns <b>elevator</b> cars to service calls in real-time while optimizing the overall service quality, the traffic throughput, and/or the energy consumption. The elevator supervisory group control (ESGC) problem can be classified as a combinatoria...|$|R
40|$|Elevators are {{considered}} as important transportation systems for urban communities. Elevators are installed with onboard controllers (circuit boards) and these controllers can generate a {{large volume of}} signals and events. In this paper, we describe an event-driven system to test, control, and monitor {{a large number of}} on board <b>elevator</b> <b>controllers.</b> The integrated system consists of a virtual controller, control and monitoring terminals, a central server, a playback function with animation, a genetic algorithm based maintenance scheduling module, and a data warehouse for managing massive real-time elevator signals. Based on the event-driven architecture, the proposed system is capable of facilitating faster deployment of new types of elevators. The system also provides engineers with playback functions for troubleshooting any hardware or software errors. In order to reduce overhead cost, the proposed system is designed to optimize resource allocation in maintenance scheduling. By deploying data warehouse technology, the proposed system allows significant reduction of storage requirement for managing real-time signals. I...|$|R
40|$|An <b>elevator</b> group {{supervisory}} <b>controller</b> is {{a control}} system that manages systematically {{two or more}} elevators in order to serve passengers as required. The elevator cars are assigned accordingly in response to hall calls, so as to optimize waiting time, riding time, power consumption, passengers‚Äô comfort, etc. In this paper, the simplicity of ordinal structure fuzzy logic in making crucial supervisory control decisions is demonstrated. In addition, {{in order to further}} improve the performance, a new approach of ordinal structure fuzzy logic with context adaptation is demonstrated to implement an <b>elevator</b> group supervisory <b>controller</b> for a building with 15 floors and 4 elevator cars. Simulations comparing ordinal structure fuzzy logic algorithm with and without context adaptation, show that the former performs bette...|$|R
40|$|Using a {{case study}} on the {{specification}} of an <b>elevator</b> <b>controller,</b> this paper presents an approach that can translate given UML descriptions into a Coloured Petri Net (CPN) model. The UML descriptions must be specified {{in the form of}} Use Cases and UML 2. 0 Sequence Diagrams. The CPN model constitutes one single, coherent and executable representation of all possible behaviours that are specified by the given UML artefacts. CPNs consitute a formal modelling language that enables construction and analysis of scalable, executable models of behaviour. A combined use of UML and CPN can be useful in several projects. CPN is well supported by CPN Tools and the work we present here is aimed at building a CPN Tools front-end engine that implements the proposed translation. ...|$|E
40|$|This paper {{reports on}} an {{exercise}} on constructing a visual animation layer for a behaviourally-intensive reactive system. We {{assume that the}} requirements of the system under consideration are described by use cases, and the behaviour of each use case is detailed by a collection of scenario descriptions. These use cases and scenarios are translated into a Coloured Petri Net (CPN) model, which is subsequently complemented with animation-specific elements. We describe how the CPN model must be structured to facilitate the animation process, and we present the supporting tools for creating the animation. We consider an <b>elevator</b> <b>controller</b> system as a case study, to demonstrate that a CPN model complemented with a visual animation layer constitutes a solid basis for addressing behavioural issues in an early phase of the development process, namely during the validation task...|$|E
40|$|Elevators are {{regarded}} as important modern day necessities for urban communities. Although elevators are widely used in various installations, the actual control and monitoring of these systems is given less attention by the research community. Specifically, the problem of maintaining and analyzing massive real-time elevator control signals has been largely ignored by data mining community. Every elevator consists {{of at least one}} onboard controller (circuit board). Like any other realtime systems, an onboard <b>elevator</b> <b>controller</b> can generate a large volume of signals. The size of real-time signals and maintenance records generated annually from a number of high-rise housing estate elevators can reach hundreds of Gigabytes. In this paper, we describe a data warehousing approach for managing massive real-time elevator signals. Our prototype system shows significant reduction in storage requirement and allows efficient query processing across massive real-time data. I...|$|E
40|$|Abstract: This paper {{presents}} an optimal control strategy for elevator group in large buildings. An <b>elevator</b> group <b>controller</b> allocates different <b>elevators</b> to {{up and down}} hall calls that coming from different floors. The control strategy is a precondition to minimize mainly the average waiting time of hall calls. In this paper, two genetic algorithms are developed to treat efficiently the elevator group problem. The first one handles the set of up and down hall calls while their destination floors are unknown at this moment. The second one handles the hall calls in assuming that their destination floors are known. The simulation results of the proposed algorithms gave a superior performance to that obtained with a traditional control in the industry (duplex algorithm). Copyright ¬© 2005 IFA...|$|R
50|$|The example {{shown in}} the figure on the right {{illustrates}} a model-based FDI technique for an aircraft <b>elevator</b> reactive <b>controller</b> {{through the use of}} a truth table and a state chart. The truth table defines how the controller reacts to detected faults, and the state chart defines how the controller switches between the different modes of operation (passive, active, standby, off, and isolated) of each actuator. For example, if a fault is detected in hydraulic system 1, then the truth table sends an event to the state chart that the left inner actuator should be turned off. One of the benefits of this model-based FDI technique is that this reactive controller can also be connected to a continuous-time model of the actuator hydraulics, allowing the study of switching transients.|$|R
40|$|The {{efficient}} {{performance of}} <b>elevator</b> group system <b>controllers</b> becomes a first order necessity when the buildings {{have a high}} utilisation ratio of the elevators, such as in professional buildings. We present a genetic algorithm that is compared with traditional controller algorithms in industry applications. An ARENA simulation scenario is created during heavy lunchpeak traffic conditions. The results allow us to affirm that our genetic algorithm reaches a better performance attending to the system waiting times than THV algorithm...|$|R
40|$|The {{contribution}} {{of this paper}} is the suggestion of a model-based approach to requirements engineering for reactive systems; we use an <b>elevator</b> <b>controller</b> as case study. We identify and justify two key properties that a model which we construct must have, namely: (1) controllerand-environment-partitioned, which means constituting a description of both the controller and the environment, and distinguishing between these two domains and between desired and assumed behaviour; (2) use case-based, which means constructed {{on the basis of a}} given use case diagram and reproducing the behaviour described in accompanying scenario descriptions. For the case study, we build an executable model in the formal modelling language Coloured Petri Nets (CPN). We demonstrate how the CPN model is useful for requirements engineering, since it provides a solid basis for addressing behavioural issues early in the development process, for example regarding concurrent execution of use cases and handling of failures...|$|E
40|$|Discrete Event System Specification (DEVS) {{has been}} widely used to {{describe}} hierarchical models of discrete systems. DEVS has also been used successfully to model with Real-Time constraints. In this paper, we introduce a methodology to verify Real-Time DEVS models, and describe the methodology by using {{a case study of}} a DEVS model of an elevator system. Our methodology applies recent advances in theoretical model checking to DEVS models. The methodology also handles the cases where theoretical approach is not feasible to cross the gap between abstract Timed Automata models and the complexity of the DEVS Real-time implementation by empirical software engineering methods. The case study is a system composed of an elevator along an <b>elevator</b> <b>controller,</b> and we show how the methodology can be applied to a real case like this one in order {{to improve the quality of}} such real-time applications. Keywords: DEVS, Formal methods verification, Real-Time software, Timed automata. I...|$|E
40|$|This paper {{presents}} a model-based approach to requirements engineering for reactive systems; we use an <b>elevator</b> <b>controller</b> as case study. We identify and justify two key properties that a model which we construct must have, namely: (1) controller-and-environment-partitioned, which means constituting {{a description of}} both the controller and the environment, and distinguishing between these two domains and between desired and assumed behaviour; (2) use case-based, which means constructed {{on the basis of}} a given use case diagram and reproducing the behaviour described in accompanying scenario descriptions. For the case study, we build an executable model in the formal modelling language Coloured Petri Nets. We demonstrate how this model is useful for requirements engineering, since it provides a solid basis for addressing behavioural issues early in the development process, for example regarding concurrent execution of use cases and handling of failures. Funda√ß√£o para a Ci√™ncia e a Tecnologia (FCT) - projecto POSC/EIA/ 60189 / 2004, bolsa SFRH/BSAB/ 607 / 2006...|$|E
40|$|In {{this paper}} we {{introduce}} a fuzzy <b>elevator</b> group <b>controller</b> using a linear context adaptation technique. We first describe the elevator group control {{problem and the}} schemes usually employed to solve it. We detail the fuzzy controller used in our development and an example system used in simulation experiments. The {{focus is on the}} comparison between the standard fuzzy controller and the fuzzy controller with linear context adaptation. Simulation results are included to show the usefulness of the fuzzy control strategy suggested. 1. Introduction In traffic control of elevator systems, figure 1, a corresponding two level control hierarchy must solve two different control problems. The lower level task is to command each elevator to move up or down, to stop or start and to open and close the door. The higher level coordinates the movement of a group of elevators through a set of logical rules crafted to improve the system performance. This problem is solved by means of a group supervis [...] ...|$|R
40|$|Abstract-The {{optimization}} {{of complex}} real-world problems {{might benefit from}} well tuned algorithm‚Äôs parameters. We propose a methodology that performs this tuning in an effective and efficient algorithmical manner. This approach combines methods from statistical design of experiments, regression analysis, design and analysis of computer experiments methods, and tree-based regression. It can also be applied to analyze the inRuence of different operators or to compare the performance of different algorithms. An evolution strategy and a simulated annealing algorithm that optimize an <b>elevator</b> supervisory group <b>controller</b> system are used to demonstrate the applicability of our approach to real-world optimization problems. I...|$|R
40|$|Engineering {{faculty at}} Iowa State University have worked collaboratively with teacher {{education}} faculty since 1996 {{to offer an}} undergraduate course entitled Toying with Technology to {{elementary and secondary education}} majors 1, 2. The development of this technology literacy course provided students with an appreciation for the technological innovations that surround them. Studies have shown that students form many of their overall career and educational attitudes as early as elementary school. Elementary (and even secondary) schoolteachers who have an appreciation for technology will likely convey that appreciation to their students. This will, in turn, broaden the horizons of these students regarding the opportunities they may have regarding careers in scientific and engineering disciplines. Engineering faculty believe the Toying with Technology course is a component of the long-term recruitment of K- 12 students, particularly minorities and women, into technology-based fields 3, 4, 5. This course is designed to explain the principles behind many of the technological innovations in wide use today via a collection of hands-on laboratory experiences based upon simple systems constructed out of LEGOs and controlled by small computers. These laboratory experiences are designed to lead students, literally by their hands-on experimentation, through the use of technology in support of many everyday activities. The lab experiences are simple enough to isolate and illuminate the underlying basic principles and yet complex enough to represent real-world examples. Students typically design and construct simple models of real-world systems, including an <b>elevator</b> and its <b>controller,</b> a garage door and its opener, a computer-controlled car, and a house security system. A significant portion of this course is the many field experiences involving K- 12 students being facilitated in mobile robotics exercises by the pre-service teachers. The literature in recent years shows numerous papers on mobile robotics 1, 2, 6 - 8, many using LEGOs. There also are many references to engineering outreach efforts 3 - 5, 8 - 12. During the summer of 2000 a graduate course incorporating these mobile robotics and scanning electron microscope exercises was offered to in-service teachers and teacher education graduate students. Several of the in-service teachers who took this course are now partnered with the current undergraduate students to provide an on-going relationship among the practicing teacher, the pre-service teachers, the K- 12 students, and the engineering faculty. In effect, the practicing teacher‚Äôs classroom becomes the laboratory for the Toying With Technology course...|$|R
