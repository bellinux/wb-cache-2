114|22|Public
5|$|Engelbart was Founder Emeritus of the Doug Engelbart Institute, {{which he}} founded in 1988 with his {{daughter}} Christina Engelbart, who is Executive Director. The Institute promotes Engelbart's philosophy for boosting Collective IQ—the concept of dramatically improving how we can solve important problems together—using a strategic bootstrapping approach for accelerating our progress toward that goal. In 2005, Engelbart received a National Science Foundation grant to fund the open source HyperScope project. The Hyperscope team built a browser component using Ajax and <b>Dynamic</b> <b>HTML</b> designed to replicate Augment's multiple viewing and jumping capabilities (linking within and across various documents).|$|E
25|$|Static pages {{instead of}} <b>dynamic</b> <b>HTML.</b>|$|E
25|$|Using JavaScript on the Document Object Model (DOM) {{leads to}} the method of <b>Dynamic</b> <b>HTML</b> that allows dynamic {{creation}} and modification of a web page within the browser.|$|E
40|$|In the 0. 3 series, Structure_threader brings some news. MavericK is now fully supported, {{including}} plotting. Plots {{also have}} a few news - In addition the the. svg file produced with matplotlib, Structure_threader now also produces a new <b>dynamic</b> and interactive <b>HTML</b> plot, using the library plotly. Documentation is a bit behind schedule, but will get there eventually...|$|R
40|$|Oracle Portal {{is being}} used as a {{development}} platform for applications requiring relational database access for the control system and operation of the accelerator facilities at the Paul Scherrer Institute (PSI). The underlying technology is based on portlets and <b>dynamic,</b> thin client <b>HTML</b> representation of the database information. Prototype, reusable code constructs written in PL/SQL and JavaScript have been developed...|$|R
40|$|A {{description}} of the New Brunswick Business Knowledge Base (NBBizKB) is provided and is made available online in RuleML. NBBizKB realizes a two-step design. First, business facts are extracted, once from static CSV tables and, repeatedly from <b>dynamic</b> semi-structured <b>HTML</b> pages. Second, Semantic Web rules are developed to derive information implicit in the fact base. Fact extraction comprises an XML DTD design, CSV-to-XML conversion, HTML mining, and XSLT translations. Rule derivation employs the Java-based RuleML implementation of OO jDREW to perform data validation, classification mapping, and information integration. Quantitative rule derivation results and findings about the original business data are reported. This rule-based reasoning over extracted facts about New Brunswick business comprises both {{a case study in}} business information mining and a use case for Semantic Web rules. KEY WORD...|$|R
2500|$|An [...] "HTML Application" [...] (HTA) is a Microsoft Windows {{application}} {{written with}} HTML and <b>Dynamic</b> <b>HTML</b> and introduced with IE5. Internet Explorer 5.0 also introduced favicon support and Windows Script Host, which provides scripting capabilities comparable to batch files, {{but with a}} greater range of supported features.|$|E
2500|$|As of May 2017 94.5% of 10 million {{most popular}} web pages used JavaScript. The most common use of JavaScript {{is to add}} {{client-side}} behavior to HTML pages, also known as <b>Dynamic</b> <b>HTML</b> (DHTML). Scripts are embedded in or included from HTML pages and interact with the Document Object Model (DOM) of the page. Some simple examples of this usage are: ...|$|E
2500|$|Microsoft script {{technologies}} including VBScript and JScript {{were released}} in 1996. JScript, a reverse-engineered implementation of Netscape's JavaScript, {{was part of}} Internet Explorer 3. [...] JScript was also available for server-side scripting in Internet Information Server. Internet Explorer 3 also included Microsoft's first support for CSS and various extensions to HTML, but in each case the implementation was noticeably different to that found in Netscape Navigator at the time. These differences {{made it difficult for}} designers and programmers to make a single website work well in both browsers, leading to the use of [...] "best viewed in Netscape" [...] and [...] "best viewed in Internet Explorer" [...] logos that characterized these early years of the browser wars. JavaScript began to acquire a reputation for being one of the roadblocks to a cross-platform and standards-driven Web. Some developers took on the difficult task of trying to make their sites work in both major browsers, but many could not afford the time. With the release of Internet Explorer 4, Microsoft introduced the concept of <b>Dynamic</b> <b>HTML,</b> but the differences in language implementations and the different and proprietary Document Object Models remained and were obstacles to widespread take-up of JavaScript on the Web.|$|E
50|$|QF-Test from Quality First Software is a {{cross-platform}} {{software tool}} for the GUI test automation specialized on Java/Swing, SWT, Eclipse plug-ins and RCP applications, Java applets, Java Web Start, ULC and cross-browser test automation of static and <b>dynamic</b> web-based applications (<b>HTML</b> and AJAX frameworks like ExtJS, GWT, GXT, RAP, Qooxdoo, RichFaces, Vaadin, PrimeFaces, ICEfaces and ZK). Version 4.0 added Windows support for the Web browser Chrome, support for JavaFX and the AJAX frameworks jQuery UI and jQueryEasyUI were added.|$|R
50|$|Request routing directs client {{requests}} {{to the content}} source best able to serve the request. This may involve directing a client request to the service node that is closest to the client, or to {{the one with the}} most capacity. A variety of algorithms are used to route the request. These include Global Server Load Balancing, DNS-based request routing, <b>Dynamic</b> metafile generation, <b>HTML</b> rewriting, and anycasting. Proximity—choosing the closest service node—is estimated using a variety of techniques including reactive probing, proactive probing, and connection monitoring.|$|R
40|$|CGI scripts enable <b>dynamic</b> {{generation}} of <b>HTML</b> pages. This paper describes {{how to write}} CGI scripts using Tcl. Many people use Tcl for this purpose already but in an ad hoc way and without realizing {{many of the more}} nonobvious benefits. This paper reviews these benefits and provides a framework and examples. Canonical solutions to HTh 4 L quoting problems are presented. This paper also discusses using Tcl for the {{generation of}} different formats from the same document. As an example. FAQ generation in both text and HTML are described...|$|R
2500|$|Version 4 {{released}} in September 1997, was shipped with Windows 95 OSR (OEM Service Release) 2.5, {{and the latest}} beta version of Windows 98 and was modified to integrate more closely with Microsoft Windows. It included an option to enable [...] "Active Desktop" [...] which displayed World Wide Web content on the desktop itself and was updated automatically as the content changed. The user could select other pages for use as Active Desktops as well. [...] "Active Channel" [...] technology was also introduced to automatically obtain information updates from websites. The technology {{was based on an}} XML standard known as Channel Definition Format (CDF), which predated the currently used web syndication formats like RSS. This version was designed to work on Windows 95, Windows 98, and Windows NT, and could be downloaded from the Internet, free of charge. It supported <b>Dynamic</b> <b>HTML</b> (DHTML). Outlook Express 4.0 also came integrated into the browser and replaced the aging Microsoft Internet Mail & News product that was released with previous versions. Version 5 came out in March 1999, following Microsoft's release of Internet Explorer 5.0 Beta versions in late 1998 [...] Bi-directional text, ruby text and direct XML/XSLT support were included in this release, along with enhanced support for CSS Level 1 and 2. The actual release of Internet Explorer 5 happened in three stages. Firstly, a Developer Preview was {{released in}} June 1998 (5.0B1), and then a Public Preview was released in November 1998 (5.0B2). Then in March 1999 the final release was released (5.0). In September it was released with Windows 98. Version 5.0 was the last one to be released for Windows 3.1x or Windows NT 3.x. Internet Explorer 5.5 was later released for Windows Me in July 2000, and included many bug fixes and security patches. Version 5.5 was the last to have Compatibility Mode, which allowed Internet Explorer 4 to be run {{side by side with the}} 5.x. With IE6, there was a quirks mode that could be triggered to make it behave like IE5.5 Version 6 was released with Windows XP on August 27, 2001. It mainly focused on privacy and security features, as they had become customer priorities. Microsoft implemented tools that support P3P, a technology under development by the W3C.|$|E
5000|$|Client-side: Typically JavaScript and <b>dynamic</b> <b>HTML</b> {{pages are}} used to capture keystrokes, {{transmit}} messages to/from the server and display the results in the user's web browser.|$|E
50|$|As {{a program}} manager on the Internet Explorer {{team in the}} mid-1990s, Scott not only defined DHTML but also created the CSS 2-D {{positioning}} specification, many of the form enhancements (e.g., LABEL, FieldSet) helping improve web-based form accessibility and usability, XML Data Islands, and much more. He wrote the original definitive guide to <b>Dynamic</b> <b>HTML,</b> Inside <b>Dynamic</b> <b>HTML,</b> published by Microsoft Press. Scott also invented the iframe html tag. It has been speculated that the tag name stands for the Isaacs Frame, although Scott has denied this.|$|E
25|$|On the PC, {{efforts were}} more {{oriented}} to {{extensions of the}} original terminal concept, with the GUI being described in {{the information on the}} host. One example was the Remote Imaging Protocol, essentially a picture description system, which remained relatively obscure. Probably the ultimate development of this style of operation was the dynamic page implementation of the University of Southern California BBS (USCBBS) by Susan Biddlecomb, which predated the implementation of the <b>HTML</b> <b>Dynamic</b> web page. A complete Dynamic web page implementation was accomplished using TBBS with a TDBS add-on presenting a complete menu system individually customized for each user.|$|R
40|$|This thesis {{work was}} done at NComVA AB (Norrköping Communicative Visual Analytics) a {{spin-off}} company from the Norrköping Visualization Centre at Linköping University. It aims at developing a client-side web application for creating dynamic reports that uses Vislets for storytelling. A WYSIWYG (What You See Is What You Get) page editor that could use Vislets generated by the Statistics Publisher to create dynamic reports is implemented. The focus of the application is allowing the generation of <b>dynamic</b> reports in <b>HTML</b> without requiring any knowledge of HTML. The implemented editor is a client-side web application written in JavaScript using the jQuery library...|$|R
40|$|Use {{the latest}} version of <b>HTML</b> to create <b>dynamic</b> Web pages <b>HTML</b> 5 is the latest {{iteration}} of the standard markup language for creating Web pages. It boasts extensive updates from its predecessor and allows you to incorporate rich media content into a site without any dependence on extra software such as Flash. Packed with hundreds of screen shots, this visual guide introduces you to the many new features and abilities of HTML 5 and shows you the many exciting new possibilities that exist for designing dynamic Web pages. Offers visual learners a solid reference on HTML 5, {{the latest version}} of th...|$|R
5000|$|... iAmaze is an Internet {{company that}} specializes in web {{applications}} created in <b>dynamic</b> <b>HTML.</b> Applications created by the company are designed to run on all browsers and operating systems, without downloads or plug-ins.|$|E
50|$|In {{order to}} {{circumvent}} these pop-up blockers, some online advertisers tried a different method of opening pop-ups, <b>Dynamic</b> <b>HTML,</b> {{which is more}} integral to the functioning of a web-browser and thus harder to block.|$|E
50|$|The {{de facto}} {{client-side}} scripting language for web sites is JavaScript.Using JavaScript on the Document Object Model (DOM) {{leads to the}} method of <b>Dynamic</b> <b>HTML</b> that allows dynamic creation and modification of a web page within the browser.|$|E
5000|$|Typical design {{elements}} of these [...] "Web 1.0" [...] era websites included: Static pages instead of dynamic HTML; content served from filesystems instead of relational databases; pages built using Server Side Includes or CGI {{instead of a}} web application written in a <b>dynamic</b> programming language; <b>HTML</b> 3.2-era structures such as frames and tables to create page layouts; online guestbooks; overuse of GIF buttons and similar small graphics promoting particular items; and HTML forms sent via email. (Support for server side scripting was rare on shared servers so the usual feedback mechanism was via email, using mailto forms and their email program.|$|R
5000|$|Haml (HTML Abstraction Markup Language) is a {{templating}} {{system that}} is designed to avoid writing inline code in a web document and make the HTML easy and clean. Haml gives the flexibility to have some <b>dynamic</b> content in <b>HTML.</b> Similar to other web languages like PHP, ASP, JSP and template systems like eRuby, Haml also embeds some code that gets executed during runtime and generates HTML code in order to provide some dynamic content. In order to run Haml code, files need to have [...]haml extension. These files are similar to [...]erb or eRuby files which also help to embed Ruby code while developing a web application.|$|R
40|$|We {{describe}} {{the implementation of}} interactive medical teaching programs in radiology and histology which utilize the Internet's World Wide Web (WWW). The WWW standard hypertext interface allows for simple navigation between related documents but {{does not provide a}} method for student tracking or question queries. Electronic forms, a recent feature of the WWW, provide the means to present question documents to remote clients and track student performance. A feature of our approach is <b>dynamic</b> creation of <b>HTML</b> documents based upon interaction with database applications. The approach allows multiple simultaneous, yet asynchronous interactions by geographically dispersed students upon the same instructional database and is scalable, providing the capability for multiple image/document servers. The security of the database is assured given that it is not accessible through the Internet...|$|R
5000|$|Hover ads are {{a special}} type of pop-up ads created using <b>Dynamic</b> <b>HTML,</b> JavaScript and similar web browser technologies. Because {{they do not}} scroll with the web page, they appear to [...] "hover" [...] over the page, usually {{obscuring}} the content.|$|E
5000|$|HTML Components (HTCs) are {{a legacy}} {{technology}} used to implement components in script as <b>Dynamic</b> <b>HTML</b> (DHTML) [...] "behaviors" [...] in the Microsoft Internet Explorer web browser. Such files typically use an [...]htc extension and the [...] "text/x-component" [...] MIME type.|$|E
5000|$|P* (pronounced [...] "P-star") is a {{programming}} language meant to be useful in web development for creating <b>dynamic</b> <b>HTML</b> documents. The language provides syntax for templates and prepared SQL-statements. P* programs are scripts which are run by the P* interpreter.|$|E
40|$|The {{computation}} {{of program}} slices on Web applications {{may be useful}} during debugging, when the amount of code to be inspected can be reduced, and during understanding, since {{the search for a}} given functionality can be better focused. The system dependence graph is an appropriate data structure for slice computation, in that it explicitly represents all dependences that have {{to be taken into account}} in slice determination. In this paper the main problems related to the construction of the system dependence graph are considered. With no loss of generality, solutions are presented with reference to the server side programming language PHP and to the client side language Javascript. Most of the difficulties concern event and hyperlink handling, <b>dynamic</b> generation of <b>HTML</b> code, and direct access to HTML elements by client code. An example of Web application is analyzed, supporting the feasibility of the approac...|$|R
40|$|Authoring on the Web with HTML {{allows for}} the {{creation}} of content rich documents containing text, images, sounds, and so forth. The traditional approach for creating documents that can be dynamically adapted to a user's specific needs is Common Gateway Interface (CGI) programming [6]. By using CGI programs written in Perl, for example, you can program `on-the-fly' documents that respond to user demands. Generally speaking, GGI programming requires a detailed knowledge of at least one computer language, so it is therefore not everybody's cup of tea. A second closely related problem faced by many system administrators is how to create and maintain a Web server containing a large number of multilanguage documents. This paper describes a family of `DietWeb' tools that simplify the creation of dynamic documents by moving the programming components of traditional development to authoring of html pages with an extended tag language. Keywords: CGI programming, <b>HTML,</b> <b>Dynamic</b> documents, Interactive documents, virtual environments...|$|R
40|$|In essence, the World Wide Web is a {{worldwide}} string of computer databases using a common information retrieval architecture. With the increasing {{popularity of the}} World Wide Web, more and more functions {{have been added to}} retrieve not only documents written in HTML (Hypertext Markup Language), but also those in other forms through the Common Gateway Interface (CGI), by constructing <b>HTML</b> documents dynamically. <b>Dynamic</b> construction of <b>HTML</b> documents for handling information such as digital libraries is slow and requires much more computer power. A significant performance bottleneck is the initialization and setup phase for a CGI process {{to gain access to the}} system containing the data. In this paper we describe the design and implementation of a Connection Manager Interface on IBM SP systems. The Connection Manager provides cliette processes to serve CGI requests and eliminates such bottlenecks. An IBM SP system is used for this emerging area to show that our design and implementation i [...] ...|$|R
5000|$|UdiWWW {{was criticized}} for lacking many {{advanced}} features like news, FTP, HTML4, <b>Dynamic</b> <b>HTML,</b> support for targeted windows, a [...] "new window" [...] command for launching multiple sessions, client side image mapping, and security. It was also seen to be slow.|$|E
5000|$|An [...] "HTML Application" [...] (HTA) is a Microsoft Windows {{application}} {{written with}} HTML and <b>Dynamic</b> <b>HTML</b> and introduced with IE5. Internet Explorer 5.0 also introduced favicon support and Windows Script Host, which provides scripting capabilities comparable to batch files, {{but with a}} greater range of supported features.|$|E
50|$|The Template Attribute Language (TAL) is a {{templating}} {{language used}} to generate <b>dynamic</b> <b>HTML</b> and XML pages. Its main goal is to simplify the collaboration between programmers and designers. This is achieved by embedding TAL statements inside valid HTML (or XML) tags which can then be worked on using common design tools.|$|E
40|$|Run-time {{generation}} of JavaScript code by Perl CGI programs {{is a technique}} {{that has been used}} with considerable success at the Aerodynamics Laboratory of the Institute for Aerospace Research, National Research Council of Canada. After a brief introduction to the basic concept of dynamic code generation and its role within the data acquisition, data display and test-control software of the 2 m x 3 m wind tunnel, four specific examples will be presented each highlighting a different application of the technique. The first and simplest example will show the {{generation of}} trivial one-line JavaScript programs. The second example will show the run-time generation of JavaScript functions that modify groups of HTML checkbox elements. The third example will cover form validation in the browser, complete with pop-up alert boxes and dynamic images to prompt the user. The final, and most complex case, will show the creation of JavaScript code that produces <b>dynamic</b> behavior in <b>HTML</b> forms. These examples not only demonstrate the primary benefit of the technique – a more interactive user interface – but also show the secondary benefits: reduced load on both the web-server and web-client computers...|$|R
40|$|HTML 5 {{applications}} {{normally have}} a large set of CSS (Cascading Style Sheets) rules for data display. Each CSS rule consists of a node selector (given in an XPath-like query language) and a declaration block (assigning values to selected nodes' display attributes). As web applications evolve, maintaining CSS files can easily become problematic. Some CSS rules {{will be replaced by}} new ones, but these obsolete (hence redundant) CSS rules often remain in the applications. Not only does this "bloat" the applications, but it also significantly increases web browsers' processing time. Most works on detecting redundant CSS rules in HTML 5 applications do not consider the <b>dynamic</b> behaviors of <b>HTML</b> 5 (specified in JavaScript); in fact, the only proposed method that takes these into account is dynamic analysis (a. k. a. testing), which cannot soundly prove redundancy of CSS rules. In this paper, we introduce an abstraction of HTML 5 applications based on monotonic tree-rewriting and study its "redundancy problem". We establish the precise complexity of the problem and various subproblems of practical importance (ranging from P to EXP). In particular, our algorithm relies on an efficient reduction to an analysis of symbolic pushdown systems (for which highly optimised solvers are available), which yields a fast method for checking redundancy in practice. We implemented our algorithm and demonstrated its efficacy in detecting redundant CSS rules in HTML 5 applications. Comment: 50 page...|$|R
40|$|In Mexico, the {{chemicals}} supplying enterprises {{have a hard}} job trying to make its operations planning. The difficulty is created {{by a combination of}} handling a large number of products and changeable consumption patterns of each customer. To simplify the operation planning task of those enterprises, a simplified system was envisaged and programmed. This free access and friendly software gives more accurate sales forecasts than the currently obtained by {{the chemicals}} suppliers. The developed software is written in PHP language (for web development <b>dynamic</b> content) and <b>HTML</b> (for making Web pages) and by the use of XAMPP software (Apache server module), runs on different operating systems. This program applies five quantitative sales forecasting techniques for each marketable product, with continuous error assessment, in order to select case by case, the monthly more accurate prediction method. The proposed system has been already applied in two companies; the first one used simple moving average, as a quantitative technique to predict its sales, and expert opinion as qualitative technique; the second company used trend projection as quantitative, and Delphi Method as qualitative techniques. Both companies consider that a suitable sales prediction is the starting point for good operations planning. For each product it is required to use a different technique, because the behavior of historical sales in each case is different. The proposed system allows identifying the lowes...|$|R
