0|6861|Public
40|$|Heterogeneity in {{persistent}} object systems {{gives rise}} to a range of interoperability problems. For instance, a given object-oriented database (OODB) may contain data objects originally defined, created and persistently stored using the capabilities provided by several distinct programming languages, and an application may need to uniformly process those data objects. We call such a database polylingual and term the corresponding interoperability problem the polylingual access problem. While many of today's OODBs support multiple programming language interfaces (we term such systems multilingual), none provide transparent polylingual access to persistent data. Instead, present day interoperability mechanisms generally rely on <b>external</b> <b>data</b> <b>definition</b> <b>languages</b> (such as ODMG's ODL), thus reintroducing impedance mismatch and forcing developers to anticipate heterogeneity in their applications, or depend upon direct use of such low-level constructs as the foreign language inter [...] ...|$|R
5000|$|The <b>Data</b> <b>Definition</b> <b>Language</b> (DDL) part of DMX {{can be used}} to ...|$|R
5000|$|MDDL, the Market <b>Data</b> <b>Definition</b> <b>Language,</b> is an XML-based {{messaging}} {{format for}} exchanging {{information related to}} ...|$|R
5000|$|<b>Data</b> <b>definition</b> <b>language</b> - defines <b>data</b> types such as creating, altering, or {{dropping}} and {{the relationships}} among them ...|$|R
5000|$|Triggers {{which are}} stored {{procedures}} that fire {{in response to}} Data Manipulation <b>Language</b> (DML) or <b>Data</b> <b>Definition</b> <b>Language</b> (DDL) events, ...|$|R
5000|$|The <b>Data</b> <b>Definition</b> <b>Language</b> (DDL) manages {{table and}} index structure. The most basic items of DDL are the , , , [...] and [...] statements: ...|$|R
40|$|Abstract. In this paper, {{we study}} the {{integration}} of functional logic programming and databases by presenting a data model, and a query and <b>data</b> <b>definition</b> <b>language.</b> The query and <b>data</b> <b>definition</b> <b>language</b> {{is based on the}} use of a set of algebra operators over an extended relational algebra. The algebra expressions built from the extended algebra are used for expressing queries and rules. In addition, algebra expressions can be used for defining functions, typical in a functional logic program. ...|$|R
50|$|Like SQL, it {{supports}} a <b>data</b> <b>definition</b> <b>language,</b> <b>data</b> manipulation language and a data query language, all three with SQL-like syntax.Whereas SQL statements operate on relational tables, DMX statements operate on data mining models.Similarly, SQL Server supports the MDX language for OLAP databases. DMX {{is used to}} create and train data mining models, and to browse, manage, and predict against them. DMX is composed of <b>data</b> <b>definition</b> <b>language</b> (DDL) statements, <b>data</b> manipulation language (DML) statements, and functions and operators.|$|R
50|$|A <b>data</b> <b>definition</b> <b>language</b> or <b>data</b> {{description}} language (DDL) is a syntax {{similar to a}} computer programming language for defining data structures, especially database schemas.|$|R
50|$|Like most query languages, D4 has a <b>Data</b> <b>Definition</b> <b>Language</b> (DDL) and a Data Manipulation Language (DML). D4 {{also has}} an Imperative Language for {{procedural}} code.|$|R
5000|$|The {{following}} <b>Data</b> <b>Definition</b> <b>Language</b> (DDL) query {{creates an}} AutoNumber {{field with a}} start value and an increment:CREATE TABLE Table1 ( [...] Field1 COUNTER (beginning_number, increment_number), ...); ...|$|R
5000|$|By using a <b>Data</b> <b>Definition</b> <b>Language</b> (DDL), it is able {{to define}} base {{relation}} variables. In SQL, [...] syntax is used to define base tables. The following is an example.|$|R
5000|$|The <b>Data</b> <b>Definition</b> <b>Language</b> (DDL) is {{also used}} to define derived {{relation}} variables. In SQL, [...] syntax is used to define a derived relation variable. The following is an example.|$|R
50|$|Second, FLOW-MATIC was {{the first}} system to {{distinctly}} separate the description of data from the operations on it. Its <b>data</b> <b>definition</b> <b>language,</b> unlike its executable statements, was not English-like; rather, data structures were defined by filling in pre-printed forms.|$|R
50|$|The {{operations}} for which privileges may be granted to or revoked from a user or role apply {{to both the}} <b>Data</b> <b>definition</b> <b>language</b> (DDL) and the Data manipulation language (DML), and may include CONNECT, SELECT, INSERT, UPDATE, DELETE, EXECUTE, and USAGE.|$|R
50|$|The Versant Object Database enables {{developers}} using {{object oriented}} languages to transactionally store their information {{by allowing the}} respective language to act as the <b>Data</b> <b>Definition</b> <b>Language</b> (DDL) for the database. In other words, the memory model is the database schema model.|$|R
5000|$|Development DBAs: {{focus on}} the logical and {{development}} aspects of database administration such as data model design and maintenance, DDL (<b>data</b> <b>definition</b> <b>language)</b> generation, SQL writing and tuning, coding stored procedures, collaborating with developers to help choose the most appropriate DBMS feature/functionality and other pre-production activities.|$|R
5000|$|While programmers {{can readily}} embed Data Manipulation Language (DML) {{statements}} directly into PL/SQL code using straightforward SQL statements, <b>Data</b> <b>Definition</b> <b>Language</b> (DDL) requires more complex [...] "Dynamic SQL" [...] {{statements in the}} PL/SQL code. However, DML statements underpin the majority of PL/SQL code in typical software applications.|$|R
40|$|This chapter {{discusses}} {{aspects of}} DBMS implementation. Section 1 describes an efficient algorithm {{for the implementation}} of semantic databases. Section 2 addresses questions of transaction handling, including the enforcement of integrity constraints, backup and recovery, and concurrency control. Section 3 addresses issues of <b>data</b> <b>definition</b> <b>languages</b> and <b>data</b> dictionaries...|$|R
50|$|In SQL, the '''''' {{statement}} is a <b>Data</b> <b>Definition</b> <b>Language</b> (DDL) operation {{that marks the}} extents of a table for deallocation (empty for reuse). The result of this operation quickly removes all data from a table, typically bypassing a number of integrity enforcing mechanisms. It was officially introduced in the SQL:2008 standard.|$|R
40|$|Data {{elements}} and relationship definition capabilities for this data management system are explicitly {{tailored to the}} needs of engineering and scientific computing. System design was based upon studies of data management problems currently being handled through explicit programming. The system-defined data element types include real scalar numbers, vectors, arrays and special classes of arrays such as sparse arrays and triangular arrays. The data model is hierarchical (tree structured). Multiple views of data are provided at two levels. Subschemas provide multiple structural views of the total data base and multiple mappings for individual record types are supported {{through the use of a}} REDEFINES capability. The <b>data</b> <b>definition</b> <b>language</b> and the <b>data</b> manipulation language are designed as extensions to FORTRAN. Examples of the coding of real problems taken from existing practice in the <b>data</b> <b>definition</b> <b>language</b> and the <b>data</b> manipulation language are given...|$|R
40|$|The Database Environment for Vision Research (DEVR) is an entityoriented {{scientific}} database {{system based}} on a hierarchical relational data model (HRS). This paper describes the design {{and implementation of the}} <b>data</b> <b>definition</b> <b>language,</b> the application programmer's interface, and the query mechanism of the DEVR system. DEVR provides a dynamic <b>data</b> <b>definition</b> <b>language</b> for modeling image and vision data, which can be integrated with existing image processing and vision applications. Schema definitions can be fully interleaved with data manipulation, without requiring recompilation. In addition, DEVR provides a powerful application programmer's interface that regulates data access and schema definition, maintains indexes, and enforces type safety and data integrity. The system supports multi-level queries based on recursive constraint trees. A set of HRS entities of a given type is filtered through a network of constraints corresponding to the parts, properties, and relations of that type [...] ...|$|R
40|$|Semantic {{database}} {{models have}} shown the importance and utility of arbitrary user-de ned relationships to define the semantics of database information. Object-oriented models have developed a strong paradigm {{for the expression of}} individual database entities. The SORAC project is developing a paradigm which merges the strengths of these two models. The SORAC data model extends the object-oriented data model to allow the relationships between objects to be modeled within the object-oriented paradigm. This thesis describes the design of the SORAC data model and a <b>data</b> <b>definition</b> <b>language</b> based on that model. The <b>data</b> <b>definition</b> <b>language</b> is automatically mapped to a database implementation which is supported by the SORAC database management system (SDBMS). The SDBMS has been implemented through extensions to a commercial object-oriented database system, the Ontos Object Database Management System. The SORAC data model specifically addresses the problem of the enforce...|$|R
50|$|DBAs (database administrators) {{and other}} users {{interfaced}} with the IDD using a <b>language</b> called <b>Data</b> Dictionary <b>Definition</b> <b>Language</b> (DDDL).|$|R
50|$|Database {{design is}} the process of {{producing}} a detailed data model of database. This data model contains all the needed logical and physical design choices and physical storage parameters needed to generate a design in a <b>data</b> <b>definition</b> <b>language,</b> which can then be used to create a database. A fully attributed data model contains detailed attributes for each entity.|$|R
40|$|It is {{proposed}} that the EXPRESS <b>data</b> <b>definition</b> <b>language,</b> {{which is part of}} the ISO STEP/PDES standard for engineering data exchange, should be used in the formulation of standard entity types to be usedin computer aided control engineering. Examples of how EXPRESS can be used to define entity types suitable for representing linear and nonlinear models are given...|$|R
40|$|Introduction Database {{systems and}} {{knowledge}} representation systems represent and reason about {{some aspect of}} the real world. In both it is common to separate the two functions of representation, i. e. describing the conceptual scheme and the actual data, and computation, i. e. answering of queries and manipulation of data. The database management system of a database system provides a <b>data</b> <b>definition</b> <b>language</b> to describe the conceptual scheme. The <b>data</b> <b>definition</b> <b>language</b> is used to describe the database in terms of a data model. Operations on the database require a specialized language, called a data manipulation language or query language. One of the most important data models is the relational model which describes {{the world in terms of}} atomic values and relations on the set of all atomic values. Data manipulation languages of the relational model comprise the relational algebra, and the domain and tuple relational calculi. The<...|$|R
40|$|The Data Management System- 1100 is {{designed}} to operate {{in conjunction with the}} UNIVAC 1100 Series Operating System on any 1100 Series computer. DMS- 1100 is divided into the following four major software components: (1) <b>Data</b> <b>Definition</b> <b>Languages</b> (DDL); (2) <b>Data</b> Management Routine (DMR); (3) Data Manipulation Languages (DML); and (4) Data Base Utilities (DBU). These software components are described in detail...|$|R
50|$|Originally {{based upon}} {{relational}} algebra and tuple relational calculus, SQL {{consists of a}} <b>data</b> <b>definition</b> <b>language,</b> <b>data</b> manipulation language, and data control language. The scope of SQL includes data insert, query, update and delete, schema creation and modification, and data access control. Although SQL is often described as, and {{to a great extent}} is, a declarative language (4GL), it also includes procedural elements.|$|R
40|$|Abstract Functional logic {{programming}} is a paradigm which integrates functional and {{logic programming}}. It {{is based on}} the use of rewriting rules for defining programs, and rewriting for goal solving. In this context, goals, usually, consist of equality (and, sometimes, inequality) constraints, which are solved in order to obtain answers, represented by means of substitutions. On the other hand, database programming languages involve a data model, a <b>data</b> <b>definition</b> <b>language</b> and, finally, a query language against the data defined according to the data model. To use functional logic programming as a database programming language, (1) we will propose a data model involving the main features adopted from functional logic programming (for instance, handling of partial and infinite data), (2) we will use conditional rewriting rules as <b>data</b> <b>definition</b> <b>language,</b> and finally, (3) we will deal with equality and inequality constraints as query language. Moreover, as most database systems, (4) we will propose an extended relational calculus and algebra, which can be used as alternative query languages in this framework. Finally, (5) we will prove that three alternative query languages are equivalent...|$|R
50|$|Configuration {{management}} is a detailed recording of versions and updates {{that have been}} applied to any system. Configuration {{management is}} useful in rolling back updates and changes which have impacted the system in a negative manner. To ensure that any updates made in database refactoring can be rolled back, {{it is important to}} maintain database artifacts like <b>data</b> <b>definition</b> <b>language</b> scripts, <b>data</b> model files, reference data, stored procedures, etc. in a configuration management system.|$|R
40|$|OLOG {{is a novel}} {{deductive}} database system for advanced intelligent information system applications. It directly supports eective storage, efficient access and inference of large amount of persistent data with complex structures. It provides a SQL-like <b>data</b> <b>definition</b> <b>language</b> and <b>data</b> manipulation language, and a declarative rule-based query language. It combines {{the best of the}} deductive, object-oriented, and object-relational approaches in a uniform framework. This paper describes the design and implementation of the OLOG system...|$|R
5000|$|Data {{manipulation}} language {{comprises the}} SQL data change statements, which modify stored data {{but not the}} schema or database objects. Manipulation of persistent database objects, e.g., tables or stored procedures, via the SQL schema statements, rather than the data stored within them, {{is considered to be}} part of a separate <b>data</b> <b>definition</b> <b>language.</b> In SQL these two categories are similar in their detailed syntax, data types, expressions etc., but distinct in their overall function.|$|R
5000|$|The {{corresponding}} <b>Data</b> <b>Definition</b> <b>Language</b> {{statement is}} as follows. CREATE TABLE Supplier ( [...] SupplierNumber INTEGER NOT NULL, Name VARCHAR(20) NOT NULL, Address VARCHAR(50) NOT NULL, Type VARCHAR(10), CONSTRAINT supplier_pk PRIMARY KEY(SupplierNumber), CONSTRAINT number_value CHECK (SupplierNumber > 0) [...] ) CREATE TABLE Invoices ( [...] InvoiceNumber INTEGER NOT NULL, SupplierNumber INTEGER NOT NULL, Text VARCHAR(4096), CONSTRAINT invoice_pk PRIMARY KEY(InvoiceNumber), CONSTRAINT inumber_value CHECK (InvoiceNumber > 0), CONSTRAINT supplier_fk FOREIGN KEY(SupplierNumber) REFERENCES Supplier(SupplierNumber) ON UPDATE CASCADE ON DELETE RESTRICT [...] ) ...|$|R
50|$|Databases can be disk {{resident}}, memory resident or a hybrid. In {{the first}} case, all access to disk resident structures (both data or data index information), happens through an in-memory data cache {{maintained by the}} database server sub-system. Alternatively, the application can define database structures to reside in memory. An application can also define a database with mixed disk-based or memory-resident data structures. The <b>data</b> <b>definition</b> <b>language</b> of the engine supports mixing different storage types for any data structure.|$|R
40|$|This memo defines an Experimental Protocol for the Internet community. It {{does not}} specify an Internet {{standard}} of any kind. Discussion {{and suggestions for}} improvement are requested. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2004). All Rights Reserved. This memo defines the base SMIng (Structure of Management Information, Next Generation) language. SMIng is a <b>data</b> <b>definition</b> <b>language</b> that provides a protocol-independent representation for management information. Separate RFCs define mappings of SMIng to specific management protocols, including SNMP...|$|R
