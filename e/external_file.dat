117|314|Public
2500|$|Gary Marshall of TechRadar commented in 2016 that [...] "Where Office {{tries to}} do {{everything}} imaginable, Google's suite is much more basic. That said, it's much more powerful {{than it was when}} the package debuted in 2006, but the emphasis on simplicity and speed remains." [...] Marshall wrote that [...] "We wouldn't want to craft a massive, complicated manuscript in Docs, but then that isn't what Docs is designed to do. It's a fast and user-friendly way to create everyday documents and to share them with colleagues and clients", and that fellow service Google Sheets [...] "covers the most common Excel functions [...] but doesn't have the power of Microsoft's offering". Marshall praised collaboration for being [...] "effortless", and praised importing of <b>external</b> <b>file</b> formats and making those editable and collaborative for being a [...] "big selling point". PC Magazines Eric Grevstad wrote that [...] "what's online is what you get", adding that [...] "configuring them to [...] is a rigmarole". He stated that the package was [...] "an illustration of software's version of the 80/20 rule [...] 80 percent of users will never need more than 20 percent of the features". He stated that [...] "comparing [...] to Office 2016 is like bringing a handgun to a cannon fight [...] Microsoft's PC-based suite is designed to have almost every feature anyone might ever need; Google's online suite is designed to have most features most people use daily." [...] Tom's Hardwares James Gaskin wrote that [...] "like most Google products, it can claim the cleanest and most minimal interface in the market", and [...] "No other suite except Office 365 can get close to the ease of collaboration Google provides. And even Microsoft's product trails by a wide margin as changes only appear in real-time in Word 2016, not the other apps". Conclusively, he wrote: [...] "The progress made between the first Google App release and now has been considerable. As the world moves to more and more mobile computing, Google has a distinct advantage. But tradition dies hard, and those who build more than basic documents, spreadsheets, and presentations will remain tied to their desktops and laptops for the time being." ...|$|E
50|$|Parcels are <b>external</b> <b>file</b> {{representations}} of packages.|$|E
5000|$|... color syntax {{highlighting}} (using regular expressions in an <b>external</b> <b>file)</b> ...|$|E
5000|$|The second new {{mechanism}} is [...] "path randomization", which executes application bundles from a random, hidden path and {{prevents them from}} accessing <b>external</b> <b>files</b> relative to their location. To avoid this, the developer has to distribute the application bundle and its <b>external</b> <b>files</b> on a signed disk image or in a signed installer package. The user can avoid this mechanism by moving the application bundle without its <b>external</b> <b>files</b> to a new location.|$|R
50|$|Data {{stored in}} <b>external</b> <b>files</b> {{can be viewed}} using browsers for {{convenient}} visualization.|$|R
50|$|Non-advancing I/O is for <b>external</b> <b>files,</b> {{and is not}} {{available}} for list-directed I/O.|$|R
50|$|The file {{must be an}} <b>external</b> <b>file</b> and list-directed {{formatting}} and non-advancing I/O areunavailable.|$|E
5000|$|... {{read from}} an <b>external</b> <b>file</b> the color- and video-attribute {{information}} into a chained hash table, ...|$|E
50|$|<b>External</b> <b>file</b> groups {{retrieve}} {{items from}} a remote URL on the Internet {{or from a}} local file.|$|E
50|$|Base64 is used {{to encode}} binary files such as images within scripts, to avoid {{depending}} on <b>external</b> <b>files.</b>|$|R
5000|$|It {{allows the}} {{possibility}} of keeping the CA private key, or other private keys, in <b>external</b> <b>files</b> or devices (as USB drives) ...|$|R
25|$|AcroForms {{can keep}} form field values in <b>external</b> {{stand-alone}} <b>files</b> containing key:value pairs. The <b>external</b> <b>files</b> may use Forms Data Format (FDF) and XML Forms Data Format (XFDF) files. The usage rights (UR) signatures define rights for import form data files in FDF, XFDF and text (CSV/TSV) formats, and export form data files in FDF and XFDF formats.|$|R
5000|$|... <b>{{external}}</b> <b>file</b> templates: Template content can {{be loaded}} from external files using compile time splice calls as $(expr).|$|E
5000|$|Any {{extension}} {{can be used}} in the <b>external</b> <b>file,</b> for example, the [...]pde extension used by the Processing language sketch files.|$|E
5000|$|A [...] {{element is}} {{declared}} inside the body, with a [...] attribute, specifying {{the location of}} an <b>external</b> <b>file</b> holding the Processing code: ...|$|E
50|$|It {{was written}} {{completely}} in Delphi, it {{is composed of}} a set of units that can be compiled into an executable, eliminating the need to distribute any <b>external</b> <b>files.</b>|$|R
50|$|In September 2015, {{security}} researcher Patrick Wardle {{wrote about}} another shortcoming that concerns applications that are distributed with <b>external</b> <b>files,</b> such as libraries or even HTML files that can contain JavaScript. An attacker can manipulate those files and through them exploit a vulnerability in the signed application. The application and its <b>external</b> <b>files</b> {{can then be}} redistributed, while leaving the original signature of the application bundle itself intact. As Gatekeeper does not verify such individual files, the security can be compromised. With path randomization and signed disk images, Apple provided mechanisms to mitigate this issue in macOS Sierra.|$|R
5000|$|... 2. The {{object in}} a test library cannot be moved {{unilaterally}} into production. It must be compiled in the library associated with the <b>external</b> <b>files</b> (unlike System Support Program, Control Program Facility libraries contain data files.) ...|$|R
50|$|But {{in modern}} browsers, the {{functionality}} of layers {{is provided by}} using an absolutely-positioned , or, for loading the content from an <b>external</b> <b>file,</b> an IFrame.|$|E
50|$|Mass storage {{was either}} via {{cassette}} tape, floppy disk, or an <b>external</b> <b>file</b> server. The cassette interface operated at either 300 bit/s or 1200 bit/s.|$|E
5000|$|The example {{might be}} read as only color-files like blue.php and red.php could be loaded, while attackers might provide [...] causing PHP to load the <b>external</b> <b>file.</b>|$|E
50|$|The {{first new}} {{mechanism}} allows developers to code-sign disk images {{that can be}} verified as a unit by the system. This allows developers to guarantee the integrity of <b>external</b> <b>files</b> that are distributed alongside the application bundle on the same disk image. An attacker could infect these <b>external</b> <b>files</b> with malicious code and with them exploit a vulnerability in the application, without having to break the signature of the application bundle itself. By signing the disk image, the developer can prevent tampering and force an attacker to repackage the files onto a new disk image, requiring a valid developer certificate to pass Gatekeeper without a warning.|$|R
50|$|To use {{machine-readable}} terms {{from any}} controlled vocabulary, web designers {{can choose from}} a variety of annotation formats, including RDFa, HTML5 Microdata, or JSON-LD in the markup, or RDF serializations (RDF/XML, Turtle, N3, TriG, TriX) in <b>external</b> <b>files.</b>|$|R
50|$|Fortran is case-insensitive. The {{convention}} of writing Fortran keywords in upper case {{and all other}} names in lower case is adopted in this article; except, by way of contrast, in the input/output descriptions (Data transfer and Operations on <b>external</b> <b>files).</b>|$|R
5000|$|The {{statement}} {{is used to}} connect an <b>external</b> <b>file</b> to a unit,create a file that is preconnected, or create a file and connect it to aunit.The syntax is ...|$|E
5000|$|... @file nodes {{represent}} external files, {{files on}} the computer's file system {{other than the}} outline file. When saving an outline Leo automatically writes all changed @file trees back to the external files. Comments, called sentinel lines, in external files represent the outline structure. When Leo reads an outline, these comments allow Leo to recreate @file trees using only the data in the <b>external</b> <b>file.</b> @auto nodes represent external files without using sentinel comments. When reading @auto nodes, Leo uses the program structure of the <b>external</b> <b>file</b> to create the @auto tree.|$|E
5000|$|Unlike predecessors, RPG III uses <b>external</b> <b>file</b> descriptions, {{which means}} that disk files are built and RPG III {{programs}} are attached to them at compile time. Some other noteworthy changes from RPG II include: ...|$|E
50|$|Web pages {{typically}} {{load and}} require additional {{content in the}} form of images, scripts, font and other <b>external</b> <b>files.</b> Web development tools also allow developers to inspect resources that are loaded and available on the web page in a tree-structure listing.|$|R
25|$|Normally all image {{content in}} a PDF is {{embedded}} in the file. But PDF allows image data to be stored in <b>external</b> <b>files</b> by the use of external streams or Alternate Images. Standardized subsets of PDF, including PDF/A and PDF/X, prohibit these features.|$|R
25|$|Components {{are called}} by {{assigning}} their calls to named component instances. Names cannot be re-used {{within a single}} workflow. There are special components for input <b>files</b> that include <b>external</b> <b>files</b> to the script. Supported atomic types are integer, float, boolean and string, and typing is done implicitly.|$|R
5000|$|Cryptographic {{signatures}} : Every changeset {{is stored}} with a hash to prevent accidental corruption. Using an <b>external</b> <b>file</b> signing program (such as GnuPG or another PGP client), these hashes can also optionally be signed, preventing unauthorized modification if the archive is compromised.|$|E
5000|$|Keywords {{are stored}} with the {{pictures}} (using IPTC metadata), making their exchange easier: When sending a picture, its associated keywords are also sent. This method of storing information offers a certain durability of data since keywords are {{not dependent on}} an <b>external</b> <b>file.</b>|$|E
5000|$|The GEDCOM {{standard}} {{supports the}} inclusion of multimedia objects (for example, photos of individuals). [...] Such multimedia objects can be either included in the GEDCOM file itself (called the [...] "embedded form") or in an <b>external</b> <b>file</b> where {{the name of the}} <b>external</b> <b>file</b> is specified in the GEDCOM file (called the [...] "linked form"). Embedding multimedia directly in the GEDCOM file makes transmission of data easier, in that all of the information (including the multimedia data) is in one file, but the resulting file can be enormous. Linking multimedia keeps the size of the GEDCOM file under control, but then when transmitting the file, the multimedia objects must either be transmitted separately or archived together with the GEDCOM into one larger file. Support for embedding media directly was dropped in the draft 5.5.1 standard.|$|E
50|$|The C {{standard}} {{distinguishes between}} multibyte encodings of characters, which use a {{fixed or variable}} number of bytes to represent each character (primarily used in source code and <b>external</b> <b>files),</b> from wide characters, which are run-time representations of characters in single objects (typically, greater than 8 bits).|$|R
5000|$|The Metadata Encoding and Transmission Standard, {{supported}} and {{maintained by the}} Library of Congress for describing file aggregations, uses simple XLinks in pointing to file locations as well as linkbases which describe relationships among <b>external</b> <b>files</b> (though these restrict [...] and [...] attributes to type IDREF instead of NMTOKEN).|$|R
50|$|Apache Pivot {{supports}} all JSR 223 scripting languages to script the BXML files. It is {{even possible}} {{to create an}} entire Pivot application without any compiled code at all. The script fragments can either be placed inside certain tags directly inside a BXML <b>file,</b> or in <b>external</b> <b>files</b> which get included during runtime.|$|R
