1|18|Public
30|$|The {{arithmetic}} coding decoder recovers {{a message from}} an interval [a, b), where 0 < a, b < 1, through a procedure {{similar to that of}} the encoder. The decoder begins with the unit half-open interval [0.0,  1.0) and divides it into the same subintervals as the encoder. The first symbol is recovered by locating the subinterval in which the <b>destination</b> <b>interval</b> [a, b) resides. The subinterval is further divided in the same manner to recover the subsequent symbols. The procedure terminates when the current interval is equal to [a, b). for details about {{arithmetic coding}}, we refer the readers to [20, 26].|$|E
5000|$|Several local {{passenger}} trains also run from Lohardaga to neighbouring <b>destinations</b> on frequent <b>intervals.</b>|$|R
50|$|Several {{electrified}} {{local passenger}} trains also run from Ambikapur to neighbouring <b>destinations</b> at frequent <b>intervals.</b>|$|R
5000|$|Several {{electrified}} {{local passenger}} trains also run from Ranchi to neighbouring <b>destinations</b> on frequent <b>intervals.</b> Following {{is a list}} of all the trains passing from Namkon Station (as of 24 April 2012) ...|$|R
5000|$|Several {{electrified}} {{local passenger}} trains also run from Ranchi to neighbouring <b>destinations</b> on frequent <b>intervals.</b> The following is the sortable table {{of all the}} trains passing from Tatisilwai Station.(as on 24 April 2012) ...|$|R
50|$|Koderma Station's {{location}} on the Grand Chord, makes it served by numerous express and superfast trains {{from all over the}} country. Several electrified local passenger trains also run from Koderma to neighbouring <b>destinations</b> at regular <b>intervals.</b>|$|R
50|$|Patna Junction {{railway station}} {{is a major}} station of the East Central Railways. Its {{location}} on the Delhi Kolkata rail route, makes Patna Junction served by several express and superfast trains {{from all over the}} country. Several electrified local passenger trains also run from Patna to neighbouring <b>destinations</b> on frequent <b>intervals.</b>|$|R
5000|$|The {{station is}} a calling {{point on the}} Enterprise express service, which {{operates}} between [...] and [...] These trains call at Newry for both <b>destinations</b> at two-hour <b>intervals</b> throughout the day. The station experiences favourable passenger numbers from this service.There are also four trains to and from Bangor, operated by Northern Ireland Railways.|$|R
50|$|Dhanbad is {{the second}} {{profitable}} division after Mumbai to Indian Railway in terms of revenue generation {{although there is no}} direct train to major indian cities and passenger facilities.Dhanbad Junction's location on the Delhi Kolkata Grand chord route, makes it served by numerous express and superfast trains from all over the country. Several electrified local passenger trains also run from Dhanbad to neighbouring <b>destinations</b> at regular <b>intervals.</b>|$|R
40|$|This paper {{describes}} a monitoring framework for large scale data management systems with frequent data access. The proposed framework {{describes a}} method for generating meaningful information from collected tracing data that allows the data management system to be queried on demand for specific user usage patterns in respect to source and <b>destination</b> locations, period <b>intervals,</b> and other searchable parameters. The feasibility of such a system at the petabyte scale is demonstrated by describing the implementation and operational experience of a real world management information system for the ATLAS experiment employing the proposed framework. Our observations suggest that the proposed user monitoring framework is capable of scaling {{to meet the needs}} of very large data management systems...|$|R
40|$|Consider a {{communication}} network with a source, a relay and a <b>destination.</b> Each time <b>interval,</b> the source may dynamically choose between a few possible coding schemes, based on the channel state, traffic pattern and its own queue status. For example, the source may choose between a direct route to the destination and a relay-assisted scheme. Clearly, due to {{the difference in the}} performance achieved, as well as the resources each scheme uses, a sender might wish to choose the most appropriate one based on its status. In this work, we formulate the problem as a Semi-Markov Decision Process. This formulation allows us to find an optimal policy, expressed {{as a function of the}} number of packets in the source queue and other parameters. In particular, we show a general solution which covers various configurations, including different packet size distributions and varying channels. Furthermore, for the case of exponential transmission times, we analytically prove the optimal policy has a threshold structure, that is, there is a unique value of a single parameter which determines which scheme (or route) is optimal. Results are also validated with simulations for several interesting models. Comment: This paper was replaced by arXiv: 1610. 0559...|$|R
50|$|Gaya Junction's {{location}} on the Delhi Kolkata Grand chord route, makes it served by numerous express and superfast trains {{from all over the}} country. Gaya Junction is the second most important railway station in Bihar after Patna and second largest in terms of platforms after Patna Jn. It is a junction and is connected to all the major cities such as New Delhi, Kolkata, Mumbai and Chennai through important broad gauge routes (direct trains). Now it is also directly connected to Guwahati (N-E India). There is a direct train, Mahabodhi Express from New Delhi to Gaya daily.Another air conditioned train Garib rath has been added from Gaya to Anand bihar Jn (Delhi),which runs weekly.There are direct trains from Gaya to important stations in India like Delhi, Kolkata, Chennai,Kamakhya - Guwahati, Ranchi, Parasnath(Shikharji), Bokaro, Varanasi, Lucknow, Kota, Kanpur, Allahabad, Agra, Bareilly, Mathura, Jabalpur, Bhopal, Indore, Nagpur, Mumbai, Pune, Puri, Ahmedabad, Jodhpur, Amritsar, Dehradun, Kalka, Jammu, Gwalior, Dehradun, Jamshedpur(Tatanagar), Bhuvaneshwar, etc. Several electrified local passenger trains also run from Gaya to neighbouring <b>destinations</b> at regular <b>intervals.</b> Gaya Patna daily bond passenger train also plays a very essential role in city. The train starts from Gaya Junction to Patna Junction via Bela, Chakand, Jehananbad, Makhdoompur.|$|R
40|$|Network-on-chip (NoC) traffic {{patterns}} are essential tools for NoC performance assessment and architecture exploration. The fidelity of NoC {{traffic patterns}} has profound influence on NoC studies. Random traffic patterns use probability distributions to randomize on-chip communication traffic characteristics, such as packet <b>destination</b> and transmission <b>interval.</b> Configuring parameters properly for random traffic requires comprehensive {{knowledge of the}} corresponding realistic traffic patterns, {{and it is in}} general hard to truly reflect realistic traffic characteristics. On the other hand, realistic traffic patterns are based on the behaviors of real applications, and they can provide more accurate performance and power consumption results, and more comprehensive information to improve NoC architectures. We provide a NoC traffic benchmark suite for efficient NoC-based multiprocessor system-on-chip (MPSoC) evaluations. The publicly released MCSL NoC benchmark suite includes a set of realistic traffic patterns for seven real-world applications and covers popular NoC architectures, and can be downloaded from [1]. It captures both the communication behaviors in NoCs and the temporal dependencies among them. Each traffic pattern in MCSL has two versions, a recorded traffic pattern (RTP) and a statistical traffic pattern (STP). The former provides detailed communication traces for comprehensive NoC studies, while the latter helps to accelerate NoC explorations at the cost of accuracy. The propose...|$|R
40|$|Abstract: Even with MPP {{architectures}} {{moving towards}} larger nodes with more powerful pro-cessors, communication delay remains {{a critical factor}} in application performance. We examine the use of scheduled or off-line routing to provide large-scale parallel computers with efficient com-munication. Off-line algorithms enable nearly 100 % wire utilization, priority ordering of packets, and extremely efficient switching. Moreover, optimal schedules are known for many of the most time-consuming communication tasks, the ones that dominate a number of grand challenge codes. Communication tasks executing under these optimal schedules have excellent complexity indepen-dent of the number of processors. They also often have the property that elements arrive at their <b>destinations</b> at regular <b>intervals,</b> typically averaging one element per cycle per node. This allows computation to be chained with communication with the result that communication contributes only trivially to computation time. This is {{in stark contrast to the}} actual timings that are obtained on current multicomputers where communication dominates. We show here that these results di-minish by only small factors even after accounting for realistic wire delay, pin bandwidth, pin-out, switching latency, and network dimensionality. We also present a preliminary comparison with an on-line network showing that the performance improvement—not including chaining—is a factor of between 4 and 13 for small networks, depending on implementation and configuration. ...|$|R
40|$|Many {{complicated}} {{parallel computing}} applications {{are composed of}} several stages. As the program proceeds from one stage to another, it may require different distribution of data between several processor sets. Such applications are the alternate direction implicit method [29] and the multidimensional Fast Fourier Transform [40], [44], [45]. Data redistribution is therefore required each time the distribution of data to a processor is improper for a certain execution phase [68]. Since the redistribution must be completed during runtime, an efficient algorithm must be adopted. The interest in runtime redistribution was initially motivated by High Performance Fortran (HPF), a parallel programming language [15], [39]. Programs developed in HPF use the ALIGN, DISTRIBUTE and REDISTRIBUTE directives to specify data redistributions [38]. The array redistribution in High Performance Fortran has three types, Block, Cyclic, and Block Cyclic [30], [31], [63]. The block-cyclic array redistribution is the most regular among {{the three types of}} redistribution [17]. The block cyclic array redistribution with block size x is referred to as cyclic(x). Each block contains x successive elements. In this dissertation, we consider the problem of redistributing data form cyclic (r) on a P-processor grid to cyclic (s) on a Q-processor grid. Two algorithms were developed for the redistribution of messages on a multiprocessor grid; the RCI algorithm is applied to redistribute messages of fixed length, while the RPIPE algorithm is applied to redistribute messages of variable length. In either case, the main goal is to reduce the total Par. rthma 146 redistribution time. The rest of the dissertation is organized as follows: In chapter 2, the main criteria for performance evaluation of a parallel algorithm are presented. Furthermore the differences between static and dynamic parallel algorithms are brought to the fore. Chapter 3 defines the block-cyclic redistribution. The propositions found in this chapter are the basis of the algorithms for dynamically passing messages between various processor sets. Furthermore, the most important algorithms found in literature are presented and compared. These algorithms are divided into two categories; Efficient Communication Scheduling Algorithms and Non-Efficient -Communication Scheduling Algorithms. Chapter 4 presents the two algorithms in detail. The RCI (Row-Column Interchange) Algorithm for exchanging fixed messages on a grid of processors is based on a series of an array’s column transformations proven to lead to a free of contention communication scheme. This array represents the processors’ communication grid. Two methods for massage transfering were developed; the direct method where messages from each processor are directly tranfered to the destination, and the indirect method that uses relay processors to complete the transmission. As the message size increases, the indirect method performs better. The basic idea behind the RPIPE method is to decompose the redistribution problem into a set of pipeline operations. Each pipeline includes a specified number of tasks which are responsible for the message exchanging between carefully selected processor pairs. The main identities of all the tasks in each pipeline operation are: 1. Each pipeline task handles the transmission of processor pairs that have a certain transmission cost. A pipeline operation cannot include two or more tasks that handle message transmissions of the same cost 2. All tasks are scheduled {{in such a way that}} all sending processors can initialize send requests to multiple <b>destinations</b> at time <b>intervals</b> which are infinitesimally Par. rthma 147 small, thus reducing the time that processors remain idle, 3. All tasks are scheduled in such a way that receiving processors get one message at a time, thus avoiding congestion. The redistribution of data is composed of three stages: a. The creation of the pipeline tasks stage, b. The message preparation stage, and c. the sending stage. These stages are described in chapter 4. Chapter 5 describes the development of MPL routines for perfoming message passing. The routines were written in MODSIM and were implemented on a simulated IBM SP 2 system. A variety of simulation results on different redistribution parameters is also presented. Chapter 6 concludes the dissertation and suggests future research aspects. ...|$|R

