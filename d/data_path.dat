1337|1549|Public
2500|$|Optimally, {{the memory}} {{bandwidth}} afforded should match the bandwidth of the FSB, {{that is to}} say that a CPU with a 533MT/s rated bus speed should be paired with RAM matching the same rated speed, for example DDR2 533, or PC2-4200. A common myth is that installing interleaved RAM will offer double the bandwidth. However, at most the increase in bandwidth by installing interleaved RAM is roughly 5–10%. The [...] used by all NetBurst processors as well as current and medium-term (pre-QuickPath) Core 2 processors provide a 64-bit <b>data</b> <b>path.</b> Current chipsets provide for a couple of either DDR2 or DDR3 channels.|$|E
50|$|The base ZPU has a 32-bit <b>data</b> <b>path.</b> The ZPU {{also has}} a variant with a 16-bit-wide <b>data</b> <b>path,</b> to save even more logic.|$|E
5000|$|Clients are {{management}} {{software applications}} that can reside virtually anywhere within a network, provided {{they have a}} communications link (either within the <b>data</b> <b>path</b> or outside the <b>data</b> <b>path)</b> to providers.|$|E
40|$|Abstractג Clock {{distribution}} networks synchronize {{the flow}} of data signals among synchronous <b>data</b> <b>paths.</b> The design of these networks can dramatically affect system-wide performance and reliability. A theoretical background of clock skew is provided {{in order to better}} understand how clock distribution networks interact with <b>data</b> <b>paths.</b> Minimum and maximum timing constraints are developed from the relative timing between the localized clock skew and the <b>data</b> <b>paths...</b>|$|R
40|$|Abstract—Extracting <b>data</b> <b>paths</b> in {{large-scale}} register-transfer level designs {{has important}} usage in automatic veri-fication of synchronous circuits and synthesis of asynchronous circuits. Current tools rely on users {{to provide the}} data/control partition or use state-space analyses to extract <b>data</b> <b>paths.</b> Due to the explosion of state-space, the latter method {{can be used in}} only small designs. To resolve this problem, a graphic search and trim method, which can extract <b>data</b> <b>paths</b> in large scale designs, is presented. A design is first translated into a graphic representation, namely a signal-level data flow graph (DFG), to reveal the connections between signals. By estimating the types (control or data) of these connections, a linear search algorithm can then remove all control-related signals in the graph, which effectively produces a DFG with pure <b>data</b> <b>paths.</b> Results show that this method extracts <b>data</b> <b>paths</b> of large scale designs in seconds. I...|$|R
25|$|<b>Data</b> <b>paths</b> are {{typically}} {{the areas of}} your design where multiple bits are processed in parallel with each bit being modified {{the same way with}} maybe some influence from adjacent bits. Example structures that make up <b>data</b> <b>paths</b> are Adders, Subtractors, Counters, Registers, and Muxes.|$|R
5000|$|A900 - Provides pipelined <b>data</b> <b>path,</b> 3MIPS, 500kFLOPS, ECC memory. Codename MAGIC ...|$|E
5000|$|Optimization of {{bit width}} of digital <b>data</b> <b>path</b> (according to the dynamic ranges of signal) {{can reduce the}} area, cost, and power {{consumption}} of digital circuits and systems while improving their performance. Optimal bit width of digital <b>data</b> <b>path</b> is the smallest bit width that can satisfy the required signal-to-noise ratio and avoid overflow at the same time.|$|E
5000|$|... lower HyperTransport speed (800 MHz Bi-Directional, 16 bit <b>data</b> <b>path,</b> up and downstream) ...|$|E
40|$|Abstract: In this paper, {{we present}} an {{original}} test synthesis approach for <b>data</b> <b>paths</b> of VLIW based processors. Our {{approach is a}} library-based method, in which together with components, canned tests are stored. The aim of our approach is to synthesize <b>data</b> <b>paths</b> and corresponding test sets in parallel...|$|R
5000|$|The IBM System/360 has a 32-bit {{architecture}} with 16 general-purpose registers, {{but most}} of the System/360 implementations actually use hardware that implemented a much simpler underlying microarchitecture; for example, the System/360 Model 30 has 8-bit <b>data</b> <b>paths</b> to the arithmetic logic unit (ALU) and main memory and implemented the general-purpose registers in a special unit of higher-speed core memory, and the System/360 Model 40 has 8-bit <b>data</b> <b>paths</b> to the ALU and 16-bit <b>data</b> <b>paths</b> to main memory and also implemented the general-purpose registers in a special unit of higher-speed core memory. The Model 50 has full 32-bit <b>data</b> <b>paths</b> and implements the general-purpose registers in a special unit of higher-speed core memory. [...] The Model 65 through the Model 195 have larger <b>data</b> <b>paths</b> and implement the general-purpose registers in faster transistor circuits. In this way, microprogramming enabled IBM to design many System/360 models with substantially different hardware and spanning a wide range of cost and performance, while making them all architecturally compatible. This dramatically reduces the number of unique system software programs that must be written for each model.|$|R
40|$|Symbolic {{state space}} {{traversal}} techniques are best on control-dominated circuits, not on <b>data</b> <b>paths.</b> This paper extends their applicability to regular structures {{commonly found in}} <b>data</b> <b>paths</b> by using auxiliary variables to decompose and to manipulate Boolean functions in decomposed form. Experimental results demonstrate the gain {{both in terms of}} binary decision diagram (BDD) size and CPU tim...|$|R
5000|$|Audio Front End: the <b>data</b> <b>path</b> for {{converting}} stereo audio from {{an audio}} source; ...|$|E
5000|$|The I/O {{system for}} the B1000 series {{consisted}} of a 24-bit <b>data</b> <b>path</b> and control strobes {{to and from the}} peripherals. The CPU would place data on the <b>data</b> <b>path,</b> then inform the peripheral that data was present. Many of the peripheral adapters were fairly simplistic, and the CPU actually drove the adapter state machines through their operations with successive accesses.|$|E
5000|$|Merging {{the delay}} {{elements}} forms the <b>data</b> <b>path</b> between the functional elements in transformed DFG.|$|E
30|$|Testing the {{obtained}} <b>path</b> model against <b>data</b> (<b>paths</b> imply {{a structure}} to the covariance matrix).|$|R
5000|$|... 1993: Atari {{introduces}} the Atari Jaguar video game console, which includes some 64-bit wide <b>data</b> <b>paths</b> in its architecture.|$|R
5000|$|... #Caption: The {{position}} of NVMe <b>data</b> <b>paths</b> and multiple internal queues within various {{layers of the}} Linux kernel's storage stack.|$|R
5000|$|Voice Front End: the <b>data</b> <b>path</b> for {{converting}} analog {{speech to}} and from digital speech; ...|$|E
50|$|The Direct ControlPoOps feature {{provides}} six external {{signal lines}} and an 8-bit <b>data</b> <b>path</b> to/from storage.|$|E
5000|$|Performance (speed) of {{asynchronous}} circuits may {{be reduced}} in architectures that require input-completeness (more complex <b>data</b> <b>path).</b>|$|E
40|$|Abstract-We {{present a}} {{scalable}} and topologically-aware application-layer multicast approach, specially designed for large-scale distributed applications. The proposed approach constructs topologically-aware <b>data</b> <b>paths</b> {{which are based}} on topological clustering of multicast group members. The approach does not require any exact network topology information, but instead requires the relative location information of members using landmarks. We partition the members into topologically-aware clusters based on the ordering of their close landmarks. We hierarchically arrange the clusters and separate <b>data</b> <b>paths</b> into two types (i. e., insidecluster path and outside-cluster path) to exclude outsider nodes, not belonging to the same cluster, from the inside-cluster paths. Our results on performance evaluation show that constructing topologically-aware <b>data</b> <b>paths</b> can reduce unnecessary high latency and redundant network resource usage with low overhead over existing scalable approaches. I...|$|R
40|$|A {{strategy}} {{to enhance the}} speed and power characteristics of an industrial circuit is demonstrated in this paper. It is shown that nonzero clock skew scheduling can improve circuit performance while relaxing the strict timing constraints of the critical <b>data</b> <b>paths</b> within a high speed system. A software tool implementing a nonzero clock skew scheduling algorithm is described together with a methodology that generates the required clock signal delays. Furthermore, a technique that significantly reduces the power dissipated in the noncritical <b>data</b> <b>paths</b> is demonstrated. The application of this technique combined with nonzero clock skew scheduling to the slower <b>data</b> <b>paths</b> is also described. Speed improvements of up to 18 % and power savings greater than 80 % are achieved in certain functional blocks of an industrial high performance microprocessor...|$|R
5000|$|The clock {{frequency}} is doubled from 25 MHz to 50 MHz, while the <b>data</b> <b>paths</b> are narrowed to 2 bits rather than 4 bits.|$|R
50|$|Finally, {{we could}} {{reconstruct}} the <b>data</b> <b>path</b> with fewer delay element and switching {{element in the}} folded design.|$|E
50|$|The <b>data</b> <b>path</b> is {{the core}} of the MIC-1. It {{contains}} 32-bit registers, buses, an ALU and a shifter.|$|E
50|$|In {{reconfigurable}} computing and in supercomputing {{these terms}} {{refer to the}} <b>data</b> <b>path</b> width. The use of about one bit wide processing elements like the configurable logic blocks (CLBs) in an FPGA is called fine-grained computing or fine-grained reconfigurability, whereas using wide data paths, such as, for instance 32 bits wide resources, like microprocessor CPUs or data-stream-driven <b>data</b> <b>path</b> units (DPUs) like in a reconfigurable datapath array (rDPA) is called coarse-grained computing or coarse-grained reconfigurability.|$|E
40|$|On-chip power {{dissipation}} {{has become a}} fundamental design issue in high performance integrated circuits. A technique to significantly reduce the power dissipated in the non-critical <b>data</b> <b>paths</b> of an industrial circuit is demonstrated. The application of this technique with non-zero clock skew scheduling to the slower <b>data</b> <b>paths</b> is also described. Simulation results demonstrating the application of this technique to certain functional blocks of a high performance microprocessor are presented. A greater than 80 % power savings is achieved in specific circuit blocks...|$|R
40|$|We {{address the}} problem of control {{synthesis}} for pipelined <b>data</b> <b>paths.</b> Two basic control schemes are possible: datastationary and time-stationary. In this work, we consider the latter approach. We developed an approach to automatically synthesize time-stationarycontrollers for pipelined <b>data</b> <b>paths</b> produced by high level synthesis tools. A highly optimized FSM controller is implemented using either PLAs or Standard Cells. We compared our approach to published work on FSM generation and optimization and the results indicate large savings in total controller area...|$|R
50|$|Recent {{experimental}} {{vector processors}} with variable-width <b>data</b> <b>paths</b> also show profitable increases in operations per: second (speed), area (lower cost), and watt (longer battery life).|$|R
5000|$|Baseband Front End: the <b>data</b> <b>path</b> for {{converting}} {{a digital}} signal {{to and from}} an analog signal from the RF modules; ...|$|E
50|$|The {{original}} transputer used a {{very simple}} and rather unusual architecture to achieve a high performance in a small area. It used microcode as the principal method of controlling the <b>data</b> <b>path</b> but unlike other designs of the time, many instructions took only a single cycle to execute. Instruction opcodes were used as the entry points to the microcode ROM and the outputs from the ROM were fed directly to the <b>data</b> <b>path.</b> For multi-cycle instructions, while the <b>data</b> <b>path</b> was performing the first cycle, the microcode decoded four possible options for the second cycle. The decision as to which of these options would actually be used could be made {{near the end of}} the first cycle. This allowed for very fast operation while keeping the architecture generic.|$|E
5000|$|... #Caption: Top side of J-11 {{microprocessor}} hybrid. DC335 control chip on left, DC334 <b>data</b> <b>path</b> chip on right. US dime for scale.|$|E
25|$|Vista {{does not}} degrade or refuse to play any {{existing}} media, CDs or DVDs. The protected <b>data</b> <b>paths</b> are only activated if protected content requires it.|$|R
40|$|This paper {{presents}} {{the design of}} an optically interconnected multiprocessor. The design is oriented to applications where the performance isbandwidth limited inconventional multiprocessors. The system utilizes board-level polymer waveguides to reduce manufacturing costs. The processor interconnection network, called Gemini, has a Banyan topology and is composed of dual optical and electronic networks. The optical <b>data</b> <b>paths</b> (circuit switched) are used for passing large data blocks and the matched electrical <b>data</b> <b>paths</b> (packet switched) are used forcontrol of the optical interconnect and for short data messages. ...|$|R
5000|$|... {{areas are}} {{clustered}} {{in order to}} limit <b>data</b> <b>paths</b> thus frequently featuring defined structures such as cache RAM, multiplier, barrel shifter, line driver and arithmetic logic unit; ...|$|R
