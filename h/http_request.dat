290|519|Public
25|$|By default IIS 5.1 {{and earlier}} run {{websites}} {{in a single}} process running {{the context of the}} System account, a Windows account with administrative rights. Under 6.0 all request handling processes run {{in the context of the}} Network Service account, which has significantly fewer privileges, so that should there be a vulnerability in a feature or in custom code it won't necessarily compromise the entire system given the sandboxed environment these worker processes run in. IIS 6.0 also contained a new kernel HTTP stack (http.sys) with a stricter <b>HTTP</b> <b>request</b> parser and response cache for both static and dynamic content.|$|E
25|$|Web {{crawlers}} typically {{identify themselves}} to a Web server by using the User-agent field of an <b>HTTP</b> <b>request.</b> Web site administrators typically examine their Web servers' log and use the user agent field to determine which crawlers have visited the web server and how often. The user agent field may include a URL where the Web site administrator may find out {{more information about the}} crawler. Examining Web server log is tedious task, and therefore some administrators use tools to identify, track and verify Web crawlers. Spambots and other malicious Web crawlers are unlikely to place identifying information in the user agent field, or they may mask their identity as a browser or other well-known crawler.|$|E
2500|$|A Web browser {{is by far}} {{the most}} common host {{environment}} for JavaScript. Web browsers typically create [...] "host objects" [...] to represent the DOM in JavaScript. The Web server is another common host environment. A JavaScript Web server would typically expose host objects representing <b>HTTP</b> <b>request</b> and response objects, which a JavaScript program could then interrogate and manipulate to dynamically generate Web pages.|$|E
40|$|Energy is {{important}} for mobile apps. Among all operations of mobile apps, making <b>HTTP</b> <b>requests</b> {{is one of the}} most energy consuming. However, there is not sufficient work in optimizing the energy consumption of <b>HTTP</b> <b>requests</b> in mobile apps. In our previous study, we found that making small <b>HTTP</b> <b>requests</b> was not energy efficient. Yet, we did not study how to optimize the energy of <b>HTTP</b> <b>requests.</b> In this paper, we make a preliminary study to bundle sequential <b>HTTP</b> <b>requests</b> with a proxy server. With our technique, we had a 50 % energy saving for <b>HTTP</b> <b>requests</b> in two market Android apps. This result indicates that our technique is promising and we will build on the result in our future work...|$|R
5000|$|Support {{for reading}} and writing <b>HTTP</b> <b>requests</b> and {{responses}} asynchronously.|$|R
5000|$|The Snap monad for {{stateful}} {{access to}} <b>HTTP</b> <b>requests</b> and responses.|$|R
2500|$|When {{data that}} has been entered into HTML forms is submitted, the names and values in the form {{elements}} are encoded {{and sent to the}} server in an <b>HTTP</b> <b>request</b> message using GET or POST. Historically, an email transport was also used. The default mime type, Internet media type application/x-www-form-urlencoded, is based on a very early version of the general URI percent-encoding rules, with a number of modifications such as newline normalization and replacing spaces with [...] "+" [...] instead of [...] "%20". Another possible encoding, Internet media type multipart/form-data, is also available and is common for POST-based file submissions.|$|E
2500|$|Internet Explorer has {{introduced}} a number of extensions to the DOM that have been adopted by other browsers. These include the innerHTML property, which provides access to the HTML string within an element the XMLHttpRequest object, which allows the sending of <b>HTTP</b> <b>request</b> and receiving of HTTP response, and {{may be used to}} perform AJAX; and the designMode attribute of the contentDocument object, which enables rich text editing of HTML documents [...] Some of these functionalities were not possible until the introduction of the W3C DOM methods. Its Ruby character extension to HTML is also accepted as a module in W3C XHTML 1.1, though it is not found in all versions of W3C HTML.|$|E
5000|$|Direct <b>HTTP</b> <b>request</b> data: {{directly}} {{comes from}} <b>HTTP</b> <b>request</b> messages (<b>HTTP</b> <b>request</b> headers).|$|E
5000|$|Web servers can reject <b>HTTP</b> <b>requests</b> with an unrecognized Host header.|$|R
5000|$|It tricks the user's browser into sending <b>HTTP</b> <b>requests</b> to {{a target}} site.|$|R
50|$|When specifying URIs, {{for example}} as URLs in <b>HTTP</b> <b>requests,</b> non-ASCII {{characters}} must be percent-encoded.|$|R
5000|$|The [...] {{method of}} [...] class dispatches {{requests}} to the methods , , , , and so on; {{according to the}} <b>HTTP</b> <b>request.</b> In the example below [...] is overridden and does not distinguish which <b>HTTP</b> <b>request</b> method it serves.|$|E
5000|$|Typically, a microframework {{facilitates}} {{receiving an}} <b>HTTP</b> <b>request,</b> routing the <b>HTTP</b> <b>request</b> {{to the appropriate}} controller, dispatching the controller, and returning an HTTP response. Microframeworks are often specifically designed for building the APIs for another service or application. [...] For example, Lumen microframework is designed for Microservices development and API development.|$|E
5000|$|WikipediaFS is {{implemented}} in Python {{and uses the}} FUSE kernel module. The file system works by lazily downloading and uploading article sourcetexts [...] - [...] only sending HTTP requests to the selected site when a file is accessed. (Reading a file corresponds to a GET <b>HTTP</b> <b>request,</b> writing to a POST <b>HTTP</b> <b>request.)</b> ...|$|E
5000|$|Configure {{sources for}} Events (for example via <b>HTTP</b> <b>requests,</b> from databases, or from other software) ...|$|R
5000|$|... mod_proxy {{can help}} to improve LAMP {{security}} [...] or to strip SSL from <b>HTTP</b> <b>requests.</b>|$|R
2500|$|HTTP Vocabulary in RDF, which {{specifies}} how <b>HTTP</b> <b>requests</b> {{and responses}} {{can be expressed}} in RDF ...|$|R
5000|$|The {{requester}} {{asks for}} a resource, in a conventional <b>HTTP</b> <b>request.</b>|$|E
5000|$|... mod_replace - allows editing of HTML body, <b>HTTP</b> <b>request</b> and {{response}} headers ...|$|E
50|$|A JSON Web Token (JWT) is a {{self-contained}} packet {{of information that}} can be used to store user identity and authenticity information. This allows them to be used in place of session cookies. Unlike cookies, which are automatically attached to each <b>HTTP</b> <b>request</b> by the browser, JWTs must be explicitly attached to each <b>HTTP</b> <b>request</b> by the web application.|$|E
5000|$|Apache HTTP Server {{using the}} ARM 4.0 Modul mod_arm4. All <b>HTTP</b> <b>requests</b> are {{measured}} using ARM.|$|R
5000|$|HTTP Vocabulary in RDF, which {{specifies}} how <b>HTTP</b> <b>requests</b> {{and responses}} {{can be expressed}} in RDF ...|$|R
40|$|Network traces are {{a useful}} tool in {{understanding}} how users navigate the web. Knowing the sequence of pages that led a user {{to arrive at a}} malicious website can help researchers develop techniques to prevent users from reaching such sites. Nevertheless, inferring sound causation between <b>HTTP</b> <b>requests</b> is a challenging task. Previous work often inferred these relationships without proper calibration. We present here methods for and considerations when inferring causation relationships between <b>HTTP</b> <b>requests.</b> We also introduce causation trees and terminology needed to model causal relationships between <b>HTTP</b> <b>requests.</b> Finally, we describe Gretel, our system that infers causation relationships, how we calibrated it, and our results on a sample control data set where ground truth was available. ...|$|R
5000|$|The servlet may {{read data}} {{that has been}} {{provided}} in the <b>HTTP</b> <b>request.</b>|$|E
5000|$|If Mallory {{successfully}} tricks Alice into visiting , this <b>HTTP</b> <b>request</b> {{is sent to}} : ...|$|E
5000|$|The <b>HTTP</b> <b>request</b> is {{received}} by the web server and forwarded to the servlet container.|$|E
5000|$|The [...] package {{provides}} special IO routines for networks, allowing <b>HTTP</b> <b>requests,</b> as well {{as other}} common transactions.|$|R
5000|$|... 2007 [...] "Showing {{that the}} time web sites take to respond to <b>HTTP</b> <b>requests</b> can leak private information." ...|$|R
5000|$|SSH commands, <b>HTTP</b> <b>requests,</b> Heroku CLI, Docker image {{build and}} push to {{registry}} (Docker Hub, Amazon ECR, private registry) ...|$|R
5000|$|The {{query string}} and fields on an HTML form that are {{available}} from an <b>HTTP</b> <b>request.</b>|$|E
50|$|Crafting an <b>HTTP</b> <b>request</b> defines how {{an actual}} user would behave based on {{parameters}} {{defined in the}} request.|$|E
50|$|CGI proxies use {{a script}} {{running on a}} web server to perform the {{proxying}} function. A CGI proxy client sends the requested url embedded within the data portion of an <b>HTTP</b> <b>request</b> to the CGI proxy server. The CGI proxy server pulls the ultimate destination information from the data embedded in the <b>HTTP</b> <b>request,</b> sends out its own <b>HTTP</b> <b>request</b> to the ultimate destination, and then returns the result to the proxy client. A CGI proxy tool's security can be trusted {{as far as the}} operator of the proxy server can be trusted. CGI proxy tools require no manual configuration of the browser or client software installation, but they do require that the user use an alternative, potentially confusing browser interface within the existing browser.|$|E
5000|$|... fphttpclient unit {{provides}} {{class to}} send <b>http</b> <b>requests</b> and retrieve its responses. It implements all available HTTP 1.1 methods.\ ...|$|R
50|$|Static {{and dynamic}} web pages can be {{retrieved}} by posting <b>HTTP</b> <b>requests</b> to the remote web server using socket programming.|$|R
5000|$|The servlet {{remains in}} the container's address space and is {{available}} to process any other <b>HTTP</b> <b>requests</b> received from clients.|$|R
