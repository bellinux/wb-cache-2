66|222|Public
25|$|This {{typically}} {{contains two}} copies (may vary) of the <b>File</b> <b>Allocation</b> <b>Table</b> {{for the sake}} of redundancy checking, although rarely used, even by disk repair utilities.|$|E
25|$|CHKDSK and UNDELETE in MS-DOS 5.0 have a bug {{which can}} corrupt data: If the <b>file</b> <b>allocation</b> <b>table</b> of a disk uses 256 sectors, running CHKDSK /F can cause data loss and running UNDELETE can cause {{unpredictable}} results. This normally affects disks with {{a capacity of}} approximately a multiple of 128 MB. This applies to CHKDSK.EXE and UNDELETE.EXE bearing April 9, 1991 datestamp. This bug was fixed in MS-DOS 5.0a.|$|E
25|$|Examples of {{partition}} mapping scheme include Master boot record (MBR) and GUID Partition Table (GPT). Examples of data structures {{stored on}} disk to retrieve files include the <b>File</b> <b>Allocation</b> <b>Table</b> (FAT) in the DOS file system and inodes in many UNIX file systems, {{as well as}} other operating system data structures (also known as metadata). As a consequence, not all the space on an HDD is available for user files, but this system overhead is usually small compared with user data.|$|E
50|$|Invocational {{media are}} {{communication}} technologies based on digital computers. Invocational media infrastructures assign names (or addresses) to given entities (e.g. web pages with URLs, variables in programming, disk sectors with <b>file</b> <b>allocation</b> <b>tables),</b> and perform events {{to call up}} these named entities from invocable domains on demand (e.g. an HTTP request, a subroutine execution, a read or write to a hard disk).|$|R
5000|$|The casino {{computer}} virus is a malicious virus that upon running the infected file, copies the <b>File</b> <b>Allocation</b> <b>Tables</b> (FATs) to random-access memory (RAM), then deletes the FAT {{from the hard}} disk. It challenges the user to a game of Jackpot of which they have 5 credits to play with, hence the name. No matter if they win or lose, the computer shuts down, thereby making them have to reinstall their DOS. The message it shows when it challenges you read(s): ...|$|R
5000|$|EGABTR (EGA for {{enhanced}} graphics adapter), sometimes pronounced [...] "Eggbeater", was a Trojan horse {{program that}} achieved {{some level of}} notoriety in the late 1980s and early 1990s. Allegedly a graphics utility that would {{improve the quality of}} an EGA display, it actually was malware that deleted the <b>file</b> <b>allocation</b> <b>tables</b> on the hard drive. This deletion was accompanied by a text message reading [...] "Arf! Arf! Got you!". Coverage about this virus has translated in languages such as German, Chinese and Indonesian. Various sources disagree as to the exact wording.|$|R
25|$|The name of {{the file}} system {{originates}} from the file system's prominent usage of an index table, the <b>File</b> <b>Allocation</b> <b>Table,</b> statically allocated {{at the time of}} formatting. The table contains entries for each cluster, a contiguous area of disk storage. Each entry contains either the number of the next cluster in the file, or else a marker indicating end of file, unused disk space, or special reserved areas of the disk. The root directory of the disk contains the number of the first cluster of each file in that directory; the operating system can then traverse the FAT table, looking up the cluster number of each successive part of the disk file as a cluster chain {{until the end of the}} file is reached. In much the same way, sub-directories are implemented as special files containing the directory entries of their respective files.|$|E
2500|$|The <b>File</b> <b>Allocation</b> <b>Table</b> (FAT) is a {{contiguous}} {{number of}} sectors {{immediately following the}} area of reserved sectors. It represents a list of entries that map to each cluster on the volume. Each entry records one of five things: ...|$|E
2500|$|MS-DOS, for example, used {{a simple}} <b>File</b> <b>Allocation</b> <b>Table</b> (FAT). The FAT has an entry for each disk block, and that entry {{identifies}} whether its block {{is used by}} a file and if so, which block (if any) is the next disk block of the same file. So, the allocation of each file is represented as a linked list in the table. In order to find the disk address of file block , the operating system (or disk utility) must sequentially follow the file's linked list in the FAT. Worse, to find a free disk block, it must sequentially scan the FAT. For MS-DOS, {{that was not a}} huge penalty because the disks and files were small and the FAT had few entries and relatively short file chains. In the FAT12 filesystem (used on floppy disks and early hard disks), there were no more than 4,080 [...] entries, and the FAT would usually be resident in memory. As disks got bigger, the FAT architecture began to confront penalties. On a large disk using FAT, {{it may be necessary to}} perform disk reads to learn the disk location of a file block to be read or written.|$|E
40|$|Abstract- Cloud {{computing}} offers massive scalability, immediate availability, and {{low cost}} services as major benefits, {{but as with}} most new technologies, it introduces new risks and vulnerabilities too. Despite the fact that different cloud structures and services are expanding, the cloud computing penetration {{has not been as}} envisioned. Some specific concerns have stopped enterprises from completely joining the cloud. One of the major disadvantages of using cloud computing is its increased security risks. In this study I conduct an in depth analyses of the different aspects of security issues in cloud computing and propose a file distribution model as a possible solution to alleviate those security risks. It also shows the effectiveness of the new security model as compared with those currently being used. I present, a new file storage system with variable size chunks, distributed chunk addressing, decentralized <b>file</b> <b>allocation</b> <b>tables...</b>|$|R
40|$|Cloud {{computing}} offers massive scalability, immediate availability, and {{low cost}} services as major benefits, {{but as with}} most new technologies, it introduces new risks and vulnerabilities too. Despite the fact that different cloud structures and services are expanding, the cloud computing penetration {{has not been as}} envisioned. Some specific concerns have stopped enterprises from completely joining the cloud. One of the major disadvantages of using cloud computing is its increased security risks. In this study I conduct an in depth analyses of the different aspects of security issues in cloud computing and propose a file distribution model as a possible solution to alleviate those security risks. It also shows the effectiveness of the new security model as compared with those currently being used. I present, a new file storage system with variable size chunks, distributed chunk addressing, decentralized <b>file</b> <b>allocation</b> <b>tables,</b> spread deciphering key, randomly selected file servers, and fault tolerant chunk system.   M. S...|$|R
40|$|This {{project is}} about data {{communication}} between two PCs through serial ports. One PC {{acts as a}} SERVER. The other PC, called the REQUESTER, can {{gain access to the}} SERVER's hard disk by making it (the SERVER's hard disk) an extra drive on the REQUESTER's system. This is done through a program packet that consists of a block-device driver (a program that handles data input/output between the operating system and an external device), and a TSR (a terminate-and-stay-resident program). The block-device driver is a program which creates a RAM disk by allocating a 64 KB of the REQUESTER's RAM and maps onto this space the SERVER's disk parameters: the BIOS Parameter Block, the <b>File</b> <b>Allocation</b> <b>Tables</b> (FATs), and the root directory. This information is needed by the REQUESTER's operating system to configure the SERVER's disk. The TSR is a program that resides on the SERVER and performs data input/output specified by commands sent by the block-device driver. This project tries to simulate muti-tasking environment on MS-DOS which is an operating system designed to handle only one task at a time. A user on the REQUESTER can manipulate files on the SERVER while it is doing something else. This is done by switching control between a TSR and the forerunning program...|$|R
2500|$|In 1993, Microsoft {{released}} Windows NT 3.1, {{the first}} version of the newly developed Windows NT operating system. It was not based on DOS and, as a result, was a fully 32-bit operating system, unlike the hybrid 16-bit kernel, 32-bit applications model used in Windows 95, 98 and Me. At the same time, it introduced NTFS, a file system designed to replace the inferior <b>File</b> <b>Allocation</b> <b>Table</b> (FAT) which was used by DOS and the DOS-based Windows operating systems. In 1996, Windows NT 4.0 was released, which included a fully 32-bit version of Windows Explorer written specifically for it, making the operating system work just like Windows 95. Windows NT was originally designed to be used on high-end systems and servers, however with the release of Windows 2000 (codenamed NT 5.0), many consumer-oriented features from Windows 95 and Windows 98 were included, such as the Windows Desktop Update, Internet Explorer 5, USB support and Windows Media Player. These consumer-oriented features were continued and further extended in Windows XP, which introduced a new theme called Luna, a more user-friendly interface, updated versions of Windows Media Player and Internet Explorer, and extended features from Windows Me, such as the Help and Support Center and System Restore, all while retaining the robustness and stability of Windows 2000's kernel. Windows Vista focused on securing the Windows operating system against computer viruses and other malicious software by introducing features such as User Account Control, while also including many consumer features such as Windows Aero, updated versions of the standard games (Solitaire, etc.) to show off the 3D capabilities of Vista, Windows Movie Maker, and Windows Mail to replace Outlook Express. Despite this, Windows Vista was critically panned for its poor performance on older hardware and its at-the-time high system requirements. Windows 7, as such, was focused on simplifying Windows Vista. Despite technically having higher system requirements, reviewers noted that it ran better than Windows Vista did. Windows 7 also removed many extra features, such as Windows Movie Maker, Windows Photo Gallery and Windows Mail, instead requiring users download a separate Windows Live Essentials to gain those features and other online services. Windows 8 and Windows 8.1, a free upgrade for Windows 8, introduced many controversial features, such as the removal of the Start menu and the introduction of the Start Screen, the removal of the Aero glass interface in favor of a flat, colored interface as well as the introduction of [...] "Metro" [...] apps (later renamed Universal Windows Platform apps) and the Charms Bar user interface element, all of which were criticized.|$|E
5000|$|FAT - <b>File</b> <b>Allocation</b> <b>Table,</b> {{also known}} as: SAT - Sector Allocation Table ...|$|E
50|$|The volume has a bitmap of used blocks. Other than this, {{there is}} no central <b>file</b> <b>allocation</b> <b>table.</b>|$|E
40|$|Recent {{advances}} in wireless communication technology have made dynamic <b>file</b> <b>allocation</b> in mobile networks an important issue. In particular, our objective {{in this paper}} is to provide reliable and real-time information services in mobile computing environments. We have proposed a twophase dynamic <b>file</b> <b>allocation</b> strategy to best satisfy the critical reliability and query response time requirements in distributed mobile database systems. This strategy consists of two phases: 1) periodically generating optimal <b>file</b> <b>allocation</b> via a heuristic algorithm based on the complete system state information and 2) knowledge-based file reallocation based on limited system state change information. Using this strategy, the <b>file</b> <b>allocation</b> can be dynamically reconfigured and adapt to system needs to provide reliable and real-time mobile database services...|$|R
5000|$|SysML <b>allocation</b> <b>tables</b> support common {{kinds of}} allocations. Whereas UML {{provides}} only limited support for tabular notations, SysML furnishes flexible <b>allocation</b> <b>tables</b> that support requirements allocation, functional allocation, and structural allocation. This capability facilitates automated verification and validation (V&V) and gap analysis.|$|R
5000|$|... #Subtitle level 2: Global UHF TV <b>allocation</b> <b>table</b> (605-615 MHz) ...|$|R
5000|$|<b>File</b> <b>Allocation</b> <b>Table</b> (FAT) Sector - {{contains}} {{chains of}} sector indices {{much as a}} FAT does in the FAT/FAT32 filesystems ...|$|E
5000|$|Mirror — a {{tool for}} storing the <b>File</b> <b>Allocation</b> <b>Table</b> to permit {{recovery}} of high-level formatted disks in combination with Unformat ...|$|E
5000|$|FIPS (First {{nondestructive}} Interactive Partition Splitter) [...] - is an MS-DOS {{program for}} non-destructive splitting of <b>File</b> <b>Allocation</b> <b>Table</b> (FAT) hard disk partitions.|$|E
5000|$|Supports both sparse {{files and}} compact <b>file</b> <b>allocation</b> (where pieces are kept {{consolidated}} on disk) ...|$|R
40|$|Abstract—We {{present a}} {{distributed}} algorithm for <b>file</b> <b>allocation</b> that guarantees high assurance, availability, and scalability {{in a large}} distributed file system. The algorithm can use replication and fragmentation schemes to allocate the files over multiple servers. The file confidentiality and integrity are preserved, even {{in the presence of}} a successful attack that compromises a subset of the file servers. The algorithm is adaptive in the sense that it changes the <b>file</b> <b>allocation</b> as the read-write patterns and the location of the clients in the network change. We formally prove that, assuming read-write patterns are stable, the algorithm converges toward an optimal <b>file</b> <b>allocation,</b> where optimality is defined as maximizing the file assurance...|$|R
5000|$|C V Ramamoorthy and Benjamin W Wah. The Isomorphism of Simple <b>File</b> <b>Allocation.</b> IEEE Trans. Computers (...) , 32(3):221-232, 1983.|$|R
50|$|Lost {{clusters}} {{occur when}} a file is deleted from the directory listing, but the <b>File</b> <b>Allocation</b> <b>Table</b> (FAT) still shows the clusters {{allocated to the}} file.|$|E
5000|$|This {{typically}} {{contains two}} copies (may vary) of the <b>File</b> <b>Allocation</b> <b>Table</b> {{for the sake}} of redundancy checking, although rarely used, even by disk repair utilities.|$|E
5000|$|He is {{credited}} with designing and implementing the 8-bit <b>File</b> <b>Allocation</b> <b>Table</b> file system for the NCR 8200 data-entry terminal and Microsoft's Standalone Disk BASIC-80 in 1977.|$|E
5000|$|Virtual <b>Allocation</b> <b>Table</b> a.k.a. VAT (Incremental Writing). Used {{specifically}} for writing to CD-R and (write-once) media ...|$|R
40|$|Abstract-Decentralized {{algorithms}} {{are examined}} for opti-mally distributing a divisible resource in a distributed computer system. In order {{to study this}} problem in a specific context, we consider the problem of optimal <b>file</b> <b>allocation.</b> In this case, the optimization criteria include both the communication cost and average processing delay associated with a file access. Our algorithms have their origins {{in the field of}} mathematical economics. They are shown to have several attractive properties, including their simplicity and distributed nature, the computation of feasible and increasingly better resource allocations as the result of each iteration, {{and in the case of}} <b>file</b> <b>allocation,</b> rapid convergence. Conditions are formally derived under which the algorithms are guaranteed to converge and their convergence behavior is additionally examined through simulation. Index Terms-Distributed algorithms, distributed systems, <b>file</b> <b>allocation,</b> resource allocation, optimization I...|$|R
50|$|All amateur {{satellite}} operations occur within the <b>allocations</b> <b>tabled</b> below, except for AO-7, {{which has an}} up-link from 432.125 MHz to 432.175 MHz.|$|R
50|$|FIPS {{only works}} on primary {{partitions}} that are formatted using the <b>File</b> <b>Allocation</b> <b>Table</b> (FAT) filesystem. Most new machines with Windows pre-installed use NTFS, leaving FIPS obsolete for its intended purpose of resizing existing Windows installations to install Linux. In addition, FIPS cannot grow partitions due to technical limitations with the design, and partitions shrunk with it have some wasted space since {{it does not}} shrink the <b>File</b> <b>Allocation</b> <b>Table.</b> The filesystem to be shrunk must also be defragmented before FIPS is run - since FIPS does not move data, any data {{near the end of}} the partition prevents it from being resized.|$|E
50|$|First {{implementation}} {{to use an}} 8-bit {{variant of}} the <b>File</b> <b>Allocation</b> <b>Table</b> was a BASIC adaptation for an Intel 8080-based NCR 7200, 7520 or 7530 data-entry terminal with 8-inch floppy disks in 1977/1978.|$|E
5000|$|... exFAT (Extended <b>File</b> <b>Allocation</b> <b>Table)</b> is a Microsoft {{file system}} {{optimized}} for flash memory such as USB flash drives and SD cards. It is proprietary and Microsoft owns patents on several elements of its design.|$|E
40|$|Includes bibliographical {{references}} (pages 31 - 33) In this thesis, {{problems are}} considered {{that arise in}} distributed computing environments, such as shared memory multiprocessor systems where memory is physically distributed amongst the processing nodes. Classic results in paging, file migration, <b>file</b> replication, <b>file</b> <b>allocation</b> and distributed paging are presented. In the constrained <b>file</b> <b>allocation</b> with canonical copy problem, the issue that is addressed is which individual nodes should contain copies of pages (or files) of data under the constraints of node memory capacities. In the simplified version of the problem, the additional constraint of restricted activity of an algorithm between requests is imposed. For simplified constrained <b>file</b> <b>allocation</b> with canonical copy, tight bounds for the competitive ratio of online algorithms are presented on uniform networks, trees and arbitrary network topologies. For these topologies, optimal algorithms with a competitive ratio of k, k(d - 1) and kd respectively are given. For constrained <b>file</b> <b>allocation</b> with canonical copy, this thesis presents effcient online algorithms for restricted cases of uniform networks and bus network topologies. On uniform networks, the presented algorithm achieves a competitive ratio of k, whereas on lines with 3 nodes and restricted k = 1 and k = 2 the given algorithms achieve a competitive ratio of 1 : 5 and 3 respectively...|$|R
40|$|Scope and Purpose-The <b>file</b> <b>allocation</b> {{problem to}} {{determine}} the <b>allocation</b> of data <b>files</b> in distributed computer systems has been extensively studied in the literature. This problem {{has been known to}} be complex and challenging because of a variety of design settings. The major objective {{of this paper is to}} present a multiple criteria formulation of the <b>file</b> <b>allocation</b> problem in which design objectives are often in conflict. A computational procedure for the resulting difficult problem is further explored. Abstract-This paper addresses a multiple objective optimization model {{to determine the}} <b>file</b> <b>allocation</b> and query routing assignment in a distributed information system. The problem is formulated as a zero-one integer nonlinear programming problem with multiple objectives. The optimization problem under consideration is shown to be NP-hard. We adopt an iterative improvement procedure, which gives the Pareto optimal solution. We further illustrate our methodology with a small sample system. 1...|$|R
40|$|We {{deal with}} the {{competitive}} analysis of algorithms for managing data in a distributed environment. We {{deal with the}} <b>file</b> <b>allocation</b> problem ([DF], [ML]), where copies of a file may be be stored in the local storage of some subset of processors, copies may be replicated and discarded over time so as to optimize communication costs, but multiple copies must be kept consistent {{and at least one}} copy must be stored somewhere in the network at all times. We deal with competitive algorithms for minimizing communication costs, over arbitrary sequences of reads and writes, and arbitrary network topologies. We define the constrained <b>file</b> <b>allocation</b> problem to be the solution of many individual <b>file</b> <b>allocation</b> problems simultanously, subject to the constraints of local memory size. We give competitive algorithms for this problem on the uniform network topology. We then introduce distributed competitive algorithms for on-line data tracking (a generalization of mobile user tracking [AP 1, AP 4]) and [...] ...|$|R
