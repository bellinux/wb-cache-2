0|201|Public
5000|$|... #Caption: File systems allow {{users and}} {{programs}} {{to organize and}} <b>sort</b> <b>files</b> on a computer, often {{through the use of}} directories (or [...] "folders").|$|R
40|$|You are h ere! 102 4. 1 B+ trees I Here {{we review}} an index {{structure}} which especially shines {{if we need}} to support range selections (and thus <b>sorted</b> <b>file</b> scans) : B+ trees. I B+ trees refine the idea underlying binary search on a <b>sorted</b> <b>file</b> by introducing a high fan-out, multi-level path selection mechanism. I B+ trees provide a balanced index structure that is resistant to data skew and automatically adapts to dynamic inserts and deletes. non−leaf level leaf level (sequence set...|$|R
50|$|File 1 just emptied {{and became}} the new output file. One run is left on each input tape, and merging those runs {{together}} will make the <b>sorted</b> <b>file.</b>|$|R
500|$|Files {{and tables}} are sorted using [...] and the [...] verb merges and <b>sorts</b> <b>files.</b> The [...] verb {{provides}} records to sort and [...] retrieves sorted records in order.|$|R
50|$|While {{the program}} offers basic image-editing tools, it gives various ways to <b>sort,</b> <b>file,</b> and {{annotate}} photos, {{as well as}} some extras like free Flickr and Fotki plug-ins and a Send-to-Mobile feature.|$|R
50|$|The Sort/Merge utility is a {{mainframe}} {{program to}} sort records in a file into a specified order, merge pre-sorted <b>files</b> into a <b>sorted</b> <b>file,</b> or copy selected records. Internally, these utilities use {{one or more}} of the standard sorting algorithms, often with proprietary fine-tuned code.|$|R
40|$|This paper {{introduces}} {{an external}} memory parallel sorting algorithm in a multiprocessor architecture. The overall {{goal is to}} choose p − 1 partitioning elements so that the final p <b>sorted</b> <b>files,</b> one per processor, are of roughly equal size. It first determines a sample of splitters by either regular sampling or random sampling techniques. Then each data file at each processor is separated according to final splitters and sublists are redistributed to appropriate processors. Finally each processor sorts incoming records into runs and merges sorted runs into a fully <b>sorted</b> <b>file.</b> We implemented our algorithm using C and MPI package and tested its performance on both a cluster of SUN Solaries workstations and a Linux cluster CGM 1. The result indicates that regular sampling provides better performance than random sampling does. ...|$|R
40|$|Abstract—In {{the first}} phase of <b>sorting</b> a large <b>file,</b> <b>sorted</b> sequences, called runs, are generated. In the second phase, the runs are merged into a <b>sorted</b> <b>file.</b> The merge time can be much greater than the runs-generation time. Generating longer runs and thus fewer runs in {{the first phase}} may greatly reduce the merge time. In this paper, we present a {{parallel}} algorithm that can utilize the broadcast capability of the IBM SP 2 to generate long runs. The new algorithm has been implemented in C and PVMe. Experimental results show that our algorithm generates longer runs than two earlier algorithms, and is more desirable...|$|R
50|$|Practical {{performance}} of interpolation search {{depends on whether}} the reduced number of probes is outweighed by the more complicated calculations needed for each probe. It can be useful for locating a record in a large <b>sorted</b> <b>file</b> on disk, where each probe involves a disk seek and is much slower than the interpolation arithmetic.|$|R
25|$|During {{the last}} years of Mary's own life, Peter S. Beagle served as one of her trustees, and when Mary died in February 2003 she bequeathed the entire Pangborn estate to him, {{including}} all of Edgar's literary work. Over 50 boxes of manuscripts and papers were moved out to California for <b>sorting,</b> <b>filing,</b> digitizing, and cross-correlating with the papers in the permanent Edgar Pangborn collection held at Boston University.|$|R
40|$|Versatile command-driven data {{management}} system offers users, through simplified command language, {{a means of}} storing and searching data <b>files,</b> <b>sorting</b> data <b>files</b> into specified orders, performing simple or complex computations, effecting file updates, and printing or displaying output data. Commands are simple to use and flexible enough to meet most {{data management}} requirements...|$|R
5000|$|Sometimes, it {{is desired}} to order text with {{embedded}} numbers using proper numerical order. For example, [...] "Figure 7b" [...] goes before [...] "Figure 11a", even though '7' comes after '1' in Unicode. This {{can be extended}} to Roman numerals. This behavior is not particularly difficult to produce as long as only integers are to be sorted, although it can slow down sorting significantly. For example, Microsoft Windows does this when <b>sorting</b> <b>file</b> names.|$|R
50|$|As {{an intern}} at the Centre, she was {{assigned}} to Julian Assange before the Afghan War documents leak. She <b>sorted</b> <b>files</b> about the Iraq War from Assange for future television documentaries. After Daniel Domscheit-Berg left WikiLeaks over a dispute with Assange, Harrison's role in the organisation increased, particularly with the embassy cable publication and Assange's legal fight against Swedish extradition. Harrison is a WikiLeaks section editor. She works with the WikiLeaks Legal Defense led by Baltasar Garzón, and is Julian Assange's closest adviser.|$|R
50|$|Fans {{would have}} to wait until May 1999 for the <b>follow-up</b> album, <b>Sorted.</b> The band {{reformed}} and toured to promote the record; including concert dates in the United States.|$|R
2500|$|Windows Explorer {{includes}} {{significant changes}} from previous versions of Windows {{in terms of}} organization. Column headers are available in all Explorer views and allow filtering, sorting, grouping and stacking. Combined with integrated desktop search, Explorer allows users to find and organize their files in new ways, such as [...] "Stacks". The [...] "Stacks" [...] view groups files according to the criterion specified by the user. Stacks can be clicked to filter the files shown in Windows Explorer. Windows Explorer also <b>sorts</b> <b>files</b> on-the-fly automatically as they are renamed or pasted.|$|R
40|$|I sorted 39 GB for a penny using a cheap {{general purpose}} {{processor}} and two disk drives, running each drive at about 28 MB/s sustained. No special-purpose processors, such as GPUs, were employed for the in-memory {{part of the}} sort. The sort is a general-purpose sort that can compare records of arbitrary size, and does not rely on the keys being uniformly randomly distributed. 1 The Algorithm My sort, called TokuMergeSort, employs a classic a two-step merge sort, {{similar to the one}} used by Gnu Sort [1]. The first step splits the data into small <b>sorted</b> <b>files</b> (sometimes called runs). The second step merges the small <b>sorted</b> <b>files</b> to produce the output. The input file and the final file are stored on one disk, and the temporary files are stored on another disk. TokuMergeSort employs multithreading to keep the different disks busy, and it employs a priority queue to merge hundreds of files in one pass efficiently. In contrast, Gnu Sort is single threaded and uses an inefficient data structure for merging, which means that Gnu Sort requires several passes to merge hundreds of files. Splitting The splitting step repeatedly reads a buffer full of data from the input file into main memory, sorts the buffer in main memory, and then writes the sorted data to a temporary file. At the end of the splitting step TokuMergeSort ha...|$|R
5000|$|The [...] option {{makes the}} program sort {{according}} to numerical value. The [...] command produces output {{that starts with}} a number, the file size, so its output can be piped to [...] to produce a list of <b>files</b> <b>sorted</b> by (ascending) <b>file</b> size:$ du /bin/* | sort -n4 /bin/domainname24 /bin/ls102 /bin/sh304 /bin/csh ...|$|R
40|$|FastSort is an {{external}} sort that uses parallel processing, large main memories and parallel disc accesses to obtain high performance. FastSort can <b>sort</b> a <b>file</b> {{as quickly as}} it can read the input and it can produce the result {{as quickly as it}} can write the target file [...] that is it sorts in linear time rather than the traditional Nlog(N) time of serial sort systems. This paper describes the design and implementation of FastSort. It presents performance measurements of FastSort on various Tandem Nonstop processors, with particular emphasis on the speedup obtained by using parallelism to <b>sort</b> large <b>files...</b>|$|R
40|$|Summary: Tabix is {{the first}} generic tool that indexes {{position}} <b>sorted</b> <b>files</b> in TAB-delimited formats such as GFF, BED, PSL, SAM and SQL export, and quickly retrieves features overlapping specified regions. Tabix features include few seek function calls per query, data compression with gzip compatibility and direct FTP/HTTP access. Tabix is implemented as a free command-line tool {{as well as a}} library in C, Java, Perl and Python. It is particularly useful for manually examining local genomic features on the command line and enables genome viewers to support huge data files and remote custom tracks over networks...|$|R
40|$|Multilevel indexes {{have long}} been used for {{accessing}} records in <b>sorted</b> <b>files.</b> Given the access cost at each level, {{the total cost of}} retrieving a record from the file can be substantially reduced by selecting the proper size of the index at each level. Organizations involving a variable number of levels are covered and binary searching is compared to sequential searching. The literature on the organization of file structures is largely qualitative, rather than quantitative, in nature. A number of books and survey articles give thorough discussions of possible indexed file organization strategies (e. g., Refs. 1 - 4). However, the development of techniques for comparin...|$|R
40|$|In {{the paper}} a {{measuring}} {{system for the}} comparative posture and EMG analysis of office chairs is presented. With the system four specific dynamic office chairs that promote dynamic sitting and therefore aim to prevent musculoskeletal disorders (MSD), were analyzed in comparison to a reference chair in two different standardized tasks (intensive mouse use and <b>sorting</b> <b>files).</b> Exemplary results of the ongoing study suggest that postures and the electrical activities of the erector spinae and trapezius muscles depend more on the tasks performed than {{on the use of}} a particular type of office chair. This still has to be proved by statistical analysis. © Springer-Verlag Berlin Heidelberg 2007...|$|R
5000|$|Perform a 9-way merge {{and store}} the {{result in the}} output buffer. Whenever the output buffer fills, write it to the final <b>sorted</b> <b>file</b> and empty it. Whenever any of the 9 input buffers empties, fill it with the next 10 MB of its {{associated}} 100 MB sorted chunk until no more data from the chunk is available. This is the key step that makes external merge sort work externally -- because the merge algorithm only makes one pass sequentially through each of the chunks, each chunk {{does not have to}} be loaded completely; rather, sequential parts of the chunk can be loaded as needed.|$|R
50|$|Warner {{already had}} a <b>follow-up</b> of <b>sorts</b> - Gold Diggers of 1933 - in {{production}} before the film's release, {{and the success of}} both films permitted a higher budget and more elaborate production numbers in Warner's next follow-up, Footlight Parade.|$|R
40|$|We {{develop a}} {{methodology}} for analyzing {{the performance and}} stability of a server that maintains a multilevel data structure to service a set of access operations for (key, value) records. A subset of the operations executed by the server (e. g., insert and delete) require the multilevel data structure be reorganized so that the sewer can execute all subsequent requests efficiently. We study how often the server should carry out data reorganization (i. e., maintenance) to maximize its performance. If the server is frequently idle {{then there is no}} need to impose the reorganization overhead on the operation requests. The reorganization overhead may be completely eliminated by utilizing server-idling periods. If the server is frequently busy, then the reorganization overhead can be minimized by performing a complete reorganization only after the server has served a sufficient number of insert/delete operations so that the amortized cost per operation is small. Therefore, the issue of how often one should perform data reorganization to minimize the average service time depends not only on the multilevel data structure maintained by the server but also on the type and intensity of the system workload. The proposed methodology is exemplified with a two-level <b>sorted</b> <b>file</b> with deferred maintenance. The performance and stability results are compared with those of a single-level binary tree data structure with on-the-fly maintenance. It is shown that deferred maintenance of the two-level <b>sorted</b> <b>file</b> outperforms on-the-fly maintenance of the single-level binary tree in both open and closed systems. Furthermore, deferred maintenance can sustain higher workload intensities without risking system stabilit...|$|R
5000|$|... '''''' is {{a command}} in Unix-like {{operating}} systems that merges {{the lines of}} two <b>sorted</b> text <b>files</b> based {{on the presence of}} a common field. It is similar to the join operator used in relational databases but operating on text files.|$|R
50|$|Originally {{intended}} as a <b>follow-up</b> of <b>sorts</b> to the acclaimed Songs, 2004's Chansons saw Greaves team up with lyricist Christophe Glockner and vocalist Elise Caron for a collection of all-new songs with predominantly acoustic instrumentation, including guest spots by Robert Wyatt and Louis Sclavis.|$|R
40|$|Abstract—We {{develop a}} {{methodology}} for analyzing {{the performance and}} stability of a server that maintains a multilevel data structure to service a set of access operations for (key, value) records. A subset of the operations executed by the server (e. g., insert and delete) require the multilevel data structure be reorganized so that the server can execute all subsequent requests efficiently. We study how often the server should carry out data reorganization (i. e., maintenance) to maximize its performance. If the server is frequently idle {{then there is no}} need to impose the reorganization overhead on the operation requests. The reorganization overhead may be completely eliminated by utilizing server-idling periods. If the server is frequently busy, then the reorganization overhead can be minimized by performing a complete reorganization only after the server has served a sufficient number of insert/delete operations so that the amortized cost per operation is small. Therefore, the issue of how often one should perform data reorganization to minimize the average service time depends not only on the multilevel data structure maintained by the server but also on the type and intensity of the system workload. The proposed methodology is exemplified with a two-level <b>sorted</b> <b>file</b> with deferred maintenance. The performance and stability results are compared with those of a single-level binary tree data structure with on-the-fly maintenance. It is shown that deferred maintenance of the two-level <b>sorted</b> <b>file</b> outperforms on-the-fly maintenance of the single-level binary tree in both open and closed systems. Furthermore, deferred maintenance can sustain higher workload intensities without risking system stability. Index Terms—Queueing servers, multilevel data structures, atomic operations, open and closed systems, modeling, deferred maintenance, periodic maintenance, performance analysis, stability analysis. ...|$|R
5000|$|An example: To see {{the list}} of lines in a <b>file,</b> <b>sorted</b> {{by the number of}} times each occurs: ...|$|R
40|$|This bachelor's thesis {{describes}} {{main components}} of the Animator software project. Animator off ers studying of <b>file</b> <b>sorting</b> algorithms. Users can single-stop algorithms or watch tapes with sorted elements on variable oriented views. Algorithm progress may be in fluenced by changing variable values or elements placed on tapes. Users also may orient on examining algorithm efectivity using statistics collected during algorithm progress. It is possible to extend Animator by new views or <b>file</b> <b>sorting</b> algorithms...|$|R
50|$|The UW IMAP and Panda IMAP {{implementations}} of MIX have a <b>sort</b> cache <b>file</b> {{that contains}} data {{used by the}} IMAP SORT and THREAD operators. This permits these operators to load most (if not all) of the data they need without having to parse it from message data.|$|R
5000|$|<b>Sorting</b> a <b>file</b> with tab {{separated}} values {{requires a}} tab character {{to be specified}} as the column delimiter. This illustration uses the shell's dollar-quote notationto specify the tab as a C escape sequence.$ sort -k2,2 -t $'\t' phonebook Doe, John 555-1234Fogarty, Suzie 555-2314Doe, Jane 555-3214Avery, Cory 555-4132Smith, Brett 555-4321 ...|$|R
5000|$|The player {{unfortunately}} doesn't sort alphabetically. It takes files/directories order according FAT16/FAT32 file-system. You can <b>sort</b> the <b>files</b> {{with the}} Iriver plus 3 software (right-click on any folder {{and it will}} let you [...] "change play order"). Alternatively you can sort files/directories physically within file-system by the Fatsort utility.|$|R
40|$|Precis The History and Present of Spors in čáslav Sport Facilities Vodranty This {{thesis is}} focused on the {{development}} of Čáslav's forest park Vodranty from its inception to the present form. In each section you can find information about the most commnon sports {{that are part of the}} sports complex in Vodranty. It includes athlete, football, swimming and tennis. Each chapter deals with one of the mentioned sports and we can find out more dates about gradual inception and development of these sports. Many sports talented and exceptional people were brought up in Vodranty, but the main aim of thesis was expressing complex concepts of Čáslav's sport, which is concentrated in one place. Thesis also provides complete and chronological <b>sorted</b> <b>file</b> of information relating to sports activity in the forest park Vodranty...|$|R
5000|$|Sort {{was part}} of Version 1 Unix. By Version 4 Ken Thompson had {{modified}} it to use pipes, but sort retained an option to name the output file because {{it was used to}} <b>sort</b> a <b>file</b> in place. In Version 5, Thompson invented [...] "-" [...] to represent standard input.|$|R
50|$|The {{concept of}} records and fields was central in some early <b>file</b> <b>sorting</b> and tabulating utilities, such as IBM's Report Program Generator (RPG).|$|R
50|$|The {{lightweight}} Emacs {{that was}} Zile is now Zemacs. In {{the tradition of}} recursive acronyms, Zile stood for Zile Is Lossy Emacs. Zemacs is distinguished by a RAM Memory footprint, of approximately 100kB. It is 8-bit clean, allowing it to be used on any <b>sort</b> of <b>file</b> that doesn't require Unicode support.|$|R
