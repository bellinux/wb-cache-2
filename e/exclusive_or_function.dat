9|10000|Public
5|$|There are no nontrivial {{reversible}} elementary cellular automata. However, a near-miss {{is provided}} by Rule 90 and other elementary cellular automata based on the <b>exclusive</b> <b>or</b> <b>function.</b> In Rule 90, the state of each cell is the exclusive or of the previous states of its two neighbors. This use of the exclusive or makes the transition rule locally invertible, {{in the sense that}} any contiguous subsequence of states can be generated by this rule. Rule 90 is not a reversible cellular automaton rule, because in Rule 90 every assignment of states to the complete array of cells has exactly four possible predecessors, whereas reversible rules are required to have exactly one predecessor per configuration.|$|E
500|$|In the {{mathematical}} study of cellular automata, Rule 90 is an elementary cellular automaton {{based on the}} <b>exclusive</b> <b>or</b> <b>function.</b> It consists of a one-dimensional array of cells, each of which can hold either a 0 or a 1 value. In each time step all values are simultaneously replaced by the exclusive or of their two neighboring values. [...] call it [...] "the simplest non-trivial cellular automaton", and it is described extensively in Stephen Wolfram's 2002 book A New Kind of Science.|$|E
500|$|When {{started from}} a single live cell, Rule 90 has a time-space diagram {{in the form of}} a [...] Sierpiński triangle. The {{behavior}} of any other configuration can be explained as a superposition of copies of this pattern, combined using the <b>exclusive</b> <b>or</b> <b>function.</b> Any configuration with only finitely many nonzero cells becomes a replicator that eventually fills the array with copies of itself. When Rule 90 is started from a random initial configuration, its configuration remains random at each time step. Its time-space diagram forms many triangular [...] "windows" [...] of different sizes, patterns that form when a consecutive row of cells becomes simultaneously zero and then cells with value 1 gradually move into this row from both ends.|$|E
3000|$|... is {{used with}} secrete key k for {{encoding}} biometric fingerprint data using <b>exclusive</b> <b>OR</b> operation. The <b>function</b> δ [...]...|$|R
50|$|Consider the {{following}} simple example using the <b>exclusive</b> <b>OR</b> (XOR) <b>function.</b> XOR {{is a logical}} operator that is commonly used in data mining and machine learning {{as an example of}} a function that is not linearly separable. The table below represents a simple dataset where the relationship between the attributes (X1 and X2) and the class variable (Y) is defined by the XOR function such that Y = X1 XOR X2.|$|R
5000|$|Sears {{has never}} {{manufactured}} Craftsman products itself, instead relying on other manufacturers {{to make the}} products for them following Sears designs and specifications, and then applying the Craftsman brand name. Sometimes, the Craftsman branded items include <b>exclusive</b> features <b>or</b> <b>functions</b> that separate them from the manufacturer's own brand or other brands that that manufacturer produces. At other times, Craftsman products are identical to models of other brands with a different name on them.|$|R
5000|$|In the {{mathematical}} study of cellular automata, Rule 90 is an elementary cellular automaton {{based on the}} <b>exclusive</b> <b>or</b> <b>function.</b> It consists of a one-dimensional array of cells, each of which can hold either a 0 or a 1 value. In each time step all values are simultaneously replaced by the exclusive or of their two neighboring values. [...] call it [...] "the simplest non-trivial cellular automaton", and it is described extensively in Stephen Wolfram's 2002 book A New Kind of Science.|$|E
50|$|There are no nontrivial {{reversible}} elementary cellular automata. However, a near-miss {{is provided}} by Rule 90 and other elementary cellular automata based on the <b>exclusive</b> <b>or</b> <b>function.</b> In Rule 90, the state of each cell is the exclusive or of the previous states of its two neighbors. This use of the exclusive or makes the transition rule locally invertible, {{in the sense that}} any contiguous subsequence of states can be generated by this rule. Rule 90 is not a reversible cellular automaton rule, because in Rule 90 every assignment of states to the complete array of cells has exactly four possible predecessors, whereas reversible rules are required to have exactly one predecessor per configuration.|$|E
5000|$|When {{started from}} a single live cell, Rule 90 has a time-space diagram {{in the form of}} a Sierpiński triangle. The {{behavior}} of any other configuration can be explained as a superposition of copies of this pattern, combined using the <b>exclusive</b> <b>or</b> <b>function.</b> Any configuration with only finitely many nonzero cells becomes a replicator that eventually fills the array with copies of itself. When Rule 90 is started from a random initial configuration, its configuration remains random at each time step. Its time-space diagram forms many triangular [...] "windows" [...] of different sizes, patterns that form when a consecutive row of cells becomes simultaneously zero and then cells with value 1 gradually move into this row from both ends.|$|E
50|$|The Lorenz SZ cipher {{attachments}} {{implemented a}} Vernam stream cipher, using a complex array of twelve wheels that delivered {{what should have}} been a cryptographically secure pseudorandom number as a key stream. The key stream was combined with the plaintext to produce the ciphertext at the transmitting end using the <b>exclusive</b> <b>or</b> (XOR) <b>function.</b> At the receiving end, an identically configured machine produced the same key stream which was combined with the ciphertext to produce the plaintext, i. e. the system implemented a symmetric-key algorithm.|$|R
50|$|One way to {{implement}} a parity drive in a RAID array {{is to use the}} <b>exclusive</b> <b>or,</b> <b>or</b> XOR, <b>function.</b> XOR is a Boolean logic function which means 'one or the other, but not both'. The XOR of all of the data drives in the RAID array is written to the parity drive. If one of the data drives fails, the XOR of the remaining drives is identical to the data of the lost drive. Therefore, when a drive is lost, recovering the drive is as simple as copying the XOR of the remaining drives to a fresh data drive.|$|R
40|$|Hashing is used {{extensively}} in hardware {{applications such as}} page tables for address translation. There is not much literature in this regard although hashing has been extensively studied for file organization. More specifically, there is no study of the practical performance of hashing functions used. In the literature we find bit extraction and <b>exclusive</b> <b>ORing</b> hashing <b>functions</b> used, {{but there is no}} mention of the performance of these functions. Moreover, the performance of the hashing functions in relation to the theoretical performance of hashing schemes is not addressed. In this paper we study the practical performance of a particular class of hashing functions. Our results show that by choosing functions randomly from this class of hashing functions, which can be readily implemented in hardware, we can achieve analytically predicted performance of hashing schemes with real life data. 1622 1 Introduction Hashing is a widely used technique of organizing tables which also finds [...] ...|$|R
50|$|In most {{command-line}} interfaces or text editors, {{the text}} cursor, {{also known as}} a caret, is an underscore, a solid rectangle, or a vertical line, which may be flashing or steady, indicating where text will be placed when entered (the insertion point). In text mode displays, {{it was not possible to}} show a vertical bar between characters to show where the new text would be inserted, so an underscore or block cursor was used instead. In situations where a block was used, the block was usually created by inverting the pixels of the character using the boolean math <b>exclusive</b> <b>or</b> <b>function.</b> On text editors and word processors of modern design on bitmapped displays, the vertical bar is typically used instead.|$|E
40|$|Frequency {{discriminator}} {{has five}} integrated circuit chips interconnected {{to provide a}} divide function, <b>exclusive</b> <b>OR</b> <b>function,</b> phase shifting, and holding so that a single binary output signal results. The state of the binary signal indicates {{which one of the}} two input signals has a lower frequency than the other...|$|E
40|$|The charge {{injection}} transistor, or CHINT, is a three-terminal {{semiconductor device}} based on controlled real-space transfer of hot electrons between two conducting tayers {{separated by a}} potential 3 arrier. The symmetry of hot-electron injection by real-space transfer {{with respect to the}} polarity of the heating field allows the implementation of novel circuit elements. Thus, in the basic CHfNT structure, the collector current is an <b>exclusive</b> <b>OR</b> <b>function</b> of voltages applied to the emitter electrodes. Moreover, we have proposed and demonstrated a multiterminal device structure with three symmetric logic inputs that performs both the NOR and the AND logic functions, and can be switched between these functions {{in the course of the}} circuit operation. Symmetry properties of real-space transfer transistors have been studied theoretically, with the help of continuation modeling and transient device simulation. These studies reveal a variety of instabilities and a striking novelty of multiply connected current-voltage characteristics. We have found that the CHINT can support anomalous steady states in which hot-electron injection occurs in the absence of any voltage between the emitter electrodes. In these states, some of which are not only stationary but also stable with respect to small perturbations, the electron heating is due to the fringing field from the collector electrode. Some of the anomalous states break the reflection symmetry in the plane normal to the channel at midpoint. The study elucidates the formation of hot-electron domains...|$|E
40|$|The aim is {{to obtain}} {{computationally}} more powerful, neuro physiologically founded, artiﬁcial neurons and neural nets. Artiﬁcial Neural Nets (ANN) of the Perceptron type evolved from the original proposal by McCulloch an Pitts classical paper [1]. Essentially, they keep the computing structure of a linear machine followed by a non linear operation. The McCulloch-Pitts formal neuron (which was never considered by the author’s to be models of real neurons) consists of the simplest case of a linear computation of the inputs followed by a threshold. Networks of one layer cannot compute anylogical function of the inputs, but only those which are linearly separable. Thus, the simple <b>exclusive</b> <b>OR</b> (contrast detector) <b>function</b> of two inputs requires two layers of formal neuron...|$|R
5|$|Another {{method of}} {{constructing}} hash functions with both high quality and practical speed is tabulation hashing. In this method, the hash value for a key {{is computed by}} using each byte of the key as an index into a table of random numbers (with a different table for each byte position). The numbers from those table cells are then combined by a bitwise <b>exclusive</b> <b>or</b> operation. Hash <b>functions</b> constructed this way are only 3-independent. Nevertheless, linear probing using these hash functions takes constant expected time per operation. Both tabulation hashing and standard methods for generating 5-independent hash functions are limited to keys that have a fixed number of bits. To handle strings or other types of variable-length keys, {{it is possible to}} compose a simpler universal hashing technique that maps the keys to intermediate values and a higher quality (5-independent <b>or</b> tabulation) hash <b>function</b> that maps the intermediate values to hash table indices.|$|R
5000|$|On 31 August 1941, two {{versions}} of the same message were sent using identical keys, which constituted a [...] "depth". This allowed John Tiltman, Bletchley Park's veteran and remarkably gifted cryptanalyst, to deduce that it was a Vernam cipher which uses the <b>Exclusive</b> <b>Or</b> (XOR) <b>function</b> (symbolised by [...] "⊕"), and to extract the two messages and hence obtain the obscuring key. After a fruitless period during which Research Section cryptanalysts tried to work out how the Tunny machine worked, this and some other keys were handed to Tutte, who was asked to [...] "see what you can make of these".At his training course, Tutte had been taught the Kasiski examination technique of writing out a key on squared paper, starting a new row after a defined number of characters that was suspected of being the frequency of repetition of the key. If this number was correct, the columns of the matrix would show more repetitions of sequences of characters than chance alone. Tutte knew that the Tunny indicators used 25 letters (excluding J) for 11 of the positions, but only 23 letters for the other. He therefore tried Kasiski's technique on the first impulse of the key characters, using a repetition of 25 × 23 = 575. He did not observe a large number of column repetitions with this period, but he did observe the phenomenon on a diagonal. He therefore tried again with 574, which showed up repeats in the columns. Recognising that the prime factors of this number are 2, 7 and 41, he tried again with a period of 41 and [...] "got a rectangle of dots and crosses that was replete with repetitions".|$|R
50|$|For example, the Logical {{disjunction}} <b>function</b> <b>or</b> with {{boolean values}} used for true (1) and false (0) is positive unate. Conversely, <b>Exclusive</b> <b>or</b> is non-unate, because {{the transition from}} 0 to 1 on input x0 is both positive unate and negative unate, depending on the input value on x1.|$|R
5000|$|<b>Exclusive</b> <b>or</b> <b>exclusive</b> ("xor") means {{exactly one}} must be true, but they cannot both be.|$|R
40|$|Ternary <b>exclusive</b> <b>or</b> is the (two valued) truth {{function}} {{that is true}} just in case exactly one of its three arguments is true. This is an interesting truth function, not definable {{in terms of the}} binary <b>exclusive</b> <b>or</b> alone, although the binary case is definable in terms of the ternary case. This article investigates the types of truth functions that can be defined by ternary <b>exclusive</b> <b>or,</b> and relates these findings to the seminal work of Emil Post...|$|R
5000|$|This can be {{simplified}} {{somewhat in}} actual implementation by replacing the multiply by 2 {{with a single}} shift and conditional <b>exclusive</b> <b>or,</b> and replacing a multiply by 3 with a multiply by 2 combined with an <b>exclusive</b> <b>or.</b> A C example of such an implementation follows: ...|$|R
5000|$|On {{just the}} first (leftmost) byte of the output word, <b>exclusive</b> <b>OR</b> the byte with 2 {{to the power of}} (i-1) in Rijndael's finite field. In other words, perform the rcon {{operation}} with i as the input, and <b>exclusive</b> <b>or</b> the rcon output with the first byte of the output word ...|$|R
50|$|<b>Exclusive</b> <b>or</b> <b>or</b> <b>exclusive</b> {{disjunction}} is {{a logical}} operation that outputs true only when inputs differ (one is true, the other is false).|$|R
5000|$|... <b>exclusive</b> <b>or</b> shared utilization: {{is within}} the {{responsibility}} of administrations ...|$|R
2500|$|Logic: EOR (<b>exclusive</b> <b>or),</b> AND, NOT (logical not), OR (inclusive or) ...|$|R
50|$|Negation, Logical biconditional, <b>exclusive</b> <b>or,</b> tautology, and contradiction are linear functions.|$|R
5000|$|Bitwise XOR (<b>exclusive</b> <b>OR)</b> (denoted {{with a blue}} circled plus [...] ).|$|R
5000|$|Logic: EOR (<b>exclusive</b> <b>or),</b> AND, NOT (logical not), OR (inclusive or) ...|$|R
5000|$|... <b>exclusive</b> <b>or</b> shared utilization: {{is within}} the {{responsibility}} of national administrations ...|$|R
5000|$|<b>Exclusive</b> <b>OR</b> gate - {{the output}} occurs if exactly one input occurs ...|$|R
50|$|It may be {{constructed}} as the <b>exclusive</b> <b>or</b> (blend) of three octagonal prisms.|$|R
40|$|Following a Social Representations approach, {{the article}} {{examines}} the representations of citizenship held by both migrants and Greek citizens in Greece after the announcement of a heavily debated citizenship legislation. Essentialism, a way of representing social categories as holding an underlying essence that determines their characteristics, {{was used as an}} analytical tool to understand the inclusive <b>or</b> <b>exclusive</b> <b>function</b> of representations of citizenship towards migrants. Findings showed that Greeks construct representations based on ethnic, civic, and cultural ideas, while migrants construct representation of citizenship based on civic and cultural ideas. Essentialism was a way of constructing ethnic and cultural representations of citizenship and functioned in both exclusive and inclusive ways, but assimilatory terms accordingly. Civic and cultural representations of citizenship were constructed in nonessentialist ways and functioned in inclusive ways. However, from Greeks' perspective, civic inclusion was conditioned upon an often-questioned legality of migrants and upon cultural assimilation terms. Studying both the content and the essentialist/nonessentialist formulation of representations of citizenship is an important tool in understanding the politics of inclusion and exclusion of citizens in the social arena...|$|R
5000|$|If [...] is a {{power of}} two, one may replace {{summation}} by <b>exclusive</b> <b>or.</b>|$|R
50|$|County {{territory}} {{within which}} the county government has <b>exclusive</b> <b>or</b> concurrent jurisdiction with the state.|$|R
5000|$|Computes {{the random}} value x = TDEAk(s ⊕ t), where ⊕ denotes bitwise <b>exclusive</b> <b>or.</b>|$|R
