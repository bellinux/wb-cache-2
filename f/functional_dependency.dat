544|1158|Public
2500|$|The {{correlation}} ratio {{is able to}} detect almost any <b>functional</b> <b>dependency,</b> and the entropy-based mutual information, total correlation and dual total correlation are capable of detecting even more general dependencies. [...] These are {{sometimes referred to as}} multi-moment correlation measures, in comparison to those that consider only second moment (pairwise or quadratic) dependence.|$|E
2500|$|Jets are {{normally}} regarded as abstract polynomials in the variable z, not as actual polynomial functions in that variable. In other words, z is an indeterminate variable allowing one to perform various algebraic operations among the jets. It {{is in fact}} the base-point [...] from which jets derive their <b>functional</b> <b>dependency.</b> Thus, by varying the base-point, a jet yields a polynomial of order at most k at every point. This marks an important conceptual distinction between jets and truncated Taylor series: ordinarily a Taylor series is regarded as depending functionally on its variable, rather than its base-point. Jets, on the other hand, separate the algebraic properties of Taylor series from their functional properties. We shall deal with the reasons and applications of this separation later in the article.|$|E
50|$|A <b>functional</b> <b>dependency</b> is {{a special}} case of multivalued dependency. In a <b>functional</b> <b>dependency</b> X → Y, every x determines exactly one y, never more than one.|$|E
40|$|The paper {{proposes a}} problem {{decomposition}} method for building optimal cover {{for a set}} of <b>functional</b> <b>dependencies</b> to decrease the solving time. At the beginning, the paper includes an overview of the covers of <b>functional</b> <b>dependencies.</b> There are considered definitions and properties of non redundant covers for sets of <b>functional</b> <b>dependencies,</b> reduced and canonical covers as well as equivalence classes of <b>functional</b> <b>dependencies,</b> minimum and optimal covers. Then, a theoretical tool for inference of <b>functional</b> <b>dependencies</b> is proposed, which possesses the uniqueness property. And finally, the set of attributes of the relational schema is divided into equivalence classes of attributes that will {{serve as the basis for}} building optimal cover {{for a set of}} <b>functional</b> <b>dependencies...</b>|$|R
40|$|Data {{integrity}} constraints usually form a {{major component}} in a data-intensive business system. To successfully reengineer a data-intensive business system, its data integrity constraints must be understood. <b>Functional</b> <b>dependencies</b> constitute an important type of data integrity constraints. Due {{to the nature of}} system development, a significant amount of <b>functional</b> <b>dependencies</b> is usually omitted during the initial system development stage and only discovered during the system maintenance stage. Usually, these dependencies are enforced in the programs which update the databases, and are not shown elsewhere including the databases. Existing approaches for the discovery of <b>functional</b> <b>dependencies</b> from databases cannot find such <b>functional</b> <b>dependencies.</b> We develop a theory for inferring <b>functional</b> <b>dependencies</b> in a database from the programs which update the database. With the use of the theory, a comprehensive approach for the recovery of <b>functional</b> <b>dependencies</b> from both database schemas and programs is consequently proposed. The proposed approach can recover those <b>functional</b> <b>dependencies</b> which cannot be found by the existing approaches. The <b>functional</b> <b>dependencies</b> recovered from the proposed approach are proven. 1...|$|R
40|$|Abstract: We study {{inference}} {{systems of}} weak <b>functional</b> <b>dependencies</b> in relational and complex-value databases. <b>Functional</b> <b>dependencies</b> form {{a very common}} class of database constraints. Designers and administrators proficiently utilise them in everyday database practice. <b>Functional</b> <b>dependencies</b> correspond to the linear-time decidable fragment of Horn clauses in propositional logic. Weak <b>functional</b> <b>dependencies</b> take advantage of arbitrary clauses, and therefore represent full propositional reasoning about data in databases. Moreover, they can be specified {{in a way that}} is very similar to <b>functional</b> <b>dependencies.</b> In relational databases the class of weak <b>functional</b> <b>dependencies</b> is finitely axiomatisable and the associated implication problem is coNP-complete in general. Our first main result extends this axiomatisation to databases in which complex elements can be derived from atomic ones by finitely many nestings of record, list and disjoint union constructors. In particular, we construct two nested tuples that can serve as a counterexample relation for the implication of weak <b>functional</b> <b>dependencies.</b> We further apply this construction to show an equivalence to truth assignments that serve as counterexamples for the implication of propositional clauses. Hence, we characterise the implication of weak <b>functional</b> <b>dependencies</b> in complex-value databases in completely logical terms. Consequently, state-of-the-art SAT solvers can be applied to reason about weak <b>functional</b> <b>dependencies</b> in relational and complex-value databases...|$|R
50|$|In {{relational}} database theory, a <b>functional</b> <b>dependency</b> is a constraint between {{two sets of}} attributes in a relation from a database. In other words, <b>functional</b> <b>dependency</b> is a constraint that describes the relationship between attributes in a relation.|$|E
5000|$|No <b>functional</b> <b>dependency</b> in [...] {{contains}} an extraneous attribute.|$|E
5000|$|Reducing any <b>functional</b> <b>dependency</b> {{will change}} the content of S.|$|E
40|$|Keys and <b>functional</b> <b>dependencies</b> play a {{fundamental}} role in relational databases {{where they are}} used in integrity enforcement and in database design. Similarly, these constraints will play {{a fundamental}} role in XML and recently keys and <b>functional</b> <b>dependencies</b> in XML have been denned. In this paper we extend the previous definition of <b>functional</b> <b>dependencies</b> in XML to local <b>functional</b> <b>dependencies</b> in XML. Local <b>functional</b> <b>dependencies</b> (LFDs) are <b>functional</b> <b>dependencies</b> which hold only in a certain part of an XML document and not in the whole document. We also define, and prove correct, axioms for reasoning about the implication of LFDs in XML. Finally, we examine the relationship between LFDs and keys and show that the recently introduced concept of a relative key is a special case of a LFD...|$|R
5000|$|Armstrong's axioms are {{a set of}} axioms (or, more precisely, {{inference}} rules) used {{to infer}} all the <b>functional</b> <b>dependencies</b> on a relational database. They were developed by William W. Armstrong in his 1974 paper. The axioms are sound in generating only <b>functional</b> <b>dependencies</b> in the closure {{of a set of}} <b>functional</b> <b>dependencies</b> (denoted as [...] ) when applied to that set (denoted as [...] ). They are also complete in that repeated application of these rules will generate all <b>functional</b> <b>dependencies</b> in the closure [...]|$|R
5000|$|There is a {{fundamental}} difficulty for efficient algorithms for candidate key computation:Certain sets of <b>functional</b> <b>dependencies</b> lead to exponentially many candidate keys.Consider the [...] <b>functional</b> <b>dependencies</b> ...|$|R
50|$|This <b>functional</b> <b>dependency</b> {{may suggest}} that the {{attribute}} EngineCapacity {{be placed in a}} relation with candidate key VIN. However, that may not always be appropriate. For example, if that <b>functional</b> <b>dependency</b> occurs {{as a result of the}} transitive functional dependencies VIN → VehicleModel and VehicleModel → EngineCapacity then that would not result in a normalized relation.|$|E
5000|$|Each right set of a <b>functional</b> <b>dependency</b> of S {{contains}} only one attribute.|$|E
5000|$|X {{contains}} A (that is, X → A is trivial <b>functional</b> <b>dependency),</b> or ...|$|E
40|$|Abstract. <b>Functional</b> <b>dependencies</b> (FDs) are an {{integral}} part of database theory since they are used in integrity enforcement and in database design. Recently, <b>functional</b> <b>dependencies</b> satisfied by XML data (XFDs) have been introduced. In this work approximate <b>functional</b> <b>dependencies</b> that are XFDs approximately satisfied by a considerable part of the XML database are defined and the problem of inferring such XFDs is addressed. ...|$|R
40|$|<b>Functional</b> <b>dependencies</b> {{are merely}} {{a type of}} {{relationship}} between attributes in a relation, or, alternatively, {{may be viewed as}} constraints on attributes, but their importance in the optimal design of databases is enormous. Normalization of a database, and the decomposition of relations, are totally dependent upon the database designer being able to identify <b>functional</b> <b>dependencies,</b> and manipulate them. Curricula in CS, IS and IT will almost always include a course in database design, with <b>functional</b> <b>dependencies</b> being a key topic in such a course. FD-Explorer is a new tool we have developed which enables both the student of database design, as well as professional database developers, to define a known set of <b>functional</b> <b>dependencies</b> on a relation, deduce new sets of <b>functional</b> <b>dependencies,</b> compute closures of individual attributes and the set of <b>functional</b> <b>dependencies,</b> and identify superkeys. This software tool, which we ultimately intend to make freely available for students in database design classes in institutions of higher learning, will provide the user with significant insight into the underlying explicit and implicit relationships between attributes, contribute to the optimal design of database structures in applications, and enhance the user’s understanding of the fundamental principles of <b>functional</b> <b>dependencies...</b>|$|R
5000|$|A {{notion of}} logical {{implication}} is defined for <b>functional</b> <b>dependencies</b> {{in the following}} way: a set of <b>functional</b> <b>dependencies</b> [...] logically implies another set of dependencies , if any relation R satisfying all dependencies from [...] also satisfies all dependencies from this is usually written [...] The notion of logical implication for <b>functional</b> <b>dependencies</b> admits a sound and complete finite axiomatization, known as Armstrong's axioms.|$|R
5000|$|A {{classic example}} of <b>functional</b> <b>dependency</b> is the employee, {{department}} model. The following table ...|$|E
5000|$|Find a <b>functional</b> <b>dependency</b> in [...] with an {{extraneous}} attribute and delete it from ...|$|E
5000|$|In {{addition}} to this relationship, the table also has a <b>functional</b> <b>dependency</b> through a non-key attribute ...|$|E
40|$|Abstract. <b>Functional</b> <b>dependencies</b> are {{a popular}} and useful {{extension}} to Haskell style type classes. In this paper, we give a reformulation of <b>functional</b> <b>dependencies</b> {{in terms of}} Constraint Handling Rules (CHRs). In previous work, CHRs have been employed for describing user-programmable type extensions {{in the context of}} Haskell style type classes. Here, we make use of CHRs to provide {{for the first time a}} concise result that under some sufficient conditions, <b>functional</b> <b>dependencies</b> allow for sound and decidable type inference. The sufficient conditions imposed on <b>functional</b> <b>dependencies</b> can be very limiting. We show how to safely relax these conditions. ...|$|R
40|$|We {{study the}} problem of {{repairing}} an inconsistent database that violates a set of <b>functional</b> <b>dependencies</b> by making the smallest possible value modifications. For an inconsistent database, we define an optimum repair as a database that satisfies the <b>functional</b> <b>dependencies,</b> and minimizes, among all repairs, a distance measure {{that depends on the}} number of corrections made in the database and the weights of tuples modified. We show that like other versions of the repair problem, checking the existence of a repair within a certain distance of a database is NP-complete. We also show that finding a constant-factor approximation for the optimum repair for any set of <b>functional</b> <b>dependencies</b> is NPhard. Furthermore, there is a small constant and a set of <b>functional</b> <b>dependencies,</b> for which finding an approximate solution for the optimum repair within the factor of that constant is also NP-hard. Then we present an approximation algorithm that for a fixed set of <b>functional</b> <b>dependencies</b> and an arbitrary input inconsistent database, produces a repair whose distance to the database is within a constant factor of the optimum repair distance. We finally show how the approximation algorithm can be used in data cleaning using a recent extension to <b>functional</b> <b>dependencies,</b> called conditional <b>functional</b> <b>dependencies...</b>|$|R
40|$|AbstractWe {{introduce}} {{and motivate}} {{the study of}} numerical dependencies which are a generalization of <b>functional</b> <b>dependencies.</b> We prove that there does not exist a finite set of sound and complete inference rules for numerical dependencies {{in contrast to the}} case of <b>functional</b> <b>dependencies.</b> We also prove that nontrivial numerical dependencies which are not <b>functional</b> <b>dependencies</b> cannot be expressed by Horn formulas in first-order logic, and show some applications of numerical dependencies...|$|R
5000|$|A <b>functional</b> <b>dependency</b> (FD for short) {{is written}} as [...] for [...] finite sets of {{attribute}} names.|$|E
5000|$|A <b>functional</b> <b>dependency</b> [...] {{holds in}} a {{relation}} universe [...] if it holds in all relations in [...]|$|E
5000|$|A <b>functional</b> <b>dependency</b> is trivial under a header [...] if {{it holds}} in all {{relation}} universes over [...]|$|E
50|$|Recall that 2NF prohibits partial <b>functional</b> <b>dependencies</b> of non-prime {{attributes}} (i.e. {{an attribute}} {{that does not}} occur in ANY candidate key) on candidate keys, and that 3NF prohibits transitive <b>functional</b> <b>dependencies</b> of non-prime attributes on candidate keys.|$|R
40|$|Independent {{database}} schemes {{are best}} {{known to have}} constraints enforced globally by enforcing them locally in individual relations, and therefore are highly desirable in an updates-busy and distributed environment. However, independence excludes all database schemes with interrelational <b>functional</b> <b>dependencies</b> and therefore is too strong a condition. In this paper, a natural generalization of independent schemes along this line, called weakly independent schemes, is de ned. A database scheme is weakly independent {{with respect to a}} set of embedded <b>functional</b> <b>dependencies</b> if the constraints can be enforced globally by enforcing local as well as interrelational <b>functional</b> <b>dependencies.</b> (a) A characterization of the weak independence and an exponential time test (in the number of <b>functional</b> <b>dependencies)</b> are presented. (b) Two polynomial time conditions are also presented, one is necessary and the other is su cient for a database scheme to be weakly independent. (c) It is shown that a certain acyclicity ofthe database scheme implies weak independence. Extension to the case of embedded <b>functional</b> <b>dependencies</b> plus the join dependency 1 R is also considered. Streams: database designs, database integrity, database theory and algorithms Key Words: <b>functional</b> <b>dependencies,</b> independent schemes, uniqueness condition, weak instances 1...|$|R
40|$|Nowadays many {{organizations}} are maintaining computer based information systems. These information systems are valuable assets to the organization. Most {{of the business}} information or corporate decisions are buried across the systems in the organization and due to the need based modifications sometimes the attributes are scattered throughout the program and even there is a redundancy in the stored data. These business information and corporate decisions represents the business rules of the organization {{and they are in}} the form of <b>functional</b> <b>dependencies.</b> These <b>functional</b> <b>dependencies</b> are unevenly scattered and sometimes redundant too. In a database, the records containing these unevenly scattered <b>functional</b> <b>dependencies</b> may be distributed throughout the database, leading to anomalies. This paper proposes a methodology for the minimization of the <b>functional</b> <b>dependencies</b> available either in a program code or in a database using the minimal cover process. By minimizing these <b>functional</b> <b>dependencies,</b> the redundant and irrelevant attributes are removed and the structure of the application program is kept intact in the maintenance phase...|$|R
5000|$|The {{idea behind}} the {{algorithm}} is that given a candidate key and a <b>functional</b> <b>dependency</b> ,the reverse application of the <b>functional</b> <b>dependency</b> yieldsthe set [...] ,which is a key, too.It may however be covered by other already known candidate keys.(The algorithm checks this case using the 'found' variable.)If not, then minimizing the new key yields a new candidate key.The key insight is that all candidate keys can be created this way.|$|E
5000|$|An {{important}} property (yielding {{an immediate}} application) of functional dependencies {{is that if}} R is a relation with columns named from some set of attributes U and R satisfies some <b>functional</b> <b>dependency</b> X → Y then [...] where Z = U − XY. Intuitively, if a <b>functional</b> <b>dependency</b> X → Y holds in R, then the relation can be safely split in two relations alongside the column X (which is a key for [...] ) ensuring that when the two parts are joined back no data is lost, i.e. a <b>functional</b> <b>dependency</b> provides {{a simple way to}} construct a lossless-join decomposition of R in two smaller relations. This fact is sometimes called Heath’s theorem; {{it is one of the}} early results in database theory.|$|E
5000|$|The <b>functional</b> <b>dependency</b> {Book} → {Author Nationality} applies; that is, if we {{know the}} book, we know the author's nationality. Furthermore: ...|$|E
40|$|Abstract. The {{problem of}} {{answering}} queries using views in data integration has recently received considerable attention. A number of algorithms, {{such as the}} bucket algorithm, the SVB algorithm, the MiniCon algorithm, and the inverse rules algorithm, have been proposed. However, integrity constraints, such as <b>functional</b> <b>dependencies,</b> have not been considered in these algorithms. Some efforts {{have been made in}} some inverse rule-based algorithms in the presence of <b>functional</b> <b>dependencies.</b> In this paper, we extend the bucket-based algorithms to handle query rewritings using views in the presence of <b>functional</b> <b>dependencies.</b> We build relationships between views containing no subgoal of a given query and the query itself. We present an algorithm which is scalable compared to the inverse rule-based algorithms. The problem of missing query rewritings in the presence of <b>functional</b> <b>dependencies</b> that occurs in the previous bucket-based algorithms is avoided. We prove that the query rewritings generated by our algorithm are maximally-contained rewritings relative to <b>functional</b> <b>dependencies.</b> ...|$|R
40|$|The {{calculus}} of <b>functional</b> <b>dependencies</b> {{has proven}} very efficient in designing databases. This work illustrates {{the possibility of}} applying the calculus of functional dependence to the calculus of proposition. The calculus of propositions expanded in propositions, when expanded in this way, provide the possibility of significantly shortening the forming of implications, thus substantially speeding up the operations within the knowledge base. This paper shows the possibility of expanding the calculus of propositions with the calculus of <b>functional</b> <b>dependencies.</b> It also shows {{the possibility of using}} the calculus of <b>functional</b> <b>dependencies</b> in the forming of implications within the knowledge base. The contribution of this work is the incorporation of the calculus of <b>functional</b> <b>dependencies</b> into the calculus of proposition. The insertion of the calculus of <b>functional</b> <b>dependencies</b> into the calculus of propositions opens up the possibility of a much shorter forming of the implications, thus speeding up the operations within the knowledge base...|$|R
40|$|We extend Fagin's {{result on}} the {{equivalence}} between <b>functional</b> <b>dependencies</b> in relational databases and propositional Horn clauses. It is shown that this equivalence still holds for <b>functional</b> <b>dependencies</b> in databases that support complex values via nesting of records, lists, sets and multisets. Th...|$|R
