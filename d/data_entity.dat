62|833|Public
25|$|As {{messages}} {{pass through}} the ESB, the ESB enriches the messages destined for a channel that is monitoring for a high-level business event. That is, for each message, the ESB may query a database to obtain additional information about some <b>data</b> <b>entity</b> within the message. For example, based on Customer ID, the ESB mediation flow could get the zip code that the customer resides in. Or, based on IP address of the originating request by the end-user, the ESB mediation flow could lookup what country, state or county that IP address is in.|$|E
50|$|<b>Data</b> <b>entity</b> {{types are}} logical data {{structures}} that contains information meaningful to the user. In MarkII method {{there is only}} one type of <b>data</b> <b>entity</b> types - Objects. Objects must be correctly identified so they can be counted.|$|E
5000|$|Supported Attributes: The {{value of}} an r-card's resource-udi claim is an Entity UDI (URI) that [...] "points to" [...] a <b>data</b> <b>entity</b> (representing a person, organization, or other object). The set of {{attributes}} of this <b>data</b> <b>entity</b> is distinct from (though usually a superset of) the [...] "supported claims" [...] mentioned above.|$|E
30|$|<b>Data</b> <b>entities</b> {{associated}} with Trade items.|$|R
30|$|Maintaining <b>data</b> <b>entities</b> {{associated}} with a trade item.|$|R
50|$|Entity Services—centralize simple {{business}} rules for single <b>data</b> <b>entities.</b>|$|R
5000|$|... to create, delete {{and modify}} {{application}} <b>data</b> (<b>entity</b> instance, attribute values, aggregates and their members) ...|$|E
5000|$|... #Subtitle level 3: Count the Input Data Element Types, the <b>Data</b> <b>entity</b> Types Referenced, and the Output Data Element Types ...|$|E
50|$|A Provisioning Service Object (PSO), {{sometimes}} simply {{called an}} object, represents a <b>data</b> <b>entity</b> or an information object on a target. For example, a provider would represent {{as an object}} each account that the provider manages.|$|E
30|$|<b>Data</b> <b>entities</b> {{which are}} {{associated}} with Trade of the item.|$|R
50|$|ADVISE will {{possess the}} ability to store one {{quadrillion}} <b>data</b> <b>entities.</b>|$|R
30|$|The Components (Generally Relations) {{that are}} hosting and {{managing}} those <b>data</b> <b>entities.</b>|$|R
50|$|In {{addition}} to basic identity attribute values like strings and numbers, the <b>data</b> <b>entity</b> {{referred to by}} an r-card can have complex attribute values consisting of aggregates of basic attribute types as well as UDI links to other entities.|$|E
5000|$|A triplestore or RDF {{store is}} a {{purpose-built}} database for the storage and retrieval of triples through semantic queries. A triple is a <b>data</b> <b>entity</b> composed of subject-predicate-object, like [...] "Bob is 35" [...] or [...] "Bob knows Fred".|$|E
5000|$|A {{field is}} {{a string of}} bits that encodes a number, {{character}} or other <b>data</b> <b>entity.</b> Instances of a Field subclass are encapsulated by the operations that can be performed by its class; for example, arithmetic operations on integer fields.|$|E
30|$|Reading and {{updating}} of remotely hosted <b>data</b> <b>entities</b> {{associated with}} a trade item.|$|R
50|$|The data view {{starts with}} the data classes which can be {{decomposed}} into data subjects which can be further decomposed into <b>data</b> <b>entities.</b> The basic <b>data</b> model type which is most commonly used is called merda (master entity relationship diagrams assessment, see entity-relationship model). The Class, subject and entity forms a hierarchical view of data. Enterprises may have millions of instances of <b>data</b> <b>entities.</b>|$|R
5000|$|Session Services—centralize complex {{business}} rules affecting multiple <b>data</b> <b>entities,</b> such as task-specific behavior, transactions, and referential integrity.|$|R
5000|$|A {{semantic}} triple, {{or simply}} triple, is the atomic <b>data</b> <b>entity</b> in the Resource Description Framework (RDF) data model. As its name indicates, a triple {{is a set}} of three entities that codifies a statement about semantic data in the form of subject-predicate-object expressions (e.g. [...] "Bob is 35", or [...] "Bob knows John").|$|E
50|$|A <b>Data</b> (<b>Entity</b> A) {{could be}} Sent (Relationship Name) to a Monitor (Entity B) or a Printer(Entity C) to be shown. In {{this case the}} {{relationship}} between the Monitor and Printer at one side and Data at the other side is an Exclusive Relationship. Of course it is assumed that Data could be sent to only one of the targets at a time, not to both.|$|E
50|$|Popularised by Richard Stallman, {{the layout}} may be {{influenced}} by his background of writing Lisp code. In Lisp, the equivalent to a block (a progn) is a first-class <b>data</b> <b>entity,</b> and giving it its own indent level helps to emphasize that, whereas in C, a block is only syntax. Although not directly related to indenting, GNU coding style also includes a space before the bracketed list of arguments to a function.|$|E
40|$|International audienceA {{distributed}} system like grid {{can be viewed}} as hypothetical infinite storage system for storing large <b>data</b> <b>entities.</b> Frequently these large <b>data</b> <b>entities</b> can not be stored in one unique location. In this paper we propose a temporal storage space managed as a collaborative cache system where clients have a perception of this space as an unlimited temporal storage capacity. They use the temporal storage space to share and to reuse large <b>data</b> <b>entities</b> in a distributed way. Temporal storage space is composed of a set of autonomous caches that work cooperatively with individual caches are generic cache services deployed inside organizations and a specialized service to coordinate global operations that facilitate the cooperation between caches. Implementation issues of a prototype in Globus Toolkit 4 are discussed...|$|R
5000|$|Structured {{analysis}} {{breaks down}} a software {{system from the}} system context level to system functions and <b>data</b> <b>entities</b> as described by Tom DeMarco.|$|R
50|$|In 2002/3, in its Enterprise Edition, TOGAF 8 shifted {{focus from}} the {{technology}} architecture layer {{to the higher}} business, data and application layers. It introduced structured analysis, after Information Engineering, which features, for example, mappings of organization units to business functions and <b>data</b> <b>entities</b> to business functions. Today, business functions are often called business capabilities. And many enterprise architects regard their business function/capability hierarchy/map as the fundamental Enterprise Architecture artifact. They relate <b>data</b> <b>entities,</b> use cases, applications and technologies to the functions/capabilities.|$|R
50|$|Data version {{transparency}} {{implies that}} data should be communicated in version transparent ways between components. This requires that these {{data can be}} changed (e.g., the mere addition of a field that is not currently used), without {{having an impact on}} the components and their interfaces. The theorem expresses the need for the encapsulation of data entities, in order to wrap the various versions of the <b>data</b> <b>entity</b> and to obtain data version transparency.|$|E
50|$|Context - The online {{world is}} able to track {{real-world}} events and this is primarily being enabled by mobile devices. An online bill payment via Google Checkout or a checkin at a physical location via Facebook or Foursquare links a real world event to an online <b>data</b> <b>entity</b> such as a business or a place. This is a vital element to Social Commerce where the data is now available to organizations wishing to provide products and services to consumers.|$|E
50|$|Data {{architecture}} {{should be}} defined in the planning phase of {{the design of a}} new data processing and storage system. The major types and sources of data necessary to support an enterprise should be identified {{in a manner that is}} complete, consistent, and understandable. The primary requirement at this stage is to define all of the relevant data entities, not to specify computer hardware items. A <b>data</b> <b>entity</b> is any real or abstracted thing about which an organization or individual wishes to store data.|$|E
40|$|Although hashing {{techniques}} have been popular {{for the large}} scale similarity search problem, most of the existing methods for designing optimal hash functions focus on homogeneous similarity assessment, i. e., the <b>data</b> <b>entities</b> to be indexed are of the same type. Realizing that heterogeneous entities and relationships are also ubiquitous {{in the real world}} ap-plications, there is an emerging need to retrieve and search similar or relevant <b>data</b> <b>entities</b> from multiple heterogeneous domains, e. g., recommending relevant posts and images to a certain Facebook user. In this paper, we address the problem of “comparing apples to oranges ” under the large s-cale setting. Specifically, we propose a novel Relation-aware Heterogeneous Hashing (RaHH), which provides a general framework for generating hash codes of <b>data</b> <b>entities</b> sit-ting in multiple heterogeneous domains. Unlike some ex-isting hashing methods that map heterogeneous data in a common Hamming space, the RaHH approach constructs a Hamming space for each type of <b>data</b> <b>entities,</b> and learns op-timal mappings between them simultaneously. This makes the learned hash codes flexibly cope with the characteristics of different data domains. Moreover, the RaHH framework encodes both homogeneous and heterogeneous relationships between the <b>data</b> <b>entities</b> to design hash functions with im-proved accuracy. To validate the proposed RaHH method, we conduct extensive evaluations on two large datasets; one is crawled from a popular social media sites, Tencent Wei-bo, and the other is an open dataset of Flickr(NUS-WIDE). The experimental results clearly demonstrate that the RaH-H outperforms several state-of-the-art hashing methods with significant performance gains...|$|R
50|$|The basic graphic {{notation}} {{elements of}} DSDs are boxes which represent entities.The arrow symbol represents relationships. Data structure diagrams are most useful for documenting complex <b>data</b> <b>entities.</b>|$|R
40|$|Overview {{of tasks}} {{discussed}} in presentation: Examining and ammending BADC <b>Data</b> <b>Entities</b> {{to bring in}} line with the requirements of the NERC Science Information Strategy Information (SIS) project. Reviewing BADC <b>Data</b> <b>Entities</b> in more depth and modifying associated data (i. e. Deployments, Data Production Tools, Observation Stations, and Activities.) Writing and recording a webguide to explain MOLES 2 elements. A comparison of the similarities between MOLES 2 and MOLES 3 is included in these presentation slides. Presentation took place on the 27 th of September 2012, at RAL Space, Oxfordshire...|$|R
50|$|On the one hand, the <b>data</b> <b>entity</b> creates {{and manages}} network layer data units from the payload of the application-layer and {{performs}} routing {{according to the}} current topology. On the other hand, there is the layer control, {{which is used to}} handle configuration of new devices and establish new networks: it can determine whether a neighboring device belongs to the network and discovers new neighbors and routers. The control can also detect the presence of a receiver, which allows direct communication and MAC synchronization.|$|E
50|$|As {{messages}} {{pass through}} the ESB, the ESB enriches the messages destined for a channel that is monitoring for a high-level business event. That is, for each message, the ESB may query a database to obtain additional information about some <b>data</b> <b>entity</b> within the message. For example, based on Customer ID, the ESB mediation flow could get the zip code that the customer resides in. Or, based on IP address of the originating request by the end-user, the ESB mediation flow could lookup what country, state or county that IP address is in.|$|E
50|$|In {{computer}} {{user interface}} design, a master-detail interface displays a master list {{and the details}} for the currently selected item. The original motivation for master detail was that such a view table on old 1980s 80-character-wide displays could only comfortably show about four columns on the screen at once, while a typical <b>data</b> <b>entity</b> will have some twenty fields. The solution is that the detail shows all twenty fields and the master shows only the commonly recognised three to five that will fit on the screen in one row without scrolling.|$|E
40|$|Abstract. When {{building}} process-intensive web applications, developers typically spend considerable {{effort on}} the exchange of specific <b>data</b> <b>entities</b> between specific web pages and operations under specific conditions, as called for by business requirements. Since the WWW infrastructure provides only very coarse data exchange mechanisms, we introduce a notation {{for the design of}} fine-grained conditional data flows between user interface components. These specifications can be interpreted by a data flow controller that automatically provides the <b>data</b> <b>entities</b> to the specified receivers at run-time, relieving developers of the need to implement user interface data flows manually. ...|$|R
3000|$|... [DE]) as a transaction, clients (applications) {{submit their}} {{requests}} to the TPE. TPE receives such requests from clients and manage them as transactions. TPE also maintains data schema which {{is required for}} transaction processing and management. Note that MongoDB is a schema free database. TPE also defines relationships between different <b>data</b> <b>entities</b> (DE). This is to enforce integrity constraints and strong consistency. Based on the relationships between <b>data</b> <b>entities,</b> TPE facilitates join operations which are not implicitly supported in MongoDB. The ability for the TPE to facilitate join expressions means that complex operations can be implemented by the system and these operations can be implemented atomically, i.e., with transactional semantics. This feature is absent from existing NoSQL databases.|$|R
50|$|According to the Open Group Architecture Framework (TOGAF), a data {{architect}} {{is expected}} to set data architecture principles, create models of data that enable {{the implementation of the}} intended business architecture, create diagrams showing key <b>data</b> <b>entities,</b> and create an inventory of the data needed to implement the architecture vision.|$|R
