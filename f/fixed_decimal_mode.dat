0|26|Public
50|$|Also, in NMOS 6502s, the N flag {{is invalid}} when the {{processor}} is operating in <b>decimal</b> <b>mode.</b> The 65C02 <b>fixes</b> this problem (at {{the cost of}} an additional clock cycle), and thus increases the usefulness of <b>decimal</b> <b>mode.</b>|$|R
50|$|BCD11 <b>fixed</b> <b>decimal</b> point expression. 4000 {{words of}} Drum memory.|$|R
5000|$|BCD12 <b>fixed</b> <b>decimal</b> point expression. 1960 {{words of}} Drum memory. (High speed access of 60 words is possible) ...|$|R
5000|$|In the NMOS 6502 and {{derivatives}} (e.g., 6510), {{the simultaneous}} assertion of a hardware interrupt line {{and execution of}} [...] was not accounted for in the design - the [...] instruction will be ignored in such a case. Also, {{the status of the}} <b>decimal</b> <b>mode</b> flag in the processor status register is unchanged following an interrupt of any kind. This behavior can potentially result in a difficult to locate bug in the interrupt handler if <b>decimal</b> <b>mode</b> happens to be enabled at the time of an interrupt. These anomalies were corrected in all CMOS versions of the processor.|$|R
5000|$|Features {{include a}} 2-line pixel display (as {{opposed to the}} {{7-segment}} display of several other calculators), and a quiz-like [...] "problem-solving" [...] mode. It also supports limited scientific capabilities, such as parentheses, <b>fixed</b> <b>decimal,</b> fractions, pi, and exponents. It is recommended by Everyday Mathematics.|$|R
50|$|In {{programmer}} mode, inputting {{a number}} in decimal {{has a lower}} and upper limit, depending on the data type, and must always be an integer. Data type of number in <b>decimal</b> <b>mode</b> is signed n-bit integer when converting from number in hexadecimal, octal, or binary mode.|$|R
50|$|A {{word has}} the range &minus;1,073,741,823 to 1,073,741,823 (inclusive) in binary mode, and &minus;9,999,999,999 to 9,999,999,999 (inclusive) in <b>decimal</b> <b>mode.</b> The sign-and-magnitude {{representation}} of integers in the MIX architecture distinguishes between “&minus;0” and “+0.” This contrasts with modern computers, whose two's-complement representation of integer quantities includes a single representation for zero, but whose range {{for a given}} number of bits includes one more negative integer {{than the number of}} representable positive integers.|$|R
5000|$|Once the {{accumulator}} {{and index}} registers have been preserved, the ISR {{can use them}} as needed. When the ISR has concluded its work, it would restore the registers and then resume the interrupted foreground task. Again, the following NMOS code is typical: pla tayrestore Y-register pla taxrestore X-register plarestore accumulator rtiresume interrupted taskA consequence of the [...] instruction is the MPU will return to <b>decimal</b> <b>mode</b> if that was its state {{at the time of}} the interrupt.|$|R
50|$|The Ricoh 2A03 or RP2A03 (NTSC version) / Ricoh 2A07 or RP2A07 (PAL version) is the 8-bit {{microprocessor}} in the Nintendo Entertainment System {{video game}} console manufactured by Ricoh. It contained a second source MOS Technology 6502 core, modified to disable the 6502's binary-coded <b>decimal</b> <b>mode,</b> with 22 memory-mapped I/O registers that controlled an APU, rudimentary DMA, and game controller polling. It {{was also used}} as a sound chip and secondary CPU by Nintendo's arcade games Punch-Out!! and Donkey Kong 3.|$|R
5000|$|The display {{has eight}} digits, {{with both a}} minus sign and an {{overflow}} indicator dot on the right hand side. The decimal point is [...] "floating"—it is positioned automatically by the calculator logic. This was an advanced feature for the time; many desk calculators of this era had <b>fixed</b> <b>decimal</b> points and required very wide displays to maintain a minimum level of precision across {{the entire range of}} numbers available. The QT-8D's floating decimal allowed its display to be much narrower while still keeping eight digits of precision.|$|R
5000|$|The methods {{by which}} the MPU state is {{preserved}} and restored within an ISR will vary with the {{different versions of the}} 65xx family. For NMOS processors (e.g., 6502, 6510, 8502, etc.), there can be only one method {{by which the}} accumulator and index registers are preserved, as only the accumulator can be pushed to and pulled from the stack. [...] Therefore, the following ISR entry code is typical: phasave accumulator txa phasave X-register tya phasave Y-register cldensure binary modeThe [...] instruction is necessary because, as previously noted, NMOS versions of the 6502 do not clear the [...] (<b>decimal</b> <b>mode)</b> flag in the status register when an interrupt occurs.|$|R
40|$|Abstract. On {{the demand}} of {{miniaturization}} of antenna, {{this paper presents}} a circular microstrip antenna whose part of its port is sealed. Changing part of its magnetic wall into electric wall, then a <b>decimals</b> <b>mode</b> which exist between 01 TM and 11 TM is proposed. Elaborating the theory of reducing the resonant frequency with Bessel function’s characteristics and resonance formula of circular microstrip antenna. Using the HFSS for simulation, the resonant frequency of the antenna change from 3. 0 GHz to 1. 2 GHz. The results prove the reliability of theory analysis. The size could be reduced nearly 60 % compared with ordinary antenna. The antenna has a simple structure and {{can be applied to}} engineering application...|$|R
40|$|In many applications, {{the present}} 16 -bit <b>fixed</b> <b>decimal</b> point {{arithmetic}} is insufficient. The processors {{of the next}} generation will use the floating decimal point representation of numbers and arithmetic. Of possible solutions, the single-chip processor is best suited to mass production and much preferred for real time operation. The existing processors use hardware multipliers, using the Booth algorithm; their calculating unit consists of a multiplier and an adder, working in parallel and pipeline formats. A floating decimal point processor, developed in the Heinrich Hertz Institute, is described. Its most distinctive feature is the complexity of calculations and addressings, and a new 'add and shift' multiplication. A design aid programme system for specific application has been also developed. The hardware simulation works faster than the software method...|$|R
50|$|Another {{important}} {{use of the}} 6500 {{family was}} in video games. The first {{to make use of}} the processor design was the Atari 2600 video game console. The 2600 used an offshoot of the 6502 called the 6507, which had fewer pins and, as a result, could address only 8 KB of memory. Millions of the Atari consoles would be sold, each with a MOS processor. Another significant use was by the Nintendo Entertainment System and Famicom. The 6502 used in the NES was a second source version by Ricoh, a partial system-on-a-chip, that lacked the binary-coded <b>decimal</b> <b>mode</b> but added 22 memory-mapped registers (and on-die hardware) for sound generation, joypad reading, and sprite list DMA. Called 2A03 in NTSC consoles and 2A07 in PAL consoles (the difference being the memory divider ratio and a lookup table for audio sample rates), this processor was produced exclusively for Nintendo.|$|R
40|$|Each part {{has also}} an {{illustrated}} title-page. I. The {{construction of the}} circle {{in relation to the}} science of form and magnitude. [...] II. The construction of the circle in relation to the science of quantity and number. [...] III. Elements of the circle and the theory of curvature. [...] IV. Analysis of the circle, and <b>decimal</b> cyclometry. <b>Mode</b> of access: Internet...|$|R
5000|$|The 65C02, and the 65C816/65C802 when {{operating}} in emulation mode, require less code, {{as they are}} able to push and pull the index registers without using the accumulator as an intermediary. [...] They also automatically clear <b>decimal</b> <b>mode</b> before executing the ISR. [...] The following is typical: phasave accumulator phxsave X-register physave Y-registerUpon finishing up, the ISR would reverse the process: plyrestore Y-register plxrestore X-register plarestore accumulator rtiresume interrupted taskAs previously stated, there is a little more complexity with the 65C816/65C802 when {{operating in}} native mode due to the variable register sizes and the necessity of accounting for the [...] and [...] registers. In the case of the index registers, they may be pushed without regard to their sizes, as changing sizes automatically sets the most significant byte (MSB) in these registers to zero and no data will be lost when the pushed value is restored, provided the index registers are the same size they were when pushed.|$|R
40|$|International audienceWe {{present a}} novel method for {{hardware}} design of combined binary/decimal multi-operand adders. More specifically, we apply this method to architectures based on binary CSA (carry-save adder) trees, which {{are of interest}} for VLSI implementation of high performance multipliers and other low latency arithmetic units. A remarkable feature of the proposed method {{is that it allows}} the reuse of any binary CSA for computing the sum of BCD operands. Decimal corrections are performed in parallel, separately from the computation of the binary sum, such that the layout of the binary carry-save adder does not require any further rearrangement. As a result, the latency of the binary operation is unaffected by the incorporation of hardware support for decimal, while the latency for the <b>decimal</b> <b>mode</b> is close to the latency figures of dedicated decimal multi-operand adders. We show that our combined architecture is competitive in terms of area and delay with respect to other representative proposals, and that it has a more regular layout when implemented in a submicron VLSI technology...|$|R
5000|$|The ALU {{can work}} either in binary or binary-coded <b>decimal</b> (BCD) <b>mode.</b> Variable-length {{instructions}} let the programmer treat {{data in the}} upper 32 registers as entities between one and eight bytes in length — for example, two eight-byte values (e.g. mantissa of a floating-point number) can be added using a single instruction. This feature reduces the number of loops {{that need to be}} programmed. [...] The CPU has an interrupt mechanism with up to 127 vectors. For direct memory access, the CPU can be halted by an external device.|$|R
50|$|In {{financial}} calculations, {{a number}} is often rounded {{to a given}} number of places (for example, to two places after the decimal separator for many world currencies). Rounding to a <b>fixed</b> number of <b>decimal</b> places {{in this way is}} an orthographic convention that does not maintain significance, and may either lose information or create false precision.|$|R
40|$|The {{topic of}} this work {{is the issue of}} {{processing}} decimal numbers using binary hardware units. Making use of specialized hardware for this purpose is problematic due to both number systems being incompatible. The thesis is focused specifically on <b>fixed</b> point <b>decimal</b> numbers passed in the form of ASCII character strings and on the FPGA technology. The proposed solution lies in creating hardware units that allow sequential loading and printing of decimal numbers in the mentioned form digit by digit. In terms of the content {{of this work}}, it introduces suitable algorithms and describes the realization of the proposed units. It results in their efficient, configurable, portable and reusable implementation...|$|R
25|$|Fixed-point {{representation}} uses integer hardware operations {{controlled by}} a software implementation of a specific convention about {{the location of the}} binary or decimal point, for example, 6 bits or digits from the right. The hardware to manipulate these representations is less costly than floating point, and {{it can be used to}} perform normal integer operations, too. Binary fixed point is usually used in special-purpose applications on embedded processors that can only do integer arithmetic, but <b>decimal</b> <b>fixed</b> point is common in commercial applications.|$|R
2500|$|In some {{contexts}} it {{is desirable}} to round a given number [...] to a [...] "neat" [...] fraction — that is, the nearest fraction =/ whose numerator [...] and denominator [...] do not exceed a given maximum. [...] This problem is fairly distinct from that of rounding a value to a <b>fixed</b> number of <b>decimal</b> or binary digits, or to a multiple of a given unit [...] [...] This problem is related to Farey sequences, the Stern–Brocot tree, and continued fractions.|$|R
5000|$|Fixed-point {{representation}} uses integer hardware operations {{controlled by}} a software implementation of a specific convention about {{the location of the}} binary or decimal point, for example, 6 bits or digits from the right. The hardware to manipulate these representations is less costly than floating point, and {{it can be used to}} perform normal integer operations, too. Binary fixed point is usually used in special-purpose applications on embedded processors that can only do integer arithmetic, but <b>decimal</b> <b>fixed</b> point is common in commercial applications.|$|R
5000|$|In some {{contexts}} it {{is desirable}} to round a given number x to a [...] "neat" [...] fraction — that is, the nearest fraction z = m/n whose numerator m and denominator n do not exceed a given maximum. This problem is fairly distinct from that of rounding a value to a <b>fixed</b> number of <b>decimal</b> or binary digits, or to a multiple of a given unit m. This problem is related to Farey sequences, the Stern-Brocot tree, and continued fractions.|$|R
5000|$|This {{representation}} allows rapid multiplication and division, but {{may require}} shifting by {{a power of}} 10 during addition and subtraction to align the decimal points. It is appropriate for applications with a <b>fixed</b> number of <b>decimal</b> places that do not then require this adjustment - [...] particularly financial applications where 2 or 4 digits after the decimal point are usually enough. Indeed, this is almost a form of fixed point arithmetic since {{the position of the}} radix point is implied.|$|R
5000|$|Instructions were <b>fixed</b> length (12 <b>decimal</b> digits), {{consisting}} of a 2-digit [...] "op code", a 5-digit [...] "P Address" [...] (usually the destination address), and a 5-digit [...] "Q Address" [...] (usually the source address or the source immediate value). Some instructions, such as the B (branch) instruction, only used the P Address, and later smart assemblers included a [...] "B7" [...] instruction that generated a 7-digit branch instruction (op code, P address, and one extra digit because the next instruction had to start on an even-numbered digit).|$|R

