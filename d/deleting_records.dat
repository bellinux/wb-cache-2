16|226|Public
25|$|<b>Deleting</b> <b>records</b> from a {{database}} is relatively easy. The index can stay the same, {{and the record}} can just be marked as deleted. The database remains in sorted order. If there are {{a large number of}} deletions, then searching and storage become less efficient.|$|E
40|$|This chapter guides {{you through}} basic ProCite functions, {{including}} entering information into a ProCite database, sorting records, searching a database, printing bibliographies, and citing references within Microsoft Word. First {{you must have}} installed the full ProCite program, which includes folders that contain the Sample Database and various output styles. If another user has experimented with the sample database by adding, modifying, or <b>deleting</b> <b>records,</b> {{you may want to}} reinstall ProCite to start with a fresh copy...|$|E
40|$|The bachelor’s thesis {{describes}} {{the creation and}} implementation of component {{for the management of}} electronic library in the Joomla content management system. In the introduction, there are explain the basic concepts, such as what is a component or CMS. The rest of the work is focused on the creation of its own component. The final application allows user to execute basic operations such as adding and <b>deleting</b> <b>records</b> in the system. The entire application is programmed in PHP language with the use of certain internal Joomla content management system functions and interact with MySQL database. The main aim of this work is to create a free software, which can be further modify and extend...|$|E
5000|$|Status: {{normally}} “valid” (there {{are special}} cases for <b>deleted</b> <b>records)</b> ...|$|R
50|$|More recently, {{the rise}} of digital media has {{eliminated}} much {{of the cost of}} music distribution, and companies have begun to see <b>deleted</b> <b>records</b> for their long tail potential, selling via iTunes and other online means. A single company, ArkivMusic, has struck deals with all four major publishers (and numerous minor ones) of classical music recordings to make their <b>deleted</b> <b>records</b> available via a burn-on-demand service.|$|R
50|$|<b>Deleting</b> <b>recorded</b> {{programmes}} {{from the}} programme library while recording another programme, is also quite {{likely to cause}} the box to crash.|$|R
40|$|This diploma thesis {{deals with}} {{operation}} DELETE in coalesced hashing. First {{of all we}} talk about principles of hashing itself and we describe some basic types of hashing. Chapter 3 is devoted to coalesced hashing and creating the corresponding hash table using di erent inserting methods with or without cellar presence. Then, three algorithms for <b>deleting</b> <b>records</b> form hash table are introduced. Their implementaion is discussed in detail for every inserting method of coalesced hashing. Simulated data experiments follow the theoretical part of the thesis. They are focused on comparing time consumption of the delete algorithms as well as search performance before/after delete. The presented algorithms are implemented in C language and are available on enclosed CD together with the measured results...|$|E
40|$|When {{developing}} server-side scripting using Microsoft’s Active Server Pages {{and their}} Internet Information Server (IIS), either VBScript or JScript are available. The language {{of choice for}} most developers is VBScript since it is closely akin to Visual Basic and Visual Basic for Applications. However, for those developers that are more familiar with Java and JavaScript, JScript is a comfortable alternative. The differences between VBScript and JScript lie primarily in the syntax {{and not in the}} functionality. The examples interact with an Oracle database: to connect to the database; create record sets; and adding, changing, and <b>deleting</b> <b>records</b> shows identical logic structure. Where the use of JScript rather than VBScript can become rather tedious is the scarcity of functions in JScript that are available in VBScript. The solution is to write comparable user-defined functions in JScript as demonstrated by the FormatCurrency function...|$|E
40|$|AbstractRange image {{acquisition}} {{can be defined}} as the process of determining the physical distance from a given observation point to all points of consideration in a three-dimensional (3 D) surface object. The technology of range finders has been used for many years in military and airborne remote sensing survey applications. This paper suggests the use of computer databases (instead of mathematical formulas) for modeling 3 D surfaces. The basic concept is the proper selection of representative samples from the measured range values to be records in the model database. The main contribution in this paper is developing an Intelligent Database Management System (IDMS) used for selecting samples and giving depth prediction at a given space point. The IDMS performs standard database operations such as adding, updating and <b>deleting</b> <b>records</b> in order to minimize the data storage memory size and prediction error. Search for specific data which are not previously stored in the database is impossible in classical database management systems (DMS) ...|$|E
40|$|AbstractThe Extensible Storage Engine (ESE) {{database}} is a {{data storage}} technology developed by Microsoft. It is mainly used by Windows OS and its web browser. It {{is possible to}} easily delete a table or a record in the database using the ESENT API. However, there are insufficient papers and relevant information how about recovering <b>deleted</b> <b>records.</b> Previous works apply only to some tables and fail to recover deleted data perfectly. In this paper, we analyzed {{the structure of the}} ESE database and present a general-use technique to recover <b>deleted</b> <b>records</b> and tables. We developed a tool to implement the technique, and assessed the performance of the proposed tool...|$|R
40|$|Part 2 : Asian Conference on Availability, Reliability and Security (AsiaARES) International audienceNowadays, {{forensic}} on flash memories {{has drawn}} much attention. In this paper, a recovery method for SQLite database history records (I. e. updated and <b>deleted</b> <b>records)</b> form YAFFS 2 is proposed. Based on the out-of-place-write strategies in NAND flash memory required by YAFFS 2, the SQLite history recorders can be recovered and ordered into timeline by their timestamps. The experiment {{results show that}} the proposed method can recover the updated or <b>deleted</b> <b>records</b> correctly. Our method can help investigators to find the significant information about user actions in Android smart phones by these history recorders, although they seem to have been disappeared or deleted...|$|R
50|$|A {{tombstone}} is a <b>deleted</b> <b>record</b> in {{a replica}} of a distributed data store. The tombstone is necessary, as distributed data stores use eventual consistency, where only a subset of nodes where the data is stored must respond before an operation {{is considered to be}} successful.|$|R
40|$|Abstract: A {{database}} can {{be stored}} in a centralized manner, or its fragments can be dis-tributed in a set of nodes in a network [1]. Some fragments {{can be stored}} in a single node, or in more than one node (are replicated) [2]. The operations required by client (as reading, adding, updating, or <b>deleting</b> <b>records)</b> could be performed over the fragments according to the client rights for the mentioned fragment and the fragment rights (read rights and write rights) in the node where the operation is required. The distribution of the fragments in the database nodes and the rights allocation can be per-formed in a static mode by specifying exactly the rights and placement for each fragment, or can be performed in a dynamic mode taking into account factors as: the node rules for fragment management or the requests flow in the distributed database. In the current paper is proposed a method for a dynamic distribution of the fragments in the nodes of a distributed database...|$|E
40|$|I hereby {{declare that}} I am the sole {{author of this}} thesis. I authorize the University of Waterloo to lend this thesis to other {{institutions}} or individuals {{for the purpose of}} scholarly research. I further authorize the University of Waterloo to reproduce this thesis by photo-copying or by other means, in total or in part, at the request of other institutions or individuals for the purpose of scholarly research. iii The problem of records retention is often viewed as simply <b>deleting</b> <b>records</b> when they have outlived their purpose. However, in the world of relational databases there is no standardized notion of a business record and its retention obligations. Unlike physical documents such as forms and reports, information in databases is organized such that one item of data may be part of various legal records and consequently subject to several (and possibly conflicting) retention policies. This thesis proposes a framework for records retention in relational database systems. It presents a mech...|$|E
40|$|The age of Internet {{technology}} has introduced {{new types of}} attacks to new assets {{that did not exist}} before. Databases that represent information assets are subject to attacks that have malicious intentions, such as stealing sensitive data, <b>deleting</b> <b>records</b> or violating the integrity of the database. Many counter measures have been designed and implemented to protect the databases and the information they host from attacks. While preventive measures could be overcome and detection measures could detect an attack late after damage has occurred, {{there is a need for}} a recovery algorithm that will recover the database to its correct previous state before the attack. Numerous damage assessment and recovery algorithms have been proposed by researchersIn this work, we present an efficient lightweight detection and recovery algorithm that is based on the matrix approach and that can be used to recover from malicious attacks. We compare our algorithm with other approaches and show the performance results. PublishedN/...|$|E
50|$|Initially, {{the user}} has {{to create a}} Base in Airtable. Then, Airtable's API {{can be used to}} create, update, read or <b>delete</b> <b>records.</b> At present, Airtable's API does not allow users to create or modify the Base schema. These {{features}} will be made available in Airtable's Metadata API which is stated to be released soon.|$|R
40|$|Considers (82) S. 1762. Classified {{material}} has been <b>deleted.</b> <b>Record</b> {{is based on}} bibliographic data in CIS US Congressional Committee Hearings Index. Reuse except for individual research requires license from Congressional Information Service, Inc. Indexed in CIS US Congressional Committee Hearings Index Part VConsiders (82) S. 1762. Classified {{material has}} been deleted. Mode of access: Internet...|$|R
40|$|Space {{reservation}} {{is important}} in allocating and releasing storage space in DBMSs to support recoverable actions. Since most existing space reservation methods are designed to perform well when few data pages have spaces reserved {{by more than one}} transaction, they are not suitable for some of the newly emerging applications, such as workflow and inventory control systems. In these applications, many concurrent transactions frequently insert and <b>delete</b> <b>records</b> into/from a relatively small table. This paper proposes a new space reservation method that performs well for these types of applications by extending the lock control structures to keep detailed and up-to-date information in a reserved state. This paper also shows, by simulation, that the new method performs better than existing ones for applications in which many concurrent transactions frequently insert and <b>delete</b> <b>records</b> into/from a table, and even for applications where data pages rarely have space reserved by more [...] ...|$|R
40|$|Evaluation studies {{often lack}} sophistication in their {{statistical}} analyses, particularly {{where there are}} small data sets or missing data. Until recently, {{the methods used for}} analysing incomplete data focused on removing the missing values, either by <b>deleting</b> <b>records</b> with incomplete information or by substituting the missing values with estimated mean scores. These methods, though simple to implement, are problematic. However, recent advances in theoretical and computational statistics have led to more flexible techniques with sound statistical bases. These procedures involve multiple imputation (MI), a technique in which the missing values are replaced by m > 1 estimated values, where m is typically small (e. g. 3 – 10). Each of the resultant m data sets is then analysed by standard methods, and the results are combined to produce estimates and confidence intervals that incorporate missing data uncertainty. This paper reviews the key ideas of multiple imputation, discusses the currently available software programs relevant to evaluation studies, and demonstrates their use with data from a study of the adoption and implementation of information technology in Bali, Indonesia. I Gusti Ngurah Darmawa...|$|E
40|$|In {{this work}} {{the effect of}} {{selective}} recording from older animals on estimates of heritability is analysed. Heritability of litter size was estimated in a pig population where data were selectively recorded for the older sows. Estimates were obtained in different data sets derived from all the available information. Data set were compared in terms of predictive ability. Underestimated heritability values were obtained when all available data were used. A maternal trait was also simulated and missing data generated by <b>deleting</b> <b>records</b> from females wit-hout known parents. Different animal models, usually applied {{when there is no}} selection or selective breeding is carried out, were considered in the heritability estimation of this trait. Results showed that none of these models offered unbiased estimates. Only the models that took into account the effect on the residual mean and the gene-tic mean and variance removed an important part of this bias. However, to be applied, selection carried out should be known. It is not obvious how to overcome a selective recording problem when the selection process followed is unknown...|$|E
40|$|Motivation: Phylogenetic {{estimates}} from published studies can be archived using general plat-forms like Dryad (Vision, 2010) or TreeBASE (Sanderson et al., 1994). Such services fulfill {{a crucial role}} in ensuring transparency and reproducibility in phylogenetic research. However, digital tree data files often require some editing (e. g. rerooting) to improve the accuracy and reusability of the phylogenetic statements. Furthermore, establishing the mapping between tip labels used in a tree and taxa in a single common taxonomy dramatically improves the ability of other researchers to re-use phylogenetic estimates. As the process of curating a published phylogenetic estimate is not error-free, retaining a full record of the provenance of edits to a tree is crucial for openness, allow-ing editors to receive credit for their work and making errors introduced during curation easier to correct. Results: Here, we report the development of software infrastructure to support the open curation of phylogenetic data by the community of biologists. The backend of the system provides an inter-face for the standard database operations of creating, reading, updating and <b>deleting</b> <b>records</b> by making commits to a git repository. The record of the history of edits to a tree is preserved by git’s version control features. Hosting this data store on GitHu...|$|E
5000|$|... was a Swedish {{icebreaker}} {{launched in}} 1951 and <b>deleted</b> from <b>records</b> in 1998.|$|R
40|$|Continuation of {{hearings}} held in fall 1958. Classified material has been <b>deleted.</b> <b>Record</b> {{is based on}} bibliographic data in CIS US Congressional Committee Hearings Index. Reuse except for individual research requires license from Congressional Information Service, Inc. Indexed in CIS US Congressional Committee Hearings Index Part VIIContinuation {{of hearings}} held in fall 1958. Classified material has been deleted. Mode of access: Internet...|$|R
50|$|VRO is a {{container}} format for multiplexed audiovisual content. VRO file is an {{equivalent to a}} collection of DVD-Video VOB files. If one doesn't care about edits (e.g., <b>deleting</b> <b>recorded</b> videos), one can play the VRO directly {{as if it were}} a standard DVD-Video VOB file. Fragmented VRO files are not widely supported by software players and video editing software.|$|R
40|$|The {{problem of}} records {{retention}} is {{often viewed as}} simply <b>deleting</b> <b>records</b> when they have outlived their purpose. However, {{in the world of}} relational databases there is no standardized notion of a business record and its retention obligations. Unlike physical documents such as forms and reports, information in databases is organized such that one item of data may be part of various legal records and consequently subject to several (and possibly conflicting) retention policies. This thesis proposes a framework for records retention in relational database systems. It presents a mechanism through which users can specify a broad range of protective and destructive data retention policies for relational records. Compared to naïve solutions for enforcing records management policies, our framework is not only significantly more efficient but it also addresses several unanswered questions about how policies can be mapped from given legal requirements to actions on relational data. The novelty in our approach is that we defined a record in a relational database as an arbitrary logical view, effectively allowing us to reduce several challenges in enforcing data retention policies to well-studied problems in database theory. We argue that our expression based approach of tracking records management obligations is not only easier for records managers to use but also far more space/time efficient compared to traditional metadata approaches discussed in the literature. The thesis concludes with a thorough examination of the limitations of the proposed framework and suggestion for future {{research in the area of}} records management for relational database management systems...|$|E
40|$|As {{critical}} {{records are}} increasingly stored in electronic form, {{which tends to}} make for easy destruction and clandestine modification, {{it is imperative that}} they be properly managed to preserve their trustworthiness, i. e., their ability to provide irrefutable proof and accurate details of events that have occurred. The need for proper record keeping is further underscored by the recent corporate misconduct and ensuing attempts to destroy incriminating records. Currently, the industry practice and regulatory requirements (e. g., SEC Rule 17 a- 4) rely on storing records in WORM storage to immutably preserve the records. In this paper, we contend that simply storing records in WORM storage is increasingly inadequate to ensure that they are trustworthy. Specifically, with the large volume of records that are typical today, meeting the ever more stringent query response time requires the use of direct access mechanisms such as indexes. Relying on indexes for accessing records could, however, provide a means for effectively altering or <b>deleting</b> <b>records,</b> even those stored in WORM storage. In this paper, we establish the key requirements for a fossilized index that protects the records from such logical modification. We also analyze current indexing methods to determine how they fall short of these requirements. Based on our insights, we propose the Generalized Hash Tree (GHT). Using both theoretical analysis and simulations with real system data, we demonstrate that the GHT can satisfy the requirements of a fossilized index with performance and cost that are comparable to regular indexing techniques such as the B-tree. We further note that as records are indexed on multiple fields to facilitate search and retrieval, the records can be reconstructed from the corresponding index entries even after the records expire and are disposed of. Therefore, we also present a novel method to eliminate this disclosure risk by allowing an index entry to be effectively disposed of when its record expires. 1...|$|E
40|$|APIs (Application Programming Interfaces) {{have been}} as old as {{structural}} programming languages and anyone who is a programmer has used them. According to Wikipedia, APIs are a specification {{to be used as}} interfaces by software components to communicate with each other. APIs have served to communicate and integrate components and applications locally and remotely. SOAP Web Services vs. REST APIs Web services are currently the primary means of exposing APIs over the web. SOAP (Simple Object Access Protocol) and REST (Representational State Transfer) are the technologies used to do so. While SOAP is more suitable for enterprise-wide business services, REST is being preferred for B 2 B use and exposing simpler CRUD (Create Retrieve Update Delete) operations. SOAP based web services are more suitable for composing multiple (fine-grained) web services that can perform business operations such as checking availability of products, notifying the manufacturing application, providing status updates etc. Since REST services are meant to be invoked when a particular URI is accessed, they are modeled to be more or less atomic. They perform operations such as search (retrieval), insert, update or <b>deleting</b> <b>records.</b> These are viewed and referred to as APIs. In common parlance, APIs now mean REST based web services while the term “Web Services ” by itself denotes SOAP based web services. API Explosion on the web Organizations have been looking to become more transparent and share data and services on the web. By using APIs, {{they have been able to}} provide data/services that can be used in other web applications or to build Mashups, which are web applications that are composed of web APIs. Some of the popular use cases for APIs are: Social networking services Product reviews, catalogs and shopping Advertising management Information on specific industries such as construction and real estate Shipment tracking and shipping Credit card validation and payment processing Traffic and weather updates File, video and image sharin...|$|E
50|$|The {{means by}} which a user can stop pages being <b>recorded,</b> and <b>delete</b> <b>records</b> of previously-browsed pages, depends on the product used. If a user is using a {{third-party}} product which may record search such as Google Search (see above), {{it may be necessary}} to remove or stop history collection in multiple places (e.g. in the browser and in Google Search settings).|$|R
5000|$|Cataloguing: {{for staff}} to create, modify, or <b>delete</b> bibliographic <b>records,</b> {{including}} uploading of MARC and MARCXML records.|$|R
40|$|Ensuring {{complete}} irrecoverability of deleted data {{is difficult}} to achieve in modern systems. Simply overwriting data or deploying encryption with ephemeral keys is not sufficient. The mere (previous) existence of <b>deleted</b> <b>records</b> impacts the current system state implicitly at all layers. This {{can be used as}} an oracle to derive information about the past existence of <b>deleted</b> <b>records.</b> Yet there is hope. If all system layers would exhibit history independence, such implicit history-related oracles would disappear. However, achieving history independence effi-ciently is hard {{due to the fact that}} current systems are de-signed to heavily benefit from (data and time) locality at all layers through heavy caching, and existing history indepen-dent data structures completely destroy locality. In this work we devise a way to achieve history indepen-dence while preserving locality (and thus be practical). We then design, implement and experimentally evaluate the first history independent file system (HIFS). HIFS guarantees se-cure deletion by providing full history independence across both file system and disk layers of the storage stack. It pre-serves data locality, and provides tunable efficiency knobs to suit different application history-sensitive scenarios...|$|R
40|$|Investigates DOD {{contract}} {{policies for}} F- 111 tactical fighter experimental (TFX) program. Classified material has been <b>deleted.</b> <b>Record</b> {{is based on}} bibliographic data in CIS US Congressional Committee Hearings Index. Reuse except for individual research requires license from Congressional Information Service, Inc. Indexed in CIS US Congressional Committee Hearings Index Part VIIInvestigates DOD contract policies for F- 111 tactical fighter experimental (TFX) program. Classified material has been deleted. Mode of access: Internet...|$|R
40|$|Reviews {{the status}} and {{progress}} of the U. S. tactical air power program. Classified material has been <b>deleted.</b> <b>Record</b> is based on bibliographic data in CIS US Congressional Committee Hearings Index. Reuse except for individual research requires license from Congressional Information Service, Inc. Indexed in CIS US Congressional Committee Hearings Index Part VIIIReviews {{the status and}} progress of the U. S. tactical air power program. Classified material has been deleted. Mode of access: Internet...|$|R
40|$|Considers (81) S. 2388, (81) S. 2341, (81) H. R. 5748, (81) H. R. 4895. Classified {{material}} has been <b>deleted.</b> <b>Record</b> {{is based on}} bibliographic data in CIS US Congressional Committee Hearings Index. Reuse except for individual research requires license from Congressional Information Service, Inc. Indexed in CIS US Congressional Committee Hearings Index Part VConsiders (81) S. 2388, (81) S. 2341, (81) H. R. 5748, (81) H. R. 4895. Classified {{material has}} been deleted. Microfiche. Mode of access: Internet...|$|R
40|$|Reviews general U. S. defense preparedness, {{including}} {{defense of}} Berlin and FY 60 DOD budget. Classified material has been <b>deleted.</b> <b>Record</b> {{is based on}} bibliographic data in CIS US Congressional Committee Hearings Index. Reuse except for individual research requires license from Congressional Information Service, Inc. Indexed in CIS US Congressional Committee Hearings Index Part VIIReviews general U. S. defense preparedness, including defense of Berlin and FY 60 DOD budget. Classified material has been deleted. Mode of access: Internet...|$|R
5000|$|Valentine {{has also}} issued sound recordings. As the Mystic Umbrellas, he contributed [...] "Journey to the West", a {{keyboard}} piece, to the Deleted Funtime independent tape (<b>Deleted</b> <b>Records,</b> Dec 009, 1980), and as Radio Dromedary contributed {{a work of}} treated shortwave recordings to National Grid 2 (Conventional Tapes, CON 015, 1981). He also issued The Sound of the Sea/The Sound of Pendeen Watch, a sound recording {{of the sea and}} a Cornish lighthouse foghorn (Zennor Hill tapes, 1983).|$|R
5000|$|Deleted files : To {{prevent the}} unintentional {{restoration}} of files {{that have been}} intentionally <b>deleted,</b> a <b>record</b> of the deletion must be kept.|$|R
