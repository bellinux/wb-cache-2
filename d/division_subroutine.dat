1|4|Public
40|$|This manual {{summarizes}} the numerical software {{contained in the}} Applied Mathematics <b>Division</b> <b>Subroutine</b> Library (AMDLIB), the International Mathematical and Statistical Libraries, Inc. (IMSL), and the Numerical Algorithms Group, Ltd. (NAG) mathematical libraries. Seventeen numerical analysis subjects are discussed, and the appropriate subroutines available in the three libraries for solving each type of problem are listed, with our recommendations for particular types of applications...|$|E
2500|$|There was no {{division}} instruction (but various <b>division</b> <b>subroutines</b> were supplied) {{and no way}} {{to directly}} load a number into the accumulator (a [...] "sTore and zero accumulator" [...] instruction followed by an [...] "Add" [...] instruction were necessary for this). [...] There was no unconditional jump instruction, nor was there a procedure call instruction- it {{had not yet been}} invented.|$|R
50|$|It did {{not even}} have {{conventional}} ALU hardware: all arithmetic was done by table lookup in core memory. Addition and Subtraction used a 100-digit table (@ address 00300..00399). Multiplication used a 200-digit table (@ address 00100..00299). In the basic machine <b>division</b> used software <b>subroutines,</b> but optional divide hardware could be installed using a repeated subtraction algorithm. Floating point arithmetic instructions were an available option (if the divide option was installed).|$|R
40|$|I have investigated, {{theoretically}} and experimentally, {{under what}} circumstances Newton division (inversion of the divisor with Newton’s method, followed by division with Barrett’s method) is the fastest algorithm for integer division. The competition mainly consists of a recursive algorithm by Burnikel and Ziegler. For divisions where the dividend has twice as many bits as the divisor, Newton division is asymptotically fastest if multiplication of two n-bit integers {{can be done in}} time O(n c) for c< 1. 297, which is the case in both theory and practice. My implementation of Newton <b>division</b> (using <b>subroutines</b> from GMP, the GNU Multiple Precision Arithmetic Library) is faster than Burnikel and Ziegler’s recursive algorithm (a part of GMP) for divisors larger than about five million bits (one and a half million decimal digits), on a standard PC. Snabb division av stora heltal En jämförelse av algoritme...|$|R

