106|1325|Public
25|$|The Basic Disk Operating System, or BDOS, {{provided}} {{access to}} such operations as opening a file, output to the console, or printing. Application programs would load processor registers with a <b>function</b> <b>code</b> for the operation, and addresses for parameters or memory buffers, and call a fixed address in memory. Since the address was the same independent {{of the amount of}} memory in the system, application programs would run the same way for any type or configuration of hardware.|$|E
5000|$|... #Subtitle level 3: <b>Function</b> <b>code</b> 1 (read coils) and <b>function</b> <b>code</b> 2 (read {{discrete}} inputs) ...|$|E
5000|$|... #Subtitle level 3: <b>Function</b> <b>code</b> 4 (read input registers) and <b>function</b> <b>code</b> 3 (read holding registers) ...|$|E
50|$|Within the dataway, modules are {{addressed}} by slot (geographical addressing). The left-most 22 slots {{are available for}} application modules while the right-most two slots are dedicated to a crate controller. Within a slot the standard defines 16 subaddresses (0-15). A slot commanded by the controller with one of 32 <b>function</b> <b>codes</b> (0-31). Of these <b>function</b> <b>codes,</b> 0-7 are read functions and will transfer data to the controller from the addressed module, while 16-23 are write <b>function</b> <b>codes</b> which will transfer data from the controller to the module.|$|R
50|$|The <b>function</b> <b>codes</b> were {{independent}} of the character set used and the shift state.|$|R
5000|$|... #Subtitle level 2: Format of data of {{requests}} and responses for main <b>function</b> <b>codes</b> ...|$|R
5000|$|For {{a normal}} response, slave repeats the <b>function</b> <b>code.</b> Should a slave want to report an error, it will reply with the {{requested}} <b>function</b> <b>code</b> plus 128 (hex [...] ) (3 becomes 131 = hex [...] ), and will only include one byte of data, {{known as the}} exception code.|$|E
5000|$|... #Subtitle level 3: <b>Function</b> <b>code</b> 15 (force/write {{multiple}} coils) ...|$|E
5000|$|... #Subtitle level 3: <b>Function</b> <b>code</b> 16 (preset/write {{multiple}} holding registers) ...|$|E
50|$|Transmembrane protein 126A is a {{mitochondrial}} {{transmembrane protein}} of unknown <b>function</b> <b>coded</b> {{for by the}} TMEM126A gene.|$|R
5000|$|It {{is one of}} {{the three}} enzyme <b>functions</b> <b>coded</b> by the CAD gene. It is {{classified}} under [...]|$|R
50|$|Earlier {{universal}} {{remote controls}} used a device code/protocol number and three-digit extended <b>function</b> <b>codes</b> for programming via the remote itself, {{or through the}} JP1 interface. These sometimes enable a universal remote control to be programmed to use some extra functions which {{may not have been}} made available even on the original equipment manufacturer's remote control. In later controls, these <b>function</b> <b>codes</b> were extended to a length of five digits.|$|R
5000|$|... #Subtitle level 3: <b>Function</b> <b>code</b> 6 (preset/write single holding register) ...|$|E
50|$|Typical {{instructions}} {{contain a}} <b>function</b> <b>code,</b> the target (or source) register, an index register, a base register and a displacement field. When the <b>function</b> <b>code</b> with its qualifier indicates immediate data, the displacement, base, i, and h fields combine {{to form a}} single 18-bit immediate value. This allows loading, adding, multiplying, etc. by small constants to eliminate a memory reference and the associated storage.|$|E
50|$|The residue code can {{be defined}} as the dual of the <b>function</b> <b>code,</b> or as the residue of some {{functions}} at the 's.|$|E
40|$|Fractal coding {{can usually}} be {{described}} by the mapping f(p) = Ap+ c. A contractive mapping is chosen so that the image can be reconstructed by iteration. But other mappings or functions {{can be used for}} coding images. We call this <b>function</b> <b>coding.</b> In <b>function</b> <b>coding,</b> the images can be represented by vectors or matrices. One of the problems that must be solved is how to find contractive functions. Key words Fractal <b>Coding,</b> <b>Function</b> <b>Coding,</b> Affine Mappings, Contractivity 1 <b>Function</b> <b>coding</b> From [1] we know that fractal coding uses the affine transformation f(p) = Kp + c there the vector p is the image. The fixed point p of a fractal coder is the image for which p = f(p). Reconstruction of a fractal coded image will give us the fixed point. But other functions than f(p) = Kp + c can be used and the image doesn't need to be represented as a vector. In [2] some examples of different types of functions f(p) are discussed. The variable p can have any dimension, it can for example be a [...] ...|$|R
50|$|Requests and {{responses}} follow frame formats described above. This section gives details of data formats of most used <b>function</b> <b>codes.</b>|$|R
5000|$|JBUS {{supports}} <b>function</b> <b>codes</b> 1, 2, 3, 4, 5, 6, 15, and 16 {{and thus}} all the entities described above. However numbering is different with JBUS: ...|$|R
5000|$|The <b>function</b> <b>code</b> (or dual code) {{with respect}} to a curve X, a divisor [...] and the set [...] is {{constructed}} as follows.|$|E
50|$|In {{order to}} provide a {{predictable}} start point, every data frame transmitted always begin with a start code of 1110. Immediately after the start code, a house code (A-P) appears, and after the letter code comes a <b>function</b> <b>code.</b> Function codes may specify a unit number code (1-16) or a command code, the selection between the two modes being determined by the last bit where 0=unit number and 1=command. One start code, one letter code, and one <b>function</b> <b>code</b> is known as an X10 frame and represent the minimum components of a valid X10 data packet.|$|E
5000|$|The <b>function</b> <b>code</b> to be performed. 6 bits are {{assigned}} to the basic code (such as read, write), with a further 10 bits for [...] "modifiers" [...] whose meaning depend on the basic code.|$|E
50|$|More {{complicated}} devices, such as disk drives, {{used these}} 3 bits in device-specific fashions. Typically, a device decoded the 3 bits to give 8 possible <b>function</b> <b>codes.</b>|$|R
5000|$|RFC 6580 IANA Registries for the Remote Direct Data Placement (RDDP) Protocols {{published}} in 2012 defines IANA registries for RDDP error codes, operation <b>codes,</b> and <b>function</b> <b>codes.</b>|$|R
30|$|The {{implementation}} of this algorithm {{is based on a}} modular structure (i.e. using separate <b>functions</b> <b>coded</b> into black boxes). The same structure illustrated in the flow chart is used.|$|R
50|$|The default CAN-ID mapping sorts frames by {{attributing}} a <b>function</b> <b>code</b> (NMT, SYNC, EMCY, PDO, SDO...) to {{the first}} 4 bits, so that critical functions are given priority. This mapping can however be customized for special purposes (except for NMT and SDO, required for basic communication).|$|E
5000|$|Instructions were {{represented}} as 30-bit {{words in the}} following format: f 6 bits <b>function</b> <b>code</b> [...] j 3 bits jump condition designator [...] k 3 bits partial word designator [...] b 3 bits which index register to use [...] y 15 bits operand address in memory ...|$|E
5000|$|Rika Morinaga (born April 25, 1980 in Tokyo, Japan) is a Japanese {{singer and}} voice actress {{represented}} by Exellex. She {{is best known}} for her role as Souseiseki in Rozen Maiden and Makoto [...] "Mako-chan" [...] in Minami-ke. Morinaga is also the lead singer of the goth rock band <b>function</b> <b>code.</b>|$|E
40|$|Image coding {{is a way}} to {{compress}} the amount of data that is needed to describe an image for storage or transmission. For doing this many efficient lossless and lossy methods has been made. In this paper we show that lossless source coding algorithms like run-length and Ziv-Lempel coding and lossy methods like predictive and fractal block coding can be represented by that we call <b>function</b> <b>coding.</b> In <b>function</b> <b>coding</b> the image is mapped upon itself and the mapping parameters are transmitted. The paper further discusses issues of contractivity and reconstruction. Keywords: Image coding, Fractal coding 1...|$|R
50|$|The {{standard}} reserves certain CAN-IDs {{to network}} management and SDO transfers. Some <b>function</b> <b>codes</b> and CAN-IDs {{have to be}} mapped to standard functionality after device initialization, but can be configured for other uses later.|$|R
30|$|DNP 3 Short for Distributed Network Protocol version 3, DNP 3 is {{a modern}} SCADA {{protocol}} that includes security extensions, {{often referred to as}} DNP 3 -SA (DNP 3 Secure Authentication). DNP 3 -SA adds features to DNP 3 such as protection against replay attacks by ensuring message integrity and authentication. The new features are implemented as new <b>function</b> <b>codes</b> of the original DNP 3 protocol. In other words, they are defined at upper layers of the original DNP 3 protocol suite, without modifying previous <b>function</b> <b>codes,</b> so that all legacy monitoring and diagnostic tools for DNP 3 are still valid. This way, DNP 3 -SA is compatible with legacy devices that do not require from security support.|$|R
50|$|DNIX's native {{system call}} was the dnix(2) library function, {{analogous}} to the standard Unix unix(2) or syscall(2) function. It took multiple arguments, {{the first of which}} was a <b>function</b> <b>code.</b> Semantically this single call provided all appropriate Unix functionality, though it was syntactically different from Unix and had, of course, numerous DNIX-only extensions.|$|E
50|$|In {{the example}} above, FNC1 {{is the single}} {{character}} <b>Function</b> <b>Code</b> 1, which specifies that a Code 128 barcode is a GS1-128 code. 00 is the serial shipping container code ("SSCC") AI that designates the following data as a serial shipping container code. 12345678 is the company number. 0000000001 is the container number.|$|E
50|$|This {{translates}} into addresses between 0 and 9,998 in data frames.For example, {{in order to}} read holding registers starting at number 40001, corresponding address in the data frame will be 0 with a <b>function</b> <b>code</b> of 3 (as seen above). For holding registers starting at number 40100, address will be 99. Etc.|$|E
40|$|In this lecture we {{continue}} our discussion of locally testable and locally decodable codes. We introduce the family of Reed-Müller Codes, which takes us diving into the geometry of   m {{and the notion of}} Low Degree Testing. We further introduce the “lines-table ” representation, and a mild yet powerful modification of local decodability, with “reject ” as an optional output answer under cetain limitations 1 Locally Testable Codes In previous lectures we have seen Hadamard <b>Code,</b> Quadratic <b>Functions</b> <b>Code</b> and Reed-Solomon Code. We have proven the Hadamard <b>Code</b> and Quadratic <b>Functions</b> <b>Code</b> to be both locally Testable and locally decodable. However, it was also noted that the Hadamard Code suffers from a major disadvantage in efficiency, being exponential in the input size (i. e. an input word of size n bits is encoded by 2 n bits). For the Quadratic <b>Functions</b> <b>Code</b> things are even a little worse, as it is exp(poly(n)). The Reed-Solomon Code on the other hand is considerably efficient, being polynomial in the input size. But is it locally testable/decodable as well? 1. 1 Local Testability of Reed-Solomon Code Recall the definition of Reed-Solomon Code...|$|R
30|$|Usage and {{operating}} parameters (occupancy time, air change requirement, set-point temperatures, etc.) have been determined by mapping building <b>function</b> <b>codes</b> from ALKIS (Authoritative Real Estate Cadastre Information System [[URL] with the reference building usages of building energy norm DIN V 18599 (ISO 13790).|$|R
40|$|This {{research}} {{examines the}} relationship between United States Navy Human Resource (HR) officers assigned work activities as described by Total Force Manpower Management System (TFFMS) commercial activity (CA) <b>function</b> <b>codes</b> with Society for Human Resource Management (SHRM) body of knowledge standards. A review of the current HR officer career field and HR competencies was performed. A total of (N= 661) cases were drawn from TFMMS and comprised the data set used in factoring HR officers' CA <b>function</b> <b>codes</b> with the body of knowledge standards prescribed by the Society for Human Resource Management. This study enumerates HR officers working in HR related work activities as defined in the SHRM body of knowledge {{and those who are}} performing non-HR related work in the Navy. " [...] p. v...|$|R
