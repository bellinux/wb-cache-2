388|6243|Public
25|$|All six workers' clubs of {{this period}} differ in shape, size, and {{functional}} set. Melnikov's clients (the unions) were not competent in exact functions of these buildings, thus each Melnikov draft is also a <b>functional</b> <b>program</b> with different balance between main hall and other space. The club, according to Melnikov, {{is not a single}} fixed theater hall, but a flexible system of different halls that may be united into a single, large volume when necessary. His larger main halls can be divided into three (Rusakov Club) or two (Svoboda Club) independent halls.|$|E
50|$|The active URI {{scheme was}} {{proposed}} by Hewlett-Packard {{as a means}} to encode a <b>functional</b> <b>program</b> within a URI.|$|E
50|$|He teaches {{two courses}} on the massive {{open online course}} (MOOC) provider, Coursera, namely Functional Programming Principles in Scala and <b>Functional</b> <b>Program</b> Design in Scala.|$|E
40|$|Abstract—Structural {{testing is}} heavily {{used in the}} {{software}} development process {{in the context of}} imperative programming. In order to become applicable to <b>functional</b> <b>programming</b> languages it needs, however, some adaption. We investigate the definition and generation of interprocedural flow graphs for <b>functional</b> <b>programs</b> and identify data flow oriented testing as best choice for the application to <b>functional</b> <b>programming.</b> Special data flow oriented coverage criteria are defined for the use with <b>functional</b> <b>programs.</b> Index Terms—testing, flow analysis, <b>functional</b> <b>programming</b> I...|$|R
50|$|Total <b>functional</b> <b>{{programming}}</b> (also {{known as}} strong <b>functional</b> <b>programming,</b> to be contrasted with ordinary, or weak <b>functional</b> <b>programming)</b> is a programming paradigm that restricts {{the range of}} programs to those that are provably terminating.|$|R
50|$|Bird's {{research}} interests lie in algorithm design and <b>functional</b> <b>programming,</b> {{and he is}} known as a regular contributor to the Journal of <b>Functional</b> <b>Programming</b> and the author of Introduction to <b>Functional</b> <b>Programming</b> using Haskell and other books. His name is associated with the Bird-Meertens Formalism, a calculus for deriving programs from specifications in a <b>functional</b> <b>programming</b> style.|$|R
5000|$|Protean IDE (integrated {{development}} environment) is {{a highly}} <b>functional</b> <b>program</b> written by Rob Hutchinson to assist BlitzBasic programmers. It has full functionality with BlitzPlus, Blitz2D and Blitz3D. It has limited support for BlitzMax.|$|E
5000|$|A lambda lift {{transformation}} takes a {{lambda expression}} and lifts all lambda abstractions {{to the top}} of the expression. The abstractions are then translated into recursive functions, which eliminates the lambda abstractions. The result is a <b>functional</b> <b>program</b> in the form, ...|$|E
50|$|In 2001, Theta Nu Xi {{launched}} a functional Graduate, Alumnae and Professional (GAP) Program, {{the first of}} its kind among multicultural sororities. Theta Nu Xi continues to be the only multicultural sorority with a <b>functional</b> <b>program</b> to initiate and serve professional women beyond the collegiate years.|$|E
40|$|<b>Functional</b> <b>programming</b> is a {{powerful}} style in which to write programs, but students and faculty alike often {{have a hard time}} learning to exploit its power. A pattern language of <b>functional</b> <b>programs</b> can provide programmers with concrete guidance for writing <b>functional</b> <b>programs</b> and also offer a deeper appreciation of functional style. Used effectively, such pattern languages may help <b>functional</b> <b>programming</b> educators reach a broader audience. ...|$|R
50|$|<b>Functional</b> <b>programming</b> is very {{different}} from imperative programming. The most significant differences stem from the fact that <b>functional</b> <b>programming</b> avoids side effects, which are used in imperative programming to implement state and I/O. Pure <b>functional</b> <b>programming</b> completely prevents side-effects and provides referential transparency.|$|R
40|$|In 1989 when <b>functional</b> <b>programming</b> {{was still}} {{considered}} a niche topic, Hughes wrote a visionary paper arguing convincingly ‘why <b>functional</b> <b>programming</b> matters’. More {{than two decades}} have passed. Has <b>functional</b> <b>programming</b> really mattered? Our answer is a resounding ‘Yes!’. <b>Functional</b> <b>programming</b> {{is now at the}} forefront {{of a new generation of}} programming technologies, and enjoying increasing popularity and influence. In this paper, we review the impact of <b>functional</b> <b>programming,</b> focusing on how it has changed the way we may construct programs, the way we may verify programs, and fundamentally the way we may think about programs...|$|R
50|$|Functional {{programs}} do not have assignment statements, that is, {{the value of a}} variable in a <b>functional</b> <b>program</b> never changes once defined. This eliminates any chances of side effects because any variable can be replaced with its actual value at any point of execution. So, functional programs are referentially transparent.|$|E
50|$|Higher-order {{functions}} are rarely used in older imperative programming. A traditional imperative program might use a loop to traverse and modify a list. A <b>functional</b> <b>program,</b> {{on the other}} hand, would probably use a higher-order “map” function that takes a function and a list, generating and returning a new list by applying the function to each list item.|$|E
50|$|Automation Workshop is task {{automation}} {{application for}} Microsoft Windows developed by Febooti Software and released in 2008. It features GUI for creating recurring and repetitive tasks similar to Windows Task Scheduler, that allows to automate file operations, opening programs, if-goto logic, and more. With Automation Workshop {{it is possible}} to make fully <b>functional</b> <b>program</b> called the Task, that can be executed later manually or upon a Trigger.|$|E
50|$|The table shows a {{comparison}} of <b>functional</b> <b>programming</b> languages which compares various features and designs of different <b>functional</b> <b>programming</b> languages.|$|R
50|$|Closures {{are one of}} {{the core}} tools of <b>functional</b> <b>programming,</b> and many {{languages}} support at least this degree of <b>functional</b> <b>programming.</b>|$|R
50|$|The ACM SIGPLAN International Conference on <b>Functional</b> <b>Programming</b> (ICFP) is {{an annual}} {{academic}} {{conference in the}} field of computer science sponsored by the ACM SIGPLAN, in association with IFIP Working Group 2.8 (<b>Functional</b> <b>Programming).</b> The conference focuses on <b>functional</b> <b>programming</b> and related areas of programming languages, logic, compilers and software development.|$|R
50|$|Arranged {{over two}} levels, the {{building}} is organised around a compact plan meeting its <b>functional</b> <b>program</b> of drawing water from the river and pumping it to the nearby water treatment plant or to Lake Kurwongbah dam. The building rises approximately 20 metres as a concrete shaft from its base on the riverbank to four tapered concrete beams supporting the concrete floor of the control room.|$|E
50|$|In April, 2008 the President of Warsaw, Hanna Gronkiewicz-Waltz and Christian Kerez {{signed a}} {{contract}} {{for the design of}} the museum. In summer 2008, Warsaw authorities decided to change the <b>functional</b> <b>program</b> and project of the inside of the building, and as a result, the project had undergone significant change, and design work had to be significantly extended. The final concept of the building was to have been presented in the summer of 2010. However, in May 2012, the City terminated the contract with Christian Kerez.|$|E
50|$|These {{types of}} data {{structures}} are particularly common in logical and functional programming, and in a purely <b>functional</b> <b>program</b> all data is immutable, so all data structures are automatically fully persistent. Persistent data structures can also be created using in-place updating of data and these may, in general, use less time or storage space than their purely functional counterparts. Purely functional data structures are persistent data structures that completely avoid the use of mutable state, but can often still achieve attractive amortized time complexity bounds.|$|E
50|$|During {{the last}} few years many quantum {{programming}} languages based on the <b>functional</b> <b>programming</b> paradigm were proposed. <b>Functional</b> <b>programming</b> languages are well-suited for reasoning about programs.|$|R
40|$|<b>Functional</b> <b>programming</b> {{languages}} {{have banned}} assignment {{because of its}} undesirable properties. The reward of this rigorous decision is that <b>functional</b> <b>programming</b> languages are side-effect free. There is another side to the coin: because assignment {{plays a crucial role}} in Input/Output (I/O), functional languages have a hard time dealing with I/O. <b>Functional</b> <b>programming</b> languages have therefore often been stigmatised as inferior to imperative programming languages because they cannot deal with I/O very well. In this paper we show that I/O can be incorporated in a <b>functional</b> <b>programming</b> language without loss of any of the generally accepted advantages of <b>functional</b> <b>programming</b> languages. This discussion is supported by an extensive account of the I/O system offered by the lazy, purely <b>functional</b> <b>programming</b> language Clean. Two aspects that are paramount in its I/O sys tem make the approach novel with respect to other approaches. These aspects are the technique of explicit multiple enviro [...] ...|$|R
50|$|A purely {{functional}} {{language is a}} language which only admits purely <b>functional</b> <b>programming.</b> Purely <b>functional</b> <b>programs</b> can however be written in languages which are not purely functional.|$|R
50|$|All six workers' clubs of {{this period}} differ in shape, size, and {{functional}} set. Melnikov's clients (the unions) were not competent in exact functions of these buildings, thus each Melnikov draft is also a <b>functional</b> <b>program</b> with different balance between main hall and other space. The club, according to Melnikov, {{is not a single}} fixed theater hall, but a flexible system of different halls that may be united into a single, large volume when necessary. His larger main halls can be divided into three (Rusakov Club) or two (Svoboda Club) independent halls.|$|E
5000|$|T4P {{was one of}} {{the first}} systems {{introduced}} for skeleton programming. [...] The system relied heavily on functional programming properties, and five skeletons were defined as higher order functions: Divide-and-Conquer, Farm, Map, Pipe and RaMP. A program could have more than one implementation, each using a combination of different skeletons. Furthermore, each skeleton could have different parallel implementations. A methodology based on <b>functional</b> <b>program</b> transformations guided by performance models of the skeletons was used to select the most appropriate skeleton to be used for the program as well as the most appropriate implementation of the skeleton.|$|E
50|$|The IMP {{provides}} Program Traceability {{by expanding}} and {{complying with the}} program's Statement of Objectives (SOO), Technical Performance Requirements (TPRs), the Contract Work Breakdown Structure (CWBS), and the Contract Statement of Work (CSOW)—all of {{which are based on}} the Customer's WBS to form the basis of the IMS and all cost reporting. The IMP implements a measurable and trackable program structure to accomplish integrated product development, integrate the <b>functional</b> <b>program</b> activities, and incorporates functional, lower-level and subcontractor IMPs. The IMP provides a framework for independent evaluation of Program Maturity by allowing insight into the overall effort with a level-of-detail that is consistent with levied risk and complexity metrics. It uses the methodology of decomposing events into a logical series of accomplishments having measurable criteria to demonstrate the completion and/or quality of accomplishments.|$|E
50|$|The Symposium on Trends in <b>Functional</b> <b>Programming</b> (TFP) {{is focused}} on {{research}} in the field of <b>functional</b> <b>programming</b> and investigating relationships with other branches of computer science.|$|R
40|$|<b>Functional</b> <b>programming</b> {{is perhaps}} the next big wave in {{application}} development. As experienced developers know, <b>functional</b> <b>programming</b> makes its mark by allowing application builders to develop solutions to complicated programming situations cleanly and efficiently. A rich history of functional languages, including Erlang and OCaml, leads the way to F#, Microsoft's effort to bring the elegance and focus of <b>functional</b> <b>programming</b> {{into the world of}} managed code and. NET. With Beginning F#, you have a companion that that will help you explore F# and <b>functional</b> <b>programming</b> in a. NET environment. ...|$|R
5000|$|John Backus {{presented}} FP in his 1977 Turing Award lecture [...] "Can Programming Be Liberated From the von Neumann Style? A Functional Style and its Algebra of Programs". He defines <b>functional</b> <b>programs</b> {{as being}} {{built up in}} a hierarchical way by means of [...] "combining forms" [...] that allow an [...] "algebra of programs"; in modern language, this means that <b>functional</b> <b>programs</b> follow the principle of compositionality. Backus's paper popularized research into <b>functional</b> <b>programming,</b> though it emphasized function-level programming rather than the lambda-calculus style which {{has come to be}} associated with <b>functional</b> <b>programming.</b>|$|R
5000|$|From the 13th century {{began to}} {{modernize}} the seat of royal and princely expanding existing buildings <b>functional</b> <b>program</b> (such as Wawel Castle, Legnica), and building castles, which initially could be built only {{with the consent of}} the ruler. For this reason, the oldest castles have public character of the building. Initially, in the 13th century, the characteristic elements of the locks were placed in a role within the wood-earth castles, so the first castles were irregular in shape (e.g., in Opole). After the mid-13th century abandoned the construction palatiów to be connected rather with the earlier epoch. Regular shape of castles spread throughout the Polish Kingdom in the reign of Casimir the Great, and built them into this shape, even in areas of previous castles (Rawa, Łęczyca, Koło). Castles and monasteries built by Joannites (Stare Drawsko, Łagów, Swobnica, Pęzino) and the Teutonic Order, in the state created by them in Prussia (Malbork, Radzyń Chełmiński, Niedzica) and bishops (in Lipowiec). The castles were built or final defense towers (known as stołp) and residential towers (donżon).|$|E
50|$|Not {{only the}} project team, that has changed, the drastic design changes {{followed}} the new <b>functional</b> <b>program</b> and the revised design brief. City authorities {{have lost their}} interest in developing the Wedding Palace {{in the middle of}} a business downtown, where traffic jams can ruin the sequence of wedding ceremonies, and the City Palace Tower subsequently lost its title/core function. In 2011 the 100% office building was rebranded as Evolution Tower together with elimination of the Wedding Palace component and top spaces for post ceremonial celebrations. The lower atrium-skirt and the Crown have been lost, the faceted façade has been totally redesigned as cold-bent, decentralized services engineering concept has been reconsidered in favour of a more conventional centralized system with additional 3 plant levels, and the vertical transportation system based on double-deckers has been replaced by an innovative TWIN system by ThyssenKrupp with completely redesigned core layout. All of that resulted in addition of 5 more levels (from 47 to 52), and at the end none of RMJM original concept has been left except for the spiraling shape and structural scheme with gridlines. The fully reconsidered design concept based on a metaphor of evolution spiral features the white façade ribbon wrapping over the roof in a form of 90-degree twisted infinity symbol, that speaks of philosophical concept of evolution and celebrates the development of human civilization.|$|E
5000|$|The {{emergence}} of the pure, rectilinear, orthogonal grid, or Hippodamian grid, is explained by the natural tendency of people to walk in a straight line, particularly {{in the absence of}} obstacles and on level land. This intuitive explanation leaves the question of pre-grid and post grid non-rectilinear city patterns to be better understood, particularly those on plane territory such as Marrakech. Another potential influence may have been exerted by the second frequent user of city streets - horses. Horses also tend to move in a straight line, particularly at trotting, canter or galloping pace. When horses serve a city and draw chariots singly or in pairs, or, similarly, carts for a variety of transportation and processional functions, straight line travel becomes imperative; turns force a sluggish pace and cumbersome manoeuvres that reduce their efficiency of movement. The need for speed is accentuated by city size; distances to the public functions at the centre increase and, consequently, the need for quick access is intensified. Speed in turn implies straight lines. It is plausible that the drivers for rectilinear layouts may have been man's horses, mules, and carts as much as man himself, spurred by the growth of settlements.The creation of the Radburn pattern is attributed to Clarence Stein but has a lineage of ideas that preceded it in Raymond Unwin and Barry Parker's work that included the use of cul-de-sac and crescent street types. In contrast to the scarcity of records that obscures the original rationale for the grid, the reasons for the Radburn pattern has been articulated clearly in Stein's writings and those of his predecessors., [...] "Radburn" [...] (after a place in New Jersey) now denotes a street network configuration. It signifies a departure from the strict orthogonal geometry and regularity of the grid and a distinct approach to laying out new districts. As a system, it can be described more accurately as a [...] "cellular" [...] network that has a characteristic hierarchy of streets as distinct from identical streets intersecting at regular intervals. Its derivatives and idiosyncratic imitations are often characterized as [...] "cul-de-sac and loop" [...] patterns highlighting the distinguishing street types that are used systematically in this network. A second term equally uncharacteristic is [...] "suburban". This association of a pattern with a location is inaccurate and unintentionally misleading: entire early cities such as Cairo and Fez are structured on this pattern whose newer suburbs follow the grid reversing the urban/suburban relationship. [...] "Suburban" [...] is also devoid of geometric descriptors of the pattern. These shorthand expressions conceal the variety of patterns that emerged in the 20th century that are decidedly neither grids nor [...] "Radburn" [...] and the [...] "system" [...] aspect of the pattern. The [...] "loop and lollipop" [...] label may be a more applicable descriptor of later interpretations of the Radburn model that appear to lack structure and to overlook key elements of the original concept such as its emphasis on pedestrian priority, for example. The pattern's systematic use of the cul-de-sac and loop is decidedly linked to automotive mobility as a means of controlling and guiding its flow. The Radburn pattern is a complex system; more than a series of identical orthogonal city blocks in a linear progression. It rests on a <b>functional</b> <b>program</b> plus an intentional picturesque aesthetic: it avoids straight lines, limits four-way intersections and shuns repetitive blocks all of which enhance its picturesque imagery. To facilitate the discussion, the name [...] "Radburn-like" [...] or [...] "Radburn-type" [...] will be used in the subsequent sections.|$|E
40|$|<b>Functional</b> <b>programming</b> is a {{powerful}} style in which to write programs. However, students and faculty alike often {{have a hard time}} appreciating its beauty and learning to exploit its power. These difficulties arise in part because the functional style requires programmers to think at a higher level of abstraction, and in part because <b>functional</b> <b>programs</b> differ in fundamental ways from programs written in more common styles. A pattern language of <b>functional</b> <b>programs</b> can provide programmers with concrete guidance for writing <b>functional</b> <b>programs</b> {{and at the same time}} offer a deeper appreciation of functional style. Used effectively, such pattern languages will help <b>functional</b> <b>programming</b> educators reach a broader audience of faculty, students, and professionals. The result will be better programmers and better programs. ...|$|R
50|$|Monads {{are used}} in <b>functional</b> <b>programming</b> to express types of {{sequential}} computation (sometimes with side-effects). See monads in <b>functional</b> <b>programming,</b> and the more mathematically oriented Wikibook module b:Haskell/Category theory.|$|R
5000|$|<b>Functional</b> {{reactive}} <b>programming</b> (FRP) is a programming {{paradigm for}} reactive <b>programming</b> on <b>functional</b> <b>programming.</b>|$|R
