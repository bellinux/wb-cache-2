3|10000|Public
50|$|CryoJet / IceJet is a {{derivative}} of the machining process called abrasive waterjet (AWJ) machining. CryoJet/IceJet technology uses ice particles made of water {{coming from a}} running water or freshwater system to cut material. While the ice particles are cutting material, they melt {{and go into the}} water tank of the machine. The pressurized water acting as a cutting jet can be re-used, with adequate filtering, creating a closed water circuit. However, the majority of users <b>do</b> <b>not</b> <b>re-use</b> the water. If more widely used, CryoJet may produce a drastic reduction in the amount of abrasive waste spill currently produced during the water jet cutting process, as no mineral abrasive is used by this technology.|$|E
40|$|This study {{reports on}} the {{performance}} of several applications on the Alewife machine, focusing on emerging applications and evolving architectural mechanisms. It shows that low-latency cache miss handling mechanisms for both local and remote accesses in Alewife make these emerging applications viable candidates for shared-memory parallel processing. The results show that e cient shared memory is an excellent communication mechanism, even for ne-grain applications that <b>do</b> <b>not</b> <b>re-use</b> data. Such applications are thought tofavor message-passing. As expected, traditional coarse-grain applications perform well with Alewife's mechanisms. The results also con rm that hardware support for limited sharing is adequate for a broad range of applications, even on large numbers of processors. Additionally, modeling local cache-miss behavior is important for machines such as Alewife, where remote-miss latencies are only ve times longer than local miss latencies. We introduce two novel performance metrics that account for the e ect of local misses and are more accurate than previously proposed metrics. We conclude that most applications perform well on Alewife. In particular, ne-grain applications can take advantage of Alewife's high integration and e ciency to achieve a new level of performance on scalable shared-memory machines...|$|E
40|$|Understanding design {{practice}} and the design rationale behind it is a growing field of HCI research and yet {{we do not have}} a complete understanding of design practice. This study seeks for a deeper understanding on how interaction designers design and the reasoning behind their design practices. This study reports the results of a recent survey of professional interaction designer practitioners. The aim of the survey is to get a general understanding of different interaction designers’ practices worldwide. The survey involved 51 respondents. The first main finding of the survey is that those designers, who re-use their own work as inspiration search for different kind of external inspiration than those who <b>do</b> <b>not</b> <b>re-use</b> their own work as inspiration. The second main finding is that the selection of design tool has an effect on the changes of the design artifact. In other words, designers generate more similar alternatives of their design artifact, when do not use certain tool. Even though the selection of the tool effects the similarity of the alternatives, the similarity of the concept alternatives does not affect, who is the person who decides about them. More specifically, according to the third main finding, the person who impacts the decision about the design, does not differ depending how similar or different the design alternatives are. The fourth main finding is related to design rationale. The rationale behind interaction design can be understanding what works when looking for inspiration, using paper prototype for communication or concept development, switching to digital tool because the concept is verified or the direction of the design is clear. The importance of this research is the thorough description and analysis of interaction designers’ approaches from practical point of view. This insight can be used for further exploration of more effective and efficient design practices...|$|E
50|$|The hostel {{closed as}} the police {{investigation}} commenced and YHA indicated that they <b>did</b> <b>not</b> wish to <b>re-use</b> the premises. The building was subsequently used for accommodation for military units visiting Jersey.|$|R
50|$|Baike.com is a wiki {{and lets}} its users edit and {{contribute}} material. Frequent users may accumulate credits redeemable for gifts. It has also included features of social networking sites, including chat forums and fan groups. Baike.com is a for-profit business partially supported by advertising and paid support services. Contributors grant Baike.com a perpetual royalty-free license to publish and re-use the content; it <b>does</b> <b>not</b> release the content under a free license and <b>does</b> <b>not</b> allow <b>re-use</b> on other sites.|$|R
50|$|All {{processors}} in the LEON {{series are}} based on the SPARC-V8 RISC architecture. LEON2(-FT) has a five-stage pipeline while later versions have a seven-stage pipeline. LEON2 and LEON2-FT are distributed as a system-on-chip design that can be modified using a graphical configuration tool. While the LEON2(-FT) design can be extended and re-used in other designs, its structure <b>does</b> <b>not</b> emphasise <b>re-using</b> parts of the design as building blocks or enable designers to easily incorporate new IP cores in the design.|$|R
40|$|Short sales {{collided}} with Makowski’s (1983) view that shareholders’ unanimity {{follows from the}} competitiveness of the firm in the stock market. However, once short sales are properly modelled, requiring the shares to be borrowed beforehand, unanimity can be restored. Short sales are no longer an externality and have a price: the lending fee. Unanimity prevails under perfectly elastic demands by both shareholders and shareborrowers. This requires the firm’s shares not to be on special. Stock prices reflect the evaluation by shareholders who <b>did</b> <b>not</b> entirely encumber their shares or shareborrowers who <b>did</b> <b>not</b> fully <b>re-use</b> the shares that they possess...|$|R
50|$|According to The Musical Times Galuppi, with 109 operas, was {{the sixth}} most {{prolific}} opera composer. His output was exceeded by his contemporaries Draghi, Piccinni, Paisiello, Guglielmi, {{and the most}} prolific of all, with 166 operas, Wenzel Müller; the only composer of later generations who approached his output was Offenbach 100 years later. Like most of his contemporaries, Galuppi <b>did</b> <b>not</b> hesitate to <b>re-use</b> his own music, sometimes simply transplanting it {{and at other times}} reworking it substantially.|$|R
50|$|In the Early Medieval period, {{which began}} in the fifth century CE, much of {{southern}} Britain (comprising much of the area that later became the nation-state of England), adopted a variant of Germanic culture from continental Europe, likely due to migration from that region. These Germanic peoples, the Anglo-Saxons, typically <b>did</b> <b>not</b> build or <b>re-use</b> hillforts. However, in Northern and Western Britain, areas that retained a cultural link to the earlier Iron Age, hillfort use continued.|$|R
40|$|Typically, Genetic Programming (GP) {{attempts}} {{to solve a}} problem by evolving solutions over a large, and usually predetermined number of generations. However, overwhelming evidence shows that <b>not</b> only <b>does</b> the rate of performance improvement drop considerably after a few early generations, but that further improvement also comes at a considerable cost (bloat). Furthermore, each simulation (a GP run), is typically independent yet homogeneous: it <b>does</b> <b>not</b> <b>re-use</b> solutions from a previous run and retains the same experimental settings. Some recent research on symbolic regression divides work across GP runs where the subsequent runs optimise the residuals from a previous run and thus produce a cumulative solution; however, all such subsequent runs (or iterations) still remain homogeneous thus using a pre-set, large number of generations (50 or more). This work introduces Wave, a divide and conquer approach to GP whereby a sequence of short but sharp, and dependent yet potentially heterogeneous GP runs provides a collective solution; the sequence is akin to a wave such that each member of the sequence (that is, a short GP run) is a period of the wave. Heterogeneity across periods results from varying settings of system parameters, such as population size or number of generations, and also by alternating use of the popular GP technique known as linear scaling. The results show that Wave trains faster and better than both standard GP and multiple linear regression, can prolong discovery through constant restarts (which as a side e↵ect also reduces bloat), can innovatively leverage a learning aid, that is, linear scaling at various stages instead of using it constantly regardless of whether it helps and performs reasonably even with a tiny population size (25) which bodes well for real time or data intensive training...|$|R
40|$|Group {{communication}} system assist {{the development of}} faulttolerant distributed algorithms by providing precise guarantees on message ordering, delivery, and synchronization. Ensemble is a widely used group {{communication system}} that is highly modular and configurable. Formally verifying Ensemble is a formidable task, but it has wide-ranging benefits, from formal assistance {{in the design of}} new distributed applications, to ensuring the reliability of critical distributed algorithms for all applications that use Ensemble. In this paper, we present a verification framework that we are using the verify Ensemble in the Nuprl proof development system. The framework is based on I/O automata, which are ideal for the verification in some respects: they they specify modular components that range from concrete protocol code to abstract services. But traditional I/O automata <b>do</b> <b>not</b> allow <b>re-use</b> of formal theorems as automata are composed. We present a new type-theoretic basis for I/ [...] ...|$|R
40|$|Abstract. Data mining is an {{interactive}} and iterative process. Users issue series of similar queries until they receive satisfying results, yet currently available data mining systems <b>do</b> <b>not</b> support iterative pro-cessing of data mining queries and <b>do</b> <b>not</b> allow to <b>re-use</b> {{the results of}} previous queries. Consequently, mining algorithms suffer from long processing times, which are unacceptable {{from the point of}} view of inter-active data mining. On the other hand, the results of consecutive data mining queries are usually very similar. This observation leads to the idea of reusing materialized results of previous data mining queries. We present the notion of a materialized data mining view and we propose two novel algorithms which aim at efficient discovery of association rules in the presence of materialized results of previous data mining queries. 1 Overview of Data Mining Processing Data mining, also referred to as knowledge discovery in databases, is a non-trivial process of identifying valid, novel, potentially useful, and ultimately un...|$|R
40|$|This paper {{introduces}} the Service Object Request Management Architecture ("SORMA"), its design issues, and its concepts. It is a software framework for rapid development of object-oriented software modules and their integration into stand-alone and distributed applications. SORMA provides an intelligent "object-bus" for inter-operating and sharing distributed computing and robotics hardware. We investigate the question, why too many valuable {{hardware and software}} systems and components are a "one-of-a-kind" product which <b>do</b> <b>not</b> find economical <b>re-use.</b> For instance, due to the short lifetime of single-usage code, extensive, robust, and verbose exception handling [...] a prerequisite of incremental work [...] is often sacrificed. We analyze the "costs of communication" between the component's builder and all its users, who build solutions. We propose to pay much more attention to interactive exploration frameworks, which support rapid, qualified information gain on context-situated, effic [...] ...|$|R
40|$|Knowledge Engineering is {{the aspect}} of systems {{engineering}} which addresses uncertain process requirements by emphasising the acquisition of knowledge about a process and representing this knowledge in a Knowledge Based System. The discipline has moved from one producing small expert systems to one producing embedded KBS in larger computational solutions. This transition {{has resulted in the}} development of methodologies that guide the knowledge engineering of a product. The KADS methodology is described to show how structured knowledge engineering of a problem can be based on documented techniques for project management, analysis, and design. However, such techniques still result in the development of independent systems in isolated domains and <b>do</b> <b>not</b> optimise the <b>re-use</b> of general knowledge. The CYC project to represent a portable set of general knowledge that {{can be used as a}} basis for any novel system is described. MMI 2 is the third project described which addresses the engineering [...] ...|$|R
50|$|Great grey owls <b>do</b> <b>not</b> build nests, so {{typically}} use nests previously {{used by a}} large bird, such as a raptor. They {{will also}} nest in broken-topped trees and cavities in large trees. In southwestern and northeastern Oregon, the great grey owl has been using man-made platforms for nest sites since the 1980s. The erection of nest platforms for great grey owls was pioneered by Robert Nero in central Canada in the 1970s. Nesting may occur from March to May. Unlike, for example, osprey or white storks, the great grey owl <b>does</b> <b>not</b> predictably <b>re-use</b> nest sites over consecutive years. Four eggs are the usual clutch size. Eggs average 42.7 mm wide and 53.5 mm long. The incubation period is about 30 days, ranging from 28 to 36 days. Brooding lasts 2 to 3 weeks, after which the female starts roosting on a tree near nests. The young jump or fall from the nest at 3 to 4 weeks, and start to fly 1 to 2 weeks after this. Immediately after fledging, the white, fuzzy young must use beak and feet to climb back into trees. The female is on guard at this time and may be aggressive toward potential predators. Most offspring remain near their natal sites for many months after fledging. Normally the male hunts for his mate and the young throughout the nesting period. Once the young begin the fly, the female typically withdraws and the male continues to feed the young until they can hunt on their own in the autumn. The young owls go off on their own by winter.|$|R
40|$|New {{programming}} languages {{that allow}} {{to reduce the}} complexity of software solutions are frequently developed, often as extensions of existing languages. Many implementations thus resort to transforming the extension’s source code to the imperative intermediate representation of the parent language. But approaches like compiler frameworks only allow for re-use of code transformations for syntactically-related languages; they <b>do</b> <b>not</b> allow for <b>re-use</b> across language families. In this paper, we present the ALIA 4 J approach to bring such re-use to language families with advanced dispatching mechanisms like pointcut-advice or predicate dispatching. ALIA 4 J introduces a meta-model of dispatching as a rich, extensible intermediate language. By implementing language constructs from four languages as refinements of this meta-model, we show that {{a significant amount of}} them can be re-used across language families. Another building block of ALIA 4 J is a framework for execution environments that automatically derives an execution model of the program’s dispatching from representations in our intermediate language. This model enables different execution strategies for dispatching; we have validated this by implementing three execution environments whose strategies range from interpretation to optimizing code generation...|$|R
40|$|Abstract: Knowledge Engineering is {{the aspect}} of systems {{engineering}} which addresses uncertain process requirements by emphasising the acquisition of knowledge about a process and representing this knowledge in a Knowledge Based System. The discipline has moved from one producing small expert systems to one producing embedded KBS in larger computational solutions. This transition {{has resulted in the}} development of methodologies that guide the knowledge engineering of a product. The KADS methodology is described to show how structured knowledge engineering of a problem can be based on documented techniques for project management, analysis, and design. However, such techniques still result in the development of independent systems in isolated domains and <b>do</b> <b>not</b> optimise the <b>re-use</b> of general knowledge. The CYC project to represent a portable set of general knowledge that {{can be used as a}} basis for any novel system is described. MMI 2 is the third project described which addresses the engineering of knowledge about communication itself, rather than a discrete problem domain, into the interface of computer systems to improve the interaction with the user, as well as the solving of domain problems...|$|R
40|$|Abstract. New {{programming}} languages {{that allow}} {{to reduce the}} com-plexity of software solutions are frequently developed, often as extensions of existing languages. Many implementations thus resort to transforming the extension’s source code to the imperative intermediate representa-tion of the parent language. But approaches like compiler frameworks only allow for re-use of code transformations for syntactically-related languages; they <b>do</b> <b>not</b> allow for <b>re-use</b> across language families. In this paper, we present the ALIA 4 J approach to bring such re-use to language families with advanced dispatching mechanisms like pointcut-advice or predicate dispatching. ALIA 4 J introduces a meta-model of dispatching as a rich, extensible intermediate language. By implementing language constructs from four languages as refinements of this meta-model, we show that {{a significant amount of}} them can be re-used across language families. Another building block of ALIA 4 J is a framework for execution environments that automatically derives an execution model of the pro-gram’s dispatching from representations in our intermediate language. This model enables different execution strategies for dispatching; we have validated this by implementing three execution environments whose strategies range from interpretation to optimizing code generation. ...|$|R
50|$|From a {{numbering}} perspective the AMD servers did {{fit into}} the xSeries range, under the similar x335 and x336 Intel processor products. These numbers were <b>not</b> <b>re-used</b> in the xSeries range to prevent confusion.|$|R
50|$|The name Carol was re-used in the 1965 season, but was retroactively retired {{when the}} modern naming system was introduced. Edna was reused in 1968 and retired. Hazel was <b>not</b> <b>re-used</b> and was retired.|$|R
50|$|Another {{view is that}} clay pebbles {{are best}} <b>not</b> <b>re-used</b> {{even when they are}} cleaned, due to root growth that may enter the medium. Breaking open a clay pebble after a crop has been shown to reveal this growth.|$|R
50|$|All the {{remaining}} analogue TV was discontinued, {{and the new}} post-DSO multiplexes took over their frequencies plus a couple of new ones. Frequencies above 800 MHz were <b>not</b> <b>re-used</b> as these will be reassigned to 4G mobile phone services.|$|R
40|$|International audienceDynamic {{reconfiguration}} {{of hardware}} resources is increasingly used in applications {{as a way}} to increase performances, resources integration or energy efficiency. As this evolution induces a change of the application execution paradigm, various tools have been set up to develop and manage these applications. But most <b>do</b> <b>not</b> allow direct <b>re-use</b> of legacy code, needing adaptation to match the provided environment. Moreover, partial reconfiguration is only at its early stages, and lacks easy ways of handling. We propose a design methodology and a runtime environment bringing fast integration of legacy hardware accelerators for partial and dynamic reconfigurable hardware architectures. Thanks to it, applications making use of dynamic hardware can be run directly on an Embedded Linux without noticing the reconfiguration flow. Moreover, our design methodology allows providing various implementations of a computation kernel, including both hardware and software ones. The implementation can then be chosen at execution time depending on available resources. In this article, we introduce the generic IP interface description making the re-use process possible. Furthermore, we present the results of a sample application running on our platform using software and hardware implementations. For hardware implementations, we obtain reconfiguration overhead as low as 0. 16 % of the total kernel execution time...|$|R
30|$|High tag {{growth and}} low tag reuse: {{this means that}} users are mainly adding new tags and they are <b>not</b> <b>re-using</b> {{existing}} tags. As a result, the specificity of tags is increasing and this could facilitate users to narrow their search results when using specific tags.|$|R
5000|$|The default AutoNumber type is a start+{{increment}} counter, {{with a start}} {{value of}} 1 and an increment of 1. Although in many instances such an AutoNumber field will appear as if it contains the row count, it <b>does</b> <b>not.</b> Deletion of rows from a table, for example, <b>does</b> <b>not</b> cause AutoNumber fields to be re-numbered, but instead leaves [...] "holes" [...] in the numbering. Similarly, if a transaction to add a row to a table is begun but later aborted, the AutoNumber assigned for that row will <b>not</b> be <b>re-used.</b>|$|R
5000|$|... {{immediate}} predecessor of Yak-120, <b>not</b> built (<b>re-use</b> of designation {{from light}} tourer of 1946).|$|R
50|$|DUKPT {{allows the}} {{processing}} of the encryption to be {{moved away from the}} devices that hold the shared secret. The encryption is done with a derived key, which is <b>not</b> <b>re-used</b> after the transaction. DUKPT is used to encrypt electronic commerce transactions. While {{it can be used to}} protect information between two companies or banks, it is typically used to encrypt PIN information acquired by Point-Of-Sale (POS) devices.|$|R
50|$|The town {{is named}} after the first Fort Montgomery, a {{fortification}} of the American Revolution, stormed by the British on October 6, 1777. Although a loss for American forces, the battle delayed the British from sailing up the Hudson River in time to relieve Burgoyne's forces at Saratoga. After the demolition of the fort, American defenses centered on West Point, New York, upriver, and the location was <b>not</b> <b>re-used</b> militarily.|$|R
3000|$|..., 2, respectively). The [...] "high rate" [...] cluster (i.e. the one {{giving the}} lowest overall dissatisfaction D) is then {{used as the}} basis to set new (default) policy {{thresholds}} (chacLow and chacHigh) and the whole process repeated. In this manner, it is assumed that any cluster policies extending the low rate state are revoked and <b>not</b> <b>re-used</b> whereas policies encouraging high rate states will be reinforced and provide more suitable resource utilisation.|$|R
5000|$|A pizza saver is made {{of plastic}} and has three (sometimes four) legs. They are often white, and the common {{practice}} is to place one pizza saver {{in the center of}} the pizza before the box lid is closed for delivery. The pizza saver is <b>not</b> <b>re-used</b> and is typically discarded by the patron, although some people have found secondary uses for them [...] such as egg holders when turned upside down.|$|R
50|$|However, 1972 and 1973 {{were slow}} years. Only 7 new models {{were made in}} 1972. Of the 24 models {{appearing}} for 1973, only 3 were new models. Also the cars changed from Mattel's in house Spectraflame colors to mostly-drab, solid enamel colors, which mainline Hot Wheels cars still use today. Due to low sales, {{and the fact that}} the majority of the castings were <b>not</b> <b>re-used</b> in later years, the 1972-3 models are known to be very collectible.|$|R
5000|$|In {{order to}} help IAAS {{providers}} and their customers to reach compliance with the coming EU General Data Protection Regulation (GDPR), who will enter into force 25 May 2018, CISPE has released the CISPE Data Protection Code of Conduct. On {{the top of the}} required compliance to meet with the GDPR, the Code also ensures that IAAS Customers may choose to have their data located and processed exclusively in Europe, and that the supplier will <b>not</b> <b>re-use</b> customer's data.|$|R
50|$|Coco {{fibre can}} be re-used {{up to three}} times with little loss of yield. Coco fibre from diseased plants should <b>not</b> be <b>re-used.</b>|$|R
50|$|Killers {{were often}} used {{in the early days}} of stamps as the postal {{authorities}} wished to ensure that stamps could <b>not</b> be <b>re-used.</b>|$|R
50|$|Usually found close together, {{the nests}} of L. figueresi {{are made up}} of earthen {{material}} with entrances to nests sometimes fused together. Earthen turrets, made up of small balls of mud which form a bumpy exterior and smooth interior, indicate the position of these nests, and the tunnels of these nests are almost perpendicular to the surrounding surface. Cells, coated in shiny secretions, are shortened tunnels that branch off from the main tunnel, and, once used, are normally filled up with dirt and <b>not</b> <b>re-used.</b>|$|R
2500|$|However, some reviews viewed that {{similarity}} as positive, {{and perceived}} it more as progression and evolution than repetition. Stylus Magazine repeated similar sentiments {{as those of}} the previous reviews, but <b>did</b> <b>not</b> feel that <b>re-using</b> a successful formula was a burden, Cosmo Lee saying [...] "it's not Isis' fault that they sound unoriginal these days. All {{you have to do is}} pick up a copy of Decibel, open it to any page, and you’ll find someone counting the group as an influence [...] The songs are still long, the rhythms are still organic, and in general Isis still sounds like Isis". Despite having said this, the review is still very positive. PopMatters repeated the views of Lee, stating Isis are [...] "a band knowing how to execute the formula to near-perfection", and Thom Jurek of Allmusic expanded upon that point further, stating [...] "this set is not a brave leap [...] but a further look up the holy mountain to a new plateau, a hike to sacred ground". Drowned in Sound reviewer Mike Diver, however, viewed the album differently; that Isis have [...] "pushed themselves on this album, striving to achieve something honestly different to what was released before it". An IGN review described it as [...] "unique and free from boundaries", and it has been labeled as [...] "Isis' masterpiece", as well as their [...] "most compelling work to date". Writing for Alternative Press, Aaron Burgess states that [...] "save for the brief distorted squalls of [...] "Garden of Light" [...] and the pummeling metallic grooves of [...] "Not In Rivers, But In Drops," [...] there's barely anything keeping Isis tethered to the rigid [...] "post-metal" [...] genre they helped inspire".|$|R
