580|1192|Public
25|$|The <b>default</b> <b>value</b> {{for this}} entry {{consists}} of products identified by Microsoft testing as {{being unable to}} support AutoRun. This entry should not be altered from its default.|$|E
25|$|When declaring a function, a {{programmer}} can specify {{for one or}} more parameters a <b>default</b> <b>value.</b> Doing so allows the parameters with defaults to optionally be omitted when the function is called, {{in which case the}} default arguments will be used. When a function is called with fewer arguments than there are declared parameters, explicit arguments are matched to parameters in left-to-right order, with any unmatched parameters {{at the end of the}} parameter list being assigned their default arguments. In many cases, specifying default arguments in a single function declaration is preferable to providing overloaded function definitions with different numbers of parameters.|$|E
500|$|Instances {{of value}} types {{do not have}} {{referential}} identity nor referential comparison semantics - equality and inequality comparisons for value types compare the actual data values within the instances, unless the corresponding operators are overloaded. Value types are derived from , always have a <b>default</b> <b>value,</b> and can always be created and copied. Some other limitations on value types are that they cannot derive from each other (but can implement interfaces) and cannot have an explicit default (parameterless) constructor. Examples of value types are all primitive types, such as [...] (a signed 32-bit integer), [...] (a 32-bit IEEE floating-point number), [...] (a 16-bit Unicode code unit), and [...] (identifies a specific point in time with nanosecond precision). Other examples are [...] (enumerations) and [...] (user defined structures).|$|E
50|$|<b>Default</b> <b>values</b> can {{be given}} to the last {{arguments}} to help initializing <b>default</b> <b>values.</b>|$|R
40|$|ASHRAE Standard 152 P (Method of Test for Determining the Design and Seasonal Efficiencies of Residential Thermal Distribution Systems) {{includes}} <b>default</b> <b>values</b> {{for many}} of the input parameters required to calculate delivery system efficiencies. These <b>default</b> <b>values</b> have several sources: measured field data in houses, laboratory testing, simple heat transfer analyses, etc. This paper will document and discuss these <b>default</b> <b>values</b> and their sources for forced air systems. ...|$|R
40|$|Machine {{learning}} algorithms {{have been}} investigated in several scenarios, {{one of them is}} the data classification. The predictive performance of the models induced by these algorithms is usually strongly affected by the values used for their hyper-parameters. Different approaches to define these values have been proposed, like the use of <b>default</b> <b>values</b> and optimization techniques. Although <b>default</b> <b>values</b> can result in models with good predictive performance, different implementations of the same machine learning algorithms use different <b>default</b> <b>values,</b> leading to models with clearly different predictive performance for the same dataset. Optimization techniques have been used to search for hyper-parameter values able to maximize the predictive performance of induced models for a given dataset, but with the drawback of a high computational cost. A compromise is to use an optimization technique to search for values that are suitable for a wide spectrum of datasets. This paper investigates the use of meta-learning to recommend <b>default</b> <b>values</b> for the induction of Support Vector Machine models for a new classification dataset. We compare the <b>default</b> <b>values</b> suggested by the Weka and LibSVM tools with <b>default</b> <b>values</b> optimized by meta-heuristics on a large range of datasets. This study covers only classification task, but we believe that similar ideas could be used in other related tasks. According to the experimental results, meta-models can accurately predict whether tool suggested or optimized <b>default</b> <b>values</b> should be used. CAPESCNPqSÃ£o Paulo Research Foundation (FAPESP) (grant# 2012 / 23114 - 9...|$|R
2500|$|MS-DOS exec {{functions}} always {{load the}} new program into memory as if the [...] "maximum allocation" [...] in the program's executable file header is set to <b>default</b> <b>value</b> 0xFFFF. The EXEHDR utility {{can be used to}} change the maximum allocation field of a program. However, if this is done and the program is invoked with one of the exec functions, the program might behave differently from a program invoked directly from the operating-system command line or with one of the spawn functions (see below).|$|E
2500|$|The {{number of}} {{candidate}} samples per iteration, , is not determined a priori and can vary {{in a wide}} range. Smaller values, for example , lead to more local search behavior. Larger values, for example [...] with <b>default</b> <b>value</b> , render the search more global. Sometimes the algorithm is repeatedly restarted with increasing [...] {{by a factor of}} two for each restart. Besides of setting [...] (or possibly [...] instead, if for example [...] is predetermined by the number of available processors), the above introduced parameters are not specific to the given objective function and therefore not meant to be modified by the user.|$|E
2500|$|This {{is where}} the actual file and {{directory}} data is stored and takes {{up most of the}} partition. Traditionally, the unused parts of the data region are initialized with a filler value of 0xF6 as per the INT1Eh's Disk Parameter Table (DPT) during format on IBM compatible machines, but also used on the Atari Portfolio. 8-inch CP/M floppies typically came pre-formatted with a value of 0xE5; by way of Digital Research this value was also used on Atari ST formatted floppies. Amstrad used 0xF4 instead. Some modern formatters wipe hard disks with a value of 0x00, whereas a value of 0xFF, the <b>default</b> <b>value</b> of a non-programmed flash block, is used on flash disks to reduce wear. The latter value is typically also used on ROM disks. (Some advanced formatting tools allow to configure the format filler byte.) ...|$|E
3000|$|... [...]) is {{performed}} {{based on the}} results of Energy-Reduction and SLAV-Reduction experiments. The <b>default</b> <b>values</b> are obtained after 12 iterations of Energy-Reduction and SLAV-Reduction process with 5 randomly generated workload patterns. The average of 30 % least values of consumed energy and SLA violations are considered as the <b>default</b> <b>values.</b>|$|R
50|$|A {{reset button}} for {{resetting}} the form to <b>default</b> <b>values.</b>|$|R
2500|$|... {{where the}} power [...] is the soft {{thresholding}} parameter. The <b>default</b> <b>values</b> ...|$|R
2500|$|The default IEEE 754 {{exception}} handling behaviour of resumption following pre-substitution of a <b>default</b> <b>value</b> avoids the risks inherent in changing flow of program control on numerical exceptions. For example, in 1996 the maiden {{flight of the}} Ariane 5 (Flight 501) ended in a catastrophic explosion {{due in part to}} the Ada programming language {{exception handling}} policy of aborting computation on arithmetic error, which in this case was a 64-bit floating point to 16-bit integer conversion overflow. In the Ariane Flight 501 case, the programmers protected only four out of seven critical variables against overflow due to concerns about the computational constraints of the on-board computer and relied on what turned out to be incorrect assumptions about the possible range of values for the three unprotected variables because they reused code from the Ariane 4, for which their assumptions were correct. According to William Kahan, the loss of Flight 501 would have been avoided if the IEEE 754 exception-handling policy of default substitution had been used because the overflowing 64-bit to 16-bit conversion that caused the software to abort occurred in a piece of code that turned out to be completely unnecessary on the Ariane 5. The official report on the crash (conducted by an inquiry board headed by Jacques-Louis Lions) noted that [...] "An underlying theme in the development of Ariane 5 is the bias towards the mitigation of random failure. The supplier of the inertial navigation system (SRI) was only following the specification given to it, which stipulated that in the event of any detected exception the processor was to be stopped. The exception which occurred was not due to random failure but a design error. The exception was detected, but inappropriately handled because the view had been taken that software should be considered correct until it is shown to be at fault. [...] Although the failure was due to a systematic software design error, mechanisms can be introduced to mitigate this type of problem. For example the computers within the SRIs could have continued to provide their best estimates of the required attitude information. There is reason for concern that a software exception should be allowed, or even required, to cause a processor to halt while handling mission-critical equipment. Indeed, the loss of a proper software function is hazardous because the same software runs in both SRI units. In the case of Ariane 501, this resulted in the switch-off of two still healthy critical units of equipment." ...|$|E
50|$|The null {{coalescing}} operator replaces null pointers with a <b>default</b> <b>value.</b> The haskell equivalent {{is a way}} of extracting a {{value from}} a Maybe by supplying a <b>default</b> <b>value.</b> This is the function fromMaybe.|$|E
5000|$|... void - The void {{data type}} {{contains}} only one value, undefined. In previous versions of ActionScript, undefined was the <b>default</b> <b>value</b> for instances of the Object class. In ActionScript 3.0, the <b>default</b> <b>value</b> for Object instances is null.|$|E
5000|$|... a {{statement}} that can set groups of data to their <b>default</b> <b>values</b> ...|$|R
5000|$|Preparation: allocates {{memory for}} class {{variables}} and initializing the memory to <b>default</b> <b>values</b> ...|$|R
2500|$|C# 4.0 {{introduces}} optional parameters with <b>default</b> <b>values</b> {{as seen in}} C++. For example: ...|$|R
50|$|A <b>default</b> <b>value</b> {{can define}} whether an {{attribute}} must occur (#REQUIRED) or not (#IMPLIED), {{or whether it}} has a fixed value (#FIXED), or which value should {{be used as a}} <b>default</b> <b>value</b> ("â¦") in case the given attribute is left out in an XML tag.|$|E
50|$|This {{also has}} the effect of {{removing}} any <b>default</b> <b>value</b> set previously.|$|E
5000|$|In linear {{decomposition}} {{we provide}} instead a <b>default</b> <b>value</b> and a difference: ...|$|E
40|$|Under the EU Biocidal Products Directive 98 / 8 /EC, {{comprehensive}} evaluations on substances of the "Third Priority List" {{were conducted}} until 31 st July, 2007. This list includes, among other categories, disinfectants for human hygiene (e. g., skin- and surface disinfection). For environmental exposure assessment of biocides the EU emission scenarios apply. Currently available <b>default</b> <b>values</b> for disinfectants {{are based on}} consumption data from not more than eight hospitals and have originally been raised for other purposes. In order to re-validate these <b>default</b> <b>values</b> a survey on annual consumption data was performed in 27 German hospitals. These data were analysed to provide consumption data per bed and day and per nurse and day for particular categories of active ingredients, and were compared with <b>default</b> <b>values</b> from the EU emission scenario documents. Although a number of deviations were detected, an overall acceptable correspondency between Emission Scenario Documents <b>default</b> <b>values</b> and the current survey data was found...|$|R
5000|$|AttributeNode.{{specified}} [...] - [...] Does {{not create}} Attribute Nodes for <b>default</b> <b>values</b> {{specified in the}} DTD.|$|R
5000|$|C# 4.0 {{introduces}} optional parameters with <b>default</b> <b>values</b> {{as seen in}} Visual Basic and C++. For example: ...|$|R
5000|$|The <b>default</b> <b>value</b> of the Affiliation generic {{attribute}} {{of a thing}} is systemic.|$|E
5000|$|Null Object pattern: Designed {{to act as}} a <b>default</b> <b>value</b> of {{an object}} ...|$|E
5000|$|... simple text {{messages}} using text/plain (the <b>default</b> <b>value</b> for [...] "Content-Type: [...] ") ...|$|E
5000|$|The two {{tasks of}} {{validation}} and augmentation (adding type information and <b>default</b> <b>values)</b> {{should be kept}} separate.|$|R
3000|$|... r, and Q. Based on the {{performed}} experiments, <b>default</b> <b>values</b> can {{be suggested}} for these parameters. For Ï [...]...|$|R
30|$|The {{number of}} {{iterations}} and subsets of the OSEM reconstruction (the <b>default</b> <b>values</b> are 4 iterations and 16 subsets).|$|R
5000|$|To remove {{only the}} <b>Default</b> <b>value</b> {{of the key}} HKLM\SOFTWARE\Foobar (and its data):HKEY_LOCAL_MACHINE\SOFTWARE\Foobar@=- ...|$|E
50|$|In Rexx {{it is also}} {{possible}} to set a <b>default</b> <b>value</b> for a stem.|$|E
50|$|The usual <b>default</b> <b>value</b> is $E0hex/224dec for the {{character}} set in ROM at $E000hex/57344dec.|$|E
5000|$|Optional and Default Implementation No need {{to specify}} the value of every feature, because they have {{reasonable}} <b>default</b> <b>values.</b>|$|R
50|$|With the {{exception}} of the decimal mark (see below), the special characters in the sample UNA segment above are also the <b>default</b> <b>values.</b>|$|R
5000|$|The {{following}} tables shows typical <b>default</b> <b>values</b> {{of certain}} environment variables under English versions of Windows {{as they can}} be retrieved under [...]|$|R
