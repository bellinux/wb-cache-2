293|4243|Public
5000|$|ACM SIGSIM Conference on Principles of Advanced <b>Discrete</b> <b>Simulation</b> (ACM SIGSIM PADS) ...|$|E
50|$|During the 1980s, Hasslacher pioneered with Uriel Frisch and Yves Pomeau the lattice-gas {{method for}} <b>discrete</b> <b>simulation</b> of fluid flow.|$|E
5000|$|Hasslacher, B; Meyer, DA Modeling {{dynamical}} geometry with lattice-gas automata. International Journal of Modern Physics C; Dec. 1998; vol.9, no.8, p. 1597-605 Conference: 7th International Conference on the <b>Discrete</b> <b>Simulation</b> of Fluids, 14-18 July 1998, Oxford, UK ...|$|E
40|$|This paper {{describes}} a simulation specification language and execution environments {{that are being}} used to study the performance of distributed <b>discrete</b> event <b>simulation.</b> First, a simulation programming model based on Chandy-Misra distributed <b>discrete</b> event <b>simulation</b> is presented. Then, the Yaddes simulation specification language is described. Yaddes specifications are translated into C language programs which are then compiled and linked with a runtime support library. Next, the implementation of the run-time support libraries is described. The four libraries currently supported are: (1) traditional, event-list-driven <b>discrete</b> event <b>simulation,</b> (2) distributed <b>discrete</b> event <b>simulation</b> based on multiple, synchronized event lists, (3) Chandy-Misra distributed <b>discrete</b> event <b>simulation,</b> and (4) virtual-time-based distributed <b>discrete</b> event <b>simulation...</b>|$|R
50|$|There are {{generally}} {{two kinds of}} simulations used to model telecommunications networks, viz. <b>discrete</b> and continuous <b>simulations.</b> <b>Discrete</b> <b>simulations</b> are also known as <b>discrete</b> event <b>simulations,</b> and are event-based dynamic stochastic systems. In other words, the system contains a number of states, and is modelled using a set of variables. If {{the value of a}} variable changes, this represents an event, and is reflected in a change in the system’s state. As the system is dynamic, it is constantly changing, and because it is stochastic, {{there is an element of}} randomness in the system. Representation of <b>discrete</b> <b>simulations</b> is performed using state equations that contain all the variables influencing the system.|$|R
40|$|The {{field of}} {{parallel}} <b>discrete</b> event <b>simulation</b> is entering {{a period of}} self-assessment. Fifteen years of investigation has seen great strides in techniques for efficiently executing <b>discrete</b> event <b>simulations</b> on parallel and distributed machines. Still, the <b>discrete</b> event <b>simulation</b> community at large has failed to recognize much of these results. One {{reason for this is}} perhaps a disagreement in the focus and purpose of the parallel <b>discrete</b> event <b>simulation</b> research community (primarily computer scientists) and the <b>discrete</b> event <b>simulation</b> community (a widely diverse group including operations researchers, statisticians, as well as computer scientists). An examination of the parallel <b>discrete</b> event <b>simulation</b> problem from a modeling methodological perspective illustrates some of these differences and reveals potentials for their resolution...|$|R
50|$|Simulation of any {{population}} involves counting {{members of}} the population and is therefore fundamentally a <b>discrete</b> <b>simulation.</b> However, modeling discrete phenomena with continuous equations often produces useful insights. A continuous simulation of population dynamics represents an approximation of the population effectively fitting a curve to a finite set of measurements/points.|$|E
5000|$|SIMUL8 uses dynamic <b>discrete</b> <b>simulation,</b> {{which makes}} it {{possible}} to provide unambiguous and concrete results and proofs - information on how the designed or optimized production system will actually function. The outputs of SIMUL8 simulation are [...] "hard data", values and statistics of performance parameters and metrics of the production system.|$|E
5000|$|... a {{stochastic}} simulation, {{typically used}} for discrete systems where events occur probabilistically and which cannot be described directly with differential equations (this is a <b>discrete</b> <b>simulation</b> {{in the above}} sense). Phenomena in this category include genetic drift, biochemical or gene regulatory networks with small numbers of molecules. (see also: Monte Carlo method).|$|E
40|$|This thesis {{focuses on}} <b>Discrete</b> Event <b>Simulation</b> {{as a time}} saver, applied to {{manufacturing}} industries {{in order to increase}} performance, productivity, and profitability throughout their conducted processes. The thesis provides a base for implementation and more effective use of <b>Discrete</b> Event <b>Simulation</b> in manufacturing systems by applying <b>Discrete</b> Event <b>Simulation</b> technology through an overall performance aspect. A top view of the technology is achieved, including the situation in industries today, through case studies and literature studies and concluding with a future approach on the use of <b>Discrete</b> Event <b>Simulation.</b> The future approach consists of: Firstly, a framework is presented to set the scene when to use <b>Discrete</b> Event <b>Simulation.</b> Secondly, a methodology is proposed to shed light upon how to conduct a <b>Discrete</b> Event <b>Simulation</b> project. Thirdly, <b>Discrete</b> Event <b>Simulation</b> software for shorter and less complex problems is presented, to enable production engineers to become <b>Discrete</b> Event <b>Simulation</b> users. Fourthly, a description on how <b>Discrete</b> Event <b>Simulation</b> can be used to create ORDER and to structure the data, information, and knowledge of the processes in manufacturing systems. The results of the research shows that genuine production-engineering knowledge is an irreplaceable source, essential for achieving maximum competitive advantages and enabling performance-increasing activities to be successful. Structured and correct data and information are needed for DES projects to become as powerful as they can be. However, structured and correct data and information are needed anyway for any process, which is a subject for improvement...|$|R
40|$|In recent years, market {{competitiveness}} exerts {{more pressure}} on process industries to increase their number of products, reduce order sizes and shorten delivery lead time. This causes an expansion of order enquiries from customers, which leads to an insufficient use of scheduling and planning systems to meet these changes. This force process industries to adopt other tools, such as <b>Discrete</b> Event <b>Simulation</b> for supporting their strategic decisions to align with these operational changes.   The objective of this thesis is to understand how <b>Discrete</b> Event <b>Simulation</b> supports strategic decisions prior {{to the implementation of}} operational changes in process industries. Therefore, a case study in the pharmaceutical industry was conducted at AstraZeneca, Södertälje. <b>Discrete</b> Event <b>Simulation</b> was used as a tool to support the strategic decision of implementing the Product Wheel technique as an operational change. Simultaneously, a theoretical review was carried out to investigate types of strategic decisions which can be supported by <b>Discrete</b> Event <b>Simulation</b> use in process industries. Then, contributions and challenges of <b>Discrete</b> Event <b>Simulation</b> use for supporting strategic decisions for operational changes were clarified.     The empirical results indicate the importance of <b>Discrete</b> Event <b>Simulation</b> in supporting deliverability as a competitive priority to AstraZeneca, followed by flexibility and cost as second and third competitive priorities. The analysis also identified the contribution of <b>Discrete</b> Event <b>Simulation</b> in supporting long-term decisions in the company by providing analytical solutions in different scenarios, dynamic visualization and increased knowledge about the simulated operational change. Additionally, two main challenges in the use of <b>Discrete</b> Event <b>Simulation</b> for supporting strategic decision are identified. First, <b>Discrete</b> Event <b>Simulation</b> was not suitable for supporting all kinds of competitive priorities such as quality, environment and innovation. Second, the direction of the communication between the <b>Discrete</b> Event <b>Simulation</b> use and the strategic decisions differs.       A framework is developed to facilitate the use of <b>Discrete</b> Event <b>Simulation</b> for supporting strategic decisions prior to implementing the Product Wheel technique as an operational change. This framework provides a guideline to identify the range of contributions from <b>Discrete</b> Event <b>Simulation</b> use for supporting different types of competitive priorities prior to the implementation of the Product Wheel method. Generally, <b>Discrete</b> Event <b>Simulation</b> could be a useful tool for supporting deliverability, cost and flexibility by implementing the Product Wheel technique, while it has a limited capability when dealing with other strategic decisions such as quality, innovation and environment...|$|R
50|$|More recent methods {{use either}} <b>discrete</b> event <b>simulation</b> or continuous-time <b>simulation.</b> <b>Discrete</b> event <b>simulation</b> models are both {{stochastic}} (with random components) and dynamic (time is a variable). Single server queues for instance can be modeled very well using <b>discrete</b> event <b>simulation,</b> as servers are usually {{at a single}} location and so are discrete (e.g. traffic lights). Continuous time simulation, on the other hand, can solve the shortcoming of <b>discrete</b> event <b>simulation</b> where the model is required to have input, state and output trajectories within a time interval. The method {{requires the use of}} differential equations, specifically numerical integration methods. These equations can range from simple methods, such as Euler's method, to higher order Taylor's series methods, such as Heun's method and Runge-Kutta.|$|R
50|$|A special type of <b>discrete</b> <b>simulation</b> {{that does}} not rely on a model with an {{underlying}} equation, but can nonetheless be represented formally, is agent-based simulation. In agent-based simulation, the individual entities (such as molecules, cells, trees or consumers) in the model are represented directly (rather than by their density or concentration) and possess an internal state and set of behaviors or rules that determine how the agent's state is updated from one time-step to the next.|$|E
50|$|One of {{the most}} used {{techniques}} by manufacturing system designers is the discrete event simulation. This type of simulation allows to assess the system’s performance by statistically and probabilistically reproducing the interactions of all its components during a determined period of time. In some cases, manufacturing systems modelling needs a continuous simulation approach. This are the cases where {{the states of the}} system change continuously, like, for example, in the movement of liquids in oil refineries or chemical plants. As continuous simulation cannot be modeled by digital computers, it is done by taking small discrete steps. This is a useful feature, since there are many cases where both, continuous and <b>discrete</b> <b>simulation,</b> have to be combined. This is called hybrid simulation, which is needed in many industries, for example, the food industry.|$|E
5000|$|The {{purpose of}} the {{language}} is simulation of dynamic mathematical models of systems, given as set of ordinary differential equations. It is an equation oriented and compiler type of language. Despite its name {{it can be used}} for <b>discrete</b> <b>simulation</b> as well. The language suits well to the CSSL'67 standard of simulation languages so portability among other languages conforming to the same standard (e.g. [...] Tutsim, ACSL etc.) is quite simple. It is a DOS based software occasionally it is slightly modified so it can be run under actual versions of Microsoft Windows. Apart from the simulation itself it can also perform parametrisation (a series of simulations with different values of parameters), linearisation of models and optimisation (finding such values of parameters that a criterion function is minimised).|$|E
40|$|Modeling and {{simulation}} {{are traditional}} {{methods used to}} evaluate wireless network design, this paper provides a <b>discrete</b> event <b>simulation</b> modeling tool built using Borland c++ builder 6 to modeling a GPSR protocol routing process in ad hoc wireless network, this paper describe {{the main components of}} <b>discrete</b> event <b>simulation</b> tool used in building any <b>discrete</b> event <b>simulation</b> model such as processes, activities, events, it can also help other researchers to build their own simulation tool...|$|R
40|$|This paper {{presents}} the modeling of batch processes using <b>discrete</b> event <b>simulation.</b> <b>Discrete</b> event <b>simulation</b> {{is often used}} for transactional-based processes; however, this paper describes an example of representing each batch as a single transaction in order to model process cycle time and utility usage. An example is provided to demonstrate {{the use of this}} method for simulating water-for-injection usage in a biopharmaceutical process. ...|$|R
40|$|Sequential <b>discrete</b> event <b>simulation</b> {{is widely}} {{employed}} {{to study the}} behavior of many systems. Events are typically managed in a central event list which is implemented as a priority queue ordered by event timestamps. Most research to improve sequential simulation performance has focused on improving the priority queue implementations. Recent work has demonstrated that asynchronous conservative parallel <b>discrete</b> event <b>simulation</b> systems can achieve better sequential performance under some conditions, but worse performance under other conditions. This paper introduces a new sequential <b>discrete</b> event <b>simulation</b> algorithm that can exhibit {{some of the same}} performance advantages of asynchronous conservative parallel <b>discrete</b> event <b>simulation</b> algorithms and has complexity no more than that of central event list algorithms in the worst case. ...|$|R
50|$|Continuous {{simulation}} must {{be clearly}} differentiated from discrete and discrete event simulation. <b>Discrete</b> <b>simulation</b> relies upon countable phenomena like {{the number of}} individuals in a group, the number of darts thrown, or the number of nodes in a Directed graph. Discrete event simulation produces a system which changes its behaviour only in response to specific events and typically models changes to a system resulting from a finite number of events distributed over time. A continuous simulation applies a Continuous function using Real numbers to represent a continuously changing system. For example, Newton's Second law of motion Newton's laws of motion, F = ma, is a continuous equation. A value, F (force), may be calculated exactly for any real number values of m (mass) and a (acceleration). The number of combinations of force and acceleration are infinite and therefore not discrete (countable).|$|E
40|$|Much of the {{progress}} within <b>discrete</b> <b>simulation</b> has gone hand-in-hand with general developments in computing. Recent years have seen software developers putting great efforts into improving the user interfaces of <b>discrete</b> <b>simulation</b> systems. This too parallels developments elsewhere. This paper considers what further benefits there might be for users and developers of simulation software from more careful attention to intefface design. ...|$|E
40|$|<b>Discrete</b> <b>simulation</b> {{of fluid}} dynamics: {{applications}} The present two back-to-back theme issues of Philosophical Transactions of the Royal Society A collect {{a selection of}} papers presented at the <b>Discrete</b> <b>Simulation</b> of Fluid Dynamics (DSFD 2010) conference. This meeting was the most recent in a time-honoured series of 19 to date, which was inaugurated with the ‘historical ’ conference at Los Alamos in 1989 [1]. DSFD 2010 too...|$|E
40|$|Over {{the last}} decades <b>Discrete</b> Event <b>Simulation</b> has conquered many {{different}} application areas. This trend is, on the one hand, driven by an ever wider use of this technology in different fields of science {{and on the other}} hand by an incredibly creative use of available software programs through dedicated experts. This book contains articles from scientists and experts from 10 countries. They illuminate the width of application of this technology and the quality of problems solved using <b>Discrete</b> Event <b>Simulation.</b> Practical applications of simulation dominate in the present book.   The book is aimed to researchers and students who deal in their work with <b>Discrete</b> Event <b>Simulation</b> and which want to inform them about current applications. By focusing on <b>discrete</b> event <b>simulation,</b> this book can also serve as an inspiration source for practitioners for solving specific problems during their work. Decision makers who deal with the question of the introduction of <b>discrete</b> event <b>simulation</b> for planning support and optimization this book provides a contribution to the orientation, what specific problems could be solved with the help of <b>Discrete</b> Event <b>Simulation</b> within the organization. ...|$|R
40|$|Nowadays {{there is}} a large {{availability}} of <b>discrete</b> event <b>simulation</b> software that can be easily used in different domains: from industry to supply chain, from healthcare to business management, from training to complex systems design. Simulation engines of commercial <b>discrete</b> event <b>simulation</b> software use specific rules and logics for simulation time and events management. Difficulties and limitations come up when commercial <b>discrete</b> event <b>simulation</b> software are used for modeling complex real world-systems (i. e. supply chains, industrial plants). The objective of this paper is twofold: first a state of the art on commercial <b>discrete</b> event <b>simulation</b> software and an overview on <b>discrete</b> event <b>simulation</b> models development by using general purpose programming languages are presented; then a Supply Chain Order Performance Simulator (SCOPS, developed in C++) for investigating the inventory management problem along the supply chain under different supply chain scenarios is proposed to readers. Comment: International Journal of Computer Science Issues online at [URL]...|$|R
40|$|This paper {{reports on}} {{an effort to}} use both the system theoretic DEVS (<b>discrete</b> event <b>simulation)</b> {{formalism}} and the JavaBeans component model {{as a basis for}} a componentbased <b>discrete</b> event <b>simulation</b> framework. The result of the synergism of DEVS and JavaBeans is a powerful component-based simulation framework together with a set of flexible bean components for building simulation systems. Component frameworks are dedicated and focused architectures with a set of policies for mechanisms at the component level. In this paper we describe the component framework we have developed for <b>discrete</b> event <b>simulations.</b> Simulation components are based on this framework and can be composed for the creation of various simulation scenarios. 1. Introduction We have developed a set of JavaBeans components for the creation of <b>discrete</b> event <b>simulations.</b> The goal was to investigate how <b>discrete</b> event <b>simulation</b> applications can profit from an up-to-date component technology. The idea was to create a c [...] ...|$|R
40|$|As <b>discrete</b> <b>simulation</b> {{software}} gets {{easier to}} use {{it is tempting to}} assume that modelling also gets easier unfortunately this is not the case. This paper suggests some simple principles of modelling that can be easily applied in <b>discrete</b> <b>simulation,</b> the model is implemented in a visual interactive modelling system or in a programming language. The modelling principles are used to suggest desirable features that might be included in simulation soft...|$|E
40|$|A {{method for}} the <b>discrete</b> <b>simulation</b> of {{continuous}} multidimensional systems is presented. It {{is based on}} a transfer function description of the continuous system, which is obtained by application of appropriate functional transformations for each independent variable. Digital signal processing analog-to-discrete transformations turn the transfer function into a <b>discrete</b> <b>simulation</b> model. It is suitable for computer implementation and provides simulation algorithms, which are competitive with customary numerical methods. A comparison with a commercial software package demonstrates the advantage of the proposed simulation models. ...|$|E
40|$|Concepts from {{software}} engineering and knowledge engineering {{are incorporated into}} discrete, next-event simulation. The existing, conventional world-view utilized within <b>discrete</b> <b>simulation</b> is reviewed. A construct is presented that makes existing <b>discrete</b> <b>simulation</b> world-views more robust for problems involving endogenous decision-making. The use of knowledge bases and inference engines as mechanisms for modeling such decision making is presented. The result is a simulation world view that is able to simulate systems involving intelligent decision-making entities (actors) whose decisions strongly impact {{the state of the}} system. simulation, object-oriented programming, knowledge-based systems, actor paradigms...|$|E
50|$|In 1995 Zeigler {{was awarded}} IEEE Fellow in {{recognition}} of his contributions {{to the theory of}} <b>discrete</b> event <b>simulation,</b> and in 2000 he received the McLeod Founder’s Award by the Society for Computer Simulation, also for his contributions to <b>discrete</b> event <b>simulation.</b>|$|R
5000|$|In 1985 Jefferson {{introduced}} the optimistic synchronization protocol, which was utilized in parallel <b>discrete</b> event <b>simulations,</b> known as Time Warp. [...] To date, the technique known as Reverse Computation {{has only been}} applied in software for optimistically synchronized, parallel <b>discrete</b> event <b>simulation.</b>|$|R
5000|$|... adevs is a C++ {{library for}} {{building}} <b>discrete</b> event <b>simulations.</b> Adevs {{based on the}} Discrete Event System Specification DEVS and Dynamic DEVS modeling formalisms; it supports parallel <b>discrete</b> event <b>simulation</b> and a runtime system for OpenModelica. Adevs is developed by Jim Nutaro.|$|R
30|$|In {{the present}} model (marked “all interactions”) the {{dislocation}} walls tend to repel each other, thereby rearranging into a uniform distribution as is also {{observed in the}} <b>discrete</b> <b>simulation.</b> The offset between the discrete and the present continuum simulations {{is caused by the}} boundary condition in the discrete simulations. In the <b>discrete</b> <b>simulation</b> the impenetrable barrier is modelled by the addition of immobile dislocations. Two additional dislocation walls, one of each sign, are pinned at each boundary of the domain to ensure that no dislocations leave the domain. This results in an additional contribution to the interaction stress at the boundary and a slightly higher discrete density in the bulk.|$|E
40|$|An {{important}} aspect of logistics supply systems in agro industries is to manage the processes of harvesting and transporting raw materials, from the rural fields to the processing plants. The truck waiting times in the various queues of the plant reception area are of particular concern. This paper applies <b>discrete</b> <b>simulation</b> techniques to study the reception area processes of a sugarcane plant, analyzing {{the performance of the}} system and investigating alternative configurations and policies for its operations. The analysis is also useful for other agro industries with similar supply systems, such as orange and wood industries. <b>Discrete</b> <b>simulation</b> Logistics supply system Agro industries Sugarcane...|$|E
40|$|In the {{simulation}} world view, {{there are three}} methods of constructing a simulation in common use: event scheduling, process orientation, and activity scanning (or three-phase approach). Because the three-phase approach has advantages of both modeling flexibility and modularity, we propose a simulation modeling tool, EPNSim, extended from the ordinary Petri Nets (PNs) to generate a language-independent pseudo code for the three-phase <b>discrete</b> <b>simulation.</b> Using the proposed method, the modeling processes of the three-phase <b>discrete</b> <b>simulation</b> can be concisely represented. In addition, it preserves the relative analytic properties of the original Petri net models (e. g. boundedness, liveliness, etc.), which are important for designing a system...|$|E
50|$|In one {{dimension}} the simulated {{process is the}} absolute value of a Wiener process. The following MATLAB program creates a sample path.%rbm.mn=10^4; h=10^(-3); t=h.*(0:n); mu=-1;X=zeros(1,n+1); M=X; B=X;B(1)=3; X(1)=3;for k=2:n+1 Y=sqrt(h)*randn; U=rand(1); B(k)=B(k-1)+mu*h-Y; M=(Y + sqrt(Y^2-2*h*log(U)))/2; X(k)=max(M-Y,X(k-1)+h*mu-Y);endsubplot(2,1,1)plot(t,X,'k-');subplot(2,1,2)plot(t,X-B,'k-');The error involved in <b>discrete</b> <b>simulations</b> has been quantified.|$|R
40|$|This thesis explores {{methods to}} {{decrease}} overheads in an optimistic parallel <b>discrete</b> event <b>simulation</b> system. A <b>discrete</b> event <b>simulation</b> uses {{a computer to}} test {{a model of a}} system whose state changes at discrete points in time. The goal of parallel <b>discrete</b> event <b>simulation</b> (PDES) is to exploit parallel computing resources to decrease a <b>discrete</b> event <b>simulation</b> 2 ̆ 7 s runtime. Decreasing simulation runtime with PDES is difficult, because PDES introduces overheads that offset the benefit of applying more processors to a simulation. This thesis develops approaches to decreasing PDES overheads that result from saving state for checkpoints, managing user level threads, scheduling events for execution, and interprocessor communication. The thesis compares different approaches to each overhead via simple experiments with the PARAS OL PDES system. ...|$|R
40|$|Abstract. Parallel or Distributed <b>Discrete</b> Event <b>Simulation</b> (PDES) {{refers to}} the {{concurrent}} execution of a single <b>discrete</b> event <b>simulation</b> application on a parallel or distributed computing system. Most available PDES implementations provide user level library support for writing distributed simulation applications. We discuss how OS support can be designed to facilitate optimistic PDES of large, complex simulation models. TWLinuX is our implementation of these concepts through modification of Linux. Through TWLinuX, a simple, low cost network of machines becomes a high performance <b>discrete</b> event <b>simulation</b> platform. ...|$|R
