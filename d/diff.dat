3977|115|Public
5|$|The film premièred in South Africa at the 26th Durban International Film Festival (<b>DIFF)</b> on 17 July 2005 {{where it}} won the Best South African Film Award. It was {{released}} at 29 South African movie theatres on 22 July. Events to help promote the film included toyi-toyi dances in various South African market places, {{and the production}} crew holding a contest in which South African schoolchildren would have to research a lost community and the winners would get to meet the actors.|$|E
25|$|Optionally, the hunk range can be {{followed}} by the heading of the section or function that the hunk is part of. This is mainly useful to make the <b>diff</b> easier to read. When creating a <b>diff</b> with GNU <b>diff,</b> the heading is identified by regular expression matching.|$|E
25|$|The <b>diff</b> {{command is}} invoked from the command line, passing it {{the names of}} two files: <b>diff</b> {{original}} new. The output of the command represents the changes required to transform the original file into the new file.|$|E
25|$|Client/server {{protocol}} sends <b>diffs</b> in both directions.|$|R
5000|$|Graphical <b>diffing,</b> merging, and offline/online {{reconciliation}} tools ...|$|R
50|$|<b>Diff's</b> Lucky Day is an EP by Blyss, the {{forerunner of}} Lifehouse.|$|R
25|$|Gromov, M.: Filling Riemannian manifolds, J. <b>Diff.</b> Geom. 18 (1983), 1147.|$|E
25|$|The {{operation}} of <b>diff</b> {{is based on}} solving the longest common subsequence problem.|$|E
25|$|The patch {{program is}} not aware even of an {{implementation}} specific <b>diff</b> output.|$|E
5000|$|When more {{advanced}} <b>diffs</b> are used, patches {{can be applied}} even to files that have been modified in the meantime, as long as those modifications do {{not interfere with the}} patch. This is achieved by using [...] "context diffs" [...] and [...] "unified diffs" [...] (also known as [...] "unidiffs"), which surround each change with context, which is the text immediately before and after the changed part. Patch can then use this context to locate the region to be patched even if it has been displaced by changes earlier in the file, using the line numbers in the <b>diffs</b> as a starting point. Because of this property, context and unified <b>diffs</b> are the preferred form of patches for submission to many software projects.|$|R
2500|$|... svn:mime-type : Stores the Internet {{media type}} ("MIME type") of a file. Affects the {{handling}} of <b>diffs</b> and merging.|$|R
50|$|Agit is a Git client for Android devices {{with various}} {{features}} (e.g. animated <b>diffs)</b> {{designed for the}} constraints of smartphone use.|$|R
25|$|This program {{generalized}} {{and extended}} {{the ability to}} modify files with output from <b>diff.</b>|$|E
25|$|Richard S. Hamilton, Three-manifolds with {{positive}} Ricci curvature, J. <b>Diff.</b> Geom 17 (1982), 255–306.|$|E
25|$|J. Isenberg, M. Jackson, Ricci flow {{of locally}} {{homogeneous}} geometries on a Riemannian manifold, J. <b>Diff.</b> Geom. 35 (1992) no. 3 723–741.|$|E
5000|$|In {{addition}} to the [...] "diff" [...] program, <b>diffs</b> can also be produced by other programs, such as Subversion, CVS, RCS, Mercurial and Git.|$|R
40|$|Techniques {{have been}} {{proposed}} to find the semantic differences between two binary programs when the source code is not available. Analyzing control flow, and in particular, intra-procedural control flow, has become an attractive technique in the latest binary <b>diffing</b> tools since it is more resistant to syntactic, but non-semantic, differences. However, this makes such techniques vulnerable to simple function obfuscation techniques (e. g., function inlining) attackers any malware writers could use. In this paper, we first show function obfuscation as an attack to such binary <b>diffing</b> techniques, and then propose iBinHunt which uses deep taint and automatic input generation to find semantic differences in inter-procedural control flows. Evaluation on comparing various versions of a http server and gzip shows that iBinHunt not only is capable of comparing inter-procedural control flows of two programs, but offers substantially better accuracy and efficiency in binary <b>diffing...</b>|$|R
40|$|Part 6 : Software SecurityInternational audienceIdentifying {{differences}} between two executable binaries (binary <b>diffing)</b> has compelling security applications, such as software vulnerability exploration, “ 1 -day” exploit generation and software plagiarism detection. Recently, binary <b>diffing</b> based on symbolic execution and constraint solver {{has been proposed}} {{to look for the}} code pairs with the same semantics, even though they are ostensibly different in syntactics. Such logical-based method captures intrinsic differences of binary code, making it a natural choice to analyze highly-obfuscated malicious program. However, semantics-based binary <b>diffing</b> suffers from significant performance slowdown, hindering it from analyzing large-scale malware samples. In this paper, we attempt to mitigate the high overhead of semantics-based binary <b>diffing</b> with application to malware lineage inference. We first study the key obstacles that contribute to the performance bottleneck. Then we propose basic blocks fast matching to speed up semantics-based binary <b>diffing.</b> We introduce an union-find set structure that records semantically equivalent basic blocks. Managing the union-find structure during successive comparisons allows direct reuse of previously computed results. Moreover, we purpose to concretize symbolic formulas and cache equivalence queries to further cut down the invocation times of constraint solver. We have implemented our technique on top of iBinHunt and evaluated it on 12 malware families with respect to the performance improvement when performing intra-family comparisons. Our experimental results show that our methods can accelerate symbolic execution from 2. 8 x to 5. 3 x (with an average 4. 0 x), and reduce constraint solver invocation by a factor of 3. 0 x to 6. 0 x (with an average 4. 3 x) ...|$|R
25|$|If {{original}} and new are directories, then <b>diff</b> will be run on each file {{that exists in}} both directories. An option, -r, will recursively descend any matching subdirectories to compare files between directories.|$|E
25|$|Lada Niva (VAZ-2121) - {{full-time}} 4WD using {{open center}} differential. Transfer case with high/low range and manual central <b>diff</b> lock. Low range selectable in locked or unlocked mode, allowing use on pavement.|$|E
25|$|By default, lines {{common to}} both files are not shown. Lines that have moved are shown as added at their new {{location}} and as deleted from their old location. However, some <b>diff</b> tools highlight moved lines.|$|E
2500|$|Some tools allow <b>diffs</b> {{for several}} {{different}} files to be merged into one, using a header for each modified file that may look something like this: ...|$|R
40|$|AbstractWe {{study the}} {{azimuthal}} modulations of dihadron fragmentation functions (<b>DiFFs)</b> of a transversely polarised quark using an NJL-jet based model that incorporates the Collins effect for single hadron emission. The <b>DiFFs</b> are extracted as Monte Carlo (MC) averages of corresponding multiplicities using their probabilistic interpretation. To simplify {{the model and}} highlight the possible mechanisms that create this modulation, we choose the elementary Collins function to be proportional to the elementary unpolarised fragmentation and a constant probability (PSF) for the quark to flip its spin after a single hadron emission. Moreover, as a leading order calculation, {{only one of the}} produced hadrons in the decay chain of the quark is produced with elementary Collins modulation. We calculate the dependence of the polarised <b>DiFFs</b> on various angles such as the azimuthal angle of the single hadron and the angle of the two-hadron production plane φR for several values of PSF. We observe that the polarised <b>DiFFs</b> for oppositely charged pion pairs exhibit a sin(φR) modulation. This effect is induced purely via the elementary Collins effect and persists even when the quark completely depolarises after a single hadron emission (PSF= 0. 5). Moreover, similar sine modulations are present in the distribution of pion pairs with respect to the azimuthal angle of their total transverse momentum, φT...|$|R
40|$|In {{this paper}} we propose a novel software-only {{distributed}} sharedmemory system (SW-DSM), the Affinity Entry Consistency (AEC) protocol. The protocol is based on Entry Consistency but, unlike previous approaches, does not require the explicit association of shared data to synchronization variables, uses the page as its coherence unit, and generates the set of modifications (in the form of <b>diffs)</b> made to shared pages eagerly. The AEC protocol hides the overhead of generating and applying <b>diffs</b> behind synchronization delays, and uses a novel technique, Lock Acquirer Prediction (LAP), to tolerate the overhead of transferring <b>diffs</b> through the network. LAP attempts to predict the next acquirer of a lock {{at the time of the}} release, so that the acquirer can be updated even before requesting ownership of the lock. Using execution-driven simulation of real applications, we show that LAP performs very well under AEC; LAP predictions are within the 80 - 97 % range of accuracy. Our results also show [...] ...|$|R
25|$|In summary, PDiff is {{more general}} than <b>Diff</b> {{because it allows}} pieces (corners), and one cannot in general smooth corners, while PL is no less general that PDiff because one can linearize pieces (more precisely, one may need to break them up into smaller pieces and then linearize, which is allowed in PDiff).|$|E
25|$|The {{greatest}} danger to humans is from diseases rats can transmit. City-dwelling rats carry pathogens {{that can cause}} diarrhea and vomiting in humans. Disease-causing bacteria commonly carried by rats include E. coli, Clostridium difficile (C. <b>diff),</b> and Salmonella. The bacteria can be spread by contact with rat feces, saliva, or urine. Viral diseases spread by rats include rat-bite fever and hemorrhagic fevers caused by Seoul hantavirus.|$|E
25|$|Because of {{licensing}} concerns, the OpenBSD {{team has}} re-implemented software from scratch or adopted suitable existing software. Of particular note is the development, after license restrictions were imposed on IPFilter, of the pf packet filter, which {{first appeared in}} OpenBSD 3.0 and is now available in other major BSDs. OpenBSD developers have also replaced GPL licensed tools (such as <b>diff,</b> grep and pkg-config) with BSD licensed equivalents.|$|E
40|$|In this work, {{we present}} two {{fundamental}} primitives for network security: network dialog minimization and network dialog <b>diffing.</b> Network dialog minimization (NDM) simplifies an original dialog {{with respect to}} a goal, so that the minimized dialog when replayed still achieves the goal, but requires minimal network communication, achieving significant time and bandwidth savings. We present network delta debugging, the first technique to solve NDM. Network dialog <b>diffing</b> compares two dialogs, aligns them, and identifies their common and different parts. We propose a novel dialog <b>diffing</b> technique that aligns two dialogs by finding a mapping that maximizes similarity. We have applied our techniques to 5 applications. We apply our dialog minimization approach for: building drive-by download milkers for 9 exploit kits, integrating them in a infrastructure that has collected over 14, 000 malware samples running from a single machine; efficiently measuring the percentage of popular sites that allow cookie replay, finding that 31 % do not destroy the server-side state when a user logs out and that 17 % provide cookies that live over a month; simplifying a cumbersome user interface, saving our institution 3 hours of time per year and employee; and finding a new vulnerability in a SIP server. We apply our dialog <b>diffing</b> approach for clustering benign (F-Measure = 100 %) and malicious (F-Measure = 87. 6 %) dialogs. status: publishe...|$|R
40|$|We {{study the}} {{azimuthal}} modulations of dihadron fragmentation functions (<b>DiFFs)</b> of a transversely polarised quark using an NJL-jet based model that incorporates the Collins effect for single hadron emission. The <b>DiFFs</b> are extracted as Monte Carlo (MC) averages of corresponding multiplicities using their probabilistic interpretation. To simplify {{the model and}} highlight the possible mechanisms that create this modulation, we choose the elementary Collins function to be proportional to the elementary unpolarised fragmentation and a constant probability (P SF) for the quark to flip its spin after a single hadron emission. Moreover, as a leading order calculation, {{only one of the}} produced hadrons in the decay chain of the quark is produced with elementary Collins modulation. We calculate the dependence of the polarised <b>DiFFs</b> on various angles such as the azimuthal angle of the single hadron and the angle of the two-hadron production plane φ R for several values of P SF. We observe that the polarised <b>DiFFs</b> for oppositely charged pion pairs exhibit a sin (φ R) modulation. This effect is induced purely via the elementary Collins effect and persists even when the quark completely depolarises after a single hadron emission (P SF = 0. 5). Moreover, similar sine modulations are present in the distribution of pion pairs with respect to the azimuthal angle of their total transverse momentum, φ T...|$|R
25|$|Note that to {{successfully}} separate the file names from the timestamps, the delimiter {{between them is}} a tab character. This is invisible on screen and can be lost when <b>diffs</b> are copy/pasted from console/terminal screens.|$|R
25|$|In {{geometric}} topology, PDIFF, for piecewise differentiable, is {{the category}} of piecewise-smooth manifolds and piecewise-smooth maps between them. It properly contains <b>DIFF</b> ({{the category of}} smooth manifolds and smooth functions between them) and PL (the category of piecewise linear manifolds and piecewise linear maps between them), and the reason it is defined is to allow one to relate these two categories. Further, piecewise functions such as splines and polygonal chains are common in mathematics, and PDIFF provides a category for discussing them.|$|E
25|$|The car {{stayed on}} the lead lap, until a minor safety-car hiccup saw it go down a lap, and {{seemingly}} out of race contention. New co-driver Russell Ingall {{was told by the}} team to not worry about the car, and just push 110% {{for the rest of the}} day - to spare nothing. When the leading Richards/Skaife Commodore retired with a failed <b>diff,</b> Ingall scrambled the car back onto the lead lap. Between them, Perkins and Ingall spent the rest of the race gradually whittling back the gap to the leaders.|$|E
25|$|New York City rats carry {{pathogens}} {{that can}} cause diarrhea, vomiting, and fever in humans, especially in children. The pathogens they carry include bacteria such as Clostridium difficile (C. <b>diff),</b> Salmonella, E. coli, and Leptospira. Bartonella bacteria cause cat scratch disease, trench fever, and Carron disease. These bacteria may be spread through contact with rat feces, saliva, or urine. Rats can carry disease-causing viruses such as sapoviruses, cardioviruses, kobuviruses, parechoviruses, rotaviruses, hepaciviruses, and Seoul virus. Rats carry fleas that are vectors of diseases such as bubonic plague, typhus, and spotted fever. In addition, some people have an allergic reaction {{to the presence of}} rodent feces, hair, or urine.|$|E
40|$|As {{described}} in many blog posts {{and in the}} scientific literature, exploits for software vulnerabilities are often engineered {{on the basis of}} patches. For example, "Microsoft Patch Tuesday" is often followed by "Exploit Wednesday" during which yet unpatched systems become vulnerable to patch-based exploits. Part of the patch engineering includes the identification of the vulnerable binary code by means of reverse-engineering tools and <b>diffing</b> add-ons. In this article we present a feedback-driven compiler tool flow that iteratively transforms code until <b>diffing</b> tools become ineffective enough to close the "Exploit Wednesday" window of opportunity. We demonstrate the tool's effectiveness on a set of real-world patches and against the latest version of BinDiff...|$|R
5000|$|The <b>diffs</b> {{with more}} or less {{insightful}} commentaries should be obtainable on the Linux kernel mailing list (LKML) and forks thereof e.g. https://lwn.net/Articles/653318/. Documentation of the software remains scarce and is scattered over the web in various blog posts… ...|$|R
30|$|The shell runs each command {{enclosed}} in “<{…}” and replaces such {{part of the}} command line with the name for a channel to read its output. The command <b>diffs</b> receives two arguments, one per channel streaming file trees to be compared.|$|R
