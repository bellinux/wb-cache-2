1413|8240|Public
5|$|After <b>initializing</b> {{the concept}} in January 2013, the two {{discussed}} {{the project for}} three or four months before creating an outline for the whole story. The original outline was for 12 issues, but it left room for improvisation and a few points were removed as the story progressed. They looked at past and present social movements for civil rights for inspiration for how one would progress and how people might respond to a movement for android rights. Luna wrote the first draft of issue one, then the two worked together to rewrite it.|$|E
25|$|Provides a more {{convenient}} way of <b>initializing</b> public fields and properties of an object. Constructor calls are optional {{when there is}} a default constructor.|$|E
25|$|Upon {{leaving the}} using-block, the {{compiler}} guarantees that the stm object is released, effectively binding the variable to the file stream while abstracting {{from the side}} effects of <b>initializing</b> and releasing the file. Python's with statement and Ruby's block argument to File.open are used to similar effect.|$|E
5000|$|... {{declares}} two variables: {{index and}} vowels. All variables are <b>initialized.</b> Variables are <b>initialized</b> to nil except the indexed variables of Strings, which are <b>initialized</b> to the null character or ByteArrays which are <b>initialized</b> to 0.|$|R
50|$|Working with a {{properly}} <b>initialized</b> differintegral {{is the subject}} of <b>initialized</b> fractional calculus.|$|R
5000|$|Disk {{and tape}} utility {{programs}} such as <b>initialize</b> disk, <b>initialize</b> tape, clear disk.|$|R
25|$|The <b>initializing</b> {{codes for}} each model of printer {{had to be}} written into the application. To use a program such as Wordstar with more than one printer (say, a fast dot matrix printer or a slower but presentation-quality daisy wheel printer), a {{separate}} version of Wordstar had to be prepared, and one had to load the Wordstar version that corresponded to the printer selected (and exiting and reloading to change printers).|$|E
25|$|One {{can also}} use PowerShell {{embedded}} in a management application, which uses the PowerShell runtime to implement the management functionality. For this, PowerShell provides a managed hosting API. Via the APIs, the application can instantiate a runspace (one instantiation of the PowerShell runtime), which runs in the application's process and is exposed as a Runspace object. The state of the runspace is encased in a SessionState object. When the runspace is created, the Windows PowerShell runtime initializes the instantiation, including <b>initializing</b> the providers and enumerating the cmdlets, and updates the SessionState object accordingly. The Runspace then must be opened for either synchronous processing or asynchronous processing. After {{that it can be}} used to execute commands.|$|E
25|$|Blowfish's key {{schedule}} starts by <b>initializing</b> the P-array and S-boxes with values {{derived from}} the hexadecimal digits of pi, which contain no obvious pattern (see nothing up my sleeve number). The secret key is then, byte by byte, cycling the key if necessary, XORed with all the P-entries in order. A 64-bit all-zero block is then encrypted with the algorithm as it stands. The resultant ciphertext replaces P1 and P2. The same ciphertext is then encrypted again with the new subkeys, and the new ciphertext replaces P3 and P4. This continues, replacing the entire P-array and all the S-box entries. In all, the Blowfish encryption algorithm will run 521 times to generate all the subkeys - about 4KB of data is processed.|$|E
3000|$|... [...]. To {{ensure a}} fair comparison, the {{precoders}} of MU–LP are <b>initialized</b> based on MRT. For SC–SIC, the precoder {{of the user}} decoded first is <b>initialized</b> based on SVD {{and that of the}} user decoded last is <b>initialized</b> based on MRT.|$|R
50|$|The xz encoder uses an {{unsigned}} 33-bit variable called low (typically implemented as a 64-bit integer, <b>initialized</b> to 0), an unsigned 32-bit variable called range (<b>initialized</b> to 232 − 1), an unsigned 8-bit variable called cache (<b>initialized</b> to 0), and an unsigned variable called cache_size {{which needs}} to {{be large enough to}} store the uncompressed size (<b>initialized</b> to 1, typically implemented as a 64-bit integer).|$|R
50|$|Algorithm:C(x) is <b>initialized</b> to 1, L is {{the current}} number of assumed errors, and <b>initialized</b> to zero. N is {{the total number of}} syndromes. n is used as the main {{iterator}} and to index the syndromes from 0 to (N-1). B(x) is a copy of the last C(x) since L was updated and <b>initialized</b> to 1. b is a copy of the last discrepancy d (explained below) since L was updated and <b>initialized</b> to 1. m is the number of iterations since L, B(x), and b were updated and <b>initialized</b> to 1.|$|R
25|$|Finally, upon {{termination}} of the algorithm, the result needs to be read off. In {{the case of a}} classical computer, we sample from the probability distribution on the three-bit register to obtain one definite three-bit string, say 000. Quantum mechanically, one measures the three-qubit state, which is equivalent to collapsing the quantum state down to a classical distribution (with the coefficients in the classical state being the squared magnitudes of the coefficients for the quantum state, as described above), followed by sampling from that distribution. This destroys the original quantum state. Many algorithms will only give the correct answer with a certain probability. However, by repeatedly <b>initializing,</b> running and measuring the quantum computer's results, the probability of getting the correct answer can be increased. In contrast, counterfactual quantum computation allows the correct answer to be inferred when the quantum computer is not actually running in a technical sense, though earlier initialization and frequent measurements are part of the counterfactual computation protocol.|$|E
500|$|In 2002, Bjarne Stroustrup {{suggested}} {{extending the}} C++ language with mechanisms for querying {{the type of}} an expression, and <b>initializing</b> objects without specifying the type. Stroustrup observed that the reference-dropping semantics offered by the typeof operator provided by the GCC and EDG compilers could be problematic. Conversely, an operator returning a reference type based on the lvalue-ness of the expression was deemed too confusing. The initial proposal to the C++ standards committee outlined {{a combination of the}} two variants; the operator would return a reference type only if the declared type of the expression included a reference. To emphasize that the deduced type would reflect the [...] "declared type" [...] of the expression, the operator was proposed to be named decltype.|$|E
2500|$|Agreeing on {{shared values}} and <b>initializing</b> a {{long-term}} process for {{cooperation in the}} Mediterranean; ...|$|E
40|$|In this paper, we firstly give a brief {{introduction}} of expectation maximization (EM) algorithm, and then discuss the initial value sensitivity of expectation maximization algorithm. Subsequently, we give a short proof of EM's convergence. Then, we implement experiments {{with the expectation}} maximization algorithm (We implement all the experiments on Gaussion mixture model (GMM)). Our experiment with expectation maximization is performed in the following three cases: <b>initialize</b> randomly; <b>initialize</b> with result of K-means; <b>initialize</b> with result of K-medoids. The experiment result shows that expectation maximization algorithm depend on its initial state or parameters. And we found that EM <b>initialized</b> with K-medoids performed better than both the one <b>initialized</b> with K-means and the one <b>initialized</b> randomly...|$|R
5000|$|Check {{that the}} {{variable}} is <b>initialized</b> (without obtaining the lock). If it is <b>initialized,</b> return it immediately.|$|R
40|$|This paper compares {{methods of}} {{training}} radial basis function networks. We found RBF networks <b>initialized</b> by supervised clustering perform better than networks <b>initialized</b> by unsupervised clustering and improved with gradient descent. Gradient descent {{did not significantly}} improve the networks <b>initialized</b> by supervised clustering. ...|$|R
2500|$|... <b>initializing</b> {{the counter}} {{variable}} to 1, incrementing by 1 each iteration {{of the loop}} and stopping at five (inclusive).|$|E
2500|$|Collection initializers give an array-like syntax for <b>initializing</b> collections. The {{compiler}} {{will simply}} generate {{calls to the}} Add-method. This works for classes that implement the interface [...]|$|E
2500|$|The kernel sits {{between the}} HAL and the Executive and {{provides}} multiprocessor synchronization, thread and interrupt scheduling and dispatching, and trap handling and exception dispatching; {{it is also}} responsible for <b>initializing</b> device drivers at bootup {{that are necessary to}} get the operating system up and running. That is, the kernel performs almost all the tasks of a traditional microkernel; the strict distinction between Executive and Kernel is the most prominent remnant of the original microkernel design, and historical design documentation consistently refers to the kernel component as [...] "the microkernel".|$|E
5000|$|Thread A {{notices that}} the value is not <b>initialized,</b> so it obtains the lock and begins to <b>initialize</b> the value.|$|R
50|$|The Link 22 unit’s {{subsystems}} must be <b>initialized</b> first, {{before it}} can <b>initialize</b> any networks. Hardware configuration information must be supplied to the SNC by the DLP. The DLP also must supply the Fundamental Link 22 Parameters so that the SNC can <b>initialize</b> its internal data.|$|R
5000|$|Any {{constructor}} of {{the class}} will <b>initialize</b> [...] with 5, if the constructor does not override the initialization with its own. So the above empty constructor will <b>initialize</b> [...] as the class definition states, but the constructor that takes an int will <b>initialize</b> it to the given parameter.|$|R
2500|$|The {{process of}} <b>initializing</b> these logical blocks on the {{physical}} disk platters is called low-level formatting, which is usually performed at the factory and is not normally changed in the field. High-level formatting writes data structures used by the operating system to organize data files on the disk. This includes [...] writing partition and file system structures into selected logical blocks. For example, some of the disk space {{will be used to}} hold a directory of disk file names and a list of logical blocks associated with a particular file.|$|E
2500|$|The Executive interfaces, {{with all}} the user mode subsystems, deals with I/O, object management, {{security}} and process management. [...] The kernel sits between the Hardware Abstraction Layer and the Executive to provide multiprocessor synchronization, thread and interrupt scheduling and dispatching, and trap handling and exception dispatching. [...] The kernel is also responsible for <b>initializing</b> device drivers at bootup. Kernel mode drivers exist in three levels: highest level drivers, intermediate drivers and low level drivers. [...] Windows Driver Model (WDM) exists in the intermediate layer and was mainly designed to be binary and source compatible between Windows 98 and Windows 2000. [...] The lowest level drivers are either legacy Windows NT device drivers that control a device directly or can be a plug and play (PnP) hardware bus.|$|E
5000|$|<b>Initializing</b> the {{delegate}} with {{an anonymous}} method. [...] addition = delegate(int a, int b){ return a + b; }; [...] <b>Initializing</b> the delegate with lambda expression. [...] addition = (a, b) => a + b; ...|$|E
3000|$|The FEQ {{coefficient}} is <b>initialized</b> by LS or {{an adaptive}} RLS training-based algorithm. Only one training symbol {{is needed to}} <b>initialize</b> [...]...|$|R
2500|$|... {{variables}} are <b>initialized</b> by default to zero. They {{can be assigned}} or <b>initialized</b> to the named values defined by the enumeration type.|$|R
5000|$|... {{does not}} <b>initialize</b> the memory allocated, while [...] {{guarantees}} that all bytes of the allocated memory block have been <b>initialized</b> to 0.|$|R
5000|$|Metaclass - <b>initializing</b> class variables, {{instance}} creation messages ...|$|E
5000|$|... calling an <b>initializing</b> code (namely, constructor) of {{superclass}} ...|$|E
5000|$|To start, the {{attacker}} utilizes the IV {{as the first}} 3 elements in K. He fills the S-box S with sequential values from 0 to n as RC4 does when <b>initializing</b> the S-box from a known K. He then performs the first 3 iterations of ksa (...) to begin <b>initializing</b> the S-box.|$|E
3000|$|We <b>initialize</b> {{the model}} {{parameters}} using all data points and their labels {{in the training}} set in Algorithm 1. In particular, we use the {{mean and standard deviation}} of the data points in each class to <b>initialize</b> Ω and the ratio of data points in different classes to <b>initialize</b> α [...]...|$|R
30|$|Apriori {{algorithm}} {{population size}} SizePop, algorithm maximum iteration number Maxgen is <b>initialized,</b> and Apriori algorithm seed group position X_axis, Y_axis is randomly <b>initialized.</b>|$|R
30|$|Step 1 : <b>Initialize</b> the network. According to {{the number}} of nodes of each layer and the number of cluster heads, <b>initialize</b> the clusters.|$|R
