350|354|Public
25|$|The <b>Interface</b> <b>Description</b> Language: Definition and Use, Richard T. Snodgrass with {{contributions}} from Karen P. Shannon, Jerry S. Kickenson, Mike A. Shapiro, Dean D. Throop, William B. Warren, David A. Lamb, John R. Nestor, and William A. Wulf, Principles of Computer Science Series, Computer Science Press, Rockville, MD, 1989, 615+xv pages.|$|E
2500|$|For certain {{classes of}} applications, the {{compiler}} system {{should also be}} able to handle <b>interface</b> <b>description</b> language (IDL) files. Collectively, these prerequisites (compilers, tools, libraries, and headers) are known as the Microsoft Platform SDK. For a time, the Microsoft Visual Studio and Borland's integrated development system were the only integrated development environments (IDEs) that could provide this (although, the SDK is downloadable for free separately from the entire IDE suite, from [...] ).|$|E
2500|$|J2SE 1.2 (December 8, 1998) – Codename Playground. This and {{subsequent}} releases through J2SE 5.0 were rebranded Java 2 and the version name [...] "J2SE" [...] (Java 2 Platform, Standard Edition) replaced JDK {{to distinguish the}} base platform from J2EE (Java 2 Platform, Enterprise Edition) and J2ME (Java 2 Platform, Micro Edition). Major additions included reflection, a collections framework, Java IDL (an <b>interface</b> <b>description</b> language implementation for CORBA interoperability), and {{the integration of the}} Swing graphical API into the core classes. A Java Plug-in was released, and Sun's JVM was equipped with a JIT compiler for the first time.|$|E
40|$|Current <b>interface</b> <b>descriptions</b> {{are poor}} in {{describing}} components, because they only provide an external view on a component {{and they do}} not lay down how components interact with each other. Suggestions to improve component <b>interface</b> <b>descriptions</b> at last year's workshop are reconsidered and reuse contracts are put forward as a solution that goes one step further...|$|R
40|$|Automated {{testing of}} JavaScript web {{applications}} {{is complicated by}} the communication with servers. Specifically, it is difficult to test the JavaScript code in isolation from the server code and database contents. We present a practical solution to this problem. First, we demonstrate that formal server <b>interface</b> <b>descriptions</b> are useful in automated testing of JavaScript web applications for separating the concerns of the client and the server. Second, to support the construction of server <b>interface</b> <b>descriptions</b> for existing applications, we introduce an effective inference technique that learns communication patterns from sample data. By incorporating <b>interface</b> <b>descriptions</b> into the testing tool Artemis, our experimental results show that we increase the level of automation for high-coverage testing on a collection of JavaScript web applications that exchange JSON data between the clients and servers. Moreover, we demonstrate that the inference technique can quickly and accurately learn useful server <b>interface</b> <b>descriptions...</b>|$|R
5000|$|WebServices - Semantic {{description}} of Web Services. May include functional (Capability) and usage (<b>Interface)</b> <b>descriptions.</b>|$|R
50|$|IDL (<b>Interface</b> <b>Description</b> Language) is a {{software}} <b>interface</b> <b>description</b> language (also {{referred to as}} Interface Descriptor Language) created by William Wulf and John Nestor of Carnegie Mellon University and David Lamb of Queens University, Canada.|$|E
5000|$|IDL {{specification}} language: {{the original}} <b>Interface</b> <b>Description</b> Language ...|$|E
5000|$|... both <b>Interface</b> <b>Description</b> Language {{and data}} {{description}} language ...|$|E
40|$|Abstract Customers {{interacting}} with online selling platforms require {{the assistance of}} sales support systems in the product and service selection process. Knowledge-based recommenders are specific sales support systems which involve online customers in dialogs with the goal to support preference forming processes. These systems have been successfully deployed in commercial environments supporting the recommendation of, e. g., financial services, e-tourism services, or consumer goods. However, the development of user <b>interface</b> <b>descriptions</b> and knowledge bases underlying knowledge-based recommenders is often an error-prone and frustrating business. In this paper {{we focus on the}} first aspect and present an approach which supports knowledge engineers in the identification of faults in user <b>interface</b> <b>descriptions.</b> These descriptions are the input for a model-base...|$|R
40|$|Using {{models in}} {{different}} contexts poses major integration challenges, ranging from technical to conceptual levels. Independently {{of each other}} developed model components cannot be expected to coincide in all description details, even if {{based on the same}} abstractions and assumptions. Variations in <b>interface</b> <b>descriptions</b> of model components have to be resolved. XML-based description languages from the area of web services provide standardized means for bridging diversities of implementations. This paper presents an adaption of the Web Services Description Language (WSDL) combined with XML Schema Definitions (XSD) to the specific requirements of model components in the area of discrete-event simulation. XML-based <b>interface</b> <b>descriptions</b> are integrated into a general model component architecture. Schema matching approaches provide the basis for syntactical compatibility checking of interfaces at the time of composition. ...|$|R
40|$|Development of {{different}} parts of large software systems by separate teams, replacement of individual software parts during maintenance, and marketing of independently developed software components require behavioral <b>interface</b> <b>descriptions.</b> Interoperation and reuse are impossible without sufficient description; only abstraction leaves room for alternate implementations. Specifications that onl...|$|R
50|$|The System <b>Interface</b> <b>Description</b> (SID) links {{together}} the Organizational and Infrastructure Views by depicting the assignments of systems and their interfaces to the nodes and needlines {{described in the}} Node Connectivity Description. The Node Connectivity Description for a given architecture shows nodes (not always defined in physical terms), while the System <b>Interface</b> <b>Description</b> depicts the systems corresponding to the system nodes. The System <b>Interface</b> <b>Description</b> can be produced at four levels, as described below. Level 1 is an essential work product, while Levels 2, 3, and 4 are supporting work products.|$|E
5000|$|... #Caption: System <b>Interface</b> <b>Description,</b> Levels 1, 2, 3, 4—Generic Examples.|$|E
50|$|Franca Interface Definition Language (Franca IDL) is a {{formally}} defined, text-based <b>interface</b> <b>description</b> language. It {{is part of}} the Franca framework, {{which is}} a framework for definition and transformation of software interfaces. Franca applies model transformation techniques to interoperate with various <b>interface</b> <b>description</b> languages (e.g., D-Bus Introspection language, Apache Thrift IDL, Fibex Services).|$|E
40|$|In this paper, we {{describe}} {{an approach to}} adapting graphical Web pages into vocal ones, and show how the approach {{is supported by a}} tool that allows the user to drive the adaptation results by customizing the adaptation parameters. The adaptation process exploits model-based user <b>interface</b> <b>descriptions...</b>|$|R
40|$|The {{domain of}} {{software}} {{is a primary}} candidate for being formalized in an ontology. On the one hand, the domain is sufficiently complex with different paradigms (e. g., object orientation) and different aspects (e. g., security, legal information, <b>interface</b> <b>descriptions,</b> etc.). On the other hand, the domai...|$|R
40|$|Constructing {{multi-device}} interfaces still presents major challenges, {{despite all}} eorts {{of the industry}} and several academic initiatives to develop usable solutions. One approach which is nding its way into general use, is XML-based User <b>Interface</b> <b>descriptions</b> to generate suitable User Interfaces for embedded systems and mobile computing devices. Anothe...|$|R
5000|$|Cross Platform <b>Interface</b> <b>Description</b> Language (XPIDL): Mozilla's way {{to specify}} XPCOM {{interfaces}} ...|$|E
50|$|Examples of LIS include <b>Interface</b> <b>description</b> language, Simplified Wrapper and Interface Generator and Common Language Infrastructure.|$|E
50|$|Cross Platform <b>Interface</b> <b>Description</b> Language (XPIDL) is the {{interface}} definition language developed by Mozilla.org to specify XPCOM interfaces.|$|E
40|$|For {{the purpose}} of {{developing}} and conveying designs, people designing user <b>interfaces</b> create <b>descriptions</b> {{in the form of}} text, drawings, diagrams, etc. We consider these forms of expression constituents of design-oriented user interface specifications. In a complementary way, programmers building user <b>interfaces</b> create <b>descriptions</b> (e. g. code) that control user interface technology. We take interest in information systems and in styles of user <b>interface</b> <b>descriptions</b> that are design-oriented and able to control technology. This paper presents preliminary results from our research, specifically the capabilities of an experimental prototype that stages human-computer interaction by specification. We introduce a specification style that allows designers to directly craft user interface appearance and behavior at a detailed level without involving low-level programming concepts, and we discuss the rationale behind our notion of design orientation...|$|R
40|$|EXPLOITING WEB SERVICE TECHNIQUES FOR COMPOSING SIMULATION MODELS Two basic {{approaches}} to simulation model composition can be distinguished, {{depending on whether}} the unit of composition is a model specification according to a certain modeling formalism or the component is a simulation system wrapping the actual model implementation. Model-based approaches mainly provide user-friendly means for modular-hierarchical construction of complex models but come with limited capabilities for compositional reasoning. Simulation-based composition approaches explicitly distinguish between <b>interface</b> <b>descriptions</b> and model implementations and thereby facilitate a reasoning about compositions based solely on publicized <b>interfaces</b> <b>descriptions.</b> However, compositional reasoning about interoperability at the conceptual level and on overall model validity is currently not very elaborated. This paper takes a closer look at web services technologies and discusses how to adapt them to the problem of model composition. ...|$|R
40|$|The {{effort and}} time {{required}} to develop user interface models {{has been one of}} the main limitations to the adoption of model-based approaches, which enable intelligent processing of user <b>interface</b> <b>descriptions.</b> In this paper, we present a tool to perform reverse engineering of interactive dynamic Web applications into a model-based framework able to describe them at various abstraction levels. We indicate how information in HTML, HTML 5, CSS, Ajax and JavaScript is transformed into such logical framework, which facilitates adaptation to other types of interactive devices. We also discuss how this reverse engineering tool has been exploited in an environment for run-time adaptation or migration of interactive Web applications to various devices in ubiquitous use cases. Author Keywords User interface reverse engineering, Web applications, Model-based user <b>interface</b> <b>descriptions...</b>|$|R
50|$|By contrast, {{clients and}} servers in some service-oriented {{architectures}} (SOA) interact through a fixed interface shared through documentation or an <b>interface</b> <b>description</b> language (IDL).|$|E
50|$|Web IDL is an <b>interface</b> <b>description</b> {{language}} (IDL) {{format for}} describing application programming interfaces (APIs) that {{are intended to}} be implemented in web browsers.|$|E
50|$|The System <b>Interface</b> <b>Description</b> {{identifies}} the interfaces between nodes, between systems, {{and between the}} components of a system, depending {{on the needs of}} a particular architecture. A system interface is a simplified or generalized representation of a communications pathway or network, usually depicted graphically as a straight line, with a descriptive label. Often, pairs of connected systems or system components have multiple interfaces between them. The System <b>Interface</b> <b>Description</b> depicts all interfaces between systems and/or system components that are of interest to the architect.|$|E
5000|$|<b>Interface</b> Design <b>Description</b> (IDD) - The {{design of}} one or more {{interfaces}} ...|$|R
40|$|We {{describe}} {{the design and}} the implementation of Lua, a simple, yet powerful, language for extending applications. Although Lua is a procedural language, it has data description facilities, and has been extensively used in production for several tasks including user configuration, general-purpose data-entry, <b>description</b> of user <b>interfaces,</b> <b>description</b> of application objects, and storage of structured graphical metafiles...|$|R
40|$|Abstract. The {{mediation}} {{architecture is}} widely used for bridging het-erogeneous data sources. We investigate how such architecture can be ex-tended to embrace information processing services and suggest a frame-work that supports declarative specication of mediation logic. In this paper we show how our framework {{can be applied to}} enrich <b>interface</b> <b>descriptions</b> of distributed objects and to integrate them with other client/server environments. ...|$|R
50|$|The OpenOffice.org API {{was based}} on a {{component}} technology known as Universal Network Objects (UNO). It consisted {{of a wide range of}} interfaces defined in a CORBA-like <b>interface</b> <b>description</b> language.|$|E
50|$|The {{goal of a}} Universal Interface Language is {{to achieve}} (automatic) {{interoperability}} beyond that provided by an <b>Interface</b> <b>description</b> language such as CORBA or a message exchange protocol such as SOAP.|$|E
50|$|Microsoft Interface Definition Language (MIDL) is a text-based <b>interface</b> <b>description</b> {{language}} by Microsoft, {{based on}} the DCE/RPC IDL which it extends for use with the Microsoft Component Object Model. Its compiler is also called MIDL.|$|E
40|$|The {{results of}} a NASA {{in-house}} team effort to develop a concept definition for a Commercially Developed Space Facility (CDSF) are presented. Science mission utilization definition scenarios are documented, the conceptual configuration definition system performance parameters qualified, benchmark operational scenarios developed, space shuttle <b>interface</b> <b>descriptions</b> provided, and development schedule activity was assessed {{with respect to the}} establishment of a proposed launch date...|$|R
40|$|Abstract. Constructing {{multi-device}} interfaces still presents major challenges, {{despite all}} {{efforts of the}} industry and several academic initiatives to develop usable solutions. One approach which is finding its way into general use, is XML-based User <b>Interface</b> <b>descriptions</b> to generate suitable User Interfaces for embedded systems and mobile computing devices. Another important solution is Model-based User Interface design, which evolved into a very suitable but academic approach for designing multi-device interfaces. We introduce a framework, Dygimes, which uses XML-based User <b>Interface</b> <b>descriptions</b> in combination with selected models, to generate User Interfaces for different kinds of devices at runtime. With this framework task specifications are combined with XMLbased User Interface building blocks to generate User Interfaces that can adapt to the context of use. The design of the User Interface and {{the implementation of the}} application code can be separated, while smooth integration of the functionality and the User Interface is supported. The resulting interface is location independent: it can migrate over devices while invoking functionality using standard protocols. ...|$|R
5000|$|ISO/IEC 24752-2:2014: Information technology—User interfaces—Universal remote console—Part 2: User <b>interface</b> socket <b>description</b> (revision of ISO/IEC 24752-2:2008) ...|$|R
