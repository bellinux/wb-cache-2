587|98|Public
25|$|Primitives {{are basic}} units which a {{graphics}} system may combine {{to create more}} complex images or models. Examples would be sprites and character maps in 2d video games, <b>geometric</b> <b>primitives</b> in CAD, or polygons or triangles in 3d rendering. Primitives may be supported in hardware for efficient rendering, or the building blocks provided by a graphics application.|$|E
25|$|The Direct3D 10 API {{introduces}} unified vertex shader and pixel shader. In addition, it {{also supports}} geometry shaders, which operate on entire <b>geometric</b> <b>primitives</b> (points, lines, and triangles), and can allow calculations based on adjacent primitives as well. The {{output of the}} geometry shader can be passed directly onwards to the rasterizer for interpolation and pixel shading, or written to a vertex buffer (known as 'stream out') to be fed back into {{the beginning of the}} pipeline.|$|E
5000|$|Geometry kernels - basic {{geometric}} {{operations on}} <b>geometric</b> <b>primitives</b> ...|$|E
5000|$|Bound. Calculate the {{bounding}} {{volume of}} each <b>geometric</b> <b>primitive.</b>|$|R
50|$|Displacement shaders can (additionally) be {{run on the}} {{vertices}} of a <b>geometric</b> <b>primitive,</b> {{before that}} primitive is even shaded.|$|R
40|$|<b>Geometric</b> <b>primitive</b> {{extraction}} or localization is {{a widely}} used method in image recognition tasks. A <b>geometric</b> <b>primitive</b> is a curve or surface, which can be described by an equation {{with a number of}} free parameters. A major problem faced in <b>geometric</b> <b>primitive</b> extraction deals with the characteristics of the search space: multimodal, nonlinear, noisy and highly dimensional; and with the possible variations of shapes of primitives. Genetic algorithms (GAs) offer a domain-independent approach suitable for working with such complex problems. The Breeder Genetic Algorithm (BGA) is a GA inspired by the science of breeding animals. This paper explores the use of a BGA with niching methods to find multiples primitives at the same time. Niching methods extend GAs to domains that require the location and maintenance of multiple solutions. We investigate two types of niching techniques, namely the so-called sharing and crowding methods. Our simulations have shown a clear superiority of crowding in this application. Therefore we develop this method further to consider the use of truncation selection in the BGA...|$|R
5000|$|... {{support for}} a number of <b>geometric</b> <b>primitives</b> and {{constructive}} solid geometry ...|$|E
50|$|What set the RISpec {{apart from}} other {{standards}} of the time was that it allowed using high-level <b>geometric</b> <b>primitives,</b> like quadrics or bicubic patches, to specify <b>geometric</b> <b>primitives</b> implicitly, {{rather than relying on}} a modeling application to generate polygons approximating these shapes explicitly beforehand. Another novelty introduced by the RISpec at the time was the specification of a shading language.|$|E
50|$|Supported <b>geometric</b> <b>primitives</b> include polygons, {{subdivision}} surfaces, {{and trimmed}} free-form surfaces such as NURBS, Bézier, and Taylor monomial.|$|E
50|$|In {{computer}} graphics, an icosphere is a <b>geometric</b> <b>primitive</b> {{available in}} Blender that approximates a sphere as a simplicial polyhedron, formed by subdividing the triangles {{of a regular}} icosahedron into smaller triangles.Icospheres are normally used to achieve a more isotropic (regular) layout of vertices than a UV sphere.|$|R
40|$|Using three {{dimensional}} point clouds {{from both}} simulated and real datasets from close and terrestrial laser scanners, the rotational and translational convergence regions of <b>Geometric</b> <b>Primitive</b> Iterative Closest Points (GP-ICP) are empirically evaluated. The results demonstrate the GP-ICP has a larger rotational convergence region than the existing methods, e. g., the Iterative Closest Point (ICP) ...|$|R
50|$|Beside a {{basic list}} of {{geometric}} primitives— sphere, cube, cylinder, cones and the like— Mechanisto also supported extruded and inflated images. This allowed any readable image file {{to be used}} as a primitive by first interpreting it as a 256-level greyscale image and then translating it to a solid surface. The resulting shape could then be modified and manipulated similarly to any other <b>geometric</b> <b>primitive</b> in the program.|$|R
50|$|Display Objects: These render {{data-driven}} visualization components (e.g., 3D models, <b>geometric</b> <b>primitives,</b> ESRI shapefiles, etc.) {{arranged in}} a scene graph.|$|E
50|$|All of the <b>geometric</b> <b>primitives</b> {{described}} in the specification, and provide all of the standard primitive variables applicable to each primitive.|$|E
50|$|It is also {{possible}} {{to reduce the size}} of the output by using indexed <b>geometric</b> <b>primitives,</b> i.e. create an array of 2D vertices and specify lines or polygons with short integer offsets into the array.|$|E
40|$|Abstract — Visualization {{techniques}} could {{enhance the}} current knowledge and data discovery methods {{by increasing the}} user involvement in the interactive process. In this paper, we propose a novel interactive clustering method based on geometric model with implicit functions and visualization techniques integrated in the GUI. First, visual clustering with blobby model allows the user to see the result of clustering {{on the screen and}} set the appropriate parameters interactively. After that, the user can get data of cluster in two ways. First method implies using solidbased subdivision algorithm. In the second method, the user needs to wrap the cluster he/she is interested in with <b>geometric</b> <b>primitive</b> solids that currently are cubes and/or spheres/ellipsoids. Geometric operations of union, intersection or subtraction can be performed over the <b>geometric</b> <b>primitive</b> solids to get the final wrapping shape. The user visually clusters the data and wraps the clusters with geometric shapes or even query clusters through graphics interface accessing dynamically 3 dimensional projections of multidimensional points from database or files. Keywords—data mining; visual clustering; implicit functions I...|$|R
5000|$|The term <b>geometric</b> <b>primitive,</b> or prim, in {{computer}} graphics and CAD systems {{is used in}} various senses, with the common meaning of the simplest (i.e. 'atomic' or irreducible) geometric objects that the system can handle (draw, store). Sometimes the subroutines that draw the corresponding objects are called [...] "geometric primitives" [...] as well. The most [...] "primitive" [...] primitives are point and straight line segment, which were all that early vector graphics systems had.|$|R
5000|$|A {{triangle}} is {{the most}} common <b>geometric</b> <b>primitive</b> of computer graphics. It is defined by its three vertices and a normal vector - the normal vector serves to indicate the front face of the triangle and is a vector that is perpendicular to the surface. The triangle may be provided with a color or with a texture (image [...] "glued" [...] on top of it). Triangles always exist on a single plane, therefore they're preferred over rectangles.|$|R
50|$|Some engines {{were able}} to render texture mapped Heightmaps (e.g. Nova Logic's Voxel Space, and the engine for outcast) via Bresenham-like {{incremental}} algorithms, producing {{the appearance of a}} texture mapped landscape without the use of traditional <b>geometric</b> <b>primitives.</b>|$|E
5000|$|Support for {{a variety}} of <b>geometric</b> <b>primitives,</b> {{including}} polygon meshes, fast subdivision surface modeling, Bezier curves, NURBS surfaces, metaballs, icospheres, multi-res digital sculpting (including dynamic topology, maps baking, remeshing, resymetrize, decimation), outline font, and a new n-gon modeling system called B-mesh.|$|E
50|$|Extended display subset {{functionality}} {{to allow}} rendering of <b>geometric</b> <b>primitives,</b> {{writing to the}} same display variable, to different images.For example, display subsets {{could be used to}} render the skin and fur of a creature to two separate images at once without the fur matting the skin passes.|$|E
30|$|The {{capability}} of GPUs have been impelled by their {{high level of}} parallelism {{and their ability to}} perform <b>geometric</b> <b>primitive</b> and floating point operations in a fast and efficient way. GPUs have been recently used for acceleration of various applications, such as fluid dynamics simulation, seismic analysis, medical image reconstruction, and weather forecasting, resulting in an expressive gain over the CPUs. This has been possible due {{to the development of the}} general-purpose computing on graphics processing units (GPGPU), making them even more flexible through their high parallelism and adaptable application programming.|$|R
40|$|In {{an effort}} to {{articulate}} models for the intuitive representation and manipulation of 2 D and 3 D forms, Blum (1967, 1973) invented {{the notion of a}} skeleton. His insight was to consider a disc as a basic <b>geometric</b> <b>primitive</b> and to use it to describe the reflective symmetries of an object. This representation became very popular in a variety of fields including computer vision, computer aided design, graphics and medical image analysis. In this article we survey the basic properties of skeletons and show how considerations from classical mechanics and geometric optics lead to new insights into how to compute them. We detail the algorithms we have developed in this regard and present several numerical examples to illustrate their use...|$|R
40|$|Abstract — In {{this paper}} {{we present a}} {{framework}} for 3 D geometric shape segmentation for close-range scenes used in mobile manipulation and grasping, out of sensed point cloud data. Our proposed approach proposes a robust geometric mapping pipeline for large input datasets that extracts relevant objects useful for a personal robotic assistant to perform manipulation tasks. The objects are segmented out from partial views and a reconstructed model is computed by fitting <b>geometric</b> <b>primitive</b> classes such as planes, spheres, cylinders, and cones. The geometric shape coefficients are then used to reconstruct missing data. Residual points are resampled and triangulated, to create smooth decoupled surfaces that can be manipulated. The resulted map is represented as a hybrid concept and is comprised of 3 D shape coefficients and triangular meshes used for collision avoidance in manipulation routines. I...|$|R
50|$|It {{supports}} {{a variety of}} <b>geometric</b> <b>primitives,</b> including polygon meshes and Bezier curves. Its features also allow for box modeling with subdivision surfaces In addition, it has some simple animation support, including spline-based camera paths and targeted objects, skeletal deformations, morph targets, and subdivision surfaces, making its character animation effective.|$|E
5000|$|Curve {{modeling}} - Surfaces {{are defined}} by curves, which are influenced by weighted control points. The curve follows (but does not necessarily interpolate) the points. Increasing the weight for a point will pull the curve closer to that point. Curve types include nonuniform rational B-spline (NURBS), splines, patches, and <b>geometric</b> <b>primitives</b> ...|$|E
50|$|CAD-3D {{is a basic}} {{polygonal}} 3D {{modeling and}} rendering program. An operator can assemble a scene out of <b>geometric</b> <b>primitives</b> or custom extruded or lathed objects. Various view ports are available to adjust lighting and camera positioning. The limited rendering functionality allows for flat shading in 16 shades. Rendered images can be exported in Degas Elite or NeoChrome format.|$|E
40|$|Communicated by (Name) In recent years, {{there has}} been a {{resurgence}} in the use of raw point cloud data as the <b>geometric</b> <b>primitive</b> of choice for several modeling tasks such as rendering, editing and compression. Algorithms using this representation often require reliable additional information such as the curve tangent or surface normal at each point. Estimation of these quantities requires the selection of an appropriate scale of analysis to accommodate sensor noise, density variation and sparsity in the data. To this goal, we present a new class of locally semi-parametric estimators that allows analysis of accuracy with finite samples, as well as explicitly addresses the problem of selecting optimal support volume for local fitting. Experiments on synthetic and real data validate the behavior predicted by the model, and show competitive performance and improved stability over leading alternatives that require a preset scale...|$|R
40|$|This paper {{deals with}} {{non-overlapping}} constraints between convex polytopes. Non-overlapping detection between fixed objects {{is a fundamental}} <b>geometric</b> <b>primitive</b> that arises in many applications. However from a constraint perspective it is natural to extend the previous problem to a non-overlapping constraint between two objects for which both positions are not yet fixed. A first contribution is to present theorems for convex polytopes which allow coming up with general necessary conditions for non-overlapping. These theorems {{can be seen as}} a generalization of the notion of compulsory part which was introduced in 1984 by Lahrichi and Gondran [6] for managing non-overlapping constraint between rectangles. Finally, a second contribution is to derive from the previous theorems efficient filtering algorithms for two special cases: the non-overlapping constraint between two convex polygons as well as the non-overlapping constraint between d-dimensional boxes. ...|$|R
40|$|Tensor field {{visualization}} is {{a challenging}} task {{due in part}} to the multi-variate nature of individual tensor samples. Glyphs convey tensor variables by mapping the tensor eigenvectors and eigenvalues to the orientation and shape of a <b>geometric</b> <b>primitive,</b> such as a cuboid or ellipsoid. Though widespread, cuboids and ellipsoids have problems of asymmetry and visual ambiguity. Cuboids can display misleading orientation for tensors with underlying rotational symmetry. Ellipsoids differing in shape can be confused, from certain viewpoints, because of similarities in profile and shading. This paper addresses the problems of asymmetry and ambiguity with a new tunable continuum of glyphs based on superquadric surfaces. Superquadric tensor glyphs enjoy the necessary symmetry properties of ellipsoids, while also imitating cuboids and cylinders to better convey shape and orientation, where appropriate. The new glyphs are demonstrated on fields of diffusion tensors from the human brain...|$|R
50|$|Primitives {{are basic}} units which a {{graphics}} system may combine {{to create more}} complex images or models. Examples would be sprites and character maps in 2d video games, <b>geometric</b> <b>primitives</b> in CAD, or polygons or triangles in 3d rendering. Primitives may be supported in hardware for efficient rendering, or the building blocks provided by a graphics application.|$|E
50|$|RenderMan {{has much}} in common with OpenGL, despite the two APIs being {{targeted}} to different sets of users (OpenGL to real-time hardware-assisted rendering and RenderMan to photorealistic off-line rendering). Both APIs {{take the form of a}} stack-based state machine with (conceptually) immediate rendering of <b>geometric</b> <b>primitives.</b> It is possible to implement either API in terms of the other.|$|E
50|$|Until {{the release}} of version 3, AmigaOS only {{natively}} supported the native Amiga graphics chipset, via graphics.library, which provides an API for <b>geometric</b> <b>primitives,</b> raster graphic operations and handling of sprites. As this API could be bypassed, some developers chose to avoid OS functionality for rendering and directly program the underlying hardware for gains in efficiency.|$|E
40|$|When a {{geometric}} {{algorithm is}} designed without considering {{the effect of}} the round-off errors inherent in finite precision arithmetic operations, the results from a computer implementation of the algorithm are often found to be quite different than expected. This thesis describes some of the issues involved in the design of <b>geometric</b> <b>primitive</b> operations that are reliable and accurate when implemented. In particular, algorithms are presented for the problems of point coincidence, determination of the orientation of the angle formed by three ordered points, line segment intersection and point inclusion in a triangle. The algorithms return a YES or NO answer only if it can be determined, through error analysis techniques, that the answer is definitely correct; otherwise a descriptive error message is returned. The techniques of partitioning a problem into rectangular sub-problems, and defining bounding rectangles around regions of interest are used {{to reduce the amount of}} numerical computation...|$|R
40|$|We present ETCHA Sketches–an Experimental Test Corpus of Hand Annotated Sketches–with {{the goal}} of facilitating the {{development}} of a standard test corpus for sketch understanding research. To date we have collected sketches from four domains: circuit diagrams, family trees, floor plans and geometric configurations. We have also labeled many of the strokes in these data sets with <b>geometric</b> <b>primitive</b> labels (e. g., line, arc, polyline, polygon, and ellipse). We found accurate labeling of data to be a more complex task than may be anticipated. The complexity arises because labeled data can be used for different purposes with different requirements, and because some strokes are ambiguous and can legitimately be put into multiple categories. We discuss several different labeling methods and some properties of the sketches that became apparent from the process of collecting and labeling the data. The data sets are available online a...|$|R
40|$|Many {{problems}} in computer vision can be formulated as an optimization problem. Developping the efficient global optimizational technique adaptive to the vision proplem {{becomes more and}} more important. In this paper, we present a <b>geometric</b> <b>primitive</b> extraction method, which plays a crucial role in content-based image retrieval and other vision problems. We formulate the problem as a cost function minimization problem and we present a new optimization technique called Evolutionary Tabu Search (ETS). Genetic algorithm and Tabu Search Algorithm are combined in our method. Specificly, we incorporates "the survival of strongest" idea of evolution algorithm into tabu search. In experiments, we use our method for shape extraction in images and compare our method with other three global optimization methods including genetic algorithm, simulated Annealing and tabu search. The results show that the new algorithm is a practical and effective global optimization method, which can yield good near-o [...] ...|$|R
