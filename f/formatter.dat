197|34|Public
25|$|Microsoft's EFI FAT32 {{specification}} {{states that}} any FAT file system {{with less than}} 4085 clusters is FAT12, else any FAT file system with less than 65525 clusters is FAT16, and otherwise it is FAT32. The entry for cluster 0 {{at the beginning of}} the FAT must be identical to the media descriptor byte found in the BPB, whereas the entry for cluster 1 reflects the end-of-chain value used by the <b>formatter</b> for cluster chains (0xFFF, 0xFFFF or 0x0FFFFFFF). The entries for cluster numbers 0 and 1 end at a byte boundary even for FAT12, e.g., 0xF9FFFF for media descriptor 0xF9.|$|E
2500|$|SD/SDHC/SDXC memory cards have a [...] "Protected Area" [...] on {{the card}} for the SD standard's {{security}} function; a standard <b>formatter</b> may erase it, causing problems if security is used. The SD Association provides freely-downloadable SD <b>Formatter</b> software {{to overcome these problems}} for Windows and Mac OS X. The SD <b>Formatter</b> does not format the [...] "Protected Area", and the Association recommends the use of appropriate application software or SD-compatible device that provides SD security function to format the [...] "Protected Area" [...] in the memory card.|$|E
50|$|Logging {{is broken}} into three major pieces: the Logger, <b>Formatter</b> and the Handler (Appender). The Logger is {{responsible}} for capturing the message to be logged along with certain metadata and passing it to the logging framework. After receiving the message, the framework calls the <b>Formatter</b> with the message. The <b>Formatter</b> formats it for output. The framework then hands the formatted message to the appropriate Appender for disposition. This might include a console display, writing to disk, appending to a database, or email.|$|E
5000|$|Raw or {{analyzed}} data: some tools display raw data, {{while others}} analyze it (examples storage dump <b>formatters</b> that format data, vs. ‘intelligent’ data <b>formatters</b> (“ANALYZE” {{is a common}} verb) that combine product knowledge with analysis of state variables to indicate the ‘meaning’ of the data.|$|R
50|$|MoinMoin, {{created in}} Python by Jürgen Hermann and Thomas Waldmann in mid-2000, was {{initially}} based on PikiPiki. It is a flat-file wiki {{with a simple}} code base but many possible extensions. MoinMoin uses the idea of separating the parsers (for parsing the wiki syntax) from the <b>formatters</b> (for outputting HTML code), with an interface between them, so that new parsers and output <b>formatters</b> can be written.|$|R
50|$|The {{processor}} {{is divided}} into a text-input scanner and an output generator. The scanner output is in REBOL block format and can be input into one of several output <b>formatters.</b>|$|R
5000|$|SD/SDHC/SDXC memory cards have a [...] "Protected Area" [...] on {{the card}} for the SD standard's {{security}} function; a standard <b>formatter</b> may erase it, causing problems if security is used. The SD Association provides freely-downloadable SD <b>Formatter</b> software {{to overcome these problems}} for Windows and Mac OS X. The SD <b>Formatter</b> does not format the [...] "Protected Area", and the Association recommends the use of appropriate application software or SD-compatible device that provides SD security function to format the [...] "Protected Area" [...] in the memory card.|$|E
50|$|OS-9's {{multi-user}} and multi-tasking capabilities make it usable as a general-purpose interactive computer system. Many third-party interactive applications {{have been}} written for it, such as the Dynacalc spreadsheet, the VED text <b>formatter,</b> and the Stylograph and Screditor-3 WYSIWYG word processors. TSC's nroff emulating <b>formatter</b> was ported to OS-9 by MicroWay, as well.|$|E
5000|$|Easy to read {{without a}} pod <b>formatter</b> (i.e. in its source-code form) ...|$|E
5000|$|Groff (pronounced [...] "gee-roff") (also called GNU troff) is a {{typesetting}} {{system that}} creates formatted output when given plain text mixed with formatting commands. It is the GNU {{replacement for the}} troff and nroff text <b>formatters.</b>|$|R
50|$|Appenders use Layouts {{to format}} log entries. A popular way to format one-line-at-a-time log files is PatternLayout, {{which uses a}} pattern string, much like the C / C++ {{function}} printf. There are also HTMLLayout and XMLLayout <b>formatters</b> for use when HTML or XML formats are more convenient, respectively. Log4j 2 added Layouts for CSV, Graylog Extended Log Format (GELF), JSON, YAML and RFC-5424.|$|R
5000|$|... troff {{features}} {{commands to}} designate fonts, spacing, paragraphs, margins, footnotes and more. Unlike many other text <b>formatters,</b> troff can position characters arbitrarily on a page, even overlapping them, {{and has a}} fully programmable input language. Separate preprocessors are used for more convenient production of tables, diagrams, and mathematics. Inputs to troff are plain text files that can be created by any text editor.|$|R
50|$|Wium Lie {{has also}} {{promoted}} {{the concept of}} printing from the web. His book on CSS, co-authored with Bert Bos, was produced from HTML and CSS files. These files were then converted to PDF by the Prince XML + CSS <b>formatter.</b> In 2005, he joined the board of YesLogic, the company that makes the Prince <b>formatter.</b>|$|E
5000|$|There {{were only}} two modules in this category. They were date builder and date <b>formatter.</b> Date builder module {{converted}} a text to a date when there was text in the date format such as [...] "yesterday" [...] or [...] "tomorrow". Date <b>formatter</b> module took a date as input date and changed it to the desired format.|$|E
5000|$|Fr. Leonard Ekisa, <b>formatter</b> and {{lecturer}} of Pastoral Theology at {{the same}} seminary ...|$|E
40|$|Automated {{formatting}} is {{an important}} technique for the software maintainer. It is either applied separately to improve the readability of source code, {{or as part of}} a source code transformation tool chain. In this paper we report on the application of generic tools for constructing <b>formatters.</b> In an industrial setting automated <b>formatters</b> need to be tailored to the requirements of the customer. The (legacy) programming language or dialect and the corporate formatting conventions are specific and non-negotiable. Can generic formatting tools deal with such unexpected requirements? Driven by an industrial case of nearly 80 thousand lines of Cobol code, several limitations in existing formatting technology have been addressed. We improved its flexibility by replacing a generative phase by a generic tool, and we added a little expressiveness to the formatting back end. Most importantly, we employed a multi-stage formatting framework that can cope with any kind of formatting convention using more computational power. ...|$|R
40|$|Document {{formatting}} {{systems have}} reached a plateau. Although existing systems are being steadily enhanced, the next major step forward will require a union of the best features of batch <b>formatters,</b> interactive document editors, and page description languages. Thispaper drawson itsauthor’stwelve yearsof experience designing, implementing, and enhancing the Lout document formatting system to identify the remaining problems in document formatting and explore some possible solutions...|$|R
50|$|Pertec's most {{successful}} products were hard disk drives and tape drives, which were sold as OEM {{to the top}} computer manufacturers, including IBM, Siemens and DEC. Pertec manufactured multiple models of seven and nine track half-inch tape drives with densities 800CPI (NRZI) and 1600CPI (PE) and phase-encoding <b>formatters,</b> which were used by a myriad of original equipment manufacturers as I/O devices for their product lines.|$|R
5000|$|Antenna House <b>Formatter</b> - XSL-FO and CSS {{formatting}} software - Commercial and proprietary {{rendering engine}} ...|$|E
5000|$|Fr. Dunstan Epalaat, a {{pastoral}} theologian {{who was also}} a <b>formatter</b> in the same seminary ...|$|E
5000|$|Cucumber uses <b>Formatter</b> Plugins {{to provide}} output. Several common formats are {{provided}} by default, including ...|$|E
5000|$|There {{are a few}} {{implementations}} of -like {{functions that}} allow extensions to the escape-character-based mini-language, thus allowing the programmer to have a specific formatting function for non-builtin types. One of the most well-known is the (now deprecated) glibc's [...] However, it is rarely used {{due to the fact}} that it conflicts with static format string checking. Another is Vstr custom <b>formatters,</b> which allows adding multi-character format names, and can work with static format checkers.|$|R
40|$|This {{document}} {{describes a}} set of coding standards and recommendations that are local standards for programs written in C for the SunOS product. The purpose of these standards is to facilitate sharing of each other’s code, {{as well as to}} enable construction of tools (e. g., editors, <b>formatters)</b> that, by incorporating knowledge of these standards, can help the programmer in the preparation of programs. This document is based on a similar document written by L. W. Cannon, R. A...|$|R
5000|$|Line delimited JSON (LDJSON), newline delimited JSON (NDJSON), and JSON lines (JSONL) {{are three}} terms for {{equivalent}} formats of JSON streaming. Streaming {{makes use of}} the fact that the JSON format does not allow newline and return characters within values (they must be escaped as [...] and , respectively) and that most JSON <b>formatters</b> default to not including any whitespace, including newlines and returns. These features allow the newline and/or return characters to be used as a delimiter.|$|R
50|$|Babjak, John P. Michal Lacko, SJ, and {{informant}} <b>formatter</b> Catholics. Trnava: Good Book Publishing, 1997. Dialogues.|$|E
50|$|Rust {{provides}} string interpolation via the std::fmt module, {{which is}} interfaced with through various macros such as format!, write!, and print!. These macros are converted into Rust source code at compile-time, whereby each argument interacts with a <b>formatter.</b> The <b>formatter</b> supports positional parameters, named parameters, argument types, and defining various formatting traits.The output {{of each of}} these will be: There are 4 apples and 3 bananas.|$|E
50|$|Software {{products}} like Prince and Antenna House <b>Formatter</b> have demonstrated comparable quality of XSL-FO (but using CSS) in the PDF production.|$|E
40|$|Use IPython kernel to run Python code: {{support for}} rich output support IPython magics Improved error {{handling}} Render tracebacks correctly Drop Python 2 support Run code using any Jupyter kernel with [...] kernel option Output directly to Jupyter notebooks with chunk options preserved as metadata -> {{ability to use}} custom nbconvert templates in addition to builtin <b>formatters.</b> Drop uppercase versions on pweave and ptangle scripts Weave documents from URLs md 2 html is the new default format for. pmd and. py inpu...|$|R
50|$|DSSSL {{consists}} of two parts: a tree transformation process {{that can be used}} to manipulate the tree structure of documents prior to presentation, and a formatting process that associates the elements in the source document with specific nodes in the target representation—the flow object tree. DSSSL specifications are device-independent pieces of information that can be interchanged between different platforms. The back-end <b>formatters</b> needed to generate the final form of the document (e.g. PostScript or Rich Text Format, or a presentation on a computer display) are not standardized by DSSSL.|$|R
40|$|The {{concept of}} {{unstructured}} structure editing and ted, an editor for unstructured trees, is described. Ted {{is used to}} manipulate hierarchies of information in an unrestricted manner. The tool was implemented and applied {{to the problem of}} organizing formal proofs. As a proof management tool, it maintains the validity of a proof and its constituent lemmas independently from the methods used to validate the proof. It includes an adaptable interface which may be used to invoke theorem provers and other aids to proof construction. Using ted, a user may construct, maintain, and verify formal proofs using a variety of theorem provers, proof checkers, and <b>formatters...</b>|$|R
5000|$|MINCE and SCRIBBLE, an Emacs-like {{editor and}} Scribe-like text <b>formatter</b> for CP/M machines. MINCE was also {{available}} for the Atari ST.|$|E
50|$|MINCE used a gap buffer to {{fit within}} 48kB, and {{implemented}} a very efficient virtual memory system to support multiple buffers {{and a maximum}} file size limited only by available disk space. Although it was not open source, MOTU distributed partial code they deemed most useful for extending the product. MINCE was a companion product to SCRIBBLE, a text <b>formatter</b> based on Scribe. This separation of duties into editor plus <b>formatter</b> was common among advanced word processors at that time.|$|E
50|$|Version 1.0 (equivalent of French 1.01) shipped a {{few months}} later in the US and rest of world, with a mixed {{reception}} from customers. Traditional Borland fans who bought Sprint were happy with the editor, but wondered why the package included a sophisticated <b>formatter,</b> while business users who wanted a word processor just to write their memos and letters wondered {{what to do with the}} heavy manual and powerful features of the <b>formatter</b> language. In any event, word processing was shifting to WYSIWYG.|$|E
40|$|ALCHEMIST is {{a general}} purpose {{transformation}} generating environment which supports specification, generation, and execution of data transformations. alchemist allows an abstract specification of the transformation through a window-based interface and supports the generation and compilation of transformation program code from these specifications. Unlike compilercompilers, ALCHEMIST is intended to automate building transformations between two complex representation formats and is thus especially suitable for constructing transformations between database tools, case tools, graphical editors or text <b>formatters.</b> In this paper we will describe the design principles {{and the structure of}} alchemist, and demonstrate its use. We will also discuss our experiences with several example transformations and present a real-life case study of using alchemist for interfacing between two software development environments...|$|R
40|$|Good {{documentation}} {{is important}} for the production of reusable and maintainable software. Tools that support the production of accurate and legible documentation are therefore essential for any programming environment. Documentation can be provided as printed output, like a typeset manual, or it can be provided on-line, as an electronic document. We present a translation from Box, a special purpose formatting language, to HTML. The translation is formulated in the executable algebraic specification formalism Asf+Sdf. It is capable of producing effective representations of computer programs in HTML and supports the generation of hypertext links. It {{can be used as a}} back-end for the Box tools, a system that is capable of generating <b>formatters</b> for arbitrary programming languages from their syntax...|$|R
40|$|Whilst MakeIndex is {{an index}} {{processor}} which {{is suitable for}} the production of indexes in conjunction with many text <b>formatters,</b> its support for non-English languages is weak and a new version called International MakeIndex has been presented, for processing international documents. The improvements concentrate on the internationalization of the sorting process for keywords in an index. Though it substantially improves the availability to sort new languages, there are still weaknesses in the processing model largely inherited from MakeIndex. Through the experiences gained from the International MakeIndex project we implemented a new index processor x ◦ ındy that (a) improves the sorting of index entries at a finer granularity than International Make-Index, (b) offers new mechanisms for processing structured location references besides page numbers and Roman numerals, and (c) allows for complex mark-up schemes...|$|R
