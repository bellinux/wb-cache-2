1|10000|Public
40|$|VMM and introspection are {{important}} building blocks to create high assurance systems. In this view, {{we have developed}} Psyco-Virt, a software architecture that integrates introspection {{with a set of}} host and network IDS tools to achieve high assurance on the <b>integrity</b> <b>of</b> <b>the</b> <b>VMs.</b> The overall architecture consists of a cluster of monitored VMs (Mon-VMs), i. e. the VMs to monitor, and introspection VMs (IVMs) to implement the monitoring. All the Mon-VMs are mapped onto a cluster of physical nodes, and one IVM is introduced for each physical node. All the Mon-VMs are connected by a virtual network, the data one, to exchange application traffic. A further virtual network, the control network, connects all the IVMs and each IVM and the Mon-VMs on the same node. This is a private hierarchical network that spans across distinct physical nodes to support the exchange of alerts and introspection information. A set of IDS agents on each Mon-VM discovers attempted intrusions/ attacks and, in such a case, an agent alerts the IVM through the control network. In Psyco-Virt, the kernel of each Mon-VM guarantees the integrity of the controls implemented by the IDS agents, while an introspector running on the IVM exploits the VMM control interface to apply introspection and monitor the kernel of each Mon-VM to discover attacks against the kernel itself...|$|E
40|$|Nowadays, speech {{technologies}} {{are among the}} most vibrant sectors <b>of</b> <b>the</b> world’s economy. <b>Of</b> high importance is <b>the</b> problem <b>of</b> ensuring <b>the</b> security <b>of</b> speech information (SI). Here we discuss SI protection systems within a modern communication model. The model is multimodal, multithreaded, and implies a large number of subscribers interacting via several communication lines. With this in mind, we perform a detailed analysis <b>of</b> threats to <b>the</b> confidentiality, <b>integrity</b> and accessibility <b>of</b> SI. Existing methods of counteraction against these threats are discussed, and shown to be insufficient to ensure <b>the</b> safety <b>of</b> voice messages (VM) in full. Mean while, there are new threats to <b>the</b> <b>integrity</b> and accessibility <b>of</b> SI, <b>the</b> solutions for which are either do not exist, or only being developed. We propose our original approach to counter these threats. Steganography methods are the most promising for ensuring <b>the</b> <b>integrity</b> <b>of</b> <b>the</b> <b>VM.</b>   In particular, using audiomarkers allows one to reliably trace speaker’sidentity throughout the entire communication session. In order to counter the threats to SI availability due to <b>the</b> capacity <b>of</b> <b>the</b> communication channel and <b>the</b> limited volumes <b>of</b> <b>VM</b> data storage, it is necessary to improve existing adaptive speech compression algorithms, along with developing new ones. Furthermore, such algorithms must keep <b>the</b> specified level <b>of</b> speech intelligibility...|$|R
40|$|Large-scale {{deployment}} and use {{of cloud}} computing in industry is accompanied {{and in the same}} time hampered by concerns regarding protection of data handled by cloud computing providers. One <b>of</b> <b>the</b> consequences <b>of</b> moving data processing and storage off company premises is that organizations have less control over their infrastructure. As a result, cloud service (CS) clients must trust that the CS provider is able to protect their data and infrastructure from both external and internal attacks. Currently however, such trust can only rely on organizational processes declared by the CS provider and can not be remotely verified and validated by an external party. Enabling the CS client to verify <b>the</b> <b>integrity</b> <b>of</b> <b>the</b> host where the virtual machine instance will run, as well as to ensure that the virtual machine image has not been tampered with, are some steps towards building trust in the CS provider. Having the tools to perform such verifications prior to <b>the</b> launch <b>of</b> <b>the</b> <b>VM</b> instance allows <b>the</b> CS clients to decide in runtime whether certain data should be stored- or calculations should be made on <b>the</b> <b>VM</b> instance offered by the CS provider. This thesis combines three components – trusted computing, virtualization technology and cloud computing platforms – to address issues of trust and security in public cloud computing environments. <b>Of</b> <b>the</b> three components, virtualization technology has had the longest evolution and is a cornerstone for <b>the</b> realization <b>of</b> cloud computing. Trusted computing is a recent industry initiative that aims to implement <b>the</b> root <b>of</b> trust in a hardware component, the trusted platform module. The initiative has been formalized in a set of specifications and is currently at version 1. 2. Cloud computing platforms pool virtualized computing, storage and network resources in order to serve a large number of customers customers that use a multi-tenant multiplexing model to offer on-demand self-service over broad network. Open source cloud computing platforms are, similar to trusted computing, a fairly recent technology in active development. <b>The</b> issue <b>of</b> trust in public cloud environments is addressed by examining <b>the</b> state <b>of</b> <b>the</b> art within cloud computing security and subsequently addressing <b>the</b> issues <b>of</b> establishing trust in <b>the</b> launch <b>of</b> a generic virtual machine in a public cloud environment. As a result, the thesis proposes a trusted launch protocol that allows CS clients to verify and ensure <b>the</b> <b>integrity</b> <b>of</b> <b>the</b> <b>VM</b> instance at launch time, as well as <b>the</b> <b>integrity</b> <b>of</b> <b>the</b> host where <b>the</b> <b>VM</b> instance is launched. The protocol relies on <b>the</b> use <b>of</b> Trusted Platform Module (TPM) for key generation and data protection. The TPM also plays an essential part in <b>the</b> <b>integrity</b> attestation <b>of</b> <b>the</b> <b>VM</b> instance host. Along with a theoretical, platform-agnostic protocol, the thesis also describes a detailed implementation design <b>of</b> <b>the</b> protocol using the OpenStack cloud computing platform. In order the verify <b>the</b> implementability <b>of</b> <b>the</b> proposed protocol, a prototype implementation has built using a distributed deployment <b>of</b> OpenStack. While <b>the</b> protocol covers only the trusted launch procedure using generic virtual machine images, it presents a step aimed to contribute towards <b>the</b> creation <b>of</b> a secure and trusted public cloud computing environment. Validerat; 20120807 (anonymous...|$|R
30|$|Secure VM-vTPM (Virtual Trusted Platform Module) Migration {{protocol}}: The protocol includes various steps like authentication, attestation {{and then}} {{different stages of}} data transfer. At the first step both the parties authenticate for further communication. <b>The</b> source <b>VM</b> start transferring to the destination only after verification <b>of</b> <b>integrity.</b> <b>The</b> migrating <b>VM</b> files are stopped by the vTPM where the files are encrypted and then transferred to the destination. After transferring all <b>the</b> files <b>of</b> a <b>VM,</b> vTPM is deleted.|$|R
40|$|Abstract. Virtual Interacting Network CommunIty (Vinci) is an {{abstract}} archi-tecture {{to share in}} a secure way an ICT infrastructure among several user communities, {{each with its own}} applications and security requirements. To each community, Vinci allocates a network of virtual machines (VMs) that is mapped onto the computational and communication resources <b>of</b> <b>the</b> infrastructure. Each network includes several kinds of VMs. Application VMs (APP-VMs) run ap-plications and stores information shared within a community. File system VM (FS-VMs) store and protect files shared among communities by applying a com-bination of MAC and Multi-Level Security (MLS) policies. A firewall VM (FW-VM) is a further kind of VM that, according to <b>the</b> security policy <b>of</b> each community, protects information private to a community transmitted across an untrusted network or controls the information exchanged with other communi-ties. <b>The</b> last kind <b>of</b> <b>VM</b> is <b>the</b> administrative <b>VM</b> (A-VM) that configures and manages <b>the</b> other <b>VMs</b> in a community as well as <b>the</b> resources <b>of</b> each physical node and it also assures <b>the</b> <b>integrity</b> <b>of</b> all <b>the</b> <b>VMs.</b> After describing <b>the</b> overall Vinci architecture, we present and discuss the im-plementation and <b>the</b> performance <b>of</b> a first prototype...|$|R
40|$|Monitoring file {{integrity}} and preventing illegal modifications {{is a crucial}} part of improving system security. Unfortunately, current research focusing on isolating monitoring components from supervised systems can often still be thwarted by tampering with the hooks placed inside of Virtual Machines (VMs), thus resulting in critical file operations not being noticed. In this paper, we present an approach of relocating a supervised VM’s entire filesystem into <b>the</b> isolated realm <b>of</b> <b>the</b> host. This way, we can enforce that all file operations originating from a VM (e. g., read and write operations) must necessarily be routed through the hypervisor, and thus can be tracked and even be prevented. Disabling hooks in <b>the</b> <b>VM</b> then becomes pointless as this would render a VM incapable of accessing or manipulating its own filesystem. This guarantees secure and complete active file <b>integrity</b> monitoring <b>of</b> <b>VMs.</b> <b>The</b> experimental results <b>of</b> our prototype implementation show <b>the</b> feasibility <b>of</b> our approach...|$|R
30|$|Attacks on {{migrated}} <b>VMs.</b> One <b>of</b> <b>the</b> {{main features}} <b>of</b> IaaS clouds is <b>the</b> live migration <b>of</b> <b>VMs</b> {{in which a}} running VM is moved to another server with the least possible interruption. Live migration improves <b>the</b> flexibility <b>of</b> <b>the</b> virtual environment and allows the provider to keep <b>the</b> <b>VM</b> running with <b>the</b> required performance when the original host is overloaded or has to be isolated for maintenance or because of an error or attack. Live migration {{can also be utilized}} for improving the operating costs (e.g. energy) by consolidating <b>VM.</b> <b>The</b> security challenges in the cloud are more serious when migration is used, in particular if migration is performed between different widely distributed data centers [27]. Two main threats are imposed by live migration: <b>the</b> exploitation <b>of</b> <b>the</b> migration itself (see Section “Inter-VM Attacks”), and attacks on <b>the</b> customer <b>VMs</b> during migration. In the second threat, <b>the</b> migrated <b>VMs</b> might face different attacks such as man-in-the-middle, DoS and stack over-flow [28]. These attacks can be either active attacks that change the migrated data or passive attacks that perform an eavesdropping on <b>the</b> <b>VM</b> to extract sensitive data such as passwords [29]. Other migration data such as kernel memory, application state, and keys might also be sniffed or tampered if transmitted without encryption, thus compromising <b>the</b> <b>integrity</b> and confidentiality <b>of</b> <b>the</b> <b>VM</b> data [28].|$|R
40|$|Blood {{pressure}} (BP) {{changes in}} response to <b>the</b> Valsalva maneuver (<b>VM)</b> reflect <b>the</b> <b>integrity</b> <b>of</b> <b>the</b> baroreflex that regulates BP. Performing this maneuver in the standard supine position often prevents adequate venous preload reduction, resulting in a rise rather than a fall in BP, the “flat top ” Valsalva response. We determined whether performing <b>the</b> Valsalva Maneuver (<b>VM)</b> at a 20 degree angle of head up tilt (20 _deg) improves preload reduction, thereby reducing <b>the</b> frequency <b>of</b> flat top responses, improving reflex vasoconstriction, and increasing the Valsalva ratio (VR). 130 patients were evaluated in a prospective study. Each patient performed <b>the</b> <b>VM</b> in both supine and 20 _deg positions. Flat top responses were present in 18 % of subjects when supine. 20 _deg position reduced the flat top response by 87 %. <b>The</b> components <b>of</b> <b>the</b> response that are dependent on preload reduction (VR and phases II_E, II_L, and IV) also showed significant improvement with 20 _degree. A 20 degree angle of tilt is sufficient to reduce venous preload, decreasing flat top response rate and improving the VR and <b>the</b> morphology <b>of</b> <b>the</b> <b>VM.</b> We recommend this modification for laboratory evaluation <b>of</b> <b>the</b> <b>VM,</b> whenever a “flat-top ” response is seen...|$|R
30|$|Identify {{benchmarks}} {{and features}} (“Performance evaluation” section): We identify 7 metrics to evaluate <b>the</b> performances <b>of</b> <b>the</b> <b>VMs.</b> For each metric we select the relevant benchmark {{to test the}} appropriate feature. The price is considered as an additional metric driving <b>the</b> value <b>of</b> <b>the</b> <b>VMs.</b>|$|R
40|$|Virtual {{environment}} secure {{file system}} (VSFS) is a software architecture for secure file sharing among applications with different trust levels {{that consists of}} a set of interconnected virtual machines (VMs). Application <b>VMs</b> (APP-VMs) run <b>the</b> application processes that transparently access remote shared files hosted by file system VMs (FS-VMs). Each FS-VM implements a mandatory access control (MAC) security policy to control file sharing. To define and enforce this policy, VSFS uses SELinux. Each APP-VM is labeled with a security context paired with <b>the</b> IP address <b>of</b> <b>the</b> <b>VM.</b> FS-VMs use this context to check access rights <b>of</b> <b>the</b> APP-VMs with respect to the requested files and operations. A third set <b>of</b> <b>VMs,</b> <b>the</b> administrative <b>VMs</b> (A-VMs), provides assurance about <b>the</b> <b>integrity</b> <b>of</b> <b>the</b> FS-VMs and implements anti-spoofing techniques to authenticate each file request sent by the APP-VMs. After describing the overall architecture, we discuss the security and performance results of a first prototype. These first results show that the overhead due to mandatory access control is fairly acceptable...|$|R
30|$|New VM {{instances}} {{are created}} from static templates that contain <b>the</b> basic configuration <b>of</b> <b>the</b> <b>VM</b> to achieve elasticity {{with regards to}} capacity. Instance specific settings can be injected into <b>the</b> <b>VM</b> during <b>the</b> deployment phase through means of contextualization. So far this {{is limited to a}} single data source and data remains static throughout <b>the</b> lifecycle <b>of</b> <b>the</b> <b>VM.</b>|$|R
30|$|The {{data will}} be {{duplicated}} but will be more secure as a backup after <b>the</b> addition <b>of</b> <b>the</b> <b>VM</b> remote server. However, if the remote server is removed, the scenarios cannot run because the data reside on it, resulting in loss <b>of</b> <b>the</b> data. By contrast, <b>the</b> addition <b>of</b> <b>the</b> <b>VM</b> cloudlet results in better performance due to cloudlet collaboration. <b>The</b> removal <b>of</b> <b>VM</b> cloudlets decreases performance due to the decreased collaboration between the cloudlets. The addition or <b>the</b> removal <b>of</b> <b>the</b> <b>VM</b> client {{has no effect on}} the system as <b>the</b> <b>VM</b> client allows a client to execute an operating system locally on their device, whereas the operation system is managed centrally. The client requests a word through <b>the</b> <b>VM</b> client, and then the connection server authenticates the client before connecting the client with the virtual network. Thus, <b>the</b> addition <b>of</b> <b>the</b> <b>VM</b> client does not affect the system as it needs the words to operate. However, if <b>the</b> <b>VM</b> client is removed, the client {{would not be able to}} request the words.|$|R
40|$|It is {{presented}} {{a method to}} design Current-Mode (CM) filters from <b>the</b> transformation <b>of</b> <b>the</b> well-known Voltage-Mode (<b>VM)</b> opamp-RC filters. First, it is shown <b>the</b> simulation <b>of</b> a low-frequency opamp-RC filter with stable high Q, by applying the Y-Δ transformation. Second, it is described <b>the</b> transformation <b>of</b> <b>the</b> <b>VM</b> opamp-RC filter to a VM Gm-C filter and the symbolic transfer functions <b>of</b> <b>the</b> <b>VM</b> Gm-C filter are derived. Third, it is shown <b>the</b> transformation <b>of</b> <b>the</b> <b>VM</b> Gm-C filter to a CM Gm-C filter and the symbolic transfer functions <b>of</b> <b>the</b> CM filter are derived to show that both, <b>the</b> <b>VM</b> and <b>the</b> CM Gm-C filters perform the same behavior. Finally, some guidelines are introduced to design CM filters with CMOS OTAs and current conveyors...|$|R
5000|$|Virtual machine tests (includes JASM tests) verify {{implementation}} <b>of</b> <b>the</b> <b>VM</b> core.|$|R
30|$|Outgoing Migration Control: The {{attacker}} can initiate <b>the</b> <b>VM</b> {{migration and}} can make <b>the</b> overuse <b>of</b> <b>the</b> cloud resources {{which can lead to}} failure <b>of</b> <b>the</b> <b>VM.</b>|$|R
40|$|Current {{versions}} of Java fail to address many <b>of</b> <b>the</b> unique challenges posed by <b>the</b> new generation <b>of</b> distributed applications and mobile agent systems. Aroma is a Java-compatible Virtual Machine (VM) that provides unique {{features such as}} the ability to capture the full execution state <b>of</b> <b>the</b> <b>VM</b> or individual thread execution state, and the ability to dynamically control disk, network, and CPU resources. This paper describes the design and implementation <b>of</b> <b>the</b> Aroma <b>VM</b> focusing on <b>the</b> features <b>of</b> <b>the</b> <b>VM</b> that support state capture and resource control. 1...|$|R
30|$|Very {{useful in}} static VM consolidation, because it {{required}} exact size and constraints <b>of</b> <b>the</b> <b>VM.</b>|$|R
30|$|An {{investigation}} <b>of</b> <b>the</b> impact <b>of</b> <b>the</b> <b>VM</b> boot-up time on <b>the</b> accuracy <b>of</b> <b>the</b> rule-based auto-scaling systems.|$|R
50|$|Post-copy VM {{migration}} is initiated by suspending <b>the</b> <b>VM</b> at <b>the</b> source. With <b>the</b> <b>VM</b> suspended, a minimal subset <b>of</b> <b>the</b> execution state <b>of</b> <b>the</b> <b>VM</b> (CPU state, registers and, optionally, non-pageable memory) {{is transferred to}} <b>the</b> target. <b>The</b> <b>VM</b> is then resumed at the target. Concurrently, the source actively pushes the remaining memory pages <b>of</b> <b>the</b> <b>VM</b> to <b>the</b> target - an activity known as pre-paging. At the target, if <b>the</b> <b>VM</b> tries to access a page {{that has not yet}} been transferred, it generates a page-fault. These faults, known as network faults, are trapped at the target and redirected to the source, which responds with the faulted page. Too many network faults can degrade performance of applications running inside <b>the</b> <b>VM.</b> Hence pre-paging can dynamically adapt the page transmission order to network faults by actively pushing pages in <b>the</b> vicinity <b>of</b> <b>the</b> last fault. An ideal pre-paging scheme would mask large majority of network faults, although its performance depends upon the memory access pattern <b>of</b> <b>the</b> <b>VM's</b> workload. Post-copy sends each page exactly once over the network. In contrast, pre-copy can transfer the same page multiple times if the page is dirtied repeatedly at the source during migration. On the other hand, pre-copy retains an up-to-date state <b>of</b> <b>the</b> <b>VM</b> at <b>the</b> source during migration, whereas with post-copy, <b>the</b> <b>VM's</b> state is distributed over both source and destination. If the destination fails during migration, pre-copy can recover <b>the</b> <b>VM,</b> whereas post-copy cannot.|$|R
50|$|According to Google, <b>the</b> design <b>of</b> Dalvik {{permits a}} device to run {{multiple}} instances <b>of</b> <b>the</b> <b>VM</b> efficiently.|$|R
30|$|Eth 0 <b>of</b> <b>the</b> <b>VM</b> 4 [*]→[*]Br 1 <b>of</b> <b>the</b> Linux Host[*]→[*]Br 3 of VM 1 [*]→[*]Eth 0 of VM 3.|$|R
40|$|This paper {{introduces}} <b>the</b> efficient application <b>of</b> Virtual Reality (VR) {{technologies in}} the Architecture, Engineering and Construction (AEC) industry, where conventional plastic models are mainly used, {{which is called}} Physical Mock Up (PMU). An idea of Virtual Model (VM) is introduced in <b>the</b> paper. <b>The</b> <b>VM</b> consists <b>of</b> digital models added by digital information about the project, such as CAD drawings, digital maps of periphery, scanned aerial photos, on-site digital pictures and documents. The paper investigates three principal points as follows; (1) whether presentation <b>of</b> <b>the</b> <b>VM</b> is as efficient as the PMU {{in terms of its}} power of expression, (2) whether digital information <b>of</b> <b>the</b> <b>VM</b> is useful to discuss views, ideas and interests about the construction project, (3) whether <b>the</b> <b>VM</b> is practical enough to use in the AEC industry. Pilot trials <b>of</b> <b>the</b> <b>VM</b> in actual construction projects are illustrated in the paper. Those are an on-going land readjustment project in Osaka and a large-scale soil borrowing project i...|$|R
40|$|Background: During <b>the</b> {{four steps}} <b>of</b> <b>the</b> Valsalva {{maneuver}} (<b>VM),</b> opposite {{changes can be}} observed in some physiologic parameters. Manifestations <b>of</b> <b>the</b> <b>VM</b> in <b>the</b> electrocardiogram (ECG) have been studied in detail, but there have been few reports comparing VM-related biochemical and hemodynamic changes with a focus on <b>the</b> strain phase <b>of</b> <b>the</b> <b>VM.</b> Objectives: We studied strain-related ECG changes during <b>the</b> <b>VM.</b> Patients and Methods: This self-control descriptive study was conducted in 20 healthy male college students aged 20. 12 ± 2. 23 years. They were well trained to perform the standard VM: maintenance of a 15 -second expiratory pressure at 40 mmHg with open glottis. An ECG was continuously recorded in the supine position at (a) rest (before <b>the</b> <b>VM)</b> and at (b) the start and (c) end of strain maintenance in <b>the</b> second phase <b>of</b> <b>the</b> <b>VM.</b> <b>The</b> averages <b>of</b> four successive beats were computed for each set of (a), (b), and (c). Means ± standard errors <b>of</b> <b>the</b> mean were used for comparison. Results: Following <b>the</b> <b>VM,</b> <b>the</b> RR and PR intervals, corrected QT interval (QTc), P wave duration and amplitude, T wave amplitude, and <b>the</b> ratio <b>of</b> T/R amplitudes showed significant changes. The QRS duration and R wave amplitude did not show significant changes. Conclusions: <b>The</b> <b>VM</b> caused time and voltage changes in some ECG waves during the strain phase. Alterations in heart or lung volume...|$|R
30|$|VMX mode {{transitions}} by KVM can {{be tracked}} by enabling the kvm_entry kvm_entry and kvm_exit kvm_exit events. Tracepoint kvm_entry kvm_entry indicates {{a transition from}} root to non-root modes, and thus <b>the</b> beginning <b>of</b> <b>the</b> execution <b>of</b> <b>the</b> <b>VM’s</b> native code. On the other hand, tracepoint kvm_exit kvm_exit indicates the opposite transition, which interrupts <b>the</b> execution <b>of</b> <b>the</b> <b>VM</b> and gives control to KVM. Elapsed time between consecutive kvm_exit kvm_exit and kvm_entry kvm_entry events represents overhead introduced by the hypervisor.|$|R
30|$|Over <b>the</b> WAN, <b>VM</b> {{migration}} is performed from one network to another, which forces <b>the</b> IP address <b>of</b> <b>the</b> <b>VM</b> to be changed. This forces <b>the</b> <b>VM</b> to restart all the established connections, which causes delay and unacceptable QoE.|$|R
30|$|Therefore, we preempt {{the task}} per the {{following}} methodology. Before preempting, we should check <b>the</b> status <b>of</b> <b>the</b> <b>VM</b> (i.e. {{whether it is}} free or busy).|$|R
3000|$|... sub-regions are groups <b>of</b> related <b>VMs</b> within <b>the</b> same {{geographic}} cloud region. Related {{is qualified}} {{by a number}} <b>of</b> factors including <b>the</b> software <b>the</b> <b>VM</b> is running, <b>the</b> network distance and latency between <b>VMs</b> and <b>the</b> behaviour <b>of</b> <b>the</b> <b>VM.</b>|$|R
5000|$|<b>The</b> {{various types}} <b>of</b> <b>the</b> <b>VM</b> reactor series are nuclear {{pressurized}} water reactors (PWR). They are used singly or in pairs {{to power the}} Soviet Navy's submarines.|$|R
30|$|Predicting <b>the</b> {{upcoming}} number <b>of</b> <b>the</b> (<b>VM)</b> requests {{that would}} {{arrive to the}} cloud data center in a certain future period, associated with the requirements for each <b>VM.</b> <b>The</b> prediction approach relied upon monitoring past workload variations {{during a period of}} time. It combines machine learning clustering and stochastic theory to predict <b>the</b> number <b>of</b> <b>the</b> upcoming <b>VM</b> requests along with required resources associated with each request.|$|R
30|$|In {{terms of}} when {{placement}} decisions are made, approaches {{can be considered}} to be static (e.g. [12 – 14]), in which decisions once made are not reviewed during <b>the</b> lifetime <b>of</b> <b>the</b> <b>VM,</b> or dynamic (e.g. [2, 15 – 18]), in which <b>the</b> <b>VM</b> to PM assignment may change during <b>the</b> execution <b>of</b> <b>the</b> <b>VM.</b> As dynamic approaches often make use <b>of</b> information on <b>the</b> actual load that is not available to static approaches, dynamic approaches often use a static approach for initial placement. In <b>the</b> remainder <b>of</b> this section, we will focus on dynamic approaches, as these are the most relevant to this paper.|$|R
30|$|Advertising for false {{resource}}: Attacker advertises false resource availability for <b>the</b> target <b>VM.</b> For example, {{advertising that}} there is a large number of unused CPU cycles. This results in migration <b>of</b> <b>the</b> <b>VM’s</b> to a compromised hypervisor.|$|R
30|$|Disrupt <b>the</b> regular {{operations}} <b>of</b> <b>the</b> VM: An attacker may migrate a VM {{from one}} host to another host without any goal except to interrupt <b>the</b> operations <b>of</b> <b>the</b> <b>VM.</b>|$|R
5000|$|The class {{should be}} serializable. (This allows {{applications}} and frameworks to reliably save, store, {{and restore the}} bean's state in a manner independent <b>of</b> <b>the</b> <b>VM</b> and <b>of</b> <b>the</b> platform.) ...|$|R
50|$|Regular {{snapshots}} <b>of</b> <b>the</b> <b>VM</b> (its simulated {{hard disk}} storage, its memory, and its virtual peripherals) are {{taken in the}} background by the hypervisor, or {{by a set of}} administrative scripts.|$|R
40|$|Finding <b>the</b> right {{allocation}} <b>of</b> virtual machines (VM) in cloud {{data centers}} is one <b>of</b> <b>the</b> key optimization problems in cloud computing. Accordingly, many algorithms {{have been proposed}} for the problem. However, lacking a single, generally accepted formulation <b>of</b> <b>the</b> <b>VM</b> allocation problem, there are many subtle differences in the problem formulations that these algorithms address; moreover, in several cases, the exact problem formu- lation is not even defined explicitly. Hence in this paper, we present a comprehensive generic model <b>of</b> <b>the</b> <b>VM</b> allocation problem. We also show how the often-investigated problem variants fit into this general model...|$|R
50|$|It {{was founded}} by VM Salgaocar, founder President <b>of</b> <b>the</b> <b>VM</b> Salgaocar Group <b>of</b> Companies, to give a {{platform}} to the Goan youth to showcase their talent to the country, and to the world.|$|R
