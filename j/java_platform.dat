766|537|Public
5|$|God of War: Betrayal is a {{two-dimensional}} (2D) side-scrolling action-adventure mobile game developed by Javaground and Sony Online Entertainment's (SOE) Los Angeles division, {{and published by}} Sony Pictures Digital. Released for mobile phones supporting the <b>Java</b> <b>Platform,</b> Micro Edition (Java ME) on June 20, 2007, it is the third installment in the God of War series, and the fifth chronologically. Loosely based on Greek mythology, Betrayal is set in ancient Greece with vengeance as its central motif. The player controls the protagonist Kratos, who became the new God of War after killing the former, Ares. Kratos is framed {{for the murder of}} Argos and pursues the true assassin across Greece, resulting in a confrontation with Olympian messenger Ceryx.|$|E
25|$|The <b>Java</b> <b>platform</b> {{has matured}} into an Enterprise Integration role in which legacy systems are {{unlocked}} {{to the outside}} world through bridges built on the <b>Java</b> <b>platform.</b> This trend has been supported for <b>Java</b> <b>platform</b> support for EAI standards like messaging and Web services and has fueled the inclusion of the <b>Java</b> <b>platform</b> as a development basis in such standards as SCA, XAM and others.|$|E
25|$|OpenJDK is a {{free and}} open source {{implementation}} of the <b>Java</b> <b>Platform,</b> Standard Edition (JavaSE).|$|E
5000|$|Aspose.Note: This {{deals with}} Microsoft OneNote (2010/2013) under [...]NET and <b>Java</b> <b>platforms.</b>|$|R
5000|$|Aspose.Diagram: This {{deals with}} VSD/VDX and Microsoft Visio (2007/2010/2013), under [...]NET and <b>Java</b> <b>platforms.</b>|$|R
5000|$|JAXB {{is a part}} of the <b>Java</b> SE <b>platform</b> and one of the APIs in the <b>Java</b> EE <b>platform,</b> and is part of the Java Web Services Development Pack (JWSDP). It is {{also one}} of the {{foundations}} for WSIT.|$|R
25|$|The {{configuration}} {{is designed}} for devices with 160KB to 512KB total memory, which has a minimum of 160KB of ROM and 32KB of RAM available for the <b>Java</b> <b>platform.</b>|$|E
25|$|In {{most modern}} {{operating}} systems (OSs), {{a large body}} of reusable code is provided to simplify the programmer's job. This code is typically provided as a set of dynamically loadable libraries that applications can call at runtime. Because the <b>Java</b> <b>platform</b> is not dependent on any specific operating system, applications cannot rely on any of the pre-existing OS libraries. Instead, the <b>Java</b> <b>platform</b> provides a comprehensive set of its own standard class libraries containing many of the same reusable functions commonly found in modern operating systems. Most of the system library is also written in Java. For instance, the Swing library paints the user interface and handles the events itself, eliminating many subtle differences between how different platforms handle components.|$|E
25|$|J2SE 1.3 (May 8, 2000) – Codename Kestrel. Notable changes {{included}} the bundling of the HotSpot JVM (the HotSpot JVM was first released in April, 1999 for the J2SE 1.2 JVM), JavaSound, Java Naming and Directory Interface (JNDI) and <b>Java</b> <b>Platform</b> Debugger Architecture (JPDA).|$|E
50|$|Oracle has {{released}} several <b>Java</b> Card <b>platform</b> specifications and is providing SDK tools for application development.Usually smart card vendors implement just {{a subset of}} algorithms specified in <b>Java</b> Card <b>platform</b> targetand {{the only way to}} discover what subset of specification is implemented is to test the card.|$|R
40|$|The {{aim of this}} diploma {{thesis is}} to study the {{potential}} of <b>Java</b> ME <b>platform</b> for receiving and sending of SMS and to utilize obtained information subsequently in implementation of an application for this platform. The {{first part of the}} diploma thesis aims at explaining general terms of the Java language and its basic features. The next part deals with specific properties of the <b>Java</b> ME <b>platform</b> and properties of devices that support this platform. A design of the Java ME application based on theoretical knowledge is created then. This application {{has to be able to}} receive, process, store and send SMS and communicate with the server application based on the <b>Java</b> SE <b>platform.</b> The created <b>Java</b> ME application serves as an automated SMS voting server, which can be used in mobile devices that support the <b>Java</b> ME <b>platform</b> and can be remote-controlled via Internet from the <b>Java</b> SE <b>platform</b> application. The final chapter presents the results and conclusions of testing of the created application on real mobile devices...|$|R
5000|$|CDI (Contexts and Dependency Injection for the <b>Java</b> EE <b>platform)</b> ...|$|R
25|$|It is {{possible}} to control {{some aspects of the}} browser using the keyboard shortcuts. Page zooming allows text, images and other content such as Adobe Flash Player, <b>Java</b> <b>platform</b> and Scalable Vector Graphics to be increased or decreased in size to help those with impaired vision.|$|E
25|$|A {{configuration}} {{provides the}} most basic set of libraries and virtual-machine features that must be present in each implementation of a J2ME environment. When coupled {{with one or more}} profiles, the Connected Limited Device Configuration gives developers a solid <b>Java</b> <b>platform</b> for creating applications for consumer and embedded devices.|$|E
25|$|J2SE 1.4 (February 6, 2002) – Codename Merlin. This {{became the}} first release of the <b>Java</b> <b>platform</b> {{developed}} under the Java Community Process as JSR 59. Major changes included regular expressions modeled after Perl, exception chaining, an integrated XML parser and XSLT processor (JAXP), and Java Web Start.|$|E
2500|$|J2SE 1.2 (December 8, 1998) – Codename Playground. This and {{subsequent}} releases through J2SE 5.0 were rebranded Java 2 and the version name [...] "J2SE" [...] (<b>Java</b> 2 <b>Platform,</b> Standard Edition) replaced JDK {{to distinguish the}} base <b>platform</b> from J2EE (<b>Java</b> 2 <b>Platform,</b> Enterprise Edition) and J2ME (<b>Java</b> 2 <b>Platform,</b> Micro Edition). Major additions included reflection, a collections framework, Java IDL (an interface description language implementation for CORBA interoperability), and {{the integration of the}} Swing graphical API into the core classes. A Java Plug-in was released, and Sun's JVM was equipped with a JIT compiler for the first time.|$|R
40|$|In {{the context}} of {{next-generation}} <b>Java</b> Card <b>platform,</b> the on-card framework is a key component that will enable smart card developer to more quickly and more easily implement new types of services. This paper describes an open framework architecture taking benefits from the envisioned future Java Card operating system capabilities, and relying on the vision of nextgeneration <b>Java</b> Card <b>platforms</b> as an embedded <b>Java</b> micro-server <b>platform</b> able to serve various types of services and applications. First, the global architecture of this framework is exhibited and discussed. Framework details [...] basic APIs, application models, and service management [...] are then described...|$|R
5000|$|J2SE 1.2 (December 8, 1998) - Codename Playground. This and {{subsequent}} releases through J2SE 5.0 were rebranded Java 2 and the version name [...] "J2SE" [...] (<b>Java</b> 2 <b>Platform,</b> Standard Edition) replaced JDK {{to distinguish the}} base <b>platform</b> from J2EE (<b>Java</b> 2 <b>Platform,</b> Enterprise Edition) and J2ME (<b>Java</b> 2 <b>Platform,</b> Micro Edition). Major additions included reflection, a collections framework, Java IDL (an interface description language implementation for CORBA interoperability), and {{the integration of the}} Swing graphical API into the core classes. A Java Plug-in was released, and Sun's JVM was equipped with a JIT compiler for the first time.|$|R
25|$|<b>Java</b> <b>Platform,</b> Micro Edition or Java ME is a {{computing}} {{platform for}} development and deployment of portable code for embedded and mobile devices (micro-controllers, sensors, gateways, mobile phones, personal digital assistants, TV set-top boxes, printers). Java ME was {{formerly known as}} Java 2 Platform, Micro Edition or J2ME.|$|E
25|$|Sun {{announced}} in JavaOne 2006 that Java would become {{free and open}} source software, and on October 25, 2006, at the Oracle OpenWorld conference, Jonathan I. Schwartz said {{that the company was}} set to announce the release of the core <b>Java</b> <b>Platform</b> as free and open source software within 30 to 60 days.|$|E
25|$|The <b>Java</b> <b>platform</b> {{has become}} the main {{development}} platform for many software tools and platforms that are produced by third-party software groups (commercial, open source and hybrid) and are used as configurable (rather than programmable) tools by companies. Examples in this category include Web servers, application servers, databases, enterprise service buses, business process management (BPM) tools and content management systems.|$|E
50|$|Contains {{the base}} classes for <b>Java</b> 2 <b>Platform,</b> Micro Edition applications.|$|R
5000|$|Provides {{a form of}} {{persistent}} storage for <b>Java</b> 2 <b>Platform,</b> Micro Edition.|$|R
50|$|JSR 82 {{implementations}} for <b>Java</b> 2 <b>Platform</b> Standard Edition (J2SE) {{are also}} available.|$|R
25|$|The Foundation Profile is a Java ME Connected Device Configuration (CDC) profile. This {{profile is}} {{intended}} to be used by devices requiring a complete implementation of the Java virtual machine up to and including the entire <b>Java</b> <b>Platform,</b> Standard Edition API. Typical implementations will use some subset of that API set depending on the additional profiles supported. This specification was developed under the Java Community Process.|$|E
25|$|The <b>Java</b> <b>platform</b> and {{language}} {{began as an}} internal project at Sun Microsystems in December 1990, providing {{an alternative to the}} C++/C programming languages. Engineer Patrick Naughton had become increasingly frustrated with the state of Sun's C++ and C application programming interfaces (APIs) and tools. While considering moving to NeXT, Naughton was offered a chance to work on new technology, and thus the Stealth Project started.|$|E
25|$|Java {{has become}} the {{standard}} development platform for many companies' IT departments, which do {{most or all of}} their corporate development in Java. This type of development is usually related to company-specific tooling (e.g. a booking tool for an airline) and the choice for the <b>Java</b> <b>platform</b> is often driven by a desire to leverage the existing Java infrastructure to build highly intelligent and interconnected tools.|$|E
5000|$|Contains the <b>Java</b> 2 <b>Platform,</b> Micro Edition {{specific}} classes {{used for}} I/O operations.|$|R
50|$|In 2008, John Matthews {{published}} a derivative called RobotChase, for the <b>Java</b> software <b>platform.</b>|$|R
40|$|Java {{has become}} an {{increasingly}} important computer language system, even {{in the design of}} embedded systems. However, significant drawbacks exist. Beside the indeterministic timing behavior of many <b>Java</b> <b>platforms,</b> the performance of these platforms is still insufficient for many applications. Therefore a detailed analysis is in order to develop a method for an accurate platform evaluation. Earlier we introduced a performance evaluation technique [1], which helped give good results for simple platforms, but showed unsatisfying results for advanced Java Runtime Environments (JRE). In this paper we introduce a new technique, which can measurably improve platform evaluation and concomitantly, the accuracy of timing estimations 1. I. INTRODUCTION Due to limited space we do not offer a general evaluation of the use of Java in this publication (please see [2]). We have focused on the evaluation of modern <b>Java</b> <b>platforms</b> for use in systems with timing constraints, i. e. those with soft deadl [...] ...|$|R
25|$|The Java {{language}} has undergone several changes since {{the release of}} JDK (Java Development Kit) 1.0 on January 23, 1996, as well as numerous additions of classes and packages to the standard library. Since J2SE 1.4 the Java Community Process (JCP) has governed {{the evolution of the}} Java Language. The JCP uses Java Specification Requests (JSRs) to propose and specify additions and changes to the <b>Java</b> <b>platform.</b> The Java Language Specification (JLS) specifies the language; changes to the JLS are managed under JSR 901.|$|E
25|$|The Java class {{libraries}} serve three purposes {{within the}} <b>Java</b> <b>platform.</b> First, like other standard code libraries, the Java libraries provide the programmer a well-known {{set of functions}} to perform common tasks, such as maintaining lists of items or performing complex string parsing. Second, the class libraries provide an abstract interface to tasks that would normally depend heavily on the hardware and operating system. Tasks such as network access and file access are often heavily intertwined with the distinctive implementations of each platform. The java.net and java.io libraries implement an abstraction layer in native OS code, then provide a standard interface for the Java applications to perform those tasks. Finally, when some underlying platform does not support all of the features a Java application expects, the class libraries work to gracefully handle the absent components, either by emulation to provide a substitute, or at least by providing a consistent way to check {{for the presence of}} a specific feature.|$|E
500|$|By early 1996, the Plan 9 {{project had}} been [...] "put {{on the back}} burner" [...] by AT in favor of Inferno, {{intended}} to be a rival to Sun Microsystems' <b>Java</b> <b>platform.</b>|$|E
50|$|KnowledgeBench is {{compatible}} with industry standard <b>Java</b> application server <b>platforms,</b> including Apache Tomcat, IBM WebSphere, Oracle WebLogic Server, Jetty and other <b>Java</b> EE <b>platforms.</b> The web front end can be hosted by the application server or fronted by an Apache web server or Microsoft's IIS web server.|$|R
5000|$|... 1999 - Sams Teach Yourself <b>Java</b> 2 <b>Platform</b> in 21 Days: Complete Compiler Edition - ...|$|R
50|$|Newi {{components}} were language-neutral. That is, a Newi component could {{be written in}} one {{of a variety of}} languages that was supported by Newi. At its height, Newi supported software components written in Cobol, Ada, C, C++, Rexx, and <b>Java.</b> <b>Platforms</b> supported included Windows 3.1, Win95, WinNT, three varieties of Unix - and a prototype supporting components written in RPG was running on the AS400.|$|R
