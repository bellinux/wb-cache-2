588|1324|Public
25|$|Schematic predicates with {{a single}} <b>free</b> <b>variable.</b>|$|E
25|$|Here x is the <b>free</b> <b>variable,</b> and y and z are dependent.|$|E
25|$|M8, Unrestricted Fusion: Let φ(x) be a first-order formula {{in which}} x is a <b>free</b> <b>variable.</b> Then {{the fusion of}} all objects {{satisfying}} φ exists.|$|E
5000|$|The <b>free</b> <b>variables</b> of ¬p are {{the same}} as those of p. The <b>free</b> <b>variables</b> of p∨q, p∧q, p→q are those <b>free</b> <b>variables</b> of p or <b>free</b> <b>variables</b> of q.|$|R
2500|$|The set of <b>free</b> <b>variables</b> of [...] is {{the union}} of the set of <b>free</b> <b>variables</b> of [...] and the set of <b>free</b> <b>variables</b> of [...]|$|R
25|$|While {{the initial}} set of {{formulae}} is supposed not to contain <b>free</b> <b>variables,</b> a formula of the tableau contain the <b>free</b> <b>variables</b> generated by this rule. These <b>free</b> <b>variables</b> are implicitly considered universally quantified.|$|R
25|$|For example, in x y (P(x) Q(x,f(x),z)), x and y {{are bound}} variables, z is a <b>free</b> <b>variable,</b> and w is neither {{because it does}} not occur in the formula.|$|E
25|$|Thus the {{specialization}} rules {{makes sure}} that no <b>free</b> <b>variable,</b> i.e. monotype in the pristine type becomes unintentionally bound by a quantifier, but originally quantified variable can be replaced with whatever, even with types introducing new quantified or unquantified type variables.|$|E
25|$|Here z is the <b>free</b> <b>variable,</b> while x and y are {{dependent}} on z. Any point in the solution set {{can be obtained by}} first choosing a value for z, and then computing the corresponding values for x and y.|$|E
2500|$|The set of <b>free</b> <b>variables</b> of [...] is {{the set of}} <b>free</b> <b>variables</b> of , {{but with}} [...] removed ...|$|R
5000|$|The <b>free</b> <b>variables</b> of [...] x p and [...] x p are the <b>free</b> <b>variables</b> of p except x.|$|R
5000|$|... where f is a function, of arity n, with no <b>free</b> <b>variables,</b> and the [...] are {{terms that}} may or may not contain <b>free</b> <b>variables.</b> Let V denote the set of all <b>free</b> <b>variables</b> that may occur in the set of all terms. The {{director}} is then the map ...|$|R
25|$|Each <b>free</b> <b>variable</b> {{gives the}} {{solution}} space one degree of freedom, {{the number of}} which {{is equal to the}} dimension of the solution set. For example, the solution set for the above equation is a line, since a point in the solution set can be chosen by specifying the value of the parameter z. An infinite solution of higher order may describe a plane, or higher-dimensional set.|$|E
25|$|Because Sum and Product are binary operations, M6 and M7 {{admit the}} sum and product {{of only a}} finite number of objects. The fusion axiom, M8, enables taking the sum of {{infinitely}} many objects. The same holds for Product, when defined. At this point, mereology often invokes set theory, but any recourse to set theory is eliminable by replacing a formula with a quantified variable ranging over a universe of sets by a schematic formula with one <b>free</b> <b>variable.</b> The formula comes out true (is satisfied) whenever the name of an object that would {{be a member of the}} set (if it existed) replaces the <b>free</b> <b>variable.</b> Hence any axiom with sets can be replaced by an axiom schema with monadic atomic subformulae. M8 and M8' are schemas of just this sort. The syntax of a first-order theory can describe only a denumerable number of sets; hence, only denumerably many sets may be eliminated in this fashion, but this limitation is not binding for the sort of mathematics contemplated here.|$|E
25|$|The {{subsystem}} WKL0 {{consists of}} RCA0 plus a weak form of König's lemma, namely {{the statement that}} every infinite subtree of the full binary tree (the tree of all finite sequences of 0's and 1's) has an infinite path. This proposition, which is known as weak König's lemma, is easy to state {{in the language of}} second-order arithmetic. WKL0 can also be defined as the principle of Σ01 separation (given two Σ01 formulas of a <b>free</b> <b>variable</b> n which are exclusive, there is a class containing all n satisfying the one and no n satisfying the other).|$|E
2500|$|The <b>free</b> <b>{{variables}}</b> of a term {{are those}} variables {{not bound by}} a lambda abstraction. The set of <b>free</b> <b>variables</b> of an expression is defined inductively: ...|$|R
50|$|For a given {{combination}} of {{values for the}} <b>free</b> <b>variables,</b> an expression may be evaluated, although for some combinations of values of the <b>free</b> <b>variables,</b> {{the value of the}} expression may be undefined. Thus an expression represents a function whose inputs are the value assigned the <b>free</b> <b>variables</b> and whose output is the resulting value of the expression.|$|R
40|$|We {{describe}} {{methods that}} {{are able to}} count the number of integer solutions to selected <b>free</b> <b>variables</b> of a Presburger formula, or sum a polynomial over all integer solutions of selected <b>free</b> <b>variables</b> of a Presburger formula. This answer is given symbolically, in terms of symbolic constants (the remaining <b>free</b> <b>variables</b> in the Presburger formula). For example [...] ...|$|R
2500|$|The {{expression}} [...] is a formula, {{which is}} usually written as [...] This formula has one <b>free</b> <b>variable,</b> z.|$|E
2500|$|Let P(x) be a first-order formula with {{a single}} <b>free</b> <b>variable</b> x. Then the {{following}} formula is an axiom: ...|$|E
2500|$|For example, the lambda term {{representing}} the identity [...] has no free variables, but the function [...] {{has a single}} <b>free</b> <b>variable,</b> [...]|$|E
5000|$|Three vertex {{labeling}} functions init, inv, {{and flow}} that assign to each control mode [...] three predicates. Each initial condition init is a predicate whose <b>free</b> <b>variables</b> are from [...] Each invariant condition inv is a predicate whose <b>free</b> <b>variables</b> are from [...] Each flow condition flow is a predicate whose <b>free</b> <b>variables</b> are from [...]|$|R
50|$|Reflection: Let Φ denote a first-order formula {{in which}} {{any number of}} <b>free</b> <b>variables</b> are present. Let Φ(V) denote Φ with these <b>free</b> <b>variables</b> all {{quantified}}, with the quantified variables restricted to the level V.|$|R
50|$|In {{mathematical}} logic, {{a sentence}} of a predicate logic is a boolean-valued well-formed formula with no <b>free</b> <b>variables.</b> A sentence {{can be viewed as}} expressing a proposition, something that must be true or false. The restriction of having no <b>free</b> <b>variables</b> is needed to make sure that sentences can have concrete, fixed truth values: As the <b>free</b> <b>variables</b> of a (general) formula can range over several values, the truth value of such a formula may vary.|$|R
2500|$|If φ(n) is {{a formula}} with a <b>free</b> <b>variable</b> n and {{possibly}} other free variables, {{but not the}} variable Z, the comprehension axiom for φ is the formula ...|$|E
2500|$|Let T be a first-order {{theory in}} the {{language}} of arithmetic and capable of representing all computable functions. Let F be a formula in the language with one <b>free</b> <b>variable,</b> then: ...|$|E
2500|$|The {{completeness}} of the Boolean algebra {{is required}} to define truth values for quantified formulas. If φ(x) is a formula with <b>free</b> <b>variable</b> x (and possibly other free variables that are suppressed), then ...|$|E
25|$|The set of {{formulae}} {{to check}} for validity is here supposed to contain no free variables; {{this is not a}} limitation as <b>free</b> <b>variables</b> are implicitly universally quantified, so universal quantifiers over these variables can be added, resulting in a formula with no <b>free</b> <b>variables.</b>|$|R
40|$|This paper {{demonstrates}} that genetic programming {{can be used}} to create a circuit-constructing computer program that contains both conditional operations and inputs (<b>free</b> <b>variables).</b> The conditional operations and <b>free</b> <b>variables</b> enable a single genetically evolved program to yield functionally and topologically different electrical circuits. The conditional operations can trigger the execution of alternative sequences of steps based on the particular values of the <b>free</b> <b>variables.</b> The particular values of the <b>free</b> <b>variables</b> can also determine the component value of the circuit's components. Thus, a single evolved computer program can represent the solution to many instances of a problem. This principle is illustrated by evolving a single computer program that yields a lowpass or a highpass filter whose passband and stopband boundaries depend on the program's inputs. ...|$|R
25|$|Satisfiability of {{formulas}} with <b>free</b> <b>variables</b> is more complicated, {{because an}} interpretation {{on its own}} does not determine the truth value of such a formula. The most common convention is that a formula with <b>free</b> <b>variables</b> {{is said to be}} satisfied by an interpretation if the formula remains true regardless which individuals from the domain of discourse are assigned to its <b>free</b> <b>variables.</b> This has the same effect as saying that a formula is satisfied if and only if its universal closure is satisfied.|$|R
2500|$|... {{for each}} T-formula θ in one <b>free</b> <b>variable,</b> and f(n) = 0 otherwise. The {{function}} f is computable, {{so there is}} a formula Γf representing f in T. Thus for each formula θ, T proves ...|$|E
2500|$|For example, {{one common}} rule of {{inference}} {{is the rule}} of substitution. If t is a term and φ is a formula possibly containing the variable x, then φ {{is the result of}} replacing all free instances of x by t in φ. The substitution rule states that for any φ and any term t, one can conclude φ from φ provided that no <b>free</b> <b>variable</b> of t becomes bound during the substitution process. (If some <b>free</b> <b>variable</b> of t becomes bound, then to substitute t for x it is first necessary to change the bound variables of φ to differ from the free variables of t.) ...|$|E
2500|$|Next is {{the proof}} of a simple fact {{involving}} quantifiers. Note that the converse is not true, and its falsity can be seen when attempting to derive it bottom-up, because an existing <b>free</b> <b>variable</b> cannot be used in substitution in the rules [...] and [...]|$|E
2500|$|Similarly an n-type (of [...] ) over A {{is defined}} to be a set p(x1,,x'n)=p(x) of {{formulas}} in L(A), each having its <b>free</b> <b>variables</b> occurring only among the given n <b>free</b> <b>variables</b> x1,,x'n, such {{that for every}} finite subset p0(x)⊆p(x) there are some elements b1,,b'n∈M with [...]|$|R
50|$|A closed term is one {{containing}} no <b>free</b> <b>variables.</b>|$|R
5000|$|Director string - rapidly {{locating}} <b>free</b> <b>variables</b> in expressions ...|$|R
