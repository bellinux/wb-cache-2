24|493|Public
2500|$|NSText and its related {{classes are}} used to display and edit strings. The {{collection}} of objects involved permit an application to implement anything from a simple single-line text <b>entry</b> <b>field</b> to a complete multi-page, multi-column text layout schema, with full professional typography features such as kerning, ligatures, running text around arbitrary shapes, rotation, full Unicode support and anti-aliased glyph rendering. Paragraph layout can be controlled automatically or by the user, using a built-in [...] "ruler" [...] object that can be attached to any text view. Spell checking is automatic, using a single dictionary used by all applications that uses the squiggly underlining convention introduced by Microsoft (actually a dashed red underline in Cocoa). Unlimited undo-redo support is built in. Using only the built-in features, one can write a text editor application in as few as 10 lines of code. With new controller objects, this may fall to zero. This {{is in contrast to}} the TextEdit APIs found in the earlier Mac OS.|$|E
5000|$|... #Caption: An {{example of}} a date picker in use. When the user clicks on the <b>entry</b> <b>field,</b> a {{calendar}} pops up below.|$|E
5000|$|The toolbox {{contains}} {{a number of}} standard tools (static text, group box, push button, radio button, check box, picture box, image push/radio button, list box, combo box (and drop-down), single and multiline <b>entry</b> <b>field,</b> slider) and some more specialized ones (container, value-set, notebook, DDE client, timer). Additional controls can be built using SOM and distributed as [...]DLL files; anything from simple variants of existing controls (such as a tri-state check box, or a self-validating <b>entry</b> <b>field)</b> to completely custom-drawn controls (for example, a self-contained tic-tac-toe board) can be written in C, compiled, and added to a VX-REXX project.|$|E
40|$|Enterprise {{resource}} {{planning systems}} and computerised maintenance management systems {{are commonly used}} by organisations for handling of maintenance work orders through a graphical user interface. A work order consists {{of a number of}} data fields, such as drop-down lists, list boxes, check boxes and text <b>entry</b> <b>fields.</b> In contrast to the other data fields, the operator has the freedom to type in any text in the text <b>entry</b> <b>fields,</b> to complement and make the work order description complete. Accordingly, the text <b>entry</b> <b>fields</b> of work orders can contain any words, in any number, as necessary. Data quality is crucial in statistical analysis of work orders data, and therefore manual analysis of work orders’ text <b>entry</b> <b>fields</b> is often necessary before any decision making. However, this may be a very tedious and resource consuming process. In this article, we apply computerised analysis of text <b>entry</b> <b>fields</b> of work orders data, to study if it can bring further value in the assessment of technical assets’ performance. Keywords:Data quality, eMaintenance, maintenance, work orders, failure, decision support, natural language processingGodkänd; 2014; 20140619 (chrste) Link and effect model application through life cycle cost and return of investment analysi...|$|R
50|$|List all {{available}} <b>entry</b> <b>fields</b> on the server or only {{those of the}} specified name or names.|$|R
50|$|GIMP 2.8 also {{features}} layer groups, simple math in size <b>entry</b> <b>fields,</b> JPEG2000 support, PDF export, a webpage screenshot utility, and a single-window mode.|$|R
50|$|A triple-click {{in a text}} <b>entry</b> <b>field</b> (a {{text entry}} widget) selects the entire line of text. This is a {{standard}} feature of the widgets themselves, so works in most applications, on Linux as well as Windows.|$|E
50|$|Spelling quiz {{follows the}} classic {{spelling}} test/spelling bee format. The member hears a word, and can review the corresponding definition and a usage example. They are then required {{to enter the}} word into the text <b>entry</b> <b>field.</b>|$|E
5000|$|The program D-PRS Interface {{includes}} a [...] "Query" [...] <b>entry</b> <b>field</b> that streamlines this process allowing {{the user to}} simply enter the desired command. Most DStarQuery systems will respond {{with a list of}} available commands when [...] "?D*info?" [...] is received.|$|E
5000|$|Memory Phonebook Practically {{unlimited}} <b>entries</b> and <b>fields,</b> Photocall ...|$|R
3000|$|... bHigh-fidelity prototypes are prototypes fully {{interactive}} {{and have}} complete functionality. ‘Users can enter data in <b>entry</b> <b>fields,</b> respond to messages, select icons to open windows, and, in general, {{interact with the}} user interface {{as though it were}} a real product. They are high fidelity because they represent the core functionality of the product's user interface’ ([37], p. 78).|$|R
5000|$|Under macOS, the Control key {{allows the}} use of Emacs-style key {{combinations}} in most text <b>entry</b> <b>fields.</b> For example, Ctrl-A moves the caret {{to the start of}} the paragraph, Ctrl-L vertically centers the current line in the editing field, Ctrl-K cuts text to the end of the line to a kill ring separate from the normal clipboard, etc.|$|R
50|$|Gridlife saw {{significant}} {{growth in}} 2015 with nearly 4000 attendees and over 300 Drivers on Track for HPDE. The time attack portion of GRIDLIFE was renamed to TrackBattle and featured a large <b>entry</b> <b>field</b> of over 80 cars. Music lineup featured an increased production and headliners RJD2, Keys N Krates, Party Favor, and Pretty Lights Music artist Paul Basic.|$|E
5000|$|In the [...] "Stream", which {{occupies}} {{the middle of}} three columns on the page, users see updates from those in their Circles. There is an input box which allows users to enter a post. Along with the text <b>entry</b> <b>field</b> there are icons to upload and share photos and videos. The Stream can be filtered to show only posts from specific Circles.|$|E
5000|$|Timesharing: From the 1960s {{companies}} rented {{space and}} processing power on mainframe computers (time-sharing) to reduce computing expenses. Often they also reused existing applications, with simply a separate <b>entry</b> <b>field</b> on the logon screen to specify a customer-account ID. On {{the basis of}} this ID, the mainframe's accountants could charge the individual customers for CPU, memory and disk/tape usage actually incurred.|$|E
50|$|October 2006—Acquired KEE Technologies Pty Ltd., in Australia for <b>entry</b> into <b>field</b> of agriculture.|$|R
50|$|The {{types of}} <b>entries</b> and <b>fields</b> used in {{virtually}} all BibTeX styles BibTeX are listed below.|$|R
5000|$|The [...]ZAP File {{begins with}} a title line {{consisting}} of the word Application inside single Square Brackets (...) [...] Underneath this come the <b>entry</b> <b>fields,</b> the two Required fields being FriendlyName = [...] "Name" [...] and SetupCommand = [...] "\\Server\share\setupfile". You can also add Optional entries, such as DisplayVersion = and Publisher =. Note that DisplayVersion and Publisher do not require Quotation Marks around the variables.|$|R
5000|$|In Linux {{operating}} {{systems such as}} Ubuntu, this symbol may be entered via the Compose key followed by , [...] Some keyboard layouts print this symbol upon pressing [...] (once or twice, depending on specific keyboard layout), and, in programs created by GTK+, one can enter Unicode characters in any text <b>entry</b> <b>field</b> by first pressing , regardless of keyboard layout. For the degree symbol, this is done by entering [...]|$|E
50|$|The editor, {{like many}} text editors, is a full-screen editor; {{a window into}} the file being edited is {{displayed}} and the lines displayed can be edited directly on-screen by insertions, deletions, or overtyping. Editing is also effected by pressing programmable action keys or by typing in commands. Commands are either 'top-line commands' (entered in a command entry area on the top line of the screen) or 'line commands' (entered in a 4-character command <b>entry</b> <b>field</b> adjacent to each displayed line of text).|$|E
5000|$|SQL {{injection}} [...] is a code injection technique, used {{to attack}} data-driven applications, in which nefarious SQL statements are inserted into an <b>entry</b> <b>field</b> for execution (e.g. {{to dump the}} database contents to the attacker). SQL injection must exploit a security vulnerability in an application's software, for example, when user input is either incorrectly filtered for string literal escape characters embedded in SQL statements or user input is not strongly typed and unexpectedly executed. SQL injection is mostly known as an attack vector for websites but {{can be used to}} attack any type of SQL database.|$|E
5000|$|The first {{incarnation}} of TextEdit provided support {{for only a}} single style of text, which was applied to all text in the block. This was more than adequate for its intended use, supporting text <b>entry</b> <b>fields.</b> Later, support was added for styled text so that TextEdit {{could be used for}} more complex text editing tasks, such as text editing areas in web browsers, etc.|$|R
5000|$|Numeric input: Numeric buttons can be [...] "dragged" [...] {{to change}} their value {{directly}} without the need to aim at a particular widget, {{as well as being}} set using the keyboard. Both sliders and number buttons can be constrained to various step sizes with modifiers like the Ctrl and Shift keys. Python expressions can also be typed directly into number <b>entry</b> <b>fields,</b> allowing mathematical expressions to specify values.|$|R
50|$|These APIs were {{originally}} {{designed to provide a}} common text handling system to support text <b>entry</b> <b>fields</b> in dialog boxes and other simple text editing within the Macintosh GUI. Over time, they were extended to provide more advanced text editing features, but its limited original scope led to fundamental limitations. Apple repeatedly stated that TextEdit was not a word processor, and therefore providing rich text editing was always left to third-party developers.|$|R
5000|$|... and its related {{classes are}} used to display and edit strings. The {{collection}} of objects involved permit an application to implement anything from a simple single-line text <b>entry</b> <b>field</b> to a complete multi-page, multi-column text layout schema, with full professional typography features such as kerning, ligatures, running text around arbitrary shapes, rotation, full Unicode support and anti-aliased glyph rendering. Paragraph layout can be controlled automatically or by the user, using a built-in [...] "ruler" [...] object that can be attached to any text view. Spell checking is automatic, using a single dictionary used by all applications that uses the squiggly underlining convention introduced by Microsoft (actually a dashed red underline in Cocoa). Unlimited undo-redo support is built in. Using only the built-in features, one can write a text editor application in as few as 10 lines of code. With new controller objects, this may fall to zero. This {{is in contrast to}} the TextEdit APIs found in the earlier Mac OS.|$|E
50|$|In {{preparation}} for the race, NASCAR held several test sessions on March 12−13, 2002 at the track for teams {{to prepare for the}} event. The first day's testing session was due to begin at 9 a.m. EST, and conclude at 5:00 p.m. EST but rain forced the session to be postponed to March 13. Rain continued on the second day, which forced most teams to leave without completing any testing, but drivers such as Mike Skinner were able to get limited running in their cars. NASCAR implemented a new pit-road procedure for the race during caution periods where drivers where required to enter pit road in turn two and exit at turn one. Drivers who violated this rule could have potentially received a stop-and-go penalty or rejoin {{at the rear of the}} nearest longest line. Beginning at the race, teams applying for provisionals after qualifying would not be charged if the <b>entry</b> <b>field</b> for a NASCAR sanctioned event was less or equal than the number of starting entries provided by the official entry blank.|$|E
40|$|The present {{invention}} provides systems, {{apparatus and}} methods for entering data into a flight plan <b>entry</b> <b>field</b> which facilitates the display and editing of aircraft flight-plan data. In one embodiment, the present invention provides {{a method for}} entering multiple waypoint and procedure identifiers at once within a single a flight plan <b>entry</b> <b>field.</b> In another embodiment, the present invention provides for the partial entry of any waypoint or procedure identifiers, and thereafter relating the identifiers with an aircraft's flight management system to anticipate the complete text entry for display. In yet another embodiment, {{the present invention discloses}} a method to automatically provide the aircraft operator with selectable prioritized arrival and approach routing identifiers by a single manual selection. In another embodiment, the present invention is a method for providing the aircraft operator with selectable alternate patterns to a new runway...|$|E
50|$|Gragson {{competed in}} both K&N Pro Series in 2016, winning a {{combined}} four races. On October 7, {{he was hired}} by Kyle Busch Motorsports to compete in the Camping World Truck Series in 2017. In preparation, he drove the No. 18 Toyota from KBM at the Phoenix International Raceway and Homestead-Miami Speedway events in an <b>entry</b> <b>fielded</b> by Wauters Motorsports. In his debut at Phoenix, Gragson qualified 14th and finished 16th. Gragson raced at Homestead as well, qualifying 10th and finishing 15th.|$|R
40|$|This paper {{presents}} a novel technique for distinguishing images of forms from other document images. The proposed algorithm detects regions which {{are likely to}} be used for text entry, such as lines, boxes, and character <b>entry</b> <b>fields,</b> and calculates a probability of the document being a form based on the presence of such structures. Experimental results from testing on both filled and unfilled forms, as well as a selection of non-form documents are presented. All document images are assumed to have been scanned at a known resolution. No Full Tex...|$|R
40|$|This package typesets {{a listing}} of a (possibly large) BibT E X input file. With old {{implementations}} of texmf the string space could easily be exceeded when trying to typeset large bibliographic databases. Contemporary implementations are usually big and have much higher limits. However, listbib works with arbitrarily large BibT E X database files. In addition to that, listbib tries to show the full content of a BibT E X file without alterations introduced by the bibliographic style used. The <b>entry</b> <b>fields</b> ISBN, ISSN, annote, library, totalpages and URL are added to th...|$|R
40|$|Vortex {{entry into}} (110) {{oriented}} YBa$_ 2 $Cu$_ 3 $O$_{ 7 -x}$ films {{has been studied}} by tunneling into Andreev - Saint-James bound states, whose energy is shifted by surface currents. At low temperatures, the characteristic field for vortex entry {{has been found to}} increase up to values several times higher than that of the Bean-Livingston <b>entry</b> <b>field</b> for conventional superconductors, in agreement with recent theoretical predictions. Comment: 4 page...|$|E
30|$|In {{the case}} of this study, we {{speculate}} that the general trend of lower nausea rates in the PLM database compared to those reported in corresponding medication labels is driven largely by differences in data collection mechanisms. On the PLM platform, patients report side effects using a standard method across all drugs. Once a patient indicates that they have experienced any particular side effect, they are presented with an <b>entry</b> <b>field</b> with an auto-completer that provides suggestions as the user types.|$|E
40|$|We {{introduce}} {{the concept of}} the inviscid text entry rate: the point when the user’s creativity is the bottleneck rather than the text entry method. We then apply the inviscid text entry rate to define a grand goal for mobile text entry. Via a proxy measure we estimate the population mean of the sufficiently inviscid entry rate to be 67 wpm. We then compare existing mobile text entry methods against this estimate and find {{that the vast majority of}} text entry methods in the literature are substantially slower. This analysis suggests the mobile text <b>entry</b> <b>field</b> needs to focus on methods that can viably approach the inviscid entry rate. Author Keywords Inviscid entry rate; mobile text entry; crowdsourcin...|$|E
40|$|The Perl/Tk Pocket Reference is a {{companion}} volume to Learning Perl/Tk, an O'Reilly Animal Guide. Learning Perl/Tk is a tutorial for Perl/Tk, the extension to Perl for creating graphical user interfaces. With Tk, Perl {{programs can be}} window-based rather than command-line based, with buttons, <b>entry</b> <b>fields,</b> listboxes, menus, scrollbars, balloons, tables, dialogs, and more. And Perl/Tk programs run on UNIX and Windows-based computers. This small book is a handy reference guide geared toward the advanced Perl/Tk programmer. Novice Perl/Tk programmers will find that its compact size gives t...|$|R
50|$|HMRC's Online Filing {{software}} {{is an example}} of a program which generates iXBRL from source data. This uses a series of forms in which the key data (which will appear in XBRL tags) are entered in data <b>entry</b> <b>fields.</b> Additional data (the rest of the report and accounts) are entered in text boxes. The program generates the iXBRL report and accounts in a standard sequence of sections and a standard format. All other formatting of material is lost. While the resulting report and accounts meets HMRC's requirements, it is not an attractive document to view or read.|$|R
25|$|The {{team also}} <b>fielded</b> <b>entries</b> in the Busch Series and Truck Series.|$|R
