454|594|Public
5000|$|... #Subtitle level 4: ACE Expert system: the First <b>Deductive</b> <b>Database</b> System and Application ...|$|E
5000|$|A <b>deductive</b> <b>database</b> {{combines}} {{logic programming}} with a relational database, for example {{by using the}} Datalog language.|$|E
5000|$|Aditi, a <b>deductive</b> <b>database</b> {{system also}} {{developed}} at the University of Melbourne. Mercury-0.12.2 is the last version to support Aditi.|$|E
40|$|We {{investigate}} a Web information structuring mechanism called lightweight <b>deductive</b> <b>databases.</b> Lightweight <b>deductive</b> <b>databases</b> enable more sophisticated automated searching, extraction, and processing, and can facilitate agent-based programming. We also explore how these <b>deductive</b> <b>databases</b> benefit from being distributed on the Web...|$|R
40|$|In {{the recent}} years, <b>Deductive</b> <b>Databases</b> {{have been the}} focus of intense research, which has brought {{dramatic}} advances in theory, systems and applications. A salient feature of <b>deductive</b> <b>databases</b> is their capability of supporting a declarative, rule-based style of expressing queries and applications on databases. As such, they find applications in disparate areas, such as knowledge mining from databases, and computer-aided design and manufacturing systems. In this paper, we briefly review the key concepts behind <b>deductive</b> <b>databases</b> and their newly developed enabling technology. Then, we describe current research on extending the functionality and usability of <b>deductive</b> <b>databases</b> and on providing a synthesis of <b>deductive</b> <b>databases</b> with procedural and object-oriented approaches. ...|$|R
40|$|This paper {{investigates the}} novel concept of clausal <b>deductive</b> <b>databases</b> (cd{ databases), which are special normal <b>deductive</b> <b>databases</b> { i. e. <b>deductive</b> <b>databases</b> which may contain default {{negation}} in rule bodies { over a meta{language L with a xed set of predicate symbols, namely dis, con, and some built{in predicate symbol...|$|R
50|$|In {{computer}} science, a term {{index is}} a data structure to facilitate fast lookup of terms and clauses in a logic program, <b>deductive</b> <b>database,</b> or automated theorem prover.|$|E
5000|$|Leapsight Semantic Dataspace (LSD) is a {{distributed}} <b>deductive</b> <b>database</b> {{that offers}} high availability, fault tolerance, operational simplicity, and scalability. LSD uses Leaplog (a Datalog implementation) for querying and reasoning and was create by Leapsight.|$|E
5000|$|Deductive {{databases}} and logic programming:Deductive databases reuse {{a large number}} of concepts from logic programming; rules and facts specified in the <b>deductive</b> <b>database</b> language Datalog look very similar to those in Prolog. However important differences between deductive {{databases and}} logic programming: ...|$|E
40|$|This paper {{presents}} an approach for integrating <b>deductive</b> <b>databases.</b> In our approach <b>deductive</b> <b>databases</b> {{are expressed in}} a functional database programming language. For integrating the extensional parts of <b>deductive</b> <b>databases,</b> we use a binary relational ER model with subtyping as the common data model and propose a semi-automatic method to perform the integration. For integrating the intentional parts of <b>deductive</b> <b>databases,</b> we formally define identity and containment relationships between derived functions and propose a systematic method for comparing their semantics and integrating them. 1 Introduction This paper addresses the integration of <b>deductive</b> <b>databases.</b> <b>Deductive</b> <b>databases</b> couple a conventional database (the extensional database) with a knowledge base (the intentional database). The extensional database is described by a database schema expressed using a particular data model. Rules are commonly expressed as formulae in a logic language such as Datalog [20]. However, fol [...] ...|$|R
40|$|In {{this paper}} we will {{investigate}} the novel concept of clausal <b>deductive</b> <b>databases</b> (cd{databases), which are special normal <b>deductive</b> <b>databases</b> { i. e. <b>deductive</b> <b>databases</b> which may contain default negation in rule bodies { over a meta{language L with a xed set of predicate symbols, namely dis, con, and some built{in predicate symbols. The {{arguments of the}} literals in L are given by disjunctive and conjunctive clauses of a basic rst{order language L (which are considered as terms in L). On the other hand, disjunctive <b>deductive</b> <b>databases</b> (dd{databases) extend normal <b>deductive</b> <b>databases</b> by allowing for disjunctions (rather than just single atoms or literals) in rule heads { next to default negation in rule bodies...|$|R
40|$|Abstract. The {{semantics}} {{of static}} <b>deductive</b> <b>databases</b> is well understood {{based on the}} work in logic programming. In the past decade, various methods to incorporate update constructs into logic programming and <b>deductive</b> <b>databases</b> have been proposed. However, there is still no consensus about the appropriate treatment of dynamic behavior in <b>deductive</b> <b>databases.</b> In this paper, we propose a language called DatalogU, which is a minimal but powerful extension of Datalog with updates to base relations. DatalogU allows the user to program set-oriented complex database transactions with concurrent, disjunctive and sequential update operations in a simple and direct way. It has a simple and intuitive declarative semantics that naturally accounts for set-oriented updates in <b>deductive</b> <b>databases.</b> 1 Introduction <b>Deductive</b> <b>databases</b> result from the integration of relational database and logic programming techniques. The semantics of static <b>deductive</b> <b>databases</b> and evaluation of queries are well understood {{based on the work}} in logic programming...|$|R
50|$|A <b>deductive</b> <b>{{database}}</b> is {{a database}} {{system that can}} make deductions (i.e., conclude additional facts) based on rules and facts stored in the (<b>deductive)</b> <b>database.</b> Datalog is the language typically used to specify facts, rules and queries in deductive databases. Deductive databases have grown out of the desire to combine logic programming with relational databases to construct systems that support a powerful formalism and are still fast and {{able to deal with}} very large datasets. Deductive databases are more expressive than relational databases but less expressive than logic programming systems. In recent years, deductive databases such as Datalog have found new application in data integration, information extraction, networking, program analysis, security, and cloud computing.|$|E
40|$|In this paper, {{we address}} one {{important}} aspect of the problem of designing a cooperative <b>deductive</b> <b>database</b> system, namely, allocation of rules across the <b>deductive</b> <b>database</b> systems. We identify communication cost as the primary consideration in allocation of rules. The problem of optimal allocation of rules has been shown NP-complete, which has prohibitive execution times for large knowledge bases. We propose a naive algorithm for rule allocation and study its performance experimentally. We also address the problems of design, management, and integration of <b>deductive</b> <b>database</b> systems in a loosely coupled architecture, which constitute a cooperative <b>deductive</b> <b>database</b> system. Keywords: <b>Deductive</b> <b>Database</b> Systems, Distributed Database Systems, Knowledge Base, Clustering. 1 Introduction Most operational <b>deductive</b> <b>database</b> systems [4] in use today are centralized. Many organizations have several computers, each of which may house a <b>deductive</b> <b>database.</b> These database systems may be interr [...] ...|$|E
40|$|This chapter {{discusses}} {{an extended}} <b>deductive</b> <b>database</b> prototype system, Q-Data, developed by Bellcore to improve data quality through data validation and cleanup. The key technology component of Q-Data is the extended <b>deductive</b> <b>database</b> system LDL++, developed at MCC. We discuss {{the issues of}} data quality improvement, {{the relevance of the}} <b>deductive</b> <b>database</b> technology such as the LDL++ system to data quality improvement tasks, and the system architecture of the prototype. Furthermore, we describe our experiences using the <b>deductive</b> <b>database</b> technology in an on-going Q-Data trial attacking a real-world problem with test data from operational systems. Experiences related to engineering aspects of both the <b>deductive</b> <b>database</b> system and other component technologies, as well as pragmatic aspects of the implementation of Q-Data as a distributed system, are discussed. ...|$|E
40|$|Practical {{applications}} of <b>deductive</b> <b>databases</b> often {{require the use}} of extended features like disjunctive information, aggregation operators or default negation. But it has been unclear how one could deal with aggregation in the presense of recursion and disjunction. Usually, there is the requirement that <b>deductive</b> <b>databases</b> must be stratified w. r. t. aggregation, i. e. a predicate q that is defined using aggregation based on some other predicate p may not be used for deriving this other predicate p. Disjunctive <b>deductive</b> <b>databases</b> extend the classical Datalog language by disjunction, default negation, and function symbols. 1 There are practical examples that require non [...] stratified aggregation in disjunctive <b>deductive</b> <b>databases.</b> We will present a clear declarative set semantics for disjunctive <b>deductive</b> <b>databases</b> P with aggregation. The semantics is based on a special program transformation, which replaces an aggregation by a suitable construct using default negation and the func [...] ...|$|R
40|$|The {{semantics}} {{of static}} <b>deductive</b> <b>databases</b> is well understood {{based on the}} work in logic programming. In the past decade, various methods to incorporate update constructs into logic programming and <b>deductive</b> <b>databases</b> have been proposed. However, there is still no consensus about the appropriate treatment of dynamic behavior in <b>deductive</b> <b>databases.</b> In this paper, we propose a language called DatalogU, which is a minimal but powerful extension of Datalog with updates to base relations. DatalogU allows the user to program set-oriented complex database transactions with concurrent, disjunctive and sequential update operations in a simple and direct way. It has a simple and intuitive declarative semantics that naturally accounts for set-oriented updates in <b>deductive</b> <b>databases...</b>|$|R
40|$|AbstractI discuss my experiences, some of {{the work}} that I have done, and related work that {{influenced}} me, concerning <b>deductive</b> <b>databases,</b> over the last 30 years. I divide this time period into three roughly equal parts: 1957 – 1968, 1969 – 1978, 1979 –present. For the first I describe how my interest started in <b>deductive</b> <b>databases</b> in 1957, {{at a time when the}} field of databases did not even exist. I describe work in the beginning years, leading to the start of <b>deductive</b> <b>databases</b> about 1968 with the work of Cordell Green and Bertram Raphael. The second period saw a great deal of work in theorem providing as well as the introduction of logic programming. The existence and importance of <b>deductive</b> <b>databases</b> as a formal and viable discipline received its impetus at a workshop held in Toulouse, France, in 1977, which culminated in the book Logic and Data Bases. The relationship of <b>deductive</b> <b>databases</b> and logic programming was recognized at that time. During the third period we have seen formal theories of databases come about as an outgrowth of that work, and the recognition that artificial intelligence and <b>deductive</b> <b>databases</b> are closely related, at least through the so-called expert database systems. I expect that the relationships between techniques from formal logic, databases, logic programming, and artificial intelligence will continue to be explored and the field of <b>deductive</b> <b>databases</b> will become a more prominent area of computer science in coming years...|$|R
40|$|Network Management is {{essential}} for successful operation of any communications network. Due {{to the complexity of}} modern networks, their management requires application of artificial intelligence based techniques. Two essential aspects of any Network Management system are, a large volume of data, and rules applied to this data. <b>Deductive</b> <b>database</b> systems cater for both. In this paper we examine the suitability of <b>deductive</b> <b>database</b> systems for Network Management application. Fundamentals of Network Management as well as <b>deductive</b> <b>database</b> systems are given. We describe a prototype Network Management system built to test the suitability of <b>deductive</b> <b>database</b> systems for Network Management. ...|$|E
40|$|The {{notion of}} <b>deductive</b> <b>database</b> is {{generalized}} by extending the first-order language, used to formulate facts, rules and constraints, to a first-order language involving time operators. A <b>deductive</b> <b>database</b> {{based on such}} an extended language is called temporal. In this paper, we first introduce two additional time operators, one to reference past tenses, the other to reference future tenses. Then, the notion of temporal <b>deductive</b> <b>database</b> and its consistency is formally defined. Afterwards, the data manipulation facilities of an implemented temporal <b>deductive</b> <b>database</b> management system are presented, {{and their relationship to}} the consistency is discussed. This reveals that consistency is hard to achieve within the presented framework. Therefore, the class of present dependent constraints is introduced. The result is that if the constraints are restricted to be present dependent, then any temporal <b>deductive</b> <b>database</b> may easily be made consistent. 1 Introduction and Motivation Deductiv [...] ...|$|E
40|$|In this paper, {{we address}} the {{problems}} of design, management, and integration of <b>deductive</b> <b>database</b> systems in a loosely coupled architecture, which constitute a cooperative <b>deductive</b> <b>database</b> system. We next address one {{important aspect of the}} problem of designing a cooperative <b>deductive</b> <b>database</b> system, namely, allocation of rules across the <b>deductive</b> <b>database</b> systems. We identify communication cost as the primary consideration in allocation of rules. The problem of optimal allocation of rules has been shown NP-complete, which has prohibitive execution times for large knowledge bases. We propose a naive algorithm for rule allocation and study its performance experimentally. We also show that this naive algorithm can be used for reallocation of rules after rulebase gets updated...|$|E
40|$|Recently in the <b>database</b> field, <b>deductive</b> <b>databases</b> {{and object}} {{oriented}} databases {{are two major}} areas which have attracted many researchers. For <b>deductive</b> <b>databases,</b> several logical query languages, such as LDLI [1] and ELPS [7] were proposed. They can handle complex objects by introducing set-valued variables in logic programming...|$|R
40|$|In recent years, {{there has}} been growing {{interest}} in reasoning with uncertainty in logic programming and <b>deductive</b> <b>databases.</b> However, most frameworks proposed thus far are either non-probabilistic in nature or based on subjective probabilities. In this paper, we {{address the problem of}} incorporating empirical probabilities [...] that is, probabilities obtained from statistical findings [...] in <b>deductive</b> <b>databases.</b> To this end, we develop a formal model-theoretic basis for such databases. We also present a sound and complete algorithm for checking the consistency of such databases. Moreover, we develop consistency-preserving ways to optimize the algorithm for practical usage. Finally, we show how query answering for empirical <b>deductive</b> <b>databases</b> can be carried out. Keywords: <b>deductive</b> <b>databases,</b> empirical probabilities, model semantics, constraint satisfaction, optimizations, query answering 1 Introduction Uncertainty management plays a central role in everyday human decision maki [...] ...|$|R
40|$|Resolution in general, logic {{programming}} in particular, {{and even more}} so abductive {{logic programming}} and <b>deductive</b> <b>databases</b> are paraconsistent. <b>Deductive</b> <b>databases</b> are theory systems which change over time. They do not support the inference of arbitrary consequences from inconsistent components, such as contradictory definitions of database relations (predicates) or violated integrity constraints. Because of the goal-orientedness of query answering which focuses on consistent subsets of relevant database clauses, computed answers in <b>deductive</b> <b>databases</b> typically make sense, almost no matter to which degree consistency or integrity is corrupted. Consistency requirements for the knowledge embodied by a database is expressed by an associated set of integrity constraints which, taken on its own, may also vary in its degree of (in-) consistency. <b>Deductive</b> <b>databases</b> evolve via sequences of state changes, effected by updates that can be seen as belief revision steps. Instead of rejecting upda [...] ...|$|R
40|$|In {{this article}} we present a {{learning}} method to obtain rules for the semantic query optimization in deductive databases. Semantic query optimization can dramatically speed up <b>deductive</b> <b>database</b> query answering by knowledge intensive reformulation. We will present a learning method for rules that will help to semantically optimize queries for deductive databases. We tried to change the algorithm in [2] to work for <b>deductive</b> <b>database</b> as well in this direction we propose a method for an approximate cost evaluation for <b>deductive</b> <b>database</b> predicates...|$|E
40|$|A Distributed <b>Deductive</b> <b>Database</b> System {{consists}} of many autonomous <b>deductive</b> <b>database</b> systems {{connected by a}} computer network to facilitate sharing of both database and rules. The design of a distributed <b>deductive</b> <b>database</b> system differs from the design of conventional nondistributed <b>deductive</b> <b>database</b> systems. The former requires design of distribution of both the database and rulebase, where as the latter requires design of data distribution. This paper addresses the problem of allocating rules in a distributed <b>deductive</b> <b>database</b> system, where rulebase (a collection of rules) and database are shared across autonomous sites. The problem is relevant and challenging in applications involving large rulebases. We have identified communication cost as the primary consideration in allocation of rules. The optimal allocation of rules over a set of sites is an NP-complete problem. It has prohibitive execution time for large rulebases. In this paper, We propose an efficient heuristic algorithm for nonreplicated rule allocation and study its performance vis-a-vis the enumerative algorithm for optimal allocation. A heuristic for replicated allocation of rules is also presented which starts from the nonreplicated allocation. ...|$|E
40|$|AbstractThis {{paper is}} the third in a series {{providing}} a theoretical basis for <b>deductive</b> <b>database</b> systems. A <b>deductive</b> <b>database</b> consists of closed typed first order logic formulas of the form A ← W, where A is an atom and W is a typed first order formula. A typed first order formula {{can be used as}} a query, and a closed typed first order formula {{can be used as a}}n integrity constraint. Functions are allowed to appear in formulas. Such a <b>deductive</b> <b>database</b> system can be implemented using a PROLOG system. The main results of this paper are concerned with the nonfloundering and completeness of query evaluation. We also introduce an alternative query evaluation process and show that corresponding versions of the earlier results can be obtained. Finally, we summarize the results of the three papers and discuss the attractive properties of the <b>deductive</b> <b>database</b> system approach based on first order logic...|$|E
40|$|The {{integration}} of concepts from logic and deduction into databases and knowledge bases {{has created the}} field of <b>deductive</b> <b>databases.</b> Logic programming provides a powerful declarative language for accessing and maintaining knowledge in databases. Techniques from relational databases and automated deduction are useful for achieving efficient retrieval and reasoning in large knowledge bases. Thus, <b>deductive</b> <b>databases</b> {{can be used for}} building intelligent information systems. The contributions in this Proceedings of the Sixth International Workshop on <b>Deductive</b> <b>Databases</b> and Logic Programming DDLP' 98 are grouped into four sessions: theoretical aspects, applications, Datalog extensions, and semantics and a demo session...|$|R
50|$|Minker {{is one of}} {{the founders}} of the area of <b>deductive</b> <b>databases</b> and {{disjunctive}} logic programming. He has made important contributions to semantic query optimization and to cooperative and informative answers for <b>deductive</b> <b>databases.</b> He has also developed a theoretical basis for disjunctive databases and disjunctive logic programs, developing the Generalized Closed World Assumption (GCWA).|$|R
5000|$|F-logic is a {{declarative}} {{object-oriented language}} for <b>deductive</b> <b>databases</b> and knowledge representation.|$|R
40|$|In {{order to}} extend the ability to handle {{incomplete}} information in a definite <b>deductive</b> <b>database,</b> a Horn clause based system representing incomplete information as incomplete constants is proposed. By using the notion of incomplete constants the <b>deductive</b> <b>database</b> system handles incomplete information {{in the form of}} sets of possible values, thereby giving more information than null values. The resulting system extends Horn logic to express a restricted form of indefiniteness. Although a <b>deductive</b> <b>database</b> with this kind of incomplete information is, in fact, a subset of an indefinite <b>deductive</b> <b>database</b> system, it represents indefiniteness in terms of value incompleteness and therefore it can make use of the existing Horn logic computation rules. The inference rules for such a system are presented, its model theory discussed and an indefinite model theory proposed. The indefinite model theory is consistent with minimal model theory and extends its expressive power. Categories and Subje [...] ...|$|E
40|$|This paper {{presents}} {{an experiment in}} the use of a <b>deductive</b> <b>database</b> system for computer network maintenance. There are relatively few practical applications of deductive databases. Takagi et. al. applied deductive databases to a practical problem. They utilized an indirect connectivity search capability of a <b>deductive</b> <b>database</b> system for a retrieval of complex configurations in petrochemical pipeline plants. We applied the indirect connectivity search to computer network maintenance. However, it is not sufficient for a traffic analysis of computer networks. Therefore, we equipped a statistical analysis component to a <b>deductive</b> <b>database</b> system and examined the applicability of this component to traffic analysis. Extraction of time series data from the <b>deductive</b> <b>database</b> is also discussed. 1 Introduction Computer networks are growing day by day. In addition to the traditional network applications such as e-mail, net-news and telnet, new multi-media applications including the World Wide [...] ...|$|E
40|$|We {{describe}} {{the application of}} the magic sets method for efficient query evaluation of fuzzy logic programs. The logic programs considered are written in Datalog language and are processed by the <b>deductive</b> <b>database</b> system developed at the Department of Computer Science and Engineering, University of West Bohemia. Deductive system enriched with fuzzy logic is able to better serve as a knowledge system. Speeding up its execution makes this system practically useful. Key Words: Confidence Factor, <b>Deductive</b> <b>Database,</b> Fuzzy Logic, Magic Sets Method 1 Introduction The Experimental <b>Deductive</b> <b>Database</b> System (EDD) developed at CS&E Dept. of UWB is designed as a translator's front-end compiling Datalog programs into the SQL language. The produced SQL program is processed by a commercial Oracle database system [4]. <b>Deductive</b> <b>database</b> systems make it possible to deduce new facts not contained among facts of original (extensional) database. These new facts are derived on the base of deduction [...] ...|$|E
40|$|This paper {{presents}} {{a method for}} integrating <b>deductive</b> <b>databases.</b> In our approach <b>deductive</b> <b>databases</b> are expressed in a functional database programming language in which rules are expressed as derived functions. For integrating the extensional parts of <b>deductive</b> <b>databases,</b> we use a binary relational ER model with subtyping as the common data model and propose a semi-automatic method to perform the integration. For integrating the intentional parts of <b>deductive</b> <b>databases,</b> we formally define equivalence and subsumption relationships between derived functions and propose a systematic method for comparing their semantics and integrating them. 1 Introduction Database integration has been studied {{for more than a}} decade, and with the recent boom in network technology and the wide use of information systems, database researchers have begun to observe the necessity of integrating multiple information sources, including databases, knowledge bases, and even file systems, in order to solve comm [...] ...|$|R
40|$|We {{consider}} {{a class of}} linear query programs and integrity constraints and develop methods for (i) computing the residues and (ii) pushing them inside the recursive programs, minimizing redundant computation and run-time overhead. We also discuss applications of our strategy to intelligent query answering. 1 Introduction Several approaches have been proposed for semantic query optimization, and the reader is referred to Chakravarthy et al [3] for a detailed survey of works on relational as well as <b>deductive</b> <b>databases.</b> <b>Deductive</b> <b>databases</b> have been recognized as an important data model for forming the platform for next generation applications. The optimization of recursive queries {{is a very important}} problem for <b>deductive</b> <b>databases</b> (see [1, 2, 12] for surveys). Chakravarthy et al [3] laid down the foundations for semantic query optimization in non-recursive <b>deductive</b> <b>databases.</b> They proposed the approach of compiling queries w. r. t. the integrity constraints (ICs) and extracting "residu [...] ...|$|R
40|$|<b>Deductive</b> <b>databases</b> {{have the}} ability to deduce new facts from a set of facts using a set of rules. They are also useful in the {{integration}} of artificial intelligence and database. However, when recursive rules are involved, the amount of deduced facts can become too large to be practically stored, viewed or analyzed. This seriously hinders the usefulness of <b>deductive</b> <b>databases.</b> In order to overcome this problem, we propose four methods to discover characterisbc rules from large amount of deduction results without actually having to store all the deduction results. This paper presents {{the first step in the}} application of knowledge discovery techniques to <b>deductive</b> <b>databases</b> with large deduction results...|$|R
