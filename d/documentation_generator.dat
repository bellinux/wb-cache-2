47|18|Public
5000|$|The sourcecode <b>documentation</b> <b>generator</b> Doxygen {{supports}} Markdown {{with extra}} features.|$|E
5000|$|Free Pascal's <b>documentation</b> <b>generator</b> (fpdoc), {{can also}} {{generate}} OS/2's IPF output.|$|E
5000|$|Software documentation: a <b>documentation</b> <b>generator</b> {{produces}} {{technical documentation}} [...] and low-level design descriptions.|$|E
5000|$|Documentation generators: Comparison of <b>documentation</b> <b>generators,</b> help2man, Plain Old Documentation, asciidoc ...|$|R
50|$|Comments are {{sometimes}} processed {{in various ways}} to generate documentation external to the source code itself by <b>documentation</b> <b>generators,</b> or used for integration with source code management systems {{and other kinds of}} external programming tools.|$|R
50|$|Examples of <b>documentation</b> <b>generators</b> {{include the}} {{programs}} Javadoc {{for use with}} Java, Ddoc for D, Doxygen for C, C++, Java, IDL, and PHPDoc for PHP. Forms of docstring are supported by Python, Lisp, Elixir, and Clojure.|$|R
5000|$|Sphinx is a <b>documentation</b> <b>generator</b> {{that can}} use Graphviz to embed graphs in documents.|$|E
5000|$|... javadoc [...] - [...] the <b>documentation</b> <b>generator,</b> which {{automatically}} generates documentation from {{source code}} comments ...|$|E
50|$|In {{addition}} to the text-based IDL for the specification of interfaces, Franca provides an HTML <b>documentation</b> <b>generator.</b>|$|E
50|$|The {{following}} tables compare {{general and}} technical information {{for a number}} of <b>documentation</b> <b>generators.</b> Please see the individual products' articles for further information. Unless otherwise specified in footnotes, comparisons are based on the stable versions without any add-ons, extensions or external programs.|$|R
50|$|Comments are {{a form of}} human-readable metadata, and lengthy {{comments}} can {{disrupt the}} flow of code. This can be the case either for a long comment for a short section of code, such as a paragraph to explain one line, or comments for <b>documentation</b> <b>generators,</b> such as Javadoc or XML Documentation. Code folding allows one to have long comments, but to display them only when required. In cases where a long comment has a single summary line, such as Python docstrings, the summary can still be displayed when the section is collapsed, allowing a summary/detailed view.|$|R
40|$|Current {{software}} documentation tools (like text processors, email, <b>documentation</b> <b>generators,</b> reporting, configuration management, wikis) {{have different}} strengths {{in supporting the}} software engineering process. But one weakness they all {{have in common is}} their inability to combine the advantages of the various techniques. Integrating documentation with diverse origins would enhance the force of expression and compensate individual failings of the different techniques. In this paper, we present a new brand of documentation utilities - exemplified by the Dendrodoc-system - that overcomes current problems with documentation. By processing information at negligible cost that common tools ignore, our system represents an efficient way of improving software documentation...|$|R
50|$|Sphinx is a <b>documentation</b> <b>generator</b> {{written and}} used by the Python community. It is written in Python, and also used in other environments.|$|E
50|$|ScriptCase still {{allows the}} {{advanced}} settings for the generated applications {{meet the requirements}} of complex systems. There is also a <b>documentation</b> <b>generator</b> that can integrate the whole team.|$|E
50|$|NDoc is a code <b>documentation</b> <b>generator</b> for the Common Language Infrastructure {{created by}} Jason Diamond, Jean-Claude Manoli and Kral Ferch. It is {{licensed}} under the GNU General Public License.|$|E
40|$|Abstract. We {{present a}} system, called CASS, for the {{analysis}} of functional logic programs. The system is generic so that various kinds of analyses (e. g., groundness, non-determinism, demanded arguments) can be easily integrated. In order to analyze larger applications consisting of dozens or hundreds of modules, CASS supports a modular and incremental analysis of programs. Moreover, it can be used by different programming tools, like <b>documentation</b> <b>generators,</b> analysis environments, program optimizers, as well as Eclipse-based development environments. For this purpose, CASS can also be invoked as a server system to get a language-independent access to its functionality. CASS is completely implemented in the functional logic language Curry as a master/worker architecture to exploit parallel or distributed execution environments. ...|$|R
40|$|Abstract syntax {{trees are}} a very common data-structure in {{language}} related tools. For example compilers, interpreters, <b>documentation</b> <b>generators,</b> and syntax-directed editors use them extensively to extract, transform, store and produce information that is key to their functionality. We present a Java back-end for ApiGen, a tool that generates implementations of abstract syntax trees. The generated code is characterized by strong typing combined with a generic interface and maximal sub-term sharing for memory efficiency and fast equality checking. The goal of this tool is to obtain safe and more efficient programming interfaces for abstract syntax trees. The contribution of this work is the combination of generating a strongly typed data-structure with maximal sub-term sharing in Java. Practical experience shows that this approach is beneficial for extremely large as well as smaller data types...|$|R
40|$|We {{present a}} system, called CASS, for the {{analysis}} of functional logic programs. The system is generic so that various kinds of analyses (e. g., groundness, non-determinism, demanded arguments) can be easily integrated. In order to analyze larger applications consisting of dozens or hundreds of modules, CASS supports a modular and incremental analysis of programs. Moreover, it can be used by different programming tools, like <b>documentation</b> <b>generators,</b> analysis environments, program optimizers, as well as Eclipse-based development environments. For this purpose, CASS can also be invoked as a server system to get a language-independent access to its functionality. CASS is completely implemented in the functional logic language Curry as a master/worker architecture to exploit parallel or distributed execution environments. Comment: Proceedings of the 13 th International Colloquium on Implementation of Constraint LOgic Programming Systems (CICLOPS 2013), Istanbul, Turkey, August 25, 201...|$|R
5000|$|VSdocman is a <b>documentation</b> <b>generator</b> {{that allows}} for code commenting and the {{automatic}} generation of technical documentation from C# and VB [...]NET projects. It is directly integrated in Visual Studio as an extension.|$|E
50|$|YARD, is an {{embedded}} <b>documentation</b> <b>generator</b> for the Ruby programming language. It {{analyzes the}} Ruby source code, generating a structured collection of pages for Ruby objects and methods. Code comments {{can be added}} in a natural style.|$|E
50|$|A <b>documentation</b> <b>generator</b> is a {{programming}} tool that generates software documentation intended for programmers (API documentation) or end users (End-user Guide), or both, from {{a set of}} specially commented source code files, and in some cases, binary files.|$|E
40|$|In {{order to}} {{maintain}} the consistency between sources and documentation, {{while at the same time}} providing documentation at the design level, it is necessary to generate documentation from sources in such a way that it can be integrated with hand-written documentation. In order to simplify the construction of <b>documentation</b> <b>generators,</b> we introduce island grammars, which only define those syntactic structures needed for (re) documentation purposes. We explain how they can be used to obtain various forms of documentation, such as data dependency diagrams for mainframe batch jobs. Moreover, we discuss how the derived information can be made available via a hypertext structure. We conclude with an industrial case study in which a 600, 000 LOC COBOL legacy system is redocumented using the techniques presented in the paper. 1991 ACM Computing Classi#cation System: D. 2. 2, D. 2. 5, D. 2. 7, D. 3. 4 Keywords and Phrases: Redocumentation, legacy systems, documentation generation, source code analy [...] ...|$|R
40|$|A domain-specific {{language}} (DSL) {{provides a}} notation tailored towards an application domain {{and is based}} on the relevant concepts and features of that domain. As such, a DSL is a means to describe and generate members of a family of programs in the domain. A prerequisite for the design of a DSL is a detailed analysis and structuring of the application domain. Graphical feature diagrams have been proposed to organize the dependencies between such features, and to indicate which ones are common to all family members and which ones vary. In this paper, we study feature diagrams in more details, as well as their relationship to domain-specific languages. We propose the Feature Description Language (FDL), a textual language to describe features. We explore automated manipulation of feature descriptions such as normalization, expansion to disjunctive normal form, variability computation and constraint satisfaction. Feature descriptions can be directly mapped to UML diagrams which in their turn can be used for Java code generation. The value of FDL is assessed via a case study in the use and expressiveness of feature descriptions for the area of <b>documentation</b> <b>generators.</b> 1998 ACM Computing Classification System: D. 2. 2, D. 2. 9, D. 2. 11, D. 2. 13. Keywords and Phrases: Domain engineering, tool support, software product lines, UML, constraints. Note: To appear in the Journal of Computing and Information Technology, 2001. Note: Work carried out under CWI project SEN 1. 2, Domain-Specific Languages, sponsored by the Telematica Instituut. 1...|$|R
40|$|A {{revised version}} of Hydra, an {{adaptive}} particle-particle, particle-mesh plus smoothed particle hydrodynamics code developed by; Hugh Couchman, University of Western Ontario, Frazer Pearce, University of Durham, Peter Thomas, University of Sussex, is now available as a tar file from; [URL] or [URL]. Comment: A {{new version of the}} AP 3 M-SPH code, Hydra, is now available as a tar file from the following sites; [URL], [URL]. The release now also contains a cosmological initial conditions <b>generator,</b> <b>documentation,</b> an installation guide and installation tests. A LaTex version of the documentation is included her...|$|R
5000|$|Ciao {{includes}} lpdoc, {{an automatic}} <b>documentation</b> <b>generator.</b> Itprocesses programs adorned with (Ciao) assertions and machine-readablecomments and generates manuals in many formats including HTML, pdf,texinfo, info, man, etc., {{as well as}} on-line help, ascii READMEfiles, entries for indices of manuals (info, WWW, ...), and maintainsWWW distribution sites.|$|E
50|$|Javadoc was {{an early}} Java {{language}} <b>documentation</b> <b>generator.</b> Prior {{to the use of}} documentation generators it was customary to use technical writers who would typically write only standalone documentation for the software, but it was much harder to keep this documentation in sync with the software itself.|$|E
50|$|Epydoc is a <b>documentation</b> <b>generator</b> that {{processes}} its own lightweight {{markup language}} Epytext for Python documentation strings. As opposed to freeform Python docstrings, reStructuredText (both also supported) and other markup languages for docstrings, Epytext supports linking between different pieces of documentation. The project Epydoc is inactive since February 2009.|$|E
40|$|Python for Power System Analysis (PyPSA) {{is a free}} {{software}} toolbox for simulating and optimising modern power systems that include features such as variable wind and solar generation, storage units, sector coupling and mixed alternating and direct current networks. PyPSA is designed to scale well with large networks and long time series. Find out more at: [URL] and [URL] This is release 0. 9. 0 of PyPSA. Please see [URL] for a hyper-linked version of these release notes. This release mostly contains new features with a few minor API changes. 	Unit commitment as a MILP problem is now available for generators in the Linear Optimal Power Flow (LOPF). If you set committable == True for the generator, an addition binary online/offline status is created. Minimum part loads, minimum up times, minimum down times, start up costs and shut down costs are implemented. See the <b>documentation</b> at <b>Generator</b> unit commitment constraints and the unit commitment example. Note that a generator cannot currently have both unit commitment and capacity expansion optimisation. 	Generator ramping limits have also been implemented for all <b>generators.</b> See the <b>documentation</b> at <b>Generator</b> ramping constraints and the unit commitment example. 	Different mathematically-equivalent formulations for the Linear Optimal Power Flow (LOPF) are now documented in Passive branch flow formulations and the arXiv preprint paper Linear Optimal Power Flow Using Cycle Flows. The new formulations can solve up to 20 {{times faster than the}} standard angle-based formulation. 	You can pass the network. lopf function the solver_io argument for pyomo. 	There are some improvements to network clustering and graphing. 	API change: The attribute network. now has been removed since it was unnecessary. Now, if you do not pass a snapshots argument to network. pf() or network. lpf(), these functions will default to network. snapshots rather than network. now. 	API change: When reading in network data from CSV files, PyPSA will parse snapshot dates as proper datetimes rather than text strings. João Gorenstein Dedecca has also implemented a MILP version of the transmission expansion, see [URL] which properly takes account of the impedance with a disjunctive relaxation. This will be pulled into the main PyPSA code base soon...|$|R
40|$|China&# 039;s {{construction}} industry is huge and widespread. Massive construction, particularly the large-scale urban renewable activities in megacities, inevitably causes billions {{of tons of}} construction and demolition waste, and arouses great environmental concerns, which have not been well documented. The need for accurate data and informed analyses and further policy making are therefore paramount. Case studies of a rapidly developing flagship megacity, Shenzhen city in South China, in-depth surveys on construction and demolition sites, recyclers and government department shave been conducted to obtain fundamental information about demolition waste from its generation to disposal. Next, advanced methods to estimate and extrapolate the generation, flows and utilization options of demolition waste have been created. Results show that approximately 14 million tons of demolition waste has been produced in Shenzhen city annually from 2010 to 2015 and will trend upward in near future. The recycling potential based on current utilization options is valued at around 1. 02 billion USD in 2015 and this number could soar to 1. 38 billion USD if recycling rates are maximized. To summarize, {{the findings of this}} study provide quantitative <b>documentation</b> for <b>generators,</b> recyclers and the government to take responsibility for sound management of demolition waste, including waste collection, transportation, utilization options and landfill planning. This approach could give insight into the quantification of demolition waste if applied to other megacities and across China...|$|R
40|$|International audienceApplication {{generators}} translate specifications into products (programs, <b>documentations.</b> An application <b>generator</b> builder {{offers a}} way to define specification languages and associated parsers, to describe and traverse the meta-models structure and to specify the derivation on this structure. STEP is an ISO 10303 standard developed to facilitate product information sharing by specifying sufficient semantic content for data and their usage. STEP technology offers very useful software tools and can be applied for the design and the implementation of application generators. EUGENE is a STEP-based framework, that is intended for the building of application generators. After a concise presentation of EUGENE, this paper presents different application generators built with this framework within an industrial project. Then, different properties of generators are examined to establish the kind of generators which can be successfully built with EUGENE. Finally, we conclude with the main benefits of our approach...|$|R
50|$|Javadoc (originally cased JavaDoc) is a <b>documentation</b> <b>generator</b> {{created by}} Sun Microsystems for the Java {{language}} (now owned by Oracle Corporation) for generating API documentation in HTML format from Java source code. The HTML format {{is used for}} adding the convenience {{of being able to}} hyperlink related documents together.|$|E
50|$|Read the Docs is a {{software}} documentation hosting platform. The source code is freely available, {{and the service}} is also free to use. It generates documentation that is written with the Sphinx <b>documentation</b> <b>generator.</b> The site was created in 2010 by Eric Holscher, Bobby Grace, and Charles Leifer.|$|E
5000|$|Doxygen ( [...] ) is a <b>documentation</b> <b>generator,</b> a {{tool for}} writing {{software}} reference documentation. The documentation is written within code, and is thus relatively easy to keep up to date. Doxygen can cross reference documentation and code, so that the reader of a document can easily refer to the actual code.|$|E
40|$|Insee, the French {{statistical}} institute, {{has been}} developing for some years a data collection platform which includes a number of components, in particular a graphical questionnaire design and specification tool and a questionnaire generation tool targeting different support (web, paper [...] .). This platform relies largely on DDI: the questionnaires are specified using the Data Collection module constructs, stored in a DDI metadata repository and fed into the questionnaire generator which produces the physical collection instruments. This is the most advanced example of active metadata used in production in the institute. Insee coordinates {{since the beginning of}} 2016 a European project which aims at fostering the reuse of statistical services between NSIs. For this project, Insee open-sourced its questionnaire generation tool, which was reused by SURS, the Slovenian NSI. A lot of work was also devoted to improving the packaging and <b>documentation</b> of the <b>generator</b> in order to maximize its reusability. The presentation will give more detail on the questionnaire designer and generator, and describe how the latter was reused by SURS. It will also detail the future roadmaps of the different tools and the prospects for further reuse...|$|R
50|$|Stylus Studio {{provides}} synchronized XML schema {{text editing}} and visual XML schema diagram views. Changes made to an XML schema {{in the text}} editor are synchronized with the Diagram View, and vice versa. The schema editor includes an integrated XML schema <b>documentation</b> <b>generator,</b> to publish XML content models in HTML format.|$|E
5000|$|Formal pseud-language for documentation, can be {{embedded}} into SQL and PL/pgSQL scripts, {{and will}} be processed (documentation data-extraction and documentation hypertext generation) by an external tool, the <b>documentation</b> <b>generator.</b> Some of these tools have support to PL/SQL, so, {{it is expected to}} support also PL/pgSQL, in full or partial support.|$|E
