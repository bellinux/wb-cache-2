941|0|Public
25|$|Despite the {{additional}} transistors, {{the reduction in}} ground wires and bit lines allows a denser layout and greater storage capacity per chip. (The ground wires and bit lines are actually much wider than the lines in the diagrams.) In addition, NANDflash is typically permitted to contain {{a certain number of}} faults (NORflash, as is used for a BIOSROM, is expected to be <b>fault-free).</b> Manufacturers try to maximize the amount of usable storage by shrinking the size of the transistors.|$|E
25|$|There {{are many}} causes for the {{perception}} in wine faults, including poor hygiene at the winery, excessive or insufficient {{exposure of the}} wine to oxygen, excessive or insufficient exposure of the wine to sulphur, overextended maceration of the wine either pre- or post-fermentation, faulty fining, filtering and stabilization of the wine, the use of dirty oak barrels, over-extended barrel aging {{and the use of}} poor quality corks. Outside of the winery, other factors within the control of the retailer or end user of the wine can contribute to the perception of flaws in the wine. These include poor storage of the wine that exposes it to excessive heat and temperature fluctuations as well as the use of dirty stemware during wine tasting that can introduce materials or aromas to what was previously a clean and <b>fault-free</b> wine.|$|E
2500|$|It was {{anticipated}} that Tornado would need around [...] of running to bed in, {{before moving to}} the main line proper. Following HM Railway Inspectorate (HMRI) approval, [...] running was achieved by the end of September 2008. Prior to mid-October 2008, Tornado had achieved [...] of <b>fault-free</b> running. By the end of October, Tornado had run [...]|$|E
50|$|In cable identification, the faulty cables are {{identified}} from the <b>fault-free</b> cables at the already determined site.|$|E
50|$|To this end, the vectors of {{inputs and}} outputs contain all {{available}} signals, not just those used by the controller in <b>fault-free</b> operation.|$|E
50|$|A {{destination}} node should receive, in the <b>fault-free</b> state, two identical frames {{within a certain}} time skew, forward the first frame to the application and discard the second frame when (and if) it comes.|$|E
50|$|In {{the context}} of Control reconfiguration, a field of {{fault-tolerant}} control within control engineering, reconfigurability is a property of faulty systems meaning that the original control goals specified for the <b>fault-free</b> system can be reached after suitable control reconfiguration.|$|E
50|$|IDENTIFIER:The IDENTIFIER defines one {{action to}} be {{fulfilled}} by one or several of the attached LIN slave nodes. The network designer has to ensure the <b>fault-free</b> functionality in the design phase (one slave is allowed to send data to the bus in one frame time).|$|E
50|$|One {{critical}} {{feature that}} marks Swedish divorce laws is the {{complete absence of}} any fault requirement when establishing a case for divorce. Fault is entirely irrelevant and has no legal consequences {{on the results of}} the proceedings. Because {{there is no need to}} establish an irretrievable breakdown of marriage as the fundamental ground for divorce, the system remains virtually <b>fault-free.</b>|$|E
50|$|It was {{anticipated}} that Tornado would need around 2000 mi of running to bed in, {{before moving to}} the main line proper. Following HM Railway Inspectorate (HMRI) approval, 60 mi/h km/h running was achieved by the end of September 2008. Prior to mid-October 2008, Tornado had achieved 1000 mi of <b>fault-free</b> running. By the end of October, Tornado had run 1500 mi.|$|E
50|$|Until 2016 GCT {{competitions}} {{consisted of}} two rounds, plus a Jump-Off. The course was changed {{after the first round}} and the second round was limited to the top-18 riders of the first round or all <b>fault-free</b> riders if there were more than 18 zero-point-rounds. The points collected during the first round were added to the points collected during the second round.|$|E
50|$|This {{paradigm}} aims {{at keeping}} the nominal controller in the loop. To this end, a reconfiguration block {{can be placed}} between the faulty plant and the nominal controller. Together with the faulty plant, it forms the reconfigured plant. The reconfiguration block has to fulfill the requirement that the behaviour of the reconfigured plant matches the behaviour of the nominal, that is <b>fault-free</b> plant.|$|E
5000|$|... #Caption: Schematic {{diagram of}} a typical active {{fault-tolerant}} control system. In the nominal, i.e. <b>fault-free</b> situation, the lower control loop operates to meet the control goals. The fault-detection (FDI) module monitors the closed-loop system to detect and isolate faults. The fault estimate is passed to the reconfiguration block, which modifies the control loop to reach the control goals {{in spite of the}} fault.|$|E
50|$|Because of the {{limitations}} of graphical tools, design engineers previously relied heavily on text-based programming and mathematical models. However, developing these models was time-consuming, and highly prone to error. In addition, debugging text-based programs is a tedious process, requiring much trial and error before a final <b>fault-free</b> model could be created, especially since mathematical models undergo unseen changes during the translation through the various design stages.|$|E
5000|$|When an Ethernet {{interface}} {{has started}} {{the transmission of}} a frame to the transmission medium, this transmission has to be completely finished before another transmission can take place. This includes the transmission of the CRC32 checksum {{at the end of}} the frame to ensure a reliable, <b>fault-free</b> transmission. This inherent property of Ethernet networks - again- poses a challenge to the TDMA approach of the IEEE 802.1Qbv scheduler. This is visible in figure 2: ...|$|E
50|$|The {{performance}} metric of 4,000 miles <b>fault-free</b> running was achieved six months ahead of schedule, allowing a 'preview' service {{to be offered}} by June 2009 between London St Pancras and Ashford via Ebbsfleet, allowing further train testing, which achieved a 99% punctuality rate {{in the first month}} of operations. In September 2009 preliminary services to the Kent coast (Dover via Folkestone, and Ramsgate via Canterbury) also began. Preview services on the North Kent line began in November 2009.|$|E
50|$|Despite the {{additional}} transistors, {{the reduction in}} ground wires and bit lines allows a denser layout and greater storage capacity per chip. (The ground wires and bit lines are actually much wider than the lines in the diagrams.) In addition, NAND flash is typically permitted to contain {{a certain number of}} faults (NOR flash, as is used for a BIOS ROM, is expected to be <b>fault-free).</b> Manufacturers try to maximize the amount of usable storage by shrinking the size of the transistors.|$|E
50|$|Running a SoC {{design on}} FPGA {{prototype}} is a reliable {{way to ensure}} that it is functionally correct. This is compared to designers only relying on software simulations to verify that their hardware design is sound. About a third of all current SoC designs are <b>fault-free</b> during first silicon pass, with nearly half of all re-spins caused by functional logic errors. A single prototyping platform can provide verification for hardware, firmware, and application software design functionality before the first silicon pass.|$|E
50|$|Two {{kinds of}} {{redundancy}} are possible: space redundancy and time redundancy. Space redundancy provides additional components, functions, or data {{items that are}} unnecessary for <b>fault-free</b> operation. Space redundancy is further classified into hardware, software and information redundancy, {{depending on the type}} of redundant resources added to the system. In time redundancy the computation or data transmission is repeated and the result is compared to a stored copy of the previous result. The current terminology for this kind of testing is referred to as 'In Service Fault Tolerance Testing or ISFTT for short.|$|E
5000|$|Redundancy is the {{provision}} of functional capabilities that would be unnecessary in a <b>fault-free</b> environment.This can consist of backup components that automatically [...] "kick in" [...] should one component fail. For example, large cargo trucks can lose a tire without any major consequences. They have many tires, and no one tire is critical (with {{the exception of the}} front tires, which are used to steer, but generally carry less load, each and in total, than the other four to 16, so are less likely to fail).The idea of incorporating redundancy in order to improve the reliability of a system was pioneered by John von Neumann in the 1950s.|$|E
50|$|There {{are many}} causes for the {{perception}} in wine faults, including poor hygiene at the winery, excessive and/or insufficient {{exposure of the}} wine to oxygen, excessive or insufficient exposure of the wine to sulphur, overextended maceration of the wine either pre- or post-fermentation, faulty fining, filtering and stabilization of the wine, the use of dirty oak barrels, over-extended barrel aging {{and the use of}} poor quality corks. Outside of the winery, other factors within the control of the retailer or end user of the wine can contribute to the perception of flaws in the wine. These include poor storage of the wine that exposes it to excessive heat and temperature fluctuations as well as the use of dirty stemware during wine tasting that can introduce materials or aromas to what was previously a clean and <b>fault-free</b> wine.|$|E
50|$|A defect is {{an error}} caused in a device during the {{manufacturing}} process. A fault {{model is a}} mathematical description of how a defect alters design behavior. The logic values observed at the device's primary outputs, while applying a test pattern to some device under test (DUT), are called the output of that test pattern. The output of a test pattern, when testing a <b>fault-free</b> device that works exactly as designed, is called the expected output of that test pattern. A fault {{is said to be}} detected by a test pattern if the output of that test pattern, when testing a device that has only that one fault, is different than the expected output. The ATPG process for a targeted fault consists of two phases: fault activation and fault propagation. Fault activation establishes a signal value at the fault model site that is opposite of the value produced by the fault model. Fault propagation moves the resulting signal value, or fault effect, forward by sensitizing a path from the fault site to a primary output.|$|E
40|$|High level models {{comprise}} both faulty and <b>fault-free</b> models. High level <b>fault-free</b> modeling {{may simply}} indicate {{behavior of a}} <b>fault-free</b> circuit, but normally it {{is not able to}} cope with faulty conditions with strong nonlinearity. The only way to solve this is to replace the <b>fault-free</b> model with a faulty one. Furthermore, in <b>fault-free</b> simulation, the differenc...|$|E
40|$|In this paper, {{we present}} a {{reconfiguration}} approach to identify the maximal <b>fault-free</b> subcube-ring for tolerating faults in injured hypercubes. The <b>fault-free</b> subcube-ring is connected by a ring of <b>fault-free</b> subcubes with dilation 3. By exploiting the size of <b>fault-free</b> subcubes as large as possible, the maximal <b>fault-free</b> subcube-ring with higher processor utilization is obtained. Using this approach, we can tolerate more than n faults in n-dimensional hypercubes. To demonstrate the fault-tolerant capability of our approach, we implement two fault-tolerant algorithms, matrix-multiplication and sorting algorithms, on the nCUBE/ 2 E hypercube machine with 32 processors. The simulation results show that our reconfiguration approach has low performance slowdown and high processor utilization...|$|E
40|$|The {{balanced}} hypercube, BH_n, is {{a variant}} of hypercube Q_n. Zhou et al. [Inform. Sci. 300 (2015) 20 - 27] proposed an interesting problem that {{whether there is a}} <b>fault-free</b> Hamiltonian cycle in BH_n with each vertex incident to at least two <b>fault-free</b> edges. In this paper, we consider this problem and show that each <b>fault-free</b> edge lies on a <b>fault-free</b> Hamiltonian cycle in BH_n after no more than 4 n- 5 faulty edges occur if each vertex is incident with at least two <b>fault-free</b> edges for all n> 2. Our result is optimal with respect to the maximum number of tolerated edge faults. Comment: arXiv admin note: text overlap with arXiv: 1606. 0515...|$|E
40|$|This paper {{considers}} {{the problem of}} many-to-many disjoint paths in the hypercube Q_n with f faulty vertices and obtains the following result. For any integer k with 1 ≤ k≤ n- 2, any two sets S and T of k <b>fault-free</b> vertices {{in different parts of}} Q_n (n≥ 3), if f≤ 2 n- 2 k- 3 and each <b>fault-free</b> vertex has at least two <b>fault-free</b> neighbors, then there exist k fully disjoint <b>fault-free</b> paths linking S and T which contain at least 2 ^n- 2 f vertices. This result improves some known results in a sense...|$|E
40|$|Let fv {{denote the}} number of faulty {{vertices}} in an n-dimensional hypercube Qn. Inthispaper,we prove that every <b>fault-free</b> edge of Qn for n ≥ 4 and every <b>fault-free</b> vertex of Qn for n ≥ 3 lies on a <b>fault-free</b> cycle of every even length from 6 to 2 n − 2 fv inclusive if fv = n − 1, and all faulty vertices are not adjacent to the same vertex...|$|E
40|$|An n-dimensional folded hypercube, {{denoted by}} FQn, is an {{enhanced}} n-dimensional hypercube with one extra link between nodes {{that have the}} furthest Hamming distance. Let FFv (respectively, FFe) denote the set of faulty nodes (respectively, faulty links) in FQn. Under the assumption that ev-ery <b>fault-free</b> node in FQn is incident to at least two <b>fault-free</b> links, Hsieh et al. showed that if |FFv | + |FFe | 6 2 n − 4 for n> 3, then FQn − FFv − FFe contains a <b>fault-free</b> cycle of length at least 2 n − 2 |FFv|. In this paper, we show that, under the same conditional fault model, FQn with n> 5 can tolerate more faulty elements and pro-vides the same lower bound {{of the length of}} a longest <b>fault-free</b> cycle, i. e., FQn − FFv − FFe contains a <b>fault-free</b> cycle of length at least 2 n − 2 |FFv | i...|$|E
40|$|In this paper, {{we propose}} {{a scheme to}} {{identify}} the maximal <b>fault-free</b> substar-ring. This is the first attempt to derive a reconfiguration scheme with high processor utilization in the faulty n-star graph. The maximal <b>fault-free</b> substar-ring is connected by a ring of <b>fault-free</b> virtual substars and the maximal length of the ring is n(n- 1) (n- 2). Our pro- 2 n − 2 n+ 3 posed scheme can tolerate n- 3 faults such that the processor utilization is 2 n − n This is a near optimal result since the maximal <b>fault-free</b> substar-ring is constructed using all of the possible <b>fault-free</b> (n- 2) -substars. Moreover, our algorithm can still work {{when the number of}} faults exceeds n- 3. The simulation results also show that the processor 2 utilization is more than 50 % if the number of faults is less than n −n − 1 in the n-star graph. ...|$|E
40|$|The {{hypercube}} {{has been}} one of the most popular interconnection networks for parallel computer/communication system. In this papers, we assume that each node is incident with at least two <b>fault-free</b> links. Under this assumption, we show that every <b>fault-free</b> edge lies on a <b>fault-free</b> cycle of every even length from 6 to 2 ninclusive even if it has up to 2 n − 5 link faults. The result is optimal with respect to the number of link faults tolerated...|$|E
40|$|ISBN 978 - 1 - 4244 - 4596 - 7 International audienceAs we move {{deeper in}} the {{nanotechnology}} era, computer architecture is solicited to manipulate tremendous numbers of devices per chip with high defect densities. These trends provide new computing opportunities but efficiently exploiting them will require a shift towards novel, highly parallel architectures. Fault tolerant mechanisms {{will have to be}} integrated to the design to deal with the low yield of future nanofabrication processes. In this paper we consider multi processor grid (MPG) architectures that assure scalability beyond hundreds of cores per chip. We study self-diagnosis and self-configuration methods at the architectural level and propose an enhanced self-configuration methodology that enables usage of a maximum percentage of available <b>fault-free</b> cores in MPGs with high defect densities. We show that our approach achieves usability of all <b>fault-free</b> cores for the case of <b>fault-free</b> routers whereas previous work was efficient for defect densities of up to 20 - 25 % of defective cores. We also address the case of faulty routers, achieving usability of almost all <b>fault-free</b> nodes (<b>fault-free</b> cores having a <b>fault-free</b> router) for very high defect densities both in the cores and in the routers...|$|E
30|$|A node {{running an}} {{adaptive}} and distributed diagnosis algorithm executes tests at a periodic testing interval. A testing round is the interval {{in which all}} <b>fault-free</b> nodes have executed their assigned tests. If an event corresponds to a <b>fault-free</b> node becoming faulty or vice versa, the diagnosis latency {{is the number of}} testing rounds it takes for all <b>fault-free</b> nodes to diagnose an event. Most adaptive and distributed diagnosis algorithms present the diagnosability equal to N − 1, i.e., even if all but one node are faulty, diagnosis still completes correctly.|$|E
40|$|A <b>fault-free</b> {{path in the}} n-dimensional {{hypercube}} Qn with f faulty vertices {{is said to be}} long if it has length {{at least}} 2 n − 2 f − 2. Similarly, a <b>fault-free</b> cycle in Qn is long if it has length at least 2 n − 2 f. If all faulty vertices are from the same bipartite class of Qn, such length is the best possible. We show that for every set of at most 2 n − 4 faulty vertices in Qn and every two <b>fault-free</b> vertices u and v satisfying a simple necessary condition on neighbors of u and v, there exists a long <b>fault-free</b> path between u and v. This number of faulty vertices is tight and improves the previously known results. Furthermore, we show for every set of at most n 2 / 10 + n/ 2 + 1 faulty vertices in Qn where n ≥ 15 that Qn has a long <b>fault-free</b> cycle. This is a first quadratic bound, which is known to be asymptotically optimal...|$|E
40|$|AbstractLet fe (respectively, fv) {{denote the}} number of faulty edges (respectively, vertices) of an n-dimensional {{hypercube}} Qn. In this paper, we prove that every <b>fault-free</b> edge of Qn for n≥ 3 lies on a <b>fault-free</b> cycle of every even length from 4 to 2 n− 2 fv inclusive if fe+fv≤n− 2. Furthermore, we also prove that Qn for n≥ 5 contains a <b>fault-free</b> cycle of every even length from 4 to 2 n− 2 fv inclusive if fe≤n− 2 and fe+fv≤ 2 n− 4. This result has better tolerance for the faulty components than the degree of the hypercube...|$|E
40|$|In {{the work}} of Peng et al. in 2012, a new measure was {{proposed}} for fault diagnosis of systems: namely, g-good-neighbor conditional diagnosability, which requires that any <b>fault-free</b> vertex has at least g <b>fault-free</b> neighbors in the system. In this paper, we establish the g-good-neighbor conditional diagnosability of locally twisted cubes under the PMC model and the MM^* model...|$|E
30|$|The {{system model}} for {{deciding}} on the recommendations {{is based on}} system-level diagnosis theory [14]. The objective of system-level diagnosis is to employ tests to identify which units are working {{according to the specification}} and which are not. Diagnosis is thus based on processing the results of the set of tests performed between the units of a system. Most diagnosis models assume that a <b>fault-free</b> unit executes tests and reports test results reliably, i.e., a <b>fault-free</b> tester can always correctly determine whether the tested unit is faulty or <b>fault-free</b> [15, 16]. The model we propose in this work circumvents this assumption in the sense that tests are not meant to perfectly determine whether the tested entity is faulty or <b>fault-free</b> but only that the test criterion was not met. Furthermore, two different testers may reach different conclusions about the state of a given tested process.|$|E
