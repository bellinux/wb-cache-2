83|393|Public
500|$|Hans-Joachim Bremermann, a {{professor}} of mathematics and biophysics at the University of California at Berkeley, further argued in a 1965 paper that the [...] "speed, memory, and processing capacity of any possible future computer equipment are limited by certain physical barriers: the light barrier, the quantum barrier, and the thermodynamical barrier. These limitations imply, for example, that no computer, however constructed, {{will ever be able}} to examine the entire tree of possible move sequences of the game of chess." [...] Nonetheless, Bremermann did not foreclose the possibility that a computer would someday be able to solve chess. He wrote, [...] "In order to have a computer play a perfect or nearly perfect game [...] it will be necessary either to analyze the game completely ... or to analyze the game in an approximate way and combine this with a limited amount of tree searching. ... A theoretical understanding of such <b>heuristic</b> <b>programming,</b> however, is still very much wanting." ...|$|E
2500|$|Kronrod had a {{profound}} interest in artificial intelligence known in the USSR {{at the time as}} <b>heuristic</b> <b>programming.</b> He is well known for saying, [...] "chess is the Drosophila of artificial intelligence." [...] This quote graces the top of the American Association for Artificial Intelligence [...] "Games & Puzzles" [...] chess home page.|$|E
2500|$|He {{then went}} to Stanford University, where he was engaged in expert systems research. [...] He {{received}} a Ph.D. in Computer Science from that institution in 1979, specifically {{in the area of}} Artificial Intelligence, [...] He has said that at Stanford, “I focused on Artificial Intelligence, but again combined different areas by developing a computer program to teach medical students how to diagnose a patient (combining computer science, education, psychology, and medicine).” His dissertation project, he has said, “was the first attempt to use an expert system for instruction.” He describes himself as having been “a member of the 'Mycin Gang' in the <b>Heuristic</b> <b>Programming</b> Project, which became the Knowledge Systems Laboratory in the late 1970s. These projects were directed by Bruce G. Buchanan.” ...|$|E
50|$|Takizawa et al. (1996) {{reported}} on a <b>heuristic</b> <b>program</b> for detecting puns in the Japanese language.|$|R
50|$|In 1961 in his {{dissertation}} at the Massachusetts Institute of Technology with Marvin Minsky, Slagle developed the first expert system, SAINT (Symbolic Automatic INTegrator), {{which is a}} <b>heuristic</b> <b>program</b> that solves symbolic integration problems in freshman calculus.|$|R
40|$|Graduation date: 1979 This thesis extends Wagner-Whitin's Planning Horizon Theorem to {{discount}} situations in multiperiod multiple-item dynamic lot sizing problems. Three heuristic techniques are developed using the Least Unit Cost Method, Silver-Meal Method, and Inoue-Chang Method. The three techniques are described and compared {{in terms of}} their effectiveness in dealing with the dynamic lot sizing problem. These techniques are modified in order to apply to single-item discount situations. The performance of these modified techniques are tested by using Kaimann's data with discount data added and 100 additional sets of randomly generated data. A <b>heuristic</b> <b>program</b> has been developed {{for each of the three}} methods. Each program is designed to handle joint-order multiperiod, multiple-item dynamic lot sizing problems. In addition, both no discount and with discount situations are studied in the development of each program. All the above programs were first developed under the assumption that no split orders occurred. A mathematical programming model was then developed for the situations where the split orders were allowed. The difficulties involved in searching solutions using the mixed integer programming model are discussed. A two-item problem with one discount level is selected to illustrate the developed programs. The performance of the <b>heuristic</b> <b>programs</b> are measured and estimated through the use of dynamic programming techniques applied to some selected special situations as benchmarks. The comparisons of performance of the <b>heuristic</b> <b>programs</b> among themselves are also conducted based upon the costs of reaching solutions and the optimality of the solutions reached by using those programs. In our testing examples, the average costs of solutions reached by the heuristic methods based upon the Least Unit Cost Method, Silver-Meal Method, and Inoue-Change Method are - 560. 9, - 1475. 28, and - 1742. 36 respectively. The average CPU times for each <b>heuristic</b> <b>program</b> to reach a solution for a 12 -period two-item single discount problem are 0. 052 sec., 0. 064 sec., and 0. 054 sec. respectively. A conclusion is reached that the <b>heuristic</b> <b>program</b> based upon the Inoue-Chang Method has significant advantages over other programs...|$|R
5000|$|<b>Heuristic</b> <b>Programming</b> in Artificial Intelligence (with D. F. Beal), 1989.|$|E
5000|$|... 1979-1984: Research Assistant, <b>Heuristic</b> <b>Programming</b> Project, Department of Computer Science, Stanford University.|$|E
5000|$|Buchanan, B.G. and Shortliffe, E.H. (eds). Rule-Based Expert Systems: The MYCIN Experiments of the Stanford <b>Heuristic</b> <b>Programming</b> Project. Reading, MA: Addison-Wesley, 1984. See http://aaai.org/AITopics/RuleBasedExpertSystems.|$|E
40|$|Warehouse Location is a nonconvex {{programming}} problem {{involving the}} geographic placing and sizing of intermediate facilities in distribution studies. The nonconvexities {{are caused by}} economies of scale associated {{with the cost of}} building and operating the facilities. A <b>heuristic</b> <b>program</b> has been developed for solving warehouse location problems when these economies are representable by continuous concave functions. The paper discusses the heuristics used and computational experience with the program on "practical" problems. On the basis of two numerical examples for which an optimal solution was obtained through a special purpose experimental mixed integer programming code, it is conjectured (1) that near optimal solutions can be achieved using the <b>heuristic</b> <b>program</b> and (2) that optimal sizing and locating of facilities are very sensitive to the shapes of the warehousing cost functions. ...|$|R
40|$|Abstract: In this paper, {{the authors}} present a noble {{heuristic}} reading machine for blind people. The {{goal of this}} paper is to use intelligent-control method to settle down the reading machine by a touch-pat device for blind people. The proposed “A noble heuristic reading device for blind people”can efficiently help blind people for reading and train the blind people learning the dot-touched words as well. First of all, the feedback control theorem associated with some sensors is used to accomplish the action of automatic fixed position of the reading machine. Second, a <b>heuristic</b> <b>program</b> used to analyze a certain word by converting dot-touched signals into meaningful code will transfer word-code into phonetic signals and speak out for blind people effectively and precisely through personal computer interface. There are three units in the proposed design, which includes the hardware structure, the analysis for certain word-meaning and the phonetic output of the specified words. The test results show that the proposed smart reading machine can effectively prompt learning and reading effects for blind people. Key-Words: Intelligent control method, touch-pat, <b>heuristic</b> <b>program,</b> feedback control theorem and phonetic signal, programming...|$|R
50|$|Magellan v.1.1 (Artificial Intelligence Software), {{not to be}} {{confused}} with Directory Opus Magellan, was a program to emulate Artificial intelligence responses on Amiga, by creating <b>heuristic</b> <b>programmed</b> rules based on machine learning in its form of supervised learning. The user would choose into decision trees and decision tables system of AI featured by the Magellan program, in which to input objects, and desired outputs and describe all associate conditions and rules which the machine should follow in order to output pseudo-intelligent solutions to given problems.|$|R
5000|$|Kronrod had a {{profound}} interest in artificial intelligence known in the USSR {{at the time as}} <b>heuristic</b> <b>programming.</b> He is well known for saying, [...] "chess is the Drosophila of artificial intelligence." [...] This quote graces the top of the American Association for Artificial Intelligence [...] "Games & Puzzles" [...] chess home page.|$|E
5000|$|George's {{research}} interests concerned cybernetics and related fields. In the 1980s his research ranged from [...] "artificial intelligence; industrial and management cybernetics {{with emphasis on}} modelling and <b>heuristic</b> <b>programming</b> approaches to research in organizational behaviour". During his academic career he authored over 20 books ranging from psychology, cybernetics, digital computing and robotics, to philosophy of science.|$|E
50|$|Expert {{systems were}} first {{developed}} in artificial intelligence laboratories {{as an attempt}} to understand complex human decision making. Based on positive results from these initial prototypes, the technology was adopted by the US business community (and later worldwide) in the 1980s. The Stanford <b>heuristic</b> <b>programming</b> projects led by Edward Feigenbaum was one of the leaders in defining and developing the first expert systems.|$|E
40|$|We {{describe}} an Adaptive Dynamic Programming algorithm VGL(λ) for learning a critic function {{over a large}} continuous state space. The algorithm, which requires a learned model of the environment, extends Dual <b>Heuristic</b> Dynamic <b>Programming</b> to include a bootstrapping parameter analogous to that used in the reinforcement learning algorithm TD(λ). We provide on-line and batch mode implementations of the algorithm, and summarise the theoretical relationships and motivations of using this method over its precursor algorithms Dual <b>Heuristic</b> Dynamic <b>Programming</b> and TD(λ). Experiments for control problems using a neural network and greedy policy are provided...|$|R
40|$|Exploiting the Gotoh’s enhancement, a novel VLSI {{implementation}} of Smith-Waterman algorithm is presented. We also present {{a unique way}} to place gates using bit-stacking technique. This enable the development of scalable specialized hardware solution that can readily migrate to more advanced VLSI process. Sequence database searching {{is among the most}} important and challenging tasks in bioinformatics. The ultimate choice of sequence search algorithm is that of Smith-Waternan. However, because of the computationally demanding nature of this method, <b>heuristic</b> <b>programs</b> have been developed. Increased speed has been obtained at the cost of reduced sensitivity...|$|R
40|$|This {{paper is}} to show how {{mechanical}} theorem proving {{can be used to}} verify even complex and <b>heuristic</b> <b>programs</b> like mission critical expert systems. Our approach is mechanical in two ways: The basic idea of runtime result verification is to validate each program result (at runtime) rather than to verify the program itself beforehand. Filtering each result by a sufficient algorithmic correctness predicate guarantees partial correctness of the modified program, if successful checking is proved to imply correctness of the result. We use a mechanical theorem prover to prove the latter fact...|$|R
5000|$|He {{then went}} to Stanford University, where he was engaged in expert systems research.1 He {{received}} a Ph.D. in Computer Science from that institution in 1979, specifically {{in the area of}} Artificial Intelligence, [...] He has said that at Stanford, “I focused on Artificial Intelligence, but again combined different areas by developing a computer program to teach medical students how to diagnose a patient (combining computer science, education, psychology, and medicine).” His dissertation project, he has said, “was the first attempt to use an expert system for instruction.” He describes himself as having been “a member of the 'Mycin Gang' in the <b>Heuristic</b> <b>Programming</b> Project, which became the Knowledge Systems Laboratory in the late 1970s. These projects were directed by Bruce G. Buchanan.” ...|$|E
5000|$|Together {{with their}} students, Abelson and Sussman are {{combining}} techniques from numerical computation, symbolic algebra, and <b>heuristic</b> <b>programming</b> to develop programs {{that not only}} perform massive numerical computations, but that also interpret these computations and [...] "discuss" [...] the results in qualitative terms. Programs such as these could {{form the basis for}} intelligent scientific instruments that monitor physical systems based upon high-level behavioral descriptions. More generally, they could lead to a new generation of computational tools that can autonomously explore complex physical systems, and which will play an important part in the future practice of science and engineering. At the same time, these programs incorporate computational formulations of scientific knowledge that can form the foundations of better ways to teach science and engineering.|$|E
5000|$|Expert {{systems were}} {{introduced}} by the Stanford <b>Heuristic</b> <b>Programming</b> Project led by Edward Feigenbaum, who is sometimes termed the [...] "father of expert systems"; other key early contributors were Jairus Lainibo, Bruce Buchanan, and Randall Davis. The Stanford researchers tried to identify domains where expertise was highly valued and complex, such as diagnosing infectious diseases (Mycin) and identifying unknown organic molecules (Dendral). Although that [...] "intelligent systems derive their power from the knowledge they possess {{rather than from the}} specific formalisms and inference schemes they use" [...] - as Feigenbaum said - seems in retrospect a rather straightforward insight, it was a significant step forward then, since until then, research had been focused on attempts to develop very general-purpose problem solvers, such as those described by Allen Newell and Herb Simon. Expert systems became some of the first truly successful forms of artificial intelligence (AI) software.|$|E
40|$|The general {{conclusion}} of our {{examination of the}} work of the Messrs. Kuehn and Hamburger [Kuehn, A. A., M. J. Hamburger. 1963. A <b>heuristic</b> <b>program</b> for locating warehouses. Management Sci. 9 (4) 643 - 666. ] is that they have made available an important tool {{for the study of the}} warehouse location problem. At present it appears to have significant limitations, but it is likely that further work can make it more useful. Ultimately some combination of these methods as a first approximation, and then the use of simulation techniques may provide the answer. ...|$|R
5000|$|<b>Heuristics</b> <b>programming</b> {{was a major}} {{approach}} and a giant step forward in artificial intelligence, as it allowed scientists to finally automate certain traits of human intelligence. It became prominent among scientists in the late 1940s through George Polya’s book, How to Solve It: A New Aspect of Mathematical Method. [...] As Herbert A. Simon said in The Sciences of the Artificial, [...] "if you take a heuristic conclusion as certain, you may be fooled and disappointed; but if you neglect heuristic conclusions altogether you will make no progress at all." ...|$|R
40|$|The minimum {{spillage}} sequencing problem, which {{arises in}} real-time satellite signal data processing, requires {{a set of}} numbers to be arranged so as to minimize the "overflow" of the partial sums above an upper bound. We subject several heuristics to worst-case analysis, average-case analysis, and computational testing. The results demonstrate that the problem, though NP-hard, can be handled effectively. One {{of the highlights of}} the analysis is a tight upper bound on the fraction of overflow when the problem is solved to optimality, together with an O(n log n) "safe" heuristic which never exceeds this bound. integer algorithms, <b>heuristics,</b> <b>programming...</b>|$|R
50|$|After {{receiving}} an AB in applied mathematics magna cum laude from Harvard College in 1970, {{he received an}} M.D. (1976) and Ph.D. in Medical Information Systems (1975) from Stanford University, with a dissertation on the MYCIN system, for which he also won the 1976 Grace Murray Hopper Award for outstanding computer scientists {{under the age of}} 30. He completed internal medicine house-staff training from 1976-1979 at Massachusetts General Hospital and Stanford Hospital. In 1979 he joined the Stanford faculty in internal medicine and computer science, where he directed the Stanford University Medical EXpertimental computer resource (SUMEX) and subsequently the Center for Advanced Medical Informatics at Stanford (CAMIS), continuing his work on expert systems, including ONCOCIN (an oncology decision support program), T-HELPER, and other projects in the Stanford <b>Heuristic</b> <b>Programming</b> Project. He also simultaneously served as chief of general internal medicine and associate chair of medicine for primary care, and was principal investigator of the InterMed Collaboratory, which developed the science of computable guidelines for medical decision support.|$|E
5000|$|Hans-Joachim Bremermann, a {{professor}} of mathematics and biophysics at the University of California at Berkeley, further argued in a 1965 paper that the [...] "speed, memory, and processing capacity of any possible future computer equipment are limited by certain physical barriers: the light barrier, the quantum barrier, and the thermodynamical barrier. These limitations imply, for example, that no computer, however constructed, {{will ever be able}} to examine the entire tree of possible move sequences of the game of chess." [...] Nonetheless, Bremermann did not foreclose the possibility that a computer would someday be able to solve chess. He wrote, [...] "In order to have a computer play a perfect or nearly perfect game chess it will be necessary either to analyze the game completely ... or to analyze the game in an approximate way and combine this with a limited amount of tree searching. ... A theoretical understanding of such <b>heuristic</b> <b>programming,</b> however, is still very much wanting." ...|$|E
40|$|Intelligent problem-solving, {{whether by}} man or by machine, implies {{selective}} {{rather than just}} rapid behavior. Humans achieve this selectivity through heuristics [...] principles that, on the average, contribute to reduction of search in problem-solving. <b>Heuristic</b> <b>programming</b> is the construction of computer problem-solving programs whose behavior is similarly organized. This paper surveys the present and potential use of <b>heuristic</b> <b>programming</b> in management science. ...|$|E
40|$|This paper {{presents}} a hybrid genetic algorithm/mathematical <b>programming</b> <b>heuristic</b> for the n-job, m-machine flowshop problems with lot streaming. The number of sublots for each {{job and the}} size of sublots are directly addressed by the heuristic and setups may be sequence-dependent. A new aspect of the problem, the interleaving of sublots from different jobs in the processing sequence, is developed and addressed. Computational results from 12 randomly generated test sets of 24 problems each are presented. Flow-shop <b>Heuristics</b> Mathematical <b>programming</b> Search procedure Sequencing...|$|R
40|$|The paper {{describes}} a very apparent application of heuristic problem solving to accounts receivable management, namely in {{the location of}} lock-boxes. Lock-boxes are post office boxes selected in a company's distribution area {{in order to minimize}} the time necessary for the company to collect and to have available the funds remitted by its customers in payment of their obligations. The paper starts with a statement of and {{solution to the problem of}} measuring a given set of locations. Next the difficulties with the formulation are pointed out and a <b>heuristic</b> <b>program</b> to reach a satisfactory solution is described. The program is written in FORTRAN IV and is currently being tested. ...|$|R
40|$|The main {{objective}} {{of this paper is}} presentation of complete details on two procedures for solving transshipment plant location problems: procedures called 2 ̆ 2 Simple Version of 0 RA(1, t) 2 ̆ 2 and 2 ̆ 2 Simple Version of 0 RA(2, t) 2 ̆ 2 in Ladd and Lifferth [61. The second of these two procedures is a 2 ̆ 2 heuristic 2 ̆ 2 procedure or a 2 ̆ 2 <b>heuristic</b> <b>program.</b> 2 ̆ 2 A number of heuristic procedures have already appeared in the literature for solving plant location problems: in papers by King and Logan Chern and Polopolus p 32 ̆ 2 |, Warrack and Fletcher [12] and Candler^ Snyder and Faught [2]...|$|R
40|$|<b>Heuristic</b> <b>programming</b> was {{the first}} area in which AI methods were tested. The {{favourite}} case-studies were fairly simple toy-problems, such as cryptarithmetic, games, such as checker or chess, and formal problems, such as logic or geometry theorem-proving. These problems are well-defined, roughly speaking, at least in comparison to real-life problems, and as such have {{played the role of}} Drosophila in early AI. In this paper I will investigate the origins of <b>heuristic</b> <b>programming</b> and the shift to more knowledge-based and real-life problem solving...|$|E
40|$|Traditionally, fed-batch {{biochemical}} process optimization and control uses complicated off-line optimizers, with no on-line model adaptation or reoptimization. This study demonstrates {{the applicability of}} a class of adaptive critic designs for on-line reoptimization and control of an aerobic fed-batch fermentor. Specifically, the performance of an entire class of adaptive critic designs, viz., heuristic dynamic programming (HDP), dual <b>heuristic</b> <b>programming</b> (DHP) and generalized dual <b>heuristic</b> <b>programming</b> (GDHP), was demonstrated to be superior {{to that of a}} heuristic random optimizer (HRO), on optimization of a fed-batch fermentor operation producing monoclonal antibodies...|$|E
40|$|COGENT /COmpiler and GENeralized Translator/ {{programming}} {{system is a}} compiler whose input language enables a description of symbolic and linguistic manipulation algorithms. Primarily {{for use as a}} compiler-compiler, it is also applicable to algebraic manipulation, mechanical theorem proving, and <b>heuristic</b> <b>programming...</b>|$|E
40|$|SIN and SOLDIER are <b>heuristic</b> <b>programs</b> in LISP which solve {{symbolic}} integration problems. SIN (Symbolic INtegrator) solves indefinite integration {{problems at}} the difficulty approaching those in the larger integral tables. SIN contains several more methods than {{are used in the}} previous symbolic integration program SAINT, and solves most of the problems attempted by SAINT in less than one second. SOLDIER (SOLution of Ordinary Differential Equations Routine) solves first order, first degree ordinary differential equations at the level of a good college sophomore and at an average of about five seconds per problem attempted. The differences in philosophy and operation between SAINT and SIN are described, and suggestions for extending the work presented are made...|$|R
5000|$|One {{prominent}} {{example of}} an assessment plan {{can be seen in}} the Virginia Commonwealth Assessment Plan. In discussing the VCAP, Isabelle Thompson lists six general <b>heuristics</b> of <b>program</b> assessment that fit into this context. According to her, program assessment and improvement should be: ...|$|R
30|$|Nguyen et al. [97] {{developed}} a new technique called automatic programming via iterated local search (APRILS) to design dispatching rules for dynamic job shop scheduling. APRILS used tree-based representation similar to GP but it employed iterated local search {{to search for the}} best rule instead of population-based search in most studies. In the proposed algorithm, the neighbour heuristics are created by applying subtree mutation (but only small random subtree is generated). To help the algorithm escape from the local optimum, subtree mutation and subtree extraction operators are used. Given a fixed number of fitness evaluations, the experimental results showed that APRILS is significantly better than simple GP with the tree-based representation in terms of performance of evolved <b>heuristics,</b> <b>program</b> lengths, and the running times.|$|R
