33|213|Public
5000|$|Windows Presentation Foundation (WPF), {{formerly}} code-named Avalon: A new user <b>interface</b> <b>subsystem</b> and API {{based on}} XAML markup language, which uses 3D computer graphics hardware and Direct3D technologies ...|$|E
5000|$|Windows Presentation Foundation is a user <b>interface</b> <b>subsystem</b> and {{framework}} based vector graphics, {{which makes}} use of 3D computer graphics hardware and Direct3D technologies. It provides the foundation for building applications and blending together application UI, documents, and media content. It is the successor to Windows Forms.|$|E
50|$|The A5X {{features}} a dual-core ARM Cortex-A9 CPU at 1 GHz and a quad-core PowerVR SGX543MP4 GPU clocked at 250 MHz. Apple doubled {{the size of}} the A5X's memory interface in comparison to the A5, including a memory <b>interface</b> <b>subsystem</b> with four 32-bit wide LP-DDR2 memory controllers. This was done to provide sufficient bandwidth for the very high pixel count on the third generation iPad's Retina Display.|$|E
5000|$|SIF - Serial <b>Interface</b> or <b>Subsystem</b> <b>Interface</b> which {{consists}} of 3 DMA channels: ...|$|R
40|$|Detailed {{review of}} {{component}} failure histories, qualification adequacy, manufacturing flow, checkout requirements and flow, {{ground support equipment}} <b>interfaces,</b> <b>subsystem</b> <b>interface</b> verification, protective devices, and component design did not reveal major weaknesses in the command service module (CSM) reaction control system (RCS). No changes to the CSM RCS were recommended. The assessment reaffirmed {{the adequacy of the}} CSM RCS for future Apollo missions...|$|R
5000|$|Console <b>Subsystem</b> <b>Interface</b> - {{standard}} specifies {{the basic}} messaging to <b>interface</b> a console <b>subsystem</b> to a P25 RF Subsystem ...|$|R
40|$|Analyses of ERTS- 1 {{performance}} during the ninth {{quarter of its}} operation are presented. Topics discussed include orbital parameters, power subsystem, attitude control subsystem, command/clock subsystem, telemetry subsystem, orbit adjust subsystem, magnetic moment compensating assembly, unified S band/premodulation processor, electrical <b>interface</b> <b>subsystem,</b> thermal subsystem, narrowband tape recorders, wideband telemetry subsystem, attitude measurement sensor, wideband video tape recorders, return beam vidicon subsystem, multispectral scanner subsystem, and data collection system...|$|E
40|$|The National Space Science Data Center (NSSDC) has {{initiated}} an Intelligent Data Management (IDM) research effort which has {{as one of}} its components, the development of an Intelligent User Interface (IUI). The intent of the IUI effort is to develop a friendly and intelligent user interface service that is based on expert systems and natural language processing technologies. This paper presents the design concepts, development approach and evaluation of performance of a prototype Intelligent User <b>Interface</b> <b>Subsystem</b> (IUIS) supporting an operational database...|$|E
40|$|A {{description}} of the work accomplished with the Landsat- 1 and Landsat- 2 satellites during the period 23 Jan. - 23 Apr. 1975 was presented. The following information was given for each satellite: operational summary, orbital parameters, power subsystem, attitude control subsystem, command/clock subsystem, telemetry subsystem, orbit adjust subsystem, magnetic moment compensating assembly, unified S-band/premodulation processor, electrical <b>interface</b> <b>subsystem,</b> thermal subsystem, narrowband tape recorders, wideband telemetry subsystem, attitude measurement sensor, wideband video tape recorders, return beam vidicon, multispectral scanner subsystem, and data collection subsystem...|$|E
5000|$|Inter RF <b>Subsystem</b> <b>Interface</b> (ISSI) - {{standard}} specifies the <b>interface</b> between RF <b>subsystems</b> {{which will}} allow them to be connected into wide area networks ...|$|R
50|$|ICDs {{are often}} used where {{subsystems}} are developed asynchronously in time, since they provide a structured way to communicate information about <b>subsystems</b> <b>interfaces</b> between different <b>subsystem</b> design teams.|$|R
40|$|This paper {{presents}} a low–latency FIFO design that <b>interfaces</b> <b>subsystems</b> on a chip working at different speeds. First, a single-clock domain design is introduced, {{which is then}} used {{as a basis for}} a mixed–clock version. Finally, the design is adapted to work between subsystems with very long interconnection delays. The designs can be made arbitrarily robust with regard to metastability and clock frequencies. ...|$|R
40|$|Alternate {{versions}} of the actuator interface unit are presented. One alternate is a dual-failure immune configuration which feeds a look-and-switch dual-failure immune hydraulic system. The other alternate is a single-failure immune configuration which feeds a majority voting hydraulic system. Both systems communicate with the data bus through data terminals dedicated to each user subsystem. Both operational control data and configuration control information are processed {{in and out of}} the subsystem via the data terminal which yields the actuator <b>interface</b> <b>subsystem,</b> self-managing within its failure immunity capability...|$|E
40|$|This work {{provides}} {{overview of}} creating {{of a simple}} driver for the BIOS flash memory by accessing the physical computer memory. Although, the BIOS {{is one of a}} system's core components, there is no standardized update mechanism approach. Purpose of thesis is to create module driver by taking advantage of existing <b>interface</b> <b>subsystem</b> MTD, to suggest and implement driver for one specific device to Linux kernel operating system. Also explains technique allowing write access to registers of the flash memory with utilization of configuration file...|$|E
40|$|The Spitzer Science Center (SSC) {{provides}} {{a set of}} user tools to support search and retrieval of Spitzer Archive (SA) data via the Internet. This presentation describes the software architecture and design principles that support the Archive <b>Interface</b> <b>subsystem</b> of the SA (Handley 2007). The Archive Interface {{is an extension of}} the core components of the Uplink subsystem and {{provides a}} set web services to allow open access to the SA data set. Web services technology provides a basis for searching the archive and retrieving data products. The archive interface provides three modes of access: a rich client, a Web browser, and scripts (via Web services). The rich client allows the user to perform complex queries and submit requests for data that are asynchronously down-loaded to the local workstation. Asynchronous down-load is a critical feature given the large volume of a typical data set (on the order of 40 GB). For basic queries and retrieval of data the Web browser interface is provided. For advanced users, scripting languages with web services capabilities (i. e. Perl) can used to query and down-load data from the SA. The archive <b>interface</b> <b>subsystem</b> is the primary means for searching and retrieving data from the SA and is {{critical to the success of}} the Spitzer Space Telescope...|$|E
40|$|Cost {{modeling}} {{techniques and}} factors which either add to or subtract from these estimates are examined. The {{most important factors}} for increasing costs are <b>interfacing</b> <b>subsystems,</b> subsystem design and software maturity. Cost decrease depends on hardware, software, and support equipment availability. A cost modeling analysis for reentry shield and aerodynamic decelerator subsystems of a reentry vehicle is presented. Integration problems for the subsystems are also discussed...|$|R
40|$|System {{architectures}} which incorporate fail operative {{flight guidance}} functions within a total integrated avionics complex are described. It is {{shown that the}} mixture of flight critical and nonflight critical functions within a common computer complex is an efficient solution to the integration of navigation, guidance, flight control, display, and flight management. <b>Interfacing</b> <b>subsystems</b> retain autonomous capability to avoid vulnerability to total avionics system shutdown {{as a result of}} only a few failures...|$|R
5000|$|<b>Subsystem</b> <b>Interface</b> 0 (SIF0) and <b>Subsystem</b> <b>Interface</b> 1 (SIF1), {{used for}} {{communication}} between the EE main CPU and IOP co-processor. These are serial DMA channels where both CPUs can send commands and establish communication through an RPC protocol.|$|R
40|$|To {{maintain}} a trading {{business in the}} strict competition a management supported by appropriate business strategy is required. Utilization of an information system that supports decision-making is needed to improve performance as well as support for all lines of business. Therefore, a research is conducted that specifically aims at the development of decision support systems for small and medium enterprises (SMEs). The basic method for building the system is the Herbert Simon's four-stage decision-making approach: intelligence, design, choice and implementation. Following is the building of data management subsystem, management subsystem model and user <b>interface</b> <b>subsystem.</b> The development of this system results in a decision support system that can improve the performance of all business lines complemented with support information for decision making.  </p...|$|E
40|$|This paper {{describes}} the approach {{taken by the}} ION-F student team in designing a common Command and Data Handling (C 2 ̆ 6 DH) subsystem for three different nanosatellites. It outlines {{the requirements of the}} satellites and reasons behind the decision to develop a custom board. The design is based upon industrial-grade components and centered on a Hitachi SuperH RISC Processor. The C 2 ̆ 6 DH subsystem contains a 16 MB telemetry buffer, a digital and analog <b>interface</b> <b>subsystem,</b> and a DMA-oriented CMOS camera framebuffer. Students are fabricating these boards with the assistance of Space Dynamics Laboratory at Utah State University. This design will be flown by three different satellites, which are all part of a single formation-flying mission...|$|E
30|$|CAN segments, {{consisting}} of a CAN bus {{with at least one}} node are connected to the router via a CAN port. The router is implemented as a multi-processor-system-on-a-chip (MPSoC), where every CAN port is served by its own CAN <b>interface</b> <b>subsystem</b> (CIS). Each CIS consists of a CPU, local memory, and a CAN controller. The CPU executes software used for message processing. Every CIS contains a routing configuration that allows the router to forward messages from a source CAN segment to one or more destination segment(s). We use a time-triggered network-on-chip (TTNoC) [15] for the message transport between CISes. All processing in the router is time-triggered. Additionally, the router possesses a management port, served by the the management unit (MU), which is used for diagnosis and configuration (e.g., update of the routing configuration).|$|E
40|$|Probe design {{considerations}} for a 1981 Pioneer Jupiter Orbiter/Probe mission are summarized. Extensive engineering analysis, design, and proof-of-concept testing of a reference probe system {{developed during the}} past three years are reviewed. Mission compatibility, science measurements, environmental characteristics, spacecraft <b>interfaces,</b> <b>subsystem</b> constraints, technology development, and programmatic factors are reviewed and discussed. It is demonstrated that for a low-entry-angle, daylight mission to Jupiter a 150 kg semiautonomous entry probe system utilizing state of the art technology is compatible with all the requirements...|$|R
40|$|The TMT Software System {{consists}} of software components that interact {{with one another}} through a software infrastructure called TMT Common Software (CSW). CSW {{consists of}} software services and library code that is used by developers to create the subsystems and components that participate in the software system. CSW also defines the types of components that can be constructed and their roles. The use of common component types and shared middleware services allows standardized software interfaces for the components. A software system called the TMT Interface Database System was constructed to support the documentation of the interfaces for components based on CSW. The programmer describes a subsystem and each of its components using JSON-style text files. A command interface file describes each command a component can receive and any commands a component sends. The event interface files describe status, alarms, and events a component publishes and status and events subscribed to by a component. A web application was created to provide a user interface for the required features. Files are ingested into the software system’s database. The user <b>interface</b> allows browsing <b>subsystem</b> <b>interfaces,</b> publishing versions of <b>subsystem</b> <b>interfaces,</b> and constructing and publishing interface control documents that consist of the intersection of two <b>subsystem</b> <b>interfaces.</b> All published <b>subsystem</b> <b>interfaces</b> and interface control documents are versioned for configuration control and follow the standard TMT change control processes. <b>Subsystem</b> <b>interfaces</b> and interface control documents can be visualized in the browser or exported as PDF files...|$|R
40|$|In this Proof of Concept {{analysis}} on SSFF Health Management the following area was described: the Gas Distribution Subsystem (GDS) was studied and evaluated utilizing the PDR Configuration and {{with respect to}} the design features encompassing Health Management (HM) aspects outlined in the Generic Handbook. From the results of this study, it was found that there is a definite need for coordinating measurements within and between the subsystems that will ensure that Functional Failures are properly revealed and substantiated as valid by other measurements, even those from other <b>interfacing</b> <b>subsystems...</b>|$|R
40|$|This project {{focuses on}} the testing of the {{telecommunications}} <b>interface</b> <b>subsystem</b> of the Multi-Mission System Architecture Platform to ensure proper functionality. The Multi-Mission System Architecture Platform {{is a set of}} basic tools designed to be used in future spacecraft. The responsibilities of the telecommunications interface include communication between the spacecraft and ground teams as well as acting as the bus controller for the system. The tests completed include bit wise read tests to each register, testing of status bits, and verifying various bus controller activities. Testing is accomplished through the use of software-based simulations run on an electronic design of the system. The tests are written in Verilog Hardware Definition Language and they simulate specific states and conditions in telecommunication interfaces. Upon successful completion, the output is examined to verify that the system responded appropriately...|$|E
40|$|In this paper, an Information Appliance Control Platform (IACP) is presented. In this platform, users {{monitor and}} control {{appliances}} through a network-connected mobile device at home, {{even on the}} Internet. This platform is effectively built by the technologies of agent, embedded system, networking, database and serial communication. Three subsystems developed in this platform are User <b>Interface</b> <b>Subsystem</b> (UIS), Gateway subsystem (GS) and Information Appliance Network Subsystem (IANS). To efficiently set up an effective software process, a CMMI-style process management and a CVS (Concurrent Version System) are adopted to support the software process. Based on the flow of requirement analysis, specification definition, design, implementation, integration, validation, and verification, team members can transparently co-work in each stage. The results indicate that not only the control components can support a new digital living style, but also such a develop paradigm demonstrates a successful software process and improve the efficiency and effectiveness...|$|E
40|$|The {{application}} of analog signal to discrete interval converter (ASDTIC), a hybrid micromodule, two loop control subsystem, to a switching, stepdown dc to dc converter is described. The power circuitry, interface and ASDTIC subsystems {{used in this}} switching regulator were developed to exhibit the improved regulation, transient performance, regulator stability and freedom {{from the effects of}} variations in parts characteristics due to environmental changes and aging. ASDTIC can be used with other types of power circuits that use duty-cycle control techniques by simple changes in the <b>interface</b> <b>subsystem.</b> The circuitry and performance characteristics of a + 10 V dc switching converter {{as well as that of}} the ASDTIC micromodule are described. Realization of the ASDTIC hybrid micromodule has been accomplished with a hermetically sealed, beam-lead, bonded/deposited nichrome thin film resistors, discrete capacitors and integrated circuits on dilithic, glazed alumina substrates using 22 feed through terminals in an integrated package...|$|E
40|$|The InfraRed Imaging Spectrograph (IRIS) is a {{first light}} client science {{instrument}} for the TMT observatory that operates as a client of the NFIRAOS facility multi-conjugate adaptive optics system. This paper reports on the concept study and baseline concept design of the On-Instrument WaveFront Sensors (OIWFS) and NFIRAOS <b>interface</b> <b>subsystems</b> of the IRIS science instrument, a collaborative effort by NRC-HIA, Caltech, and TMT AO and Instrument teams. This includes work on system engineering, structural and thermal design, sky coverage modeling, patrol geometry, probe optics and mechanics design, camera design, and controls design. Comment: 17 pages, 12 figures, SPIE 7735 - 28...|$|R
5000|$|Some {{subsystems}} {{are often}} called flash file systems, {{while they are}} more precisely block drivers performing different translations, and they actually {{do not have a}} file system <b>interface.</b> Such <b>subsystems</b> include the following: ...|$|R
5000|$|<b>Subsystem</b> <b>Interface</b> 2 (SIF2), {{used for}} {{backwards}} compatibility with PS1 games and debugging.|$|R
40|$|A {{real-time}} {{computer control system}} is developed and used for the remote operation of the Pohang Light Source (PLS) 2 -GeV storage ring. It consists of three layers of computer systems; console computer for operator <b>interface,</b> <b>subsystem</b> control computer (SCC) for front-end data processing, machine interface unit (MIU) for low-level data acquisition. The console computer is Sun Microsystem's SPARCstation with UNIX. It uses X-Window/Motif for the GUI (graphical user interface) tool. The SCC acts as a front-end data processing between the console computer and the MIU. There are 24 MIUs placed in the storage ring building. The MIU is directly connected to individual machine components to do low-level data acquisition. The SCC and MIU are based on VMEbus standard and use Microware's OS- 9 real-time operating system. Console computers and SCCs are connected through Ethernet (TCP/IP). SCCs and MIUs are connected through MILSTD - 1553 B fieldbus. 1 Introduction The Pohang Light Source (PLS) is a [...] ...|$|E
40|$|AbstractThis paper {{considers}} the multiplication of matrix A = (aik) n × n by vector b = (bk) n × 1 on the bidirectional linear systolic array (BLSA) comprised of p ≤ [n 2] processing elements. To accomplish this matrix, A is partitioned into quasi-diagonal blocks. Each block contains p quasidiagonals. To avoid zero element insertion between successive iterations during the computation {{of the resulting}} vector ovrarr|c, we perform index transformation in the block matrices and vector c. The index transformation {{can be described as}} perfect shuffle followed by the shifting. Besides, we propose an efficient hardware interface, called memory <b>interface</b> <b>subsystem</b> (MIS), located between the host and BLSA, which optimize memory access by elimination of extraneous main-memory operations. Then we evaluate the speedup and efficiency of the proposed matrix-vector multiplication algorithm. To estimate benefits obtained by introducing MIS, we compare host occupation with data transfer during matrix-vector multiplication on the BLSA without MIS and when it is involved...|$|E
40|$|Approved {{for public}} release; {{distribution}} is unlimitedThe Computer-Aided Prototyping System (CAPS) is an integrated environment, comprised {{of an integrated}} set of software tools, aimed at rapidly prototyping hard realtime embedded systems. The problem with the current CAPS software development environment {{is the absence of}} a CAPS User's Manual (How to Use [...] .), which provides CAPS users with step-by-step guidelines on how to use the CAPS tools. One solution to this problem was solved by designing, developing, and creating online documentation for the CAPS User manual and Graphic Editor Reference Manuals for CAPS Release 1. 1. Such an approach provides accessible visual, graphical, and textual step by step illustrations for CAPS users when interfacing and manipulating, commands and options within the CAPS user <b>interface</b> <b>subsystem</b> and Graphic Editor tool. In addition, this approach includes a glossary which helps CAPS users to understand the meaning of the difficult or specialized terms used in this environment[URL] United States Nav...|$|E
5000|$|Mediator pattern: Provides {{a unified}} {{interface}} {{to a set}} of <b>interfaces</b> in a <b>subsystem</b> ...|$|R
50|$|Contiki {{supports}} per-process optional preemptive multithreading, inter-process communication using {{message passing}} through events, {{as well as}} an optional graphical user <b>interface</b> (GUI) <b>subsystem</b> with either direct graphic support for locally connected terminals or networked virtual display with Virtual Network Computing (VNC) or over Telnet.|$|R
40|$|Abstract—To reduce {{complexity}} in software systems {{it is essential}} to minimize the functional dependencies in them. Functional dependency can be caused by the internal logic (model) of the system as well as the user interface. It is then vital to locate the source of the dependency, {{so that it can be}} removed. Our method “Design Equations for Systems Analysis”, or DESA, offers an opportunity to accomplish this. It allows separate examination of the model and the user interface when evaluating functional dependencies. This study investigates this potential of DESA in identifying coupled relationships. We used an object-oriented game application as a case study. DESA was found to effectively reduce the complexity of object-oriented software systems. Index Terms—DESA, functional dependency, model and user <b>interface</b> <b>subsystems,</b> object-oriented design, software system complexity. I...|$|R
