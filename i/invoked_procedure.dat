6|147|Public
50|$|The normal {{invocation}} invokes {{a procedure}} {{in the normal}} way any language invokes a routine, by suspending the calling routine until the <b>invoked</b> <b>procedure</b> returns.|$|E
50|$|The last {{invocation}} type is run. This runs {{a procedure}} {{as an independent}} task which can continue on after the originating process terminates. For this reason, the child process cannot access variables in the parent's environment, and all parameters passed to the <b>invoked</b> <b>procedure</b> must be call-by-value.|$|E
50|$|External binary subroutines and {{functions}} are now loaded into memory {{by a single}} INVOKE disk-command that loads separately-assembled code modules, listing {{the names of all}} files to be used. A PERFORM statement is then used to call an <b>INVOKEd</b> <b>procedure</b> by name, with an argument-list. INVOKEd functions would be referenced in expressions by EXFN. (floating-point) or EXFN%. (integer), with the function name appended, plus the argument-list for the function.|$|E
40|$|This paper formulates {{the common}} object {{language}} framework for integrating declarative solutions into distributed and heterogeneous environments. It centers on using a common object-level representation of simply-typed lambda terms as a communication protocol. It {{allows for the}} interoperation between distributed processes {{in the form of}} remote-procedure calls, including those that require the transaction of higher-order terms between appropriate languages. It also allows for declarative programs to <b>invoke</b> <b>procedures</b> of conventional languages such as C...|$|R
50|$|It is {{designed}} for automation of various functions in the enterprise including traditional IBM mainframe OS/MVS (z/OS today) JCL, batch files and shell scripts, as well as routine functions such as <b>invoking</b> database stored <b>procedures,</b> <b>invoking</b> and using Web services and handling file transfers {{inside and outside the}} organization.|$|R
40|$|Preparation and {{properties}} {{of a novel}} photocatalytic system containing magnetic cores coated with subsequently applied silica and titania shells are discussed. The underlying idea is to impart magnetic properties to the semiconductor particles that permits to control the rheological {{properties of}} the photocatalyst dispersion and makes possible its separation from treated solution without <b>invoking</b> <b>procedures</b> of filtration or centrifugation. Preparation route yielding photoactive titania coating and silica interlayer, which prevents the undesirable doping of catalyst and parasitic charge exchange between titania shell and magnetic core, is described in detail...|$|R
40|$|A {{commonly}} <b>invoked</b> <b>procedure</b> for calculating {{steady state}} nucleation rates employs a chemical kinetics argument {{in which the}} rate constants {{are assumed to be}} the same as in a so-called “constrained” equilibrium state of the system of interest. Such a procedure implicitly ignores the possibility that in some nonequilibrium nucleation processes spatial correlations among the reactants can cause the relevant rate constants to be different from their equilibrium values. Void nucleation {{is an example of a}} situation in which this phenomenon occurs. We show how to modify the usual theory to account for the local depletion of vacancies in the vicinity of a forming void. A numerical example illustrates the conclusion that the local depletion effect produces nucleation rates which can be very much smaller than those predicted by models in which there is complete spatial uniformity...|$|E
40|$|Abstract General-purpose {{operating}} {{systems such as}} Linux are in-creasingly replacing custom embedded counterparts {{on a wide variety}} of devices. Despite their convenience and flex-ibility, however, such {{operating systems}} may be overly general and thus incur unnecessary performance overheads inthese contexts. This paper describes a new approach to mitigating these overheads by automatically specializing the OSkernel for particular execution environments. We use value profiling to identify targets for specialization such as fre-quent system call parameters. A novel profiling technique is used to identify frequently <b>invoked</b> <b>procedure</b> call sequenceswithin the kernel. This information is used to sidestep the problems arising from indirect function calls when carryingout interprocedural compiler optimization. It drives a variety of compiler optimizations such as function inlining and codespecialization that reduce the execution overheads along frequent paths. A prototype implementation that uses the PLTObinary rewriting system to specialize the Linux kernel is described. While overall performance data are mixed, the im-provements we see argue for the potential of this approach...|$|E
40|$|General-purpose {{operating}} {{systems such as}} Linux are increasingly replacing custom embedded counterparts {{on a wide variety}} of devices. Despite their convenience and flexibility, however, such {{operating systems}} may be overly general and thus incur unnecessary performance overheads in these contexts. This paper describes a new approach to mitigating these overheads by automatically specializing the OS kernel for particular execution environments. We use value profiling to identify targets for specialization such as frequent system call parameters. A novel profiling technique is used to identify frequently <b>invoked</b> <b>procedure</b> call sequences within the kernel. This information is used to sidestep the problems arising from indirect function calls when carrying out interprocedural compiler optimization. It drives a variety of compiler optimizations such as function inlining and code specialization that reduce the execution overheads along frequent paths. A prototype implementation that uses the PLTO binary rewriting system to specialize the Linux kernel is described. While overall performance data are mixed, the improvements we see argue for the potential of this approach. 1...|$|E
30|$|EncodeForPolicy (_i[y]) On input the y-th {{attribute}} conjunction in an {{authorization policy}} _i {{of the data}} owner i, it outputs some randomized code BF^P_i[y] and BF^A_i-m[y] by <b>invoking</b> Encoding <b>Procedure.</b>|$|R
50|$|The call {{mechanism}} <b>invokes</b> a <b>procedure</b> as a coroutine. Coroutines have partner tasks, where {{control is}} explicitly passed between the tasks {{by means of}} a CONTINUE instruction. These are synchronous processes.|$|R
50|$|Recursion is {{the process}} a {{procedure}} goes through {{when one of the}} steps of the <b>procedure</b> involves <b>invoking</b> the <b>procedure</b> itself. A procedure that goes through recursion is said to be 'recursive'.|$|R
30|$|MatchinginPEP(BF^A_j[x], BF^P_i[y]) On input {{attribute}} codes BF^A_j[x], BF^A_i-m[y] and BF^P_i[y], it outputs whether two {{codes are}} matched by <b>invoking</b> Matching <b>Procedure.</b> If the algorithm outputs a negative result, the access {{request of the}} customer is rejected.|$|R
40|$|Web Services ” are a {{standard}} way of <b>invoking</b> <b>procedures</b> across the Internet. They allow programs running on any client to easily interface with and execute scripts on a server. For example, a script could be written to automatically buy {{a book from}} a bookseller’s website without anyone having to visit the site themselves. Though the possibilities are very exciting, the web services vision is being held back simply because not enough publicly-available web services have been written. This project was created to investigate the possibility of expanding the range of available services by converting ordinary human-orientated HTML forms that exist on many websites into equivalent web servic...|$|R
50|$|Following the game, Wales <b>invoked</b> citing <b>procedures</b> against Wiese for {{the punch}} against Derwyn Jones. As {{a result of}} {{receiving}} a red card, Garin Jenkins also faced disciplinary proceedings. Both Wiese and Jenkins were banned from playing rugby for 30 days for their actions.|$|R
50|$|From First Fortran (1957) onwards, {{separate}} {{compilation of}} portions {{of a program}} has been possible, supporting the creation of libraries of procedures and functions. A procedure in the source file being compiled that invokes a function from such an outside collection must know the type of result returned by the unknown function, if only to generate code that looks {{in the right place}} to find the result. Originally, when there were only integers and floating-point variables, the choice could be left to the rules for implicit declaration, but with the proliferation of sizes and also types the <b>invoking</b> <b>procedure</b> will need a type declaration for the function. This is not special, having the same form as for a variable declared inside the procedure.|$|R
5000|$|In addition, modules may {{optional}} contain static startup and shutdown <b>procedures</b> <b>invoked</b> during program startup and shutdown {{that match}} the signatures: ...|$|R
50|$|While {{the usual}} {{formulation}} of the Pipek-Mezey method <b>invokes</b> an iterative <b>procedure</b> to localize the orbitals, a non-iterative method has also been recently suggested.|$|R
40|$|AbstractThe {{definition}} of data refinement between datatypes {{is expressed in}} terms of all programs that <b>invoke</b> <b>procedures</b> of the types. As a result it is laborious to check. Simulations provide sound conditions that, being ‘static’, facilitate checking; but then their soundness is important. In this paper we extract a technique from the heart of the theory and show it to be equivalent to data refinement; it {{plays a key role in}} establishing properties about simulations in any of the computational models. We survey the difficulties confronting the theory when the <b>procedures</b> and <b>invoking</b> programs may contain probabilistic choices, and show that then each of the two simulation conditions is alone not complete as a rule for data refinement, even if the datatypes are deterministic (in contrast to the standard case). The last part of the paper discusses work in progress...|$|R
30|$|Algorithm 1 {{details the}} outline of busy {{probability}} and average duration of a busy period sensed by station in network, and for computations of these quantities, it <b>invokes</b> <b>procedures</b> in Algorithms 2, 3 and 4. We now briefly elaborate the functionality of these Algorithms. Algorithm 2 computes activation rate and average busy duration sensed by a station due to the activity {{of a group of}} stations called regions around sensing station i. Initially n number of stations are placed in a rectangular area of width×length (w×l) in pairs of a transmitter and a receiver making sure that each receiver is in transmission range of its receptive transmitter and their coordinates are saved. The next step finds all the stations within transmission and carrier sense range of station i and also saves the type of station whether it is a transmitter or a receiver.|$|R
40|$|Abstract — Achieving high {{performance}} for out-of-core applications typically involves explicit {{management of the}} movement of data between the disk and the physical memory. We are developing a programming {{environment in which the}} different levels of the memory hierarchy are handled efficiently in a unified transparent framework. In this paper, we present our experiences with implementing efficient non-collective I/O (GPC-IO) as part of this framework. As a generalization of the Remote Procedure Call (RPC) that was used as a foundation for the Sun NFS system, we developed a global procedure call (GPC) to <b>invoke</b> <b>procedures</b> on a remote node to handle noncollective I/O. We consider alternative approaches that can be employed in implementing this functionality. The approaches are evaluated using a representative computation from quantum chemistry. The results demonstrate that GPC-IO achieves better absolute execution times, strongscaling, and weak-scaling than the alternatives considered. I...|$|R
40|$|Reactive {{integration}} {{based on}} event broadcast is {{an increasingly important}} technique for developing systems. However, {{the use of this}} technique has largely been confined to tool integration systems [...] in which tools exist as independent processes [...] and special-purpose languages [...] in which specialized forms of event broadcast are designed into the language from the start. This paper broadens the class of systems that can benefit from this approach by showing how to augment general-purpose programming languages with facilities for implicit invocation. We illustrate the approach {{in the context of the}} Ada language, and highlight the important design considerations that arise in extending such languages with facilities for reactive integration. 1 Introduction Systems have traditionally been constructed out of modules that interact with each other by explicitly <b>invoking</b> <b>procedures</b> provided in their interfaces. However, recently there has been considerable interest in an alternative inte [...] ...|$|R
3000|$|EncodeForAttributes(γ _j[x]) On input the x-th {{attribute}} conjunction in the attribute expression γ _j of {{the customer}} j, it outputs some randomized code BF^A_j[x] by <b>invoking</b> [...] Encoding <b>Procedure.</b>|$|R
40|$|Most {{nations have}} enacted {{statutes}} governing business liquidation and reorganization. These statutes {{are the primary}} focus when policymakers and scholars discuss ways to improve laws governing business failure. This focus is misplaced, at least for distressed small businesses in the United States. Evidence from a major credit bureau shows that over eighty percent of these businesses liquidate or reorganize without invoking the formal Bankruptcy Code. The businesses instead <b>invoke</b> <b>procedures</b> derived from the laws of contracts, secured lending, and trusts. These procedures can be cheaper and speedier than a formal bankruptcy filing, but they typically require unanimous consent of senior, secured lenders. This essay identifies {{the conditions under which}} a business owner is able to obtain lender consent. The empirical findings point to an important balance between a nation's formal insolvency statutes and alternative modes of liquidation and reorganization. This balance, the essay argues, should {{play a central role in}} any discussion of insolvency-law reform...|$|R
40|$|PADL is a {{hardware}} description language for specifying {{the behavior and}} structure of packet communication systems. In such systems, hardware units called modules communicate by sending and receiving packets. The behavior of such a system can be specified by providing the algorithm it executes and the data structures it manipulates. On the other hand, {{the structure of a}} system is specified by giving the components or of the system and their interconnection. These components can be further specified structurally or behaviorally. The language constructs of PADL fall inW two categories - those for behavior specification and those for structure specification. All these constructs which include the usual control constructs like conditionals and iterations, constructs for the packet oriented inter-module communication operations including a non-deterministic input operation, and facilities for data structuring, defining and <b>invoking</b> <b>procedures,</b> as well as for specifying, using and connecting modules, are described in this preliminary reference hnguage manual, Keywords: Hardware description language, packet communication systems...|$|R
40|$|This paper 1 {{deals with}} the {{properties}} of a tool called G 2 F (An Editor Generator for Two Dimensional Graphical Formulas). G 2 F enables to define two dimensional grammars graphically and to generate a corresponding syntax-directed editor. It facilitates syntactic correctness preserving operations on the abstract syntax trees of formulas and produces hardcopies of whole operation sequences on a laser-printer. Thus, G 2 F is a tool {{that can be used}} to create user interfaces for a variety of applications. It is well suited to support a clear and surveyable representation of complex expressions which occur in every formal framework and to <b>invoke</b> <b>procedures</b> of an application transforming its abstract syntax. 1. Introduction All systems dealing with calculi, mathematics, predicate logic or comparable formal languages have problems in building an adequate user interface within a reasonable amount of time. Most of those systems communicate with the user by the exchange of ugly one- [...] ...|$|R
5000|$|Thus {{a program}} that has the with Ada.Text_IO; {{directive}} can [...] "see" [...] the definitions there, {{and in order to}} <b>invoke</b> the New_Line <b>procedure</b> in Ada.Text_IO it can be referred to by name, ...|$|R
50|$|Following the {{withdrawal}} of its licence by Germany's Federal Office of Aviation on August 9, 2006 the company <b>invoked</b> an insolvency <b>procedure</b> with the Lübeck district court on August 16, 2006 and stopped flying.|$|R
40|$|This report {{introduces}} TRANSLUCENT PROCEDURES {{as a new}} {{mechanism for}} implementing behavioral abstractions. Like an ordinary procedure, a translucent <b>procedure</b> can be <b>invoked,</b> and thus provides an obvious way to capture a BEHAVIOR. Translucent procedures, like ordinary procedures, can be manipulated as first-class objects and combined using functional composition. But unlike ordinary procedures, translucent procedures have structure that can be examined in well-specified non-destructive ways, without <b>invoking</b> the <b>procedure...</b>|$|R
5|$|After <b>invoking</b> its appeals <b>procedure</b> and {{reviewing}} the situation, the IWF reversed their blacklisting {{of the page}} on 9 December 2008, and announced {{that they would not}} blacklist other copies of the image hosted outside the UK.|$|R
50|$|An {{important}} difference between remote procedure calls and local calls is that remote calls can fail because of unpredictable network problems. Also, callers generally {{must deal with}} such failures without knowing whether the remote <b>procedure</b> was actually <b>invoked.</b> Idempotent <b>procedures</b> (those that have no additional effects if called more than once) are easily handled, but enough difficulties remain that code to call remote procedures is often confined to carefully written low-level subsystems.|$|R
50|$|Entities {{and defined}} data types may be further {{constrained}} with WHERE rules. WHERE rules are {{also part of}} global rules. A WHERE rule is an expression, which must evaluate to TRUE, otherwise a population of an EXPRESS schema, is not valid. Like derived attributes these expression may invoke EXPRESS functions, which may further <b>invoke</b> EXPRESS <b>procedures.</b> The functions and procedures allow formulating complex statements with local variables, parameters and constants - very similar to a programming language.|$|R
40|$|I {{argue that}} the {{implementation}} of the Department of Education's "Values in Education " initiative would be problematic without also <b>invoking</b> <b>procedures</b> of deliberation. Unlike the identified "values " on their own i. e. equity, tolerance, multilingualism, openness, accountability, and honour, as announced by the Department of Education deliberative procedures offer the possibility to deepen a sense of citizenship in schools. My contention is that the "Values in Education " initiative has a better chance of cultivating citizenship in schools if enacted commensurate with the notion of deliberative democracy. What constitutes deliberative democracy? Theoretically defined, deliberative democracy refers to the notion that legitimate political decision making emanates from the public delibe ration of citizens. In other words, as a normative account of political decision making, deliberative democracy evokes ideals of rational legislation, participatory politics and civic self governance, that is, "it presents an ideal of political autonomy based on practical reasoning of citizens " (Bohman & Rehg, 1997 :ix). The upshot of such a theoretical grounding of democracy based on public deliberation presupposes that citizens or their representatives engage in reasoning together about th...|$|R
2500|$|The Francophone parties {{subsequently}} <b>invoked</b> a <b>procedure</b> {{known as}} the conflict of interest ( [...] , [...] ), a procedure whereby a regional parliament can indicate that it feels that {{the interests of the}} region are hurt by the decision of another political body in Belgium, in this case the Belgian Chamber Committee on the Interior. The Parliament of the French Community of Belgium approved the procedure on November 9, with three members of the National Front abstaining. This suspends a decision about Brussels-Halle-Vilvoorde for a period of 60 days.|$|R
3000|$|... (2) Selection on-the-fly. OGFC_stream <b>invokes</b> a <b>procedure</b> PSel (line  7) {{to select}} {{patterns}} and construct OGFCs on the fly. To achieve the optimality guarantee, it applies the stream-sieving strategy in stream data summarization [1]. In a nutshell, it estimates the optimal {{value of a}} monotonic submodular function F(· [...]) with multiple “sieve values,” initialized by the maximum coverage score of single patterns (Sect.  3), i.e., maxpcov= _P∈P(cov (P)) (lines  4 - 5), and eagerly constructs OGFCs with high marginal benefits that refines sieve values progressively.|$|R
40|$|This {{report will}} discuss the {{insanity}} defense as used in the federal courts. It will briefly trace {{the history of the}} evolution of that defense from its earliest formulation to the version used in the John Hinckley case, and will provide, in summary form, descriptive analysis of various pieces of Legislation to change federal law with regard to the substantive definition of the defense, the allocation of the burden of persuasion when the defense is <b>invoked,</b> and <b>procedures</b> following the successful use of the defense...|$|R
