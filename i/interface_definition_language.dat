181|2557|Public
5000|$|Franca IDL: the {{open-source}} Franca <b>interface</b> <b>definition</b> <b>language</b> ...|$|E
5000|$|... #Subtitle level 3: <b>Interface</b> <b>Definition</b> <b>Language</b> {{and type}} {{libraries}} ...|$|E
50|$|The ODL was {{merged into}} the Microsoft <b>Interface</b> <b>Definition</b> <b>Language.</b>|$|E
40|$|Motivation {{to write}} {{this article is based}} on Component Based Software Engineering concepts. Problem is in Component Based Software Engineering Interfaces defined in {{standard}} component technologies using such as <b>Interface</b> <b>Definition</b> <b>Languages</b> (IDLs). These IDLs are sufficient in describing functional properties but insufficient in describing non-functional properties such as quality attributes and not suitable for Architecture Based Development. This article clearly describes the fact of huge improvement in this area and why <b>Interface</b> <b>Definition</b> <b>Languages</b> are not suitable for Architecture-Based development. However as explained in detail we the approach to overcome this situation is using dynamic invocation schemes like Remote invocation scheme or reflection. These methods make our Architecture more suitable for IDLs...|$|R
50|$|The SMPTE ST 2071 {{standards}} {{define a}} development methodology that elevates features to a first-class citizen status, allowing for those features to be decoupled from the objects that implement them. The standard defines capabilities as uniquely identified features {{that may be}} defined through normative prose and/or <b>interface</b> <b>definition</b> <b>languages,</b> such as OMG IDL or WSDL, and consequently documented or registered within a repository to foster feature-level interoperability within heterogeneous environments.|$|R
50|$|Hardware {{operating}} code {{is usually}} low level and {{is prone to}} errors. The code development engineer rely on the hardware documentation which typically contains imprecise or inaccurate information. There are several <b>Interface</b> <b>Definition</b> <b>Languages</b> (IDL) to express the hardware functionalities. The modern OSes uses these IDLs to glue components or to hide heterogeneity, like remote procedural call IDL. The same applies to hardware functionalities as well. In this section we discuss writing device drivers in domain specific languages which helps to abstract the low level coding and use specific compilers to generate the code.|$|R
5000|$|WIDL (Web <b>Interface</b> <b>Definition</b> <b>Language)</b> is a 1997 {{standard}} for interactions between websites.|$|E
50|$|The ISO 14750 {{standard}} {{defines the}} <b>Interface</b> <b>definition</b> <b>language</b> {{which is used}} by CORBA.|$|E
5000|$|The {{development}} of language bindings for FORTRAN and the <b>interface</b> <b>definition</b> <b>language</b> (IDL) of CORBA were canceled.|$|E
40|$|Abstract: If formal {{techniques}} {{are to be}} more widely accepted then they should evolve as current software engineering approaches evolve. Current techniques {{in the development of}} distributed systems use <b>interface</b> <b>definition</b> <b>languages</b> (IDLs) as a basis for the underlying communication and also as an abstraction tool. Object-oriented technologies [6] and the idea of engineering software through frameworks [5] are also widely accepted approaches in developing software. In this paper we show how the formal specification language SDL and associated tool support have been applied in the TOSCA 1 project to engineer telecommunication services using these current techniques...|$|R
40|$|Introduction Software {{applications}} {{have been}} growing {{for the last two}} decades in terms of size, complexity, diversity and importance, transforming them from one-person/short-term assignments to several-persons/long-term projects. In this context, the viability of applications is strongly dependent on the organization of the software and on howquickly changes can be implemented. Researchers havebeenaware of these problems, and have come up with solutions such as object-oriented programming and programming <b>language</b> independentinterface <b>definitions</b> (IDLs). Object-oriented programming provides a natural modeling of the world based on objects and relations between them. Objects are grouped into sets of objects with similar functionality, called classes. Object-oriented programming also allows a particular kind of reuse by subclassing. <b>Interface</b> <b>definition</b> <b>languages</b> address other problems, suchasentity specification and collaboration between software components from differentvendors...|$|R
40|$|The <b>interface</b> <b>definition</b> of a {{component}} in a distributed system forms the contract between the component {{itself and its}} neighbouring components {{regarding the use of}} its services. In general, such a contract should cover the issues of service functionality, usage and quality. The <b>Interface</b> <b>Definition</b> <b>Languages</b> (IDLs) used by commercial middleware standards such as CORBA primarily address the signature issues of such a contract, i. e., the forms and types of component or object services. Nothing is said about other aspects of the contract, including {{the way in which the}} component services are to be used. In this paper, we introduce a framework and associated techniques that augment commercial IDLs with interaction protocol specifications and validate component interactions against such protocol specifications at run-time. In effect, the validation becomes a useful tool for testing whether or not the object services are used properly in a distributed system. Our approach has been implemented in the CORBA context, but can be readily applied to other IDL-based object/component systems...|$|R
50|$|Cross Platform Interface Description Language (XPIDL) is the <b>interface</b> <b>definition</b> <b>language</b> {{developed}} by Mozilla.org to specify XPCOM interfaces.|$|E
50|$|Lightweight Imaging Device Interface Language (abbr. LIDIL) is {{a printer}} <b>interface</b> <b>definition</b> <b>language</b> used {{in more recent}} Hewlett-Packard printers.|$|E
5000|$|Google Protocol Buffers (protobufs) package {{includes}} an <b>interface</b> <b>definition</b> <b>language</b> used for its RPC protocols open sourced in 2015 as gRPC.|$|E
40|$|This paper {{presents}} GoodeWatch, {{an environment}} {{to supervise the}} behavior of distributed applications. This work is based on CORBA middleware. Keywords: CORBA objects, Generic Object-Oriented Dynamic Environment, Application Supervision. 1 Introduction The goal of our project named GOODE (Generic Object-Oriented Dynamic Environment) 1 is to design new middleware services allowing the design, deployment, administration, reconfiguration and access to large scale CORBA applications. Currently, GOODE is composed of two tools: CorbaScript [MGG 97], a scripting language dedicated to CORBA environments, and CorbaWeb, a generic gateway between WWW and CORBA worlds [Mer 97]. Middlewares, like CORBA platforms [GGM 97], offer advanced frameworks to design applications: <b>Interface</b> <b>Definition</b> <b>Languages</b> to specify application contracts, numerous basic system services, some properties like location transparency and so on. Rarely, middlewares offer tools to manage applications during runtime. Users d [...] ...|$|R
40|$|This is a pre-print of {{an article}} whose final and {{definitive}} form has {{been published in the}} IFIP Advances in Information and Communication Technology, Vol. 10 Â© 1999 Springer; the original publication is available at: [URL] formal techniques are to be more widely accepted then they should evolve as current software engineering approaches evolve. Current techniques in the development of distributed systems use <b>interface</b> <b>definition</b> <b>languages</b> (IDLs) as a basis for the underlying communication and also as an abstraction tool. Object-oriented technologies and the idea of engineering software through frameworks are also widely accepted approaches in developing software. In this paper we show how the formal specification language SDL and associated tool support have been applied in the TOSCA project to engineer telecommunication services using these current techniques. 15 - 18 FebruaryOpen Acces...|$|R
40|$|The <b>Interface</b> <b>Definition</b> <b>Languages</b> (IDLs) used by {{commercial}} middleware standards such as CORBA primarily address the signature aspects of software component interfaces. They do not cover important semantic aspects, e. g. {{the correct way}} in which component services are to be used. This often poses significant problems for designing component-based systems, especially where third-party components are used. In this report, we propose a formal but user-friendly language, called the Protocol-Equipped IDL (PEIDL), for the interface specification of components. This language augments commercial IDLs with capabilities of precisely describing component interaction protocols. It employs unambiguous temporal operators to capture sequencing and concurrency constraints between component operation invocations. Accordingly, it enables the precise specification of the interoperability requirements of components {{as well as the}} automated inter-component interoperability checking in a composite system...|$|R
50|$|The Microsoft <b>Interface</b> <b>Definition</b> <b>Language</b> also {{supports}} tagged unions, allowing {{to choose the}} discriminator via an attribute in an enclosing structure or function.|$|E
5000|$|Microsoft <b>Interface</b> <b>Definition</b> <b>Language</b> (MIDL): the Microsoft {{extension}} of OMG IDL to add support for Component Object Model (COM) and Distributed Component Object Model (DCOM) ...|$|E
50|$|Object Description Language (ODL) was the {{original}} <b>interface</b> <b>definition</b> <b>language</b> created by Microsoft for specifying interfaces {{to be used in}} OLE Automation. It was a superset of the OMG IDL.|$|E
5000|$|Database {{access is}} {{supported}} via an {{application program interface}} for C++ or [...]NET programming languages and via the ODABA Script <b>Interface</b> (OSI). Object <b>Definition</b> <b>Language</b> (ODL) and Object Query Language (OQL) provided with OSI are ODMG 3.0 conform.|$|R
40|$|The Open Archives Initiative (OAI) is an {{organization}} dedicated to solving problems of digital library interoperability by defining simple protocols, most recently for the exchange of metadata. The success of such an activity requires vigilance in specification of the protocol as well as standardization of implementation. The lack of standardized implementation is a substantial barrier to interoperability in many existing client/server protocols. To avoid this pitfall we developed the Repository Explorer, a tool that supports manual and automated protocol testing. This tool has {{a significant impact on}} simplifying development of interoperability interfaces and increasing the level of confidence of early adopters of the technology, thus exemplifying the positive impact of exhaustive testing and quality assurance on interoperability ventures. Categories and Subject Descriptors D. 2. 12 [Software Engineering]: Interoperability [...] <b>Interface</b> <b>definition</b> <b>languages.</b> C. 2. 2 [Computer-Communicati [...] ...|$|R
40|$|In {{component}} software, {{the independence}} of components is achieved by separating their interfaces from implementations. The <b>interface</b> <b>definition</b> of a component serves as the contract with its neighbouring components {{regarding the use of}} its services. In general, such a contract should cover issues beyond interface signatures, such as service functionality, usage and quality. The <b>Interface</b> <b>Definition</b> <b>Languages</b> (IDLs) used by commercial middleware such as CORBA, however, lack mechanisms for capturing such semantic characteristics. In this paper, we introduce a framework and associated techniques that augment commercial IDLs with behavioural contract specifications and validate at runtime component interactions against such contracts. The behavioural contract of a component describes occurrence or sequencing constraints on its interactions with the environment. The validation of such constraints is achieved by intercepting runtime interactions between components and validating them against the finite state automata that semantically represent the constraints. The validation provides a useful tool for testing whether the component services are used properly and whether the component fulfils its behavioural obligations in a distributed system. 1...|$|R
50|$|Microsoft <b>Interface</b> <b>Definition</b> <b>Language</b> (MIDL) is a text-based {{interface}} description language by Microsoft, {{based on the}} DCE/RPC IDL which it extends for use with the Microsoft Component Object Model. Its compiler is also called MIDL.|$|E
50|$|The {{company was}} an early {{developer}} and promoter of standards for web service technologies, having worked on XML-RPC, a precursor to SOAP, and developed WIDL (Web <b>Interface</b> <b>Definition</b> <b>Language),</b> a precursor to the WSDL standard.|$|E
50|$|Smalltalk Language Binding. This {{defined the}} mapping between the ODMG ODL and Smalltalk, {{which was based}} on the OMG Smalltalk binding for the OMG <b>Interface</b> <b>Definition</b> <b>Language</b> (IDL). The Smalltalk binding also {{provided}} a mechanism to invoke OQL.|$|E
40|$|The object {{paradigm}} {{seems to}} be a suitable choice for the structuring of large distributed systems. Since distributed systems {{have a lot in common}} with parallel systems, object-oriented design may be successfully employed within massively parallel systems, too. Therefore object-oriented language support is desirable to ease the cooperation between remote resident distribution units. This paper discusses the concepts of a C++-based language extension for distributed/parallel computing as well as a novel object model called dual objects. Both object model and language will be employed for the construction of the parallel Peace operating system family. keywords: programming in the small, <b>interface</b> <b>definition</b> <b>languages,</b> stub compilers, object orientation, distributed systems. This work was supported by the Ministry of Research and Technology (BMFT) of the German Federal Government, grant no. ITR 9002 2. 1 INTRODUCTION 1 1 Introduction In the research field of distributed systems vari [...] ...|$|R
40|$|We present {{enforceable}} component-based realtime contracts, {{the first}} extension of component-based software engineering technology that comprehensively supports adaptive realtime systems from specification {{all the way}} to the running system. To provide this support, we have extended component-based <b>interface</b> <b>definition</b> <b>languages</b> (IDLs) and component representations in repositories to express realtime requirements for components. The final software, which is assembled from the components, is then executed on a realtime operating system (RTOS) with the help of a component runtime system. RTOS resource managers and the IDL-extensions are based on the same mathematical foundation. Thus, the component runtime system can use information expressed in a component-oriented manner in the extended IDL to derive parameters for the task-based admission and scheduling in the RTOS. Once basic realtime properties can thus be guaranteed, runtime support can be extended to more elaborate schemes that also support adaptive applications (container-managed quality assurance). We claim that this study convincingly demonstrates how component-based software engineering can be extended to build systems with non-functional requirements. ...|$|R
40|$|Abstract. <b>Interface</b> <b>Definition</b> <b>Languages</b> (IDLs) such as CORBA IDL/CIDL lack {{mechanisms}} for capturing semantic aspects of software components, {{such as their}} interaction protocols. This often poses significant problems for ensuring the behavioural interoperability between components in designing component-based systems. This situation is even more complicated where third-party components are involved. Our previous work in extending component interface specifications with interaction constraints presents a lightweight and incremental approach to capturing and validating the interoperability requirements of components. In this paper, we provide a deeper insight of this approach and further explore its ca-pacity. We propose a formal semantic model for it, characterising the concepts of component interfaces and interaction constraints, the consistency between con-straints {{as well as the}} behavioural interoperability between components. Based on this model, we demonstrate how interaction constraints of software components are formally defined without compromising the usability and understandability of this approach. We also illustrate how contradictive constraints and potential behavioural interoperability problems can be effectively detected. ...|$|R
50|$|The {{object-oriented}} {{approach is}} not just a programming model. It can be used equally well as an <b>interface</b> <b>definition</b> <b>language</b> for distributed systems. The objects in a distributed computing model tend to be larger grained, longer lasting, and more service-oriented than programming objects.|$|E
5000|$|GUI based Service Editor: The Service Editor (referred {{to as the}} GUI in this document) {{provides}} a user friendly interface with which a system designer can specify and analyze formal specifications of Components and Services defined using the JAUS Service <b>Interface</b> <b>Definition</b> <b>Language</b> (JSIDL).|$|E
50|$|Franca <b>Interface</b> <b>Definition</b> <b>Language</b> (Franca IDL) is a {{formally}} defined, text-based {{interface description}} language. It {{is part of}} the Franca framework, which is a framework for definition and transformation of software interfaces. Franca applies model transformation techniques to interoperate with various interface description languages (e.g., D-Bus Introspection language, Apache Thrift IDL, Fibex Services).|$|E
40|$|This {{document}} specifies the Web Services Conversation Language WSCL. WSCL allows {{defining the}} abstract interfaces of web services, i. e. the business level conversations or public processes {{supported by a}} web service. WSCL specifies the XML documents being exchanged, and the allowed sequencing of these document exchanges. WSCL conversation definitions are themselves XML documents, and can therefore be interpreted by web services infrastructures and development tools. WSCL {{may be used in}} conjunction with other service description languages like WSDL, e. g. to provide protocol binding information for abstract interfaces and to specify the abstract interfaces a concrete service is supporting. Status, Contact This draft proposes a simple conversation language standard {{that can be used for}} various web-service protocols and frameworks, and may but needs not be combined with WSDL. As such it fills the gap between mere <b>interface</b> <b>definition</b> <b>languages</b> that do not specify any choreography, and more complex process or flow languages that describe comple...|$|R
40|$|The {{development}} of software for distributed systems, e. g. telecommunication services, {{is a complex}} activity. Numerous issues have to be resolved when developing such systems, examples of which are language/system heterogeneity and remoteness of components. <b>Interface</b> <b>definition</b> <b>languages</b> (IDLs) are {{used as the basis}} for addressing some of these issues. IDLs allow for the specification of the syntactic aspects of the interfaces of the components in the system to be made. Whilst lending itself to issues of heterogeneity and location transparency, dealing with IDL as the basis for system development is not without its problems. Two of the main problems with IDL are its lack of behaviour and its lack of abstraction. Thus designers should not be constrained to work within the syntactic notations used to implement their systems, nor should they be unaided in how they might better design their systems. In this paper we show how these issues are being addressed in the TOSCA project in its {{development of}} a service creation and validation environment...|$|R
40|$|Many {{architecture}} description languages (ADLs) {{have been}} proposed to model, analyze, configure, and deploy complex software systems. To face this diversity, extensible ADLs (or ADL interchange formats) {{have been proposed}}. These ADLs provide linguistic support for integrating vari-ous architectural aspects within the same description. Nev-ertheless, they do not support extensibility at the tool level, i. e. they do not provide an extensible toolset for processing ADL descriptions. In this paper, we present an extensible toolset for eas-ing the development of architecture-based software systems. This toolset is not bound to a specific ADL, but rather uses a grammar description mechanism to accept various in-put languages, e. g. ADLs, <b>Interface</b> <b>Definition</b> <b>Languages</b> (IDLs), Domain Specific Languages (DSLs). Moreover, it can easily be extended to implement many different features, such as behavioral analysis, code generation, deployment, etc. Its extensibility is obtained by designing its core func-tionalities using fine-grained components that implement flexible design patterns. Experiments are presented to illustrate both the function-alities implemented by the toolset {{and the way it}} can be ex-tended. ...|$|R
