0|70|Public
5000|$|The X1 {{included}} a simple assembler in its [...] read-only memory. It has rather basic features: <b>symbolic</b> <b>addresses</b> may be defined, but symbols {{are only two}} letters long. Instructions are named {{by a combination of}} a digit representing the operation, and a letter designating the register to be operated on, or one or two letters indicating an operation class. For example, [...] "0A" [...] means [...] "add memory content to accumulator A", and [...] "5P" [...] means [...] "set an accumulator to the negative of another accumulator". The normal use of <b>symbolic</b> <b>addresses</b> is to name [...] "paragraphs", i.e., related blocks of code or data. The <b>symbolic</b> <b>addresses</b> would be modified by a [...] "line number" [...] (a numeric offset) and a [...] "page number" [...] (a number in the range 0 to 31). For example, [...] "3 FE 6" [...] is line number 3, page number 6, representing an offset of 195 (6 * 32 + 3) from the start of paragraph FE. This address notation is a peculiarity of the assembler; the hardware addressing simply uses 15 bit addresses.|$|R
30|$|Computer Science {{uses the}} term “reference” {{differently}} from analytic philosophy and linguistics. A computational reference is an address in a storage location. This may be coded as (1) a <b>symbolic</b> <b>address</b> (declarative) or as (2) a pointer to a physical storage location in the memory hardware (procedural). The term “generalized reference” is used in computational image reconstruction (computer vision).|$|R
50|$|Since three-address code {{is used as}} an {{intermediate}} language within compilers, the operands will most likely not be concrete memory addresses or processor registers, but rather <b>symbolic</b> <b>addresses</b> that will be translated into actual addresses during register allocation. It is also not uncommon that operand names are numbered sequentially since three-address code is typically generated by the compiler.|$|R
40|$|This study {{focuses on}} {{modeling}} people's perceptions of places {{and how those}} perceptions are affected by cultural differences. Cultural background affects the way people feel and recall information. However, {{it is unclear how}} cultural background influences individual's perception of geospatial areas such as a town or a city. One way an individual's cultural background varies is with regard to the patterns of one's routine communication. This concept is described by Hall's high- and low-context cultural model (1976). The ways people perceive geospatial places can be characterized in terms of their tendency to rely on specific landmarks or <b>symbolic</b> <b>addresses.</b> In this study, we use an online survey and an online place recognition game to test the hypothesis that high-context individuals will perceive urban places in terms of landmarks rather than <b>symbolic</b> <b>addresses.</b> The results suggest that high- and low-context is not a unified construct. Instead it is a multi-dimensional construct with sub-dimensions where one of those, i. e. one's attitude towards other's communication style, may affect an individual's perception of places...|$|R
50|$|Second-generation {{languages}} {{provide one}} abstraction level {{on top of}} the machine code. In the early days of coding on computers like the TX-0 and PDP-1, the first thing MIT hackers did was write assemblers.Assembly language has little semantics or formal specification, being only a mapping of human-readable symbols, including <b>symbolic</b> <b>addresses,</b> to opcodes, addresses, numeric constants, strings and so on. Typically, one machine instruction is represented as one line of assembly code. Assemblers produce object files that can link with other object files or be loaded on their own.|$|R
50|$|Whereas {{the full}} 40-bit word {{was used for}} data, {{instructions}} were only 20-bits long and were stored two per word. Since indexing was commonly done by modifying the address part of an instruction (say, by adding one to access the next data item in a list), such instructions always {{had to be in}} the second half-word, and the first half-word was padded with a NOP (No operation) instruction. Programmers also used these NOP instructions to provide space for future inserted instructions, since the assembler did not allow for use of <b>symbolic</b> <b>addresses,</b> and the insertion of a single instruction could otherwise require rewriting a lot of code.|$|R
50|$|Machine code {{programs}} {{are written in}} an octal/decimal representation exemplified in the Example Program above, and loaded by a rudimentary assembler known as the Translation Input Routine. It has no <b>symbolic</b> <b>addressing</b> facilities, but instead allows the source to be broken into blocks which can be manually relocated {{to allow for the}} expansion or contraction of a previous block in development. There is also an Autocode for simple programming tasks, allowing faster program development without the need for a knowledge of machine code. This has no formula translation facilities and requires all calculations to be reduced to a series of assignments with no more than a single operator on the right hand side.|$|R
50|$|More generally, {{there are}} three types of {{positioning}} concepts: functional, symbolic, and experiential position. Functional positions resolve problems, provide benefits to customers, or get favorable perception by investors (stock profile) and lenders. <b>Symbolic</b> positions <b>address</b> self-image enhancement, ego identification, belongingness and social meaningfulness, and affective fulfillment. Experiential positions provide sensory and cognitive stimulation.|$|R
40|$|Before 1954 {{almost all}} {{programming}} {{was done in}} machine language or assembly lan-guage. Programmers rightly regarded their work as a complex, creative art that re-quired human inventiveness to produce an efficient program. Much of their effort was devoted to overcoming the difficulties created by the computers of that era: the lack of index registers, the lack of built-in floating point operations, restricted instruction sets (which might have AND but not OR, for example), and primitive input-output arrangements. Given the nature of computers, the services which &quot;automatic programming &quot; performed for the programmer were concerned with overcoming the machine's shortcomings. Thus the primary concern of some &quot;automatic programming &quot; systems was to allow the use of <b>symbolic</b> <b>addresses</b> and decimal numbers (e. g., the MIDAC Input Translation Program [Brown and Carr 1954]). But most of the larger &quot;automatic. pro...|$|R
5000|$|Surat Thani Loy Krathong Festival on the Tapi River - Held on {{the full}} moon of the 12th month in the {{traditional}} Thai lunar calendar. In the Western calendar this usually falls in November. During {{the evening of the}} full moon, people launch <b>symbolic</b> <b>floating</b> [...] "krathong" [...] on the river.|$|R
40|$|Abstract. This paper enables {{symbolic}} ternary {{simulation of}} systems with large embedded memories. Each memory array is {{replaced with a}} behavioral model, where the number of symbolic variables used to characterize the initial state of the memory {{is proportional to the}} number of distinct symbolic memory locations accessed. The behavioral model provides a conservative approximation of the replaced memory array, while allowing the address and control inputs of the memory to accept symbolic ternary values. Memory state is represented by a list of entries encoding the sequence of updates of <b>symbolic</b> <b>addresses</b> with <b>symbolic</b> data. The list interacts {{with the rest of the}} circuit by means of a software interface developed as part of the symbolic simulation engine. This memory model was incorporated into our verification tool based on Symbolic Trajectory Evaluation. Experimental results show that the new model significantly outperforms the transistor level memory model when verifying a simple pipelined data path. ...|$|R
5000|$|Both Parry and Chester seem to {{have been}} local Denbighshire writers who formed part of Salusbury's own circle. Salusbury's own poetry may have been {{published}} in Parry's collection in the section entitled the [...] "patron's pathetical posies", though this has been disputed. These include a complex <b>symbolic</b> poem <b>addressed</b> to his sister-in-law, Dorothy Halsall. Other sonnets and love lyrics of his exist in manuscripts.|$|R
25|$|The {{crowd that}} had {{gathered}} for this service in Paris held a vigil by the River Seine. They then allowed the Seine waves to take photos of Kiarostami that {{the crowd had}} left on the river <b>floating.</b> It was <b>symbolic</b> moment of saying goodbye to a film director that many Iranians have come to passionately appreciate.|$|R
40|$|We use street {{addresses}} {{to refer}} to locations in a city. Street addresses are easy to remember and communicate because they follow a <b>symbolic</b> <b>addressing</b> scheme, containing human intelligible symbols. However, street addresses can often be ambiguous or confusing and don't provide complete coverage of outdoor spaces. Latitude and longitude coordinates, a metric addressing scheme, are unambiguous and accommodate locations {{that may not have}} street addresses. However, latitude and longitude coordinates are unusable on a daily basis because they must be specified to many digits to be useful at human-level scales. This thesis describes the design and implementation of a new hybrid addressing scheme, Human Intelligible Positioning (HIP), which uses a metric addressing scheme as its substrate. Addresses in this metric addressing scheme are mapped to two-dimensional offsets within named coordinate systems. HIP addresses combine the easy memorability and communicability of street addresses with the precision and universal outdoor coverage of latitude and longitude coordinates. by Vishwanath Venugopalan. Thesis (M. Eng.) [...] Massachusetts Institute of Technology, Dept. of Electrical Engineering and Computer Science, 2004. Includes bibliographical references (p. 115 - 117) ...|$|R
25|$|Peirce {{extracted}} {{the pragmatic}} model or theory of inquiry from its raw materials in classical logic and refined it {{in parallel with}} the early development of <b>symbolic</b> logic to <b>address</b> problems {{about the nature of}} scientific reasoning.|$|R
40|$|The {{research}} area of Networked Control Systems (NCS) {{has been the}} topic of intensive study in the last decade. In this paper we give a contribution to this research line by <b>addressing</b> <b>symbolic</b> control design of (possibly unstable) nonlinear NCS with specifications {{expressed in terms of}} automata. We first derive symbolic models that are shown to approximate the given NCS in the sense of (alternating) approximate simulation. We then <b>address</b> <b>symbolic</b> control design with specifications expressed in terms of automata. We finally derive efficient algorithms for the synthesis of the proposed symbolic controllers that cope with the inherent computational complexity of the problem at hand. Comment: arXiv admin note: text overlap with arXiv: 1203. 106...|$|R
40|$|Low level code is challenging: It lacks structure, it uses {{jumps and}} <b>symbolic</b> <b>addresses,</b> the control flow is often highly optimized, and {{registers}} and memory locations may be reused {{in ways that}} make typing extremely challenging. Informa-tion flow properties create additional complications: They are hyperproperties relating multiple executions, {{and the possibility of}} interrupts and concurrency, and use of devices and features like memory-mapped I/O requires a departure from the usual initial-state final-state account of noninterfer-ence. In this work we propose a novel approach to relational verification for machine code. Verification goals are ex-pressed as equivalence of traces decorated with observation points. Relational verification conditions are propagated be-tween observation points using symbolic execution, and dis-charged using first-order reasoning. We have implemented an automated tool that integrates with SMT solvers to au-tomate the verification task. The tool transforms ARMv 7 binaries into an intermediate, architecture-independent for-mat using the BAP toolset by means of a verified translator. We demonstrate the capabilities of the tool on a separation kernel system call handler, which mixes hand-written assem-bly with gcc-optimized output, a UART device driver and a crypto service modular exponentiation routine...|$|R
40|$|Abstract—Static cache {{analysis}} for data allocated on the heap is practically impossible for standard data caches. We propose a distinct object cache for heap allocated data. The cache is highly associative to track <b>symbolic</b> object <b>addresses</b> in the static analysis. Cache lines are organized to hold single objects and individual fields are loaded on a miss. This cache organization is statically analyzable and improves the performance. In this paper we present {{the design and}} implementation of the object cache in a uniprocessor and chipmultiprocessor version of the Java processor JOP. Keywords-real-time systems; time-predictable computer architecture; worst-case execution time analysis I...|$|R
40|$|Conflict {{over the}} {{building}} of mosques in European cities depends {{on the degree of}} legitimacy acquired by Muslims in the public sphere. What is at stake is the degree of religious pluralism and <b>symbolic</b> visibility. we <b>address</b> these questions through the example of the planning of a mosque in the town of Lodi in Lombard...|$|R
50|$|Nabil Kanso (born 1946) is an American painter. Kanso {{began his}} career in New York. His works deal with contemporary, {{historical}} and literary themes, and are marked by figurative imagery executed with spontaneous and vigorous handling of the paint and often done on large-scale formats. They reflect movement and tension embodying intense colors and <b>symbolic</b> forms <b>addressing</b> social, political, and war issues. The Vietnam War and the Lebanese Civil War have profoundly affected the development and scope of his themes dealing with violence and war. His long-running Split of Life series encompasses an extensive range of enormous paintings depicting scenes of human brutality and suffering.|$|R
40|$|Abstract. We have {{recently}} {{developed a new}} program analysis strategy called fractal <b>symbolic</b> analysis that <b>addresses</b> some of limitations of techniques such as dependence analysis. In this paper, we showhow fractal symbolic analysis {{can be used to}} convert between left-looking and right-looking versions of three kernels of central importance in computational science: Cholesky factorization, LU factorization with pivoting, and triangular solve. ...|$|R
500|$|The {{assignment}} statement (token '=', the equals sign). This operates differently than in traditional imperative programming languages, and this fundamental mechanism (including {{the nature of}} Python's version of variables) illuminates many other features of the language. Assignment in C, e.g., x = 2, translates to [...] "typed variable name x receives a copy of numeric value 2". The (right-hand) value is copied into an allocated storage location for which the (left-hand) variable name is the <b>symbolic</b> <b>address.</b> The memory allocated to the variable is large enough (potentially quite large) for the declared type. In the simplest case of Python assignment, using the same example, x = 2, translates to [...] "(generic) name x receives {{a reference to a}} separate, dynamically allocated object of numeric (int) type of value 2." [...] This is termed binding the name to the object. Since the name's storage location doesn't contain the indicated value, it is improper to call it a variable. Names may be subsequently rebound at any time to objects of greatly varying types, including strings, procedures, complex objects with data and methods, etc. Successive assignments of a common value to multiple names, e.g., x = 2; y = 2; z = 2 result in allocating storage to (at most) three names and one numeric object, to which all three names are bound. Since a name is a generic reference holder it is unreasonable to associate a fixed data type with it. However at a given time a name will be bound to some object, which will have a type; thus there is dynamic typing.|$|R
40|$|This paper {{focuses on}} {{automated}} computer-aided symbolic analysis of com-binational networks. A novel program {{is presented to}} carry out the symbolic analysis, and to derive closed-form formulas for the response of combina-tional networks, for excitations specified by symbols or symbolic expressions. The source code listing of the program is presented. The program opera-tion is fully illustrated by an example. The <b>symbolic</b> analysis <b>addressed</b> in this work can serve as a basis of efficient programs for variety of logic design tasks, including logic simulation, fault simulation, test generation, and sym-bolic verification. The advantages of the proposed approach are discussed. Scientists, researchers, designers, educators and students dealing with combi-national networks can benefit from the symbolic approach considered in this paper. 1...|$|R
50|$|Pasayahan sa Lucena was {{conceptualized}} {{to showcase}} {{the natural and}} ecological interrelationship and independence between nature and man. It also promotes the ways of life inherent among the people of Lucena. All these find exquisites and appreciative expressions through a mammoth gathering of colors, outlandish costumes and <b>symbolic</b> <b>floats</b> reminiscent of Mardi Gras in Rio de Janeiro and New Orleans. Originally intended as three days of spirited merrymaking in the streets, the event has become a weeklong tourist attraction, culminating on May 30 {{in time for the}} celebration of the Feast of St. Ferdinand, the patron saint of Lucena.|$|R
40|$|This {{theoretical}} paper {{develops a}} series of models applying social identify theory to the retail content. The shopper is conceived of as an actor whose self-image and related identities impact store image perceptions. The paper address how identify conflicts {{are likely to be}} resolved by a shopper and takes into account the `ideal` and `actual` selves. Suggestions are provided as to how retailers could employ <b>symbolic</b> cues to <b>address</b> different operating identities. ...|$|R
40|$|International audienceThis paper {{discusses}} four store-based concrete memory models. We characterize memory models by {{the class}} of pointers they support and whether they use numerical or <b>symbolic</b> offsets to <b>address</b> values in a block. We give the semantics of a C-like language within each of these memory models to illustrate their differences. The language we consider is a fragment of Leroy's Clight, including arrays, pointer arithmetics but excluding casts. All along the paper, we link these concrete memory models with existing shape analyses...|$|R
40|$|Symbolic {{simulation}} is {{an important}} technique used informal property verification and test generation for digital circuits. Existing symbolic simulators predominantly operate at the gate level, reasoning about individual bits and signals. As a result, their performance does not scale well to large circuits like microprocessors. Word-level <b>symbolic</b> simulators <b>address</b> this problem to some extent, but present other challenges, such as fixpoint detection when simulating multiple modules that mutually trigger each other. In this paper, we present some exploratory ideas for performing word-level symbolic simulation over a Verilog RTL description of a circuit. We outline the basic technique of simulation and of handling fixpoints, discuss issues faced in our approach and present solution techniques to counter these issues. We also present initial experimental results obtained by applying our algorithms to a Verilog model of an x 86 processor design. © IEE...|$|R
40|$|We {{present a}} {{knowledge-based}} approachtointelligent information integration {{based on a}} re-classi#cation of information entities in a new context. We identify the needs of approaches performing semantic translation, weintroduce a uniform description of contexts and discuss a naive classi#cation approach. We argue that this approach makes unrealistic assumptions about the absence of uncertainty. Toovercome this problem we discuss several approximate classi#cation approaches and their use for information integration. Therebywe <b>address</b> <b>symbolic</b> as well as numeric approaches for uncertainty handling. We sumarize {{with a description of}} an actual application area and a discussion of open research topics...|$|R
40|$|In concept {{learning}} from instances, a partially ordered concept space is searched. Whereas top-down methods search the whole space, bottom-up methods search a reduced space whose elements are most specific generalizations of positive instances. In this work {{we give the}} foundations for this reduction, and propose a method that performs a bidirectional search of this reduced space using a Tabu search strategy. 1 INTRODUCTION Here we consider {{concept learning}} from instances of disjoint classes. Most <b>symbolic</b> methods <b>address</b> this problem by searching, for each class, a " best " concept definition, according to some preference criteria, within a concept space. The instances of the target class are seen as the positive ones and the others as the negative ones. In rule learning methods, {{an element of the}} concept space is a set of conjunctive terms, each of which represents the left part of a rule. As the concept space (called E throughout this paper) is partially ordered, most methods perf [...] ...|$|R
40|$|International audienceIn {{order to}} handle complex situations, an {{autonomous}} agent needs multiple components ranging from simple input/output modules to sophisticated AI techniques. Integrating {{a high number}} of heterogeneous components is a non-trivial task and this paper discusses the use of a <b>symbolic</b> layer to <b>address</b> this issue. After an overview of existing techniques and their limitations this paper proposes a new approach through a generalized hyper-graph model in which the interaction of different components is modeled through a triggering mechanism based on patterns. Finally, the paper shows how a ﬂexible symbolic middleware can be built and a few examples are presented...|$|R
40|$|Abstract. In {{this paper}} we study {{traditional}} and enhanced BDDbased exploration procedures {{capable of handling}} large planning problems. On the one hand, reachability analysis and model checking have eventually approached AI-Planning. Unfortunately, they typically rely on uninformed blind search. On the other hand, heuristic search and especially lower bound techniques have matured in effectively directing the exploration even for large problem spaces. Therefore, with heuristic <b>symbolic</b> search we <b>address</b> the unexplored middle ground between single state and symbolic planning engines to establish algorithms that can gain from both sides. To this end we implement and evaluate heuristics found in state-of-the-art heuristic single-state search planners. ...|$|R
40|$|This paper {{describes}} {{simulations of}} implicit learning experiments. It compares simulations using connectionist models with existing simulations using <b>symbolic</b> models. It <b>addresses</b> an interesting issue raised by proponents of symbolic models, namely, {{the claim that}} implicit learning is better modeled by symbolic rule learning programs. This paper revisits such an issue by quantitatively comparing connectionist simulations with symbolic ones, {{in the context of}} the serial reaction time task of Lewicki et al (1987). This comparison is interesting because it helps to clarify, to some extent, some long standing confusions compounded by many claims and counter-claims. It also points to the idea of hybrid connectionist and symbolic models...|$|R
40|$|Saltwater Chronicles {{investigates the}} notion of “islandness” in {{contemporary}} Newfoundland readership through two in-depth case studies of book clubs as representational spaces in the elaboration of local knowledge and identities. We demonstrate how select Newfoundland readers perform acts of regeneration in which the lived, loved, and experiential dimensions of literary space come to invoke the permeability of psychic and geographic borders, the dangers and possibilities of the landwash, and the always-already precarious designation of limits between self and other. We provide examples of how, for these island readers, “islandness” as a <b>symbolic</b> point of <b>address</b> slips and border-crosses in the in-between semiotic spaces of literary encounter...|$|R
40|$|Uses of {{symbolic}} resources {{can be seen}} as dialogical processes: they take place in a cultural world constituted by semiotic exchanges; they can lead people to interact; and as artefacts, they contain echoes of many other voices. The article proposes to consider traditional Talmudic study as a paradigmatic dialogical situation, in which scholars learn to use traditional texts as resources to address problematic issues. The article then examines secular literature or philosophy classes, in which students learn to reason about texts as well. An analogical reading enables reflection on the institutional, interpersonal and psychological conditions that would enable students to turn literature or philosophy into <b>symbolic</b> resources to <b>address</b> issues they face in their everyday life. A methodology for studying such issues is finally sketched...|$|R
5000|$|Symbolics {{continued}} {{to develop the}} 3600 family and its operating system, Genera, and produced the Ivory, a VLSI implementation of the Symbolics architecture. Starting in 1987, several machines based on the Ivory processor were developed: boards for Suns and Macs, stand-alone workstations and even embedded systems (I-Machine Custom LSI, 32 bit <b>address,</b> <b>Symbolics</b> XL-400, UX-400, MacIvory II; in 1989 available platforms were Symbolics XL-1200, MacIvory III, UX-1200, Zora, NXP1000 [...] "pizza box"). Texas Instruments shrunk the Explorer into silicon as the MicroExplorer which was offered as a card for the Apple Mac II. LMI abandoned the CADR architecture and developed its own K-Machine, but LMI went bankrupt before the machine could be brought to market. Before its demise, LMI {{was working on a}} distributed system for the LAMBDA using Moby space.|$|R
50|$|Daphnopates {{remained}} {{active in}} the imperial chancery under Constantine VII (r. 913-920, 945-59) after 945. In late 945/6 he composed a <b>symbolic</b> letter <b>addressed</b> by the emperor to Saint Gregory of Nazianzus (Letter No. 11). At {{about the same time}} he also {{wrote a letter to the}} emperor himself concerning a eulogy on a recently deceased person, identified by modern scholars with Romanos Lekapenos, who died on 15 June 948. In return, the emperor sent a courtier with rich gifts. Daphnopates' further activity under Constantine VII is obscure, but he reappears under his successor Romanos II (r. 959-963) in the same capacity. Three letters (Nos. 13, 14, 16) survive addressed to the emperor, and one letter (No. 15) by Romanos II to Daphnopates. Romanos II further promoted Daphnopates to the high post of Eparch of the City. Letter No. 15 indicates his closeness to the emperor, who requested him to interpret a dream that he had had. In accordance to this dream, the emperor intended to reinstate an anonymous leading official, who some modern scholars have identified as Daphnopates' predecessor and eventual successor as Eparch, Sisinnios, or the Patriarch of Constantinople, Polyeuctus. Either because he was directly affected, or because he was not in favour of restoring the official in question, Daphnopates sent an evasive reply.|$|R
