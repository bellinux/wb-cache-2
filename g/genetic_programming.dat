5249|2137|Public
5|$|A later <b>genetic</b> <b>programming</b> {{experiment}} {{produced a}} filter design {{which consisted of}} a chain of constant k sections terminated in an m-type half section. This was also determined {{to have been a}} design patented by Zobel.|$|E
5|$|Reverse migration, {{where the}} <b>genetic</b> <b>programming</b> of young birds fails to work properly, {{can lead to}} rarities turning up as vagrants {{thousands}} of kilometres out of range.|$|E
5|$|Emsleyan or Mertensian mimicry {{describes}} unusual {{cases where}} deadly prey mimic a less dangerous species. It was first proposed by Emsley {{as a possible}} answer for the theoretical difficulties a predator species faces when associating an aposematic phenotype of potentially dangerous animals, such as the coral snake, with unprofitability when the predator has {{an increased risk of}} death, negating any learned behaviour. The theory was developed by the German biologist Wolfgang Wickler in a chapter of Mimicry in Plants and Animals, who named it after the German herpetologist Robert Mertens. Sheppard points out that Hecht and Marien put forward a similar hypothesis ten years earlier. This scenario is a little more difficult to understand, since in other types of mimicry it is usually the most harmful species that is the model. But if a predator dies, it cannot learn to recognize a warning signal, e.g., bright colours in a certain pattern. In other words, there is no advantage in being aposematic for an organism that is likely to kill any predator it succeeds in poisoning; such an animal is better off being camouflaged, to avoid attacks altogether. If, however, there were some other species that were harmful but not deadly as well as aposematic, the predator could learn to recognize its particular warning colours and avoid such animals. A deadly species could then profit by mimicking the less dangerous aposematic organism if this reduces the number of attacks. The exception here, ignoring any chance of animals learning by watching a conspecific die (see Jouventin et al. for a discussion of observational learning and mimicry), is the possibility of not having to learn that it is harmful in the first place: instinctive <b>genetic</b> <b>programming</b> to be wary of certain signals. In this case, other organisms could benefit from this programming, and Batesian or Müllerian mimics of it could potentially evolve. In fact, {{it has been shown that}} some species do have an innate recognition of certain aposematic warnings. Hand-reared turquoise-browed motmots (Eumomota superciliosa), avian predators, instinctively avoid snakes with red and yellow rings. Other colours with the same pattern, and even red and yellow stripes with the same width as rings, were tolerated. However, models with red and yellow rings were feared, with the birds flying away and giving alarm calls in some cases. This provides an alternative explanation to Mertensian mimicry. See Greene and McDiarmid for a review of the subject.|$|E
5000|$|... #Subtitle level 2: MyGene Weightloss Complete <b>Genetic</b> <b>Program</b> ...|$|R
40|$|The <b>genetic</b> <b>program</b> of {{functional}} class of electric motors is first defined and deciphered with a rolling rotor. An element base is defined and genetically possible amount of Class Types are specified. The results of genetic foresight are generalized. Accordance {{of the real}} evolution of Types is experimentally confirmed with their <b>genetic</b> <b>program.</b> Directions of further researches are determined...|$|R
40|$|Abstract:- The need to {{generate}} not only syntactically valid <b>Genetic</b> <b>Programs</b> but also programs which remain syntactically valid, {{even after the}} applying of the crossover and the mutation operators is crucial for the good evolving of the <b>genetic</b> <b>programs.</b> In this sense, programs shall be represented such way that constants, variables and operators inherent to the problem be correctly represented during all the evolving process long. Actually, a string representation does not get the above requirements due to the syntactically wrong <b>programs</b> produced by <b>genetic</b> operators. This paper propose a String Representation Methodology {{to generate}} syntactically valid <b>Genetic</b> <b>Programs.</b> The Symbolic Regression is the area which is showed our representation...|$|R
25|$|However, {{experiments}} seem to show faster convergence {{when using}} program representations — such as linear <b>genetic</b> <b>programming</b> and Cartesian <b>genetic</b> <b>programming</b> — that allow such non-coding genes, compared to tree-based program representations {{that do not}} have any non-coding genes.|$|E
25|$|MEPX - cross {{platform}} tool for regression and classification problems {{based on a}} <b>Genetic</b> <b>Programming</b> variant.|$|E
25|$|Meta-genetic {{programming}} is the proposed meta learning technique of evolving a <b>genetic</b> <b>programming</b> system using <b>genetic</b> <b>programming</b> itself. It suggests that chromosomes, crossover, and mutation were themselves evolved, therefore like their real life counterparts {{should be allowed}} to change on their own rather than being determined by a human programmer. Meta-GP was formally proposed by Jürgen Schmidhuber in 1987. Doug Lenat's Eurisko is an earlier effort that may be the same technique. It is a recursive but terminating algorithm, allowing it to avoid infinite recursion.|$|E
40|$|We {{present a}} {{molecular}} computing algorithm for evolving DNA-encoded <b>genetic</b> <b>programs</b> {{in a test}} tube. The use of synthetic DNA molecules combined with biochemical techniques for variation and selection allows for various possibilities for building novel evolvable hardware. Also, the possibility of maintaining {{a huge number of}} individuals and their massively parallel manipulation allows us to make robust decisions by the “molecular ” <b>genetic</b> <b>programs</b> evolved within a single population. We evaluate the potentials of this “molecular programming ” approach by solving a medical diagnosis problem on a simulated DNA computer. Here the individual <b>genetic</b> <b>program</b> represents a decision list of variable length and the whole population takes part in making probabilistic decisions. Tested on a real-life leukemia diagnosis data, the evolved molecular <b>genetic</b> <b>programs</b> showed a comparable performance to decision trees. The molecular evolutionary algorithm can be adapted to solve problems in biotechnology and nano-technology where the physico-chemical evolution of target molecules is of pressing importance...|$|R
40|$|In this paper, the mRNA gene {{expression}} profiles of HRAS-, KRAS- und NRAS-transformed cells were compared. Moreover, the {{gene expression}}s of Src-transformed cells were analysed {{in order to}} assess to what extent their <b>genetic</b> <b>program</b> matches the <b>genetic</b> <b>program</b> of RAS-transformed cells. The gene expression patterns established in this paper make it possible to analyse the mechanisms of malign transformation on the level of transcriptional target genes. Moreover, these patterns shed a light on the different functions of the three RAS-forms in the deregulation of the <b>genetic</b> <b>program.</b> The gene expression patterns also provide material for advanced studies on the functions of RAS-isoforms in the normal development and the selective activation in tumour...|$|R
40|$|This paper {{describes}} {{the use of}} evolutionary software techniques for developing both genetic algorithms and <b>genetic</b> <b>programs.</b> <b>Genetic</b> algorithms are evolved to solve a specific problem within a fixed and known environment. While genetic algorithms can evolve to become very optimized for their task, they often are very specialized and perform poorly if the environment changes. <b>Genetic</b> <b>programs</b> are evolved through simultaneous training {{in a variety of}} environments to develop a more general controller behavior that operates in unknown environments. Performance of <b>genetic</b> <b>programs</b> is less optimal than a specially bred algorithm for an individual environment, but the controller performs acceptably under a wider variety of circumstances. The example problem addressed in this paper is evolutionary development of algorithms and programs for path planning in nuclear environments, such as Chernobyl...|$|R
25|$|In {{artificial}} intelligence, stochastic programs work {{by using}} probabilistic methods to solve problems, as in simulated annealing, stochastic neural networks, stochastic optimization, genetic algorithms, and <b>genetic</b> <b>programming.</b> A problem itself may be stochastic as well, as in planning under uncertainty.|$|E
25|$|Evolutionary {{computation}} uses {{a form of}} optimization search. For example, {{they may}} begin {{with a population of}} organisms (the guesses) and then allow them to mutate and recombine, selecting only the fittest to survive each generation (refining the guesses). Forms of evolutionary computation include swarm intelligence algorithms (such as ant colony or particle swarm optimization) and evolutionary algorithms (such as genetic algorithms, gene expression programming, and <b>genetic</b> <b>programming).</b>|$|E
25|$|A {{high level}} of {{paranoia}} is present throughout the film with the visual manifestation of corporate power, omnipresent police, probing lights; and in the power over the individual represented particularly by <b>genetic</b> <b>programming</b> of the replicants. Control over the environment is seen {{on a large scale}} but also with how animals are created as mere commodities. This oppressive backdrop clarifies why many people are going to the off-world colonies, which clearly parallels the migration to the Americas. The popular 1980s prediction of the United States being economically surpassed by Japan is reflected in the domination of Japanese culture and corporations in the advertising of LA 2019. The film also makes extensive use of eyes and manipulated images to call into question reality and our ability to perceive it.|$|E
40|$|We have {{prepared}} a cDNA probe that detects genes that are rapidly and abundantly expressed after exposure of inducer T-lymphocyte clones to antigen or mitogen. All inducer cells tested express a characteristic set of new mRNA, and these mRNAs are not expressed after activation of other lymphocytes. This initial burst of mRNA synthesis is paralleled by synthesis and secretion {{of a family}} of polypeptides that mediate inducer cell activity, including T- and B-cell growth factors, interferon, and molecules that bind to antigen. Expression of this initial <b>genetic</b> <b>program</b> precedes mitosis and is replaced within 74 hr by a different <b>genetic</b> <b>program,</b> which may control further cell division. The action of these sequential sets of <b>genetic</b> <b>programs</b> defines two stages of the cell's differentiation and accounts for altered expression of the cell's immunological functions...|$|R
40|$|We {{describe}} {{a method for}} generating accurate, compact, human understandable text classifiers. Text datasets are indexed using Apache Lucene and <b>Genetic</b> <b>Programs</b> are used to construct Lucene search queries. <b>Genetic</b> <b>programs</b> acquire fitness by producing queries that are effective binary classifiers for a particular category when evaluated against a set of training documents. We {{describe a}} set of functions and terminals and provide results from classification tasks. Categories and Subject Descriptors D. 3. 3 [Programming Languages]...|$|R
40|$|Data mining is {{the term}} given to {{knowledge}} discovery paradigms that attempt to infer knowledge, {{in the form of}} rules, from structured data using machine learning algorithms. Specifically, data mining attempts to infer rules that are accurate, crisp, comprehensible and interesting. There are not many data mining algorithms for mining continuous classes. This thesis develops a new approach for mining continuous classes. The approach is based on a <b>genetic</b> <b>program,</b> which utilises an efficient genetic algorithm approach to evolve the non-linear regressions described by the leaf nodes of individuals in the <b>genetic</b> <b>program's</b> population. The approach also optimises the learning process by using an efficient, fast data clustering algo¬rithm to reduce the training pattern search space. Experimental results from both algorithms are compared with results obtained from a neural network. The experimental results of the <b>genetic</b> <b>program</b> is also compared against a commercial data mining package (Cubist). These results indicate that the genetic algorithm technique is substantially faster than the neural network, and produces comparable accuracy. The <b>genetic</b> <b>program</b> produces substantially less complex rules than that of both the neural network and Cubist. Dissertation (MSc) [...] University of Pretoria, 2006. Computer Scienceunrestricte...|$|R
500|$|Zobel's {{work has}} {{recently}} found an application in research into <b>genetic</b> <b>programming.</b> The {{purpose of this}} research is to attempt to demonstrate that the results obtained from <b>genetic</b> <b>programming</b> are comparable to human achievements. Two of the measures that are used to determine whether a <b>genetic</b> <b>programming</b> result is human-competitive are: ...|$|E
2500|$|The first {{statement}} of modern [...] "tree-based" [...] <b>genetic</b> <b>programming</b> (that is, procedural languages organized in tree-based structures and operated on by suitably defined GA-operators) {{was given by}} Nichael L. Cramer (1985). This work was later greatly expanded by John R. Koza, a main proponent of GP who has pioneered the application of <b>genetic</b> <b>programming</b> in various complex optimization and search problems. Gianna Giavelli, a student of Koza's, later pioneered the use of <b>genetic</b> <b>programming</b> as a technique to model DNA expression.|$|E
2500|$|The basic {{ideas of}} <b>genetic</b> <b>programming</b> have been {{modified}} and extended {{in a variety}} of ways: ...|$|E
40|$|International audienceCellular {{behavior}} is sustained by <b>genetic</b> <b>programs</b> that are progressively disrupted in pathological conditions [...] notably, cancer. High-throughput gene expression profiling {{has been used}} to infer statistical models describing these cellular programs, and development is now needed to guide orientated modulation of these systems. Here we develop a regression-based model to reverse-engineer a temporal <b>genetic</b> <b>program,</b> based on relevant patterns of gene expression after cell stimulation. This method integrates the temporal dimension of biological rewiring of <b>genetic</b> <b>programs</b> and enables the prediction of the effect of targeted gene disruption at the system level. We tested the performance accuracy of this model on synthetic data before reverse-engineering the response of primary cancer cells to a proliferative (protumorigenic) stimulation in a multistate leukemia biological model (i. e., chronic lymphocytic leukemia). To validate the ability of our method to predict the effects of gene modulation on the global program, we performed an intervention experiment on a targeted gene. Comparison of the predicted and observed gene expression changes demonstrates the possibility of predicting the effects of a perturbation in a gene regulatory network, a first step toward an orientated intervention in a cancer cell <b>genetic</b> <b>program...</b>|$|R
40|$|The Nelder-Mead Algorithm (NMA) {{is a close}} {{relative}} of Particle Swarm Optimization (PSO) and Differential Evolution (DE). In recent work, PSO, DE and NMA have been generalized using a formal geometric framework that treats solution representations in a uniform way. These formal algorithms {{can be used as}} templates to derive rigorously specificPSO,DEandNMAforbothcontinuousandcombinatorialspacesretainingthesamegeometricinterpretationofthe searchdynamicsoftheoriginalalgorithmsacrossrepresentations. In previous work, a geometric NMA has been derived for the binary string representation and permutation representation. Furthermore, PSO and DE have already been derived for the space of <b>genetic</b> <b>programs.</b> In this paper, we continue this line of research and derive formally a specific NMA for the space of <b>genetic</b> <b>programs.</b> The result is a Nelder-Mead Algorithm searching the space of <b>genetic</b> <b>programs</b> by acting directly on their tree representation. We present initial experimental results for the new algorithm. The challenge tackled in the present work compared with earlier work is that the pair NMA and <b>genetic</b> <b>programs</b> is the most complex considered so far. This combination raises a number of issues and casts light on how algorithmic features can interact with representation features to give rise to a highly peculiar search behaviour...|$|R
5000|$|A {{probabilistic}} <b>genetic</b> <b>program</b> evolver called Meta-Optimizing Semantic Evolutionary Search, or MOSES, {{originally developed}} by Moshe Looks {{who is now}} employed at Google.|$|R
2500|$|Non-tree {{representations}} {{have been}} suggested and successfully implemented, such as linear <b>genetic</b> <b>programming</b> which suits the more traditional imperative languages [...] The commercial GP software Discipulus uses automatic induction of binary machine code ("AIM") to achieve better performance. µGP uses directed multigraphs to generate programs that fully exploit the syntax of a given assembly language ...|$|E
2500|$|In {{artificial}} intelligence, <b>genetic</b> <b>programming</b> (GP) is {{a technique}} whereby computer programs are encoded {{as a set of}} genes that are then modified (evolved) using an evolutionary algorithm (often a genetic algorithm, [...] "GA") – it is an application of (for example) genetic algorithms where the space of solutions consists of computer programs. The results are computer programs able to perform well in a predefined task. The methods used to encode a computer program in an artificial chromosome and to evaluate its fitness with respect to the predefined task are central in the GP technique and still the subject of active research.|$|E
50|$|Poli co-wrote Foundations of <b>Genetic</b> <b>Programming</b> and A Field Guide to <b>Genetic</b> <b>Programming.</b> A {{book review}} in <b>Genetic</b> <b>Programming</b> and Evolvable Machines {{noted that the}} latter book was unusual {{because it had been}} {{published}} under a Creative Commons license.|$|E
50|$|In biology, a <b>genetic</b> <b>program</b> {{of a cell}} is a {{physiological}} change brought about by a temporal pattern of activation of a particular subset of genes.|$|R
50|$|According to the theory, higher life forms, {{including}} intelligent life, descend ultimately from pre-existing {{life which}} was at least as advanced as the descendants. The <b>genetic</b> <b>programs</b> {{for the evolution of}} such higher forms may have been delivered to biospheres, such as the Earth's, within viruses or bacteria {{in the same manner as}} proposed by other versions of panspermia. The <b>genetic</b> <b>programs</b> may then be installed by known gene transfer mechanisms. Also, according to cosmic ancestry, life initiates Gaian processes that may environmentally alter biospheres.|$|R
30|$|This {{appendix}} {{gives the}} output C++ {{code of the}} best <b>genetic</b> <b>program</b> from the Discipulus to calculate the new Rs correlation. This program is a sequential type program.|$|R
5000|$|<b>Genetic</b> <b>programming</b> {{models can}} be simplified. The <b>genetic</b> <b>programming</b> trees can be {{exported}} to MATLAB, LaTeX, Excel or other formats.|$|E
5000|$|Zobel's {{work has}} {{recently}} found an application in research into <b>genetic</b> <b>programming.</b> The {{purpose of this}} research is to attempt to demonstrate that the results obtained from <b>genetic</b> <b>programming</b> are comparable to human achievements. Two of the measures that are used to determine whether a <b>genetic</b> <b>programming</b> result is human-competitive are: ...|$|E
50|$|Linear <b>genetic</b> <b>programming</b> (LGP) is a {{particular}} subset of <b>genetic</b> <b>programming</b> wherein computer programs in a population are represented as a sequence of instructions from imperative programming language or machine language. The graph-based data flow that results from a multiple usage of register contents {{and the existence of}} structurally noneffective code (introns) are two main differences of this genetic representation from the more common tree-based <b>genetic</b> <b>programming</b> (TGP) variant.|$|E
40|$|Abstract. Geometric Differential Evolution (GDE) {{is a very}} {{recently}} introduced formal generalization of traditional Differential Evolution (DE) {{that can be used}} to derive specific GDE for both continuous and combinatorial spaces retaining the same geometric interpretation of the dynamics of the DE search across representations. In this paper, we derive formally a specific GDE for the space of <b>genetic</b> <b>programs.</b> The result is a Differential Evolution algorithm searching the space of <b>genetic</b> <b>programs</b> by acting directly on their tree representation. We present experimental results for the new algorithm. ...|$|R
50|$|In {{biological}} organisms, morphogenesis (the {{development of}} well-defined shapes and functional structures) {{is achieved by}} the interactions between cells guided by the <b>genetic</b> <b>program</b> encoded in the organism's DNA.|$|R
5000|$|Phillips RL, Ernst RE, Brunk B, Ivanova N, Mahan MA, Deanehan JK, Moore KA, Overton GC, Lemischka IR. The <b>Genetic</b> <b>Program</b> of Hematopoietic Stem Cells. Science 2000; 288: 1635-1640.|$|R
