241|1984|Public
25|$|A device can {{register}} many <b>Device</b> <b>Interface</b> Class GUIDs for itself, contracting {{to support}} various appropriate interface calls. The most common Interface Class GUID relating to storage devices is the Volume <b>Device</b> <b>Interface</b> Class GUID, {53F5630D-B6BF-11D0-94F2-00A0C91EFB8B}.|$|E
25|$|Another {{characteristic}} of every device is the <b>Device</b> <b>Interface</b> Class. This defines an interface contract, where a device agrees {{to support a}} basic set of Input/Output Control calls pertaining to that <b>Device</b> <b>Interface</b> Class. For example, a device agreeing to support the keyboard interface contract must support the IOCTL_KEYBOARD_QUERY_ATTRIBUTES IOCTL call, amongst others. Each class is represented as a large universally unique number called a GUID.|$|E
25|$|The Graphics <b>Device</b> <b>Interface</b> is {{responsible}} for tasks such as drawing lines and curves, rendering fonts and handling palettes. The Windows NT 3.x series of releases had placed the GDI component in the user-mode Client/Server Runtime Subsystem, but this was moved into kernel mode with Windows NT 4.0 to improve graphics performance.|$|E
40|$|While {{there has}} been much {{successful}} work in developing rules to guide the design and implementation of interfaces for desktop machines and their applications, the design of mobile <b>device</b> <b>interfaces</b> is still relatively unexplored and unproven. This paper discusses the characteristics and limitations of current mobile <b>device</b> <b>interfaces,</b> especially compared to the desktop environment. Using existing interface guidelines as a starting point, a set of practical design guidelines for mobile <b>device</b> <b>interfaces</b> is proposed...|$|R
50|$|SSDs support various logical <b>device</b> <b>interfaces,</b> {{such as the}} {{original}} ATAPI, Advanced Host Controller Interface (AHCI), NVM Express (NVMe), and other proprietary <b>interfaces.</b> Logical <b>device</b> <b>interfaces</b> define the command sets used by operating systems to communicate with SSDs and host bus adapters (HBAs).|$|R
50|$|The table below {{summarizes}} high-level {{differences between}} the NVMe and AHCI logical <b>device</b> <b>interfaces.</b>|$|R
25|$|The XPS Print Path {{introduced}} in Windows Vista supports high quality 16-bit color printing. The XPS print path uses XML Paper Specification (XPS) as the print spooler file format, {{that serves as}} the page description language (PDL) for printers. The XPS spooler format is the intended replacement for the Enhanced Metafile (EMF) format which is the print spooler format in the Graphics <b>Device</b> <b>Interface</b> (GDI) print path. XPS is an XML-based (more specifically XAML-based) color-managed device and resolution independent vector-based paged document format which encapsulates an exact representation of the actual printed output. XPS documents are packed in a ZIP container along with text, fonts, raster images, 2D vector graphics and DRM information. For printers supporting XPS, this eliminates an intermediate conversion to a printer-specific language, increasing the reliability and fidelity of the printed output. Microsoft claims that major printer vendors are planning to release printers with built-in XPS support and that this will provide better fidelity to the original document.|$|E
2500|$|<b>Device</b> <b>Interface</b> Class GUIDs can {{be found}} in the Registry under: ...|$|E
2500|$|Lastly, AutoPlay {{searches}} the relevant <b>Device</b> <b>Interface</b> Class GUIDs. The parameters for device classes are stored in: ...|$|E
30|$|In {{the view}} of devices perspective, the {{researches}} cover two themes: (1) physical devices and (2) <b>device</b> <b>interfacing.</b>|$|R
5000|$|Restriction on {{number of}} MME/WinMM <b>device</b> <b>interfaces</b> (waveIn, waveOut, midiIn, midiOut, mixer, and aux) is raised from 10 to 32.|$|R
50|$|JEDEC {{has issued}} widely used {{standards}} for <b>device</b> <b>interfaces,</b> {{such as the}} JEDEC memory standards for computer memory (RAM), including the DDR SDRAM standards.|$|R
2500|$|Screensavers {{are usually}} {{designed}} and coded {{using a variety}} of programming languages as well as graphics interfaces. Typically the authors of screensavers use the C or C++ programming languages, along with Graphics <b>Device</b> <b>Interface</b> (GDI), DirectX, or OpenGL, to craft their final products. Several OS X screensavers are created and designed using Quartz Composer. The screensaver interfaces indirectly with the operating system to cause the physical display screen to be overlaid with one or more graphic [...] "scenes". The screensaver typically terminates after receiving a message from the operating system that a key has been pressed or the mouse has been moved.|$|E
50|$|A device can {{register}} many <b>Device</b> <b>Interface</b> Class GUIDs for itself, contracting {{to support}} various appropriate interface calls. The most common Interface Class GUID relating to storage devices is the Volume <b>Device</b> <b>Interface</b> Class GUID, {53F5630D-B6BF-11D0-94F2-00A0C91EFB8B}.|$|E
5000|$|Universal Network <b>Device</b> <b>Interface</b> (UNDI) - used by Intel PXE ...|$|E
40|$|Designing mobile <b>device</b> <b>interfaces</b> {{impose a}} series of {{challenges}} on human-computer interaction: displays are small, means of input are limited and use-contexts are very dynamic. This paper addresses the potentials of context sensitivity for making mobile <b>device</b> <b>interfaces</b> less complex and easier to interact with, thus easing the use of information technology while being mobile. Based on a semiotic approach to information representation, {{it is argued that}} the design of mobile <b>device</b> <b>interfaces</b> can benefit from spatial and temporal indexicality, reducing the information complexity and the interaction space of the device while focusing on the information and functionality relevant here and now. Illustrating this approach, {{a series of}} design sketches are presented showing two possible 3 G mobile versions of an existing web and wap-based information service: with and without the use of spatial and temporal indexicality...|$|R
5000|$|There {{are three}} options {{available}} for the logical <b>device</b> <b>interfaces</b> and command sets used for <b>interfacing</b> with storage <b>devices</b> connected to a SATA Express controller: ...|$|R
40|$|Abstract. This paper {{addresses}} the potentials of context sensitivity for making mobile <b>device</b> <b>interfaces</b> less complex {{and easier to}} interact with. Based on a semiotic approach to information representation, {{it is argued that}} the design of mobile <b>device</b> <b>interfaces</b> can benefit from spatial and temporal indexicality, reducing information complexity and interaction space of the device while focusing on information and functionality relevant here and now. Illustrating this approach, a series of design sketches show the possible redesign of an existing web and wap-based information service. ...|$|R
5000|$|<b>Device</b> <b>Interface</b> Class GUIDs can {{be found}} in the Registry under: ...|$|E
5000|$|VDI - Virtual <b>Device</b> <b>Interface</b> (screen drivers only, {{other drivers}} loaded using GDOS) ...|$|E
50|$|It {{uses the}} Graphics <b>Device</b> <b>Interface</b> {{to display the}} {{calculated}} orbit as it progresses.|$|E
40|$|This paper {{discusses}} both {{risks and}} mitigation strategies for risks and threats associated with physical <b>device</b> <b>interfaces.</b> To this end, {{a brief discussion}} of the I/O architecture found in the Microsoft Windows operating system {{is followed by a}} review of several classes of attacks possible using only external devices attached to standard <b>device</b> <b>interfaces</b> of host computers. Based on this analysis, a selection of possible countermeasures including the modification of the host operating systemby wrapping the I/O mechanisms into a hardened protective layer is discussed...|$|R
5000|$|WWAN (Mobile broadband) support (driver model {{based on}} NDIS miniport driver for CDMA and GSM <b>device</b> <b>interfaces,</b> Connection Manager support and Mobile Broadband COM and COM Interop API).|$|R
5000|$|... #Caption: A {{high-level}} {{overview of}} the SATA Express software architecture, which supports both legacy SATA and PCI Express storage devices, with AHCI and NVMe as the logical <b>device</b> <b>interfaces.</b>|$|R
50|$|DUT {{boards are}} {{occasionally}} known as DIBs (<b>Device</b> <b>Interface</b> Boards), probecards, or PIBs (Probecard Interface Boards).|$|E
50|$|Another {{characteristic}} of every device is the <b>Device</b> <b>Interface</b> Class. This defines an interface contract, where a device agrees {{to support a}} basic set of Input/Output Control calls pertaining to that <b>Device</b> <b>Interface</b> Class. For example, a device agreeing to support the keyboard interface contract must support the IOCTL_KEYBOARD_QUERY_ATTRIBUTES IOCTL call, amongst others. Each class is represented as a large universally unique number called a GUID.|$|E
50|$|Graphics <b>Device</b> <b>Interface</b> (GDI): Responsible {{for drawing}} {{graphics}} in a device-independent way. Consists of GDI.EXE and GDI32.DLL.|$|E
50|$|In many applications, the user's body is {{actively}} engaged as the <b>device's</b> <b>interface.</b> This usually includes: the skin, hands, voice, eyes, and arms. Wearables are also receptive to any motion or attention.|$|R
50|$|Prior to Windows XP, {{the number}} of MME/WinMM <b>device</b> <b>interfaces</b> (waveIn, waveOut, midiIn, midiOut, mixer, and aux) is {{restricted}} to 10. This limit is raised from 10 to 32 in Windows XP.|$|R
5000|$|... #Caption: A {{high-level}} {{overview of}} the SATA Express software architecture, which also applies to M.2. It supports both legacy SATA and PCI Express storage devices, with AHCI and NVMe as the logical <b>device</b> <b>interfaces.</b>|$|R
5000|$|Lastly, AutoPlay {{searches}} the relevant <b>Device</b> <b>Interface</b> Class GUIDs. The parameters for device classes are stored in: ...|$|E
5000|$|... 2017 Polyhedra 9.2: reduced memory usage, RDI (Remove <b>Device</b> <b>Interface)</b> API, OPC UA RDI, and SQL EXPLAIN command.|$|E
50|$|A {{graphics}} <b>device</b> <b>interface</b> is a subsystem {{that most}} operating systems use for representing graphical objects and transmitting them to output {{devices such as}} monitors and printers. In most cases, the graphics <b>device</b> <b>interface</b> is only able to draw 2D graphics and simple 3D graphics, {{in order to make}} use of more advanced graphics and keep performance, an API such as DirectX or OpenGL needs to be installed.|$|E
5000|$|There {{are three}} options {{available}} for the logical <b>device</b> <b>interfaces</b> and command sets used for interfacing with M.2 storage devices, which may be used {{depending on the type}} of M.2 storage device and available operating system support: ...|$|R
40|$|International audienceWe propose an implantable {{autonomous}} stimulation {{unit for}} Functional Electrical Stimulation (FES) of motor nerves, for spinal cord injured patients. Thus, we mainly {{focus on the}} prototype of such implanted <b>device</b> <b>interfaced</b> with neural structures by means of multipolar electrodes...|$|R
40|$|Network configuration/management Financial {{institution}} must {{cope with}} different operational scenarios Normal operation, high-volume, and emergency meltdown policies Configure the network, not just individual isolated <b>device</b> <b>interfaces</b> Map business {{rules and procedures}} to applications that use the network © 2000, Cisco Systems, Inc. ...|$|R
