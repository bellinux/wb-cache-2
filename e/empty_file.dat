21|34|Public
25|$|Started with an <b>empty</b> <b>file,</b> the {{a command}} appends text (all ed {{commands}} are single letters). The command puts ed in insert mode, inserting the characters that follow and is terminated {{by a single}} dot on a line. The two lines that are entered before the dot {{end up in the}} file buffer. The 2i command also goes into insert mode, and will insert the entered text (a single empty line in our case) before line two. All commands may be prefixed by a line number to operate on that line.|$|E
5000|$|... #Caption: The vi {{editor in}} OpenBSD (nvi) on startup, editing a {{temporary}} <b>empty</b> <b>file</b> ...|$|E
50|$|The {{following}} function {{creates an}} <b>empty</b> <b>file</b> in redist\miles folder. After that, Warcraft III runs with an error.|$|E
50|$|It {{then adds}} {{appropriate}} {{keys to the}} Windows registry to ensure activation on Windows startup, {{along with a few}} <b>empty</b> <b>files</b> in the Windows directory. These <b>empty</b> <b>files</b> are used to deactivate previous Sober variants.|$|R
5000|$|Delete <b>empty</b> <b>files</b> named 'bad':$ find [...] -name bad -empty -delete ...|$|R
50|$|The Sober worms must be {{unpacked}} {{and run by}} the user. Upon execution, Sober copies {{itself to}} one of several files in the Windows directory, depending on the variant. It then adds appropriate keys to the Windows registry, {{along with a few}} <b>empty</b> <b>files</b> in the Windows directory. These <b>empty</b> <b>files</b> are used to deactivate previous Sober variants.|$|R
5000|$|If {{the file}} already exists then discard its {{previous}} contents, reducing {{it to an}} <b>empty</b> <b>file.</b> Not applicable for a device or named pipe.|$|E
50|$|The null {{device is}} {{typically}} used for disposing of unwanted output streams of a process, or as a convenient <b>empty</b> <b>file</b> for input streams. This is usually done by redirection.|$|E
50|$|High-level {{formatting}} is {{the process}} of setting up an <b>empty</b> <b>file</b> system on a disk partition or logical volume and, for PCs, installing a boot sector. This is a fast operation, and is sometimes referred to as quick formatting.|$|E
50|$|File Cleaner Allows user to list e.g. all temp <b>files</b> or <b>empty</b> <b>files.</b>|$|R
50|$|The W32.Alcra. F worm saves {{a number}} of <b>empty</b> <b>files</b> and links to a {{computer}} and then attempts to connect to those links thus causing an error.|$|R
5000|$|Delete <b>empty</b> <b>files</b> {{and print}} the names (note that [...] is a vendor unique {{extension}} from GNU [...] {{that may not}} be available in all [...] implementations):$ find [...] -empty -delete -print ...|$|R
50|$|In simple {{file system}} benchmarks, the {{fragmentation}} factor is often omitted, as realistic aging and fragmentation {{is difficult to}} model. Rather, for simplicity of comparison, file system benchmarks are often run on <b>empty</b> <b>file</b> systems. Thus, the results may vary heavily from real-life access patterns.|$|E
5000|$|The Unix command dd of=sparse-file bs=1k seek=5120 count=0will {{create a}} file of five mebibytes in size, {{but with no}} data stored on disk (only metadata). (GNU dd has this {{behaviour}} because it calls ftruncate to set the file size; other implementations may merely create an <b>empty</b> <b>file.)</b> ...|$|E
50|$|By default {{the first}} line number written to an <b>empty</b> <b>file</b> is 1, and is {{incremented}} by 1 with each subsequent write. By default, reading a file starts with {{the first line}} number at or above 1 and continues by reading each line in order of increasing line numbers. This means that negative line numbers are invisible parts of a file, which require specific references to read.|$|E
25|$|The {{defense of}} {{checking}} {{from the side}} normally requires three <b>empty</b> <b>files</b> between the pawn and the black rook. Sometimes it is possible with only two files when the pawn is on the seventh rank.|$|R
3000|$|... <b>empty</b> <b>files</b> and geometries, invalid {{input file}} formats. It should be noticed that val 3 dity does not {{validate}} the schema of the input, {{the main reason}} is that often small errors are not an issue for the validation and val 3 dity can recover from them (in {{the same way that}} a web browser can often display invalid HTML); [...]...|$|R
5000|$|The {{minimum size}} of a [...]ZIP file is 22 bytes. Such <b>empty</b> zip <b>file</b> {{contains}} only an End of Central Directory Record (EOCD): ...|$|R
50|$|If {{the year}} is any year other than 1990 and the day is a Friday on or after the 15th, if a program is run, Jerusalem-Captain Trip creates an <b>empty</b> <b>file</b> with the same name as the program. On several other dates it {{installs}} a routine in the timer tick that activates when 15 minutes pass. On the 16th Jerusalem-Captain Trip re-programs the video controller. Jerusalem-Captain Trip has several errors.|$|E
5000|$|On 13 October 1894, {{without any}} {{tangible}} evidence {{and with an}} <b>empty</b> <b>file,</b> General Mercier summoned Captain Dreyfus for a general inspection in [...] "bourgeois clothing", i.e. in civilian clothes. The purpose of the General Staff was to obtain the perfect proof under French law: a confession. That confession was to be obtained by surprise - by dictating a letter based on the bordereau to reveal his guilt.|$|E
50|$|On 4 December 1894 Dreyfus was {{referred}} to the first Military Court with the <b>empty</b> <b>file.</b> The secrecy was lifted and M. Demange could access the file for the first time. After reading it the lawyer had absolute confidence, as he saw the emptiness of the prosecutionâ€™s case. The prosecution rested completely on the writing on {{a single piece of}} paper, the bordereau, on which experts disagreed, and on vague indirect testimonies.|$|E
50|$|The <b>empty</b> {{computer}} <b>file</b> is {{the minimal}} program in Simula, {{measured by the}} size of the source code.It consists of one thing only; a dummy statement.|$|R
25|$|BITS uses a queue {{to manage}} file transfers. A BITS session {{has to be}} started from an {{application}} by creating a Job. A job is a container, which has one or more files to transfer. A newly created job is <b>empty.</b> <b>Files</b> must be added, specifying both the source and destination URIs. While a download job can have any number of files, upload jobs can have only one. Properties can be set for individual files. Jobs inherit the security context of the application that creates them.|$|R
50|$|The Shadow of Death can be {{installed}} alongside the first Heroes of Might and Magic III expansion pack, Armageddon's Blade. New features included in the Armageddon's Blade expansion (such as the Conflux town) are present in The Shadow of Death, but are designed to remain hidden and inaccessible unless certain files installed by Armageddon's Blade are detected in the game's directory. The game, however, checks only {{for the presence of}} these files: it does not verify the file contents. Because of this, several gamers discovered {{that it was possible to}} create <b>empty</b> <b>files</b> with the correct file names to unlock the Armageddon's Blade enhancements in The Shadow of Death without having to install the earlier expansion pack.|$|R
50|$|One journal is {{maintained}} for each NTFS volume {{and stored in}} the NTFS metafile named $Extend\$UsnJrnl. It begins as an <b>empty</b> <b>file.</b> Whenever a change is made to the volume, a record {{is added to the}} file. Each record is identified by a 64-bit Update Sequence Number or USN. (For this reason Change Journals are sometimes called USN Journals.) Each record in the Change Journal contains the USN, the name of the file, and information about what the change was.|$|E
5000|$|Another {{example is}} the unwelcome {{behavior}} in the following fragments. Both of these appear to mean, [...] "If 'myfile' does not exist, create it by writing 'mytext' into it." [...] But the version on the right always creates an <b>empty</b> <b>file</b> because the C shell's order of evaluation {{is to look for}} and evaluate I/O redirection operators on each command line as it reads it, before examining the rest of the line to see whether it contains a control structure.|$|E
5000|$|Started with an <b>empty</b> <b>file,</b> the {{a command}} appends text (all ed {{commands}} are single letters). The command puts ed in insert mode, inserting the characters that follow and is terminated {{by a single}} dot on a line. The two lines that are entered before the dot {{end up in the}} file buffer. The [...] command also goes into insert mode, and will insert the entered text (a single empty line in our case) before line two. All commands may be prefixed by a line number to operate on that line.|$|E
5000|$|Each Tagsistant {{file system}} has a {{corresponding}} repository containing an [...] directory where the objects are actually saved and a [...] file holding tagging information as an SQLite database. If the MySQL database engine was specified with the [...] argument, the [...] <b>file</b> will be <b>empty.</b> Another <b>file</b> named [...] is a GLib ini store with the repository configuration.|$|R
5000|$|In some languages, {{particularly}} scripting languages, an <b>empty</b> source <b>file</b> is a {{fixed point}} of the language, being a valid program that produces no output. Such an empty program, submitted as [...] "the world's smallest self reproducing program", once won the [...] "worst abuse of the rules" [...] prize in the International Obfuscated C Code Contest.|$|R
40|$|The {{subject of}} this {{internship}} report is the performance evaluation of a Cluster file system called Lustre, before its installation into a computing Cluster, or other computing systems. Performance evaluation includes benchmarks, comparison to other file systems (ext 3, NFS), and study of tuning possibilities. In this report we first present the file system Lustre, and then we explain how the tests were driven, including the methodology of the tests, {{the installation of the}} test platform, and a preliminary research of the main bottlenecks. Three types of benchmarks have been driven: read/write of big files, including both sequential and random access, in order to test the throughput; read/write of small files, in order to test the cache efficiency; and creation/deletion of <b>empty</b> <b>files,</b> in order to test the access times. The aim is to see in which cases it is convenient to use the Lustre file system...|$|R
50|$|It {{all started}} in 1980 with an <b>empty</b> <b>file</b> cabinet, {{a desk and}} a savvy {{businessman}} named Lou Grassi, who possessed a keen insight into the necessary components of success. After {{more than a quarter}} century, Grassi & Co. {{is now one of the}} nationâ€™s elite accounting firms and among the Top 100 largest firms in the United States. Also ranked by Crainâ€™s New York Business as one of the Top 20 largest accounting firms in New York and by Long Island Business News as one of the Top 10 largest on Long Island, Grassi & Co. is a full-service tax, accounting, and business advisory firm with three offices throughout the New York Metro area (New York City, NY; Jericho, NY; New City, NY).|$|E
5000|$|The command was {{originally}} {{implemented in the}} first version of UNIX as a method to initialize either a DECtape (using the [...] "t" [...] argument) or an RK03 disk pack (using the [...] "r" [...] argument). The initialization process would write formatting data to the device so that it contained an <b>empty</b> <b>file</b> system. It created the super-block, i-list, and free list on the storage device and established the root directory with entries for [...] "." [...] and [...] ".." [...] (self and parent, respectively). The RK03 disk packs had 4872 available blocks after initialization, while the tapes had 578 blocks (at 512 bytes/block). The mkfs executable was kept in the /etc directory instead of a binary directory so it would not be inadvertently called and destroy information.|$|E
40|$|The version 2. 0. 0 -RC 1 - 10 -g 9 abe 18 a was in use {{for quite}} some time, so {{this is just a}} release to fix it as the next release candidate. Mostly it's about some minor {{improvements}} and bugfixes to the 2. 0. 0 -RC 1 version: Updated better-files # 75 : Fixed the problem with <b>empty</b> <b>file</b> check # 74 : Logging-related improvements: Fixed worker fatal failure notification subject Improved worker non-fatal error message Made transfer manager down/uploads silent again Removed logging on each log uploa...|$|E
5000|$|Because of its legacy origins, the {{contents}} of textClipping files are not stored inside the actual data [...] "fork" [...] of the file, and the files cannot easily be shared between Macs or sent to other machines like an attachment. Opening the textClipping file in most applications will show a 0 byte <b>empty</b> data <b>file.</b> When OSX views or performs an action on a textClipping file, it performs a lookup of the file's resource fork where {{the contents}} are actually stored.|$|R
50|$|Stepping {{back to the}} {{previous}} iteration, we were reading from 1 and 2. One run is merged from 1 and 2 before <b>file</b> 1 goes <b>empty.</b> Notice that <b>file</b> 2 is not completely consumedâ€”it has one run left to match the final merge (above).|$|R
50|$|BITS uses a queue {{to manage}} file transfers. A BITS session {{has to be}} started from an {{application}} by creating a Job. A job is a container, which has one or more files to transfer. A newly created job is <b>empty.</b> <b>Files</b> must be added, specifying both the source and destination URIs. While a download job can have any number of files, upload jobs can have only one. Properties can be set for individual files. Jobs inherit the security context of the application that creates them.BITS provides API access to control jobs. A job can be programmatically started, stopped, paused, resumed, and queried for status. Before starting a job, a priority has to be set for it to specify when the job is processed relative to other jobs in the transfer queue. By default, all jobs are of Normal priority. Jobs can optionally be set to High, Low, or Foreground priority. Background transfers are optimized by BITS, which increases and decreases (or throttles) the rate of transfer based {{on the amount of}} idle network bandwidth that is available. If a network application begins to consume more bandwidth, BITS decreases its transfer rate to preserve the user's interactive experience, except for Foreground priority downloads.|$|R
