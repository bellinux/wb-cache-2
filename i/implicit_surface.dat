447|532|Public
25|$|Some {{topics in}} {{computer}} graphics include user interface design, sprite graphics, vector graphics, 3D modeling, shaders, GPU design, <b>implicit</b> <b>surface</b> visualization with ray tracing, and computer vision, among others. The overall methodology depends {{heavily on the}} underlying sciences of geometry, optics, and physics.|$|E
25|$|If f is {{a smooth}} {{function}} from R3 to R whose gradient is nowhere zero, then {{the locus of}} zeros of f does define a surface, known as an <b>implicit</b> <b>surface.</b> If the condition of non-vanishing gradient is dropped, then the zero locus may develop singularities.|$|E
2500|$|Chris Hecker, {{who worked}} on Spore (including its early prototypes), gave a {{presentation}} at GDC 2005 and Futureplay entitled [...] "Why you should have paid attention in multivariable calculus", in which he describes the mathematics of an <b>implicit</b> <b>surface</b> and various methods to apply texture projections to such surfaces. Sean O'Neil worked as a consultant for Maxis [...] "to assist with R involving dynamic generation and rendering of a fractal-based world". He maintains a website with a demonstration of procedural planet generation and a simulation of dynamic atmospheric scattering.|$|E
40|$|We {{present an}} {{interactive}} method of visualizing both manifold and non-manifold <b>implicit</b> <b>surfaces.</b> The <b>implicit</b> <b>surfaces</b> are directly visualized at interactive frame rates independent of surface complexity by the hardware-accelerated volume rendering method. Although conventional <b>implicit</b> <b>surfaces</b> can represent only two-manifold surfaces, {{we have developed}} a technique of representing nonmanifold <b>surfaces</b> as <b>implicit</b> <b>surfaces</b> by applying segmented distance field. <b>Implicit</b> <b>surfaces</b> represented by this definition can be rendered by preintegrated volume rendering using vertex generation diagrams as pre-integration table. We also developed a system for visualizing the <b>implicit</b> <b>surfaces</b> and have confirmed that it can render surfaces at su#cient quality and speed...|$|R
40|$|This {{tutorial}} paper {{gives an}} overview of the area of <b>implicit</b> <b>surfaces.</b> The history of the technique is presented and various approaches categorised and compared. Existing problems with modelling, rendering and animation of <b>implicit</b> <b>surfaces</b> are discussed and available solutions evaluated. The paper provides a comprehensive introduction for novice and experienced users of <b>implicit</b> <b>surfaces.</b> Keywords: <b>Implicit</b> <b>Surfaces,</b> Deformable Objects, Modelling Techniques, Animation Control, Review 1. Introduction The most common methods of modelling the surface of an object are to explicitly represent it as a set of polygons or parametric patches. Many Computer-Aided Design (CAD) and computer graphics systems utilise these modelling techniques. However, they have their limitations, especially when smooth, deformable objects need to be represented and animated. Then, it is time for <b>implicit</b> <b>surfaces</b> to step into the limelight. As their name suggests the surface of an object is not modelled explic [...] ...|$|R
40|$|Recent {{research}} has demonstrated the usefulness of <b>implicit</b> <b>surfaces</b> for modeling geometric objects. The interactive design of such surfaces has not, however, received the same attention as has the design of parametric surfaces. Principally {{this is due to}} the difficulty of controlling the shape of <b>implicit</b> <b>surfaces</b> while displaying the changes quickly enough for use within an interactive design environment. This paper describes progress towards interactive control of <b>implicit</b> <b>surfaces</b> and introduces new techniques useful to the designer...|$|R
5000|$|Step 2 - Connect the {{relationship}} between diffusion model and PDEs on <b>implicit</b> <b>surface</b> ...|$|E
5000|$|In {{mathematics}} an <b>implicit</b> <b>surface</b> is {{a surface}} in Euclidean space defined by an equation ...|$|E
50|$|To triangulate an <b>implicit</b> <b>surface</b> (defined {{by one or}} more equations) is more difficult.There exist {{essentially}} two methods.|$|E
40|$|We discuss {{adaptive}} enumeration and rendering {{methods for}} <b>implicit</b> <b>surfaces,</b> using octrees computed with affine arithmetic, a new tool for range analysis. Affine arithmetic {{is similar to}} standard interval arithmetic, but takes into account correlations between operands and sub-formulas, generally providing much tighter bounds for the computed quantities. The resulting octrees are accordingly much smaller, and the rendering faster. We also describe applications of affine arithmetic to intersection and ray tracing of <b>implicit</b> <b>surfaces.</b> Keywords: cellular models, interval analysis, rendering, <b>implicit</b> <b>surfaces...</b>|$|R
40|$|We are {{concerned}} with producing high quality images of <b>implicit</b> <b>surfaces,</b> in particular those with non-manifold features. In this work we present a point based technique that improves the rendering of non-manifold <b>implicit</b> <b>surfaces</b> by using point and gradient information to prune plotting nodes resulting from using octree spatial subdivision based on the natural interval extension of the surfaceâ€™s function. The use of intervals guarantees that no parts of the surfaces are missed in the view volume and the combination of point and gradient sampling preserves this feature while greatly enhacing the quality of point based rendering of <b>implicit</b> <b>surfaces.</b> We also sucessfully render non-manifold features of <b>implicit</b> <b>surfaces</b> such as rays and thin sections. We illustrate the technique {{with a number of}} example surfaces...|$|R
5000|$|... #Subtitle level 3: Smooth approximations {{of several}} <b>implicit</b> <b>surfaces</b> ...|$|R
5000|$|<b>Implicit</b> <b>surface</b> {{modeling}} - {{an older}} subfield which examines {{the use of}} algebraic surfaces, constructive solid geometry, etc., for surface representation.|$|E
5000|$|The {{equipotential}} surface {{for the potential}} value [...] is the <b>implicit</b> <b>surface</b> [...] which is a sphere with center at point [...]|$|E
50|$|In {{computer}} graphics, a polygonizer is {{a software}} component for converting a geometric model represented as an <b>implicit</b> <b>surface</b> to a polygon mesh.|$|E
40|$|We {{present a}} novel {{framework}} to compute geodesics on <b>implicit</b> <b>surfaces</b> and point clouds. Our framework {{consists of three}} parts, particle based approximate geodesics on <b>implicit</b> <b>surfaces,</b> Cartesian grid based approximate geodesics on point clouds, and geodesic correction. The first two parts can effectively generate approximate geodesics on <b>implicit</b> <b>surfaces</b> and point clouds, respectively. By introducing the geodesic curvature flow, the third part produces smooth and accurate geodesic solutions. Differing {{from most of the}} existing methods, our algorithms can converge to a given tolerance. The presented computational framework is suitable for arbitrary implicit hypersurfaces or point clouds with high genus or high curvature...|$|R
40|$|We discuss {{adaptive}} enumeration and rendering {{methods for}} <b>implicit</b> <b>surfaces,</b> using octrees computed with affine arithmetic, a new tool for range analysis. Affine arithmetic {{is similar to}} standard interval arithmetic, but takes into account correlations between operands and sub-formulas, generally providing much tighter bounds for the computed quantities. The resulting octrees are accordingly much smaller, and the rendering faster. We also describe applications of affine arithmetic to intersection and ray tracing of <b>implicit</b> <b>surfaces.</b> keywords: cellular models, interval analysis, rendering, <b>implicit</b> <b>surfaces.</b> 1 Introduction <b>Implicit</b> <b>surfaces</b> have recently become popular in computer graphics and solid modeling. In order to exploit existing hardware and algorithms, it is often necessary to approximate such surfaces by models with simpler geometry, such as polygonal meshes or voxel arrays. Let S be a surface defined implicitly by the equation h(x; y; z) = 0. A simple and general techn [...] ...|$|R
40|$|We are {{concerned}} with producing high quality images of parametric and <b>implicit</b> <b>surfaces,</b> in particular those with non-manifold features. We present a point based technique for rendering <b>implicit</b> <b>surfaces</b> that uses octree spatial subdivision with a natural interval exclusion test that guarantees that no parts of the surface are missed. This allows us to render non-manifold <b>implicit</b> <b>surfaces</b> at speeds comparable to parametric surfaces. We also derive criteria that guarantee complete pixel coverage of the surface. The point based method allows for hidden surface elimination using a z-buffer, and shadow casting using a shadow buffer. We illustrate the techniques {{with a number of}} surfaces, and discuss their advantages and disadvantages...|$|R
5000|$|For {{the picture}} the four charges equal 1 and are {{located at the}} points [...] The {{displayed}} surface is the equipotential surface (<b>implicit</b> <b>surface)</b> [...]|$|E
50|$|An <b>implicit</b> <b>surface</b> is {{the set of}} zeros of a {{function}} of 3 variables. Implicit means, that the equation is not solved for x or y or z.|$|E
5000|$|Throughout the {{following}} considerations the <b>implicit</b> <b>surface</b> {{is represented by}} an equation [...] where function [...] meets the necessary conditions of differentiability. The partial derivatives of are [...]|$|E
40|$|Virtual {{presence}} and cross-reality interactions. Enhanced techniques for HMD-based virtual reality systems. Virtual Reality, Augmented Reality, Mixed Reality systems and applications. 3 D Human Computer interfaces and 3 D UI metaphors. Motion representation and editing. Shape representation, level of detail. <b>Implicit</b> <b>surfaces</b> and convolution surfaces: modeling, rendering, animation. Modeling of natural phenomena with <b>implicit</b> <b>surfaces.</b> Physically-based modeling and simulation. High-quality rendering...|$|R
40|$|We present BlobMaker, {{a program}} for {{modelling}} <b>surfaces</b> using variational <b>implicit</b> <b>surfaces.</b> Our approach uses variational <b>implicit</b> <b>surfaces</b> as a geometrical representation for free-form shapes. We have implemented new modelling operations to support stroke (pen-based) input. To this end, we have built a complete modeller application using variational <b>implicit</b> <b>surfaces.</b> Users can create and manipulate shapes using sketches on a perspective or parallel view. The main operations are inflate, which creates 3 D forms from a 2 D stroke, merge, which creates a 3 D shape from two blobs and oversketch, which allows users to redefine shapes using a single stroke to change their boundaries or to modify a <b>surface</b> by an <b>implicit</b> extrusion. We compare these techniques {{with those of other}} approaches published. Finally, we describe their implementation in BlobMaker. We have provided additional features such as copying, picking and dragging to offer a natural user interface suitable free-form modelling. 1. 1 Keywords Stroke based modelling application, variational <b>implicit</b> <b>surfaces</b> 2...|$|R
40|$|In {{this short}} paper {{we present a}} case study of {{creating}} a character using <b>implicit</b> <b>surfaces</b> and developing an animation sequence which brings it to life. We show some problems specific to <b>implicit</b> <b>surfaces</b> and discuss solutions we used to deal with them. Basic knowledge of animation techniques and <b>implicit</b> <b>surfaces</b> terminology is assumed. Introduction Over the years traditional animators have developed a wide range of tricks, hints and rules to create better "illusion of life" with their drawings [5]. Lasseter [2] shows how these principles can be successfully applied to computer generated character animation. He created a memorable character, Luxo Jr., a young anglepoise lamp. In our project, we wanted to achieve a similarly entertaining effect using <b>implicit</b> <b>surfaces.</b> As traditional animation suggests, motion is more important in conveying a character's personality than its appearance. Therefore, we have put more effort into motion design than modelling. We will present the develop [...] ...|$|R
5000|$|An <b>implicit</b> <b>surface</b> in a Euclidean space (or, more generally, in an affine space) of {{dimension}} 3 is {{the set of}} {{the common}} zeros of a differentiable function of three variables ...|$|E
5000|$|Implicit means, {{that the}} {{equation}} defines implicitly {{one of the}} variables {{as a function of}} the other variables. This is made more explicit by the implicit function theorem: if , and the partial derivative in [...] of [...] is not zero at , then there exists a differentiable function [...] such thatin a neighbourhood of [...] In other words, the <b>implicit</b> <b>surface</b> is the graph of a function near a point of the surface where the partial derivative in [...] is nonzero. An <b>implicit</b> <b>surface</b> has thus, locally, a parametric representation, except at the points of the surface where the three partial derivatives are zero.|$|E
50|$|For example, an {{implicit}} curve is a level curve, {{which is considered}} independently of its neighbor curves, emphasizing that such a curve is defined by {{an implicit}} equation. Analogously, a level surface is sometimes called an <b>implicit</b> <b>surface</b> or an isosurface.|$|E
40|$|<b>Implicit</b> <b>Surfaces</b> are {{particularly}} {{suitable for the}} animation of deformable objects, although some problems still remain, especially in real time applications. One problem is that of volume loss when objects are squashed. This paper presents a real time solution {{for the preservation of}} volume using dynamic creation of primitives in two dimensions. We also look at the unwanted blending problem and propose a more efficient solution. Keywords: <b>Implicit</b> <b>Surfaces,</b> Volume Preservation, Unwanted Blending, Real Time Animation. 1 Introduction As time has passed, and the power of computers has increased dramatically, problems that could only be solved off line are now becoming real time issues. One such problem is that of animating deformable objects. These are objects whose topology can change over time and which can join and separate. The use of <b>Implicit</b> <b>Surfaces</b> provides an elegant solution to these problems. The idea of <b>Implicit</b> <b>Surfaces</b> has been around for over 15 years and was init [...] ...|$|R
5000|$|A further {{simple method}} to {{generate}} new <b>implicit</b> <b>surfaces</b> is called metamorphoses of implicit surfaces: ...|$|R
40|$|Abstract. This paper {{presents}} a technique for mixing <b>implicit</b> <b>surfaces</b> and mesh models in character modeling and animation. <b>Implicit</b> <b>surfaces</b> provide an organic aspect to standard triangle meshes {{and are used}} to add specific features. We propose a method for generating a smooth mesh from both a coarse triangle mesh and implicit primitives. The final model may be animated and displayed in real time...|$|R
50|$|Some {{topics in}} {{computer}} graphics include user interface design, sprite graphics, vector graphics, 3D modeling, shaders, GPU design, <b>implicit</b> <b>surface</b> visualization with ray tracing, and computer vision, among others. The overall methodology depends {{heavily on the}} underlying sciences of geometry, optics, and physics.|$|E
50|$|If f is {{a smooth}} {{function}} from R3 to R whose gradient is nowhere zero, then {{the locus of}} zeros of f does define a surface, known as an <b>implicit</b> <b>surface.</b> If the condition of non-vanishing gradient is dropped, then the zero locus may develop singularities.|$|E
5000|$|A point [...] of {{the contour}} line of an <b>implicit</b> <b>surface</b> with {{equation}} [...] and parallel projection with direction [...] has {{to fulfill the}} condition , because [...] {{has to be a}} tangent vector, which means any contour point is a point of the intersection curve of the two implicit surfaces ...|$|E
40|$|Computational geometry, {{computer}} graphics and applications. Virtual Reality, augmented Reality, mixed Reality systems. 3 D Human Computer interfaces and 3 D UI metaphors. Enhanced rendering techniques for HMD-based virtual reality systems. Virtual presence and cross-reality interactions. Motion representation and editing. Shape representation, level of detail. <b>Implicit</b> <b>surfaces</b> and convolution surfaces: modeling, rendering, animation. Modeling of natural phenomena with <b>implicit</b> <b>surfaces.</b> Physically-based modeling and simulation. High-quality rendering...|$|R
40|$|We discuss {{adaptive}} enumeration and rendering {{methods for}} <b>implicit</b> <b>surfaces,</b> using octrees computed with affine arithmetic, a new tool for range analysis. Affine arithmetic {{is similar to}} standard interval arithmetic, but takes into account correlations between operands and sub-formulas, generally providing much tighter bounds for the computed quantities. The resulting octrees are accordingly much smaller, and the rendering faster. Keywords: Cellular models; Interval arithmetic; Affine Arithmetic; Rendering; <b>Implicit</b> <b>surfaces...</b>|$|R
40|$|Abstractâ€”This paper {{presents}} a general approach for designing and animating complex deformable models with <b>implicit</b> <b>surfaces.</b> <b>Implicit</b> <b>surfaces</b> are introduced {{as an extra}} layer coating any kind of structure that moves and deforms over time. Offering a compact definition of a smooth surface around an object, they provide an efficient collision detection mechanism. The implicit layer deforms in order to generate exact contact surfaces between colliding bodies. A simple physically based model approximating elastic behavior is then used for computing collision response. The implicit formulation also eases {{the control of the}} objectâ€™s volume with a new method based on local controllers. We present two different applications that illustrate the benefits of these techniques. First, the animation of simple characters made of articulated skeletons coated with implicit flesh exploits the compactness and enhanced control of the model. The second builds on the specific properties of <b>implicit</b> <b>surfaces</b> for modeling soft inelastic substances capable of separation and fusion that maintain a constant volume when animated. Index Termsâ€”Animation, <b>implicit</b> <b>surfaces,</b> deformable models, collision detection, collision response, inelasticity. â€”â€”â€”â€”â€”â€”â€”â€”â€” â€” F â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”...|$|R
