1413|132|Public
2500|$|Byzantine fault {{tolerance}} mechanisms use components that repeat an incoming message (or just its signature) to other recipients of that incoming message. [...] All these mechanisms make {{the assumption that}} the act of repeating a message blocks the propagation of Byzantine symptoms. [...] For systems that have a high degree of safety or security criticality, these assumptions must be proven to be true to an acceptable level of <b>fault</b> <b>coverage.</b> [...] When providing proof through testing, one difficulty is creating a sufficiently wide range of signals with Byzantine symptoms. [...] Such testing likely will require specialized fault injectors.|$|E
50|$|A pattern {{set with}} 100% stuck-at <b>fault</b> <b>coverage</b> {{consists}} of tests to detect every possible stuck-at fault in a circuit. 100% stuck-at <b>fault</b> <b>coverage</b> {{does not necessarily}} guarantee high quality, since faults of many other kinds often occur (e.g. bridging faults, opens faults, delay faults).|$|E
50|$|<b>Fault</b> <b>coverage</b> {{refers to}} the {{percentage}} of some type of fault that can be detected during the test of any engineered system. High <b>fault</b> <b>coverage</b> is particularly valuable during manufacturing test, and techniques such as Design For Test (DFT) and automatic test pattern generation are used to increase it.|$|E
40|$|As digital {{instrumentation}} {{and control}} (I&C) systems are gradually introduced into nuclear power plants (NPPs), concerns about the I&C systems' reliability and safety are growing. <b>Fault</b> detection <b>coverage</b> {{is one of the}} most critical factors in the probabilistic safety assessment (PSA) of digital I&C systems. To correctly estimate the <b>fault</b> detection <b>coverage,</b> it is first necessary to identify important factors affecting it. From experimental results found in the literature and the authors' experience in fault injection experiments on digital systems, four system-related factors and four fault-related factors are identified as important factors affecting the <b>fault</b> detection <b>coverage.</b> A <b>fault</b> injection experiment is performed to demonstrate the dependency of <b>fault</b> detection <b>coverage</b> on some of the identified important factors. The implications of the experimental results on the estimation of <b>fault</b> detection <b>coverage</b> for the PSA of digital I&C systems are also explained. The set of four system-related factors and four fault-related factors is expected to provide a framework for systematically comparing and analyzing various fault injection experiments and the resultant estimations on <b>fault</b> detection <b>coverage</b> of digital I&C systems in NPPsclos...|$|R
40|$|A testing {{approach}} {{targeted at}} Hardware Description Language (HDL) -based specifications of complex control devices is proposed. For such architectures, gate-level test pattern generators require insertion of scan paths {{to enable the}} flat gate-level representations to be efficiently handled. In contrast, we present a testing methodology based on the hierarchical finite state machine model. Our approach allows the generation of compact test sets with very high stuck-at <b>fault</b> <b>coverages,</b> without any design-for-testability logic other than hardware reset. This method can be used any time the functional information is available together with the gate-level structural description. High <b>fault</b> <b>coverages</b> are achieved with smaller test lengths and execution times with respect to state-of-the-art gate-level test pattern generator...|$|R
5000|$|<b>Fault</b> {{detection}} <b>coverage</b> {{that system}} built-in test will realize ...|$|R
50|$|It is {{used for}} {{refining}} both the test circuitry and the test patterns iteratively, until a satisfactory <b>fault</b> <b>coverage</b> is obtained.|$|E
50|$|Testing very-large-scale {{integrated}} circuits {{with a high}} <b>fault</b> <b>coverage</b> is a difficult task because of complexity.Therefore many different ATPG methods {{have been developed to}} address combinational and sequential circuits.|$|E
5000|$|A {{series of}} tests for stuck-at faults will often, purely by serendipity, find {{a large number of}} other faults, such as stuck-open faults. This is {{sometimes}} called [...] "windfall" [...] <b>fault</b> <b>coverage.</b>|$|E
40|$|International audienceThe {{domain of}} fault {{simulation}} for digital circuits described at the RT-level is currently under heavy researches. The goal of these researches is to deﬁne a fast and efﬁcient methodology for the validation of test patterns {{very early in}} the design ﬂow. We propose in this article a new approach for the modeling and the simulation of behavioral faults for digital circuits described in the VHDL language, using a discrete event approach. This methodology, based on the DEVS formalism, is implemented in a working prototype, and experimental results show the correctness of our approach and the efﬁciency of our behavioral fault simulator called BFS-DEVS. The fault model used to validate our results is essentially based on the stuck-at fault model since a good simple stuck-at <b>faults</b> <b>coverage</b> rate implies a good real <b>faults</b> <b>coverage</b> rate...|$|R
40|$|This paper {{presents}} an efficient and novel method for sequential learning of implications, invalid states, and tied gates. It can handle real industrial circuits, with multiple clock domains and partial set/reset. The {{application of this}} method to improve the efficiency of sequential ATPG is also demonstrated by achieving higher <b>fault</b> <b>coverages</b> and lower test generation times. 2...|$|R
40|$|For combinational circuits, {{algorithms}} {{and programs}} ex-ist that provide acceptable <b>fault</b> <b>coverages</b> with 100 % fault efficiency. The same performance {{has not been}} possible forsequential ATPG, {{and that is the}} main reason for the widespread acceptance of the full-scan design [6]. However, con-cerns about the full-scan overheads of area, delay and test application time have motivated designers and researchers toexplore partial-scan techniques [1]...|$|R
50|$|In most cases, safety-critical {{applications}} have strict constraints {{in terms}} of memory occupation and system performance. The duplication of the whole set of variables {{and the introduction of}} a consistency check before every read operation represent the optimum choice from the <b>fault</b> <b>coverage</b> point of view. Duplication of the whole set of variables enables an extremely high percentage of faults to be covered by this software redundancy technique. On the other side, by duplicating a lower percentage of variables one can trade off the obtained <b>fault</b> <b>coverage</b> with the CPU time overhead.The experimental result shows that duplicating only 50% of the variables is enough to cover 85% of faults with a CPU time overhead of just 28%.|$|E
50|$|Scan-based DFT is {{the most}} widely used DFT scheme for {{integrated}} circuit testing as it is simple and yields high <b>fault</b> <b>coverage.</b> The advantage of scan-based testing is that it provides full observability and controllability of the internal nodes of the IC.|$|E
50|$|Pseudorandom test {{generation}} is the simplest method of creating tests. It uses a pseudorandom number generator to generate test vectors, and relies on logic simulation to compute good machine results, and fault simulation {{to calculate the}} <b>fault</b> <b>coverage</b> of the generated vectors.|$|E
40|$|In current paper, a novel {{high-level}} symbolic path activation {{technique for}} sequential circuit test generation is proposed. The technique has been implemented {{as a part}} of a hierarchical ATPG tool which utilizes internal representation of multi-level (register-transfer and structural levels) decision diagram models. Experiments show that the proposed method allows to reach high <b>fault</b> <b>coverages</b> for circuits with complex sequential structures in a very short time...|$|R
40|$|Abstract. Current paper aims at {{improving}} the test generation at registertransfer level by proposing a new functional fault model as a complement to the hierarchical model to target single-stuck at faults in hierarchical designs. Experiments on different sequential benchmarks {{show that the}} new fault model allows to significantly increase the accuracy of hierarchical test generation in comparison to traditional approaches. Very high <b>fault</b> <b>coverages</b> are achieved for sequential designs, whose sizes exceed 1000 gates. ...|$|R
40|$|Gate-level {{test pattern}} {{generators}} require insertion of scan paths {{to handle the}} flat gate-level representation of a large sequential controller. In contrast, we present a testing methodology based on the hierarchical finite state machine model. Such a model is used to specify very complex control devices {{by means of a}} top-down design approach. Our approach allows the generation of compact test sets with very high stuck-at <b>fault</b> <b>coverages,</b> without any DfT logic...|$|R
50|$|The same {{functionality}} {{which makes}} a debugger useful for eliminating bugs allows it {{to be used as}} a software cracking tool to evade copy protection, digital rights management, and other software protection features. It often also makes it useful as a general verification tool, <b>fault</b> <b>coverage,</b> and performance analyzer, especially if instruction path lengths are shown.|$|E
50|$|In general, overclockers {{claim that}} testing can ensure that an overclocked system is stable and {{functioning}} correctly. Although software tools {{are available for}} testing hardware stability, it is generally impossible for any private individual to thoroughly test the functionality of a processor. Achieving good <b>fault</b> <b>coverage</b> requires immense engineering effort; even {{with all of the}} resources dedicated to validation by manufacturers, faulty components and even design faults are not always detected.|$|E
50|$|The Société de l'assurance {{automobile}} du Québec or SAAQ (Quebec Automobile Insurance Corporation) is a Quebec crown corporation {{responsible for}} licensing drivers and {{vehicles in the}} province and providing public auto insurance which insures all drivers, passengers, pedestrians, bicyclists and motorcyclists involved in road collisions {{whether or not they}} are at <b>fault.</b> <b>Coverage,</b> however, is limited to personal injuries — damage to property is covered by private insurers.|$|E
40|$|A novel {{approach}} to testing sequential circuits that uses multi-level decision diagram representations is intro-duced. The proposed algorithm {{consists of a}} combination of scanning and conformity test generation procedures. Structural faults in both, datapath and control part are targeted. High-level simplified and fast symbolic path activation strategy is combined with random local test pattern generation for functional units. Current approach has achieved high <b>fault</b> <b>coverages</b> for known sequential circuit benchmarks in a very short time. 1...|$|R
40|$|The goal of {{the paper}} is to propose a set of {{dedicated}} fault models targeting single stuck-at faults in hierarchical designs. These include hierarchical fault model for Functional Units, a functional model for multiplexers and a combined hierarchical-functional fault model for conditional operations. In the paper, the new fault models have been integrated to a high-level test path activation tool DECIDER. As comparative experiments show, extremely high <b>fault</b> <b>coverages</b> are achieved for sequential benchmarks with short run times...|$|R
40|$|A new {{approach}} for sequential circuit test genera-tion is proposed that combines software testing based techniques {{at the high}} level with test enhancement tech-niques at the gate level. Several sequences are derived to ensure 100 % coverage of all statements in a high-level VHDL description, or to maximize coverage of paths. The sequences are then enhanced at the gate level to maximize coverage of single stuck-at <b>faults.</b> High <b>fault</b> <b>coverages</b> have been achieved very quickly on several benchmark circuits using this approach. ...|$|R
50|$|A <b>fault</b> <b>coverage</b> test passes when {{at least}} a {{specified}} percentage of all possible faults can be detected. If it does not pass, at least three options are possible. First, the designer can augment or otherwise improve the vector set, perhaps by using a more effective automatic test pattern generation tool. Second, the circuit may be re-defined for better fault detectibility (improved controllability and observability). Third, the designer may simply accept the lower coverage.|$|E
5000|$|Byzantine fault {{tolerance}} mechanisms use components that repeat an incoming message (or just its signature) to other recipients of that incoming message. All these mechanisms make {{the assumption that}} the act of repeating a message blocks the propagation of Byzantine symptoms. For systems that have a high degree of safety or security criticality, these assumptions must be proven to be true to an acceptable level of <b>fault</b> <b>coverage.</b> When providing proof through testing, one difficulty is creating a sufficiently wide range of signals with Byzantine symptoms. [...] Such testing likely will require specialized fault injectors.|$|E
5000|$|The {{functional}} verification data are usually called [...] "test vectors". The functional test vectors may be preserved {{and used in}} the factory to test that newly constructed logic works correctly. However, functional test patterns don't discover common fabrication faults. Production tests are often designed by software tools called [...] "test pattern generators". These generate test vectors by examining {{the structure of the}} logic and systematically generating tests for particular faults. This way the <b>fault</b> <b>coverage</b> can closely approach 100%, provided the design is properly made testable (see next section).|$|E
40|$|In this paper, scan {{and ring}} schemes of the pseudo-ring memory {{self-testing}} are investigated. Both schemes {{are based on}} emulation of the linear or nonlinear feedback shift register by memory itself. Peculiarities of the pseudo-ring schemes implementation for multi-port and embedded memories, and for register file are described. It is shown that only small additional logic is required and allows microcontrollers at-speed testing. Moreover, posteriori values are given for some types of memories <b>faults</b> <b>coverage</b> when pseudo-ring testing schemes are applied...|$|R
40|$|This paper {{proposes a}} {{realistic}} memory fault probability model which predicts the probabilities of memory fault classes {{for a given}} process technology. Physical defects in the memory array are classified into five functional fault classes, which are stuck-at, stuck-open, transition, coupling, and data retention faults. Finally, the memory <b>fault</b> <b>coverages</b> of the known memory test algorithms are evaluated based on their functional <b>fault</b> class <b>coverages.</b> 1. INTRODUCTION The functional memory fault model makes memory fault analysis more feasible, and easier {{because the number of}} functional faults are very small compared with the number of possible physical defects. Previous work by Dekker [4][5] showed the possibility of functional fault analysis for static random access memories. He analyzed memory defects based on their sizes, and classified the defects into six functional fault classes which are stuck [...] at, stuck [...] open, transition, state coupling, idempotent coupling, and data retention [...] ...|$|R
40|$|A Design-for-Testability {{implementation}} {{to achieve}} high <b>fault</b> <b>coverages</b> in the analogue functional blocks of mixed circuit ASICs {{is presented in}} this feasibility study. To this end existing OpAmps or OTAs are converted into clocked comparators with hysteresis and variable reference levels. The resulting two-mode comparators are connected to specific internal nodes. Depending on the mode this node can be either statically and/or dynamically evaluated on-chip without the need to bring an analogue signal off-chip. Results from first simulations and measurements on a test circuit realised in 0. 35 µm technology are presented. I...|$|R
5000|$|Beginning in 2010, ULA did {{design and}} {{simulation}} work to human-rate the Atlas V for carrying passengers. ULA won a 2010 small contract of [...] {{in the first}} phase of the NASA Commercial Crew Development Program (CCDev) to develop an Emergency Detection System (EDS) for human-rating the Atlas V launch vehicle., ULA [...] "is still finishing up work on its $6.7-million award... In December ULA carried out a demonstration of its Emergency Detection System ... The company said it received an extension from NASA until April 2011 'to enable us to finish critical timing analyses tasks' for the <b>fault</b> <b>coverage</b> analysis work." ...|$|E
50|$|But {{testing the}} device for all {{parameters}} {{may or may}} not be required depending on the device functionality and end user. For example, if the device finds application in medical or life-saving products then many of its parameters must be tested, and some of the parameters must be guaranteed. But deciding on the parameters to be tested is a complex decision based on cost vs yield. If the device is a complex digital device, with thousands of gates, then test <b>fault</b> <b>coverage</b> has to be calculated. Here again, the decision is complex based on test economics, based on frequency, number and type of I/Os in the device and the end-use application.|$|E
50|$|In {{electronics}} for example, stuck-at <b>fault</b> <b>coverage</b> {{is measured}} by sticking each pin of the hardware model at logic '0' and logic '1', respectively, and running the test vectors. If {{at least one of}} the outputs differs from what is to be expected, the fault is said to be detected. Conceptually, the total number of simulation runs is twice the number of pins (since each pin is stuck in one of two ways, and both faults should be detected). However, there are many optimizations that can reduce the needed computation. In particular, often many non-interacting faults can be simulated in one run, and each simulation can be terminated as soon as a fault is detected.|$|E
40|$|Abstract:- A GA based {{sequential}} circuit test generator is presented. In {{addition to the}} typical GA operations knowledge extracted during the evolutionary process is used to further guide test generation. Population sequences having low fitness values but detect different faults, which otherwise would be discarded, are combined and specially compressed into a single sequence that covers, at least, the faults of each individual sequence. This technique combined with specialized GA operators leads to higher <b>fault</b> <b>coverages</b> at shorter computation times. Experimental results support {{the usefulness of the}} proposed method...|$|R
40|$|This paper {{presents}} a decentralized BIST methodology for system level interconnects. For 3 -state nets, we interleave pseudorandom counting sequences (PCS) and walking sequences {{to avoid the}} conflict among multiple drivers of a net. For multiple scan chains, each chain is applied with a particular window of the PCS to ensure the distinctness of every test vector and 100 # stuck-at and short <b>faults</b> <b>coverage</b> for nets across scan chains and/or board boundaries. The synchronization of chains of different lengths is handled gracefully by inserting a preamble {{to make all the}} chains the same length...|$|R
40|$|Abstract. Rapid {{advances}} of semiconductor technology {{lead to higher}} circuit integration as well as higher operating frequencies. The statistical variations of the parameters during the manufacturing process {{as well as physical}} defects in integrated circuits can sometimes degrade circuit performance without altering its logic functionality. These faults are called delay faults. In this paper we consider the quality of the tests generated for two types of delay faults, namely, functional delay and transition faults. We compared the test quality of functional delay tests in regard to transition faults and vice versa. We have performed various comprehensive experiments with combinational benchmark circuits. The experiments exhibit that the test sets, which are generated according to the functional delay fault model, obtain high <b>fault</b> <b>coverages</b> of transition <b>faults.</b> However, the functional delay <b>fault</b> <b>coverages</b> of the test sets targeted for the transition faults are low. It is very likely that the test vectors based on the functional delay fault model can cover other kinds of the faults. Another advantage of test set generated at the functional level is that it is independent of and effective for any implementation and, therefore, can be generated at early stages of the design process. 1. Indroduction Rapid {{advances of}} semiconductor technology lead to higher circuit integration as well as higher operating frequencies. Conventional fault models like the standar...|$|R
