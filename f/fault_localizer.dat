3|4|Public
40|$|Abstract. Spurious {{noise in}} car cabinet can {{be not only}} {{annoying}} bust also indicative of some potential faults. A small square microphone array with 4 sensors was adopted in this paper to localize the sound source in car for fault diagnosis. A new voice activity detection (VAD) algorithm was proposed for the typical discontinuous short-time noise in car due to some fault and applied to direction of arrival (DOA) estimation as a pre-processing stage. Four different time delay estimation methods were compared based on the measurements from a typical passenger. Experimental results illustrate that the VAD algorithm is crucial to achieve robust fault localization performance and the generalized cross-correlation method with phase transform weighting function is an appropriate <b>fault</b> <b>localizer</b> in car. 1...|$|E
40|$|Fault {{localization}} is {{an essential}} step for debugging, {{even though it is}} a still tedious and time-consuming activity. For decades, many researchers have tried to find a good way for more effective testing. We are also studying about fault localization via various method. Especially, we perform an empirical evaluation for existing 32 algorithms that are prominent in the domain of spectrum-based fault localization. Through the evaluation, we analyze them with some properties such as accuracy, and categorize them with a clustering method. Based on the analysis result, we suggest new formulas, and technique of test case optimization. These formulas, named SEM(Sungkyunkwan Enhanced Method), can cover the weakness of each catego-rized group, and test case optimization method can maximize performance using minimum test cases. These two methods individually out-performs previously proposed methods. When both methods are used together, the performance is maximized with respect to accuracy, and cost. In experimental result, EXAM score is reduced by maximum 29. 41 %, and code coverage is reduced by maximum 42. 21 %. In addition, all the ex-perimental effort is performed with a tool, named SKKU_FL(SungKyunKwanUniversity <b>Fault</b> <b>Localizer),</b> which has been developed by us. The goal {{of this paper is to}} provide an accurate testing guideline by sug-gesting methods such as SEM, and test case optimization. Ultimately we help testers to reduce time, and costs for effective test...|$|E
40|$|This paper {{presents}} {{an approach to}} automatically analyzing program spectra, an execution profile of program testing results for fault localization. Using a mathematical theory of evidence for uncertainty reasoning, the proposed approach estimates the likelihood of faulty locations based on evidence from program spectra. Our approach is theoretically grounded and can be computed online. Therefore, we can predict fault locations immediately after each test execution is completed. We evaluate the approach by comparing its performance with the top three performing <b>fault</b> <b>localizers</b> using a benchmark set of real-world programs. The results show that our approach {{is at least as}} effective as others with an average effectiveness (the reduction of the amount of code examined to locate a fault) of 85. 6 % over 119 versions of the programs. We also study the quantity and quality impacts of program spectra on our approach where the quality refers to the spectra support in identifying that a certain unit is faulty. The results show that the effectiveness of our approach slightly improves with a larger number of failed runs but not with a larger number of passed runs. Program spectra with support quality increases from 1 % to 100 % improves the approach's effectiveness by 3. 29 %...|$|R
40|$|The {{increase}} in the number of renewable energy generating facilities has transformed the electricity distribution network into a Distributed Generation (DG) system. This has given rise to a new monitoring scenario for protective devices already installed across radial distribution networks, which may execute unexpected and inappropriate protective actions that cause loss of supply to consumers. These devices are affected by the new condition of the electricity distribution network, as network currents vary. A common practice is to use electrical impedance-based <b>fault</b> <b>localizers.</b> This work describes a novel method for fault detection in radial networks with DG, which does not require knowing the electrical impedances of the lines that compose the network. The method only requires input data regarding the short circuit currents provided by the main feeder and the DG units in the area in which a fault has occurred. This information is sufficient to allow the area where the fault lies to be identified. The underlying idea is that the measurement of the current at two points provides a binocular view of the fault, thus allowing its location to be pinpointed. The method was tested using the IEEE 13 -node test feeder system, locating different types of faults in different areas of a simulated radial network...|$|R
40|$|Machine-code slicing is an {{important}} primitive for building binary analysis and rewriting tools, such as taint trackers, <b>fault</b> <b>localizers,</b> and partial evaluators. However, {{it is not easy}} to create a machine-code slicer that exhibits a high level of precision. Moreover, the problem of creating such a tool is compounded by the fact that a small amount of local imprecision can be amplified via cascade effects. Most instructions in instruction sets such as Intel's IA- 32 and ARM are multi-assignments: they have several inputs and several outputs (registers, flags, and memory locations). This aspect of the instruction set introduces a granularity issue during slicing: there are often instructions at which we would like the slice to include only a subset of the instruction's multiple assignments, whereas the slice is forced to include the entire instruction. Consequently, the slice computed by state-of-the-art tools is very imprecise, often including essentially the entire program. We present an algorithm to slice machine code more accurately. To counter the granularity issue, our algorithm attempts to include in the slice only the subset of assignments in an instruction's semantics that is relevant to the slicing criterion. Our experiments on IA- 32 binaries of FreeBSD utilities show that, in comparison to slices computed by a state-of-the-art tool, our algorithm reduces the number of instructions in backward slices by 36 %, and in forward slices by 82 %...|$|R
40|$|Software {{failures}} are not {{rare and}} fault localizations always an important but laborious activity. Since {{there is no}} guarantee that no more than one fault exists in a faulty program, the approach to locate all the faults is necessary. Spectrum-based fault localization techniques collect dynamic program spectra as well as test results of program runs, and estimate the extent of program elements being related to fault(s). A popular solution into generate a ranked list of suspicious candidates, which are checked in order, stopping whenever a fault is found. Such single <b>fault</b> <b>localizers</b> locate one <b>fault</b> in one checking round, terminate, and wait to be triggered by the regression testing to validate the fixing of the located fault. In this paper, we study the manifestation of multiple faults in a program and propose an effective mechanism to indicate their presence. When a fault is reached during the checking round, we use it to interpret the failures observed, and update the indicator to judge whether there remain other faults in the program. Our indicator serves as a stopping criterion of checking the ranked list of suspicious candidates. Our work factories the multiple fault localization problem into developing single-fault localizers and adapting them to multi-fault programs. It both improves the fault localization efficiencies of single-fault localizers, and avoids the ineffective efforts of thoroughly abandoning the many single-fault localizers to develop multi-fault localizers. © 2012 IEEE. IEEE Hong Kong Section Computer Society Chapter; ACM Hong Kong ChapterSoftware failures are not rare and fault localizations always an important but laborious activity. Since {{there is no guarantee}} that no more than one fault exists in a faulty program, the approach to locate all the faults is necessary. Spectrum-based fault localization techniques collect dynamic program spectra as well as test results of program runs, and estimate the extent of program elements being related to fault(s). A popular solution into generate a ranked list of suspicious candidates, which are checked in order, stopping whenever a fault is found. Such single <b>fault</b> <b>localizers</b> locate one <b>fault</b> in one checking round, terminate, and wait to be triggered by the regression testing to validate the fixing of the located fault. In this paper, we study the manifestation of multiple faults in a program and propose an effective mechanism to indicate their presence. When a fault is reached during the checking round, we use it to interpret the failures observed, and update the indicator to judge whether there remain other faults in the program. Our indicator serves as a stopping criterion of checking the ranked list of suspicious candidates. Our work factories the multiple fault localization problem into developing single-fault localizers and adapting them to multi-fault programs. It both improves the fault localization efficiencies of single-fault localizers, and avoids the ineffective efforts of thoroughly abandoning the many single-fault localizers to develop multi-fault localizers. © 2012 IEEE...|$|R

