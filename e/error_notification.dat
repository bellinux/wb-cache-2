27|25|Public
5000|$|... 2. An <b>error</b> <b>notification.</b> This {{may happen}} when a request fails {{due to a}} parsing error, {{requester}} authentication failure, {{or anything else that}} prevented the DVCS from executing the request.|$|E
50|$|If {{the request}} was invalid, the DVCS generates a {{response}} message containing an appropriate <b>error</b> <b>notification.</b> Upon receiving the response, the requesting entity SHOULD verify its validity, i.e., whether it contains an acceptable time, the correct {{name for the}} DVCS, the correct request information and message imprint, a valid signature, and satisfactory status, service and policy fields.|$|E
50|$|The {{uppermost}} sublayer, LLC, multiplexes protocols {{running at}} the top of data link layer, and optionally provides flow control, acknowledgment, and <b>error</b> <b>notification.</b> The LLC provides addressing and control of the data link. It specifies which mechanisms are to be used for addressing stations over the transmission medium and for controlling the data exchanged between the originator and recipient machines.|$|E
40|$|<b>Error</b> <b>notifications</b> {{and their}} resolutions, as {{presented}} by modern IDEs, are still cryptic and confusing to developers. We propose an interaction-first approach to help develop-ers more effectively comprehend and resolve compiler <b>error</b> <b>notifications</b> through a conceptual interaction framework. We propose novel taxonomies {{that can serve}} as controlled vocabularies for compiler notifications and their resolutions. We use preliminary taxonomies to demonstrate, through a prototype IDE, how the taxonomies make notifications and their resolutions more consistent and unified...|$|R
40|$|Describes {{how to use}} Composite Application Validation System {{initiators}} and simulators to test AIA service integrations. Test initiators simulate service invocations and simulators simulate service endpoints. Describes how to use {{error handling}} and logging components, including <b>error</b> <b>notifications</b> and trace and error logs, to support service...|$|R
40|$|Abstract—Self-explanation is one {{cognitive}} strategy {{through which}} developers comprehend <b>error</b> <b>notifications.</b> Self-explanation, when left solely to developers, {{can result in}} a significant loss of productivity because humans are imperfect and bounded in their cognitive abilities. We argue that modern IDEs offer limited visual affordances for aiding developers with self-explanation, because compilers do not reveal their reasoning about the causes of errors to the developer. The contribution of our paper is a foundational set of visual annotations that aid developers in better comprehending error messages when compilers expose their internal reasoning. We demonstrate through a user study of 28 undergraduate Software Engineering students that our annotations align with the way in which developers self-explain <b>error</b> <b>notifications.</b> We show that these annotations allow developers to give significantly better self-explanations when compared against today’s dominant visualization paradigm, and that better self-explanations yield better mental models of notifications. The results of our work suggest that the diagrammatic techniques developers use to explain problems can serve as an effective foundation for how IDEs should visually communicate to developers. I...|$|R
5000|$|Conceptually, Postfix manages {{pipelines}} {{of processes}} that pass {{the responsibility for}} message delivery and <b>error</b> <b>notification</b> from one process to the next. All message and notification [...] "state" [...] information is persisted in the file system. The processes in a pipeline operate mostly without centralized control; this relative autonomy simplifies error recovery. When a process fails before completing its part of a file or protocol transaction, its predecessor in the pipeline backs off and retries the request later, and its successor in the pipeline discards unfinished work. Many Postfix daemons can simply [...] "die" [...] when they run into a problem; they are automatically restarted when the next service request arrives. This approach makes Postfix highly resilient, {{as long as the}} operating system or hardware don't fail catastrophically.|$|E
40|$|Experienced {{data entry}} {{operators}} {{participated in an}} experiment to evaluate {{the effects of the}} <b>error</b> <b>notification</b> timing on error correction performance irt the data entry task. Three timing strategies were studied: immediate <b>error</b> <b>notification,</b> notification {{at the end of a}} field, and notification at the end of a physical line. Based on a model of data entry and a model of the correction process hypotheses were developed to predict operator performance. It was conjectured that operators treat individual fields as separate units tasks and that interrupting within a task would be more disruptive than interrupting between tasks. The results of the study indicated that the error rates during correction were smaller for the end of line treatment although the time to complete the correction was longer for this treatment than the other two. Performance was essentially the same for those operators interrupted who were interrupted immediately and those who were interrupted at the end of a field. ...|$|E
40|$|This {{paper is}} {{a summary of}} the BBN Technical Report No. 8333, "Explicit Transport <b>Error</b> <b>Notification</b> for Error-Prone Wireless and In this study we discuss two types of Explicit Transport <b>Error</b> <b>Notification</b> (ETEN) {{mechanisms}}: (i) per-packet mechanisms that notify endpoints of each detected corruption; and (ii) cumulative mechanisms that notify endpoints of aggregate corruption statistics. We have implemented the proposed mechanisms in the ns- 2 simulator. We present simulation results on performance gains achievable for TCP Reno and TCP SACK, using ETEN mechanisms over a wide range of bit error rates and traffic conditions. We compare TCP Reno and TCP SACK enhanced with ETEN mechanisms against TCP Westwood, which uses a bandwidth estimation strategy in place of the traditional AIMD congestion avoidance algorithm. We discuss two issues related to the practical deployment of ETEN mechanisms: corruption detection mechanisms (and their co-operation with ETEN-based recovery in the transport layer) and security aspects. We include recommendations for further work...|$|E
50|$|With the {{implementation}} of their new LTE network, Yoigo's terminals suffered some <b>errors</b> with <b>notifications</b> on various applications like Twitter, Facebook and WhatsApp Messenger. The problem laid in delays in the reception of instantaneous notifications which required adjustments in the network configuration.|$|R
5000|$|New {{configurable}} sound {{events for}} Device Connect, Device Disconnect, Device Failed to Connect, Print Complete, New fax, Fax <b>Error,</b> System <b>Notification,</b> Windows Logon and Windows Logoff. Windows XP Service Pack 2 added sound events in Internet Explorer for Blocked pop-up {{window and the}} Information bar.|$|R
50|$|Hollicourt was a {{construction}} company {{and it went}} insolvent in 1996. The Bank of Ireland, 31 King Street, Leeds, continued to operate its account, paying money in and out, for three months after because it missed (through human <b>error)</b> the <b>notification</b> of the winding up petition in the Gazette.|$|R
40|$|Wireless and {{satellite}} networks have non-negligible error rates that can significantly influence TCP performance because TCP considers every packet loss {{as an indicator}} of congestion, and thus throttles the packet transmission rate. Explicit transport <b>error</b> <b>notification</b> (ETEN) mechanisms can aid TCP in distinguishing packets that are lost due to congestion from ones that are lost due to corruption. If TCP can retransmit a packet lost due to corruption without needlessly reducing the transmission rate, a performance benefit can be realized. In thi...|$|E
30|$|The scheme named {{explicit}} notification with ENIC [30] {{was proposed}} {{to solve the}} problem of TCP performance degradation due to route failure. ENIC uses an explicit route state notification (ERSN) mechanism for inter-process communication (IPC). The ERSN has two types of control messages: explicit route <b>error</b> <b>notification</b> (EREN), and explicit route recover notification (ERRN). For external process communication, ENIC uses routing protocol messages to feedback the route status. Route request (RREQ), route reply (RREP) and route error (RERR) are the three types of external routing messages amongst different nodes.|$|E
40|$|A {{high speed}} common data buffer system is {{described}} for providing an interface and communications medium between {{a plurality of}} computers utilized in a distributed computer complex forming part of a checkout, command and control system for space vehicles and associated ground support equipment. The system includes the capability for temporarily storing data to be transferred between computers, for transferring a plurality of interrupts between computers, for monitoring and recording these transfers, and for correcting errors incurred in these transfers. Validity checks are made on each transfer and appropriate <b>error</b> <b>notification</b> {{is given to the}} computer associated with that transfer...|$|E
5000|$|Homogeneous, unidirectional, and uniform. All {{events in}} the {{distributed}} flow serve the same functional and logical purpose, and are related to one another; generally, we require that they represent method calls or message exchanges between instances of the same functional layers, or instances of the same components, but perhaps on different nodes within a computer network. Furthermore, all events must flow {{in the same direction}} (i.e., one type of a layer or component always produces, and the other always consumes the events), and carry the same type of a payload. For example, a set of events that includes all multicast requests issued by the same application layer to the same multicast protocol is a distributed flow. On the other hand, a set of events that includes multicast requests made by different applications to different multicast protocols would not be considered a distributed flow, and neither would be a set of events that represent multicast requests as well as acknowledgments and <b>error</b> <b>notifications.</b>|$|R
50|$|In network {{management}}, {{fault management}} is {{the set of}} functions that detect, isolate, and correct malfunctions in a telecommunications network, compensate for environmental changes, and include maintaining and examining error logs, accepting and acting on <b>error</b> detection <b>notifications,</b> tracing and identifying faults, carrying out sequences of diagnostics tests, correcting faults, reporting error conditions, and localizing and tracing faults by examining and manipulating database information.|$|R
50|$|The UI {{specification}} is then {{written to}} describe the UI concept. The UI specification {{can be seen as}} an extension of the design draft that provides a complete description that contains all details, exceptions, <b>error</b> cases, <b>notifications,</b> and so forth. The amount of detail provided depends on the needs and characteristics of the development organization (scope of the product, culture of the organization, and development methodology used, among others). Usually, the UI concept and specifications are reviewed by the stakeholders to ensure that all necessary details are in place.|$|R
40|$|Wireless {{networks}} {{widely used}} in Internet nowadays have high error rates. Transmission Control Protocol (TCP) originally designed for wired links needs for improving its performance over wireless links. In other words congestion avoidance approach is not sufficient when packet losses in the wireless networks occur due to corruption. In this paper I describe the schemes namely Explicit Loss Notification Schemes (ELN schemes) or Explicit Transport <b>Error</b> <b>Notification</b> Schemes (ETEN schemes) that allow the transport protocol to distinguish between a loss due to congestion and a loss due to corruption in the wireless networks, yielding performance benefits...|$|E
40|$|In the {{interests}} of creating a user-friendly SAS system, it’s often {{a good idea to}} include code that checks for common errors, notifies the user and suggests possible solutions. Apart from simply delivering this information to the user, the use of customized message windows is also a good opportunity to express congratulations upon a successful run or even deliver a light-hearted finger wagging in the case of unexpected errors. Using SAS 9. 2, this paper will detail the steps necessary to include basic error messaging functionality in your SAS programs, covering both <b>error</b> <b>notification</b> and confirmation of successful program execution. In addition, through the use of system macro variables these feedback messages can surprise the user by ‘knowing ’ their name and addressing them directly...|$|E
40|$|On-demand routing {{protocols}} for mobile ad hoc networks utilize route caching in different forms {{in order to}} reduce the routing overheads as well as to improve the route discovery latency. For route caches to be effective, they need to adapt to frequent topology changes. Using an ondemand protocol called "Dynamic Source Routing" (DSR), we study the problem of keeping the caches up-to-date in dynamic ad hoc networks. Previous studies have shown that cache staleness in DSR can significantly degrade performance. We present and evaluate three techniques to improve cache correctness in DSR namely wider <b>error</b> <b>notification,</b> route expiry mechanism with adaptive timeout selection and the use of negative caches. Simulation results show that the combination of the proposed techniques not only result in substantial improvement of both application and cache performance but also reduce the overheads. ...|$|E
40|$|Background: Considering {{all sources}} of errors that may occur during healthcare, {{medication}} errors {{are the most common}} and also the most frequent cause of adverse events. Objective: the objective {{of the study was to}} describe the medication errors reported in a pediatric intensive care unit for oncologic patients. Methods: This is a descriptive and exploratory study. the errors were reported by the professionals involved in the medication system in a medication error report form developed for the study. Results: the sample consisted of 110 medication errors reported on 71 forms. the omission error was the most common error type reported (22. 7 %), followed by administration error (18. 2 %). No harm to patients was reported in 83. 1 % of the notifications. Conclusion: the analysis of the 110 medication errors provides evidence of the context of their occurrence and the need to implement measures that can prevent or intercept these errors. Implications for Practice: in an institution without adverse events report and a formal system to patient safety analysis, the implementation of a local nonpunitive approach to medication <b>errors</b> <b>notification</b> represented an important tool to patient safety promotion. Universidade Federal de São Paulo, Escola Paulista Enfermagem, BR- 04024002 São Paulo, BrazilUniversidade Federal de São Paulo, Escola Paulista Enfermagem, BR- 04024002 São Paulo, BrazilWeb of Scienc...|$|R
40|$|Background: Building {{models of}} {{molecular}} regulatory networks is challenging {{not just because}} of the intrinsic difficulty of describing complex biological processes. Writing a model is a creative effort that calls for more flexibility and interactive support than offered by many of today’s biochemical model editors. Our model editor MSMB— Multistate Model Builder — supports multistate models created using different modeling styles. Results: MSMB provides two separate advances on existing network model editors. (1) A simple but powerful syntax is used to describe multistate species. This reduces the number of reactions needed to represent certain molecular systems, thereby reducing the complexity of model creation. (2) Extensive feedback is given during all stages of the model creation process on the existing state of the model. Users may activate <b>error</b> <b>notifications</b> of varying stringency on the fly, and use these messages as a guide toward a consistent, syntactically correct model. MSMB default values and behavior during model manipulation (e. g., when renaming or deleting an element) can be adapted to suit the modeler, thus supporting creativity rather than interfering with it. MSMB’s internal model representation allows saving a model with errors and inconsistencies (e. g., an undefined function argument; a syntactically malformed reaction). A consistent model can be exported to SBML or COPASI formats. We show the effectiveness of MSMB’s multistate syntax through models of the cell cycle and mRNA transcription. Conclusions: Using multistate reactions reduces the number of reactions need to encode many biochemical network models. This reduces the cognitive load for a given model, thereby making it easier for modelers to build more complex models. The many interactive editing support features provided by MSMB make it easier for modelers to create syntactically valid models, thus speeding model creation. Complete information and the installation package can be found a...|$|R
50|$|Aptana Studio is an {{open source}} {{integrated}} development environment (IDE) for building web applications. Based on Eclipse, it supports JavaScript, HTML, DOM and CSS with code-completion, outlining, JavaScript debugging, <b>error</b> and warning <b>notifications</b> and integrated documentation. Additional plugins allow Aptana Studio to support Ruby on Rails, PHP, Python, Perl, Adobe AIR, Apple iPhone and Nokia WRT (Web Runtime). Aptana Studio is available as a standalone on Windows, Mac OS X and Linux, or as a plugin for Eclipse.|$|R
40|$|In {{this study}} we discuss two types of Explicit Transport <b>Error</b> <b>Notification</b> (ETEN) {{mechanisms}}: (i) per-packet mechanisms that notify endpoints of each detected corruption; and (ii) cumulative mechanisms that notify endpoints of aggregate corruption statistics. We have implemented the proposed mechanisms in the ns- 2 simulator. We present simulation results on performance gains achievable for TCP Reno and TCP SACK, using ETEN mechanisms {{over a wide range}} of bit error rates and traffic conditions. We compare TCP Reno and TCP SACK enhanced with ETEN mechanisms against TCP Westwood, which uses a bandwidth estimation strategy in place of the traditional AIMD congestion avoidance algorithm. We discuss two issues related to the practical deployment of ETEN mechanisms: corruption detection mechanisms (and their co-operation with ETEN-based recovery in the transport layer) and security aspects. We include recommendations for further work...|$|E
40|$|The Spitzer Telemetry Processing System (SirtfTlmProc) was {{designed}} to address objectives of JPL's Multi-mission Image Processing Lab (MIPL) in processing spacecraft telemetry and distributing the resulting data to the science community. To minimize costs and maximize operability, the software design focused on automated error recovery, performance, and information management. The system processes telemetry from the Spitzer spacecraft and delivers Level 0 products to the Spitzer Science Center. SirtfTlmProc is a unique system with automated <b>error</b> <b>notification</b> and recovery, with a real-time continuous service that can go quiescent after periods of inactivity. The software can process 2 GB of telemetry and deliver Level 0 science products to the end user in four hours. It provides analysis tools so the operator can manage the system and troubleshoot problems. It automates telemetry processing {{in order to reduce}} staffing costs...|$|E
30|$|Unlike the first, {{the second}} and {{subsequent}} fragments are protected from collisions by the Fragment−ACK handshake which also {{takes care of the}} hidden node problem. The way BFFR recovers from channel-error-induced frame loss, experienced by second and subsequent fragments, explains the observed improved performance in the metrics. CF has to contend for the channel to retransmit any fragment that is not acknowledged. BFFR, upon successful reception of <b>error</b> <b>notification</b> from the receiver, immediately retransmits the fragment without contending for the channel thus saving the time and energy that would otherwise be spent while in backoff. This results in higher throughput, energy efficiency and lower delay. The superiority of BFFR over CF when a realistic Internet traffic generator is used provides further evidence that, when it comes to multimedia services hungry handheld devices which rely on battery power, BFFR is a better candidate as compared to CF.|$|E
50|$|This {{operation}} {{is used by}} the PPG to inform the initiator of the final outcome of a push submission, if requested by the Push Initiator. This notification (arrow 5, below) tells the Push Initiator that the message was sent (transmitted, as in arrow 3), delivered (confirmation received from wireless device, as in arrow 4), it expired, was cancelled, or there was an error. If there was a processing <b>error,</b> the <b>notification</b> SHOULD be sent immediately upon detection of the error to the Push Initiator and the message should not be sent to the client. Otherwise, the notification MUST be sent after the message delivery process has been completed. The delivery process is considered completed when the message is no longer a candidate for delivery, e.g. the message has expired. If the push submission is indicated as rejected in step two in figure 3, then no result notification will be sent. The Push Initiator MUST have provided a return address (e.g. URL) during the push operation for this notification to be possible.|$|R
40|$|This {{document}} {{describes a}} mapping of the Stream Control Transmission Protocol (SCTP) into a sockets API. The {{benefits of this}} mapping include compatibility for TCP applications, access to new SCTP features, and a consolidated <b>error</b> and event <b>notification</b> scheme. Status of This Memo This document is not an Internet Standards Track specification; it is published for informational purposes. This document {{is a product of}} the Internet Engineering Task Force (IETF). It represents the consensus of the IETF community. It has received public review and has been approved for publication by the Internet Engineering Steering Group (IESG). Not all documents approved by the IESG are a candidate for any level of Internet Standard; see Section 2 of RFC 5741. Information about the current status of this document, any errata, and how to provide feedback on it may be obtained a...|$|R
40|$|The Genoa Active Message MAchine (GAMMA) is an {{experimental}} prototype of a light-weight communication {{system based on}} the Active Ports paradigm and designed for efficient implementation over low-cost Fast Ethernet interconnects. The original prototype implementation started in 1996 and obtained best performance by removing traditional communication protocols and implementing zerocopy send and receive. The {{price to pay for}} good performance was a Datagram QoS, with <b>error</b> detection and <b>notification</b> but no <b>error</b> recovery. Technology evolved, however, and currently all low-cost off-the-shelf NICs are based on Descriptor-based DMA (DBDMA) transfers. The DBDMA mechanism does not allow true zero-copy on message receive, and this implies a slight decrease in throughput for short messages. However, DBDMA allows an effective implementation of a credit-based flow control, which introduces reliability with almost no additional impact on performance. The reliable version of GAMMA allows a very effic [...] ...|$|R
40|$|The Onebm (one button machine) {{project has}} been {{developed}} to automate the routine operations at ELETTRA. Its framework consists of a programmable task manager with a Motif user interface, a set of operation description files {{and a collection of}} software modules. The programmable task manager can spawn and track the status of any valid UNIX executable, either binary object or shell script. The spawn mechanism is based on the standard "fork() " and "exec() " system calls. The task manager also intercepts the standard output stream of each task by redirecting it to a UNIX pipe. The intercepted output stream is displayed on demand to the operator. The task manager checks also the output stream for the presence of messages identified by predefined tokens. These messages are used for <b>error</b> <b>notification</b> and are displyed on a special window. An important point of the task manager is its capability to handle many tasks concurrently, leading to substantial savings in the execution times. These ch [...] ...|$|E
40|$|An American National Standards Institute (ANSI) posteriori (backfit) process, {{available}} to provide {{software quality assurance}} (SQA) for software developed outside of required qualification protocol, {{has been applied to}} the special-purpose, versatile tritium dispersion and consequence model, UFOTRI, a computer model developed at the German Karlsruhe laboratory. UFOTRI was chosen because of its strengths in initial tritium-related consequence analyses and its potential for application in a Department of Energy accident analysis context. The six-task process met key ANSI requirements and was performed during a several-month level of effort. Included project deliverables were Assessment, Test Plan, Configuration Procedure, <b>Error</b> <b>Notification</b> Procedure, Comprehensive Technical Report, and SQA Qualification Report documentation. Comparison to acute release conditions is still in progress, but results to date indicate satisfactory, bounding predictions can be achieved with UFOTRI relative to measurements. Results of this compact effort have identified UFOTRI as a suitable candidate for a software “toolkit, ” i. e., minimum verification and validation (V & V) requirements are satisfied, and a configuration controlled version is deemed appropriate for use in a DOE accident analysis context...|$|E
30|$|To prevent {{multiple}} STAs from {{owning the}} medium {{immediately after the}} completion of the preceding transmission, Eqs.  1 and 2 show relationships between time durations which must be adhered to by all STAs in a network. The parameters T_SIFS, T_DIFS, T_EIFS and σ denote time durations which are defined and fixed per physical layer (PHY) in DCF as stipulated in IEEE 802.11 - 2007 (2007). The symbol σ stands for slot duration and T_ack refers to ACK transmission duration. Since Eqs.  1 and 2 ensure that a message of length T_ack can be sent from receiver to sender without collision before T_EIFS expires, Mafole et al. (2014 a) hypothesized that contention overhead can be reduced. A method to reduce the contention overhead was, therefore, proposed and implemented. Figure  1 shows a fragment burst within which a fragment is being retrasmitted according to BFFR whereby the receiver is tasked to notify the sender of an error fragment received {{so that it can be}} retransmitted within T_EIFS. <b>Error</b> <b>notification</b> is done over T_ack. In CF the T_EIFS is wasted as the STAs involved in fragment transmission waits until the duration expires. This is followed by further time wastage as the STA enters backoff before attempting fragment retransmission.|$|E
40|$|TCP was {{designed}} and tuned to work well on networks where losses are mainly congestion losses. The performance of TCP decreases dramatically when a TCP connection traverses a wireless link on which packets may be lost due to wireless transmission <b>errors.</b> Explicit Congestion <b>Notification</b> (ECN) is known as an effective mechanism {{that can be used}} with Active Queue Management (e. g. RED) to control congestion on wired networks. ECN is used by routers to signal incipient congestion to end points. We evaluate the ability of ECN signals as a tool to distinguish between congestion losses and wireless losses. The occurrence of an ECN signal is a bad predictor of imminent congestion losses. We conclude that when TCP senders are responsive to ECN signals, congestion losses appear to be as random as wireless losses. Based on this observation, we propose a simple technique, TCP-Eaglet, to improve TCP over wireless for ECN responsive flows. Simulations results show an improvement in throughput of up to 60 %...|$|R
40|$|This paper {{describes}} {{the design and}} implementation decisions {{that have been made}} in developing soft-ware to support the DARPA TCP/IP protocols for the IBM OS/ 370 environment at the University of California Division of Library Automation. The implementation is designed to support over 100 concurrent TCP connections, all of which are man-aged by a single program, which acts as a special-ized sub-operating system. The system is opti-mized for line-by-line or screen-by-screen terminal traffic rather than character-by-character traffic. In addition, this TCP is designed to exploit the availability of the large main storage and processor speed available on the IBM/ 370. TCP/IP is generally considered to be a mature pro-tocol specification; however, in the course of our implementation we found several parts to be either ambiguous or problematic [...] in particular, <b>error</b> handling and <b>notification,</b> ICMP and its relationship to other protocols, and synchronization of data flow with TCP callers. We also discuss problems encountered in trying to replace hardwired terminals in a public access environment with TCP and TELNET, and some pro-tocol changes that would make these protocols more hospitable to our environment...|$|R
40|$|Although time {{estimates}} are used extensively for costing purposes, they {{are prone to}} measurement error. In an experimental setting, we research how measurement error in time estimates varies with: (1) the level of aggregation {{in the definition of}} costing system activities (aggregated or disaggregated); (2) task order (the extent to which the activities that require time estimates present themselves systematically or mixed); and (3) when notice is given that time estimates will be required (in advance or after the fact), that is, whether participants know that time estimates will be required before they perform the activities. We also test on response mode (estimates in percentages or absolute time units). The results suggest an important trade-off between the level of aggregation and measurement error: disaggregation of activities leads to higher measurement <b>error.</b> Also, advance <b>notification</b> reduces measurement <b>error,</b> especially in settings with aggregated activities or mixed tasks. Finally, we find a strong overestimation bias when participants provide time estimates in minutes, which may be problematic for Time-Driven Activity-Based Costing that advocates the use of estimates in minutes. These results are relevant to accountants and decision makers who want to assess and control the measurement error in their current costing system and to professionals in related areas that make use of time estimates (e. g. billing, tendering) ...|$|R
