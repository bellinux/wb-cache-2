35|1808|Public
2500|$|The IBM System/360 Model 67, {{which was}} {{introduced}} Aug. 1965, included an MMU that {{was called a}} <b>dynamic</b> <b>address</b> <b>translation</b> (DAT) box. [...] It had the unusual feature of storing accessed and dirty bits outside of the page table. [...] They refer to physical memory rather than virtual memory, and are accessed by special-purpose instructions. [...] This reduces overhead for the OS, which would otherwise need to propagate accessed and dirty bits from the page tables to a more physically oriented data structure. [...] This makes OS-level virtualization easier.|$|E
2500|$|APL gained its {{foothold}} on mainframe timesharing {{systems from}} the late 1960s through the early 1980s, {{in part because it}} would run on lower-specification systems that were not equipped with <b>Dynamic</b> <b>Address</b> <b>Translation</b> hardware. Additional improvements in performance for selected IBM System/370 mainframe systems included the [...] "APL Assist Microcode" [...] in which some support for APL execution was included in the actual firmware as opposed to APL being exclusively a software product. Somewhat later, as suitably performing hardware was finally becoming available in the mid- to late-1980s, many users migrated their applications to the personal computer environment.|$|E
5000|$|Optional MMU {{supporting}} both {{memory protection}} and <b>dynamic</b> <b>address</b> <b>translation.</b>|$|E
40|$|The DARPA Information Assurance Program did initial {{research}} in the area of dynamic network defense, trying to prove that dynamic network reconfiguration would inhibit an adversary’s ability to gather intelligence, and thus degrade the ability to successfully launch an attack. A technique that enabled <b>dynamic</b> network <b>address</b> <b>translation</b> of the IP address and TCP port number combinations in packet headers was implemented in an experimental network. Two tests were conducted: one to demonstrate that it is possible to disrupt an adversary’s ability to sniff network traffic effectively, and another to show that the ability of intrusion detection tools to detect an adversary can be improved. The tests were successful...|$|R
40|$|A new {{protocol}} {{technology is}} just starting {{to emerge from the}} laboratory environment. Its stated purpose is to provide an additional means in which networks, and the services that reside on them, can be protected from adversarial compromise. This report has a two-fold objective. First is to provide the reader with an overview of this emerging Dynamic Defenses technology using <b>Dynamic</b> Network <b>Address</b> <b>Translation</b> (Dynat). This ''structure overview'' is concentrated {{in the body of the}} report, and describes the important attributes of the technology. The second objective is to provide a framework that can be used to help in the classification and assessment of the different types of dynamic defense technologies along with some related capabilities and limitations. This information is primarily contained in the appendices...|$|R
40|$|A new {{protocol}} {{technology is}} just starting {{to emerge from the}} laboratory environment. Its stated purpose is to provide a means whereby networks, and the services that reside on them, can be protected from adversarial compromise. This protocol called <b>Dynamic</b> Network <b>Address</b> <b>Translation</b> (Dynat) is designed to protect computer networks against cyber attacks. Briefly, Dynat changes network parameters, such as the IP address and port numbers, between communication sessions and even during sessions. As a result, an adversary cannot associate activity on a given port of a given IP address with an application on a particular computer, thereby presenting a significant barrier to network attacks. This paper identifies the major components or attributes that are associated with the Dynat protocol and describes some of the potential implementations and associated network architectures that can deploy Dynat. It examines inter-operability issues associated with Dynat's interaction with other network protocols along with its impact on standard security implementations, such as IPSec and Intrusion Detection Systems. <b>dynamic</b> <b>address</b> translation; protocol obfuscation; IDS enhancement; network security; network mapping protection; cyber attack; network protocols; interoperability; network architectures; network protection; critical infrastructures...|$|R
5000|$|A <b>Dynamic</b> <b>Address</b> <b>Translation</b> {{mechanism}} {{that can be}} used to implement a virtual memory system ...|$|E
5000|$|The use of Virtual {{memory and}} <b>Dynamic</b> <b>Address</b> <b>Translation</b> (DAT) on the IBM S/360-67 in 1967.|$|E
50|$|It {{included}} <b>Dynamic</b> <b>address</b> <b>translation</b> (DAT) hardware, a pre-requisite {{for the new}} {{virtual memory}} operating systems (OS/VS1, OS/VS2).|$|E
40|$|AbstractÐWe {{present a}} {{feasibility}} study for performing virtual <b>address</b> <b>translation</b> without specialized <b>translation</b> hardware. Removing <b>address</b> <b>translation</b> hardware and instead managing <b>address</b> <b>translation</b> in software {{has the potential}} to make the processor design simpler, smaller, and more energy-efficient at little or no cost in performance. The {{purpose of this study is}} to describe the design and quantify its performance impact. Trace-driven simulations show that software-managed <b>address</b> <b>translation</b> is just as efficient as hardware-managed <b>address</b> <b>translation.</b> Moreover, mechanisms to support such features as shared memory, superpages, fine-grained protection, and sparse address spaces can be defined completely in software, allowing for more flexibility than in hardware-defined mechanisms. Index TermsÐVirtual memory, virtual <b>address</b> <b>translation,</b> virtual caches, memory management, software-managed <b>address</b> <b>translation,</b> translation lookaside buffers. æ...|$|R
40|$|We {{present a}} {{feasibility}} study for performing virtual <b>address</b> <b>translation</b> without specialized <b>translation</b> hardware. Removing <b>address</b> <b>translation</b> hardware and instead managing <b>address</b> <b>translation</b> in software {{has the potential}} to make the processor design simpler, smaller, and more energy-efficient at little or no cost in performance. The {{purpose of this study is}} to describe the design and quantify its performance impact. Trace-driven simulations show that software-managed <b>address</b> <b>translation</b> is just as efficient as hardware-managed <b>address</b> <b>translation.</b> Moreover, mechanisms to support such features such as shared memory, superpages, fine-grained protection, and sparse address spaces can be defined completely in software, allowing for more flexibility than in hardware-defined mechanisms...|$|R
5000|$|<b>Address</b> <b>translation</b> {{services}} (ATS) supports native IOV across PCI Express via <b>address</b> <b>translation.</b> It requires {{support for}} new transactions to configure such translations.|$|R
5000|$|The [...] "DAT Box" [...] (<b>Dynamic</b> <b>Address</b> <b>Translation),</b> {{announced}} as {{an addition to}} the S/370 series in 1972 ...|$|E
50|$|The {{invention}} of <b>dynamic</b> <b>address</b> <b>translation</b> (the function provided by an MMU) originally reduced {{the need for}} position-independent code because every process could have its own independent address space (range of addresses). However, multiple simultaneous jobs using the same code created a waste of physical memory. If two jobs run entirely identical programs, <b>dynamic</b> <b>address</b> <b>translation</b> provides a solution by allowing the system simply to map two different jobs' address 32K to the same bytes of real memory, containing the single copy of the program.|$|E
5000|$|It offered [...] "dynamic {{relocation}} of problem programs using the <b>dynamic</b> <b>address</b> <b>translation</b> facilities of the 2067 Processing Unit, permitting response, within seconds, to many simultaneous users" ...|$|E
50|$|A few {{experimental}} memory controllers {{contain a}} second level of <b>address</b> <b>translation,</b> {{in addition to}} the first level of <b>address</b> <b>translation</b> performed by the memory management unit.|$|R
50|$|In {{computer}} networking, use of NAT (Network <b>Address</b> <b>Translation)</b> (RFC 1918) or PAT (Port <b>Address</b> <b>Translation)</b> to {{cope with}} the shortage of IPv4 addresses {{is an example of a}} kludge.|$|R
40|$|Disclosed is {{a method}} for {{increasing}} the cache hit rate of a branch <b>address</b> <b>translation</b> cache by significantly {{reducing the number of}} cache misses due to function return. The described approach is based on preloading function return <b>address</b> <b>translations</b> {{to reduce the number of}} cache misses and employed in conjunction with the previously disclosed instruction <b>address</b> <b>translation</b> cache. While instruction address caches have shown significant overall performance, their hit rate for function returns has shown a significant amount of cache misses for easily predictable mappings. The present invention increases branch <b>address</b> <b>translation</b> cache hit rate for function return <b>address</b> <b>translation</b> with a unified instruction <b>address</b> <b>translation</b> mechanism, which eliminates the cost of maintaining both a translation cache and a dedicated function return stack. The presented approach gives similar performance to a combined <b>address</b> <b>translation</b> cache with return stack, but only requires a single hardware resource and is also more robust in the presence of unexpected function return behavior since strict function return order is not required. The present disclosure is based on the branch <b>address</b> <b>translation</b> cache disclosed in M. Gschwind, "Method and Apparatus for Determining Branch Addresses Generated by Binary Translation", Research Disclosures, Vol. 41, No. 416, and adds an improved cache management mechanism to increase cache hit rate. This management mechanism is based on preloading translations with a high access probability in the near future. The cache is preferably preloaded from problem state to minimize the cost of preloading...|$|R
5000|$|... thereby {{permitting}} {{operations on}} up to 2^24-1 bytes (16 MB), vs. the 256-byte limits on the 360's MVC and CLC, but lacked a DAT (<b>Dynamic</b> <b>Address</b> <b>Translation)</b> box.|$|E
5000|$|<b>Dynamic</b> <b>Address</b> <b>Translation</b> (DAT) {{with support}} for 24 or 32-bit virtual {{addresses}} using segment and page tables (up to 16 segments each containing up to 256 4096 byte pages) ...|$|E
50|$|Virtual Memory (VM) {{and demand}} paging support {{were added to}} UMMPS in November 1967, making MTS the first {{operating}} system to use the <b>Dynamic</b> <b>Address</b> <b>Translation</b> (DAT) features that {{were added to the}} IBM S/360-67.|$|E
40|$|We {{present a}} {{general-purpose}} toolkit for network <b>address</b> <b>translation</b> in Click, a modular, component-based networking system. Network <b>address</b> <b>translation,</b> or NAT, {{was designed to}} allow disparate address realms to communicate. The components of our toolkit can be combined {{in a variety of}} ways to implement this task and many others, including some that, superficially, have nothing to do with <b>address</b> <b>translation.</b> Our NAT components are more flexible than monolithic alternatives. They concern themselves solely with address translation; separate components handle related functions, such as classification. The user can choose where network <b>address</b> <b>translation</b> takes place in relation to other router functions; combine multiple translators in a single configuration; and use NAT in unintended, surprising ways. We describ...|$|R
40|$|While flash-memory {{has been}} widely adopted for various {{embedded}} systems, the performance of <b>address</b> <b>translation</b> has become a critical issue {{for the design of}} flash trans-lation layers. The aim {{of this paper is to}} improve the performance of existing designs by proposing a caching mechanism for efficient <b>address</b> <b>translation.</b> A replacement strategy with low-time complexity and low-memory requirements is proposed to cache the most recently used logical addresses. According to the experiments, the proposed method has shown its efficiency in the reducing of the <b>address</b> <b>translation</b> time...|$|R
5000|$|RFC 3715 IPsec-Network <b>Address</b> <b>Translation</b> (NAT) Compatibility ...|$|R
5000|$|... full {{virtual memory}} {{through a new}} {{microcode}} floppy disk on the 370/145 and a hardware upgrade to include a DAT box on the 370/155 and 370/165. A <b>Dynamic</b> <b>Address</b> <b>Translation</b> (DAT) option was not announced until 1972; ...|$|E
5000|$|... "Unifying the {{architecture}} and control programs {{of business and}} scientific computers both large and small" [...] (championed by Brooks/Amdahl; this group rejected <b>dynamic</b> <b>address</b> <b>translation,</b> fearing [...] "unevaluated techniques or technologies" [...] {{as the basis of}} an entire product line), versus ...|$|E
50|$|After {{a year of}} {{negotiations}} and design studies, IBM agreed to make a one-of-a-kind version of its S/360-65 mainframe computer for the University of Michigan. The S/360-65M would include <b>dynamic</b> <b>address</b> <b>translation</b> (DAT) features that would support virtual memory and allow support for time-sharing. Initially IBM decided not to supply a time-sharing operating system for the new machine.|$|E
50|$|The layer that {{provides}} this API {{is called the}} virtualized flash storage layer in the DFS paper. It {{is the responsibility of}} this layer to perform block allocation, wear leveling, garbage collection, crash recovery, <b>address</b> <b>translation</b> and also to make the <b>address</b> <b>translation</b> data structures persistent.|$|R
25|$|Performance of <b>Address</b> <b>Translation</b> Buffers {{has been}} enhanced.|$|R
5000|$|RFC 3715: IPsec-Network <b>Address</b> <b>Translation</b> (NAT) Compatibility Requirements ...|$|R
5000|$|The Model 135 was {{the last}} of the 370s to be {{introduced}} without Virtual memory. Four of the five could be upgraded. Unlike the 155 & 165, which required an expensive hardware upgrade to add a DAT box (<b>Dynamic</b> <b>Address</b> <b>Translation),</b> the 135 & 145 [...] could get obtain their virtual memory upgrade from a floppy disk.|$|E
5000|$|The [...] and its sibling [...] {{can be used}} as {{replacements}} for fork and exec, but does not provide the same flexibility as using fork and exec separately. They may be efficient {{replacements for}} fork and exec, but their purpose is to provide process creation primitives in embedded environments where fork is not supported due to lack of <b>dynamic</b> <b>address</b> <b>translation.</b>|$|E
50|$|A paper titled Program and Addressing Structure in a Time-Sharing Environment by Bruce Arden, Bernard Galler, Frank Westervelt (all {{associate}} directors at UM's academic Computing Center), and Tom O'Brian building {{upon some}} basic ideas {{developed at the}} Massachusetts Institute of Technology (MIT) was published in January 1966. The paper outlined a virtual memory architecture using <b>dynamic</b> <b>address</b> <b>translation</b> (DAT) {{that could be used}} to implement time-sharing.|$|E
5000|$|Performance of <b>Address</b> <b>Translation</b> Buffers {{has been}} enhanced.|$|R
50|$|However, when routers, firewalls, proxies, {{and other}} gateway devices perform network <b>address</b> <b>translation</b> (NAT), or more specifically, port <b>address</b> <b>translation</b> (PAT), they may rewrite source ports {{in order to}} track {{connection}} state. When modifying source ports, PAT devices may remove source port randomness implemented by nameservers and stub resolvers.|$|R
5000|$|Supports STUN {{for users}} behind Network <b>address</b> <b>translation</b> (NAT) ...|$|R
