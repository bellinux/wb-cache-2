0|10000|Public
50|$|The <b>input</b> and <b>output</b> were in decimal numbers, with a decimal {{exponent}} and {{the units}} had special machinery for converting these {{to and from}} binary numbers. The <b>input</b> and <b>output</b> <b>instructions</b> would be read or written as floating point numbers. The program tape was 35 mm film with the instructions encoded in punched holes.|$|R
40|$|Channels as an {{essential}} part of a processor's instruction set were #rst launched with the Transputer. Wehave made two major alterations: the semantics of the <b>input</b> and <b>output</b> <b>instruction</b> are changed in order to overlap communication, and channels are allowed to be communicated over channels #higher order communications#. All operations can be easily implemented in hardware...|$|R
25|$|In legacy {{databases}} whose size {{could not}} be economically changed, six-digit year/month/day codes were converted to three-digit years (with 1999 represented as 099 and 2001 represented as 101, etc.) and three-digit days (ordinal date in year). Only <b>input</b> and <b>output</b> <b>instructions</b> for the date fields had to be modified, but most other date operations and whole record operations required no change. This delays the eventual roll-over problem {{to the end of}} the year 2899.|$|R
40|$|In {{this paper}} we revisit the {{hardware}} implementation of channels. Channels {{as an essential}} part of the processors instruction set were first launched with the Transputer. Here we have revisited them and have made two major alterations: we have changed the semantics of the <b>input</b> and <b>output</b> <b>instructions</b> in order to overlap communication, and we allow channels to be communicated over channels (higher order communications). We show that all of those operations can be easily implemented in hardware...|$|R
50|$|The laplink cable connects five {{output pins}} of a {{parallel}} port to five input pins on the opposing port, for each direction. Due {{to the lack}} of an internal timing in the parallel ports, synchronization is implemented via software handshaking: four of the five pins are used for data transfer and one is used for synchronization. The logical values at these pins are read and written directly by the software via an <b>input</b> or <b>output</b> <b>instruction.</b>|$|R
5000|$|When EPSPs and IPSPs are {{generated}} simultaneously {{in the same}} cell, the output response {{will be determined by}} the relative strengths of the excitatory and inhibitory <b>inputs.</b> <b>Output</b> <b>instructions</b> are thus determined by this algebraic processing of information. Because the discharge threshold across a synapse {{is a function of the}} presynaptic volleys that act upon it, and because a given neuron may receive branches from many axons, the passage of impulses in a network of such synapses can be highly varied. [...] The versatility of the synapse arises from its ability to modify information by algebraically summing input signals. The subsequent change in stimulation threshold of the postsynaptic membrane can be enhanced or inhibited, depending on the transmitter chemical involved and the ion permeabilities. Thus the synapse acts as a decision point at which information converges, and it is modified by algebraic processing of EPSPs and IPSPs. In addition to the IPSP inhibitory mechanism, there is a presynaptic kind of inhibition that involves either a hyperpolarization on the inhibited axon or a persistent depolarization; whether it is the former or the latter depends on the specific neurons involved.|$|R
5000|$|The 803 has {{a little-known}} {{interrupt}} facility. Whilst {{it is not}} mentioned in the programming guide and is not used by any of the standard peripherals, the operation of the interrupt logic is described in the 803 hardware handbooks and the logic is shown in the 803 maintenance diagrams (Diagram 1:LB7 Gb). Interrupts are probably used mostly in conjunction with custom interfaces provided as part of ARCH real time process control systems. Since all <b>input</b> and <b>output</b> <b>instructions</b> causes the 803 to become [...] "busy" [...] if input data is not available or if an output device has not completed a previous operation, interrupts are not needed and are not used for driving the standard peripherals.|$|R
40|$|Abstract. The Instruction-Set {{extension}} {{problem has}} been one of the major topics in the last years and it is the addition of a set of new complex instructions to a given Instruction-Set. This problem in its general formulation requires an exhaustive search of the design space to identify the candidate instructions. This search turns into an exponential complexity of the solution. In this paper we propose an algorithm for the generation of Multiple <b>Input</b> Single <b>Output</b> <b>instructions</b> of variable size which can be directly selected or combined for Instruction-Set extension. Additionally, the algorithm is suitable for inclusion in a design flow for automatic generation of MIMO instructions. The proposed algorithm is not restricted to basic-block level and has linear complexity with the number of processed elements. ...|$|R
50|$|In Sec 14.1 von Neumann proposes {{the format}} for orders, {{which he calls}} a code. Order types include the basic {{arithmetic}} operations, moving minor cycles between CA and M (word load and store in modern terms), an order (s) that selects one of two numbers based on {{the sign of the}} previous operation, <b>input</b> and <b>output</b> and transferring CC to a memory location elsewhere (a jump). He determines the number of bits needed for the different order types, suggests immediate orders where the following word is the operand and discusses the desirability of leaving spare bits in the order format to allow for more addressable memory in the future, as well as other unspecified purposes. The possibility of storing more than one order in a minor cycle is discussed, with little enthusiasm for that approach. A table of orders is provided, but no discussion of <b>input</b> and <b>output</b> <b>instructions</b> was included in the First Draft.|$|R
40|$|Abstract—The Instruction-Set Extensions {{problem has}} been one of the topics which has became popular over the last years and it entails the {{addition}} of a set of new complex instructions to a given Instruction-Set. In this paper, we present an efficient algorithm for the automatic generation of convex Multiple <b>Input</b> Multiple <b>Output</b> <b>instructions</b> (MIMOs). The proposed algorithm is based on a two-step method which generates a coverage of the application with single <b>output</b> clusters of <b>instructions</b> and subsequently generates an optimal set of complex MIMO instructions to implement in hardware through an Integer Linear Programming (ILP) formulation of the instruction selection problem. The proposed approach can be applied directly to large kernels and does not impose limitations neither on the number of <b>inputs</b> and/or <b>outputs,</b> nor on the number of new instructions generated. Our results on four well known kernels show that the extended Instruction-set allows to execute applications more efficiently and needing fewer cycles. On average between 50 % and 70 % of the initial execution cycles can be saved depending on the kernel and the reconfigurable platform addressed. I...|$|R
40|$|The Instruction-Set Extensions {{problem has}} been one of the major topic in the last years and it {{consists}} of the addition of a set of new complex instructions to a given Instruction-Set. This problem in its general formulation requires an exhaustive search of the design space to identify the candidate instructions. This search turns into an exponential complexity of the solution. In this paper we propose an efficient linear complexity algorithm for the automatic generation of convex Multiple <b>Input</b> Multiple <b>Output</b> (MIMO) <b>instructions,</b> whose convexity is theoretically guaranteed. The proposed approach is not restricted to basic-block level and does not impose limitations either on the number of <b>input</b> and/or <b>output,</b> or on the number of new instructions generated. Our results show a significant overall application speedup (up to x 2. 9 for ADPCM decoder) considering the linear complexity of the proposed solution and which therefore compares well with other state-of-art algorithms for automatic instruction set extensions...|$|R
40|$|We present 13 {{programs}} for the calculation of vibrational spectroscopic problems applied to small molecules with high synvnetry. The programs are compiled for the well known programmable packet calculator Texas Instruments SR- 52. To the special problems, the mathematical formulas, <b>input</b> and <b>output</b> <b>instructions,</b> several numerical examples, literature and the programs with comments are given. Order n = 1 : The force constants, isotopic vibrational frequencies and the vibrational amplitudes are calculated for the two mass system XY (C_∞υ). For the three mass system XY_ 2 (D_∞ h) only the force constants and isotopic frequencies are calculated. Order n = 2 : For the three mass systems XYZ (C_∞υ) and XY_ 2 (C_sυ) the inverse matrices G of the kinetic energy are presented. For complete sets of data (with isotopic frequencies, Coriolis coupling constants etc.) the complete force constant matrices are calculated. For non complete sets of data one starts in most cases with diagonal force constant matrices. The complete force constant matrix F is calculated with a minimalisation approximation. The eigenvector matrices L result from the G - F - and N-matrices. The N-matrices are calculated from the G- and F-matrices or from the F- and L-matrices respectively. Order n = 3 : The matrix G of the system XYZ (C_ 5) is calculated. For higher orders n, the "isotopic reduction method" for the calculation of single force constants of proper systems is described...|$|R
40|$|Abstract—The Instruction-Set Extension {{problem has}} been one of the major topics in the last decade and it {{consists}} of the addition of a set of new complex instructions to a given Instruction-Set. This problem in its general formulation requires an exhaustive search of the design space to identify the candidate instructions. A tradeoff between complexity and quality of the solution can be achieved limiting this search to implementable instructions. In this paper we propose a linear complexity algorithm for the generation of convex Multiple <b>Input</b> Multiple <b>Output</b> (MIMO) <b>instructions</b> of variable size based on the notion of spiral. Convex implementable MIMO clusters of instructions are identified by means of a spiral search through the levels of a graph. These new instructions can be directly selected or combined for more complex Instruction-Set extensions. An important feature of our algorithm is that it is neither restricted to basic-block level nor it imposes any limitation on the number of the newly instructions nor on the number of the inputs/outputs of these instructions. I...|$|R
40|$|Abstract — In this paper, {{we address}} the Instruction-Set Extension problem. The problem {{boils down to}} {{identify}} clusters of operations that can be implemented as single complex operations in hardware which maximize some metric, typically performance. These new operations can then be incorporated in repertoire of the processor as new instructions. We propose a method to generate new convex instructions, where convexity is a property that guarantees a proper and feasible scheduling of the new instructions while respecting the dependencies. We propose two algorithms for the generation of convex Multiple <b>Input</b> Multiple <b>Output</b> (MIMO) <b>instructions,</b> given certain reconfigurable hardware resource constraints. The elementary building blocks of our approach are clusters of operations known as Maximal Multiple <b>Input</b> Single <b>Output</b> (MAXMISO) out of which the convex MIMO instructions are constructed. The common starting point of both algorithms is {{the analysis of the}} application to identify the operations that can be clustered as MAXMISOs. These maximal MISOs are then combined to produce the set of new convex instructions. Whereas the first algorithm generates convex MIMO instructions formulating the problem as an ILP problem the second algorithm uses an heuristic to compose the new convex MIMO instructions. An important advantage of our approach {{is that it is not}} restricted to basic-block level nor does it impose any limitation on the number of the newly added instructions nor on the number of the inputs/outputs of these instructions...|$|R
5000|$|... "Applications of <b>Input</b> <b>Output</b> Analysis for Less Developed Countries", in Sohn, I. (ed.), Readings in <b>Input</b> <b>Output</b> Analysis, Oxford University Press, 1986 ...|$|R
2500|$|A {{parallel}} feedback connection at the <b>input</b> (<b>output)</b> {{decreases the}} <b>input</b> (<b>output)</b> resistance {{by a factor}} ( [...] 1 + β AOL [...] ), where AOL = open loop gain.|$|R
30|$|Our {{primary source}} of data is the <b>Input</b> <b>Output</b> Transaction Table of 2007 – 08 {{published}} by Central Statistical Organization (CSO 2012), Government of India. This is a 130 X 130 commodity matrix used for <b>Input</b> <b>Output</b> Analysis.|$|R
40|$|The use of {{measures}} originally suggested by Bennet, Bowley, and Hicks {{in the context}} of cost of living, welfare, and consumer surplus measurement to measure <b>inputs,</b> <b>outputs,</b> and productivity is examined. Suitably normalized versions of the Bennet-Bowley measures are shown to be exact and superlative measures of <b>input,</b> <b>output,</b> and productivity indicators. <b>Input</b> and <b>output</b> measurement, Productivity measurement, Directional distance functions. ...|$|R
5000|$|The general {{conclusion}} from this example {{and a similar}} example for the output resistance case is:A parallel feedback connection at the <b>input</b> (<b>output)</b> decreases the <b>input</b> (<b>output)</b> resistance by a factor ( [...] 1 + β AOL [...] ), where AOL = open loop gain.|$|R
40|$|A network {{management}} system has SNMP agents distributed at {{one or more}} sites, an <b>input</b> <b>output</b> module at each site, and a server module located at a selected site for communicating with <b>input</b> <b>output</b> modules, {{each of which is}} configured for both SNMP and HNMP communications. The server module is configured exclusively for HNMP communications, and it communicates with each <b>input</b> <b>output</b> module according to the HNMP. Non-iconified, informationally complete views are provided of network elements to aid in {{network management}}...|$|R
40|$|This?aper investigates {{what types}} of instruction-feedback {{combinations}} {{may contribute to the}} learning of English grammar for 120 Japanese university students. Students were given tests on grammaticality judgment and correction, using English ergative verbs in three trials of a post-instruction test. Subjects were divided into six groups according to type of instruction and feedback they received. Overall findings indicate that students with <b>output</b> <b>instruction</b> plus explicit metalinguistic information outperformed Post-test 1 over those with <b>output</b> <b>instruction</b> and no feedback. In the grammaticality judgment test, the effect of input instruction held over 1 week (post-test 2), but <b>output</b> <b>instruction</b> had only an immediate (post-test 1) influence on the formulations of grammatical knowledge. Finally, input instruction combined with either explicit metalinguistic information or positive evidence wa...|$|R
40|$|Games for system {{analysis}} • Verification: check if a given system is correct → reduces to graph searching System <b>input</b> <b>output</b> Spec: φ(input,output) Environment Games for {{system analysis}} <b>input</b> <b>output</b> Spec: φ(input,output) Environment • Verification: check if a given system is correct → reduces to graph searching • Synthesis: construct a correct system → reduces to game solving – finding a winning strategy Games for system analysis Spec: φ(input,output) • Verification: check if a given system is correct → reduces to graph searching • Synthesis: construct a correct system → reduces to game solving – finding a winning strategy This talk: environment is abstracted as a stochastic process <b>input</b> <b>output</b> Environment <b>input</b> <b>output</b> = Markov decision process (MDP) ? Markov decision proces...|$|R
40|$|Acquaye, Alston and Pardey {{report and}} discuss {{agricultural}} <b>input</b> and <b>output</b> price and quantity estimates for various spatial aggregates within the United States {{and a range}} of multi-factor productivity measures for the period 1949 - 1991. Laspeyres, Paasche, Fisher Ideal, and Törnqvist-Theil index number procedures (base year 1949 = 100) were used to develop their estimates, the formulas for which are presented below and elaborated further in Alston, Norton, and Pardey (1995). An Excel spreadsheet file named accompanies these notes. It contains the price and quantity <b>input</b> and <b>output</b> aggregates for each of the 48 contiguous states, 11 USDA production regions (with the Northeast region split into two sub-regions), and a 48 -state (national) total for the period 1949 - 91. The data file also includes various <b>input</b> and <b>output</b> subaggregates (see table 1 from Acquaye, Alston, and Pardey, appended below, for details) and the value shares using prices from the current and past period that are required to reconstruct all these indexes for all the spatial units reported in the paper. Documentation of the primary data files constructed by Craig, Pardey, and Acquaye is also available in the file named Index Number Construction The Laspeyres and Paasche indexes are not chain-linked indexes—they use base-period and current prices and quantities, respectively in the calculation. The Laspeyres <b>input</b> (<b>output)</b> quantity index uses base period <b>input</b> (<b>output)</b> prices to weight both current and base-period <b>input</b> (<b>output)</b> quantities, and was calculated as where Pi 0 is the price of <b>input</b> (<b>output)</b> i in the base-period, and Qi 0 is the quantity of <b>input</b> (<b>output)</b> i in the base-period. N is the number of individual observations of <b>input</b> (<b>output)</b> ...|$|R
5000|$|... #Article: Hybrid <b>input</b> <b>output</b> (HIO) {{algorithm}} for phase retrieval ...|$|R
5000|$|Imported {{function}} {{can have}} <b>input,</b> <b>output,</b> and inout arguments.|$|R
50|$|<b>Input,</b> <b>Output,</b> and I/O {{fields are}} similar to text boxes.|$|R
5000|$|... #Subtitle level 2: Bootstrapping {{using the}} Basic <b>input</b> <b>output</b> system ...|$|R
5000|$|Directorate General of <b>Input</b> <b>Output</b> Coefficient Organization - Pakistan Customs ...|$|R
5000|$|... 20+4 {{including}} 8 GPIOs {{which can}} be <b>input,</b> <b>output,</b> interrupt sources; ...|$|R
5000|$|... {{automatic}} redirection {{of standard}} <b>input,</b> <b>output</b> and error from/to regular files; ...|$|R
30|$|As a conclusion, our {{proposed}} approach {{suggests an}} efficient alternative procedure to estimate predicted intervals for FR model with fuzzy <b>input</b> and <b>output.</b> As {{a limitation of}} our study, we only focused on fuzzy regression model in the case that <b>input</b> and <b>output</b> {{are assumed to be}} symmetric or nonsymmetric triangular fuzzy numbers. Therefore, we only considered FRBF Network when <b>input,</b> <b>output</b> and weights are triangular fuzzy numbers and we did not consider another types of fuzzy numbers in this study. Although the discussion of this study is confined to simple regression with one <b>input</b> and one <b>output,</b> it can be generalized to cope with cases of multiple <b>inputs</b> and <b>outputs.</b> For future studies, more general fuzzy <b>inputs,</b> <b>outputs</b> and weights such as trapezoidal fuzzy numbers could be handled with our FRBF Network approach and it could be applied to different FR models.|$|R
40|$|This paper {{presents}} the results of a parallel classroom experiment investigating the effects of processing instruction, traditional <b>instruction</b> and meaning-based <b>output</b> <b>instruction</b> on the acquisition of the English past simple tense. The subjects involved in the present studies were Chinese and Greek school-age learners of English residing in their respective countries. The participants in both schools were divided into three groups. The first group received processing instruction; the second group was exposed to traditional instruction; the third group received meaning-based <b>output</b> <b>instruction.</b> One interpretation and one production measure were used in a pre-test and post-test design (immediate effect only). The results showed that processing instruction had positive effects on the processing and acquisition of the target feature. In both studies the processing instruction group performed better than the traditional <b>instruction</b> and meaning-based <b>output</b> <b>instruction</b> groups in the interpretation task and the three groups made equal gains in the production task...|$|R
5000|$|... #Caption: Figure 2:Transfer {{function}} relating <b>input</b> <b>output</b> powers for the Mamyshev 2R regenerator.|$|R
5000|$|The PFile format {{based on}} the Protocol Buffers engine for {{multiplatform}} <b>input</b> <b>output</b> ...|$|R
5000|$|Process ontology: <b>inputs,</b> <b>outputs,</b> constraints, {{sequencing}} information, {{involved in}} business or engineering processes ...|$|R
5000|$|... 2010 - Experiments on the Notation of Shapes, <b>Input</b> <b>Output</b> Gallery, Hong Kong ...|$|R
