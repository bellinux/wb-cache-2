0|15|Public
50|$|In 2012, Quantum {{introduced}} its Scalar LTFS (Linear Tape <b>File</b> System) <b>appliance,</b> which offers new modes of portability and user accessibility for archived content on LTO tape.|$|R
3000|$|The {{ingestion}} script, example supporting <b>files,</b> {{and data}} <b>appliance</b> setup instructions {{are available from}} the GitHub repository at [URL] [...]...|$|R
5000|$|The Perfect Search Appliance {{is a third}} {{example of}} an <b>appliance</b> that {{searches}} <b>files.</b> The <b>appliance</b> stores <b>file</b> metadata in an index on the appliance. A web server on the appliance uses that metadata to provide relevant search results in response to user queries, and provides a link to access the original files.|$|R
50|$|Accellion {{released}} its first <b>file</b> transfer <b>appliance</b> in May 2005, a physical, on-premises appliance. Ogilvy & Mather was Accellion’s first enterprise customer and won Computerworld’s Premier 100 IT Leaders 2005, Best in Class award for its implementation of Accellion file transfer. In March 2011, Accellion {{released its}} Secure Collaboration product. Industry research firm, the 451 Group, has characterized Accellion as having grown into the collaboration market from its file-transfer roots.|$|R
40|$|This paper {{describes}} {{aspects of}} {{the implementation of a}} project called "Clustered Failover. " A Clustered Failover configuration connects two independent <b>file</b> server <b>appliances</b> via a NUMA network to provide file service that can survive hardware faults with minimal disruption to clients. The paper focuses on how the combination of the properties of WAFL (Network Appliance's proprietary log structured file system) and NUMA interconnects minimizes overhead and makes for a relatively straightforward implementation...|$|R
40|$|This paper {{presents}} a recovery protocol for block I/O operations in Slice, a storage system architecture for high-speed LANs incorporating network-attached block storage. The {{goal of the}} Slice architecture {{is to provide a}} network file service with scalable bandwidth and capacity while preserving compatibility with off-theshelf clients and <b>file</b> server <b>appliances.</b> The Slice prototype virtualizes the Network File System (NFS) protocol by interposing a request switching filter at the client's interface to the network storage system. The distribute...|$|R
40|$|This paper {{presents}} a recovery protocol for block I/ 0 operations in Slice, a storage system architecture for highspeed LANs incorporating network-attached block storage. The {{goal of the}} Slice architecture {{is to provide a}} network file service with scalable bandwidth and capacity while preserving compatibility with off-the-shelf clients and <b>file</b> server <b>appliances.</b> The Slice prototype "virtualizes" the Network File System (NFS) protocol by interposing a request switching filter at the client's interface to the network storage system (e. g., in a network adapter or switch) ...|$|R
2500|$|Due to its simple design, TFTP can {{be easily}} {{implemented}} by small footprint code. It is therefore the protocol of choice for {{the initial stages of}} any network booting strategy like BOOTP, PXE, BSDP, etc., [...] when targeting from highly resourced computers to very low resourced Single-board computers (SBC) and System on a Chip (SoC). It is also used to transfer firmware images and configuration <b>files</b> to network <b>appliances</b> like routers, firewalls, IP phones, etc. Today, TFTP is virtually unused for Internet transfers.|$|R
40|$|Network Appliance Corporation {{recently}} began shipping {{a new kind}} of network server called an NFS <b>file</b> server <b>appliance,</b> which is a dedicated server whose sole function is to provide NFS file service. The file system requirements for an NFS appliance are different from those for a general-purpose UNIX system, both because an NFS appliance must be optimized for network file access and because an appliance must be easy to use. This paper describes WAFL (Write Anywhere File Layout), which is a file system designed specifically to work in an NFS appliance. The primary focus is on the algorithms and data structures that WAFL uses to implement Snapshots, which are read-only clones of the active file system. WAFL uses a copy-on-write technique to minimize the disk space that Snapshots consume. This paper also describes how WAFL uses Snapshots to eliminate the need for file system consistency checking after an unclean shutdown...|$|R
40|$|This paper {{presents}} a recovery protocol for block I/O operations in Slice, a storage system architecture for highspeed LANs incorporating network-attached block storage. The {{goal of the}} Slice architecture {{is to provide a}} network file service with scalable bandwidth and capacity while preserving compatibility with off-the-shelf clients and <b>file</b> server <b>appliances.</b> The Slice prototype “virtualizes ” the Network File System (NFS) protocol by interposing a request switching filter at the client’s interface to the network storage system (e. g., in a network adapter or switch). The distributed Slice architecture separates functions typically combined in central file servers, introducing new challenges for failure atomicity. This paper {{presents a}} protocol for atomic file operations and recovery in the Slice architecture, and related support for reliable file storage using mirrored striping. Experimental results from the Slice prototype show that the protocol has low cost in the common case, allowing the system to deliver client file access bandwidths approaching gigabit-per-second network speeds. ...|$|R
40|$|<b>File</b> system virtual <b>appliances</b> (FSVAs) {{address a}} major {{headache}} faced by third-party FS developers: OS version compatibility. By packaging their FS implementation in a VM, {{separate from the}} VM that runs user applications, they can avoid {{the need to provide}} an FS port for every kernel version and OS distribution. A small FS-agnostic proxy, maintained by the core OS developers, connects the FSVA to whatever kernel version the user chooses. Evaluation of prototype FSVA support in Linux, using Xen as the VM platform, demonstrates that this separation can be efficient and maintain desired OS and virtualization features. Using three existing file systems and a cooperative caching extension as a case study, we demonstrate that the FSVA architecture can insulate FS implementations from user OS differences that would otherwise require explicit porting changes...|$|R
40|$|<b>File</b> system virtual <b>appliances</b> (FSVAs) {{address the}} {{portability}} headaches that plague file system (FS) developers. By packaging their FS implementation {{in a virtual}} machine (VM), separate from the VM that runs user applications, they can avoid the need to port the file system to each operating system (OS) and OS version. A small FS-agnostic proxy, maintained by the core OS developers, connects the FSVA to whatever OS the user chooses. This article describes an FSVA design that maintains FS semantics for unmodified FS implementations and provides desired OS and virtualization features, such as a unified buffer cache and VM migration. Evaluation of prototype FSVA implementations in Linux and NetBSD, using Xen as the virtual machine manager (VMM), demonstrates that the FSVA architecture is efficient, FS-agnostic, and able to insulate file system implementations from OS differences that would otherwise require explicit porting...|$|R
40|$|Implementing and {{maintaining}} file systems is painful. OS functionality is notoriously difficult {{to develop and}} debug, and file systems are more so than most because of their size and interactions with other OS components. In-kernel file systems must adhere to {{a large number of}} internal OS interfaces. Though difficult during initial file system development, these dependencies particularly complicate porting a file system to different OSs or even across OS versions. This dissertation describes an architecture that addresses the file system portability problem. Virtual machines are used to decouple the OS on which a file system runs from the OS on which user applications run. The file system is distributed as a <b>file</b> system virtual <b>appliance</b> (FSVA), a virtual machine running the file system developers’ preferred OS (version). Users runs their applications in a separate virtual machine, using their preferred OS (version). An FSVA design and implementation is described that maintains fil...|$|R

