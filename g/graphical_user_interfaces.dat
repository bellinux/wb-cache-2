2369|10000|Public
5|$|<b>Graphical</b> <b>user</b> <b>interfaces</b> (GUIs) may be {{developed}} using Perl. For example, Perl/Tk and WxPerl {{are commonly used}} to enable user interaction with Perl scripts. Such interaction may be synchronous or asynchronous, using callbacks to update the GUI.|$|E
5|$|It is {{possible}} to run <b>graphical</b> <b>user</b> <b>interfaces</b> on older or low-end systems, but the installation of window managers instead of desktop environments is recommended, as desktop environments are more resource-intensive. Requirements for individual software vary widely and must be considered, {{with those of the}} base operating environment.|$|E
5|$|Despite NeXT's limited {{commercial}} success, {{the company}} had a wide-ranging impact on the computer industry. Object-oriented programming and <b>graphical</b> <b>user</b> <b>interfaces</b> became more common after the 1988 release of the NeXTcube and NeXTSTEP, when other companies started to emulate NeXT's object-oriented system. Apple started the Taligent project in 1989, {{with the goal of}} building a NeXT-like operating system for the Macintosh, with collaboration from Hewlett-Packard and IBM.|$|E
3000|$|... iCanCloud offers <b>graphical</b> <b>user</b> <b>interface</b> {{which enables}} easy {{generation}} and customization of large-scale distributed models. With {{the help of}} this <b>graphical</b> <b>user</b> <b>interface,</b> a <b>user</b> can easily manage a repository of pre-configured VMs, cloud system, pre-configured experiments, launch experiments from <b>graphical</b> <b>user</b> <b>interface,</b> and generate <b>graphical</b> reports.|$|R
50|$|A vector-based <b>graphical</b> <b>user</b> <b>interface</b> is {{a mostly}} {{conceptual}} type of <b>graphical</b> <b>user</b> <b>interface</b> where elements are drawn using vector rather than raster information.|$|R
50|$|VNC injection. This payload for {{targets that}} run Windows gives a <b>graphical</b> <b>user</b> <b>interface</b> {{to the target}} that is {{synchronized}} with the <b>graphical</b> <b>user</b> <b>interface</b> of the target.|$|R
5|$|Douglas Carl Engelbart (January 30, 1925– July 2, 2013) was an American {{engineer}} and inventor, {{and an early}} computer and Internet pioneer. He {{is best known for}} his work on founding the field of human–computer interaction, particularly while at his Augmentation Research Center Lab in SRI International, which resulted in creation of the computer mouse, and the development of hypertext, networked computers, and precursors to <b>graphical</b> <b>user</b> <b>interfaces.</b> These were demonstrated at The Mother of All Demos in 1968. Engelbart's Law, the observation that the intrinsic rate of human performance is exponential, is named after him.|$|E
25|$|The {{widespread}} {{adoption of}} <b>graphical</b> <b>user</b> <b>interfaces</b> {{in the software}} of the 1980s and 1990s made mice all but indispensable for controlling computers. In November 2008, Logitech built their billionth mouse.|$|E
25|$|X is an architecture-independent {{system for}} remote <b>graphical</b> <b>user</b> <b>interfaces</b> and input device capabilities. Each person using a {{networked}} terminal {{has the ability}} to interact with the display with any type of user input device.|$|E
40|$|The aim of {{this work}} is to {{accelerate}} and facilitate the process of information system development by creating the algorithm for GUI (<b>graphical</b> <b>user</b> <b>interface)</b> prototype generation from UML diagrams. The work analyses the environment of information system development, its users, creation methods and graphical elements of <b>graphical</b> <b>user</b> <b>interface,</b> as well as UML diagrams and their links to <b>graphical</b> <b>user</b> <b>interface.</b> The algorithm that generates <b>graphical</b> <b>user</b> <b>interface</b> from the use case, class and activity diagrams was created in accordance to the performed analysis and determined quality criteria. The algorithm of <b>graphical</b> <b>user</b> <b>interface</b> was realised with the Java programming language as a separate program that uses information received from XML project file created by the MagicDraw UML tool. There {{are two types of}} <b>graphical</b> <b>user</b> <b>interface</b> generation: for application and for internet interface. It has to be noted that the created tool can be used not only for creation but also for thorough editing of the interface. Besides, a program code for application (Java programming language) and internet interface (HTML) is generated. The created tool for <b>graphical</b> <b>user</b> <b>interface</b> generation is tested by creating graphical interfaces for information systems of various complexity. It has been found that the <b>graphical</b> <b>user</b> <b>interface</b> tool is worth being used in all cases. An article on the theme of this work has been written and presented in the 15 th inter-university conference for Master and PhD students “Information Society and University Studies (IVUS 2010) ”...|$|R
50|$|PowerBASIC Forms, {{available}} for purchase separately, is a <b>graphical</b> <b>user</b> <b>interface</b> design tool add-on for PBWin. It automatically produces source code using the DDT language extension that creates forms using the Windows <b>graphical</b> <b>user</b> <b>interface.</b>|$|R
50|$|In {{software}} engineering, <b>graphical</b> <b>user</b> <b>interface</b> {{testing is}} the process of testing a product's <b>graphical</b> <b>user</b> <b>interface</b> to ensure it meets its specifications. This is normally done {{through the use of a}} variety of test cases.|$|R
25|$|Most of {{the modern}} {{computer}} systems support <b>graphical</b> <b>user</b> <b>interfaces</b> (GUI), and often include them. In some computer systems, such as the original implementation of the classic Mac OS, the GUI is integrated into the kernel.|$|E
25|$|<b>Graphical</b> <b>user</b> <b>interfaces</b> evolve over time. For example, Windows has {{modified}} its {{user interface}} {{almost every time}} a new major version of Windows is released, and the MacOS GUI changed dramatically {{with the introduction of}} MacOSX in 1999.|$|E
25|$|From 1983 onwards, various {{companies}} {{worked on}} <b>graphical</b> <b>user</b> <b>interfaces</b> (GUIs) capable of running on PC hardware. However, this required duplicated effort {{and did not}} provide much consistency in interface design (even between products from the same company).|$|E
50|$|Kai Krause (born March 14, 1957) is a German {{software}} and <b>graphical</b> <b>user</b> <b>interface</b> designer, {{best known for}} founding MetaCreations Corp., his Kai's Power Tools series of products, and for his contributions to <b>graphical</b> <b>user</b> <b>interface</b> design.|$|R
40|$|The goal is {{to design}} and to {{implement}} a library for developing Java applications controlled over WWW. This library provides a virtual <b>graphical</b> <b>user</b> <b>interface</b> and it implements the network communication with a real remote <b>graphical</b> <b>user</b> <b>interface.</b> The remote <b>graphical</b> <b>user</b> <b>interface</b> is implemented as a Java applet. The proposed solution {{is based on the}} Remote Method Invocation (RMI) framework that provides the communication between the applet and the application running on the server...|$|R
40|$|In master theses {{hypertext}} <b>graphical</b> <b>user</b> <b>interface</b> definition using high abstraction level declarative syntax is {{analyzed and}} architecture model is suggested. Suggested architecture defines <b>graphical</b> <b>user</b> <b>interface</b> using high abstraction level elements. Basic element set {{of more than}} 20 elements is defined, declarative XML notation is suggested and <b>graphical</b> <b>user</b> <b>interface</b> library for HTML is developed with JavaScript to ensure much faster and easier standard-based <b>graphical</b> <b>user</b> <b>interface</b> development. Provided method has no public analogues yet and is suggested for complex graphic <b>user</b> <b>interfaces.</b> Experimental studies proved that declarative syntax and high abstraction level can reduce programming language code from 3. 1 times on trivial GUI elements to 204. 1 times on complex GUI solutions. Studies have showed that {{when the number of}} HTML elements composing <b>graphical</b> <b>user</b> <b>interface</b> grows, even better effectiveness can be achieved. Developed architecture is integrated in software development model where <b>graphical</b> <b>user</b> <b>interface</b> and logic are semi-automated using UML model. Traditional text editor is changed by data driven design tool, use-cases are developed using graphical editor, data infrastructure is build from the model and solution is delivered in several programming technologies...|$|R
25|$|Application Kit (AppKit) is {{directly}} {{descended from the}} original NeXTSTEP Application Kit. It contains code programs can use to create and interact with <b>graphical</b> <b>user</b> <b>interfaces.</b> AppKit is built on top of Foundation, and uses the same NS prefix.|$|E
25|$|<b>Graphical</b> <b>user</b> <b>{{interfaces}}</b> {{exist for}} sudo, notably kdesudo, and gksudo. Other user interfaces {{are not directly}} built on sudo, but provide similar temporary privilege elevation for administrative purposes, such as User Account Control in Microsoft Windows and Mac OS X Authorization Services.|$|E
25|$|In its {{standard}} distribution it is a complete, albeit simple, {{display and}} interface solution which delivers a standard toolkit and protocol stack for building <b>graphical</b> <b>user</b> <b>interfaces</b> on most Unix-like operating systems and OpenVMS, {{and has been}} ported to many other contemporary general purpose operating systems.|$|E
25|$|Users {{can control}} a Windows 9x-based system through a {{command-line}} interface (or CLI), or a <b>graphical</b> <b>user</b> <b>interface</b> (or GUI). For desktop systems, the default mode is usually <b>graphical</b> <b>user</b> <b>interface,</b> where the CLI {{is available through}} MS-DOS windows.|$|R
40|$|In this paper, a Matlab <b>graphical</b> <b>user</b> <b>interface</b> {{dedicated}} to the optimal design of the high power induction motor with heavy starting conditions is presented. This <b>graphical</b> <b>user</b> <b>interface</b> allows to input the rated parameters, {{the selection of the}} induction motor type and the optimization criterion of the induction motor design also. For the squirrel cage induction motor the <b>graphical</b> <b>user</b> <b>interface</b> allows the selection of the rotor bar geometry, the material of the rotor bar as well as the fastening technology of the shorting ring on the rotor bar. The Matlab <b>graphical</b> <b>user</b> <b>interface</b> is developed and applied to the general optimal design program of the induction motor described in [1], [2]...|$|R
40|$|A <b>graphical</b> <b>user</b> <b>interface</b> for the {{computational}} {{fluid dynamics}} software OpenFOAM has been constructed. OpenFOAM is a open source and powerful numerical software, but has much to be wanted {{in the field of}} user friendliness. In this thesis the basic operation of OpenFOAM will be introduced and the thesis will emerge in a <b>graphical</b> <b>user</b> <b>interface</b> written in PyQt. The <b>graphical</b> <b>user</b> <b>interface</b> will make the use of OpenFOAM simpler, and hopefully make this powerful tool more available for the general public...|$|R
25|$|Gesture {{recognition}} {{can be seen}} as a way {{for computers}} to begin to understand human body language, thus building a richer bridge between machines and humans than primitive text user interfaces or even GUIs (<b>graphical</b> <b>user</b> <b>interfaces),</b> which still limit the majority of input to keyboard and mouse.|$|E
25|$|Widget toolkits are the {{libraries}} used {{to build}} <b>graphical</b> <b>user</b> <b>interfaces</b> (GUIs) for software applications. Numerous widget toolkits are available, including GTK+ and Clutter developed by the GNOME project, Qt developed by the Qt Project and led by Digia, and Enlightenment Foundation Libraries (EFL) developed primarily by the Enlightenment team.|$|E
25|$|In late 1981 {{and early}} 1982 Sassenrath took an {{academic}} leave to do atmospheric physics research for National Science Foundation at Amundsen–Scott South Pole Station. Upon returning, Sassenrath {{reached an agreement}} with HP to pursue independent research into new areas of computing, including <b>graphical</b> <b>user</b> <b>interfaces</b> and remote procedure call methods of distributed computing.|$|E
40|$|This thesis {{describes}} the <b>graphical</b> <b>user</b> <b>interface</b> developed for semi-automatic keyframebased semantic shot annotation and the semantic shot classifiers built. The <b>graphical</b> <b>user</b> <b>interface</b> aims {{to optimize the}} current indexation process by substituting manual annotation for automatic annotation and validation. The system is based on supervised learning binary classifiers and web services. The <b>graphical</b> <b>user</b> <b>interface</b> provides the necessary tools to fix and validate the automatic detections and {{to learn from the}} user feedback to retrain the system and improve it. Results of the classifiers evaluation, performed using cross-validation methods, show a good performance in terms of precision and recall. The <b>graphical</b> <b>user</b> <b>interface</b> has been described as complete and easy to use by a professional documentalist at a broadcast company...|$|R
50|$|Hello world {{program with}} <b>graphical</b> <b>user</b> <b>interface.</b>|$|R
50|$|Icons as {{parts of}} the <b>graphical</b> <b>user</b> <b>interface</b> of the {{computer}} system, in conjunction with windows, menus and a pointing device (mouse), belong to the much larger topic {{of the history of}} the <b>graphical</b> <b>user</b> <b>interface</b> that has largely supplanted the text-based interface for casual use.|$|R
25|$|Speed {{improved}} {{with the introduction}} of 1200 bit/s modems in the early 1980s, giving way to 2400 bit/s fairly rapidly. The improved performance led to a substantial increase in BBS popularity. Most of the information was displayed using ordinary ASCII text or ANSI art, but a number of systems attempted character-based <b>graphical</b> <b>user</b> <b>interfaces</b> which began to be practical at 2400 bit/s.|$|E
25|$|Engelbart was a committed, vocal {{proponent of}} the {{development}} and use of computers and computer networks to help cope with the world’s increasingly urgent and complex problems. He {{is best known for his}} work on the challenges of human–computer interaction, resulting in the invention of the computer mouse, and the development of hypertext, networked computers, and precursors to <b>graphical</b> <b>user</b> <b>interfaces.</b>|$|E
25|$|X {{primarily}} defines {{protocol and}} graphics primitives it deliberately contains no specification for application user-interface design, such as button, menu, or window title-bar styles. Instead, application software such as window managers, GUI widget toolkits and desktop environments, or application-specific <b>graphical</b> <b>user</b> <b>interfaces</b> define and provide such details. As a result, {{there is no}} typical X interface and several different desktop environments have become popular among users.|$|E
40|$|The {{topic of}} this thesis is {{development}} of a <b>graphical</b> <b>user</b> <b>interface</b> for real-time monitoring of electrocardiographic signals. Our main goal was to design, implement and evaluate the <b>graphical</b> <b>user</b> <b>interface.</b> We developed a <b>graphical</b> <b>user</b> <b>interface</b> which allows us to browse, add, edit and delete patients in the patient's database. It also allows us to assign the measurement devices to the patients. It supports real-time displaying of electrocardiographic curves and alarm notifications in case of patient's critical states. For best visibility we used bright vivid colors and flashing background. Past measurements can be viewed and printed. Past alarms are stored and accessible for examination. Development took place in several iterations of the spiral <b>user</b> <b>interface</b> design model. In our work we followed basic principles and guidelines for <b>user</b> <b>interface</b> design, especially 10 Nielsen's design principles. Subset of functionalities for each iteration has been validated against usability heuristics. The developed <b>graphical</b> <b>user</b> <b>interface</b> was submitted to user testing in a real clinical environment in Dr. Franc Derganec general hospital in Nova Gorica. We updated the <b>graphical</b> <b>user</b> <b>interface</b> {{in collaboration with the}} medical staff. The <b>graphical</b> <b>user</b> <b>interface</b> was developed in Qt 3. x programming environment. It runs on several platforms and operating systems and was developed and tested in KDE graphical environment of LINUX OS...|$|R
50|$|ClustalX: This {{version has}} a <b>graphical</b> <b>user</b> <b>interface.</b>|$|R
50|$|Development of a <b>Graphical</b> <b>User</b> <b>Interface</b> for STADIUM.|$|R
