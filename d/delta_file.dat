7|33|Public
5000|$|The [...] utility {{uses the}} rsync {{algorithm}} to generate delta files with the difference from file A to file B (like the utility diff, {{but in a}} different delta format). The <b>delta</b> <b>file</b> can then be applied to file A, turning it into file B (similar to the patch utility). rdiff works well with binary files.|$|E
50|$|ProjectWise V8 {{started the}} modern era of ProjectWise. The January 2003 release {{included}} such innovations as the Preview Pane, Workspace Profiles, Components, Audit Trail, and the Distribution System. Over {{the next few years}} we saw 2004 and V8 XM Edition ProjectWise releases. These releases included Full Text Search, Thumbnails, DGN Indexing, Managed Workspaces, and SharePoint Web Parts.Late in 2008, the first V8i release of ProjectWise was introduced. It included <b>Delta</b> <b>File</b> Transfer, the Web View Server, Spatial Navigation, the Quick Search tool bar and auto login to integrated applications. Over the next several years SELECTseries releases (one through four) have included Revit and Civil3D integration, as well at Transmittals, Dynamic Composition Server, Point Cloud Streaming, and Dynamic Plotting.|$|E
40|$|Abstract. A delta {{compression}} algorithm is presented, {{working on an}} LZSS com-pressed reference file and an uncompressed version, and producing a <b>delta</b> <b>file</b> {{that can be used}} to reconstruct the version file directly in its compressed form. This has applications to accelerate data flow in network environments. ...|$|E
40|$|Part 9 : Wireless TechnologiesInternational audienceCyber-physical systems {{often include}} sensor devices in their structure. These devices may require {{firmware}} updates once deployed and these updates must be energy efficient for battery powered, physically inaccessible sensors. The problem of energy saving reprogramming can be split to four tasks– making {{old and new}} firmware versions more similar, generating small <b>delta</b> <b>files</b> using differencing algorithms, propagating <b>delta</b> <b>files</b> and applying updates at the end devices. This paper describes existing approaches dealing with this problem, analyzes their power consumption and introduces new optimizations for differencing algorithms. A new approach is presented that requires no external flash memory, device reboot or complex update agent at the sensor device...|$|R
40|$|This {{document}} {{includes a}} cassette tape {{that contains the}} Hanford specific files {{that make up the}} Hanford Site Technical Baseline Database as of May 10, 1996. The cassette tape also includes the <b>delta</b> <b>files</b> that delineate the differences between this revision and revision 3 (April 10, 1996) of the Hanford Site Technical Baseline Database...|$|R
40|$|Data {{management}} {{tools that}} effectively capture engineering changes are necessary so that engineers {{can work on}} the design and implementation of a product concurrently. We report on an experiment in which PDES/STEP was used to communicate an original product data set between two engineers, and <b>delta</b> <b>files</b> were used to communicate subsequent engineering changes. The experiment demonstrates the potential of <b>delta</b> <b>files</b> for concurrent engineering and identifies several important issues for consideration as the approach matures. 1. Introduction Concurrent engineering reduces {{the time needed to}} bring a product to market by allowing groups of engineers to work on design and manufacturing tasks concurrently. Successful implementation of concurrent engineering is facilitated with a variety of computer tools, including a shared database [Alm 92, Spo 93]. One of the requirements for such a shared database is efficient communication of engineering changes. In this paper, we report on an experiment i [...] ...|$|R
40|$|Abstract — In {{this modern}} era {{computers}} and smart devices {{are the major}} mode of communication, which connects {{different parts of the}} world within a fraction of seconds, As a result, people can easily exchange information, so that the distance is no longer a barrier for communication but safety and security may get compromised. This creates brutal issues while storing or transferring confidential data. By making use of Delta Steganography techniques, these security threats can be tackled to some extent and also eliminate unnecessary data being transmitted over network. This work introduces a combined form of steganography and delta compression algorithms. Steganography conveniently obscure confidential data inside a video file, delta compression analyze stego frames and reference frames then produce a set of instructions named as <b>delta</b> <b>file.</b> Storing or transferring <b>delta</b> <b>file</b> rather than video file can offer reduced space consumption as well as high security to the confidential data...|$|E
40|$|Abstract. This paper gives a {{detailed}} description of our implementation of binary component adaptation (BCA) [KH 98] for Java. We describe the adaptation specification, its translation into the <b>delta</b> <b>file,</b> and how class files are modified during class loading. We also explain how we integrated BCA into the JDK 1. 1. 5 and how we modified javac to compile against adapted classes. 1...|$|E
40|$|Delta {{compression}} is {{the process}} of comparing two files to produce a set of instructions that will convert one file into the other. Storing or transmitting a <b>delta</b> <b>file</b> rather than the entire new file can offer significant efficiency gains. However, the different aspects of delta compression efficiency, like many problems in computer science, can rest at different ends of a balance. There does not exist a single delta compression algorithm that performs the best in every environment because performance requirements may vary. In order for a user of delta compression to choose the best algorithm for his situation, he must have some understanding of {{the strengths and weaknesses of}} the various delta compression algorithms available to him. JDelta, a Java-based delta compression utility, has been designed and implemented to both aid in this understanding, and to provide a framework for the future development of new delta compression techniques...|$|E
40|$|The thesis {{describes}} {{the implementation of}} an effective and easily manageable backup system for OS MS Windows XP and newer. Emphasis is put on the simplicity of defining objects to be backed up. Effectiveness has been attained by backing only those files up, which has changed since last backup cycle. Unlike most other backup systems, <b>delta</b> <b>files</b> are used during transferring into remote server. The main contribution of this thesis is unique mechanism used to create copies of old versions of files. These are created by moving the files itself into temporary storage, when the request to overwrite them arrives. Moved old versions of files are used as an input for creating <b>delta</b> <b>files.</b> Designed solution contains user interface which enable comfortable backup of user data onto a removable disk. However it may be used also {{as a base for}} backup onto a remote computer. The description of file system filter development among others summarizes many issues and best practices for developing in kernel mode and may be used as an introduction into this area...|$|R
40|$|We {{present an}} {{algorithm}} for modifying <b>delta</b> compressed <b>files</b> {{so that the}} compressed versions may be reconstructed without scratch space. This allows network clients with lim-ited resources to efficiently update software by retrieving delta compressed versions over a network. Delta compression for binary files, compactly encoding a version of data with only the changed bytes from a previous version, {{may be used to}} efficiently distribute software over low bandwidth channels, such as the Internet. Traditional methods for rebuilding these <b>delta</b> <b>files</b> require memory or storage space on the target machine for both the old and new version of the file to be reconstructed. With the advent of network computing and Internet-enabled devices, many of these network attached target machines have limited addi-tional scratch space. We present an algorithm for modifying a <b>delta</b> compressed version <b>file</b> so that it may rebuild the new file version in the space that the current version occupies. ...|$|R
40|$|We {{present and}} {{algorithm}} for modifying <b>delta</b> compressed <b>files</b> {{so that the}} compressed versions may be reconstructed without requiring additional memory or storage space. This allows network clients with limited resources to efficiently update software by downloading delta compressed versions over a network. Delta compression for binary files, compactly encoding a version of data with only the changed bytes from a previous version, {{may be used to}} efficiently distribute software over low bandwidth channels, such as the Internet. Traditional methods of rebuilding these <b>delta</b> <b>files</b> require memory or storage space on the target machine for both the old and new version of the file to be reconstructed. With the advent of network computing and Internet set-top boxes, many of these network attached target machines have limited additional scratch space in memory or storage. We provide an algorithm for modifying a <b>delta</b> compressed version <b>file</b> so that it may rebuild the new file version in the spa [...] ...|$|R
40|$|Abstract—The {{rapid growth}} of {{embedded}} systems urgently requires methods of improving the development process for these systems. Component-based development (CBD) techniques have been widely studied to enhance the productivity of developing complex applications. These techniques can benefit the software development process for embedded systems {{as well as other}} application domains. However, applying CBD techniques to embedded software development faces additional challenges. For embedded systems, it is crucial to consider the QoS attributes, such as timeliness, memory limitations, output precision, battery constraints, etc. However, {{it is often difficult to}} adjust the QoS properties of a system integrated from components that do not consider QoS properties in the first place. In this paper, we present an overview of a repository-based embedded software development methodology and then focus on component parameterization techniques. The basic concept of the parameterization process is to identify configurable parameters in a component that can be parameterized to achieve QoS tradeoffs. The component is then modified to a reconfigurable one such that its configurable parameters can be adjusted to satisfy different QoS requirements for various applications or for dynamical changing execution environment. A rule base is used to assist the parameter identification process. We also develop <b>delta</b> <b>file</b> technique to facilitate component adaptation and testing tools for QoS data collection. Keywords-embedded system, component parameterization, QoS, Repository syste...|$|E
40|$|This report {{lists the}} Hanford {{specific}} files (Table 1) {{that make up}} the Hanford Site Technical Baseline Database. Table 2 includes the <b>delta</b> <b>files</b> that delineate the differences between this revision and revision 0 of the Hanford Site Technical Baseline Database. This information is being managed and maintained on the Hanford RDD- 100 System, which uses the capabilities of RDD- 100, a systems engineering software system of Ascent Logic Corporation (ALC). This revision of the Hanford Site Technical Baseline Database uses RDD- 100 version 3. 0. 2. 2 (see Table 3). Directories reflect those controlled by the Hanford RDD- 100 System Administrator. Table 4 provides information regarding the platform. A cassette tape containing the Hanford Site Technical Baseline Database is available...|$|R
40|$|Abstract {{results in}} high latency and low {{bandwidth}} to web-enabled clients and prevents the timely delivery of software. We present an algorithm for modifying delta compressed Differential or delta compression [5, 11, compactly enfiles {{so that the}} compressed versions may be reconstructed without scratch space. This allows network clients with limited resources to efficiently update software by retrieving delta compressed versions over a network. Delta compression for binary files, compactly encoding a version of data with only the changed bytes from a previous version, {{may be used to}} efficiently distribute software over low bandwidth channels, such as the Internet. Traditional methods for rebuilding these <b>delta</b> <b>files</b> require memory or storage space on the target machine for both the old and new version of the file to be reconstructed. With the advent o...|$|R
40|$|We present R 2, an {{incremental}} eprogramming approach using Relocatable code, to improve program similarity for efficient incremental reprogramming in networked embedded systems. R 2 achieves {{a higher degree}} of similarity than existing approaches by mitigating the effects of both function shifts and data shifts. R 2 makes efficient use of memory and does not degrade program quality. It adopts an optimized differencing algorithm to generate small <b>delta</b> <b>files</b> for efficient dissemination. We demonstrate R 2 's advantages through detailed analysis of TinyOS examples. We also present case studies on the software programs of a large-scale and long-term sensor systemGreenOrbs. Results show that R 2 reduces the dissemination cost by approximately 65 % compared to Deluge-state-of-the-art network reprogramming approach, and reduces the dissemination cost by approximately 20 % compared to Zephyr and Hermes-the latest works on incremental reprogramming. © 2011 IEEE...|$|R
40|$|Abstract—We present R 2, an {{incremental}} reprogramming approach using relocatable code, to improve program similarity for efficient incremental reprogramming in networked embedded systems. R 2 achieves {{a higher degree}} of similarity than existing approaches by mitigating effects of both function shifts and data shifts. R 2 adopts a content-aware differencing algorithm to generate small <b>delta</b> <b>files</b> for efficient dissemination. Besides, it makes efficient use of memory and does not degrade program quality. We implement R 2 based on TinyOS 2. 1 and demonstrate its advantages through detailed analysis of TinyOS examples. We also present case studies on the software programs of a large-scale sensor system—GreenOrbs. Results show that R 2 reduces the dissemination cost by approximately 65 percent compared to state-of-the-art network reprogramming approach—Deluge, and reduces the dissemination cost by approximately 20 percent compared to Zephyr and Hermes—the latest works on incremental reprogramming. Index Terms—Wireless sensor networks, reprogramming, relocatable code Ç...|$|R
50|$|In SCCS, a delta {{refers to}} a change of SCCS <b>file.</b> <b>Deltas</b> are stored in a delta table, so each SCCS file has its own record of changes.|$|R
25|$|Terminal A, which {{replaced}} a 1970s-era building {{designed by}} Minoru Yamasaki once {{occupied by the}} now-defunct Eastern Air Lines, opened to passengers on March 16, 2005. The terminal, designed by Hellmuth, Obata and Kassabaum, is divided into a main terminal (housing gates A1–A11) and a satellite building (housing gates A13–A22). The main terminal and the satellite building are connected through an underground walkway. The new redesigned Terminal A was developed under a special facility lease between Massachusetts Port Authority and Delta Airlines. The lease was signed on August 16, 2001 and development began. On September 14, 2005, six months after opening, <b>Delta</b> <b>filed</b> for bankruptcy and thus had {{to reduce the number}} of gates it leased in Terminal A. Terminal A features two Delta Sky Clubs. One is located on the third floor of the satellite building, and a newer one opened at the site of the old Continental Airlines Presidents Club in the main terminal building.|$|R
40|$|The Xdelta system {{implements}} {{a technique}} for archiving and compressing collections of many similar file versions. It stores only {{the differences between}} certain versions. I describe and discuss an algorithm for computing <b>file</b> <b>deltas,</b> present measurements, and demonstrate its application to versioned file-archival and efficient file-distribution network protocols. 1 Overview The <b>file</b> <b>delta</b> problem is to compute a small set of instructions for transforming one file into another [...] -one {{that is expected to}} be a function of the file's changes, not its content. This technique is well established for versioned file-archival. Though the advantages of using <b>file</b> <b>deltas</b> to transmit changes over a network are clear, specifying and widely deploying such a system efficient enough to justify itself is not as easy as it seems. There are a number of issues to overcome. First, the execution cost of computing and compressing deltas can be prohibitive [...] a site administrator might rather let everyone [...] ...|$|R
50|$|Terminal A, which {{replaced}} a 1970s-era building {{designed by}} Minoru Yamasaki once {{occupied by the}} now-defunct Eastern Air Lines, opened to passengers on March 16, 2005. The terminal, designed by Hellmuth, Obata and Kassabaum, is divided into a main terminal (housing gates A1-A11) and a satellite building (housing gates A13-A22). The main terminal and the satellite building are connected through an underground walkway. The new redesigned Terminal A was developed under a special facility lease between Massachusetts Port Authority and Delta Airlines. The lease was signed on August 16, 2001 and development began. On September 14, 2005, six months after opening, <b>Delta</b> <b>filed</b> for bankruptcy and thus had {{to reduce the number}} of gates it leased in Terminal A. Terminal A features two Delta Sky Clubs. One is located on the third floor of the satellite building, and a newer one opened at the site of the old Continental Airlines Presidents Club in the main terminal building.|$|R
5000|$|Versioned file {{content is}} stored in a master {{directory}} hierarchy whose top levels are called [...] "depots".Text file revisions are stored as RCS <b>deltas,</b> and binary <b>file</b> revisions are stored in their entirety.|$|R
50|$|Some other backup {{utilities}} save <b>deltas</b> for <b>file</b> changes, {{much like}} version control systems. Such an approach permits more frequent backups of minor changes, but can often complicate the {{interaction with the}} backup volume. By contrast, {{it is possible to}} manually browse a Time Machine backup volume without using the Time Machine interface; the use of hard links presents each backup to the user as a complete disk copy.|$|R
40|$|Inexpensive {{storage and}} more {{powerful}} processors {{have resulted in a}} proliferation of data that needs to be reliably backed up. Network resource limitations make it increasingly difficult to backup a distributed file system on a nightly or even weekly basis. By using delta compression algorithms, which minimally encode a version of a file using only the bytes that have changed, a backup system can compress the data sent to a server. With the delta backup technique, we can achieve significant savings in network transmission time over previous techniques. Our measurements indicate that file system data may, on average, be compressed to within 10 % of its original size with this method and that approximately 45 % of all changed files have also been backed up in the previous week. Based on our measurements, we conclude that a small file store on the client that contains copies of previously backed up files can be used to retain versions in order to generate <b>delta</b> <b>files.</b> To reduce the load on [...] ...|$|R
50|$|Comair's {{parent company}} <b>Delta</b> Air Lines <b>filed</b> for Chapter 11 {{bankruptcy}} on September 14, 2005, bringing Comair into bankruptcy along with it. Comair announced that would cut costs by million dollars annually. These savings were achieved by aircraft, flight, and employee reductions.|$|R
50|$|On August 15, 2005, in an SEC <b>filing,</b> <b>Delta</b> {{finalized}} {{a deal to}} sell Delta Connection carrier Atlantic Southeast Airlines (ASA) for $425 {{million in}} cash to SkyWest Airlines {{in an effort to}} obtain money to avoid bankruptcy. Analysts called the move a desperate one, estimating ASA's worth at around $700-$800 million - a price which SkyWest would not have been willing to pay.|$|R
40|$|The paper {{describes}} space-efficient {{techniques for}} storing versions of software components which are represented as files. Techniques {{are based on}} the use of differential <b>files</b> (<b>deltas).</b> We proposed, analysed, implemented and compared several techniques for applying deltas to trees of versions. We report on an environment the purpose of which is twofold: it supports effective storing and recovering versions and it allows to experiment with a branching tree of versions...|$|R
40|$|This thesis {{looks at}} various issues in {{providing}} application-level software support for parallel I/O. We {{show that the}} performance of the parallel I/O system varies greatly as a function of data distributions. We present runtime I/O primitives for parallel languages which allow the user to obtain a consistent performance over a wide range of data distributions. In order to design these primitives, we study various parameters used in the design of a parallel file system. We evaluate the performance of Touchstone <b>Delta</b> Concurrent <b>File</b> System and study the effect of parameters like number of processors, number of disks, file size on the system performance. We compute the I/O costs for common data distributions. We propose an alternative strategy-two phase data access strategy- to optimize the I/O costs connected with data distributions. We implement runtime primitives using the two-phase access strategy and show that using these primitives not only I/O access rates are improved but also [...] ...|$|R
40|$|Hosts {{connected}} to the Internet continue to suffer attacks with high frequency. The use of an intrusion detector allows potential threats to be flagged. When an alarm is raised, preventive action can be taken. A primary goal of such action is to assure {{the security of the}} data stored in the system. If this operation is effected manually, the delay between the alarm and the response may be enough for an intruder to cause significant damage. The alternative proposed in this paper is to provide a response primitive for intrusion detectors to utilize in automating the response. We describe RICE, a modification to the Java file subsystem that provides such functionality for data that is deemed to be threatened by an attack. If it is activated when an intrusion appears likely to succeed, it guarantees the confidentiality, integrity and availability of the protected data even after a system is compromised. In particular, RICE allows cryptographic encapsulation of data to be reduced to simple key deletion {{so that it can be}} effected rapidly. Further, it uses digitally signed hashes of <b>file</b> <b>deltas</b> to allow untainted data to be distinguished from the rest. Finally, <b>file</b> <b>deltas</b> are replicated at a remote node to ensure that changes made by an attacker can be undone using the remote replicas. 1...|$|R
50|$|Although these {{initiatives}} were largely successful, upward pressure on fuel prices and fierce competition from low cost carriers continued to keep Delta {{perilously close to}} bankruptcy. Hurricane Katrina resulted in a dramatic spike in jet fuel prices in Atlanta, which houses Delta's largest hub operation. Delta, which had previously sold its fuel hedges in a move to raise cash, was forced into an untenable cash position. On September 14, 2005, Delta and its subsidiaries filed a petition for bankruptcy protection under Chapter 11 of the U.S. Bankruptcy Code. At {{the time of the}} bankruptcy <b>filing,</b> <b>Delta's</b> total debt was approximately $23.8 billion.|$|R
40|$|For a {{high-performance}} parallel machine to be a scal-able system, it must afso have a scalable parallel 1 / 0 system. This paper presents an experimental {{evaluation of the}} Intel Touchstone <b>Delta’s</b> Concurrent <b>File</b> System (CFS). The main objective {{of the study is}} to determine the maximum file read/write rates for various configura-tions of 1 / 0 and compute nodes. In addition, we study the effects of file access modes, buffer sizes and file sizes on the system performance. In most cases, the result shows that performance of CFS scales as the number of disks is increased, but the sustained performance im-provements are much lower than the system’s peak ca-pacity. If’e observe that the performance of CFS scales with the number of processors in the beginning, how-ever, a plateu a quickly reached due to the 1 / 0 system bottleneck and enormous software overhead, especially that of synchronization. Finally we also show that the performance of the CFS can greatly vary for various data distributions commonly employed in scientific and engineering applications. ...|$|R
40|$|The genera of Oriental Agathidinae are {{revised and}} a fully {{illustrated}} dichotomous key is presented. New generic concepts are proposed for Bassus Fabricius, 1804 and Hypsostypos Baltazar, 1963. Bassus {{is restricted to}} a clade with an Old World distribution and the remaining members are divided amongst the resurrected genera Camptothlipsis Enderlein, 1920, Lytopylus Förster, 1862, and Therophilus Wesmael, 1837. The concept of Hypsostypos is restricted and the new genus Amputostypos Sharkey, gen. n. is proposed to include species formerly included in Hypsostypos {{that do not have}} raised antennal bases. Troticus Brullé, 1846 is reported from the Oriental region for the first time. Eighteen genera are recognized for Thailand and neighboring areas, i. e., Agathis Latreille, 1804, Amputostypos, Aneurobracon Brues, 1930, Bassus, Biroia Szépligeti, 1900, Braunsia Kriechbaumer, 1894, Camptothlipsis, Coccygidium Saussure, 1892, Cremnops Förster, 1862, Disophrys Förster, 1862, Earinus Wesmael, 1837, Euagathis Szépligeti, 1900, Gryochus Enderlein, 1920, Hypsostypos, Lytopylus Förster, 1862, Therophilus, Cremnoptoides van Achterberg & Chen, 2004, and Troticus. Identification keys to the genera are provided as a standard textual dichotomous key, as well as online keys in three different formats (conventional dichotomous, DELTA/Intkey, Lucid, and MX) to enable users to choose their prefered platform and to allow direct comparisons of the technologies for producing online keys. Publication of underlying data (data matrices, character states table, and images) under the OpenDataCommons license (ODbl) ([URL] for DELTA/Intkey files (doi: 10. 3897 /zookeys. 21. 271. app. 1. ik), primary <b>DELTA</b> <b>files</b> (10. 3897 /zookeys. 21. 271. app. 2. ik) Lucid 3 (LIF 3) and Lucid SDD key data files (doi: 10. 3897 /zookeys. 21. 271. app. 3. ik) and MX MySQL database files (doi: 10. 3897 /zookeys. 21. 271. app. 4. ik) allows future workers to edit keys and to add newly described taxa. The data files for the keys published and stored on the publisher’s website and in e-archives have the rights of “first publication” identified by its bibliography data, location and citation. Readers should cite the first published version and the day of accession in case they use future online versions of the same key. The concept of publication, citation, preservation, and re-use of data files to interactive keys under the open access model is discussed in a forum paper published in the present issue (doi: 10. 3897 /zookeys. 21. 274) ...|$|R
50|$|While ZumoDrive {{functioned as}} a file {{synchronization}} and storage service, it employed an approach that allows content in the cloud to appear local to the filesystem. ZumoDrive synchronization uses SSL transfers with AES-256 encryption, and it supports revision history—by use of deltas or <b>delta</b> encoding technology—so <b>files</b> deleted from the ZumoDrive virtual disk may be recovered {{from any of the}} synced computers. ZumoDrive's version control also helped users know the history of a file they may have been currently working on, enabling more than one person to edit and re-post files without edit conflicts or loss of information. There is no limit to file size for files added via the ZumoDrive client. ZumoDrive used Amazon's S3 simple storage service to store files in the cloud.|$|R
5000|$|After {{lifting the}} 1948 TV {{allocation}} [...] "freeze" [...] with its Sixth Report and Order (1952), the Federal Communications Commission allocated channels 8 and 43 to Monroe, Louisiana. [...] "Red" [...] Willett and Howard Griffith incorporated <b>Delta</b> Television to <b>file</b> {{for one of}} the two available allocations. Since, at the time, it was easier for applicants to be approved for a construction permit for a UHF station than a VHF station, Delta Television accepted the assignment of Channel 43 on December 10, 1952, and commenced construction of a two-studio facility at 2107 Forsythe Avenue in Monroe. The transmitter and tower were located at the studio building, as was common for television stations in the USA in the 1950s. The Channel 8 allocation was pursued by former governor James A. Noe and would become KNOE-TV.|$|R
40|$|Bioinformatics is {{a recent}} and {{emerging}} discipline which aims at studying biological problems through computational approaches. Most branches of bioinformatics such as Genomics, Proteomics and Molecular Dynamics are particularly computationally intensive, requiring huge amount of computational resources for running algorithms of everincreasing complexity over data of everincreasing size. In the search for computational power, the EGEE Grid platform, world's largest community of interconnected clusters load balanced as a whole, seems particularly promising and is considered the new hope for satisfying the everincreasing computational requirements of bioinformatics, as well as physics and other computational sciences. The EGEE platform, however, is rather new and not yet free of problems. In addition, specific requirements of bioinformatics {{need to be addressed}} in order to use this new platform effectively for bioinformatics tasks. In my three years' Ph. D. work I addressed numerous aspects of this Grid platform, with particular attention to those needed by the bioinformatics domain. I hence created three major frameworks, Vnas, GridDBManager and SETest, plus an additional smaller standalone solution, to enhance the support for bioinformatics applications in the Grid environment and to reduce the effort needed to create new applications, additionally addressing numerous existing Grid issues and performing a series of optimizations. The Vnas framework is an advanced system for the submission and monitoring of Grid jobs that provides an abstraction with reliability over the Grid platform. In addition, Vnas greatly simplifies the development of new Grid applications by providing a callback system to simplify the creation of arbitrarily complex multistage computational pipelines and provides an abstracted virtual sandbox which bypasses Grid limitations. Vnas also reduces the usage of Grid bandwidth and storage resources by transparently detecting equality of virtual sandbox files based on content, across different submissions, even when performed by different users. BGBlast, evolution of the earlier project GridBlast, now provides a Grid Database Manager (GridDBManager) component for managing and automatically updating biological flatfile databases in the Grid environment. GridDBManager sports very novel features such as an adaptive replication algorithm that constantly optimizes the number of replicas of the managed databases in the Grid environment, balancing between response times (performances) and storage costs according to a programmed cost formula. GridDBManager also provides a very optimized automated management for older versions of the databases based on reverse <b>delta</b> <b>files,</b> which reduces the storage costs required to keep such older versions available in the Grid environment by two orders of magnitude. The SETest framework provides a way to the user to test and regressiontest Python applications completely scattered with side effects (this is a common case with Grid computational pipelines), which could not easily be tested using the more standard methods of unit testing or test cases. The technique is based on a new concept of datasets containing invocations and results of filtered calls. The framework hence significantly accelerates the development of new applications and computational pipelines for the Grid environment, and the efforts required for maintenance. An analysis of the impact of these solutions will be provided in this thesis. This Ph. D. work originated various publications in journals and conference proceedings as reported in the Appendix. Also, I orally presented my work at numerous international conferences related to Grid and bioinformatics...|$|R
40|$|Taxonomic {{data are}} {{generally}} maintained {{in a number}} of formats across multiple database software platforms. Descriptive data in particular tends to be maintained in isolation and its integration with related systems is an important and inevitable issue. This presentation describes the framework for managing DELTA data in an integrated environment. It identifies the steps and processes involved in integrating DELTA descriptive data with other descriptive data and data maintained in other corporate database systems. It describes how the issues of data integrity, currency and duplication are resolved. It uses the Western Australian Herbarium’s Weed Information Network (WIN) as a case study to demonstrate how this integration is achieved. The challenge faced by our DELTA team was to implement an institutional DELTA database with a minimum of staffing resources and, at the same time, maintain currency of plant names and distributions. A coordinated approach, using staff and volunteers to capture only data not already maintained in other corporate systems, was adopted. Critical to this approach is an automated mechanism for extracting and generating DELTA-formatted data from these other systems. DELIA, the DELta IntegrAtor, developed at the WA Herbarium for managing institutional DELTA data, is the answer. Although it lends itself to general application, DELIA is currently being used to manipulate weed data by mapping, merging and creating DELTA datasets. Lists of weed species are extracted (by family), generated and distributed to scorers as <b>DELTA</b> Editor <b>files.</b> DELIA later merges the scored data into the WIN Master set. Finally, it automatically generates scores from data held in related non-DELTA systems (eg. distribution and family names) and interfaces directly with Confor for natural language descriptions and Intkey for interactive identification...|$|R
