37|9223|Public
25|$|Ground {{equipment}} {{is made up}} of a network of radio transceivers managed by a central site computer called AFEPS (Arinc <b>Front</b> <b>End</b> <b>Processor</b> System), which handles and routes messages. Generally, ground ACARS units are either government agencies such as the Federal Aviation Administration, an airline operations headquarters, or, for small airlines or general aviation, a third-party subscription service. Usually government agencies are responsible for clearances, while airline operations handle gate assignments, maintenance, and passenger needs.|$|E
5000|$|... $IAS.SYS - Input assist {{subsystem}} (IAS) with <b>front</b> <b>end</b> <b>processor</b> (FEP) support driver ...|$|E
50|$|RSX-20F - PDP-11/40 <b>front</b> <b>end</b> <b>processor</b> {{operating}} {{system for the}} DEC KL10 processor. Derived from RSX-11D.|$|E
50|$|Although the IBM Corporation withdrew its 3745/3746 Communications <b>Front</b> <b>End</b> <b>Processors</b> from {{marketing}} in 2003, {{the company}} continues {{to maintain the}} estimated 20,000 installed <b>front</b> <b>end</b> <b>processors.</b> IBM also provides microcode enhancement features. Smaller companies have filled the void created by IBM's action, providing machines, features, parts and services worldwide.|$|R
50|$|GE had a line {{of general}} purpose and special purpose computers. Among them were the GE 200, GE 400, and GE 600 series general purpose computers, the GE 4010, GE 4020, and GE 4060 {{real-time}} process control computers, the DATANET-30 and Datanet 355 message switching computers (DATANET-30 and 355 were also used as <b>front</b> <b>end</b> <b>processors</b> for GE mainframe computers). A Datanet 500 computer was designed, but never sold.|$|R
40|$|The LIGO Control and Data system (CDS) {{features}} a tightly coupled and highly integrated control and data acquisition system. Control of the interferometers requires many Multiple Input Multiple Output (MIMO) control loops closed both locally {{and across the}} 4 -kilometer interferometer arm lengths. In addition to providing the closed loop control, the control systems <b>front</b> <b>end</b> <b>processors</b> act as Data Collection Units (DCU) for the data acquisition system. Data collected by these <b>front</b> <b>ends</b> and the data acquisition system must be collected and time stamped to an accuracy of 1 microsecond and made available to on-line analysis tools such as the Global Diagnostics System (GDS) [1]. Data is also sent to the LIGO Data Analysis System (LDAS) [2] for long-term storage and off-line analysis. Data rates exceed 5 Mbytes per second per interferometer continuous. Connection between the various <b>front</b> <b>end</b> <b>processors</b> and the data acquisition system is achieved using fiber optic reflective memory networks. Both controls and data acquisition systems use VME hardware and VxWorks operating systems. This paper will present {{an overview of the}} LIGO CDS and discuss key aspects of its design. Comment: 5 page...|$|R
50|$|A <b>front</b> <b>end</b> <b>processor</b> (FEP), or a {{communications}} processor, is a small-sized computer which interfaces {{to the host}} computer a number of networks, such as SNA, or a number of peripheral devices, such as terminals, disk units, printers and tape units. Data is transferred between the host computer and the <b>front</b> <b>end</b> <b>processor</b> using a high-speed parallel interface. The <b>front</b> <b>end</b> <b>processor</b> communicates with peripheral devices using slower serial interfaces, usually also through communication networks. The purpose is to off-load from the host computer the work of managing the peripheral devices, transmitting and receiving messages, packet assembly and disassembly, error detection, and error correction. Two examples are the IBM 3705 Communications Controller and the Burroughs Data Communications Processor.|$|E
5000|$|Baidu Wireless {{provides}} various {{services for}} mobile phones, including a Chinese-input <b>front</b> <b>end</b> <b>processor</b> (FEP) for various popular operating systems including Android, Symbian S60v5, and Windows Mobile.|$|E
50|$|A {{payment gateway}} {{facilitates}} a payment transaction by {{the transfer of}} information between a payment portal (such as a website, mobile phone or interactive voice response service) and the <b>front</b> <b>end</b> <b>processor</b> or acquiring bank.|$|E
50|$|PWIN {{included}} three sites at the Pentagon, Reston, Virginia and Norfolk, Virginia. The sites included Honeywell H6000 computers, Datanet 355 <b>front</b> <b>end</b> <b>processors</b> and local computer terminals for system users. Connections were provided for remote terminals using microwave, cable, satellite, or landline connections. Honeywell H716 computers, {{used as an}} interface message processors (IMP) provided packet switching to network the PWIN sites together. The TELNET protocol was {{made available to the}} WWMCCS community {{for the first time to}} access remote sites. The PWIN network was based on experience gained from ARPANET.|$|R
40|$|A {{significant}} {{element of}} the Kennedy Space Center's ground support equipment for the Space Shuttle is the Launch Processing System, which provides {{a high level of}} automation for all operations, including the checkout of the Orbiter, Solid Rocket Boosters, and External Tank. Other direct support elements of the Ground Support Equipment accomplish environmental conditioning, provide and control power, gases, and fluids, and supply vehicle facility and personnel fire protection. Attention is given to the prelaunch functions of the Launch Control Center's Firing Rooms, which contain minicomputers, a data recording area, the Hardware Interface Modules, a Common Data Buffer, and <b>Front</b> <b>End</b> <b>Processors...</b>|$|R
40|$|Interferometric {{gravitational}} wave antennas {{are based on}} Michelson interferometers whose sensitivity to small differential length changes (for LIGO it is 1 part in 1021) has been enhanced by adding multiple coupled optical resonators. These antennas are used to verify the theory of relativity by detecting {{gravitational wave}}s from astronomical sources such as spiraling binary stars and black holes. Estimates for detection rates of such events by LIGO range from several events per month to several per year. The LIGO Control and Data system (CDS) features a tightly coupled and highly integrated control and data acquisition system. Control of the interferometers requires many Multiple Input Multiple Output (MIMO) control loops closed both locally and across the 4 -kilometer interferometer arm lengths. In addition to providing the closed loop control, the control systems <b>front</b> <b>end</b> <b>processors</b> act as Data Collection Units (DCU) for the data acquisition system. Data collected by these <b>front</b> <b>ends</b> and the data acquisition system must be collected and time stamped to an accuracy of 1 microsecond and made available to on-line analysis tools such as the Global Diagnostics System (GDS) [1]. Data is also sent to the LIGO Data Analysis System (LDAS) [2] for long-term storage and off-line analysis. Data rates exceed 5 Mbytes per second per interferometer continuous. Connection between the various <b>front</b> <b>end</b> <b>processors</b> and the data acquisition system is achieved using fiber optic reflective memory networks. Both controls and data acquisition systems use VME hardware and VxWorksÂ® operating systems. This paper will present {{an overview of the}} LIGO CDS and discuss key aspects of its design. ...|$|R
50|$|Inside the dewcell core a {{thermistor}} composite (or other {{temperature measurement}} device) changes electrical resistance with the temperature {{created by the}} heating. A <b>front</b> <b>end</b> <b>processor</b> provides a reference voltage, measures {{the output of the}} network, and calculates the dew point.|$|E
50|$|<b>Front</b> <b>end</b> <b>processor</b> is {{also used}} in {{a more general sense}} in {{asymmetric}} multi-processor systems. The FEP is a processing device (usually a computer) which is closer to the input source than is the main processor. It performs some task such as telemetry control, data collection, reduction of raw sensor data, analysis of keyboard input, etc.|$|E
5000|$|The Model 50 added fault {{tolerance}} to the single-node offering for organizations that require an extra level of system availability. The 9751 CBX Model 50 offered common control redundancy on one shelf and full redundancy {{in the following}} components: shared electronics, ROLMbus 295E, Advanced Diagnostics Processor, and Data <b>Front</b> <b>End</b> <b>Processor</b> II (DRE II) Cards. Power redundancy was optional.|$|E
40|$|New VME based {{boards are}} being {{produced}} for the Run II of the Collider Detector at Fermilab (CDF). These boards {{are being developed}} and tested at both Fermilab and offsite institutions. A software framework called CDFVME has been developed in which DAQ code can be easily written to control such boards in a test stand. The framework {{has been used to}} perform diagnostics at single board, multi-board, and multi-crate levels. This software framework runs on Unix, Linux and Windows NT platforms with a Java GUI communicating via LAN to multiple intelligent <b>front</b> <b>end</b> VME crates. All distributed processes are managed by a custom CORBA based software. The system has been ported to Motorola 68 K and PPC <b>front</b> <b>end</b> <b>processors</b> running the VxWorks real-time kernel [1]...|$|R
40|$|Approved {{for public}} release; {{distribution}} is unlimitedMini and micro computers represent the newest {{developments in the}} computer field. Their small size, low cost, and wide ranging versatility make them valuable devices for use in communications systems. They {{can be used to}} perform many of the message handling functions previously performed by the main computer, thus freeing it for its more important application tasks. The use of mini and micro computers as <b>front</b> <b>end</b> <b>processors,</b> data concentrators and terminal controllers is investigated, as well as the general hardware and software features such small computers must have to perform communications functions. A cost comparison between minicomputers, microcomputers and hardwired devices is also presented. [URL]...|$|R
40|$|International Telemetering Conference Proceedings / October 22 - 25, 1984 / Riviera Hotel, Las Vegas, NevadaTelemetry data {{processing}} ground stations commonly unite dissimilar equipment {{into what is}} often a large disjoint series of synchronizers, specialized <b>front</b> <b>end</b> <b>processors,</b> and high performance back <b>end</b> data <b>processors.</b> With a few basic building blacks, small-tolarge uniform systems are being built that avoid this problem while hiding the task size from the end user yet allowing flexibility in the data acquisition and processing. This discussion focuses on the implementation of an integrated telemetry processing system with varying levels of complexity. The discussion covers the full spectrum from the simple processing element (single pc board) to the {{data processing}} substation (single instrument) to a full load sharing, redundant, distributed system (network of substations). Each level utilizes a different form of distributed processing yet adheres to an overall philosophy of date flow as opposed to fixed instruction sequencing...|$|R
50|$|A {{database}} machines or {{back end}} processor {{is a computer}} or special hardware that stores and retrieves data from a database. It is specially designed for database access and is coupled to the main (front-end) computer(s) by a high-speed channel. The database machine is tightly coupled to the main CPU, whereas the database server is loosely coupled via the network. Database machines can transfer large packets of data to the mainframe using hundreds to thousands of microprocessors with database software. The <b>front</b> <b>end</b> <b>processor</b> receives the data and displays it. The back end processor {{on the other hand}} analyzes and stores the data from the <b>front</b> <b>end</b> <b>processor.</b> Back end processors result in higher performance, increasing host main memory, increasing database recovery and security, and decrease of cost to manufacture. The database machine contrasts with a database server, which is a computer in a local area network that holds a database.|$|E
5000|$|BTAM was {{an access}} method for interactively {{communicating}} with remote terminals, usually connected through a <b>front</b> <b>end</b> <b>processor</b> {{such as a}} 270x, although support for local 3270 terminals was included. BTAM dynamically built CCW's for reading, writing and [...] "polling" [...] terminals and dealt with specific responses from those terminals, according to {{the success or failure}} of the communication channel.|$|E
50|$|The site is on 190-acres of {{land that}} is {{a major role in}} HRM's {{integrated}} waste/recourse management strategy which requires several important conditions about materials that can be placed in the site: hazardous waste, recyclable material and unstabilized organic material. The site features a <b>front</b> <b>end</b> <b>processor</b> (FEP) which will sort out unwanted materials. It is located off exit 3 of Nova Scotia Highway 103.|$|E
40|$|International Telemetering Conference Proceedings / October 13 - 15, 1981 / Bahia Hotel, San Diego, CaliforniaThe {{expanding}} {{requirement in}} Modern Telemetry Systems for Real-Time Data Processing has necessitated the commutation {{of a vast}} majority of the data processing functions into <b>Front</b> <b>End</b> <b>Processors.</b> Even the fastest of Host Processors has proven incapable of keeping pace with high speed data rates (up to 4 Megawords). The commutation of processing power into the telemetry <b>front</b> <b>end</b> has elicited the employment of distributive processing techniques in order to attain the desired throughput. A distributive processing system architecture achieves high processing throughput by apportioning data analysis functions. By defining and programming unique processing nodes to selectively acquire, distribute, compress, and/or convert data, extensive simultaneous operations are executable. Hardware merged bus structures have lent themselves conveniently to this method of data distribution and control. Conversely, conventional software structures are unsuited to distributive processing architectures which must support a broad spectrum of modular configurations. Primarily, this is evidenced when the composite system software must be repetitively customized as additional processing power or new capabilities are incorporated. Composite software that delivers a high degree of system configuration adaptability is nominally large and complex, is limited in application, depletes system memory resources and complicates sustaining software maintenance. In addition, an undesirable human interface is normally unavoidable with composite software since it requires that the user learn the specific <b>front</b> <b>end</b> systemâs terminology and individual components. Bus Structure Software consigns itself to effectively support distributive processing techniques providing for adaptive system configurations. This disquisition will address the concepts of bus structured software and its application to distributive processing. Furthermore, this paper will discuss the architectural capability to service a wide range of telemetry users without specialized system tailoring. A typical implementation of this convention, the Advanced Decommutation System (ADS) designed by LORAL DATA SYSTEMS, San Diego, California will also be presented...|$|R
40|$|International Telemetering Conference Proceedings / October 17 - 20, 1988 / Riviera Hotel, Las Vegas, NevadaThe Multi-Vehicle Metric & Telemetry System (MMTS) is a {{complete}} range system which performs real-time tracking, command destruct, and telemetry processing functions for support of range safety and the test and evaluation of airborne vehicles. As currently configured, the MMTS consists of five hardware and software subsystems with the capability to receive, process, and display tracking data from up to ten range sensors and telemetry data from two instrumented vehicles. During a range operation, the MMTS is employed to collect, process, and display tracking and telemetry data. The instrumentation sites designated for operational support acquire tracking and telemetered data and transmit these data to the MMTS. The raw data is then identified, formatted, time tagged, recorded, processed, and routed for display to mission control and telemetry display areas. Additionally, processed tracking data is transmitted back to instrumentation sites {{as an aid to}} acquire or maintain vehicle track. The mission control area consists of a control and status console, high resolution color graphics stations, and large screen displays. As the mission controller observes mission progress on the graphics stations operational decisions can be made and invoked by activation of the appropriate console controls. Visual alarms provided my MMTS will alert mission control personnel of hazardous conditions posed by any tracked vehicle. Manual action can then be taken to activate transmission of the MMTS vehicle destruct signal. The telemetry display area consists of ten fully-functional, PC compatible computers which are switchable to either of two telemetry <b>front</b> <b>end</b> <b>processors.</b> Each PC can be independently set up by telemetry analysts to display data of interest. A total of thirty data pages per PC can be defined and any defined data page can be activated during a mission. A unique feature of the MMTS is that telemetry data can be combined with tracking data for use by the range safety functions...|$|R
40|$|This new {{implementation}} of the PROgramming System for Structural Synthesis (PROSSS- 2) combines a general-purpose finite element computer program for structural analysis, a state-of-the-art optimization program, and several user-supplied, problem-dependent computer programs. The results are flexibility of the optimization procedure, organization, and versatility of the formulation of constraints and design variables. The analysis-optimization process results in a minimized objective function, typically the mass. The analysis and optimization programs are executed repeatedly by looping through the system until the process is stopped by a user-defined termination criterion. However, some of the analysis, such as model definition, need only be one time {{and the results are}} saved for future use. The user must write some small, simple FORTRAN programs to interface between the analysis and optimization programs. One of these programs, the front processor, converts the design variables output from the optimizer into the suitable format for input into the analyzer. Another, the <b>end</b> <b>processor,</b> retrieves the behavior variables and, optionally, their gradients from the analysis program and evaluates the objective function and constraints and optionally their gradients. These quantities are output in a format suitable for input into the optimizer. These user-supplied programs are problem-dependent because they depend primarily upon which finite elements are being used in the model. PROSSS- 2 differs from the original PROSSS in that the optimizer and <b>front</b> and <b>end</b> <b>processors</b> have been integrated into the finite element computer program. This was done to reduce the complexity and increase portability of the system, and {{to take advantage of the}} data handling features found in the finite element program...|$|R
50|$|Ground {{equipment}} {{is made up}} of a network of radio transceivers managed by a central site computer called AFEPS (Arinc <b>Front</b> <b>End</b> <b>Processor</b> System), which handles and routes messages. Generally, ground ACARS units are either government agencies such as the Federal Aviation Administration, an airline operations headquarters, or, for small airlines or general aviation, a third-party subscription service. Usually government agencies are responsible for clearances, while airline operations handle gate assignments, maintenance, and passenger needs.|$|E
50|$|MTS input/output is {{record or}} line oriented. Programs read lines from a terminal, card reader, disk file, or tape and write lines to a terminal, printer, disk file, or tape. Conversion {{to and from}} ASCII/EBCDIC and end-of-line {{processing}} is usually done by a <b>front</b> <b>end</b> <b>processor</b> or Device Support Routine (DSR) and so is not a concern of most programs. While {{it is possible to}} do character I/O to a terminal by reading or writing single character lines, reading or writing many such very short lines is not very efficient.|$|E
5000|$|The CCM and the MCC {{running in}} {{emulation}} mode were [...] "dumb" [...] hardware interfaces. That is, all the network protocol intelligence, including terminal polling, error recovery, and message construction {{resided in the}} mainframe, while the CCM and MCC simply acted as conduits between the mainframe and the phone lines. It wasn't until the MCC {{was used as a}} true <b>front</b> <b>end</b> <b>processor</b> that much of this overhead (such as polling and error recovery) was offloaded from the mainframe, thus freeing up computer time for running application programs. This did not occur until the VS/9 era.|$|E
40|$|The {{primary goal}} of this grant has been the design and {{implementation}} of software {{to be used in}} the conceptual design of aerospace vehicles particularly focused on the elements of geometric design, graphical user interfaces, and the interaction of the multitude of software typically used in this engineering environment. This has resulted in the development of several analysis packages and design studies. These include two major software systems currently used in the conceptual level design of aerospace vehicles. These tools are SMART, the Solid Modeling Aerospace Research Tool, and EASIE, the Environment for Software Integration and Execution. Additional software tools were designed and implemented to address the needs of the engineer working in the conceptual design environment. SMART provides conceptual designers with a rapid prototyping capability and several engineering analysis capabilities. In addition, SMART has a carefully engineered user interface that makes it easy to learn and use. Finally, a number of specialty characteristics have been built into SMART which allow it to be used efficiently as a <b>front</b> <b>end</b> geometry <b>processor</b> for other analysis packages. EASIE provides a set of interactive utilities that simplify the task of building and executing computer aided design systems consisting of diverse, stand-alone, analysis codes. Resulting in a streamlining of the exchange of data between programs reducing errors and improving the efficiency. EASIE provides both a methodology and a collection of software tools to ease the task of coordinating engineering design and analysis codes...|$|R
40|$|This paper investigates three {{software}} {{standards and}} applies {{them to the}} use case of setting up a C 2 to RF (end-to-end) satellite ground system. It can be shown that {{through the use of}} these standard interfaces, flexible, multi-mission ground system architectures can be operationally capable in a fraction of the time when compared to traditional satellite missions. In addition to the shortened timetable, integration and operational costs are reduced through the use of this approach. Today 2 Ì 7 s satellite industry has seen advances in technologies, driven by design and manufacturing advances, allowing for the introduction of Small Satellites and forcing ground system architectures to shift from static, program oriented architectures to flexible, multi-mission architectures. Similar to large, satellite program ground architectures, Small Satellites require complete C 2 to RF solutions, yet many do not have the budget or schedule for a traditional approach. These constraints have facilitated the use of software standards to decrease timetables and reduce both integration and operational costs. Representational State Transfer (REST) is an adaptive software architecture used in the development of higher-performing and more maintainable communications architectures. Leveraging common interfaces, REST allows an open, web-based approach to communicate with ground system equipment and satellite busses. The XML Telemetric and Command Exchange (XTCE) standard is used for defining and sharing telemetry and command (T 2 Ì 6 C) data streams using Extensible Markup Language (XML). Through the use of XTCE, Small Satellite mission no longer rely on proprietary C 2 databases or complex, negotiated Factory to Ground ICDs to share and store telemetry and commands. Use of the XTCE standard allows developers, operators and integrators the ability to construct and test their own satellite databases using unifying database formats across satellites and ground systems. The Ground Equipment Monitoring Service (GEMS) standard creates an interface for ingesting telemetry, sending commands, and controlling ground system equipment. Interfaces to <b>Front</b> <b>End</b> <b>Processors,</b> Modems, AFSCN Interfaces and Antenna Control Units no longer need to be custom processes, but are available for use out-of-the-box using GEMS-compliant equipment. Using GEMS, new equipment can be readily adopted, tested and incorporated into the existing ground system. As part of a flexible ground system architecture, use of REST, XTCE and GEMS standards allow for operational capabilities in weeks instead of months or years, filling the Small Satellite need for shorter timetables compared to traditional architectures. Through the use of these standards, programs can focus on the development of payloads and mission unique applications instead of integration of ground system components. This paper will detail the three standards, their use and applicability in the Small Satellite industry and how Small Satellite missions can benefit by incorporating a standards based approach in their ground system architecture...|$|R
40|$|To achieve high {{instruction}} throughput, instruction schedulers must {{be capable}} of producing high-quality schedules that maximize functional unit utilization {{while at the same}} time enabling fast instruction issue logic. Many solutions exist to the scheduling problem, ranging from compile-time to run-time approaches. Compile-time solutions feature fast and simple hardware, but at the expense of conservative schedules. Dynamic schedulers produce high-quality schedules that incorporate run-time information and dependence speculation, but implementing these schedulers requires complex circuits that can slow processor clock speeds. In this paper, we present the Cyclone scheduler, a novel design that captures the benefits of both compileand run-time scheduling. Our approach utilizes a listbased single-pass instruction scheduling algorithm, implemented by hardware at run-time in the <b>front</b> <b>end</b> of the <b>processor</b> pipeline. Once scheduled, instructions are injected into a timed queue that orchestrates their entry into execution. To accommodate branch and load/store dependence speculation, the Cyclone scheduler supports a simple selective replay mechanism. We implement this technique by overloading instruction register forwarding to also detect instructions dependent on incorrectly scheduled operations. Detailed simulation analyses suggest that with sufficient queue width, the Cyclone scheduler can rival the instruction throughput of similarly wide monolithic dynamic schedulers. Furthermore, the circuit complexity of the Cyclone scheduler is much more favorable than a broadcast-based scheduler, as our approach requires no global control signals. ...|$|R
5000|$|The 8103 was {{proposed}} as a low-end processor [...] "to relieve the larger {{systems of the}} series from the tasks associated with input-output processing." [...] The 8103 was to have featured a 4 K or 8 K 8 Î¼s magnetic-core memory, organized as 16 bit words of two eight bit bytes. The system could also share 2 Î¼s core memory with larger processors. Memory was organized into segments [...] - [...] segment size is unspecified in the proposal. The 8103 was to be multiprogrammed to support its mission as an input/output or <b>front</b> <b>end</b> <b>processor.</b> Interestingly it appears that task switching was to be automatic under hardware control.|$|E
50|$|The {{company was}} founded as CMC, or Computer Machinery Company Limited, on 18 September 1969 by Ray Parry. They were {{originally}} distributors and subsequently manufacturers of key to disk computer systems {{made by the}} US-based Computer Machinery Corporation. The CMC key to disk systems were used by companies and government departments for data capture. In 1976, CMC developed a bit-slice based intelligent terminalâthe P99âwhich it used both as a <b>front</b> <b>end</b> <b>processor</b> to the key to disk systems and as a terminal in its own right. It then evolved the CMC P99 into the P141âa true front-end processor, which it used to implement a new data capture system call Sovereign. This was used in manufacturing companies such as Rolls-Royce plc, British Steel Corporation and various government departments including providing data capture for the DHSS at Newcastle upon Tyne. It later evolved into the M8000 system, based on Intel-processor-based systems.|$|E
50|$|The Model 10 {{brought the}} power and {{applications}} of the 9751 CBX to small and medium-size business in a compact, cost-effective package. Up to 100 stations could be supported by a single modular cabinet (single shelf) system. Cabinets two and three each supporting up to 250 stations, could be added in an integrated, stackable fashion to bring the Model 10's capacity to 600 stations. The Model 10 is designed to operate in standard office environments. Release 9005 supports the 9751 CBX Model Model 10 with all the single-card interfaces and {{a full range of}} applications. The Model 10 has the same data-connectivity capability as the other 9751 CBX models, is fully data compatible, and with the optional Data <b>Front</b> <b>End</b> <b>Processor</b> II(DFE II), became a highly efficient system for voice and data integration. The Model 10 cannot use Cornet hardware (RPDN card); CORNet is a proprietary networking software (an extension of ISDN PRI protocols) for Siemens PBXs and the original 9751-9005 model. Also the cabinet is a different design from the other models (the Model 20 through 70 use the same cabinet design, etc.).|$|E
40|$|Front-end {{instruction}} delivery {{accounts for}} a significant fraction of the energy consumed in a dynamic superscalar processor. The issue queue in these processors serves two crucial roles: it bridges the <b>front</b> and back <b>ends</b> of the <b>processor</b> and serves as the window of instructions for the outof-order engine. A mismatch between the <b>front</b> <b>end</b> producer rate and back end consumer rate, and between the supplied instruction window from the <b>front</b> <b>end,</b> and the required instruction window to exploit the level of application parallelism, results in additional front-end energy, and increases the issue queue utilization. While the former increases overall processor energy consumption, the latter aggravates the issue queue hot spot problem. We propose a complementary combination of fetch gatin...|$|R
25|$|The {{meaning of}} a tree was {{somewhat}} different for different language <b>front</b> <b>ends,</b> and <b>front</b> <b>ends</b> could provide their own tree codes. This was simplified {{with the introduction of}} GENERIC and GIMPLE, two new forms of language-independent trees that were introduced with the advent of GCC 4.0. GENERIC is more complex, based on the GCC 3.x Java <b>front</b> <b>end's</b> intermediate representation. GIMPLE is a simplified GENERIC, in which various constructs are lowered to multiple GIMPLE instructions. The C, C++ and Java <b>front</b> <b>ends</b> produce GENERIC directly in the <b>front</b> <b>end.</b> Other <b>front</b> <b>ends</b> instead have different intermediate representations after parsing and convert these to GENERIC.|$|R
40|$|In {{the first}} phase of construction, sixteen {{insertion}} device beamline <b>front</b> <b>ends</b> and sixteen bending magnet beamline <b>front</b> <b>ends</b> will be built by 1995 for the Advanced Photon Source (APS). Designs for these <b>front</b> <b>ends</b> have been completed. In this paper, the particular designs and specifications as well as the optical and bremsstrahlung ray-tracing analysis for the APS <b>front</b> <b>ends</b> are presented...|$|R
