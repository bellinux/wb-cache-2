2333|2039|Public
5|$|The {{new field}} was unified and {{inspired}} {{by the appearance of}} Parallel <b>Distributed</b> <b>Processing</b> in 1986—a two volume collection of papers edited by Rumelhart and psychologist James McClelland. Neural networks would become commercially successful in the 1990s, when they began to be used as the engines driving programs like optical character recognition and speech recognition.|$|E
5|$|Theorists {{have worked}} to {{understand}} these response patterns by constructing mathematical models of neurons and neural networks, which can be simulated using computers. Some useful models are abstract, focusing on the conceptual structure of neural algorithms rather than {{the details of how}} they are implemented in the brain; other models attempt to incorporate data about the biophysical properties of real neurons. No model on any level is yet considered to be a fully valid description of brain function, though. The essential difficulty is that sophisticated computation by neural networks requires <b>distributed</b> <b>processing</b> in which hundreds or thousands of neurons work cooperatively—current methods of brain activity recording are only capable of isolating action potentials from a few dozen neurons at a time.|$|E
25|$|In the mid-1980s, {{parallel}} <b>distributed</b> <b>processing</b> {{became popular}} {{under the name}} connectionism. Rumelhart and McClelland (1986) described the use of connectionism to simulate neural processes.|$|E
25|$|In 1954, the Playthings, Jewelry and Novelty Workers Union and the <b>Distributing,</b> <b>Processing</b> and Office Workers Union {{merged with}} RWDSU.|$|R
40|$|Abstract- In <b>distributed</b> image <b>processing</b> {{framework}} {{consist of}} analysing the performance through distributed control. It is also includes data association and dynamic data control. In this paper various distributed environments are discussed and shows how <b>distributed</b> image <b>processing</b> algorithms work by using dynamic data {{for a particular}} application. Keywords:- <b>Distributed</b> Image <b>processing,</b> data association. I...|$|R
5000|$|When HARLIE Was One, a 1972 {{novel by}} David Gerrold, dealing with self-preservation of an AI and {{computer}} virus {{as a means}} of <b>distributing</b> <b>processing</b> power.|$|R
25|$|The {{application}} features <b>distributed</b> <b>processing</b> abilities, {{which can}} function across an Ethernet LAN. One machine runs the Logic Pro app, {{while the other}} machines on the network run the Logic node app. Logic will then offload the effects and synth processing to the other machines on the network. If the network is fast enough (i.e. gigabit Ethernet) this can work in near-real time, depending on buffer settings and CPU loads. This allows users to combine the power of several Mac computers to process Logic Pro’s built-in software instruments and plug-ins, and 3rd party processing plug-ins.|$|E
25|$|Bader {{serves on}} the Steering Committees of the International Parallel and <b>Distributed</b> <b>Processing</b> Symposium (IPDPS) and HiPC conferences, and was the General co-Chair for IPDPS in 2004—2005, and Vice General Chair for HiPC in 2002—2004. David has {{previously}} chaired several conference program committees, was the Program Chair for HiPC 2005, and a Program Vice-Chair for IPDPS 2006. Bader was the General Chair of the 24th IPDPS, was held on April 19–23, 2010 in Atlanta, Georgia. He served as the Editor-in-Chief of the IEEE Transactions on Parallel and Distributed Systems (TPDS), from 2013-2017 and serves as an Associate Editor-in-Chief of the Journal of Parallel and Distributed Computing (JPDC). Bader has been {{an associate editor of}} several journals, including IEEE Transactions on Parallel and Distributed Systems, IEEE DSOnline, Parallel Computing, and the ACM Journal of Experimental Algorithmics, and has published over 210 articles in peer reviewed journals and conferences. From July 2003 to June 2007, Bader was also the chair of the IEEE Computer Society's Technical Committee on Parallel Processing.|$|E
2500|$|These {{developments}} {{have led to}} the modern study of logic and computability, and indeed the field of theoretical computer science as a whole. Information theory was added to the field with a 1948 mathematical theory of communication by Claude Shannon. In the same decade, Donald Hebb introduced a mathematical model of learning in the brain. With mounting biological data supporting this hypothesis with some modification, the fields of neural networks and parallel <b>distributed</b> <b>processing</b> were established. In 1971, Stephen Cook and, working independently, Leonid Levin, proved that there exist practically relevant problems that are NP-complete [...] a landmark result in computational complexity theory.|$|E
40|$|Abstract—The {{available}} literatures on {{image processing}} in agriculture application under high performance computing (HPC) are limited and sometimes are not discussed in details. This paper reviewed the steps of image analysis done in some image processing focusing on agriculture application and also the details analysis of parallel and <b>distributed</b> image <b>processing.</b> The memory architecture in parallel and <b>distributed</b> image <b>processing</b> and some suitable application programming interface (API) in parallel and <b>distributed</b> image <b>processing</b> are examined. In general, this study provides basic understanding of parallel and <b>distributed</b> image <b>processing</b> for agriculture application...|$|R
40|$|In today's world, stream {{processing}} systems have become important, as applications like media broadcasting, sensor network monitoring and on-line data analysis increasingly rely on real-time {{stream processing}}. At the same time, service overlays that support <b>distributed</b> stream <b>processing</b> applications {{are increasingly being}} deployed in wide-area environments. The inherent heterogeneous, dynamic and large-scale nature of these systems {{makes it difficult to}} meet the Quality of Service (QoS) requirements of <b>distributed</b> stream <b>processing</b> applications. This has necessitated the investigation of mechanisms that improve their scalability, efficiency and performance. In {{the first part of this}} work we consider the problem of composing stream processing applications in a <b>distributed</b> stream <b>processing</b> system. First, we propose a <b>distributed</b> stream <b>processing</b> system that composes stream processing applications dynamically, while meeting their rate demands. Second, we address the load balancing problem for <b>distributed</b> stream <b>processing</b> applications and present a decentralized and adaptive algorithm that allows the composition of <b>distributed</b> stream <b>processing</b> applications on the fly across a large-scale system, while satisfying their QoS demands. The algorithm fairly distributes the load on the resources and adapts dynamically to changes in the resource utilization or the QoS requirements of the applications. In the second part, we present BARRE (Burst Accommodation through Rate REconfiguration), a method to address the problem of burst accommodation in a <b>distributed</b> stream <b>processing</b> system. Upon the emergence of a burst, BARRE dynamically reserves the resources dispersed across the nodes of a <b>distributed</b> stream <b>processing</b> system, based on the requirements of each application as well as the resources available on each node. Our experimental results over a real <b>distributed</b> stream <b>processing</b> testbed demonstrate the efficiency of our approach...|$|R
40|$|In the {{environment}} of wide-area networks such as the Internet, <b>distributed</b> query <b>processing</b> becomes problematic due to the changing coming from both underlying networks and user's requirements. In this new context, conventional query processing strategies with the homogeneous assumption will not work well, because {{they are unable to}} adapt to unexpected changes in the performance of the communication networks. In this paper, we address the issue of how to make <b>distributed</b> query <b>processing</b> be aware of these changes. We introduce the idea of integration <b>distributed</b> query <b>processing</b> with Quality of Service (QoS) management and accordingly illustrate our view of QoS-aware <b>distributed</b> query <b>processing.</b> 1...|$|R
2500|$|Howard Bloom has {{discussed}} mass behavior – collective behavior from {{the level of}} quarks {{to the level of}} bacterial, plant, animal, and human societies. He stresses the biological adaptations that have turned most of this earth's living beings into components of what he calls [...] "a learning machine". In 1986 Bloom combined the concepts of apoptosis, parallel <b>distributed</b> <b>processing,</b> group selection, and the superorganism to produce a theory of how collective intelligence works. Later he showed how the collective intelligences of competing bacterial colonies and human societies can be explained in terms of computer-generated [...] "complex adaptive systems" [...] and the [...] "genetic algorithms", concepts pioneered by John Holland.|$|E
2500|$|Before {{the movie}} Star Trek: First Contact, the Borg {{exhibited}} no hierarchical command structure, instead using a structure with no control center and <b>distributed</b> <b>processing.</b> First Contact introduced the Borg Queen, {{who is not}} named as such in the film, but is referred to by that name during the credits. The Queen is played by Alice Krige in this film and in the finale of Star Trek: Voyager, [...] "". The character also appeared in Voyager's two-part episodes [...] "" [...] and [...] "", but was portrayed by Susanna Thompson (due to Krige's unavailability during the filming of those episodes). Whether or {{not all of these}} appearances represent exactly the same Queen is never confirmed.|$|E
2500|$|The {{application}} features <b>distributed</b> <b>processing</b> abilities (in 32-bit mode), {{which can}} function across an Ethernet LAN. One machine runs the Logic Pro app, {{while the other}} machines on the network run the Logic node app. Logic will then offload the effects and synth processing to the other machines on the network. If the network is fast enough (i.e. gigabit Ethernet) this can work in near real-time, depending on buffer settings and CPU loads. This allows users to combine the power of several Macintosh computers to process Logic Pro’s built-in software instruments and plug-ins, and 3rd party processing plug-ins. [...] As of version 10.0.7, Logic can access 24 processing threads, which is inline with Apple's flagship 12-core Mac Pro.|$|E
40|$|This paper {{presents}} {{the idea of}} "tuple bit-vectors" for <b>distributed</b> query <b>processing.</b> Using tuple bit-vectors, a new two-way semijoin operator called 2 SJ++ that enhances the semijoin with an essentially "free" backward reduction capability is proposed. We explore in detail the benefits and costs of 2 SJ++ compared with other semijoin variants, {{and its effect on}} <b>distributed</b> query <b>processing</b> performance. We then focus on one particular <b>distributed</b> query <b>processing</b> algorithm, called the "one-shot" algorithm. We modify the one-shot algorithm by using 2 SJ++ and demonstrate the improvements achieved in network transmission cost compared with the original one-shot technique. We use this improvement to demonstrate that equipped with the 2 SJ++ technique, one can improve the performance of <b>distributed</b> query <b>processing</b> algorithms significantly without adding much complexity to the algorithms. A New Client-Server Architecture for <b>Distributed</b> Query <b>Processing</b> Zhe Li Kenneth A. Ross Computer Scie [...] ...|$|R
40|$|International audienceThis paper investigates <b>distributed</b> event <b>processing</b> in smart grids, {{considering}} the following {{quality of service}} (QoS) dimensions: event priority, network occupation, memory occupation, and notification latency. It proposes an architecture for a QoS based <b>distributed</b> event <b>processing.</b> Our approach considers that the event processing is implemented as a network of operators that are executed by <b>distributed</b> event <b>processing</b> units. We also investigate on strategies used by event processing units {{in order to address}} QoS requirements...|$|R
40|$|A {{coordinating}} {{framework for}} standardization of open <b>distributing</b> <b>processing</b> An architecture created to support – distribution – interworking – interoperability – portability A big picture to organize pieces {{of an open}} distributed system into a coherent whole Abstract but not vague Components but not implementation...|$|R
50|$|Unisys OS 2200 <b>distributed</b> <b>processing</b> for {{information}} about OS 2200 <b>distributed</b> <b>processing.</b>|$|E
5000|$|Enterprise Modelling Methodology/Open <b>Distributed</b> <b>Processing</b> (EMM/ODP) ...|$|E
50|$|Qmaster 3 - a <b>distributed</b> <b>processing</b> tool.|$|E
40|$|Service {{overlays}} {{that support}} <b>distributed</b> stream <b>processing</b> applications {{are increasingly being}} deployed in wide-area environments. The inherent heterogeneous, dynamic and large-scale nature of these systems {{makes it difficult to}} meet the Quality of Service (QoS) requirements of the <b>distributed</b> stream <b>processing</b> applications. In this paper we address the load balancing problem for <b>distributed</b> stream <b>processing</b> applications and present a decentralized and adaptive algorithm that allows the composition of <b>distributed</b> stream <b>processing</b> applications on the fly across a large-scale system, while satisfying their QoS demands. The algorithm fairly distributes the load on the resources and adapts dynamically to changes in the resource utilization or the QoS requirements of the applications. Our experimental results demonstrate the scalability, efficiency and performance of our approach. ...|$|R
5000|$|Distributed {{relational}} database queries using <b>distributed</b> set <b>processing</b> ...|$|R
40|$|This paper {{presents}} {{the idea of}} "tuple bit-vectors" for <b>distributed</b> query <b>processing.</b> Using tuple bit-vectors, a new two-way semijoin operator called 2 SJ++ that enhances the semijoin with an essentially "free" backward reduction capability is proposed. We explore in detail the benefits and costs of 2 SJ++ compared with other semijoin variants, {{and its effect on}} <b>distributed</b> query <b>processing</b> performance. We then focus on one particular <b>distributed</b> query <b>processing</b> algorithm, called the "one-shot" algorithm. We modify the one-shot algorithm by using 2 SJ++ and demonstrate the improvements achieved in network transmission cost compared with the original one-shot technique. We use this improvement to demonstrate that equipped with the 2 SJ++ technique, one can improve the performance of <b>distributed</b> query <b>processing</b> algorithms significantly without adding much complexity to the algorithms...|$|R
5000|$|... #Article: International Parallel and <b>Distributed</b> <b>Processing</b> Symposium ...|$|E
50|$|In the 1990s Veryard worked {{together}} in an Enterprise Computing Project and developed a version of Business Relationship Modelling specifically for Open <b>Distributed</b> <b>Processing,</b> under the name Enterprise Modelling Methodology/Open <b>Distributed</b> <b>Processing</b> (EMM/ODP). EMM/ODP proposed some new techniques and method extensions for enterprise modelling for distributed systems.|$|E
5000|$|IPDPS: IEEE International Parallel and <b>Distributed</b> <b>Processing</b> Symposium ...|$|E
40|$|This paper {{describes}} an architecture for a <b>distributing</b> <b>processing</b> {{system that would}} allow remote procedure calls to invoke other services as messages are passed between clients and servers. It proposes that an additional class of data processing objects {{be located in the}} software communications channel. The objects in this channel would then be used to enforce protocols on client-server applications without any additional effort by the application programmers. For example, services such as key-management, time-stamping, sequencing and encryption can be implemented at different levels of the software communications stack to provide a complete authentication service. A <b>distributing</b> <b>processing</b> environment could be used to control broadband network data delivery. Architectures and invocation semantics are discussed, Example classes and interfaces for channel objects are given in the Java programming language. Comment: 35 pages, 10 figure...|$|R
5000|$|Parallel and <b>distributed</b> query <b>processing</b> is {{available}} (including JOINs).|$|R
5000|$|Oracle XA {{connectivity}} (X/Open <b>Distributed</b> Transaction <b>Processing</b> XA interface) ...|$|R
5000|$|... #Subtitle level 3: <b>Distributed</b> <b>processing</b> over {{extremes}} in heterogeneity ...|$|E
5000|$|IEEE Technical Committee on <b>Distributed</b> <b>Processing</b> Outstanding Achievement Award 2009 ...|$|E
5000|$|Metaphysics (<b>Distributed</b> <b>processing,</b> Emergent Properties, Formal Ontology, Network Structures, etc.) ...|$|E
2500|$|... <b>distributed</b> {{information}} <b>processing</b> {{systems such}} as banking systems and airline reservation systems; ...|$|R
40|$|What is it? How does it work? Who cares? What are the Advantages 2 ̆ 6 Disadvantages? Future ofthe technology? Discussion The 2 ̆ 2 cloud 2 ̆ 2 is {{the term}} for {{networked}} computers that <b>distribute</b> <b>processing</b> power, applications, and large systems among many machines. Cloud computing is specialized data centers that host thousands of server...|$|R
40|$|Many {{emerging}} {{distributed applications}} require the realtime processing of {{large amounts of}} data that are being updated continuously. <b>Distributed</b> stream <b>processing</b> systems offer a scalable and efficient means of in-network processing of such data streams. However, the large scale and the distributed nature of such systems, {{as well as the}} fluctuation of their load render it difficult to ensure that <b>distributed</b> stream <b>processing</b> applications meet their Quality of Service demands. We describe a decentralized framework for proactively predicting and alleviating hot-spots in <b>distributed</b> stream <b>processing</b> applications in real-time. We base our hot-spot prediction techniques on statistical forecasting methods, while for hot-spot alleviation we employ a non-disruptive component migration protocol. The experimental evaluation of our techniques, implemented in our Synergy <b>distributed</b> stream <b>processing</b> middleware over PlanetLab, using a real stream processing application operating on real streaming data, demonstrates high prediction accuracy and substantial performance benefits. 1...|$|R
