2353|2874|Public
25|$|Ideal GPGPU {{applications}} {{have large}} data sets, high parallelism, and minimal dependency between <b>data</b> <b>elements.</b>|$|E
25|$|The NIEM {{registry}} {{requires that}} XML <b>data</b> <b>elements</b> use upper camel case and XML attributes use lower camel case.|$|E
25|$|Architect Perspective (System Logic) - The architect's {{plans are}} the {{translation}} of the drawings into detail requirements representations from the designer's perspective. They correspond to the system model designed by a systems analyst who must determine the <b>data</b> <b>elements,</b> logical process flows, and functions that represent business entities and processes.|$|E
50|$|In metadata, a <b>data</b> <b>element</b> {{definition}} {{is a human}} readable phrase or sentence associated with a <b>data</b> <b>element</b> within a <b>data</b> dictionary that describes the meaning or semantics of a <b>data</b> <b>element.</b>|$|R
5000|$|... 3.3.51 <b>data</b> <b>element</b> {{representation}} classthe {{class of}} {{representation of a}} <b>data</b> <b>element</b> ...|$|R
50|$|A Representation Term may {{be thought}} of as an {{attribute}} of a <b>data</b> <b>element</b> in a metadata registry that classifies the <b>data</b> <b>element</b> according to the type of data stored in the <b>data</b> <b>element.</b>|$|R
25|$|ISO 8601 <b>Data</b> <b>elements</b> and {{interchange}} formats – Information interchange – Representation {{of dates}} and times {{is an international}} standard covering the exchange of date and time-related data. It was issued by the International Organization for Standardization (ISO) and {{was first published in}} 1988. The purpose of this standard is to provide an unambiguous and well-defined method of representing dates and times, so as to avoid misinterpretation of numeric representations of dates and times, particularly when data are transferred between countries with different conventions for writing numeric dates and times.|$|E
25|$|In {{computer}} science, a {{linked list}} is a linear collection of <b>data</b> <b>elements,</b> in which linear order is not given by their physical placement in memory. Instead, each element {{points to the}} next. It is a data structure consisting {{of a group of}} nodes which together represent a sequence. Under the simplest form, each node is composed of data and a reference (in other words, a link) to the next node in the sequence. This structure allows for efficient insertion or removal of elements from any position in the sequence during iteration. More complex variants add additional links, allowing efficient insertion or removal from arbitrary element references.|$|E
25|$|It {{was this}} {{combination}} of features that also made HyperCard a powerful hypermedia system. Users could build backgrounds to suit the needs of some system, say a rolodex, and use simple HyperTalk commands to provide buttons to move {{from place to place}} within the stack, or provide the same navigation system within the <b>data</b> <b>elements</b> of the UI, like text fields. Using these features, it is easy to build linked systems similar to hypertext links on the Web. Unlike the Web, programming, placement and browsing were all the same tool – similar systems have been created for HTML but traditional Web services are considerably more heavyweight.|$|E
50|$|Note that a {{registered}} <b>data</b> <b>element</b> is any <b>data</b> <b>element</b> that already exists within a metadata registry.|$|R
50|$|<b>Data</b> <b>element</b> to <b>data</b> <b>element</b> mapping is {{frequently}} complicated by complex transformations that require one-to-many and many-to-one transformation rules.|$|R
5000|$|... {{is greater}} than each <b>data</b> <b>element</b> in [...] and {{less than or equal}} to each <b>data</b> <b>element</b> in [...]|$|R
25|$|The PackML (Packaging Machinery Language) sub-committee’s {{focus was}} to develop a method to quickly {{integrate}} a line of machines without concern on what field bus (protocol & media-the domain of the PackConnect sub-committee) was going to carry the data set between machines, SCADA and MES. After several iterations the approach taken was to extend the ISA S88 Part 1 State Model concept to the Packaging Industry. Later in the development process, the concept of PackTags was introduced to provide a uniform set of naming conventions for <b>data</b> <b>elements</b> used within the state model. PackTags are used for machine-to-machine communications; for example between a Filler and a Capper. In addition, PackTags were designed to address OEE (Overall Equipment Effectiveness) calculations. PackTags can be used to provide data exchange between machines and higher level information systems like Manufacturing Operations Management and Enterprise Information Systems.|$|E
2500|$|Variables are {{assigned}} using an equals sign, but compared using two consecutive equals signs. A new identity operator, ===, [...] is provided to check if two <b>data</b> <b>elements</b> {{refer to the}} same object.|$|E
2500|$|.....situation {{awareness}} {{is about the}} knowledge state that's achieved—either knowledge of current <b>data</b> <b>elements,</b> or inferences drawn from these data, or predictions {{that can be made}} using these inferences. In contrast, sensemaking is about the process of achieving these kinds of outcomes, the strategies, and the barriers encountered.|$|E
5000|$|... #Subtitle level 3: Count the Input <b>Data</b> <b>Element</b> Types, the <b>Data</b> entity Types Referenced, and the Output <b>Data</b> <b>Element</b> Types ...|$|R
5000|$|Universal <b>Data</b> <b>Element</b> Framework Forum - {{merged with}} Open Platform 3.0 in 2015; {{now known as}} O-DEF (Open <b>Data</b> <b>Element</b> Framework) ...|$|R
50|$|If a <b>data</b> <b>element</b> {{is used to}} {{identify}} a record within a data set, the <b>data</b> <b>element</b> uses the Identifier representation term.|$|R
2500|$|A key {{purpose of}} {{performing}} life cycle interpretation {{is to determine}} the level of confidence in the final results and communicate them in a fair, complete, and accurate manner. Interpreting the results of an LCA is not as simple as [...] "3 is better than 2, therefore Alternative A is the best choice"! Interpreting the results of an LCA starts with understanding the accuracy of the results, and ensuring they meet the goal of the study. This is accomplished by identifying the <b>data</b> <b>elements</b> that contribute significantly to each impact category, evaluating the sensitivity of these significant <b>data</b> <b>elements,</b> assessing the completeness and consistency of the study, and drawing conclusions and recommendations based on a clear understanding of how the LCA was conducted and the results were developed.|$|E
2500|$|In some {{implementations}} {{an extra}} 'sentinel' or 'dummy' node may be added {{before the first}} data record or after the last one. This convention simplifies and accelerates some list-handling algorithms, by ensuring that all links can be safely dereferenced and that every list (even one that contains no <b>data</b> <b>elements)</b> always has a [...] "first" [...] and [...] "last" [...] node.|$|E
2500|$|Each {{accident}} was studied individually with approximately 1,000 <b>data</b> <b>elements,</b> collected {{for each of}} the 900 accident scenes, including measuring and photographing vehicle damage, skid marks, scrape marks, people marks, and interviewing survivors. [...] Hundreds of accident-involved riders donated their helmet to the research, which allowed team members to disassemble, measure, photograph and record the accident damage as part of the study.|$|E
5000|$|In metadata, {{the term}} <b>data</b> <b>element</b> is an atomic unit {{of data that}} has precise meaning or precise semantics. A <b>data</b> <b>element</b> has: ...|$|R
40|$|A {{method of}} {{communicating}} {{information from a}} wireless autonomous device (WAD) to a base station. The WAD has a <b>data</b> <b>element</b> having a predetermined profile having a total number of sequenced possible <b>data</b> <b>element</b> combinations. The method includes receiving at the WAD an RF profile transmitted by the base station that includes a triggering portion having a number of pulses, wherein the number is at least equal to {{the total number of}} possible <b>data</b> <b>element</b> combinations. The method further includes keeping a count of received pulses and wirelessly transmitting a piece of data, preferably one bit, to the base station when the count reaches a value equal to the stored <b>data</b> <b>element's</b> particular number in the sequence. Finally, the method includes receiving the piece of data at the base station and using the receipt thereof to determine which of the possible <b>data</b> <b>element</b> combinations the stored <b>data</b> <b>element</b> is...|$|R
50|$|Standards {{such as the}} ISO/IEC 11179 Metadata Registry {{specification}} give {{guidelines for}} creating precise <b>data</b> <b>element</b> definitions. Specifically chapter four of the ISO/IEC 11179 metadata registry standard covers <b>data</b> <b>element</b> definition quality standards http://standards.iso.org/ittf/PubliclyAvailableStandards/c035346_ISO_IEC_11179-4_2004(E).zip.|$|R
2500|$|There are {{instructions}} used {{to define}} <b>data</b> <b>elements</b> to hold data and variables. [...] They define the type of data, the length and the alignment of data. These instructions can also define whether the data is available to outside programs (programs assembled separately) or only to the program in which the data section is defined. Some assemblers classify these as pseudo-ops.|$|E
2500|$|Because all PowerShell {{objects are}} [...]NET objects, {{they share a}} [...]ToString (...) method, which {{retrieves}} the text representation of the data in an object. In addition, PowerShell allows formatting definitions to be specified, so the text representation of objects can be customized by choosing which <b>data</b> <b>elements</b> to display, and in what manner. However, {{in order to maintain}} backwards compatibility, if an external executable is used in a pipeline, it receives a text stream representing the object, instead of directly integrating with the PowerShell type system.|$|E
2500|$|The Zachman Framework {{methodology}} has {{for example}} {{been used by}} the United States Department of Veterans Affairs (VA) to develop and maintain its One-VA Enterprise Architecture in 2001. This methodology required defining all aspects of the VA enterprise from a business process, data, technical, location, personnel, and requirements perspective. The next step in implementing the methodology has been to define all functions related to each business process and identify associated <b>data</b> <b>elements.</b> Once identified, duplication of function and inconsistency in data definition can be identified and resolved, [...]|$|E
50|$|Assignment of each <b>data</b> <b>element</b> to {{a person}} {{sometimes}} seems like an unimportant process. But many groups have found that users have greater trust and usage rates in systems where they can contact a person with questions on each <b>data</b> <b>element.</b>|$|R
5000|$|The {{data format}} of a DXF {{is called a}} [...] "tagged data" [...] format which [...] "means that each <b>data</b> <b>element</b> in the file is preceded by an integer number that is called a group code. A group code's value {{indicates}} what type of <b>data</b> <b>element</b> follows. This value also indicates {{the meaning of a}} <b>data</b> <b>element</b> for a given object (or record) type. Virtually all user-specified information in a drawing file can be represented in DXF format." ...|$|R
5000|$|Exact match - where <b>data</b> <b>element</b> {{linkages}} {{are made}} {{based on the}} exact name of a column in a database, {{the name of an}} XML element or a label on a screen. For example, if a database column has the name [...] "PersonBirthDate" [...] and a <b>data</b> <b>element</b> in a metadata registry also has the name [...] "PersonBirthDate", automated tools can infer that the column of a database has the same semantics (meaning) as the <b>data</b> <b>element</b> in the metadata registry.|$|R
2500|$|The scan operation, also termed {{parallel}} prefix sum, {{takes in}} a vector (stream) of <b>data</b> <b>elements</b> and an (arbitrary) associative binary function '+' with an identity element 'i'. If the input is , an exclusive scan produces the output , while an inclusive scan produces the output [...] {{and does not}} require an identity to exist. While at first glance the operation may seem inherently serial, efficient parallel scan algorithms are possible and have been implemented on graphics processing units. The scan operation has uses in e.g., quicksort and sparse matrix-vector multiplication.|$|E
5000|$|The {{component}} data element separator and data element separator are the [...] "first level" [...] and [...] "second level" [...] separators of <b>data</b> <b>elements</b> within a message segment. Referring to them as + and : for brevity, the + separates top-level or composite <b>data</b> <b>elements,</b> and : separates second-level <b>data</b> <b>elements</b> nested within composite <b>data</b> <b>elements.</b> Trailing empty (or null) <b>data</b> <b>elements</b> and their leading separators are omitted to reduce message size.|$|E
50|$|A {{semantic}} mapper processes {{on a list}} of <b>data</b> <b>elements</b> in {{the source}} namespace. The semantic mapper will successively translate the <b>data</b> <b>elements</b> from the source namespace to the destination namespace. The mapping does not necessarily need to be a one-to-one mapping. Some <b>data</b> <b>elements</b> may map to several <b>data</b> <b>elements</b> in the destination.|$|E
5000|$|One {{possible}} {{algebraic specification}} may provide two constructor functions for the data-element: a true constructor and a false constructor. Thus, a boolean <b>data</b> <b>element</b> could be declared, constructed, and initialized to a value. In this scenario, all other connective elements, such as XOR and AND, would be additional functions. Thus, a <b>data</b> <b>element</b> could be instantiated with either [...] "true" [...] or [...] "false" [...] value, and additional functions {{could be used}} to perform any operation on the <b>data</b> <b>element.</b>|$|R
50|$|It is {{sometimes}} {{difficult to determine}} if a <b>data</b> <b>element</b> is a code or an identifier. In general identifiers are sequential numbers used to identify a specific item in an identification scheme. If a <b>data</b> <b>element</b> has mnemonic information it is generally classified as a code.|$|R
5000|$|User-defined <b>data</b> types (<b>data</b> <b>element</b> with {{restricted}} content) ...|$|R
