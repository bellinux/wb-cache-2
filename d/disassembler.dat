132|48|Public
25|$|Typically today {{rather than}} writing in {{assembly}} language, programmers {{will use a}} <b>disassembler</b> to analyze the output of a compiler and change the high-level source code {{so that it can}} be compiled more efficiently, or understand why it is inefficient.|$|E
25|$|Assembly {{language}} {{is useful in}} reverse engineering. Many programs are distributed only in machine code form which is straightforward to translate into assembly language, but more difficult to translate into a higher-level language. Tools such as the Interactive <b>Disassembler</b> make extensive use of disassembly for such a purpose. This technique is used by hackers to crack commercial software, and competitors to produce software with similar results from competing companies.|$|E
25|$|During {{an event}} on March 21, 2016, Apple {{provided}} a status update on its environmental initiative to be 100% renewable {{in all of}} its worldwide operations. Lisa P. Jackson, Apple's vice president of Environment, Policy and Social Initiatives who reports directly to CEO, Tim Cook, announced that as of March 2016, 93% of Apple's worldwide operations are powered with renewable energy. Also featured was the company's efforts to use sustainable paper in their product packaging; 99% of all paper used by Apple in the product packaging comes from post-consumer recycled paper or sustainably managed forests, as the company continues its move to all paper packaging for all of its products. Apple working in partnership with Conservation Fund, have preserved 36,000 acres of working forests in Maine and North Carolina. Another partnership announced is with the World Wildlife Fund to preserve up to 1,000,000 acres of forests in China. Featured was the company's installation of a 40 MW solar power plant in the Sichuan province of China that was tailor made to coexist with the indigenous yaks that eat hay produced on the land, by raising the panels to be several feet off of the ground so the yaks and their feed would be unharmed grazing beneath the array. This installation alone compensates for more than all of the energy used in Apple's Stores and Offices in the whole of China, negating the company's energy carbon footprint in the country. In Singapore, Apple has worked with the Singaporean government to cover the rooftops of 800 buildings in the city-state with solar panels allowing Apple's Singapore operations to be run on 100% renewable energy. Liam was introduced to the world, an advanced robotic <b>disassembler</b> and sorter designed by Apple Engineers in California specifically for recycling outdated or broken iPhones. Reuses and recycles parts from traded in products.|$|E
5000|$|Built-in AVR/Java/x86-i386-AMD64/ARM-XScale/PPC64 <b>disassemblers.</b>|$|R
2500|$|... http://koti.mbnet.fi/~atjs/mc6809/ [...] Collection of 6809 instructions, emulators, tools, debuggers, <b>dis{{assemblers}}</b> and assemblers ...|$|R
50|$|The WinDbg {{protocol}} is not documented, but {{is supported}} by the IDA Pro and radare2 <b>disassemblers.</b>|$|R
2500|$|... an {{open-source}} 68k emulator, <b>disassembler,</b> and debugger for Java.|$|E
2500|$|Transforming {{assembly}} language into machine code {{is the job}} of an assembler, and the reverse can at least partially be achieved by a <b>disassembler.</b> Unlike high-level languages, there is a one-to-one correspondence between many simple assembly statements and machine language instructions. However, in some cases, an assembler may provide pseudoinstructions (essentially macros) which expand into several machine language instructions to provide commonly needed functionality. For example, for a machine that lacks a [...] "branch if greater or equal" [...] instruction, an assembler may provide a pseudoinstruction that expands to the machine's [...] "set if less than" [...] and [...] "branch if zero (on the result of the set instruction)". Most full-featured assemblers also provide a rich macro language (discussed below) which is used by vendors and programmers to generate more complex code and data sequences.|$|E
50|$|A <b>disassembler</b> is a {{computer}} program that translates machine language into assembly language—the inverse operation to that of an assembler. A <b>disassembler</b> differs from a decompiler, which targets a high-level language rather than an assembly language. Disassembly, the output of a <b>disassembler,</b> is often formatted for human-readability rather than suitability for input to an assembler, making it principally a reverse-engineering tool.|$|E
50|$|The PIC16C84 {{was easily}} tweaked to allow {{crackers}} to read its protected contents, simple <b>disassemblers</b> could then produce the source assembly files. Microchip corrected this by introducing the PIC16F84 (and later the PIC16F84A) and mothballing the PIC16C84.|$|R
5000|$|The thiscall calling {{convention}} {{can only be}} explicitly specified on Microsoft Visual C++ 2005 and later. On any other compiler thiscall is not a keyword. (However, <b>disassemblers,</b> such as IDA, must specify it. So IDA uses keyword __thiscall for this.) ...|$|R
40|$|Disassembly is {{indispensable}} {{for the proper}} analysis of malware. However, a common problem concerning the x 86 /x 64 architecture is that <b>disassemblers</b> produce partially incorrect results. This is used by malware authors who nowadays routinely generate binaries with anti-disassembly measures. In this paper, we derive general constraints on x 86 code which are not based on disassembly but on byte level. Based on these constraints we develop a set of classifiers able to locate code {{in any kind of}} files. Operating on byte level, our approach is independent of assembly semantics. Our evaluation shows that we are able to precisely locate code and provide anti-disassembly resistance independent of the operating system or compiler. Our tool can be used to detect the code sections of malware, improve code coverage for <b>disassemblers,</b> detect hidden code in files and in memory, or identify malware with anti-disassembly techniques...|$|R
50|$|The {{previous}} year Crystal Computing had released another machine code {{tool for the}} 16K ZX Spectrum called Monitor and <b>Disassembler</b> {{that could be used}} in conjunction with Zeus. While Zeus has a monitor included, the more extensive Monitor and <b>Disassembler</b> allows for disassembly, the display and editing of the processor registers, as well as code substitution and the ability to move blocks of memory. Alongside Zeus, Monitor and <b>Disassembler</b> was later re-released by Sinclair Research.|$|E
50|$|Lisa has a {{built-in}} <b>disassembler.</b>|$|E
50|$|A <b>disassembler</b> may be {{stand-alone}} or interactive. A stand-alone <b>disassembler,</b> when executed, generates {{an assembly}} language file {{which can be}} examined; an interactive one shows the effect of any change the user makes immediately. For example, the <b>disassembler</b> may initially not know that {{a section of the}} program is actually code, and treat it as data; if the user specifies that it is code, the resulting disassembled code is shown immediately, allowing the user to examine it and take further action during the same run.|$|E
40|$|It is {{well-known}} that static disassembly is an unsolved problem, {{but how much}} of a problem is it in real software—for instance, for binary protection schemes? This work studies the accuracy of nine state-of-the-art <b>disassemblers</b> on 981 real-world compiler-generated binaries {{with a wide variety of}} properties. In contrast, prior work focuses on isolated corner cases; we show that this has led to a widespread and overly pessimistic view on the prevalence of complex constructs like inline data and overlapping code, leading reviewers and researchers to underestimate the potential of binary-based research. On the other hand, some constructs, such as function boundaries, are much harder to recover accurately than is reflected in the literature, which rarely discusses much needed error handling for these primitives. We study 30 papers recently published in six major security venues, and reveal a mismatch between expectations in the literature, and the actual capabilities of modern <b>disassemblers.</b> Our findings help improve future research by eliminating this mismatch...|$|R
2500|$|Assembly languages, {{like most}} other {{computer}} languages, allow comments {{to be added to}} program source code that will be ignored during assembly. Judicious commenting is essential in assembly language programs, as the meaning and purpose of a sequence of binary machine instructions can be difficult to determine. The [...] "raw" [...] (uncommented) assembly language generated by compilers or <b>disassemblers</b> is quite difficult to read when changes must be made.|$|R
40|$|International audienceWe {{propose to}} extend the toolbox of reverse {{engineers}} beyond <b>disassemblers,</b> debuggers and emulators. Using dynamic binary instrumentation, it is very simple to write advanced tools such as automatic unpackers, system call tracers and deobfuscators. Based on our experiments, DBI is suitable for malware analysis. In this presentation, we will present a simple and accurate automatic unpacker integrated with IDA Pro and a Javascript deobfuscator, all written using DBI techniques...|$|R
5000|$|DVI to human-readable format: dvitype (<b>disassembler</b> of sorts) ...|$|E
5000|$|Pattern searching in {{different}} modes: <b>disassembler,</b> hexadecimal and binary.|$|E
50|$|Lilac, an {{assembler}} and <b>disassembler</b> for the Java virtual machine.|$|E
40|$|Tools reading binary code, like analysers, debuggers, <b>disassemblers,</b> etc., need {{to decode}} the target's machine code. A {{decision}} tree {{is often used}} to represent the decoding function. Manually writing a decoder is a lengthy and error-prone task. It is desirable {{to be able to use}} the vendor's instruction code manual and to easily transform the documentation into a specification that a tool can use to generate a decoder. This pape...|$|R
5000|$|Assembly languages, {{like most}} other {{computer}} languages, allow comments {{to be added to}} program source code that will be ignored during assembly. Judicious commenting is essential in assembly language programs, as the meaning and purpose of a sequence of binary machine instructions can be difficult to determine. The [...] "raw" [...] (uncommented) assembly language generated by compilers or <b>disassemblers</b> is quite difficult to read when changes must be made.|$|R
50|$|The AFRA BMP {{guide is}} an {{up-to-date}} collection of recommendations concerning best practices {{for the management}} of parts removed from aircraft during disassembly. The BMP Guide, now in its version 2.0, enhances safety developments throughout the supply chain by encouraging aircraft <b>disassemblers</b> or asset owners to proactively discover whether an aircraft or aircraft part has been involved in an airworthiness event involving unusual heat, stress or abnormal environmental conditions.|$|R
50|$|Scientifically, it {{requires}} two parts: a <b>disassembler</b> and an assembler.|$|E
50|$|Monitor and <b>Disassembler,</b> ZX81, ZX Spectrum, 1982. An {{assembly}} language utility.|$|E
5000|$|<b>Disassembler</b> swarms (grey goo-like {{swarms of}} nanorobots that {{dismantle}} hostile craft/objects).|$|E
50|$|With high {{lead content}} in CRTs and the rapid {{diffusion}} of new flat-panel display technologies, {{some of which}} (LCDs) use lamps which contain mercury, there is growing concern about electronic waste from discarded televisions. Related occupational health concerns exist, as well, for <b>disassemblers</b> removing copper wiring and other materials from CRTs. Further environmental concerns related to television design and use relate to the devices' increasing electrical energy requirements.|$|R
50|$|AFRA {{members are}} global {{leaders in the}} {{management}} of aging aircraft fleets. They include Original Equipment Manufacturers (OEMs), Aircraft <b>Disassemblers,</b> Parts Distributors, Aircraft Insurers and Appraisers, Materials Recyclers and Technology Developers. Within its ranks AFRA also counts technology companies, and retains strong links with the academic community in relation to researching and developing new recycling technologies. AFRA has grown from its founding 11 members to now encompass 40 members from 10 countries.|$|R
40|$|This paper {{describes}} a methodology for developing processor specific {{tools such as}} assemblers, <b>disassemblers,</b> processor simulators, compilers etc., using processor models in a generic way. The processor models are written in a language called Sim-nML [1] which is powerful enough to capture the instruction set architecture of a processor. We describe a few tools in this paper which can be retargeted to any processor using the high level Sim-nML model of the processor. 1...|$|R
50|$|Disassembly using a <b>disassembler,</b> {{meaning the}} raw machine {{language}} {{of the program is}} read and understood in its own terms, only with the aid of machine-language mnemonics. This works on any computer program but can take quite some time, especially for someone not used to machine code. The Interactive <b>Disassembler</b> is a particularly popular tool.|$|E
5000|$|<b>Disassembler</b> - reverse {{process of}} Assembly, reconstructing assembly-like source from machine code ...|$|E
5000|$|Operating system: {{built in}} <b>disassembler,</b> CP/M clone called [...] "Beta", system {{language}} switchable between English and Russian ...|$|E
40|$|Reverse {{engineering}} {{of software}} {{is the process of}} recovering higherlevel structure and meaning from a lower-level program representation. It can be used for legitimate purposes—e. g., to recover source code that has been lost—but it is often used for nefarious purposes—such as to search for security vulnerabilities in binaries or to steal intellectual property. The first step in reverse engineering a binary program is to disassemble the machine code into assembly code. This paper addresses the topic of making reverse engineering of binaries hard by making it difficult to statically disassemble machine code. The starting point is an executable binary program. The executable is then obfuscated by changing many control transfers into signals (traps) and inserting dummy control transfers and “junk ” instructions after the signals. The resulting code is still a correct program, but current <b>disassemblers</b> are unable to disassemble from 30 to 80 percent of the instructions in the program. Furthermore, the <b>disassemblers</b> have a mistaken understanding of over half of the control flow edges. However, the obfuscated program necessarily executes more slowly than the original. Experimental results quantify the tradeoff between the degree of obfuscation and the increase in execution time. 1...|$|R
50|$|The ISA of a {{computer}} is usually described in a small instruction manual, which describes how the instructions are encoded. Also, it may define short (vaguely) mnemonic names for the instructions. The names can be recognized by a software development tool called an assembler. An assembler is {{a computer}} program that translates a human-readable form of the ISA into a computer-readable form. <b>Disassemblers</b> are also widely available, usually in debuggers and software programs to isolate and correct malfunctions in binary computer programs.|$|R
500|$|Disassembly of the Type 94 Nambu pistol is {{considered}} difficult {{and can lead}} to damage to the pistol if done carelessly. [...] After clearing the Type 94, the operator must draw the slide against the magazine follower to hold the bolt {{to the rear of the}} pistol. This will allow the crossbolt to be released after the firing pin is depressed. Removal of the crossbolt without depressing the firing pin will damage both the firing pin and the crossbolt. Removing the crossbolt is further complicated as the <b>disassemblers</b> hands are both holding the pistol and depressing the firing pin.|$|R
