1638|1292|Public
5|$|Given {{that these}} {{examples}} are all highly symmetric—and thus simplified—it {{is tempting to}} conclude that the occurrence of singularities is an artifact of idealization. The famous singularity theorems, proved using the methods of global geometry, say otherwise: singularities are a generic feature of general relativity, and unavoidable once the collapse of an object with realistic matter properties has proceeded beyond a certain stage and also {{at the beginning of a}} wide class of expanding universes. However, the theorems say little about the properties of singularities, and much of current research is devoted to characterizing these entities' generic structure (hypothesized e.g. by the BKL conjecture). The cosmic censorship hypothesis states that all realistic future singularities (no perfect symmetries, matter with realistic properties) are safely hidden away behind a horizon, and thus invisible to all distant observers. While no <b>formal</b> <b>proof</b> yet exists, numerical simulations offer supporting evidence of its validity.|$|E
25|$|The {{concept of}} a proof is formalized {{in the field of}} {{mathematical}} logic. A <b>formal</b> <b>proof</b> is written in a formal language instead of a natural language. A <b>formal</b> <b>proof</b> is defined as sequence of formulas in a formal language, in which each formula is a logical consequence of preceding formulas. Having a definition of <b>formal</b> <b>proof</b> makes the concept of proof amenable to study. Indeed, the field of proof theory studies formal proofs and their properties, for example, the property that a statement has a <b>formal</b> <b>proof.</b> An application of proof theory is to show that certain undecidable statements are not provable.|$|E
25|$|There {{are many}} {{possible}} variants of set theory, which differ in consistency strength, where stronger versions (postulating higher types of infinities) contain formal proofs of {{the consistency of}} weaker versions, but none contains a <b>formal</b> <b>proof</b> of its own consistency. Thus {{the only thing we}} don't have is a <b>formal</b> <b>proof</b> of consistency of whatever version of set theory we may prefer, such as ZF.|$|E
40|$|This {{paper is}} {{concerned}} with real proofs as opposed to <b>formal</b> <b>proofs,</b> and specifically with the ultimate reason of real proofs (‘Why Proof?’) and {{with the notion of}} real proof (‘What is a Proof?’). Several people believed and still believe that real proofs can be represented by <b>formal</b> <b>proofs.</b> A recent example is provided by Macintyre who claims that “one could go on to translate ” all “classical informal <b>proofs</b> into <b>formal</b> <b>proofs</b> of some accepted formal system”, where such translations “do map informal <b>proofs</b> to <b>formal</b> <b>proofs</b> ” (Macintyre 2005, p. 2420). This view is to a certain extent implicit in Frege – to a certain extent only, because according to Frege in a sense “every inference is non-formal in that the premises as well as the conclusions have their thought-contents which occur in this particular manner of connection only in that inference ” (Frege 1984, p. 318). Anyway, the view that real proofs can be represented by <b>formal</b> <b>proofs</b> is explicitly stated by Hilbert and Gentzen...|$|R
40|$|International audienceThe Archive of <b>Formal</b> <b>Proofs</b> {{is a vast}} {{collection}} of computer-checked proofs developed using the proof assistant Isabelle. We perform an in-depth analysis of the archive, looking at various properties of the proof developments, including size, dependencies, and proof style. This gives some insights {{into the nature of}} <b>formal</b> <b>proofs...</b>|$|R
50|$|<b>Formal</b> <b>proofs</b> {{often are}} {{constructed}} {{with the help}} of computers in interactive theorem proving. Significantly, these proofs can be checked automatically, also by computer. Checking <b>formal</b> <b>proofs</b> is usually simple, while the problem of finding proofs (automated theorem proving) is usually computationally intractable and/or only semi-decidable, depending upon the formal system in use.|$|R
25|$|The {{virtue of}} a <b>formal</b> <b>proof</b> {{like this is}} that it tells what the right answer must be, {{provided}} it exists. Existence needs to be proved separately in each case.|$|E
25|$|A (<b>formal)</b> <b>proof</b> in this {{calculus}} is {{a sequence}} of sequents, where each of the sequents is derivable from sequents appearing earlier in the sequence by {{using one of the}} rules below.|$|E
25|$|For every NFA a {{deterministic}} {{finite automaton}} (DFA) {{can be found}} that accepts the same language. Therefore, {{it is possible to}} convert an existing NFA into a DFA for the purpose of implementing a (perhaps) simpler machine. This can be performed using the powerset construction, which may lead to an exponential {{rise in the number of}} necessary states. For a <b>formal</b> <b>proof</b> of the powerset construction, please see the Powerset construction article.|$|E
50|$|<b>Formal</b> <b>proofs</b> are {{constructed}} {{with the help}} of computers in interactive theorem proving. Significantly, these proofs can be checked automatically, also by computer. Checking <b>formal</b> <b>proofs</b> is usually simple, whereas finding proofs (automated theorem proving) is generally hard. An informal proof in the mathematics literature, by contrast, requires weeks of peer review to be checked, and may still contain errors.|$|R
2500|$|We {{can find}} an {{effective}} enumeration {{of all the}} <b>formal</b> <b>proofs</b> in S by some procedure ...|$|R
40|$|We {{set up a}} {{framework}} for the <b>formal</b> <b>proofs</b> of RFID protocols in the computational model. We rely on the so-called computationally complete symbolic attacker model. Our contributions are: i) To design (and prove sound) axioms reflecting the properties of hash functions (Collision-Resistance, PRF); ii) To formalize computational unlinkability in the model; iii) To illustrate the method, providing the first <b>formal</b> <b>proofs</b> of unlinkability of RFID protocols, in the computational model...|$|R
25|$|Penrose's {{argument}} {{stemmed from}} Gödel's incompleteness theorems. In Penrose's first book on consciousness, The Emperor's New Mind (1989), {{he argued that}} while a formal system cannot prove its own consistency, Gödel’s unprovable results are provable by human mathematicians. He took this disparity to mean that human mathematicians are not <b>formal</b> <b>proof</b> systems and are not running a computable algorithm. According to Bringsjorg and Xiao, {{this line of reasoning}} is based on fallacious equivocation on the meaning of computation.|$|E
25|$|A {{combinatorial}} problem {{related to}} the number of inputs and outputs of the RC4 cipher was first posed by Itsik Mantin and Adi Shamir in 2001, whereby, of the total 256 elements in the typical state of RC4, if x number of elements (x ≤ 256) are only known (all other elements can be assumed empty), then the maximum number of elements that can be produced deterministically is also x in the next 256 rounds. This conjecture was put to rest in 2004 with a <b>formal</b> <b>proof</b> given by Souradyuti Paul and Bart Preneel.|$|E
25|$|Lacking these {{school leaving}} certifications, {{in some states}} {{potential}} students can qualify for university entrance if they present additional <b>formal</b> <b>proof</b> {{that they will be}} able to keep up with their fellow students. This may take the form of a test of cognitive functioning or passing the Begabtenprüfung ("aptitude test", consisting of a written and oral exam). In some cases, students who do not hold the Abitur may enter university even if they do not pass the aptitude or cognitive functioning tests if they 1) have received previous vocational training, and 2) have worked at least three years and passed the Eingangsprüfung (entrance exam). Such is the case, for example, in Hamburg.|$|E
40|$|<b>Formal</b> <b>proofs</b> in {{mathematics}} and computer science are being studied because these objects can be verified by a very simple computer program. An important open problem is whether these <b>formal</b> <b>proofs</b> can be generated with an effort not much greater than writing a mathematical paper in, say, L A T E X. Modern systems for proof-development make the formalization of reasoning relatively easy. Formalizing computations such that {{the results can be}} used in <b>formal</b> <b>proofs</b> is not immediate. In this paper it is shown how to obtain <b>formal</b> <b>proofs</b> of statements like Prime(61) in the context of Peano arithmetic or (x + 1) (x + 1) = x 2 + 2 x + 1 in the context of rings. It is hoped that the method will help bridge the gap between the efficient systems of computer algebra and the reliable systems of proof-development. 1. The problem Usual mathematics is informal but precise. One speaks about informal rigor. Formal mathematics on the other hand consists of definitions, statements and proo [...] ...|$|R
50|$|Like all connectives in first-order logic, the {{biconditional}} has {{rules of}} inference that govern {{its use in}} <b>formal</b> <b>proofs.</b>|$|R
50|$|Results in metalogic {{consist of}} such things as <b>formal</b> <b>proofs</b> demonstrating the consistency, completeness, and decidability of {{particular}} formal systems.|$|R
25|$|Euclidean {{geometry}} is {{a mathematical}} system {{attributed to the}} Alexandrian Greek mathematician Euclid, which he described in his textbook on geometry: the Elements. Euclid's method consists in assuming a small set of intuitively appealing axioms, and deducing many other propositions (theorems) from these. Although many of Euclid's results had been stated by earlier mathematicians, Euclid {{was the first to}} show how these propositions could fit into a comprehensive deductive and logical system. The Elements begins with plane geometry, still taught in secondary school as the first axiomatic system and the first examples of <b>formal</b> <b>proof.</b> It goes on to the solid geometry of three dimensions. Much of the Elements states results of what are now called algebra and number theory, explained in geometrical language.|$|E
25|$|Hacking attacks target {{vulnerabilities}} in {{the operation}} of a QKD protocol or deficiencies in the components of the physical devices used in construction of the QKD system. If the equipment used in quantum key distribution can be tampered with, it could be made to generate keys that were not secure using a random number generator attack. Another common class of attacks is the Trojan horse attack which does not require physical access to the endpoints: rather than attempt to read Alice and Bob's single photons, Eve sends a large pulse of light back to Alice in between transmitted photons. Alice's equipment reflects some of Eve's light, revealing the state of Alice's basis (e.g., a polarizer). This attack can be detected, e.g. by using a classical detector to check the non-legitimate signals (i.e. light from Eve) entering Alice's system. It is also conjectured that most hacking attacks can similarly be defeated by modifying the implementation, though there is no <b>formal</b> <b>proof.</b>|$|E
2500|$|In January 2003, Hales {{announced}} {{the start of}} a collaborative project to produce a complete <b>formal</b> <b>proof</b> of the Kepler conjecture. The aim was to remove any remaining uncertainty about the validity of the proof by creating a <b>formal</b> <b>proof</b> that can be verified by automated proof checking software such as HOL Light and Isabelle. This project is called Flyspeck – the F, P and K standing for <b>Formal</b> <b>Proof</b> of Kepler. Hales estimated that producing a complete <b>formal</b> <b>proof</b> would take around 20 years of work. The project was announced completed on August 10, 2014. In January 2015 Hales and 21 collaborators submitted a paper titled [...] "A <b>formal</b> <b>proof</b> of the Kepler conjecture" [...] to arXiv, claiming to have proved the conjecture. [...] In 2017, the <b>formal</b> <b>proof</b> was accepted into the Forum of Mathematics journal.|$|E
30|$|Isabelle/HOL [36] is a proof {{assistant}} {{that has}} been used in several projects like the formalisation of a general purpose operating system kernel, in which C code can be extracted from the produced Isabelle theories [25]. The Archive of <b>Formal</b> <b>Proofs</b> [21] is a online repository for Isabelle developments that contains several formalisations of programming languages and mathematical theorems, such as the <b>formal</b> <b>proofs</b> of Volpano et al. type system for security [48, 52].|$|R
40|$|The {{problem of}} {{computing}} whether any formula of propositional logic is satisfiable {{is not in}} P. Therefore, P is not equal to NP. The <b>proofs</b> are informal about <b>formal</b> <b>proofs</b> in a first-order theory B axiomatizing Turing’s theory of computing. However, the informal proofs can be converted into <b>formal</b> <b>proofs</b> in Hilbert’s proof theory, and proved using a theorem prover. This report is {{an updated version of}} a report with the same title published in 2008. (See [URL]...|$|R
50|$|The {{procedural}} {{style has}} been deprecated in recent versions of Isabelle. The Archive of <b>Formal</b> <b>Proofs</b> also recommends the declarative style.|$|R
2500|$|The {{definition}} of a <b>formal</b> <b>proof</b> is intended to capture the concept of proofs as written {{in the practice of}} mathematics. The soundness of this definition amounts to the belief that a published proof can, in principle, be converted into a <b>formal</b> <b>proof.</b> However, outside the field of automated proof assistants, this is rarely done in practice. A classic question in philosophy asks whether mathematical proofs are analytic or synthetic. Kant, who introduced the analytic-synthetic distinction, believed mathematical proofs are synthetic.|$|E
2500|$|The rule of {{inference}} is {{modus ponens}} (i.e., from [...] and , infer [...] ). Then [...] {{is defined as}} , and [...] is defined as [...] This system is used in Metamath [...] <b>formal</b> <b>proof</b> database.|$|E
2500|$|In 1998 Thomas Hales, {{following}} an approach suggested by , [...] {{announced that he}} had a proof of the Kepler conjecture. Hales' proof is a proof by exhaustion involving the checking of many individual cases using complex computer calculations. Referees said that they were [...] "99% certain" [...] of the correctness of Hales' proof, and the Kepler conjecture was accepted as a theorem. In 2014, the Flyspeck project team, headed by Hales, announced the completion of a <b>formal</b> <b>proof</b> of the Kepler conjecture using a combination of the Isabelle and HOL Light proof assistants. [...] In 2017, the <b>formal</b> <b>proof</b> was accepted into the Forum of Mathematics journal.|$|E
50|$|Thus, {{the heavy}} traffic limit theorem (Theorem 1) is heuristically argued. <b>Formal</b> <b>proofs</b> usually follow a {{different}} approach which involve characteristic functions.|$|R
30|$|To support <b>proofs,</b> <b>formal</b> <b>proofs</b> of crash-safety {{property}} {{in general and}} in particular for the encoded application are conducted using the proof facility of Coq.|$|R
2500|$|... entry at ProvenMath. Includes formal {{statement}} of the Axiom of Choice, Hausdorff's Maximal Principle, Zorn's Lemma and <b>formal</b> <b>proofs</b> of their equivalence down to the finest detail.|$|R
2500|$|Although not a <b>formal</b> <b>proof,</b> {{a visual}} {{demonstration}} of a mathematical theorem {{is sometimes called}} a [...] "proof without words". The left-hand picture below {{is an example of}} a historic visual proof of the Pythagorean theorem in the case of the (3,4,5) triangle.|$|E
2500|$|Mathematical {{logic is}} a {{subfield}} of mathematics exploring the applications of formal logic to mathematics. [...] It bears close connections to metamathematics, {{the foundations of}} mathematics, and theoretical computer science. [...] The unifying themes in mathematical logic include {{the study of the}} expressive power of formal systems and the deductive power of <b>formal</b> <b>proof</b> systems.|$|E
2500|$|The {{notion of}} a theorem is very closely {{connected}} to its <b>formal</b> <b>proof</b> (also called a [...] "derivation"). To illustrate how derivations are done, we will work in a very simplified formal system. Let us call ours [...] Its alphabet consists only of two symbols { A, B } and its formation rule for formulas is: ...|$|E
40|$|AbstractCorrectness of compilers {{is a vital}} {{precondition}} for the correctness of the software translated by them. In this paper, we present two approaches for the formalization of static single assignment (SSA) form together with two corresponding <b>formal</b> <b>proofs</b> in the Isabelle/HOL system, each showing the correctness of code generation. Our comparison between the two proofs shows {{that it is very}} important to find adequate formalizations in <b>formal</b> <b>proofs</b> since they can simplify the verification task considerably. Our <b>formal</b> correctness <b>proofs</b> do not only verify the correctness of a certain class of code generation algorithms but also give us sufficient, easily checkable correctness criteria characterizing correct compilation results obtained from implementations (compilers) of these algorithms. These correctness criteria can be used in a compiler result checker...|$|R
40|$|Abstract. Geometry students, while {{moving from}} junior high-school to Lyceum, {{gradually}} cease {{to deal with}} practical topics and have to confront with other topics of theoretical nature. Worldwide {{research has shown that}} Lyceum students have great difficulty in writing <b>formal</b> <b>proofs</b> in geometry, particularly when traditional teaching methods are employed in the teaching of geometry. In this paper, we focus on the findings of a research project, which is part of a wider research that aims at investigating the ability of 15 years-old novice geometry students to write <b>formal</b> <b>proofs.</b> In particular, we use data from a random sample of schools in Athens from students attending the first year of Lyceum. Our research findings evidence that, while attempting to write <b>formal</b> geometry <b>proofs,</b> students who had employed a tool, called “Reasoning Control Matrix for the Proving Process ” (RECOMPP) had significantly improved their ability in writing <b>formal</b> geometry <b>proofs</b> than those who had not employed this tool...|$|R
40|$|<b>Formal</b> <b>proofs</b> provide {{detailed}} {{justification for}} the validity of claims and are widely used in formal software development methods. However, they are often complex and difficult to understand, because the formalism {{in which they are}} constructed and encoded is usually machine-oriented, and they may also be based on assumptions that are not justified. This causes concerns about the trustworthiness of using <b>formal</b> <b>proofs</b> as arguments in safety-critical applications. Here, we present an approach to develop safety cases that correspond to <b>formal</b> <b>proofs</b> found by automated theorem provers and reveal the underlying argumentation structure and top-level assumptions. We concentrate on natural deduction style proofs, which are closer to human reasoning than resolution proofs, and show how to construct the safety cases by covering the natural deduction proof tree with corresponding safety case fragments. We also abstract away logical book-keeping steps, which reduces the size of the constructed safety cases. We show how the approach {{can be applied to the}} proofs found by the Muscadet prover...|$|R
