555|10000|Public
5|$|Third dance {{movement}} (Scherzo or minuet) in the tonic, {{in overall}} A–B–A ternary form, with a trio in either ternary or binary form, {{and in a}} conventionally related key (relative major, subdominant, and parallel minor respectively). They are based on their sonata's first movements, with a similar tonal scheme and/or motivic reference. The B section of each piece features tonalities serving important dramatic functions in previous movements. Each features animated, playful figurations for the right hand and abrupt changes <b>in</b> <b>register.</b>|$|E
25|$|MP (multiply): Multiply the {{contents}} of register A by the data at the referenced memory address and store the high-order product <b>in</b> <b>register</b> A and the low-order product <b>in</b> <b>register</b> LP. The parts of the product agree in sign.|$|E
25|$|MASK: Perform a bit-wise (boolean) and {{of memory}} with {{register}} A and store the result <b>in</b> <b>register</b> A.|$|E
50|$|In this example, all the operands are <b>in</b> <b>registers,</b> and {{the result}} is placed <b>in</b> a <b>register.</b>|$|R
50|$|Atlas {{was last}} listed <b>in</b> the <b>Register</b> of Shipping <b>in</b> 1815 and <b>in</b> Lloyd's <b>Register</b> <b>in</b> 1816.|$|R
50|$|Atlantic is {{no longer}} listed <b>in</b> Lloyd's <b>Register</b> <b>in</b> 1810, or <b>in</b> the <b>Register</b> of Shipping <b>in</b> 1811.|$|R
25|$|DV (divide): Divide the {{contents}} of register A by the data at the referenced memory address. Store the quotient <b>in</b> <b>register</b> A and the absolute value of the remainder <b>in</b> <b>register</b> Q. Unlike modern machines, fixed-point numbers were treated as fractions (notional decimal point just to right of the sign bit), so you could produce garbage if the divisor was not larger than the dividend; there was no protection against that situation. In the Block II AGC, a double-precision dividend started in A and L (the Block II LP), and the correctly signed remainder was delivered in L. That considerably simplified the subroutine for double precision division.|$|E
25|$|Senefelder had experimented {{during the}} early 19th century with {{multicolor}} lithography; in his 1819 book, he predicted that the process would eventually be perfected and used to reproduce paintings. Multi-color printing was introduced by a new process developed by Godefroy Engelmann (France) in 1837 known as chromolithography. A separate stone was used for each color, and a print went through the press separately for each stone. The main challenge {{was to keep the}} images aligned (<b>in</b> <b>register).</b> This method lent itself to images consisting of large areas of flat color, and resulted in the characteristic poster designs of this period.|$|E
2500|$|In {{this version}} the counter [...] "y" [...] is called [...] "r2", and the {{function}} f( [...] x, r2 [...] ) deposits its number <b>in</b> <b>register</b> [...] "r3". Perhaps the reason Boolos-Burgess-Jeffrey clear r3 is to facilitate an unconditional jump to loop; {{this is often}} done by use of a dedicated register [...] "0" [...] that contains [...] "0": ...|$|E
50|$|<b>In</b> a <b>register</b> memory {{approach}} {{one of the}} operands for ADD operation may be in memory, {{while the}} other is <b>in</b> a <b>register.</b> This differs from a load/store architecture (used by RISC designs such as MIPS) in which both operands for an ADD operation must be <b>in</b> <b>registers</b> before the ADD.|$|R
25|$|Culland's Grove {{enters the}} {{shipping}} <b>registers</b> <b>in</b> 1802, with the entry <b>in</b> the <b>Register</b> of Shipping being earlier than that <b>in</b> Lloyd's <b>Register.</b>|$|R
50|$|Earl of Eldon was {{launched}} at Whitby <b>in</b> 1830 but <b>registered</b> <b>in</b> London. Her master was Captain E. Theaker. She first appears <b>in</b> Lloyd's <b>Register</b> <b>in</b> 1831 and her trade is London-India.|$|R
2500|$|The {{unbounded}} μ operator {{is defined}} by Minsky (1967) p.210 but with a peculiar flaw: the operator will not yield t = 0 when its predicate (the IF-THEN-ELSE test) is satisfied; rather, it yields t=2. In Minsky's version the counter is [...] "t", and the function φ( [...] t, x [...] ) deposits its number <b>in</b> <b>register</b> φ. In the usual μ definition register w will contain 0, but Minsky observes that it can contain any number k. Minsky's instruction set {{is equivalent to the}} following where [...] "JNE" [...] = Jump to z if Not Equal: ...|$|E
2500|$|Furthermore, {{the stalk}} {{is made up}} entirely of pentadecads. Hence, the stalk domains can be {{considered}} alpha helical coiled-coils that deviate from the standard model due to their unusual properties. From a deeper structural perspective, coiled-coil arranges itself {{in such a way}} that the crossing angle between the helices is almost zero. The packing of these helices follows a [...] "knobs-into-holes" [...] arrangement whereby hydrophobic residues protrude forming knobs that pack into cavities formed by other residues on another helix. Then, once the knobs are packed into cavities, the three helices are wound <b>in</b> <b>register</b> around each other, so all of the residues in certain positions are at the same height.|$|E
2500|$|In Latvian long {{segments}} (the same criteria as in Lithuanian) {{can take}} on one of three pitches (intonācijas or more specifically zilbes intonācijas) either stiepta ("level"), lauzta ("broken") or krītoša ("falling") indicated by Latvian linguists with a tilde, circumflex or a grave accent respectively (in IPA, however, the tilde {{is replaced by a}} macron because the former is already reserved to denote nasalized vowels.) Some authors note that the level pitch is realized simply as [...] "ultra long" [...] (or overlong.) Endzelīns (1897) identifies [...] "level diphthongs" [...] as consisting of 3 moras not just two. Broken pitch is, in turn, a falling pitch with superadded glottalization. And, indeed, the similarity between the Latvian broken pitch and Danish stød has been described by several authors. At least in Danish phonology, stød (unlike Norwegian and Swedish pitch accents) is not considered a pitch accent distinction but, rather, variously described as either glottalization, laryngealization, creaky voice or vocal fry. Some authors point out that the so-called broken pitch is not a pitch accent but a pitch register distinction similar to the [...] See Non-Asian <b>in</b> <b>Register</b> (phonology) ...|$|E
5000|$|... #Subtitle level 2: Career <b>in</b> <b>registered</b> Aberdeen Angus {{exhibition}} and breeding ...|$|R
5000|$|... #Subtitle level 2: Factors <b>in</b> <b>registering</b> {{a honeymoon}} and related {{activities}} ...|$|R
5000|$|... 9,205 {{participants}} <b>in</b> <b>registered</b> cycling programs, with {{a further}} 1,213 on waitlists ...|$|R
2500|$|The SA-15 class {{multipurpose}} {{cargo ships}} have a {{maximum overall length}} of [...] or [...] with the stern notch excluded. Their hulls are [...] long at the waterline and their length between perpendiculars is [...] The breadth of the ships, like all other cargo ships operating in the Northern Sea Route, is limited to [...] {{by the size of}} the escorting icebreakers. The shallow waters of the Northern Sea Route limit the draught to , but outside the arctic their cargo capacity can be increased by allowing the ice-strengthened parts of the hull to become submerged. Increasing the draught to [...] increases their displacement from 27,660 tons to 31,000 tons and deadweight tonnage from 16,600 to around 23,000 tons. While there are minor differences in tonnage and displacement between ships and the actual figures differ slightly from the design values which were measured <b>in</b> <b>register</b> tons, the gross tonnage (GT) of the SA-15 class cargo ships is generally around 18,600 and net tonnage (NT) at summer load waterline ranges from around 8,700 to roughly 9,000, being smaller for the newer SA-15 Super class ships. At the arctic subdivision line the net tonnage is reduced to 6,300.|$|E
2500|$|In the {{following}} we are {{assuming that the}} Instruction Register (IR) encounters the μy [...] "routine" [...] at instruction number [...] "n". Its first action will be to establish a number in a dedicated [...] "w" [...] register—an [...] "example of" [...] the number that function φ( [...] x, y [...] ) must produce before the algorithm can terminate (classically this is the number zero, but see the footnote {{about the use of}} numbers other than zero). The algorithm's next action at instructiton [...] "n+1" [...] will be to clear the [...] "y" [...] register -- [...] "y" [...] will act as an [...] "up-counter" [...] that starts from 0. Then at instruction [...] "n+2" [...] the algorithm evaluates its function φ( [...] x, y [...] ) -- we assume this takes j instructions to accomplish—and {{at the end of its}} evaluation φ( [...] x, y [...] ) deposits its output <b>in</b> <b>register</b> [...] "φ". At the n+j+3rd instruction the algorithm compares the number in the [...] "w" [...] register (e.g. 0) to the number in the [...] "φ" [...] register—if they are the same the algorithm has succeeded and it escapes through exit; otherwise it increments the contents of the [...] "y" [...] register and loops back with this new y-value to test function φ( [...] x, y [...] ) again.|$|E
2500|$|CCS (count, compare, and skip): A complex {{conditional}} branch instruction. The A register {{was loaded with}} data retrieved from the address specified by the instruction. (Because the AGC uses ones' complement notation, there are two representations of zero. When all bits are set to zero, this is called plus zero. If all bits are set to one, this is called minus zero.) The diminished absolute value (DABS) of the data was then computed and stored in the A register. If the number was greater than zero, the DABS decrements the value by 1; if the number was negative, it is complemented before the decrement is applied—this is the absolute value. Diminished means [...] "decremented but not below zero". Therefore, when the AGC performs the DABS function, positive numbers will head toward plus zero, and so will negative numbers but first revealing their negativity via the four-way skip below. The final step in CCS is a four-way skip, depending upon the data <b>in</b> <b>register</b> A before the DABS. If register A was greater than 0, CCS skips to the first instruction immediately after CCS. If register A contained plus zero, CCS skips to the second instruction after CCS. Less than zero causes a skip to the third instruction after CCS, and minus zero skips to the fourth instruction after CCS. The {{primary purpose of the}} count was to allow an ordinary loop, controlled by a positive counter, to end in a CCS and a TC {{to the beginning of the}} loop, equivalent to an IBM 360's BCT. The absolute value function was deemed important enough to be built into this instruction; when used for only this purpose, the sequence after the CCS was TC *+2, TC *+2, AD ONE. A curious side effect was the creation and use of CCS-holes when the value being tested was known to be never positive, which occurred more often than one might suppose. That left two whole words unoccupied, and a special committee was responsible for assigning data constants to these holes.|$|E
5000|$|... ex-MV Smit Explorer {{owned by}} Smit Transport & Heavy Lift B.V. based <b>in</b> Rotterdam, Netherlands <b>registered</b> <b>in</b> Malta with homeport Valletta until 2000, and owned by Navigo Management Co. Ltd. based <b>in</b> Singapore <b>registered</b> <b>in</b> Singapore with homeport Singapore until 23 January 2001, and owned by Navigo Management Co. Ltd. based <b>in</b> Limassol, Cyprus <b>registered</b> <b>in</b> the Bahamas with homeport Nassau until 16 December 2003, ...|$|R
50|$|For Intel Pentium III CPUs, {{the serial}} number is {{returned}} <b>in</b> EDX:ECX <b>registers.</b> For Transmeta Efficeon CPUs, it is returned <b>in</b> EBX:EAX <b>registers.</b> And for Transmeta Crusoe CPUs, it is returned <b>in</b> EBX <b>register</b> only.|$|R
40|$|Typed English {{translation}} : Instructions {{regarding the}} procedure {{to be followed}} <b>in</b> <b>registering</b> trade marks and patents, conceded in foreign countries, in this Republic. Typed English translation in pocket with title: Instructions regarding the procedure to be followed <b>in</b> <b>registering</b> trade marks and patents, conceded in foreign countries, in this Republic. (Statement of Responsibility) República de Cuba, Secretaría de AGricultura, Comercio y Trabajo...|$|R
5000|$|... beginning: mov A,string pointer Put {{location}} of first character of source string <b>in</b> <b>register</b> A mov B,string pointer Put {{location of}} first character of destination string <b>in</b> <b>register</b> Bloop: mov C,A Copy byte at address <b>in</b> <b>register</b> A to register C mov B,C Copy byte <b>in</b> <b>register</b> C {{to the address}} <b>in</b> <b>register</b> B inc A Increment the address <b>in</b> <b>register</b> A {{to point to the}} next byte inc B Increment the address <b>in</b> <b>register</b> B to point to the next byte cmp C,#0 Compare the data we just copied to 0 (string end marker) jnz loop If it wasn't 0 then we have more to copy, so go back and copy the next byteend: If we didn't loop then we must have finished, so carry on with something else.|$|E
5000|$|... beginning: mov A,string pointer Put {{location}} of first character of source string <b>in</b> <b>register</b> A mov B,string pointer Put {{location of}} first character of destination string <b>in</b> <b>register</b> Bloop: movs B,A Copy 16 bytes at address <b>in</b> <b>register</b> A to address <b>in</b> <b>register</b> B, then increment A and B by 16 jnz loop If the zero flag isn't set then we haven't {{reached the end}} of the string, so go back and copy some more.end: If we didn't loop then we must have finished, so carry on with something else.|$|E
5000|$|... !START! j 0aua ! jump to beginning, load 1st char <b>in</b> <b>register</b> A ! !CONT! l 0aub ! load first char of {{next line}} <b>in</b> <b>register</b> B ! qa-qb"g xa k -l ga 1uz ' ! if A>B, switch lines and set flag <b>in</b> <b>register</b> Z ! qbua ! load B into A ! l z-."g -l @o/CONT/ ' ! loop back if another line in buffer ! qz"g 0uz @o/START/ ' ! repeat if a switch {{was made on}} last pass ! ...|$|E
50|$|The LDS succeeded <b>in</b> <b>registering</b> 51 local {{religious}} organizations {{as of the}} end of 2006.|$|R
5000|$|Everonn announces {{a change}} <b>in</b> <b>registered</b> name to Everonn Education Limited to emphasise {{operational}} focus ...|$|R
5000|$|In {{the above}} System/370 {{assembly}} code sample, R1 and R2 are distinct registers, and each XR operation leaves its result <b>in</b> the <b>register</b> named <b>in</b> the first argument. Using x86 assembly, values X and Y are <b>in</b> <b>registers</b> eax and ebx (respectively), and [...] places {{the result of}} the operation <b>in</b> the first <b>register.</b>|$|R
5000|$|... (multiply): Multiply the {{contents}} of register A by the data at the referenced memory address and store the high-order product <b>in</b> <b>register</b> A and the low-order product <b>in</b> <b>register</b> LP. The parts of the product agree in sign.|$|E
5000|$|The Jazelle Identity Register <b>in</b> <b>register</b> CP14:C0(C0) is {{read-only}} accessible in all modes.|$|E
50|$|The Church of St. Stephen (Crkva svetog Stefana, Црква светог Стефана) in Borovo is a Serbian Orthodox {{church in}} eastern Croatia. The church {{was built in}} the period from 1761 to 1764. Under its {{patronage}} was carried out first educational activities in the village. Church is listed <b>in</b> <b>Register</b> of Cultural Goods of Croatia. Iconostasis with 49 icons and other inventory is also specifically listed <b>in</b> <b>Register.</b>|$|E
25|$|Albion first appears <b>in</b> Lloyd's <b>Register</b> <b>in</b> 1800.|$|R
5000|$|... #Caption: Mathias {{defeated}} incumbent Democrat Daniel Brewster, {{despite the}} Democratic Party's 3-1 advantage <b>in</b> <b>registered</b> voters.|$|R
5000|$|How {{parameters}} are passed (pushed on the stack, placed <b>in</b> <b>registers,</b> or {{a mix of}} both) ...|$|R
