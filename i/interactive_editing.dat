194|163|Public
2500|$|GNU diff and diff3 are {{included}} in the diffutils package with other diff and patch related utilities. [...] Emacs has Ediff for showing the changes a patch would provide in a user interface that combines <b>interactive</b> <b>editing</b> and merging capabilities for patch files. [...] Nowadays there is also a patchutils package that can combine, rearrange, compare and fix context diffs and unified diffs.|$|E
50|$|<b>Interactive</b> <b>editing</b> is a {{standard}} way to edit data. It {{can be used to}} edit both categorical and continuous data. <b>Interactive</b> <b>editing</b> reduces the time frame needed to complete the cyclical process of review and adjustment.|$|E
5000|$|Interactive Writing and <b>Interactive</b> <b>Editing.</b> (2002). Pearson Learning/Dominie Press.|$|E
40|$|We propose an <b>interactive</b> <b>edit</b> web system, that is, {{users can}} edit and revise {{documents}} cooperatively and interactively. The Ie-web is constructed based on conceptions of special issue edit and pantographic issue edit. The {{goal of this}} study is not only developing cooperative document making system by many users, but research paper making system by mentors and other students. In recent years, computer-based telelearning systems are developed. Thus, we propose a useful cooperative document making support system to develop a system used at university educations. Key Words paper making support system, cooperative <b>edit,</b> <b>interactive</b> <b>edit,</b> group ware...|$|R
50|$|Dynamic City Layouts: <b>Interactive</b> design, <b>editing</b> and {{modification}} of urban layouts consisting of (curved) streets, blocks and parcels.|$|R
5000|$|Largely {{due to the}} {{prevalence}} of <b>interactive</b> text <b>editing</b> in modern operating systems, line numbers are not a feature of most programming languages.|$|R
5000|$|SHOTS Awards 2011 - <b>Interactive,</b> <b>Editing</b> Juries - Mischa Rozema ...|$|E
50|$|Swartz, Stanley L. et al., (2001). <b>Interactive</b> <b>editing</b> and {{interactive}} writing. Dominie Press/Pearson Learning.|$|E
50|$|The {{company is}} also {{dedicated}} to developing and distributing Klynt, an application dedicated to <b>interactive</b> <b>editing.</b>|$|E
40|$|We {{describe}} a multiresolution representation for meshes based on subdivision, {{which is a}} natural extension of the existing patch-based surface representations. Combining subdivision and the smoothing algorithms of Taubin [26] allows us to construct a set of algorithms for <b>interactive</b> multiresolution <b>editing</b> of complex hierarchical meshes of arbitrary topology. The simplicity of the underlying algorithms for refinement and coarsification enables us to make them local and adaptive, thereby considerably improving their efficiency. We have built a scalable <b>interactive</b> multiresolution <b>editing</b> system based on such algorithms. ...|$|R
40|$|The Internet and the World Wide Web form a vast, global {{information}} network. This thesis describes {{new approaches}} to the navigation, construction, and visualisation of hypermedia on the Internet, as embodied in the Harmony client and authoring tool for the Hyper-G web server. Harmony’s advanced browsing and navigational tools support the concept of location feedback, which helps users orient by providing contextual feedback with reference to an explicit structural framework. Harmony’s suite of (remote) authoring facilities includes structure <b>editing,</b> document <b>editing,</b> <b>interactive</b> graphical link <b>editing</b> in all media, attribute <b>editing,</b> <b>interactive</b> uploading, insertion, and deletion, making annotations, and managing user accounts and user groups. The Harmony 3 D Scene Viewer was the first Internet-enabled, 3 d hypermedia browser. Its successor, VRweb, is a popular VRML browser with support for collision detection, terrain-following, point-of-interest navigation, and <b>interactive</b> link <b>editing.</b> Finally, Harmony incorporates two innovative information visualisation tools. The Harmon...|$|R
40|$|Constraint based draw {{programs}} require {{users to}} understand and manage relationships between drawing elements. By establishing constraint relationships among elements the user effectively programs the drawing's behavior. This programming task requires a more sophisticated visual interface than conventional draw programs provide. Users must have available — in a convenient format — information about {{the structure of the}} constraints that determine the drawing's <b>interactive</b> <b>edit</b> behavior. This format must support editing and debugging. CoDraw is a constraint based drawing program that can be interactively extended by its users. This paper describes the CoDraw program and its programming interface. ...|$|R
5000|$|Adobe added <b>interactive</b> <b>editing,</b> meaning when a user edits and {{paints the}} image, {{the effects are}} shown immediately.|$|E
5000|$|Selective editing is an {{umbrella}} term for several methods {{to identify the}} influential errors, [...] and outliers. Selective editing techniques aim to apply <b>interactive</b> <b>editing</b> to a well-chosen subset of the records, such that the limited time and resources available for <b>interactive</b> <b>editing</b> are allocated to those records where it has the most effect {{on the quality of}} the final estimates of publication figures. In selective editing, data is split into two streams: ...|$|E
50|$|Brief (styliez BRIEF or B.R.I.E.F., a backronym for Basic Reconfigurable <b>Interactive</b> <b>Editing</b> Facility), is a once-popular programmer's {{text editor}} in the 1980s and early 1990s. It was {{originally}} released for MS-DOS, then OS/2 and Windows.|$|E
40|$|We {{describe}} a multiresolution representation for meshes based on subdivision. Subdivision {{is a natural}} extension of the existing patch-based surface representations. At the same time subdivision algorithms can be viewed as operating directly on polygonal meshes, which makes them a useful tool for mesh manipulation. Combination of subdivision and smoothing algorithms of Taubin [26] allows us to construct a set of algorithms for <b>interactive</b> multiresolution <b>editing</b> of complex meshes of arbitrary topology. Simplicity of the essential algorithms for re nement and coarsi cation allows to make them local and adaptive, considerably improving their efficiency. We have built a scalable <b>interactive</b> multiresolution <b>editing</b> system based on such algorithms...|$|R
2500|$|John Craig Freeman. [...] "Imaging Place: Globalization and Immersive Media," [...] Transdisciplinary Digital Art. Sound, Vision and the New Screen Digital Art Weeks and <b>Interactive</b> Futures, <b>edited</b> by Randy Adams, Steve Gibson and Stefan Muller Arisona, Berlin, Heidelberg, New York: Springer, 2008, pp.453–466.|$|R
40|$|We {{describe}} a multiresolution representation for meshes based on subdivision, {{which is a}} natural extension of the existing patch-based surface representations. Combining subdivision and the smoothing algorithms of Taubin [26] allows us to construct a set of algorithms for <b>interactive</b> multiresolution <b>editing</b> of complex hierarchical meshes of arbitrary topology. The simplicity of the underlying algorithms for refinement and coarsification enables us to make them local and adaptive, thereby considerably improving their efficiency. We have built a scalable <b>interactive</b> multiresolution <b>editing</b> system based on such algorithms. 1 Introduction Applications such as special effects and animation require creation and manipulation of complex geometric models of arbitrary topology. Like real world geometry, these models often carry detail at many scales (cf. Fig. 1). The model might be constructed from scratch (ab initio design) in an interactive modeling environment or be scanned-in either by hand [...] ...|$|R
5000|$|... 2D image viewing: Fast, modular, {{extensible}} 2D viewers with combined 2D/3D rendering are implemented, supporting slab rendering (volume rendering/MIP), overlays, point/ROI selection, Multiplanar Reformations (MPR), {{as well as}} <b>interactive</b> <b>editing</b> of marker objects (points, vectors, discs, spheres, etc.) ...|$|E
5000|$|The term <b>interactive</b> <b>editing</b> is {{commonly}} used for modern computer-assisted manual editing. Most interactive data editing tools applied at National Statistical Institutes (NSIs) allow one to check the specified edits during or after data entry, and if necessary to correct erroneous data immediately. Several approaches can be followed to correct erroneous data: ...|$|E
5000|$|In December 1968 in a 90-minute {{session at}} the Fall Joint Computer Conference, Engelbart and his team {{presented}} their work in a live demonstration, including real-time video conferencing and <b>interactive</b> <b>editing</b> {{in an era when}} batch processing was still the paradigm for using computers. This was later called [...] "the Mother of All Demos".|$|E
40|$|Text is not {{the only}} data that needs <b>editing.</b> For example, <b>interactive</b> debuggers <b>edit</b> data {{structures}} internal to running programs. This paper describes eds, a generalized editor that allows users to edit arbitrary data structures. Examples show eds maintaining simple databases, editing LISP S-expres-sions, debugging SNOBOL 4 programs, and creating and modifying data structures for a computer graphics system...|$|R
40|$|We {{propose a}} novel {{rendering}} method which supports <b>interactive</b> BRDF <b>editing</b> {{as well as}} relighting on a 3 D scene. For <b>interactive</b> BRDF <b>editing,</b> we linearize an analytic BRDF model with basis BRDFs obtained from a principal component analysis. For each basis BRDF, the radiance transfer is precomputed and stored in vector form. In rendering time, illumination of a point is computed by multiplying the radiance transfer vectors of the basis BRDFs by the incoming radiance from gather samples and then linearly combining the results weighted by user-controlled parameters. To improve the level of accuracy, a set of sub-area samples associated with a gather sample refines the glossy reflection of the geometric details without increasing the precomputation time. We demonstrate this program {{with a number of}} examples to verify the real-time performance of relighting and BRDF editing on 3 D scenes with complex lighting and geometry...|$|R
40|$|An <b>interactive</b> surface <b>editing</b> {{framework}} {{that is well}} suited {{to the needs of}} geophysical modelers and interpreters is described. This surface editing framework allows a non-expert user to quickly create complicated surfaces by combining two simple concepts: deformation and cutting. Deformations change the geometry of a surface and allow a user to model continuous geologic horizons. Cutting changes the topology of the surface to model geologic faults...|$|R
50|$|GNU diff and diff3 are {{included}} in the diffutils package with other diff and patch related utilities. Emacs has Ediff for showing the changes a patch would provide in a user interface that combines <b>interactive</b> <b>editing</b> and merging capabilities for patch files. Nowadays there is also a patchutils package that can combine, rearrange, compare and fix context diffs and unified diffs.|$|E
5000|$|... in 3D {{computer}} graphics software, vertex painting refers to <b>interactive</b> <b>editing</b> tools for modifying vertex attributes directly on a 3D polygon mesh, using painting tools similar to any digital painting application but {{working in a}} 3D viewport on a perspective view of a rotated model. It {{is similar to a}} 3D paint tool but operates specifically to vertex data rather than texture maps.|$|E
50|$|Necessary {{only for}} {{internal}} calculations, knots {{are usually not}} helpful to the users of modeling software. Therefore, many modeling applications do not make the knots editable or even visible. It's usually possible to establish reasonable knot vectors {{by looking at the}} variation in the control points. More recent versions of NURBS software (e.g., Autodesk Maya and Rhinoceros 3D) allow for <b>interactive</b> <b>editing</b> of knot positions, but this is significantly less intuitive than the editing of control points.|$|E
40|$|The {{creative}} economy is of rapidly growing significance {{in most countries}} but is a new concept {{and we are still}} learning how to value it, measure it and understand its relationship to the wider economy and its impact on society. Part of an <b>interactive</b> guide, <b>edited</b> by John Newbigin, which explores how the {{creative economy}} is evolving. International contributors build a picture of their innovative work...|$|R
50|$|DataEase 7.3 is {{scheduled}} {{for the end of}} the year and DataEase 8 promises to be to the Web community what DataEase for DOS was to the character based community. It will be completely web based but with full interoperability with Windows. It will be the first DataEase since DOS with improved and <b>interactive</b> DQL/OML/BRL <b>editing.</b> DataEase 8 will make it as easy to make transaction intensive, advanced, Web-based applications.|$|R
50|$|The 2741 was {{initially}} developed and marketed {{for use with}} the IBM Administrative Terminal System (ATS/360). ATS is an <b>interactive,</b> multi-user text <b>editing</b> and storage system implemented in the mid-1960s using IBM System/360 assembly language.|$|R
50|$|Validation, {{presentation}} and grouping metadata make possible {{the creation of}} code frameworks that support automatic user interface generation for both data browsing as well as <b>interactive</b> <b>editing.</b> In a production system that is delivered over the Web, the task of validation of EAV data is essentially moved from the back-end/database tier (which is powerless {{with respect to this}} task) to the middle /Web server tier. While back-end validation is always ideal, because it is impossible to subvert by attempting direct data entry into a table, middle tier validation through a generic framework is quite workable, though a significant amount of software design effort must go into building the framework first. The availability of open-source frameworks that can be studied and modified for individual needs {{can go a long way}} in avoiding wheel reinvention.|$|E
5000|$|Just before code generation, {{it may be}} {{desirable}} to allow an <b>interactive</b> <b>editing</b> of the IR, perhaps using some form of graphical user interface. This would allow the user to enter comments, and non-generic variable and function names. However, these are almost as easily entered in a post decompilation edit. The user may want to change structural aspects, such as converting a [...] loop to a [...] loop. These are less readily modified with a simple text editor, although source code refactoring tools may assist with this process. The user may need to enter information that failed to be identified during the type analysis phase, e.g. modifying a memory expression to an array or structure expression. Finally, incorrect IR {{may need to be}} corrected, or changes made to cause the output code to be more readable.|$|E
50|$|HADES (Haskins Analysis Display and Experiment System)http://www.haskins.yale.edu/facilities/hades.html {{refers to}} a family of signal {{processing}} computer programs that {{was developed in the}} 1980s at Haskins Laboratories by Philip Rubin and colleagues to provide for the display and analysis of multiple channel physiological, speech, and other sampled data in an experimental context. Principal programmers over the years on this project included Vance Maverickhttp://portal.acm.org/citation.cfm?id=178251&coll=portal&dl=ACM, Mark Tiede http://www.haskins.yale.edu/staff/tiede.html, Marian Pressler, and Simon Levy http://cs.wlu.edu/~levy/. The most significant feature of HADES was the incorporation of a procedural language known as SPIEL (Signal Processing <b>Interactive</b> <b>Editing</b> Language) that provided for the creation and customization of specialized analysis procedures that can be stored as text files, edited, etc., and are similar to functions and subroutines in programming languages like C and Fortran. HADES was one of the earliest signal processing systems with an integrated language and, through the use of SPIEL, provided for automated procedural analysis of large datasets, usually speech data or multiple-channel physiological data acquired with specialized hardware such as the EMMAhttp://vesicle.nsi.edu/users/patel/speech_database.html magnetometer system. Previous systems at the time included ILS from STI, Inc., and the MITSYNhttp://home.earthlink.net/~billhenke/index.html system designed by Bill Henke. HADES was written in C and implemented on VAX systems running VMS. Although HADES still finds limited use, its functionality was eventually replaced by commercial systems such as MATLAB.|$|E
40|$|Video editing can be {{a complex}} and {{time-consuming}} task. Commonly an editing session involves the review of a substantial quantity of video material which may be poorly labelled, lengthy compared to the final edited sequence and repetitious. The key problem is the effective visualization of the temporal axis of any given video sample. Here we investigate the potential of volumetric rendering to overcome this issue via a novel user visualisation interface for <b>interactive</b> video <b>editing...</b>|$|R
5000|$|... 1983-1984: AUTOMAP 2 second {{generation}} computer assisted cartography and mapping {{system as a}} precursor to collection of digital geographic information and creation of geographic information systems in support of emerging digital military systems. Supplied by Intergraph Pty Ltd it comprised; superimposition of compiled graphics in the optical train of Wild B8 stereoplotters, dual screen <b>interactive</b> graphic <b>edit</b> workstations, raster scanner/plotter, VAX computers (the first map published was De Grey 2757 1:100,000 including screens and stipples) ...|$|R
40|$|We {{describe}} a simple geometric modelling system called Eight which supports <b>interactive</b> creation, <b>editing,</b> and display of three-dimensional polyhedral solids. Perspective {{views of a}} polyhedral environment may be generated, and hidden surfaces removed. Eight proved useful for creating world models, and as an underlying system for modelling object interaction in robotics research and applications. It is documented here {{in order to make}} the facility available to other members of the Artificial Intelligence Laboratory. MIT Artificial Intelligence Laborator...|$|R
