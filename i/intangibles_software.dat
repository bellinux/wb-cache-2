1|47|Public
40|$|This paper uses a new {{cross-country}} cross-industry dataset {{on investment}} in {{tangible and intangible assets}} for 18 European {{countries and the}} US. We set out a framework for measuring intangible investment and capital stocks and their effect on output, inputs and total factor productivity. The analysis provides evidence on the diffusion of intangible investment across Europe and the US over the years 2000 - 2013 and offers growth accounting evidence before and after the Great Recession in 2008 - 2009. Our major findings are the following. First, tangible investment fell massively during the Great Recession and has hardly recovered, whereas intangible investment has been relatively resilient and recovered fast in the US but lagged behind in the EU. Second, the sources of growth analysis including only national account <b>intangibles</b> (<b>software,</b> R&D, mineral exploration and artistic originals), suggest that capital deepening is the main driver of growth, with tangibles and intangibles accounting for 80 % and 20 % in the EU while both account for 50 % in the US, over 2000 - 2013. Extending the asset boundary to the intangible assets not included in the national accounts (Corrado, Hulten and Sichel (2005)) makes capital deepening increases. The contribution of tangibles is reduced both in the EU and the US (60 % and 40 % respectively) while intangibles account for a larger share (40 % in EU and 60 % in the US). Then, our analysis shows that since the Great Recession, the slowdown in labour productivity growth has been driven by a decline in TFP growth with relatively a minor role for tangible and intangible capital. Finally, we document a significant correlation between stricter employment protection rules and less government investment in R&D, and a lower ratio of intangible to tangible investment...|$|E
30|$|To {{deal with}} {{comprehension}} in this complex scenario, researchers and practitioners {{have been using}} software visualization (SoftVis). SoftVis {{can be defined as}} the mapping from any kind of software artifact (lines of code, method, class, etc.) to graphical representations [35, 36]. It is very helpful since it transforms <b>intangible</b> <b>software</b> entities and their relationships into visual metaphors that are easily interpreted by human beings [37].|$|R
40|$|Abstract The {{field of}} {{software}} visualization (SV) investigates approaches and techniques for static and dynamic graphical representations of algorithms, programs (code), and processed data. SV is concerned primarily with {{the analysis of}} programs and their development. The goal is to improve our understanding of inherently invisible and <b>intangible</b> <b>software,</b> particularly when dealing with large information spaces that characterize domains like software maintenance, reverse engineering, and collaborative development. The main challenge is to find effective mappings from different software aspects to graphical representations using visual metaphors. This paper {{provides an overview of}} the SV research, describes current research directions, and includes an extensive list of recommended readings. ...|$|R
40|$|So far the {{critical}} {{choice of the}} entry mode for a target country has been examined ignoring the special features of firms. Particularly, {{the impact of the}} wide variation of business models of software firms has been ignored. This multi case study investigates the relation between the business model and the entry mode, of eight software firms. The results imply that the product strategy and the service and implementation model of a software firm are closely connected to the entry mode choice, while the distribution model of <b>intangible</b> <b>software</b> products {{does not seem to have}} an impact on the operation mode. Copyright Springer Science+Business Media, LLC 2006 Entry mode, Market entry, Business models, Software, Small firms,...|$|R
5000|$|A {{method to}} value <b>software</b> <b>intangibles</b> based on {{balancing}} initial and maintenance efforts to allocate income in 2005.|$|R
40|$|Hospitals {{consume a}} {{significant}} proportion of healthcare budgets and are a key avenue for the delivery of key interventions. Understanding how hospitals use resources is therefore an important question. Priority setting research has however focused on the macro (national) and micro (patient) level, and neglected the meso (organizational, hospital) level practices. There is also a dearth of literature on priority setting in developing country hospitals, although they are recognized to suffer severe resource scarcity. This thesis describes and evaluates priority setting practices in Kenyan hospitals and identifies strategies for improvement. METHODOLOGY: A case study approach was used, where two public hospitals in coastal Kenya were selected as cases and three priority setting processes examined as nested cases. Data were collected over a seven month fieldwork period using in - depth interviews, document reviews, and non - participant observations. A modified thematic approach was used for data analysis. FINDINGS: Hospitals exhibit properties of complex adaptive systems (CASs) that exist in a dynamic state with multiple interacting agents. Weaknesses in the system hardware (resource scarcity) and software (tangible - guidelines and procedure s and intangible - leadership and actor relationships) led to the emergence of undesired properties. Both hospitals had comparable system hardware and tangible software, but differences in <b>intangible</b> <b>software</b> contributed to variations in priority setting practices. For example, good leadership and actor relations in one hospital lead to better inclusion of stakeholders and perceptions of fairness while weak leadership, heightened tensions among actors and less inclusive processes in the other hospital lead to distrust and perceptions of unfairness. RECOMMENDATIONS: The capacity of hospitals to set priorities should be improved across the interacting aspects of organizational hardware, and tangible and <b>intangible</b> <b>software.</b> Interventions should however recognize that hospitals are CASs. Rather than rectifying isolated aspects of the system, they should endeavor to create conditions for productive emergence...|$|R
5000|$|Computer {{software}} or just [...] "software", is {{a collection}} of computer programs and related data that provides the instructions for telling a computer what to do and how to do it. Software refers to one or more computer programs and data held in the storage of the computer for some purposes. In other words, software is a set of programs, procedures, algorithms and its documentation concerned with the operation of a data processing system. Program software performs the function of the program it implements, either by directly providing instructions to the computer hardware or by serving as input to another piece of software. The term was coined to contrast with the old term hardware (meaning physical devices). In contrast to hardware, <b>software</b> is <b>intangible.</b> <b>Software</b> is also sometimes used in a more narrow sense, meaning application software only.|$|R
40|$|For {{many years}} basic visualisation, based around simple boxes and lines, {{has been done}} in an attempt to be able to ease some of the {{cognitive}} overload caused by program comprehension. The problems with such visualisations is that they can very easily become incomprehensible by trying to force large amounts of information into a small space, relying solely on two dimensions for the representations. Three-dimensional visualisations are one approach that is being considered to combat these problems, although there are also many different issues that must be considered for these sorts of visualisations. Especially when those visualisations are of <b>intangible</b> <b>software</b> systems. A solution is to use virtual environments as a base for these threedimensional visualisations, which allows a sense of context to be maintained and also promotes collaboration between the people trying to comprehend the code. 1. Introduction Software visualisation is an important weapon in the program comprehension ar [...] ...|$|R
40|$|Software {{cost and}} {{schedule}} estimation supports {{the planning and}} tracking of software projects. Because software is complex and <b>intangible,</b> <b>software</b> projects have always been harder to estimate than hardware projects. In this article, we review challenges for software cost estimators, and describe research work under way to address these challenges. The Changing Nature of Software Development There are now many ways to develop and sell software products. This means that {{the scope of the}} estimation problem is much larger now {{than it was in the}} early days of software development. In the 1960 s, all software was custom built. Projects had dedicated staff. Companies were usually paid on a level of effort basis (cost plus, or time and materials). Today, there are many ways to build software (custom coding, integration of pre-built components, generation of code using tools, etc.). The project environment is more varied as well. Large, complex software products need a wider range of skills. Organizational structures are flatter and more fluid. Workers ar...|$|R
40|$|For {{many years}} basic visualisation, based around simple boxes and lines, {{has been done}} in an attempt to be able to ease some of the {{cognitive}} overload caused by program comprehension. The problems with such visualisations is that they can very easily become incomprehensible themselves by trying to force large amounts of information into a small space, relying solely on two dimensions for the representations and because generally the information is presented in a static way. There are many different issues that must be considered for three-dimensional visualisation, especially when those visualisations are of <b>intangible</b> <b>software</b> systems, and a selection of these are presented and discussed. - 1 - 1. Introduction Software visualisation is an important tool in the maintainer's armoury. It is a technique that can, when designed and used effectively, aid him in his quest to understand existing program code. This document provides an introduction to software visualisation issues, with pr [...] ...|$|R
40|$|Software {{engineers}} {{are provided with}} an enormous choice of technology for {{improving the quality of}} <b>software.</b> Being <b>intangible,</b> <b>software</b> products tend to be more intricate to build than any other artifacts. The selection of technology can thus become a critical factor for the success of software development. Software {{engineers are}} expected to be well-versed in various technologies to enable them to decide the best one for a particular development project. Sensible decisions however require not only understanding but also active minds, which can be achieved through meaningful learning. Being a discussion-based learning approach that encourages students to exploit knowledge and understanding of the subject matter, the Case Method seems to be a practical teaching and learning option. This method entails developing specific cases that promote exploration and critical thinking. To ensure the developed cases are useful, they should be evaluated. This paper presents a practical methodology for developing as well as evaluating industrial cases for teaching software engineering through the Case Method. It also shares some important lessons learned from the process. These lessons act as a guideline for future case developers to compose useful cases and motivate software engineering instructors to use cases in teaching...|$|R
40|$|Concepts {{modified}} by a Non- prefix apparently denote a negation, an {{opposite of the}} concept without this prefix. But, generally the situation is rather subtle: non- implies only partial negation and the concept suggests preserved identity with some reduced quality or absent attribute. In this work tangible and <b>intangible</b> <b>software</b> subsystems based upon Non- concepts are defined and pluggable ontologies are proposed for their representation. Pluggable ontologies {{are a kind of}} nano-ontologies, which by their minimal size facilitate fast composition of new software subsystems. These ontologies are made pluggable by Design Sockets, a novel kind of class. These are abstract connectors for removed/added parts, functionalities or identities, and for subdued qualities. Design Sockets are the basis of a Design Pattern for dynamically modifiable software systems. Pragmatic implications of Non- concepts include manageable design of product lines with multiple models. Non- concepts are also relevant to the controversy whether composition is or is not identity. The resolution is not sharp. Identity is entangled with composition, and is preserved to a certain extent, until further removal causes identity breakdown. Comment: 17 pages, 19 figures, Extended from KEOD' 2012 Conferenc...|$|R
50|$|Start-up loans, {{designed}} to encourage new entrepreneurs to create or acquire SMEs, can cover the financing of business plans, land and buildings {{to be used for}} professional activities, working capital, equipment, <b>intangibles</b> (licences, <b>software),</b> and start-up activities (advertising, studies). Support ranges between €5,000 and €250,000 but may not exceed 40% of eligible costs. The interest rate is currently fixed at 5.25%. The duration is decided on a case-by-case basis depending {{on the nature of the}} costs. Reimbursement at quarterly intervals must start within five years but repayments can be made earlier without penalty.|$|R
40|$|This article calculates {{some facts}} for the ‘knowledge economy’. Using new data, first we {{document}} UK intangible investment {{and find that}} (i) this is greater than tangible investment by £ 37 bn in 2008; (ii) R&D is 11 % of total <b>intangible</b> investment, <b>software</b> 15 %, and training and organizational capital 22 % each; (iii) the most intangible-intensive industries are manufacturing and financial services. Next, we measure the contribution of intangible capital to growth for 2000 – 08. We find that intangible capital accounts for 23 % of labour productivity growth and treating intangibles as investment lowers total factor productivity growth in the 2000 s by 24 % (R&D lowers it by 3 %) ...|$|R
30|$|From {{our point}} of view, future {{research}} interests include visualizing software organizations like depicted in Fig. 2. How can the invisible and <b>intangible</b> nature of <b>software</b> be illuminated, particularly in traditional companies transforming towards software organizations (c.f., Fig. 4)? Future research will benefit from including the measurements from chapter Key measurements. Further cases (chapter Results and experiences) would strengthen the validation on our design artifacts proposed in this paper. Future research may also include comparative studies with scaled agile frameworks (SAFe) [36, 37].|$|R
40|$|We have {{developed}} a highly flexible module to evaluate and access the reusability of software components. The purpose of this model is to do pattern recognition by discovering supervised features which can help us to measure the <b>intangible</b> aspects of <b>software</b> components in terms of reusability. There were several function based applications which were given due diligence for identifying their various degrees of reusability of their components. Once these projects were analyzed their software components were {{measured in terms of}} software metrics including (Volume...|$|R
40|$|The aim of {{the thesis}} is to analyze {{reporting}} of websites under IFRS. The text focuses on the reporting requirements according to fact how a website was acquired and what its purpose. Three variants are discussed: self-creation of a website, sale and purchase of a website and also leasing a website. The practical part examines the reporting of <b>intangible</b> assets (especially <b>software)</b> in financial statements of four selected companies. It also provides a brief comparison of reporting of intangible assets under Czech accounting rules and under IFRS...|$|R
40|$|The Nobel Peace Prize is {{more than}} a medal,diploma and {{monetary}} sum. This thesis investigates the nature and international impacts of this accolade. It traces the historical evolution of the media resources that underpin the Prize, and offers three ways of conceptualising it: as a meme, as a set of <b>intangible</b> and <b>software</b> assets, and as a tool of soft power. The study argues that these elements are all components of the award, and that they act as communicational tools that operate in various ways to disseminate specific messages to international publics. To substantiate these conceptualisations, selected media texts are analysed using a multi-method approach. The 2007 conferral of the Prize to the former U. S. Vice President Al Gore and the Intergovernmental Panel on Climate Change (represented by Rajendra Pachauri) serves as the case study. The thesis concludes suggesting that the Prize can have significant impacts on individuals around the world, in encouraging universal peacemaking...|$|R
40|$|Abstract. Visualisation {{provides}} good {{support for}} software analysis. It copes with the <b>intangible</b> nature of <b>software</b> by providing concrete repre-sentations of it. By reducing {{the complexity of}} software, visualisations are especially useful when dealing with large amounts of code. One domain that usually deals with large amounts of source code data is empirical analysis. Although there are many tools for analysis and visualisation, they do not cope well software corpora. In this paper we present Explora, an infrastructure that is specifically targeted at visualising corpora. We report on early results when conducting a sample analysis on Smalltalk and Java corpora. ...|$|R
40|$|During the {{development}} of a software system, architects deal with a large number of stakeholders, each with differing concerns. This inevitably leads to inconsistency: goals, concerns, design decisions, and models are interrelated and overlapping. Existing approaches to support inconsistency management are limited in their applicability and usefulness in day to day practice due to the presence of incomplete, informal and heterogeneous models in software architecture. This paper presents a novel process {{in the form of a}} lightweight generic method, the Concern-Driven Inconsistency Management (CDIM) method, that is designed to address limitations of different related approaches. It aims to aid architects with management of <b>intangible</b> inconsistency in <b>software</b> architecture...|$|R
40|$|In today's {{innovation}} economy, {{the development}} of innovation hubs {{is viewed as a}} strategic undertaking to nourish the entrepreneurial ecosystem and to enhance economic vitality. The study uses Silicon Valley, {{one of the most successful}} innovation hubs in modern history, as a case example to find the factors that have contributed to its success, and how these factors will evolve over time. Using existing literature and in-depth interviews, the study produces a framework of key factors that will influence {{the development of}} such hubs in the future. Silicon Valley case shows that the foundation element of a successful innovation hub is people - the human capital. Adding to this element, five hardware ingredients - Universities & R&D Centers, Venture Capital, Major Corporations, Service Providers, and Government - have an irreplaceable role in sustaining the vitality of such hubs. The <b>intangible</b> <b>software,</b> culture with its four dimensions entrepreneurial mentality, mobility of resources, global perspective and shared vision, acts as a catalyst that brings the foundation element and hardware ingredients together, allowing them to interact and cooperate. Ultimately, an effective entrepreneurial ecosystem is formed from the combination of all these factors. The findings from in-depth interviews suggest that the original culture of Silicon Valley will continue to play a key role in future innovation hubs. This entrepreneurial mentality, especially in terms of openness, supportiveness, forgiveness and risk-taking attitude, remains highly desired by today's entrepreneurs. Simultaneously, recent shifts in the demographic landscape have changed the nature of the foundation element - people. Millennials and the Creative Class have become a dominant pool of talented workforce, and they possess different values and preferences compared to other generations. Together with urbanization, this creative workforce shows high appreciation towards the role of place and urban lifestyle. Thus, in order to successfully attract and retain such talents, urban location will play an increasingly important role in future innovation hubs. It is estimated that the "place element" will become a new addition the innovation hub hardware system, supporting the overall development of entrepreneurial climate. by Dandi Li. Thesis: S. M. in Real Estate Development, Massachusetts Institute of Technology, Program in Real Estate Development in conjunction with the Center for Real Estate, 2016. Cataloged from PDF version of thesis. Includes bibliographical references (pages 54 - 56) ...|$|R
40|$|It {{has long}} been known that {{software}} systems are complex. Brooks asserted that much of this complexity was inherent to the domain: “the systems we produce are themselves the solutions to complex problems that are constantly changing; the <b>intangible</b> nature of <b>software</b> defies our abilities to represent or visualize it without eliminating essential detail; and it provides the connective tissue between a vast array of other systems, both man and machine. ” [1] In the twenty years that have passed since Brooks made those assertions the scale of systems has grown enormously, making the problem even more daunting. Fortunately this period has also seen significant advances in our understanding of what constitutes complexity in those systems. We now have catalogs of heuristics...|$|R
40|$|The <b>intangible</b> {{nature of}} <b>software</b> means that {{traditional}} processes for managing product development are not sufficiently effective. This, {{in combination with}} the increasing share of software in technical products, has had the effect of making it difficult to identify improvement proposals for engineering processes in many cases. This thesis uses both qualitative and quantitative research methods to investigate methods that involve the entire development organisation in software process improvement. The research is performed in cooperation with several companies developing software products in different countries. The studied organisations range from small development companies, using light, informal methodologies, to large corporations, with thousands of developers, using large frameworks of formal process models. The need for organisations to use both local experience as well as generally accepte...|$|R
40|$|The thesis {{focuses on}} {{financial}} reporting under IFRS {{in comparison with}} US GAAP. It defines a software company and characterizes the business segment as very dynamic, rich in business combinations. The thesis describes methods of financial reporting of intangible assets, {{research and development and}} external sources for obtaining software. In-house created software is rarely capitalized that cause undervaluation of assets. In particular assets from business combination are reported. The thesis describes software revenue recognition according to current IFRS/US GAAP and the new revenue standard. It compares chosen aspects of reporting in segments: B 2 C, B 2 B, social networks, information security and search engines. In the conclusion, the thesis evaluates current situation in described segments regarding relevance of the standard to monetization models and <b>intangible</b> assets of <b>software</b> companies and it provides possible outlines in the future...|$|R
40|$|This article {{presents}} {{a method for}} valuing software based on the income that use of that software is expected to generate in the future. Well-known principles of intellectual property (IP) valuation, sales expectations, discounting to present value, and the like, are applied, always focusing on the benefits and costs of software. A major issue, not {{dealt with in the}} literature of valuing <b>intangibles,</b> is that <b>software</b> is continually upgraded. Applying depreciation schedules is the simple solution, but does not represent at all the actual devaluation of the inherent IP of software. A realistic approach, allowing ongoing maintenance, is presented here. All steps of the process are presented and then integrated via a simple quantitative example. Having a quantitative model on a spreadsheet allows exploration of business alternatives. An example a service model is evaluated. Conclusions are drawn that reflect on academic and business practice. ...|$|R
40|$|Hall (2000 and 2001) {{pointed out}} that the {{conventional}} Tobin’s Q considering only tangible assets in the US stock market persistently exceeded 1. Then, he argued that adjustment costs associated with capital formation in tangible assets are accumulated as intangible assets within a firm and the gap between Tobin’s Q and 1 is accounted for intangible assets. However, there are few papers examining the relationship between firm value and intangibles directly, although many studies measuring the aggregate intangible assets and conducting growth accounting including intangibles are published. In this paper, we aim to examine the Hall’s argument using the listed firm level data in Japan. Following Corrado et al. (2009), we measure five types of <b>intangible</b> assets (<b>software,</b> R&D, advertising, firm-specific human resources, organizational change) and compare the conventional Tobin’s Q ratio with the revised Tobin’s Q ratio including intangibles. While the mean value of conventional Q exceeds 1, the revised Q including intangibles is almost 1 on average, as suggested by Hall. The standard deviation of the revised Q is smaller than that of the conventional Q. This implies that rate of return on capital including intangibles converges to the same rate as suggested by Görzig and Görnig (2012). When we divide all samples into two sectors: ICT sectors and non-ICT sectors, the mean value of Tobin’s Q in ICT sectors is higher than that in non-ICT sectors in both measures, which implies that firms in ICT sector...|$|R
40|$|Background: Enhancing the {{performance}} of front-line health workers serving vulnerable populations is crucial for redressing inequities. Traditional approaches have focused on introducing technical solutions, such as guidelines and incentives, to modify performance outcomes. Recognition of the complex social nature of health system function {{draws attention to the}} <b>intangible</b> <b>software</b> elements that shape performance, including the values, ideas, interests, and norms that guide human behavior and interactions. Insight into the operation of software elements can provide a base for people-focused solutions to support health workers and enable them to confront constraints in low resource settings. This study examines the social environment of the practice of front-line auxiliary nurses (AN) in rural Guatemala, {{in order to understand the}} role of health system software elements in enabling their performance and to gain insight into how organizational support can be strengthened through locally-relevant actions. Methods: A mixed methods approach provided a multi-level view of the AN practice environment, situated in the regional health system of the rural department of Alta Verapaz. Interviews with ANs and observations of practice were conducted to understand the values orienting them and how these shaped their relationships with patients and communities. A theory-driven case study of AN supervision was conducted in selected health posts to understand the values orienting supervisors in their role and examine how these shaped their relationships with ANs. The participatory method of concept mapping was used to examine the views of health workers, district and regional managers on actions to strengthen organizational support for {{the performance}} of ANs. Results: The values of nursing vocation and community connectedness were prominent in ANs’ interpretations of their work. In relationships, nursing principles oriented them to be attentive to understanding patient needs, and a shared ethnic identity and personal experience of local needs served as a base for engaging with local leaders in community work. The dominant orientation of supervisors in their role was managerial control, and it provided limited support. It contributed to standard-centered relationships with ANs focused on fulfillment of ministry criteria. Supervision oriented by a holistic understanding of ANs’ needs and the goal of improving patient care was more successful in enabling AN motivation. This relationship was characterized as people-centered, based in a shared interpretation of the value of work with patients and the responsive support provided to ANs’ problems. “Organizational climate of support across levels”, where working relationships are characterized by respectful treatment, attention to psycho-social well-being and responsiveness to needs, was identified by health-system actors as a top priority for improving performance. Conclusions: To enable performance, there needs to be a balance between attention to standards and attention to the human dimensions of health worker practice. The dominant approach to supervision did not recognize or build on AN values. Supervision and management should be oriented by a more holistic view of the ANs’ work and their needs, in order to promote a people-centered approach to working relationships. Locally relevant action to strengthen district and regional management’s support for AN performance should focus on operationalizing performance goals that go beyond standards to encompass care that responds to patient and community needs...|$|R
40|$|A major {{characteristic}} of software engineering {{compared with other}} engineering disciplines, is our inability to get the product right first time around. Change is an intrinsic and essential part of software development, and for good reasons. It is difficult to specify what is required without having some form of model to help formalise the problem. The real-world problem, which the software exists to solve, is itself subject to change. And even if we know what to produce, the design, and development of these invisible, <b>intangible,</b> and complex <b>software</b> products is still inherently difficult. At the same time, software has become a critical competitive factor for many organisations. For instance, the development of software for aeroengine controllers can be critical to whole aeroengine developments. The ability to produce software of higher quality, for less cost, in shorter timescales {{is a matter of}} survival. Organisations must continually seek to improve the processes by which software [...] ...|$|R
40|$|Our {{analysis}} {{shows that the}} two French and Japanese software production systems form a coherent whole and that {{the strengths and weaknesses}} of each system are logical extension of the societal characteristics already observed in industrial manufacturing. In Japan, the software industry tends to imitate manufacturing logics with its proper efficiency in producing standardised and material goods, but it doesn't always succeed in doing the same with regard to <b>intangible</b> goods. The <b>software</b> production needs in a sense an unorganised and more control-free invention system. In France, the software companies represent a high quality and 'artisan-type'production system. French engineers can perform a far-reached technical prowess but fail to co-operate in order to accumulate a collective and shared knowledge and finally to forge a 'neo-industrialisation'logic of service. As a result, the reconfiguration of organisational and institutional arrangements in software sector is essential, for the two countries, to readjust their production systems to a new technological environment...|$|R
40|$|Software {{size and}} {{complexity}} are major {{factors that contribute}} to the difficulty of software development. These factors, along with the <b>intangible</b> nature of <b>software,</b> make it challenging for developers to analyse the quality of their systems. Object Oriented design heuristics have been recognised as an informal, yet effective method for establishing whether or not a particular design feels right. In our research, we investigate the ability to automate the analysis of software with respect to these heuristics, in an effort to support design decisions, and reduce the cognitive overhead involved in understanding large complex systems. The implemented architecture incorporates a. NET Semantic Model that was developed in earlier research. This application captures and formalises a model based on the Microsoft Intermediate Language (MSIL). By taking advantage of this model in our research, we are able to automate and visualise heuristics for multiple programming languages and provide an environment for cross-language comparisons, withou...|$|R
40|$|Abstract: Every {{long-term}} used {{software system}} ages. Even though <b>intangible</b> goods like <b>software</b> do not degenerate {{in the proper}} sense, each software system degenerates {{in relation to the}} everlasting changes of requirements, usage scenarios and environmental conditions. Accordingly, operational software is commonly situated in a continuous evolution process in which manually conducted modifications and adaptations try to preserve or reinforce its quality. Unfortunately, such an unmanaged evolution inevitably leads to a discrepancy between the obsolete originally documented requirements and the updated software itself. For this reason, our contribution presents a coherent vision of an anti-aging cycle that preserves (non-) functional requirements as explicit runtime artefacts. The fulfilment of these requirements is validated based on conditionally triggered online test cases. In order to achieve an enhanced semantic test coverage, these test cases are adapted by monitoring, analysing and learning typical system behaviours. To explain our vision in more detail and demonstrate the benefit of a managed software evolution, ou...|$|R
40|$|There is a {{trending}} transition {{for companies}} from offering products to solutions {{in order to}} fulfill better customer needs and to reduce environmental impact by e. g. dematerialization. This solution-based development has an associated integration of intelligent devices that contributes to increasing system complexity. The ability of systems engineering processes, methods and tools to cope with these developments is a critical factor for manufacturing companies today. Still, in many cases it is hard to find adequately trained people and sufficiently integrated development tools for complex solutions, {{especially in the case of}} small and medium sized enterprises. Often, the tangible (hardware) part of the solution is primarily developed and the <b>intangible</b> parts (<b>software</b> and services) are added on top. However, key for a successful development is to adapt and integrate all parts according to the requirements set for the solution. Thus, it is essential how requirements are worked with during systems engineering and how they influence the development of the tangible and intangible parts of the solution. The objective of this paper is to study the approach of different industrial use cases for requirements engineering in system development. The aim is to identify how practices from domains like mechanical engineering, software or service engineering can be adapted for an integrated requirements engineering for complex systems, like product-service systems. Funding agencies:This work has been funded by the European Commission through the project PSYMBIOSYS: Product-Service sYMBIOtic SYStems (No. 636804) and by Mistra (The Swedish Foundation for Strategic Environmental Research) through the Mistra REES (Resource Efficient and Effective Solutions) program. The authors wish to acknowledge the funding bodies and all the project partners for their contribution. </p...|$|R
40|$|It is {{impossible}} to separate the human factors from software engineering expertise during software development, because software is developed by people and for people. The <b>intangible</b> nature of <b>software</b> has made it a difficult product to successfully create, and {{an examination of the}} many reasons for major software system failures show that the reasons for failures eventually come down to human issues. Software developers, immersed as they are in the technological aspect of the product, can quickly learn lessons from technological failures and readily come up with solutions to avoid them in the future, yet they do not learn lessons from human aspects in software engineering. Dealing with human errors is much more difficult for developers and often this aspect is overlooked in the evaluation process as developers move on to issues that they are more comfortable solving. A major reason for this oversight is that software psychology (the softer side) has not developed as extensively. Comment: 3 rd International Conference on Software Engineering, Geneva, Switzerland, March 201...|$|R
40|$|This paper {{presents}} {{a study of}} Autodesk Maya informed by software studies, and explores what thinking through software adds to debates about visual effects. The user interface of Maya is a hybrid space, the familiar spaces of objects coexisting with the more <b>intangible</b> spaces of <b>software</b> processes and procedures. The latter are visible through a range of materials: interviews carried out with animators working within different industrial sectors, as well as training and publicity materials. Critical approaches relying on photorealism and representational strategies draw digital entities into the world inhabited by humans, and discursively treat them {{as though they are}} a little like us. Exploring digital space in terms of procedures and processes allows access to digital space as digital space. It is a space that is intangible and computational, and plays a structuring part in all kinds of ways. Thinking procedurally adds another register to debates about digital entities and visual effects. Not only can we think about how we digitally construct variations on our world, but also how digital spaces coexist beside our more familiar ones and shape their possibilities...|$|R
40|$|This thesis brings {{attention}} {{to one of}} the most controversial and discussed part of the legal branch of intellectual property rights. Software piracy, which could be generally defined as infringement of rights to the computer programme, is a remarkable phenomenon which includes various different aspects and it could be judged from very different legal views. This thesis focuses on the computer programme as a special type of copyrighted work and its position within the system of Czech copyright. A great attention is put on provision concerning protection of this <b>intangible</b> asset. As <b>software</b> piracy is inseparably connected with a specific subculture called warez scene, the thesis focuses on this subculture and it is trying to reflect the activities of the scene in the view of the Czech law. Attention is also paid to the liability of internet services providers, who allow the distribution of the pirate software as well as to liability of common users who use the software not only for their personal usage but also for fulfilment of their work obligations...|$|R
40|$|URI; [URL] Journal {{of social}} science ISSN: 03873307 {{publisher}} : Institute of Social Science, University of Tokyo, JapanInternational audienceOur analysis shows that the two French and Japanese software production systems form a coherent whole and that {{the strengths and weaknesses}} of each system are logical extension of the societal characteristics already observed in industrial manufacturing. In Japan, the software industry tends to imitate manufacturing logics with its proper efficiency in producing standardised and material goods, but it doesn't always succeed in doing the same with regard to <b>intangible</b> goods. The <b>software</b> production needs in a sense an unorganised and more control-free invention system. In France, the software companies represent a high quality and ‘artisan-type' production system. French engineers can perform a far-reached technical prowess but fail to co-operate in order to accumulate a collective and shared knowledge and finally to forge a ‘neo-industrialisation' logic of service. As a result, the reconfiguration of organisational and institutional arrangements in software sector is essential, for the two countries, to readjust their production systems to a new technological environment...|$|R
