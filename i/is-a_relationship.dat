36|37|Public
5000|$|... for a {{subsumption}} relation: a hyponym (subtype, subclass) has a type-of (<b>is-a)</b> <b>relationship</b> {{with its}} hypernym (supertype, superclass); ...|$|E
5000|$|The <b>is-a</b> <b>{{relationship}}</b> {{is to be}} {{contrasted with}} the has-a (has_a or has a) relationship between types (classes); confusing the relations has-a and is-a is a common error when designing a model (e.g., a computer program) of the real-world relationship between an object and its subordinate. The <b>is-a</b> <b>relationship</b> may also be contrasted with the instance-of relationship between objects (instances) and types (classes): see [...] "type-token distinction" [...] and [...] "type-token relations." ...|$|E
50|$|Inheritance is {{contrasted with}} object composition, where one object {{contains}} another object (or objects of one class contain objects of another class); see composition over inheritance. Composition implements a has-a relationship, {{in contrast to}} the <b>is-a</b> <b>relationship</b> of subtyping.|$|E
5000|$|Retrieving any {{asserted}} or inferrable semantic {{links between}} concepts in a concept system or ontology (information science), particularly subsumption (<b>Is-a)</b> <b>relationships</b> ...|$|R
50|$|Note {{that there}} was a special {{emphasis}} on the adding of formal <b>is-a</b> <b>relationships</b> to the spectrum which seems to have been dropped.|$|R
5000|$|The {{enhanced}} {{entity-relationship model}} (EER modeling) introduces several concepts not in ER modeling, but {{are closely related}} to object-oriented design, like <b>is-a</b> <b>relationships.</b>|$|R
50|$|Subtyping {{enables a}} given type to be {{substituted}} for another type or abstraction. Subtyping is said to establish an <b>is-a</b> <b>relationship</b> between the subtype and some existing abstraction, either implicitly or explicitly, depending on language support. The relationship can be expressed explicitly via inheritance in languages that support inheritance as a subtyping mechanism.|$|E
5000|$|Graph 1 details some {{explicit}} {{relationships between}} the objects of the diagram. For example, the arrow between the agent and CAT:Elsie depicts {{an example of an}} <b>is-a</b> <b>relationship,</b> as does the arrow between the location and the MAT. The arrows between the gerund/present participle SITTING and the nouns agent and location express the diagram's basic relationship; [...] "agent is SITTING on location"; Elsie is an instance of CAT.|$|E
50|$|Inheritance {{should not}} be {{confused}} with subtyping. In some languages inheritance and subtyping agree, whereas in others they differ; in general, subtyping establishes an <b>is-a</b> <b>relationship,</b> whereas inheritance only reuses implementation and establishes a syntactic relationship, not necessarily a semantic relationship (inheritance does not ensure behavioral subtyping). To distinguish these concepts, subtyping is also known as interface inheritance, whereas inheritance as defined here is known as implementation inheritance or code inheritance. Still, inheritance is a commonly used mechanism for establishing subtype relationships.|$|E
40|$|SNOMED RT and Clinical Terms Version 3 are two large, {{controlled}} medical terminologies {{that are}} being merged {{to form a new}} work titled SNOMED Clinical Terms (SNOMED CT). One of the first steps in this process was to create maps between semantically equivalent and proximate concepts in the two terminologies. Same-as and <b>is-a</b> <b>relationships</b> were used to map the descriptions from one terminology to concepts in the other terminology. The objectives were to identify semantically equivalent concepts in the two terminologies, to find the most semantically proximate <b>is-a</b> <b>relationships</b> for non-equivalent concepts, and to evaluate the synonymy in the source terminologies. The results suggest that the rate of semantic overlap between descriptions in SNOMED RT and CTV 3 is approximately 28 %. This article discusses the methodology, issues, and findings of the description mapping process...|$|R
40|$|Abstract — Here is {{discussed}} {{how to learn}} a large scale of ontology from Japanese Wikipedia. The learned on-tology includes the following properties: rdfs:subClassOf (<b>IS-A</b> <b>relationships),</b> rdf:type (class-instance relationships), owl:Object/DatatypeProperty (Infobox triples), rdfs:domain (property domains), and skos:altLabel (synonyms). Experimen-tal case studies show us that the learned Japanese Wikipedia Ontology goes better than already existing general linguistic ontologies, such as EDR and Japanese WordNet, from the points of building costs and structure information richness. I...|$|R
40|$|AbstractObjective. To {{develop and}} test {{a method for}} {{automatically}} detecting inconsistencies between the parent–child <b>is-a</b> <b>relationships</b> in the Metathesaurus and the ancestor–descendant relationships in the Semantic Network of the Unified Medical Language System (UMLS). Methods. We exploited the fact that each Metathesaurus concept is assigned one or more semantic types from the UMLS Semantic Network and that the semantic types are arranged in a hierarchy. We compared the semantic types of each pair of parent and child concepts {{to determine if the}} types “explained” the Metathesaurus <b>is-a</b> <b>relationships.</b> We considered cases where the semantic type of the parent was neither the same as, nor an ancestor of, the semantic type of the child to be “unexplained. ” We applied this method to the January 2002 release of the UMLS and examined the unexplained cases we discovered to determine their causes. Results. We found that 17, 022 (24. 3 %) of the parent–child <b>is-a</b> <b>relationships</b> in the UMLS Metathesaurus could not be explained based on the semantic types of the concepts. Causes for these discrepancies included cases where the parent or child was missing a semantic type, cases where the semantic type of the child was too general or the semantic type of the parent was too specific, cases where the parent–child relationship was incorrect, and cases where an ancestor–descendant relationship should be added to the UMLS Semantic network. In many cases, the specific cause of the discrepancy cannot be resolved without authoritative judgment by the UMLS developers. Conclusions. Our method successfully detects inconsistencies between the hierarchies of the UMLS Metathesaurus and Semantic Network. We believe that our method should be added to the set of tools that the UMLS developers use to maintain and audit the UMLS knowledge sources...|$|R
5000|$|... class Rectangle{ public: void SetWidth(double w) { itsWidth = w; } void SetHeight(double h) { itsHeight = h; } double GetHeight (...) const { return itsHeight; } double GetWidth (...) const { return itsWidth; } private: double itsWidth; double itsHeight;};This {{works well}} {{but when it}} comes to Square class, which {{inherits}} Rectangle class, it violates LSP even though the <b>is-a</b> <b>relationship</b> holds between Rectangle and Square. Because square is rectangular. The following example overrides two functions, Setwidth and SetHeight, to fix the problem. But fixing the code implies that the design is faulty.|$|E
5000|$|It is {{a central}} tenet of {{object-oriented}} analysis and design that subtype polymorphism, which is implemented in most object oriented languages via inheritance, {{should be used to}} model object types that are subsets of each other; this is commonly referred to as the <b>is-a</b> <b>relationship.</b> In the present example, the set of circles is a subset of the set of ellipses; circles can be defined as ellipses whose major and minor axes are the same length. Thus, code written in an object oriented language that models shapes will frequently choose to make [...] a subclass of , i.e. inheriting from it.|$|E
50|$|Following the type-token distinction, {{real world}} {{objects such as}} Abraham Lincoln or the planet Mars are regrouped into classes of similar objects. Abraham Lincoln {{is said to be}} an {{instance}} of human, and Mars is an instance of planet. This is a kind of <b>is-a</b> <b>relationship.</b> Metaclasses are class of classes, such as for example the nuclide concept. In chemistry, atoms are often classified as elements and, more specifically, isotopes. The glass of water one last drank has many hydrogen atoms, each of which is an instance of hydrogen. Hydrogen itself, a class of atoms, is an instance of nuclide. Nuclide is a class of classes, hence a metaclass.|$|E
40|$|Expressive {{power and}} {{flexibility}} of the LOGIDATA+ model and language are explored. We analyze a program for travel agencies: the problem we consider {{is concerned with the}} construction of travels {{on the basis of the}} client specifications. The program queries the database and generates a report with all the available choices in terms of transfers and accomodations. The scheme and the clauses use a wide range of language functionalities, as complex objects, object identifiers, classes, relations, functions, <b>is-a</b> <b>relationships</b> and recursion...|$|R
40|$|The {{quality of}} ontologies (QoO) is {{increasingly}} becoming a research {{issue on the}} Semantic Web. Ontology users may have difficulties locating the proper concepts in large ontologies, due to low quality. To quantify these problems, we use the notion of naturalness. In this paper we evaluate several existing important ontologies (WordNet, UMLS, etc.) to get numeric measures of naturalness. We concentrate on the question to what degree concept pairs connected by <b>IS-A</b> <b>relationships</b> are natural and therefore comprehensible to users. 1...|$|R
40|$|Ontologies {{are being}} used {{nowadays}} in many areas. Within the bioinformatics area {{there are a number}} of bio-ontologies that cover different aspects in molecular biology. Many of these ontologies contain overlapping information. In applications using multiple ontologies it is therefore of interest to be able to merge these ontologies. In this paper we describe a prototype implementation of an ontology merging tool for DAML OIL ontologies. The tool generates suggestions for merging roles and concepts and for <b>is-a</b> <b>relationships</b> between concepts. We also evaluate the quality of the suggestions using well-known bio-ontologies...|$|R
50|$|Inheritance {{is similar}} to but {{distinct}} from subtyping.Subtyping enables a given type to be substituted for another type or abstraction, and is said to establish an <b>is-a</b> <b>relationship</b> between the subtype and some existing abstraction, either implicitly or explicitly, depending on language support. The relationship can be expressed explicitly via inheritance in languages that support inheritance as a subtyping mechanism. For example, the following C++ code establishes an explicit inheritance relationship between classes B and A, where B is both a subclass and a subtype of A, {{and can be used}} as an A wherever a B is specified (via a reference, a pointer or the object itself).|$|E
5000|$|Classes can {{be derived}} from one or more {{existing}} classes, thereby establishing a hierarchical relationship between the derived-from classes (base classes, parent classes or [...] ) and the derived class (child class or subclass) [...] The relationship of the derived class to the derived-from classes is commonly known as an <b>is-a</b> <b>relationship.</b> For example, a class 'Button' could be derived from a class 'Control'. Therefore, a Button is a Control. Structural and behavioral members of the parent classes are inherited by the child class. Derived classes can define additional structural members (data fields) and behavioral members (methods) in addition to those that they inherit and are therefore specializations of their superclasses. Also, derived classes can override inherited methods if the language allows.|$|E
50|$|A {{key feature}} of the policy idiom is that, usually (though it is not {{strictly}} necessary), the host class will derive from (make itself a child class of) each of its policy classes using (public) multiple inheritance. (Alternatives are for the host class to merely contain a member variable of each policy class type, or else to inherit the policy classes privately; however inheriting the policy classes publicly has the major advantage that a policy class can add new methods, inherited by the instantiated host class and accessible to its users, which the host class itself need not even know about.) A notable feature of {{this aspect of the}} policy idiom is that, relative to object-oriented programming, policies invert the relationship between base class and derived class - whereas in OOP interfaces are traditionally represented by (abstract) base classes and implementations of interfaces by derived classes, in policy-based design the derived (host) class represents the interfaces and the base (policy) classes implement them. It {{should also be noted that}} in the case of policies, the public inheritance does not represent an <b>is-a</b> <b>relationship</b> between the host and the policy classes. While this would traditionally be considered evidence of a design defect in OOP contexts, this doesn't apply in the context of the policy idiom.|$|E
40|$|SNOMED CT® is a {{comprehensive}} concept-based health care terminology that resulted from merger of SNOMED RT® and CTV 3. Concepts are semantically defined using hierarchical (<b>is-a)</b> <b>relationships</b> and attribute-value relationships (roles) with other concepts. Stated relationships are created manually by editors and then a description logic classifier is used to develop inferred relationships based on these stated relationships. Semantic definitions can be problematic when concepts contain multiple types of attributes and attribute-values. This poster describes the grouping together of roles for clearer expression of interrelated, defining characteristics of concepts...|$|R
40|$|In {{previous}} work, we have modeled {{a vocabulary}} given as a semantic network by an OODB (Object-Oriented Database). The OODB schema thus obtained provides a compact abstract {{view of the}} vocabulary. This enables fast traversal of the vocabulary by a user. In the semantic network vocabulary, the <b>IS-A</b> <b>relationships</b> express the specialization hierarchy. In our OODB modeling of the vocabulary, the SUBCLASS relationship expresses the specialization hierarchy of the classes and supports the inheritance of their properties. A typical IS-A path in the vocabulary has a corresponding shorter SUBCLASS path in the OODB schema...|$|R
40|$|We {{present a}} system that {{automatically}} recommends tags for YouTube videos solely based on their audiovisual content. We also propose a novel framework for unsupervised discovery of video categories that exploits knowledge mined from the World-Wide Web text documents/searches. First, video content to tag association is learned by training classifiers that map audiovisual content-based features from millions of videos on YouTube. com to existing uploadersupplied tags for these videos. When a new video is uploaded, the labels provided by these classifiers are used to automatically suggest tags deemed relevant to the video. Our system has learned a vocabulary of over 20, 000 tags. Secondly, we mined large volumes of Web pages and search queries to discover a set of possible text entity categories {{and a set of}} associated <b>is-A</b> <b>relationships</b> that map individual text entities to categories. Finally, we apply these <b>is-A</b> <b>relationships</b> mined from web text on the tags learned from audiovisual content of videos to automatically synthesize a reliable set of categories most relevant to videos – along with a mechanism to predict these categories for new uploads. We then present rigorous rating studies that establish that: (a) the average relevance of tags automatically recommended by our system matches the average relevance of the uploader-supplied tags at the same or better coverage and (b) the average precision@K of video categories discovered by our system is 70 % with K= 5. 1...|$|R
30|$|In Fig.  2, {{the solid}} circles {{represent}} class and subclasses while the dashed circles show external concepts. Solid-headed arrows show property relation and lighter-head arrows show an <b>is-a</b> <b>relationship</b> (subclasses). The dashed line shows {{an example of}} equivalent classes.|$|E
40|$|Inheritance, subtyping and is-a are {{different}} relationships {{all of which}} have many interpretations. Moreover, definitions of each of the relationships often involve one of the other two. An attempt has been made to distinguish some of these interpretations in order to clarify the meaning of inheritance. Identification of the <b>is-a</b> <b>relationship</b> has proved particularly difficult. Although many class-based object-oriented programming languages adopt the subtype relationship as the basis for inheritance, the F-bound relationship is found to be a better model of the evolution of type under inheritance. Future work will be directed towards establishing what effect a F-bound view of inheritance has on the <b>is-a</b> <b>relationship</b> and on the inheritance relationship in object-oriented system development as a whole...|$|E
30|$|Conceptual {{distance}} (cdist) {{refers to}} the path length between two terms; while in the original case paths between terms were defined with respect to whether a meaning was narrower or broader ([19]), later on the paths in a parent-child (<b>is-a)</b> <b>relationship</b> were considered [20] - that is why {{in the latter case}} cdist coincides with path.|$|E
40|$|This report {{addresses}} typing {{problems that}} arise when modelling simple mathematical entities in strongly typed languages such as Sather, which are eliminated by a proper distinction between mutable and immutable abstractions. We discuss {{the reasons why}} our intuition leads us astray, and provide a solution using statically type-safe specialization through constrained overloading. We also discuss the type relationships between mutable and immutable classes {{and the notion of}} freezing objects. Using Value Semantic Abstractions to Guide Strongly Typed Library DesignApril 24, 1998 2 When modelling mathematical entities- such as triangles and polygons, sets and bags, integers and complex numbers- in object oriented lan-guages, confusion often arises as {{to the nature of the}} typing relationships between these entities. Inspite of the clean <b>is-a</b> <b>relationships</b> betwee...|$|R
40|$|We {{introduced}} a novel method employing a hierarchical domain ontology structure to extract features representing documents {{in our previous}} publication (Wang 2002). All raw words in the training documents are mapped to concepts in a concept hierarchy derived from the domain ontology. Based on these concepts, a concept hierarchy is established for the training document space, using <b>is-a</b> <b>relationships</b> defined in the domain ontology. An optimum concept set may be obtained by searching the concept hierarchy with an appropriate heuristic function. This {{may be used as}} the feature space to represent the training dataset. The proposed method aims to solve some drawbacks suffered by text classification algorithms and feature selection algorithms. In this paper, we conducted a series of experiments to compare our approach with other comparable feature-selection and feature-extraction methods. The results indicated that our approach has advantages in many aspects...|$|R
40|$|Being the {{conceptual}} models that capture domain knowledge, ontologies can be looked upon for aiding meaningful information retrieval. This paper {{is an effort}} to improve the relevancy of results in a search system for a domain by exploiting the domain knowledge captured in an OWL DL Ontology. We propose a system that fits the query terms in the ontology graph in an appropriate way and exploits the surrounding knowledge to derive an enhanced query. The enhanced query is given to the underlying basic keyword search system. The results thus obtained are ranked using our ranking algorithm. To the best of our knowledge, ours is the first approach that tries to make use of more ontological knowledge than <b>IS-A</b> <b>relationships</b> and synonyms for information retrieval. As a result, we find that we can achieve substantial improvement in bot...|$|R
40|$|We {{present the}} first {{visualization}} of document content which {{takes advantage of}} the human-created structure in lexical databases. We use the WordNet hyponymy (<b>IS-A)</b> <b>relationship</b> as the structure for radial, space-filling trees which quickly reveal the concepts contained within a document of interest. Interactive techniques of zoom, filter, and details-on-demand support document analysis. The visualization can be generalized to multiple documents and other linguistic databases...|$|E
30|$|In general, {{diseases}} {{are divided into}} eight main categories: genetic disease, syndrome, medical disease, disease of metabolism, disease of cellular proliferation, disease by infectious agent, disease of anatomical entity and disease of mental health. In fact, nine general concepts of diseases were determined. All the eight main categories of disease are a subclass of the main disease class linked to its main class by <b>IS–A</b> <b>relationship.</b> Disease ontology is shown in Fig.  2.|$|E
40|$|Abstract: With the {{introduction}} of XML vast amount of XML data is manipulated in Web applications. As a result {{there is a growing}} interest in storing XML data in relational databases. There are many proposed heuristic techniques to store complex XML documents in relational databases. These techniques typically define fixed mappings and do not take application characteristics into account. Some other approaches have also been proposed to store XML data in relational databases. These approaches do not take the structural semantics into consideration. Due to this lack of consideration they fail to map XML schema into a better relational or object-relational database schema. This paper proposes a flexible algorithm to map the <b>IS-A</b> <b>relationship</b> in XML schema to object-relational database schema. This method is based on the rich properties of XML schema and object-relational database schema. The salient feature of the proposed method is that it maps the <b>IS-A</b> <b>relationship</b> by preserving the semantics of the data. Additionally it facilitates the efficient storage of valid XML data into relations of the object-relational database schema. The proposed methodology is validated by comparing it against two widely used mapping techniques: XMLSchemaStore and LegoDB...|$|E
40|$|Object-oriented {{programs}} {{often have}} a regular structure where methods are propagated to classes following the part-of and <b>is-a</b> <b>relationships</b> between classes. To abbreviate the description of programs we propose a graph-based propagation notation, called propagation patterns. In addition, we suggest a method for programming with propagation patterns. A propagation pattern consists of an interface specification of a method, {{and a set of}} classes. Together, these two elements induce a larger set of classes to which the specified interface gets propagated in the form of methods that follow the structure of the underlying class hierarchy. The induced set of classes can be tailored to the specific needs of the problem at hand and the generated methods can be overridden to customize their implementation. Category: Research. Keywords and Phrases: Object-oriented design and programming, reusable software, class dictionaries, class evolution, Law of Demeter, software engineering methods. 1 Int [...] ...|$|R
40|$|We {{present a}} novel method {{employing}} a hierarchical domain ontology structure to select features representing documents. All raw {{words in the}} training documents are mapped to concepts in a domain ontology. Based on these concepts, a concept hierarchy is established for the training document space, using <b>is-a</b> <b>relationships</b> defined in the domain ontology. An optimum concept set may be obtained by searching the concept hierarchy with an appropriate heuristic function. This {{may be used as}} the feature space to represent the training dataset. The proposed method aims to solve some drawbacks suffered by text classification algorithms and feature selection algorithms. One major difficulty for text classification algorithms, especially for machine learning approaches, is the high dimensionality of the feature space. The second major difficulty is to obtain a training dataset of good quality, which is crucial to the performances of almost all text classifiers. Experimental results show that our method solves these problems more reasonably and more effectively than existing methods. 1...|$|R
40|$|Together {{with the}} growth of the Web 2. 0, people have started more and more to communicate, share ideas and comment in blogs, social networks, forums and review sites. Within this context, new and {{suitable}} techniques must be developed for the automatic treatment of the large volume of subjective data, to appropriately summarize the arguments presented therein (e. g. as "in favor" and "against"). This article assesses the impact of exploiting higher-level semantic information such as named entities and <b>IS-A</b> <b>relationships</b> for the automatic summarization of positive and negative opinions in blog threads. We first run a sentiment analyzer (with and without topic detection) and subsequently a summarizer based on a framework drawing on Latent Semantic Analysis. Further on, we employ an annotated corpus and the standard ROUGE scorer to automatically evaluate our approach. We compare the results obtained using different system configurations and discuss the issues involved, proposing a suitable method for tackling this scenario. JRC. DG. G. 2 -Global security and crisis managemen...|$|R
