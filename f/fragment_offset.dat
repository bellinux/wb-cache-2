15|6|Public
50|$|A packet {{containing}} {{a fragment of}} an original (larger) packet consists of two parts: the unfragmentable {{part of the original}} packet (which is the same for all fragments), and a piece of the fragmentable part of the original packet, identified by a <b>Fragment</b> <b>Offset.</b> The <b>Fragment</b> <b>Offset</b> of the first ("leftmost") fragment is 0.|$|E
50|$|<b>Fragment</b> <b>Offset</b> {{specifies}} the fragment's {{position within}} the original Datagram, measured in 8-byte units.|$|E
5000|$|... 13 bits {{that contain}} the <b>fragment</b> <b>offset,</b> a field to {{identify}} position of fragment within original packet ...|$|E
5000|$|For example, for an MTU of 1,500 bytes and a header size of 20 bytes, the <b>fragment</b> <b>offsets</b> {{would be}} {{multiples}} of (1500-20)/8 = 185. These multiples are 0, 185, 370, 555, 740, ...|$|R
40|$|Checksum and CRC {{algorithms}} {{have historically}} been studied {{under the assumption that}} the data fed to the algorithms was uniformly distributed. This paper examines the behavior of checksums and CRCs over real data from various UNIX file systems. We show that, when given real data in small to modest pieces (e. g., 48 bytes), all the checksum algorithms have skewed distributions. In one dramatic case, 0. 01 % of the check values appeared nearly 15 % of the time. These results have implications for CRCs and checksums when applied to real data. They also can cause a spectacular failure rate for both the TCP and onescomplement Fletcher checksums when trying to detect certain types of packet splices. When measured over several large file-systems, the 16 bit TCP checksum performed about as well as a 10 bit CRC. We show that for fragmentation-and-reassembly error models, the checksum contribution of each fragment are, in effect, coloured by the <b>fragment's</b> <b>offset</b> in the splice. This coloring explains the performance of Fletcher's sum on non-uniform data, and shows that placing checksum fields in a packet trailer is theoretically no worse than a header checksum field. In practice, TCP trailer sums outperform even Fletcher header sums...|$|R
30|$|The second {{fragment}} is sent {{in between}} and overlaps {{with the first}} and/or the third <b>fragment.</b> Its fragmentation <b>offset</b> {{as well as its}} length varies and so does its MF flag. Every test case is first executed with the second fragment’s flag unset and then with the flag being set.|$|R
5000|$|<b>Fragment</b> <b>Offset</b> (13 bits) : Offset, in 8-octet units, {{relative}} {{to the start of}} the fragmentable part of the original packet.|$|E
5000|$|The <b>{{fragment}}</b> <b>offset</b> {{field is}} set, {{based on the}} offset of the fragment in the original data payload. This is measured in units of eight-byte blocks.|$|E
50|$|The Identification field {{along with}} the foreign and local {{internet}} address and the protocol ID, and <b>Fragment</b> <b>offset</b> field along with Don't Fragment and More Fragment flags in the IP protocol header are used for fragmentation and reassembly of IP datagrams.|$|E
40|$|Abstract: We report {{four new}} Ar/Ar dates and 18 new geochemical {{analyses}} of Pleistocene basalts from the Karasu Valley of southern Turkey. These rocks have become offset left-laterally by slip on the N 208 E-striking Amanos Fault. The geochemical analyses help to correlate {{some of the}} less-obvious <b>offset</b> <b>fragments</b> of basalt flows, and thus to measure amounts of slip; the dates enable slip rates to be calculated. On the basis of four individual slip-rate determinations, obtained in thismanner, we estimate aweightedmean slip rate for this fault of 2. 89 + 0. 05 mm/a (+ 2 s). We have also obtained a slip rate of 2. 68 + 0. 54 mm/a (+ 2 s) for the subparallel East Hatay Fault farther east. Summing these values gives 5. 57 + 0. 54 mm/a (+ 2 s) as the overall left-lateral slip rate across the Dead Sea fault zone (DSFZ) in the Karasu Valley. These slip-rate estimates and other evidence from farther south on the DSFZ are consistent with a preferred Euler vector for the relative rotation of the Arabian and African plates of 0. 434 + 0. 0128 Ma 21 about 31. 18 N...|$|R
40|$|In recent years, {{there have}} been major {{advances}} {{in our understanding of}} the Emeishan large igneous province (LIP) of SW China following publication of a number of LIP-focused investigations of the terrain and associated rocks. This paper reviews the current state of knowledge. The volcanic and upper-intrusive portion of the province is relatively small (∼ 0. 3 × 10 6 km 3), even when <b>offset</b> <b>fragments,</b> eroded sections and buried portions are included in the volume calculation. The most reliable radiometric age dates (zircon U-Pb SHRIMP from an associated layered intrusive body several kilometers in area) indicate generation at ∼ 259 Ma, consistent with the end-Guadalupian (end Middle Permian) stratigraphic age. In addition, several Ar-Ar dating studies have been carried out, mainly on the volcanic rocks, with a number of reported dates ∼ 253 - 251 Ma (Late Permian), but a consensus is emerging that these ages are problematic because they are in conflict with the stratigraphic data (possibly due to a monitor standard miscalibration). The Ar-Ar investigations have also yielded a large number of secondary ages, which are clustered at ∼ 175, ∼ 142, ∼ 98 and ∼ 42 Ma, and these are inferred to record sub-regional tectonic events that affected the western Yangtze Block as East Asia was assembled and later deformed by India's collision-indentation into Asia. Magnetostratigraphic data and field observations suggest that the bulk of the volcanic sequence formed within 1 - 2 my. The geochemistry of the volcanic rocks and bio-lithostratigraphic studies of the underlying Maokou Formation suggests a mantle plume generated the province. The basalts can be classified into low and high Ti groups with different parental magmas. The low Ti basalts are confined to {{the western part of the}} province and are overlain by the high Ti basalts. The low Ti magmas formed at shallow mantle depths in the spinel-garnet field transition zone (60 - 80 km), whereas the high Ti magmas formed by low degrees of partial melting within the deeper garnet stability field. This observation suggests a deepening of the melting column as the lithosphere thickened due to under-plating and a transition from peak basalt generation to the waning stage. Outstanding issues, which might focus future studies, are also outlined. © 2004 Elsevier B. V. All rights reserved. link_to_subscribed_fulltex...|$|R
40|$|Normal fault {{systems are}} basic {{features}} in commercially important geological structures like e. g. sedimentary basins. While {{the interpretation of}} seismic data sets reveals {{the structure of the}} strata and its offset by larger faults, the properties of the fault planes itself remain undetermined. The information on e. g. permeability of laterally confined fault systems is derived from outcrops or theoretical models. The scope of the faulting research focuses on softer unconsolidated materials as they occur in sedimentary domains. Harder cohesive rock sequences were so far largely neglected. The Koa´e fault zone on Big Island/Hawai'i is characterized to act as an example for a normal fault system in cohesive materials. The Koa'e system is located in a sequence of subaerial emplaced basalt flows. The main features of the fault zone are subvertical scarps up to 25 m height, as well as large opening magnitudes beyond 5 m width, showing the discrepancy to the soft sedimentary systems. The governing properties of the basalt are the high strength in combination with a dense pattern of potential weakness planes like cooling joints or delamination planes. The material is therefore less strong than laboratory measurements suggest. Initial deformation of the rigid material is evident by a rotation and shifting of the predefined fragments. The system is able to compensate some deformation by the displacement of the <b>fragments</b> until the <b>offset</b> exceeds the <b>fragment</b> size or until the stresses are high enough to crush the fragments. The deformation is spread and not localized until this stage. The Koa'e fault system shows open fissures and faults documenting an initial mode-I movement preceding a further mode-II or III movement. The variety of observed cross-sectional morphologies of the fault system are reproducible by a scaled analogue model using gypsum powder. Documented by digital cameras time-lapse movies and their quantitative analysis by a PIV software are derived. Gypsum powder shows as fine-grained cohesive material similar properties as the basaltic rock. The powder forms irregular indenting clusters. These react in a shallow regime by the same rotation and shifting until prolonged deformation breaks down the clusters into smaller fragments. Localization sets in and the relative strength of the fault zone is reduced. The material properties of the powder were measured at DelftChemTech, the Pharmazeutisches Insitut Würzburg and at the Endogene Dynamik Aachen. A tensile strength of 33 Pa together the measurements of the shear experiments document a curved yield locus for the gypsum powder in the Mohr space. The curvature of the Mohr circles and the yield locus of the powder are similar in the shallow regime. Since the two touch each other at multiple points the system obtains a high sensitivity, governed by local heterogeneities and not by the local stress field. This results in a non-linear system with different fault locations and dip angles. The corresponding surface morphologies are similar but show a variety. The ramp and scarp type end members are observed in the field as well. Since the first deformation structures at the surface govern the development of the morphology, the system has a low reproducibility. The morphologies in the Koa'e zone may therefore be a result of the freedoms in the system and not a result of different initial boundary conditions. The material characterization of the powder reveales the importance of the yield envelope shape to the evolving structures. This applies not only for the Koa'e fault zone model but also to analogue modelling in general. The standard material sand lacks a tensile strength and true cohesion since it is not able to support vertical structures. Interpolated shear strengths of sand indicate a cohesion if using a linear Mohr-Coulomb relationship. This way of material handling is only justified by the fact, that the material properties of the rock material are described in the same manner. In deeper regimes the linear part of the yield envelope may be similar, but the material behaviour in shallow regimes deviate. Vertical rock walls as seen in the Koa'e fault zone or in any cliff document the tensile strength and cohesion of rock material and indicate that sand is not an adequate model material for strong rocks. Powder however is capable to mimic these conditions if the material characterization is done properly. With a tensile strength of 33 Pa, a cohesion of 62 Pa and a linear yield locus in deeper parts, the gypsum powder represents a material that has obvious advantages in respect to sand. Deformation structures like open fissures, progressive fragmentation, block rotation and thin nondilatant deformation zones display the large potential of this material...|$|R
5000|$|In IPv4, the AH {{protects the}} IP payload and all header fields of an IP {{datagram}} except for mutable fields (i.e. those {{that might be}} altered in transit), and also IP options such as the IP Security Option (RFC 1108). Mutable (and therefore unauthenticated) IPv4 header fields are DSCP/ToS, ECN, Flags, <b>Fragment</b> <b>Offset,</b> TTL and Header Checksum.|$|E
5000|$|Accordingly, every {{fragment}} {{except the}} last must contain {{a multiple of}} 8 bytes of data. It is obvious that <b>Fragment</b> <b>Offset</b> can hold 8192 (2^13) units but the datagram can't have 8192 * 8 = 65536 bytes of data because [...] "Total Length" [...] field of IP header records the total size including the header and data. An IP header is at least 20 bytes long, so the maximum value for [...] "Fragment Offset" [...] is restricted to 8189, which leaves room for 3 bytes in the last fragment.|$|E
5000|$|The {{receiver}} identifies matching fragments {{using the}} foreign and local internet address, the protocol ID, and the identification field. The receiver will reassemble {{the data from}} fragments with the same ID using both the <b>fragment</b> <b>offset</b> and the more fragments flag. When the receiver receives the last fragment (which has the [...] "more fragments" [...] flag set to 0), it can calculate {{the length of the}} original data payload, by multiplying the last fragment's offset by eight, and adding the last fragment's data size. In the example above, this calculation was 495*8 + 540 = 4500 bytes.|$|E
50|$|Part of the TCP/IP suite is the Internet Protocol (IP) which resides at the Internet Layer of this model. IP is {{responsible}} for the transmission of packets between network end points. IP includes some features which provide basic measures of fault-tolerance (time to live, checksum), traffic prioritization (type of service) and support for the fragmentation of larger packets into multiple smaller packets (ID field, <b>fragment</b> <b>offset).</b> The support for fragmentation of larger packets provides a protocol allowing routers to fragment a packet into smaller packets when the original packet is too large for the supporting datalink frames. IP fragmentation exploits (attacks) use the fragmentation protocol within IP as an attack vector.|$|E
50|$|The first {{approach}} is to XOR each node forming an edge in the path with each other. Node a inserts its IP address into the packet and sends it to b. Upon being detected at b (by detecting a 0 in the distance), b XORs its address with the address of a. This new data entity is called an edge id and reduces the required state for edge sampling by half.Their next {{approach is}} to further take this edge id and fragment it into k smaller fragments. Then, randomly select a fragment and encode it, along with the <b>fragment</b> <b>offset</b> so that the correct corresponding fragment is selected from a downstream router for processing.When enough packets are received, the victim can reconstruct all of the edges the series of packets traversed (even {{in the presence of}} multiple attackers).|$|E
50|$|When {{fragmentation}} is performed, each IP fragment {{needs to}} carry information about {{which part of}} the original IP packet it contains. This information is kept in the <b>Fragment</b> <b>Offset</b> field, in the IP header. The field is 13 bits long, and contains the offset of the data in the current IP fragment, in the original IP packet. The offset is given in units of 8 bytes. This allows a maximum offset of 65,528 ((213-1)*8). Then when adding 20 bytes of IP header, the maximum will be 65,548 bytes, which exceeds the maximum frame size. This means that an IP fragment with the maximum offset should have data no larger than 7 bytes, or else it would exceed the limit of the maximum packet length. A malicious user can send an IP fragment with the maximum offset and with much more data than 8 bytes (as large as the physical layer allows it to be).|$|E
40|$|Four cross-modal priming {{experiments}} in Spanish addressed {{the role of}} suprasegmental and segmental information in the activation of spoken words. Listeners heard neutral sentences ending with word fragments (e. g., princi-) and made lexical decisions on letter strings presented at <b>fragment</b> <b>offset.</b> Responses were compared for fragment primes that fully matched the spoken form of the initial portion of target words, versus primes that mismatched in a single element (stress pattern; one vowel; one consonant), versus control primes. Fully matching primes always facilitated lexical decision responses, {{in comparison to the}} control condition, while mismatching primes always produced inhibition. The respective strength of the contribution of stress, vowel, and consonant (one feature mismatch or more) information did not differ statistically. The results support a model of spoken-word recognition involving automatic activation of word forms and competition between activated words, in which the activation process is sensitive to all acoustic information relevant to the language’s phonology...|$|E
40|$|Since adversaries may spoof {{their source}} IPs in the attacks, traceback schemes have been {{proposed}} to identify the attack source. However, some of these schemes’ storage requirements increase with packet numbers. Some even have false positives because they use an IP header’s <b>fragment</b> <b>offset</b> for marking. Thus, we propose a 16 -bit single packet hybrid IP traceback scheme that combines packet marking and packet logging with high accuracy and low storage requirement. The size of our log tables can be bounded by route numbers. We also set a threshold to determine whether an upstream interface number is stored in a log table or in a marking field, so as to balance the logging frequency and our computational loads. Because we store user interface information on small-degree routers, compared with current single packet traceback schemes, ours can have the lowest storage requirements. Besides, our traceback achieves zero false positive/negative rates and guarantees reassembly of fragmented packets at the destination...|$|E
30|$|According to {{classification}} by {{the basic}} principle, {{most of the}} existing traceback methods are categorized into logging and marking groups. In logging methods, the routers keep some specific information of traveling packets [3]. For example, Snoeren et al. [4] have suggested generating a fingerprint of the packet, based upon the invariant portions of the packet (source, destination, etc.) and the first 8 bytes of the payload. During the traceback, the routers can verify if a suspicious packet has been forwarded or not. Further improvement in terms of logging {{only a small portion}} of each traveling packet at the transient routers have been proposed in [5]. One of the major problems of the logging method is the requirement for high amount of memory and CPU usage on the routers in the attack paths [6]. In marking methods, some or all routers in an attack path send specific information along with traveling packets. The destination may use this information to trace the attacker even if the source IP has been spoofed. This information could be either embedded in the packet’s IP header or sent by generating new packets and consume extra bandwidth [7 – 10]. In particular, Savage et al. [11] have described a technique for tracing anonymous packet flooding attacks on the Internet towards their source. This traceback can be performed after an attack is identified. While each marked packet represents only a sample of the path it has traversed, by combining a modest number of such packets, a victim can reconstruct the entire attack path. Dean et al. [12] have presented a scheme for providing traceback data by having routers embedding specific information into packets randomly. This is similar to the technique used by Savage et al. [11], with the major difference being that it is based on algebraic techniques. On the other hand, Song et al. [13] present two new IP marking techniques to solve the IP traceback problem: the advanced marking scheme and the authenticated marking scheme. The authenticated marking scheme supports authentication of routers’ markings. This prevents a compromised router from forging other uncompromised routers’ markings. Doeppner et al. [14] identified the source of Denial of Service attacks, provided that a significant percentage of packets are sent from one subnet. In this method, each router marks its own IP address to the traveling packet with a determinable probability. Moreover, Tseng et al. [15] have proposed a modification to PPM [11] to ensure that the probability of receiving the mark is equal to the original marking probability. Yaar et al. [16] have proposed a method of encoding path identification by marking packets with path fingerprints. They have also another research [17] based on the PPM [11] with further improvements such as 1 -bit distance. Victims can identify attack paths after receiving tens of packets encoding. It detects the distance of the attacker by changing the time to live (TTL) field and storing 1 bit in the IP header. Goodrich et al. [18] have proposed to use relatively large randomized messages to encode router information. The main idea is to have each router fragment its message into several words and include a large checksum cord on the entire message randomly in the reusable bits of such a word fragment. Instead of the recovery of the full paths, Belenky et al. [19] and [20], proposed to only record the IP addresses of ingress edge routers. Their scheme, DPM, is simple and easy to implement, and has a little overhead on routers and the victim. This scheme has low processing and memory overhead at the victim machines and edge routers. Additionally, DFM provides an optional authentication so that a compromised router cannot forge markings of other uncompromised routers. Yang et al. [21] take advantage of both marking and logging methods and combines both approaches at routers in an attack path. Most marking methods use 16 bits of identification field such as in [11, 13, 15 – 17]. However, some other works propose to use 17 bits (identification field and reserved flag) [20, 22], 25 bits (identification and type of service (TOS) fields plus reserved flag) [12, 18, 23], or 32 bits (identification field, flag, and <b>fragment</b> <b>offset)</b> [9, 21].|$|E

