183|691|Public
25|$|Chrome OS also {{includes}} an integrated file manager, resembling those found on other operating systems, {{with the ability}} to display directories and the files they contain from both Google Drive and local storage, as well as to preview and manage <b>file</b> <b>contents</b> using a variety of Web applications, including Google Docs and Box. Since January 2015, Chrome OS can also integrate additional storage sources into the file manager, relying on installed extensions that use the File System Provider API.|$|E
2500|$|Many kernels provide {{implementation}} of [...] "capabilities", i.e. {{objects that are}} provided to user code which allow limited access to an underlying object managed by the kernel. [...] A common example occurs in file handling: a file is a representation of information stored on a permanent storage device. [...] The kernel {{may be able to}} perform many different operations (e.g. read, write, delete or execute the <b>file</b> <b>contents)</b> but a user level application may only be permitted to perform some of these operations (e.g. it may only be allowed to read the file). [...] A common {{implementation of}} this is for the kernel to provide an object to the application (typically called a [...] "file handle") which the application may then invoke operations on, the validity of which the kernel checks at the time the operation is requested. Such a system may be extended to cover all objects that the kernel manages, and indeed to objects provided by other user applications.|$|E
2500|$|The {{search engine}} uses {{indexing}} {{to allow for}} a quick display of results for a given search. Advanced options allow the user to choose the file type, how it should be indexed, the properties only, or the properties and the <b>file</b> <b>contents.</b> The Start menu search also doubles as the Run command from previous versions of Windows; simply typing any command will execute it. The indexed search platform is based on Microsoft's Windows Desktop Search 3.0 (Windows Search version 4.0 in Vista SP2), allowing third-party applications (e.g. Microsoft Outlook 2007) to use the indexing platform to store metadata and perform searches on Windows Vista or Windows XP (with the Windows Desktop Search redistributable installed). This is in contrast to the search engine of Windows XP, which takes some time to display results, and only after the user has finished typing the search string. The Windows Vista search allows users to add multiple filters to continually refine search results (Such as [...] "File contains the word 'example'"). It is also possible to search across RSS and Atom feeds, straight from Windows Explorer. Windows search uses IFilters that are used by Windows Desktop Search as well. The IFilter interface can be implemented by software makers so that files created by their applications can be better integrated with search and indexing programs.|$|E
5000|$|... receiving, on a {{processing}} system, <b>file</b> <b>content</b> identifiers {{for data}} files from {{a plurality of}} <b>file</b> <b>content</b> identifier generator agents, each agent provided on a source system and creating <b>file</b> <b>content</b> IDs using a mathematical algorithm, via a network; ...|$|R
50|$|Perforce Helix, {{like most}} version control systems, does not encrypt <b>file</b> <b>content</b> {{in the master}} {{repository}} or on user machines.Perforce versions prior to 2012.1 cannot encrypt <b>file</b> <b>content</b> sent over the network. A tunneling protocol (like VPN or SSH) must be used to secure network transfers with those versions.|$|R
50|$|Integrated FFmpeg {{support for}} {{displaying}} video <b>file</b> <b>content</b> in 3D applications.|$|R
5000|$|<b>File</b> <b>contents</b> search, text, word, powerpoint, ear, war, zip files ...|$|E
5000|$|Pygments - Needed for syntax {{highlighting}} in versioned <b>file</b> <b>contents</b> displays.|$|E
5000|$|... #Subtitle level 3: What defines {{accounting}} {{boundaries and}} accounting <b>file</b> <b>contents?</b> ...|$|E
50|$|ERASE {{causes the}} <b>file's</b> <b>contents</b> to be {{overwritten}} {{when it is}} deleted.|$|R
50|$|Pointers to {{the disk}} blocks that store the <b>file's</b> <b>contents</b> (see inode pointer structure).|$|R
50|$|A handle is an {{abstract}} reference, {{and may be}} represented in various ways. A common example are file handles (the FILE data structure in the C standard I/O library), used to abstract <b>file</b> <b>content.</b> It usually represents both the file itself, as when requesting a lock on the file, and a specific position within the <b>file's</b> <b>content,</b> as when reading a file.|$|R
5000|$|<b>File</b> <b>Contents</b> â€” The {{original}} {{files that}} {{are included in}} the archive ...|$|E
5000|$|Open a file, {{which makes}} the <b>file</b> <b>contents</b> {{available}} to the program ...|$|E
5000|$|Modification of <b>file</b> <b>contents</b> is not {{supported}} (the file {{needs to be}} re-transferred completely) ...|$|E
5000|$|Detection of <b>file</b> <b>content</b> changes using MD5 signatures; optional, {{configurable}} abiltity to use traditional timestamps.|$|R
30|$|Content streams. They {{provide a}} means for {{efficient}} storage of {{various parts of the}} <b>file</b> <b>content.</b>|$|R
50|$|The Perforce Helix {{database}} is proprietary, preconfigured, and self-installed. It stores system-related metadata (file state, file attributes, branching and merging history, changelists, change descriptions, users, groups, labels, etc.). Files {{are identified}} by namespace (i.e., by OS-neutral filenames). <b>File</b> <b>content</b> {{itself is not}} stored in the database. MD5 hashes of <b>file</b> <b>content</b> are stored in the database, however, {{and can be used}} to verify repository file integrity.|$|R
5000|$|... cstocs - convert <b>file</b> <b>contents</b> {{from one}} {{encoding}} to {{another for the}} Czech and Slovak languages.|$|E
5000|$|The need {{to support}} append {{operations}} and allow <b>file</b> <b>contents</b> to be visible even while a file is being written ...|$|E
50|$|Shumway renders Flash {{contents}} by translating Flash <b>file</b> <b>contents</b> to HTML5 elements, {{and running}} an ActionScript interpreter in JavaScript. It supports both AVM1 and AVM2, and ActionScript versions 1, 2, and 3.|$|E
50|$|Data shared via {{peer-to-peer}} {{file sharing}} contains shared <b>file</b> <b>content,</b> computing cycles and disk storage, among other resources.|$|R
5000|$|No source <b>file</b> <b>content</b> {{is stored}} in the block cache, only blocks that consist of {{probably}} random data.|$|R
5000|$|This one parses {{the actual}} file and generates an in-memory-representation of the <b>file</b> <b>content</b> (similar to a [...]xml DOM tree.) ...|$|R
5000|$|The data URI scheme can use Base64 to {{represent}} <b>file</b> <b>contents.</b> For instance, background images and fonts {{can be specified}} in a CSS stylesheet file as [...] URIs, instead of being supplied in separate files.|$|E
50|$|MexScript is a multi-paradigm {{computer}} {{scripting language}} {{used in a}} number of game resource archive file handlers. It was originally created for the 16-bit command-line tool multiex, and later 32-bit versions of MultiEx Commander. It is a script that enables the end user to have the interpreting program perform a number of tasks needed to access <b>file</b> <b>contents,</b> as well as to replace <b>file</b> <b>contents.</b> The MexScript has since become one of the standards to process game archives, as is indicated by the implementation of the script (also referred to as multiex, MexCom3, BMS) in similar programs, such as Dragon UNpack, Game Extractor, FusePAK, and the more recent dialect QuickBMS.|$|E
50|$|DBlocks store actual <b>file</b> <b>contents</b> {{and nothing}} else. File is split at 1024 byte {{boundaries}} and resulting chunks {{are stored in}} DBlocks. DBlocks are linked together into Merkle tree by means of IBlocks that store DBlock identifiers.|$|E
2500|$|... "Mixed content" [...] is {{the result}} of <b>file</b> <b>content</b> types falling into more than one of the Pictures, Music files or Video <b>files</b> <b>content</b> types. Note that a CD {{containing}} audio tracks is always considered to be a [...] "Music CD" [...] by Windows, regardless of the presence of data tracks. Therefore, a CD with Picture files, Video files and audio tracks is a [...] "Music CD"; it is not [...] "Mixed content".|$|R
40|$|We {{demonstrate}} a prototype study that HDF 4 <b>file</b> <b>content</b> map {{can be used}} for efficiently organizing data in cloud object storage system to facilitate cloud computing. This approach can be extended to any binary data formats and to any existing big data analytics solution powered by cloud computing because HDF 4 <b>file</b> <b>content</b> map project started as long term preservation of NASA data that doesn't require HDF 4 APIs to access data...|$|R
5000|$|... "Mixed content" [...] is {{the result}} of <b>file</b> <b>content</b> types falling into more than one of the Pictures, Music files or Video <b>files</b> <b>content</b> types. Note that a CD {{containing}} audio tracks is always considered to be a [...] "Music CD" [...] by Windows, regardless of the presence of data tracks. Therefore, a CD with Picture files, Video files and audio tracks is a [...] "Music CD"; it is not [...] "Mixed content".|$|R
5000|$|... (Additional info to table: Supports sym-links, many filter options, {{can detect}} changes to file/folder attributes, permissions and ownerships, can {{preserve}} those meta {{data in the}} destination, option to deep scan <b>file</b> <b>contents,</b> 'real-time sync' to watch a folder and sync automatically) ...|$|E
5000|$|A new {{temporary}} file ("file.new") is created, which initially contains the new contents. Then the new file is renamed {{over the old}} one. Replacing files by the [...] "rename" [...] call is guaranteed to be atomic by POSIX standards - i.e. either the old file remains, or it's overwritten with the new one. Because the ext3 default [...] "ordered" [...] journaling mode guarantees file data is written out on disk before metadata, this technique guarantees that either the old or the new <b>file</b> <b>contents</b> will persist on disk. ext4's delayed allocation breaks this expectation, because the file write can be delayed for a long time, and the rename is usually carried out before new <b>file</b> <b>contents</b> reach the disk.|$|E
50|$|FreeUndelete takes {{advantage}} of the fact that file deletion is just a minor state change in the system file index. It finds the area(s) where the <b>file</b> <b>contents</b> are located on the disk, then re-creates the index entry to undelete the file.|$|E
30|$|Symbol {{table file}} {{recovery}} (STFR): using the kallsyms location symbol values obtained from KLSR, the symbol table <b>file</b> <b>content</b> and kernel symbol {{information can be}} recovered.|$|R
5000|$|POSIX also {{provides}} the [...] API for mapping files into memory; a mapping can be shared, allowing the <b>file's</b> <b>contents</b> {{to be used}} as shared memory.|$|R
50|$|Internally, {{files were}} first identified, using a GTJFN (Get Job File Number) JSYS, {{and then that}} JFN number was used to open (OPENF)and {{manipulate}} the <b>file's</b> <b>contents.</b>|$|R
