414|400|Public
2500|$|The {{presumption}} of innocence, if present, effectively removes {{the possibility that}} the accused may be both guilty and unproven, from consideration in judgment, and as such the accused is considered as innocent unless proven guilty. (See <b>decision</b> <b>table</b> below) ...|$|E
5000|$|SDT is a <b>decision</b> <b>table.</b> A <b>decision</b> <b>table</b> {{is defined}} as a [...] "tabular method of showing the {{relationship}} between a series of conditions and the resultant actions to be executed". Following the de facto international standard (CSA, 1970), a <b>decision</b> <b>table</b> contains three building blocks: the conditions, the actions (or decisions), and the rules.|$|E
50|$|A <b>decision</b> <b>table</b> {{separates}} the data (that is the condition entries and decision/action entries) from the decision templates (that are the condition stubs, decision/action stubs, and {{the relations between}} them). Or rather, a <b>decision</b> <b>table</b> can be a tabular result of its meta-rules.|$|E
40|$|In {{this paper}} the {{representation}} of <b>decision</b> <b>tables</b> in a relational database environment is discussed. First, crisp <b>decision</b> <b>tables</b> are defined. Afterwards a technique to represent <b>decision</b> <b>tables</b> in a relational system is presented. Next, fuzzy extensions are made to crisp <b>decision</b> <b>tables</b> {{in order to deal}} with imprecision and uncertainty. As a result, with crisp <b>decision</b> <b>tables</b> as special cases fuzzy <b>decision</b> <b>tables</b> are defined which include fuzziness in the conditions as well as in the actions. Analogous to the crisp case, it is demonstrated how fuzzy <b>decision</b> <b>tables</b> can be stored in a fuzzy relational database environment. Furthermore, consultation of these tables is discussed using fuzzy queries. Decision making;...|$|R
40|$|We study {{problems}} of optimization of decision and inhibitory trees for <b>decision</b> <b>tables</b> with many-valued <b>decisions.</b> As cost functions, we consider depth, average depth, number of nodes, {{and number of}} terminal/nonterminal nodes in trees. <b>Decision</b> <b>tables</b> with many-valued <b>decisions</b> (multi-label <b>decision</b> <b>tables)</b> are often more accurate models for real-life data sets than usual <b>decision</b> <b>tables</b> with single-valued <b>decisions.</b> Inhibitory trees can sometimes capture more information from <b>decision</b> <b>tables</b> than <b>decision</b> trees. In this paper, we create dynamic programming algorithms for multi-stage optimization of trees relative to a sequence of cost functions. We apply these algorithms to prove the existence of totally optimal (simultaneously optimal relative {{to a number of}} cost functions) decision and inhibitory trees for some modified <b>decision</b> <b>tables</b> from the UCI Machine Learning Repository...|$|R
40|$|Building and {{maintaining}} high quality knowledge based systems {{is not a}} trivial task. <b>Decision</b> <b>tables</b> have sometimes been recommended in this process, mainly in verification and validation. In this paper, however, it is shown how <b>decision</b> <b>tables</b> {{can also be used}} to generate, and not just to validate, knowledge bases and how the transformation process from <b>decision</b> <b>tables</b> to knowledge bases can be organized. Several options to generate rules or other knowledge representations from <b>decision</b> <b>tables</b> are described and evaluated. status: publishe...|$|R
5000|$|DTRules: a <b>decision</b> <b>table</b> based, open-sourced {{rule engine}} for Java.|$|E
5000|$|DTRules: a <b>Decision</b> <b>Table</b> based, open-sourced {{rule engine}} for Java.|$|E
50|$|A cause-effect graph {{is useful}} for {{generating}} a reduced <b>decision</b> <b>table.</b>|$|E
40|$|In {{this paper}} it is {{explained}} how {{the techniques of}} fuzzy <b>decision</b> <b>tables</b> can used for business site selection. It is outlined how this technique fits in the spectrum of techniques which can be adopted for business site selection. Furthermore, it is described how <b>decision</b> <b>tables</b> can be modelled based on functional equivalence. The <b>decision</b> <b>tables</b> are modelled with a tool called Prologa. This tool supports the interactive construction, optimization and consultation of knowledge structuring formalisms such as <b>decision</b> <b>tables,</b> <b>decision</b> rules and decision trees. 1...|$|R
50|$|<b>Decision</b> <b>tables,</b> {{especially}} when {{coupled with the}} use of a domain-specific language, allow developers and policy experts to work from the same information, the <b>decision</b> <b>tables</b> themselves.|$|R
40|$|On most {{datasets}} induction algorithms {{can generate}} very accurate classifiers. Sometimes, however, these classifiers are {{very hard to}} understand for humans. Therefore, in this paper it is investigated how we can present the extracted knowledge to the user by means of <b>decision</b> <b>tables.</b> <b>Decision</b> <b>tables</b> are very easy to understand. Furthermore, <b>decision</b> <b>tables</b> provide interesting facilities to check the extracted knowledge on consistency and completeness. In this paper, it is demonstrated how a consistent and complete DT can be modelled starting from raw data. Because the modelled <b>decision</b> <b>tables</b> are sufficiently small they allow easy consultation of the represented knowledge. status: publishe...|$|R
50|$|The {{following}} is a balanced <b>decision</b> <b>table</b> (created by Systems Made Simple).|$|E
5000|$|In DRSA, {{data are}} often {{presented}} using a {{particular form of}} <b>decision</b> <b>table.</b> Formally, a DRSA <b>decision</b> <b>table</b> is a 4-tuple , where [...] is a finite set of objects, [...] is a finite set of criteria, [...] where [...] is {{the domain of the}} criterion [...] and [...] is an information function such that [...] for every [...] The set [...] is divided into condition criteria (set [...] ) and the decision criterion (class) [...] Notice, that [...] is an evaluation of object [...] on criterion , while [...] is the class assignment (decision value) of the object. An example of <b>decision</b> <b>table</b> is shown in Table 1 below.|$|E
5000|$|Note [...] "treat separately" [...] {{means to}} use the <b>decision</b> <b>table</b> on each {{component}} ...|$|E
40|$|The {{evaluation}} of tutorial strategies, interface designs, and courseware content {{is an area}} of active research in the medical education community. Many of the evaluation techniques that have been developed (e. g., program instrumentation), commonly produce data that are difficult to decipher or to interpret effectively. We have explored the use of <b>decision</b> <b>tables</b> to automatically simplify and categorize data for the composition of user models [...] descriptions of student's learning styles and preferences. An approach to user modeling that is based on <b>decision</b> <b>tables</b> has numerous advantages compared with traditional manual techniques or methods that rely on rule-based expert systems or neural networks. <b>Decision</b> <b>tables</b> provide a mechanism whereby overwhelming quantities of data can be condensed into an easily interpreted and manipulated form. Compared with conventional rule-based expert systems, <b>decision</b> <b>tables</b> are more amenable to modification. Unlike classification systems based on neural networks, the entries in <b>decision</b> <b>tables</b> are readily available for inspection and manipulation. <b>Decision</b> <b>tables,</b> descriptions of observations of behavior, also provide automatic checks for ambiguity in the tracking data...|$|R
40|$|This {{research}} examines which {{method is}} better for programming rule-based expert systems: IF-THEN rules or <b>decision</b> <b>tables.</b> Thirty undergraduate MIS students served as experimental subjects in an eight week study. After four weeks, subjects wrote <b>decision</b> <b>tables</b> coveting cases significantly more consistently than IF-THEN rules (p<. 01). After eight weeks, however, subjects wrote IF-THEN rules that were significantly more complete (p<. 05) and significantly more correct (p<. 01). The eighth week test also revealed that subjects preferred <b>decision</b> <b>tables</b> to IF-THEN rules (p<. 05), perceiving them to be easier (p<. 01). It is interesting {{that in spite of}} a significant preference for <b>decision</b> <b>tables,</b> subjects wrote significantly more accurate IF-THEN rules...|$|R
40|$|This article {{discusses}} {{an alternative}} approach in analyzing and modelling consumer <b>decision</b> processes: <b>decision</b> <b>tables.</b> <b>Decision</b> <b>tables</b> represent means of formalizing choice rules or heuristics. The focus of this approach thus is not on quantitative, probabilistic relationships between a set of explanatory variables and choice probabilities but {{on a set of}} conditions and states that lead to particular actions. <b>Decision</b> <b>tables</b> have therefore been primarily used in the context of rule-based simulation models of consumer choice behaviour...|$|R
5000|$|Factors {{for which}} overlap is {{described}} {{are often not}} shown separately in a <b>decision</b> <b>table.</b>|$|E
5000|$|Comments {{positioned}} above each column (or even embedded textual documentation) can {{render a}} <b>decision</b> <b>table</b> 'human readable' even after 'condensing down' (encoding) to its essentials (and still broadly in-line {{with the original}} program specification - especially if a printed <b>decision</b> <b>table,</b> enumerating each unique action, is created before coding begins).The table entries can also optionally contain counters to collect run-time statistics for 'in-flight' or later optimization ...|$|E
50|$|The certain, {{possible}} and approximate rules represent certain, {{possible and}} ambiguous knowledge {{extracted from the}} <b>decision</b> <b>table.</b>|$|E
5000|$|Semantic <b>decision</b> <b>tables</b> (SDT) use modern {{ontology}} engineering (OE) technologies to enhance traditional <b>decision</b> <b>tables.</b> The term [...] "semantic decision table" [...] was coined by Yan Tang and Prof. Robert Meersman from VUB STARLab (Free University of Brussels) in 2006. An SDT is a (set of) <b>decision</b> <b>table(s)</b> properly annotated with an ontology. It {{provides a means}} to capture and examine decision makers’ concepts, {{as well as a}} tool for refining their decision knowledge and facilitating knowledge sharing in a scalable manner.|$|R
40|$|<b>Decision</b> <b>tables</b> {{have been}} used {{traditionally}} in the solution of problems involving decision-taking tasks. In this paper, adaptive devices based on <b>decision</b> <b>tables</b> are used for the solution of decision-taking problems. The resulting adaptive <b>decision</b> <b>tables</b> have shown to be effective for their generality and flexibility, so they are appropriate for helping in the task of automatically choosing among several applicable alternatives at each stage {{in the process of}} decision taking. An illustrating example is shown in the business management field, and an overall comparative evaluation is shown...|$|R
40|$|Abstract – After {{an era of}} {{successful}} applications in the 1970 ´s and 1980 ´s <b>decision</b> <b>tables</b> disappeared in the 1990 ´s because appropriate tools to support the application of <b>decision</b> <b>tables</b> were no longer available. Now with new tools are available and new perspectives are open regarding system integration and business rules...|$|R
5000|$|... #Caption: A DMN <b>decision</b> <b>table</b> with {{business}} rules for classifying a customer into a category {{based on the}} input data.|$|E
50|$|Traditional {{decision}} tables {{have many}} advantages {{compared to other}} decision support manners, such as if-then-else programming statements, decision trees and Bayesian networks. A traditional <b>decision</b> <b>table</b> is compact and easily understandable. However, it still has several limitations. For instance, a <b>decision</b> <b>table</b> often faces the problems of conceptual ambiguity and conceptual duplication; {{and it is time}} consuming to create and maintain large decision tables. Semantic decision tables are an attempt to solve these problems.|$|E
5000|$|This {{decision}} is shown below:There are 6 business rules that determine the client's category {{and these are}} shown in the <b>decision</b> <b>table</b> here: ...|$|E
40|$|In this paper, {{we propose}} {{a method for}} the {{evaluation}} of importance of rows for <b>decision</b> <b>tables.</b> It is based on indirect information about changes in the set of reducts after removing the considered row from the table. We also discuss results of computer experiments with <b>decision</b> <b>tables</b> from UCI Machine Learning Repository...|$|R
50|$|Aside {{from the}} basic four {{quadrant}} structure, <b>decision</b> <b>tables</b> vary widely {{in the way}} the condition alternatives and action entries are represented. Some <b>decision</b> <b>tables</b> use simple true/false values to represent the alternatives to a condition (similar to if-then-else), other tables may use numbered alternatives (similar to switch-case), and some tables even use fuzzy logic or probabilistic representations for condition alternatives. In a similar way, action entries can simply represent whether an action is to be performed (check the actions to perform), or in more advanced <b>decision</b> <b>tables,</b> the sequencing of actions to perform (number the actions to perform).|$|R
40|$|Complete <b>decision</b> <b>tables</b> are {{described}} by indiscernibility relations. Data sets, described by <b>decision</b> <b>tables,</b> are complete when for all cases (examples, objects) the corresponding attribute values are known, the normal technique {{used to get}} the block of attribute value pairs of any information system was the intersection between sets. We will discuss a new technique to work with <b>decision</b> <b>tables</b> using a block of an attribute-value pairs by using the union between sets. We will discuss the affect of the condition sets relation to the block ofattribute value pair for the sets between each other and some new properties were discussed...|$|R
50|$|A {{technical}} support company writes a <b>decision</b> <b>table</b> to diagnose printer problems based upon symptoms described to {{them over the}} phone from their clients.|$|E
5000|$|... {{generation}} of a characteristic description, i.e. {{a set of}} rules covering relatively many objects each, however, all together not necessarily all objects from the <b>decision</b> <b>table</b> ...|$|E
5000|$|Multiple {{conditions}} can be coded for in similar manner to encapsulate the entire program logic {{in the form}} of an [...] "executable" [...] <b>decision</b> <b>table</b> or control table.|$|E
40|$|Recently, {{there has}} been a growing {{interest}} in maintenance and efficiency of large knowledge based systems. Decomposition of knowledge based systems is recognized as an important research issue in this respect. In this paper, we discuss the decomposition of knowledge bases that consist of <b>decision</b> <b>tables.</b> Several algorithms to decompose large <b>decision</b> <b>tables</b> into smaller components are proposed. Knowledge;...|$|R
40|$|Tabular {{notation}} is a {{very important}} part of the functional documentation method that is used to produce computer system specifications. Many types of tables are currently used by the Software Engineering Research Group at McMaster University. Generalized <b>decision</b> <b>tables</b> are one of the types. In order to facilitate the use of tabular notation, a variety of tools were built or are being built to simplify tables, convert between table formats, check syntax, automatically generate test oracles, etc. Other types of <b>decision</b> <b>tables</b> are used by industry to write software specifications. Structured <b>decision</b> <b>tables</b> are one of the four types of tables adopted by Ontario Hydro for their safety critical software documentation. Like the Software Engineering Research Group, they also have tools to conduct syntax checking, software design verification, table completeness checking, table consistency checking, etc. The two sets of tools overlap in some areas but not others. Structured <b>decision</b> <b>tables</b> [...] ...|$|R
40|$|AbstractIn recent years, many {{methods have}} been {{proposed}} {{in order to deal}} with inconsistent information systems based on indiscernibility relations in rough set theory. However, a little attention has been paid to inconsistent ordered <b>decision</b> <b>tables.</b> In this paper, the concept of allocation reductions is proposed in inconsistent ordered <b>decision</b> <b>tables.</b> And an approach to computing this kind of reductions is then presented by introducing the discernibility matrix and discernibility function. Moreover, the relationship is investigated between the allocation reduction and the ≥-upper (≤-lower) approximate distribution reduction in inconsistent ordered <b>decision</b> <b>tables</b> with a single decision attribute. A fictitious numerical example is employed to substantiate the conceptual argument throughout the paper...|$|R
