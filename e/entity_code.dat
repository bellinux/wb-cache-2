6|147|Public
5000|$|Commercial and Government <b>Entity</b> <b>code</b> {{issued by}} the Defense Logistics Information Service (DLIS) to {{identify}} suppliers to the Department of Defense.|$|E
5000|$|The ninth, tenth and {{eleventh}} {{characters of}} a Network <b>Entity</b> <b>code</b> specify {{a particular type}} of equipment function at a Network Site location.|$|E
50|$|The Commercial and Government <b>Entity</b> <b>Code,</b> or CAGE Code, is {{a unique}} {{identifier}} assigned to suppliers to various government or defense agencies, {{as well as to}} government agencies themselves and also various organizations. CAGE codes provide a standardized method of identifying a given facility at a specific location.|$|E
50|$|CLLI {{codes in}} the Network Entity format {{are the most}} {{commonly}} used CLLI <b>codes.</b> Network <b>Entity</b> <b>codes</b> are eleven-character codes used to describe the location and function of network equipment.|$|R
5000|$|Three-letter <b>entity</b> <b>codes</b> often {{begin with}} two letters to {{identify}} combinations of switching {{equipment such as}} MG (crossbar exchange - marker group), SG (step-by-step exchange - step group), CG (electronic switching system - control group), DS (digital switch), CT (concentrator) or RS (remote switcher).|$|R
50|$|Audit {{committees}} discuss litigation or {{regulatory compliance}} risks with management, generally via briefings or {{reports of the}} General Counsel, the top lawyer in the organisation. Larger corporations may also have a Chief Compliance Officer or Ethics Officer that report incidents or risks related to the <b>entity's</b> <b>code</b> of conduct.|$|R
5000|$|... Manufacturers {{using the}} {{standards}} of the CEA (Consumer Electronics Association) should mark all items in accordance with the MH10.8.7 and CEA-706 standards as applicable. Although this protocol allows for other manufacturer codes, a CAGE (Commercial and Government <b>Entity)</b> <b>code</b> accompanied by the appropriate Data Identifier is recommended as the manufacturer ID.|$|E
40|$|International audienceOver {{the last}} decade, global {{descriptions}} {{have been successfully}} employed for the verification and implementation of communicating systems, respectively as protocol specifications and choreographies. In this work, we bring these two practices together by proposing a purely-global programming model. We show a novel interpretation of asynchrony and parallelism in a global setting and develop a typing discipline that verifies choreographies against protocol specifications, based on multiparty sessions. Exploiting the nature of global descriptions, our type system defines {{a new class of}} deadlock-free concurrent systems (deadlock-freedom-by-design), provides type inference, and supports session mobility. We give a notion of Endpoint Projection (EPP) which generates correct <b>entity</b> <b>code</b> (as pi-calculus terms) from a choreography. Finally, we evaluate our approach by providing a prototype implementation for a concrete programming language and by applying it to some examples from multicore and service-oriented programming...|$|E
5000|$|Non-switching <b>entity</b> <b>codes</b> {{may begin}} with A (administrative office space and computers), E (exchange switchroom), F (frame), K (software cross-connectable entity), M (maintenance group), P (test/service position), Q (radio tower), S (service centre), T (toll test) or W (miscellaneous), {{followed}} by anything except G (to avoid conflict with switches).|$|R
40|$|MEntoR is {{a source}} code {{analysis}} tool that is integrated into the development environment (IDE) to suggest implementation improvements. MEntoR is a front-end for Prospector. Prospector extracts properties of source <b>code</b> <b>entities</b> of an application, and calculates association rules which indicate which properties tend to occur together. The purpose of MEntoR is to identify missing properties in the source <b>code</b> <b>entity</b> that is being browsed in the IDE based on other properties that the entity has. For instance, showing whenever a source <b>code</b> <b>entity</b> violates an idiom...|$|R
40|$|Ada {{packages}} implementing selected mathematical {{functions for}} the support of scientific and engineering applications were written. The packages provide the Ada programmer with the mathematical function support found in the languages Pascal and FORTRAN as well as an extended precision arithmetic and a complete complex arithmetic. The algorithms used are fully described and analyzed. Implementation assumes that the Ada type FLOAT objects fully conform to the IEEE 754 - 1985 standard for single binary floating-point arithmetic, and that INTEGER objects are 32 -bit <b>entities.</b> <b>Codes</b> for the Ada packages are included as appendixes...|$|R
40|$|Abstract. Due to the {{increasing}} of software requirements and software features, modern software systems continue to grow in size and complexity. Locating source <b>code</b> <b>entities</b> that required to implement a feature in millions lines of code is labor and cost intensive for developers. To this end, several studies have pro-posed the use of Information Retrieval (IR) to rank source <b>code</b> <b>entities</b> based on their textual similarity to an issue report. The ranked source <b>code</b> <b>entities</b> could be at a class or function granularity level. Source <b>code</b> <b>entities</b> at the class-level are usually large in size and might contain a lot of functions that are not implemented for the feature. Hence, we conjecture that the class-level feature location tech-nique requires more effort than function-level feature location technique. In this paper, we investigate the impact of granularity levels on a feature location tech-nique. We also presented a new evaluation method using effort-based evaluation. The results indicated that function-level feature location technique outperforms class-level feature location technique. Moreover, function-level feature location technique also required 7 times less effort than class-level feature location tech-nique to localize the first relevant source <b>code</b> <b>entity.</b> Therefore, we conclude that feature location technique at the function-level of program elements is effective in practice...|$|R
5|$|The {{identification}} division {{identifies the}} following <b>code</b> <b>entity</b> and contains {{the definition of}} a class or interface.|$|R
50|$|S.H. Couch held Commercial and Government <b>Entity</b> (CAGE) <b>Code</b> number 05587 {{issued by}} the Defense Logistics Agency in October, 1974. The CAGE code was active while the firm was in Michigan. Earlier, as a {{division}} of ESB, S. H. Couch held CAGE Code number 14740.|$|R
25|$|In HTML {{character}} <b>entity</b> reference, the <b>codes</b> for Ñ and ñ are &Ntilde; and &ntilde; or &#209; and &#241;.|$|R
5000|$|In HTML {{character}} <b>entity</b> reference, the <b>codes</b> for Ñ and ñ are [...] and [...] or [...] and [...]|$|R
2500|$|On November 25, 2009, Global Findability filed {{a patent}} {{infringement}} lawsuit against Summit Entertainment and Escape Artists in the U.S. District Court for the District of Columbia, claiming that a geospatial <b>entity</b> object <b>code</b> {{was used in}} the film Knowing which infringed Patent [...] The case was dismissed on January 10, 2011.|$|R
2500|$|The Wikimedia Foundation {{was granted}} section 501(c)(3) status by the U.S. Internal Revenue Code {{as a public}} charity in 2005. [...] Its National Taxonomy of Exempt <b>Entities</b> (NTEE) <b>code</b> is B60 (Adult, Continuing education). The foundation's by-laws declare a {{statement}} of purpose of collecting and developing educational content and to disseminate it effectively and globally.|$|R
50|$|In 2003, France criminalized {{mercenary}} activities, {{as defined}} by the protocol to the Geneva convention for French citizens, permanent residents and legal <b>entities</b> (Penal <b>Code,</b> L436-1, L436-2, L436-3, L436-4, L436-5). This law does not prevent French citizens from serving as volunteers in foreign forces. The law applies to military activities with a specifically mercenary motive or with a mercenary level of remuneration.|$|R
40|$|Active {{governmental}} unit A governmental {{unit that}} has elected or appointed officials, raises revenues, and performs governmental activities (such as enactment of laws, provision of services, and entering into contracts). See also functional status (governmental), functioning governmental unit, inactive governmental unit, nonfunctioning governmental unit. Address The number or other designation {{assigned to a}} housing unit, business establishment, or other structure for purposes of mail delivery, emergency services, and so forth. See also city-style address, general delivery address, post office box address, rural address. Address coding guide (ACG) A computerized inventory of street names, address ranges, and census block numbers, created by the Census Bureau in cooperation with local agencies, to permit the automated assignment of addresses on a mailing list to the geographic <b>entity</b> <b>codes</b> for the 145 largest urban cores of metropolitan areas (MAs) {{at the time of}} the 1970 census. Each file contained the name of each block side that was a street or road...|$|R
30|$|The {{first step}} for extracting {{relations}} between entities from web pages is to define which are our <b>entities.</b> <b>Entities</b> are <b>coded</b> through keywords. Here {{we focus on}} three types of entities: the aid organizations part of our study, the issues related to health and aid, and the set of countries in which the organizations operate. All lists of entities have been curated by domain experts.|$|R
50|$|Amanda Matthews (born 1968) is an American {{sculptor}} and painter from Louisville, Kentucky, United States, {{who lives}} in Lexington, Kentucky. She is the CEO of a Certified WBE Bronze Art Foundry, Prometheus Foundry, LLC, a Commercial and Government <b>Entity</b> (CAGE) <b>Code</b> 6DW69, located in the United States. In 2015, she founded the Artemis Initiative Public Charity. She went by Amanda Matthews Fields during 1991-2009.|$|R
5000|$|Aerospace {{manufacturing}} is a high-technology {{industry that}} produces [...] "aircraft, guided missiles, space vehicles, aircraft engines, propulsion units, and related parts". Most {{of the industry}} is geared toward governmental work. For each original equipment manufacturer (OEM), the US government has assigned a Commercial and Government <b>Entity</b> (CAGE) <b>code.</b> These codes help to identify each manufacturer, repair facilities, and other critical aftermarket vendors in the aerospace industry.|$|R
5000|$|MIP is {{a synonym}} of Markit Partners. CLIP is known with {{multiple}} names like Markit RED code, RED CLIP or simply CLIPS. S&P and Markit Partners introduced CLIP concept and <b>entity</b> CLIP <b>codes</b> are {{generated by the}} S&P CUSIP Bureau [...] and are assigned to each entity name individually. CLIP codes are used for electronic matching on DTCC and have been integrated in various online platforms.|$|R
50|$|In {{computer}} programming, a {{naming convention}} {{is a set}} of rules for choosing the character sequence to be used for identifiers which denote variables, types, functions, and other <b>entities</b> in source <b>code</b> and documentation.|$|R
40|$|Business {{applications}} encode various {{business processes}} within an organization. Business process specification languages such as BPEL (Business Process Execution Language) {{are commonly used}} to integrate various services in order to automate business processes within an organization. To remain competitive edge, managers frequently modify their processes. Determining the cost of modifying a business process is not trivial since the changes to the business process have to account for source code changes in various services. In this paper, we propose an approach to estimating {{the cost of a}} business process change in a service oriented business application. The approach applies change impact analysis techniques to business process specifications, and source code. The approach generates an initial change impact set from business process components. These components are then mapped to the corresponding source <b>code</b> <b>entities.</b> These <b>code</b> <b>entities</b> act as seeds for traditional source code impact analysis. Using code dependencies, such as call and inheritance relations, we derive a metric to capture the complexity of particular business process changes. Managers can then use this metric to gauge the cost and resources needed to implement changes in their business processes without having to study the code. We demonstrated the feasibility of our approach using an experiment on an open source service oriented business application. 1...|$|R
50|$|Code for America Commons (formerly Civic Commons) is {{a project}} by Code for America and OpenPlans focused on {{reducing}} government IT costs by helping government <b>entities</b> share <b>code</b> and best practices. It was initially launched as Civic Commons as an independent nonprofit organization, but later became a program of Code for America. The project is a coordinated effort between Code for America, OpenPlans, and the District of Columbia's Office of the Chief Technology Officer (OCTO).|$|R
50|$|Civil law {{regulates the}} {{everyday}} life of citizens and other legal entities, such as corporations. The main code of Ukrainian civil {{law is the}} Civil Code of Ukraine. It comprises provisions governing ownership, intellectual property rights, contracts, torts, obligations, inheritance law, and the definition of legal <b>entities.</b> The <b>code</b> introduces new types of business contracts into the legal practice, including factoring, franchising, rent service, and inherited contracts. Civil litigation is governed by the Civil Procedural Code of Ukraine.|$|R
40|$|Impersonal constructions {{holding a}} {{complement}} both in dative and genitive are attested in Greek {{with a few}} verbs, which share the property of expressing the interests or the needs of human beings. These constructions, which occur in several ancient Indo- European languages, are documented in the post- Homeric period {{in the case of}} Greek. In the opposite, personal constructions, which appear more recently in other languages, are already documented in Greek since Homer’s times. The dative in the impersonal construction refers to human <b>entities,</b> <b>codes</b> the Experiencer and it is also the topic. These properties, which are close to those of the prototypical subject, seem to allow the dative to show some subject-like syntactic behaviour. In fact, we will argue that the dative in the impersonal construction behaves as a semi-subject, i. e. a verbal complement which, regardless of its coding, does have a set of properties that are typically associated with the subject in Greek. As well as the complement in dative, the complement in genitive in the impersonal construction exhibits a syntactic behaviour similar to the subject. However, the genitive does not follow the same patterns the dative does in the impersonal construction...|$|R
40|$|PT H is an {{insurance}} company that only serves a group of life insurance. The purpose {{of this research is}} to evaluate the entity’s internal control and accounting system on cash receipt and insurance premium receivables. To conduct the research, the researcher used a method based on Committe of Sponsoring Organization or usually known as COSO. The data were collected from literatures such as textbooks, and other references, such as theories and scientific opinions related to this topic. Apart from the theories, researcher performed interviews, spread questionnaries, and observations to the entity. The internal control and accounting system in PT H has been well organized by the management and in accordance with the standards and the Entity’s policy. But other than that, the researcher found several weakness that should be a concern of management, especially on the Entity’s documentation and the delivery of information. Therefore, the researcher recommends that serial number in documents such as receipt, payment request form, and accounting request form should have been printed; to create a new company policy related to the delivery and receiving of files; and to make a written rules related to the <b>Entity’s</b> <b>code</b> of ethics and rules how to deliver information between sections and subsections...|$|R
50|$|Duplicate code is a {{computer}} programming term for a sequence of source code that occurs more than once, either within a program or across different programs owned or maintained by the same <b>entity.</b> Duplicate <b>code</b> is generally considered undesirable {{for a number of}} reasons. A minimum requirement is usually applied to the quantity of code that must appear in a sequence for it to be considered duplicate rather than coincidentally similar. Sequences of duplicate code are sometimes known as code clones or just clones, the automated process of finding duplications in source code is called clone detection.|$|R
40|$|Today, {{refactoring}} reconstruction {{techniques are}} snapshot-based: they compare two revisions {{from a source}} code man-agement system and calculate the shortest path of edit op-erations to go from the one to the other. An inherent risk with snapshot-based approaches is that a refactoring may be concealed by later edit operations acting on the same source <b>code</b> <b>entity,</b> a phenomenon we call refactoring mask-ing. In this paper, we performed an experiment to find out at which point refactoring masking occurs and confirmed that a snapshot-based technique misses refactorings when several edit operations are performed on the same source <b>code</b> <b>entity.</b> We present a way of reconstructing refactorings using fine grained changes that are recorded live from an integrated development environment and demonstrate on two cases —PMD and Cruisecontrol — that our approach is more accurate in {{a significant number of}} situations than the state-of-the-art snapshot-based technique RefFinder...|$|R
40|$|The {{passage of}} the Dodd-Frank Wall Street Reform and Consumer Protection Act sparked {{discussion}} of creating a systematic code that uniquely identifies an <b>entity.</b> This <b>code</b> is {{commonly referred to as}} a legal entity identifier (LEI). The information that is collected to accompany and describe the LEI will {{play an important role in}} enhancing the usefulness of the LEI. This paper explores the information (referred to as reference data) commonly used in datasets that describe entities and evaluates the usefulness of reference data elements for uniquely identifying an entity and for monitoring systemic risk in the financial industry. Financial institutions; Information resources management; Financial services industry...|$|R
5000|$|The Civic Commons project {{focuses on}} {{reducing}} public IT costs by helping government <b>entities</b> share <b>code</b> and best practices. [...] It {{was launched in}} September 2010 after the Washington, DC project fell through due {{to a change in}} administration. Code for America Commons, as it is now called, is a coordinated effort between Code for America, OpenPlans, and the District of Columbia's Office of the Chief Technology Officer (OCTO). In March 2011, Code for America Commons helped make the Federal IT dashboard freely available to all levels of government, thereby providing local governments with tools to monitor project effectiveness and evaluate the allocation of resources.|$|R
40|$|Agent systems offer {{significant}} {{advantages for}} modeling complex adaptive systems. However, {{they are not}} the solution to all complex problems. It is important to note the strengths, weaknesses and implementation issues related to agent based systems. With the advent of the Internet era and advancement of technology, the scope and the feasibility of mobile <b>entities</b> (<b>code)</b> have increased dramatically. As mobility can be deployed in many applications including e-commerce, the interest in this area of research has intensified. Over the past decade, data mining has gained an important role in analysis of large datasets and there by understanding the complex systems in almost all areas. Such datasets are often collected in a geographically distributed way, and cannot, in practice, be gathered in to single repository. Existing data mining methods for distributed data are of communication intensive. Many algorithms for data mining have been proposed for a data at a single location and some at multiple locations with improvement in terms of efficiency of algorithms as a part of quality but effectiveness of these algorithms in real time distributed environment are not addressed, as data on the web/network are distributed by very of its nature. As a consequence, both new architectures and new algorithms are needed. Our aim in this article are to state when and where exactly the mobile agents system can potentially {{play a significant role in}} complex distributed-systems by stating few quantitative measurements of the value of mobility and emphasize the distributed application focusing on distributed data mining. Key words...|$|R
40|$|Source code {{comments}} are a valuable instrument to preserve design decisions and {{to communicate the}} intent of the code to programmers and maintainers. Nevertheless, commenting source code and keeping them up-to-date is often neglected for reasons of time or programmer’s obliviousness. In this paper, we investigate the question whether developers comment their code and to which extent they add comments or adapt them when they evolve the code. We present an approach to associate comments with source <b>code</b> <b>entities</b> to track their co-evolution over multiple versions. A set of heuristics are used to decide whether a comment is associated to its preceding or its succeeding source <b>code</b> <b>entity.</b> We analyzed the co-evolution of code and comments in eight different open source and closed source software systems. We found with statistical significance that (1) the relative amount of comments and source code grows at about the same rate; (2) the type of a source <b>code</b> <b>entity,</b> such as a method declaration or an if-statement, has a significant influence on whether or not it gets commented; (3) in six out of the eight systems, code and comments co-evolve in 90 percent of the cases; and (4) surprisingly, API changes and comments do not co-evolve but they are re-documented in a later revision. As a result, our approach enables a quantitative assessment of the commenting process in a software system. We can, therefore, leverage the results to provide feedback during development to increase the awareness when to add comments or when to adapt comments because of source code changes...|$|R
