921|1738|Public
25|$|VLC, {{like most}} {{multimedia}} frameworks, {{has a very}} modular design which {{makes it easier to}} include modules/plugins for new file formats, codecs, interfaces, or streaming methods. VLC 1.0.0 has more than 380 modules. The VLC core creates its own graph of modules dynamically, depending on the situation: input protocol, <b>input</b> <b>file</b> format, input codec, video card capabilities and other parameters. In VLC, almost everything is a module, like interfaces, video and audio outputs, controls, scalers, codecs, and audio/video filters.|$|E
25|$|MODFLOW is a {{well-known}} example of a general finite difference groundwater flow model. It is developed by the US Geological Survey as a modular and extensible simulation tool for modeling groundwater flow. It is free software developed, documented and distributed by the USGS. Many commercial products have grown up around it, providing graphical user interfaces to its <b>input</b> <b>file</b> based interface, and typically incorporating pre- and post-processing of user data. Many other models {{have been developed to}} work with MODFLOW input and output, making linked models which simulate several hydrologic processes possible (flow and transport models, surface water and groundwater models and chemical reaction models), because of the simple, well documented nature of MODFLOW.|$|E
25|$|Many file systems, {{including}} FAT, NTFS, and VMS systems, allow a {{filename extension}} {{that consists of}} one or more characters following the last period in the filename, dividing the filename into two parts: a base name or stem and an extension or suffix used by some applications to indicate the file type. Multiple output files created by an application use the same basename and various extensions. For example, a compiler might use the extension FOR for source <b>input</b> <b>file</b> (for Fortran code), OBJ for the object output and LST for the listing. Although there are some common extensions, they are arbitrary and a different application might use REL and RPT. On filesystems that do not segregate the extension, files will often have a longer extension such as html.|$|E
30|$|The used {{unit system}} in all <b>input</b> <b>files</b> is SI. The prefix in files name is {{arbitrary}} {{and must be}} the same for all five <b>input</b> <b>files.</b> Before the simulation starts, Starfish asks the user to enter the prefix and the path of the <b>input</b> <b>files.</b>|$|R
40|$|The RADTRAN {{computer}} code for transportation risk analysis, {{which has been}} under continuous development at Sandia National Laboratories since 1977, has evolved from a purely research tool into a publicly available {{with a variety of}} applications. This expansion of the user community has substantially increased the need to make the system easier to use without decreasing its capabilities or the quality of output. A large set of modifiable RADTRAN <b>input</b> <b>files</b> has been available via TRANSNET for several years. One approach to assisting the user involves adding annotations/information to each of these files. A second approach is providing additional help in building new/modifying old <b>input</b> <b>files.</b> Keeping the proposed information/annotation files separate from but closely coupled to the modifiable <b>input</b> <b>files</b> within the TRANSNET shell system allows the modifiable <b>input</b> <b>files</b> to remain as regular <b>input</b> <b>files</b> while providing rapid, automatic access to, useful information about the analysis. In this way, the sample <b>input</b> <b>files</b> remain intact as regular RADTRAN <b>input</b> <b>files</b> and any files generated using associated on-line menus or editors may be readily converted into new <b>input</b> <b>files.</b> A single sample file is selected and used as an example to illustrate the prototype help features...|$|R
50|$|The {{input phase}} - Program reads the <b>input</b> <b>files.</b> There are two <b>input</b> <b>files.</b> They are the {{coordinates}} {{and the details}} of the contents and appearance of the picture.|$|R
2500|$|TeX {{commands}} commonly {{start with}} a backslash and are grouped with curly braces. Almost all of TeX's syntactic properties can be changed on the fly, which makes TeX input hard to parse by anything but TeX itself. TeX is a macro- and token-based language: many commands, including most user-defined ones, are expanded on the fly until only unexpandable tokens remain, which are then executed. Expansion itself is practically free from side effects. Tail recursion of macros takes no memory, and if-then-else constructs are available. This makes TeX a Turing-complete language even at the expansion level. The system {{can be divided into}} four levels: in the first, characters are read from the <b>input</b> <b>file</b> and assigned a category code (sometimes called [...] "catcode", for short). Combinations of a backslash (actually, any character of category zero) followed by letters (characters of category 11) or a single other character are replaced by a control-sequence token. In this sense, this stage is like lexical analysis, although it does not form numbers from digits. In the next stage, expandable control sequences (such as conditionals or defined macros) are replaced by their replacement text. The input for the third stage is then a stream of characters (including ones with special meaning) and unexpandable control sequences (typically assignments and visual commands). Here characters get assembled into a paragraph. TeX's paragraph breaking algorithm works by optimizing breakpoints over the whole paragraph. The fourth stage breaks the vertical list of lines and other material into pages.|$|E
50|$|For {{everything}} {{to work out}} optimally, the last merge phase should have exactly one run on each <b>input</b> <b>file.</b> If any <b>input</b> <b>file</b> {{has more than one}} run, then another phase would be required. Consequently, the polyphase merge sort needs to be clever about the initial distribution of the input data's runs to the initial output files. For example, an <b>input</b> <b>file</b> with 13 runs would write 5 runs to file 1 and 8 runs to file 2.|$|E
50|$|No {{complete}} list of <b>input</b> <b>file</b> types.|$|E
5000|$|Creating, modifying, generating, or {{otherwise}} producing <b>input</b> <b>files.</b>|$|R
30|$|Finally, the ApplicationAnalyzer {{evaluates the}} {{possibility}} to split the parameter study into multiple jobs. The test case job compares 1000 files against the database. In this case, the ApplicationAnalyzer generates job descriptors with one job matching 1000 <b>input</b> <b>files,</b> two jobs matching 500 <b>input</b> <b>files,</b> 4 jobs matching 250 <b>input</b> <b>files,</b> and so on. In order to simplify the procedure, the test case does not further discuss the job descriptors created by the ApplicationAnalyzer and explains the adaptive job configuration process {{on the basis of}} the generated resource descriptors.|$|R
30|$|Agent {{definitions}} {{are read}} from <b>input</b> <b>files.</b> The <b>input</b> <b>files</b> have either individual agent descriptions or distributions. If the agents are stored individually, {{then there will}} be at least one input per agent. If distributions are used, then the needed agents are created using random draws from the given distributions.|$|R
50|$|After {{this initial}} phase, AFL begins the actual process of fuzzing by {{applying}} various {{modifications to the}} <b>input</b> <b>file.</b> When the tested program crashes or hangs, this might suggest {{the discovery of a}} new bug, possibly a security vulnerability. In this case, the modified <b>input</b> <b>file</b> is saved for further user inspection.|$|E
5000|$|Copy video and/or audio tracks from <b>input</b> <b>file</b> (to avoid conversion) ...|$|E
5000|$|... /* This tells flex to {{read only}} one <b>input</b> <b>file</b> */%option noyywrap ...|$|E
30|$|The <b>input</b> data <b>files</b> {{for this}} {{software}} are classified into three semi-equal groups, “training data”, “validation data” and “applied data”. These <b>input</b> <b>files</b> include measured <b>inputs</b> and outputs parameters for our correlation.|$|R
50|$|Video {{game console}} emulators {{typically}} take ROM images as <b>input</b> <b>files.</b>|$|R
3000|$|... [*]=[*] 0.7. Additionally, {{the number}} of <b>input</b> <b>files</b> is {{normalized}} before applying the function. The size of the <b>input</b> <b>files</b> can have impact on the runtime of an application. Currently, this fact is not considered in the scenario dependent function due to {{the characteristics of the}} sample application. A scaling factor of w [...]...|$|R
5000|$|... {{change the}} EnergyPlus <b>input</b> <b>file</b> with a {{different}} value of the material property ...|$|E
5000|$|Where -i=input file [...] <b>Input</b> <b>file</b> {{can contain}} {{one or more}} FASTA {{formatted}} sequences.|$|E
50|$|Predict {{disorder}} {{values for}} sequences from <b>input</b> <b>file</b> /home/input.fastaoutput {{the results to}} the standard out. Use default disorder valueand utilise all CPUs available on the computer.Predict disorder values for sequences from <b>input</b> <b>file</b> /home/input.fastaoutput the results in horizontal layout to the /home/jronn.out, collectexecution statistics to /home/jronn.stat.txt file and limit the numberof threads to two.The arguments can be provided in any order.|$|E
40|$|C Namelist Facility (CNL) is {{a package}} of {{software}} that supports the development of data-driven programs that utilize relatively free-form <b>input</b> <b>files</b> (e. g., text files) to control complex operations. The only comparable prior namelist facility is built into Fortran and does not support arrays or records. Newer computing languages, including C and Pascal, do not include built-in namelist facilities. A namelist facility enables a program to utilize relatively free-form <b>input</b> <b>files</b> that contain assignment statements that give values to variables. Variables to which values are not assigned in <b>input</b> <b>files</b> remain unchanged; therefore, it becomes possible to have default values set by static or dynamic initialization of values prior to namelist input and updating of values is optional. Because it {{is not required to}} include values of variables in namelist <b>input</b> <b>files,</b> new parameters can be added to evolving programs without rendering old namelist <b>input</b> <b>files</b> obsolete [...] provided that the new parameters have useful default values. It should be possible to execute CNL in any operating system that supports the ANSI C programming language. It has been executed in several variants of Unix and in VxWorks...|$|R
5000|$|Removes control {{characters}} from the <b>input</b> <b>files</b> (these can crash a training); ...|$|R
40|$|Introduces automatically-generated <b>input</b> <b>files</b> for CHARMM, DESMOND, and LAMMPS, and {{alternate}} GROMACS files generated via ParmEd {{rather than}} acpype Reorganizes (renames) directories containing <b>input</b> <b>files</b> for simulations Provides energy comparison of all automatically generated files in simulation_comparison_input Adds of notebooks directory with IPython notebook which can generate input for hydration calculations on OpenEye platforms like Orio...|$|R
50|$|The {{data that}} is {{inserted}} into the game, either {{by the actions of}} a player (both during normal play and during speedrunning) or by an <b>input</b> <b>file.</b> The data can, for example, represent button presses/releases and joystick positions (e.g. with the Nintendo 64) on the controller, and even the reset button of the console if the emulator's <b>input</b> <b>file</b> format records these events.|$|E
5000|$|Creates <b>input</b> <b>file</b> for GAMESS (US), Gaussian, MOLCAS, MOLPRO, MPQC, OpenMopac, PC GAMESS, Orca and Q-Chem.|$|E
5000|$|EPANET uses {{a binary}} file format, but also {{includes}} the capability for importing and exporting data in dxf, metafile, and ASCII file formats. EPANET's ASCII file format is called an <b>input</b> <b>file</b> within EPANET, and uses a file extension [...] ".inp". The <b>input</b> <b>file</b> can include data describing network topology, water consumption, and control rules, and is supported by many free and commercial modeling packages.|$|E
40|$|Unstructured {{triangular}} mesh around Orkney and Shetland Islands for hydrodynamic simulations. Mesh {{constructed with}} qmesh (www. qmesh. org), using <b>input</b> <b>files</b> at 10. 6084 /m 9. figshare. 4519067. v 1 Unstructured triangular mesh around Orkney and Shetland Islands for hydrodynamic simulations. Mesh constructed with qmesh (www. qmesh. org), using <b>input</b> <b>files</b> at 10. 6084 /m 9. figshare. 4519067. v...|$|R
5000|$|An {{ordinary}} {{merge sort}} using four working files organizes {{them as a}} pair of <b>input</b> <b>files</b> and a pair of output files. The dataset is distributed evenly between two of the working files, either as sorted runs or in the simplest case, single records, which can be considered to be sorted runs of size 1. Once all of the dataset is transferred to the two working files, those two working <b>files</b> become the <b>input</b> <b>files</b> for the first merge iteration. Each merge iteration merges runs from the two <b>input</b> working <b>files,</b> alternating the merged output between the two output files, again distributing the merged runs evenly between the two output files (until the final merge iteration). Once all of the runs from the two <b>inputs</b> <b>files</b> are merged and output, then the output <b>files</b> become the <b>input</b> <b>files</b> and vice versa for the next merge iteration. The number of runs decreases by a factor of 2 at each iteration, such as 64, 32, 16, 8, 4, 2, 1. For the final merge iteration, the two <b>input</b> <b>files</b> only have one sorted run (1/2 of the dataset) each, and the merged result is a single sorted run (the sorted dataset) on one of the output files. This is also described at Merge sort#Use with tape drives [...]|$|R
40|$|This version {{provides}} a full rebuild of the <b>input</b> <b>files</b> for the FreeSolv database, and also updates all calculated values via a fresh set of calculations, as further discussed in [URL] {{and in a}} paper submitted to the Journal of Chemical and Engineering Data (a link to a preprint will be posted in the README. md {{as soon as it}} is available). Additional calculated values are added, such as enthalpies of hydration and electrostatic and nonpolar components of the hydration free energy. This update remedies problems with earlier versions of the database where (for example) some topology files contained water molecules whereas others did not, etc. These issues were present since <b>input</b> <b>files</b> were pulled together from a variety of separate studies conducted {{over a number of years}} with somewhat different protocols. This update ensures all <b>input</b> <b>files</b> are generated at one time using a consistent protocol, and {{provides a}} script to use re-generating the <b>input</b> <b>files</b> in future updates...|$|R
5000|$|... sed -e 4~4y/!"#$%&\ (...) *+,-.\/0123456789:;<=>?@ABCDEFGHIJ/@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\^_`abcdefghi/ myfile.fastq # add -i to {{save the}} result to the same <b>input</b> <b>file</b> ...|$|E
50|$|Enhanced deinterlacing method - {{increase}} video {{quality for}} interlaced <b>input</b> <b>file</b> - spots and blurred areas are compensated.|$|E
5000|$|An <b>input</b> <b>file</b> [...] can be {{converted}} from ISO-8859-1 to UTF-8 and output to output file [...] using: ...|$|E
5000|$|The task of <b>inputting,</b> <b>filing</b> and {{managing}} {{the data that}} is stored within the organization's office system ...|$|R
50|$|Handel can be {{downloaded}} {{as part of the}} DART software package. It accepts <b>input</b> <b>files</b> in Stockholm format.|$|R
30|$|The {{simulations}} require two binary <b>input</b> <b>files,</b> coded in R’s feather format, 8 {{which are}} described in Appendix.|$|R
