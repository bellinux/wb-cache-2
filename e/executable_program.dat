332|542|Public
25|$|Use of an {{optimizing}} compiler {{tends to}} ensure that the <b>executable</b> <b>program</b> is optimized {{at least as much as}} the compiler can predict.|$|E
25|$|Philippe Kahn {{first saw}} an {{opportunity}} for Borland, his newly formed software company, {{in the field of}} programming tools. Historically, the vast majority of programmers saw their workflow in terms of the edit/compile/link cycle, with separate tools dedicated to each task. Programmers wrote source code using a text editor; the source code was then compiled into object code (often requiring multiple passes), and a linker combined object code with runtime libraries to produce an <b>executable</b> <b>program.</b>|$|E
25|$|For DNA, RNA, and lipids, CHARMM27 is used. Some force fields may be combined, {{for example}} CHARMM22 and CHARMM27 for the {{simulation}} of protein-DNA binding. Also, parameters for NAD+, sugars, fluorinated compounds, etc., may be downloaded. These force field version numbers {{refer to the}} CHARMM version where they first appeared, but may of course be used with subsequent versions of the CHARMM <b>executable</b> <b>program.</b> Likewise, these force fields may be used within other molecular dynamics programs that support them.|$|E
5000|$|Both {{command-line}} & graphical <b>executable</b> <b>programs,</b> about 500k bytes total size; ...|$|R
30|$|It {{is easier}} to lure users into opening {{documents}} than into launching <b>executable</b> <b>programs.</b>|$|R
5000|$|Building <b>executable</b> <b>programs</b> for {{different}} platforms from source code; {{this is what}} is usually understood by [...] "porting".|$|R
2500|$|File {{names were}} {{specified}} as {{a string of}} up to eight characters, followed by a period, followed by a file name extension of up to three characters ("8.3" [...] filename format). The extension usually identified the type of the file. For example, [...]COM indicated an <b>executable</b> <b>program</b> file, and [...]TXT indicated a file containing ASCII text.|$|E
2500|$|A {{compiler}} is {{a computer}} program or set of programs that transforms source code written in a computerized source [...] language into another computer language often having a binary form known as an object code. The most common reason for wanting to transform source code {{is to create an}} <b>executable</b> <b>program.</b> The first compiler written for the A-0 programming language is attributed to its inventor, Grace Hopper in 1949.|$|E
2500|$|When an {{application}} is first launched, the [...]NET Framework compiles the CIL code into executable code using its just-in-time compiler, and caches the <b>executable</b> <b>program</b> into the [...]NET Native Image Cache. Due to caching, the application launches faster for subsequent launches, although the first launch is usually slower. To {{speed up the}} first launch, developers may use the Native Image Generator utility to manually ahead-of-time compile and cache any [...]NET application.|$|E
5000|$|BD+ is {{effectively}} a virtual machine embedded in authorized players. It allows content providers to include <b>executable</b> <b>programs</b> on Blu-ray Discs. Such programs can: ...|$|R
40|$|Abstract. Model-driven {{architecture}} {{envisions a}} paradigm shift as dramatic as the one from low-level assembler languages to high-level programming languages. In order for this vision to become reality, algorithms are needed that compile models of software systems into deployable and executable implementations. This paper discusses two algorithms that provide such transformations for process graph models in a business process or workflow environment and produce <b>executable</b> <b>programs</b> based on Web services and orchestration languages. The reverse transformations back from <b>executable</b> <b>programs</b> to process graphs are also described...|$|R
50|$|A limited-function {{version of}} the compiler, which allows one to compile source code and view any {{resulting}} error messages, but not to produce <b>executable</b> <b>programs,</b> {{is available from the}} company's web site.|$|R
2500|$|The {{traditional}} Unix {{system does}} not have the functionality to create a new process running a new <b>executable</b> <b>program</b> in one step, which explains the importance of exec for Unix programming. [...] Other systems may use spawn as the main tool for running executables. [...] Its result is equivalent to the fork-exec sequence of Unix-like systems. [...] POSIX supports the posix_spawn routines as an optional extension that usually is implemented using vfork.|$|E
2500|$|In the 1980s, {{finally a}} paper {{appeared}} and CHARMM made its public d√©but. Gelin's program had by then been considerably restructured. For the publication, Bob Bruccoleri {{came up with}} the name HARMM (HARvard Macromolecular Mechanics), but it seemed inappropriate. So they added a C for Chemistry. Karplus said: [...] "I sometimes wonder if Bruccoleri's original suggestion would have served as a useful warning to inexperienced scientists working with the program." [...] CHARMM has continued to grow and the latest release of the <b>executable</b> <b>program</b> was made in August 2009 as CHARMM35b3.|$|E
2500|$|A Windows Installer package {{may contain}} another package to be {{installed}} at the same time. These are ideally provided as a [...]msm file component, but {{may also be a}} separate <b>executable</b> <b>program</b> which will be unpacked from the installer package during the InstallExecuteSequence and can be run immediately. The file can then optionally be deleted {{before the end of the}} InstallExecuteSequence, and so is ideal for using with older installers[...]msm file component is called Microsoft Merge Module and is utilized to single out and integrate common components. It contains images of all tables, which have relevant information regarding the common components. Ready-made merge modules are supplied with Visual Studio or can be downloaded from the alternative sources.|$|E
5000|$|The {{operating}} system requires all <b>executable</b> <b>programs</b> {{to be stored}} in libraries because the member's directory entry contains additional attribute information specific to load modules. When used for storing load modules, directories also contain, among other data, {{the size of the}} load module and the address of the first [...] "text record", which is different from the address of the first member data. <b>Executable</b> <b>programs</b> are written to libraries by the linkage editor and loaded into user-acquired storage by the Loader (an application program) or into system-acquired storage by Program Fetch (a component of the OS supervisor).|$|R
50|$|Sorcerer {{is based}} almost {{exclusively}} on source code. While many other operating systems generally make use of a package that contains pre-compiled (<b>executable)</b> <b>programs,</b> Sorcerer compiles source code on the machine prior to installation.|$|R
5000|$|... qmake is {{a utility}} that automates the {{generation}} of makefiles. Makefiles are used by the program make to build <b>executable</b> <b>programs</b> from source code; therefore qmake is a make-makefile tool, or makemake for short.|$|R
2500|$|If {{a command}} is a {{standalone}} <b>executable</b> <b>program,</b> PowerShell.exe launches it {{in a separate}} process; {{if it is a}} cmdlet, it executes in the PowerShell process. PowerShell provides an interactive command-line interface, wherein the commands can be entered and their output displayed. The user interface, based on the Win32 console, offers customizable tab completion. PowerShell enables the creation of aliases for cmdlets, which PowerShell textually translates into invocations of the original commands. [...] PowerShell supports both named and positional parameters for commands. In executing a cmdlet, the job of binding the argument value to the parameter is done by PowerShell itself, but for external executables, arguments are parsed by the external executable independently of PowerShell interpretation.|$|E
50|$|The term {{decompiler}} is {{most commonly}} {{applied to a}} program which translates executable programs (the output from a compiler) into source code in a (relatively) high level language which, when compiled, will produce an executable whose behavior {{is the same as}} the original <b>executable</b> <b>program.</b> By comparison, a disassembler translates an <b>executable</b> <b>program</b> into assembly language (and an assembler could be used to assemble it back into an <b>executable</b> <b>program).</b>|$|E
5000|$|The {{refinement}} calculus is a formalized {{approach to}} stepwise refinement for program construction. The required behaviour {{of the final}} <b>executable</b> <b>program</b> is specified as an abstract and perhaps non-executable [...] "program", which is then refined {{by a series of}} correctness-preserving transformations into an efficiently <b>executable</b> <b>program.</b>|$|E
50|$|PATH is an {{environment}} variable on Unix-like operating systems, DOS, OS/2, and Microsoft Windows, specifying {{a set of}} directories where <b>executable</b> <b>programs</b> are located. In general, each executing process or user session has its own PATH setting.|$|R
50|$|File {{extensions}} {{are often}} used in AmigaOS, {{but they are not}} mandatory and they are not handled specially by the DOS, being instead just a conventional part of the file names. <b>Executable</b> <b>programs</b> are recognized using a magic number.|$|R
5000|$|Lasso {{is often}} used as a {{scripting}} language, and also used {{in a wide range}} of non-scripting contexts. Lasso code can be packaged into standalone <b>executable</b> <b>programs</b> called [...] "LassoApps", in which folder structures are compiled into single files.|$|R
5000|$|...exe is {{a common}} {{filename}} extension denoting an executable file (the main execution point of a computer program) for qqDOS, OpenVMS, Microsoft Windows, Symbian or OS/2. Besides the <b>executable</b> <b>program,</b> many [...]exe files contain other components called resources, such as bitmap graphics and icons which the <b>executable</b> <b>program</b> may use for its graphical user interface.|$|E
5000|$|... smaller <b>executable</b> <b>program</b> size (since {{implementations}} have {{flexibility to}} choose the instruction code) ...|$|E
50|$|Only {{a single}} thread (<b>executable</b> <b>program)</b> can run {{at a time}} on the Xbox.|$|E
50|$|Partitioned {{datasets}} {{can store}} {{any type of}} data, but they are often used to store <b>executable</b> <b>programs,</b> or load modules, sometimes called binaries in other systems. Other uses include system assembler macro definitions, job control procedures, and program source code.|$|R
5000|$|BD+ was {{developed}} by Cryptography Research Inc. {{and is based on}} their concept of Self-Protecting Digital Content. BD+, effectively a small virtual machine embedded in authorized players, allows content providers to include <b>executable</b> <b>programs</b> on Blu-ray Discs. Such programs can: ...|$|R
50|$|Developed in France, Coq {{is another}} {{automated}} proof assistant, which can automatically extract <b>executable</b> <b>programs</b> from specifications, as either Objective CAML or Haskell source code. Properties, programs and proofs are formalized {{in the same}} language called the Calculus of Inductive Constructions (CIC).|$|R
5000|$|The {{supplier}} {{provides an}} <b>executable</b> <b>program</b> with various annotations {{produced by a}} certifying compiler.|$|E
5000|$|An {{example of}} a main program and an {{external}} subprogram, forming an <b>executable</b> <b>program,</b> is ...|$|E
50|$|In the {{compiling}} method called threaded code, the <b>executable</b> <b>program</b> {{is basically}} a sequence of subroutine calls.|$|E
25|$|Kahn's {{idea was}} to package all these {{functions}} in an integrated programming toolkit designed to have much better performance and resource utilisation than the usual professional development tools, and charge a low price for a package integrating a custom text editor, compiler, and all functionality need to produce <b>executable</b> <b>programs.</b> The program was sold by direct mail order for $49.95, without going through established sales channels (retailers or resellers).|$|R
30|$|As {{it is hard}} to do PFT {{analysis}} {{directly with}} the PSD-BPA software, auxiliary modules including parameter initialization, fault setting, network integrity detection, reasonableness identification and result analysis are designed, and encapsulated as <b>executable</b> <b>programs</b> via the Java programming language. Their functionality is as follows.|$|R
50|$|The file {{hierarchy}} {{is roughly}} equivalent to the common Unix-like hierarchy of directories, sub-directories, and files. The master dictionary {{is similar to a}} directory in that it stores pointers to other dictionaries, files and <b>executable</b> <b>programs.</b> The master dictionary also contains the command-line language.|$|R
