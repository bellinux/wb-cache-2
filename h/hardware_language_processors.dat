0|2781|Public
40|$|The FHDL (Florida <b>Hardware</b> Design <b>Language)</b> Macro <b>processor</b> {{provides}} {{a mechanism for}} extending the language features provided by the other components of the FHDL system (the ROM language, the PLA language, and the logic specification language). The primary use of the Macro processor is to provide flexible cells, such as ripple-carry adders, that can expand to match {{the size of the}} interface. The use of the Macro processor for this purpose is transparent with more standard hierarchical specification mechanisms. In addition, the Macro processor was designed to be an implementation vehicle for more sophisticated hardware specification and synthesis systems. The Macro processor provides most of the features found in other macro languages, and provides several new features that are found in few, if any, existing macro languages. The use of the Macro processor for high-level synthesis is the subject of much on-going research...|$|R
40|$|To develop <b>language</b> <b>processors</b> {{efficiently}} {{is difficult}} because they {{need to deal with}} large data with complex structures. Using tools based on formal specification is one of the strategies to reduce the cost in developing <b>language</b> <b>processors.</b> However, the area of application which can be developed by these tools is limited. This dissertation aims at realization of the practical development environment for <b>language</b> <b>processors</b> based on the formalism of attribute grammars (AGs). AGs ar...|$|R
5000|$|ISO/IEC 18009:1999 Information technology—Programming languages—Ada: Conformity {{assessment}} of a <b>language</b> <b>processor</b> ...|$|R
5000|$|Semantic {{indexing}} for {{text mining}} and entity analytics integrated with popular natural <b>language</b> <b>processors.</b>|$|R
40|$|The syntax and {{semantics}} {{of clinical}} narrative across Indo-European languages are quite similar, {{making it possible}} to envison a single medical <b>language</b> <b>processor</b> that can be adapted for different European languages. The Linguistic String Project of New York University is continuing the development of its Medical <b>Language</b> <b>Processor</b> in this direction. The paper describes how the processor operates on English and French...|$|R
50|$|In {{the wake}} of the Applied Data Research lawsuit IBM decided to develop {{chargeable}} versions of several applications, mostly <b>language</b> <b>processors,</b> although it's not clear whether the lawsuit was actually the deciding factor. As a result, SVS does not include a sort/merge program or any <b>language</b> <b>processor</b> other than the new Assembler (XF), which is required for the system generation process.|$|R
40|$|Named Entity Recognition is a {{main task}} in the NLP area that has yielded {{multiple}} web-based natural <b>language</b> <b>processors</b> gaining popularity in the Semantic Web community for extracting knowledge from web data. These processors are generally located as pipelines, using dedicated APIs and various taxonomy for extracting, classifying and disambiguating named entities. In this paper, we {{address the problem of}} NER on Farsi language by proposing NER-FL, a novel semantic framework which unifies three popular named entity extractors available on the web, and the NER-FL ontology which provides a rich set of axioms aligning the taxonomies of these web natural <b>language</b> <b>processors</b> automatically on the LOD-cloud. KEYWORDS Web-based natural <b>language</b> <b>processor,</b> named entity, semantic web, ontology, Farsi language 1...|$|R
50|$|Parrot {{assembly}} language has more instructions than <b>hardware</b> assembly <b>languages,</b> even CISC <b>processors.</b> This {{is because the}} marginal cost of creating a new instruction in Parrot is low compared to the marginal cost of doing so in hardware, and the creators of Parrot had no particular goal of minimalism.|$|R
5000|$|ALGOL 68RS {{programs}} are allowed {{the use of}} several stropping variants, even within the one <b>language</b> <b>processor.</b>|$|R
40|$|Today’s DBMSs {{are unable}} to support the {{increasing}} de-mands of the various applications {{that would like to}} use a DBMS. Each kind of application poses new requirements for the DBMS. The Starburst project at IBM’s Almaden Research Center aims to extend relational DBMS technology to bridge this gap between applications and the DBMS. While providing a full function relational system to enable sharing across applications, Starburst will also allow (sophis-ticated) programmers to add many kinds of extensions to the base system’s capabilities, including language extensions (e. g., new datatypes and operations), data management ex-tensions (e. g., new access and storage methods) and internal processing extensions (e. g., new join methods and new query transformations). To support these features, the database query <b>language</b> <b>processor</b> must be very powerful and highly extensible. Starburst’s <b>language</b> <b>processor</b> features a powerful query language, rule-based optimization and query rewrite, and an execution system based on an extended relational algebra. In this paper, we describe the design of Starburst’s query <b>language</b> <b>processor</b> and discuss {{the ways in which the}} <b>language</b> <b>processor</b> can be extended to achieve Starburst’s goals. 1...|$|R
40|$|How the <b>language</b> <b>processor</b> uses {{linguistic}} {{information to}} interpret {{words in a}} sentence is not fully understood (Federmeier, 2007). This self-paced reading experiment investigated whether the <b>language</b> <b>processor</b> uses contextual information {{at the point of}} lexical access to immediately commit to one sense of a polyseme, or whether context is used later in disambiguation. Participants read context-setting sentences which either biased for the figurative sense interpretation of a polyseme or did not bias towards any specific sense interpretation, followed by sentences containing the polyseme which required the <b>language</b> <b>processor</b> to select the polyseme’s figurative or literal sense. While a facilitatory effect of context was observed, participants encountered greater difficulty when accessing the figurative sense of the polyseme as compared to the literal sense, irrespective of whether the context biased towards the figurative sense interpretation of the polyseme or not. These results constitute evidence that the <b>language</b> <b>processor</b> uses structural information in polyseme disambiguation, and that contextual information has a late effect on sense selection in comparison to structural information...|$|R
40|$|Abstract. This paper {{introduces}} the controlled natural language PENG Light {{together with a}} <b>language</b> <b>processor</b> {{that is based on}} a bidirectional grammar. The <b>language</b> <b>processor</b> has the following interesting properties: (a) it translates declarative sentences written in PENG Light into a first-order logic notation (TPTP); (b) it generates declarative sentences in PENG Light taking syntactically annotated TPTP formulas as input; and (c) it translates questions written in PENG Light into (conjunctive) queries in TPTP notation and uses the TPTP representation of the query {{as a starting point for}} generating answers in PENG Light. Moreover, the controlled natural <b>language</b> <b>processor</b> can be interfaced directly with an automated reasoner in order to resolve anaphoric references and to answer questions stated in PENG Light...|$|R
5000|$|MTS Volume II: <b>Language</b> <b>processor</b> descriptions: F-level assembler; FORTRAN G; IOH/360; PIL; SNOBOL4; UMIST; WATFOR; and 8ASS (PDP-8 assembler) ...|$|R
40|$|This paper {{presents}} {{an update on}} PENG Light, a lightweight and portable controlled natural <b>language</b> <b>processor</b> {{that can be used}} to translate a well-defined subset of English unambiguously into a formal target language. We illustrate by example of a Firefox extension that provides a simple interface to the controlled natural <b>language</b> <b>processor</b> how web pages can be annotated with textual information written in controlled natural language and how these annotations can be translated incrementally into first-order logic. We focus in particular on technical aspects of the controlled <b>language</b> <b>processor</b> and show in detail how look-ahead information {{that can be used to}} guide the writing process of the author is generated during the parsing process. Additionally, we discuss what kind of user interaction is required for processing unknown content words. ...|$|R
50|$|IBM Assembly <b>Language</b> <b>Processor</b> (ALP) is an {{assembler}} {{written by}} IBM for 32 bit OS/2 Warp (OS/2 3.0), which {{was released in}} 1994.|$|R
5000|$|Jürgen Eickel, Manfred Paul, Friedrich L. Bauer, Klaus Samelson, A Syntax Controlled Generator of Formal <b>Language</b> <b>Processors,</b> Communications of the ACM 6(8): 451-455, 1963 ...|$|R
50|$|Digital logic {{simulators}} {{often include}} a Tcl scripting interface for simulating Verilog, VHDL and SystemVerilog <b>hardware</b> <b>languages.</b>|$|R
5000|$|<b>Language</b> <b>processors,</b> {{including}} compilers, static analyzers, and the like, often expand sugared constructs {{into more}} fundamental constructs before processing, a process sometimes called [...] "desugaring".|$|R
40|$|A <b>language</b> <b>processor</b> is to {{find out}} a most {{promising}} sentence hypothesis for a given word lattice obtained from acoustic signal recognition. In this paper a new <b>language</b> <b>processor</b> is proposed, in which unification granunar and Markov language model are integrated in a word lattice parsing algorithm based on an augmented chart, and the island-driven parsing concept is combined with various preference-first parsing strategies defined by different construction principles and decision rules. Test results&quot;show that significant improvements in both correct rate of recognition and computation speed can be achieved. 1...|$|R
40|$|Abstract. In {{this article}} a {{modification}} of a grammar systems theoretic construc-tion, the so-called network of parallel <b>language</b> <b>processors,</b> is proposed to describe the behaviour of peer-to-peer (P 2 P) systems. In our model, the <b>language</b> <b>processors</b> form teams, send and receive information through collective and individual filters. The paper deals with the dynamics of string collections. The connection between the growth function of a developmental system and the growth function of networks of parallel multiset string processors with teams of collective and individual filtering is also established...|$|R
40|$|In this paper, we {{describe}} PAG (Prototyping with Attribute Grammars), {{a framework for}} building Prolog prototypes from specifications based on attribute grammars, which we have developed for supporting rapid prototyping activities in an introductory course on <b>language</b> <b>processors.</b> This framework works for general noncircular attribute grammars with arbitrary underlying context-free grammars, includes a specification language embedded in Prolog that strongly resembles the attribute grammar notations explained in the course cited, and lets students produce comprehensible prototypes from their specifications in a straightforward way. Key words: attribute grammars, language prototyping framework, education in <b>language</b> <b>processors,</b> Prolog...|$|R
40|$|In {{this paper}} we offer a new {{framework}} for describing mainly locally connected processor arrays, where the cell processors {{are defined by}} rewriting systems (grammars). The notion of the CNN template {{is defined by the}} local communication rules and the rewriting process following the communication. A striking similarity of the dynamics of the Cellular Network of <b>Language</b> <b>Processors</b> to the analog CNN dynamics can be demonstrated. As a future example, the dynamic activity pattern of the Internet could also be modelled in this way. In addition to the concepts and results pertinent to locally connected arrays, this contribution can be considered as a tutorial on networks of <b>language</b> <b>processors</b> as well. The introduction of coloring above the strings, the signals of the array, may lead to an analogic CNN system where strings and analog signals could be used in interaction. 1 Networks of language processors: motivations Networks of <b>language</b> <b>processors</b> (NLP systems) is a collective term that ha [...] ...|$|R
50|$|In the {{semiconductor}} and electronic design industry, SystemVerilog is a combined <b>hardware</b> description <b>language</b> and <b>hardware</b> verification <b>language</b> based on extensions to Verilog.|$|R
40|$|Researching {{object-oriented}} (OO) design techniques, we seek {{to develop}} links with already known widely used software design methods. This would let to decrease hardware design complexity, as it constantly increasing. In addition, this paper seeks to find and analyze possible object-oriented design methods. The main OO design techniques are as follows: abstraction, separation of concerns, composition and generalization. Considered-about templates, known for software, use in <b>hardware</b> <b>language.</b> We will use UML – the standard specification language of high-level systems, and automatic design techniques for a hardware describing. After exploring possibilities of <b>hardware</b> design <b>languages,</b> I pick SystemC, because it has derived from C++ language and contain the most OO design possibilities from <b>hardware</b> <b>languages...</b>|$|R
25|$|During the {{development}} of TTM, {{it became apparent that}} applications other than assembler macro processing were possible. These include data editing, text manipulation, expression compiling, and macro processing for <b>language</b> <b>processors</b> other than assemblers.|$|R
40|$|We {{describe}} a Prolog-based {{approach to the}} development of <b>language</b> <b>processors</b> (such as preprocessors, frontends, evaluators, tools for software modification and analysis). The design of the corresponding environment Laptob for prological language processing is outlined. <b>Language</b> <b>processor</b> definitions in Laptob are basically Prolog programs. The programs might contain grammars, that is, we consider logic grammars. The programs can be typed, and they can be higher-order. The adaptation and composition of the logic programs themselves is supported by metaprogramming. The environment offers tool support for efficient scanning, testing, and application development based on a make-system. We report on recent and ongoing applications of the Prolog-based approach. ...|$|R
5000|$|S/SL's [...] "semantic mechanisms" [...] {{extend its}} {{capabilities}} to {{all phases of}} compiling, {{and it has been}} used to implement all phases of compilation, including scanners, parsers, semantic analyzers, code generators and virtual machine interpreters in multi-pass <b>language</b> <b>processors.</b>|$|R
40|$|In {{this thesis}} we present our work in {{designing}} and implementing a Natural <b>Language</b> <b>Processor</b> for querying Cindi, the Concordia Virtual Library System. The Natural <b>Language</b> <b>Processor,</b> named NLPQC, semantically parses natural language questions and builds corresponding SQL queries for the database. This makes the NLPQC system a Natural Language interface to relational databases. Our {{contribution to the}} field of the Natural Language interfaces is done through the reuse of WordNet and of the Link Parser, which are two proven tools from the Open Source domain, and through the introduction of a pre-processor that generates rules and templates for the semantic parsing. The NLPQC system is designed to be platform independent and can accept any database schema...|$|R
40|$|The aim of {{the paper}} is to {{introduce}} a natural <b>language</b> <b>processor</b> enabling mobile multimodal interfaces to receive user driven free speech in order to enable more natural voice interaction with mobile applications and services to control devices in smart environments. Free speech of users is continuously analysed and matched against semantically defined device service commands. The concept and requirements of the <b>language</b> <b>processor</b> and the semantic description for application commands will be explained. Further the paper elaborates on how this concept was fitted into the general concept of a mobile multimodal interface and elaborates on implementation aspects of the <b>language</b> <b>processor.</b> The feasibility of the approach {{has been shown in}} a prototypical implementation. The work has been carried out as part of the research on mobile multimodal interfaces within the IST-FP 6 MobiLife project. First order or main headings should commence at the left hand margin of each column, and should be in capitals and can be in bold. Except {{at the top of a}} new column the first order heading should be preceded by two lines of space and followed by two lines of space...|$|R
40|$|MTS Manual is {{a series}} of volumes that {{describe}} in detail the facilities provided by the Michigan Terminal System. This volume describes the three PL/I <b>language</b> <b>processors</b> available in MTS: (1) the PL/I (F) compiler; (2) the PL/I Optimizing compiler; and (3) the PL/C compiler. The MTS version of the PL/I (F) compiler is derived from the IBM OS/ 360 F-level PL/I compiler (version 5). This volume describes the three PL/I <b>language</b> <b>processors</b> available in MTS: (1) the PL/I (F) compiler (2) the PL/I Optimizing compiler (3) the PL/C compiler The MTS version of the PL/I (F) compiler is derived from the IBM OS/ 360 F-level PL/I compiler (version 5). The PL/C compiler is a compile-and-execute processor developed at Cornell University. ...|$|R
40|$|Many modern NLP {{applications}} require basic <b>language</b> <b>processors</b> such as POS taggers, parsers, etc. All {{these tools}} are usually pre-existing, {{and must be}} adapted to fit in {{the requirements of the}} application to be developed. This adaptation procedure is usually time consuming and increases the application development cost. Our proposal to minimize this effort is to use standard engineering solutions for software reusability. In that sense, we converted all our <b>language</b> <b>processors</b> to classes which may be instantiated and accessed from any application via a CORBA broker. Reusability is not the only advantatge, since the distributed CORBA approach also makes it possible to access the analyzers from any remote application, developed in any language, and running on any operating system. 1...|$|R
40|$|In this paper, {{we want to}} {{show how}} the {{morphological}} component of an existing NLP-system for Dutch (Dutch Medical <b>Language</b> <b>Processor</b> - DMLP) has been ex- tended in order to produce output that is compatible with the language independent modules of the LSP-MLP system (Linguistic String Project - Medical <b>Language</b> <b>Processor)</b> of the New York University. The former {{can take advantage of the}} language independent developments of the latter, while focusing on idiosyncrasies for Dutch. This general strategy will be illustrated by a practical application, namely the highlighting of relevant information in a patient discharge summary (PDS) by means of modern HyperText Mark-Up Language (HTML) technology. Such an application can be of use for medical administrative purposes in a hospital environment...|$|R
40|$|This paper {{deals with}} {{evolution}} of software languages. Metaobject protocol (MOP) technology {{is suitable for}} support of evolution of language. The main goal of designing and developing MOP for softwarelanguage is to achieve its extensibility. Evolution can be realized by the call of appropriate MOP operation. Very important aspect of language evolution is to preserve compatibility and consistency. To achieve this goal, each evolution step needs to be properly documented {{to keep track of}} all the changes made to the language. Transformation of language will be based on its description generated and realized by MOP and its operations. MOP operations alter <b>language</b> <b>processor</b> to conform to changes made to the language. Alteration of <b>language</b> <b>processor</b> itself can be done with help ofreflection mechanisms...|$|R
25|$|Due to {{differences}} in computer <b>hardware,</b> <b>language,</b> and culture, development of adventure games took a different course in Japan compared to Western markets. The most popular adventure game subgenres in Japan are visual novels and dating sims.|$|R
5000|$|IAL {{introduced}} the three-level concept of reference, publication and <b>hardware</b> <b>language,</b> {{and the concept}} of [...] "word delimiters" [...] having a separate representation from freely chosen identifiers (hence, no reserved words). ALGOL 60 kept this three-level concept.|$|R
40|$|SAV-D {{system is}} {{composed}} of display description language (DDL) and its <b>language</b> <b>processor.</b> <b>Language</b> provides for the description of displays in terms of static and variable references for text, special symbols, lines, and circles. SAV-D permits use of high-order English-like language to describe complete displays with increased speed and ease of coding, debugging, and modification. It also allows one to specify static and variable attribute, such as location, flash, dash, character size, and intensity...|$|R
