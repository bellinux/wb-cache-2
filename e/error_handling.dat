817|521|Public
5|$|CSS parsing: A {{number of}} illegal CSS {{statements}} {{are present in}} Acid2 to test <b>error</b> <b>handling.</b> Standards-compliant browsers are expected to handle these errors as the CSS specification directs. This helps ensure cross-browser compatibility by making all browsers treat CSS with {{the same level of}} strictness, so that what works in one browser should not cause errors in another.|$|E
25|$|<b>Error</b> <b>handling</b> is non-local.|$|E
25|$|The Lisp REPL {{typically}} {{also provides}} input editing, an input history, <b>error</b> <b>handling</b> and an interface to the debugger.|$|E
50|$|The {{types of}} <b>errors</b> <b>handled</b> by model include packet errors (both IP and MPEG {{transport}} stream) such as Packet loss, Packet delay variation, Jitter, overflow and underflow, bit errors, and over-the-air transmission errors.|$|R
30|$|Communication <b>errors</b> are <b>handled</b> with {{immediate}} message retries. Errors cause increased latencies.|$|R
40|$|Econometrics. m {{provides}} OLS regression, instrumental {{variables and}} two-stage least squares, Theil mixed estimation, White standard <b>errors,</b> <b>handles</b> lags and differences, and performs the Belsley et al. regression diagnostics. This package is fully {{documented in the}} book "Economic and Financial Modeling with Mathematica", Hal Varian, editor, published by TELOS/Springer-Verlag, 1993, ISBN 0 - 387 - 97882 - 8. This version has been updated for Mathematica 6. 0. ...|$|R
25|$|Hardware {{exception}} {{mechanisms are}} processed by the CPU. It {{is intended to}} support error detection and redirects the program flow to <b>error</b> <b>handling</b> service routines. The state before the exception is saved on the stack.|$|E
25|$|Base Services: Provide {{access to}} the basic {{resources}} available to a Windows system. Included are things like file systems, devices, processes, threads, and <b>error</b> <b>handling.</b> These functions reside in kernel.exe, krnl286.exe or krnl386.exe files on 16-bit Windows, and kernel32.dll on 32-bit Windows.|$|E
25|$|The {{construct}} {{that represents}} side effects {{is an example}} of a monad. Monads are a general framework that can model different kinds of computation, including <b>error</b> <b>handling,</b> nondeterminism, parsing and software transactional memory. Monads are defined as ordinary datatypes, but Haskell provides some syntactic sugar for their use.|$|E
40|$|This paper {{describes}} {{an analysis of}} telegraphic fragments as regular structures (not <b>errors)</b> <b>handled</b> by rn~n~nal extensions to a system designed for processing the standard language. The modular approach which has been implemented in the Unlsys natural language processing system PUNDIT {{is based on a}} division of labor in which syntax regulates the occurrence and distribution of elided elements, and semantics and pragumtics use the system's standard mechankms to interpret them. 1...|$|R
40|$|Knowledge-intensive {{processes}} {{are widely used}} to recover from <b>errors,</b> <b>handle</b> exceptional cases and complaints, and to improve or adapt a process itself. In this context, evolved Business-Process Reengineering (BPR) techniques are changing to give some answers to this reality. In this paper, we identify some cognitive aspects used by traditional and recent reengineering models. We provide a framework highlighting how cognitive aspects might improve reengineering through knowledge and perception modelling. Eje: I - Workshop de Ingeniería de Software y Base de Dato...|$|R
50|$|Magellan {{products}} currently use Navteq based maps. Map <b>errors</b> are <b>handled</b> by the Navteq Map Reporter. Errors can {{be reported}} using the Navteq Map Reporter map feedback page.|$|R
25|$|Chromium 25.0 was {{released}} on 1 November 2012, with the initial release version 25.0.1313.0. This development cycle resulted in the release of Chrome 25.0.1364.97 for Windows and Linux and 25.0.1364.99 for macOS on 21 February 2013. This release introduced extension improvements, improved support for HTML5 time and date inputs, JavaScript Web Speech API support and improved WebGL <b>error</b> <b>handling,</b> plus many bug fixes.|$|E
25|$|Researchers at the University of Twente in the Netherlands {{have been}} {{conducting}} research on using BCIs for non-disabled individuals, proposing that BCIs could improve <b>error</b> <b>handling,</b> task performance, and user experience {{and that they could}} broaden the user spectrum. They particularly focused on BCI games, suggesting that BCI games could provide challenge, fantasy and sociality to game players and could, thus, improve player experience.|$|E
25|$|BITS {{includes}} a built-in mechanism for <b>error</b> <b>handling</b> and recovery attempts. Errors {{can be either}} fatal or transient; either moves a job to the respective state. A transient error is a temporary error that resolves itself after some time. For a transient error, BITS waits {{for some time and}} then retries. For fatal errors, BITS transfers control of the job to the creating application, with as much information regarding the error as it can provide.|$|E
5000|$|When {{importing}} DLL functions through declarations, VB {{will generate}} a run-time error if the [...] file cannot be found. The developer can catch the <b>error</b> and <b>handle</b> it appropriately.|$|R
5000|$|For instance, {{when two}} {{applications}} share Unicode data, but use different normal forms or use them incorrectly, in an incompatible way or without sharing a minimum set of interoperability specification, errors and data loss can result. For example, Mac OS X has many components that prefer or require only decomposed characters (thus decomposed-only Unicode encoded with UTF-8 {{is also known}} as [...] "UTF8-MAC"). In one specific instance, the combination of OS X <b>errors</b> <b>handling</b> composed characters, and the samba file- and printer-sharing software (which replaces decomposed letters with composed ones when copying file names), has led to confusing and data-destroying interoperability problems.|$|R
2500|$|<b>Error</b> & Exception <b>handling</b> (for all layers - GUI, Logic & Data) ...|$|R
25|$|XHTML was {{developed}} to make HTML more extensible and increase interoperability with other data formats. In addition, browsers were forgiving of errors in HTML, and most websites were displayed despite technical errors in the markup; XHTML introduced stricter <b>error</b> <b>handling.</b> HTML 4 was ostensibly an application of Standard Generalized Markup Language (SGML); however the specification for SGML was complex, and neither web browsers nor the HTML 4 Recommendation were fully conformant to it. The XML standard, approved in 1998, provided a simpler data format closer in simplicity to HTML 4. By shifting to an XML format, it was hoped HTML would become compatible with common XML tools; to work…}} servers and proxies {{would be able to}} transform content, as necessary, for constrained devices such as mobile phones.|$|E
500|$|Encountering a MissingNo. Pokémon is {{the result}} of three {{computing}} events. The first is the game's random battle encounter system; each area assigns values to Pokémon in a data buffer, which the game accesses for the player's encounters with wild Pokémon. However, no values are assigned to this buffer on the east coast of the Cinnabar and Seafoam Island locations—the information from the previously visited area is used instead. The second factor is the in-game tutorial, which temporarily stores the player's name in the data buffer. This causes the game to access the hexadecimal values of the player's name for Pokémon encounters at Cinnabar and Seafoam Island. The third factor is the game's <b>error</b> <b>handling</b> system; if the game selects a value from the data buffer that is not an existing Pokémon, a subroutine is triggered that causes the appearance of a Pokémon named MissingNo., short for [...] "Missing Number".|$|E
2500|$|Check control return {{codes and}} {{implement}} <b>error</b> <b>handling</b> mechanisms ...|$|E
5000|$|Risking the Truth: <b>Handling</b> <b>Error</b> in the Church (contributor), Christian Focus, 2009-05-20, ...|$|R
50|$|The maps used by Navigon are {{provided}} by Navteq. Map <b>errors</b> are <b>handled</b> by the Navteq Map Reporter. Errors can be reported using Navigon's report map errors page and also using the Navteq Map Reporter.|$|R
5000|$|... 6,918,059 - Method {{and system}} for <b>handling</b> <b>errors</b> in a {{distributed}} computer system ...|$|R
2500|$|For <b>error</b> <b>handling,</b> PowerShell {{provides}} a [...]NET-based exception-handling mechanism. In case of errors, objects containing {{information about the}} error (Exception object) are thrown, which are caught using the try ... catch construct (although a trap construct is supported as well). PowerShell can be configured to silently resume execution, without actually throwing the exception; {{this can be done}} either on a single command, a single session or perpetually.|$|E
2500|$|Software {{exception}} handling developed in Lisp in the 1960s and 1970s. This originated in LISP 1.5 (1962), where exceptions were {{caught by the}} ERRSET keyword, which returned NIL {{in case of an}} error, instead of terminating the program or entering the debugger. Error raising was introduced in MacLisp in the late 1960s via the ERR keyword. This was rapidly used not only for error raising, but for non-local control flow, and thus was augmented by two new keywords, CATCH and THROW (MacLisp June 1972), reserving ERRSET and ERR for <b>error</b> <b>handling.</b> The cleanup behavior now generally called [...] "finally" [...] was introduced in NIL (New Implementation of LISP) in the mid- to late-1970s as UNWIND-PROTECT. This was then adopted by Common Lisp. Contemporary with this was dynamic-wind in Scheme, which handled exceptions in closures. The first papers on structured {{exception handling}} were [...] and [...] Exception handling was subsequently widely adopted by many programming languages from the 1980s onward.|$|E
50|$|<b>Error</b> <b>handling</b> was {{researched}} extensively by Ravenclaw, {{which allows}} the author to manually control the <b>error</b> <b>handling</b> strategy in {{each part of the}} dialog.|$|E
2500|$|The {{official}} report identified eight critical <b>errors</b> of the <b>handling</b> of {{the hostage}} crisis: ...|$|R
50|$|The maps used by Garmin {{products}} are currently provided by Navteq. Map <b>errors</b> are <b>handled</b> using Navteq Map Reporter. Errors {{can be reported}} using Garmin's report a map error page, or by using the Navteq map reporter.|$|R
2500|$|Option {{types and}} Result types, {{alternative}} ways of <b>handling</b> <b>errors</b> in functional programming without exceptions ...|$|R
50|$|<b>Error</b> <b>handling</b> is non-local.|$|E
5000|$|Check control return {{codes and}} {{implement}} <b>error</b> <b>handling</b> mechanisms ...|$|E
5000|$|Basics: Initialization and Shutdown, Configuration Variables, <b>Error</b> <b>Handling,</b> Log Handling ...|$|E
50|$|ControllerSupervisor sends error {{messages}} to OrchestraHMI. Local <b>errors</b> are <b>handled</b> {{in the software}} components in which they take place. Errors beyond the local level are handled by the ControllerSupervisor instigating a safety procedure and or showing the error to the user.|$|R
40|$|An {{increasing}} {{level of}} automation changes the role of human operators also in the flight deck. Herewith, communication and coordination efforts between humans and automation gain importance as communication breakdowns may cause serious incidents and accidents. To ensure successful communication, it was proposed, on the one hand, to enhance the observability of automation. On the other hand, researchers analysed the impact of inter- and intraindividual differences in affect and mood states on the interaction. Within this study, it was investigated whether an experimental manipulation of the automation’s observability and of workload in addition to interindividual differences in mood states impacted human <b>errors</b> in <b>handling</b> automation. Therefore, 24 participants monitored aircraft automation and, more specifically, whether the automation succeeded in keeping the aircraft’s pitch angle within certain boundaries and whether the aircraft engines functioned as expected. The data analyses revealed significant effects of the automation’s observability and of the participants’ level of positive mood and extraversion {{on the number of}} <b>handling</b> <b>errors.</b> The <b>handling</b> <b>errors</b> were considered an indicator for communication breakdowns, as they were caused by the automation insufficiently informing the human on its actions. The results highlight the need to focus on the automation’s observability when designing highly automated systems especially in safety-critical domains and on further analysing the effects of mood states on human-automation interaction...|$|R
5000|$|Security {{awareness}} {{training for}} employees {{is one of}} the most effective means of reducing the potential for costly <b>errors</b> in <b>handling</b> sensitive information and protecting company information systems. Training can be conducted through a number of means and certain approaches are more effective than others: ...|$|R
