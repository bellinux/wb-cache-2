0|355|Public
40|$|This {{bachelor}} thesis {{deals with}} the problem of rasterization of <b>vector</b> <b>objects</b> on display devices (e. g. computer screen). The rasterization {{is one of the most}} important phenomena in computer graphics. The knowledge of mathematical equations and formulas which describe relevant <b>vector</b> <b>objects</b> is necessary to understand this phenomenon. This education software for the visual demonstration of rasterization was created to familiarize users with the rasterization principles of selected <b>vector</b> <b>objects...</b>|$|R
50|$|Features to come {{in future}} {{releases}} are Core Image support, the introduction of editable text layers and improved text rendering, and shapes and <b>vector</b> <b>objects.</b>|$|R
50|$|Like other web map libraries, {{the basic}} display model {{implemented}} by Leaflet is one basemap, plus zero or more translucent overlays, with zero or more <b>vector</b> <b>objects</b> displayed on top.|$|R
50|$|Older vector slime {{implementations}} kept old {{copies of}} the rendering result from simple <b>vector</b> <b>objects</b> in RAM, and selected scan-lines from the different buffers {{in order to make}} a time-displacement illusion over the y-axis.|$|R
5000|$|Distance and <b>vector</b> between <b>objects</b> should {{obey the}} minimum image criterion.This can be {{implemented}} according to the following code (in {{the case of a}} one-dimensional system where dx is the distance direction <b>vector</b> from <b>object</b> i to object j): ...|$|R
5000|$|Support {{for basic}} tools for vector {{illustration}} that includes rectangles, ellipses, lines, and polygons. Paths {{can also be}} created using the pen or pencil tool. The paint bucket tool {{can be used to}} fill bounded areas of <b>vector</b> <b>objects.</b>|$|R
40|$|The use of {{a hybrid}} raster-vector object {{oriented}} model is suggested {{in order to support}} generalization processes of urban city blocks taking advantage of the best qualities of the basic raster and <b>vector</b> models. The <b>objects</b> implemented are: pixels and groups of pixels (raster), proximity networks, streets (vector) and lines of sight (collection of <b>vector</b> <b>objects).</b> UML Scheme are shown and also an overview of the processes for deriving each object. ...|$|R
30|$|Let D = {(d,t,id(d))} be {{a set of}} |D| <b>vectors</b> (<b>objects)</b> d ∈R^p {{observed}} at time t associated with a process ID pid(d) that generates d. Note that two objects u and v in D may be generated by the same process, i.e., pid(u) = pid(v).|$|R
40|$|Description Basic class {{definitions}} and generics for external pointer based <b>vector</b> <b>objects</b> for R. A simple in-memory implementation is also provided. Collate init. R allocators. R index. R storage. R simpleStorage. R primitivevectors. R externalVector. R coerce. R matrixIndex. R indirect. R Groups. R basicFuns. R zzz. ...|$|R
40|$|We {{discuss the}} {{dynamics}} of interacting atomic bright solitons and dark bubbles in bulk immiscible Bose-Einstein condensates. Coherent matter-wave clusters can be constructed using dark-bright pairs with appropriate phases. In two dimensions we describe novel types of matter-wave molecules without a scalar counterpart {{that can be seen}} as bound states of <b>vector</b> <b>objects...</b>|$|R
2500|$|The zooming user {{interface}} (ZUI) is a related technology {{that promises to}} deliver the representation benefits of 3D environments without their usability drawbacks of orientation problems and hidden objects. It is a logical advance on the GUI, blending some three-dimensional movement with two-dimensional or 2.5D <b>vector</b> <b>objects.</b> In 2006, Hillcrest Labs introduced the first zooming {{user interface}} for television, ...|$|R
40|$|We {{discuss the}} {{dynamics}} of interacting dark-bright two-dimensional vector solitons in multicomponent immiscible bulk Bose-Einstein condensates. We describe matter-wave molecules without a scalar counterpart {{that can be seen}} as bound states of <b>vector</b> <b>objects.</b> We also analyze the possibility of using these structures as building blocks for the design of matter-wave switchers. Comment: 4 pages, 5 figure...|$|R
50|$|LIDAR Analyst is an {{automatic}} feature extraction application that uses airborne lidar (LIght raDAR) data to create three-dimensional <b>vector</b> <b>objects.</b> Users {{of the software}} include federal geospatial analysts, local community GIS managers, university researchers, and GIS service providers. The software is published by Textron Systems Geospatial Solutions, an operating unit of Textron Systems, a Textron Inc. (NYSE: TXT) company.|$|R
40|$|Introduction While the Java {{language}} {{has taken the}} world by storm, it has left the scientific computing community out in the cold. Java lacks the capability for multi-dimensional arrays that can be implemented efficiently, and more importantly, lacks {{the ability to use}} data layouts that are compatible with the wide variety of scientific subroutine packages available, such as the BLAS [3], ESSL [2], LAPACK [1], and so on. The problems {{stems from the fact that}} in Java, every non-scalar data item is an object, and every object must have an object header, typically two or three words long. Two-dimensional arrays are <b>vector</b> <b>objects</b> that contain a list of <b>vector</b> <b>objects</b> corresponding to the second dimension. Such a data organization is incompatible with the data layouts used by FORTRAN and C. Data access is also inherently less efficient because an extra indirection is required and it is impossible to traverse the array using a simple increment scheme. Java also lacks the ability to repr...|$|R
40|$|In {{this paper}} we {{introduce}} a new method for automatically identifying class invariants in object-oriented programs. We dene a category of class-invariant relations for Java programs and give a static analysis technique that nds binary relations in this category. Our experimental system, Bounder, demonstrates one application of this analysis technique: the identication of unnecessary array bounds checks in Java programs. 1 Introduction In the Java programming language there is a predened class named Vector {{which is used to}} collect lists of objects, especially when the programmer cannot tell in advance how large the list will be. A <b>Vector</b> <b>object</b> provides these methods (among others) : addElement(x) : add a new object x {{to the end of the}} list elementAt(i) : return the i'th object from the list indexOf(x,i) : return rst index of x after i in the list, or- 1 if none A <b>Vector</b> <b>object</b> does its job using two private pieces of data: elementData: an array of the objects in the list el [...] ...|$|R
50|$|The {{program is}} a vector art program that {{supports}} various graphics layers. The program supports various kinds of grids and measurement methods. It supports drawing <b>vector</b> <b>objects</b> with both straight and fractal lines, and has various line styles. It also supports grouping of objects into map symbols that are arranged in a symbol library. The library shipping with the program includes various symbols from contributors.|$|R
50|$|The game {{takes the}} {{original}} gameplay, graphics, sounds, {{from the first}} arcade game and updates them to fit the new movie. <b>Vector</b> <b>objects</b> are now much more noticeably detailed, and the asterisk-particle enemy shots resembling snowflakes from Star Wars are replaced with simpler and clearer vector star-shapes instead. The game was the third Star Wars arcade game; Return of the Jedi came out the previous year.|$|R
40|$|Abstract—This paper {{introduces}} low-cost non-intrusive sensory {{that can}} collect traffic data based on Raspberry Pi single board computer. Image information acquired by Raspberry Pi HD camera module is analyzed for moving objects presence. After evaluation of detected object count, size, class and motion <b>vector</b> <b>object</b> properties {{are sent to}} server node by RF transceiver. Sensor low-power consumption ensures possibility to operate from battery {{for an extended period}} of time. I...|$|R
40|$|International audienceAn {{ultrasonic}} {{method for}} simultaneous measurement of two-dimensional distributions of compositions and flow velocities {{in a system}} of two nonmixing fluids is proposed and implemented. The method is based on tomographic reconstruction of images of scalar and <b>vector</b> <b>objects</b> using a rectangular system of stationary transceivers. Images of simple objects (a vortex in a homogeneous fluid and a standing gravitational-capillary wave {{in a system of}} two nonmixing fluids) are obtained by this method...|$|R
30|$|The first module in the {{architecture}} flow reads storylines and creates RDDs from training or testing data read from disk and stores a dictionary of storyline terms {{along with their}} integer index for the band. The second module creates LabeledData and <b>Vector</b> <b>objects</b> with the indices and builds classifiers with training data RDDs if new training data is provided. The RDD operations for vectorizing storylines and training classifiers are all performed in parallel with storylines modeled as individual observations.|$|R
40|$|Inkscape is {{an example}} of an {{open-source}} program that can be used as free CAM application. The {{purpose of this article is}} to introduce the technique of CAM software use for CNC machines owned by the Computer Systems Laboratory. It is expected to support teaching and learning processes at Bina Nusantara University, especially for students of Computer Systems. This study discusses as follows: making PCB, making 2 -dimensional <b>vector</b> <b>object,</b> and making object of 2 -dimensional image...|$|R
40|$|The {{object of}} this work is to design and {{implement}} a vector editor with animation support. This program is designated for a very specialized group of users that want to create simple animations but find buying complex commercial tools unnecessary. The application will allow user to design basic <b>vector</b> <b>objects,</b> edit them and set them into motion using curved trajectories. Main features of the application are its modularity and flexibility, making it ready for future extending and customization...|$|R
5000|$|The GML Simple Features Profile {{is a more}} {{complete}} profile of GML than the above Point Profile and supports {{a wide range of}} <b>vector</b> feature <b>objects,</b> including the following: ...|$|R
40|$|Polygonal {{models in}} 3 D, {{generated}} from 2 D sectional imagery, are more flexible than volume visualizations, since as <b>vector</b> <b>objects</b> {{they can be}} flexibly scaled and manipulated. We discuss a semi-automated system which we have been evolving, in which a trained anatomist traces the detailed outline of a structure {{on a series of}} images, and from that series of contours a 3 D polygonal model is created. To make best use of the expert, the system can learn the characteristics of their tracing from exemplars, and automatically trace ahead to ease and speed their task...|$|R
40|$|CUBLAS is an {{implementation}} of BLAS (Basic Linear Algebra Subprograms) {{on top of}} the CUDA driver. The library is self-contained at the API level, that is, no direct interaction with the CUDA driver is necessary. The basic model by which applications use the CUBLAS library is to: •create matrix and <b>vector</b> <b>objects</b> in GPU memory space, •fill them with data, •call a sequence of CUBLAS functions, •download the results from GPU memory space back to the host. CUBLAS provides helper functions for creating and destroying objects in GPU space, and for writing data to and retrieving data from these objects...|$|R
40|$|This article {{deals with}} car-like vehicle {{location}} (with submeter accuracy level) using an enhanced map, GPS solutions, odometer and gyroscope measurements. An enhanced map contains <b>vector</b> <b>objects</b> similar to computer aided road construction data, typically clothoids in 2 D, {{for which the}} projection process (or map-matching) is not explicit and time consuming. So, one proposes a model and an algorithm of bayesian particle filtering that make it possible simultaneous positioning and mapmatching : actually, this model directly considers the map data {{in the definition of}} its state vector. Simulation are included in this article as a first proof on concept...|$|R
5000|$|The actual {{assignment}} {{of the individual}} cell identifiers to <b>vector</b> <b>objects</b> whose position is expressed in latitude, longitude coordinates follows rules described in reference (1) and the c-squares website and can be automated via simple routines, and the reverse is also possible (decoding) in a straightforward manner. In addition, since the codes are hierarchical and interleaved (each [...] "cycle" [...] containing identifiers for both longitude and latitude, at progressively finer levels of resolution), only the relevant [...] "leading" [...] portion of a (for example) high resolution code need be interrogated to match a lower resolution spatial query.|$|R
5000|$|Perl Data Language (abbreviated PDL) {{is a set}} of free {{software}} array programming extensions to the Perl programming language. PDL extends the data structures built into Perl, to include large multidimensional arrays, and adds functionality to manipulate those arrays as <b>vector</b> <b>objects.</b> It also provides tools for image processing, computer modeling of physical systems, and graphical plotting and presentation. Simple operations are automatically vectorized across complete arrays, and higher-dimensional operations (such as matrix multiplication) are supported. On a computer with both Perl and PDL installed, any Perl script can use the PDL functionality by declaring [...] "use PDL;".|$|R
40|$|The way of multisensory data {{integration}} {{is a crucial}} step of any data fusion method. Different physical types of sensors (optic, thermal, acoustic, or radar) with different resolutions, and different types of GIS digital data (<b>elevation,</b> <b>vector</b> map) require a proper method for {{data integration}}. Incommensurability of the data may not allow to use conventional statistical methods for fusion and processing of the data. A correct and established way of multisensory data integration is required {{to deal with such}} incommensurable data as the employment of an inappropriate methodology may lead to errors in the fusion process. To perform a proper multisensory data fusion several strategies were developed (Bayesian, linear (log linear) opinion pool, neural networks, fuzzy logic approaches). Employment of these approaches is motivated by weighted consensus theory, which lead to fusion processes that are correctly performed for the variety of data properties...|$|R
40|$|In group communications, larger {{computation}} {{and communication}} are consumed to causally order all the messages transmitted in the network. Transactions in clients manipulate objects in servers by sending {{read and write}} requests to the servers. In this paper, we define significant messages by using the relation among the transactions. We newly propose an <b>object</b> <b>vector</b> to causally order only the significant messages. The scheme of the <b>object</b> <b>vector</b> is invariant in the change of the group membership. We also show a TBCO (transaction-based causally ordered) protocol which adopts the <b>object</b> <b>vector,</b> by which the number of messages to be causally ordered are reduced. 1...|$|R
40|$|In group protocols, larger {{computation}} {{and communication}} are consumed to causally order all messages transmitted in the network. Transactions in clients manipulate objects in servers by sending {{read and write}} requests to the servers. In this paper, we define significant messages, which are to be ordered at the application level, by using a conflicting relation among the transactions. We newly propose an <b>object</b> <b>vector</b> to causally order only the significant messages. The scheme of the <b>object</b> <b>vector</b> is invariant in the change of the group membership. We also show a TBCO (transactionbased causally ordered) protocol adopting the <b>object</b> <b>vector,</b> by which the number of messages to be causally ordered are reduced. ...|$|R
5000|$|... where [...] is {{the set of}} all type 3 objects, [...] is {{the fuzzy}} {{membership}} <b>vector</b> of <b>object</b> , [...] is the set of nearest neighbors of , and [...] with [...] are the coefficients reflecting the relative proximities of the nearest neighbors.|$|R
40|$|PyTrilinos {{is a set}} of Python {{interfaces}} to compiled Trilinos packages. This collection supports serial {{and parallel}} dense linear algebra, serial and parallel sparse linear algebra, direct and iterative linear solution techniques, algebraic and multilevel preconditioners, nonlinear solvers and continuation algorithms, eigensolvers and partitioning algorithms. Also included are a variety of related utility functions and classes, including distributed I/O, coloring algorithms and matrix generation. PyTrilinos <b>vector</b> <b>objects</b> are compatible with the popular NumPy Python package. As a Python front end to compiled libraries, PyTrilinos takes advantage of the flexibility and ease of use of Python, and the efficiency of the underlying C++, C and Fortran numerical kernels. This paper covers recent, previously unpublished advances in the PyTrilinos package...|$|R
5000|$|Before Java 6, {{the virtual}} machine always locked objects and blocks {{when asked to}} by the program, {{even if there was}} no risk of an object being {{modified}} by two different threads at once. For example, in this case, a local [...] was locked before each of the add operations to ensure {{that it would not be}} modified by other threads (vector is synchronized), but because it is strictly local to the method this is needless:public String getNames (...) { Vector v = new Vector (...) v.add("Me"); v.add("You"); v.add("Her"); return v.toString (...)}Starting with Java 6, code blocks and objects are locked only when needed, so in the above case, the virtual machine would not lock the <b>Vector</b> <b>object</b> at all.|$|R
40|$|We {{extend the}} results for {{asymptotic}} s-channel vertices in terms of covariant couplings to high spin fermion and boson production. The formalism is applied to diffraction, considered as proceeding by pomeron exchange. It is found that the pomeron couples {{in a similar manner}} to a <b>vector</b> <b>object.</b> In particular the hypothesis is made that the pomeron coupling to the N → N* vertex is XB. This is supported by fits to the N → N* (31 / 2, 1520; 51 / 2 (^+) 1688) data. The behaviour of the pomeron as a <b>vector</b> <b>object</b> is understood in the quark model and it is seen that most of the fernion data can be described in an SU(6) w quark model. The breakdown of the approach for boson diffraction dissociation is noted, as spin orbit terms are needed to reproduce the data. A relativistic quark model is presented for mesons with spin 1 / 2 quarks which is closely related to the non-relativistic harmonic oscillator model. The conventional quark model spectrum is reproduced with particles lying on straight Regge trajectories, although the masses predicted for the PC = + | states are large. The most interesting feature of the wave-functions is the natural inclusion of spin-orbit terms which is suggestive of the "current'' quark approach. The comparison of the model predictions with the data is encouraging and they include meson decay widths for emission of a pseudoscalar or a photon. Diffraction dissociation is also considered in- the model and the inclusion of spin-orbit interaction rectifies some of the difficulties of the SU(o) model applied to meson dissociation...|$|R
3000|$|... 0 <p< 1 -norm of the <b>object</b> <b>vector</b> {{which is}} sparse can obtain {{a more precise}} result than {{minimizing}} its l [...]...|$|R
