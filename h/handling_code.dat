90|313|Public
2500|$|In its whole, {{exception}} <b>handling</b> <b>code</b> {{might look}} like this (in Java-like pseudocode; note that an exception type called EmptyLineException {{would need to be}} declared somewhere): ...|$|E
2500|$|An ESB {{mediation}} flow {{is one of}} the [...] component {{types in}} a Service Component Architecture (SCA). Like any SCA component, the program accesses a mediation flow through exports that it provides, and the mediation flow forwards messages to other external services via imports. Special kinds of imports and exports for JMS, called JMS bindings, enable developers to specify the binding configuration and write data <b>handling</b> <b>code.</b> The mediation flow consists of a series of mediation primitives that manipulate messages as they flow through the bus.|$|E
2500|$|Numerous {{violations}} of existing codes {{contributed to the}} calamity, triggering an immediate effort to strengthen fire code protections. Within weeks of the disaster, an emergency meeting was called for the National Fire Protection Association committee <b>handling</b> <b>code</b> for [...] "assembly occupancies". Based upon its work, Tentative Interim Amendments (TIAs) were issued for the national standard [...] "Life Safety Code" [...] (NFPA 101), in July 2003. The TIAs required automatic fire sprinklers in all nightclubs and similar locations with 100 or more occupants, plus additional crowd manager personnel, among other things. These TIAs were subsequently incorporated into the 2006 edition of NFPA 101, along with additional exit requirements for new nightclub occupancies. [...] It is left for each state or local jurisdiction to legally enact and enforce the current code changes.|$|E
50|$|All MODTRAN code {{development}} and maintenance is currently performed by Spectral Sciences while the Air Force <b>handles</b> <b>code</b> validation and verification. MODTRAN6 {{may be obtained}} from Spectral Sciences, Inc.|$|R
25|$|The {{check-in}} concourse, {{located on}} the upper floor, contains 72 check-in counters and 18 self-service kiosks, as well as ticket offices for the various airlines operating out of the airport. Passengers pass through separate domestic and international security checkpoints before proceeding to the departure lounges and boarding gates. The airport has 34 aircraft parking bays and 16 jet bridges. Four of the jet bridges (gates A20-A23) can be combined into groups of two to <b>handle</b> <b>Code</b> F aircraft (e.g. an Airbus A380) or can be used separately to <b>handle</b> four <b>Code</b> C aircraft (e.g. an Airbus A320 or Boeing 737). The remainder are capable of <b>handling</b> one <b>Code</b> C aircraft each.|$|R
40|$|This {{analysis}} {{assesses the}} way ecology journals <b>handle</b> <b>code</b> and software written for scientific research. The {{results of the}} analysis were used to create Figure 1 in Mislan et al. (2016). Please cite the following paper if you use this data/code: Mislan, K. A. S., J. M. Heer, and E. P. White. (2016) Elevating the status of code in ecology. Trends in Ecology and Evolution. [URL]...|$|R
5000|$|The {{persistent}} {{connection of}} the MySQLi extension however provides built-in cleanup <b>handling</b> <b>code.</b> The cleanup {{carried out by}} MySQLi includes: ...|$|E
50|$|Fault {{injection}} may {{be necessary}} to ensure that all conditions and branches of exception <b>handling</b> <b>code</b> have adequate coverage during testing.|$|E
5000|$|... begin # do somethingrescue Exception # Exception <b>handling</b> <b>code</b> here. # Don't write only [...] "rescue"; {{that only}} catches StandardError, a {{subclass}} of Exception.end ...|$|E
50|$|Integrator workflow, {{also known}} as Integration Manager Workflow, is a method to <b>handle</b> source <b>code</b> {{contributions}} in work environments using distributed version control.|$|R
30|$|Data <b>handling,</b> <b>coding</b> {{and storing}} {{should be part}} of the {{experimental}} design. The sample sizes and the power of the study including the reasoning for their choice, the level of significance, procedures to deal with missing data or errors in measurement should be clearly outlined. There must be clear statement of how the data will be analyzed. Although many statistical tests may take place at the end of the study, these will be only complimentary. The main statistical tests that answer core questions of the study should be certainly chosen and stated in the experimental design protocol.|$|R
5000|$|... {{coordination}} of parental control PIN <b>code</b> <b>handling</b> between CAM and its host ...|$|R
50|$|Anonymous inner {{classes are}} also used where the event <b>handling</b> <b>code</b> is only used by one {{component}} and therefore does not need a named reference.|$|E
5000|$|In its whole, {{exception}} <b>handling</b> <b>code</b> {{might look}} like this (in Java-like pseudocode; note that an exception type called [...] {{would need to be}} declared somewhere): ...|$|E
5000|$|Using callbacks on signals, libevent {{makes it}} {{possible}} to write [...] "secure" [...] signal handlers as none of the user supplied signal <b>handling</b> <b>code</b> runs in the signal's context.|$|E
50|$|The {{upgrade to}} <b>handle</b> these <b>code</b> 4E {{aircraft}} {{is scheduled for}} completion {{at the end of}} 2017. Once the annual passenger movements exceed 350,000, Airport Rescue and Fire Fighting services will need to be provided.|$|R
40|$|A code-based {{cryptosystem}} {{is considered}} secure if {{the best known}} attack against it is information-set decoding. Stern’s algorithm and its improvements are well optimized and the complexity is reasonably well understood. However, these algorithms only <b>handle</b> <b>codes</b> over F 2. This paper presents a generalization of Stern’s information-set-decoding algorithm for decoding linear codes over arbitrary finite fields Fq and analyzes the complexity. This result {{makes it possible to}} compute the security of recently proposed code-based systems over non-binary fields. As an illustration, ranges of parameters for generalized McEliece cryptosystems using classical Goppa codes over F 31 are suggested for which the new information-set-decoding algorithm needs 2 128 bit operations...|$|R
50|$|Local mail is <b>handled</b> at ZIP <b>code</b> 13066 in {{the nearby}} Village of Fayetteville.|$|R
50|$|Error {{codes are}} slowly disappearing from the programmer's {{environment}} as modern object-oriented programming languages {{replace them with}} exceptions. Exceptions {{have the advantage of}} being handled with explicit blocks of code, separate {{from the rest of the}} code. While it is considered poor practice in methodologies that use error codes and return codes to indicate failure, programmers often neglect to check return values for error conditions. That negligence can cause undesirable effects, as ignored error conditions often cause more severe problems later in the program. Exceptions are implemented in such a way as to separate the error <b>handling</b> <b>code</b> from the rest of the code. Separating the error <b>handling</b> <b>code</b> from the normal logic makes programs easier to write and understand, since one block of error <b>handling</b> <b>code</b> can service errors from any number of function calls. Exception handling also makes the code more readable than implementations with error codes, since exception handling does not disrupt the flow of the code with frequent checks for error conditions.|$|E
50|$|Gears {{does not}} support {{attachment}} files with sizes greater than 2 GB under Mac OS X Leopard or Snow Leopard currently due to a bug in the Blob <b>handling</b> <b>code.</b>|$|E
5000|$|In Java, {{access to}} a null {{reference}} triggers a [...] (NPE), which can be caught by error <b>handling</b> <b>code,</b> but the preferred practice {{is to ensure that}} such exceptions never occur.|$|E
50|$|Documentation {{problems}} can be handled in formal ways just {{the same way as}} the coding problems. Defect reporting tools and tracking tools are the common solutions for handling defects just like as they are <b>handled</b> in <b>code.</b>|$|R
40|$|International audienceRuntime loop {{optimization}} and speculative execution {{are becoming}} more and more prominent to leverage performance in the current multi-core and many-core era. However, a wider and more efficient use of such techniques is mainly hampered by the prohibitive time overhead induced by centralized data race detection, dynamic code behavior modeling and code generation. Most of the existing Thread Level Speculation (TLS) systems rely on slicing the target loops into chunks, and trying to execute the chunks in parallel with the help of a centralized performance-penalizing verification module that takes care of data races. Due to the lack of a data dependence model, these speculative systems are not capable of doing advanced transformations and, more importantly, the chances of rollback are high. The polytope model is a well known mathematical model to analyze and optimize loop nests. The current state-of-art tools limit the application of the polytope model to static control codes. Thus, none of these tools can <b>handle</b> <b>codes</b> with while loops, indirect memory accesses or pointers. Apollo (Automatic POLyhedral Loop Optimizer) is a framework that goes one step beyond, and applies the polytope model dynamically by using TLS. Apollo can predict, at runtime,whether the codes are behaving linearly or not, and applies polyhedral transformations on-the-fly. This paper presents a novel system, which extends the capability of Apollo to <b>handle</b> <b>codes</b> whose memory accesses are not necessarily linear. More generally, this approach expands the applicability of the polytope model at runtime to a wider class of codes...|$|R
50|$|App Engine's {{infrastructure}} removes many of {{the system}} administration and development challenges of building applications to scale to hundreds of requests per second and beyond. Google <b>handles</b> deploying <b>code</b> to a cluster, monitoring, failover, and launching application instances as necessary.|$|R
5000|$|DRAKON {{initially}} uses drakon-chart, {{which is}} initially {{based on a}} formalization of a traditional flowchart yet with additional functionality for <b>handling</b> <b>code</b> in text language. This technique allows to produce and keep readable flowchart at hand simultaneously with process of making the program in question.|$|E
5000|$|The Royal High School {{was playing}} a form of [...] "football" [...] by 1810 (the word [...] "football" [...] here {{referring}} to a <b>handling</b> <b>code,</b> rather than one like soccer). The Royal High played the first inter-school match with Merchiston in 1858. The Royal High FP club was formally organised in 1867, and was a founder member of the Scottish Football Union (future SRU) in 1873.|$|E
50|$|Since IRC scripts {{are used}} to {{interface}} with a public network, they are a favourable target for attack. Event <b>handling</b> <b>code</b> must be careful when dealing with input received from other IRC users; a poorly written IRC script may leave the user vulnerable, allowing attackers to possibly read the user's passwords or private conversations, execute arbitrary commands in the user's IRC client, or access files on the user's hard disk.|$|E
40|$|Thread-Level Speculation (TLS) is {{a dynamic}} and {{automatic}} parallelization strategy allowing to <b>handle</b> <b>codes</b> that cannot be parallelized at compile-time, because of insufficient {{information that can be}} extracted from the source code. However, the proposed TLS systems are strongly limited in the kind of parallelization they can apply on the original sequential code. Consequently, they often yield poor performance. In this paper, we give the main reasons of their limits and show that it is possible in some cases for a TLS system to handle more advanced parallelizing transformations. In particular, it is shown that codes characterized by phaseswhere the memory behavior can be modeled by linearfunctions, can take advantageof a dynamic use of the polytope model...|$|R
5000|$|Healthcare professions {{are some}} of the fastest growing career fields, and {{opportunities}} in the health profession will continue to grow. SoCal ROC offers a study of exciting career pathways in the healthcare industry. Students are engaged in real-world learning in SoCal ROC's state-of-the-art medical and dental classrooms. They acquire industry-current knowledge and practical skills that include anatomy, physiology, medical terminology, surgical preparation, pharmaceutical measurements, sanitation, injections, procedures, health and safety procedures, office procedures, transcribing, animal <b>handling,</b> <b>coding,</b> law and ethics, patient relations, and child development. Then, they apply their skills at job sites in the South Bay as part of their [...] "On-the-Job Training". Students also learn how to interpret and communicate with the deaf.|$|R
40|$|Telecommunication Systems {{currently}} in operation {{make use of}} multiple connection {{in order to enhance}} the service reliability and to reduce electromagnetic field levels. Connection is <b>handled</b> by <b>coded</b> signals, in often unstable multipath condition, and, in some case, by smart and/or multitasking antennas. WTuC 19...|$|R
50|$|An ESB {{mediation}} flow {{is one of}} {{the component}} types in a Service Component Architecture (SCA). Like any SCA component, the program accesses a mediation flow through exports that it provides, and the mediation flow forwards messages to other external services via imports. Special kinds of imports and exports for JMS, called JMS bindings, enable developers to specify the binding configuration and write data <b>handling</b> <b>code.</b> The mediation flow consists of a series of mediation primitives that manipulate messages as they flow through the bus.|$|E
50|$|The {{first ground}} is {{recorded}} {{as being a}} large field next to the Alexandra Cricket Club in Manchester Road, which from an ordnance survey map at the time appears behind Hartwood Road area with access off Roe Lane. The club {{was one of several}} playing the <b>handling</b> <b>code</b> in the town, and other teams under the titles Southport Olympic, Southport Wasps, Southport Hornets and The Grasshoppers are recorded. The fixture list included Birkenhead Park FC away, a drawn game, no score, with teams twenty a side.|$|E
50|$|In the {{following}} example (using Symbolics Genera) the user tries to open a file in a Lisp function test called from the Read-Eval-Print-LOOP (REPL), when the file does not exist. The Lisp system presents four restarts. The user selects the Retry OPEN using a different pathname restart and enters a different pathname (lispm-init.lisp instead of lispm-int.lisp). The user code does not contain any error <b>handling</b> <b>code.</b> The whole error handling and restart code {{is provided by the}} Lisp system, which can handle and repair the error without terminating the user code.|$|E
5000|$|At the moment, the tooling of the wasm {{compiler}} system internally uses s-expressions (for parsing simplicity {{as well as}} extra {{information that}} [...] "linear assembly bytecode" [...] representation does not contain) to <b>handle</b> intermediate <b>code.</b> An example is shown below (updated to the current format): ...|$|R
5000|$|Distribution for the band's {{independently}} released CD and downloads {{was once}} again <b>handled</b> by <b>CODE</b> 7/Plastic Head Distribution with the band keen {{to build on the}} working relationship that began with their A Monument To The Death Of An Idea and [...] "Namyamka" [...] releases.|$|R
40|$|International audienceThread-Level Speculation (TLS) is {{a dynamic}} and {{automatic}} parallelization strategy allowing to <b>handle</b> <b>codes</b> that cannot be parallelized at compile-time, because of insufficient {{information that can be}} extracted from the source code. However, the proposed TLS systems are strongly limited in the kind of parallelization they can apply on the original sequential code. Consequently, they often yield poor performance. In this paper, we give the main reasons of their limits and show that it is possible in some cases for a TLS system to handle more advanced parallelizing transformations. In particular, it is shown that codes characterized by phases where the memory behavior can be modeled by linear functions, can take advantage of a dynamic use of the polytope model...|$|R
