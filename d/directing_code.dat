0|861|Public
40|$|In {{a dynamic}} environment, {{it is very}} {{difficult}} to obtain the optimal schedule within a short time, if an optimal schedule can be obtained at all. This paper presents an application of <b>direct</b> <b>coding</b> genetic algorithm to rapidly construct a new schedule for the shop floor when the fitness functions include features that address both efficiency and stability. This is accomplished by implementing the scheduling heuristic and modified <b>direct</b> <b>coding</b> genetic algorithm resolution procedure in a simulated job shop. The results demonstrate that using <b>direct</b> <b>coding</b> genetic algorithm can provide better and faster schedule compared with other algorithm...|$|R
50|$|The Drupal Association {{does not}} control or <b>direct</b> <b>code</b> {{development}} of Drupal.|$|R
5000|$|RE/flex - a fast {{variant of}} lex/flex for C++ generates {{scanners}} with tables or <b>direct</b> <b>code</b> ...|$|R
50|$|KompoZer's WYSIWYG editing {{capabilities}} {{are one of}} the main attractions of the software. In addition, KompoZer allows <b>direct</b> <b>code</b> editing as well as a split code-graphic view.|$|R
40|$|Motivation: International {{sequencing}} {{efforts are}} creating huge nucleotide databases, {{which are used}} in searching applications to locate sequences homologous to a query sequence. In such applications, it is desirable that databases are stored compactly, that sequences can be accessed independently of {{the order in which}} they were stored, and that data can be rapidly retrieved from secondary storage, since disk costs are often the bottleneck in searching. Results: We present a purpose-built <b>direct</b> <b>coding</b> scheme for fast retrieval and compression of genomic nucleotide data. The scheme is lossless, readily integrated with sequence search tools, and does not require a model. <b>Direct</b> <b>coding</b> gives good compression and allows faster retrieval than with either uncompressed data or data compressed by other methods, thus yielding significant improvements in search times for high-speed homology search tools. Availability: The <b>direct</b> <b>coding</b> scheme (cino) is available free of charge by anonymous ftp from goanna. cs. rmit. edu. au in the directoiy publrmitlcino. Contact...|$|R
5000|$|D {{picture or}} D frame (DC <b>direct</b> <b>coded</b> picture) - {{serves as a}} fast-access {{representation}} of a picture for loss robustness or fast-forward. D pictures are only used in MPEG-1 video.|$|R
40|$|TD-FALCON is a {{self-organizing}} {{neural network}} that incorporates Temporal Difference (TD) methods for reinforcement learning. Despite {{the advantages of}} fast and stable learning, TD-FALCON still relies on an iterative process to evaluate each available action in a decision cycle. To remove this deficiency, this paper presents a <b>direct</b> <b>code</b> access procedure whereby TD-FALCON conducts instantaneous searches for cognitive nodes that match with the current states {{and at the same}} time provide maximal reward values. Our comparative experiments show that TD-FALCON with <b>direct</b> <b>code</b> access produces comparable performance with the original TD-FALCON while improving significantly in computation efficiency and network complexity. ...|$|R
50|$|With Claude Chabrol, Hanin co-wrote {{the scripts}} {{for a pair}} of spy films in the mid-1960s. Chabrol <b>directed</b> <b>Code</b> Name: Tiger (1964) and Our Agent Tiger (1965), both {{featuring}} Hanin in the starring role of secret agent Le Tigre.|$|R
40|$|To {{assess how}} future {{progress}} in gravitational microlensing computation at high optical depth {{will rely on}} both hardware and software solutions, we compare a <b>direct</b> inverse ray-shooting <b>code</b> implemented on a graphics processing unit (GPU) with both a widely-used hierarchical tree code on a single-core CPU, and a recent implementation of a parallel tree code suitable for a CPU-based cluster supercomputer. We examine {{the accuracy of the}} tree codes through comparison with a <b>direct</b> <b>code</b> over a much wider range of parameter space than has been feasible before. We demonstrate that all three codes present comparable accuracy, and choice of approach depends on considerations relating to the scale and nature of the microlensing problem under investigation. On current hardware, there is little difference in the processing speed of the single-core CPU tree code and the GPU <b>direct</b> <b>code,</b> however the recent plateau in single-core CPU speeds means the existing tree code is no longer {{able to take advantage of}} Moore's law-like increases in processing speed. Instead, we anticipate a rapid increase in GPU capabilities in the next few years, which is advantageous to the <b>direct</b> <b>code.</b> We suggest that progress in other areas of astrophysical computation may benefit from a transition to GPUs through the use of " brute force" algorithms, rather than attempting to port the current best solution directly to a GPU language - for certain classes of problems, the simple implementation on GPUs may already be no worse than an optimised single-core CPU version...|$|R
30|$|The same {{behavior}} {{was observed in}} uuid and Plivo-node. However, in the gulp-cccr, express-ifttt, jade, xml 2 js, and Node-Browserify libraries, the relevant factor {{was the lack of}} <b>direct</b> <b>code</b> coverage of the removed functions. To illustrate the situation, we will use the uuid library as an example.|$|R
5000|$|Government {{hopes to}} {{implement}} <b>direct</b> tax <b>code</b> from April 2011.|$|R
5000|$|The {{international}} <b>direct</b> dial <b>code</b> for toll-free international {{phone calls}} ...|$|R
40|$|The {{relative}} {{merits of}} implementing high level programming languages {{by means of}} interpretation or compilation are discussed. The properties and the applicability of interpretation techniques known as classical interpretation, <b>direct</b> threaded <b>code</b> and indirect threaded code are described and compared. KEY WORDS Interpretation versus compilation Interpretation techniques Instruction encoding <b>Code</b> generation <b>Direct</b> threaded <b>code</b> Indirect threaded code...|$|R
50|$|PaX flags data {{memory as}} non-executable, program memory as non-writable and {{randomly}} arranges the program memory. This effectively prevents many security exploits, such as {{some kinds of}} buffer overflows. The former prevents <b>direct</b> <b>code</b> execution absolutely, while the latter makes so-called return-to-libc (ret2libc) attacks difficult to exploit, relying on luck to succeed, but doesn't prevent overwriting variables and pointers.|$|R
50|$|CMS-2 was {{designed}} to encourage program modularization, permitting independent compilation of portions of a total system. The language is statement oriented. The source is free-form and may be arranged for programming convenience. Data types include fixed-point, floating-point, boolean, character and status. Direct reference to, and manipulation of character and bit strings is permitted. Symbolic machine code may be included, known as <b>direct</b> <b>code.</b>|$|R
40|$|This paper explores a {{representational}} technique which, through <b>direct</b> <b>code</b> analysis, maps the program's control component into a canonical database, {{a reduced}} ordered binary decision diagram (ROBDD), which fully enables the compiler to utilize and manipulate predication. This abstraction is then applied {{to optimize the}} program's control component, transforming it into a form more amenable to instruction level parallel (ILP) executio...|$|R
50|$|For {{a time he}} was {{attached}} to <b>direct</b> Source <b>Code</b> and The Dark Crystal 2.|$|R
50|$|The {{last two}} digits, called the <b>Direct</b> Selection <b>code</b> {{correspond}} {{to one or}} more postal districts.|$|R
50|$|However, this Act {{may soon}} be {{repealed}} and be replaced with a new Act consolidating the law relating to Income Tax and Wealth Tax, the new proposed legislation is called the <b>Direct</b> Taxes <b>Code</b> (to become the <b>Direct</b> Taxes <b>Code,</b> Act 2010). Act was referred to Parliamentary standing committee which has submitted its recommendations. Act {{is expected to be}} implemented with changes from the Financial Year 2013-14.|$|R
40|$|In {{this paper}} we obtain a lower bound of {{exponent}} of average {{probability of error}} for classical quantum multiple access channel, which implies that for all rate pairs in the capacity region is achievable by a code with exponential probability of error. Thus we re-obtain the <b>direct</b> <b>coding</b> theorem. Comment: We found a serious gap and could not fix it. So, we withdraw this pape...|$|R
50|$|QEP (Quantum Event Processor) is a {{universal}} UML-compliant event processor that enables <b>direct</b> <b>coding</b> of UML state machines (UML statecharts) in highly maintainable C or C++, in which every state machine element is mapped to code precisely, unambiguously, and exactly once (traceability). QEP fully supports hierarchical state nesting, which enables reusing behavior across many states instead of repeating the same actions and transitions over and over again.|$|R
40|$|The <b>direct</b> mode <b>coding</b> in the bi-predictive {{pictures}} (B-pictures) can efficiently {{improve the}} performance of bi-predictive coding, because it exploits the temporal correlation by bi-directional prediction from both forward and backward reference pictures, and meanwhile {{it does not require}} any bits for coding the motion vectors. Accordingly, how to accurately calculate the motion vectors in terms of <b>direct</b> mode <b>coding</b> is very important to obtain better prediction values. In other words, it is more desirable to obtain the true motion vectors, because the derived motion vectors need not be <b>coded.</b> The traditional <b>direct</b> mode <b>coding</b> usually derives the motion vector of the current block by scaling the motion vector of the co-located block in the subsequent reference picture. It {{is based on the assumption}} that the near blocks would have the same motion trajectory. In this paper, we present an improved method based on combining motion vector tracking technique and spatial motion vector prediction technique. The proposed method can accurately calculate the motion vectors for the <b>direct</b> mode <b>coding...</b>|$|R
40|$|A central task {{in visual}} object {{recognition}} applications {{is the choice}} of a proper feature space. Inspired from the human neural vision system we suggest hierarchical features for 3 D object recognition, which we optimize using evolution strategies. We compare different evolutionary design approaches for the hierarchical feature generation: <b>Direct</b> <b>coding</b> versus a biologically more plausible indirect coding using unsupervised local learning. A comparison to state-of-the-art recognition approaches shows the competitiveness of our approach. ...|$|R
40|$|Abstract. A {{key problem}} in {{designing}} artificial neural networks for visual object recognition tasks {{is the proper}} choice of the network architecture. Evolutionary optimization methods can help to solve this problem. In this work we compare different evolutionary optimization approaches for a biologically inspired neural vision system: <b>Direct</b> <b>coding</b> versus a biologically more plausible indirect coding using unsupervised local learning. A comparison to state-of-the-art recognition approaches shows the competitiveness of our approach. ...|$|R
40|$|Abstract—We {{consider}} {{a class of}} finite-state Markov channels with feedback. We first introduce a simplified equivalent channel model, and then construct the optimal stationary and nonsta-tionary input processes that maximize the long-term directed mutual information. Furthermore, we give a sufficient condition under which the channel’s Shannon capacity {{can be achieved by}} a stationary input process. The corresponding converse <b>coding</b> theorem and <b>direct</b> <b>coding</b> theorem are proved. Index Terms—Channel capacity, feedback, Markov channel, typicality...|$|R
40|$|AbstractWe {{consider}} the LDLT factorization of sparse skew symmetric matrices. We {{see that the}} pivoting strategies are similar, but simpler, to those used in the factorization of sparse symmetric indefinite matrices, and we briefly describe the algorithms used in a forthcoming <b>direct</b> <b>code</b> based on multifrontal techniques for the factorization of real skew symmetric matrices. We show how this factorization can be very efficient for preconditioning matrices that have a large skew component...|$|R
40|$|We {{consider}} {{a class of}} finite-state Markov channels with feedback. After introducing a troduce a simplified equivalent channel model, we construct the optimal stationary and nonstationary input processes that maximize the long-term directed mutual information. Furthermore, we give a sufficient condition under which the channel’s Shannon capacity {{can be achieved by}} a stationary input process. The corresponding converse <b>coding</b> theorem and <b>direct</b> <b>coding</b> theorem are proved. Index Terms—Channel capacity, Markov channel, feedback, typicality. I...|$|R
40|$|Abstract-The ongoing {{exponential}} {{increase of}} genomic data, together with full diploid human genomes, creates new challenges {{not only for}} understanding genomic structure, function and development, {{but also for the}} storage, navigation and privacy of genomic data. In this paper, we have proposed a modified <b>Direct</b> Differential <b>Coding</b> algorithm. It is a general purposed nucleotide compression algorithm based on variable length LUT. Here the method identifies repeat regions in the individual sequence and the repeat regions are store in the lookup table (LUT). This algorithm compresses both repeat and non repeat sequences. It also handles the non base character and compresses any nucleotide sequences. It gives better result as compared to existing algorithm. The Differential <b>Direct</b> <b>Coding</b> algorithm was a fixed size lookup table algorithm i. e. it used a table of fixed size containing th...|$|R
50|$|The {{resulting}} list of pointers to functions {{is almost}} identical to <b>direct</b> threaded <b>code,</b> and is conceptually similar to a control table.|$|R
5000|$|Conversion of {{the source}} <b>code</b> into <b>direct</b> {{threaded}} <b>code</b> that frees the processor from repeatedly translating the BASIC instructions into program calls ...|$|R
40|$|With the {{continuing}} {{growth of the}} Internet and network protocols, {{there is a need}} for Protocol Development Environments. Simulation environments like ns and OPNET require protocol code to be rewritten in a discrete event model. <b>Direct</b> <b>Code</b> Execution Environments (DCEE) solve the Verification and Validation problems by supporting the execution of unmodified protocol code in a controlled environment. Open Network Emulator (ONE) is a system supporting <b>Direct</b> <b>Code</b> Execution in a parallel environment- allowing unmodified protocol code to run on top of a parallel simulation layer, capable of simulating complex network topologies. Traditional approaches to the problem of Parallel Discrete Event Simulation (PDES) broadly fall into two categories. Conservative approaches allow processing of events only after it has been asserted that the event handling would not result in a causality error. Optimistic approaches allow for causality errors and support means of restoring state – i. e., rollback. All standard approaches to the problem of PDES are either flawed by their assumption of existing event patterns in the system or cannot be applied to ONE due to their restricted analysis on simplified models like queues and Petri-nets. The Adaptive Time Window algorithm is a bounded optimistic parallel simulatio...|$|R
40|$|Purpose of this master thesis was {{to explain}} {{simulation}} of real network, {{point to the}} imperfection during these simulations {{and try to find}} out technologies and solutions that could improve credibility of simulation. For this purpose, network simulator ns- 3 has been chosen which supports <b>direct</b> <b>code</b> execution together with Quagga software suite. Master thesis describes internet protocol IPv 4, UDP protocol, basics of routing and detailed explanation of OSPF routing protocol. Focus in this thesis is also on general description of simulation, its kinds and detail explanation of discrete simulation that is used by ns- 3 simulator. Next chapter explains theory of ns- 3 simulator, its development, conceptual overview and objects. <b>Direct</b> <b>code</b> execution and Quagga that both help improve credibility of simulation, are described in last chapter of theoretical part of thesis. In practical part of thesis is explained how to install and configure all three implemantaions of ns- 3 simulator on Ubuntu, linux distribution. On the basis of obtained knowledge, the simulation model has been designed, also there has been given detailed explanation of how to create new model of simulation and how to analyze its results for all implementation...|$|R
40|$|The primary {{issue with}} {{developing}} new networking protocols is testing how the protocol will behave when deployed {{on a large}} scale; of particular interest is how it will interact with existing protocols. Testing a protocol using a network simulator has drawbacks. First, the protocol must be written for the simulator and then rewritten for actual deployment. Aside from the additional work, this allows for software bugs to be introduced between testing and implementation. More importantly, there are correctness issues. Since both the new and existing protocols must be specially written for the simulator, and not actual real-world implementations, the question remains if the behavior observed and, specifically, the interactions between the protocols are valid. <b>Direct</b> <b>code</b> execution environments solve the correctness problem, but there {{is the loss of}} control that a simulator provides. Our solution is to create an environment that allows <b>direct</b> <b>code</b> execution to occur on top of a network simulator. This thesis presents the primary component of that solution: Lunar (Linux User-level Network Architecture), a user-level library that is created from the network stack portion of the Linux operating system. This allows real-world applications to link against a simulator, with Luna...|$|R
50|$|In {{the theory}} of quantum communication, the entanglement-assisted {{classical}} capacity of a quantum channel is the highest rate at which classical information can be transmitted from a sender to receiver when they share an unlimited amount of noiseless entanglement. It is given by the quantum mutual information of the channel, which is the input-output quantum mutual information maximized over all pure bipartite quantum states with one system transmitted through the channel. This formula is the natural generalization of Shannon's noisy channel coding theorem, {{in the sense that}} this formula is equal to the capacity, and {{there is no need to}} regularize it. An additional feature that it shares with Shannon's formula is that a noiseless classical or quantum feedback channel cannot increase the entanglement-assisted classical capacity. The entanglement-assisted classical capacity theorem is proved in two parts: the <b>direct</b> <b>coding</b> theorem and the converse theorem. The <b>direct</b> <b>coding</b> theorem demonstrates that the quantum mutual information of the channel is an achievable rate, by a random coding strategy that is effectively a noisy version of the super-dense coding protocol. The converse theorem demonstrates that this rate is optimal by making use of the strong subadditivity of quantum entropy.|$|R
40|$|The {{purpose is}} to control in an optimal way a {{compressible}} flow based on Direct Numerical Simulations (DNS) using as starting point directo code and ismulations of adjoint equations based on adjoint code. Once done, a validation for the control implementation has been done (link between optimized <b>code,</b> <b>direct</b> <b>code</b> and adjoint code) {{in order to test}} several configurations (different control and observation zones, different control and observation variables). A physical analysis showed up effects on the flow and acoustic emission...|$|R
40|$|We {{present a}} {{performance}} analysis of different parallelization schemes for <b>direct</b> <b>codes</b> {{used in the}} simulation of astrophysical stellar systems. These codes compute the gravitational interaction among stars in an exact way and have a computational complexity of O(N^ 2). Significant improvement {{in the performance of}} <b>direct</b> N-body <b>codes</b> can be obtained by means of general purpose massively parallel supercomputers and of special purpose computers like GRAPE hardware. We compare the performance of parallel algorithms on different architectures including a cluster, a supercomputer and two computational grids. The best performance is obtained in combination with GRAPE- 6 hardware but highly distributed computational Grids also appear very promising. The simulation of a globular cluster containing about one million stars, currently one of the most challenging numerical problems in astrophysics, is feasible only in combination with GRAPE hardware or on massively parallel architectures...|$|R
