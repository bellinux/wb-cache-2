167|546|Public
25|$|An {{example of}} this is a {{password}} cracker that attempts to guess the password for an <b>encrypted</b> <b>file</b> (assuming that the password has a maximum possible length).|$|E
25|$|KeePass Password Safe is a {{free and}} {{open-source}} password manager primarily for Windows. It officially supports macOS and Linux operating systems {{through the use of}} Mono. Additionally, there are several unofficial ports for Windows Phone, Android, iOS, and BlackBerry devices. KeePass stores usernames, passwords, and other fields, including free-form notes and file attachments, in an <b>encrypted</b> <b>file.</b> This file can be protected by a master password, key file, and/or the current Windows account details. By default, the KeePass database is stored on a local file system (as opposed to cloud storage).|$|E
25|$|In 1995, {{the company}} began to develop network {{encryption}} technologies, again {{in response to a}} growing number of similar requests from its customers. Early products in this sphere included PowerTelnet which is comparable to today's ssh, and PowerFTP, which provided <b>encrypted</b> <b>file</b> transfer. In February 1996, Freedman realized that this technology could be generalized, resulting in a general-purpose network encryption solution that would encrypt the traffic of any application, without requiring much, if any, modification to that application. Chmilar, Huxley, and Lowe worked hard to prepare a demonstrable version of this new CipherLink product in time for the Networld+Interop trade show in April, 1996. The product was well received, and became a finalist for the Best Product of Show award at the trade show that year.|$|E
2500|$|Since Locky was {{released}} {{there have been}} numerous variants released that used different extensions for <b>encrypted</b> <b>files.</b> Many of these extensions are named after gods of Norse and Egyptian mythology. When first released, the extension used for <b>encrypted</b> <b>files</b> was [...]Locky. Other versions utilized the [...]zepto, [...]odin, [...]shit, [...]thor, [...]aesir, and [...]zzzzz extensions for <b>encrypted</b> <b>files.</b> The current version, released in December 2016, utilizes the [...]osiris extension for <b>encrypted</b> <b>files.</b>|$|R
2500|$|Multiple-user (shared) {{access to}} <b>encrypted</b> <b>files</b> (on a file-by-file basis) and {{revocation}} checking on certificates used when sharing <b>encrypted</b> <b>files</b> ...|$|R
50|$|EncFS is a Free (LGPL) FUSE-based {{cryptographic}} filesystem. It transparently <b>encrypts</b> <b>files,</b> {{using an}} arbitrary directory as storage for the <b>encrypted</b> <b>files.</b>|$|R
500|$|Holly {{possesses}} {{a piece of}} paper with [...] "ARPANET/WHTCORPS" [...] written on it. Byers realizes that the words refer to the Defense Department's computer network, which she requests he hack into. Byers, at the time an unquestioningly loyal government employee, complies after great reluctance. He finds an <b>encrypted</b> <b>file</b> on her daughter, named Susanne Modeski. Just then, a man whom Holly claims to be her boyfriend passes by Byers' boothâ€”Mulder.|$|E
500|$|Michael {{tells his}} wife to stay somewhere safe, and then tells the red reality Bird to meet him in the park. He tells Bird what he found out in the green reality (where his son is alive and his wife is dead) {{regarding}} Hawkins, his accident and the <b>encrypted</b> <b>file</b> and convinces Bird to copy it from Hawkins' computer, though neither of them know Hawkins has been watching them. Hawkins meets immediately with Tricia Harper and Carl Kessel (revealed to be Bird and Hawkins' precinct chief in this reality) and Kessel says they will kill both Michael and Bird and {{make it look like}} Michael did it, given his recently unstable behavior. Captain Harper shows doubts and remorse at this idea, but agrees.|$|E
2500|$|The most {{significant}} way of preventing the decryption-on-copy is using backup applications that {{are aware of}} the [...] "Raw" [...] APIs. [...] Backup applications that have implemented these [...] will simply copy the <b>encrypted</b> <b>file</b> stream and the $EFS alternate data stream as a single file. [...] In other words, the files are [...] "copied" [...] (e.g. into the backup file) in encrypted form, and are not decrypted during backup.|$|E
5000|$|<b>Encrypting</b> <b>File</b> System, which <b>encrypts</b> <b>files</b> {{stored on}} the computer's hard drive so they cannot {{be read by}} another user, even with {{physical}} access to the storage medium.|$|R
2500|$|The Locky uses RSA-2048 + AES-128 cipher with ECB mode to <b>encrypt</b> <b>files.</b> Keys are {{generated}} on the server side, making manual decryption impossible, and Locky ransomware can <b>encrypt</b> <b>files</b> on all fixed drives, removable drives, network and RAM disk drives.|$|R
50|$|Perforce Helix, {{like most}} version control systems, does not <b>encrypt</b> <b>file</b> {{content in the}} master {{repository}} or on user machines.Perforce versions prior to 2012.1 cannot <b>encrypt</b> <b>file</b> content sent over the network. A tunneling protocol (like VPN or SSH) must be used to secure network transfers with those versions.|$|R
2500|$|EFS {{works by}} {{encrypting}} a file with a bulk symmetric key, {{also known as}} the File Encryption Key, or FEK. It uses a symmetric encryption algorithm because it takes less time to encrypt and decrypt large amounts of data than if an asymmetric key cipher is used. [...] The symmetric encryption algorithm used will vary depending on the version and configuration of the operating system; see Algorithms used by Windows version below. [...] The FEK (the symmetric key that is used to encrypt the file) is then encrypted with a public key that is associated with the user who encrypted the file, and this encrypted FEK is stored in the $EFS alternate data stream of the <b>encrypted</b> <b>file.</b> To decrypt the file, the EFS component driver uses the private key that matches the EFS digital certificate (used to encrypt the file) to decrypt the symmetric key that is stored in the $EFS stream. The EFS component driver then uses the symmetric key to decrypt the file. Because the encryption & decryption operations are performed at a layer below NTFS, it is transparent to the user and all their applications.|$|E
5000|$|The sample generates an AES key for {{encrypting}} the file, {{the contents}} of the <b>encrypted</b> <b>file</b> are M2, and the AES key is encrypted with the sub-public key [...] "00000000.pky". The contents of the <b>encrypted</b> <b>file</b> are M1. Then merge M1 and M2 and add file header [...] "WANACRY!" [...] to save the <b>encrypted</b> <b>file.</b>|$|E
50|$|A loop device {{may allow}} {{some kind of}} data {{elaboration}} during this redirection. For example, the device may be the unencrypted version of an <b>encrypted</b> <b>file.</b> In such a case, the file associated with a loop device may be another pseudo-device. This is mostly useful when this device contains an <b>encrypted</b> <b>file</b> system. If supported, the loop device is {{in this case the}} decrypted version of the original <b>encrypted</b> <b>file</b> and can therefore be mounted {{as if it were a}} normal filesystem.|$|E
5000|$|The {{program will}} not <b>encrypt</b> <b>files</b> in the {{following}} directories : ...|$|R
2500|$|<b>Encrypted</b> <b>files</b> can {{be shown}} in an {{alternate}} color (green by default) ...|$|R
5000|$|The {{malicious}} program <b>encrypts</b> <b>files</b> with the aforementioned extensions {{in the following}} directories : ...|$|R
50|$|New: Sicher - free mobile {{cross-platform}} secure messenger with <b>encrypted</b> <b>file</b> transfer.|$|E
5000|$|User id and {{password}} {{maintained in}} an <b>encrypted</b> <b>file</b> by OS 2200 ...|$|E
5000|$|Filetopia (1999-2002) - not {{anonymous}} but <b>encrypted.</b> <b>File</b> sharing, chat, internal {{mail service}} ...|$|E
50|$|Active Directory Certificate Services (AD CS) {{establishes}} an on-premises {{public key}} infrastructure. It can create, validate and revoke public key certificates {{for internal uses}} of an organization. These certificates {{can be used to}} <b>encrypt</b> <b>files</b> (when used with <b>Encrypting</b> <b>File</b> System), emails (per S/MIME standard), network traffic (when used by virtual private networks, Transport Layer Security protocol or IPSec protocol).|$|R
40|$|This {{paper is}} from the SANS Institute Reading Room site. Reposting is not {{permitted}} without express written permission. The <b>Encrypting</b> <b>File</b> System: How Secure is It? The <b>Encrypting</b> <b>File</b> System (EFS) {{is one of the}} many new features of the Windows 2000 operating system. It was designed to address security holes in NTFS. Namely, tools like NTFSDOS that allow attackers to bypass NTFS permissions. Microsoft states, "The encryption technology used is public key-based and runs as an integrated system service making it easy to manage, difficult to attack, and transparent to the user. " (<b>Encrypting</b> <b>File</b> System, 1). EFS does provide another layer of security, but just how difficult is it to a [...] . Copyright SANS Institut...|$|R
50|$|Windows XP {{includes}} several <b>Encrypting</b> <b>File</b> System improvements The most notable improvement is that multiple user accounts can share access to <b>encrypted</b> <b>files</b> on a file-by-file basis. A Details button in the Advanced file attributes dialog in the file's properties allows adding or removing additional users who can access the EFS-encrypted file, and viewing the certificate thumbprint and the Data Recovery Agent account. EFS certificates are autoenrolled in the CA {{and there is}} support for revocation checking on certificates used when sharing <b>encrypted</b> <b>files.</b> Unlike Windows 2000, there is no default local Data Recovery Agent and no requirement to have one, although a self-signed certificate for the recovery agent can be generated using cipher.exe.|$|R
5000|$|Securely {{transfer}} files over {{public and}} private networks using <b>encrypted</b> <b>file</b> transfer protocols.|$|E
5000|$|Password Manager {{to store}} {{multiple}} passwords {{in a single}} AES (Advanced Encryption Standard) <b>encrypted</b> <b>file.</b>|$|E
5000|$|An {{interactive}} setup {{script is}} supplied to allow basic, but effective, <b>encrypted</b> <b>file</b> systems to be created.|$|E
50|$|File ToolAllows user to <b>encrypt</b> <b>files,</b> mass rename {{multiple}} files at {{the same}} time, or securely wipe files.|$|R
40|$|Abstract â€” Many {{organizations}} have {{great deal of}} confidential information which is stored on computers. Such information is desired to be kept securely yet giving a convenience of accessibility from {{any part of the}} world. For data security, one can use an <b>encrypting</b> <b>file</b> system such as eCryptfs [1], dmCrypt [2], File Vault [3]. However these <b>encrypting</b> <b>file</b> systems do not address the problem of accessing files over network from public computers. In this case the public host, the actual FileServer host and the network between them are vulnerable to many attacks. This paper discusses the major problems and proposes a solution for the same using TransCrypt [4] <b>encrypting</b> <b>file</b> system. It also describes how the proposed solution can be implemented on a Linux-based environment...|$|R
50|$|Convergent {{encryption}} derives the {{key from}} the file content itself and means an identical <b>file</b> <b>encrypted</b> on different computers result in identical <b>encrypted</b> <b>files.</b> This enables the cloud storage provider to de-duplicate data blocks, meaning only one instance {{of a unique}} file (such as a document, photo, music or movie file) is actually stored on the cloud servers but made accessible to all uploaders. A third party who gained access to the <b>encrypted</b> <b>files</b> could thus easily determine if a user has uploaded a particular <b>file</b> simply by <b>encrypting</b> it themselves and comparing the outputs.|$|R
50|$|Password manager {{software}} can also store passwords relatively safely, in an <b>encrypted</b> <b>file</b> sealed {{with a single}} master password.|$|E
50|$|While {{developing}} the <b>encrypted</b> <b>file</b> transfer solution, SafeSwiss pivoted {{to focus on}} developing an app to handle encrypted messaging and voice calls.|$|E
50|$|After {{consulting}} {{with a large}} movie studio in LA, SafeSwiss switched to microSD as a technology and began development work on <b>encrypted</b> <b>file</b> transfer.|$|E
50|$|Zathura {{can search}} for text and copy text {{to the primary}} X selection. It {{supports}} bookmarks and can open <b>encrypted</b> <b>files.</b>|$|R
5000|$|Encryption or {{decryption}} of copied files may {{be selected}} as an option. Microsoft's <b>Encrypting</b> <b>File</b> System (EFS) {{is used as}} the encryption method.|$|R
5000|$|Decryption tools {{cannot be}} used to regain access to <b>encrypted</b> <b>files.</b> At this time, there is no known method to decrypt {{compromised}} files.|$|R
