0|10000|Public
40|$|In this report, {{we present}} a novel visualization-based method for <b>debugging</b> <b>software</b> <b>programs</b> and {{analysing}} their runtime behavior. One method aims at enabling developers to get an overview of variable stories by visualizing the values which these variables have taken {{over the course of}} the program. This helps in spotting errorous or unexpected variable assignments. The other method enables visualization of large arrays as a series or bar charts, which helps in gaining insight about the values in this array, such as value distribution, minimum values or maximum values. We implemented the methods as a plugin for the Eclipse Java IDE. Chapter...|$|R
40|$|The EDSAC was the world's first stored-program {{computer}} {{to operate a}} regular computing service. Designed and built at Cambridge University, the EDSAC performed its first fully automatic calculation on May 6, 1949. The simulator written at Warwick University is a faithful emulation of the EDSAC designed to run on a personal computer. The user interface has all the controls and displays of the original machine, and the system includes a library of original <b>programs,</b> subroutines, <b>debugging</b> <b>software,</b> and <b>program</b> documentation. This paper describes the reasons for creating the simulator and the steps taken to achieve a historically authentic emulation...|$|R
40|$|This chapter {{provides}} {{a discussion of}} a fuzzy set approach {{which is used to}} extend the notion of <b>software</b> <b>debugging</b> from a 0 - 1 (perfect/imperfect) crisp approach to one which incorporates some fuzzy sets ideas. The main objective of this extension is to make current software reliability models more realistic. The theory underlying this approach, and hence its key modeling tool, is the theory of random point processes with fuzzy marks. The relevance of this theory to <b>software</b> <b>debugging</b> arises {{from the fact that it}} incorporates the randomness due to the locations of the software faults and the fuzziness bestowed by the imprecision of the debugging effort. Through several examples, we also demonstrates that this theory provides the natural vehicle for an investigation into the properties and efficacy of fuzzy <b>debugging</b> of <b>software</b> <b>programs</b> and is therefore a contribution to computational intelligence...|$|R
40|$|International audienceExecution traces are {{becoming}} a highly appreciated method to <b>debug</b> and analyze <b>software</b> <b>programs,</b> especially {{in the areas of}} embedded systems and high-performance parallel computing. However, execution traces can result in enormous volumes of data, making them difficult to manage and exploit. In this paper, we describe a graphical solution to help the user navigate such large traces, in order to localize the points of interest for the analysis...|$|R
40|$|In {{this paper}} we present an {{approach}} to accelerate the simulation speed of behavioral VHDL system descriptions {{through the use of}} hardware support. The method allows source level debugging of behavioral, algorithmic VHDL in a way similar to source level <b>debugging</b> known from <b>software</b> <b>programming</b> languages. We can set breakpoints in the source code and evaluate the contents of variables by reading the registers of the circuit when a breakpoint is reached. 1...|$|R
50|$|Paradox {{has been}} noted to crack {{challenging}} dongle protections on many <b>debugging</b> and <b>software</b> development <b>programs.</b> The team also successfully found a method of bypassing activation in Windows Vista. This was accomplished by emulating an OEM machine's BIOS-embedded licensing information and installing an OEM license. However, with Windows Vista Service Pack 1, this crack no longer works correctly. Paradox was first to release SLIC 2.1 details & working crack for Windows 7.|$|R
40|$|Mathematical {{programming}} formulations {{can yield}} faulty answers. Models can be unbounded, infeasible, or optimal with unrealistic answers. This article presents techniques for theory-based {{discovery of the}} cause of faulty models. The approaches are demonstrated {{in the context of}} linear programming. They have been computerized and interfaced using the General Algebraic Modeling System (GAMS), and are distributed free of charge through new GAMS versions and an outline web page. <b>Debugging,</b> GAMS <b>software,</b> Mathematical <b>programming,</b> Research Methods/ Statistical Methods,...|$|R
40|$|Fault {{localization}} is {{an expensive}} technique in <b>software</b> <b>debugging.</b> <b>Program</b> dependence graphs are used for testing, debugging and maintenance applications in <b>software</b> engineering. <b>Program</b> dependence graphs (PDG) are used to build a probabilistic graphical model of program behavior. In this paper we proposed a model based fault localization technique using probabilistic program dependence (PPDG). This work presents algorithm for constructing PPDGs and PPDGs based fault localization. Our experimental result shows that proposed PPDG based fault localization method performs better than existing testing based fault localization (TBFL) method for DotNet programs. Our results also indicate that the probabilistic approach is efficient for fault localization...|$|R
40|$|Program slicing is a {{decomposition}} technique, {{which produces}} a subprogram from the parent program {{relevant to a}} particular computation. Hence slicing is also regarded as a program transformation technique. A dynamic program slice is an executable part of a program whose behavior is identical, for the same program input, {{to that of the}} original program with respect to a variable of interest at some execution position. Dynamic slices are smaller than static slice, which can be used eciently in dierent software engineering activities like <b>program</b> testing, <b>debugging,</b> <b>software</b> maintenance, <b>program</b> comprehension etc. In this dissertation, we present our work concerned with the dynamic slicing of object-oriented programs. We have developed a novel algorithm, which incorporates graph coloring technique to compute dynamic slice of object-oriented programs. But in order to achieve the goal efficiently, we have contradicted the constraints of the traditional graph coloring theory. Moreover, the state restriction of the slicing criterion is taken into consideration, in addition to the dependence analysis. The advantage of our algorithm is that, it is more time ecient than the existing algorithms. We have named this algorithm, as Contradictory Graph Coloring Algorithm (CGCA) ...|$|R
40|$|Current {{practice}} for examination {{of a high}} integrity software artifact is often a manual process that is slow, tedious, and prone to human errors. This report describes a Computer Aided Software Engineering (CASE) tool, unravel, that can assist evaluation of high integrity <b>software</b> by using <b>program</b> slices to extract computations for examination. The tool can currently be used to evaluate software written in ANSI C and is designed such that other languages can be added. Program slicing is a static analysis technique that extracts all statements relevant to the computation of a given variable. Program slicing is useful in <b>program</b> <b>debugging,</b> <b>software</b> maintenance and <b>program</b> understanding. Application of program slicing to evaluation of high integrity software reduces the effort in examining software by allowing a software reviewer {{to focus attention on}} one computation at a time. Once a software reviewer has identified a variable for further investigation, the reviewer directs unravel to c [...] ...|$|R
40|$|<b>Software</b> {{tools for}} <b>program</b> <b>debugging,</b> <b>software</b> testing, <b>software</b> maintenance, and <b>program</b> {{understanding}} have all effectively utilized static program slicing techniques. In this paper, we present {{an approach to}} extend this capability to explicitly parallel shared memory programs written using the OpenMP standard. In particular, interprocedural static program slicing of OpenMP programs is enabled by extending standard program representations for control flow and program dependences to support OpenMP parallel, data, and synchronization constructs. The slicing algorithm builds on the algorithms for interprocedural slicing of sequential programs and an algorithm for intraprocedural slicing of parallel programs. Keywords – shared memory parallel programming...|$|R
50|$|Some <b>program</b> <b>debugging</b> <b>software</b> {{will also}} detect {{violations}} during testing.|$|R
40|$|Abstract—The {{benefits}} of Test-Driven Development (TDD) can be appealing to many seeking {{to reduce the}} amount of time spent on a software project, but not all projects can implement the TDD methodology fully. A technique similar to TDD – test-oriented development – is introduced and a prototype software implementation in the form of an Eclipse plug-in is presented to support the adoption of this more pragmatic approach so that it can help write high quality <b>software.</b> Index Terms—automation, <b>programming,</b> <b>software</b> <b>debugging,</b> <b>software</b> testing I...|$|R
40|$|Abstract- The in-circuit {{emulator}} (ICE) is commonly adopted as a microprocessor debugging technique. In this paper, a parameterized embedded {{in-circuit emulator}} and its retargetable <b>debugging</b> <b>software</b> are proposed. The parameterized embedded in-circuit emulator {{can be integrated}} into different style processors such as microcontroller, microprocessor, and DSP processor. The GUI interface <b>debugging</b> <b>software</b> can help user to debug easily. As a result of it, the duration of microprocesso...|$|R
40|$|This semestral {{thesis is}} {{concerned}} on facilities of using DebugMonitor exception for <b>debugging</b> <b>software</b> which run on ARM Cortex-M 4. The comunnication between <b>debugged</b> <b>software</b> and <b>debugging</b> master is implemented via CAN bus. The result is support for debugging without special debugging equipment. For {{support of this}} type of debug this thesis implemented code library called SDebug. It's managing parts of Cortex-M 4 core, which are userd for debug...|$|R
5000|$|Process Hacker is a free, powerful, {{multi-purpose}} {{tool that}} helps you monitor system resources, <b>debug</b> <b>software</b> and detect malware ...|$|R
40|$|Abstract. We present FAuST, an {{extensible}} {{framework for}} Formal verification, AUtomated <b>debugging,</b> and <b>Software</b> Test generation. Our framework uses a highly customizeable Bounded Model Checking (BMC) algorithm for formal reasoning about <b>software</b> <b>programs</b> and provides different applications, e. g., property checking, functional equivalence checking, test case generation, and fault localization. FAuST supports dynamic execution and multi-threaded symbolic reasoning using the LLVM compiler infrastructure and an abstraction layer for decision procedures...|$|R
50|$|SIGSOFT {{focuses on}} {{issues related to}} all aspects of {{software}} development and maintenance, with emphasis on requirements, specification and design, software architecture, validation, verification, <b>debugging,</b> <b>software</b> safety, software processes, software management, measurement, user interfaces, configuration management, software engineering environments, and CASE tools.|$|R
3000|$|... 9 This {{can make}} it hard for a {{programmer}} to debug algorithmic implementations, particularly if the programmer is unfamiliar with <b>debugging</b> <b>software</b> performing lazy evaluation.|$|R
25|$|SpringSoft is a {{software}} company that developed VLSI design and <b>debugging</b> <b>software.</b> The company was founded with {{a grant from}} the Taiwanese National Science Council in February 1996.|$|R
40|$|Recent {{impressive}} performance {{improvements in}} computer architecture have not led to significant gains {{in ease of}} <b>debugging.</b> <b>Software</b> <b>debugging</b> often relies on inserting run-time software checks. In many cases, however, {{it is hard to}} find the root cause of a bug. Moreover, program execution typically slows down significantly, often by 10 - 100 times...|$|R
50|$|Extended Static Checking was pioneered in ESC/Modula-3 and, later, ESC/Java. Its roots {{originate}} from more simplistic static checking techniques, such as static <b>debugging</b> or Lint (<b>software)</b> and FindBugs. A {{number of other}} languages have adopted ESC, including Spec# and SPARKada and VHDL VSPEC. However, there is currently no widely used <b>software</b> <b>programming</b> language that provides extended static checking in its base development environment.|$|R
40|$|<b>Software</b> <b>debugging</b> {{has been}} {{regarded}} as one of the challenges in the field of software engineering. In practice, traditional debugging needs extensive labor and time in order to locate bugs in a typical <b>software</b> <b>program.</b> A typical programmer needs to set breaking points and execute the buggy program on several inputs. At the same time, he needs to examine the progra...|$|R
50|$|In 1980 Bridges {{started his}} {{programming}} {{career at the}} NYU Institute for Reconstructive Plastic Surgery as a summer intern, working with sophisticated programmable vector graphics systems. He wrote editing tools and also updated and <b>debugged</b> <b>software</b> used for early 3D x-ray scanning research.|$|R
5000|$|BFE, {{described}} as a [...] "Graphical Debugger Interface for the Bochs PC Emulator", is a graphical interface for the debugger within the Bochs PC emulator {{that makes it possible}} to <b>debug</b> <b>software</b> step-by-step at the instruction and register level, much like Borland's Turbo Debugger.|$|R
5000|$|Software {{that can}} be used to bypass copy protection, such as disk drive emulators and <b>debugging</b> <b>software,</b> will block the launch of the game and {{generate}} a security module error. Disabling such software usually fixes the issue, but in some cases uninstallation is required.|$|R
50|$|CodeWarrior is an {{integrated}} development environment (IDE) published by NXP Semiconductors for editing, compiling, and <b>debugging</b> <b>software</b> for several microcontrollers and microprocessors (Freescale ColdFire, ColdFire+, Kinetis, Qorivva, PX, Freescale RS08, Freescale S08, and S12Z) and digital signal controllers (DSC MC56F80X and MC5680XX) used in embedded systems.|$|R
5000|$|Any {{programmer}} who develops software {{participates in}} the informal method of verification known as desk checking. <b>Debugging</b> <b>software</b> as it is being developed {{is a form of}} desk checking. The developer sets breakpoints or checks the output from the model to verify that it matches the algorithms developed in the conceptual model.|$|R
30|$|Testing and <b>debugging</b> {{concurrent}} <b>software</b> {{are faced}} with a variety of challenges [1]. These challenges concern different aspects of <b>software</b> testing and <b>debugging,</b> such as parallel programming [2], performance testing, error detection [3] and more. Since concurrent software exhibit more non-deterministic behavior and non-deterministic bugs are generally viewed to be more challenging than other types of bugs [4 – 6], testing and <b>debugging</b> concurrent <b>software</b> are also considered to be more challenging compared to testing and <b>debugging</b> of sequential <b>software.</b>|$|R
40|$|The aim of {{this work}} is to propose an {{electronic}} security system for the house, tha will be respond to the security violation by using siren and GSM module. The objectives of this work include <b>programming</b> <b>software</b> for central unit and <b>debugging</b> that <b>software.</b> The proposed central unit would be compatible with commonly solded sensors and sirens...|$|R
40|$|Software fault {{localization}} {{is one of}} the (if not the) most expensive, {{tedious and}} time consuming activities in program debugging. Therefore, there is a high demand for automatic fault localization techniques that can guide programmers to the locations of faults, with minimal human intervention. This demand has led to the proposal and development of various methods, each of which seeks to make the fault localization process more effective in its own unique and creative way. In this article we provide an overview of several such methods and discuss some of the key issues and concerns that are relevant to fault localization. KEY WORDS: <b>Software</b> fault localization, <b>program</b> <b>debugging,</b> <b>software</b> testing, execution trace, suspicious cod...|$|R
2500|$|Hastings' {{first job}} was at Adaptive Technology, where he invented {{a tool for}} <b>debugging</b> <b>software.</b> Hastings met Audrey MacLean in 1990 when she was CEO at Adaptive Corp. [...] "From her, I learned the value of focus. I learned {{it is better to}} do one product well than two {{products}} in a mediocre way," [...] says Hastings.|$|R
50|$|Integrated {{development}} environments {{are designed}} to maximize programmer productivity by providing tight-knit components with similar user interfaces. IDEs present a single program in which all development is done. This program typically provides many features for authoring, modifying, compiling, deploying and <b>debugging</b> <b>software.</b> This contrasts with software development using unrelated tools, such as vi, GCC or make.|$|R
50|$|To help {{software}} developers and system designers {{get started with}} the QorIQ P4080, Freescale worked with Virtutech to create a virtual platform for the P4080 {{that can be used}} prior to silicon availability to develop, test, and <b>debug</b> <b>software</b> for the chip. Currently, the simulator is only for the P4080, not the other chips announced in 2008.|$|R
5000|$|Hastings' {{first job}} was at Adaptive Technology, where he invented {{a tool for}} <b>debugging</b> <b>software.</b> [...] "I worked for Audrey MacLean in 1990 when she was CEO at Adaptive Corp. From her, I learned the value of focus. I learned {{it is better to}} do one product well than two {{products}} in a mediocre way," [...] says Hastings.|$|R
25|$|In 1997, SpringSoft {{established}} Novas Software in Silicon Valley {{to market}} Springsoft's VLSI <b>Debugging</b> <b>software.</b> SpringSoft created a custom layout tool called Laker and a US-based company called Silicon Canvas. In May 2008, SpringSoft purchased Novas Software Silicon Canvas and combined them {{to form the}} wholly owned subsidiary SpringSoft USA. SpringSoft employed over 400 people with office locations across the world.|$|R
