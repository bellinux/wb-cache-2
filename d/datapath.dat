1265|246|Public
25|$|Embedded hardware, {{such as the}} Game Boy Advance, {{typically}} have {{a small amount of}} RAM accessible with a full 32-bit datapath; the majority is accessed via a 16-bit or narrower secondary <b>datapath.</b> In this situation, it usually makes sense to compile Thumb code and hand-optimise a few of the most CPU-intensive sections using full 32-bit ARM instructions, placing these wider instructions into the 32-bit bus accessible memory.|$|E
50|$|Area can {{sometimes}} be saved, on machines with multiple units in a <b>datapath,</b> by having two datapaths side-by-side, {{each of which has}} smaller bit pitch than a single <b>datapath</b> would have. This case usually forces multiple copies of a register file, one for each <b>datapath.</b>|$|E
50|$|Once the <b>datapath</b> is designed, the ASM chart is {{converted}} to a detailed ASM chart. The RTL notation is replaced by signals defined in the <b>datapath.</b>|$|E
40|$|This paper {{proposes a}} test syntheses method for <b>datapaths.</b> The {{proposed}} method goes on design-for-testability while generating control sequences for justification and propagation at register-transfer level. Since the method fully utilizes functions of controllers {{as well as}} <b>datapaths,</b> it achieves small area overhead. [URL]...|$|R
40|$|In systems {{consisting}} of interacting <b>datapaths</b> and controllers, the <b>datapaths</b> and controllers are traditionally tested separately by isolating each component {{from the environment}} of the system during test. This is not possible when the controller-datapath pair is an embedded system designed as a hard core. This work facilitates the testing of controller-datapath pairs in a truly integrated fashion. The key t...|$|R
50|$|In {{addition}} {{to open source}} systems, hardware-based messaging middleware exists with vendors like Solace Systems, Apigee and Tervela offering queuing through silicon or silicon/software <b>datapaths.</b>|$|R
50|$|The {{register}} file {{is usually}} pitch-matched to the <b>datapath</b> that it serves. Pitch matching avoids having many busses passing over the <b>datapath</b> turn corners, which {{would use a}} lot of area. But since every unit must have the same bit pitch, every unit in the <b>datapath</b> ends up with the bit pitch forced by the widest unit, which can waste area in the other units. Register files, because they have two wires per bit per write port, and because all the bit lines must contact the silicon at every bit cell, can often set the pitch of a <b>datapath.</b>|$|E
50|$|<b>Datapath</b> Limited of Derby for Computer graphic {{boards and}} accessories.|$|E
5000|$|Supports the CoreNet {{communications}} fabric for connecting cores and <b>datapath</b> accelerators.|$|E
40|$|As the {{complexity}} of embedded systems grows rapidly, {{it is common to}} accelerate critical tasks with hardware. Designers usually use off-the-shelf components or licensed IP cores to shorten the time to market, but the hardware/software interfacing is tedious, error-prone and usually not portable. Besides, the existing hardware seldom matches the requirements perfectly. CASCADE, the proposed design environment as an alternative, generates coprocessing <b>datapaths</b> from the executing algorithms specified in C/C++ and attaches these <b>datapaths</b> to the embedded processor with an auto-generated software driver. The number of <b>datapaths</b> and their internal parallel functional units are scaled to fit the application. It seamlessly integrates the design tools of the embedded processor to reduce the re-training/design efforts and maintains short product development time as the pure software approaches. A JPEG encoder is built in CASCADE successfully with an auto-generated four-MAC accelerator to achieve 623 % performance boost for our video application. 1...|$|R
40|$|Many {{approaches}} recently {{proposed for}} high-speed asynchro-nous pipelines are applicable only to linear <b>datapaths.</b> However, real systems typically have non-linearities in their <b>datapaths,</b> i. e. stages may have multiple inputs (“joins”) or multiple outputs (“forks”). This paper presents several new pipeline templates that extend existing high-speed approaches for linear dynamic logic pipelines, by providing efficient control structures that can accommodate forks and joins. In addition, constructs for conditional computation are also introduced. Timing analysis and SPICE simulations {{show that the}} performance overhead of these extensions is fairly low (5 % to 20 %). 1...|$|R
40|$|In systems {{consisting}} of interacting <b>datapaths</b> and controllers, the <b>datapaths</b> and controllers are traditionally tested separately by isolating each component {{from the environment}} of the system during test. This is not possible when the controller-datapath pair is an embedded system designed as a hard core. This work facilitates the testing of controller-datapath pairs in a truly integrated fashion. The key to the approach is a careful examination of the types of gate level stuck-at faults that can occur within the controller. A class of faults that are undetectable in an integrated test by traditional means is identified. These faults create faulty but functional circuits. The effect of these faults on power consumption is explored, and a method based on power analysis is given for detecting these faults. Analysis is given for three example systems. 1 Introduction This work addresses the problem of testing systems that consist of interacting <b>datapaths</b> and controllers, and facilitates [...] ...|$|R
50|$|The {{telecommunications}} {{market had}} been one of the first that needed a new design of parallel <b>datapath</b> packet processing because there was a very quick adoption of these multiple-core processors for the <b>datapath</b> and the control plane. These MPUs are going to replace the traditional Network Processors that were based on proprietary microcode or picocode.|$|E
5000|$|Blade T64 9970 - dual-pixel quad-texture engine, AGP4X, 32 MB of memory, 64-bit <b>datapath</b> ...|$|E
5000|$|The SDN <b>Datapath</b> is {{a logical}} network device that exposes {{visibility}} and uncontested control over its advertised forwarding and data processing capabilities. The logical representation may encompass all or {{a subset of the}} physical substrate resources. An SDN <b>Datapath</b> comprises a CDPI agent and a set of one or more traffic forwarding engines and zero or more traffic processing functions. These engines and functions may include simple forwarding between the datapath's external interfaces or internal traffic processing or termination functions. One or more SDN Datapaths may be contained in a single (physical) network element—an integrated physical combination of communications resources, managed as a unit. An SDN <b>Datapath</b> may also be defined across multiple physical network elements. This logical definition neither prescribes nor precludes implementation details such as the logical to physical mapping, management of shared physical resources, virtualization or slicing of the SDN <b>Datapath,</b> interoperability with non-SDN networking, nor the data processing functionality, which can include OSI layer 4-7 functions.|$|E
40|$|This paper {{presents}} {{the architecture of}} a flexible and high performance unit for DSP applications. The proposed archi-tecture operates based on fast Carry-Save (CS) arithmetic. A mapping methodology, for <b>datapaths</b> composed with the pro-posed flexible units, is also presented. It exploits the incorpo-rated features of the proposed units and enables fast compu-tations, high operation densities and advanced data reusabil-ity. Experimental results shown that several DSP algorithms can be mapped onto the proposed architecture with high ef-ficiency delivering in average, latency gains of 36. 56 % and 45. 76 % compared to the MAC and the primitive resources based <b>datapaths,</b> respectively. 1...|$|R
40|$|Abstract—We {{address the}} problem of code {{optimization}} for embedded DSP microprocessors. Such processors (e. g., those in the TMS 320 series) have highly irregular <b>datapaths,</b> and conventional code generation methods typically result in inefficient code. In this paper we formulate and solve some optimization problems that arise in code generation for processors with irregular <b>datapaths.</b> In addition to instruction scheduling and register allocation, we also formulate the accumulator spilling and mode selection problems that arise in DSP microprocessors. We present optimal and heuristic algorithms that determine an instruction schedule simultaneously optimizing accumulator spilling and mode selection. Experimental results are presented. Keywords—code generation, optimization, digital signal processors I...|$|R
40|$|This paper {{presents}} a design technique for coarse grained reconfigurable cores targeting mostly DSP applications. The proposed technique inlines flexibility into custom Carry-Save-Arithmetic (CSA) <b>datapaths</b> exploiting {{a stable and}} canonical interconnection scheme. The canonical interconnection is revealed by a uniformity transformation imposed on the basic architectures of CSA multipliers and CSA chain-adders/subtracters. The design flow {{for the implementation of}} the core is analyzed in detail, and the advanced mapping opportunities are presented. The paper concludes with the experimental results showing that our architecture performs an average latency reduction of 32. 63 %, compared with <b>datapaths</b> of primitive computational resources, with sufficient hardware utilization. © 2007 EURASIP...|$|R
5000|$|Blade XP 9980 - same as T64 except 128-bit <b>datapath,</b> 200 MHz vs. 166 MHz ...|$|E
5000|$|LineRate Systems in 2013 (high-performance, {{software-based}} Load Balancer for x86 {{systems with}} node.js <b>datapath</b> scripting) ...|$|E
50|$|<b>Datapath</b> Limited of Derby for {{innovative}} video graphics and capture technology for custom and professional applications.|$|E
40|$|This paper {{presents}} a new methodology for {{the synthesis of}} high performance flexible <b>datapaths,</b> targeting computationally intensive digital signal processing kernels of embedded applications. The proposed methodology {{is based on a}} novel coarse-grained reconfigurable/flexible architectural template, which enables the combined exploitation of the horizontal and vertical parallelism along with the operation chaining opportunities found in the application's behavioral description. Efficient synthesis techniques exploiting these architectural optimization concepts from a higher level of abstraction are presented and analyzed. Extensive experimentation showed average latency and area reductions up to 33. 9 % and 53. 9 %, respectively, and higher hardware area utilization, compared to previously published high performance coarse-grained reconfigurable <b>datapaths.</b> © 2006 IEEE...|$|R
50|$|The cores are {{supported}} by a hardware hypervisor and can be run in symmetric or asymmetric mode meaning that the cores can run and boot operating systems together or separately, resetting and partitioning cores and <b>datapaths</b> independently without disturbing other operating systems and applications.|$|R
40|$|Abstract- In this paper, {{we present}} a new {{scheduling}} algorithms that generates area-efficient register transfer level <b>datapaths</b> with multiport memories. The proposed scheduling algorithm assigns an operation to a specific control step such that maximal sharing of functional units can be achieved with minimal number of memory ports, while satisfying given constraints. We propose a measure of multiport memory cost, MAV (Multiple Access Variable) which {{is defined as a}} variable accessed at several control steps, and overall memory cost is reduced by equally distributing the MAVs throughout all the control steps. When compared with previous approaches for several benchmarks available from the literature, the proposed algorithm generates the <b>datapaths</b> with less memory modules and interconnection structures by reflecting the memory cost in the scheduling process...|$|R
5000|$|<b>Datapath,</b> a firm {{specializing in}} {{satellite}} communications and wireless communications systems, is headquartered in unincorporated Gwinnett, near Duluth.|$|E
50|$|Since leaving {{government}} service, Baldwin {{has served}} on the Board of Directors of <b>DataPath,</b> Inc., a subsidiary of Rockwell Collins.|$|E
50|$|Furthermore, the <b>datapath</b> of NISC {{processors}} {{can even}} be generated automatically for a given application. Therefore, designer's productivity is improved significantly.|$|E
40|$|Abstract—Specialized {{clustered}} {{very large}} instruction word (VLIW) processors combined with effective compilation techniques enable aggressive {{exploitation of the}} high instruction-level parallelism inherent in many embedded media applications, while unlocking a variety of possible performance/cost tradeoffs. In this work, the authors propose a methodology to support early design space exploration of clustered VLIW <b>datapaths,</b> {{in the context of}} a specific target application. They argue that, due to the large size and complexity of the design space, the early design space exploration phase should consider only design space parameters that have a first-order impact on two key physical figures of merit: clock rate and power dissipation. These parameters were found to be: maximum cluster capacity, number of clusters, and bus (interconnect) capacity. Experimental validation of their design space exploration algorithm shows that a thorough exploration of the complex design space can be performed very efficiently in this abstract parameterized design space. Moreover, an empirical study carried out on a representative set of computation-intensive benchmarks suggests that “penalties ” of clustered versus centralized <b>datapaths</b> are often minimal and that clustering indeed unlocks a variety of valuable design tradeoffs. Index Terms—Application-specific processors, compilers, custom VLIW <b>datapaths,</b> design space exploration, embedded systems, power optimization. I...|$|R
50|$|Since NISC <b>datapaths</b> {{are very}} {{efficient}} {{and can be}} generated automatically, NISC technology is comparable to high level synthesis (HLS) or C to HDL synthesis approaches. In fact, {{one of the benefits}} of this architecture style is its capability to bridge these two technologies (custom processor design and HLS).|$|R
40|$|This paper {{presents}} a heuristic scheduling algorithm for heterogeneous specifications, those formed by operations {{of different types}} and widths. The algorithm extracts the common operative kernel of the operations, and binds afterwards operations to cycles {{with the aim of}} distributing uniformly the number of bits calculated per cycle. In consequence, operations may be fragmented and executed during a set of non-necessarily consecutive cycles, and over a set of several linked simple hardware resources. The proposed algorithm, in combination with allocation algorithms able to guarantee bit-level reuse of hardware resources, obtains considerably smaller <b>datapaths</b> than the ones proposed by conventional synthesis algorithms. In the <b>datapaths</b> produced the type, number, and width of the hardware resources are independent of the type, number, and width of the specification operations and variables. 1...|$|R
50|$|A Finite State Machine with <b>Datapath</b> (FSMD) is a {{mathematical}} abstraction that is sometimes used to design digital logic or computer programs.|$|E
50|$|An FSMD is {{a digital}} system {{composed}} of a finite-state machine, which controls the program flow, and a <b>datapath,</b> which performs data processing operations.|$|E
50|$|The R4200 is a scalar {{design with}} a five-stage classic RISC pipeline. A notable {{feature is the}} use of the integer <b>datapath</b> for {{performing}} arithmetic operations on the mantissa portion of a floating point number. A separate <b>datapath</b> was used for the exponent. This scheme reduced cost by reducing the number of transistors, the size of the chip, and power consumption. It also impacted floating point performance negatively, but the R4200's intended applications did not require high floating point performance.|$|E
40|$|Multivoltage {{scheduling}} (MVS) for <b>datapaths</b> {{offers the}} energy savings of voltage scaling on a per-operation basis with a voltage aware operator scheduling. This work investigates {{the effect of}} using multivoltage register file storage in operator graph scheduling for multivoltage <b>datapaths,</b> thus partitioning the variable storage space {{on the basis of}} operating voltages. Scheduling operations on multivoltage functional units lowers the energy-delay product by exploiting slack in the schedule. We find that using multivoltage partitioned register files do the same by exploiting the variable lifetimes in the schedule. In a resource constrained context, longer variable lifetimes provide the opportunity to store such variables in low voltage register files. A ZOLP formulation for the resource constrained MVS problem is presented along with energy-delay savings obtained from applying this formulation to image processing transform graphs. 1...|$|R
40|$|Somewhat {{surprisingly}} <b>datapaths</b> often contain many simple cells – latches {{to stage}} data (especially in a pipelined machine) and tristate drivers {{to drive the}} bus lines. But these cells are pretty simple. Since these units implement the dataflow portion of an algorithm, they tend to operate on numbers. This lectur...|$|R
40|$|Abstract—Principles for {{designing}} practical self-routing nonblocking N × N circuit-switched connection networks with optimal q(N × log N) hardware at the bit-level of complexity are described. The overall principles behind the architecture {{can be described}} as “Expand-Route-Contract. ” A self-routing nonblocking network with w-bit wide <b>datapaths</b> can be achieved by expanding the <b>datapaths</b> to w + z independent bit-serial connections, routing these connections through self-routing networks with blocking, and by contracting the data at the output and recovering the w-bit wide <b>datapaths.</b> For an appropriate redundancy z, the blocking probability can be made arbitrarily small and the fault tolerance arbitrarily high. By using efficient space domain concentrators, the architecture yields self-routing nonblocking switching networks with an optimal O(N × log N) bits of memory or O(N × log N × log log log N) logic gates. By using a linear-cost time domain concentrator, the architecture yields self-routing nonblocking switching networks with an optimal q(N × log N) bits of memory or logic gates. These designs meet Shannon’s lower bound on memory requirements, established in the 1950 s. The number of stages of crossbars can match the theoretical minimum, which has not been achieved by previous self-routing networks. The architecture is feasible with existing electrical or optical technologies. The designs of electrical and optical switch cores with Terabits of bisection bandwidth for Networks-of-Workstations (NOWs) are described...|$|R
