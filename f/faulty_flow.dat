2|10|Public
40|$|This paper explores some {{techniques}} {{which may}} help facility operators better understand complex hourly energy data by enhancing {{the display of}} data with animation (or timesequencing). Animated displays {{such as the ones}} presented in this paper enhance the usefulness of the graphic display because time and temperature dependent trends can be more easily seen. There is an increasing need for new display paradigms that can help facility operators efficiently scan and detect problems within the river of incoming data from control systems. This need becomes even more important during times of a shrinking labor pool. In this paper the use of animated displays are described as they apply to the measurement of chilled water where the animated display makes a <b>faulty</b> <b>flow</b> meter easier to diagnose...|$|E
40|$|Proteases are {{important}} enzymes in the biotechnology {{due to their}} specific cleavage of substrates. HRV 3 C, sortase A and TEV are some examples of cysteine proteases which become more of use lately in applications as removal of affinity tags (3 C/TEV) and labelling of proteins (sortase). Here an investigation was made on the proteases by displaying them on two different prokaryotic hosts; E. coli and S. carnosus and to use these to cleave away affinity proteins (Affibody molecule) from other cells with an incorporated cleavage site. Constructs were cloned and incorporated into expressing strains which were then cultivated and induced. Analysis of surface expression was done by flow cytometer. Cleavage was made by cultivating combinations with cleavable bacteria and bacteria displaying proteases. A functional protease {{would lead to the}} presence of Affibody molecules in the supernatant. Flow cytomtery analysis was first made to inevstigate signal difference in Affibody binding by the addition of flurophores. Secondly SDS-PAGE was made on the centrifuged supernatant to investigate the presence of a product. Finally analysis of the bacteria was made by examining the reaction with soluble substrate and comparing activity with soluble enzyme. All of the enzymes were able to be displayed on the surface of bacteria with a clear separation from control. The cleavage analysis showed however varying results yet no clear evidence of product. Best flow cytometer results were seen for 3 C but SDS-PAGE/MS did not show any cleaved product. For Sortase SDS-PAGE showed positive result but analysis with MS showed no product. TEV was concluded not to be funcional at all hence the failing to cleave soluble substrate  when condition seemed near optimal and <b>faulty</b> <b>flow</b> cytometer data. Even though the lack of success there is still many further studies that can be done on the proteases in order to prove its absence/presence  of activity...|$|E
5000|$|On 12 August 1993, {{the count}} reached the T−3 second mark, {{at which point}} the Space Shuttle Main Engine (SSMEs) had ignited. A {{shutdown}} was then triggered by <b>faulty</b> fuel <b>flow</b> sensors in one of the SSMEs.|$|R
25|$|In {{the morning}} hours of June 13, the Army Corps of Engineers called for a {{complete}} evacuation of a 100-year flood zone in downtown Des Moines, but the data {{used to call the}} evacuation turned out to be false because of a <b>faulty</b> water <b>flow</b> rate sensor. Residents returned to their homes {{by the end of the}} day.|$|R
40|$|Abstract. In this paper, we {{introduce}} new concepts and methods for checking the correctness of control flow instructions during {{the execution of}} programs in embedded CPUs. Detecting and avoiding the execution of <b>faulty</b> control <b>flow</b> instructions {{is a problem of}} growing importance w. r. t. reliability and security. On the other hand, hardware cost overheads and an easy integration into the design flow are of utmost important for cost sensitive embedded systems. Our proposed methodology is able to monitor all direct jumps and branches as well as calls and returns form subroutines autonomously during program execution. Furthermore, we propose and evaluate an implementation of an autonomous checker unit which is closely coupled to the processor and can detect and even avoid the execution of a <b>faulty</b> control <b>flow</b> instruction. Upon detection of a faulty instruction, we propose a method to refetch and reexecute the incorrect jump or branch instruction. Other benefits of this novel approach are that the application code must not be changed or augmented by signatures or additional instructions, and that there is no measurable performance impact in terms of execution latency. From the user point of view, our approach is completely transparent to a program developer. ...|$|R
40|$|Effective bug {{localization}} {{is important}} for realizing automated debugging. One attractive approach is to apply statistical techniques on a collection of evaluation profiles of program properties to help localize bugs. Previous research has proposed various specialized techniques to isolate certain program predicates as bug predictors. However, because many bugs may not be directly associated with these predicates, these techniques are often ineffective in localizing bugs. Relevant control flow paths that may contain bug locations are more informative than stand-alone predicates for discovering and understanding bugs. In this paper, we propose an approach to automatically generate such <b>faulty</b> control <b>flow</b> paths that link many bug predictors together for revealing bugs. Our approach combines feature selection (to accurately select failure-related predicates as bug predictors), clustering (to group correlated predicates), and control flow graph traversal in a novel way to help generate the paths. We have evaluated our approach on code including the Siemens test suite and rhythmbox (a large music management application for GNOME). Our experiments show that the <b>faulty</b> control <b>flow</b> paths are accurate, useful for localizing many bugs, and helped to discover previously unknown errors in rhythmbo...|$|R
40|$|The {{analysis}} of archived Crystal River- 3 feedwater flow data reveals {{a slow and}} steady degradation of the flow meter measurements during the 1992 / 1993 operating cycle. MSET can reliably estimate the true flow rate and quantify the degree of departure between the indicated signal and the true flow rate with high accuracy. The MSET computed flow rate could, in principle, be used to provide an improved estimate of the reactor power and hence avoid the revenue loss associated with derating the reactor based on a <b>faulty</b> feedwater <b>flow</b> rate indication...|$|R
40|$|A method, {{based on}} {{simulation}} models, for active functional tests and optimization of coil energy recovery loop systems in Air Handling Units (AHUs) {{have been developed}} and a first version implemented in the program Engineering Equation Solver (EES). The heat recovery {{in this kind of}} systems is often much lower than expected. The main reason for the poor efficiency is <b>faulty</b> fluid <b>flow</b> in the recovery loop. The efficiency can in many cases be raised by tenths of units of percentage. This paper describes experiences from one example of use of the EES based tool in practice, to determine the correct fluid flow. Also, there is a discussion about the measurements in respect of needed accuracy and other related questions...|$|R
40|$|Coverage metrics, which {{evaluate}} {{the ability of}} a test sequence to detect design faults, are essential to the validation process. A key source of difficulty in determining fault detection is that the control flow path traversed {{in the presence of a}} fault cannot be determined. Fault detection can only be accurately determined by exploring the set of all control flow paths, which may be traversed as a result of a fault. We present a coverage metric that determines the propagation of fault effects along all possible <b>faulty</b> control <b>flow</b> paths. The complexity of exploring multiple control flow paths is greatly alleviated by heuristically pruning infeasible control flow paths using the algorithm that we present. The proposed coverage metric provides high accuracy in designs that contain complex control flow. The results obtained are promising. 1...|$|R
40|$|Workflow {{analysis}} is indispensable to capture modeling errors in workflow designs. While {{in the past}} several analysis approaches for workflows have been defined, these approaches do not give precise feedback, making it hard for a designer to pinpoint the exact cause of modeling errors. In this paper we introduce a novel approach for analyzing and diagnosing workflows based on integer programming (IP). Each workflow model is translated into a set of IP constraints. <b>Faulty</b> control <b>flow</b> connectors can be easily detected using the approach by relaxing the corresponding constraints. We show that this approach is correct, and illustrate it with realistic examples where the CPLEX tool is used to solve the IP formulations. Moreover, the approach is flexible and can be extended to handle a variety of new constraints, as well as to support new workflow patterns. Its features complement those of existing approaches...|$|R

