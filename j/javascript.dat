8304|39|Public
5|$|Pyjs compiles Python to <b>JavaScript.</b>|$|E
5|$|The above {{minimization}} {{problem can}} be efficiently solved by the cyclical coordinate descent method, an open source implementation of which is available in <b>JavaScript.</b>|$|E
5|$|CryptoWall 3.0 used a payload {{written in}} <b>JavaScript</b> {{as part of}} an email attachment, which {{downloads}} executables disguised as JPG images. To further evade detection, the malware creates new instances of explorer.exe and svchost.exe to communicate with its servers. When encrypting files, the malware also deletes volume shadow copies, and installs spyware that steals passwords and Bitcoin wallets.|$|E
5|$|Different tactics {{have been}} used on iOS devices, such as {{exploiting}} iCloud accounts and using the Find My iPhone system to lock access to the device. On iOS 10.3, Apple patched a bug in the handling of <b>JavaScript</b> pop-up windows in Safari that had been exploited by ransomware websites.|$|E
5|$|Web {{is based}} on the WebKit web browser engine, which {{provides}} support for HTML 4 and XHTML, CSS 1 and 2, substantial degree of implementation of HTML5 and CSS 3 features, Web Inspector (HTML and <b>JavaScript</b> debugging tool) and NPAPI, including Adobe Flash and IcedTea plug-ins support.|$|E
5|$|Beginning in 2005, the Washington Blade {{also ran}} a free news {{clipping}} service called the BladeWire. This service collected news stories {{of interest to}} the LGBT community from a variety of local, state, regional, national, and selected international media sources. The service was generated by the Blades editors and was published on the internet. A feature of the BladeWire also allowed it to be syndicated onto other websites using <b>JavaScript.</b>|$|E
5|$|Byte {{magazine}} {{published an}} assembly language version of Spacewar in 1977 that {{ran on the}} Altair 8800 and other Intel 8080-based microcomputers using an oscilloscope as the graphical display and a lookup table for orbits, {{as well as a}} three-dimensional variant in 1979 written in Tiny BASIC. More modern recreations of the game for computers have been made as well. An emulated version of the original game, based on the original source code made publicly available by Martin Graetz and running in a <b>JavaScript</b> PDP-1 emulator, was made available to play on the internet in 2012. The only working PDP-1s that are known to exist are kept in the Computer History Museum in Mountain View, California, where demonstrations of the machine are held, which include playing Spacewar.|$|E
5|$|On September 9, 2009, Capcom {{announced}} the Japanese release of Ultimate All-Stars. Starting on that day, the company periodically revealed the game's new characters; however, the full cast was leaked through <b>JavaScript</b> code on the game's official Japanese site. With {{the exception of}} Hakushon Daimaō, who was removed due to unspecified licensing issues, every playable character from the original Wii release was included. Hakushon Daimaō was also removed in Ultimate All-Stars Japanese release, due to both his unpopularity with players, and the game's status as a localization of the North American version. The new characters encompassed Frank West from Dead Rising, Zero from Mega Man X, Yatterman-2 from Yatterman, Joe the Condor from Gatchaman, and the title character from Tekkaman Blade. Shinji Ueda served as a director along with Hidetoshi Ishizawa. Ishizawa admitted that, just as Cross Generation of Heroes was not initially planned {{to be released in}}ternationally, neither was Ultimate All-Stars planned to be released in Japan. However, fan appeals and the research and development team's own hopes resulted in the game's Japanese localization.|$|E
5|$|Perl's text-handling {{capabilities}} can be {{used for}} generating SQL queries; arrays, hashes, and automatic memory management make it easy to collect and process the returned data. For example, in Tim Bunce's Perl DBI application programming interface (API), the arguments to the API can be the text of SQL queries; thus it is possible to program in multiple languages at the same time (e.g., for generating a Web page using HTML, <b>JavaScript,</b> and SQL in a here document). The use of Perl variable interpolation to programmatically customize each of the SQL queries, and the specification of Perl arrays or hashes as the structures to programmatically hold the resulting data sets from each SQL query, allows a high-level mechanism for handling large amounts of data for post-processing by a Perl subprogram.|$|E
25|$|A <b>JavaScript</b> engine (also {{known as}} <b>JavaScript</b> {{interpreter}} or <b>JavaScript</b> implementation) is an interpreter that interprets <b>JavaScript</b> source code and executes the script accordingly. The first <b>JavaScript</b> engine {{was created by}} Brendan Eich at Netscape, for the Netscape Navigator Web browser. The engine, code-named SpiderMonkey, is implemented in C. It has since been updated (in <b>JavaScript</b> 1.5) to conform to ECMAScript 3. The Rhino engine, created primarily by Norris Boyd (formerly at Netscape, now at Google) is a <b>JavaScript</b> implementation in Java. Rhino, like SpiderMonkey, is ECMAScript 3 compliant.|$|E
25|$|The terms Vanilla <b>JavaScript</b> and Vanilla JS {{refer to}} <b>JavaScript</b> not {{extended}} by any frameworks or additional libraries. Scripts written in Vanilla JS are plain <b>JavaScript</b> code.|$|E
25|$|Objective-J, a superset of <b>JavaScript</b> that compiles to {{standard}} <b>JavaScript.</b> It adds traditional inheritance and Smalltalk/Objective-C style dynamic dispatch and optional pseudo-static typing to <b>JavaScript.</b>|$|E
25|$|Rails 5.1 was {{released}} on April 27, 2017, introducing <b>JavaScript</b> integration changes (management of <b>JavaScript</b> dependencies from NPM via Yarn, optional compilation of <b>JavaScript</b> using Webpack, and a rewrite of Rails UJS to use vanilla <b>JavaScript</b> instead of depending on jQuery), system tests using Capybara, encrypted secrets, parameterized mailers, direct & resolved routes, and a unified form_with helper replacing the form_tag/form_for helpers.|$|E
25|$|<b>JavaScript,</b> a {{scripting}} language widely used for client-side web development, became the originating dialect of the ECMAScript standard. It is a dynamic, weakly typed, prototype-based language with first-class functions. <b>JavaScript</b> {{was influenced by}} many languages and was designed to look like Java, but to be easier for non-programmers to work with. Brendan Eich invented <b>JavaScript</b> (which he called Mocha) in 1995; it later became renamed to LiveScript, and finally to <b>JavaScript.</b>|$|E
25|$|Microsoft Windows allows <b>JavaScript</b> source {{files on}} a computer's hard drive to be {{launched}} as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes <b>JavaScript</b> (like VBScript) a theoretically viable vector for a Trojan horse, although <b>JavaScript</b> Trojan horses are uncommon in practice.|$|E
25|$|CoffeeScript, an {{alternate}} syntax for <b>JavaScript</b> {{intended to be}} more concise and readable. It adds features like array comprehensions (also available in <b>JavaScript</b> since version 1.7) and pattern matching. Like Objective-J, it compiles to <b>JavaScript.</b> Ruby and Python have been cited as influential on CoffeeScript syntax.|$|E
25|$|Late Night Software's <b>JavaScript</b> OSA (also {{known as}} <b>JavaScript</b> for OSA, or JSOSA) is a {{freeware}} alternative to AppleScript for OS X. It {{is based on}} the Mozilla <b>JavaScript</b> 1.5 implementation, {{with the addition of a}} MacOS object for interaction with the operating system and third-party applications.|$|E
25|$|Qt Quick's markup {{language}} (available since Qt 4.7) uses <b>JavaScript</b> for its application logic. Its declarative syntax is also similar to <b>JavaScript.</b>|$|E
25|$|React (<b>JavaScript</b> library) is an {{open-source}} <b>JavaScript</b> library {{providing a}} views that is rendered using components specified as custom HTML tags.|$|E
25|$|The <b>JavaScript</b> {{virtual machine}} used by Chrome, the V8 <b>JavaScript</b> engine, has {{features}} such as dynamic code generation, hidden class transitions, and precise garbage collection.|$|E
25|$|Prototypes: <b>JavaScript</b> uses prototypes {{where many}} other {{object-oriented}} languages use classes for inheritance. It {{is possible to}} simulate many class-based features with prototypes in <b>JavaScript.</b>|$|E
25|$|WinJS {{provides}} a special Windows Library for <b>JavaScript</b> functionality in Windows 8 {{that enables the}} development of Modern style (formerly Metro style) applications in HTML5 and <b>JavaScript.</b>|$|E
25|$|Alternatively, {{non-standard}} solutions exist {{such as the}} use of Mozilla <b>JavaScript</b> Sharp Variables. However this functionality became obsolete with <b>JavaScript</b> 1.8.5 and {{was removed}} in Firefox version 12.|$|E
25|$|Because <b>JavaScript</b> code can run locally in a user's browser (rather than on {{a remote}} server), the browser can respond to user actions quickly, making an {{application}} more responsive. Furthermore, <b>JavaScript</b> code can detect user actions that HTML alone cannot, such as individual keystrokes. Applications such as Gmail take advantage of this: much of the user-interface logic is written in <b>JavaScript,</b> and <b>JavaScript</b> dispatches requests for information (such as the content of an e-mail message) to the server. The wider trend of Ajax programming similarly exploits this strength.|$|E
25|$|Because <b>JavaScript</b> runs in widely varying environments, an {{important}} part of testing and debugging is to test and verify that the <b>JavaScript</b> works across multiple browsers.|$|E
25|$|The MongoDB {{database}} accepts queries {{written in}} <b>JavaScript.</b> MongoDB and NodeJS are the core components of MEAN: a solution stack for creating Web applications using just <b>JavaScript.</b>|$|E
25|$|Java and <b>JavaScript</b> both first {{appeared}} on 23 May 1995, but Java was developed by James Gosling of Sun Microsystems, and <b>JavaScript</b> by Brendan Eich of NetScape Communications.|$|E
25|$|<b>JavaScript</b> {{supports}} {{much of the}} {{structured programming}} syntax from C (e.g., if statements, while loops, switch statements, do while loops, etc.). One partial exception is scoping: <b>JavaScript</b> originally had only function scoping with var. ECMAScript 2015 added keywords let and const for block scoping, meaning <b>JavaScript</b> now has both function and block scoping. Like C, <b>JavaScript</b> makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allows the semicolons that would normally terminate statements to be omitted.|$|E
25|$|ClojureScript, a {{compiler}} for Clojure that targets <b>JavaScript.</b> It {{is designed}} to emit <b>JavaScript</b> code that {{is compatible with the}} advanced compilation mode of the Google Closure optimizing compiler.|$|E
25|$|Because <b>JavaScript</b> is {{the only}} {{language}} that the most popular browsers share support for, {{it has become a}} target language for many frameworks in other languages, even though <b>JavaScript</b> was never intended to be such a language. Despite the performance limitations inherent to its dynamic nature, the increasing speed of <b>JavaScript</b> engines has made the language a surprisingly feasible compilation target.|$|E
25|$|The Clusterpoint {{database}} accept queries {{written in}} JS/SQL, {{which is a}} combination of SQL and <b>JavaScript.</b> Clusterpoint has built-in computing engine that allows execution of <b>JavaScript</b> code right inside the distributed database.|$|E
25|$|Ruby on Rails is also {{noteworthy}} for its {{extensive use}} of the <b>JavaScript</b> libraries, Prototype and Script.aculo.us, for scripting Ajax actions. Ruby on Rails initially utilized lightweight SOAP for web services; this was later replaced by RESTful web services. Ruby on Rails 3.0 uses a technique called Unobtrusive <b>JavaScript</b> to separate the functionality (or logic) from {{the structure of the}} web page. jQuery is fully supported as a replacement for Prototype and is the default <b>JavaScript</b> library in Rails 3.1, reflecting an industry-wide move towards jQuery. Additionally, CoffeeScript was introduced in Rails 3.1 as the default <b>Javascript</b> language.|$|E
25|$|OS X Yosemite {{introduced}} <b>JavaScript</b> for Automation (JXA), {{which is}} built upon JavaScriptCore and the Open Scripting Architecture. It features an Objective-C bridge that enables entire Cocoa applications to be programmed in <b>JavaScript.</b>|$|E
25|$|Rhino is an {{open source}} <b>JavaScript</b> engine managed by the Mozilla Foundation. It is {{developed}} entirely in Java. Rhino converts <b>JavaScript</b> scripts into Java classes. Rhino works in both compiled and interpreted mode.|$|E
25|$|Though JSON was {{originally}} advertised and {{believed to be}} a strict subset of <b>JavaScript</b> and ECMAScript, it inadvertently allows some unescaped characters in strings that are illegal in <b>JavaScript</b> and ECMAScript strings. See Data portability issues below.|$|E
25|$|Version 23, {{released}} in August 2013, followed {{the lead of}} its competitors by blocking iframe, stylesheet, and script resources served from non-HTTPS servers embedded on HTTPS pages by default. Additionally, <b>JavaScript</b> could also no longer be disabled through Firefox's preferences, and <b>JavaScript</b> was automatically re-enabled for users who upgraded to 23 or higher with it disabled. The change was made due to its use across the majority of websites, the potential repercussions on non-experienced users who are unaware of its impact, along with the availability of extensions such as NoScript, which can disable <b>JavaScript</b> in a more controlled fashion. The following release added the ability to disable <b>JavaScript</b> through the developer tools for testing purposes.|$|E
