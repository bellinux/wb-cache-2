201|1384|Public
25|$|After {{detailed}} {{forensic analysis}} of the FDR data, the flight control primary computer (FCPC) software and the air data inertial reference unit (ADIRU), {{it was determined that}} the CPU of the ADIRU corrupted the angle of attack (AOA) data. The exact nature was that the ADIRU CPU erroneously relabelled the altitude <b>data</b> <b>word</b> so that the binary data that represented 37,012 (the altitude {{at the time of the}} incident) would represent an angle of attack of 50.625 degrees. The FCPC then processed the erroneously high AOA data, triggering the high-AOA protection mode, which sent a command to the electrical flight control system (EFCS) to pitch the nose down.|$|E
25|$|The AGC {{transferred}} data to {{and from}} memory through the G register in a process called the memory cycle. The memory cycle took 12 timing pulses (11.72μs). The cycle began at timing pulse 1 (TP1) when the AGC loaded the memory address to be fetched into the S register. The memory hardware retrieved the <b>data</b> <b>word</b> from memory at the address specified by the S register. Words from erasable memory were deposited into the G register by timing pulse 6 (TP6); words from fixed memory were available by timing pulse 7. The retrieved memory word was then available in the G register for AGC access during timing pulses 7 through 10. After timing pulse 10, the data in the G register was written back to memory.|$|E
50|$|Unlike {{standard}} {{computer memory}} (random access memory or RAM) {{in which the}} user supplies a memory address and the RAM returns the <b>data</b> <b>word</b> stored at that address, a CAM is designed such that the user supplies a <b>data</b> <b>word</b> and the CAM searches its entire memory {{to see if that}} <b>data</b> <b>word</b> is stored anywhere in it. If the <b>data</b> <b>word</b> is found, the CAM returns a list of one or more storage addresses where the word was found (and in some architectures, it also returns the contents of that storage address, or other associated pieces of data). Thus, a CAM is the hardware embodiment of what in software terms would be called an associative array.The <b>data</b> <b>word</b> recognition unit was proposed by Dudley Allen Buck in 1955.|$|E
5000|$|Link 16 {{information}} is primarily coded in J.-series messages which are binary <b>data</b> <b>words</b> with well-defined meanings. These <b>data</b> <b>words</b> are grouped in functional areas, and allocated to network participation groups (NPG) (virtual networks), most importantly: ...|$|R
40|$|Abstract. In <b>data</b> <b>words,</b> each {{position}} carries {{not only}} a letter form a finite alphabet, as the usual words do, but also a data value coming from an infinite domain. There has been {{a renewed interest in}} them due to applications in querying and reasoning about data models with complex structural properties, notably XML, and more recently, graph databases. Logical formalisms designed for querying such data often require concise and easily understandable presentations of regular languages over <b>data</b> <b>words.</b> Our goal, therefore, is to define and study regular expressions for <b>data</b> <b>words.</b> As the automaton model, we take register automata, which are a natural analog of NFAs for <b>data</b> <b>words.</b> We first equip standard regular expressions with limited memory, and show that they capture the class of <b>data</b> <b>words</b> defined by register automata. The complexity of the main decision problems for these expressions (nonemptiness, membership) also {{turns out to be the}} same as for register automata. We then look at a subclass of these regular expressions that can define many properties of interest in applications of <b>data</b> <b>words,</b> and show that the main decision problems can be solved efficiently for it. ...|$|R
50|$|The <b>Data</b> Count <b>word</b> is an 8-bit value, {{encoded in}} the same fashion as the DID, which {{indicates}} how many user <b>data</b> <b>words</b> are to follow. It can range from 0 to 255.|$|R
5000|$|Mode Command With <b>Data</b> <b>Word</b> (Receive). The Bus Controller sends one command {{word with}} a Sub-address of 0 or 31 {{signifying}} a Mode Code type command immediately {{followed by a}} single <b>data</b> <b>word.</b> The Remote Terminal responds with a Status word.|$|E
50|$|SAE AS15532: <b>Data</b> <b>Word</b> and Message Formats.|$|E
5000|$|Mode Command With <b>Data</b> <b>Word</b> (Broadcast). The Bus Controller sends one command {{word with}} a Terminal address of 31 {{signifying}} a broadcast type command and a sub-address of 0 or 31 signifying a Mode Code type command, immediately followed by one <b>Data</b> <b>word.</b> No Remote Terminals will respond.|$|E
50|$|UNI/O uses 8-bit <b>data</b> <b>words</b> for communication. Bytes are {{transmitted}} msb first.|$|R
5000|$|... 16 <b>data</b> <b>words</b> (used for {{mantissa}} digits in {{the original}} calculator design) ...|$|R
40|$|Coding, using 3 -bit binary words, is {{applicable}} to any measurement having integer scale up to 100. System using 6 -bit <b>data</b> <b>words</b> can {{be expanded to}} read from 1 to 10, 000, and 9 -bit <b>data</b> <b>words</b> can increase range to 1, 000, 000. Code may be ''read'' directly by observation after memorizing simple listing of 9 's and 10 's...|$|R
50|$|As {{with any}} {{calculation}} that divides a binary <b>data</b> <b>word</b> into short blocks and treats the blocks as numbers, any two systems expecting {{to get the}} same result should preserve the ordering of bits in the <b>data</b> <b>word.</b> In this respect, the Fletcher checksum is not different from other checksum and CRC algorithms and needs no special explanation.|$|E
5000|$|The next <b>data</b> <b>word</b> on Data In is latched on {{rising edge}} of /K ...|$|E
50|$|As a 3838/1553B <b>data</b> <b>word,</b> the HS action word is {{preceded by}} the 3 bit-time <b>data</b> <b>word</b> sync field and {{followed}} by the single bit parity bit. As part of a 3838/1553B BC-RT transfer, it is preceded by a 3838/1553B command word, and should normally, i.e. if not broadcast, invalid, or illegal, elicit a 3838/1553B status word from the receiving RT.|$|E
40|$|Abstract. <b>Data</b> <b>words</b> {{assign to}} each {{position}} {{a letter from}} a finite alphabet and a data value from an infinite set. Introduced as an abstraction of paths in XML documents, they recently found applications in querying graph databases as well. Those are actively studied due to applications in such diverse areas as social networks, semantic web, and biological databases. Querying formalisms for graph databases are based on specifying paths conforming to some regular conditions, which led to astudyofregularexpressionsfordatawords. Previously studied regular expressions for <b>data</b> <b>words</b> were either rather limited, or had the full expressiveness of register automata, at the expense of a quite unnatural and unintuitive binding mechanism for data values. Our goal is to introduce a natural extension of regular expressions with proper bindings for data values, similar to the notion of freeze quantifiers used in connection with temporal logics over <b>data</b> <b>words,</b> and to study both language-theoretic properties of the resulting class of languages of <b>data</b> <b>words,</b> and their applications in querying graph databases. ...|$|R
50|$|Word {{clock is}} {{so named because}} it clocks each sample. Samples are {{represented}} in <b>data</b> <b>words.</b>|$|R
40|$|<b>Data</b> <b>words</b> and <b>data</b> trees {{appear in}} {{verification}} and XML processing. The term "data 2 ̆ 72 ̆ 7 means that {{positions of the}} word, or tree, are decorated with elements of an infinite set of data values, such as natural numbers or ASCII strings. This talk is {{a survey of the}} various automaton models that have been developed for <b>data</b> <b>words</b> and <b>data</b> trees...|$|R
50|$|VALC {{is another}} {{polymorphic}} operator. If it hits a <b>data</b> <b>word,</b> that word is loaded {{to the top}} of stack. If it hits an IRW, that is followed, possibly in a chain of IRWs until a <b>data</b> <b>word</b> is found. If a PCW is found, then a function is entered to compute the value and the VALC does not complete until the function returns.|$|E
50|$|Fletcher {{addresses}} both {{of these}} weaknesses by computing a second value along with the simple checksum. This is the modular sum of the values taken by the simple checksum as each block of the <b>data</b> <b>word</b> is added to it. The modulus used is the same. So, for each block of the <b>data</b> <b>word,</b> taken in sequence, the block's value {{is added to the}} first sum and the new value of the first sum is then added to the second sum. Both sums start with the value zero (or some other known value). At the end of the <b>data</b> <b>word,</b> the modulus operator is applied and the two values are combined to form the Fletcher checksum value.|$|E
5000|$|The second {{rising edge}} of C puts the <b>data</b> <b>word,</b> from address A, on the Data Out bus ...|$|E
5000|$|For {{the above}} code with , , and {{generator}} polynomial , we obtain the following assignment from <b>data</b> <b>words</b> to codewords: ...|$|R
5000|$|... 1961: IBM {{delivers}} the IBM 7030 Stretch supercomputer, which uses 64-bit <b>data</b> <b>words</b> and 32- or 64-bit instruction words.|$|R
25|$|DDR SDRAM employs {{prefetch}} architecture {{to allow}} {{quick and easy}} access to multiple <b>data</b> <b>words</b> located on a common physical row in the memory.|$|R
5000|$|... where [...] is {{of degree}} less than [...] The code word {{corresponding}} to the <b>data</b> <b>word</b> [...] is then defined to be ...|$|E
50|$|MSI (first {{defined in}} PCI 2.2) permits {{a device to}} {{allocate}} 1, 2, 4, 8, 16 or 32 interrupts. The device is programmed with an address to write to (generally a control register in an interrupt controller), and a 16-bit <b>data</b> <b>word</b> to identify it. The interrupt number {{is added to the}} <b>data</b> <b>word</b> to identify the interrupt. Some platforms such as Windows do not use all 32 interrupts but only use up to 16 interrupts.|$|E
50|$|In general, new {{processors}} {{must use}} the same <b>data</b> <b>word</b> lengths and virtual address widths as an older processor to have binary compatibility with that older processor.|$|E
40|$|International audienceWe see <b>data</b> <b>words</b> as {{sequences}} of letters with additional edges that connect pairs of positions carrying {{the same data}} value. We consider a natural model of automaton walking on <b>data</b> <b>words,</b> called <b>Data</b> Walking Automaton, and study its closure properties, expressiveness, and the complexity of paradigmatic problems. We prove that deterministic DWA are strictly included in non-deterministic DWA, that the former subclass is closed under all boolean operations, and that the latter class enjoys a decidable containment problem...|$|R
40|$|Abstract—We {{define a}} new kind of automata {{recognizing}} properties of <b>data</b> <b>words</b> or <b>data</b> trees and prove that the automata capture all queries definable in Regular XPath. We show that the automata-theoretic approach may be applied to answer decidability and expressibility questions for XPath. Finally, we use the newly introduced automata as a common framework to classify existing automata on <b>data</b> <b>words</b> and trees, including data automata, register automata and alternating register automata. Keywords-Regular XPath, data automata, register automata. I...|$|R
2500|$|... an {{interface}} {{designed to}} transfer two <b>data</b> <b>words</b> per clock cycle at the I/O pins. A single {{read or write}} operation for the DDR4 SDRAM ...|$|R
5000|$|Mode Command Without <b>Data</b> <b>Word.</b> The Bus Controller sends one command {{word with}} a Sub-address of 0 or 31 {{signifying}} a Mode Code type command. The Remote Terminal responds with a Status word.|$|E
50|$|The FLP burst {{consists}} of 17 NLP at a 125 µs time interval (with a tolerance of 14 µs). Between {{each pair of}} two consecutive NLP (i.e. at 62.5 µs after first NLP of the pulse pair) an additional positive pulse may be present. The presence of this additional pulse indicates a logical 1, its absence a logical 0. As a result, every FLP contains a <b>data</b> <b>word</b> of 16 bits. This <b>data</b> <b>word</b> is called a link code word (LCW). The bits of the link code word are numbered from 0 to 15, where bit 0 corresponds to the first possible pulse in time and bit 15 to the last.|$|E
5000|$|... #Caption: Cartographical {{representation}} of a self-organizing map (U-Matrix) based on Wikipedia featured article <b>data</b> (<b>word</b> frequency). Distance is inversely proportional to similarity. The [...] "mountains" [...] are edges between clusters. The red lines are links between articles.|$|E
40|$|Nominal {{sets are}} a {{different}} kind of set theory, with a more relaxed notion of finiteness. They offer an elegant formalism for describing λ-terms modulo α-conversion, or automata on <b>data</b> <b>words.</b> This paper is an attempt at defining computation in nominal sets. We present a rudimentary programming language, called Nλ. The key idea is that it includes a native type for finite sets in the nominal sense. To illustrate the power of our language, we write short programs that process automata on <b>data</b> <b>words...</b>|$|R
40|$|AbstractHybrid {{temporal}} logic (HTL) on <b>data</b> <b>words</b> {{can be considered}} {{as an extension of the}} logic LTL↓ introduced by Demri and Lazic [Stephane Demri and Ranko Lazic. LTL with the freeze quantifier and register automata. In LICSʼ 06 : Proceedings of the 21 st Annual IEEE Symposium on Logic in Computer Science, pages 17 – 26, Washington, DC, USA, 2006. IEEE Computer Society]. The paper compares the expressive power of HTL on <b>data</b> <b>words</b> with that of LTL↓. It is shown that there are properties of <b>data</b> <b>words</b> that can be expressed in HTL with two variables but not in LTL↓. On the other hand, every property that can be expressed in HTL with one variable can also be expressed in LTL↓ with one variable. The paper further studies the succinctness of HTL in comparison with LTL↓ and shows that the number-of-variables hierarchy of HTL is infinite...|$|R
5000|$|A {{group of}} related <b>data,</b> <b>words,</b> or fields {{treated as a}} {{meaningful}} unit; for instance, a Name, Address, and Telephone Number can be a [...] "Personal Record".|$|R
