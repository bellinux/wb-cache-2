1|1|Public
40|$|Abstract. A {{standard}} {{tool for}} secure remote access, the SSH protocol uses publickey cryptography {{to establish an}} encrypted and <b>integrity-protected</b> <b>channel</b> with a remote server. However, widely-deployed implementations of the protocol are vulnerable to man-in-the-middle attacks, where an adversary substitutes her public key for the server’s. This danger particularly threatens a traveling user Bob borrowing a client machine. Imposing a traditional X. 509 PKI on all SSH servers and clients is neither flexible nor scalable nor (in the foreseeable future) practical. Requiring extensive work or an SSL server at Bob’s site is also not practical for many users. This paper presents our experiences designing and implementing an alternative scheme that solves the public-key security problem in SSH without requiring such an a priori universal trust structure or extensive sysadmin work—although it does require a modified SSH client. (The code is available for public download. ...|$|E
50|$|Additionally, {{explicit}} PCP security {{mechanisms are}} available as extensions to the PCP protocol, providing authentication and {{access control mechanisms}} by using an authenticated and <b>integrity-protected</b> in-band signalling <b>channel,</b> which relies on Extensible Authentication Protocol (EAP) to perform the authentication between devices involved in a PCP negotiation session. Such PCP-enabled NAT devices or firewalls may still accept unauthenticated mapping requests; at the same time, all previously described explicit mapping constraints still apply.|$|R

