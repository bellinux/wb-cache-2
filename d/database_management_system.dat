3287|10000|Public
5|$|Meanwhile, Microsoft began {{introducing}} {{its most}} prominent office products. Microsoft Works, an integrated office program which combined features typically {{found in a}} word processor, spreadsheet, database and other office applications, saw its first release as an application for the Apple Macintosh {{towards the end of}} 1986. Microsoft Works would later be sold with other Microsoft products including Microsoft Word and Microsoft Bookshelf, a reference collection introduced in 1987 that was the company's first CD-ROM product. Later, on August 8, 1989, Microsoft introduced its most successful office product, Microsoft Office. Unlike the model of Microsoft Works, Microsoft Office was a bundle of separate office productivity applications, such as Microsoft Word, Microsoft Excel and so forth. While Microsoft Word and Microsoft Office were mostly developed internally, Microsoft also continued its trend of rebranding products from other companies, such as Microsoft SQL Server on January 13, 1988, a relational <b>database</b> <b>management</b> <b>system</b> for companies that was based on technology licensed from Sybase.|$|E
25|$|Content served {{from the}} server's {{filesystem}} {{instead of a}} relational <b>database</b> <b>management</b> <b>system</b> (RDBMS).|$|E
25|$|Other {{features}} include an integrated DB2 <b>database</b> <b>management</b> <b>system,</b> a menu-driven interface, multi-user support, non-programmable terminals (IBM 5250) and printers, security, communications, client–server and web-based applications. Much {{of the software}} necessary to run the IBM System i is included and integrated into the base operating system.|$|E
40|$|Recently, new {{applications}} have emerged that require <b>database</b> <b>management</b> <b>systems</b> with uncertainty capabilities. Many {{of the existing}} approaches to modelling uncertainty in <b>database</b> <b>management</b> <b>systems</b> {{are based on the}} theory of fuzzy sets. High performance is a necessary precondition for the acceptance of such systems by end users. However, performance issues have been quite neglected in research on fuzzy <b>database</b> <b>management</b> <b>systems</b> so far. In this article they are addressed explicitly. We propose new index structures for fuzzy <b>database</b> <b>management</b> <b>systems</b> based on the well known technique of superimposed coding together with detailed cost models. The correctness of the cost models as well as the efficiency of the index structures proposed is validated by a number of measurements on experimental fuzzy databases. Keywords Information Storage and Retrieval, Fuzzy <b>Database</b> <b>Management</b> <b>Systems,</b> Fuzzy Object Oriented <b>Database</b> <b>Management</b> <b>Systems,</b> Index Structures, Cost Analysis, Superimposed [...] ...|$|R
40|$|Non-relational <b>database</b> <b>management</b> <b>systems</b> {{address some}} of the {{limitations}} relational <b>database</b> <b>management</b> <b>systems</b> have when storing large volumes of unstructured, user generated text-based data in distributed environments. They follow different approaches through the data model they use, their ability to scale data storage over distributed servers and the programming interface they provide. An experimental approach was followed to measure the capabilities these alternative <b>database</b> <b>management</b> <b>systems</b> present in their approach to address the limitations of relational databases in terms of their capability to store unstructured text-based data, data warehousing capabilities, ability to scale data storage across distributed servers and the level of programming abstraction they provide. The results of the research highlighted the limitations of relational <b>database</b> <b>management</b> <b>systems.</b> The different <b>database</b> <b>management</b> <b>systems</b> do address certain limitations, but not all. Document-oriented databases provide the best results and successfully address the need to store large volumes of user generated text-based data in a distributed environmentSchool of ComputingM. Sc. (Computer Science...|$|R
50|$|Gartner {{positioned}} EnterpriseDB in the Leaders Quadrant in its Magic Quadrant for Operational <b>Database</b> <b>Management</b> <b>Systems</b> in October 2014 {{and again}} in September 2015. EnterpriseDB was recognized in the Challengers Quadrant in the Magic Quadrant for Operational <b>Database</b> <b>Management</b> <b>Systems</b> in October 2016.|$|R
25|$|Microsoft SQL Server is a {{relational}} <b>database</b> <b>management</b> <b>system</b> {{developed by}} Microsoft. As a database server, it is a software product {{with the primary}} function of storing and retrieving data as requested by other software applications—which may run either on the same computer or on another computer across a network (including the Internet).|$|E
25|$|SQL Server also {{includes}} {{an assortment of}} add-on services. While these are not essential for {{the operation of the}} database system, they provide value added services on top of the core <b>database</b> <b>management</b> <b>system.</b> These services either run as a part of some SQL Server component or out-of-process as Windows Service and presents their own API to control and interact with them.|$|E
25|$|Jet, {{being part}} of a {{relational}} <b>database</b> <b>management</b> <b>system</b> (RDBMS), allows the manipulation of relational databases. It offers a single interface that other software can use to access Microsoft databases and provides support for security, referential integrity, transaction processing, indexing, record and page locking, and data replication. In later versions, the engine has been extended to run SQL queries, store character data in Unicode format, create database views and allow bi-directional replication with Microsoft SQL Server.|$|E
40|$|The Universal Index System (UIS) is {{an index}} <b>management</b> <b>system</b> {{that uses a}} uniform {{interface}} to solve the heterogeneity problem among <b>database</b> <b>management</b> <b>systems.</b> UIS provides an easy-to-use common interface to access all underlying data, but also allows different underlying <b>database</b> <b>management</b> <b>systems,</b> storage representations, and access methods...|$|R
2500|$|... {{distributed}} {{databases and}} distributed <b>database</b> <b>management</b> <b>systems,</b> ...|$|R
50|$|Comparison of {{multi-model}} <b>databases</b> (<b>database</b> <b>management</b> <b>systems).</b>|$|R
25|$|To gain {{performance}} and determinism, some systems place functions that {{would likely be}} viewed as application logic, rather than as device drivers, in kernel mode; security applications (access control, firewalls, etc.) and operating system monitors are cited as examples. At least one embedded <b>database</b> <b>management</b> <b>system,</b> eXtremeDB Kernel Mode, has been developed specifically for kernel mode deployment, to provide a local database for kernel-based application functions, and to eliminate the context switches that would otherwise occur when kernel functions interact with a database system running in user mode.|$|E
25|$|Jet {{stands for}} Joint Engine Technology {{and was a}} {{database}} engine used for Microsoft Access, Microsoft Exchange Server and Visual Basic. Jet {{was part of a}} Relational <b>Database</b> <b>Management</b> <b>System</b> (RDBMS) and offered a single interface that other software could use to access Microsoft databases. Jet also provided support for security, referential integrity, transaction processing, indexing, record and page locking, and data replication. In later versions of Jet, the engine was extended to run SQL queries, store character data in Unicode format, create views, and allowed bi-directional replication with the Microsoft SQL Server. It has since been superseded by MSDE.|$|E
25|$|Btrieve {{is not a}} {{relational}} <b>database</b> <b>management</b> <b>system</b> (RDBMS). Early {{descriptions of}} Btrieve {{referred to it as}} a record manager (though Pervasive initially used the term navigational database but later changed this to transactional database) because it only deals with the underlying record creation, data retrieval, record updating and data deletion primitives. It uses ISAM as its underlying indexing and storage mechanism. A key part of Pervasive's architecture is the use of a MicroKernel Database Engine, which allows different database backends to be modularised and integrated easily into their DBMS package, Pervasive.SQL. This has enabled them to support both their Btrieve navigational database engine and an SQL-based engine, Scalable SQL.|$|E
5000|$|... #Article: Comparison of object-relational <b>database</b> <b>management</b> <b>systems</b> ...|$|R
5000|$|... {{distributed}} {{databases and}} distributed <b>database</b> <b>management</b> <b>systems,</b> ...|$|R
5000|$|... #Subtitle level 3: Homogeneous Distributed <b>Databases</b> <b>Management</b> <b>System</b> ...|$|R
25|$|Wiki {{software}} {{is a type}} of collaborative software that runs a wiki system, allowing web pages to be created and edited using a common web browser. It may be implemented as a series of scripts behind an existing web server, or as a standalone application server that runs on one or more web servers. The content is stored in a file system, and changes to the content are stored in a relational <b>database</b> <b>management</b> <b>system.</b> A commonly implemented software package is MediaWiki, which runs Wikipedia. Alternatively, personal wikis run as a standalone application on a single computer. WikidPad is an example. One application, TiddlyWiki, simply makes use of an even single local HTML file with JavaScript inside.|$|E
2500|$|MySQL, a {{relational}} <b>database</b> <b>management</b> <b>system</b> licensed {{under the}} GNU General Public License, initially developed by MySQL AB ...|$|E
2500|$|ArcGIS for Desktop Basic, {{formerly}} known as ArcView, is the entry level of ArcGIS licensing offered. [...] With ArcView, one is able to view and edit GIS data held in flat files, or view data stored in a relational <b>database</b> <b>management</b> <b>system</b> by accessing it through ArcSDE.|$|E
40|$|Abstract This paper {{describes}} {{security and}} privacy issues for multimedia <b>database</b> <b>management</b> <b>systems.</b> Multimedia data includes text, images, audio and video. It describes access control for multimedia <b>database</b> <b>management</b> <b>systems</b> and describes security policies and security architectures for such systems. Privacy problems {{that result from}} multimedia data mining are also discussed...|$|R
5000|$|ADOdb for {{abstraction}} {{of support}} for relational <b>database</b> <b>management</b> <b>systems</b> ...|$|R
30|$|Articles {{that focus}} on {{studying}} or proposing normal <b>database</b> <b>management</b> <b>systems.</b>|$|R
2500|$|In 1965, {{engineers}} Don Nelson and Dick Pick at TRW {{developed the}} Generalized Information Retrieval Language and System, {{for use by}} the U.S. Army to control the inventory of Cheyenne helicopter parts. [...] This developed into the Pick <b>Database</b> <b>Management</b> <b>System</b> which is still in use as of 2016.|$|E
2500|$|IBM Informix is {{a product}} family within IBM's Information Management {{division}} that is centered on several relational <b>database</b> <b>management</b> <b>system</b> (RDBMS) offerings. [...] The Informix products were originally developed by Informix Corporation, whose Informix Software subsidiary was acquired by IBM in 2001. [...] In April 2017, IBM and HCL (Products & Platforms Division) agreed to a long-term, 15-year partnership to co-develop, support, and market the product.|$|E
2500|$|Prior to the ArcGIS suite, Esri {{had focused}} its {{software}} {{development on the}} command line Arc/INFO workstation program and several Graphical User Interface-based products such as the ArcView GIS 3.x desktop program. [...] Other Esri products included MapObjects, a programming library for developers, and ArcSDE as a relational <b>database</b> <b>management</b> <b>system.</b> [...] The various products had branched out into multiple source trees and did not integrate well with one another. [...] In January 1997, Esri decided to revamp its GIS software platform, creating a single integrated software architecture.|$|E
5000|$|Charles Bachman, {{computer}} scientist and early developer of <b>database</b> <b>management</b> <b>systems</b> ...|$|R
5000|$|... 2002. <b>Database</b> <b>Management</b> <b>Systems,</b> 3rd edition. (with Raghu Ramakrishnan) Morgan Kaufmann.|$|R
50|$|Other {{relational}} <b>database</b> <b>management</b> <b>systems</b> {{support an}} ANSI-standard equivalent called information schema.|$|R
2500|$|IBM {{has been}} a leading proponent of the Open Source Initiative, and began {{supporting}} Linux in 1998. The company invests {{billions of dollars in}} services and software based on Linux through the IBM Linux Technology Center, which includes over 300 Linux kernel developers. IBM has also released code under different open source licenses, such as the platform-independent software framework Eclipse (worth approximately US$40 million {{at the time of the}} donation), the three-sentence [...] (ICU) license, and the Java-based relational <b>database</b> <b>management</b> <b>system</b> (RDBMS) Apache Derby. IBM's open source involvement has not been trouble-free, however (see SCO v. IBM).|$|E
2500|$|Microsoft SQL Server is the #3 selling <b>database</b> <b>management</b> <b>system</b> (DBMS), behind Oracle and IBM. [...] (While {{versions}} of SQL Server {{have been on}} the market since 1987, XLeratorDB is compatible with only the 2005 edition and later.) [...] Like all major DBMS, SQL Server performs a variety of data mining operations by returning or arraying data in different views (also known as drill-down). [...] In addition, SQL Server uses Transact-SQL (T-SQL) [...] to execute four major classes of pre-defined functions in native mode. [...] Functions operating on the DBMS offer several advantages over client layer applications like Excel: they utilize the most up-to-date data available; they can process far larger quantities of data; and, the data is not subject to exporting and transcription errors.|$|E
2500|$|Jet {{supports}} {{transaction processing}} for database {{systems that have}} this capability. (ODBC systems have one-level transaction processing, while several ISAM systems like Paradox do not support transaction processing.) A transaction {{is a series of}} operations performed on a database that must be done together [...] this is known as atomicity {{and is one of the}} ACID (Atomicity, Consistency, Isolation, and Durability), concepts considered to be the key transaction processing features of a <b>database</b> <b>management</b> <b>system.</b> For transaction processing to work (until Jet 3.0), the programmer needed to begin the transaction manually, perform the operations needed to be performed in the transaction, and then commit (save) the transaction. Until the transaction is committed, changes are made only in memory and not actually written to disk. Transactions have a number of advantages over independent database updates. One of the main advantages is that transactions can be abandoned if a problem occurs during the transaction. This is called rolling back the transaction, or just rollback, and it restores the state of the database records to precisely the state before the transaction began. Transactions also permit the state of the database to remain consistent if a system failure occurs in the middle of a sequence of updates required to be atomic. There is no chance that only some of the updates will end up written to the database; either all will succeed, or the changes will be discarded when the database system restarts. With ODBC's in-memory policy, transactions also allow for many updates to a record to occur entirely within memory, with only one expensive disk write at the end.|$|E
5000|$|Non-relational, NoSQL <b>database</b> <b>management</b> <b>systems</b> {{that provide}} {{temporal}} features including the following: ...|$|R
40|$|New {{applications}} have emerged, demanding <b>database</b> <b>management</b> <b>systems</b> with enhanced functionality. However, {{high performance}} {{is a necessary}} precondition for the acceptance of such systems by end users. In this context we developed, implemented, and tested algorithms and index structures for improving the performance of advanced <b>database</b> <b>management</b> <b>systems.</b> We focused on index structures and join algorithms for set-valued attributes...|$|R
40|$|Object {{oriented}} <b>database</b> <b>management</b> <b>systems</b> {{have been}} evaluated as a possible means of storing and retrieving conditions information #calibration and geometry data# for the BaBar experiment. This paper describes the main features of object oriented <b>database</b> <b>management</b> <b>systems</b> and {{presents the results of}} benchmark performance tests on two commercial systems, Objectstore and Objectivity. Recommendations for the database system best suited for use in the BaBar experiment are given. 1 Introduction Object oriented <b>database</b> <b>management</b> <b>systems</b> #OODBMS# provide a convenient and powerful means of storing and retrieving large amounts of complex data, thus they are potentially well suited for use in a high energy physics experiment. The main advantages of using a commercial database system is that it eliminates the lengthy and costly process of developing and testing an in-house database system. Two commercial object oriented <b>database</b> <b>management</b> <b>systems</b> {{have been evaluated}} as potential can [...] ...|$|R
