84|3|Public
25|$|Version 1.0 of the XML Schema language, {{often used}} to {{describe}} data interchanged between computers in XML, includes built-in primitive datatypes date and <b>dateTime.</b> Although these are {{defined in terms of}} ISO 8601 which uses the proleptic Gregorian calendar and therefore should include a year 0, the XML Schema specification states that there is no year zero. Version 1.1 of the defining recommendation realigned the specification with ISO 8601 by including a year zero, despite the problems arising from the lack of backward compatibility.|$|E
50|$|Note (10): Informix <b>DATETIME</b> type has {{adjustable}} range from YEAR only through 1/10000th second. <b>DATETIME</b> date range is 0001-01-01 00:00:00.00000 through 9999-12-31 23:59:59.99999.|$|E
5000|$|Supports continuous, discrete, categorical, and <b>datetime</b> {{variables}} ...|$|E
40|$|This minor release fixes {{a number}} of small issues, {{particularly}} around plotting. CIS 1. 3. 1 updates JASCIS- 231 & JASCIS- 209 - CIS now better determines the yaxis when the user specifies the xaxis as 'time' so that overlaying multiple time series is easy JASCIS- 283 - An issue with setting xmin or xmax using <b>datetimes</b> A minor fix to the AerosolCCI product Updates to support Iris 1. 9. ...|$|R
40|$|Since the {{beginning}} of time, people have had the desire to document the passage of hours, days, weeks and years. After documenting the passage of time, calculating differences in time came next. Calculating this passage of time using dates, times and <b>datetimes</b> in SAS ® can seem intimidating at first, however, after learning a few tips and tricks, this task can be invigorating and, some might say, fun! An introduction to SAS dates will be discussed as well as techniques for 1) formatting dates, 2) reading dates into datasets, 3) how to manipulate data using dates, and 4) using functions with dates. INTRODUCTION – WHAT ARE SAS DATES AND TIMES? SAS dates are numeric values that measure time from an arbitrary starting point by {{counting the number of}} elapsed time units. The arbitrary starting point used by SAS is January 1, 1960 (date zero). Dates before January 1, 1960 are negative numbers; dates after are positive numbers. For example, The SAS date value for July 17, 2006 is 16999 and the SAS date value of July 17, 1950 is- 3455. SAS date values account for all leap year days, including the lea...|$|R
40|$|Python for Power System Analysis (PyPSA) {{is a free}} {{software}} toolbox for simulating and optimising modern power systems that include features such as variable wind and solar generation, storage units, sector coupling and mixed alternating and direct current networks. PyPSA is designed to scale well with large networks and long time series. Find out more at: [URL] and [URL] This is release 0. 9. 0 of PyPSA. Please see [URL] for a hyper-linked version of these release notes. This release mostly contains new features with a few minor API changes. 	Unit commitment as a MILP problem is now available for generators in the Linear Optimal Power Flow (LOPF). If you set committable == True for the generator, an addition binary online/offline status is created. Minimum part loads, minimum up times, minimum down times, start up costs and shut down costs are implemented. See the documentation at Generator unit commitment constraints and the unit commitment example. Note that a generator cannot currently have both unit commitment and capacity expansion optimisation. 	Generator ramping limits have also been implemented for all generators. See the documentation at Generator ramping constraints and the unit commitment example. 	Different mathematically-equivalent formulations for the Linear Optimal Power Flow (LOPF) are now documented in Passive branch flow formulations and the arXiv preprint paper Linear Optimal Power Flow Using Cycle Flows. The new formulations can solve up to 20 {{times faster than the}} standard angle-based formulation. 	You can pass the network. lopf function the solver_io argument for pyomo. 	There are some improvements to network clustering and graphing. 	API change: The attribute network. now has been removed since it was unnecessary. Now, if you do not pass a snapshots argument to network. pf() or network. lpf(), these functions will default to network. snapshots rather than network. now. 	API change: When reading in network data from CSV files, PyPSA will parse snapshot dates as proper <b>datetimes</b> rather than text strings. João Gorenstein Dedecca has also implemented a MILP version of the transmission expansion, see [URL] which properly takes account of the impedance with a disjunctive relaxation. This will be pulled into the main PyPSA code base soon...|$|R
5000|$|... {{supported}} formats: WKB / OpenGIS 99-049 (geometry), UTF-8 (text), ISO 8601 (<b>datetime)</b> ...|$|E
5000|$|... {{date and}} time values: <b>DATETIME,</b> TIMESTAMP (internally stored as a Unix timestamp) ...|$|E
50|$|The <b>DateTime</b> {{objects and}} related {{functions}} have been compiled into the PHP core since 5.2. This includes {{the ability to}} get and set the default script timezone, and <b>DateTime</b> is aware of its own timezone internally. PHP.net provides extensive documentation on this. As noted there, the most current timezone database can be implemented via the PECL timezonedb.|$|E
50|$|It {{specifies}} {{a list of}} supported data types: String, Integer, Float, Boolean, <b>Datetime,</b> Array, and Table.|$|E
5000|$|Date or <b>DateTime</b> {{are used}} {{to relate to the}} time dimension, which are {{frequently}} shared between cubes using conformed dimensions ...|$|E
50|$|The {{following}} example {{shows how}} a specific date such as '2012-01-01 00:00:00' (which {{could be the}} current <b>datetime)</b> can be used.|$|E
50|$|A {{time series}} {{database}} (TSDB) is a software {{system that is}} optimized for handling time series data, arrays of numbers indexed by time (a <b>datetime</b> or a <b>datetime</b> range). In some fields these time series are called profiles, curves, or traces. A time series of stock prices {{might be called a}} price curve. A time series of energy consumption might be called a load profile. A log of temperature values over time might be called a temperature trace.|$|E
50|$|The <b>DateTime</b> object {{supports}} {{all time}} zones in the Olson DB and includes {{the ability to}} get, set and convert between time zones.|$|E
5000|$|Team Developer 5.1, {{introduces}} new GUI themes {{for applications}} look & feel like Office 2007, new controls like date picker and <b>datetime</b> picker ...|$|E
5000|$|In Pearson VUE testing centers, {{there are}} testing days and hours very often while in Certiport, {{there is one}} exam <b>datetime</b> per 15 days.|$|E
5000|$|... #Caption: This diagram {{shows how}} Memento uses a TimeGate (URI-G) {{to find the}} best {{archived}} page (URI-M) for a user, given the original resource (URI-R) and a <b>datetime.</b>|$|E
50|$|In this way, Memento {{utilizes}} {{the existing}} infrastructure of HTTP {{to accomplish the}} goals of finding the best archived web page based on a user's desired <b>datetime</b> and URI.|$|E
5000|$|For example, {{to have a}} default {{argument}} evaluated to {{the current}} time in Python, the following may be used: import <b>datetime</b> def f(a, b=None): b = b or datetime.datetime.now (...) ...|$|E
5000|$|The diagram above {{shows the}} 3 step {{process by which}} Memento finds the best {{archived}} web page for the <b>datetime</b> supplied by the user. The process works as follows: ...|$|E
50|$|Memento {{provides}} the Accept-Datetime request header so that clients {{can provide a}} date to the server, and the server can provide the best archived version of a page for that date. This {{is referred to as}} <b>datetime</b> negotiation.|$|E
5000|$|<b>DateTime</b> and Duration items contain {{one part}} {{that allows the}} date or {{duration}} to be given in a machine readable format, and a second that allows {{a description of the}} date or duration (for example “mid summer, 1968”).|$|E
50|$|JavaScript {{implementations}} of {{the commonly}} used modules, builtins and {{classes in the}} Python standard runtime library (such as strings, lists, dictionaries, tuples, sets, getattr, map, filter, range, etc.; basic exception handling, a basic <b>datetime</b> and a basic math module).|$|E
50|$|The {{standard}} module <b>datetime</b> stores and operates on the timezone information class tzinfo. The third party pytz module {{provides access to}} the full IANA time zone database. Negated time zone offset in seconds is stored time.timezone and time.altzone attributes.|$|E
50|$|Time {{and date}} {{handling}} were overhauled {{to deal with}} the millennium problem, with the introduction of the <b>DATETIME</b> function that returned the date and time in one of about 35 different formats. Several other date functions deal with conversions to and from days and seconds.|$|E
50|$|A {{variety of}} web {{archives}} exist, collecting specific revisions of web pages as they existed {{at a particular}} point in time. Memento allows a user to seamlessly transition between these archives {{in search of the}} best archived page matching the <b>datetime</b> for the page that they desire.|$|E
5000|$|The SQL {{function}} [...] can be {{used for}} extracting a single field (seconds, for instance) of a <b>datetime</b> or interval value. The current system date / time of the database server can be called by using functions like , , , or [...] (Popular vendor specific functions are , , , , , , , , , , [...] and [...]) ...|$|E
50|$|HSQLDB 2.0 {{supports}} all {{the core}} features and many optional features of SQL:2008. Advanced features include user-defined SQL procedures and functions, schemas, <b>datetime</b> intervals, updatable views, arrays, lobs, full and lateral joins and set operations. Many non-standard {{functions such as}} TO_CHAR and DECODE are also supported. Extensions to standard SQL include user-defined aggregate functions.|$|E
5000|$|Date {{variables}} {{can contain}} date and time. The {{time may be}} left out, {{but there is no}} way to define a variable that only contains the time. There is no <b>DATETIME</b> type. And there is a TIME type. But there is no TIMESTAMP type that can contain fine grained timestamp up to millisecond or nanosecond. Oracle Datatypes ...|$|E
50|$|Atomic values may {{belong to}} any of the 19 {{primitive}} types defined in the XML Schema specification (for example, string, boolean, double, float, decimal, <b>dateTime,</b> QName, and so on). They may also belong to a type derived from one of these primitive types: either a built-in derived type such as integer or Name, or a user-defined derived type defined in a user-written schema.|$|E
5000|$|The Memento client then {{uses the}} Accept-Datetime request header to submit the <b>datetime</b> desired {{by the user}} to the URI-G {{discovered}} in the previous step. Most resources on the web do not return a URI-G yet, so most Memento clients use a predefined list of TimeGates to accomplish this step. The TimeGate then returns a 302 redirection status code and a Location header to tell the client {{where to find the}} archived resource (URI-M).|$|E
50|$|Version 1.0 of the XML Schema language, {{often used}} to {{describe}} data interchanged between computers in XML, includes built-in primitive datatypes date and <b>dateTime.</b> Although these are {{defined in terms of}} ISO 8601 which uses the proleptic Gregorian calendar and therefore should include a year 0, the XML Schema specification states that there is no year zero. Version 1.1 of the defining recommendation realigned the specification with ISO 8601 by including a year zero, despite the problems arising from the lack of backward compatibility.|$|E
5000|$|Sparse columns {{that happen}} to contain data have a storage {{overhead}} of 4 bytes per column in addition to storage for the data type itself (e.g., 4 bytes for <b>datetime</b> columns). This impacts the amount of sparse-column data that you can associate with a given row. This size restriction is relaxed for the varchar data type, which means that, if one hits row-size limits in a production system, one has to work around it by designating sparse columns as varchar {{even though they may}} have a different intrinsic data type. Unfortunately, this approach now subverts server-side data-type checking.|$|E
5000|$|Date {{and time}} are stored as a {{floating}} point value. The whole number part {{is a number}} of days from the Jan 1 1900 (if the O record contains theV0 directive, specifying 1900 {{as the starting point}} for calculations), the fraction is the number of seconds divided by 86400 (60*60*24, number of seconds in a day). Conversion to unix time can be done by subtracting the difference between Jan 1 1970 and Jan 1 1900 (25,569 days) and then multiplying by 86400; converting from unix time to SYLK <b>datetime</b> is done by dividing the value by 86400 and then adding 25569. The cell style has to be set to some date formatting value, e.g. [...] to be displayed properly.|$|E
5000|$|ADO.NET Entity Framework uses an XML based Data Definition Language called Schema Definition Language (SDL) {{to define}} the EDM Schema. The SDL defines the SimpleTypes similar to the CTS {{primitive}} types, including String, Int32, Double, Decimal, Guid, and <b>DateTime,</b> among others. An Enumeration, which defines a map of primitive values and names, is also considered a simple type. Enumerations are supported from framework version 5.0 onwards only. ComplexTypes are created from an aggregation of other types. A collection of properties of these types define an Entity Type. This definition can be written in EBNF grammar as: EntityType ::= ENTITYTYPE entityTypeName entityTypeName true|false KEY propertyName propertyName* {(propertyName PropertyType PropertyFacet*) +} PropertyType ::= ((PrimitiveType PrimitiveTypeFacets*) | (complexTypeName) | RowType PropertyFacet ::= ( [...] true | false | defaultVal | 1|* [...] ) PropertyTypeFacet ::= MAXLENGTH | PRECISION | SCALE | UNICODE | FIXEDLENGTH | COLLATION | DATETIMEKIND | PRESERVESECONDS PrimitiveType ::= BINARY | STRING | BOOLEAN | SINGLE | DOUBLE | DECIMAL | GUID | BYTE | SBYTE | INT16 | INT32 | INT64 | <b>DATETIME</b> | DATETIMEOFFSET | TIME [...] )Facets are used to describe metadata of a property, such as whether it is nullable or has a default value, as also the cardinality of the property, i.e., whether the property is single valued or multi valued. A multiplicity of “1” denotes a single valued property; a “*” means it is a multi-valued property. As an example, an entity can be denoted in SDL as: [...] A relationship type is defined as specifying the end points and their multiplicities. For example, a one-to-many relationship between Customer and Orders {{can be defined as}} ...|$|E
50|$|Many cloud {{computing}} vendors offer data stores {{based on the}} EAV model, where an arbitrary number of attributes {{can be associated with}} a given entity. Roger Jennings provides an in-depth comparison of these. In Amazon's offering, SimpleDB, the data type is limited to strings, and data that is intrinsically non-string must be coerced to string (e.g., numbers must be padded with leading zeros) if you wish to perform operations such as sorting. Microsoft's offering, Windows Azure Table Storage, offers a limited set of data types: byte, bool, <b>DateTime,</b> double, Guid, int, long and string http://msdn.microsoft.com/en-us/library/dd179338.aspx. The Google App Engine https://code.google.com/appengine/docs/whatisgoogleappengine.html offers the greatest variety of data types: in addition to dividing numeric data into int, long, or float, it also defines custom data types such as phone number, E-mail address, geocode and hyperlink. Google, but not Amazon or Microsoft, lets you define metadata that would prevent invalid attributes from being associated with a particular class of entity, by letting you create a metadata model.|$|E
