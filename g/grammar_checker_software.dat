0|119|Public
30|$|The idea of {{incorporating}} a <b>grammar</b> <b>checker</b> into CALL <b>software</b> is not new. Such an automated feedback generation system was implemented, e.g., in Robo-Sensei Japanese tutoring system [8]. However, today’s grammar checkers {{are not very}} helpful in open experiments with language constructions. As noted in [5], grammar checkers are usually aimed at native speakers, and do not provide sufficient feedback for language learners. One possible way {{to solve this problem}} is to restrict user input. This approach is implemented in Robo-Sensei: the system asks the student to answer a specific question, and then compares the response with an “answer schema” that specifies the pattern of the expected correct response.|$|R
40|$|Abstract — Applications like word {{processors}} and other writing tools typically include a <b>grammar</b> <b>checker.</b> The {{purpose of a}} <b>grammar</b> <b>checker</b> is to identify sentences that are grammatically incorrect based on the syntax of the language. The proposed <b>grammar</b> <b>checker</b> is a rule-based system to identify sentences that {{are most likely to}} contain errors. The set of rules are automatically generated from a part of speech tagged corpus. The results from the <b>grammar</b> <b>checker</b> is a list of error sentences, error descriptions, and suggested corrections. A <b>grammar</b> <b>checker</b> for other languages can be similarly constructed, given a tagged corpus and a set of stop words. I...|$|R
50|$|OpenTaal also {{provides}} grammar rules {{which are used}} in the <b>grammar</b> <b>checker</b> LanguageTool. This is offering grammar checking via its own website but is also used by OpenOffice.org and Thunderbird. This <b>grammar</b> <b>checker</b> also identifies possible false friends.|$|R
40|$|This paper {{describes}} the architectural and system {{design of the}} epali <b>Grammar</b> <b>Checker,</b> which is in due course of research and development. The development follows a modular approach with the <b>Grammar</b> <b>Checker</b> consisting of independent modules. These modules then in turn serve as a pipeline for the over all integrated system. The <b>Grammar</b> <b>Checker</b> aims to check the grammatical errors such as nominal and verbal agreement, parts of speech inflections, phrase and clause structure and the different categories of sentence patterns for epali...|$|R
40|$|This paper {{describes}} an ongoing Portuguese Language <b>grammar</b> <b>checker</b> project, called CoGrOO 1 -Corretor Gramatical para OpenOffice (<b>Grammar</b> <b>Checker</b> for OpenOffice), based on CETENFOLHA, a Brazilian Portuguese morphosyntactic annotated Corpus. Two of its features are highlighted:- hybrid architecture, mixing rules and statistics;- free software project. This project aims at checking grammatical errors such as nominal and verbal agreement, “crase ” (the coalescence of preposition “a ” (to) + definitive singular determiner “a ” yielding “à”), nominal and verbal government and other common errors in Brazilian Portuguese Language. We also present some empirical results {{based on the}} implemented techniques. This paper {{describes an}} ongoing Brazilian Portuguese Language <b>grammar</b> <b>checker</b> project, called CoGrOO-Corretor Gramatical para OpenOffice (<b>Grammar</b> <b>Checker</b> for OpenOffice), based on the CETENFOLHA corpus...|$|R
5000|$|Lightproof, a Python-based <b>grammar</b> <b>checker</b> {{embedded}} in LibreOffice ...|$|R
40|$|One {{problem in}} {{statistical}} machine translation (SMT) is that the output often is ungrammatical. To address this issue, we have investigated {{the use of a}} <b>grammar</b> <b>checker</b> for two purposes in connection with SMT: as an evaluation tool and as a postprocessing tool. As an evaluation tool the <b>grammar</b> <b>checker</b> gives a complementary picture to standard metrics such as Bleu, which do not account for grammaticality. We use the <b>grammar</b> <b>checker</b> as a postprocessing tool by applying the error correction suggestions it gives. There are only small overall improvements of the postprocessing on automatic metrics, but the sentences that are affected by the changes are improved, as shown both by automatic metrics and by a human error analysis. These results indicate that <b>grammar</b> <b>checker</b> techniques are a useful complement to SMT. 1...|$|R
40|$|Natural {{language}} processing (NLP) is a subfield of computer science, with strong connections to artificial intelligence. One area of NLP {{is concerned with}} creating proofing systems, such as <b>grammar</b> <b>checker.</b> <b>Grammar</b> <b>checker</b> determines the syntactical correctness of a sentence which is mostly used in word processors and compilers. For languages, such as Afan Oromo, advanced tools have been lacking and {{are still in the}} early stages. In this paper a rule based <b>grammar</b> <b>checker</b> is presented. The rule base is entirely developed and dependent on the morphology of the language. The checker is evaluated and shown a promising result...|$|R
5000|$|The {{implementation}} of a <b>grammar</b> <b>checker</b> makes use of natural language processing ...|$|R
40|$|This paper {{describes}} {{the implementation of}} a prototype of a <b>grammar</b> based <b>grammar</b> <b>checker</b> for Czech and the basic ideas behind this implementation. The demo is implemented as an independent program cooperating with Microsoft Word. The <b>grammar</b> <b>checker</b> uses specialized <b>grammar</b> formalism which generally enables to check en'ors in languages with a very high degree of word order freedom...|$|R
40|$|A <b>Grammar</b> <b>Checker</b> for Autonomous Students of English as a Foreign Language New {{technologies}} have greatly increased {{the opportunities for}} students of English as a foreign language (EFL) to receive input outside the classroom. At present, however, the only reliable source of corrective feedback on their compositions is a teacher. This article examines {{the extent to which}} computer programs can help lower-intermediate-level and intermediate level students of English as a foreign language (EFL) detect and correct mistakes in their written compositions. It notes that spelling-checkers give good results but that parser-based grammar checkers often mislead students. It describes the basis and operation of a new kind of <b>grammar</b> <b>checker</b> (the UNED <b>Grammar</b> <b>Checker)</b> which is based on a «search and match» paradigm. Preliminary studies, using a version of this program prepared for Spanish mother-tongue students,suggest that such a <b>grammar</b> <b>checker</b> may be more reliable and useful. The paper then discusses how an improved version of this <b>grammar</b> <b>checker</b> incorporating regular expressions could cover many more cases, while still giving a high level of reliability. If so, in time the absence of corrective feedback on free-form written production, currently probably the greatest problem facing language learners studying autonomously, will be overcome...|$|R
40|$|We {{describe}} {{a study conducted}} on the proposal of Druide informatique inc., in collaboration with RALI, aiming at developing a system capable of detecting 'overdetections', i. e. designed for filtering detections erroneously flagged by a <b>grammar</b> <b>checker.</b> Various families of classifiers have been trained in a supervised way for 14 types of detections made by a commercial grade French <b>grammar</b> <b>checker.</b> Eight of the 14 classifiers we devised {{are now part of}} the latest edition of the <b>grammar</b> <b>checker,</b> embedded in a popular writing assistant. This project was conducted over a six-month period and is an interesting illustration of how a machine learning component can be successfully embedded in a robust, popular natural language application for commercial use...|$|R
40|$|Keywords: improving, writing ability, {{spelling}} and <b>grammar</b> <b>checker.</b> Technology increases rapidly. In this time, laptop becomes trend. Every student in senior high schools uses laptop to socialize with friend or improved knowledge and skills. There are many software in laptop when students writing something. They used word processor to write. Writing {{was easy for}} students but they have problem in grammar. Grammar was the first problem {{when they want to}} improve English. The research problems formulated for this study were: “How can {{spelling and}} <b>grammar</b> <b>checker</b> in Microsoft word 2007 improve students writing ability? And “How can spelling and <b>grammar</b> <b>checker</b> in Microsoft word 2007 improve students’ motivation in writing ability. The design of the study was classroom action research. The subjects of the study were XI Science 2. This study focused in using spelling and <b>grammar</b> <b>checker</b> to improve writing ability. In CAR, there are 4 steps: planning, implementing, observing, and reflecting. Planning used some people instruments’ were prepare before teaching and learning, implementing and observing was applying the method to get information, and reflecting was the result of applying the method. The findings show that after applied spelling and <b>grammar</b> <b>checker</b> in this study. Two criteria of success were achieved which based on writing score by used scoring rubric, observation sheet, and questionnaire. There were increased score writing test one that 46...|$|R
50|$|In the 2013 Best Online <b>Grammar</b> <b>Checker</b> Comparisons and Reviews, Grammarly won the TopTenReviews Gold Award, with {{a rating}} of 8.88.|$|R
5000|$|WSC {{works in}} a {{separate}} pop-up window and automatically returns corrected text to the form. It is also extended with English <b>Grammar</b> <b>Checker</b> and Thesaurus functionality.|$|R
50|$|Although grammar {{checkers}} {{have largely}} been concentrated on ensuring grammatical writing, {{majority of them are}} modelled after native writers, neglecting the needs of non-native language users. Much research have attempted to tailor grammar checkers to the needs of non-native language users. Granska, a Swedish <b>grammar</b> <b>checker,</b> has been greatly worked upon by numerous researchers in the investigation of grammar checking properties for foreign language learners. The Universidad Nacional de Educación a Distancia has a computerised <b>grammar</b> <b>checker</b> for native Spanish speakers of EFL to help identify and correct grammatical mistakes without feedback from teachers.|$|R
40|$|Abstract. The paper {{describes}} correction modules for AutoPat,- an {{authoring system}} for patent claims. The specificity of AutoPat {{is that it}} relies on human-computer content specification in controlled language. The quality of the textual input is a crucial point in getting a high quality AutoPat output. Our correction modules handle both the quality of human input and the final system output. The human input is passed through a spellchecker, a <b>grammar</b> <b>checker</b> and a content <b>checker.</b> An application-tuned <b>grammar</b> <b>checker</b> is run over the system final output of the generation module. ...|$|R
40|$|This master thesis in {{computational}} linguistics presents {{an evaluation of the}} <b>grammar</b> <b>checker</b> FiniteCheck. The <b>grammar</b> <b>checker</b> is implemented as a cascade of finite state transducers, and is based on analyses of children’s writing. The current evaluation is performed by letting the system check a previously unseen corpus of texts written by children. In this report, {{the focus is on the}} segments from the corpus that were marked as errors by FiniteCheck in the grammar checking process. These are analysed with respect to correct and false alarms. The errors from the corpus that were missed by the <b>grammar</b> <b>checker</b> are also discussed. The outcome of the evaluation is basis for some modifications of the lexicon and grammars of FiniteCheck, which ameliorate the performance of the system. FiniteCheck shows promising results in the evaluation. The recall rate of targeted error types is high. However, the system needs to improve its precision rate, and a number of suggestions for further implementations with this goal are presented in this thesis...|$|R
50|$|LanguageTool is a {{free and}} open-source, {{cross-platform}} spell and <b>grammar</b> <b>checker</b> {{which can be used}} as an extension in LibreOffice/OpenOffice, Vim, Emacs, Firefox and Thunderbird, or as a stand-alone desktop application. It can also be integrated on websites.|$|R
40|$|A <b>grammar</b> <b>checker</b> for Malay is {{a system}} that will develop to do {{automatic}} checking for incorrect grammatical structure in Malay sentences. At present, most of the task for checking grammar in Malay sentences has done manually. There is no other available commercial product/system on the market for Malay <b>Grammar</b> <b>Checker,</b> particularly well adapted toward the requirements of teaching and learning this language in a primary and secondary school. The developing potential prototype of Malay <b>grammar</b> <b>checker</b> was planned in earlier phases with considering this system is very essential and useful used as problem solvers detect errors by giving designate results for an incorrect grammar in Malay sentence. To support this research work, this paper provides a description of analysis and design using Unified Modeling Language (UML) – Use Case diagram as described in (Craig larman, 1999; John W. Satzinger et al., 2005) which is contemplated as a standard modeling notation framework for implementing object oriented development concepts in developing a system. The UML – Use Case diagram can insist on a precise estimation of the project and understand system requirements, specifically in managing projects or modules for all phases of the system development life cycle...|$|R
40|$|This article {{discusses}} {{the use of}} a French computerized <b>grammar</b> <b>checker</b> as a learning and teaching resource. As is well known, foreign language grammar checkers can give unreliable, even farcical results, but that {{does not necessarily mean that}} they cannot be effectively used by foreign language teachers. After some discussion of the nature of foreign language grammar checkers, the article presents the results of a controlled series of experiments in which groups of students were given the task of correcting French texts containing grammatical, lexical, and orthographical errors by using either an on-screen <b>grammar</b> <b>checker</b> or <b>grammar</b> books and dictionaries. The study draws some conclusions about the advantages and pitfalls of using foreign language grammar checkers for teaching and learning...|$|R
50|$|Originally the company’s {{business}} model {{was a free}} 2-day trial followed by an option to purchase the user license after the trial expired. On 15 January 2012, the company changed its {{business model}} by releasing its freemium version. The freemium version consists of the contextual-based <b>grammar</b> and spelling <b>checker</b> which users could download and keep for free. The premium version was also available for purchase. Its features include Ginger Text Reader and Personal Trainer a progress report analysis tool, along with unlimited access to <b>Grammar</b> <b>Checker,</b> the <b>grammar</b> and spelling <b>checker,</b> and Sentence Rephraser the rephrasing tool.|$|R
40|$|In {{this paper}} we {{describe}} the prototype of a new <b>grammar</b> <b>checker</b> specifically geared {{to the needs of}} French speakers writing in English. Most commercial grammar checkers on the market today are meant to be used by native speakers of a language who have good intuitions about their own language competence. Non-native speakers of a language, however, have different intuitions and are very easily confused by false alarms, i. e. error messages given by the <b>grammar</b> <b>checker</b> when there is in fact no error in the text. In our project aimed at developing a complete writing tool for the non-native speaker, we concentrated on building a <b>grammar</b> <b>checker</b> that keeps the rate of over-flagging down and on developing a user-friendly writing environment which contains, among other things, a series of on-line helps. The grammar checking component, which is the focus of this paper, uses island processing (or chunking) rather than a full parse. This approach is both rapid and appropriate when a text contains many errors. We explain how we use automata to identify multi-word units, detect errors (which we first isolated in a corpus of errors) and interact with the user. We end with a short evaluation of our prototype and compare it to three currently available commercial grammar checkers. ...|$|R
50|$|True grammar {{checking}} is more complex. While {{a computer}} programming language {{has a very}} specific syntax and grammar, {{this is not so}} for natural languages. One can write a somewhat complete formal grammar for a natural language, but there are usually so many exceptions in real usage that a formal grammar is of minimal help in writing a <b>grammar</b> <b>checker.</b> One of the most important parts of a natural language <b>grammar</b> <b>checker</b> is a dictionary of all the words in the language, along with the part of speech of each word. The fact that natural words can take many different parts of speech greatly increases the complexity of any <b>grammar</b> checker.A <b>grammar</b> <b>checker</b> will find each sentence in a text, look up each word in the dictionary, and then attempt to parse the sentence into a form that matches a grammar. Using various rules, the program can then detect various errors, such as agreement in tense, number, word order, and so on. It is also possible to detect some stylistic problems with the text. For example, some popular style guides such as The Elements of Style deprecate excessive use of the passive voice. Grammar checkers may attempt to identify passive sentences and suggest an active-voice alternative.|$|R
40|$|This paper {{describes}} a statistical <b>grammar</b> <b>checker,</b> which considers the n-gram based analysis {{of words and}} POS tags {{to decide whether the}} sentence is grammatically correct or not. We employed this technique for both Bangla and English and also described limitation in our approach with possible solutions. 1...|$|R
40|$|A <b>grammar</b> <b>checker</b> for Swedish, {{launched}} {{on the market}} as Grammatifix, has been developed at Lingsoft in 1997 - 1999. This paper gives first a brief background of grammar checking projects for the Nordic languages, {{with an emphasis on}} Swedish. Then, the concept and definition of a <b>grammar</b> <b>checker</b> in general is discussed, followed by an overview of the starting points and limitations that Lingsoft had in setting up the Grammatifix development project. After this, the initial product development process is described, leading to an overview of the error types covered presently by Grammatifix. The error treatment scheme in Grammatifix is presented, with a focus on its relationship with the error detection rules. Finally, the error types included in Grammatifix are compared to those of two other known projects, namely SCARRIE and Granska. 1...|$|R
50|$|The AbiWord project {{includes}} a US English-only grammar checking plugin using Link Grammar. AbiWord had grammar checking before any other open source word processor, although a <b>grammar</b> <b>checker</b> was later added to OpenOffice.org. Link Grammar {{is both a}} theory of syntax and an open source parser which is now developed by the AbiWord project.|$|R
40|$|We {{describe}} {{a method for}} evaluating a grammar checking application with hand-bracketed parses. A randomly-selected set of sentences was submitted to a <b>grammar</b> <b>checker</b> in both bracketed and unbracketed formats. A comparison of the resulting error reports illuminates {{the relationship between the}} underlying performance of the parsergrammar system and the error critiques presented to the user...|$|R
40|$|Includes bibliographical {{references}} (page 4). This paper {{describes a}} statistical <b>grammar</b> <b>checker,</b> which considers the n-gram based analysis {{of words and}} POS tags {{to decide whether the}} sentence is grammatically correct or not. We employed this technique for both Bangla and English and also described limitation in our approach with possible solutions. Md. Jahangir AlamNaushad UzZamanMumit Kha...|$|R
50|$|MindNet is {{the name}} of several {{automatically}} acquired databases of lexico-semantic relations developed by members of the Natural Language Processing Group at Microsoft Research during the 1990s. The underlying technology is based on the same parser used in the Microsoft Word <b>grammar</b> <b>checker</b> and was deployed in the natural language query engine in Microsoft's Encarta 99 encyclopedia.|$|R
40|$|This paper {{focuses on}} the {{transformation}} of grammar checking technology into a learning environment for second language writing. Our starting point is a <b>grammar</b> <b>checker</b> for Swedish, called Granska. Two {{studies have been conducted}} aimed at exploring the use of computer support for writing in the context of second language learning. In the first study, we developed a methodology to study naturalistic writing, and the impact of the <b>grammar</b> <b>checker</b> on the writer’s text. In the second study, we were interested in how the methodology developed earlier would work in an educational setting. The problems with false alarms and limited recall are definitely a sensitive issue in the context of second language learners and educational settings. Both learners and teachers are concerned about the false alarms, and without perfectly working text analyzers, new strategies for dealing with these problems have to be further explored and developed together with learners and teachers. ...|$|R
40|$|Because of its {{widespread}} availability {{to writing}} students, the <b>grammar</b> and style <b>checker</b> in ms word deserves a thorough critique. Although recent scholarship has addressed general issues surrounding grammar and style checkers, we investigate this particular program in depth, focusing on its theoretical underpinnings. We contrast the approaches to grammar and style {{embodied in the}} software with those found in current composition pedagogy and conclude with suggestions that go beyond customizing the <b>Grammar</b> <b>Checker</b> to advocating more thorough discussions of the very notions of stylistic and grammatical correctness...|$|R
40|$|The {{purpose of}} this paper is to report on a study of <b>grammar</b> <b>checker</b> usage which surveys the steps taken to {{successfully}} integrate it into the curriculum of an advanced level French course. In so doing, the pedagogi-cal limits of computer-based grammar checking are identified, practical applications explored, short-term and long-term effectiveness measured, and the role of self-monitoring for grammatical accuracy considered...|$|R
5000|$|A <b>grammar</b> <b>checker,</b> in {{computing}} terms, is a program, {{or part of}} a program, {{that attempts}} to verify written text for grammatical correctness. Grammar checkers are most often implemented as a feature of a larger program, such as a word processor, but are also available as a stand-alone application that can be activated from within programs that work with editable text.|$|R
50|$|Aspen Software of Albuquerque, NM {{released}} the earliest {{version of a}} diction and style checker for personal computers, Grammatik, in 1981. Grammatik was first available for a Radio Shack - TRS-80, and soon had versions for CP/M and the IBM PC. Reference Software of San Francisco, CA, acquired Grammatik in 1985. Development of Grammatik continued, and it became an actual <b>grammar</b> <b>checker</b> that could detect writing errors beyond simple style checking.|$|R
50|$|Theoretically, the {{functions}} of a conventional spell checker {{can be incorporated into}} a <b>grammar</b> <b>checker</b> entirely and this is likely the route that the language processing industry is working towards. In reality, internationally available word processors such as Microsoft Word have difficulties combining spell checkers and grammar checkers due to licensing issues; various proofing instrument mechanisms for a certain language would have been licensed under different providers at different times.|$|R
