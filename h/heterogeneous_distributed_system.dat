61|10000|Public
40|$|The flight mission {{simulation}} software in the Jet Propulsion Laboratory's Flight System Testbed (FST) is a <b>heterogeneous,</b> <b>distributed</b> <b>system</b> that {{is built on}} an interprocess communication model of asynchronous message passing rather than remote procedure calls (RPCs). The reasoning behind this design decision is discussed; the mechanism used to implement it (...|$|E
40|$|We {{present a}} {{technology}} used to transform a monolithic programming environment into a <b>heterogeneous</b> <b>distributed</b> <b>system.</b> We propose a communication protocol adapted to message passing between components {{in this new}} architecture. This protocol allows structured data transfer and remote operations. It has been implemented and {{is used in the}} centaur programming environment generator...|$|E
40|$|This paper {{presents}} an efficient evaluation of XQuery in a <b>heterogeneous</b> <b>distributed</b> <b>system.</b> XQuery(W 3 C, 2005) {{is a rich}} and so a complex language. Its syntax allows us to express a large scale of queries over XML documents. We have extended (Chen et al., 2003) proposal to rewrite XQuery expressions in ”canonical XQuery ” {{in order to support}} the full XQuery specification. The XQuery expressiveness makes difficulties to obtain an exclusive internal representation within a system. Models based on Tree Patterns have been proposed, and we have extended the tree pattern model to a model called TGV that (a) integrates the whole functionalities of XQuery (b) uses an intuitive representation that provides a global visualization of the request in a mediation context and (c) provides a support for optimization and for cost information. Our paper is based on the XLive mediation system. XLive integrates sources in a uniform view. It is a running research vehicle designed at PRiSM Laboratory for assessing the integration system at every stage of the process starting from sources extraction to the user interface and is already used in several projects. This paper presents XLive, an efficient XQuery processing in a <b>heterogeneous</b> <b>distributed</b> <b>system...</b>|$|E
40|$|Abstract. High {{quality of}} {{security}} is increasingly critical for applications running on <b>heterogeneous</b> <b>distributed</b> <b>systems,</b> where processors operate at different speeds and communication channels have different bandwidths. Although {{there are a}} few scheduling algorithms in the literature for <b>heterogeneous</b> <b>distributed</b> <b>systems,</b> they generally do not take into account of security requirements of applications. In this paper, we propose a novel heuristic scheduling algorithm, or SATS, which is conducive to improving security of <b>heterogeneous</b> <b>distributed</b> <b>systems.</b> First, we formalize a concept of security heterogeneity for our scheduling model in the context of <b>distributed</b> <b>systems.</b> Next, we devise the SATS algorithm aiming at scheduling tasks to maximize the probability that all tasks are executed without any risk of being attacked. Empirical results demonstrate that with respect to security and performance, the proposed scheduling algorithm outperforms existing approaches for <b>heterogeneous</b> <b>distributed</b> <b>systems...</b>|$|R
40|$|This paper {{addresses}} {{the problem of}} performance modeling of large-scale <b>heterogeneous</b> <b>distributed</b> <b>systems</b> with emphases on enterprise grid computing systems. To this end, we present an analytical model that can be employed to explore the effectiveness of different design approaches so that one can have an intelligent choice during design and evaluation a cost-effective large-scale <b>heterogeneous</b> <b>distributed</b> computing <b>system.</b> The model is validated through comprehensive simulation. <br /...|$|R
40|$|Some {{works have}} been done in {{addressing}} real-time fault-tolerant scheduling algorithms. However, they all based on homogeneous <b>distributed</b> <b>systems</b> or multiprocessor systems, which have identical processors. This paper presents two fault-tolerant scheduling algorithms, RTFTNO and RTFTRC, for periodic real-time tasks in <b>heterogeneous</b> <b>distributed</b> <b>systems.</b> Reliability cost, a main performance metric, is applied. RTFTRC algorithm tries to minimize the reliability cost, while RTFTNO does not consider such metric. The results of the performance evaluation for two algorithms are discussed. Simulation experiments show that RTFTRC has better performance than RTFTNO. Keywords: Fault-tolerant, Real-time, Scheduling, <b>Heterogeneous</b> <b>distributed</b> <b>systems,</b> Performance evaluation 1. Introduction <b>Distributed</b> <b>heterogeneous</b> computing is being increasingly applied to a variety of large size computational problems. In general, such computations consist of multiple heterogeneous modules, which interact wit [...] ...|$|R
40|$|A <b>heterogeneous</b> <b>distributed</b> <b>system</b> {{that enables}} people in {{geographically}} separate locations {{to share a}} common workspace is presented. In particular, the applicability of such a system {{to the notion of}} asymmetric collaboration is illustrated by a chess scenario. In our system one user (novice) works in the real world and the other user (expert) works in a parallel virtual world. They are assisted in this task by an Intelligent Agent (IA) with considerable knowledge about the environment. Categories and Subject Descriptor...|$|E
40|$|Abstract: This paper {{presents}} an efficient evaluation of XQuery in a <b>heterogeneous</b> <b>distributed</b> <b>system.</b> XQuery(W 3 C, 2005) {{is a rich}} and so a complex language. Its syntax allows us to express a large scale of queries over XML documents. We have extended (Chen et al., 2003) proposal to rewrite XQuery expressions in ”canonical XQuery ” {{in order to support}} the full XQuery specification. The XQuery expressiveness makes difficulties to obtain an exclusive internal representation within a system. Models based on Tree Patterns have been proposed, and we have extended the tree pattern model to a model called TGV that (a) integrates the whole functionalities of XQuery (b) uses an intuitive representation that provides a global visualization of the request in a mediation context and (c) provides a support for optimization and for cost information. Our paper is based on the XLive mediation system. XLive integrates sources in a uniform view. It is a running research vehicle designed at PRiSM Laboratory for assessing the integration system at every stage of the process starting from sources extraction to the user interface and is already used in several projects. This paper presents XLive, an efficient XQuery processing in a <b>heterogeneous</b> <b>distributed</b> <b>system.</b> 1 XLIVE ARCHITECTUR...|$|E
40|$|Some {{work has}} been done in the past in {{scheduling}} tasks in real-time distributed systems, considering schedulability as the main objective function to be maximized. Since real-time distributed systems are more complex than centralized systems, the complexity of such system could increase the potential for system failures. This is even more pronounced in a heterogeneous system where processors operate at different speeds and communication channels have different bandwidths. Hence, reliability should also be regarded as the objective function to be maximized. In this paper, we describe a two-phase scheme to determine a scheduling of tasks with precedence constraints that employs a reliability measure as one of the objectives in a real-time and <b>heterogeneous</b> <b>distributed</b> <b>system.</b> We devise a new off-line scheduling of communicating tasks, based on the concept of reliability cost, to schedule real-time tasks for maximized reliability. The simulation results show that, for task graphs with precedence constraints in a <b>heterogeneous</b> <b>distributed</b> <b>system,</b> our heuristic performs significantly better than the two heuristics presented that do not consider reliabiliy cost. Furthermore, the results suggested that higher computational heterogeneity is conducive to improving the schedulability of the reliability cost-driven (RCD) algorithm, while the opposite is true for the two non-RCD algorithms. KEY WORDS: Reliability cost, Real-time, Scheduling, Heterogeneous distributed systems, Performance...|$|E
40|$|High {{quality of}} {{security}} is increasingly critical for applications running on <b>heterogeneous</b> <b>distributed</b> <b>systems.</b> However, existing scheduling algorithms for <b>heterogeneous</b> <b>distributed</b> <b>systems</b> disregard security requirements of applications. To address this issue, in this paper, we introduce security heterogeneity concept for our scheduling {{model in the}} context of <b>distributed</b> <b>systems.</b> Based on the concept, we propose a novel heuristic scheduling algorithm, or SATS, which strives to maximize the probability that all tasks are executed without any risk of being attacked. Extensive experimental studies using real world traces indicate that the scheduling performance is affected by heterogeneities of security and computational power. Additionally, empirical results demonstrate that with respect to security and performance, the proposed scheduling algorithm outperforms existing approaches under a wide spectrum of workload conditions. 1...|$|R
40|$|As <b>heterogeneous</b> <b>distributed</b> <b>systems,</b> multi-agent systems {{present some}} {{challenging}} configuration management issues. There {{are the problems}} of knowing how to allocate agents to computers, launch them on remote hosts, and once the agents have been launched, how to monitor their runtime status so as to manage computing resources effectively. In this paper, we present the RETSINA Configuration Manager, RECoMa. We describe its architecture, how it uses agent infrastructure such as service discovery, to assist the multi-agent system administrator in allocating, launching, and monitoring a <b>heterogeneous</b> <b>distributed</b> agent <b>system</b> in a <b>distributed</b> and networked computing environment...|$|R
40|$|Dynamic {{load sharing}} {{policies}} have been extensively studied. Most of the previous studies have assumed a homogeneous <b>distributed</b> <b>system</b> with a first-come-first-served (FCFS) node scheduling policy. In addition, job service times and inter-arrival times {{are assumed to be}} exponentially distributed. In this paper, we study the impact of these assumptions on the performance of sender-initiated and receiver-initiated dynamic load sharing policies in <b>heterogeneous</b> <b>distributed</b> <b>systems.</b> We consider two node scheduling policies - first-come/first-served (FCFS) and round robin (RR) policies. Furthermore, the impact of variance in inter-arrival times and job service times is studied. Our results show that, even in <b>heterogeneous</b> <b>distributed</b> <b>systems,</b> when the round robin node scheduling policy is used, senderinitiated policy is better than the receiver-initiated policy unless the variance in job service times is low. This is an important observation as most workstations use a scheduling policy simi [...] ...|$|R
40|$|Abstract—In this paper, {{we present}} a {{software}} framework, called HDS (<b>Heterogeneous</b> <b>Distributed</b> <b>System),</b> that tries to simplify the realization of distributed applications and, in particular, of multi-agent systems, by: i) abstracting the use of different technologies for the realization of distributed applications on networks of heterogeneous devices connected {{through a set of}} different communication transport protocols, ii) merging the client-server and the peer-to-peer paradigms, and iii) implementing all the interactions among the processes of a system through the exchange of typed messages that allow the implementation of a large set of communication protocols and languages...|$|E
40|$|Abstract. To aid in {{building}} high-performance computational environments, INTERLACE offers {{a framework for}} linking reusable computational engines in a <b>heterogeneous</b> <b>distributed</b> <b>system.</b> The INTERLACE model provides clients with access to computational servers which interface with “wrapped ” computational engines. An API is defined for establishing the server interconnection requirements including data organization and movement, and command invocation. This provides an abstraction layer above the server middleware upon which servers and clients may be constructed. The INTERLACE framework has been demonstrated by building a distributed computational environment with Mat-Lab engines. ...|$|E
40|$|The article {{discusses}} {{the questions of}} software architecture design for distributed systems that consist of multiple independent software entities (such as CORBA components or software agents). The main motivation of our approach {{is to provide a}} developer with ability to reduce difficulties in integration and adaptation of software entities into a <b>heterogeneous</b> <b>distributed</b> <b>system.</b> According to our approach a software entity consists of procedural and declarative parts. Procedural part can be concerned as a number of abstract software patterns and declarative part is coarse-grained knowledge of entity preferences with relevant external information. ...|$|E
40|$|Abstract—Efficient task {{scheduling}} {{is essential for}} obtaining high performance in <b>heterogeneous</b> <b>distributed</b> computing <b>systems.</b> Some algorithms have been proposed for both homogeneous and <b>heterogeneous</b> <b>distributed</b> computing <b>systems.</b> In this paper, a new static scheduling algorithm is proposed called Node Duplication in Critical Path (NDCP) algorithm to schedule the tasks efficiently on the <b>heterogeneous</b> <b>distributed</b> computing <b>systems.</b> The NDCP algorithm focuses on reducing the makespan and provides better performance than the other algorithms in metrics of speedup and efficiency. It consists of two phases, priority phase and processor selection phase. From the theoretical analysis of the NDCP algorithm with other algorithms for a Directed Acyclic Graph (DAG), the better performance is observed. Keywords—static {{task scheduling}}; <b>heterogeneous</b> <b>distributed</b> computing systems; Meta-heuristic algorithms I...|$|R
40|$|Developing {{processes}} {{intended to}} roam in largescale <b>heterogeneous</b> <b>distributed</b> <b>systems</b> is difficult: their environment is unstructured, and interoperability issues often emerge. Mansion {{is a new}} paradigm to provide a large-scale structured environment for mobile agents (autonomous migrating processes). Security, transparency, and interoperability are important design guidelines {{for the development of}} Mansion...|$|R
40|$|Web service {{technology}} is an Internet-based distributed computing paradigm to address interoperability in <b>heterogeneous</b> <b>distributed</b> <b>systems.</b> In this paper, {{we present a}} privacy framework for Web services which allow user agents to automatically negotiate with Web services {{on the amount of}} personal information to be disclosed on behalf of the user. In developin...|$|R
40|$|Heterogeneous {{distributed}} computing environments are {{well suited to}} meet the fast increasing computational demands. Task scheduling {{is very important for}} a <b>heterogeneous</b> <b>distributed</b> <b>system</b> to satisfy the large computational demands of applications. The performance of a scheduler in a <b>heterogeneous</b> <b>distributed</b> <b>system</b> normally {{has something to do with}} the dynamic task flow, that is, the scheduler always suffers from the heterogeneity of task sizes and the variety of task arrivals. From the long-term viewpoint it is necessary and possible to improve the performance of the scheduler serving the dynamic task flow. In this paper we propose a task scheduling method including a scheduling strategy which adapts to the dynamic task flow and a genetic algorithm which can achieve the short completion time of a batch of tasks. The strategy and the genetic algorithm work with each other to enhance the scheduler's efficiency and performance. We simulated a task flow with enough tasks, the scheduler with our strategy and algorithm, and the schedulers with other strategies and algorithms. We also simulated a complex scenario including the variant arrival rate of tasks and the heterogeneous computational nodes. The simulation results show that our scheduler achieves much better scheduling results than the others, in terms of the average waiting time, the average response time, and the finish time of all tasks...|$|E
40|$|We {{present a}} multi-heuristic {{evolutionary}} task allocation algorithm to dynamically map tasks to processors in a <b>heterogeneous</b> <b>distributed</b> <b>system.</b> It utilizes a genetic algorithm, combined with eight common heuristics, {{in an effort}} to minimize the total execution time. It operates on batches of unmapped tasks and can preemptively remap tasks to processors. The algorithm has been implemented on a Java distributed system and evaluated with a set of six problems from the areas of bioinformatics, biomedical engineering, computer science and cryptography. Experiments using up to 150 heterogeneous processors show that the algorithm achieves better efficiency than other state-of-the-art heuristic algorithms...|$|E
40|$|This paper {{describes}} an object-oriented Time Warp (TW) mechanism which supports general parallel simulation on a distributed, possibly heterogeneous, computing environment. As a significant {{application of the}} developed TW, a simulation model adequate for large personal communication services (PCS) networks is proposed and its performance results given. Special {{attention is paid to}} such TW critical issues as load balancing and checkpointing interval tuning which strongly affect the achievement of good speedups. The experimental results confirm that good performance can be obtained on an <b>heterogeneous</b> <b>distributed</b> <b>system</b> provided an accurate parameter tuning is accomplished. 0 1998 Elsevier Science B. V...|$|E
40|$|Efficient task {{scheduling}} {{is essential for}} obtaining high performance in <b>heterogeneous</b> <b>distributed</b> computing <b>systems.</b> Several algorithms are proposed for <b>heterogeneous</b> <b>distributed</b> computing <b>systems.</b> In this paper, a new static scheduling algorithm is proposed called Highest Communicated Path of Task (HCPT) algorithm to efficiently schedule tasks on the <b>heterogeneous</b> <b>distributed</b> computing <b>systems.</b> Our algorithm {{is based on the}} list-scheduling technique. The algorithm not only is focused on reducing the makespan, but also provides better performance than the other algorithms in terms of speedup and efficiency. It consists of three phases, level sorting phase, task-prioritizing phase and processor selection phase. From the theoretical analysis of the HCPT algorithm with other algorithms for a Directed A-cyclic Graph (DAG), the better performance is observed...|$|R
40|$|In {{this paper}} we {{investigate}} {{the problem of}} designing load balancing mechanisms with verification for <b>heterogeneous</b> <b>distributed</b> <b>systems.</b> We derive a compensation and bonus type mechanism that solves the load balancing problem in <b>distributed</b> <b>systems</b> in which computers are characterized by linear latency functions. We prove that our mechanism is truthful and satisfies the voluntary participation condition. We present a simulation study to show the performance of our mechanism. 1...|$|R
40|$|This paper {{argues that}} Napoleon, a flexible, {{role-based access control}} (RBAC) {{modeling}} environment, is also a practical solution for enforcing business process control, or workflow, policies. Napoleon provides two important benefits for workflow: simplified policy management and support for <b>heterogeneous,</b> <b>distributed</b> <b>systems.</b> We discuss our strategy for modeling workflow in Napoleon, and we present an architecture that incorporates Napoleon into a workflow management system. 1...|$|R
40|$|Abstract: This paper {{presents}} a formal methodology {{and a set}} of design and programming tools for the development of concurrently communicating systems that execute in distributed computing environments. In order to solve the complex problems of synchronization and communication between dynamically distributed tasks, the distributed programming system uses an internal process-algebra-based mechanism, and provides an algebra term generator that allows the user to define the task architecture through a simple graphical interface. An example of the design process of a <b>heterogeneous</b> <b>distributed</b> <b>system</b> illustrates the main phases of creating and executing a cbncurrent task system, as well as the architecture of the programming environment presented in the paper...|$|E
40|$|HARNESS is an {{experimental}} metacomputing system that supports dynamic software reconfiguration, {{both of the}} resources that comprise the virtual machine and the services provided therein. Plugins, or distributed modules with certain properties, are the mainstay of this computing model. The plugin architecture greatly enhances reconfigurability, but it also aids failure resilience by providing a framework for the re-instantiation of some types of modules on surviving resources {{in the event of}} failures. This paper describes a recent scheme that consolidates this model of failure recovery and enables HARNESS to function as a <b>heterogeneous</b> <b>distributed</b> <b>system</b> that is resilient to a number of types of failures. 1...|$|E
40|$|Parallel Virtual Machine (PVM) {{has been}} {{identified}} as an effective system for heterogeneous computing. In this paper we investigate the performance of a <b>heterogeneous</b> <b>distributed</b> <b>system</b> based on PVM, where the computing nodes are connected each other through several levels of communication hierarchy and have different specifications. The loads of them also dynamically change. Three important numerical algorithms are solved as sample cases; heat equation, simple boundary condition, and Laplace equation. Experiment shows that almost linear speedup is achieved when the loads of the hosts are balanced and thus they can run at the similar speeds. It also reveals that the speedup gets more significant as the size of data is increased due to the reduced communication overhead...|$|E
40|$|A new {{high-level}} {{approach to}} interprocess communication in <b>heterogeneous</b> <b>distributed</b> <b>systems</b> is introduced. This approach, called I/O Abstraction, {{allows one to}} write each functional component of a <b>distributed</b> <b>system</b> as an encapsulated program that acts upon a set of local data structures, {{some of which may}} be published for external use. The functional components are separately configured by establishing logical connections among the published data structures. In order to illustrate this approach, we describe the The P [...] ...|$|R
40|$|We {{present a}} {{framework}} for modelling <b>heterogeneous</b> <b>distributed</b> <b>systems</b> using graph transformations in the Synchronized Hyperedge Replacement approach, which describes complex evolutions by synchronizing local rules. In {{order to deal with}} heterogeneity, we consider different synchronization algebras for different communication channels. The main technical point is the interaction between synchronization algebras and name mobility in the pi-calculus style. The power of our approach is shown through a few examples...|$|R
40|$|Abstract. We {{propose a}} model-based {{methodology}} for integration of <b>heterogeneous</b> <b>distributed</b> <b>systems,</b> {{based on the}} multi-level modeling abstractions, automated conflict analysis and connector code generation. The focus in this paper is on the metamodeling foundation necessary for this process, and consequently we introduce computation independent, platform specific, platform independent and semantic metamodels, which generate a set of domain specific languages used to describe software and data integration scenarios. ...|$|R
40|$|Load sharing {{is key to}} the {{efficient}} operation of distributed systems. This paper investigates load sharing policies in a <b>heterogeneous</b> <b>distributed</b> <b>system,</b> where half of the total processors have double the speed of the others. Processor performance is examined and compared under a variety of workloads. Two job classes are considered. Programs of the first class are dedicated to fast processors, while second class programs are generic {{in the sense that they}} can be allocated to any processor. The objective is to find a policy that results in good overall performance while maintaining the fairness of individual job classes. Simulation results indicate that the performance of the best method depends on system load...|$|E
40|$|The paper {{investigates the}} design of <b>heterogeneous</b> <b>distributed</b> <b>system</b> for foreign {{exchange}} portfolio analysis. The proposed model includes few separated and dislocated but connected parts through distributed mechanisms. Making system distributed brings new perspectives to performance busting where software based load balancer gets very important role. Desired system should spread over multiple, heterogeneous platforms in order to fulfil open platform goal. Building such a model incorporates different patterns from GOF design patterns, business patterns, J 2 EE patterns, integration patterns, enterprise patterns, distributed design patterns to Web services patterns. The authors try to find {{as much as possible}} appropriate patterns for planned tasks in order to capture best modelling and programming practices...|$|E
40|$|In this paper, {{we propose}} an {{efficient}} scheduling algorithm for problems in which tasks with precedence constraints and communication delays {{have to be}} scheduled on an <b>heterogeneous</b> <b>distributed</b> <b>system</b> with an one fault hypothesis. Based on {{an extension of the}} Critical-Path Method CPM/PERT, our algorithm combines an optimal schedule with some additional tasks duplication, to provide fault-tolerance. Backup copies are not established for tasks that have already more than one original copy. The result is a schedule in polynomial time that is optimal when there is no failure, and is a good resilient schedule in the case of one server failure. We finally compare the optimal solutions with the resilient solutions found by this algorithm on several semi-random DAGs. I...|$|E
40|$|We discuss various {{criteria}} of probabilistic load balancing in <b>heterogeneous</b> <b>distributed</b> <b>systems.</b> In particular, we show {{how to find}} a probabilistic load distribution such that one of the following conditions is satisfied: (1) All nodes have the same mean number of tasks; (2) All nodes have the same mean waiting queue length; (3) All nodes have the same mean response time; (4) All nodes have the same mean waiting time. link_to_subscribed_fulltex...|$|R
40|$|RM-ODP: The Architecture P. F. Linington Abstract The Reference Model for Open Distributed Processing {{is a joint}} ISO/ITU Standard which {{provides}} a framework for the specification of large scale, <b>heterogeneous</b> <b>distributed</b> <b>systems.</b> It defines a set of five viewpoints concentrating on {{different parts of the}} distribution problem and a set of functions and transparency mechanisms which support distribution. The resulting framework is being populated by more detailed standards dealing with specific aspects of the construction and operation of <b>distributed</b> <b>systems...</b>|$|R
40|$|<b>Heterogeneous</b> <b>distributed</b> {{information}} <b>systems</b> {{increasingly are}} built on existing autonomous components, which are integrated as legacy systems'. This paper discusses the integration of heterogeneous information systems {{on the basis of}} an object-oriented client/server architecture. Specially the requirements to support system's evolution and to offer a practical system, well integrated in a specific domain, are considered. Starting-point are approaches out of the context of object-oriented modeling, <b>distributed</b> <b>heterogeneous</b> database <b>systems</b> and <b>distributed</b> object <b>systems...</b>|$|R
