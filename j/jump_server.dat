10|3|Public
5000|$|A <b>jump</b> <b>server</b> is a {{potential}} risk in a network's design. There are several ways of improving {{the security of the}} <b>jump</b> <b>server,</b> including: ...|$|E
50|$|The <b>jump</b> <b>server</b> acts as {{a single}} audit point for traffic and also a single place where user {{accounts}} can be managed. A prospective administrator must log into the <b>jump</b> <b>server</b> {{in order to gain}} access to the DMZ assets and all access can be logged for later audit.|$|E
5000|$|Keeping the {{operating}} system and software on the <b>jump</b> <b>server</b> up to date.|$|E
50|$|<b>Jump</b> <b>servers</b> are {{typically}} placed between a secure zone and a DMZ to provide transparent management of devices on the DMZ once a management session has been established.|$|R
50|$|When {{preparing}} to serve, the server must {{stand behind the}} service line (3-meter line). Upon completion of the service hit, the server's first contact with the ground must be behind the service line. For example, if the <b>server</b> <b>jumps</b> while serving, the first foot to touch the ground upon landing must be behind the line. The second foot may then land {{in front of the}} line. This same rule applies for standing serves. If this is not correctly complete, the server will be charged with a fault, and the opposition will receive a point. In addition, the ball must visibly leave the hand prior to hitting (i.e. it must be thrown). It must not be pushed away out of the holding hand in an attempt to surprise the opponent, as this will also count as an error.|$|R
40|$|This thesis studies three models: Multi-type TASEP in {{discrete}} time, long-range lastpassage percolation on {{the line}} and convoy formation in a travelling servers model. All three models are relatively easy to state but they show a very rich and interesting behaviour. The TASEP is a basic model for a one-dimensional interacting particle system with non-reversible dynamics. We study some aspects of the TASEP in discrete time and compare the results to recently obtained results for the TASEP in continuous time. In particular we focus on stationary distributions for multi-type models, speeds of secondclass particles, collision probabilities and the speed process. We consider various natural update rules. The second model we study is directed last-passage percolation on the random graph G = (V,E) where V = and each edge (i,j), for i 0. We are interested in the behaviour of w_{ 0,n}, which is the maximum weight of all directed paths from 0 to n, as n tends to infinity. We see two very different types of behaviour, depending on whether E[v_{i,j} 2] is finite or infinite. In the case where E[v_{i,j} 2] is finite we show that the process has a certain regenerative structure, and prove a strong law of large numbers and, under an extra assumption, a functional central limit theorem. In the situation where E[v_{i,j} 2] is infinite we obtain scaling laws and asymptotic distributions expressed in terms of a continuous last-passage percolation model on [0, 1]. In the last model customers arrive on the non-negative half-line as a Poisson process of rate lambda âˆˆ (0, 1) and n servers start at the origin at time 0. After completing some initial holding times, each <b>server</b> <b>jumps</b> to the first free customer it sees to its right and serves this customer. All service times are i. i. d. exponentials with parameter nu. After completion of a service the customer leaves the system and the <b>server</b> <b>jumps</b> to the next customer to the right, ignoring customers that are currently being served. We study the formation of convoys, groups of servers that travel together at the same speed, and the asymptotic behaviour of X {(j) }_t, see position of server j at time t. This thesis is not currently available via ORA...|$|R
5000|$|Do {{not allow}} {{outbound}} {{access to the}} rest of the internet from the <b>jump</b> <b>server.</b>|$|E
50|$|In the 1990s when {{co-location}} facilities {{became more}} common {{there was a}} need to provide access between dissimilar security zones. The <b>jump</b> <b>server</b> concept emerged to meet this need. The <b>jump</b> <b>server</b> would span the two networks and typically be used in conjunction with a proxy service such as SOCKS to provide access from an administrative desktop to the managed device. As SSH tunneling became common, jump servers became the de facto method of access.|$|E
50|$|With {{the high}} level of risk that a <b>jump</b> <b>server</b> can represent, a VPN may be a {{suitable}} and higher security replacement.|$|E
5000|$|Session {{isolation}} - Controlling {{access to}} privileged accounts using a session proxy (or next generation <b>jump</b> <b>server)</b> can prevent {{issues such as}} pass-the-hash attacks and malware propagation.|$|E
50|$|A <b>jump</b> <b>server</b> is a {{hardened}} {{and monitored}} device that spans two dissimilar security zones {{and provides a}} controlled means of access between them. User access should be tightly controlled and monitored.|$|E
50|$|A <b>jump</b> <b>server</b> or {{jump host}} or jumpbox or secure {{administrative}} host is a (special-purpose) computer {{on a network}} typically used to manage devices in a separate security zone. The most common example is managing a host in a DMZ from trusted networks or computers.|$|E
50|$|A typical {{configuration}} is a hardened Unix (or Unix-like) machine configured with SSH {{and a local}} firewall. An administrator {{connects to}} a target machine in the DMZ by making an SSH connection from the administrator's personal computer to the <b>jump</b> <b>server</b> and then using SSH forwarding to access the target machine.|$|E

