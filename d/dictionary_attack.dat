194|289|Public
5|$|On January 5, 2009, 33high-profile Twitter {{accounts}} were compromised after a Twitter administrator's password was guessed by a <b>dictionary</b> <b>attack.</b> Falsified tweets—including {{sexually explicit}} and drug-related messages—were sent from these accounts.|$|E
25|$|In December, 2012, William Cheswick {{wrote an}} article {{published}} in ACM magazine that included the mathematical possibilities of how easy or difficult it would be to break passwords that are constructed using the commonly recommended, and sometimes followed, standards of today. In his article, William showed that a standard eight character alpha-numeric password could withstand a brute force attack of ten million attempts per second, and remain unbroken for 252 days. Ten million attempts each second is the acceptable rate of attempts using a multi-core system that most users would have access to. A much greater degree of attempts, at the rate of 7 billion per second, could also be achieved when using modern GPUs. At this rate, the same 8 character alpha-numeric password could be broken in approximately 30 seconds. Increasing the password complexity to a 13 character alpha-numeric password increases the time needed to crack it to more than 900,000 years at 7 billion attempts per second. This is, of course, assuming the password does not use a common word that a <b>dictionary</b> <b>attack</b> could break much sooner. Using a password of this strength reduces the obligation to change it as often as many organizations require, including the U.S. Government, as it could not be reasonably broken in such a short period of time.|$|E
2500|$|Variants B and C can {{remotely}} execute {{copies of}} themselves through the ADMIN$ share on computers visible over NetBIOS. [...] If the share is password-protected, a <b>dictionary</b> <b>attack</b> is attempted, potentially generating {{large amounts of}} network traffic and tripping user account lockout policies.|$|E
40|$|Abstract. Passwords {{are one of}} {{the most}} common cause of system break-ins, because the low entropy of {{passwords}} makes systems vulnerable to brute force guessing <b>attacks</b> (<b>dictionary</b> <b>attacks).</b> Existing Strong Password Authentication and Key Agreement (SPAKA) protocols protect passwords from passive eavesdropping-offline <b>dictionary</b> <b>attacks,</b> but not from active online <b>dictionary</b> <b>attacks.</b> This paper presents a simple scheme that strengthens password-based authentication protocols and helps prevent online <b>dictionary</b> <b>attacks</b> as well as many-to-many attacks common to 3 -pass SPAKA protocols. The proposed scheme significantly increases the computational burden of an attacker trying to launch online <b>dictionary</b> <b>attacks,</b> while imposing negligible load on legitimate clients as well as on the authentication server. ...|$|R
40|$|<b>Dictionary</b> <b>attacks</b> are {{the best}} known threats on the password-based {{authentication}} schemes. Based on Reverse Turing Test (RTT), some usable and scalable authentication schemes are proposed to defeat online <b>dictionary</b> <b>attacks</b> mounted by automated programs. However {{it is found that}} these authentication schemes are vulnerable to various online <b>dictionary</b> <b>attacks.</b> In this paper, a practical decision function is presented, based on which RTT authentication schemes are constructed and shown to be secure against all the known online <b>dictionary</b> <b>attacks.</b> After formally modeling of the adversary, the static and dynamic security of the authentication schemes are proved formally. </p...|$|R
40|$|While {{a number}} of {{protocols}} for password-only authenticated key exchange (PAKE) in the 3 -party setting have been proposed, it still remains a challenging task to prove {{the security of a}} 3 -party PAKE protocol against insider <b>dictionary</b> <b>attacks.</b> To the best of our knowledge, there is no 3 -party PAKE protocol that carries a formal proof, or even definition, of security against insider <b>dictionary</b> <b>attacks.</b> In this paper, we present the first 3 -party PAKE protocol proven secure against both online and offline <b>dictionary</b> <b>attacks</b> as well as insider and outsider <b>dictionary</b> <b>attacks.</b> Our construct {{can be viewed as a}} protocol compiler that transforms any 2 -party PAKE protocol into a 3 -party PAKE protocol with 2 additional rounds of communication. We also present a simple and intuitive approach of formally modelling <b>dictionary</b> <b>attacks</b> in the password-only 3 -party setting, which significantly reduces the complexity of proving the security of 3 -party PAKE protocols against <b>dictionary</b> <b>attacks.</b> In addition, we investigate the security of the well-known 3 -party PAKE protocol, called GPAKE, due to Abdalla et al. (2005, 2006), and demonstrate that the security of GPAKE against online <b>dictionary</b> <b>attacks</b> depends heavily on the composition of its two building blocks, namely a 2 -party PAKE protocol and a 3 -party key distribution protocol...|$|R
50|$|Attempting {{to crack}} {{passwords}} by trying as many possibilities as {{time and money}} permit is a brute force attack. A related method, rather more efficient in most cases, is a <b>dictionary</b> <b>attack.</b> In a <b>dictionary</b> <b>attack,</b> all words {{in one or more}} dictionaries are tested. Lists of common passwords are also typically tested.|$|E
5000|$|Off-line <b>dictionary</b> <b>attack</b> {{resistance}} - It {{does not}} leak any password verification {{information to a}} passive/active attacker.|$|E
5000|$|On-line <b>dictionary</b> <b>attack</b> {{resistance}} - It limits {{an active}} attacker to test only one password per protocol execution.|$|E
40|$|Creative Commons Attribution License, which permits {{unrestricted}} use, distribution, {{and reproduction}} in any medium, provided the original work is properly cited. While {{a number of}} protocols for password-only authenticated key exchange (PAKE) in the 3 -party setting have been proposed, it still remains a challenging task to prove {{the security of a}} 3 -party PAKE protocol against insider <b>dictionary</b> <b>attacks.</b> To the best of our knowledge, there is no 3 -party PAKE protocol that carries a formal proof, or even definition, of security against insider <b>dictionary</b> <b>attacks.</b> In this paper, we present the first 3 -party PAKE protocol proven secure against both online and offline <b>dictionary</b> <b>attacks</b> as well as insider and outsider <b>dictionary</b> <b>attacks.</b> Our construct {{can be viewed as a}} protocol compiler that transforms any 2 -party PAKE protocol into a 3 -party PAKE protocol with 2 additional rounds of communication. We also present a simple and intuitive approach of formally modelling <b>dictionary</b> <b>attacks</b> in the password-only 3 -party setting, which significantly reduces the complexity of proving the security of 3 -party PAKE protocols against <b>dictionary</b> <b>attacks.</b> In addition, we investigate the security of the well-known 3 -party PAKE protocol, called GPAKE, due to Abdalla et al. (2005, 2006), and demonstrate that the security of GPAKE against online <b>dictionary</b> <b>attacks</b> depends heavily on the composition of its two building blocks, namely a 2 -party PAKE protocol and a 3 -party key distribution protocol. 1...|$|R
40|$|Abstract—Dictionary {{attacks are}} the best known threats on the password-based {{authentication}} schemes. Based on Reverse Turing Test (RTT), some usable and scalable authentication schemes are proposed to defeat online <b>dictionary</b> <b>attacks</b> mounted by automated programs. However {{it is found that}} these authentication schemes are vulnerable to various online <b>dictionary</b> <b>attacks.</b> In this paper, a practical decision function is presented, based on which RTT authentication schemes are constructed and shown to be secure against all the known online <b>dictionary</b> <b>attacks.</b> After formally modeling of the adversary, the static and dynamic security of the authentication schemes are proved formally...|$|R
5000|$|Passphrase {{strengthening}}: Whether key strengthening is {{used with}} plain text passwords to frustrate <b>dictionary</b> <b>attacks,</b> usually using PBKDF2.|$|R
5000|$|Assuming the {{identity}} {{is not known}} (e.g. 1) the publisher has chosen to remain anonymous and 2) denies others the ability to verify the MicroID claim until {{a time in the}} future when he or she reveals her identity) then someone with email addresses can perform a trivial <b>dictionary</b> <b>attack</b> to find ownership of resources,http://www.links.org/?p=85 someone with a URI can perform a trivial <b>dictionary</b> <b>attack</b> to find an email address.http://yro.slashdot.org/yro/08/08/28/2241238.shtml ...|$|E
50|$|Attacks {{that target}} the {{original}} password set in Microsoft Excel and Word include <b>dictionary</b> <b>attack,</b> rule-based attack, brute-force attack, mask attack and statistics-based attack.|$|E
5000|$|Threat of reversibility: an offline <b>dictionary</b> <b>attack</b> {{to recover}} the {{password}} is feasible after capturing a successful CRAM-MD5 protocol exchange (e.g., using Cain & Abel).|$|E
5000|$|MS-CHAP-v2 is {{vulnerable}} to <b>dictionary</b> <b>attacks</b> on the captured challenge response packets. Tools exist to perform this process rapidly.|$|R
40|$|Password-authenticated key {{exchange}} (PAKE) protocols allow {{two parties}} to share common secret keys in an authentic manner {{based on a}} memorizable password. In 1999, a PAKE protocol called simple authenticated key agreement (SAKA) was presented, and since then until 2004, several improved variants were presented to resist known attacks. In this paper, we present attacks on variants proposed by Kim et al. and Ku-Wang that directly cause them to fail in achieving a mutually authenticated secret key between legitimate parties. These results are devastating since achieving this is the basic security criterion that any key exchange should provide. We also show <b>dictionary</b> <b>attacks</b> on the original SAKA and all its variants. These <b>dictionary</b> <b>attacks</b> invalidate the basic security goals of these protocols since a PAKE scheme must be secure against <b>dictionary</b> <b>attacks</b> due to the low entropy of human-memorizable passwords being used...|$|R
40|$|In {{this paper}} we analyse a password-based {{authenticated}} key establishment protocol due to Laih, Ding and Huang, which enables a user to authenticate {{himself to a}} server and negotiate a shared session key. This protocol is also designed to guarantee that a human being is actually involved in an ongoing protocol execution. However we show that the protocol su#ers from o#ine <b>dictionary</b> <b>attacks.</b> We propose an enhanced password-based authenticated key establishment protocol which is secure against o#ine <b>dictionary</b> <b>attacks,</b> and that possesses an additional feature guaranteeing that a user is involved in each protocol execution...|$|R
50|$|Default {{passwords}}, a few common passwords, and blank/absent passwords on some system accounts. Nessus {{can also}} call Hydra (an external tool) {{to launch a}} <b>dictionary</b> <b>attack.</b>|$|E
50|$|On January 5, 2009, 33 {{high-profile}} Twitter accounts were compromised after a Twitter administrator's password was guessed by a <b>dictionary</b> <b>attack.</b> Falsified tweets—including {{sexually explicit}} and drug-related messages—were sent from these accounts.|$|E
50|$|In X.1035, the {{exchange}} is {{protected from the}} man-in-the-middle attack. The authentication relies on a pre-shared secret (e.g., password), which is protected (i.e., remains unrevealed) to an eavesdropper preventing an off-line <b>dictionary</b> <b>attack.</b>|$|E
5000|$|Furthermore, IPsec VPNs using [...] "Aggressive Mode" [...] {{settings}} send a hash of the PSK in the clear. This can be {{and apparently}} is targeted by the NSA using offline <b>dictionary</b> <b>attacks.</b>|$|R
5000|$|Passwords {{are used}} {{to gain access to}} {{computer}} resources, and computer users generally choose passwords that are easy to remember, but therefore insecure. Simple passwords are easily hacked by <b>dictionary</b> <b>attacking</b> software.|$|R
30|$|In this article, we {{investigate}} {{the design of}} RSA-based GPAKE protocols. First, we develop a new GPAKE protocol using RSA public-key cryptosystem. The proposed protocol is secure against e-residue attacks. Then, we provide a formal security analysis of our protocol under the RSA assumption and the random oracle model. We also show that our protocol is secure against undetectable on-line <b>dictionary</b> <b>attacks.</b> Finally, {{we investigate}} whether or not such a protocol can achieve both client anonymity and resistance to undetectable on-line <b>dictionary</b> <b>attacks.</b> We give an affirmative answer by adding client anonymity to our basic protocol.|$|R
50|$|Password guessing. This {{method is}} very fast when used to check all short {{passwords}}, but for longer passwords other {{methods such as}} the <b>dictionary</b> <b>attack</b> are used, {{because of the time}} a brute-force search takes.|$|E
50|$|When an {{attacker}} executes a <b>dictionary</b> <b>attack</b> {{to break}} a single password, the public hash offers no security as the attacker knows the password and the salt, the only two inputs to the hash function.|$|E
5000|$|Access to keys, data or {{systems is}} often {{protected}} and requires authentication by presenting a password. If the authentication mechanism is implemented in software only, the access typically {{is prone to}} [...] "dictionary attacks". Since TPM is implemented in a dedicated hardware module, a <b>dictionary</b> <b>attack</b> prevention mechanism was built in, which effectively protects against guessing or automated dictionary attacks, while still allowing the user a sufficient and reasonable number of tries. With this hardware based <b>dictionary</b> <b>attack</b> prevention, the user can opt for shorter or weaker passwords which are more memorable. Without this level of protection, only passwords with high complexity would provide sufficient protection.|$|E
30|$|We also {{investigate}} {{whether or not}} a GPAKE protocol can achieve both client anonymity and resistance against undetectable on-line <b>dictionary</b> <b>attacks</b> by a malicious gateway. These two requirements seem to contradict each other (it seems that the server needs to know who the user is in order to resist undetectable on-line <b>dictionary</b> <b>attacks).</b> Nevertheless, this can be reconciled by saying that a server learns whether it is interacting with a user that belongs to a defined set of authorized users, but nothing more about which user it is in that set. We provide an affirmative answer to the above question by adding client anonymity to our GPAKE protocol based on RSA.|$|R
40|$|Abstract- Brute {{force and}} <b>dictionary</b> <b>attacks</b> on {{password}} protected remote login services are increasing rapidly. Letting legitimate user’s login conveniently while preventing such attacks is difficult. Automated Turing Tests (ATTs) are effective {{and easy to}} implement but cause reasonable amount of inconvenience to the user. We discuss the existing and proposed login protocols designed to prevent large scale online <b>dictionary</b> <b>attacks.</b> We propose Password Guessing Resistant Protocol (PGRP), which is derived upon revisiting prior proposals designed to restrict such attacks. PGRP reduces {{the total number of}} login attempts from unknown remote host while trusted or legitimate users can make several failed login attempts before being challenged by ATT. W I...|$|R
40|$|This {{document}} {{describes an}} efficient augmented password-only authentication and key exchange (AugPAKE) protocol where a user remembers a low-entropy password and its verifier is {{registered in the}} intended server. In general, the user password is chosen from a small set of dictionary words that allows an attacker to perform exhaustive searches (i. e., off-line <b>dictionary</b> <b>attacks).</b> The AugPAKE protocol described here is secure against passive attacks, active <b>attacks,</b> and off-line <b>dictionary</b> <b>attacks</b> (on the obtained messages with passive/active attacks), and also provides resistance to server compromise (in the context of augmented PAKE security). In addition, this document describes how the AugPAKE protocol is integrated int...|$|R
50|$|CoWPAtty automates the <b>dictionary</b> <b>attack</b> for WPA-PSK. It runs on Linux. The {{program is}} started using a {{command-line}} interface, specifying a word-list {{that contains the}} passphrase, a dump file that contains the four-way EAPOL handshake, and the SSID of the network.|$|E
50|$|For home {{users of}} consumer-grade routers and {{wireless}} access points, perhaps {{the single most}} effective defense {{is to change the}} password on the router to something other than the default, replacing it with a password that is not susceptible to a <b>dictionary</b> <b>attack.</b>|$|E
50|$|In {{cryptanalysis}} {{and computer}} security, a <b>dictionary</b> <b>attack</b> {{is a technique}} for defeating a cipher or authentication mechanism by trying to determine its decryption key or passphrase by trying hundreds or sometimes millions of likely possibilities, such as words in a dictionary.|$|E
50|$|This is {{an example}} of a very basic {{authentication}} protocol vulnerable to many threats such as eavesdropping, replay <b>attack,</b> man-in-the-middle <b>attacks,</b> <b>dictionary</b> <b>attacks</b> or brute-force attacks. Most authentication protocols are more complicated in order to be resilient against these attacks.|$|R
40|$|We {{propose a}} new construct, the Text-Graphics Character (TGC) CAPTCHA, for {{preventing}} <b>dictionary</b> <b>attacks</b> against password authenticated systems allowing remote access via dumb terminals. Password authentication {{is commonly used}} for computer access control. But password authenticated systems are prone to <b>dictionary</b> <b>attacks,</b> in which attackers repeatedly attempt to gain access using the entries in a list of frequentlyused passwords. CAPTCHAs (Completely Automated Public Turing tests to tell Computers and Humans Apart) are currently being used to prevent automated "bots" from registering for email accounts. They have also been suggested {{as a means for}} preventing <b>dictionary</b> <b>attacks.</b> However, current CAPTCHAs are unsuitable for text-based remote access. Our TGC CAPTCHA fills this gap. In this paper, we define the TGC CAPTCHA, prove that it is a (secure) CAPTCHA, demonstrate its utility in a prototype based on the SSH (Secure Shell) protocol suite, and provide empirical evidence that the test is easy for humans and hard for machines. We believe that the system will not only help improve the security of servers allowing remote terminal access, but also encourage a healthy spirit of competition in the fields of pattern recognition, computer graphics, and psychology. I...|$|R
40|$|The use of {{passwords}} {{is a major}} {{point of}} vulnerability in computer security, as passwords are often easy to guess by automated programs running <b>dictionary</b> <b>attacks.</b> Passwords remain {{the most widely used}} authentication method despite their well-known security weaknesses. User authentication is clearly a practical problem. From the perspective of a service provider this problem needs to be solved within real-world constraints such as the available hardware and software infrastructures. From a user’s perspective userfriendliness is a key requirement. In this paper we suggest a novel authentication scheme that preserves the advantages of conventional password authentication, while simultaneously raising the costs of online <b>dictionary</b> <b>attacks</b> by orders of magnitude. The proposed scheme is easy to implement and overcomes some of the difficulties of previously suggested methods of improving the security of user authentication schemes. Our key idea is to efficiently combine traditional password authentication with a challenge that is very easy to answer by human users, but is (almost) infeasible for automated programs attempting to run <b>dictionary</b> <b>attacks.</b> This is done without affecting the usability of the system. The proposed scheme also provides better protection against denial of service attacks against user accounts...|$|R
