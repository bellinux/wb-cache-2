0|3962|Public
40|$|This paper {{describes}} {{frameworks for}} cooperative <b>distributed</b> <b>simulation</b> and <b>validation</b> environments. Starting with requirements of such systems a corresponding set of CORBA-based frameworks is presented. The frameworks' {{focus is on}} integration and configuration of simulators, modelling the validation process with test procedures, user interaction and support for cooperation and communication. Configuration of the environments based on sets of predefined modular components, dynamic distribution with CORBA wires and data visualization with virtual instruments based on Java are the key concepts of this approach...|$|R
40|$|The {{conceptual}} {{model for a}} simulation addresses the simulation’s context, how it will satisfy its requirements, and how its entities and processes will be represented. The {{conceptual model}} is key to (1) assessing a simulation’s validity for any situation not explicitly tested and (2) determining the appropriateness of a simulation (or its parts) for reuse or use with other <b>simulations</b> in a <b>distributed</b> <b>simulation.</b> There are no widely accepted approaches for decomposing {{the representation of the}} simulation subject into the entities and processes of a simulation’s conceptual model, for abstracting such representation from available information about the subject, or for describing and documenting the simulation’s conceptual model. This article discusses the development of a conceptual model for both unitary and <b>distributed</b> <b>simulations,</b> focusing on approaches that enhance model completeness, consistency, coherence, and correctness. More than a decade of work at APL in this area is represented in the ideas presented here. (Keywords: Conceptual model, Fidelity, <b>Simulation,</b> <b>Validation.</b> ...|$|R
40|$|The {{possibilities}} of <b>distributed</b> <b>simulation</b> {{have been discussed}} {{for well over a}} decade, yet there is only limited evidence of its implementation, particularly within industry. The reasons for this are discussed by identifying the potential applications of <b>distributed</b> <b>simulation</b> and linking these {{to the ways in which}} simulation is practiced. The extent to which <b>distributed</b> <b>simulation</b> is a demand led or technology led innovation is discussed. A possible contradiction between <b>distributed</b> <b>simulation</b> and good modeling practice is also identified, that is, the ability to develop large/complex models against the recommendation to develop simple models. This leads to three conclusions: not everyone needs <b>distributed</b> <b>simulation,</b> <b>distributed</b> <b>simulation</b> is both demand and technology led, and the {{possibilities of}} <b>distributed</b> <b>simulation</b> are both beneficial and dangerous to modeling practice...|$|R
40|$|A goal of {{this paper}} is to explore {{different}} ways of implementing <b>distributed</b> <b>simulations.</b> <b>Distributed</b> <b>simulation</b> grew out of sequential simulation, and it is possible that the way we think about <b>distributed</b> <b>simulation</b> is unduly influenced by its sequential origins. To free ourselves from unnecessary restrictions on the way we design <b>distributed</b> <b>simulations,</b> in this paper we define the <b>distributed</b> <b>simulation</b> problem somewhat differently than in the literature. We propose the concepts of "knowledge" and "conditional knowledge", to help us obtain a general framework to reason about <b>distributed</b> <b>simulations</b> without too close a coupling with any specific implementation method. The framework appears helpful in designing new ways of <b>distributed</b> <b>simulations.</b> Empirical studies of <b>distributed</b> <b>simulations</b> report widely varying results: some studies report improvements in speed that are almost linearly proportional to the number of computers in the system, while other studies report that <b>distributed</b> <b>simulation</b> is even slower than sequential simulation. The framework proposed in this paper seems to help in explaining the wide differences observed in empirical studies. Using our framework, we attempt to suggest properties that efficient "general-purpose" <b>distributed</b> discrete-event <b>simulations</b> must have. The paper assumes little prior knowledge of the literature on simuIation or distributed systems. We hope that the paper will serve as a tutorial in addition to providing additional insight...|$|R
40|$|The {{results of}} a <b>simulation</b> <b>validation</b> program of the XV- 15 tilt-rotor {{research}} aircraft are detailed, covering such simulation aspects as the mathematical model, visual system, motion system, cab aural system, cab control loader system, pilot perceptual fidelity, and generic tilt rotor applications. <b>Simulation</b> <b>validation</b> was performed for the hover, low-speed, and sideward flight modes, with consideration of the in-ground rotor effect. Several deficiencies of the mathematical model and the simulation systems were identified {{in the course of}} the <b>simulation</b> <b>validation</b> project, and some were corrected. It is noted that NASA's Vertical Motion Simulator used in the program is an excellent tool for tilt-rotor and rotorcraft design, development, and pilot training...|$|R
40|$|Abstract. The grid {{technology}} and <b>distributed</b> <b>simulation</b> functionality were firstly introduced. We proposed two approaches to integrate actual <b>distributed</b> <b>simulation</b> application into grid environment. The {{first one is}} {{to take advantage of}} {{grid technology}} to support <b>distributed</b> <b>simulation,</b> which is independent of the development of <b>distributed</b> <b>simulation.</b> The second one consists of using specific extensions of <b>distributed</b> <b>simulation</b> based on grid technology. We mainly focused on the latter and argued about integrating HLA technology into OGSA model in detail. Under the above discussion, we defined G-RTI concept, which means the Runtime Infrastructure (RTI) based on grid technology. ...|$|R
5000|$|Building Performance Simulation: <b>{{simulation}}</b> <b>validation</b> and testing, and simulation {{to support}} commissioning, controls and monitoring ...|$|R
40|$|This {{viewgraph}} presentation {{reviews the}} use of simulation and modeling {{in preparation for the}} planned exploration initiatives. The Exploration Systems Mission Directorate (EMSD) Integrated Modeling and Simulation (IM&S) team strategy encompasses a wide spectrum of simulation and modeling policies and technologies. One prominent technology is <b>distributed</b> <b>simulation.</b> The <b>DIstributed</b> <b>Simulation</b> (DIS),a collaborative simulation project with international participation (US and Japan) is reviewed as an example of <b>distributed</b> <b>simulation</b> development. The <b>Distributed</b> Space Exploration <b>Simulation</b> (DSES) is another example of <b>distributed</b> <b>simulation</b> that is describe...|$|R
40|$|Coupling and {{synchronized}} {{execution of}} legacy simulation models {{is a complex}} task. Simulation experts need knowledge in the domains of <b>distributed</b> <b>simulation</b> and HLA to conduct such complex simulation projects. This is one reason for insufficient acceptance of <b>distributed</b> <b>simulation</b> in industrial areas. To {{increase the number of}} <b>distributed</b> <b>simulation</b> projects in industrial domains, a dedicated access for industrial engineers to this technology is needed. Therefore it is necessary to develop and apply support systems for <b>distributed</b> <b>simulations</b> with user-interfaces that are dedicated to factory planners and operators. The objective {{of this paper is to}} discuss the provision of <b>distributed</b> <b>simulation</b> support systems for in industrial applications in more detail...|$|R
40|$|Developing a {{sequential}} simulation {{program is}} not an easy task. Developing a <b>distributed</b> <b>simulation</b> program is harder than a sequential one because it is necessary to deal with mapping physical processes into logical processes, communication and synchronization problems and learn another simulation language/library. In literature, several simulation environments can be found but the great number are for sequential simulation, not using all the advantages of a distributed/parallel platform. This paper presents ASDA, an automatic <b>distributed</b> <b>simulation</b> environment that aims at providing several possibilities to users developing a <b>distributed</b> <b>simulation.</b> The automatic word can be understood in three diferent ways: the environment automatically generates a <b>distributed</b> <b>simulation</b> program code; the environment can automatically choose one <b>distributed</b> <b>simulation</b> approach; and the environment can automatically convert a sequential simulation program into a <b>distributed</b> <b>simulation</b> program using the MRIP (Multipl...|$|R
40|$|This paper reviews {{works in}} {{discrete}} event <b>simulation</b> and <b>distributed</b> <b>simulation</b> using Petri nets {{with a look}} toward the <b>distributed</b> <b>simulation</b> of complex systems with Colored Petri Nets. The issues involved with <b>simulation</b> and <b>distributed</b> <b>simulation</b> with Petri nets are presented. First discrete event simulation is discussed outside the context of Petri nets. The need for <b>distributed</b> <b>simulation</b> is presented followed by the issues. These include synchronization using conservative and optimistic methods, and partitioning. The discussion of Petri net simulation is introduced with an argument for the advantage of higher level models for complex systems. Execution policies including race and preselection are compared with their implications for simulation. The literature in <b>distributed</b> <b>simulation</b> with Petri nets is reviewed. This includes partitioning and synchronization schemes which {{take advantage of the}} Petri nets model. Available <b>distributed</b> <b>simulation</b> performance results are reported i [...] ...|$|R
40|$|This paper {{describes}} {{a study of}} coordination issues in optimistic <b>distributed</b> <b>simulations</b> that are implemented over a loosely coupled environment. Detailed study of relations among the {{factors such as the}} number, the depth and the frequency of rollbacks, the event intensity, and the speedup of the <b>distributed</b> <b>simulations</b> are studied. This study shows that centralized coordination can perform very effectively in certain types of simulation tasks; the rollbacks have different characteristics at different event intensities; and how the overall performance of optimistic <b>distributed</b> <b>simulations</b> is affected by message intensity, communications overhead, and rollback frequency. Key words: parallel and <b>distributed</b> <b>simulation,</b> discrete event simulation, synchronization 1 Introduction Theory and practice of parallel and <b>distributed</b> <b>simulations</b> (PADS) have made significant progresses in recent years [7, 5, 11, 6, 12, 9]. In <b>distributed</b> <b>simulation,</b> the simulation tasks are divided into a number [...] ...|$|R
40|$|<b>Distributed</b> <b>simulation</b> {{has proved}} to be a cost {{effective}} technique for studying and understanding complex realworld systems. Many <b>distributed</b> <b>simulations</b> need to incorporate hundreds or even thousands of processors, across both local and wide area networks. As the size and complexity of <b>distributed</b> <b>simulations</b> increase so do the demands on the hardware and software resources that provide simulation services, causing performance bottlenecks that limit the effectiveness of <b>distributed</b> <b>simulation.</b> Different abstractions of performance are needed depending on who is analyzing the <b>distributed</b> <b>simulation</b> and for what reason. This paper proposes a framework for identifying the factors affecting performance and provides a technique for associating the performance factors with high-level system metrics that describe the behavior of the physical and logical resources and services used in the design and implementation of <b>distributed</b> <b>simulations.</b> Dynamic and static analysis of the performance information provides feedback on the execution of the simulation and can provide meaningful information as a guide in making decisions about the configuration and control of the available hardware and software resources for <b>distributed</b> <b>simulation</b> exercises. ...|$|R
40|$|An ad hoc <b>distributed</b> <b>simulation</b> is a {{collection}} of autonomous on-line simulations, each modeling some portion of a larger physical system, that are brought together through a mobile, wireless network to predict future states of the overall system. Unlike conventional <b>distributed</b> <b>simulations</b> that are designed in a largely top-down fashion by partitioning the physical system and mapping each element to a logical process, ad hoc <b>distributed</b> <b>simulations</b> are constructed bottom-up, resulting in multiple simulators modeling common, overlapping portions of the physical system. Ad hoc <b>distributed</b> <b>simulations</b> combine elements of conventional <b>distributed</b> <b>simulations</b> and replicated trials, and raise new issues concerning data distribution and synchronization. The ad hoc simulation approach is proposed, as well as an optimistic synchronization protocol designed for use in these systems. An ad hoc <b>distributed</b> <b>simulation</b> prototype is described that couples collections of in-vehicle simulations intended to manage a transportation network. Experimental results are presented demonstrating that this approach can be effective in predicting future system states when compared to a replicated experiment simulating the full transportation network. Finally, the issue of converting existing commercial simulations to the ad hoc <b>distributed</b> <b>simulation</b> approach is discussed, and experiences converting the widely-used VISSIM simulator for use in ad hoc <b>distributed</b> <b>simulation</b> environments are described. 1...|$|R
40|$|<b>Distributed</b> <b>simulation</b> {{is one of}} {{the obvious}} ways {{how to deal with the}} growing {{complexity}} of many problems solved using simulation approach. We have proposed and implemented an object-oriented toolset for developing both sequential and <b>distributed</b> <b>simulation</b> architectures, based on a sound formal background and our previous experience. Model hierarchy based on abstract object classes for derivation of specific application models was implemented. Hierarchical structuring of model components is supported. Different <b>distributed</b> <b>simulation</b> mechanisms may be chosen for synchronisation of simulation processors. KEYWORDS: Discrete-event <b>simulation,</b> <b>distributed</b> <b>simulation,</b> simulation support systems, object-oriented approach. Introduction Several independent implementations of <b>distributed</b> <b>simulation</b> systems took advantage of an object-oriented approach. An environment based on the DEVS formalism [1] for modular specification of discreteevent systems was implemented in PC-Scheme (an LISP d [...] ...|$|R
40|$|The Generic Runtime Infrastructure for <b>Distributed</b> <b>Simulation</b> (GRIDS) {{has been}} {{developed}} to investigate modularity issues in <b>distributed</b> <b>simulation.</b> It {{could be argued that}} although the HLA RTI is a widespread solution to <b>distributed</b> <b>simulation,</b> it cannot include all possible services. This paper investigates an approach to extending the <b>distributed</b> <b>simulation</b> services available in the HLA RTI. One example of this is bridging support for HLA/DIS legacy integration. This paper therefore presents GRIDS, how GRIDS can be used to provide modular service support for the HLA RTI, and a case study on legacy integration to demonstrate our approach. 1...|$|R
40|$|Parallel and <b>distributed</b> <b>simulations</b> {{enable the}} {{analysis}} of complex systems by concurrently exploiting the aggregate computation power and memory of clusters of execution units. In this paper we investigate a new direction for increasing both the speedup of a simulation process and the utilization of computation and communication resources. Many simulation-based investigations require to collect independent observations for a correct and significant statistical analysis of results. The execution of many independent parallel or <b>distributed</b> <b>simulation</b> runs may suffer the speedup reduction due to rollbacks under the optimistic approach, and due to idle CPU times originated by synchronization and communication bottlenecks under the conservative approach. We present a parallel and <b>distributed</b> <b>simulation</b> framework supporting Concurrent Replication of Parallel and <b>Distributed</b> <b>Simulations</b> (CR-PADS), {{as an alternative to}} the execution of a linear sequence of multiple parallel or <b>distributed</b> <b>simulation</b> runs. Results obtained from tests executed under variable scenarios show that speedup and resource utilization gains could be obtained by adopting the proposed replication approach in addition to the pure parallel and <b>distributed</b> <b>simulation...</b>|$|R
40|$|The {{recent studies}} in the <b>distributed</b> <b>simulation</b> area are focused in the High Level Architecture, defined by the DoD/USA, which proposes a {{standard}} environment to develop and run <b>distributed</b> <b>simulations.</b> The HLA components are designed to ensure {{a high level of}} interoperability among simulations and, also, to allow maximum component reusability. This paper proposes a new mechanism to help optimist federates perform rollback procedures when needed. This mechanism uses computational reflection techniques to create a rollback manager meta-object that extends the low-level services provided by HLA. Keywords: <b>distributed</b> <b>simulation,</b> HLA, time management, computational reflection. 1 Introduction In the last years, several <b>distributed</b> <b>simulation</b> systems have been built, allowing the simulation of complex systems like war scenarios, traffic systems, and others. The research activities in <b>distributed</b> <b>simulation</b> can be classed in two main areas. The first one, called PADS (Parallel and Distri [...] ...|$|R
40|$|Manufacturing {{has been}} {{changing}} from a mainly in-house effort to a distributed style {{in order to}} meet new challenges owing to globalization of markets and world-wide competition. <b>Distributed</b> <b>simulation</b> provides an attractive solution to construct cross enterprise simulations to evaluate the viability of the proposed distributed manufacturing enterprises. However, due to its complexity and high cost <b>distributed</b> <b>simulation</b> failed to gain a wide acceptance from industrial users. The main objective {{of this paper is to}} address these issues and present a new structured approach to implement <b>distributed</b> <b>simulation</b> with cost effective and easy to implementable tools. A simplified approach for model partitioning for <b>distributed</b> <b>simulation</b> is also included in the proposed approach. The implementation of <b>distributed</b> manufacturing <b>simulation</b> is illustrated with Arena, Microsoft Message Queue (MSMQ) an...|$|R
40|$|<b>Distributed</b> <b>simulation</b> has {{undergone}} several cycles of {{ups and downs}} in recent years. Although successful in the military domain, {{it appears that the}} idea of applying <b>distributed</b> <b>simulation</b> in other fields for modeling and analysis of large-scale, heterogeneous systems such as communication networks or supply chains has still not taken off until today. Is this because of inherent limitations or lack of applicability as such? Or is it because of additional research issues that are yet to be resolved to make <b>distributed</b> <b>simulation</b> applicable? In this paper, the problem is discussed specifically with regard to the application of <b>distributed</b> <b>simulation</b> for design, operation and performance enhancement of manufacturing and logistics systems. ...|$|R
40|$|<b>Distributed</b> <b>simulation</b> is used {{very little}} in industry, {{especially}} {{when compared with the}} interest in <b>distributed</b> <b>simulation</b> from research and from the military domain. In order to answer the question why industry lags behind, the authors have carried out an extensive survey, using a questionnaire and interviews, with users, vendors, and developers of <b>distributed</b> <b>simulation</b> products, as well as with vendors of non-distributed simulation software. Based on the results the discrepancies between the different “worlds” become clear enough to enable the formulation of clear guidelines for further developments of standards for <b>distributed</b> <b>simulation.</b> This paper reports on {{the first part of the}} survey, namely a questionnaire targeted at vendors of commercial-off-the-shelf (COTS) simulation packages. Analysis of the answers obtained establish that it is indeed the case that industry is relatively underdeveloped in the area of <b>distributed</b> <b>simulation</b> and also sheds some light on the reasons behind this...|$|R
40|$|Many {{simulation}} {{problems can}} take advantage of <b>distributed</b> <b>simulation</b> approach when dealing with the huge time- or space- complexity and the conventional sequential solution is not satisfying. We have proposed and implemented an object-oriented toolset for developing both sequential and conservative <b>distributed</b> <b>simulation</b> architectures, based on a sound formal background and our previous experience. Hierarchical structuring of model components is supported. Different <b>distributed</b> <b>simulation</b> mechanisms may be chosen for synchronisation of simulation processors. Lookahead information can be extracted from model description and used to speed-up the simulation run. KEYWORDS: Discrete-event <b>simulation,</b> <b>distributed</b> <b>simulation,</b> simulation support systems, lookahead, object-oriented approach. 1. Introduction An object oriented approach is often applied in the simulation area, usually because problems being solved can be described as a set of objects and interactions among them. We are conce [...] ...|$|R
40|$|Cyber-physical systems {{challenge}} <b>distributed</b> <b>simulation</b> {{techniques for}} reasons of the heterogeneous tools used to model system components {{at different levels of}} abstraction, each with potentially different notions of time. The SimConnect and SimTalk <b>distributed</b> cyber-physical system <b>simulation</b> tools meet the synchronization challenge of <b>distributed</b> <b>simulation,</b> but also offer dynamic resolution among coordinated simulators for tradeoffs in simulation speed versus accuracy. This paper discusses the dynamic resolution capabilities of SimConnect and SimTalk, and evaluates the tools in <b>distributed</b> <b>simulation</b> of a closed-loop motor control system. Results show selectable tradeoffs in speedup versus accuracy over nondynamic coordination...|$|R
40|$|<b>Distributed</b> <b>Simulation</b> is {{characterized}} by the fact that a simulation system is executed on multiple computing nodes that cooperate by exchanging messages. Regardless of the reasons for using <b>distributed</b> <b>simulation</b> in the first place (e. g. performance reasons), the execution of a <b>distributed</b> <b>simulation</b> depends on the proper functioning of all of the processing nodes and the underlying network. Depending on the level of reliability neccessary for a simulation system, the integration of fault-tolerance mechanisms is crucial. It turns out that there has not been much work on fault-tolerance in <b>distributed</b> <b>simulation.</b> The intention {{of this paper is to}} summarize the existing work and to point out possible research topics in this area...|$|R
40|$|The {{use of the}} World Wide Web and Java-based {{mobile code}} {{provides}} new opportunities for <b>distributed</b> <b>simulation.</b> First, the infrastructure provided by the Internet {{eliminates the need for}} multiprocessor hardware, making it feasible to <b>distribute</b> <b>simulation</b> models over different hardware platforms through the Internet. Second, "Internet-aware" mobile Java code makes the applications fully portable and reusable. These enabling technologies are already exploited for <b>distributed</b> <b>simulation</b> modeling. This paper reports on the preliminary results of an on-going effort to construct a parallel discrete event simulation support system to <b>distribute</b> <b>simulation</b> experiments over the Internet with a view on simulation optimization. A research prototype for ranking and selection problems is described. The overall project goals are discussed...|$|R
40|$|Abstract: Parallel and <b>distributed</b> <b>simulation</b> is {{concerned}} with the efficient execution of large-scale discrete event simulation models on multiprocessors and distributed platforms. After the development of World Wide Web (WWW), many efforts in parallel and <b>distributed</b> <b>simulation</b> have been made for modeling, particularly building simulation languages and creating model libraries that can be assembled and executed over WWW, and for analysis, particularly developing simulation optimization algorithms for parallel and distributed experimentation. These efforts have thus far produced mixed results. However, the recent advent of XML and web services technology provides enhanced opportunities for web-based <b>distributed</b> <b>simulation.</b> Especially, web services as a distributed information technology possess powerful capabilities for scalable interoperation of heterogeneous systems. This paper aims to develop and evaluate parallel and <b>distributed</b> <b>simulation</b> using the web services technology for efficient simulation execution. In particular, a prototype framework is implemented using web services for a simple shop floor simulation, where we focus on web-based simulation optimization through the distribution of simulation replications across different servers. The development of parallel and <b>distributed</b> <b>simulation</b> using web services will help to solve large-scale problems efficiently and guarantee interoperability among heterogeneous networked systems. Key-Words: Web services, Parallel and <b>distributed</b> <b>simulation,</b> OCBA, Simulation optimization. ...|$|R
40|$|Simulation {{is one of}} {{the most}} {{important}} tools to analyse, design, and operate complex processes and systems. Simulation allows us to make a 'trial and error' in order to understand a system and describe a problem. Therefore, it is of great interest to use simulation easily and practically. The advent of parallel processors and languages help simulation studies. A recent <b>simulation</b> trend is <b>distributed</b> <b>simulation</b> which may be called discrete- event <b>simulation,</b> because <b>distributed</b> <b>simulation</b> has a great potential for the speed-up. This thesis will survey discrete-event simulation and examine one particular algorithm. It will first survey simulation in general and secondly, <b>distributed</b> <b>simulation.</b> <b>Distributed</b> <b>simulation</b> has broadly two mechanisms: conservative and optimistic. The treatment of time in these mechanisms is different, we will look into both mechanisms. Finally, we will examine the conservative mechanism on a network of transputers using Occam. We will conclude with the result of the experiments and the perspective of <b>distributed</b> <b>simulation...</b>|$|R
40|$|Commercial-off-the-shelf (COTS) {{simulation}} {{packages are}} widely used {{in many areas of}} industry. Several research groups are attempting to integrate <b>distributed</b> <b>simulation</b> principles and techniques with these packages to potentially give us COTS <b>distributed</b> <b>simulation.</b> The High Level Architecture- COTS Simulation Package Interoperation Fonu...|$|R
40|$|This thesis investigates novel control {{mechanisms}} for large-scale <b>distributed</b> <b>simulation</b> based on <b>simulation</b> cloning. <b>Distributed</b> <b>simulation</b> cloning technology {{is designed to}} analyze alternative scenarios of a <b>distributed</b> <b>simulation</b> concurrently within the same simulation execution session. One important goal of the technology is to optimize execution by avoiding repeated computation amongst independent scenarios. The foundation theory of <b>distributed</b> <b>simulation</b> cloning is established in this thesis. The theory defines {{the concept of a}} decision point to trigger cloning and the scenario trees which represent the concurrent scenarios. Types of cloning are classified according to the conditions under which cloning of an individual simulation component is required and the different mechanisms to replicate scenarios. This thesis investigates the issues involved in cloning based on the High Level Architecture (HLA), an IEEE standard for <b>distributed</b> <b>simulation.</b> Alternative candidate solutions are proposed and compared from both the qualitative and quantitative point of view. A middleware approach is adopted to hide the complexity of simulation cloning. The simulation models that form a <b>distributed</b> <b>simulation</b> are referred to as federates in the HLA and these interact using the Runtime Infrastructure (RTI). The idea of decoupling the Local RTI Component from a normal HLA federate is introduced. The decoupled federate architecture forms the basis to ensure the correct replication of federates. At the same time, it provides user transparency and reusability to legacy federate codes. In order to ensure correctness and optimize the performance, this thesis describes a solution for managing the concurrent scenarios in the whole cloning-enabled <b>distributed</b> <b>simulation.</b> It also presents the algorithms for managing <b>distributed</b> <b>simulation</b> cloning, which ensure the state consistency of the overall simulation. It is desirable to replicat...|$|R
40|$|We {{present the}} views of five {{researchers}} and practitioners of <b>distributed</b> <b>simulation.</b> Collectively we attempt to address what the implications of <b>distributed</b> <b>simulation</b> are for industry. It is hoped that the views contained herein, and the presentations made by the panelists at the 2002 Winter Simulation Conference will raise awareness and stimulate further discussion on the application of <b>distributed</b> <b>simulation</b> methods and technology {{in an area that}} is yet to benefit from the arguable economic benefits that this technique promises...|$|R
40|$|<b>Distributed</b> <b>simulation</b> has a {{long history}} at the Winter Simulation Conference. Although {{successful}} in the military domain it appears, however, that the idea of applying <b>distributed</b> <b>simulation</b> in other fields for modeling and analysis of large-scale, heterogeneous systems such as communication networks or supply chains has still not reached the stage of commercial use until today. This panel attempts to identify reasons for this phenomenon by debating whether <b>distributed</b> <b>simulation</b> is actually a real-world necessity or should rather be considered ivory tower fancy. ...|$|R
40|$|This panel paper {{presents}} {{the views of}} five researchers and practitioners of <b>distributed</b> <b>simulation.</b> Collectively we attempt to address what the implications of <b>distributed</b> <b>simulation</b> are for industry. It is hoped that the views contained herein, and the presentations made by the panelists at the 2002 Winter Simulation Conference will raise awareness and stimulate further discussion on the application of <b>distributed</b> <b>simulation</b> methods and technology {{in an area that}} is yet to benefit from the arguable economic benefits that this technique promises. ...|$|R
40|$|In many situations, {{parallel}} and <b>distributed</b> <b>simulation</b> is a well-suited {{approach to}} overcome performance {{as well as}} capacity limitations of complex simulation models. However, if <b>distributed</b> <b>simulation</b> runs take hours or days for termination or if <b>distributed</b> <b>simulation</b> is applied to safety critical domains such as e. g. military decision making, it is not acceptable that a failure in a single process, processing element, or communication link stops the whole simulation experiment. Fault tolerance mechanisms which are popular in general purpose distributed computing are not common in the special case of <b>distributed</b> discrete event <b>simulation.</b> In this work, we structure the necessary dependability requirements and point out approaches {{how they can be}} met. Two directions are discussed: the specialization of fault tolerance mechanisms from general purpose distributed computing to <b>distributed</b> <b>simulation</b> and the adaptation of special mechanisms of <b>distributed</b> <b>simulation</b> to support fault tolerance. Special attention is also paid to approaches increasing the dependability of implementations of the High Level Architecture (HLA) and to possibilities to extend the HLA to support fault tolerance mechanisms for HLA federates and federations...|$|R
40|$|Interoperability among {{simulators}} {{is one of}} the {{key factors}} in <b>distributed</b> <b>simulations.</b> Several interoperability infrastructures such as HLA and DEVS/SOA have been utilised, but most of them do not provide any dynamics. This paper introduces the use of the OSGi service platform as universal middleware for dynamic <b>distributed</b> <b>simulation</b> of DEVS models. We have designed and implemented the DEVS/OSGi simulation framework, which is an approach similar to DEVS/SOA, but relies on an integrated service-oriented and protocol independent architecture. It enables standardized plug-and-play capabilities and dynamic reconfiguration within <b>distributed</b> <b>simulations.</b> The architecture and implementation has been validated in an analytical context against a traffic simulation model. We conclude that the standardised interoperability and run-time dynamics provided by the OSGi service platform are highly valuable for <b>distributed</b> <b>simulations...</b>|$|R
40|$|<b>Distributed</b> <b>simulation</b> is used {{very little}} in industry, {{especially}} {{when compared with the}} interest in <b>distributed</b> <b>simulation</b> from research and from the military domain. In order to answer the question why industry lags behind, the authors have carried out an extensive survey, using a questionnaire and interviews, with users, vendors, and developers of <b>distributed</b> <b>simulation</b> products, as well as with vendors of non-distributed simulation software. This paper reports on {{the second part of the}} survey, namely a series of open ended interviews. We report on the responses we obtained indicating the discrepancies between the different “worlds”. A categorization of these responses is given using which it is possible to formulate clear guidelines for further developments of standards for <b>distributed</b> <b>simulation.</b> ...|$|R
40|$|We {{study the}} {{performance}} of <b>distributed</b> <b>simulation</b> of open queueing networks, by analysing queueing models of message flows in distributed discrete event simulators. We view each logical process in a <b>distributed</b> <b>simulation</b> as comprising a message sequencer with associated message queues, followed by an event processor. We show that, with standard stochastic assumptions for message arrival and time stamp processes, the message queues are unstable for conservative sequencing, and for conservative sequencing with maximum lookahead and hence for optimistic resequencing, and for any resequencing algorithm that does not employ interprocessor “flow control�?. This result immediately yields throughput bounds for <b>distributed</b> <b>simulation</b> of feedforward queueing networks. We also present throughput bounds and simulation results for the <b>distributed</b> <b>simulation</b> of a simple open queueing network with feedbac...|$|R
