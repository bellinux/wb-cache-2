12|804|Public
5000|$|The {{programming}} model employed was unstructured BASIC {{for which}} the PC-1403 distinguished between RUN and PRO mode. The later being used to enter and <b>edit</b> <b>program</b> and the former being used to execute them.|$|E
50|$|Multimedia {{developers}} {{may come}} from a graphic design or illustration background and apply those talents to motion, sound, or interactivity. Motion designers are graphic designers for motion. Animators are illustrators for motion. Videographers are photographers for motion. Multimedia developers may also image edit, sound <b>edit,</b> <b>program,</b> or compose multimedia just as multimedia specialists.|$|E
50|$|Kyma - Symbolic Sound's Kyma {{allows users}} to perform {{real-time}} stutter edits on sample loops or other audio sources. Unlike a dedicated stutter <b>edit</b> <b>program,</b> users must design their own Kyma sound for doing stutter edits, which can be accomplished through use of the Sample and/or Sequencer prototypes and clever CapyTalk scripting.|$|E
50|$|Many sound <b>editing</b> <b>{{programs}}</b> {{and music}} tracker {{programs of the}} late 1980s and early 1990s supported the format. It is still a common format for cross-platform audio <b>editing</b> <b>programs</b> (such as Sound eXchange).|$|R
50|$|Pinta is an open-source, {{cross-platform}} {{bitmap image}} drawing and <b>editing</b> <b>program</b> inspired by Paint.NET, a similar image <b>editing</b> <b>program</b> which {{is limited to}} Microsoft Windows. Pinta has more features than Microsoft Paint. Compared with open-source image editor GIMP, Pinta is simpler and has fewer features.|$|R
5000|$|Matt Radosevich - <b>editing,</b> <b>programming,</b> {{additional}} engineering ...|$|R
50|$|In {{common with}} other home computers, Commodore's models booted {{directly}} into the BASIC interpreter. BASIC's file and programming commands could be entered in direct mode to load and execute software. If program execution was halted using the RUN/STOP key, variable values would be preserved in RAM and could be PRINTed for debugging. This, along with the advanced screen editor included with Commodore BASIC gave the programming environment a REPL-like feel; programmers could insert and <b>edit</b> <b>program</b> lines at any screen location, interactively building the program. This {{is in contrast to}} business-oriented operating systems of the time like CP/M or MS-DOS, which typically booted into a command line interface. If a programming language was required on these platforms, it had to be loaded separately.|$|E
5000|$|A {{convenient}} {{feature of}} Commodore's ROM-resident BASIC interpreter and KERNAL was the full-screen editor. Although Commodore keyboards only featured two cursor keys which alternated direction when the shift key was held, the screen editor allowed users to enter direct commands or to input and <b>edit</b> <b>program</b> lines from {{anywhere on the}} screen. If a line was prefixed with a line number, it was tokenized and stored in program memory. Lines not beginning with a number were executed by pressing the [...] key whenever the cursor happened {{to be on the}} line. This marked a significant upgrade in program entry interfaces compared to other common home computer BASICs at the time, which typically used line editors, invoked by a separate [...] command, or a [...] "copy cursor" [...] that truncated the line at the cursor's position.|$|E
40|$|Abstract. How to {{reasonably}} {{design parameters}} for less-teeth gear transmission {{is a hard}} and significant work. In this paper, firstly, according to characteristics of less-teeth transmission, list a series of mathematical expressions. Secondly, edit the flow chart to <b>edit</b> <b>program</b> based on Matlab and design the man-machine interface, then got a group optimal parameters. Finally, use the optimal parameters to build 3 D model of less-teeth gear...|$|E
500|$|Rami– songwriting, production, vocal production, vocal <b>editing,</b> <b>programming</b> ...|$|R
5000|$|Matt Pauling - engineering, <b>editing,</b> <b>programming,</b> {{additional}} production ...|$|R
5000|$|Vaughan Merrick - {{additional}} engineering, <b>editing,</b> <b>programming,</b> recording ...|$|R
40|$|A {{computerized}} {{data quality}} check and data <b>edit</b> <b>program</b> {{has been developed}} {{to aid in the}} processing of telemetered precipitation data. The logic considerations and program development are discussed and results are displayed. This effort has resulted in successful editing of large amounts of precipitation data gathered by automated remote data acquisition techniques. The application of this processing routine has resulted in reducing data editing costs to about three percent of that required to do the work manually...|$|E
40|$|An {{outline of}} the varying quality of MARC record files sent to us by small book vendors, and what {{adjustments}} we’ve had to make in-house to make them load-able into the database. Our techniques often involve using the MARC <b>Edit</b> <b>program</b> to modify the records in some way, but the solution may depend on whether the vendor simply left an empty field in one record, or encoded the whole MARC file incorrectly. Come find out how we turn GIGO to gold, one batch at a time...|$|E
40|$|All {{commercial}} {{data processing}} installations include programs to detect errors in input data. There {{is a high}} degree of commonality in the editing (i e validating) of such input data throughout the data processing industry. This thesis defines a generalized editing package which will allow a user to specify the editing requirements for any set of input data. From the specifications a COBOL program will be created to carry out the required operations on the input file. Included as an introduction to this thesis, is a survey of editing needs, and a discussion on the merits of generalized software. The thesis emphasizes the methodology of the generation of a specific "tailor-made" editor program. Key Words: Editing EPG (<b>Edit</b> <b>Program</b> Generator) Generalized Software Program Generator Computing Review Category: 2. 0, 3. 50, 4. 12, 4. 4...|$|E
5000|$|Tommy English - engineering, <b>editing,</b> <b>programming,</b> {{additional}} production, ...|$|R
5000|$|Zakk Cervini - engineering, <b>editing,</b> <b>programming,</b> {{additional}} production ...|$|R
5000|$|Colin Brittain - engineering, <b>editing,</b> <b>programming,</b> {{additional}} production, mixing ...|$|R
40|$|This manual {{explains}} {{how to use}} the FAMULUS program package in a computing environment where most text is input through terminals and most files are stored on disks. I adapted it from a manual prepared in 1969, and I have gotten some ideas and examples from three other manuals. The main change I made was to recommend using an interactive editor program to prepare and perfect the FAMULUS records. The original manual described this mode of operation: 1. Preparing records on punched cards. 2. Creating a master file on tape by using the FAMULUS program called EDIT. 3. Editing records or adding new ones to the tape master file created in Step 2 by using the FAMULUS program EDIT. I advocate: 1. Preparing records in an input file (on disk files) by using an interactive editor program. 2. Creating a FAMULUS master file, on disk or tape, by using the FAMULUS program called EDIT. 3. Editing or adding new records to the input file prepared in Step 1. 4. Using the FAMULUS <b>EDIT</b> <b>program</b> to replace the master file. This step is a repeat of Step 2. Since the FAMULUS master file is never edited [...] only replaced [...] that mode of operation eliminates the need to use the editing capabilities of the FAMULUS <b>EDIT</b> <b>program.</b> Therefore, I eliminated the sections on the editing capabilities of EDIT from this manual. See Chapter 2, PREPARING AN INPUT FILE, for a description of the use of an interactive editor program to create an input file. FAMULUS was developed in the late 1960 s by the Pacific Southwest Forest and Range Experiment Station of the US Forest Service. The background of FAMULUS is explained in the foreword to the original manual: FAMULUS was conceived by Theodor B. Yerke, Station Librarian, as a personal documentation system for research scientists. The system provides extreme individual freedom to structure and update information files maintained by individuals. Interchange and merger of files between individuals or groups is also easily accomplished...|$|E
40|$|Programmers {{who suffer}} from {{repetitive}} stress injuries {{find it difficult to}} program by typing. Speech interfaces can reduce the amount of typing, but existing programming-byvoice tools make it awkward for programmers to enter and <b>edit</b> <b>program</b> text. We used a human-centric approach to address these problems. We first studied how programmers verbalize code, and found that spoken programs contain lexical, syntactic and semantic ambiguities that do not appear in written programs. Using the results from this study, we designed Spoken Java, a syntactically similar, yet semantically identical variant of Java that is easier to speak. We built an Eclipse IDE plugin called SPEED (for SPEech EDitor) to support the combination of Spoken Java and an associated command language. In this paper, we report the results of the first study ever of any working programmingby-voice system. Our evaluation with expert Java developers showed that most developers had little trouble learning to use the system via spoken commands, but were reluctant to speak literal code out loud. As expected, programmers found programming by voice to be slower than typing. 1...|$|E
40|$|Programmers {{who suffer}} from {{repetitive}} stress injuries {{find it difficult to}} spend long amounts of time typing code. Speech interfaces can help developers reduce their dependence on typing. However, existing programming by voice techniques make it awkward for programmers to enter and <b>edit</b> <b>program</b> text. To design a better alternative, we conducted a study to learn how software developers naturally verbalize programs. We found that spoken programs are different from written programs in ways similar to the differences between spoken and written English; spoken programs contain lexical, syntactic and semantic ambiguities that do not appear in written programs. Using the results from this study, we designed Spoken Java, a semantically identical variant of Java that is easier to say out loud. Using Spoken Java, software developers can speak more naturally by verbalizing their program code as if they were reading it out loud. Spoken Java is analyzed by extending a conventional Java programming language analysis engine written in our Harmonia program analysis framework to support the kinds of ambiguities that arise from speech. 1...|$|E
5000|$|Rami - songwriting, production, vocal production, vocal <b>editing,</b> <b>programming</b> ...|$|R
5000|$|Tommy English - engineering, <b>editing,</b> <b>programming,</b> {{additional}} production, mixing ...|$|R
5000|$|Zakk Cervini - engineering, <b>editing,</b> <b>programming,</b> {{additional}} production, mixing ...|$|R
5000|$|Kyle Moorman - guitar, percussion, digital <b>editing,</b> <b>programming,</b> engineering, {{producer}} ...|$|R
50|$|Raw files {{initially}} had to {{be processed}} in specialized image <b>editing</b> <b>programs,</b> but over time many mainstream <b>editing</b> <b>programs,</b> such as Google's Picasa, have added support for raw images. Rendering to standard images from raw sensor data allows more flexibility in making major adjustments without losing image quality or retaking the picture.|$|R
50|$|Rotoshop is a {{proprietary}} graphics <b>editing</b> <b>program</b> created by Bob Sabiston.|$|R
5000|$|Akita - <b>editing,</b> <b>programming,</b> and co-production on Plan for Summer Wah/Roadshow ...|$|R
50|$|Using a photo <b>editing</b> <b>program,</b> {{convert the}} image file to CMYK.|$|R
5000|$|Giordano Mazzi - <b>editing,</b> <b>programming</b> (on [...] "Ave Maria, Mater Misericordiae") ...|$|R
5000|$|... #Caption: Amiga {{diskette}} {{containing the}} Deluxe Paint bitmap graphics <b>editing</b> <b>program</b> ...|$|R
5000|$|Flare - Photo <b>editing</b> <b>program</b> {{for adding}} effects to and editing pictures.|$|R
5000|$|Trent Reznor - vocals, arrangement, continuity, digital <b>editing,</b> <b>programming</b> {{production}} mixing engineering ...|$|R
5000|$|Nathan Dantzler - digital <b>editing,</b> <b>programming,</b> piano, percussion, keyboards, {{background}} vocals, additional guitars ...|$|R
5000|$|Seashore is a {{lightweight}} native Mac OS X image <b>editing</b> <b>program</b> based on GIMP.|$|R
5000|$|SafeGenes: a {{synthetic}} biology project to program [...] "undo" [...] sequences into gene <b>editing</b> <b>programs</b> ...|$|R
