53|679|Public
50|$|FreeUndelete takes {{advantage}} of the fact that file deletion is just a minor state change in the system <b>file</b> <b>index.</b> It finds the area(s) where the file contents are located on the disk, then re-creates the index entry to undelete the file.|$|E
50|$|The NACURH Information Center (NIC) is the {{business}} office of NACURH, Inc. The NIC is currently hosted by University of Nebraska-Lincoln. The NIC's projects and responsibilities include: Maintaining the Resource <b>File</b> <b>Index,</b> updating and maintaining the national website, and keeping records of the dues of member schools. The current NIC Director is Sam Wilton.|$|E
50|$|There are {{two main}} {{variants}} of inverted indexes: A record-level inverted index (or inverted <b>file</b> <b>index</b> or just inverted file) contains a list of references to documents for each word. A word-level inverted index (or full inverted index or inverted list) additionally contains the positions of each word within a document. The latter form offers more functionality (like phrase searches), but needs more processing power and space to be created.|$|E
5000|$|Handling {{of static}} <b>files,</b> <b>index</b> <b>files,</b> auto-indexing and content {{negotiation}} ...|$|R
50|$|From KDE Applications 4.13 onwards, the 'Baloo <b>file</b> <b>indexing</b> and <b>file</b> search framework' replaces NEPOMUK.|$|R
40|$|Abstract:- In this paper, a novel {{scheme for}} vector {{quantization}} (VQ) is proposed. A <b>file</b> called visible <b>index</b> <b>file</b> {{is used to}} record the coding result. The decompressed image reconstructed from the visible <b>index</b> <b>file</b> {{is the same as}} the one recovered using traditional VQ index file; however, the visible <b>index</b> <b>file</b> looks like the original image, and is therefore more convenient for the management of <b>index</b> <b>files.</b> Also, note that the size of the visible <b>index</b> <b>file</b> is the same as that of the traditional <b>index</b> <b>file.</b> Key-words: vector quantization, sorted codebook, visible <b>index</b> <b>files.</b> ...|$|R
50|$|Phase 2 of the EFS was {{launched}} on 2 July 2001. This phase saw {{the introduction of}} a web-based front-end interface for EFS users, a full-text Electronic Index Search and Extract Service, and an Electronic Service of Documents Facility. The Electronic Index Search and Extract Service allowed law firms to search an electronic case <b>file</b> <b>index</b> and request the extraction of soft copies or certified true copies of case documents. Under the Electronic Service of Documents Facility, law firms were allowed to electronically serve documents on other EFS-ready law firms.|$|E
50|$|Selective content {{poisoning}} (also {{known as}} proactive or discriminatory content poisoning) attempts to detect copyright violators while allowing legitimate users {{to continue to}} enjoy the service provided by an open P2P network. The protocol identifies a peer with its endpoint address while the <b>file</b> <b>index</b> format is changed to incorporate a digital signature. A peer authentication protocol can then establish the legitimacy of a peer when she downloads and uploads files. Using identity based signatures, the system enables each peer to identify infringing users {{without the need for}} communication with a central authority. The protocol then sends poisoned chunks to these detected users requesting a copyright protected file only. If all legitimate users simply deny download requests from known infringers, the latter can usually accumulate clean chunks from colluders (paid peers who share content with others without authorization). However, this method of content poisoning forces illegitimate users to discard even clean chunks, prolonging their download time.|$|E
5000|$|The MUSIC/SP {{file system}} was unique {{in a number}} of respects. There was a single {{system-wide}} <b>file</b> <b>index.</b> The owner's userid and the file name were hashed to locate the file in this index, so any file on the system could be located with a single I/O operation. However, this presented a flat file system to the user. It lacked the directory structure commonly offered by DOS, Windows and Unix systems. In 1990 a [...] "tree-structured" [...] directory view of the file system was overlaid on this, bringing the system more in line with the file systems that were then available. By default the information stored in the files was compressed. This offered considerable saving in disk space. The file system had a fairly sophisticated access control scheme allowing the owner to control who could read, write, append to and execute the file. It also had the concept of a [...] "public" [...] file which was visible to all users and a [...] "private" [...] file which was only visible to the owner. In version 2.3, even private files were listed in the common library, with the result that no two users could have files under the same name; by 4.0, this limitation was removed.|$|E
50|$|Tracker, is a <b>file</b> <b>indexing</b> {{and search}} {{framework}} for Linux and other Unix-like systems. It {{is written in}} the C programming language.|$|R
50|$|Each {{software}} vendor primarily uses its own data {{as well as}} journals, publications, authority <b>files,</b> <b>indexes,</b> and subject categories to produce sets of scholar indices.|$|R
50|$|In June 2013, FACT got the Usenet <b>file</b> <b>indexing</b> {{site called}} NZBsRus to close after issuing cease-and-desist {{letters to the}} owner and several staff members.|$|R
40|$|In {{this paper}} we {{consider}} the problem of efficiently producing results for full-text keyword search queries over XML documents. We describe full-text search query semantics and propose a method for efficient evaluation of keyword search queries with these semantics suitable for native XML databases. Method uses inverted <b>file</b> <b>index</b> which may be efficiently updated when a part of some XML document is updated. ...|$|E
40|$|PROMS, a computer-music service under {{development}} at the University of Bonn, Germany, aims at designing and implementing PROcedures for Music Search. This paper discusses an efficient algorithm for searching a music pattern, e. g., a melody or a sequence of chords, in a large database of polyphonic music, given in a score-like format. Our algorithm is {{a variant of the}} now classic inverted <b>file</b> <b>index</b> approach for text retrieval...|$|E
40|$|The manmac macros are enumerated. A userâ€™s {{guide is}} provided, and the {{encodings}} are explained. As enhancements {{the writing of}} index reminders to the <b>file</b> <b>index.</b> tex is elaborated upon, and how to incorporate AMS fonts and non-CM fonts is referred to. In the appendixes I provided the source of manmac and my personalized report template. With respect to the latter, I played {{with the idea of}} formatting the MAPS specials series in this way...|$|E
5000|$|Clusterpoint Search Appliance is a software-only {{document}} and <b>file</b> <b>indexing</b> and search solution, {{that is based}} on Clusterpoint Server, a hybrid NoSQL database management system with a full text search engine and Document-oriented database.|$|R
50|$|The {{player can}} play incomplete, broken or damaged AVI files by {{skipping}} bad frames and rebuilding the <b>file's</b> <b>index</b> when necessary. GOM Player also supports peer-to-peer video streaming through an official add-on called GOMTV Streamer.|$|R
40|$|In {{this paper}} we {{address the problem of}} object-class {{retrieval}} in large image data sets: given a small set of training examples defining a visual category, the objective is to efficiently retrieve images of the same class from a large database. We propose two contrasting retrieval schemes achieving good accuracy and high efficiency. The first exploits sparse classification models expressed as linear combinations of a small number of features. These sparse models can be efficiently evaluated using inverted <b>file</b> <b>indexing.</b> Furthermore, we introduce a novel ranking procedure that provides a significant speedup over inverted <b>file</b> <b>indexing</b> when the goal is restricted to finding the top...|$|R
40|$|To {{view this}} {{archived}} website, (1) extract content from the ZIP file and (2) use {{a web browser}} to open the <b>file</b> <b>index.</b> html located in "www. umich. edu_pharmacy"This College of Pharmacy archived website documents the academic programs, accomplishments, resources, events, and people at the College of Pharmacy. Content includes important news and announcements, publications (such as newsletters and course catalogs), and information about admissions, curriculum, degree requirements, faculty, and the overall mission of the Colleg...|$|E
40|$|To {{view this}} {{archived}} website, (1) extract content from the ZIP file and (2) use {{a web browser}} to open the <b>file</b> <b>index.</b> htmlWebsite of the University of Michigan President as it appeared in March 2002 {{under the leadership of}} Interim President B. Joseph White. Documents the mission, activities, policies, and individuals involved in the operation of the Office of the President. Content includes important news and announcements, publications, and information about committees, initiatives, and events...|$|E
40|$|Two {{distinctive}} and useful features of Japanese patent documentation are the <b>file</b> <b>index</b> (FI) and F-term classification systems {{developed by the}} Japan Patent Office. Since April 2001, it has been possible to search Japanese patent literature with FI classification and F-terms in English. This article explains the concept, structure and layout of these two special classification systems, {{as well as providing}} pointers to further guidance and the use of these features to enhance searches of Japanese patent documentation...|$|E
5000|$|The search option {{allows a}} simple {{search of a}} central <b>INDEX</b> <b>file.</b> This <b>INDEX</b> <b>file</b> is one-line-per-resource, and is a flat file that the Hytelnet client {{searches}} directly. After entering a term, the client returns a new menu with the list of selectable items, for example this query [...] "library": ...|$|R
50|$|Both {{the block}} table (which {{contains}} information {{on where the}} file data {{is located in the}} archive) and the hash table used for <b>file</b> <b>indexing</b> are encrypted when stored. The encryption process which is used by default uses a known algorithm.|$|R
50|$|Physical schema is a {{term used}} in data {{management}} to describe how data is to be represented and stored (<b>files,</b> <b>indices,</b> et al.) in secondary storage using a particular database management system (DBMS) (e.g., Oracle RDBMS, Sybase SQL Server, etc.).|$|R
40|$|Patents contain much novel {{technological}} information. In this paper, the searching {{methods of}} the <b>file</b> <b>index</b> (FI) and F-term classification system developed by the Japan Patent Office (JPO) were employed to find patents containing information on carbon nanotube technology. All related patent data were searched for in the Intellectual Property Digital Library (IPDL). Moreover, using theme codes and term codes in the two-dimensional structure of the F-term list, we investigated and analyzed the technical features expressed by carbon nanotubes in related documents in Boolean operations...|$|E
40|$|A problem conamonly {{faced by}} {{users of the}} World-Wide Web (WWW) is forgetting the path traversed to reach a {{previously}} read document. SWISS (Seeking World-Wide Web Information Using a Signature File Search) is a system designed to al-leviate this â€™lost document problem â€™ by incrementally saving the contents of vis-ited documents in a signature <b>file</b> <b>index.</b> SWISS allows the user to retrieve a previ-ously read document via keyword search. Advantages of the system include parsi-monious use of resources, capability for search on the entire text of indexed doc-uments, and browser independence. ...|$|E
40|$|To work at scale, a {{complete}} image indexing system comprises two components: An inverted <b>file</b> <b>index</b> {{to restrict the}} actual search to only a subset that should contain most of the items relevant to the query; An approximate distance computation mechanism to rapidly scan these lists. While supervised deep learning has recently enabled improvements to the latter, the former continues {{to be based on}} unsupervised clustering in the literature. In this work, we propose a first system that learns both components within a unifying neural framework of structured binary encoding...|$|E
5000|$|Search {{capabilities}} were added, offering full-text {{searches of}} documents, with options to filter by date (including arbitrary ranges like [...] "modified {{within the last}} week"), size, and <b>file</b> type. The <b>Indexing</b> Service has also been integrated into the operating system and the search pane built into Explorer allows searching <b>files</b> <b>indexed</b> by its database. The ability to customize the standard buttons was also added.|$|R
40|$|The CD {{contains}} all the database <b>files,</b> <b>index</b> <b>files,</b> picture files and program {{files of the}} project. To view {{the output of the}} project save all the files in the default directory of FoxPro i. e. C: 26 and then run the project. Students you are free to alter the programs if required and try to develop more projects. You can modify the programs by adding more features. So all the best, try these projects and upgrade your skills. The CD {{contains all}} the database <b>files,</b> <b>index</b> <b>files,</b> picture files and program files of the project. To view the output of the project save all the files in the default directory of FoxPro i. e. C: 26 and then run the project. Students you are free to alter the programs if required and try to develop more projects. You can modify the programs by adding more features. So all the best, try these projects and upgrade your skills. CD content with book # E 4972. CD content with book # E 4972...|$|R
40|$|Inspired by {{the success}} of {{inverted}} indexing in the textual search domain, we provide sparseness justifications for using inverted <b>file</b> <b>indexing</b> on image content, which paves the way for developing scalable image content search systems. We use clustering to automatically generate a content vocabulary. To avoid the problem of generating cluster centers that are overcrowded in high density areas for sparse data sets, we use a clustermerge procedure for cluster post-processing. We further use visual codewords to represent low level image features, which not only makes the inverted <b>file</b> <b>indexing</b> and search applicable to image content, but also helps bridge the gap between the low level image features and high-level human visual perception. Experimental results confirm the success of our methods. 1. Introduction and Relate...|$|R
40|$|Cataloged from PDF {{version of}} article. The Web {{has become a}} vast {{information}} resource in recent years. Millions of people use the Web {{on a regular basis}} and the number is increasing rapidly. The Web is the largest center in the world presenting almost all of the social, economical, educational, etc. activities and anyone from all over the word can visit this huge place even though he does not have to stand up from his sit. Due to its hugeness, finding desired data on the Web in a timely and cost effective way is a problem of wide interest. In the last several years, many search engines have been created to help Web users find desired information. However, most of these search engines employ topic-independent search methods that rely heavily on keyword-based approaches where the users are presented with a lot of unnecessary search results. In this thesis, we present a data model using topic maps standards for Webbased information resources. In this model, topics, topic associations and topic occurrences (called as topic metalinks and topic sources in this study) are the fundamental concepts. In fact, the presented model is a metadata model that describes the content of the Web-based information resource and creates virtual knowledge maps over the modeled information resource. Thus, semantic indexing of the Web-based information resource is performed for allowing efficient search and querying the data on the resource. iv Additionally, we employ full text indexing in the presented model by using a widely accepted method that is inverted <b>file</b> <b>index.</b> Due to the rapid increase of data, the dynamic update of the inverted <b>file</b> <b>index</b> during the addition of new documents is inevitable. We have implemented an efficient dynamic update scheme in the presented model for the employed inverted <b>file</b> <b>index</b> method. The presented topic map data model provides combining the powers of both keyword-based search and topic-centric search methods. We also provide a prototype search engine verifying that our presented model contributes very much to the problem of efficient and effective search and querying of the Web-based information resources. KutlutÃ¼rk, MustafaM. S...|$|E
40|$|The thesis "Chemical {{reactions}} and light energy" deals with specific approach of teachers to students. Physical and chemical principles of chemical {{reactions and}} light energy are explained followed by suggestions of implementing these topics to lessons at basic schools, grammar schools and specialized chemistry high schools. In practical pedagogical part educational implementation of subject matter, image subject dictionary and school project of luminiscence are drawn. Practical chemical part includes 20 effective experiments for teachers, students {{and students with}} teacher. Demo experiments are organized in well-arranged <b>file</b> <b>index</b> with illustrations added. Selected experiments were tried out. There is suggestion of programme about luminiscence. Picture part includes photographs taken during laboratory works...|$|E
40|$|Look for {{virtual reality}} and for sound files. Once the zipped file is opened, launch the <b>file</b> <b>index.</b> html in your {{internet}} browser. Rank-size plots {{have been used}} for years in a number of contexts: large sizes have small numeric ranks [...] the largest city in a region has rank 1 (the smallest numeral). Discussions of these plots, merits and drawbacks, example suited and not suited for application, and a host of related matters persist in the social scientific (and other) literature. Our focus in this internet paper is on the geometric visualization of rank-size relations: not only as plots but also in other ways that have come about as a result of contemporary electronic and internet capability...|$|E
40|$|The {{processing}} {{of the records}} and digitization of the Central <b>Files</b> <b>index</b> were funded by a National Endowment for the Humanities Preservation and Access Grant. Any views, findings, conclusions or recommendations expressed in this guide do not necessarily represent those of the National Endowment for the Humanities...|$|R
40|$|Web Search Engines {{provide a}} {{large-scale}} text document retrieval service by processing huge Inverted <b>File</b> <b>indexes.</b> Inverted <b>File</b> <b>indexes</b> allow fast query resolution and good memory utilization since their d-gaps representation can be {{effectively and efficiently}} compressed by using variable length encoding methods. This paper proposes and evaluates some algorithms aimed to find an assignment of the document identifiers which minimizes the average values of d-gaps, thus enhancing the effectiveness of traditional compression methods. We ran several tests over the Google contest collection in order to validate the techniques proposed. The experiments demonstrated the scalability and effectiveness of our algorithms. Using the proposed algorithms, {{we were able to}} sensibly improve (up to 20. 81 %) the compression ratios of several encoding schemes. Categories and Subject Descriptors H. 3. 4 [Information Storage and Retrieval]: System...|$|R
50|$|An <b>indexed</b> <b>file</b> is a {{computer}} <b>file</b> with an <b>index</b> that allows easy random access to any record given its file key.|$|R
