904|4569|Public
5|$|Shortly {{before his}} death, {{when he was}} already quite ill, von Neumann headed the United States government's top secret ICBM committee, and it would {{sometimes}} meet in his home. Its purpose was {{to decide on the}} feasibility of building an ICBM large enough to carry a thermonuclear weapon. Von Neumann had long argued that while the technical obstacles were sizable, they could be overcome in time. The SM-65 Atlas passed its first fully <b>functional</b> <b>test</b> in 1959, two years after his death. The feasibility of an ICBM owed as much to improved, smaller warheads as it did to developments in rocketry, and his understanding of the former made his advice invaluable.|$|E
25|$|The {{investigation}} {{could not}} find the <b>functional</b> <b>test</b> result document after theinstallation of the TAWS.|$|E
25|$|While {{the power}} is on, <b>functional</b> <b>test,</b> just {{checking}} if the PCB does {{what it had been}} designed to do.|$|E
50|$|<b>Functional</b> <b>testing</b> {{does not}} imply that you are testing a {{function}} (method) of your module or class. <b>Functional</b> <b>testing</b> tests a slice of functionality of the whole system.|$|R
40|$|<b>Functional</b> <b>tests</b> are automated, {{business}} process tests co-owned by customers and developers. They are particularly useful for rescuing projects from high bug counts, delayed releases, and dissatisfied customers. <b>Functional</b> <b>tests</b> help projects by elucidating requirements, making project progress visible, and preventing bugs. We present <b>functional</b> <b>testing</b> in pattern format {{because it is}} especially expressive in conveying expert advice and enables the reader to make an informed decision regarding {{the applicability of the}} solution. The pattern presented aggregates multiple experiences with <b>functional</b> <b>testing</b> over several agile development projects. However, we have seen <b>functional</b> <b>testing</b> become more costly than its benefits, so we describe the symptoms—“smells”—of potentially costly problems. These are not problems with <b>functional</b> <b>testing</b> per se, but with the misinterpretation and mis-implementation of this practice. We draw on our experience to suggest ways of addressing these smells. Done right, <b>functional</b> <b>testing</b> successfully increases software’s quality and business value...|$|R
40|$|<b>Functional</b> <b>tests</b> are automated, {{business}} process tests co-owned by customers (a. k. a analysts) and developers. They help elucidate requirements, make project progress visible, {{and of course}} improve code quality. We present <b>functional</b> <b>testing</b> in pattern format, aggregating our experiences with <b>functional</b> <b>testing</b> over several agile development projects. However, we have also seen <b>functional</b> <b>testing</b> become more costly than its benefits, so we describe the symptoms—“smells”—of potentially costly problems. These problems can be rooted in test implementation practices or in {{the architecture of the}} system under test. We suggest solutions to these problems that make <b>functional</b> <b>testing</b> cost-effective and fun...|$|R
25|$|In 1982, Gunther joined Xerox PARC {{to develop}} {{parametric}} and <b>functional</b> <b>test</b> software for PARC's small-scale VLSI design fabrication line. Ultimately, he was recruited onto the Dragon multiprocessor workstation project {{where he also}} developed the PARCbench multiprocessor benchmark. This was his first fore into computer performance analysis.|$|E
25|$|Tommy Flowers, still {{a senior}} {{engineer}} at the Post Office Research Station was recommended to Max Newman by Alan Turing and spent eleven months from early February 1943 designing and building the first Colossus. After a <b>functional</b> <b>test</b> in December 1943, Colossus was shipped to Bletchley Park, where it was delivered on 18 January 1944 and attacked its first message on 5 February.|$|E
25|$|Yeager was {{commissioned}} a second lieutenant while at Leiston, and {{was promoted to}} captain {{before the end of}} his tour. He flew his 61st and final mission on , 1945, and returned to the United States in early February. As an evader, he received his choice of assignments and, because his new wife was pregnant, chose Wright Field to be near his home in West Virginia. His high number of flight hours and maintenance experience qualified him to become a <b>functional</b> <b>test</b> pilot of repaired aircraft, which brought him under the command of Colonel Albert Boyd, head of the Aeronautical Systems Flight Test Division.|$|E
50|$|HPE Unified <b>Functional</b> <b>Testing</b> manages {{exception}} handling using recovery scenarios; {{the goal is}} to continue running tests if an unexpected failure occurs. Because HPE Unified <b>Functional</b> <b>Testing</b> hooks into the memory space of the applications being tested, some exceptions may cause HPE Unified <b>Functional</b> <b>Testing</b> to terminate and be unrecoverable.|$|R
5000|$|HPE Unified <b>Functional</b> <b>Testing</b> can be {{extended}} with separate add-ins {{for a number of}} development environments that are not supported out-of-the-box. HPE Unified <b>Functional</b> <b>Testing</b> add-ins include support for Web, [...]NET, Java, and Delphi. HP QuickTest Professional and the HP QuickTest Professional add-ins are packaged together in HP <b>Functional</b> <b>Testing</b> software.|$|R
40|$|Soft tissue techniques, {{including}} Integrative Myofascial Release (IFR) can be {{more effective}} if the area of treatment can be determined by <b>functional</b> <b>testing.</b> The patient’s source of pain {{may not necessarily be}} located at the area of complaint and <b>functional</b> <b>testing</b> helps in pinpointing the source. Post-treatment <b>functional</b> <b>testing</b> will provide feedback to both the patient and the doctor as to whether the technique was effective. This paper will describe some typical <b>functional</b> <b>tests</b> and treatment using IFR of the posterior cervical/thoracolumbar fascia...|$|R
50|$|A <b>functional</b> <b>test</b> {{consists}} {{of a set of}} <b>Functional</b> <b>Test</b> Cases (FTC). FTC are system tests used to verify that FR are satisfied by the system. Black-box testing is the software analog to FTC. At the end of the system development, a <b>functional</b> <b>test</b> verifies that the requirements of the system are met.|$|E
50|$|In most {{manufacturing}} practices, {{an additional}} <b>functional</b> <b>test</b> is performed after manufacturing test. The {{objective of the}} <b>functional</b> <b>test</b> is to ensure the board functions as it was designed and to provide additional defect coverage for those that were not covered by manufacturing test. The PCBA <b>functional</b> <b>test</b> defect universe {{is different from that}} of PCBA manufacturing test as is its test technologies. The PCBA <b>functional</b> <b>test</b> will determine whether the designed function performs as it was intended to. It may or may not isolate a failure to a particular component or connection. PCOLA/SOQ defect isolation is usually not indicative of proper PCBA function.|$|E
50|$|Platform <b>Functional</b> <b>Test</b> Console (PFTC).|$|E
50|$|HPE Unified <b>Functional</b> <b>Testing</b> {{provides}} two views—and ways to modify—a test script: Keyword View and Expert View. These views enable HPE Unified <b>Functional</b> <b>Testing</b> {{to act as}} an Integrated Development Environment (IDE) for the test, and HPE Unified <b>Functional</b> <b>Testing</b> {{includes many}} standard IDE features, such as breakpoints to pause a test at predetermined places.|$|R
50|$|HPE Unified <b>Functional</b> <b>Testing</b> (UFT) software, {{formerly}} known as HP QuickTest Professional (QTP), provides <b>functional</b> and regression <b>test</b> automation for software applications and environments. HPE Unified <b>Functional</b> <b>Testing</b> {{can be used for}} enterprise quality assurance.|$|R
5|$|Perl is {{distributed}} with over 250,000 <b>functional</b> <b>tests</b> for core Perl language and over 250,000 <b>functional</b> <b>tests</b> for core modules. These run {{as part of}} the normal build process and extensively exercise the interpreter and its core modules. Perl developers rely on the <b>functional</b> <b>tests</b> to ensure that changes to the interpreter do not introduce software bugs; additionally, Perl users who see that the interpreter passes its <b>functional</b> <b>tests</b> on their system can have a high degree of confidence that it is working properly.|$|R
5000|$|TestPartner {{provides}} {{two primary}} methods for <b>functional</b> <b>test</b> development: ...|$|E
5000|$|... #Caption: Platform <b>Functional</b> <b>Test</b> Console and Platform on {{pedestal}} ...|$|E
5000|$|<b>Functional</b> <b>Test</b> (FT) - Indicates {{that the}} data is being {{provided}} by a test source.|$|E
5000|$|Oracle <b>Functional</b> <b>Testing</b> for {{automated}} <b>functional</b> and regression <b>testing.</b>|$|R
40|$|PURPOSE: To {{compare the}} work-related {{limitations}} assessed using self-report, clinical examination and <b>functional</b> <b>testing</b> {{in patients with}} chronic low back pain (CLBP). METHODS: Work-related limitations of 92 patients were assessed using self-report, clinical examination and <b>functional</b> <b>testing.</b> To obtain the assessed limitations the patient (self-report), the physician (clinical examination) and a trained evaluator (<b>functional</b> <b>testing)</b> completed a scorings form about the work-related limitations of the patient. The Isernhagen Work Systems Functional Capacity Evaluation (IWS FCE) was used to obtain the <b>functional</b> <b>testing</b> results. A kappa value of more than 0. 60, absolute agreement of more than 80 % and ICC of more than 0. 75 were considered as acceptable. RESULTS: Little agreement and correlation among self-report, clinical examination and <b>functional</b> <b>testing</b> were found {{for the assessment of}} work-related limitations. Self-reported limitations were considerably higher than from those derived from clinical examination or <b>functional</b> <b>testing.</b> Additionally, the limitations derived from the clinical examination were higher than those derived from the IWS FCE. CONCLUSION: Comparing self-report, clinical examination and <b>functional</b> <b>testing</b> for assessing work-related limitations in CLBP patients showed large considerable differences in limitations. Professional health care workers should be aware of these differences when using them in daily practice...|$|R
5000|$|HP <b>Functional</b> <b>Testing</b> software: Automated <b>functional</b> and {{regression}} <b>testing</b> software ...|$|R
5000|$|The {{investigation}} {{could not}} find the <b>functional</b> <b>test</b> result document after theinstallation of the TAWS.|$|E
5000|$|The [...] "DUT" [...] test {{connector}} is defined to enable standardized <b>functional</b> <b>test</b> system interconnection.|$|E
5000|$|Load testing - Validating {{functionality}} {{and performance}} under load, often by reusing <b>functional</b> <b>test</b> cases.|$|E
40|$|Click on the DOI link (may not be free). Context: <b>Functional</b> {{performance}} <b>testing</b> {{of athletes}} can determine physical limitations {{that may affect}} sporting activities. Optimal <b>functional</b> performance <b>testing</b> simulates the athlete's activity. Evidence Acquisition: A Medline search from 1960 to 2012 was implemented with the keywords <b>functional</b> <b>testing,</b> <b>functional</b> impairment <b>testing,</b> and <b>functional</b> performance <b>testing</b> in the English language. Each author also undertook independent searches of article references. Conclusion: <b>Functional</b> performance <b>tests</b> can {{bridge the gap between}} general physical tests and full, unrestricted athletic activity...|$|R
50|$|HPE Unified <b>Functional</b> <b>Testing</b> and HP Quality Center work {{together}} for additional testing capabilities. Users can use HP Quality Center with HPE Unified <b>Functional</b> <b>Testing</b> assets, such as tests, shared object repositories, libraries, recovery scenarios and external data tables.|$|R
50|$|HPE Unified <b>Functional</b> <b>Testing</b> may not {{recognize}} customized user interface objects and other complex objects. Users can define {{these types of}} objects as virtual objects. HPE Unified <b>Functional</b> <b>Testing</b> does not support virtual objects for analog recording or recording in low-level mode.|$|R
50|$|AXI {{is often}} paired with the testing {{provided}} by boundary scan test, in-circuit test, and <b>functional</b> <b>test.</b>|$|E
5000|$|... #Caption: A <b>Functional</b> <b>Test</b> Fixture is {{a complex}} device to {{interface}} the DUT to the automatic test equipment (ATE) ...|$|E
5000|$|While {{the power}} is on, <b>functional</b> <b>test,</b> just {{checking}} if the PCB does {{what it had been}} designed to do.|$|E
50|$|HPE Unified <b>Functional</b> <b>Testing</b> {{supports}} data-driven testing. For example, {{data can}} be output to a data table for reuse elsewhere. Data-driven testing is implemented as a Microsoft Excel workbook that can be accessed from HPE Unified <b>Functional</b> <b>Testing.</b> HPE Unified <b>Functional</b> <b>Testing</b> has two types of data tables: the Global data sheet and Action (local) data sheets. The test steps can read data from these data tables in order to drive variable data into the application under test, and verify the expected result.|$|R
50|$|HPE Unified <b>Functional</b> <b>Testing</b> was {{originally}} written by Mercury Interactive and called QuickTest Professional. Mercury Interactive was subsequently acquired by Hewlett Packard(HP) in 2006. HP Unified <b>Functional</b> <b>Testing</b> 11.5 combined HP QuickTest Professional and HP Service Test {{into a single}} software package, which is currently available from the HP Software Division. The integrated HPE Unified <b>Functional</b> <b>Testing</b> software allows developers to test from a single console all three layers of a program's operations: the interface, the service layer and the database layer.|$|R
50|$|Smoke {{tests can}} be broadly {{categorized}} as <b>functional</b> <b>tests</b> or as unit <b>tests.</b> <b>Functional</b> <b>tests</b> exercise the complete program with various inputs. Unit tests exercise individual functions, subroutines, or object methods. <b>Functional</b> <b>tests</b> may comprise a scripted series of program inputs, possibly even with an automated mechanism for controlling mouse movements. Unit tests {{can be implemented}} either as separate functions within the code itself, or else as a driver layer that links to the code without altering the code being tested.|$|R
