242|191|Public
25|$|Any {{identity}} system {{centers around}} three entities â€” the User {{who is to}} be identified, an <b>Identity</b> <b>Provider</b> who provides identifying information regarding the User, and Relying Party who uses the identity to authenticate the user. An <b>Identity</b> <b>Provider</b> may be a service like Active Directory, or even the user who provides an authentication password, or biometric authentication data.|$|E
25|$|Some {{observers}} {{have suggested that}} OpenID has security weaknesses and may prove vulnerable to phishing attacks. For example, a malicious relaying party may forward the end-user to a bogus <b>identity</b> <b>provider</b> authentication page asking that end-user to input their credentials. On completion of this, the malicious party (who in this case also controls the bogus authentication page) could then {{have access to the}} end-user's account with the <b>identity</b> <b>provider,</b> and then use that end-user's OpenID to log into other services.|$|E
25|$|To {{obtain an}} OpenID-enabled URL {{that can be}} used to log into OpenID-enabled websites, a user {{registers}} an OpenID identifier with an <b>identity</b> <b>provider.</b> Identity providers offer the ability to register a URL (typically a third-level domain, e.g. username.example.com) that will automatically be configured with OpenID authentication service.|$|E
50|$|Sometimes <b>Identity</b> <b>providers</b> {{can work}} as proxies for other <b>Identity</b> <b>providers,</b> {{enabling}} {{the creation of}} trust relationships that can be employed to simplify the management of service providers.|$|R
40|$|We {{present an}} {{identity}} management scheme {{built into the}} Bitcoin blockchain, allowing for identities that are as indelible as the blockchain itself. Moreover, we take advantage of Bitcoin's decentralized nature to facilitate a shared control between users and <b>identity</b> <b>providers,</b> allowing users to directly manage their own identities, fluidly coordinating <b>identities</b> from different <b>providers,</b> even as <b>identity</b> <b>providers</b> can revoke <b>identities</b> and impose controls...|$|R
5000|$|The {{application}} decodes the <b>identity</b> <b>provider's</b> response, {{and carries}} on accordingly.|$|R
25|$|The <b>Identity</b> <b>Provider</b> does, however, get a log of your OpenID logins; {{they know}} when you logged into what website, making cross-site {{tracking}} much easier. A compromised OpenID account {{is also likely to}} be a more serious breach of privacy than a compromised account on a single site.|$|E
25|$|A Relying Party {{issues a}} request to an {{application}} for an identity, {{by means of a}} Policy that states what Claims it needs and what will be the physical representation of the security token. The application then passes on the request to Windows CardSpace, which then contacts a suitable <b>Identity</b> <b>Provider</b> and retrieves the Identity. It then provides the application with the Identity along with information on how to use it.|$|E
2500|$|The OpenID {{standard}} {{provides a}} framework for the communication that must take place between the <b>identity</b> <b>provider</b> and the OpenID acceptor (the [...] "relying party"). An extension to the standard (the OpenID Attribute Exchange) facilitates the transfer of user attributes, such as name and gender, from the OpenID <b>identity</b> <b>provider</b> to the relying party (each relying party may request {{a different set of}} attributes, depending on its requirements).|$|E
5000|$|Entities {{that rely}} upon the {{credentials}} issued by electronic <b>identity</b> <b>providers</b> (IdP), ...|$|R
50|$|Additional methods {{could also}} be {{implemented}} by future Identity Selectors and <b>Identity</b> <b>Providers.</b>|$|R
5000|$|Support {{for popular}} web <b>identity</b> <b>providers</b> {{including}} Windows Live ID, Google, Yahoo, and Facebook ...|$|R
2500|$|Users create {{accounts}} {{by selecting}} an OpenID <b>identity</b> <b>provider,</b> {{and then use}} those accounts to sign onto any website which accepts OpenID authentication. Several large organizations either issue or accept OpenIDs on their websites according to the OpenID Foundation: ...|$|E
2500|$|An {{end-user}} is {{the entity}} {{that wants to}} assert a particular identity. A relying party (RP) is a web site or application that wants to verify the end-user's identifier. Other terms for this party include [...] "service provider" [...] or the now obsolete [...] "consumer". An <b>identity</b> <b>provider,</b> or OpenID provider (OP) is a service that specializes in registering OpenID URLs or XRIs. OpenID enables an end-user to communicate with a relying party. This communication is done through the exchange of an identifier or OpenID, which is the URL or XRI chosen by the end-user to name the end-user's identity. An <b>Identity</b> <b>provider</b> provides the OpenID authentication (and possibly other identity services). The exchange is enabled by a user-agent, which is the program (such as a browser) used by the end-user {{to communicate with the}} relying party and OpenID provider.|$|E
2500|$|In {{an attempt}} to combat {{possible}} phishing attacks some OpenID providers mandate that the end-user needs to be authenticated with them prior to {{an attempt to}} authenticate with the relying party. This relies on the end-user knowing {{the policy of the}} <b>identity</b> <b>provider.</b> In December 2008, the OpenID Foundation approved version 1.0 of the Provider Authentication Policy Extension (PAPE), which [...] "enables Relying Parties to request that OpenID Providers employ specified authentication policies when authenticating users and for OpenID Providers to inform the Relying Parties which policies were actually used." ...|$|E
50|$|The eduGAIN service enables {{participating}} federations, which primarily {{serve the}} authentication and authorisation interests {{of research and}} education sectors, to interfederate. eduGAIN provides an infrastructure for establishing trusted communications between <b>identity</b> <b>providers</b> and service providers in different participating federations. End-users authenticate at <b>identity</b> <b>providers</b> and obtain access to service providers. Technically, eduGAIN is managed by aggregating and distributing signed SAML 2.0 metadata files.|$|R
5000|$|The user's browser {{requests}} the redirect URL {{that goes}} back to the application, including the <b>identity</b> <b>provider's</b> response ...|$|R
50|$|In SAML 1.1, {{the flow}} {{begins with a}} request to the <b>identity</b> <b>provider's</b> inter-site {{transfer}} service at step 3.|$|R
2500|$|In March, 2012, a {{research}} paper reported two generic security issues in OpenID. Both issues allow an attacker to sign into a victim's relying party accounts. For the first issue, OpenID and Google (an <b>Identity</b> <b>Provider</b> of OpenID) both published security advisories to address it. Google's advisory says [...] "An attacker could forge an OpenID request that doesn't {{ask for the}} user's email address, and then insert an unsigned email address into the IDPs response. If the attacker relays this response to a website that doesn't notice that this attribute is unsigned, the website may be tricked into logging the attacker in to any local account." [...] The research paper claims that many popular websites have been confirmed vulnerable, including Yahoo! Mail, smartsheet.com, Zoho, manymoon.com, diigo.com. The researchers have notified the affected parties, who have then fixed their vulnerable code.|$|E
2500|$|Another {{important}} vulnerability {{is present}} in the last step in the authentication scheme when TLS / SSL are not used: the redirect-URL from the <b>Identity</b> <b>Provider</b> to the Relying Party. The problem with this redirect is the fact that anyone who can obtain this URL (e.g. by sniffing the wire) can replay it and get logged into the site as the victim user. Some of the Identity Providers use nonces (number used once) to allow a user to log into the site once and fail all the consecutive attempts. The nonce solution works if the user is the first one to use the URL. However a fast attacker who is sniffing the wire can obtain the URL and immediately reset a user's TCP connection (as an attacker is sniffing the wire and knows the required TCP sequence numbers) and then execute the replay attack as described above. Thus nonces only protect against passive attackers but cannot prevent active attackers from executing the replay attack. [...] Use of TLS/SSL in the authentication process eliminates this risk.|$|E
2500|$|In December, {{developers}} at Sxip Identity began {{discussions with}} the OpenID/Yadis community after announcing {{a shift in the}} development of version 2.0 of its Simple Extensible Identity Protocol (SXIP) to URL-based identities like LID and OpenID. In March 2006, JanRain developed a Simple Registration (SREG) extension for OpenID enabling primitive profile-exchange and in April submitted a proposal to formalize extensions to OpenID. The same month, work had also begun on incorporating full XRI support into OpenID. Around early May, key OpenID developer David Recordon left Six Apart, joining VeriSign to focus more on digital identity and guidance for the OpenID spec. By early June, the major differences between the SXIP 2.0 and OpenID projects were resolved with the agreement to support multiple personas in OpenID by submission of an <b>identity</b> <b>provider</b> URL rather than a full identity URL. With this, as well as the addition of extensions and XRI support underway, OpenID was evolving into a full-fledged digital identity framework, with Recordon proclaiming [...] "We see OpenID as being an umbrella for the framework that encompasses the layers for identifiers, discovery, authentication and a messaging services layer that sits atop and this entire thing has sort of been dubbed 'OpenID 2.0'. [...] " [...] In late July, Sxip began to merge its Digital Identity Exchange (DIX) protocol into OpenID, submitting initial drafts of the OpenID Attribute Exchange (AX) extension in August. Late in 2006, a ZDNet opinion piece made the case for OpenID to users, web site operators and entrepreneurs.|$|E
5000|$|<b>Identity</b> <b>Providers</b> {{must be able}} {{to trust}} that the Relying Party is {{legitimate}} (i.e. not a hacker, phisher, etc.) ...|$|R
50|$|The ACOnet Identity Federation {{provides}} a federated identity service, bringing together <b>identity</b> <b>providers</b> and service providers in the Austrian {{research and education}} community.|$|R
5000|$|... (OAuth only) The {{response}} {{includes an}} access token which the application {{can use to}} gain {{direct access to the}} <b>identity</b> <b>provider's</b> services on the user's behalf.|$|R
5000|$|I-Brokers are {{sometimes}} referred to as a homesite, or PIP (Personal <b>Identity</b> <b>Provider),</b> or IdP (<b>Identity</b> <b>Provider)</b> ...|$|E
5000|$|The crucial {{difference}} {{is that in the}} OpenID authentication use case, the response from the <b>identity</b> <b>provider</b> is an assertion of identity; while in the OAuth authorization use case, the <b>identity</b> <b>provider</b> is also an API provider, and the response from the <b>identity</b> <b>provider</b> is an access token that may grant the application ongoing access to some of the identity provider's APIs, on the user's behalf. The access token acts as a kind of [...] "valet key" [...] that the application can include with its requests to the <b>identity</b> <b>provider,</b> which prove that it has permission from the user to access those APIs.|$|E
5000|$|Auditing cards {{require the}} {{identity}} of the RP site to be disclosed to the <b>Identity</b> <b>Provider.</b> This can be used to restrict which sites the <b>Identity</b> <b>Provider</b> is willing to release information to.|$|E
40|$|Abstract. Many Chinese {{websites}} (relying parties) use OAuth 2. 0 as {{the basis}} of a single sign-on service to ease password management for users. Many sites support five or more different OAuth 2. 0 <b>identity</b> <b>providers,</b> giving users choice in their trust point. However, although OAuth 2. 0 has been widely implemented (particularly in China), little {{attention has been paid to}} security in practice. In this paper we report on a detailed study of OAuth 2. 0 implementation security for ten major <b>identity</b> <b>providers</b> and 60 relying parties, all based in China. This study reveals two critical vulnerabilities present in many implementations, both allowing an attacker to control a victim userâ€™s accounts at a relying party without knowing the userâ€™s account name or password. We provide sim-ple, practical recommendations for <b>identity</b> <b>providers</b> and relying parties to enable them to mitigate these vulnerabilities. The vulnerabilities have been reported to the parties concerned. ...|$|R
40|$|Today, user {{attributes}} {{are managed}} at centralized <b>identity</b> <b>providers.</b> However, two centralized <b>identity</b> <b>providers</b> dominate digital <b>identity</b> and access management on the web. This is increasingly becoming a privacy problem {{in times of}} mass surveillance and data mining for targeted advertisement. Existing systems for attribute sharing or credential presentation either rely on a trusted third party service or require the presentation to be online and synchronous. In this {{paper we propose a}} concept that allows the user to manage and share his attributes asynchronously with a requesting party using a secure, decentralized name system...|$|R
50|$|The browser stores {{a list of}} user {{verified}} {{email addresses}} (certificates issued by the <b>identity</b> <b>providers),</b> and demonstrates the user's ownership of the addresses to the website using cryptographic proof.|$|R
5000|$|Identity {{assurance}} specifically {{refers to}} the degree of certainty of an identity assertion made by an <b>identity</b> <b>provider</b> by presenting an identity credential to the Relying Party. In order to issue this assertion, the <b>Identity</b> <b>Provider</b> must first determine whether or not the claimant possesses and controls an appropriate token, using a predefined authentication protocol. Depending on the outcome of this authentication procedure, the assertion returned to the Relying Party by the <b>Identity</b> <b>Provider</b> allows the Relying Party {{to decide whether or not}} to trust that the identity associated with the credential actually [...] "belongs" [...] to the person presenting the credential.|$|E
5000|$|The SAML 2.0 <b>Identity</b> <b>Provider</b> Discovery Profile {{introduces}} the following concepts: ...|$|E
50|$|Any {{identity}} system {{centers around}} three entities â€” the User {{who is to}} be identified, an <b>Identity</b> <b>Provider</b> who provides identifying information regarding the User, and Relying Party who uses the identity to authenticate the user. An <b>Identity</b> <b>Provider</b> may be a service like Active Directory, or even the user who provides an authentication password, or biometric authentication data.|$|E
5000|$|SAML assertions {{are usually}} {{transferred}} from <b>identity</b> <b>providers</b> to service providers. Assertions contain statements that service providers {{use to make}} access-control decisions. Three types of statements are provided by SAML: ...|$|R
5000|$|Pre-Validated Email - <b>Identity</b> <b>providers</b> {{who support}} email such as Google and Yahoo! can return the userâ€™s email {{address to the}} 3rd party website {{preventing}} the user from supplying a fabricated email address during the registration process.|$|R
25|$|Windows CardSpace {{presents}} an API that allows any application to use Windows CardSpace to handle authentication tasks. Similarly, the API allows <b>Identity</b> <b>Providers</b> {{to hook up}} with Windows CardSpace. To any Relying Party, it appears as a service which provides authentication credentials.|$|R
