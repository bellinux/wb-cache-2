4850|4624|Public
5|$|CCSR at the University of Surrey is the UK's {{largest and}} most {{well-known}} academic research centre in Mobile and Satellite Communication Systems and historically it has a unique research approach on both satellite as well as terrestrial mobile communication systems. The research activities within the group encompass all levels of communication systems, from antennas & propagation, air interfaces, PHY, MAC, networking layer up to the service support platforms and <b>distributed</b> <b>applications</b> and user interfaces. It is a major participant in European Union Information Science and Technology (IST) projects.|$|E
25|$|In {{concurrency}} control of databases, transaction processing (transaction management), and other transactional <b>distributed</b> <b>applications,</b> Global serializability (or Modular serializability) is a property {{of a global}} schedule of transactions. A global schedule is the unified schedule of all the individual database (and other transactional object) schedules in a multidatabase environment (e.g., federated database). Complying with global serializability means that the global schedule is serializable, has the serializability property, while each component database (module) has a serializable schedule as well. In other words, a collection of serializable components provides overall system serializability, which is usually incorrect. A need in correctness across databases in multidatabase systems makes global serializability a major goal for global {{concurrency control}} (or modular concurrency control). With the proliferation of the Internet, Cloud computing, Grid computing, and small, portable, powerful computing devices (e.g., smartphones), as well as increase in systems management sophistication, the need for atomic distributed transactions and thus effective global serializability techniques, to ensure correctness in and among distributed transactional applications, seems to increase.|$|E
2500|$|Wind {{technologies}} {{can be used}} in many applications, including land-based {{and offshore}} utility-scale wind farms, community-scale projects, and <b>distributed</b> <b>applications</b> for homes and businesses. WPA provides information on wind energy issues to stakeholders in each of these sectors. WPA produces application-specific information, including a series of [...] and other outreach materials.|$|E
40|$|<b>Distributed</b> {{multimedia}} <b>applications</b> require {{negotiation of}} quality of service (QoS) and resource reservation for <b>distributed</b> <b>application</b> parts and communication links. Negotiation of QoS is a balancing process between the QoS specified by a client, the resource availabilities of the distributed system and the functional capabilities of the <b>distributed</b> <b>application.</b> Negotiation requires application level QoS descriptions and an end-to-end view spanning the whole <b>distributed</b> <b>application.</b> NRP is an application level protocol meeting these requirements. NRP performs negotiation based on client specified QoS value ranges and given resource availability on endsystems and communication links. NRP is independent of application level QoS semantics. It allows QoS negotiation and resource reservation in three phases and supports {{a wide range of}} <b>distributed</b> <b>application</b> topologies. 1 Introduction 3 1 Introduction The promise of networked multimedia is to provide a multitude of attractive applicat [...] ...|$|R
5000|$|<b>Distributed</b> <b>Application</b> Process (DAP). The {{instantiation}} of {{a computer}} program executing in a processing system intended to accomplish some purpose. A <b>Distributed</b> <b>Application</b> Process contains one or more tasks or Application-Entities, as well as functions for managing the resources (processor, storage, and IPC) allocated to this DAP.|$|R
5000|$|Define {{deployments}} {{of their}} complex multi-tier <b>distributed</b> <b>application</b> ...|$|R
2500|$|IoT {{frameworks}} {{might help}} support the interaction between [...] "things" [...] and allow for more complex structures like distributed computing {{and the development of}} <b>distributed</b> <b>applications.</b> Currently, some IoT frameworks seem to focus on real-time data logging solutions, offering some basis to work with many [...] "things" [...] and have them interact. Future developments might lead to specific software-development environments to create the software to work with the hardware used in the Internet of things. Companies are developing technology platforms to provide this type of functionality for the Internet of things. Newer platforms are being developed, which add more intelligence.|$|E
2500|$|The only {{overhead}} {{incurred by}} the CO solution is locally detecting conflicts (which is already done by any known serializability mechanism, both pessimistic and optimistic) and locally ordering in each database system both the (local) commits of local transactions and the voting for atomic commitment of global transactions. Such overhead is low. The {{net effect of}} CO may be some delays of commit events (but never more delay than SS2PL, and on the average less). This makes CO instrumental for global concurrency control of multidatabase systems (e.g., federated database systems). The underlying Theory of Commitment ordering, part of Serializability theory, is both sound and elegant (and even [...] "mathematically beautiful"; referring to structure and dynamics of conflicts, graph cycles, and deadlocks), with interesting implications for transactional <b>distributed</b> <b>applications.</b>|$|E
5000|$|... {{synchronization}} of OID-based listings (also with <b>distributed</b> <b>applications)</b> ...|$|E
5000|$|... #Subtitle level 3: <b>Distributed</b> <b>application</b> {{and system}} {{designer}} integration ...|$|R
5000|$|... #Caption: Figure 2. <b>Distributed</b> <b>Application</b> Processes (DAPs) {{and their}} {{components}} ...|$|R
5000|$|ISO/IEC JTC 1/SC 38, <b>Distributed</b> <b>Application</b> Platform & Services (DAPS) ...|$|R
5000|$|Client Application- The {{tools that}} {{interact}} with the <b>distributed</b> <b>applications</b> ...|$|E
5000|$|The DDM {{architecture}} provides <b>distributed</b> <b>applications</b> {{with the}} following benefits: ...|$|E
5000|$|Akka, an {{open source}} toolkit for {{building}} concurrent and <b>distributed</b> <b>applications</b> ...|$|E
5000|$|ISO/IEC JTC 1/SC 38, <b>Distributed</b> <b>application</b> {{platforms}} & services (DAPS) ...|$|R
5000|$|ISO/IEC JTC 1/SC 38, <b>Distributed</b> <b>Application</b> Platforms and Services (DAPS) ...|$|R
40|$|Abstract—The “{{information}} island ” {{formed in}} the process of the information development has become a constraint of the information sharing. This article provides a <b>distributed</b> <b>application</b> platform combining the technology features of the middleware and Web Services. The <b>distributed</b> <b>application</b> platform is based on the middleware system, and the design core thereof is the SOA mode. The <b>distributed</b> <b>application</b> platform overcomes the shortcomings of the traditional integration method of applications, effectively solves the integration problems of the cross-platform applications, and provides a support for the integration of information resources. Index Terms—Middleware system; Web Services; SOA I...|$|R
5000|$|SimGrid - a toolkit for the {{simulation}} of <b>distributed</b> <b>applications</b> - ...|$|E
50|$|The DDS publish-subscribe model {{virtually}} eliminates complex network {{programming for}} <b>distributed</b> <b>applications.</b>|$|E
5000|$|Hadoop - Java {{framework}} that supports <b>distributed</b> <b>applications</b> running on large clusters.|$|E
5000|$|... #Caption: GNU Image Manipulation Program (GIMP), version 2.6, a freely <b>distributed</b> <b>application</b> ...|$|R
5000|$|Resource Information Base (RIB). For the DAF, the RIB is {{the logical}} {{representation}} of the local repository of the objects. Each member of the DAF maintains a RIB. A <b>Distributed</b> <b>Application</b> may define a RIB to be its local representation of its view of the <b>distributed</b> <b>application.</b> From {{the point of view}} of the OS model, this is storage.|$|R
30|$|If we view {{computing}} clouds {{from the}} inward-looking perspective mentioned above, {{it can be}} seen that the cloud framework itself is a <b>distributed</b> <b>application</b> that in turn supports <b>distributed</b> guest <b>applications,</b> for the reasons listed below.|$|R
5000|$|Distributed Dynamic Processing: The ITA {{programme}} {{developed the}} concept of bypassing network bottlenecks in the coalition edge by moving processing within the network, and analysed approaches for mapping <b>distributed</b> <b>applications</b> onto hybrid coalition networks. It has created new techniques for distributing streaming and transaction oriented applications, analyzing their performance, and improving the effectiveness of <b>distributed</b> <b>applications.</b>|$|E
5000|$|MPV : Multiprocessor VRTX for <b>{{distributed}}</b> <b>applications,</b> such as distributed across VME backplanes.|$|E
50|$|Einstein@Home uses AVX in some {{of their}} <b>distributed</b> <b>applications</b> that search for Gravitational Waves.|$|E
40|$|We present our {{approach}} for deploying and managing <b>distributed</b> component-based <b>applications.</b> A Desired State Description (DSD), {{written in a}} high-level declarative language, specifies requirements for a <b>distributed</b> <b>application.</b> Our infrastructure accepts a DSD as input, and from it automatically configures and deploys the <b>distributed</b> <b>application.</b> Subsequent violations of the original requirements are detected and, where possible, automatically rectified by reconfiguration and redeployment of the necessary application components. A constraint solving tool is used to plan deployments that meet the application requirements. Comment: Submitted to DOA 0...|$|R
50|$|The XDK allows {{software}} creators to create, run and <b>distribute</b> <b>applications</b> on the Xbox platform.|$|R
50|$|Uniface Development Environment—an {{integrated}} {{collection of}} tools for modeling, implementing, compiling, debugging, and <b>distributing</b> <b>applications.</b>|$|R
50|$|The DC-API allows easy {{implementation}} and deployment of <b>distributed</b> <b>applications</b> on multiple grid environments.|$|E
50|$|Transaction {{processing}} monitors provides {{tools and}} an environment {{to develop and}} deploy <b>distributed</b> <b>applications.</b>|$|E
5000|$|Make it {{possible}} to build <b>distributed</b> <b>applications</b> by combining components developed using tools from different vendors.|$|E
5000|$|Peer-to-peer, a {{computing}} or networking <b>distributed</b> <b>application</b> {{architecture that}} partitions tasks or workloads among peers ...|$|R
5000|$|BSI IST/038 - Expert Committee on <b>Distributed</b> <b>Application</b> Processes and Services (UK shadow for ISO/IEC JTC1 SC38) ...|$|R
30|$|SimGrid [8] is a {{simulation}} tool for grid computing and distributed systems that studies scheduling algorithms for <b>distributed</b> <b>application.</b>|$|R
