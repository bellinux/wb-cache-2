10000|10000|Public
5|$|Ehlers' {{research}} {{was in the}} field of general relativity. In particular, he made contributions to cosmology, the theory of gravitational lenses and gravitational waves. His principal concern was to clarify general relativity's mathematical structure and its consequences, separating rigorous proofs from <b>heuristic</b> conjectures.|$|E
5|$|General {{relativity}} can {{be understood}} by examining its similarities with and departures from classical physics. The first step is the realization that classical mechanics and Newton's law of gravity admit a geometric description. The combination of this description with the laws of special relativity results in a <b>heuristic</b> derivation of general relativity.|$|E
5|$|This {{is merely}} a <b>heuristic</b> characterization. The Dirac delta is not a {{function}} {{in the traditional sense}} as no function defined on the real numbers has these properties. The Dirac delta function can be rigorously defined either as a distribution or as a measure.|$|E
30|$|The TSP <b>heuristics</b> {{have been}} studied. In this work, {{we focus on}} tour {{construction}} <b>heuristics</b> [21]. By tour construction, it computes a tour (or a circuit) following some rules, and takes the resulting tour by the rules as the final result without further refinement. In [21], construction <b>heuristics</b> are divided into 3 categories: <b>heuristics</b> designed for speed, tour construction by pure augmentation and more complex tour construction. In this work, we cover more <b>heuristics,</b> and divide 22 construction <b>heuristics</b> into 3 new categories, namely (1) space-partitioning-based <b>heuristics,</b> (2) node-based <b>heuristics</b> and (3) edge-based <b>heuristics.</b> Table  2 lists all the 22 <b>heuristics</b> studied, where some are with guarantee of the approximate ratio. Below, we discuss 2 space-partitioning-based <b>heuristics</b> in Sect.  3.1, 4 edge-based <b>heuristics</b> in Sect.  3.3 and 16 node-based <b>heuristics</b> in Sect.  3.2.|$|R
30|$|The node-based <b>heuristics</b> {{construct}} a circuit by expanding the nodes in Q {{one by one}} until {{all of them are}} visited. There are three main issues in the <b>heuristics,</b> which are (a) how to initialize an initial node(s) and (b) in every iteration, how to select the next node to expand and where it is for the next node to be inserted. Among the node-based <b>heuristics,</b> we discuss the nearest-neighbor <b>heuristics,</b> the insertion <b>heuristics,</b> the convex hull-based insertion <b>heuristics,</b> the addition <b>heuristics,</b> and the augmented addition <b>heuristics.</b> Algorithm 2 shows the framework of node-based <b>heuristics.</b>|$|R
40|$|In this paper, {{a set of}} <b>heuristics</b> for {{evaluating}} the usability of mobile map applications is introduced. We developed the <b>heuristics</b> by exploring the present generic <b>heuristics</b> and then forming new theory-based <b>heuristics.</b> Usability specialists tested the <b>heuristics</b> by evaluating the usability of a mobile map application with both generic and domain-specific <b>heuristics.</b> As a result, more usability problems were found with the proposed domain-specific <b>heuristics.</b> In addition, based on the evaluators’ views the initial domain-specific <b>heuristics</b> were further developed. We conclude by proposing domain-specific usability <b>heuristics</b> {{for evaluating}} the mobile map applications...|$|R
25|$|A* uses an {{admissible}} <b>heuristic.</b> Otherwise, A* is {{not guaranteed}} to expand fewer nodes than another search algorithm {{with the same}} <b>heuristic.</b>|$|E
25|$|<b>Heuristic</b> models (e.g. Aucamp model).|$|E
25|$|<b>Heuristic</b> scores {{based on}} residue contacts.|$|E
40|$|Keywords: Hyper-heuristics {{could simply}} {{be defined as}} <b>heuristics</b> to choose other <b>heuristics.</b> In other words, they are methods for {{combining}} existing <b>heuristics</b> to generate new ones. In this paper, we use a grammar-based genetic programming hyperheuristic framework. The framework is used for evolving effective incremental solvers for SAT. The evolved <b>heuristics</b> perform very well against well-known local search <b>heuristics</b> {{on a variety of}} benchmark SAT problems. hyper-heuristic, Inc, SAT, <b>heuristics.</b> 1...|$|R
30|$|Here, {{we propose}} two {{different}} <b>heuristics</b> {{based on our}} designing objective, namely Bandwidth-Oriented <b>Heuristics</b> (BOH) and Switch-Oriented <b>Heuristics</b> (SOH).|$|R
5000|$|Jakob Nielsen's <b>heuristics</b> are {{probably}} the most-used usability <b>heuristics</b> for user interface design. Nielsen developed the <b>heuristics</b> based on work together with Rolf Molich in 1990. The final set of <b>heuristics</b> that are still used today were released by Nielsen in 1994. The <b>heuristics</b> as published in Nielsen's book Usability Engineering are as follows: ...|$|R
25|$|In an unordered list, {{one simple}} <b>heuristic</b> for {{decreasing}} average search {{time is the}} move-to-front <b>heuristic,</b> which simply moves an element {{to the beginning of}} the list once it is found. This scheme, handy for creating simple caches, ensures that the most recently used items are also the quickest to find again.|$|E
25|$|Recurrence {{quantification}} analysis, a <b>heuristic</b> {{approach to}} quantify recurrence plots.|$|E
25|$|However, {{the kind}} of <b>heuristic</b> used by early AV engines was totally {{different}} from those used today. The first product with a <b>heuristic</b> engine resembling modern ones was F-PROT in 1991. Early <b>heuristic</b> engines were based on dividing the binary in different sections: data section, code section (in a legitimate binary, it usually starts always from the same location). Indeed, the initial viruses re-organized {{the layout of the}} sections, or overrode the initial portion of section in order to jump to {{the very end of the}} file where malicious code was located—only going back to resume execution of the original code. This was a very specific pattern, not used at the time by any legitimate software, which represented an elegant <b>heuristic</b> to catch suspicious code. Other kinds of more advanced heuristics were later added, such as suspicious section names, incorrect header size, regular expressions, and partial pattern in-memory matching.|$|E
5000|$|Hyper-heuristic {{approaches}} so far can {{be classified}} into two main categories. In the first class, captured by the phrase <b>heuristics</b> to choose <b>heuristics,</b> the hyper-heuristic framework is provided {{with a set of}} pre-existing, generally widely known <b>heuristics</b> for solving the target problem. The task is to discover a good sequence of applications of these <b>heuristics</b> for efficiently solving the problem. In the second class, <b>heuristics</b> to generate <b>heuristics,</b> the key idea is to [...] "evolve new <b>heuristics</b> by making use of the components of known heuristics." [...] The process requires, as in the first class of hyper-heuristics, the selection of a suitable set of <b>heuristics</b> known to be useful in solving the target problem. However, instead of supplying these directly to the framework, the <b>heuristics</b> are first decomposed into their basic components.|$|R
40|$|AbstractIn this work, a {{systematic}} review of <b>heuristics</b> for profile reduction of symmetric matrices is presented. 74 <b>heuristics</b> tested for reduction profile were found. Researchers compared {{results of their}} <b>heuristics</b> with results of other <b>heuristics.</b> In this review, these comparisons were analyzed and 8 <b>heuristics</b> were identified as the possible best for the problem. In addition, exchange methods, a form of local search, were identified that can benefit <b>heuristics</b> identified as the best ones for the task...|$|R
40|$|This {{dissertation}} studies heuristics-strategies for guided inquiry-by exploring their {{relevance to}} three major issues in recent rhetoric scholarship. First, <b>heuristics</b> are studied {{in light of}} the various definitions of rhetoric as epistemic. Because <b>heuristics</b> are linguistic devices, their epistemic capacities are necessarily determined by the epistemic capacities of language. Second, <b>heuristics</b> are examined as techniques of social invention. They are shaped by culture: the knowledge they authorize is that which is valued by the social collective. Third, <b>heuristics</b> are a useful pedagogy for cultural studies. Because many <b>heuristics</b> lead writers to explore their subjects from multiple perspectives, they are intentionally designed to critique hegemonic understandings. The <b>heuristics</b> analyzed in detail for each of these issues are the pentad and the tagmemic exploratory <b>heuristics.</b> ^ The dissertation argues that <b>heuristics</b> are not neutral pedagogies. They promote certain lines of inquiry, privileging particular kinds of knowledge. It is insufficient, then, to describe <b>heuristics</b> solely as modeling the composing processes of experts. Scholarship must also account for the nature of <b>heuristics</b> as symbolic acts. The dissertation concludes by exploring how early scholarship on <b>heuristics</b> and more recent rhetorical theory can mutually inform each other. ...|$|R
25|$|Cultural relativism as a methodological tool while {{conducting}} fieldwork, and as <b>heuristic</b> tool while analyzing data.|$|E
25|$|Generally, <b>heuristic</b> {{algorithm}} {{and tree}} alignment graph are also adopted to solve multiple sequence alignment problems.|$|E
25|$|Sampled Dynamic Weighting uses {{sampling}} of nodes to better estimate and debias the <b>heuristic</b> error.|$|E
40|$|Many cost-based {{planning}} <b>heuristics</b> {{are based}} on partial or complete delete relaxation. Definitions of these <b>heuristics</b> are of different nature, which {{makes it difficult to}} establish relations and formal comparisons among them. In this paper, we propose a unified definition with enough generality to cover most of existing <b>heuristics.</b> Important relations among <b>heuristics</b> can be derived from our study, as, for example, that some <b>heuristics</b> are equivalent to others under some conditions. Also, a side effect is that the generalized definition provides a framework to derive new <b>heuristics</b> for cost-based planning...|$|R
40|$|This {{article is}} {{intended}} to make Web designers {{more aware of the}} qualities of <b>heuristics</b> by presenting a framework for analyzing the characteristics of <b>heuristics.</b> The framework is meant to support Web designers in choosing among alternative <b>heuristics.</b> We hope that better knowledge of the backgrounds, potentials, and limitations of <b>heuristics</b> will contribute to the professional expertise in the field. Our second goal is to make those who develop and present <b>heuristics</b> more aware of the information their users need. Thus, we try to increase the usability of <b>heuristics...</b>|$|R
40|$|<b>Heuristics</b> {{evaluation}} is frequently employed to evaluate usability. While general <b>heuristics</b> are suitable to evaluate most user interfaces, {{there is still}} a need to establish <b>heuristics</b> for specific domains to ensure that their specific usability issues are identified. This paper presents a comprehensive review of 70 studies related to usability <b>heuristics</b> for specific domains. The aim {{of this paper is to}} review the processes that were applied to establish <b>heuristics</b> in specific domains and identify gaps in order to provide recommendations for future research and area of improvements. The most urgent issue found is the deficiency of validation effort following <b>heuristics</b> proposition and the lack of robustness and rigour of validation method adopted. Whether domain specific <b>heuristics</b> perform better or worse than general ones is inconclusive due to lack of validation quality and clarity on how to assess the effectiveness of <b>heuristics</b> for specific domains. The lack of validation quality also affects effort in improving existing <b>heuristics</b> for specific domain as their weaknesses are not addressed...|$|R
25|$|A* is also optimally {{efficient}} for any <b>heuristic</b> h, {{meaning that}} no optimal algorithm employing the same <b>heuristic</b> will expand fewer nodes than A*, except {{when there are}} multiple partial solutions where h exactly predicts {{the cost of the}} optimal path. Even in this case, for each graph there exists some order of breaking ties in the priority queue such that A* examines the fewest possible nodes.|$|E
25|$|Pattern search methods, {{which have}} better {{convergence}} properties than the Nelder–Mead <b>heuristic</b> (with simplices), which is listed below.|$|E
25|$|In {{addition}} to rapid <b>heuristic</b> search methods, the FASTA package provides SSEARCH, an {{implementation of the}} optimal Smith-Waterman algorithm.|$|E
40|$|We propose six new <b>heuristics</b> {{to find a}} source-to-destination {{path that}} {{satisfies}} two or more additive constraints on edge weights. Five of these <b>heuristics</b> become ǫ-approximation algorithms when their parameters are appropriately set. The performance of our new <b>heuristics</b> is compared experimentally with that of two recently proposed <b>heuristics</b> for the same problem...|$|R
40|$|In this paper, {{we present}} new {{results on the}} {{automated}} generalization of performance-related <b>heuristics</b> learned for knowledge-lean applications. By first applying genetics-based learning to learn new <b>heuristics</b> for some small subsets of test cases in a problem space, we study methods to generalize these <b>heuristics</b> to unlearned subdomains of test cases. Our method uses a new statistical metric called probability of win. By assessing the performance of <b>heuristics</b> in a range-independent and distribution-independent manner, we can compare <b>heuristics</b> across problem subdomains in a consistent manner. To illustrate our approach, we show experimental results on generalizing <b>heuristics</b> learned for sequential circuit testing, VLSI cell placement and routing, branch-and-bound search, and blind equalization. We show that generalization can lead to new and robust <b>heuristics</b> that perform better than the original <b>heuristics</b> across test cases of different characteristics. Keywords: Generalization, ge [...] ...|$|R
40|$|When {{changing}} a source code entity (e. g., a function), developers {{must ensure that}} the change is propagated to related entities to avoid the introduction of bugs. Accurate change propagation {{is essential for the}} successful evolution of complex software systems. Techniques and tools are needed to support developers in propagating changes. Several <b>heuristics</b> have been proposed in the past for change propagation. Research shows that <b>heuristics</b> based on the change history of a project outperform <b>heuristics</b> based on the dependency graph. However, these <b>heuristics</b> being static are not the answer to the dynamic nature of software projects. These <b>heuristics</b> need to adapt to the dynamic nature of software projects and must adjust themselves for the peculiarities of each changed entity. In this paper we propose adaptive change propagation <b>heuristics.</b> These <b>heuristics</b> are meta-heuristics that combine various previously researched <b>heuristics</b> to improve the overall performance (precision and recall) of change propagation <b>heuristics.</b> Through an empirical case study, using four large open source systems; GCC (a compiler), FreeBSD (an operating system), PostgreSQL (a database), and GCluster (a clustering framework), we demonstrate that our adaptive change propagation <b>heuristics</b> show a 57 % statistically significant improvement over the top-performing static change propagation <b>heuristics.</b> 1...|$|R
25|$|In science, Occam's razor {{is used as}} a <b>heuristic</b> {{to guide}} {{scientists}} in developing theoretical models rather than as an arbiter between published models. In physics, parsimony was an important <b>heuristic</b> in Albert Einstein's formulation of special relativity, in the development and application of the principle of least action by Pierre Louis Maupertuis and Leonhard Euler, and in the development of quantum mechanics by Max Planck, Werner Heisenberg and Louis de Broglie.|$|E
25|$|At times, a non-rigorous, {{probabilistic}} approach {{leads to a}} number of <b>heuristic</b> algorithms and open problems, notably Cramér's conjecture.|$|E
25|$|Byers‐Heinlein, K., & Werker, J. F. (2009). Monolingual, bilingual, trilingual: infants' {{language}} experience {{influences the}} development of a word‐learning <b>heuristic.</b> Developmental science, 12(5), 815–823.|$|E
40|$|Abstract. The {{constraint}} satisfaction community {{has developed a}} number of <b>heuristics</b> for variable ordering during backtracking search. For example, in conjunction with algorithms which check forwards, the Fail-First (FF) and Brelaz (Bz) <b>heuristics</b> are cheap to evaluate and are generally consid-ered to be very eective. Recent work to understand phase transitions in NP-complete problem classes enables us to compare such <b>heuristics</b> over a large range of dierent kinds of problems. Furthermore, we {{are now able to}} start to understand the reasons for the success, and therefore also the failure, of <b>heuristics,</b> and to introduce new <b>heuristics</b> which achieve the suc-cesses and avoid the failures. In this paper, we present a comparison of the Bz and FF <b>heuristics</b> in forward checking algorithms applied to randomly-generated binary CSP's. We also introduce new and very general <b>heuristics</b> and present an extensive study of these. These new <b>heuristics</b> are usually as good as or better than Bz and FF, and we identify problem classes where our new <b>heuristics</b> can be orders of magnitude better. The result is a deeper understanding of what helps <b>heuristics</b> to succeed or fail on hard random problems in the context of forward checking, and the identication of promising new <b>heuristics</b> worthy of further investigation. ...|$|R
40|$|In this paper, we adapted and {{expanded}} {{a set of}} guidelines, also known as <b>heuristics,</b> to evaluate the usability of software to now be appropriate for software aimed at children with autism spectrum disorder (ASD). We started from the <b>heuristics</b> developed by Nielsen in 1990 and developed a modified set of 15 <b>heuristics.</b> The first 5 <b>heuristics</b> of this set {{are the same as}} those of the original Nielsen set, the next 5 <b>heuristics</b> are improved versions of Nielsen's, whereas the last 5 <b>heuristics</b> are new. We present two evaluation studies of our new <b>heuristics.</b> In the first, two groups compared Nielsen’s set with the modified set of heu-ristics, with each group evaluating two interactive systems. The Nielsen’s <b>heuristics</b> were assigned to the control group while the experimental group was given the modified set of <b>heuristics,</b> and a statistical analysis was conducted to determine the effectiveness of the modified set, the contribution of 5 new <b>heuristics</b> and the impact of 5 improved <b>heuristics.</b> The results show that the modified set is significantly more effective than the original, and we found {{a significant difference between the}} five improved <b>heuristics</b> and their correspond-ing <b>heuristics</b> in the original set. The five new <b>heuristics</b> are effective in problem identifica-tion using the modified set. The second study was conducted using a system which was developed to ascertain if the modified set was effective at identifying usability problems that could be fixed before the release of software. The post-study analysis revealed that the majority of the usability problems identified by the experts were fixed in the updated version of the system...|$|R
40|$|Many <b>heuristics</b> {{have been}} created to solve the mapping problem. A set of mapping <b>heuristics</b> has been {{integrated}} into a program development system, such that mapping becomes an automatic step of program generation. The system serves {{as a basis for}} development, analysis, and comparison of mapping <b>heuristics</b> as well as as program development tool with selectable mapping <b>heuristics</b> for program configuration. The system is implemented on a flexible transputer based parallel computer, which is able to emulate a large variety of problems for mapping <b>heuristics.</b> Runtime monitoring of configured programs allows a detailed evaluation of mapping <b>heuristics...</b>|$|R
