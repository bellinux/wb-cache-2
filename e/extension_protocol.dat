51|598|Public
25|$|Inspection of BitTorrent control messages: Tracker announces and <b>extension</b> <b>protocol</b> handshakes may {{optionally}} contain client IP address. Analysis of {{collected data}} revealed that 35% and 33% of messages, respectively, contained addresses of clients.|$|E
50|$|XMPP <b>extension</b> <b>protocol</b> XEP-0224 {{calls this}} feature Attention.|$|E
5000|$|Conversations masters the {{following}} XEP's, short for XMPP <b>Extension</b> <b>Protocol,</b> the official {{extensions of the}} XMPP protocol: ...|$|E
40|$|Implementing pairings seems {{easier than}} it {{actually}} is. The aim {{of this research was}} to implement the <b>extension</b> <b>protocols</b> of U-prove, designed by Erik Weitenberg, which contain a pairing. The ambition was to find out {{how difficult it is to}} implement a pairing. Another reason was to determine whether the <b>extension</b> <b>protocols</b> are applicable and not only work on paper. The implementations are executed in Magma. To understand how Magma works basic protocols are implemented. The theory needed for the implementations is explained. Both <b>extension</b> <b>protocols</b> are successfully implemented with the suitable example that is found. The obstacles that need to be overcome, for this single example, show the difficulty of implementing a pairing. ...|$|R
50|$|XEP (XMPP <b>Extension</b> <b>Protocols)</b> are {{standardized}} <b>extensions</b> for XMPP. The full {{details on}} the extensions {{can be found at}} xmpp.org/extensions.|$|R
5000|$|The XMPP Standards Foundation (XSF) {{develops}} and publishes extensions to XMPP {{through a}} standards process centered on XMPP <b>Extension</b> <b>Protocols</b> (XEPs, previously known as Jabber Enhancement Proposals - JEPs). The following extensions are in especially wide use: ...|$|R
50|$|Real-time text {{protocols}} include Text over IP (ToIP) designed around ITU-T T.140, IETF RFC4103, RFC5194, and XMPP <b>Extension</b> <b>Protocol</b> XEP-0301.|$|E
5000|$|... libtorrent was {{the first}} client to support the <b>extension</b> <b>protocol</b> {{together}} with µTorrent, which is now a foundation that many other extensions build upon.|$|E
5000|$|The {{core and}} <b>extension</b> <b>protocol</b> {{descriptions}} are in XML, {{with a program}} written in Python creating the C bindings. (Previous versions used XSLT and M4.) ...|$|E
5000|$|MS-WEBDAVE: Web Distributed Authoring and Versioning Error <b>Extensions</b> <b>Protocol</b> Specification. This SharePoint Front-End Protocol {{describes}} extended {{error codes}} and extended error handling mechanism specified in MS-WDV to enable compliant servers to report error condition details on a server response.|$|R
5000|$|Extensions to BitTorrent such as PEX are {{typically}} implemented {{using one of}} two common <b>extension</b> <b>protocols,</b> AZMP or LTEP. Both types of peer exchange send messages containing a group of peers {{to be added to}} the swarm and a group of peers to be removed.|$|R
5000|$|MIL-STD-3011, Joint Range <b>Extension</b> Application <b>Protocol</b> (JREAP) ...|$|R
50|$|BitComet {{supports}} PEX using {{a proprietary}} protocol in its older versions. Starting with v.1.19 it also added {{support for the}} µTorrent/Mainline implementation of PEX, based on the <b>Extension</b> <b>Protocol.</b>|$|E
50|$|Inspection of BitTorrent control messages: Tracker announces and <b>extension</b> <b>protocol</b> handshakes may {{optionally}} contain client IP address. Analysis of {{collected data}} revealed that 35% and 33% of messages, respectively, contained addresses of clients.|$|E
50|$|In-band {{binary data}} {{transfer}} is limited: Binary data must be first base64 encoded {{before it can}} be transmitted in-band. Therefore, any significant amount of binary data (e.g., file transfers) is best transmitted out-of-band, using in-band messages to coordinate. The best example of this is the Jingle XMPP <b>Extension</b> <b>Protocol,</b> XEP-0166.|$|E
50|$|In 2005, FTSC {{assigned}} the Fidonet Technical Standard (FTS) status to the binkp protocol, and split the specification into four separate documents: Binkp/1.0 Protocol specification (FTS-1026), Binkp/1.0 optional <b>protocol</b> <b>extension</b> CRAM (FTS-1027), Binkp <b>protocol</b> <b>extension</b> Non-reliable Mode (FTS-1028), and Binkp optional <b>protocol</b> <b>extension</b> Dataframe Compression (FTS-1029).|$|R
5000|$|The XMPP Council is the {{technical}} steering group that approves XMPP <b>Extension</b> <b>Protocols,</b> as governed by the XSF Bylaws and XEP-0001. The Council is elected {{by the members of}} the XMPP Standards Foundation each year in September. The eleventh XMPP Council (2013-2014) consists of the following individuals: ...|$|R
5000|$|One of {{the most}} {{important}} outputs of the XSF is a series of [...] "XEPs", or XMPP <b>Extension</b> <b>Protocols,</b> auxiliary protocols defining additional features. Some have chosen to pronounce [...] "XEP" [...] as if it were spelled [...] "JEP", rather than [...] "ZEP", in order to keep with a sense of tradition. Some XEPs of note include: ...|$|R
50|$|The Double Ratchet Algorithm {{that was}} {{introduced}} {{as part of}} the Signal Protocol has also been adopted by other protocols. OMEMO is an XMPP <b>Extension</b> <b>Protocol</b> (XEP) that was introduced in the Conversations messaging app and approved by the XMPP Standards Foundation (XSF) in December 2016 as XEP-0384. Matrix is an open communications protocol that includes Olm, a library that provides for optional end-to-end encryption on a room-by-room basis via a Double Ratchet Algorithm implementation.|$|E
50|$|The {{protocol}} {{was developed and}} first implemented by Andreas Straub as a Google Summer of Code project in 2015. The project's goal was to implement a double-ratchet-based multi-end to multi-end encryption scheme into an Android XMPP-based instant messaging client called Conversations.It was introduced in Conversations and submitted to the XMPP Standards Foundation (XSF) as a proposed XMPP <b>Extension</b> <b>Protocol</b> (XEP) {{in the autumn of}} 2015 and got accepted as XEP-0384 in December 2016.|$|E
50|$|BitComet's chief {{features}} include an embedded Internet Explorer window to let users search for torrents. Along with the features typical of contemporary BitTorrent clients, it supports UPnP gateway configuration, bandwidth scheduling, Webseeding, selecting only certain files for download inside a torrent package, NAT traversal (removed in v.1.03), Peer Exchange (in older versions, using a proprietary protocol and starting with v.1.19 also {{by using the}} <b>Extension</b> <b>Protocol,</b> implementing a PEX mechanism compatible with µTorrent / Mainline PEX), Initial-Seeding (Super-Seeding) and support for Magnet Links.|$|E
5000|$|Send {{links to}} large files with support for {{multiple}} file <b>extensions</b> and <b>protocols</b> ...|$|R
5000|$|STANAG 3011: Joint Range <b>Extension</b> Applications <b>Protocol</b> (JREAP), a Tactical Data Link (TDL) {{protocol}} ...|$|R
5000|$|Joint Range <b>Extension</b> Applications <b>Protocol</b> (JREAP), allows {{transmission}} of M-Series and J-Series messages over long-distance networks.|$|R
50|$|Members of the XSF vote on {{acceptance}} of new members, a technical Council, and a Board of Directors. However, membership {{is not required}} to publish, view, or comment on the standards that it promulgates. The unit of work at the XSF is the XMPP <b>Extension</b> <b>Protocol</b> (XEP); XEP-0001 specifies the process for XEPs to be accepted by the community. Most of the work of the XSF takes place on the XMPP Extension Discussion List and the jdev Chat Room (xmpp:jdev@conference.jabber.org?join).|$|E
5000|$|The current {{version of}} Scratch does not treat {{procedures}} as first class structures and has limited file I/O options with Scratch 2.0 Extension Protocol; an experimental extension feature that allows interaction between Scratch 2.0 and other programs. The <b>Extension</b> <b>protocol</b> allows interfacing with hardware boards such as Lego Mindstorms or Arduino.In addition Scratch 2 only supports one-dimensional arrays, known as [...] "lists". Floating point scalars and strings are supported as of version 1.4, but with limited string manipulation ability. There is a strong contrast between the powerful multimedia functions and multi-threaded programming style and the rather limited scope of the Scratch programming language. On May 6, 2013, Scratch closed for 3 days to update to Scratch 2.0. The update changed {{the look of the}} site and included an online project editor. A new beta version of the Scratch 2 Offline Editor is currently available. This version replaces the old Scratch 2.0.|$|E
40|$|The {{problem of}} {{broadcast}} and Byzantine Agreement {{are of interest}} to both distributed computing and cryptography community. Often these primitives require prohibitive communication and round complexity. Broadcast extensions have been introduced to broadcast long messages {{at the cost of}} small number of broadcasts for bit. The latter are referred to as seed broadcasts. In a setting with n parties and an adversary controlling at most t parties in Byzantine fashion such that t < n, we present a broadcast extension that is simultaneously optimal in terms of communication complexity and round complexity. Specifically, we achieve O 0 (ln) bits of communication complexity for a message of length bits and 0 (n) round complexity. The known broadcast <b>extension</b> <b>protocol</b> in the same setting was only communication optimal. A concrete broadcast <b>extension</b> <b>protocol</b> is obtained when the seed broadcasts are instantiated with broadcast protocols for bit. Our optimal broadcast <b>extension</b> <b>protocol</b> in t < n setting leads to concrete extension protocols that improve the round complexity of existing concrete extension protocols by a factor of Omega(n). We also improve the stateof-the-art round complexity of the communication optimal concrete broadcast <b>extension</b> <b>protocol</b> in t < n/ 2 setting. The result comes as a corollary of a new <b>extension</b> <b>protocol</b> that improves both the round complexity as well as the seed round complexity of the existing extension protocols for t < n/ 2. The seed round complexity is defined as the number of rounds in which a broadcast for bit is invoked...|$|E
40|$|The European Space Agency (ESA) {{recently}} propsed the SpaceWire {{standard for}} reliable satellite on-board networking at high speeds. This paper presents {{the design of}} configurable SpaceWire router and interface hardware macrocells, the first in state-of-the-art compliant with the latest standard <b>extensions,</b> <b>Protocol</b> Identification and Remote Memory Access Protocol. The SpaceWire router with 8 links achieves 100 Mbits/s data-rate with 1. 35 W power consumption and 300 Krad radiation tolerance. These performances {{meet the requirements of}} planned ESA space missions...|$|R
50|$|For use within HTTPS, SPDY {{needs the}} TLS <b>extension</b> Next <b>Protocol</b> Negotiation (NPN), thus browser and server support {{depends on the}} HTTPS library.|$|R
5000|$|JREAP is {{documented}} in U.S. Military Standard (MIL-STD) 3011 and NATO Standardization Agreement (STANAG) 5518, [...] "Interoperability Standard for the Joint Range <b>Extension</b> Applications <b>Protocol</b> (JREAP)." ...|$|R
40|$|Oblivious {{transfer}} (OT) {{is one of}} {{the most}} fundamental primitives in cryptography and is widely used in protocols for secure two-party and multi-party computation. As secure com-putation becomes more practical, the need for practical large scale oblivious transfer protocols is becoming more evident. Oblivious transfer extensions are protocols that enable a relatively small number of “base-OTs ” to be utilized to compute a very large number of OTs at low cost. In the semi-honest setting, Ishai et al. (CRYPTO 2003) presented an OT <b>extension</b> <b>protocol</b> for which the cost of each OT (beyond the base-OTs) is just a few hash function operations. In the malicious setting, Nielsen et al. (CRYPTO 2012) presented an efficient OT <b>extension</b> <b>protocol</b> for the setting of active adversaries, that is secure in the random oracle model. In this work, we present an OT <b>extension</b> <b>protocol</b> for the setting of malicious adversaries that is more efficient and uses less communication than previous works. In addition, our protocol can be proven secure in both the random oracle model, and in the standard model with a type of correlation robustness. Given the importance of OT in many secure computation protocols, increasing the efficiency of OT extensions is another important step forward to making secur...|$|E
30|$|The use of ASAP as sole {{support to}} assign an initial 12  month use period for DP in global CTAs {{to support a}} phase 2 {{clinical}} study. In this case, the Serbia Health Authority requested additional stability data and that the testing and <b>extension</b> <b>protocol</b> align with ICH Q 1 guidelines, but the use period was not questioned.|$|E
40|$|Oblivious {{transfer}} {{is one of}} the most basic and important building blocks in cryptography. As such, understanding its cost is of prime importance. Beaver (STOC 1996) showed that it is possible to obtain poly(n) oblivious transfers given only n actual oblivious transfer calls and using one-way functions, where n is the security parameter. In addition, he showed that it is impossible to extend oblivious transfer information theoretically. The notion of extending oblivious {{transfer is}} important theoretically (to understand the complexity of computing this primitive) and practically (since oblivious transfers can be expensive and thus extending them using only one-way functions is very attractive). Despite its importance, very little is known about the feasibility of extending oblivious transfer, beyond the fact that it is impossible information theoretically. Specifically, it is not known whether or not one-way functions are actually necessary for extending oblivious transfer, whether or not it is possible to extend oblivious transfers with adaptive security, and whether or not it is possible to extend oblivious transfers when starting with just a few. In this paper, we address these questions and provide almost complete answers to all of them. We show that the existence of any oblivious transfer <b>extension</b> <b>protocol</b> with security for static semihonest adversaries implies one-way functions, that an oblivious transfer <b>extension</b> <b>protocol</b> with adaptive security implies oblivious transfer with static security, and that the existence of an oblivious transfer <b>extension</b> <b>protocol</b> from only O(log n) oblivious transfers implies oblivious transfer itself...|$|E
5000|$|The {{content of}} {{received}} short header packets/segments {{will always be}} correct. Although delivery at the long-header trap interface is not guaranteed, a future <b>protocol</b> <b>extension</b> plans to make the delivery of such packets reliable. This <b>protocol</b> <b>extension</b> could be implemented in software {{on top of the}} long-header trap.|$|R
40|$|Bachelor thesis {{explain the}} {{motivation}} behind <b>extension</b> of network <b>protocol</b> HTTP to the secured network protocol HTTPS. Thesis describe and compare protocols, {{which can be}} used for such <b>extension.</b> These <b>protocols</b> are compared and their known vulnerabilities are listed and commented. Results are used for recommendations to WWW servers administrators and to regular web browsers users. Thesis also include practical example of WWW server configuration with enabled secured network protocol HTTPS...|$|R
40|$|This memo defines an Experimental Protocol for the Internet community. It {{does not}} specify an Internet {{standard}} of any kind. Discussion {{and suggestions for}} improvement are requested. Distribution of this memo is unlimited. Copyright Notice Copyright (C) The Internet Society (2001). All Rights Reserved. This document describes how the S/MIME (Secure/Multipurpose Internet Mail <b>Extensions)</b> <b>protocol</b> can be processed and generated {{by a number of}} components of a communication system, such as message transfer agents, guards and gateways to deliver security services. These services are collectively referred to as ’Domain Security Services’...|$|R
