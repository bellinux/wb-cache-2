3|215|Public
5000|$|Numerical variables, {{including}} [...] - [...] and [...] (theta). These allow real {{numbers or}} complex numbers (implemented as pairs of reals) {{to be stored}} in floating point <b>format.</b> <b>Values</b> may range from 1E-99 to 1E99 with up to ten digits of accuracy. The limit of 27 variables, however, may be expanded {{through the use of}} lists, matrices, and manipulation of integer notation. A list or matrix can be used to contain unique real variables which can be individually referenced. Integers can be concatenated into a single real variable by delineating them as the integer and decimal halves of a real number; each half is then accessed independently via the iPart and fPart commands. Variables with binary values can be stored as a single integer through conversion between base 2 and base 10.|$|E
40|$|PROC TABULATE is a {{procedure}} in SAS ® {{that is used}} to create a table of statistical data. Multi-label formats can easily help create otherwise difficult subtotals in a PROC TABULATE table. In the PROC FORMAT procedure, you can create <b>format</b> <b>values</b> based on multiple values of the variable being formatted. When you define a multi-label format, you can then use the format with PROC TABULATE to provide subtotals for your data. This paper will illustrate situations where a subtotal is needed in a report. It will demonstrate how to use multi-label formats with PROC FORMAT and PROC TABULATE to create tables with subtotals in Base SAS ® 9. 2 in a Z/OS environment...|$|E
40|$|The {{identification}} of outliers in formatted datasets {{is a critical}} data quality issue, particular in the data review process. Having a long history, it culminated by Ronald Fehd establishing a set of powerful macros for performing range and logic checks on datasets and the writing of file exceptions to edit and use for updates. As {{a necessary condition for}} this approach, the existence of a properly written data dictionary containing the other=INVALID option for all <b>format</b> <b>values</b> is required. In practice, however, often one has to work with the formats that do not have the required structure, and, for various reasons, it is difficult to transform them in the form required. As a supplement to the established approach, we have created a macro that handles situations where the presence of the other=INVALID option is not obligatory in character, numeric regular and multi-label value formats. As an output of this macro, we obtain a table with the identifier(s), variable name, variable format, and an unformatted value, which can be used for future analysis...|$|E
5000|$|... cprintf - <b>Formats</b> <b>values</b> {{and writes}} them {{directly}} to the console.|$|R
5000|$|... (Except for the <b>format</b> <b>value</b> in {{the first}} nibble, this is {{identical}} to the plain text PIN field of format 0.) ...|$|R
5000|$|Format: Describes {{the layout}} of the {{resource}} data in memory. For example, D3DFMT_R8G8B8 <b>format</b> <b>value</b> means a 24 bits colour depth (8 bits for red, 8 bits for green and 8 bits for blue).|$|R
5000|$|... {{the ability}} to perform filter {{matching}} on the parts of XML <b>format</b> attribute <b>values.</b>|$|R
40|$|Sometimes it is useful, {{within a}} DATA step, to inspect and utilize a variable’s <b>formatted</b> <b>value.</b> In earlier {{versions}} of SAS ® software, this was clumsy. Version 9 introduces the VVALUE function, which makes the process simpler. The related VVALUEX function makes the operation data-driven (rather than code-driven) and thus {{makes it possible to}} reference data by name at execution time...|$|R
30|$|The data {{dictionaries}} provide mappings from keys (e. g. name) {{to values}} (e. g. World). Both, keys and values are strings {{and it is}} on the application using CTemplate to provide well <b>formatted</b> <b>values</b> to be inserted. Furthermore, on the one hand not all dictionary values must be used {{and on the other hand}} not all markers must exist in a dictionary during expanding. In such cases, the values resp. markers are being ignored by CTemplate. For more details on CTemplate, please refer to (Silverstein).|$|R
30|$|Object_wsan_sensors: It is used {{to manage}} sensors. It has one {{additional}} bag called Sensors which associates the id of a sensor to its latest measured <b>value,</b> in the <b>format</b> (id, <b>value).</b>|$|R
50|$|This <b>format</b> is <b>valued</b> for two reasons. First, {{readers can}} leave the story at any point and {{understand}} it, {{even if they do}} not have all the details. Second, it conducts readers through the details of the story.|$|R
50|$|Import (CSV): Specifies {{whether the}} product {{supports}} import {{data from a}} comma-separated <b>values</b> <b>formatted</b> file.|$|R
40|$|Data cleansing, or {{as it is}} more euphemistically known: data review, often {{occupies}} {{too much}} of a programmer’s time and energy. With a properly written data dictionary, a data set will contain appropriate formats for each variable; one can then cut and paste the format definitions into PROC <b>Format</b> <b>value</b> statements and label all outliers with the value statement option: other = "Invalid". This routine combines a format catalogue and the contents of a data set, then uses that information to write data steps which select all outliers. Reports are written, by identifier, for print review and to file, for later use as an %include for updating purposes. Expected audience is intermediate and advanced programmers and macro users...|$|R
40|$|This paper uses SAS ® 9. 1 data STEP syntax and the VVALUEX {{function}} to list unexpected data by obtaining the <b>formatted</b> <b>value</b> of every data point. Without explicit reference to variable names, a data STEP using VVALUEX iterates through all variable values in a data set and outputs each unexpected value, {{as defined by}} the format assigned to each variable, to a new data set. Each metadata record is identifiable by an observation number and variable name from the original data set. A view is used to join the table with additional metadata obtained from the COLUMNS table of DICTIONARY in order to create an informative source for reporting unexpected values...|$|R
5000|$|Date {{and time}} are stored as a {{floating}} point value. The whole number part {{is a number}} of days from the Jan 1 1900 (if the O record contains theV0 directive, specifying 1900 {{as the starting point}} for calculations), the fraction is the number of seconds divided by 86400 (60*60*24, number of seconds in a day). Conversion to unix time can be done by subtracting the difference between Jan 1 1970 and Jan 1 1900 (25,569 days) and then multiplying by 86400; converting from unix time to SYLK datetime is done by dividing the value by 86400 and then adding 25569. The cell style has to be set to some date <b>formatting</b> <b>value,</b> e.g. [...] to be displayed properly.|$|R
5000|$|Damodar Mall is an Indian {{retail sector}} professional. He is Chief Executive Officer of Reliance Retail Ltd. (<b>Value</b> <b>Format)</b> ...|$|R
5000|$|In 1955 {{four large}} <b>format</b> high <b>values</b> - Castles - {{designed}} by L. Lamb were introduced. These {{were the first}} true British pictorials - previous designs, for example the 1953 Coronation issue, had all featured symbolic designs - and showed the Wilding head plus a castle. The four were: ...|$|R
40|$|My {{notes from}} the June 19 - 20 SRP working group include {{substantial}} changes requested to the description of data buffer descriptors. However I can find no mention of these in the official minutes of that meeting (01 - 195). Since the minutes do spell out much more trivial changes, I hesitate to include these changes without approval. Revision 0 of this document is the affected portions of SRP with change bars from SRP revision 07. Revision 1 of this document incorporates changes from the July 19 - 20 SRP working group, including the changes described by 01 - 227 r 1 (SRP Buffer Descriptor Formats). Revision 2 of this document incorporates changes from the August 21 SRP teleconference. 5. 4. 2 Data buffer descriptors 5. 4. 2. 1 Overview An SRP_CMD request (see 6. 8) may contain a data-out buffer descriptor, a data-in buffer descriptor, both or neither, depending upon the data transfer(s) requested by the SCSI command. The format of each data buffer descriptor is specified by a <b>format</b> code <b>value.</b> Some data buffer descriptor <b>format</b> code <b>values</b> use {{the contents of a}} count field to further specify the data buffer descriptor format. Table 2 defines data buffer descriptor <b>format</b> code <b>values.</b> Table 2 - Data buffer descriptor formats Data buffer descriptor format cod...|$|R
5000|$|Binary {{values are}} stored in big endian <b>format,</b> e.g. the <b>value</b> 1 is X'0001' for a 16-bit value, and X'00000001' for a 32-bit value.|$|R
50|$|Socrata {{offers a}} free account for users to upload {{datasets}} in comma-separated <b>values</b> <b>format.</b> Users can download a dataset or access data via API.|$|R
50|$|Note {{also that}} while bytecodes are {{nominally}} machine-independent, the <b>format</b> and <b>value</b> of the pointers in threads generally {{depend on the}} target machine which is executing the interpreter. Thus, an interpreter might load a portable bytecode program, decode the bytecodes to generate platform-dependent threaded code, then execute threaded code without further reference to the bytecodes.|$|R
2500|$|... so the DOF {{ratio is}} in inverse {{proportion}} to the format size. This ratio is approximate, and breaks down in the macro range of the larger <b>format</b> (the <b>value</b> of [...] in the numerator is no longer negligible) or as distance approaches the hyperfocal distance for the smaller format (the DOF of the smaller format approaches infinity).|$|R
5000|$|In {{the case}} of floppy disks, both high- and {{low-level}} formatting are customarily performed in one pass by the disk formatting software. 8-inch floppies typically came low-level formatted and were filled with a <b>format</b> filler <b>value</b> of [...] Since the 1990s, most 5.25-inch and 3.5-inch floppies have been shipped pre-formatted from the factory as DOS FAT12 floppies.|$|R
5000|$|The NRG {{file format}} uses a {{variation}} of the Interchange File Format (IFF) and stores data in a chain of [...] "chunks". All integer values are stored unsigned in big endian byte order. Version 1 NRG <b>format</b> stores <b>values</b> as 32-bit integers. Nero Burning ROM v5.5 introduced a new NRG file format, version 2, with support for 64-bit integers.|$|R
5000|$|... so the DOF {{ratio is}} in inverse {{proportion}} to the format size. This ratio is approximate, and breaks down in the macro range of the larger <b>format</b> (the <b>value</b> of [...] in the numerator is no longer negligible) or as distance approaches the hyperfocal distance for the smaller format (the DOF of the smaller format approaches infinity).|$|R
40|$|In SAS®, when a {{classification}} variable {{is used to}} group observations with the same <b>values</b> and a <b>formatted</b> <b>value</b> is used for grouping data, unexpected results may {{come out of the}} procedure. If {{there is more than one}} unformatted value used for several distinct categorizations but with the same format label, SAS uses the unformatted lowest value to create the output. Understanding the behavior of SAS when storing the unformatted values will help avoid potential mistakes in using formats and nested classification variables. This paper examines two scenarios when a variable for both ethnicity and race is used in PROC TABULATE to create an output data set: (1) with, and (2) without the use of a format. CREATING AN ETHNICITY AND RACE TABLE Suppose a demographic table showing the frequency counts for ethnicity and race is needed where the race classification is nested within ethnicity as shown in Table 1...|$|R
25|$|A file has event routines. e.g. on {{logical file}} end, on {{physical}} file end, on page end, on line end, on <b>format</b> end, on <b>value</b> error, on char error.|$|R
50|$|Note that a 0 signifies a white pixel, and a 1 signifies a black pixel. This is in {{contrast}} to the other <b>formats,</b> where higher <b>values</b> signify brighter pixels.|$|R
5000|$|Since IEEE 754 binary32 <b>format</b> {{requires}} real <b>values</b> to {{be represented}} in [...] format (see Normalized number, Denormalized number), 1100.011 is shifted to the right by 3 digits to become ...|$|R
50|$|The {{different}} frame types {{have different}} <b>formats</b> and MTU <b>values,</b> but can coexist {{on the same}} physical medium. Differentiation between frame types is possible based on the table on the right.|$|R
3000|$|Upon {{acquisition}} of data, we exported data for each walk to comma-separated <b>value</b> <b>format</b> and imported {{this information to}} a mathematical computation program. The walk data contained a matrix with time, [...]...|$|R
50|$|Any {{programming}} language that has input/output and string processing functionality {{is able to}} read and write CSV files. Here is a list of individual {{programming language}} support for the comma-separated <b>values</b> <b>format.</b>|$|R
5000|$|The Transportation coils {{series is}} a set of {{definitive}} stamps issued by the United States Postal Service between 1981 and 1995. Officially dubbed the [...] "Transportation Issue" [...] or [...] "Transportation Series", they have come to be called the [...] "transportation coils" [...] because all of the denominations were issued in coil stamp <b>format.</b> All <b>values</b> except three were printed by the Bureau of Engraving and Printing.|$|R
40|$|Although ODS Tables, {{combined}} with the ODS TRACE and ODS Output statements, provide a consistent method for retrieving statistics generated by SAS ® Procedures, the design of these tables is inconsistent. Many of the ODS Output data sets created with ODS Tables revolve around statistics describing one specific variable or groups of variables. We commonly use only {{a subset of the}} data found in a SAS Listing when reporting or continuing an analysis. Each of these data sets could be streamlined to contain these values plus additional descriptive information concerning these variables of interest [...] such as the variable name, <b>value,</b> label, and <b>formatted</b> <b>value.</b> This paper proposes a consistent data structure for these data sets that better facilitates reporting and analysis. It demonstrates a method to translate the data in the ODS Tables into this format. After showing how to design data sets with this common convention, this paper demonstrates how to (1) automate their creation and (2) combine the summarized data from multiple ODS Tables within a procedure or between different procedures...|$|R
5000|$|Format 3 is {{the same}} as format 0, except that the [...] "fill" [...] digits are random values from 10 to 15, and the first nibble (which {{identifies}} the block <b>format)</b> has the <b>value</b> 3.|$|R
5000|$|Also in 2008 was {{conducted}} emission marks the twelfth standard issue ("flowers", [...] "book" [...] <b>format)</b> with face <b>value</b> 20, 30, 50, 100, 500 rubles, and the denomination of the lettered (A, B and H) 8.|$|R
