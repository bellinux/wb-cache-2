195|680|Public
5000|$|Enterprise <b>Entity</b> (<b>type</b> 3): is {{the result}} of the {{operation}} of <b>entity</b> <b>type</b> 2. It uses methodologies (<b>entity</b> <b>type</b> 5) and the operational system provided by <b>entity</b> <b>type</b> 2 to define, design, implement and build the products (services) of the enterprise (type 4 entity).|$|E
5000|$|Enterprise Engineering/Integration <b>Entity</b> (<b>type</b> 2): {{provides}} {{the means to}} carry out the enterprise <b>entity</b> <b>type</b> 1. It employs methodologies (type 5 entity) to define, design, implement and build the operation of the enterprise <b>entity</b> (<b>type</b> 3 entity).|$|E
5000|$|Methodology <b>Entity</b> (<b>type</b> 5): {{represents}} the methodology {{to be employed}} in any enterprise <b>entity</b> <b>type.</b>|$|E
40|$|This paper {{describes}} the syntax and semantics of the specification language for associative chaining. The language allows the specification of <b>entity</b> <b>types</b> for association generation, the specification of conjunctions and disjunctions of <b>entity</b> <b>types,</b> initial values, fixed constraints, and weights upon <b>entity</b> <b>types.</b> A short example {{is presented to}} illustrate {{the use of the}} language and how it may be used to generate different video sequences from a common database of video components...|$|R
50|$|Data <b>entity</b> <b>types</b> are logical data {{structures}} that contains information meaningful to the user. In MarkII method {{there is only}} one <b>type</b> of data <b>entity</b> <b>types</b> - Objects. Objects must be correctly identified so they can be counted.|$|R
5000|$|<b>Entity</b> <b>Types</b> {{form the}} class of objects {{entities}} conform to, with the Entities being instances of the <b>entity</b> <b>types.</b> <b>Entities</b> represent individual objects that form {{a part of the}} problem being solved by the application and are indexed by a key. For example, converting the physical schema described above, we will have two entity types: ...|$|R
5000|$|Product <b>Entity</b> (<b>type</b> 4): is {{the result}} of the {{operation}} of <b>entity</b> <b>type</b> 3. It represents all products (services) of the enterprise.|$|E
50|$|In Relational Database Design, in {{some cases}} the {{existence}} of one kind of relationship type precludes the existence of another. Entities within an <b>entity</b> <b>type</b> A may be related by a relationship type R to an entity in <b>entity</b> <b>type</b> B or <b>entity</b> <b>type</b> C but not both. The relationship types are said to be mutually exclusive. Usually both relationship types will have the same name.|$|E
50|$|All entity {{instances}} {{are housed}} in EntityContainers, which are per-project containers for entities. Each project has one or more named EntityContainers, which can reference entities across multiple namespaces and entity types. Multiple instances of one <b>entity</b> <b>type</b> {{can be stored in}} collections called EntitySets. One <b>entity</b> <b>type</b> can have multiple EntitySets.|$|E
50|$|An {{entity-relationship}} model (ER model) describes inter-related things {{of interest in}} a specific domain of knowledge. An ER model is composed of <b>entity</b> <b>types</b> (which classify the things of interest) and specifies relationships that can exist between instances of those <b>entity</b> <b>types.</b>|$|R
50|$|Identifies <b>entity</b> <b>types</b> {{to be used}} in {{enterprise}} {{engineering and}} enterprise integration. Adopting a recursive view of integration altogether five <b>entity</b> <b>types</b> with their associated life-cycles can be identified. The recursiveness of the first four <b>entity</b> <b>types</b> can be demonstrated by identifying the role of the different entities, their products and the relations between them. Figure 3: GERA Enterprise Entity Concept, shows the GERA life cycle phases of enterprise entities. A total of 9 life cycle phases has been defined.|$|R
50|$|For {{software}} vendors delivering {{applications to}} be deployed in a SA Forum cluster, the Software Management Framework also defines an XML schema for the <b>entity</b> <b>types</b> file, which describes the software <b>entity</b> <b>types</b> implemented by the application. This information is used {{to come up with}} appropriate deployment configurations.|$|R
5000|$|Entity numbers combine <b>entity</b> <b>type</b> and entity {{location}} {{within their}} description table.|$|E
5000|$|Entities** are {{instances}} of EntityTypes; {{they represent the}} individual {{instances of}} the objects (such as customer, orders) to which the information pertains. The identity of an entity {{is defined by the}} <b>entity</b> <b>type</b> it is an instance of; in that sense an <b>entity</b> <b>type</b> defines the class an entity belongs to and also defines what properties an entity will have. Properties describe some aspect of the entity by giving it a name and a type. The properties of an <b>entity</b> <b>type</b> in ADO.NET Entity Framework are fully typed, and are fully compatible with the type system used in a DBMS system, as well as the Common Type System of the [...]NET Framework. A property can be SimpleType, or ComplexType, and can be multi-valued as well. All EntityTypes belong to some namespace, and have an EntityKey property that uniquely identifies each instance of the <b>entity</b> <b>type.</b> The different property types are distinguished as follows: ...|$|E
5000|$|Strategic Enterprise Management <b>Entity</b> (<b>type</b> 1): {{defines the}} {{necessity}} and the starting of any enterprise engineering effort.|$|E
50|$|Within {{the field}} of {{software}} engineering and data modeling an information model is usually an abstract, formal representation of <b>entity</b> <b>types</b> that may include their properties, relationships and the operations that can be performed on them. The <b>entity</b> <b>types</b> in the model may be kinds of real-world objects, such as devices in a network, or occurrences, or they may themselves be abstract, such as for the entities used in a billing system. Typically, {{they are used to}} model a constrained domain that can be described by a closed set of <b>entity</b> <b>types,</b> properties, relationships and operations.|$|R
40|$|It is {{proposed}} that the EXPRESS data definition language, {{which is part of}} the ISO STEP/PDES standard for engineering data exchange, should be used in the formulation of standard <b>entity</b> <b>types</b> to be usedin computer aided control engineering. Examples of how EXPRESS can be used to define <b>entity</b> <b>types</b> suitable for representing linear and nonlinear models are given...|$|R
5000|$|Check for <b>entity</b> <b>types</b> {{that should}} be combined, and note any {{arithmetic}} derivations ...|$|R
5000|$|<b>Entity</b> <b>type</b> {{lifecycle}} analysis: {{describes the}} significant business changes to entities and confirm that processes have been modelled to effect these changes ...|$|E
50|$|A {{hierarchical}} database {{model is}} a data model in which the data is organized into a tree-like structure. The data is stored as records which are connected to one another through links. A record {{is a collection of}} fields, with each field containing only one value. The <b>entity</b> <b>type</b> of a record defines which fields the record contains. A record in the hierarchical database model corresponds to a row (or tuple) in the relational database model and an <b>entity</b> <b>type</b> corresponds to a table (or relation).|$|E
5000|$|Consequently, entity number {{does not}} include the <b>entity</b> <b>type.</b> For example, holding {{register}} #40010 in Modbus will be holding register #9, located at address 9 in JBUS.|$|E
5000|$|... #Subtitle level 3: Operated lines {{owned by}} other <b>entities</b> (<b>Type</b> II Railway Business) ...|$|R
5000|$|... #Subtitle level 3: Owned lines {{operated}} by other <b>entities</b> (<b>Type</b> III Railway Business) ...|$|R
50|$|An Information {{model is}} not a type of data model, but more or less an {{alternative}} model. Within the field of software engineering both a data model and an information model can be abstract, formal representations of <b>entity</b> <b>types</b> that includes their properties, relationships and the operations that can be performed on them. The <b>entity</b> <b>types</b> in the model may be kinds of real-world objects, such as devices in a network, or they may themselves be abstract, such as for the entities used in a billing system. Typically, {{they are used to}} model a constrained domain that can be described by a closed set of <b>entity</b> <b>types,</b> properties, relationships and operations.|$|R
5000|$|Average {{investors and}} {{corporations}} face {{a variety of}} risks due to the inability of mortgage holders to pay. These vary by legal entity. Some general exposures by <b>entity</b> <b>type</b> include: ...|$|E
5000|$|Design tools, such as Mapping Designer, {{are also}} {{included}} with ADO.NET Entity Framework, which simplifies {{the job of}} mapping a conceptual schema to the relational schema and specifying which properties of an <b>entity</b> <b>type</b> correspond to which table in the database.|$|E
50|$|Enterprise-engineering methodologies should orient {{themselves}} on the life-cycle concept identified in GERA and should support the different life cycle phases shown in Figure 2. The enterprise integration process itself is usually directed towards the enterprise <b>entity</b> <b>type</b> 3 (see above) operation and carried out as an enterprise engineering task by an enterprise <b>entity</b> <b>type</b> 2 (Figures 2 and 4). The integration task may start at any relevant engineering phase (indicated in Figure 6: Enterprise Engineering and the Life-Cycle Concept.) of the entity life cycle and may employ any of those phases. Therefore, the processes relating to the different phases of enterprise engineering should be independent of each other to support different sequences of engineering tasks.|$|E
30|$|The Vocabulary module defines <b>entity</b> <b>types</b> of a template, {{through the}} <component>, <interface> and <relation> elements.|$|R
50|$|Certain {{hierarchies}} of named <b>entity</b> <b>types</b> {{have been}} proposed in the literature. BBN categories, proposed in 2002, is used for Question Answering and consists of 29 types and 64 subtypes. Sekine's extended hierarchy, proposed in 2002, is made of 200 subtypes. More recently, in 2011 Ritter used a hierarchy based on common Freebase <b>entity</b> <b>types</b> in ground-breaking experiments on NER over social media text.|$|R
30|$|As {{previously}} exemplified, template authors {{can establish}} {{constraints on the}} use of <b>entity</b> <b>types</b> they define in padding documents.|$|R
50|$|<b>Entity</b> <b>type</b> Y is a subtype (subclass) of an <b>entity</b> <b>type</b> X if {{and only}} if every Y is {{necessarily}} an X. A subclass entity inherits all attributes and relationships of its superclass entity. This property is called the attribute and relationship inheritance. A subclass entity may have its own specific attributes and relationships (together with all the attributes and relationships it inherits from the superclass). Most common superclass examples is a vehicle with subclasses of Car and Truck. There are a number of common attributes between a car and a truck, which would be part of the Superclass, while the attributes specific to a car or a truck (such as max payload, truck type...) would make up two subclasses.|$|E
5000|$|The same fact, however, {{could also}} {{be viewed as an}} entity. Viewing a {{relationship}} as an entity, one can say that the entity reifies the relationship. This is called reification of a relationship. Like any other entity, it must be an instance of an <b>entity</b> <b>type.</b> In the present example, the <b>entity</b> <b>type</b> has been named [...] For each instance of '''', there is one and only one instance of '''', and vice versa. Now, it becomes possible to add more information to the original relationship. As an example, we can express the fact that [...] "person p1 was nominated to be the member of committee c1 by person p2". Reified relationship '''' can be used as the source of a new relationship ''''.|$|E
5000|$|UML {{provides}} an association class construct for defining reified relationship types. The association class {{is a single}} model element that is both a kind of association {{and a kind of}} a class. The association and the <b>entity</b> <b>type</b> that reifies are both the same model element. Note that attributes cannot be reified.|$|E
5000|$|... #Subtitle level 3: Count the Input Data Element <b>Types,</b> the Data <b>entity</b> <b>Types</b> Referenced, and the Output Data Element Types ...|$|R
40|$|Abstract. We {{review the}} {{definition}} of <b>entity</b> <b>types</b> derived by symbolgenerating rules. These types appear frequently in conceptual schemas. However, up to now they have received very little attention {{in the field of}} conceptual modeling of information systems. Most conceptual modeling languages, like the UML and ORM, do not allow their formal definition. In this paper, we propose a new method for {{the definition of}} <b>entity</b> <b>types</b> derived by symbol-generating rules. Our method is {{based on the fact that}} these types can always be expressed as the result of the reification of a derived relationship type. Many languages, like the UML and ORM, allow defining derived relationship types and, at the same time, provide support for reification. Using our method, these languages can directly deal with those derived <b>entity</b> <b>types.</b> 1...|$|R
5000|$|A {{generic data}} model shall consist of generic <b>entity</b> <b>types,</b> such as 'individual thing', 'class', 'relationship', and {{possibly}} a number of their subtypes.|$|R
