320|695|Public
25|$|The meta element has two uses: {{either to}} emulate {{the use of an}} HTTP {{response}} header field, or to embed additional metadata within the <b>HTML</b> <b>document.</b>|$|E
25|$|Any kind of dash {{can be used}} {{directly}} in an <b>HTML</b> <b>document,</b> but HTML also lets them be entered using character references. The em dash and the en dash are special in {{that they can be}} written using character entity references as &mdash; and &ndash;, respectively.|$|E
25|$|Contextual output encoding/escaping {{could be}} used as the primary defense {{mechanism}} to stop XSS attacks. There are several escaping schemes that can be used depending on where the untrusted string needs to be placed within an <b>HTML</b> <b>document</b> including HTML entity encoding, JavaScript escaping, CSS escaping, and URL (or percent) encoding. Most web applications that do not need to accept rich data can use escaping to largely eliminate the risk of XSS attacks in a fairly straightforward manner.|$|E
40|$|Semantic Web {{documents}} use metadata {{to express}} {{the meaning of the}} content encapsulated within them. Although RDF/XML has been widely recognized as the standard vehicle for describing metadata, an enormous amount of semantic data is still being encoded in <b>HTML</b> <b>documents</b> that are designed primarily for human consumption. Tools such as those pioneered by SHOE[6] and OntoBroker[5] facilitate manual annotation of <b>HTML</b> <b>documents</b> with semantic markups. In this demo we will present SEAN, a system for automatically annotating <b>HTML</b> <b>documents.</b> It is {{based on the idea that}} well-organized <b>HTML</b> <b>documents,</b> especially those that are machine generated from templates, contain rich data denoting semantic concepts (e. g. “News Taxonomy” and “Major Headline News”) and concept instances. These kinds of documents are increasingly common nowadays since most Web sites (e. g., news portals, product portals, etc.) are typically maintained using content management software that creates <b>HTML</b> <b>documents</b> by populating templates from backen...|$|R
5000|$|Live-updating {{preview of}} {{rendered}} <b>HTML</b> <b>documents</b> using WebKit ...|$|R
40|$|The {{amount of}} online {{information}} written in different natural languages {{and the number}} of non-English speak-ing Internet users have been increasing tremendously dur-ing the past decade. In order to provide high-performance access of multilingual information on the Internet, we have developed a data analysis and querying system (DatAQs) that (i) analyzes, identifies, and categorizes languages used in <b>HTML</b> <b>documents,</b> (ii) extracts information from <b>HTML</b> <b>documents</b> of interest written in different languages, (iii) allows the user to submit queries for retrieving extracted information in the same natural language provided by the query engine of DatAQs using a menu-driven user inter-face, and (iv) processes the user’s queries (as Boolean ex-pressions) to generate the results. DatAQs extracts infor-mation from <b>HTML</b> <b>documents</b> that belong to various data-rich, narrow-in-breadth application domains, such as car ads, house rentals, job ads, stocks, university catalogs, etc. The average F-measure on identifying <b>HTML</b> <b>documents</b> written in a particular natural language correctly is 89 %, whereas the F-measure on categorizing <b>HTML</b> <b>documents</b> belonged to the car-ads application domain is 94 %. ...|$|R
25|$|A {{controller}} is a server-side {{component of}} Rails that responds to external requests from the web server to the application, by determining which view file to render. The controller {{may also have}} to query one or more models for information and pass these on to the view. For example, in an airline reservation system, a controller implementing a flight-search function would need to query a model representing individual flights to find flights matching the search, and might also need to query models representing airports and airlines to find related secondary data. The controller might then pass some subset of the flight data to the corresponding view, which would contain a mixture of static HTML and logic that use the flight data to create an <b>HTML</b> <b>document</b> containing a table with one row per flight. A controller may provide one or more actions. In Ruby on Rails, an action is typically a basic unit that describes {{how to respond to}} a specific external web-browser request. Also, note that the controller/action will be accessible for external web requests only if a corresponding route is mapped to it. Rails encourages developers to use RESTful routes, which include actions such as create, new, edit, update, destroy, show, and index. These mappings of incoming requests/routes to controller actions can be easily set up in the routes.rb configuration file.|$|E
500|$|An {{optional}} fragment, {{separated from}} the preceding part by a hash (#). The fragment contains a fragment identifier providing direction to a secondary resource, such as a section heading in an article identified by {{the remainder of the}} URI. When the primary resource is an <b>HTML</b> <b>document,</b> the fragment is often an id attribute of a specific element, and web browsers will scroll this element into view./> ...|$|E
2500|$|... at Project Gutenberg (downloadable collections, {{including}} searchable ASCII {{text and}} book as complete <b>html</b> <b>document</b> with images) ...|$|E
40|$|Although RDF/XML {{has been}} widely {{recognized}} as the standard vehicle for representing semantic information on the Web, {{an enormous amount of}} semantic data is still being encoded in <b>HTML</b> <b>documents</b> that are designed primarily for human consumption and not directly amenable to machine processing. This paper seeks to bridge this semantic gap by addressing the fundamental problem of automatically annotating <b>HTML</b> <b>documents</b> with semantic labels. Exploiting a key observation that semantically related items exhibit consistency in presentation style as well as spatial locality in template-based content-rich <b>HTML</b> <b>documents,</b> we have developed a novel framework for automatically partitioning such documents into semantic structures. Our framework tightly couples structural analysis of documents with semantic analysis incorporating domain ontologies and lexical databases such as WordNet. We present experimental evidence of the eectiveness of our techniques on a large collection of <b>HTML</b> <b>documents</b> from various news portals...|$|R
40|$|Enormous {{amount of}} {{semantic}} data {{is still being}} encoded in <b>HTML</b> <b>documents.</b> Identifying and annotating the semantic concepts implicit in such documents makes them directly amenable for Semantic Web processing. In this paper we describe a highly automated technique for annotating <b>HTML</b> <b>documents,</b> especially template-based content-rich documents, containing many different semantic concepts per document. Starting with a (small) seed of hand-labeled instances of semantic concepts {{in a set of}} <b>HTML</b> <b>documents</b> we bootstrap an annotation process that automatically identifies unlabeled concept instances present in other documents. The bootstrapping technique exploits the observation that semantically related items in content-rich documents exhibit consistency in presentation style and spatial locality to learn a statistical model for accurately identifying different semantic concepts in <b>HTML</b> <b>documents</b> drawn from a variety of Web sources. We also present experimental results on the effectiveness of the technique. ...|$|R
50|$|Multimedia {{features}} including images, applets, video clips, {{and other}} <b>HTML</b> <b>documents.</b>|$|R
2500|$|Internet Explorer {{versions}} 6 and onward are {{not affected}} by the bug if the page contains certain <b>HTML</b> <b>document</b> type declarations. These versions maintain the buggy behavior when in quirks mode for reasons of backward compatibility. For example, quirks mode is triggered: ...|$|E
2500|$|The {{most common}} {{destination}} anchor is a URL {{used in the}} World Wide Web. This can refer to a document, e.g. a webpage, or other resource, or to a position in a webpage. The latter is achieved {{by means of an}} HTML element with a [...] "name" [...] or [...] "id" [...] attribute at that position of the <b>HTML</b> <b>document.</b> The URL of the position is the URL of the webpage with a fragment identifier — [...] "#id attribute" [...] — appended.|$|E
2500|$|... 7 October 2010 {{marked the}} release of Chromium 8.0, {{seven and a half}} weeks after that of Chromium 7. The initial release in this series was version 8.0.549.0. The {{development}} of Chromium 8.0 focused on improved integration into Chrome OS and improved cloud features. These include background web applications, host remoting (allowing users centrally to control features and settings on other computers) and cloud printing. On 12 January 2011 versions of Chrome and Chromium prior to version 8.0.552.237 were identified by US-CERT as [...] "contain multiple memory corruption vulnerabilities. These vulnerabilities include a stack corruption vulnerability in the PDF renderer component, two memory corruption vulnerabilities in the Vorbis decoder and a video frame size error resulting in a bad memory access... By convincing a user to view a specially crafted <b>HTML</b> <b>document,</b> PDF file, or video file, an attacker can cause the application to crash or possibly execute arbitrary code." [...] This vulnerability was publicized after Chrome version 8.0.552.237 was released fixing these problems, to alert users to upgrade versions as soon as possible.|$|E
40|$|Abstract. A draft {{standard}} for HTML, HTML 5, includes the detailed specification of the parsing algorithm for <b>HTML</b> 5 <b>documents,</b> including error handling. In this paper, we develop a reachability analyzer for the parsing specification of HTML 5 and automatically generate <b>HTML</b> <b>documents</b> to test compatibilities of Web browsers. The set of <b>HTML</b> <b>documents</b> are extracted using our reachability {{analysis of the}} statements in the specification. This analysis {{is based on a}} translation of the specification to a conditional pushdown system and on a new algorithm for the reachability analysis of conditional pushdown systems. In our preliminary experiments, we generated 353 <b>HTML</b> <b>documents</b> automatically from a subset of the specification and found several compatibility problems by supplying them to Web browsers. ...|$|R
40|$|Most {{documents}} available {{over the}} web {{conform to the}} <b>HTML</b> specification. Such <b>documents</b> are hierarchically structured in nature. The existing data models for the web either fail to capture the hierarchical structure within the documents or can only provide a very low level representation of such hierarchical structure. How to represent and query <b>HTML</b> <b>documents</b> {{at a higher level}} is an important issue. In this paper, we first propose a novel conceptual model for HTML. This conceptual model has only a few simple constructs but is able to represent the complex hierarchical structure within <b>HTML</b> <b>documents</b> at a level that is close to human conceptualization/visualization of the documents. We also describe how to convert <b>HTML</b> <b>documents</b> based on this conceptual model. Using the conceptual model and conversion method, one can capture the essence (i. e., semistructure) of <b>HTML</b> <b>documents</b> in a natural and simple way. Based on this conceptual model, we then present a rule-based language to query <b>HTML</b> <b>documents</b> over the Internet. This language provides a simple but very powerful way to query both intra-document structures and inter-document structures and allows the query results to be restructured. Being rule-based, it naturally supports negation and recursion and therefore is more expressive than SQL-based languages. A logical semantics is also provided...|$|R
5000|$|Generate PDF / RTF / <b>HTML</b> <b>documents</b> {{from any}} news {{including}} aggregations ...|$|R
50|$|An <b>HTML</b> <b>document</b> is a {{sequence}} of Unicode characters. More specifically, HTML 4.0 documents are required to consist of characters in the <b>HTML</b> <b>document</b> character set : a character repertoire wherein each character is assigned a unique, non-negative integer code point. This set is defined in the HTML 4.0 DTD, which also establishes the syntax (allowable sequences of characters) that can produce a valid <b>HTML</b> <b>document.</b> The <b>HTML</b> <b>document</b> character set for HTML 4.0 consists of most, but not all, of the characters jointly defined by Unicode and ISO/IEC 10646: the Universal Character Set (UCS).|$|E
5000|$|... a {{scripting}} language {{that can be}} accessed from an <b>HTML</b> <b>document,</b> such that an <b>HTML</b> <b>document</b> can embed highly interactive scripts/applets. This {{can be seen as}} the precursor to JavaScript and embedded objects.|$|E
50|$|The Ample {{web page}} is an <b>HTML</b> <b>document</b> with decorations. To use the Ample {{framework}} you {{would include the}} runtime library in the head section of the <b>HTML</b> <b>document</b> and in addition the library for one or more GUI languages.|$|E
40|$|Template-driven <b>HTML</b> <b>documents</b> posses an implicit, fixed schema {{denoting}} {{concepts and}} their relationships in a hierarchical fashion. Discovering this schema remains a relatively unexplored problem. By exploiting a key observation that semantically related items in <b>HTML</b> <b>documents</b> exhibit spatial locality, we develop an algorithm for automatically partitioning them into tree-like semantic structures which expose the implicit schema. ...|$|R
40|$|Abstract. Although RDF/XML {{has been}} widely {{recognized}} as the standard vehicle for representing semantic information on the Web, {{an enormous amount of}} semantic data is still being encoded in <b>HTML</b> <b>documents</b> that are designed primarily for human consumption and not directly amenable to machine processing. This paper seeks to bridge this semantic gap by addressing the fundamental problem of automatically annotating <b>HTML</b> <b>documents</b> with semantic labels. Exploiting a key observation that semantically related items exhibit consistency in presentation style as well as spatial locality in template-based content-rich <b>HTML</b> <b>documents,</b> we have developed a novel framework for automatically partitioning such documents into semantic structures. Our framework tightly couples structural analysis of documents with semantic analysis incorporating domain ontologies and lexical databases such as WordNet. We present experimental evidence of the effectiveness of our techniques on a large collection of <b>HTML</b> <b>documents</b> from various news portals. ...|$|R
5000|$|IBM WebSphere Portal 6.0.1+ can preview {{texts from}} ODG files as <b>HTML</b> <b>documents.</b>|$|R
5000|$|HTML {{sanitization}} is {{the process}} of examining an <b>HTML</b> <b>document</b> and producing a new <b>HTML</b> <b>document</b> that preserves only whatever tags are designated [...] "safe" [...] and desired. HTML sanitization can be used to protect against cross-site scripting (XSS) attacks by sanitizing any HTML code submitted by a user.|$|E
50|$|Container for the {{displayable}} {{content of}} an <b>HTML</b> <b>document.</b>|$|E
50|$|Container for {{processing}} information and metadata for an <b>HTML</b> <b>document.</b>|$|E
50|$|Not all web browsers or email clients used by {{receivers}} of <b>HTML</b> <b>documents,</b> or text editors used by {{authors of}} <b>HTML</b> <b>documents,</b> {{will be able}} to render all HTML characters. Most modern software is able to display most or all of the characters for the user's language, and will draw a box or other clear indicator for characters they cannot render.|$|R
50|$|The {{built-in}} XML parser can be reconfigured {{to parse}} certain <b>HTML</b> <b>documents</b> or plain text content.|$|R
40|$|WWWTranscribe is a {{transcription}} {{system based}} on the WWW. It is platform independent and allows network access to speech databases. Its modular structure make it flexible, and it connects easily to existing signal processing applications or database management systems. WWWTranscribe consists of static <b>HTML</b> <b>documents</b> containing forms. To these forms CGI applications are attached that perform data processing and that dynamically create subsequent <b>HTML</b> <b>documents...</b>|$|R
5000|$|Script code can {{be written}} {{directly}} in the <b>HTML</b> <b>document</b> inside: ...|$|E
50|$|The HTML element delimits the {{beginning}} and the end of an <b>HTML</b> <b>document.</b>|$|E
50|$|The {{techniques}} above can be freely {{mixed and}} embedded in any <b>HTML</b> <b>document.</b>|$|E
5000|$|... jsoup is an {{open-source}} Java {{library of}} methods designed to extract and manipulate data stored in <b>HTML</b> <b>documents.</b>|$|R
40|$|This paper {{proposes a}} novel method of {{building}} polarity-tagged corpus from <b>HTML</b> <b>documents.</b> The characteristics of this method {{is that it is}} fully automatic and can be applied to arbitrary <b>HTML</b> <b>documents.</b> The idea behind our method is to utilize certain layout structures and linguistic pattern. By using them, we can automatically extract such sentences that express opinion. In our experiment, the method could construct a corpus consisting of 126, 610 sentences. ...|$|R
40|$|Purpose. This paper {{describes}} and {{evaluates the}} tool DigiDoc MetaEdit {{which allows the}} semi-automatic indexing of <b>HTML</b> <b>documents.</b> The tool works by identifying and suggesting keywords from a thesaurus according to the embedded information in <b>HTML</b> <b>documents.</b> This enables the parameterization of keyword assignment based on how frequently the terms appear in the document, the relevance of their position, and the combination of both. Design/methodology/approach. In order to evaluate {{the efficiency of the}} indexing tool, the descriptors/keywords suggested by the indexing tool are compared to the keywords which have been indexed manually by human experts. To make this comparison a corpus of <b>HTML</b> <b>documents</b> are randomly selected from a journal devoted to Library and Information Science. Findings. The results of the evaluation show that there: (1) is close to a 50...|$|R
