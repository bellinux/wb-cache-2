3|284|Public
50|$|John Dyer was a Trowbridge-born {{inventor}} and engineer {{whose most}} important invention was the rotary <b>fulling</b> <b>machine</b> in 1833. A {{version of the}} machine, developed for the local woollen industry, is still in use today.|$|E
5000|$|In Peru {{and other}} Latin American countries, the Huacatay leaves are crushed using a <b>fulling</b> <b>machine,</b> {{a tool of}} stone {{that serves as a}} {{traditional}} blender that substitutes for this device. In effect, this achieves a less fine ground, but allows greater absorption of flavor. Currently, the Huacatay cream is a sauce that is only used in the preparation of chicken parties or barbecues; because it is a tradition and the locals still participate in their traditions. Although this is often just [...] "a perception" [...] because many housewives prepare this cream any day of the year.|$|E
50|$|Rare Machinery {{tells the}} story of woollen cloth {{production}} in Trowbridge from its domestic beginnings through to the mechanisation of the process. As well as a complete Spinning Jenny, the Museum displays also include a <b>Fulling</b> <b>machine</b> which was patented by Trowbridge engineer, John Dyer, in 1833. It was such a technically accomplished design that the machine remained unchanged and was still in use in the 20th century. A fine teazle gig, which was used to raise the nap of the cloth, can also be seen. The machine contains numerous handles of teazles (this was the name for the frames into which the teazles were fixed) which were dried out in Handle Houses. These were buildings constructed with perforated brickwork to allow air to circulate to dry the teazles out ready for re-use. Trowbridge is unique in still having a Handle House; this faces Studley Mill, one of the many mill buildings that remain in the town.|$|E
5000|$|TPOT is a Python library that {{automatically}} creates and optimizes <b>full</b> <b>machine</b> learning pipelines using genetic programming.|$|R
5000|$|Mill-Turn add-on—Includes <b>full</b> <b>machine</b> {{simulation}} and {{the ability}} to synchronize multiple code streams including pinch/balance turning. Requires Mill 3D or Mill Lathe, and a [...]machine file.|$|R
5000|$|... #Caption: [...] K&M Kiwi Shoe Polish canning <b>machine,</b> <b>full</b> tins from <b>machine</b> 1972 ...|$|R
30|$|Many LCLS {{experiments}} have hit rates close to 100 %, i.e., most pulses produce useful events. This is {{fundamentally different from}} most HEP experiments where the rate of a specific physics process {{is limited by the}} cross section of that process. This implies that the LCLS DAQ system had to be designed to handle the <b>full</b> <b>machine</b> rate.|$|R
50|$|During {{expression}} evaluation, {{and in both}} languages, a {{boolean value}} may be internally stored as a single bit, a single byte, a <b>full</b> <b>machine</b> word, {{a position in the}} generated code, or as a condition code in a status register, depending on machine, compiler, and situation; these factors are usually more important than the language compiled.|$|R
40|$|The Veterans Administration (VA) uses {{information}} technology and performance measures to improve quality and efficiency. The VA stores all patient data electronically. Manual quality assessment audits are performed every three months. They are time consuming and expensive. Automated reviews would be more efficient. But the patient records are neither sufficiently coded nor structured to allow for <b>full</b> <b>machine</b> interpretability...|$|R
5000|$|Big Monster Toys {{is located}} at 21 S. Racine, in the West Loop of Chicago. The studio {{occupies}} roughly 18000 sq ft of space for over 25 designers. Their facilities include an audio recording studio, a <b>full</b> <b>machine</b> shop, plastic molding, electronic design, software programming, 3D printing, a paint shop, and a digital video authorship and editing facility.|$|R
5000|$|Despite {{the simple}} formula for the {{probability}} density function, numerical probability calculations for the inverse Gaussian distribution nevertheless require special care to achieve <b>full</b> <b>machine</b> accuracy in {{floating point arithmetic}} for all parameter values. [...] Functions for the inverse Gaussian distribution are provided for the R programming language by the statmod package, available from the Comprehensive R Archive Network (CRAN).|$|R
40|$|Day by day the {{application}} of thread milling process is enhancing in industry because of its inherent advantages over other thread cutting techniques. The current study dwells on the interference issue, which is generated during thread milling. It was observed {{that there are two}} sources of interference on the thread produced i. e interference induced during mill penetration and during <b>full</b> <b>machining.</b> This interference leads to an overcut on the thread, thus it produces dimensionally inaccurate thread. The interference produced by penetration is much more as compared to interference generated during <b>full</b> <b>machining</b> of thread. Thus, there is a pressing need to analyze interference during penetration. So this study evaluates different applied penetration strategies and the level of interference produced. Further, the study suggests modified penetration strategies {{in order to reduce the}} interference produced and hence create more accurate thread. This investigation is supported by analytical modeling and experimental exploration. Postdoc financé par Conseil Régional de Bourgogone Collaboration avec l'entreprise WALTER PROTOTY...|$|R
40|$|AbstractThis paper {{describes}} {{the implementation of}} rational approximation algorithms for evaluation of kth roots in short wordlength machines. The emphasis is on maintaining <b>full</b> <b>machine</b> precision in computers that use fixed point, truncated binary arithmetic with at most 16 bits of wordlength. Included is a table of coefficients for evaluation of kth roots on a 16 bit machine with 3 ≤ k ≤ 11...|$|R
5000|$|The goal of SCI, {{and other}} {{contemporary}} projects, was {{nothing less than}} <b>full</b> <b>machine</b> intelligence. [...] "The machine envisioned by SC", according to Alex Roland and Philip Shiman, [...] "would run ten billion instructions per second to see, hear, speak, and think like a human. The degree of integration required would rival that achieved by the human brain, the most complex instrument known to man." ...|$|R
25|$|He made {{designs for}} mills, <b>fulling</b> <b>machines</b> and engines {{that could be}} driven by water-power... In {{addition}} he used to make models and plans showing how to excavate and tunnel through mountains without difficulty, so as to pass from one level to another; and he demonstrated how to lift and draw great weights by means of levers, hoists and winches, and ways of cleansing harbours and using pumps to suck up water from great depths.|$|R
40|$|THE PROBLEM OF DYNAMIC OVERVOLTAGES IS APPROACHED USING A <b>FULL</b> <b>MACHINE</b> MODEL AND LUMPED PARAMETERS LINE IN PHASE COORDINATES. IT IS SHOWN HOW IMPLICIT INTEGRATION SEQUENCES IMPLEMENTED IN A SUBSTITUTION MODE CAN BE APPLIED IN THIS AREA. RESULTS OF ANALYTICAL STUDIES ARE PRESENTED AND THE ADVANTAGES AND DISADVANTAGES OF SUCH AN APPROACH FOR THE DIFFERENT SPECTRUM ARE DISCUSSED. THE ACCURACY OF THE MODEL IS THUS JUDGED, SOME REFINEMENTS MADE AND SUGGESTIONS FOR A BETTER PREDICTION ARE GIVEN. ...|$|R
50|$|Told {{through the}} {{perspective}} of the antagonist, Full Frontal. In this arc, the player will be piloting <b>Full's</b> personal <b>machine,</b> the MSN-06S Sinanju.|$|R
40|$|This paper {{supports}} {{the claim that}} there is no discernible advantage in choosing factorised implementations (over non–factorised implementations) of BFGS methods when approximate Hessian information is available to <b>full</b> <b>machine</b> precision. However the results presented in this paper show that a factorisation strategy has clear advantages when approximate Hessian information is available only to limited precision. These results show that a conjugate directions factorisation outperforms the other methods considered in this paper (including Cholesky factorisation) for both BFGS and DFP formulae...|$|R
40|$|First-principles {{simulations}} of high-Z metallic systems using the Qbox code on the BlueGene/L supercomputer demonstrate unprecedented performance and scaling for a quantum simulation code. Specifically {{designed to take}} advantage of massivelyparallel systems like BlueGene/L, Qbox demonstrates excellent parallel efficiency and peak performance. A sustained peak performance of 207. 3 TFlop/s was measured on 65, 536 nodes, corresponding to 56. 5 % of the theoretical <b>full</b> <b>machine</b> peak using all 128 k CPUs. Categories and Subject Descriptors J. 2 [Physical Sciences and Engineering]: – Chemistry, Physics...|$|R
40|$|AbstractThis {{paper is}} a {{continuation}} of a study of numerical software for evaluating elementary functions in a microcomputer environment. Here we describe three algorithms for evaluation of the exponential function that are based on rationals, polynomials and coarse table look-up, respectively. Focus is on the design of fast algorithms that preserve <b>full</b> <b>machine</b> precision in small scale machines which use truncated binary fixed point arithmetic with at most a sixteen-bit wordlength. Included in the paper is a comparison of the performance of these algorithms implemented in two contemporary microcomputers...|$|R
5000|$|WiLL <b>Full</b> {{automatic}} washing <b>machine</b> with drying function (WiLL Laundry) ...|$|R
50|$|The above {{description}} of a <b>full</b> <b>machine</b> {{can be viewed as}} a large deterministic automaton. Now, it is left to define the Muller acceptance condition. In this large automaton, we define μn to be the set of states in which the green light flashes and the red light does not flash corresponding to nth Aβ* machine. Let νn be the set of states in which the red light does not flash corresponding to nth Aβ* machine. So, Muller acceptance condition F = { S | ∃n μn ⊆ S ⊆ νn }. This finishes the construction of the desired Muller automaton. Q.E.D.|$|R
5000|$|Various {{types of}} {{equipment}} such as coffee <b>machines</b> (<b>full</b> list here).|$|R
50|$|The Supply {{department}} is given {{an annual budget}} of 18 million dollars, and is required to catalog warehouses <b>full</b> uniforms, <b>machine</b> parts and equipment most of these warehouses have over 9000 parts each.|$|R
50|$|For {{a digital}} {{processor}} implemented in hardware, binary compatibility means that (a large subset of) machine code produced for another processor can be correctly executed and has (much) {{the same effect}} as on the other processor. This is quite common among many processor families, although it is rather uncommon among the ubiquitous small embedded systems built around such processors. <b>Full</b> <b>machine</b> code compatibility would here imply exactly the same layout of interrupt service routines, I/O-ports, hardware registers, counter/timers, external interfaces and so on. For a more complex embedded system using more abstraction layers (sometimes on the border to a general computer, such as a mobile phone), this may be different.|$|R
40|$|Narrow {{values that}} can be {{represented}} by less number of bits than the <b>full</b> <b>machine</b> width occur very frequently in programs. On the other hand, clustering mechanisms enable cost- and performance-effective scaling of processor back-end features. Those attributes can be combined synergistically to design special clusters operating on narrow values (a. k. a. Helper Cluster), potentially providing performance benefits. We complement a 32 -bit monolithic processor with a low-complexity 8 -bit Helper Cluster. Then, in our main focus, we propose various ideas to select suitable instructions to execute in the data-width based clusters. We add data-width information as another instruction steering decision metric and introduce new data-widt...|$|R
40|$|Performance {{estimation}} of computer systems {{is an important}} topic to {{a large number of}} people in the computer industry. Computer architects need to be able to study future machines, compiler writers need to be able to evaluate the compiler output before a machine exists, and developers need insight into the machine's performance in order to tune their code. There are many performance estimation techniques that range from profile -based approaches to <b>full</b> <b>machine</b> simulation. Detailed simulation is one of the most common methods for estimating performance. It suffers, however, from potentially long run times when simulating large applications using detailed processor models. This thesi...|$|R
40|$|In {{this paper}} we present an SMT-based {{approach}} to Question Answering (QA). QA {{is the task}} of extracting exact answers in response to natural language questions. In our approach, {{the answer is a}} translation of the question obtained with an SMT system. We use the n-best translations of a given question to find similar sentences in the document collection that contain the real answer. Although it {{is not the first time}} that SMT inspires a QA system, it is the first approach that uses a <b>full</b> <b>Machine</b> Translation system for generating answers. Our approach is validated with the datasets of the TREC QA evaluation. ...|$|R
40|$|The University of Maryland {{participated in}} the topic {{tracking}} task, submitting four runs for the required condition (four English training stories). This paper presents those results, along with additional contrastive runs. Comparisons are presented between different translation selection strategies, retention and removal of Mandarin stopwords, one-pass translation and post-translation document expansion, and source-dependent and source-independent normalization. Source-dependent normalization {{was found to be}} helpful, even for the monolingual English case. Two translingual techniques also yielded substantial improvements: posttranslation document expansion and top-two translation selection. Both outperformed the baseline Systran <b>full</b> <b>machine</b> translations, demonstrating the potential for developing effective and easily implemented word-for-word techniques for other languages...|$|R
40|$|The complex {{resistive}} {{wall impedance}} generates a non-uniform transverse focussing along a bunch train. The effect was first computed by V. Balbekov [1] for the UNK machine. The {{origin of the}} effect is discussed and then quantified for bunch trains in the CERN SPS and future LHC. Then the transverse resistive wall instability of bunch trains is examined and compared with the well known case of the uniformly filled machine. It is shown that {{the frequency of the}} most unstable mode is centred around the inverse of the length of the bunch train with a growth rate that is larger than the one expected from linear extrapolation of a <b>full</b> <b>machine.</b> ...|$|R
40|$|Some {{claim that}} {{updating}} approximate Hessian information via the bfgs formula with a Cholesky factorisation oers greater numeri-cal stability {{than the more}} straightforward approach of performing the update directly. Others claim that no such advantage exists and that any such improvement is probably due to early implementations of the dfp formula in conjunction with low accuracy line searches. We nd no discernible advantage in choosing factorised implementations (over non-factorised implementations) of bfgs methods when approximate Hessian information is available to <b>full</b> <b>machine</b> precision. However, the type of implementation may have signicant eects when approx-imate Hessian information is only available to limited precision. Fur-thermore, a conjugate directions factorisation outperforms the othe...|$|R
50|$|Originally Texas Instruments made a {{commitment}} to build the Processing Elements (PEs) out of large scale integrated (LSI) circuits. Several years into the project, TI backed out and said that they could not produce the LSI chips at the contracted price. This required a complete redesign using medium scale integrated circuits, in place of LSI. This increased the size of the chips on the CUs from about 1 in square to about 6 x 10 in. The resulting system grew in size to accommodate the larger CUs, leaving too little room for the <b>full</b> <b>machine,</b> and the system was scaled back to only a single quadrant.|$|R
25|$|<b>Full</b> autonomy. The <b>machine</b> {{will create}} and {{complete}} all its tasks without human interaction.|$|R
40|$|AbstractFor a {{function}} f(x) that is smooth on the interval x∈[a,b] but otherwise arbitrary, the real-valued roots on the interval {{can always be}} found by the following two-part procedure. First, expand f(x) as a Chebyshev polynomial series on the interval and truncate for sufficiently large N. Second, find the zeros of the truncated Chebyshev series. The roots of an arbitrary polynomial of degree N, when written {{in the form of}} a truncated Chebyshev series, are the eigenvalues of an N×N matrix whose elements are simple, explicit functions of the coefficients of the Chebyshev series. This matrix is a generalization of the Frobenius companion matrix. We show by experimenting with random polynomials, Wilkinson's notoriously ill-conditioned polynomial, and polynomials with high-order roots that the Chebyshev companion matrix method is remarkably accurate for finding zeros on the target interval, yielding roots close to <b>full</b> <b>machine</b> precision. We also show that it is easy and cheap to apply Newton's iteration directly to the Chebyshev series so as to refine the roots to <b>full</b> <b>machine</b> precision, using the companion matrix eigenvalues as the starting point. Lastly, we derive a couple of theorems. The first shows that simple roots are stable under small perturbations of magnitude ε to a Chebyshev coefficient: the shift in the root x* is bounded by ε/df/dx(x*) +O(ε 2) for sufficiently small ε. Second, we show that polynomials with definite parity (only even or only odd powers of x) can be solved by a companion matrix whose size is one less than the number of nonzero coefficients, a vast cost-saving...|$|R
50|$|The <b>full</b> TIFRAC <b>machine</b> was {{in use in}} {{the early}} 1960s (until 1965). It was started in 1957 and {{commissioned}} in February 1960. It included 2,700 vacuum tubes, 1,700 germanium diodes and 12,500 resistors. It had 2,048 40-bit words of memory.|$|R
40|$|AbstractThis {{paper is}} {{concerned}} with the numerical development of some minimax trigonometric approximations to the positive zeros of the nth Legendre polynomial Pn(x). One of the approximation formulas we derive yields at least 4. 2 significant decimal digits of accuracy for any n ⩾ 2, and can be used to furnish initial guesses in an iterative method for the computation of the zeros of Pn(x) to nearly <b>full</b> <b>machine</b> accuracy. This approach avoids some of the computational complexity associated with the selection of appropriate initial guesses for use in a special 5 th order scheme previously developed by the first author for the numerical computation of the abscissas required in the n-point Gauss-Legendre quadrature rule...|$|R
