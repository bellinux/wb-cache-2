19|339|Public
50|$|A period {{can be used}} {{in place}} of the <b>END</b> <b>statement.</b>|$|E
50|$|The <b>END</b> <b>statement</b> is {{optional}} {{in a program}} of this level of simplicity.|$|E
5000|$|Here {{the only}} {{essential}} one required {{is the last}} line i.e., the <b>end</b> <b>statement.</b> Pspice produces its default output consisting of: ...|$|E
50|$|Scala {{does not}} require semicolons to <b>end</b> <b>statements.</b>|$|R
5000|$|In {{addition}} to accruing the tax, FIN 48 requires disclosures in footnotes {{to the financial}} <b>statements.</b> Year <b>end</b> <b>statements</b> must include: ...|$|R
5000|$|The series' {{tag line}} for {{marketing}} (which {{is also the}} <b>ending</b> <b>statement</b> to the in-game video at the loading of Empire Earth) is: ...|$|R
50|$|The final {{statement}} in a CIF file is the <b>END</b> <b>statement</b> (or the letter E).It takes no parameters and typically {{does not include}} a semicolon.|$|E
5000|$|As with C, {{the used}} by {{itself can be}} used as a null statement. In fact, due to the {{specification}} of the language, in a BEGIN / END block, the semicolon is optional before the <b>END</b> <b>statement,</b> thus a semicolon used there is superfluous.|$|E
50|$|A Pantalk script {{does not}} have any header or script name and does not require the Return or <b>End</b> <b>statement</b> {{at the end of a}} procedure. Many {{statements}} must end with a semi colon, but depending on certain API areas, not always. There are two types of script, the panel script(also called dependent script) and the independent script.|$|E
5000|$|The [...]END {{statement}} {{forming the}} last line. Additional <b>end</b> <b>statements</b> may also appear within the file to separate multiple simulations {{each of which}} must also have a title line.|$|R
50|$|Non line {{oriented}} programming languages utilize {{a logical}} <b>statement</b> <b>end,</b> or an <b>end</b> of <b>statement</b> marker, {{such as a}} semicolon or dot symbol to mark the line end.|$|R
50|$|Mortran (More Fortran) is an {{extension}} of the Fortran programming language used for scientific computation. It introduces syntax changes, including the use of semicolons to <b>end</b> <b>statements,</b> in order to improve readability and flexibility. Mortran code is macro-processed into Fortran code for compilation.|$|R
5000|$|Any {{reference}} {{to an internal}} or module subprogram is through an interface that is 'explicit' (that is, the compiler {{can see all the}} details). A {{reference to}} an external (or dummy) procedure is usually 'implicit' (the compiler assumes the details). However, we can provide an explicit interface in this case too. It is a copy of the header, specifications and <b>END</b> <b>statement</b> of the procedure concerned, either placed in a module or inserted directly: ...|$|E
5000|$|The BEGIN SEQUENCE {{structure}} {{allows for}} a well behaved abortion of any sequence, even when crossing nested procedures/functions. This means that a called procedure/function, may issue a BREAK statement, or a Break (...) expression, to force unfolding of any nested procedure/functions, {{all the way back}} to the first outer BEGIN SEQUENCE structure, either after its respective <b>END</b> <b>statement,</b> or a RECOVER clause if present. The Break statement may optionally pass any type of expression, which may be accepted by the RECOVER statement to allow further recovery handing.|$|E
5000|$|In January 2014, Bombardier Inc. cut 1,700 {{employees}} from Bombardier Aerospace to save costs {{due to a}} 19 percent drop in orders in 2013. In July the same year, Bombardier reorganized its corporate structure in response to its underperformance. President Guy Hachey retired and Bombardier Aerospace was split into three divisions: business aircraft; commercial aircraft and aerostructures; and engineering services. As part of the corporate overhaul, 1,800 jobs were cut. In its 2014-year <b>end</b> <b>statement,</b> Bombardier Aerospace reported that it had {{reduced the number of}} employees by 3,700 over the year; delivered 290 aircraft and had orders for 282 more; and also claimed [...] "strong long-term potential".|$|E
50|$|In October 1982 Claussen-Finks made film {{recordings}} on his {{own initiative}} in the hfg building when former members came together 14 years after its forced <b>ending.</b> <b>Statements</b> captured in the film, and his own experience, inspired Claussen-Finks for a future school following the hfg, a school focused on students interests and their activities, surrounded by inspiring information environment.|$|R
5000|$|... a [...] {{statement}} typically {{follows a}} [...] <b>statement</b> to <b>end</b> said <b>statement.</b> Wells ...|$|R
5000|$|De Keersmaeker {{stressed}} {{that she was}} not angry, and <b>ended</b> her <b>statement</b> by saying: ...|$|R
5000|$|Line 1 The ARUN command executes {{every time}} the {{computer}} is switched on and jumps to line 10.Line 5 This is the REMARK statement (used to include remarks into the source code).Line 10 The INPUT command asks for input from the user and stores the values in the variable [...] "P".Line 20 The PRINT command shows the calculated result as follows: 100 114 142.5. The abbreviated form is a special for the PC-1500, as it can only make use of single letter variables and matrixes. This also saves valuable storage space!Line 30 The GOTO command lets the programme jump back to line 10, to continue the program overLine 40 The <b>END</b> <b>statement</b> is {{to be placed on}} the last line of the code to terminate execution, however in this cas it can be omitted, as it is not really necessary.|$|E
5000|$|The program's {{executable}} {{object code}} and data would {{be stored in}} TXT records. Calls to other subroutines, functions or COMMON blocks are resolved through RLD records, which modify the address as stored in a TXT record to determine the complete address of the subroutine or function. Optionally, a language can provide symbolic reference information such as object names and data type information or debugging symbols through SYM records, and then the <b>END</b> <b>statement</b> indicates {{the end of an}} Object module file and the optional start address for the subroutine, function or program that this file should be started at,if the starting address for the routine is not the first byte of the first routine (some routines may have non-executable data preceding their actual code or the first routine assembled or compiled is not the [...] "main" [...] program or [...] "primary" [...] module.) As has been reported, some people discovered because of the way older assemblers worked (circa 1968-1975), a program compiled faster if you put data [...] "above" [...] a program before the code for the program, once the assembler started to notice instructions, it was much slower, so, programmers would write routines where they put the data and constants first, then included code for the program. When assembling a program could take 30 minutes to an hour instead of a few seconds as now, this was a big difference.|$|E
50|$|OCL {{statements}} {{begin with}} two slashes and a space. Here's {{an example of}} a short procedure stored on a System/36 as PROC1:** Procedure PROC1** ** Written by Joe User 2006-05-29**** // * 'PROC1 procedure is running'// * ' '// IFF ACTIVE-'PROC2,PROC3' GOTO OKAY** IFF means 'if false'** ACTIVE-'nnn,nnn2' means {{at least one of the}} listed programs is currently running** GOTO xxx means skip to the statement that says TAG xxx and resume processing// PAUSE ' Cannot continue because other Payroll is running'// CANCEL stops execution of this procedure// TAG OKAY// IFF DATAF1-PFILE1 IFF DATAF1-PFILE2 GOTO NODELT// * ' Caution, Pay Data Exists' displays info on CRT// * ' '// * ' Press 1 to continue and DELETE existing files'// IFF '1'=?1R? CANCEL A parameter is indicated by question marks surrounding a number** Using 1R between question marks indicates that the parameter is required and processing** waits for user input. CANCEL means immediately go to end of job.// LOAD $DELET $DELET is used to delete files// RUN// IF DATAF1-PFILE1 SCRATCH UNIT-F1,LABEL-PFILE1 deletes a disk file// IF DATAF1-PFILE2 SCRATCH UNIT-F1,LABEL-PFILE2// END END returns control from a system program// LOAD PR101 PR101 is the sample RPG program// FILE NAME-PAYMAST,DISP-SHR PAYMAST is the payroll master file// FILE NAME-PFILE1,DISP-NEW,RECORDS-100,EXTEND-100 A new file PFILE1 is created** 100 records are assigned to PFILE1 - if full, the system tries to extend it by another 100** each time it fills.// RUN** It's not necessary or valid to put an <b>END</b> <b>statement</b> after most user programs// SWITCH 1XXXXXXX Causes U1 to be SETON in the RPG program// LOCAL OFFSET-1,DATA-'PROC1' Places PROC1 in the Local Data Area// LOCAL OFFSET-101,DATA-'?USER?' Substitutes the operator's User ID ** LDA becomes the external data structure (UDS) in an RPG program// LOAD PR102// FILE NAME-PAYMAST,DISP-SHR DISP-SHR means the file is shared** Other programs can use PAYMAST at the same time// FILE NAME-PFILE,LABEL-PFILE1** NAME/LABEL is used when the RPG disk file and the actual disk file names are different.// RUN// RETURN Return means go to end-of-jobIn this short procedure, a number of OCL statements and procedure control expressions (PCE) are used. Comments are represented by an asterisk in column 1, or can be placed after the end of a statement.|$|E
50|$|It is {{a common}} {{misunderstanding}} that in Policy Governance the board's job is to decide the goals and the chief executive officer's job to determine the means to achieve the board's ends. Both board and CEO decide goals (Ends) and means, but the board's written policies explicitly state where the CEO's room for interpretation of the boards' <b>Ends</b> <b>statements</b> begins.|$|R
5000|$|Formal {{writing has}} a larger amount of foreign loanwords, {{especially}} Pali and Sanskrit terms, much as Latin and Greek have influenced European languages. For politeness, pronouns (and more formal pronouns) are used, plus <b>ending</b> <b>statements</b> with [...] (dǣ [...] ) or [...] (dœ̄ [...] ). Negative statements are made more polite by ending with [...] (dǭk [...] ). The following are formal register examples.|$|R
5000|$|... 係佢嘅呀! hai6 keoi2 ge3 aa3 [...] "It's his!"(呀 aa3 is a {{particle}} used to <b>end</b> affirmative <b>statements)</b> ...|$|R
40|$|Citation/Reference) Gumuchian,(Citation/Reference) Osborne Coll.,(Citation/Reference) Jordan, P. D. Mary Belson Elliott. Bull. of NYPL 1935,(Citation/Reference) NUC pre- 1956,Added {{engraved}} presentation {{leaf and}} added engraved publisher's ad counted as plates. Publisher's advertisements [1] p. at end and added engraved plate at <b>end.</b> (<b>Statement</b> of Responsibility) by Mary Belson...|$|E
40|$|Spine {{and cover}} title: Robinson Crusoe. Series from cover. Variant of NUC Pre- 1956, 0118481. "The {{original}} text, slightly shortened, has been adhered to. [...] . The drawings are from an eminent German pencil [...] . " [...] Biographical notice, p. viii. Publishers' catalog at <b>end.</b> (<b>Statement</b> of Responsibility) illustrated with {{one hundred and}} ten wood engravings...|$|E
40|$|Bachelor thesis {{focuses on}} {{choosing}} 3 D printer suitable for home use. This printer will be optimalized to achieve satisfactory results of printed parts. Necessary changes of software and machine design {{will be done}} on printer and further changes will be suggested. In the <b>end</b> <b>statement</b> will be made, if print optimalization and changes are necessary...|$|E
5000|$|The {{evidence}} particlethis {{occurs at}} the <b>end</b> of <b>statements</b> and indicates the trustworthiness of the statement. They are: ...|$|R
50|$|The {{language}} {{itself has}} {{the appearance of}} ALGOL or Pascal, with BEGIN and <b>END</b> <b>statements.</b> However, its semantics are far more like C. It does not permit indefinite levels of procedure nesting, it does not pass complex structured arguments by value, {{and it does not}} strictly type most variable references. Programming techniques are much like C using pointers to structures, occasional overlays, deliberate string handling and casts when appropriate.|$|R
6000|$|Perhaps you think, {{to serve}} my <b>ends,</b> These <b>statements</b> I refute, When I admit that these dear friends Were parties to a suit? ...|$|R
40|$|Language) Greek text; Latin {{translation}} and notes. Signatures: - 2 3 A- 2 L a-z Aa. Title {{in red and}} black; printer's device of man standing under vine entwined elm tree with the motto: Non solus. Head- and tail-pieces; initials. "Jeremiae Hoelzlini commentarivs et notae" has half title and separate pagination. Errata on leaves Aa 7 v and Aa 8 r, at <b>end.</b> (<b>Statement</b> of Responsibility) Ab Jeremia Hoelzlino in latinum conversi; commentario & notis illustrati, emaculati; scholiis ad carmina numerato additis concinnati : commentarius in verborum & rerum indicem contractus...|$|E
40|$|The Automatic Patching Verification program (APV) is {{described}} which provides the hybrid computer programmer with a convenient method of performing a static {{check of the}} analog portion of his study. The static check insures that the program is patched as specified, and that the computing components being used are operating correctly. The APV language the programmer uses to specify his conditions and interconnections {{is similar to the}} FORTRAN language in syntax. The APV control program reads APV source program statements from an assigned input device. Each source program statement is processed immediately after it is read. A statement may select an analog console, set an analog mode, set a potentiometer or DAC, or read from the analog console and perform a test. Statements are read and processed sequentially. If an error condition is detected, an output occurs on an assigned output device. When an <b>end</b> <b>statement</b> is read, the test is terminated...|$|E
40|$|DESKToe cALCULAToRS is {{provided}} by a new, self-contained, rack-mounted unit. By adding 17 times the programmable memory to the Model 9100 A, and 8 times the programmable memory to the Model 91008, this Model 910 lA Extended Memory, Fig. 1, geatly extends the range of their problem solving abilities. The calculators are still the controlling and calculating elements of the system; the extended memory is operated by Format (FMT) commands from the calculators. It has a 20, 832 bit memory capable of storing up to 3472 program steps, or 248 fourteen-digit registers for data storage. When used with other peripherals, the Model 91014 becomes the main data and program storage unit. With appropriate interface cards in the Model 25704 Coupler, 1 the calculators are able to feed data to, or accept inputs from teleprinters and other equipment. To simplify programming, register addressing and program selection are in decimal numbers rather than binary, octal or hexadecimal systems. The programmer need not be concerned with internal addressing. He needs only to remember corresponding program numbers and their functions. Address information important to the programmer is displayed when programs are transferred. Diagnostic codes are shown whenever there is a program error related to the 9101 A operation. Basic Features The HP 9101, { extended memory is divided into 248 fourteen-digit registers (ten digits displayed, two digits overrange, and two digits exponent). The registers of the 91014 ' are numbered decimally from 0 through 247, and are always addressed from the 9100 A/B X-register. Programs stored in the 9 101 A are transferred from the 9100,{/ 8, starting at location 00 in the 9100, { and f 00 in the 91008; and stopping when an <b>END</b> <b>statement</b> is encountered in the program. To identify the program, a two-digit number (decimal number 00 through 99) {{is placed in the}} 9100 A/B X-register prior to the transfer. To assisthe programmer in making maximum use of the 91014 storage, any new program added in storage is stored starting with the first available register, incrementing registers sequentially (14 program steps per register as in the 9100 A/B) until the <b>END</b> <b>statement</b> is reached. Cover: Marked cards, lower right, are used to enter programs and data in the Mode...|$|E
5000|$|Structured looping constructs, with an <b>END</b> DO <b>statement</b> for loop termination, and [...] and [...] {{statements}} for terminating normal [...] loop iterations in {{an orderly}} way ...|$|R
5|$|Semicolons {{are used}} to denote the <b>end</b> of a <b>statement.</b>|$|R
50|$|Many AppleScript {{processes}} are managed by blocks of code, where a block {{begins with a}} command command and ends with an <b>end</b> command <b>statement.</b> The most important structures are described below.|$|R
