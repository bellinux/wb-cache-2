23|5210|Public
50|$|NAND <b>flash</b> <b>memory</b> <b>controller</b> {{products}} {{manage the}} inherent deficiencies of NAND flash, providing a simpler interface {{to a computer}} system.|$|E
50|$|ArmourDrive mSATA {{solid-state}} drives (SSDs), {{are based}} on SATA NANDrive, using Greenliant’s internally developed NAND <b>flash</b> <b>memory</b> <b>controller.</b> Dedicated power failure detection and backup power circuitry are built-in to prevent data integrity issues due to sudden power interruptions.|$|E
50|$|Many {{flash memory}} devices, such as USB memory sticks, include a <b>flash</b> <b>memory</b> <b>controller</b> on chip. Flash memory is {{inherently}} slower to access than RAM and often becomes unusable {{after a few}} million write cycles, which generally makes it unsuitable for RAM applications.|$|E
50|$|Anobit Technologies, Ltd. (אנוביט) is an Israeli fabless {{designer}} of <b>flash</b> <b>memory</b> <b>controllers.</b> They were acquired by Apple in 2012 {{as they were}} the maker of a flash-memory drive part for the iPhone.|$|R
5000|$|... #Caption: Internals of an SD card, {{showing the}} <b>flash</b> <b>memory</b> and <b>controller</b> {{integrated}} circuits ...|$|R
5000|$|... #Caption: A USB flash drive. The chip on {{the left}} is <b>flash</b> <b>memory.</b> The <b>controller</b> is on the right.|$|R
50|$|EEPROM {{and flash}} memory media have {{individually}} erasable segments, {{each of which}} can be put through a limited number of erase cycles before becoming unreliable. This is usually around 3,000/5,000 cycles but many flash devices have one block with a specially extended life of 100,000+ cycles that can be used by the <b>Flash</b> <b>memory</b> <b>controller</b> to track wear and movement of data across segments. Erasable optical media such as CD-RW and DVD-RW are rated at up to 1,000 cycles (100,000 cycles for DVD-RAM media).|$|E
50|$|When {{the system}} or device needs to read data from or write {{data to the}} flash memory, it will {{communicate}} with the <b>flash</b> <b>memory</b> <b>controller.</b> Simpler devices like SD cards and USB flash drives typically have {{a small number of}} flash memory die connected simultaneously. Operations are limited to the speed of the individual flash memory die. In contrast, a high-performance solid-state drive will have as many as 100 or more dies organized in a matrix with parallel communication paths to enable speeds many times greater than that of a single flash die.|$|E
50|$|A <b>flash</b> <b>memory</b> <b>controller</b> (or flash controller) {{manages the}} data stored on flash memory and {{communicates}} {{with a computer}} or electronic device. Flash memory controllers can be designed for operating in low duty-cycle environments like SD cards, CompactFlash cards, or other similar media for use in digital cameras, PDAs, mobile phones, etc. USB flash drives use flash memory controllers designed to communicate with personal computers through the USB port at a low duty-cycle. Flash controllers can also be designed for higher duty-cycle environments like solid-state drives (SSD) used as data storage for laptop computer systems clear up to mission-critical enterprise storage arrays.|$|E
50|$|SandForce did {{not sell}} {{complete}} solid-state drives, but rather <b>flash</b> <b>memory</b> <b>controllers,</b> called SSD processors, to partners who then built and sold complete SSDs to manufacturers, corporations, and end-users. However, another division of LSI used the SandForce SSD processor in the LSI Nytro PCIe product line. Zsolt Kerekes, an SSD Market Analyst {{and publisher of}} StorageSearch.com, said in 2011 that SandForce was the best-known maker of SSD controllers.|$|R
40|$|Designing <b>memory</b> <b>controllers</b> {{for complex}} {{real-time}} and high-performance multi-processor systems-on-chip is challenging, since sufficient capacity and (real-time) performance {{must be provided}} in a reliable manner at low cost and with low power consumption. This special session contains four presentations that describe these challenges and proposed solutions for DRAM and <b>flash</b> <b>memory</b> <b>controllers,</b> respectively. The first presentation discusses performance and reliability issues in <b>flash</b> <b>memories,</b> while the second identifies challenges in providing DRAM access to memory clients with mixed time-criticality. The third presentation proposes an integrated approach to optimize cost and performance of the DRAM subsystem, {{and the last one}} describes how wide DRAM interfaces enabled by 3 D technology improve DRAM performance and reduces power...|$|R
50|$|In January 2012, LSI {{completed}} {{the acquisition of}} SandForce, which produced <b>flash</b> <b>memory</b> <b>controllers</b> (for $370 million reported in October 2011). LSI started producing its own PCIe cards for data center servers, using SandForce’s flash controller chips, under their new Nytro product line that April. This included three different products: LSI Nytro WarpDrive Application Acceleration Cards, LSI Nytro XD Application Acceleration Storage Solution, and LSI Nytro MegaRAID Application Acceleration Cards. LSI also introduced its Nytro Predictor software, a tool that helps determine which Nytro product works best with which applications. At the SCSI Trade Association Technology Showcase in May 2012, LSI announced accelerated datacenter performance with its DataBolt bandwidth optimizer technology. The new DataBolt technology is being introduced to a line of products including the Mini SAS HD connector.|$|R
50|$|IBM FlashSystem {{products}} {{are based on}} a custom hardware architecture that incorporates field-programmable gate arrays (FPGAs). The FlashSystem design omits traditional server-based array controllers. The primary components of each FlashSystem unit include custom flash modules, external storage area network interfaces, and FPGA logic that spreads data through the system. Each flash module within a FlashSystem incorporates enterprise multi-level cell or single-level cell flash chips and FPGAs that provide IBM Variable Stripe RAID data protection as well as standard <b>flash</b> <b>memory</b> <b>controller</b> functions. IBM claims that these architectural attributes provide strong performance, reliability, and efficiency. In August 2013, IBM submitted a single FlashSystem 820 SPC-1 benchmark result to the Storage Performance Council that showed fast response time (SPC-1 LRT) and high SPC-1 IOPS per external storage port - common measures of high storage performance - as well as low power consumption.|$|E
50|$|Usually, <b>Flash</b> <b>Memory</b> <b>Controller</b> {{also include}} the Flash Translation Layer (FTL) a layer below the file system that maps host side or file system logical block {{addresses}} (LBAs) to the physical address of the Flash memory (logical-to-physical mapping). The LBAs refer to sector numbers and to a mapping unit of 512 bytes. All LBAs that represent the logical size visible to and managed by the file system are mapped to a physical location (block ID, page ID and sector ID) of the Flash. As part of the wear leveling and other Flash management algorithms (bad block management, read disturb management, safe flash handling etc.), the physical location of an LBA might dynamically change frequently. The mapping units of an FTL can differ so that LBAs are mapped block-, page- or even sub-page-based. Depending on the usage pattern, a finer mapping granularity can significantly reduce the flash wear out and maximize the endurance of a flash based storage media.|$|E
40|$|Abstract — This paper {{focuses on}} design of NOR based <b>flash</b> <b>memory</b> <b>controller.</b> <b>Flash</b> <b>memory</b> <b>controller</b> manages data stored in flash memory. There are {{different}} commands {{that to be}} handled by the controller to operate flash memory. All these signals have been generated through <b>flash</b> <b>memory</b> <b>controller.</b> The results are verified through XILINX ISE simulation tool. Serial communication module is implemented by using Micro-blaze and output is verified on hardware by using LED’s...|$|E
50|$|The eMMC (embedded MMC) {{architecture}} {{puts the}} MMC components (<b>flash</b> <b>memory</b> plus <b>controller)</b> {{into a small}} ball grid array (BGA) IC package for use in circuit boards as an embedded non-volatile memory system. This is noticeably different from other versions of MMC as {{this is not a}} user-removable card, but rather a permanent attachment to the circuit board. eMMC also does not support the SPI-bus protocol.|$|R
40|$|NAND <b>flash</b> <b>memory</b> is {{ubiquitous}} {{in everyday life}} today because its capacity has continuously increased and cost has continuously decreased over decades. This positive growth {{is a result of}} two key trends: (1) effective process technology scaling, and (2) multi-level (e. g., MLC, TLC) cell data coding. Unfortunately, the reliability of raw data stored in <b>flash</b> <b>memory</b> has also continued to become more difficult to ensure, because these two trends lead to (1) fewer electrons in the <b>flash</b> <b>memory</b> cell (floating gate) to represent the data and (2) larger cell-to-cell interference and disturbance effects. Without mitigation, worsening reliability can reduce the lifetime of NAND <b>flash</b> <b>memory.</b> As a result, <b>flash</b> <b>memory</b> <b>controllers</b> in solid-state drives (SSDs) have become much more sophisticated: they incorporate many effective techniques to ensure the correct interpretation of noisy data stored in <b>flash</b> <b>memory</b> cells. In this article, we review recent advances in SSD error characterization, mitigation, and data recovery techniques for reliability and lifetime improvement. We provide rigorous experimental data from state-of-the-art MLC and TLC NAND flash devices on various types of <b>flash</b> <b>memory</b> errors, to motivate the need for such techniques. Based on the understanding developed by the experimental characterization, we describe several mitigation and recovery techniques, including (1) cell-to-cell interference mitigation, (2) optimal multi-level cell sensing, (3) error correction using state-of-the-art algorithms and methods, and (4) data recovery when error correction fails. We quantify the reliability improvement provided by each of these techniques. Looking forward, we briefly discuss how <b>flash</b> <b>memory</b> and these techniques could evolve into the future...|$|R
40|$|NAND <b>flash</b> <b>memories</b> are {{becoming}} the predominant {{technology in the}} implementation of mass storage systems for both embedded and high-performance applications. However, when considering data and code storage in non-volatile memories (NVMs), such as NAND <b>flash</b> <b>memories,</b> reliability and performance be- come a serious concern for systems' designer. Designing NAND flash based systems based on worst-case scenarios leads to waste of resources in terms of performance, power consumption, and storage capacity. This is clearly in contrast with the request for run-time reconfigurability, adaptivity, and resource optimiza- tion in nowadays computing systems. There is a clear trend toward supporting differentiated access modes in <b>flash</b> <b>memory</b> <b>controllers,</b> each one setting a differentiated trade-off point in the performance-reliability optimization space. This is supported by the possibility of tuning the NAND <b>flash</b> <b>memory</b> performance, reli- ability and power consumption acting on several tuning knobs such as the flash programming algorithm and the flash error correcting code. However, to successfully exploit these degrees of freedom, it is mandatory to clearly understand the effect the combined tuning of these parameters have on the full NVM sub-system. This paper performs a comprehensive quantitative analysis of the benefits provided by the run-time reconfigurability of an MLC NAND flash controller through the combined effect of an adaptable memory programming circuitry coupled with run-time adaptation of the ECC correction capability. The full non- volatile memory (NVM) sub-system is taken into account, starting from the characterization of the low level circuitry to the effect of the adaptation on a wide set of realistic benchmarks in order to provide the readers a clear figure of the benefit this combined adaptation would provide at the system leve...|$|R
40|$|This thesis {{presents}} digital {{design and}} implementation of a controller module for serial flash memories. Firstly, the platform including the serial <b>flash</b> <b>memory</b> <b>controller,</b> flash memories and SPI (Serial Peripheral Interface) protocol have been investigated to solve the current problems related with controlling of serial flash memories. Then, in the implementation part of the thesis, the Serial <b>Flash</b> <b>Memory</b> <b>Controller</b> module has been designed by using VHDL (VHSIC Hardware Description Language-VHDL) and synthesized in CMOS 0. 35 Mm technology. Functional and gate-level simulations have been done with Cadence simulator. Lastly the final gate level netlist has been placed and routed with Cadence Silicon Ensemble. A {{great deal of attention}} has been given to design a generic controller that needs simple software and minimum processor access cycle. It is programmed from the processor for different operations of serial flash memories. The structure of the frame, control data and timings are controlled by hardware according to the programmed operation. In addition to this, our Serial <b>Flash</b> <b>Memory</b> <b>Controller</b> module can be used with different flash memories. This is very important property for reusability of the module. The Serial <b>Flash</b> <b>Memory</b> <b>Controller</b> module is capable to work up to 20 MHz serial communication speed and it can be integrated to processor platforms that have AMBA (Advanced Microcontroller Bus Architecture) APB (Advanced Peripheral Bus) interface...|$|E
40|$|Flash {{storage memory}} devices are Nand and NOR types which {{are widely used}} in data storage {{application}} in computers and solid states drives. Flash are nonvolatile and electrically erased and reprogrammed. A <b>flash</b> <b>memory</b> <b>controller</b> (or flash controller) manages the data stored on flash memory and communicates with a computer or electronic device. When the system or device needs to read data from or write data to the flash storage, it will communicate with the flash controller. Flash controller is used to control programming and erasing operation of flash memory storage. FPGA builds reconfigurable environment for <b>flash</b> <b>memory</b> <b>controller</b> which helps in generation of exact timing specifications of flash chip. NAND Flash does not support in place updates to overcome this disadvantage of NAND storages proposed design works on NOR flash memory...|$|E
30|$|Lin and Dung [16] {{proposed}} a novel NAND <b>flash</b> <b>memory</b> <b>controller</b> for SD/Multimedia Card (MMC). They have designed Bose-Chaudhuri-Hocquenghan (BCH) {{error correction code}} (ECC) [28] for correcting the random bit errors of the flash memory chip. The UMC 0.18 μm CMOS process was used to implement the proposed memory controller chip. This proposed controller was verified for MMC only.|$|E
40|$|To {{optimize}} the energy consumption embedded systems, {{the estimation of}} energy consumption of the embedded applications are very important. This paper proposes a simple but effective instruction-level energy estimation model for embedded systems. For case study purposes, the model parameters were determined for a commonly used ARM 9 TDMI-based microcontroller. The total energy consists of the energy consumed by the processor core, <b>flash</b> <b>memory,</b> <b>memory</b> <b>controller,</b> SRAM etc. The model parameters that are determined includes op-code of instructions, number of shift operations, register bank bit flips, instructions weight and their Hamming distance, different types of memory accesses, the effect of pipeline stalls etc. To validate the proposed model, a physical hardware platform was developed which is having energy measurement capabilities. For several experiments conducted on various embedded applications from MiBench benchmark suite and less than 6 % error in the energy consumption estimation was shown. Also an energy profiler tool was developed for the systems that use ARM 9 TDMI processors which provides valuable information and guidelines for software energy optimization...|$|R
50|$|The ST robot {{controller}} uses two processors: one {{to run the}} embedded RoboForth programming language and a digital signal processor (DSP) to control the motors. The DSP is able to control all axes collectively with individual axes ramping up or down as necessary for a compound motion. At {{the same time it}} reads back the encoders data and passes this information to the CPU which also uses the DSP's timers. RobWin is a GUI project manager for PC to create and edit projects and save them on disk but RoboForth, the user's program and all data are saved in <b>flash</b> <b>memory</b> in the <b>controller.</b>|$|R
40|$|CPU core complex (e 200 z 0 h) – Compatible with classic PowerPC {{instruction}} set – Includes variable length encoding (VLE) {{instruction set}} for smaller code size footprint; with the encoding of mixed 16 -bit and 32 -bit instructions, {{it is possible}} to achieve significant code size footprint reduction over conventional Book E compliant code • On-chip ECC <b>flash</b> <b>memory</b> with <b>flash</b> <b>controller</b> – Up to 1 MB primary flash—two 512 KB modules with prefetch buffer and 128 -bit data access port – 64 KB data flash—separate 4 16 KB flash block for EEPROM emulation with prefetch buffer and 128 -bit data access port • Up to 48 KB on-chip ECC SRAM with SRAM controller • Up to 160 KB on-chip non-ECC graphics SRAM wit...|$|R
40|$|Abstract — In {{this paper}} a NAND <b>flash</b> <b>memory</b> <b>controller</b> was designed. For the {{better use of}} NAND type flash memory we design a new Arithmetical and Logical Unit (ALU) for calculating addition, subtraction, increment, {{decrement}} operations etc. In this memory controller we design a decoder, single memory cell, memory module etc. These all are encapsulated inside a controller and this is on top most in hierarchy. As the cell size of NAND flash memory is reduced every year the performance, reliability, speed is increased very rapidly. NAND flash memory is programmed on page by page basis. Typically programming time is very less few micro second per page. This NAND <b>flash</b> <b>memory</b> <b>controller</b> architecture {{can be used with}} a real secure digital card, multimedia card (SD/MMC), digital cameras etc. Experimental results show that the designed controller give good performance and full fill all the system specifications. We design and implement FPGA based open framework for fast, correct features of flash memories...|$|E
40|$|Flash is {{a widely}} used storage device that {{provides}} high density and low power, appealing properties for general purpose computing. Today, its usual application is in portable special purpose devices such as MP 3 players. In this paper we examine its use in the server domain— a more general purpose environment. Aggressive process scaling {{and the use of}} multi-level cells continues to improve density ahead of Moore’s Law predictions, making Flash even more attractive as a general purpose memory solution. Unfortunately, reliability limits the use of Flash. To seriously consider Flash in the server domain, architectural support must exist to address this concern. This paper first shows how Flash can be used in today’s server platforms as a disk cache. It then proposes two improvements. The first improves performance and reliability by splitting Flash based disk caches into separate read and write regions. The second improves reliability by employing a programmable <b>Flash</b> <b>memory</b> <b>controller.</b> It can change the error code strength (number of correctable bits) and the number of bits that a memory cell can store (cell density) according {{to the demands of the}} application. Our studies show that Flash reduces overall power consumed by the system memory and hard disk drive up to 3 times while maintaining performance. We also show that Flash lifetime can be improved by a factor of 20 when using a programmable <b>Flash</b> <b>memory</b> <b>controller,</b> if some performance degradation (below 5 %) is acceptable. ...|$|E
3000|$|On the {{contrary}} to the scenario of soft-decision decoding, a low-weight LDPC code tends to have worse hard-decision decoding performance than a high-column-weight code. This can be illustrated in Figure 3 and will be further demonstrated in “Case studies” section. This observation directly motivates us to adaptively change the LDPC code parity check matrix column weight throughout the entire NAND flash memory lifetime. Its basic idea {{is to use the}} LDPC code that has the largest possible column weight and meanwhile can meet the target page error rate through soft-decision decoding under present flash memory P/E cycling. It can be further described as follows: assume the NAND <b>flash</b> <b>memory</b> <b>controller</b> can support s different LDPC codes, [...]...|$|E
40|$|Reed–Solomon (RS) {{codes are}} widely used to {{identify}} and correct errors in storage systems and transmission and. When RS codes are used for so many memory system and reduces error in data. (255, 223) product Reed-Solomon (RS) for non-volatile NAND <b>flash</b> <b>memory</b> systems. Reed-Solomon codes are the most used in digital data storage systems, but powerful for tool burst errors. To correct multiple random errors and burst errors in order, The composing of product code in to column-wise RS codes and row-wise RS codes may allow to decode multiple errors beyond their error correction capability. The consists of proposed code is two shortened RS codes and a conventional Reed-Solomon code. The nonvolatile NAND <b>flash</b> <b>Controller</b> <b>memory</b> systems. Reed-Solomon codes are the most Powerful used in data storage systems. The proposed coding scheme on a FPGA-based simulator with using an FPGA device. The proposed code can correct 16 symbol errors...|$|R
30|$|As {{technology}} {{continues to}} scale down, NAND <b>flash</b> <b>memory</b> cell storage distortion and noise sources become increasingly significant, leading to continuous degradation of memory raw storage reliability. As a result, {{the industry has}} very actively been pursuing the transition of ECC from conventional BCH codes to more powerful soft-decision iterative coding solutions, in particular LDPC codes. Nevertheless, since NAND <b>flash</b> <b>memory</b> sensing latency is linearly proportional {{to the number of}} sensing quantization levels and the sensing results must be transferred to the <b>memory</b> <b>controller</b> through standard chip-to-chip links, a straightforward use of soft-decision ECC in NAND <b>flash</b> <b>memory</b> can result in significant memory read latency overhead.|$|R
40|$|In {{spite of}} the mature cell structure, the <b>memory</b> <b>controller</b> {{architecture}} of Multi-level cell (MLC) NAND <b>Flash</b> <b>memories</b> is evolving fast {{in an attempt to}} improve the uncorrected/miscorrected bit error rate (UBER) and to provide a more flexible usage model where the performance-reliability trade-off point can be adjusted at runtime. However, optimization techniques in the <b>memory</b> <b>controller</b> architecture cannot avoid a strict trade-off between UBER and read throughput. In this paper, we show that co-optimizing ECC architecture configuration in the <b>memory</b> <b>controller</b> with program algorithm selection at the technology layer, a more flexible memory sub-system arises, which is capable of unprecedented trade-offs points between performance and reliabilit...|$|R
40|$|During {{the design}} and {{verification}} of the Hyperstone S 5 <b>flash</b> <b>memory</b> <b>controller,</b> we developed a highly effective way to use the SystemVerilog direct programming interface (DPI) to integrate an instruction set simulator (ISS) and a software debugger in logic simulation. The processor simulation was performed by the ISS, while all other hardware components were simulated in the logic simulator. The ISS integration allowed us to filter many of the bus accesses out of the logic simulation, accelerating runtime drastically. The software debugger integration freed both hardware and software engineers to work in their chosen development environments. Other benefits of this approach include testing and integrating code earlier in the design cycle and more easily reproducing, in simulation, problems found in FPGA prototypes...|$|E
30|$|Compared {{with using}} a single fixed low-weight LDPC code {{throughout}} the entire lifetime of NAND flash memory, this proposed adaptive design method can achieve better hard-decision decoding performance (hence lower hard-decision decoding failure rate) {{throughout the entire}} NAND flash memory lifetime. This can directly reduce the average latency of on-chip memory sensing and flash-to-controller data transfer caused {{by the use of}} LDPC codes in NAND flash memory. Meanwhile, we note that such an adaptive design method will lead to higher silicon implementation cost of <b>flash</b> <b>memory</b> <b>controller</b> since the soft-decision and hard-decision decoders must be able to support different codes with different column weights. Since we only consider the use of QC-LDPC codes, it will be sufficient for the decoder to support the maximum allowable number of column weight and run-time configuration in terms of circulant size and cyclic shift value of each circulant. Most QC-LDPC decoder architectures ever reported in the open literature (e.g., see) [21 – 24] can readily support such configurability.|$|E
40|$|Abstract—It is {{progressing}} as new advents and remarkable {{developments of}} mobile device every year. On the upper line reason, NAND FLASH large density memory demands {{which can be}} stored into portable devices have been dramatically increasing. Therefore, the cell size of the NAND Flash memory has been scaled down by merely 50 % and has been doubling density each per year. [1] However, side effects have arisen the cell distribution and reliability characteristics related to coupling interference, channel disturbance, floating gate electron retention, write-erase cycling owing to shrinking around 20 nm technology. Also, FLASH controller to manage shrink effect leads to speed and current issues. In this paper, It will be introduced to solve cycling, retention and fail bit problems of sub-deep micron shrink such as Virtual negative read used in moving read, randomization. The characteristics of retention, cycling and program performance have 3 K per 1 year and 12. 7 MB/s respectively. And device size is 179. 32 mm 2 (16. 79 mm × 10. 68 mm) in 3 metal 26 nm CMOS. Index Terms—NAND <b>FLASH</b> <b>memory,</b> <b>controller...</b>|$|E
40|$|Abstract — A {{stethoscope}} is {{an instrument}} used for auscultations to convey heart sounds as well {{sounds in the}} other parts of the body. However, traditional stethoscopes are restricted only to audio representation of such sounds and the diagnosis depends on the expertise of the doctor. This project is an attempt to develop an Embedded Stethoscope to capture heart sounds which offers better noise cancellation, signal amplification and also added functionalities like storage, analysis and visual representation of sound signals. The proposed system consists of amplifier followed by a filter for removing undesired frequencies. It is then amplified using power amplifier and this analog signal is converted to digital using the C 2000 High Performance 32 bit microcontroller. For visual representation, heart sounds will then be displayed on graphic LCD and also stored on embedded <b>flash</b> <b>memory</b> of the <b>controller.</b> Hence we aim at developing a prototype which offers a low power replacement to the traditional stethoscope which will aid physicians as an effective diagnostic tool...|$|R
50|$|Wear {{leveling}} {{attempts to}} work around these limitations by arranging data so that erasures and re-writes are distributed evenly across the medium. In this way, no single erase block prematurely fails due to {{a high concentration of}} write cycles. In <b>flash</b> <b>memory,</b> a single block on the chip is designed for longer life than the others so that the <b>memory</b> <b>controller</b> can store operational data with less chance of its corruption.|$|R
40|$|The {{delay times}} {{due to the}} {{propagating}} of data on PCB depend on the shape and length of interconnection lines when <b>memory</b> <b>controllers</b> and high speed memories are soldered on the PCB. The dependency on the placement and routing on the PCB requires redesign of I/O logic or reconfiguration of the <b>memory</b> <b>controller</b> after the delay time is measured if the controller is programmable. In this paper, we propose architecture of configuring logic for the delay time estimation by writing and reading test patterns while initializing the memories. The configuration logic writes test patterns to the memory and reads them by changing timing until the correct patterns are read. The timing information is stored and the configuration logic configures the <b>memory</b> <b>controller</b> {{at the end of}} initialization. The proposed method enables easy design of systems using PCB by solving the problem of the mismatching caused by the variation of placement and routing of components including <b>memories</b> and <b>memory</b> <b>controllers.</b> The proposed method can be applied to high speed SRAM, DRAM, and <b>flash</b> <b>memory...</b>|$|R
