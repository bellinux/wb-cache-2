4524|10000|Public
25|$|Digital {{electronics}} and <b>Embedded</b> <b>System</b> Lab.|$|E
25|$|Adams {{was also}} a keynote speaker for the April 2001 Embedded Systems Conference in San Francisco, {{one of the major}} {{technical}} conferences on <b>embedded</b> <b>system</b> engineering.|$|E
25|$|When {{incorporated}} into an <b>embedded</b> <b>system,</b> serial flash requires fewer wires on the PCB than parallel flash memories, since it transmits and receives data one bit at a time. This may permit {{a reduction in}} board space, power consumption, and total system cost.|$|E
40|$|We propose {{creating}} service oriented-architecture for <b>embedded</b> <b>systems.</b> We {{introduce the}} concept of contracts for <b>embedded</b> <b>systems,</b> and propose architectural and design solutions for accessing <b>embedded</b> <b>systems</b> using lightweight services based on contracts. We define proxy, translator and full service architectures, that enable us to link {{with a variety of}} classes of embedded devices. By treating <b>embedded</b> <b>systems</b> as services we expect to make a concept of self-descriptive and reusable embeddedsystemsastepclosertoreality. Indexed terms: <b>embedded</b> <b>systems,</b> services, contracts 1...|$|R
40|$|<b>Embedded</b> <b>systems</b> {{have been}} almost invisibly pervading our daily lives for several decades. They {{facilitate}} smooth operations in avionics, automotive electronics, or telecommunication. New problems arise by the increasing employment, interconnection, and communication of <b>embedded</b> <b>systems</b> in heterogeneous environments: How secure are these <b>embedded</b> <b>systems</b> against attacks or breakdowns? Therefore, how can <b>embedded</b> <b>systems</b> be designed to be more secure? And how can <b>embedded</b> <b>systems</b> autonomically react to threats? Facing these questions, Sorin A. Huss is significantly involved in the exploration...|$|R
40|$|Abstract: <b>Embedded</b> <b>systems</b> play an {{increasingly}} important role in today's society. The spectrum of <b>embedded</b> <b>systems</b> ranges, for example, from mobile phones to X-by-wire control systems in cars and airplanes. The regional <b>embedded</b> <b>systems</b> knowledge base, called EmBase, is a comprehensive project which investigates and maps the knowledgebase in <b>embedded</b> <b>systems</b> {{with a focus on}} Austria and Central Europe. EmBase supports individuals, private and public institutions and companies that implement, develop, support, purchase or sell <b>embedded</b> <b>systems</b> so that they can successfully identify key market trends and directions and align themselves and their activities with these trends Keywords: <b>Embedded</b> <b>systems,</b> knowledge base, identification of know-how, who-is-who in certain field...|$|R
25|$|There {{was also}} a {{specialist}} networking lab that was equipped with more than 20 enterprise level network switches and routers, including wireless and VoIP devices. There was a dedicated security and software forensics laboratory. There were also many special-purpose facilities for <b>embedded</b> <b>system</b> development and robotics.|$|E
25|$|It is also {{possible}} to raise exceptions purposefully, using the throw keyword; these exceptions are handled in the usual way. In some cases, exceptions cannot {{be used due to}} technical reasons. One such example is a critical component of an <b>embedded</b> <b>system,</b> where every operation must be guaranteed to complete within a specified amount of time. This cannot be determined with exceptions as no tools exist to determine the maximum time required for an exception to be handled.|$|E
25|$|ARM Holdings' primary {{business}} is selling IP cores, which licensees use to create microcontrollers (MCUs), CPUs, and systems-on-chips {{based on those}} cores. The original design manufacturer combines the ARM core with other parts to produce a complete device, typically {{one that can be}} built in existing Semiconductor fabrication plants (fabs) at low cost and still deliver substantial performance. The most successful implementation has been the ARM7TDMI with hundreds of millions sold. Atmel has been a precursor design center in the ARM7TDMI-based <b>embedded</b> <b>system.</b>|$|E
40|$|<b>Embedded</b> <b>systems</b> {{are used}} in many {{critical}} applications of our daily life. The increased complexity of <b>embedded</b> <b>systems</b> and the tightened safety regulations posed on them and {{the scope of the}} environment in which they operate are driving the need of more dependable <b>embedded</b> <b>systems.</b> Therefore, achieving a high level of quality and dependability to <b>embedded</b> <b>systems</b> is an ultimate goal. This research study investigates the inter-relationships between dependability and other <b>embedded</b> <b>systems</b> quality attributes using two pieces of information: Tactics and Dependability Quality attributes scenarios...|$|R
30|$|With the {{development}} of <b>embedded</b> <b>systems,</b> the application of databases in <b>embedded</b> <b>systems</b> [1] is a hotspot in both industry and academia. <b>Embedded</b> <b>systems</b> work in an environment without manual intervention, so when a fault occurs in these systems, they need to diagnose the fault and recover it automatically all by themselves [2]. The main memory databases [3, 4] can reduce the I/O operations greatly while running, and satisfy the real-time requirement of <b>embedded</b> <b>systems,</b> so the databases implemented in <b>embedded</b> <b>systems</b> usually work in the main memory.|$|R
50|$|As small <b>embedded</b> <b>systems</b> are proliferating {{due to the}} {{expansion}} of the Internet Of Things, the need for protection of such <b>embedded</b> <b>systems</b> is also increasing. Using Instruction Based Memory Access Control (IB-MAC) implemented in hardware, it is possible to protect low-cost <b>embedded</b> <b>systems</b> against malicious control flow and stack overflow attacks. The protection can be provided by separating the data stack and the return stack. However, {{due to the lack of}} a Memory Management Unit in some <b>embedded</b> <b>systems,</b> the hardware solution cannot be applied to all <b>embedded</b> <b>systems.</b>|$|R
25|$|In {{contrast}} to the general purpose computer software design environment, a primary characteristic of embedded environments is {{the sheer number of}} different platforms available to the developers (CPU architectures, vendors, operating systems and their variants). Embedded systems are, by definition, not general-purpose designs: they are typically developed for a single task (or small range of tasks), and the platform is chosen specifically to optimize that application. Not only does this fact make life tough for <b>embedded</b> <b>system</b> developers, it also makes debugging and testing of these systems harder as well, since different debugging tools are needed in different platforms.|$|E
25|$|A kernel must {{maintain}} {{a list of}} available devices. This list may be known in advance (e.g. on an <b>embedded</b> <b>system</b> where the kernel will be rewritten if the available hardware changes), configured by the user (typical on older PCs and on systems that are not designed for personal use) or detected by the operating system at run time (normally called plug and play). In a plug and play system, a device manager first performs a scan on different hardware buses, such as Peripheral Component Interconnect (PCI) or Universal Serial Bus (USB), to detect installed devices, then searches for the appropriate drivers.|$|E
25|$|Recent {{advances}} in vehicle electronics {{have led to}} a move towards fewer, more capable computer processors on a vehicle. A typical vehicle in the early 2000s would have between 20 and 100 individual networked microcontroller/Programmable logic controller modules with non-real-time operating systems. The current trend is toward fewer, more costly microprocessor modules with hardware memory management and real-time operating systems. The new <b>embedded</b> <b>system</b> platforms allow for more sophisticated software applications to be implemented, including model-based process control, artificial intelligence, and ubiquitous computing. Perhaps {{the most important of these}} for Intelligent Transportation Systems is artificial intelligence.|$|E
40|$|Input/Output is the {{mechanisms}} through which <b>embedded</b> <b>systems</b> interact {{and control the}} outside world. Particularly when employed in mission critical systems, the I/O of <b>embedded</b> <b>systems</b> has to be both reliable and secure. <b>Embedded</b> <b>system’s</b> I/O is controlled by a pin based approach. In this paper, we investigate the security implications of <b>embedded</b> <b>system’s</b> pin control. In particular, we show how an attacker can tamper with the integrity and availability of an <b>embedded</b> <b>system’s</b> I/O by exploiting cerain pin control operations {{and the lack of}} hardware interrupts associated to them...|$|R
40|$|This report {{describes}} the November 2010 Trusted Computing in <b>Embedded</b> <b>Systems</b> Workshop held at Carnegie Mellon University. This workshop brought together various groups concerned with advancing research into improving the trustworthiness in <b>embedded</b> <b>systems.</b> The workshop format provided {{the opportunity to}} focus on <b>embedded</b> <b>systems</b> while examining the application of related trust technologies in order to foster collaborative approaches and information exchange in this area. Presentations and discussion addressed the capabilities and limitations of effectively employing trusted hardware-enabled components in <b>embedded</b> <b>systems.</b> This included, but was not restricted to, the following areas: new research and development in enabling trust in <b>embedded</b> <b>systems,</b> methods and techniques for establishing trust in <b>embedded</b> <b>systems,</b> lessons learned from research and development projects on <b>embedded</b> <b>systems</b> security, and gaps in current research. The workshop resulted in identification of gaps in current research and recommendations for potential research directions...|$|R
5000|$|Analog and Digital Hardware <b>Systems</b> (Real-time <b>Systems,</b> <b>Embedded</b> <b>Systems,</b> Hybrid <b>Embedded</b> <b>Systems,</b> Mixed Signal Designs, Multi-media Systems) ...|$|R
25|$|A cross {{assembler}} (see also cross compiler) is an assembler that is {{run on a}} computer or operating system (the host system) of a different type from the system on which the resulting code is to run (the target system). Cross-assembling facilitates the development of programs for systems {{that do not have}} the resources to support software development, such as an <b>embedded</b> <b>system.</b> In such a case, the resulting object code must be transferred to the target system, either via read-only memory (ROM, EPROM, etc.) or a data link using an exact bit-by-bit copy of the object code or a text-based representation of that code, such as Motorola S-record or Intel HEX.|$|E
25|$|However, the {{distinction}} between measuring and improving software quality in an <b>embedded</b> <b>system</b> (with emphasis on risk management) and software quality in business software (with emphasis on cost and maintainability management) is becoming somewhat irrelevant. Embedded systems now often include a user interface and their designers are as much concerned with issues affecting usability and user productivity as their counterparts who focus on business applications. The latter are in turn looking at ERP or CRM system as a corporate nervous system whose uptime and performance are vital {{to the well-being of}} the enterprise. This convergence is most visible in mobile computing: a user who accesses an ERP application on their smartphone is depending on the quality of software across all types of software layers.|$|E
2500|$|... {{results of}} a survey about <b>embedded</b> <b>system</b> test and debug, Byte Paradigm (archived from the {{original}} on January 12, 2012) ...|$|E
30|$|First, {{processing}} time {{is an important}} aspect of many <b>embedded</b> <b>systems,</b> especially if we would like to apply the vision-based method to use in <b>embedded</b> <b>systems.</b> However, the computation time for the sequence shown is real time (approximately 12 frames per second without optimization). From this {{processing time}}, it is quite convenient to implement the proposed method to use in the <b>embedded</b> <b>systems</b> architecture, especially <b>embedded</b> robotic <b>systems.</b> This is because robots using <b>embedded</b> <b>systems</b> usually need an image processing-based algorithm that can run in real time, or nearly real time. Thus, our experimental speed indicates that the proposed method can support <b>embedded</b> <b>systems</b> positively in this aspect.|$|R
40|$|Security {{is usually}} not in the main focus in the {{development}} of <b>embedded</b> <b>systems.</b> However, strongly interconnected <b>embedded</b> <b>systems</b> play vital roles in many everyday processes and also in industry and critical infrastructures. Therefore, security engineering for <b>embedded</b> <b>systems</b> is a discipline that currently attracts more interest. This paper presents the vision of security engineering for <b>embedded</b> <b>systems</b> formulated by the FP 7 project SecFutur [1]. Categories and Subject Descriptor...|$|R
40|$|Although attractive, CBD has {{not been}} widely adopted in domains of <b>embedded</b> <b>systems.</b> The main reason is {{inability}} of these technologies {{to cope with the}} important concerns of <b>embedded</b> <b>systems,</b> such as resource constraints, real-time or dependability requirements. However an increasing understanding of principles of CBD makes it possible to utilize these principles in implementation of different component-based models more appropriate for <b>embedded</b> <b>systems.</b> The aim of this tutorial is to point to the opportunity of applying this approach for development and maintenance of <b>embedded</b> <b>systems.</b> The tutorial gives insights into basic principles of CBD, the main concerns and characteristics of <b>embedded</b> <b>systems</b> and possible directions of adaptation of component-based approach for these systems. Different types of <b>embedded</b> <b>systems</b> and approaches for applying CBD are presented and illustrated by examples from research and practices. Also, challenges and research directions of CBD for <b>embedded</b> <b>systems</b> are discussed...|$|R
2500|$|The team {{originally}} considered using C++, but {{rejected it}} for several reasons. Because they were developing an <b>embedded</b> <b>system</b> with limited resources, {{they decided that}} C++ needed too much memory and that its complexity led to developer errors. [...] The language's lack of garbage collection meant that programmers had to manually manage system memory, a challenging and error-prone task. The team also worried about the C++ language's lack of portable facilities for security, distributed programming, and threading. Finally, they wanted a platform that would port easily to all types of devices.|$|E
5000|$|As {{with other}} software, <b>embedded</b> <b>system</b> {{designers}} use compilers, assemblers, and debuggers to develop <b>embedded</b> <b>system</b> software. However, {{they may also}} use some more specific tools: ...|$|E
50|$|Because an <b>embedded</b> <b>system</b> {{is often}} {{composed}} {{of a wide variety}} of elements, the debugging strategy may vary. For instance, debugging a software- (and microprocessor-) centric <b>embedded</b> <b>system</b> is different from debugging an <b>embedded</b> <b>system</b> where most of the processing is performed by peripherals (DSP, FPGA, and co-processor).An increasing number of embedded systems today use more than one single processor core. A common problem with multi-core development is the proper synchronization of software execution. In such a case, the <b>embedded</b> <b>system</b> design may wish to check the data traffic on the busses between the processor cores, which requires very low-level debugging, at signal/bus level, with a logic analyzer, for instance.|$|E
40|$|<b>Embedded</b> <b>systems</b> {{are nearly}} ubiquitous, and books on {{individual}} topics or components of <b>embedded</b> <b>systems</b> are equally abundant. Unfortunately, for those designers who thirst for {{knowledge of the}} big picture of <b>embedded</b> <b>systems</b> {{there is not a}} drop to drink. Until now. The <b>Embedded</b> <b>Systems</b> Handbook is an oasis of information, offering a mix of basic and advanced topics, new solutions and technologies arising from the most recent research efforts, and emerging trends to help you stay current in this ever-changing field. With preeminent contributors from leading industrial and academic institutions around the globe, this authoritative handbook presents timely tutorials, surveys, and technological overviews spanning the range of issues and technologies involved in <b>embedded</b> <b>systems.</b> Many of the technology developments, deployments, and trends are made available in this book for the first time. Six sections provide coherence to the presentation, detailing: · A broad introduction to <b>embedded</b> <b>systems</b> · System- and network-on-chip (SoC/NoC) design · Testing of embedded core-based integrated circuits · Networked <b>embedded</b> <b>systems</b> · Sensor networks, and · Automotive, industrial automation, and intelligent sensor applications With concise yet comprehensive coverage of the latest developments, solutions, tools, products, and research results, the <b>Embedded</b> <b>Systems</b> Handbook is ideal for both novices and seasoned engineers looking to enhance and expand <b>embedded</b> <b>systems</b> capabilities...|$|R
50|$|<b>Embedded</b> <b>systems</b> are {{commonly}} found in consumer, cooking, industrial, automotive, medical applications.Some example of <b>embedded</b> <b>systems</b> are MP3 players, mobile phones, videogame consoles, digital cameras, DVD players, and GPS. Household appliances, such as microwave ovens, washing machines and dishwashers, include <b>embedded</b> <b>systems</b> to provide flexibility and efficiency.|$|R
40|$|In the {{previous}} chapters we introduced application family engineering and design concepts. This chapter {{will provide an}} insight into <b>embedded</b> <b>systems</b> and explain the issues governing reuse in <b>embedded</b> <b>systems.</b> We will outline some of the technical challenges that are specific to application family engineering of <b>embedded</b> <b>systems...</b>|$|R
50|$|An in-circuit {{emulator}} (ICE) provides {{a window into}} the <b>embedded</b> <b>system.</b> The programmer uses the emulator to load programs into the <b>embedded</b> <b>system,</b> run them, step through them slowly, and view and change data used by the system's software.|$|E
50|$|VLSI design & <b>Embedded</b> <b>system.</b>|$|E
50|$|Implementing {{projects}} using OSALs {{allows for}} development of portable <b>embedded</b> <b>system</b> software that is independent of a particular real-time operating system. It also allows for <b>embedded</b> <b>system</b> software to be developed and tested on desktop workstations, providing a shorter development and debug time.|$|E
40|$|<b>Embedded</b> <b>systems</b> play an {{increasingly}} important role in today's society. The spectrum of <b>embedded</b> <b>systems</b> ranges, for example, from mobile phones to X-by-wire control systems in cars and airplanes. The regional <b>embedded</b> <b>systems</b> knowledge base, called EmBase, is a comprehensive project which investigates and maps the knowledgebase in <b>embedded</b> <b>systems</b> {{with a focus on}} Austria and Central Europe. EmBase supports individuals, private and public institutions and companies that implement, develop, support, purchase or sell <b>embedded</b> <b>systems</b> so that they can successfully identify key market trends and directions and align themselves and their activities with these trends Keywords: <b>Embedded</b> <b>systems,</b> knowledge base, identification of know-how, who-is-who in certain field, representation of technology oriented news, Industrial project, Frameworks for knowledge portals, Management of distributed knowledge, Knowledge management in business process management Categories: A. 1, A. m...|$|R
40|$|Phase change memory (PCM) {{has been}} {{proposed}} to replace NOR flash and DRAM in <b>embedded</b> <b>systems</b> because of its attractive features. However, the endurance of PCM greatly limits its adoption in <b>embedded</b> <b>systems.</b> As most <b>embedded</b> <b>systems</b> are application-oriented, we can tackle the endurance problem of PCM by exploring application-specific features such as fixed access patterns and update frequencies. In this paper, we propose an application-specific wear leveling technique, called Curling-PCM, to evenly distribute write activities across the whole PCM chip to improve the endurance of PCM in <b>embedded</b> <b>systems.</b> The basic idea is to exploit application-specific features in <b>embedded</b> <b>systems</b> and periodically move the hot region across the whole PCM chip. To reduce the overhead of moving the hot region and improve the performance of PCM-based <b>embedded</b> <b>systems,</b> a fine-grained partial wear leveling policy is proposed for Curling-PCM, by which {{only part of the}} hot region is moved during each request handling period. Experimental results show that Curling-PCM can effectively evenly distribute write traffic for a prime application of PCM in <b>embedded</b> <b>systems.</b> We expect this paper can serve as a first step toward the full exploration of application-specific features in PCM-based <b>embedded</b> <b>systems.</b> Department of Computin...|$|R
40|$|Paperback is not available. “This book {{covers a}} wide range of the {{important}} topics related to modeling <b>embedded</b> <b>systems,</b> and provides a state-ofthe-art overview on behavioral models. ”- Luís Gomes, Universidade Nova de Lisboa, Portugal The development of <b>embedded</b> <b>systems</b> offers a higher degree of abstraction, crucial to tackling the growing complexity and usage of model-driven approaches. Behavioral Modeling for <b>Embedded</b> <b>Systems</b> and Technologies: Applications for Design and Implementation provides an overview on innovative behavior models currently used for developing <b>embedded</b> <b>systems,</b> accentuating on graphical and visual notations. This dynamic compilation presents an authoritative reference collection to the most significant models of computation currently in use for <b>embedded</b> <b>systems</b> design. Subject...|$|R
