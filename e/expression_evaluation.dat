188|389|Public
2500|$|Temporary {{variables}} are created {{as the result}} of <b>expression</b> <b>evaluation</b> and are destroyed when the statement containing the expression has been fully evaluated (usually at the {{at the end of a}} statement).|$|E
5000|$|<b>Expression</b> <b>evaluation</b> can be {{deferred}} {{by employing}} arrow syntax: ...|$|E
5000|$|Integrated {{debugger}} with breakpoints, frames, {{watches and}} <b>expression</b> <b>evaluation.</b>|$|E
40|$|Existing profile-guided partial {{redundancy}} elimination (PRE) methods use speculation {{to enable}} the removal of partial redundancies along more frequently executed paths {{at the expense of}} introducing additional <b>expression</b> <b>evaluations</b> along less frequently executed paths. While being capable of minimizing the number of <b>expression</b> <b>evaluations</b> in some cases, they are, in general, not computationally optimal in achieving this objective. In addition, the experimental results for their effectiveness are mostly missing. This wor...|$|R
40|$|This study {{presents}} an Intelligent Tutoring System called JEE-Tutor for teaching Java operator precedence, associativity and <b>expressions</b> <b>evaluation</b> to freshman {{students in the}} Faculty of Engineering and Information Technology in Al-Azhar University. An overview of the JEE-Tutor architectural design and user interface will be discussed. According {{to the success of}} other similar Intelligent Tutoring Systems, it is also hypothesized that students will be able to learn operator precedence, associativity, <b>expressions</b> <b>evaluation</b> and gain knowledge more quickly and effectively than students using traditional methods of teaching...|$|R
5000|$|Mathematics package: [...] {{provides}} mathematical <b>expressions</b> and <b>evaluation,</b> {{as well as}} arbitrary-precision decimal and {{integer number}} datatypes.|$|R
5000|$|... general <b>expression</b> <b>evaluation</b> for strings {{sent to the}} terminal.|$|E
50|$|Stack height reduction: Rearrange {{expression}} tree {{to minimize}} resources needed for <b>expression</b> <b>evaluation.</b>|$|E
50|$|The {{languages}} {{differ significantly}} {{when it comes}} to <b>expression</b> <b>evaluation,</b> but all-in-all they are comparable.|$|E
50|$|The Hugs prompt (a Haskell REPL) accepts <b>expressions</b> for <b>evaluation,</b> but not module, type or {{function}} definitions. Hugs can load Haskell modules at start-up.|$|R
5000|$|<b>Evaluation</b> <b>expressions</b> for {{derived class}} members (attributes and links) ...|$|R
40|$|This thesis aims at {{contributing}} to the research on academic conference paper presentations, particularly to the discussion sessions that follow them. The main {{purpose of this study}} is to explore the speaker's <b>expression</b> of <b>evaluation</b> in the discussion session of two specialised conference paper presentations in Linguistics and Chemistry from a multimodal approach. I set out to investigate evaluation in spoken academic discourse beyond the traditional linguistic approach to foreground the role of kinesics and paralanguage that co-occur with the linguistic <b>expression</b> of <b>evaluation.</b> To meet the objective of the thesis, the theoretical framework was embedded in techniques of genre analysis (Bhatia 1993, Swales 1990) and discourse analysis, including the theoretical orientations of systemic functional linguistics (Halliday 1978, 1985 a), conversation analysis (Schegloff & Sack 1973), pragmatics (Brown & Levinson 1978, 1987), and multimodal discourse analysis (Kress & van Leeuwen 2001). This framework allowed me to identify the structure of the interaction, the rhetorical moves in which the interaction is organised, and finally the linguistic and multimodal <b>expression</b> of <b>evaluation</b> that articulates the rhetoric of the interaction...|$|R
5000|$|Short circuit <b>expression</b> <b>evaluation</b> {{has been}} {{commonly}} considered an advantage for C {{because of the}} [...] "evaluation problem": ...|$|E
5000|$|C99 {{defines a}} limited number of <b>expression</b> <b>evaluation</b> methods: the current {{compilation}} mode can be checked to ensure it meets the assumptions the code was written under.|$|E
50|$|The {{order of}} <b>expression</b> <b>evaluation</b> is not {{specified}} {{in order to}} allow for optimization on parallel and vector machines. Of course, any operators for arrays of derived type must be defined.|$|E
40|$|A new cube operation, exorlink, is presented, {{as well as}} its {{application}} to the minimization of multiple-valued input, multi-output Exclusive Sums Of Products (ESOPs) for incompletely specified Boolean functions. Exorlink generalizes all cube operations such as crosslink. unlink or X-merge introduced by Helliwell, Perkowski, Sasao and other authors. Our program, EXORCISM-MV- 2, gives efficient results for functions that are incompletely specified and have an arbitrary number of values for each of the input variables. This allows to realize a wider class of circuits which imple-ment the multiple-valued input ESOP <b>expressions.</b> <b>Evaluation</b> on benchmark functions is also given and proves the superioriiy of the program to those known from the literature. 1...|$|R
5000|$|Expressions can {{be entered}} interactively in the REPL:$ scalaWelcome to Scala 2.12.2 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_131).Type in <b>expressions</b> for <b>evaluation.</b> Or try :help.scala> List(1, 2, 3).map(x => x * x)res0: ListInt = List(1, 4, 9)scala> ...|$|R
50|$|OpenModelica Shell (OMShell) is an {{interactive}} Command Line Interface that parses and interprets commands and Modelica <b>expressions</b> for <b>evaluation,</b> simulation, plotting, etc. The session handler also contains simple history facilities, and completion of file names and certain identifiers in commands.|$|R
5000|$|Temporary {{variables}} are created {{as the result}} of <b>expression</b> <b>evaluation</b> and are destroyed when the statement containing the expression has been fully evaluated (usually at the [...] {{at the end of a}} statement).|$|E
50|$|Features include {{breakpoints}} with conditionals and monitors; colorized {{source code}} display; graphical display panels showing threads, stack frames, visible variables, and loaded classes; command interface for more advanced features; Java-like <b>expression</b> <b>evaluation,</b> including method invocation.|$|E
50|$|Thonny is a Python IDE for beginners. It {{supports}} {{different ways}} of stepping through the code, step-by-step <b>expression</b> <b>evaluation,</b> detailed visualization of the call stack and a mode for explaining the concepts of references and heap.|$|E
40|$|Abstract: Arithmetic {{operations}} and <b>expression</b> <b>evaluations</b> are fundamental in computing models. We firstly designs {{a family of}} P systems for arithmetic operations (called arithmetic P systems) and gives the rules without priority. According to the arithmetic expression,an expression P system can be constructed through the algorithm and transmission rules proposed in this paper. Arithmetic P systems are one-membrane systems and several of them can make up an expression P system, where arithmetic operations can be performed in parallel and the computing results can be transmitted {{under the control of}} the transmission rules. Then a computing architecture can be built and based on it different expression P systems can be constructed by designing different parallel strategies...|$|R
5000|$|Molecular {{biologists}} {{perform a}} wide range of studies in gene <b>expression,</b> including genomics <b>evaluations</b> using several different platforms.|$|R
40|$|While {{the vision}} of Internet of Things (IoT) is rather inspiring, its {{practical}} implementation remains challenging. Conventional programming approaches prove unsuitable to provide IoT resource constrained devices with the distributed processing capabilities required to implement intelligent, autonomic, and self-organizing behaviors. In our previous work, we had already proposed an alternative programming methodology for such systems that is characterized by high-level programming and symbolic <b>expressions</b> <b>evaluation,</b> and developed a lightweight middleware to support it. Our approach allows for interactive programming of deployed nodes, and {{it is based on}} the simple but e ective paradigm of executable code exchange among nodes. In this paper, we show how our methodology can be used to provide IoT resource constrained devices with reasoning abilities by implementing a Fuzzy Logic symbolic extension on deployed nodes at runtime...|$|R
50|$|One of the {{earliest}} Apache 1.3 versions introduced some internal function for regular <b>expression</b> <b>evaluation.</b> This function is used by mod_gzip (for evaluating the filter rules), therefore mod_gzip would not work together with Apache 1.2.x or earlier versions.|$|E
50|$|A GenVoca {{model of}} a domain or {{software}} product line {{is a collection of}} base programs and features (see MetaModels and Program Cubes).The programs (expressions) that can be created defines a product line. Expression optimization is program design optimization, and <b>expression</b> <b>evaluation</b> is program generation.|$|E
5000|$|Tree {{contraction}} {{has been}} used in designing many efficient parallel algorithms, including <b>expression</b> <b>evaluation,</b> finding lowest common ancestors, tree isomorphism, graph isomorphism, maximal subtree isomorphism, common subexpression elimination, computing the 3-connected components of a graph, and finding an explicit planar embedding of a planar graph ...|$|E
40|$|Nowadays, Quality {{function}} deployment (QFD) {{is one of}} {{the total}} quality management tools, where customersâ€™ views and requirements are perceived and using various techniques improves the production requirements and operations. The QFD department, after identification and analysis of the competitors, takes customersâ€™ feedbacks to meet the customersâ€™ demands for the products compared with the competitors. In this study, a comprehensive model for assessing the importance of the customer requirements in the products or services for an organization is proposed. The proposed study uses linguistic variables, as a more comprehensive approach, to increase the precision of the <b>expression</b> <b>evaluations.</b> The importance of these requirements specifies {{the strengths and weaknesses of}} the organization in meeting the requirements relative to competitors. The results of these experiments show that the proposed method performs better than the other methods...|$|R
40|$|Abstract. This paper {{describes}} {{the design and}} implementation of an XML storage manager for fast and interactive XPath <b>expressions</b> <b>evaluation.</b> This storage manager has two main parts: the XML data storage structure and the index over this data. The system is designed {{in such a way}} that it minimizes the number of page reads for retrieving any XPath expression results while avoiding the shortcomings of previous work on storing XML data where the index must adapt to the most frequent queries. Hence, the main advantage of our index is that it can handle any new XPath expression without any need for adaptation. We show comparable performance of our design by presenting path evaluation results of our index against those of the currently most known index on documents of different sizes. ...|$|R
40|$|The {{probabilistic}} {{methods of}} conflict prediction and estimation of conflict situation are offered for en route flight. The mathematical statement of problem, {{the criterion of}} conflict detection, and randomized estimation procedure are presented. The analytical <b>expressions</b> for <b>evaluation</b> conflict probability are derived for estimation of air traffic safety in collision avoidance systems. </p...|$|R
50|$|DAX has a {{powerful}} type-handling system {{so that you do}} not have to worry much about data types. When you write a DAX expression, the resulting type is based on the type of the terms used in the expression and on the operator used. Type conversion happens automatically during the <b>expression</b> <b>evaluation.</b>|$|E
50|$|During <b>expression</b> <b>evaluation,</b> {{and in both}} languages, a {{boolean value}} may be {{internally}} stored as a single bit, a single byte, a full machine word, {{a position in the}} generated code, or as a condition code in a status register, depending on machine, compiler, and situation; these factors are usually more important than the language compiled.|$|E
5000|$|Also, C++11 {{stated that}} all non-static member {{functions}} that were declared [...] were also implicitly declared , {{with respect to}} [...] That has since been removed; non-static member functions may be non-. However, per the above restrictions, a non- [...] member function can only modify a class member if that object's lifetime began within the constant <b>expression</b> <b>evaluation.</b>|$|E
40|$|This paper {{explores the}} <b>expression</b> of <b>evaluation</b> and the {{treatment}} of 'the same event' in news reportage and journalistic commentary in two languages (English, Spanish). In our analysis of the evaluative dimension, we draw on the framework of Appraisal Theory (Martin 2000; Martin and White 2005; White 2003, White 2004, inter alia), and elaborate on {{the analysis of the}} categories of evaluation, subsumed under the notion of Engagement, in relation to writer stance and to the dimension of subjectivity and intersubjectivity. The paper reveals the presence and patterning of the various linguistic resources for the <b>expression</b> of <b>evaluation</b> in these subgenres of journalistic discourse, and establishes comparisons across languages. This paper presents results of research funded by the Comunidad de Madrid (Research project: La variaciÃ³n lingÃ¼Ã­stica en gÃ©neros y Ã¡mbitos discursivos en inglÃ©s y en castellano. Ref. : 06 /HSE/ 0272 / 2004) ...|$|R
40|$|Existing profile-guided partial {{redundancy}} elimination (PRE) methods use speculation {{to enable}} the removal of partial redundancies along more frequently executed paths {{at the expense of}} introducing additional <b>expression</b> <b>evaluations</b> along less frequently executed paths. While being capable of minimizing the number of <b>expression</b> <b>evaluations</b> in some cases, they are, in general, not computationally optimal in achieving this objective. In addition, the experimental results for their effectiveness are mostly missing. This work addresses the following three problems: (1) Is the computational optimality of speculative PRE solvable in polynomial time? (2) Is edge profiling â€” less costly than path profiling â€” sufficient to guarantee the computational optimality? (3) Is the optimal algorithm (if one exists) lightweight enough to be used efficiently in a dynamic compiler? In this paper, we provide positive answers to the first two problems and promising results to the third. We present an algorithm that analyzes edge insertion points based on an edge profile. Our algorithm guarantees optimally that the total number of computations for an expression in the transformed code is always minimized with respect to the edge profile given. This implies that edge profiling, which is less costly than path profiling, is sufficient to guarantee this optimality. The key in the development of our algorithm lies in the removal of some non-essential edges (and consequently, all resulting non-essential nodes) from a flow graph so that the problem of finding an optimal code motion is reduced to one of finding a minimal cut in the reduced (flow) graph thus obtained. We have implemented our algorithm in Intelâ€™s Open Runtime Platform (ORP). Our preliminary results over a number of Java benchmarks show that our algorithm is lightweight and can be potentially a practical component in a dynamic compiler. As a result, our algorithm can also be profitably employed in a profileguided static compiler, in which compilation cost can often be sacrificed for code efficiency...|$|R
40|$|International audienceTwo studies {{investigated}} {{the reactions of}} minority group members to messages about identity expression by ingroup and outgroup sources. Our main hypothesis was that compared to ingroup sources, outgroup sources arouse more anger when they argue for identity suppression. In the first study homosexuals evaluated an outgroup source arguing for identity suppression more negatively than an ingroup source, felt more threatened by this source and as a result, experienced stronger feelings of anger towards this source. The second study among members of a language-based minority replicated and extended these findings. Furthermore we showed that the anger that is experienced towards an outgroup source causes a willingness to change the opinion of this source. When ingroup or outgroup sources supported identity <b>expression,</b> <b>evaluations</b> and experience of anger {{did not differ in}} both studies. The importance of a source's group membership in reacting to opinions about one's group is discussed...|$|R
