10000|1594|Public
5|$|Finite {{symmetry}} {{groups such}} as the Mathieu groups are used in coding theory, which is in turn applied in <b>error</b> <b>correction</b> of transmitted data, and in CD players. Another application is differential Galois theory, which characterizes functions having antiderivatives of a prescribed form, giving group-theoretic criteria for when solutions of certain differential equations are well-behaved. Geometric properties that remain stable under group actions are investigated in (geometric) invariant theory.|$|E
5|$|Parallel {{computing}} {{can also}} {{be applied to the}} design of fault-tolerant computer systems, particularly via lockstep systems performing the same operation in parallel. This provides redundancy in case one component should fail, and also allows automatic error detection and <b>error</b> <b>correction</b> if the results differ. These methods can be used to help prevent single event upsets caused by transient errors. Although additional measures may be required in embedded or specialized systems, this method can provide a cost effective approach to achieve n-modular redundancy in commercial off-the-shelf systems.|$|E
25|$|Meeting this {{scalability}} {{condition is}} possible {{for a wide range}} of systems. However, the use of <b>error</b> <b>correction</b> brings with it the cost of a greatly increased number of required bits. The number required to factor integers using Shor's algorithm is still polynomial, and thought to be between L and L2, where L is the number of bits in the number to be factored; <b>error</b> <b>correction</b> algorithms would inflate this figure by an additional factor of L. For a 1000-bit number, this implies a need for about 104 bits without <b>error</b> <b>correction.</b> With <b>error</b> <b>correction,</b> the figure would rise to about 107 bits. Computation time is about L2 or about 107 steps and at 1nbsp&MHz, about 10 seconds.|$|E
30|$|Organisational benefits: {{increased}} {{project implementation}} efficiency (fewer <b>errors,</b> <b>corrections</b> and delays).|$|R
40|$|Standard <b>error</b> <b>corrections</b> for {{clustered}} samples impose untested {{restrictions on}} spatial correlations. Our example shows these are too conservative, {{compared with a}} spatial error model that exploits information on exact locations of observations, causing inference <b>errors</b> when cluster <b>corrections</b> are used. clustered samples; GPS; spatial correlation...|$|R
40|$|Using a typing task we {{investigated}} whether insufficient imagination of <b>errors</b> and <b>error</b> <b>corrections</b> {{is related to}} duration differences between execution and imagination. In Experiment 1 spontaneous error imagination was investigated, whereas in Experiment 2 participants were specifically instructed to imagine errors. Further, in Experiment 2 we manipulated correction instructions (whether or not to correct errors) and controlled for visual feedback in executed typing (letters appearing on the screen or not). Participants executed and imagined typing proverbs of different lengths. <b>Errors</b> and <b>error</b> <b>corrections</b> explained {{a significant amount of}} variance of execution minus imagination differences in Experiment 1, and in Experiment 2 when participants were instructed to correct errors, but not when participants were instructed not to correct errors. In Experiment 2 participants corrected and reported more errors with than without visual feedback. However, the relation between execution − imagination duration differences and <b>errors</b> and <b>error</b> <b>corrections</b> was unaffected by visual feedback. The types of errors reported less often in imagination than in execution were related to processes in typing execution. We conclude that <b>errors</b> and <b>error</b> <b>corrections</b> are not spontaneously imagined during motor imagery, and that even when attention is drawn to their occurrence only some are imagined. This may be due to forward models not predicting all aspects of an action, imprecise forward models, or a neglect of monitoring error signals during motor imagery...|$|R
25|$|In {{order to}} recover {{meaningful}} signal and error free audio from a signal impaired by interference and fading, the receiver uses concatenated Reed-Solomon block coding and Forward <b>Error</b> <b>Correction</b> encoding and decoding (codec). This technique was proven {{in the early}} days of satellite modems in the late 1970s. Linkabit, then run by Irwin Jacobs prior to his involvement with Qualcomm, offered such a codec for rack mounting in satellite earth stations. The Sirius signal uses more robust <b>error</b> <b>correction</b> on control channels than on the audio content, trading off <b>error</b> <b>correction</b> and bandwidth differently for separate categories of bits in the signal waveform.|$|E
25|$|CA {{have been}} applied to design <b>error</b> <b>correction</b> codes in a paper by D. Roy Chowdhury, S. Basu, I. Sen Gupta, and P. Pal Chaudhuri. The paper defines a new scheme of {{building}} single bit <b>error</b> <b>correction</b> and double bit error detection (SEC-DED) codes using CA, and also reports a fast hardware decoder for the code.|$|E
25|$|OFDM is {{invariably}} used {{in conjunction}} with channel coding (forward <b>error</b> <b>correction),</b> and almost always uses frequency and/or time interleaving.|$|E
50|$|J.Li, K.Ouazzane, S.Afzal and H.Kazemian (2011) ‘Patterns {{identification}} {{for hitting}} adjacent key <b>errors</b> <b>correction</b> using neural network models’ ICEIS 2011- 13th International Conference on Enterprise Information systems; Vol. 3 pp. 5, 2011.|$|R
40|$|Under general conditions, linear {{decision}} {{rules of}} agents with rational expectations are equivalent to restricted <b>error</b> <b>corrections.</b> However, empirical rejections of rational expectation restrictions are the rule, {{rather than the}} exception, in macroeconomics. Rejections often are conditioned {{on the assumption that}} agents aim to smooth only the levels of actions or are subject to geometric random delays. Generalizations of dynamic frictions on agent activities are suggested that yield closed-form, higher-order decision rules with improved statistical fits and infrequent rejections of rational expectations restrictions. Properties of these generalized "rational" <b>error</b> <b>corrections</b> are illustrated for producer pricing in manufacturing industries. Economics...|$|R
40|$|This paper {{reports a}} single 8. 2 mm by 8. 4 mm, 200, 000 {{transistor}} CMOS chip {{implementation of the}} Reed Solomon code required by the Space Telescope. The chip features a 10 MHz sustained byte rate independent of error pattern. The 1. 6 micron CMOS integrated circuit has complete decoder and encoder functions and uses a single data/system clock. Block lengths up to 255 bytes as well as shortened codes are supported with no external buffering. Erasure corrections as well as random <b>error</b> <b>corrections</b> are supported with programmable corrections of up to 10 symbol <b>errors.</b> <b>Correction</b> time is independent of error pattern {{and the number of}} errors...|$|R
25|$|The {{connection}} {{speed of}} a technology that involves forward <b>error</b> <b>correction</b> typically refers to the physical layer net bit rate {{in accordance with the}} above definition.|$|E
25|$|Modern drives make {{extensive}} use of <b>error</b> <b>correction</b> codes (ECCs), particularly Reed–Solomon <b>error</b> <b>correction.</b> These techniques store extra bits, determined by mathematical formulas, for each block of data; the extra bits allow many errors to be corrected invisibly. The extra bits themselves take up space on the HDD, but allow higher recording densities to be employed without causing uncorrectable errors, resulting in much larger storage capacity. For example, a typical 1TB hard disk with 512-byte sectors provides additional capacity of about 93GB for the ECC data.|$|E
25|$|A {{classical}} type of <b>error</b> <b>correction</b> coding {{used with}} OFDM-based systems is convolutional coding, often concatenated with Reed-Solomon coding. Usually, additional interleaving (on {{top of the}} time and frequency interleaving mentioned above) in between the two layers of coding is implemented. The choice for Reed-Solomon coding as the outer <b>error</b> <b>correction</b> code is based on the observation that the Viterbi decoder used for inner convolutional decoding produces short error bursts when there is a high concentration of errors, and Reed-Solomon codes are inherently well-suited to correcting bursts of errors.|$|E
50|$|Now, we {{will begin}} the {{discussion}} of cyclic codes explicitly with <b>error</b> detection and <b>correction.</b> Cyclic codes {{can be used to}} correct errors, like Hamming codes as a cyclic codes can be used for correcting single error. Likewise, they are also used to correct double errors and burst errors. All types of <b>error</b> <b>corrections</b> are covered briefly in the further subsections.|$|R
30|$|MAC [38]: The MAC layer {{functionalities}} include mapping between {{logical and}} control channels, RLC SDUs multiplexing/demultiplexing, scheduling, <b>error</b> <b>corrections</b> using hybrid ARQ (HARQ), priority handling of local channels, segmentation and reassembly of upper layer PDUs, padding, and ciphering.|$|R
40|$|Although {{previous}} studies {{indicated that the}} stability properties of interlimb coordination largely result from the integrated timing of efferent signals to both limbs, they also depend on afference-based interactions. In the present study, we examined contributions of afference-based <b>error</b> <b>corrections</b> to rhythmic bimanual coordination using a kinesthetic tracking task. Furthermore, since we found in previous research that subjects activated their muscles in the tracked (motor-driven) arm, we examined the functional significance of this activation to gain more insight into the processes underlying this phenomenon. To these aims, twelve subjects coordinated active movements of the right hand with motor-driven oscillatory movements of the left hand in two coordinative patterns: in-phase (relative phase 0 °) and antiphase (relative phase 180 °). They were either instructed to activate the muscles in the motor-driven arm as if moving along with the motor (active condition), or to keep these muscles as relaxed as possible (relaxed condition). We found that <b>error</b> <b>corrections</b> were more effective in in-phase than in antiphase coordination, resulting in more adequate adjustments of cycle durations to compensate for timing errors detected {{at the start of}} each cycle. In addition, <b>error</b> <b>corrections</b> were generally more pronounced in the active than in the relaxed condition. This activity-related difference was attributed to the associated bilateral neural control signals (as estimated using electromyography), which provided an additional reference (in terms of expected sensory consequences) for afference-based <b>error</b> <b>corrections.</b> An intimate relation was revealed between the (integrated) motor commands to both limbs and the processing of afferent feedback. © 2007 Springer-Verlag...|$|R
25|$|Newer systems, however, usually now adopt near-optimal {{types of}} <b>error</b> <b>correction</b> codes {{that use the}} turbo {{decoding}} principle, where the decoder iterates towards the desired solution. Examples of such <b>error</b> <b>correction</b> coding types include turbo codes and LDPC codes, which perform close to the Shannon limit for the Additive White Gaussian Noise (AWGN) channel. Some systems that have implemented these codes have concatenated them with either Reed-Solomon (for example on the MediaFLO system) or BCH codes (on the DVB-S2 system) to improve upon an error floor inherent to these codes at high signal-to-noise ratios.|$|E
25|$|Although this {{definition}} {{is sufficient to}} describe what a burst error is, {{the majority of the}} tools developed for burst <b>error</b> <b>correction</b> rely on cyclic codes. This motivates our next definition.|$|E
25|$|It is {{considerably}} {{larger than the}} advertised capacity {{in order to allow}} for distribution of writes (wear leveling), for sparing, for <b>error</b> <b>correction</b> codes, and for other metadata needed by the device's internal firmware.|$|E
25|$|IMC {{allows for}} greater {{interaction}} between language learners and native speakers of the language, providing for greater <b>error</b> <b>corrections</b> and better learning opportunities of standard language, {{in the process}} allowing the picking up of specific skills such as negotiation and persuasion.|$|R
50|$|In 1999, {{a revised}} {{edition of the}} book titled Game Over: Press Start to Continue - The Maturing of Mario (referencing Nintendo's famous {{character}} Mario) was released. Among <b>error</b> <b>corrections,</b> photographs and new chapters written by Andy Eddy were added.|$|R
50|$|In {{correcting}} <b>errors,</b> <b>correction</b> is a post-production {{exercise and}} basically {{deals with the}} linguistic errors. Often {{in the form of}} feedback, it draws learners' attention to the mistakes they have made and acts as a reminder of the correct form of language.|$|R
25|$|RTTY, {{using either}} AFSK or FSK modulation, is {{moderately}} resistant to vagaries of HF propagation and interference, however modern digital modes, such as MFSK, use Forward <b>Error</b> <b>Correction</b> to provide much better data reliability.|$|E
25|$|COFDM {{stands for}} Coded {{orthogonal}} frequency-division multiplexing. It differs from OFDM because in COFDM, forward <b>error</b> <b>correction</b> {{is applied to}} the signal before transmission. This is done to overcome errors. COFDM and OFDM are sometimes used as synonyms.|$|E
25|$|For {{more details}} on the {{sequences}} of operations used for various quantum algorithms, see universal quantum computer, Shor's algorithm, Grover's algorithm, Deutsch–Jozsa algorithm, amplitude amplification, quantum Fourier transform, quantum gate, quantum adiabatic algorithm and quantum <b>error</b> <b>correction.</b>|$|E
40|$|It {{has been}} a {{question}} of debate whether immediate <b>error</b> <b>corrections</b> in speeded forced-choice reaction time tasks require an error detection signal from the performance monitoring system or whether they reflect delayed correct responses that are executed after the premature error like in a horserace. In contrast, signaling the error by pressing a response button that is unrelated to the primary task is based on error detection. The present study investigates {{the similarities and differences}} between immediate <b>error</b> <b>corrections</b> and signaling responses by means of behavioral and event-related potential data. In a within-subject design, participants performed two sessions of the flanker task. In one session, errors had to be corrected by immediately pressing the correct response, in the other session, errors had to be signaled by pressing an error signaling button. Compared to the signaling session, in the <b>correction</b> session, more <b>errors</b> and <b>error</b> <b>corrections</b> were made, reaction times were shorter, and the amplitude of the error-related negativity (ERN) was reduced. Whereas the error significance did not seem to differ across session, participants have most likely reduced the motor threshold in the correction session to enable efficient immediate corrections. This interpretation is supported by the lateralized readiness potentials and is consistent with the response conflict monitoring hypothesis of the ERN. The present study demonstrates that differences in <b>error</b> <b>corrections</b> may be attributable to differences in motor threshold. We conclude that the error signaling procedure is a more direct and reliable way to behaviorally test the functional integrity of the performance monitoring system than the instruction to correct errors. The consequences for studies in patients and with pharmacological challenges are discussed...|$|R
40|$|Paper is {{dedicated}} to solving the problem of increasing the efficiency of detecting and correcting the data transmission burst errors brought on by external noises. For burst <b>errors</b> <b>correction</b> the utilization of special weighed check sum modification has been proposed. Algorithm for burst <b>error</b> detection and <b>correction</b> has been worked out. It {{has been shown that}} proposed techniques ensure superior data transformation error detecting and correcting effectiveness in compare to known correcting code. ?????? ????????? ??????? ???????? ????????? ????????????? ??????????? ? ??????????? ??????? ?????? ???????? ??????, ????????? ???????? ????????. ??? ??????????? ??????? ?????? ?????????? ???????????? ??????????? ??????????? ?????????? ??????????? ?????. ?????????? ???????? ??????????? ? ????????? ??????? ??????. ????????, ??? ???????????? ?????????? ???????????? ??????? ????????????? ??????????? ? ??????????? ?????? ?? ????????? ? ?????????? ??????????????? ??????...|$|R
5000|$|... #Subtitle level 4: <b>Error</b> prevention, <b>correction</b> and {{detection}} ...|$|R
25|$|The channel capacity, {{also known}} as the Shannon capacity, is a {{theoretical}} upper bound for the maximum net bitrate, exclusive of forward <b>error</b> <b>correction</b> coding, that is possible without bit errors for a certain physical analog node-to-node communication link.|$|E
25|$|In October 2005, the World DMB Forum {{instructed}} its Technical Committee {{to carry}} out the work needed to adopt the AAC+ audio codec and stronger <b>error</b> <b>correction</b> coding. This work led to the launch of the new DAB+ system.|$|E
25|$|Markov {{chains are}} also the basis for hidden Markov models, which are an {{important}} tool in such diverse fields as telephone networks (which use the Viterbi algorithm for <b>error</b> <b>correction),</b> speech recognition and bioinformatics (such as in rearrangements detection).|$|E
50|$|The {{standard}} {{was developed by}} the Audio Engineering Society beginning at the end of 2010. The {{standard was}} initially published September 2013. A second printing including a patent statement from Audinate was published in March 2014. An update including clarifications and <b>error</b> <b>corrections</b> was issued in September 2015.|$|R
5000|$|Continuously {{monitoring}} {{the status of}} interfering signal levels using current bit-loading compared to maximum achievable bit rate, number of errored seconds, number of severely errored seconds, number of forward <b>error</b> <b>corrections</b> (FEC) and making decisions about the underperforming scenario's cause and forcing the link to train in a specific way.|$|R
30|$|In this work, we {{presented}} {{a new version}} of the Mac-Morpho corpus, with <b>error</b> <b>corrections,</b> a new train/test split and some tag merges. We used this new resource to evaluate the performance of a neural network-based POS tagger and the impact of different kinds of word embeddings and attributes used as input.|$|R
