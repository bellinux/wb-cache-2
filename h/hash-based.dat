572|0|Public
25|$|Using {{a message}} digest {{enhanced}} {{with a key}} (so only a key-holder can check the MAC). The HMAC construction used by most TLS cipher suites is specified in RFC 2104 (SSL 3.0 used a different <b>hash-based</b> MAC).|$|E
50|$|<b>Hash-based</b> {{signature}} schemes rely {{on security}} {{assumptions about the}} underlying hash function, but any hash function fulfilling these assumptions can be used. As a consequence, each adequate hash function yields a different corresponding <b>hash-based</b> signature scheme. Even if a given hash function becomes insecure, it is sufficient to replace it by a different, secure one to obtain a secure instantiation of the <b>hash-based</b> signature scheme under consideration. Some <b>hash-based</b> signature schemes (such as XMSS with pseudorandom key generation) are forward secure, meaning that previous signatures remain valid if a secret key is compromised.|$|E
50|$|IOTA uses Winternitz <b>hash-based</b> {{cryptography}} signatures {{instead of}} elliptic curve cryptography (ECC). Not only are <b>hash-based</b> signatures {{much faster than}} ECC, they also greatly simplify the signing and verification process and reduce overall complexity of the Tangle protocol.|$|E
50|$|<b>Hash-based</b> {{cryptography}} is {{the generic}} term for constructions of cryptographic primitives {{based on the}} security of hash functions. So far, <b>hash-based</b> cryptography is limited to digital signatures schemes such as the Merkle signature scheme. <b>Hash-based</b> signature schemes combine a one-time signature scheme with a Merkle tree structure. Since a one-time signature scheme key can only sign a single message securely, it is practical to combine many such keys within a single, larger structure. A Merkle tree structure is used to this end. In this hierarchical data structure, a hash function and concatenation are used repeatedly to compute tree nodes. Lamport signatures are {{an example of a}} one-time signature scheme that can be combined with a Merkle tree structure. <b>Hash-based</b> cryptography is a type of post-quantum cryptography.|$|E
5000|$|Since Merkle's initial scheme, {{numerous}} <b>hash-based</b> signature schemes {{with performance}} improvements have been introduced. Recent ones include the XMSS scheme, the Leighton-Micali (LMS) and the SPHINCS scheme. Most <b>hash-based</b> signature schemes are stateful, meaning that signing requires updating the secret key, unlike conventional digital signature schemes. For stateful <b>hash-based</b> signature schemes, signing requires keeping {{state of the}} used one-time keys and making sure they are never reused. The XMSS and LMS schemes are stateful, while the SPHINCS scheme is stateless. SPHINCS signatures are larger than XMSS and LMS signatures. Additionally to the WOTS+ one-time signature scheme, SPHINCS also uses a few-time (<b>hash-based)</b> signature scheme called HORST. HORST is an improvement of an older few-time signature scheme, HORS (Hash to Obtain Random Subset).|$|E
5000|$|... #Subtitle level 2: Properties of <b>hash-based</b> {{signature}} schemes ...|$|E
5000|$|... #Subtitle level 3: <b>Hash-based</b> {{cryptography}} - Merkle signature scheme ...|$|E
50|$|<b>Hash-based</b> {{signature}} schemes use one-time signature schemes {{as their}} building block. A given one-time signing key {{can only be}} used to sign a single message securely. Indeed, signatures reveal part of the signing key. The security of (<b>hash-based)</b> one-time signature schemes relies exclusively on the security of an underlying hash function.|$|E
50|$|Ralph Merkle invented <b>hash-based</b> {{signatures}} in 1979. The XMSS (eXtended Merkle Signature Scheme) and SPHINCS <b>hash-based</b> signature schemes {{were introduced}} in 2011 and 2015, respectively. XMSS is based both on Merkle's seminal scheme and on the 2007 Generalized Merkle Signature Scheme (GMSS). A multi-tree variant of XMSS, XMSSMT, was described in 2013.|$|E
5000|$|... #Subtitle level 2: Combining many {{one-time}} key pairs into a <b>hash-based</b> signature scheme ...|$|E
50|$|In February 2015, Bernstein {{and others}} {{published}} {{a paper on}} stateless post-quantum <b>hash-based</b> signatures, called SPHINCS.|$|E
50|$|BeyondRaid {{offers a}} RAID 6-like feature and can perform <b>hash-based</b> {{compression}} using 160-bit SHA1 hashes to maximize storage efficiency.|$|E
5000|$|Park, Jong Soo, Ming-Syan Chen, and Philip S. Yu. An {{effective}} <b>hash-based</b> algorithm for mining association rules. Vol. 24. No. 2. ACM, 1995.|$|E
50|$|Message {{authentication}}: For TLS, a <b>hash-based</b> {{message authentication}} code using MD5 {{or one of the}} SHA hash functions is used. For SSL, SHA, MD5, MD4, and MD2 are used.|$|E
50|$|With the {{introduction}} of the DroboPro, a RAID6 like feature was also introduced. BeyondRAID also has the ability to perform <b>hash-based</b> compression using 160-bit SHA1 hashes to maximize storage efficiency.|$|E
50|$|A similar {{solution}} {{has been}} constructed for constrained SCADA networks. This involves applying a <b>Hash-Based</b> Message Authentication Code to byte streams, converting the random-error detection available on legacy systems to a mechanism that guarantees data authenticity.|$|E
5000|$|Alice computes point [...] Bob computes point [...] The shared {{secret is}} [...] (the x {{coordinate}} of the point). Most standardized protocols based on ECDH derive a symmetric key from [...] using some <b>hash-based</b> key derivation function.|$|E
5000|$|Using {{a message}} digest {{enhanced}} {{with a key}} (so only a key-holder can check the MAC). The HMAC construction used by most TLS cipher suites is specified in RFC 2104 (SSL 3.0 used a different <b>hash-based</b> MAC).|$|E
50|$|In {{the case}} of {{stateless}} <b>hash-based</b> signatures, few-time signature schemes are used. Such schemes allow security to decrease gradually in case a few-time key is used more than once. HORST {{is an example of}} a few-time signature scheme.|$|E
5000|$|Two IRTF Internet Drafts on {{stateful}} <b>hash-based</b> schemes (XMSS/XMSSMT and LMS) {{are currently}} active. Practical improvement {{have been proposed}} in the literature that alleviate the concerns introduced by stateful schemes. Hash functions appropriate for these schemes include SHA-2, SHA-3 and BLAKE ...|$|E
50|$|Some <b>hash-based</b> {{signature}} schemes use multiple {{layers of}} tree, offering faster signing {{at the price of}} larger signatures. In such schemes, only the lowest layer of trees is used to sign messages, while all other trees sign root values of lower trees.|$|E
50|$|Fault {{tolerance}} : How {{important it}} is for the service to be reliable. Issues include dealing with index corruption, determining whether bad data can be treated in isolation, dealing with bad hardware, partitioning, and schemes such as <b>hash-based</b> or composite partitioning, as well as replication.|$|E
5000|$|Because {{of their}} {{reliance}} on an underlying one-time signature scheme, <b>hash-based</b> signature schemes can only sign {{a fixed amount}} of messages securely. In {{the case of the}} Merkle and XMSS schemes, a maximum of [...] messages can be signed securely, with [...] the total Merkle tree height.|$|E
5000|$|The <b>hash-based</b> message {{authentication}} code (HHH) is computed against a local secret, but {{only a part of}} it is used; for example, storing the first 4 characters of a base64 representation provides 24 bits of security. The hash is checked by the domain who generated it, in case a bounce arrives.|$|E
50|$|This {{includes}} cryptographic {{systems such}} as Lamport signatures and the Merkle signature scheme and the newer XMSS and SPHINCS schemes. Hash based digital signatures were invented in the late 1970s by Ralph Merkle and have been studied ever since as an interesting alternative to number-theoretic digital signatures like RSA and DSA. Their primary drawback is that for any <b>hash-based</b> public key, {{there is a limit}} on the number of signatures that can be signed using the corresponding set of private keys. This fact had reduced interest in these signatures until interest was revived due to the desire for cryptography that was resistant to attack by quantum computers. There appear to be no patents on the Merkle signature scheme and there exist many non-patented hash functions that could be used with these schemes. The XMSS <b>hash-based</b> signature scheme is currently undergoing standardisation at IETF.|$|E
50|$|In <b>hash-based</b> cryptography, the Merkle {{signature}} {{scheme is}} a digital signature {{scheme based on}} hash trees (also called Merkle trees) and one-time signatures such as the Lamport signature scheme. It was developed by Ralph Merkle in the late 1970s and is an alternative to traditional digital signatures such as the Digital Signature Algorithm or RSA.|$|E
50|$|In contrast, with version 1 and 2 UUIDs using randomly-generated node ids, <b>hash-based</b> version 3 and 5 UUIDs, {{and random}} version 4 UUIDs, {{collisions}} can occur even without implementation problems, albeit with a probability {{so small that}} it can normally be ignored. This probability can be computed precisely based on analysis of the birthday problem.|$|E
50|$|<b>Hash-based</b> {{verification}} {{ensures that}} a file {{has not been}} corrupted by comparing the file's hash value to a previously calculated value. If these values match, the file is presumed to be unmodified. Due {{to the nature of}} hash functions, hash collisions may result in false positives, but the likelihood of collisions is often negligible with random corruption.|$|E
50|$|Moving a step further, {{augmented}} {{systems for}} password-authenticated key agreement (e.g., AMP, B-SPEKE, PAK-Z, SRP-6) avoid both {{the conflict and}} limitation of <b>hash-based</b> methods. An augmented system allows a client to prove knowledge of the password to a server, where the server knows only a (not exactly) hashed password, and where the unhashed password is required to gain access.|$|E
50|$|Another {{significant}} difference is <b>hash-based</b> proof-of-work algorithm. Bitcoin uses SHA256, which is CPU-bound function. That means that participants (miners) are only limited by their calculation speeds, {{and it is}} relatively cheap to create an application-specific integrated circuit (ASIC) device, which will surpass an ordinary computer in hashes per unit of money. CryptoNote uses memory bound function CryptoNight, which cannot be easily pipelined.|$|E
50|$|The {{ability to}} change {{locators}} while a communication is being held introduces security problems, so mechanisms based on applying cryptography to the address generation process (Cryptographically Generated Addresses, CGA), or on bounding the addresses to the prefixes assigned to a host through <b>hash-based</b> addresses were defined. These approaches are not needed for IPv4 because of the short address length (32 bits).|$|E
50|$|PBKDF2 applies a {{pseudorandom}} function, such as <b>hash-based</b> {{message authentication}} code (HMAC), to the input password or passphrase along with a salt value and repeats the process many times to produce a derived key, which can then {{be used as a}} cryptographic key in subsequent operations. The added computational work makes password cracking much more difficult, and is known as key stretching.|$|E
50|$|John Gardiner Myers {{published}} {{the first draft}} of SMTP AUTH in 1995, and it has been successively developed and discussed in the IETF along with mail submission protocol, Extended SMTP (ESMTP), and Simple Authentication and Security Layer (SASL). An older SASL mechanism for ESMTP authentication (ESMTPA) is CRAM-MD5, and uses of the MD5 algorithm in HMACs (<b>hash-based</b> message authentication codes) are still considered sound.|$|E
50|$|The minimality of {{security}} assumptions is another characteristic of <b>hash-based</b> signature schemes. Generally, these schemes only require a secure (for instance {{in the sense}} of second preimage resistance) cryptographic hash function to guarantee the overall security of the scheme. This kind of assumption is necessary for any digital signature scheme; however, other signature schemes require additional security assumptions, which is not the case here.|$|E
50|$|TOTP is {{an example}} of a <b>hash-based</b> message {{authentication}} code (HMAC). It combines a secret key with the current timestamp using a cryptographic hash function to generate a one-time password. Because network latency and out-of-sync clocks can result in the password recipient having to try a range of possible times to authenticate against, the timestamp typically increases in 30-second intervals, which thus cuts the potential search space.|$|E
50|$|He {{has worked}} on design of various Digital {{signature}} schemes, and in particular, contributed to the foundations of signature schemes where for general signature scheme it was shown that one does not need the trapdoor property of the underlying functions; the work introduces (as a central tool) the basic primitive of Universal one-way hash function. The work is central in understanding practical signature schemes within the <b>Hash-based</b> cryptography framework.|$|E
