6|641|Public
25|$|Complies {{with all}} {{electrical}} requirements – <b>Electrical</b> <b>Rule</b> <b>Checking</b> (ERC).|$|E
5000|$|Complies {{with all}} {{electrical}} requirements - <b>Electrical</b> <b>Rule</b> <b>Checking</b> (ERC).|$|E
5000|$|Figure 2 again {{looks at}} TCAD {{capabilities}} {{but this time}} more {{in the context of}} design flow information and how this relates to the physical layers and modeling of the electronic design automation (EDA) world. Here the simulation levels of process and device modeling are considered as integral capabilities (within TCAD) that together provide the [...] "mapping" [...] from mask-level information to the functional capabilities needed at the EDA level such as compact models ("technology files") and even higher-level behavioral models. Also shown is the extraction and <b>electrical</b> <b>rule</b> <b>checking</b> (ERC); this indicates that many of the details that to date have been embedded in analytical formulations, may in fact also be linked to the deeper TCAD level in order to support the growing complexity of technology scaling.|$|E
5000|$|<b>Electrical</b> <b>rule</b> <b>check</b> (ERC) {{involves}} checking {{a design}} for all electrical connections {{that are considered}} dangerous. This might include checking for ...|$|R
50|$|Physical {{verification}} is {{a process}} whereby an integrated circuit layout (IC layout) design is checked via EDA software tools {{to see if it}} meets certain criteria. Verification involves design <b>rule</b> <b>check</b> (DRC), layout versus schematic (LVS), <b>electrical</b> <b>rule</b> <b>check</b> (ERC), XOR (exclusive OR), and antenna checks.|$|R
50|$|Eeschema has {{features}} including hierarchical schematic sheets, custom symbol creation, and an ERC (<b>electrical</b> <b>rules</b> <b>check).</b> Schematic {{symbols in}} Eeschema are very loosely coupled to footprints in Pcbnew to encourage reuse of footprints and symbols (e.g. a single 0805 footprint {{can be used}} for capacitors, resistors, inductors, etc.).|$|R
40|$|A new {{approach}} to general netlist design rule checking is presented, which has been successfully applied to design for testability (DFT) rule checking and <b>electrical</b> <b>rule</b> <b>checking.</b> Core of the checker is an interpreter, which performs operations of a set-based calculus. In combination with hierarchy preprocessing by expansion and netlist pattern matching, the interpreter approach {{turned out to be}} flexible and efficient...|$|E
40|$|This paper {{presents}} electrical verification in GaAs DCFL VLSI circuits. A set {{of about}} thirty rules {{that deal with}} both static and dynamic electrical aspects has been especially defined. Moreover, because {{of the complexity of}} GaAs circuits, a software tool has been developed to perform this verification automatically. VITESSE HGaAsII process has been targeted but the software which uses a parameter file, is process independent. 1 Introduction The design of high speed GaAs digital circuits requires a very well-defined methodology because of the noise and power limitations of such technologies. More precisely, beyond the fact that bad transistor sizing leads to circuits with under-optimal delay performance, it sometimes leads to circuits which don't work at all. This is a very important difference between DCFL and CMOS. It follows that in addition to careful design, an automatic <b>electrical</b> <b>rule</b> <b>checking</b> step must be included in the validation procedure. The first part of the paper presen [...] ...|$|E
40|$|The design, {{simulation}} and {{layout of}} a controller chip {{set for a}} morphological array image processor shall be discussed. These VLSI chips {{in conjunction with the}} Morphological Array Processor (MAP) and Arithmetic Logic Unit (ALU) chip sets perform the morphological image processing operations of erosion and dilation on 512 x 512 pixel, 8 -bit gray scale images using a 7 x 7 windowing matrix in real time (60 frames per second). The controller chip set design allows for pipelining of successive MAP 2 ̆ 7 s as well as operation on 1024 x 1024 pixel, 8 -bit gray scale images. To facilitate the design, additional scaleable CMOS standard library cells and corresponding parameterized schematic library components were designed and integrated with the RIT CMOS standard cell library designed by Computer Engineering graduate student Larry Rubin as part of his Masters thesis 1. In particular, additional D flip-flops with both Q and Q bar outputs, and-orinverts, or-and-inverts, CMUXes, and MOSIS 64 and 84 pin pad rings were created. The cells were designed to be fabricated using the Metal Oxide Semiconductor Implementation System (MOSIS) scaleable CMOS 2. 0 pm Nwell (SCN) process. A complete set of Cadence design rule verification tools were also integrated with the existing CAE tool set to perform design rule checking (DRC), <b>electrical</b> <b>rule</b> <b>checking</b> (ERC), layout versus schematic checking (LVS), and layout parameter extraction (LPE) for the MOSIS SCN 2. 0 pm N-well dense rule set. To verify the CMOS standard cell designs, test chips were designed and sent to MOSIS for fabrication. The layout and design rule verification of the final two test chips, test chips five and six, was performed by the author. Test chip four contains a variety of MUXes and D flip-flops, test chip five contains a variety of transfer gates and inverters. The controller chip set consists of a 64 pin control chip (Controller) and an 84 pin memory controller chip (Mem_Control). The controller chips provide the ability to selectively process 512 x 512 or 1024 x 1024 image sizes by modifying the pullup or pulldown of a 2 ̆ 2 size 2 ̆ 2 bit. A selectable delay was implemented, through the pullup or pulldown setup of three delay bits, in the Controller to allow the Controller to be used with the single chip VLSI MAP design, the seven chip VLSI MAP design, and the Actel gate array MAP. The controller chip set allows successive MAPs to be pipelined by connecting the next Controllers pipeline start pin to the previous stages pipeline start next pin...|$|E
50|$|Design <b>rule</b> <b>checking</b> or check(s) (DRC) is {{the area}} of {{electronic}} design automation that determines whether the physical layout of a particular chip layout satisfies a series of recommended parameters called design <b>rules.</b> Design <b>rule</b> <b>checking</b> is a major step during physical verification signoff on the design, which also involves LVS (layout versus schematic) check, XOR <b>checks,</b> ERC (<b>electrical</b> <b>rule</b> <b>check)</b> and antenna checks. For advanced processes some fabs also insist upon the use of more restricted rules to improve yield.|$|R
40|$|Structural pattern {{matching}} {{is an important}} part of the microchip design verification process. It is necessary to isolate semantic structural contexts in a given design netlist in order to be able to perform flexible and intelligent checks like, for example LVS (Layout Versus Schematics), ERC (<b>Electrical</b> <b>Rule</b> <b>Checks),</b> gate level netlist timing analysis and others. Because of that, many different algorithms were devised to support this particular segment of chip verification. The theoretical basis for these algorithms is {{pattern matching}} in graphs, i. e. subgraph isomorphism. Algorithms developed so far are working with flat input netlists. This is not efficient and limits the application of the mentioned algorithms due to the flat netlist´s extensive size. Making the pattern matching hierarchical can improve the processes of chip design verification and simulation. We provide the solution for the problem of the structural pattern matching in hierarchical netlists by defining the new methodology which employs the concept of Layered Views to present the hierarchical layout of a given netlist in a "friendly " wa...|$|R
40|$|A {{vast array}} of CAD tools are {{available}} to support the design of integrated circuits. Unfortunately, tool development lags advances in technology and design methodology - the newest, most aggressive custom chips confront design issues that were not anticipated by the currently available set of tools. When existing tools cannot fill a custom design's needs, a new tool must be developed, often in a hurry. This situation arises fairly often, {{and many of the}} tools created use, or imply, some method of netlist pattern recognition. If the pattern-oriented facet of these tools could be isolated and unified among a variety of tools, custom tool writers would have a useful building block to start with when confronted with the urgent need for a new tool. Starting with the UNIX pattern-matching, text-processing tool awk as a model, a pattern-action netlist processing environment was built to test the concept of writing CAD tools by specifying patterns and actions. After implementing a wide variety of netlist processing applications, the refined pattern-action system proved to be a useful and fast way to implement new tools. Previous work in this area had reached the same conclusion, demonstrating the usefulness of pattern recognition for <b>electrical</b> <b>rules</b> <b>checking,</b> simulation, database conversion, and more. Our experiments identified a software building block, the "pattern object", that can construct the operators proposed in other works while maintaining flexibility in the face of changing requirements through the decoupling of global control from a pattern matching engine. The implicit computation of subgraph isomorphism common to pattern matching systems was thought to be a potential runtime performance issue. Our experience contradicts this concern. VLSI netlists tend to be [...] ...|$|R
40|$|As {{more and}} more {{architectural}} design and construction data is represented using the Resource Description Framework (RDF) data model, {{it makes sense to}} take advantage of the logical basis of RDF and implement a semantic <b>rule</b> <b>checking</b> process as it is currently not available in the architectural design and construction industry. The argument for such a semantic <b>rule</b> <b>checking</b> process has been made a number of times by now. However, there are a number of strategies and approaches that can be followed regarding the realization of such a <b>rule</b> <b>checking</b> process, even when limiting to the use of semantic web technologies. In this article, we compare three reference <b>rule</b> <b>checking</b> approaches that have been reported earlier for semantic <b>rule</b> <b>checking</b> in the domain of architecture, engineering and construction (AEC). Each of these approaches has its advantages and disadvantages. A criterion that is tremendously important to allow adoption and uptake of such semantic <b>rule</b> <b>checking</b> approaches, is performance. Hence, this article provides an overview of our collaborative test results in order to obtain a performance benchmark for these approaches. In addition to the benchmark, a documentation of the actual <b>rule</b> <b>checking</b> approaches is discussed. Furthermore, we give an indication of the main features and decisions that impact performance for each of these three approaches, so that system developers in the construction industry can make an informed choice when deciding for one of the documented <b>rule</b> <b>checking</b> approaches...|$|R
40|$|Among various {{applications}} of Building Information Modeling, the expected outcomes of using automated building permit {{system is to}} increase efficiency of entire permit process, and to improve building design quality. As {{a part of the}} automated building permit process, this paper aims to define and classify high-level <b>rule</b> <b>checking</b> methods needed to translate Korea Building permit requirements into computer executable format. Unlike developer-centered method employed in the current <b>rule</b> <b>checking</b> tools, the proposed <b>rule</b> <b>checking</b> method is devised based on various law sentences. Therefore, it is high-level method that directly matches to the content of law sentences and delivers the meaning of the content intuitively. The current study can be summarized as follows; 1) defining classification for the high-level <b>rule</b> <b>checking</b> method, 2) classifying the <b>rule</b> <b>checking</b> methods developed from the selective building permit requirements, and 3) demonstrating the translation of actual requirements. The translation results in intermediate code that later be parsed into open format such as XML or script language. ? ??? ????? ???? ??????? ?????(14 AUDP-C 067809 - 02)) ? ?? ???????...|$|R
2500|$|Complies {{with all}} {{technology}} requirements – Design <b>Rule</b> <b>Checking</b> (DRC) ...|$|R
5000|$|Complies {{with all}} {{technology}} requirements - Design <b>Rule</b> <b>Checking</b> (DRC) ...|$|R
5000|$|... {{the first}} chip checked with SSi's {{proprietary}} <b>rules</b> <b>checking</b> software ...|$|R
40|$|This paper aims to {{describe}} <b>rule</b> <b>checking</b> method, classification and its demonstration. As applications of BIM extends, {{there have been}} some challenging projects on automated building compliance checking. The current rule-making method is developercentered and thus is difficult to define rules without propound programming knowledge. This paper introduces high level rule making methods with law sentence-centered approach. The proposed methods have intuitive naming convention and are directly mapped with the predicate of the law sentences. Therefore, it is easy to infer function of the methods. According to the type of object and property in instance level, three hierarchies of method classification were set: 1) level 1 divides types of instance, 2) level 2 classifies the type of property, and 3) level 3 specifies the content of checking. From the level 3, representative <b>rule</b> <b>checking</b> method is defined. The representative method is subdivided into extended methods according to the specific object and property to <b>check.</b> The <b>rule</b> <b>checking</b> methods are combined together to form an intermediate pseudocode. The pseudo-code is later to be parsed into computer executable form. This paper mainly focuses on 1) introducing law sentence -centered <b>rule</b> <b>checking</b> method, 2) object and property-based classification of <b>rule</b> <b>checking</b> method, 3) method extensibility and 4) demonstration of <b>rule</b> <b>checking</b> methods with actual requirement sentences from the Korea Building Permit. The high level <b>rule</b> <b>checking</b> method is developed as a part of KBimLogic. KBimLogic is a software that translates the Korea Building Permit requirement into computer executable format. KBimLogic is now under development with government funding. This research was supported by a grant (14 AUDP-C 067809 - 02) from Architecture & Urban Development Research Program funded by Ministry of Land, Infrastructure and Transport of Korean government...|$|R
50|$|A DRC (design <b>rules</b> <b>check)</b> is {{available}} to check for common logical errors.|$|R
5000|$|Transform (clean, apply {{business}} <b>rules,</b> <b>check</b> {{for data}} integrity, create aggregates or disaggregates) ...|$|R
5000|$|<b>Electrical</b> <b>Rules</b> and Tables {{for the use}} of Electricians and Engineers (1894) ...|$|R
40|$|Currently, the Integrated Circuit Editor (ICE), a CAD I. C. {{design tool}} used for layouts at RIT, lacks any design <b>rule</b> <b>checking</b> {{simulation}} capabilities. This project involved writing {{a program that}} would translate the output file from ICE in the CalTech Intermediate Format (CIF) into a format that would be readable by other software tools, such as design <b>rule</b> <b>checking</b> and circuit node extraction programs...|$|R
40|$|This report {{describes}} {{the design and}} implementation of a complete VLSI design <b>rule</b> <b>checking</b> program. We use formal techniques to develop a methodology for performing design <b>rule</b> <b>checking,</b> and implement this methodology in the Scheme programming language. We specify the requirements for a simplified VLSI design database and implement it, making use of the Hilbert R-tree. We describe the implementationof an efficient algorithm for the decompositionof rectilinear polygons into collections of rectangles. We apply partial evaluation techniques to our final design <b>rule</b> <b>checking</b> program {{in order to determine}} the effect this has on our program's structure and performance. Finally, we describe the implementation of a graphical user interface for the checker and summarise our experiences and insights gained during the course of this project...|$|R
50|$|Applications {{are deemed}} {{received}} after business <b>rules</b> <b>check</b> is successfully passed and provided ECHA fees are paid on time.|$|R
5000|$|... check process flows {{using these}} <b>rules.</b> This <b>rule</b> <b>check</b> verifies the {{principle}} manufacturability {{of a newly}} designed manufacturing flow.|$|R
40|$|Verifying an {{implementation}} {{produced from}} high-level synthesis is a challenging problem due to many complex design tasks {{involved in the}} design process. In this paper, we present an architectural <b>rule</b> <b>checking</b> approach for highlevel design verification. This technique detects and locates various design errors and verifies both the consistency and correctness of an implementation. Besides describing different rule suites, we also report a working environment for the architectural <b>rule</b> <b>checking.</b> Finally, we highlight {{the value of the}} proposed approach with a real-life design...|$|R
40|$|Design <b>Rule</b> <b>Checking</b> is a compute-intensive VLSI CAD tool. In {{this paper}} we propose a {{parallel}} algorithm to perform Design <b>Rule</b> <b>Check</b> (DRC) of Layout geometries in a VLSI layout. The algorithm assumes the parallel architecture to be a two-dimensional mesh of processors. The algorithm is based on a linear quadtree representation of the layout. Through a complexity analysis it is shown {{that it is possible to}} achieve a linear speedup in DRC with respect to the number of processors...|$|R
40|$|This study {{focuses on}} the {{development}} of a new, formal method for the automated checking of pedestrian circulation rules in Courthouse Design Guide. Automated building <b>rule</b> <b>checking</b> is an automated process of design evaluation against design requirements. Since the early 1970 's, when the electronic representation of building design became available, automated building <b>rule</b> <b>checking,</b> a computational process, has been a focus of study, and it continues to be a popular research area because it facilitates the design evaluation process by reducing the checking time and evaluation costs and by increasing the objectivity and the reliability of the evaluation. Thanks to the emergence of BIM (Building Information Model) authoring software, BIM became available to use in real building design, and several automated building code checking systems were developed based on BIM. In practice, the use of a <b>rule</b> <b>checking</b> system in real design evaluation may be influenced by several factors. Among the factors that affect the accuracy and the reliability of automated checking such as <b>checking</b> algorithms and <b>rule</b> interpretation is the level of completeness of the BIM in the design process, which can cause limitations in the application of a <b>rule</b> <b>checking</b> algorithm to the model. Problems caused by the incompleteness of the BIM occurred in CORENET project, a project initiated by the Singapore government in 1999 for automation of building code checking, and GSA Courthouse Design Guide Automation project (GSA), initiated at Georgia Tech in 2007 also faced with the same problems caused by incompleteness of BIM in the development stage. This thesis is a continuing research of GSA-Courthouse Design Guide Automation project (Simply, GSA project). The theoretical goals of this study are to provide a logical foundation upon which one can build an automated checking module for circulation <b>rule</b> <b>checking</b> and that is capable of outlining the rule-validation process independently from its diverse implementation. The theory for circulation <b>rule</b> <b>checking</b> is devised to represent the process of the validation of a building design in the development stage. The theory deals with issues of validation caused by the lack of data {{in the development of a}} building design. Ph. D. Committee Chair: Eastman, chuck; Committee Member: do, ellen; Committee Member: kam, calvin; Committee Member: Peponis, John; Committee Member: solihin, wawa...|$|R
50|$|OrCAD PCB Designer is {{a printed}} circuit board {{designer}} application, and part of the OrCAD circuit design suite. PCB Designer includes various automation features for PCB design, board-level analysis and design <b>rule</b> <b>checks</b> (DRC).|$|R
5000|$|Checkstyle {{defines a}} set of {{available}} modules, each of which provides <b>rules</b> <b>checking</b> with a configurable level of strictness (mandatory, optional...). Each rule can raise notifications, warnings, and errors. For example, checkstyle can examine: ...|$|R
50|$|Guardian is a {{suite of}} DRC/LVS/LPE {{physical}} verification products. They provide verification of analog, mixed signal and RF IC designs, perform design <b>rule</b> <b>checks</b> (DRC), layout vs. schematic (LVS) comparisons, and layout parameter extractions (LPE).|$|R
50|$|Semi-optimistic - Block {{operations}} in some situations, if they may cause violation of some rules, {{and do not}} block in other situations while delaying <b>rules</b> <b>checking</b> (if needed) to transaction's end, as done with optimistic.|$|R
50|$|Keysight ADS {{supports}} {{every step}} of the design process—schematic capture, layout, design <b>rule</b> <b>checking,</b> frequency-domain and time-domain circuit simulation, and electromagnetic field simulation—allowing the engineer to fully characterize and optimize an RF design without changing tools.|$|R
50|$|ECAD's {{first product}} was Dracula, {{introduced}} in April 1983. It included a design-rule checker, an <b>electrical</b> <b>rule</b> checker, and a layout-versus-schematic consistency checker among other programs. This {{was followed by}} SYMBAD, an IC layout product suite.|$|R
50|$|A {{successful}} design <b>rule</b> <b>check</b> (DRC) {{ensures that}} the layout conforms to the rules designed/required for faultless fabrication. However, it does not guarantee if it really represents the circuit you desire to fabricate. This is where an LVS check is used.|$|R
40|$|Today’s {{electronics}} {{in aviation}} (avionics) {{are more complex}} than ever before. With higher requirements on safety and reliability and with new SoC (System on Chip) technology, the validation and verification of designs meet new challenges. In commercial and military aircraft there are many safety-critical systems {{that need to be}} reliable. The consequences of a failure of a safety-critical system onboard a civil or military aircraft are immeasurably more serious than a glitch or a bit-flip in a consumer appliance or Internet service delivery. If possible hazards are found early in the design process, a lot of work can be saved later on. Certain structures in the code are prone to produce glitchy logic and timing problems and should be avoided. This thesis will strengthen Saab Avitronics knowledge of adaptable <b>rule</b> <b>checking</b> tools for HDL, with a market analysis of the tools available. Moreover will it evaluate two of the most suitable tools and finally it will describe some of the design issues that exist when coding safety-critical systems. Finally it is concluded that the introduction of static <b>rule</b> <b>checking</b> tools will help the validator to find dangerous constructs in the code. However, it will not be possible to fully automate <b>rule</b> <b>checking</b> for safety-critical systems, because of the high requirements on reliability...|$|R
