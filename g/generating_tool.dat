51|1655|Public
50|$|Citation Machine (2000-present) - A {{citation}} <b>generating</b> <b>tool</b> developed initially for teachers, for citing their {{instructional materials}} and modeling {{appropriate use of}} intellectual property.|$|E
50|$|A {{generating}} rack is a rack outline used to indicate tooth details and dimensions {{for the design}} of a <b>generating</b> <b>tool,</b> such as a hob or a gear shaper cutter.|$|E
5000|$|A {{developer}} using a bottom-up model writes implementing classes first (in some programming language), {{and then}} uses a WSDL <b>generating</b> <b>tool</b> to expose methods from these classes as a web service. This is simpler to develop {{but may be}} harder to maintain if the original classes are subject to frequent change.|$|E
5000|$|Modeling and code <b>generating</b> <b>tools</b> {{often based}} on state {{machines}} ...|$|R
5000|$|... b) All-Hexahedral: As of mid-2009 {{there are}} a few all-hexahedral mesh <b>generating</b> <b>tools.</b> Some of them are (in {{alphabetical}} order) ...|$|R
40|$|AbstractIn {{order to}} develop an {{autonomous}} and intelligent machine tool, a system named Digital Copy Milling (DCM) was developed in our previous studies. The DCM <b>generates</b> <b>tool</b> paths in real time {{based on the principle}} of copy milling. In the DCM, the cutting tool is controlled dynamically to follow the surface of CAD model corresponding to the machined shape without any NC program. In this study, surface roughness control of finished surface is performed as an enhanced function of DCM. From rough-cut to semi-finish-cut and finish-cut operations, the DCM selects cutting conditions and <b>generates</b> <b>tool</b> paths dynamically to satisfy instructed surface roughness Ra. The experimental verification was performed successfully...|$|R
50|$|Mathomatic {{can be used}} as a {{floating}} point or integer arithmetic code <b>generating</b> <b>tool,</b> simplifying and converting equations into optimized assignment statements in the Python, C, and Java programming languages. The output can be made compatible with most other mathematics programs, except TeX and MathML format input/output are currently not available. The ASCII characters that are allowed in Mathomatic variable names is configurable, allowing TeX format variable names.|$|E
5000|$|A {{developer}} using a top-down model {{writes the}} WSDL document {{first and then}} uses a code <b>generating</b> <b>tool</b> to produce the class skeleton, to be completed as necessary. This model is generally considered more difficult but can produce cleaner designs and is generally more resistant to change. As long as the message formats between sender and receiver do not change, changes in the sender and receiver themselves do not affect the web service. The technique is {{also referred to as}} contract first since the WSDL (or contract between sender and receiver) is the starting point.|$|E
40|$|Abstract—The {{paper will}} present a {{software}} algorithm for <b>generating</b> <b>tool</b> lists necessary {{for the implementation of}} the automatic tool readjustment function (ATR) within the TMA 550 AL flexible manufacturing cell. The implementation of the algorithm will also be presented in the paper. Keywords—algorithms, flexible manufacturing, tool management...|$|E
40|$|In this paper, {{a motion}} {{generation}} algorithm for a six Degrees of Freedom (DoF) robotic {{hand in a}} static environment is presented. The purpose of developing this method {{is to be used}} in the path generation of the end-effector for edge finishing and inspection processes by utilizing the CAD model of the considered workpiece. Nonetheless, the proposed algorithm may be extended to be applicable for other similar manufacturing processes. A software package programmed in the application programming interface (API) of SolidWorks <b>generates</b> <b>tool</b> path data for the robot. The proposed method significantly simplifies the given problem, resulting in a reduction in the CPU time needed to generate the path, and offers an efficient overall solution. The ABB IRB 2000 robot is chosen for executing the <b>generated</b> <b>tool</b> path...|$|R
40|$|We {{describe}} a framework, called the Synchronization Policy Prototyper (SyPP), for <b>generating</b> <b>tools</b> {{to aid in}} assessing the appropriateness of strictly exclusive synchronization policies under expected program usage scenarios. A SyPP tool aims to help during evolution of an existing program when the synchronization policy that it implements needs to be changed. 1...|$|R
40|$|The {{economic}} {{needs of}} urban development require proper design products that {{take into account}} the environment. Numerical modeling of urban space can <b>generate</b> <b>tools</b> for sustainable development. The aim {{of this paper is to}} present some 3 D models of built space in Reşiţa city to highlight the extension of functional zones...|$|R
40|$|In {{this paper}} we {{introduce}} a bilingual dictionary <b>generating</b> <b>tool</b> {{that does not}} use any large bilingual corpora. With this tool we implement our novel pivot based bilingual dictionary generation method that uses mainly the WordNet of the pivot language {{to build a new}} bilingual dictionary. We propose the usage of WordNet for good accuracy, introducing also a double directional selection method with local thresholds to maximize recall. ...|$|E
40|$|As {{demonstrated}} by the exceptionally successful Delta robot, parallel kinematics Schönflies motion generators (PKSMG) exhibit several advantages over their serial counterparts. Despite its success, the Delta robot suffers from several shortcomings, including a bulky framework and a small workspace-to-footprint ratio. Another drawback is that the kinematic chain <b>generating</b> <b>tool</b> rotation suffers from low torsional stiffness. This letter presents a novel architecture for a nonredundant PKSMG providing infinite tool rotation and an extensive positioning workspace. The workspace and kinematic performance of the proposed architecture are analysed in detail...|$|E
40|$|In this paper, we {{describe}} DELI ("Development Interactive"), a method and software system {{that supports the}} product concept development phase by multi-functional product development teams using Marketing Engineering methods. After motivating our research, we present core concepts underlying DELI: a data model encompassing customer and product attributes and preferences {{as well as a}} questionnaire <b>generating</b> <b>tool</b> based thereon, a novel integrated clustering and attribute/product positioning algorithm for market map generation and a conjoint-based market simulation component. All concepts are explained using a real-world mobile phone case study...|$|E
40|$|DigiDocMap is {{freeware}} {{editor and}} open {{source for the}} creation of conceptual maps. It is the first prod- uct of a research project intended to <b>generate</b> <b>tools</b> for knowledge representation. Three versions of this edi- tor have been created since 2002. The paper analyses each one of these and the reasons which motivated in- corporation of the principal modifications...|$|R
5000|$|Linear (procedural code, {{possibly}} <b>generated</b> by <b>tools</b> {{like those}} that use record and playback) ...|$|R
40|$|International audienceModel Driven Engineering {{has shown}} the {{feasibility}} to <b>generate</b> <b>tools</b> (editors, analyzers [...] .) from models and for a domain. Unfortunately these <b>generated</b> <b>tools</b> are much focused while a large application spans different domains and different activities; currently these tools do not support concurrent engineering, and incomplete life cycle support. In a similar way we developed a technology capable of generating a complete Computer Aided Domain Specific Environment (CADSE) from a set of model and metamodels describing the specific domain and the environment behavior. Our technology solves the above two problems, allowing defining a number of CADSE addressing specific activities, as extensions and adaptation of a core CADSE; and relying on workspaces. CADSEs workspaces are model driven; they contain tools, models and usual artifacts (code, documents [...] .); they support different activities by switching from an activity to another one, and concurrent engineering is supported through import/commit applied to models, metamodels and artifacts...|$|R
40|$|Native {{code for}} a CNC {{stitching}} machine {{is generated by}} generating a geometry model of a preform; <b>generating</b> <b>tool</b> paths from the geometry model, the tool paths including stitching instructions for making stitches; and generating additional instructions indicating thickness values. The thickness values are obtained from a lookup table. When the stitching machine runs the native code, it accesses a lookup table to determine a thread tension value corresponding to the thickness value. The stitching machine accesses another lookup table to determine a thread path geometry value corresponding to the thickness value...|$|E
40|$|In {{this paper}} {{we present a}} way of {{successfully}} tackling the difficulties of binding MPI to Java {{with a view to}} ensuring portability. We have created a tool for automatically binding existing native C libraries to Java, and have applied the Java-to-C Interface <b>generating</b> <b>tool</b> (JCI) to bind MPI to Java. The approach of automatic binding by JCI ensures both portability across different platforms and full compatibility with the MPI specification. To evaluate the resulting combination we have run a Java version of the NAS parallel IS benchmark on a distributed-memory IBM SP 2 machine...|$|E
40|$|This paper {{presents}} an efficient greedy strategy for <b>generating</b> <b>tool</b> paths on triangular meshes with consideration of axis kinematics. Curvatures at the vertices of the triangular mesh are estimated, {{which are used}} to determine the cutting strip width and maximum feedrate. Starting from a given CC point, the next CC point is chosen to be the one which maximizes the feedrate limit at the current CC point and minimizes the cutting strip overlaps. This process is carried out iteratively until all the mesh vertices are cut. Simulation results are presented to illustrate the feasibility of the algorithm...|$|E
40|$|As an {{important}} method {{to analyze the}} security states of computer network, the generation of network attack graph is a hot topic in this domain. After analyzing network vulnerabilities, linking relation between devices and the characteristic of attack, the model of network security states is built, and the generating algorithm of attack graph is implemented. The experiment validates the prototype of <b>generating</b> <b>tools</b> of network attack graph...|$|R
40|$|This report {{presents}} the results of a study which mapped food availability in three small rural towns in New South Wales on the topic of Food Fairness in disadvantaged towns. This small study designed and tested simple, specifically-designed tools for assessing food availability, and has <b>generated</b> <b>tools</b> and protocols that can be disseminated and used in other locations, as well as information for the three study towns...|$|R
40|$|This paper {{discusses}} {{the benefits of}} combining meta-modelling and graph transformations to automatically <b>generate</b> modelling <b>tools</b> for simulation formalisms. In meta-modelling, formalisms are modelled {{in their own right}} at a meta-level within an appropriate meta-formalism. A meta-model processor uses this information to automatically <b>generate</b> <b>tools</b> to process –create, edit, check, optimize, transform and generate simulators for – the models in the described formalism. We propose the representation of (meta-) models as graphs, and subsequently specify model manipulations as graph grammars. We also present AToM 3, A Tool for Multi-formalism and Meta-Modelling which implements these concepts. As an example, we show how to build a meta-model for the popular process interaction discrete event language GPSS in AToM 3. From this meta-model, AToM 3 automatically <b>generates</b> a visual <b>tool</b> to build GPSS models. We also define a graph grammar to generate textual code for the HGPSS simulator from the graphically specified GPSS models...|$|R
40|$|AbstractA {{new method}} for <b>generating</b> <b>tool</b> paths for rough {{machining}} of sculptured surface {{is presented in}} this paper. The sculptured surface is approximated by a regular mesh of quadrangular facets. A set of equidistant horizontal planes are assigned to intersect the blank of machined part and surface model, resulting {{in a series of}} contours, which demarcate the feasible cutting regions of each layer of material removal. The desired cutter path is computed through NC programming and any gouging between the cutter and the part being machined is detected and corrected automatically. The proposed algorithm successfully solves the problem of layered milling for sculptured surface with nested islands...|$|E
40|$|A parser {{is one of}} the {{components}} in an interpreter or compiler, which checks for correct syntax and builds a data structure (often some kind of parse tree, abstract syntax tree or other hierarchical structure) implicit in the input tokens. Parsers may be programmed by hand or may be (semi-) automatically generated by a parser <b>generating</b> <b>tool.</b> Various techniques are available for parsing formal languages. The objective {{of this paper is to}} compare these techniques. The paper is organized in two sections. The first section does discuss about the parsing problem and process. In the second section we study and compare three parsing techniques theoretically. Finally the paper concludes with the suggestion of a new parsing technique...|$|E
40|$|The article {{presents}} the first {{results of a}} PhD study connected to testing of safety critical medical devices: a systematically executed case study at a Hungarian manufacturer of medical devices. The article shortly describes the process of testing currently being used. Elements of the testing approach less commonly applied in software industry are emphasized. The ending point of the actual testing process in the case study is {{the starting point for}} further research: the automated analysis of the testing results. The author started to develop a new approach, using a combination of tools, and modeling a model-based test <b>generating</b> <b>tool</b> - something that is both novel and intensive as an area of research. Comment: EDCC- 2014, Student-Foru...|$|E
40|$|Our {{study of}} public argumentation {{surrounding}} iPhone encryption addresses the argumentative {{function of the}} metonym. Metonyms accomplish general and specific argumentative purposes. Generally, metonyms help define and redefine the argumentative framework for a dispute. Within a controversy, metonyms operate as inference generators. We isolate and analyze several metonyms and elaborate their warrant-generating valences. Metonyms are inference <b>generating</b> <b>tools</b> capable of instantiating normative frameworks, invoking flexible and indeterminate senses of causality...|$|R
40|$|ISBN 978 - 2 - 87971 - 131 - 7 The {{creation}} of Domain Specific Languages(DSL) counts {{as one of}} the main goals in the field of Model-Driven Software Engineering (MDSE). The main purpose of these DSLs is to facilitate the manipulation of domain specific concepts, by providing developers with specific tools for their domain of expertise. A natural approach to create DSLs is to reuse existing modeling standards and tools. In this area, the Eclipse Modeling Framework (EMF) has rapidly become the defacto standard in the MDSE for building Domain Specific Languages (DSL) and tools based on generative techniques. However, the use of EMF <b>generated</b> <b>tools</b> in domains like Internet of Things (IoT), Cloud Computing or Models@Runtime reaches several limitations. In this paper, we identify several properties the <b>generated</b> <b>tools</b> must comply with to be usable in other domains than desktop-based software systems. We then challenge EMF on these properties and describe our approach to overcome the limitations. Our approach, implemented in the Kevoree Modeling Framework (KMF), is finally evaluated according to the identified properties and compared to EMF...|$|R
40|$|Abstract. The {{creation}} of Domain Specific Languages (DSL) counts {{as one of}} the main goals in the field of Model-Driven Software Engineering (MDSE). The main purpose of these DSLs is to facilitate the manipulation of domain specific concepts, by providing developers with specific tools for their domain of expertise. A natural approach to create DSLs is to reuse existing modeling standards and tools. In this area, the Eclipse Modeling Framework (EMF) has rapidly become the defacto stan-dard in the MDSE for building Domain Specific Languages (DSL) and tools based on generative techniques. However, the use of EMF <b>generated</b> <b>tools</b> in domains like Internet of Things (IoT), Cloud Computing or Models@Runtime reaches several limitations. In this paper, we identify several properties the <b>generated</b> <b>tools</b> must comply with to be usable in other domains than desktop-based software systems. We then challenge EMF on these properties and describe our approach to overcome the limitations. Our approach, implemented in the Kevoree Modeling Framework (KMF), is finally evaluated according to the identified properties and compared to EMF...|$|R
40|$|Abstract- This paper {{presents}} {{ideas and}} approaches to design, implementation and validation of simulators using the program generation approach. This approach is well presented in today’s industrial control systems configurators. It has now extensive use also in embedded systems design and implementation. Unfortunately, the {{validation of the}} generated control systems usually {{is not part of}} the <b>generating</b> <b>tool.</b> Results of simulator implementation using the program generation approach and their validation are presented. Analyses of problems found and the steps for problem fixing are presented in the context of increasing the system model reliability. This paper also presents the validation of the program generation approach for design and implementation of object simulators and how the quality of the simulator can be increased using validation techniques...|$|E
40|$|Under the {{direction}} of Walter D. Potter) NED- 2 is a sophisticated, intelligent, goal driven, and integrated multi-agent decision support system for forest ecosystem management. NED- 2 currently integrates various forest mangement tools and models, including vegetation growth and yield models, wildlife models, management models for timber, ecology, water, and visual quality goals, GIS reporting tool, HTML report <b>generating</b> <b>tool,</b> etc [...] This thesis describes recent work on {{the integration of the}} Stand Visualization System and the Loftis REGEN Model, as well as other extensions to NED- 2. These tools and models provide functionalities of visualizing forest stands and modeling the regeneration process in forest ecosystems, respectively. Index words: ecosystem management, decision support system, multi-agent system, knowledge-based system, blackboard architecture, the Lofti...|$|E
40|$|<b>Generating</b> <b>tool</b> {{specific}} schemata and configuration {{information for}} OLAP database tools from conceptual graphical models {{is an important}} prerequisite for a comprehensive tool support for computer aided data warehouse engineering (CAWE). This paper describes the design and implementation of such a generation component {{in the context of}} our BabelFish data warehouse design tool environment. It identifies the principal issues that are involved in the design and implementation of such a component and discusses possible solutions. The paper lists typical mismatches between the data model of commercial OLAP tools and conceptual graphical modeling notations, and proposes methods to overcome these expressive differences during the generation process. Further topics are the use of graph grammars for specifying and parsing graphical MD schema descriptions and the integration of the generation process into a metadata centered modeling tool environment. 1 Introduction Designing and [...] ...|$|E
40|$|The {{creation}} of Domain Specific Languages(DSL) counts {{as one of}} the main goals in the field of Model-Driven Software Engineering (MDSE). The main purpose of these DSLs is to facilitate the manipulation of domain specific concepts, by providing developers with specific tools for their domain of expertise. A natural approach to create DSLs is to reuse existing modeling standards and tools. In this area, the Eclipse Modeling Framework (EMF) has rapidly become the defacto standard in the MDSE for building Domain Specific Languages (DSL) and tools based on generative techniques. However, the use of EMF <b>generated</b> <b>tools</b> in domains like Internet of Things (IoT), Cloud Computing or Models@Runtime reaches several limitations. In this paper, we identify several properties the <b>generated</b> <b>tools</b> must comply with to be usable in other domains than desktop-based software systems. We then challenge EMF on these properties and describe our approach to overcome the limitations. Our approach, implemented in the Kevoree Modeling Framework (KMF), is finally evaluated according to the identified properties and compared to EMF. Comment: ISBN 978 - 2 - 87971 - 131 - 7; N° TR-SnT- 2014 - 11 (2014...|$|R
5000|$|... #Caption: [...] This diagram {{summarizes}} the major post-translational modifications of FAM46B. All {{of the individual}} images were <b>generated</b> using <b>tools</b> available through ExPASy.|$|R
40|$|Additive {{manufacturing}} {{processes such as}} spray coating, spray painting and rapid tooling are important steps in many products' life cycle. Robotic manipulators are widely adopted to carry out these processes. If done by human operators, the tool planning for these applications is usually time-consuming and the <b>generated</b> <b>tool</b> plans are prone to inaccuracy and errors. This research develops a fully-automated, CAD-guided tool planning system which eliminates the human involvement. Meanwhile, this system can <b>generate</b> optimized <b>tool</b> plans {{in the sense of}} robot motion performance. The critical part of this tool planning system is the partitioning of part surfaces into multiple easy-tohandle patches. In this paper, a decomposition-based approach is developed, which models the surface partitioning problem in geometric domain as an integer programming problem in algebraic domain. Experimental tests and evaluation carried out on automotive parts validate this new approach. Link_to_subscribed_fulltex...|$|R
