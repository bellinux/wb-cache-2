6|0|Public
50|$|Unlike most {{portability}} toolkits, TnFOX {{has been}} very extensively profiled and performance tuned for maximum speed and minimal memory usage. It has strong multithreading support including tuning to avoid two threads writing to the same cache line (which causes cache line bouncing and greatly bottlenecks parallel throughput). It optionally uses its own thread caching memory allocator, automatically uses dynamic algorithms which will trade speed for memory usage according to memory low conditions and has very strong x86 and x64 specific optimisations including a metaprogramming implementation of SIMD vectors which will automatically compile down into SSE operations (right up to SSE4 support). It has its own assembler written fast mutex implementation, extensive internal caching to avoid syscalls to the kernel and its own inter-process communication framework which can transport arbitrary C++ object instances {{from one place to}} another by leveraging metaprogramming to automatically implement serialisation & <b>deserialisation.</b> This is particularly evident in its SQL database interface where one can simply bind an arbitrary C++ object instance to a BLOB field and no further code is required.|$|E
30|$|The CNCLib {{has also}} a server part, {{which is used}} by the Gateways to wait for and handle mobile client connections. Thus, the CNCLib is also {{responsible}} for the serialisation and <b>deserialisation</b> of all exchanged data. CNCLib also implements other features that are hidden, such as the reception of and response to Ping Messages, which are used by the SDDL to collect statistics about the latency of mobile connections.|$|E
40|$|SOAP is {{a simple}} object access {{protocol}} that builds upon the versatile XML standard in providing the widely interoperable cross-platform system-tosystem Web Services. However, the intrinsic character based XML standard coupled with finite network resources and the heterogeneous nature of a vast variety of devices {{involved in the process}} bring about unavoidable delays. Table Driven XML (TDXML) provides an efficient way of accelerating the bottlenecks of network verbosity {{and at the same time}} improves the inefficient serialisation/deserialisation process of converting machine object representations to/from XML representations. TDXML encodes the message data into tabular format, with each data and attribute element being assigned unique identifiers for improved serialisation and <b>deserialisation</b> efficiencies. Evaluation result shows that the proposed technique reduces the resultant message size by over 200 % and improves the serialisation/deserialisation efficiency by 400 % when compared to other standard SOAP implementations. 6 page(s...|$|E
40|$|In recent years, {{multiple}} vulnerabilities {{exploiting the}} serialisation APIs of various programming languages, including Java, have been discovered. These vulnerabilities {{can be used}} to devise in- jection attacks, exploiting the presence of dynamic programming language features like reflection or dynamic proxies. In this paper, we investigate a new type of serialisation-related vulnerabilit- ies for Java that exploit the topology of object graphs constructed from classes of the standard library in a way that <b>deserialisation</b> leads to resource exhaustion, facilitating denial of service attacks. We analyse three such vulnerabilities that can be exploited to exhaust stack memory, heap memory and CPU time. We discuss the language and library design features that enable these vulnerabilities, and investigate whether these vulnerabilities can be ported to C#, Java- Script and Ruby. We present two case studies that demonstrate how the vulnerabilities can be used in attacks on two widely used servers, Jenkins deployed on Tomcat and JBoss. Finally, we propose a mitigation strategy based on contract injection...|$|E
40|$|The {{performance}} of the SOAP protocol has often been regarded relatively poor and requiring undue amounts of processor time, storage and bandwidth due to its use of text-based, metadata-laden XML encoding. There are many proposals available to tackle this perceived problem, however none of these coherently consider the {{different aspects of the}} problem: (1) message size; (2) message structure; (3) accessing individual elements; and (4) interoperability with other Web services protocols. The technique proposed in this paper: Table driven XML (TDXML) takes such a coherent view and offers more compact messages, simpler message structure and easier access to individual elements when compared to conventional SOAP. TDXML also enables keyed access to individual elements to enable single pass message parsing for improved object serialisation and <b>deserialisation.</b> Experimental studies show that TDXML can be incorporated easily into a commercially available SOAP implementation with 30 % improved latency performance. Furthermore, this paper reports that TDXML can also be implemented with other transport mechanisms and provide even better performance (over 100 %) than SOAP in regard to network bandwidth and latency. 13 page(s...|$|E
40|$|Static typing in {{functional}} programming languages such as Clean, Haskell, and ML is highly beneficial: it prevents erroneous behaviour at run time and provides opportunities for optimisations. However, dynamic typing {{is just as}} important as sometimes types are not known until run time. Examples are exchanging values between applications by <b>deserialisation</b> from disk, input provided by a user, or obtaining values via a network connection. Ideally, a static typing system works in close harmony with an orthogonal dynamic typing system; not discriminating between statically and dynamically typed values. In contrast to Haskell’s minimal support for dynamic typing, Clean has an extensive dynamic typing; it adopted ML’s support for monomorphism and parametric polymorphism and added the notion of type dependencies. Unfortunately, ad-hoc polymorphism has been left out of the equation over the years. While both ad-hoc polymorphism and dynamic typing have been studied in-depth earlier, their interaction in a statically typed functional language has not been studied before. In this paper we explore the design space of their interactions...|$|E

