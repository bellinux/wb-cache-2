9|10000|Public
5000|$|<b>Functional</b> <b>Requirement</b> <b>Specification</b> (FRS): the {{definition}} of higher lever functional requirements ...|$|E
40|$|Abstract. Requirement Specification {{is gaining}} {{increasingly}} attention {{as a critical}} phase of software systems development. As requirement descriptions evolve, they quickly become error-prone and difficult to understand. Thus, the development of techniques and tools to support requirement specification development, understanding, testing, maintenance and reuse becomes an important issue. This paper extends the well-known technique of program slicing to <b>Functional</b> <b>Requirement</b> <b>Specification</b> based on Use Case Maps notation. This new application of slicing, called UCM Requirement Slicing is useful to aid requirement comprehension and maintenance. In contrast to traditional program slicing, requirement slicing is designed to operate on the requirement specification of a system, rather than the source code of a program. The resulting requirement slice provides knowledge about high-level structure of a system, rather than its low-level implementation details. In order to compute a UCM Requirement slice, we provide a three steps slicing algorithm. Key words: <b>Functional</b> <b>requirement</b> <b>specification,</b> program slicing, use case maps, comprehension, maintenance. ...|$|E
40|$|Investigation {{has been}} {{undertaken}} into {{the use of}} software specification methods for instrument systems specification. In {{the first part of}} this paper, some of the well-known structured software specification methods are briefly evaluated against a set of criteria we established, in the context of measuring instrument systems. We then conduct a case study in the widely used CORE method. It has been established that CORE can provide systematic and effective support for functional requirement analysis of complex instruments and instrument systems. Its decomposition-based analysis helps to create complete and consistent <b>functional</b> <b>requirement</b> <b>specification...</b>|$|E
5000|$|EIRENE <b>Functional</b> <b>Requirements</b> <b>Specification</b> EIRENE System <b>Requirements</b> <b>Specification</b> ...|$|R
40|$|Abstract. The paper {{outlines}} {{an experiment}} conducted {{in two different}} academic environments, in which FIT tests were used as a <b>functional</b> <b>requirements</b> <b>specification.</b> Common challenges for <b>functional</b> <b>requirements</b> <b>specifications</b> are identified, and a comparison is made between how well prose and FIT user acceptance tests are suited to overcoming these challenges from the developer’s perspective. Experimental data and participant feedback are examined to evaluate whether developers can use requirements {{in the form of}} FIT tests to create a design and implementation. 1...|$|R
40|$|This paper {{describes}} an algorithm to transform business process models into a <b>functional</b> <b>requirements</b> <b>specification,</b> {{specified in the}} form of use case diagrams. The benefit of such an algorithm is that it helps to draw up a <b>functional</b> <b>requirements</b> <b>specification</b> more quickly, because business process models may be available in an enterprise, while use case diagrams have to be developed by performing interviews. The use case diagrams that result from applying the algorithm, specify a software system that provides automated support for the original business processes. We show this with a case study from practice. KEY WORD...|$|R
40|$|Abstract—System {{testing is}} {{actually}} {{done to the}} entire system against the <b>Functional</b> <b>Requirement</b> <b>Specification</b> and/or the System Requirement Specification. Moreover, it is an investigatory testing phase, where the focus is to have almost a destructive attitude and test not only the design, but also the behavior and even the believed expectations of the customer. It is also intended to test up to and beyond the bounds defined in the software/hardware requirements specifications. In Motorola ®, Automated Testing {{is one of the}} testing methodologies uses by GSG-iSGT (Global Software Group- iDEN TM Subcriber Group-Test) to increase the testing volume, productivity I...|$|E
40|$|Aim of {{the project}} was the {{development}} of a multi-functional simulator for the Mass Transit. The following usages for the MESSINA simulator are planned: training simulation for the traffic controller, strategic simulation to support the creation or modifying of the schedule, operational simulation to support the disponent in the control center. Within the project MESSINA the <b>Functional</b> <b>Requirement</b> <b>Specification</b> (FRS) and the System Requirement Specification (SRS) have been draw up. The planned pilot installation was not realized. (orig.) SIGLEAvailable from TIB Hannover: F 97 B 1261 +a / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekBundesministerium fuer Bildung, Wissenschaft, Forschung und Technologie, Bonn (Germany) DEGerman...|$|E
30|$|Figure 3 shows one of {{the three}} {{possible}} operation modes, in which the profile realizes the function constant light control. All possible functions, such as the function constant light control itself, are defined in a function taxonomy, as was explained in Section 3.2. 1 (cf. Figure 2). Functions are the most important device selection criteria for a function-oriented automated design, where based on a <b>functional</b> <b>requirement</b> <b>specification</b> full-functioning and complete building automation systems are to be designed. Already in the stage of requirement engineering, the functions from the function taxonomy are used for the requirement specification, which ensures an unambiguous mapping of requirements to devices and corresponding profiles in the later design phases.|$|E
50|$|A {{functional}} specification (also, functional spec, specs, functional <b>specifications</b> document (FSD), <b>functional</b> <b>requirements</b> <b>specification)</b> in systems engineering and software {{development is a}} document that specifies the functions that a system or component must perform (often part of a <b>requirements</b> <b>specification)</b> (ISO/IEC/IEEE 24765-2010).|$|R
40|$|The {{contribution}} presents {{methodology of}} <b>functional</b> <b>requirements</b> <b>specification</b> {{of the system}} ERTMS/ETCS. This methodology is based on Use Cases of Unified Modelling Language. In the first part there is a brief introduction to Use Cases - their description, aim and structure. Next there is a description of particular parts of Use Cases, their aim, qualities and their mutual relationships with respecting solved problem. The following part is dedicated to relationships between particular Use Cases and their hierarchical arrangement. There are also mentioned the relationships to the following steps of the <b>functional</b> <b>requirements</b> <b>specification</b> and to verification and validation activities in the contribution. Also Use Cases management problem is presented...|$|R
30|$|The <b>Functional</b> <b>Requirement</b> <b>Specifications</b> (FRS) [32] and the System <b>Requirement</b> <b>Specifications</b> (SRS) [33] {{constitute}} the system level ERTMS specifications [35]. They are defined {{in a text}} format. The FRS identifies the functions required for technical interoperability. The SRS define the system requirements for the European Train Control System of ERTMS. They are the translation of the mandatory <b>functional</b> <b>requirements</b> defined in the FRS.|$|R
40|$|Abstract—System {{testing is}} {{actually}} {{done to the}} entire system against the <b>Functional</b> <b>Requirement</b> <b>Specification</b> and/or the System Requirement Specification. Moreover, it is an investigatory testing phase, where the focus is to have almost a destructive attitude and test not only the design, but also the behavior and even the believed expectations of the customer. It is also intended to test up to and beyond the bounds defined in the software/hardware requirements specifications. In Motorola ®, Automated Testing {{is one of the}} testing methodologies uses by GSG-iSGT (Global Software Group- iDEN TM Subcriber Group-Test) to increase the testing volume, productivity and reduce test cycle-time in iDEN TM phones testing. Testing is able to produce more robust products before release to the market. In this paper, iHopper is proposed as a tool to perform stress test on iDEN TM phonse. We will discuss the value that automation has brought to iDEN TM Phone testing such as improving software quality in the iDEN TM phone together with some metrics. We will also look into the advantages of the proposed system and some discussion of the future work as well. Keywords—Testing, automated testing, stress testing, software quality. T I...|$|E
40|$|Abstract: With {{the rapid}} {{development}} of China train operation and control system, validity {{and safety of}} behavioral functions of the system have attracted much attention in the railway domain. In this paper, an automated test sequence optimization method was presented from the system <b>functional</b> <b>requirement</b> <b>specification</b> of the high-speed railway. To overcome the local optimum of traditional ant colony algorithm, the maze algorithm is integrated with the ant colony algorithm to achieve the dynamical learning capacity and improve the adaptation capacity to the complex and changeable environment, and therefore, this algorithm can produce the optimal searching results. Several key railway operation scenarios are selected as the representative functional scenarios and Colored Petri Nets (CPN) is used to model the scenarios. After the CPN model is transformed into the extensible markup language (XML) model, the improved ant colony algorithm is employed to generate the optimal sequences. The shortest searching paths are found and the redundant test sequences are reduced based on the natural law of ants foraging. Finally, the Radio Blocking Center (RBC) test platform is designed and used to validate the optimal sequence. Testing {{results show that the}} proposed method is able to optimize the test sequences and improve the test efficiency successfully...|$|E
40|$|The article {{describes}} an unique production process and an organizational structure for adaptive software development project execution {{with the use}} of SPEM profile of UML language. The organization of a company presented in this paper is based on neutral matrix model including elements essential for remote execution of adaptive projects. The presented solution enables to react more quickly to changes during execution, minimize the risk of incorrect <b>functional</b> <b>requirement</b> <b>specification</b> and improve the final product quality through strong verification of every phase of the productive process. 1. Notation The presentation of the research described in {{this article is based on}} the Software Process Engineering Metamodel (SPEM), which is used to describe a concrete software development process or a family of related software development processes. An object-oriented approach has been chosen to model a family of related software processes and the UML profile has been used as a notation. This introduction covers only a minimal set of process modeling elements necessary to describe the presented processes. More details can be found in SPEM specification delivered by OMG [OMG 2005]. At the core of SPEM is an idea that a software development process is a collaboration of abstract active entities called process roles that perform operations called activities on concrete, tangible entities called work products. The overall goal of the process is to bring a set of work products to a well-defined state. The fragment of SPEM conceptual mode...|$|E
5000|$|This is {{followed}} by a safety <b>requirements</b> <b>specification</b> which is concerned with identifying safety-critical functions (<b>functional</b> <b>requirements</b> <b>specification)</b> and the safety integrity level for each of these functions. [...] The specification may either describe how the software should behave to minimize the risk or might require that the hazard should never arise.|$|R
50|$|System {{testing is}} {{performed}} on the entire system {{in the context of}} a <b>Functional</b> <b>Requirement</b> <b>Specification(s)</b> (FRS) and/or a System <b>Requirement</b> <b>Specification</b> (SRS). System testing tests not only the design, but also the behaviour and even the believed expectations of the customer. It is also intended to test up to and beyond the bounds defined in the software/hardware <b>requirements</b> <b>specification(s).</b>|$|R
50|$|The Rail Safety and Standards Board are {{revising}} the current train-to-shore radio standard GO/RT3410, renumbering it as GE/RT8080, {{and developing a}} new standard GE/RT8081 that contains requirements that are specific to GSM-R. The Railway Group Standards are being developed to support the European <b>Functional</b> <b>Requirements</b> <b>Specification</b> and should be {{read in conjunction with}} this document.|$|R
30|$|Regarding ERTMS <b>specifications,</b> FRS (<b>Functional</b> <b>Requirement</b> <b>Specifications)</b> and SRS (System <b>Requirement</b> <b>Specifications)</b> contain <b>{{functional}}</b> <b>requirements</b> at system level, which {{place the}} core of this study in the functional testing field. However, the structure of the <b>specifications</b> (inputs, outputs, <b>requirements)</b> is not formal enough and, therefore, not appropriate to the preparation of test scenarios. The objective of this work consists in producing “standard bricks” which will describe and specify each requirement. Then, a transformation process allows obtaining formalised models which will be used in this work. This formalisation requires analysing, classifying, and structuring of the specifications.|$|R
40|$|Improving {{software}} quality {{based on the}} <b>requirements</b> <b>specification</b> The first stage of software development, <b>functional</b> <b>requirements</b> <b>specification,</b> is considered the most important stage in the software lifecycle. Requirements constructed in this stage affect all other stages of the lifecycle, and thus affect {{software quality}}. We provide a method for determining how <b>functional</b> <b>requirements</b> affect software quality. To do so, we utilize a functional modeling framework that includes a controlled language for <b>requirements</b> <b>specification</b> and assess software qualities. Then we apply an information entropy metric to measure the significance of each requirement statement. Using this method the designer can identify which requirements, when implemented, will most affect software quality...|$|R
40|$|The author {{presents}} an object-oriented {{model of a}} railway level-crossing system created {{for the purpose of}} <b>functional</b> <b>requirements</b> <b>specification.</b> Unified Modelling Language (UML), version 1. 4, which enables specification, visualisation, construction and documentation of software system artefacts, was used. The main attention was paid to analysis and design phases. The former phase resulted in creation of use case diagrams and sequential diagrams, the latter in creation of class/object diagrams and statechart diagrams...|$|R
40|$|Popular notations for <b>functional</b> <b>requirements</b> <b>specifications</b> {{frequently}} ignore developers' needs, target specific development models, {{or require}} translation of requirements into tests for verification; {{the results can}} give out-of-sync or downright incompatible artifacts. Seamless Requirements, {{a new approach to}} specifying <b>functional</b> <b>requirements,</b> contributes to developers' understanding of requirements and to software quality regardless of the process, while the process itself becomes lighter due to the absence of tests in the presence of formal verification. A development case illustrates these benefits, and a discussion compares seamless requirements to other approaches...|$|R
40|$|Project X is a multi-megawatt proton {{facility}} {{being developed}} to support intensity frontier research in elementary particle physics, with possible applications to nuclear physics and nuclear energy research, at Fermilab. A <b>Functional</b> <b>Requirements</b> <b>Specification</b> {{has been developed}} {{in order to establish}} performance criteria for the Project X complex in support of these multiple missions. This paper will describe the <b>Functional</b> <b>Requirements</b> for the Project X facility and the rationale for these requirements. Comment: 3 pp. Particle Accelerator, 24 th Conference (PAC' 11) 28 Mar - 1 Apr 2011 : New York, US...|$|R
40|$|As it {{is clear}} that the full {{packaging}} life cycle – at least partially – coincides with the product life cycle, both cycles are interwoven. Each has a network of <b>functional</b> <b>requirements,</b> with specific hierarchic propensities. These networks overlap, with prevailing hierarchies playing important roles in combined product/packaging development cycles. This publication describes the role of <b>functional</b> <b>requirements</b> in the complex context of product/packaging life cycles and shows ways to adequately uncover <b>functional</b> <b>requirement</b> <b>specifications</b> besides, or even instead of, technical specifications. A working method is presented, guiding product/packaging development cycles based on structured functional hierarchies. The applicability of the method is shown in a case study...|$|R
40|$|Project X is a multi-megawatt proton {{facility}} {{being developed}} {{to support a}} world-leading program in Intensity Frontier physics at Fermilab. The facility is designed to support programs in elementary particle and nuclear physics, with possible applications to nuclear energy research. A <b>Functional</b> <b>Requirements</b> <b>Specification</b> has been developed {{in order to establish}} performance criteria for the Project X complex in support of these multiple missions, and to assure that the facility is designed with sufficient upgrade capability to provide U. S. leadership for many decades to come. This paper will briefly review the previously described <b>Functional</b> <b>Requirements,</b> and then discuss their recent evolution. Comment: 3 p...|$|R
40|$|Increased {{competitive}} pressures forced {{producers of}} goods to accelerate their product development time, minimize costs, improve organizational efficiencies, reduce product complexity, systematically design goods that are key for customer satisfaction and delights, innovative reuse of current technologies, and improve product quality. In this manuscript, {{we discuss the}} potential utilization of Axiomatic Design methods to enhance the development of Failure Modes and Effects Analysis, Parameter diagrams for robustness studies, and improve quality through robustness, testing and enhancing <b>functional</b> <b>requirements</b> <b>specifications.</b> A Line Pressure Regulating System example using this integrated framework will be provided...|$|R
40|$|Requirements {{engineering}} {{in the new}} millennium is facing an increasing diversity of computerised devices comprising an increasing diversity of interaction styles for an increasing diversity of user groups. Thus the incorporation of user interface requirements into software <b>requirements</b> <b>specifications</b> becomes more and more mandatory. Validating these <b>requirements</b> <b>specifications</b> with hand-made, throw-away prototypes is not only expensive, but also bears the danger that validation results are not accurately fed back into the <b>requirements</b> <b>specification.</b> In this paper, we propose an enhancement of the <b>requirements</b> <b>specification</b> method SCORES for an explicit capturing of user interface requirements. The advantages of the approach are threefold. First, the user interface <b>requirements</b> <b>specification</b> is UML-compliant and integrated into the <b>functional</b> <b>requirements</b> <b>specification.</b> Second, prototypes for validation purposes can semi-automatically be generated. Third, the model-based generation of prototypes allows for ‘round-trip prototyping’ such that manual changes of the prototype during the validation process are automatically fed back into the <b>requirements</b> <b>specification.</b> ...|$|R
40|$|Agent–oriented {{conceptual}} modeling notations such as i* {{represents an}} interesting approach for modeling early phase requirements which includes organizational contexts, stakeholder intentions and rationale. On the other hand, Unified Modeling Language (UML) {{is suitable for}} later phases of requirement capture which usually focus on completeness, consistency, and automated verification of <b>functional</b> <b>requirements</b> for the new system. In this paper, we propose a methodology to facilitate and support the combined use of notation for modeling requirement engineering process in a synergistic fashion. For organizational modeling/early phase requirements capturing we use the i* modeling framework that describes the organizational relationships among various actors and their rationales. For late (<b>functional)</b> <b>requirements</b> <b>specification,</b> we rely on UML Activity Diagram...|$|R
40|$|An {{approach}} to achieving an optimized set of crew/computer interface requirements on the Space Shuttle program is described. It consists of defining the mission phases and crew timelines, developing a functional {{description of the}} crew/computer interface displays and controls software, conducting real-time simulations using pilot evaluation of the interface displays and controls, and developing a set of crew/computer <b>functional</b> <b>requirements</b> <b>specifications.</b> The simulator is a two-man crew station which includes three CRTs with keyboards for simulating the crew/computer interface. The programs simulate the mission phases and the flight hardware, including the flight computer and CRT displays...|$|R
5000|$|Of {{the design}} <b>specification</b> against the <b>requirement</b> specification: Do the {{architectural}} design, detailed design and database logical model specifications correctly implement the <b>functional</b> and non-functional <b>requirement</b> <b>specifications?</b> ...|$|R
50|$|Applications are {{typically}} developed using high-level programming languages which in themselves can have security implications. The core activities {{essential to the}} software development process to produce secure applications and systems include: conceptual definition, <b>functional</b> <b>requirements,</b> control <b>specification,</b> design review, code review and walk-through, system test review, and maintenance and change management.|$|R
40|$|Abstract Requirements Engineering {{has been}} {{considered}} a key activity in any Software Engineering process. It {{is well known that}} a <b>requirements</b> <b>specification</b> should include not only software specifications but also business models and other kinds of information describing {{the context in which the}} intended system will function. In recent years we have observed a growing influence of the object-orientation paradigm. Unfortunately, the current dominant object oriented modeling technique, i. e. Unified Modeling Technique, is ill equipped for modeling early requirements which are typically informal and often focus on Organizational objectives. UML is more suitable for later phases of requirements capture, which usually focus on completeness, consistency, and automated verification of <b>functional</b> <b>requirements</b> for the new system. In this paper, we present some guidelines for the integration of early and late <b>requirements</b> <b>specifications.</b> For the organizational modeling we use the i * framework, which focuses on the description of organizational relationships among various organizational actors, as well as an understanding of the rationale for the alternatives chosen. For the <b>functional</b> <b>requirements</b> <b>specification,</b> we rely on a precise subset of the Unified Modeling Language annotated with constraints described in the Object Constraint Language. A small example is used to illustrate how the requirements process iterates between the early and late <b>requirements</b> <b>specification...</b>|$|R
40|$|Requirements capture {{has been}} {{acknowledged}} {{as a critical}} phase of software development, precisely {{because it is the}} phase which deals not only with technical knowledge, but also with organizational, managerial, economic and social issues. The emerging consensus is that a <b>requirement</b> <b>specification</b> should include not only software specifications but also business models and other kinds of information describing {{the context in which the}} intended system will function. Unfortunately, the current dominant object oriented modeling technique, i. e. Unified Modeling Technique, is ill equipped for capturing early requirements which are typically informal and often focus on organisational objectives. UML is more suitable for later phases of requirements capture, which usually focus on completeness, consistency, and automated verification of <b>functional</b> <b>requirements</b> for the new system. In this paper, we present some guidelines for the integration of early and late <b>requirements</b> <b>specifications.</b> For the organizational modeling we use the i* technique, which focuses on the description of organizational relationships among various organizational actors, as well as an understanding of the rationale for the alternatives chosen. For the <b>functional</b> <b>requirements</b> <b>specification,</b> we rely on the precise Unified Modeling Language (pUML), annotated with constraints described in OCL. A small CD store example is used to illustrate how the requirements process iterates between the early and late <b>requirements</b> <b>specification...</b>|$|R
40|$|The Isothermal Dendritic Growth Experiment (IDGE) is a {{microgravity}} {{materials science}} experiment scheduled {{to fly in}} the cargo bay of the shuttle on the United States Microgravity Payload (USMP) carrier. The experiment will be operated by real-time control software which will not only monitor and control onboard experiment hardware, but will also communicate, via downlink data and unlink commands, with the Payload Operations Control Center (POCC) at NASA George C. Marshall Space Flight Center (MSFC). The software development approach being used to implement this system began with software <b>functional</b> <b>requirements</b> <b>specification.</b> This was accomplished using the Yourdon/DeMarco methodology as supplemented by the Ward/Mellor real-time extensions. The <b>requirements</b> <b>specification</b> in combination with software prototyping was then used to generate a detailed design consisting of structure charts, module prologues, and Program Design Language (PDL) specifications. This detailed design will next be used to code the software, followed finally by testing against the <b>functional</b> <b>requirements.</b> The result will be a modular real-time control software system with traceability through every phase of the development process...|$|R
40|$|In [2] {{we present}} a {{lightweight}} approach to consistency between a scenario model and a class model {{that is based on}} minimizing overlap between the models and on systematic cross-referencing. In this paper, we describe a preliminary experimental validation of our approach. The results clearly indicate that the participants in the experiment preferred our lightweight approach to a classical approach. 1 Introduction Today, most approaches to object-oriented <b>requirements</b> <b>specification</b> use a combination of structure, behavior and interaction models for (<b>functional)</b> <b>requirements</b> <b>specification.</b> Typically, structure and behavior are represented in class models that consist of a combination of class diagrams and statecharts, whereas interaction is modeled with use cases / scenarios [1], [3]. As soon as more than one model is used, the problem of inter-model consistency arises: how can we ensure that information in these models is neither contradictory nor partially incomplete? (A partial incom [...] ...|$|R
40|$|International audienceDependability {{evaluation}} {{is crucial to}} controlling {{the risks associated with}} system failure, and for this reason, {{it is one of the}} fundamental steps in automated system design. However, the dependability evaluation methods that are currently exploited are not appropriate, given the level of complexity of such industrial systems. The ineffectiveness of the existing methods led us to develop and propose the Safe-SADT method. Our method allows the explicit formalization of functional interactions, the identification of the characteristic values affecting the dependability of complex systems, the quantification of the RAMS parameters (Reliability, Availability, Maintainability, and Safety) of the system's operational architecture, and the validation of that operational architecture in terms of the dependability objectives and constraints set down in the <b>Functional</b> <b>Requirement</b> <b>Specifications</b> (FRS). The results presented in this paper are limited to RAM quantification...|$|R
