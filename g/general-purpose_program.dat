44|741|Public
5000|$|... aclocal, however, is a <b>general-purpose</b> <b>program</b> {{that can}} be useful to autoconf users. The GNU Compiler Collection, for example, uses aclocal even though its {{makefile}} is hand written.|$|E
50|$|In {{computing}} System {{generation or}} sysgen {{is the process}} of creating a particular unique instance of an operating system by combining user-specified options and parameters with manufacturer-supplied <b>general-purpose</b> <b>program</b> code to produce an operating system tailored for a particular hardware and software environment.|$|E
50|$|A large <b>general-purpose</b> <b>program</b> {{such as an}} {{operating}} system has to provide support for all variations of Central processing unit (CPU) {{that it might be}} run on, for all supported main memory sizes, and for all possible configurations of input/output (I/O) equipment. No one installation requires all this support, so system generation provides a process for selecting the options and features actually required on any one system.|$|E
50|$|F# is a <b>general-purpose</b> <b>programming</b> language.|$|R
5000|$|<b>General-purpose</b> <b>programming</b> languages, such as C, Java or Python ...|$|R
5000|$|... {{those that}} are {{functional}} and Turing-complete <b>general-purpose</b> <b>programming</b> languages, to ...|$|R
50|$|The TMS34010 {{is a bit}} addressable, 32-bit processor, {{with two}} {{register}} files, each with fifteen general purpose registers and sharing a sixteenth stack pointer register. Unlike all other microprocessors up to that time, it includes instructions for drawing into two-dimensional bitmaps, arbitrary variable-width data, and arithmetic operations on pixel data. The TMS34010 {{is not limited to}} executing hardwired primitives, and is capable of executing any <b>general-purpose</b> <b>program</b> in addition to graphics programs. The TMS34010 is supported by a full ANSI compliant C compiler.|$|E
40|$|<b>General-purpose</b> <b>program</b> is {{intended}} for thermal stress and instability analyses of structures such as axially-stiffened curved panels. Two types of instability analyses can be effected by program: (1) thermal buckling with temperature variation as specified and (2) buckling due to in-plane biaxial loading...|$|E
40|$|This paper {{describes}} how to verify cryptographic protocols by a <b>general-purpose</b> <b>program</b> transformation technique with unfolding. The questions of representation {{and analysis of}} the protocols as prefix rewriting grammars are discussed. In these aspects Higman and Turchin embeddings on computational paths are considered, and a refinement of Turchin’s relation is presented that allows to algorithmically decide the empty word problem for prefix rewriting grammars. ...|$|E
25|$|Syntax {{extensions}} to <b>general-purpose</b> <b>programming</b> languages, {{for example}} LINQ and Scala.|$|R
5000|$|Difficulty of {{balancing}} trade-offs between domain-specificity and <b>general-purpose</b> <b>programming</b> language constructs.|$|R
5000|$|Scala, a type-safe <b>general-purpose</b> <b>programming</b> {{language}} supporting object-oriented {{and functional}} programming ...|$|R
40|$|The FDC is a <b>general-purpose</b> <b>program</b> {{package for}} Feynman Diagram Calculation. We outline {{previous}} successes in calculations {{and focus on}} its recent progress about automatic deduction the Feynman rules for first principle model, especially for the supersymmetric model, proper evaluation of the rates of multi-final-particle processes and the event generators in the SM and MSSM. A few special applications are presented. The FDChomepage shows an automatic translation of the FDC results into the HTTP version. 1...|$|E
40|$|AbstractThis paper {{focuses on}} the problem of program concretization by {{applying}} correctness-preserving transformations of annotated programs. According to the approach presented, a <b>general-purpose</b> <b>program</b> can be annotated by known information about a specific context of its applications and correctly transformed into a specialized program which is equivalent to the original one on the context-defined ranges of inputs and outputs and is better than it by quality criteria given by the context. Tools for program concretizations via annotated program transformations are considered...|$|E
40|$|Dalton is a {{powerful}} <b>general-purpose</b> <b>program</b> system {{for the study of}} molecular electronic structure at the Hartree–Fock, Kohn–Sham, multiconfigurational self-consistent-field, Møller–Plesset, configuration-interaction, and coupled-cluster levels of theory. Apart from the total energy, a wide variety of molecular properties may be calculated using these electronic-structure models. Molecu-lar gradients and Hessians are available for geometry optimizations, molecular dynamics, and vibrational studies, whereas magnetic resonance and optical ac-tivity can be studied in a gauge-origin-invariant manner. Frequency-dependent molecular properties can be calculated using linear, quadratic, and cubic re-sponse theory. A large number of singlet and triplet perturbation operator...|$|E
5000|$|ANSI C (a <b>general-purpose</b> <b>programming</b> language, {{approved}} by ISO as ISO/IEC 9899) ...|$|R
25|$|Elixir: a functional, concurrent, <b>general-purpose</b> <b>programming</b> {{language}} {{that runs on}} the Erlang Virtual Machine (BEAM).|$|R
5000|$|The {{following}} {{are examples of}} notable <b>general-purpose</b> <b>programming</b> languages that don't provide a conditional operator: ...|$|R
40|$|There is a {{gap between}} {{refactoring}} tools and <b>general-purpose</b> <b>program</b> transformation tools {{that has yet to}} be filled. Refactoring tools are easy to use and well-established, but provide only a limited number of options. On the other hand, program transformation tools are pow-erful but are viable only for large transformation tasks. We propose an approach in which a developer specifies trans-formations to a program by example, using an IDE plu-gin recording the programmer’s actions as changes. These transformation, without the need of a dedicated syntax. Defining refactorings and transformations from concrete cases would enable more frequent uses of medium scale transformations. ...|$|E
40|$|The Newton-X {{program is}} a <b>general-purpose</b> <b>program</b> package for excited-state {{molecular}} dynamics, including nonadiabatic methods. Its modular design allows Newton-X to be easily linked to any quantum-chemistry package that can provide excited-state energy gradients. At the current version, Newton-X can perform nonadiabatic dynamics using Columbus, Turbomole, Gaussian, and Gamess program packages with multireference configuration interaction, multiconfigurational self-consistent field, time-dependent density functional theory, and other methods. Nonadiabatic dynamics simulations with a hybrid combination of methods, such as Quantum-Mechanics/Molecular-Mechanics, are also possible. Moreover, Newton-X {{can be used for}} the simulation of absorption and emission spectra. The code is distributed free of charge for noncommercial and nonprofit uses at www. newtonx. org...|$|E
40|$|Any {{successful}} {{solution to}} using multicore processors to scale <b>general-purpose</b> <b>program</b> performance {{will have to}} contend with rising intercore communication costs while exposing coarsegrained parallelism. Recently proposed pipelined multithreading (PMT) techniques have been demonstrated to have general-purpose applicability and are also able to effectively tolerate intercore latencies through pipelined interthread communication. These desirable properties make PMT techniques strong candidates for program parallelization on current and future multicore processors and understanding their performance characteristics is critical to their deployment. To that end, this paper evaluates the performance scalability of a general-purpose PMT technique called decoupled software pipelining (DSWP) and presents a thorough analysis of the communication bottlenecks that must be overcome for optimal DSWP scalability...|$|E
50|$|Elixir is a functional, concurrent, <b>general-purpose</b> <b>programming</b> {{language}} {{that runs on}} the Erlang virtual machine (BEAM).|$|R
5000|$|Clojure, a functional, immutable, <b>general-purpose</b> <b>programming</b> {{language}} in the Lisp family with {{a strong emphasis on}} concurrency ...|$|R
5000|$|C a <b>general-purpose</b> <b>programming</b> language, {{initially}} {{developed by}} Dennis Ritchie between 1969 and 1973 at AT&T Bell Labs.|$|R
40|$|ABSTRACT: CONTIN is a <b>general-purpose</b> <b>program</b> for {{inverting}} noisy linear algebraic and integral equations {{by means}} of inverse Laplace transform. This study explored the application of CONTIN analysis to determine the relaxation time distribution spectra for food gels, including gellan, carrageenan, whey protein, and gelatin gels, based on stress-relaxation data. CONTIN results represent the continuous relaxation time spectra {{when the number of}} the terms in the discrete Maxwell stress-relaxation model approached infinity. The CONTIN results for gellan gels were correlated to the texture properties of gels from compression tests with respect to the effects of calcium concen-trations. CONTIN analysis may be a very effective tool in elucidating the microstructural properties of a hydrogel from mechanical testing. Key Words: stress relaxation, relaxation time distribution, CONTIN, food ge...|$|E
40|$|Program transformations are an {{important}} area of metaprogramming. Compil-ers and preprocessors commonly apply multiple program transformations in a row, using the output of one transformation as input for the next. Thereby, each transformation relies on {{the output of the}} preceding transformation to be correct. For example, a C compiler depends on the preprocessor to expand all macro definitions as to be able to process the input. Syntactic extensibility of programming languages exposes the implementation of program transforma-tions to the user, which makes it even more important to specify and check their input and output behavior. Current <b>general-purpose</b> <b>program</b> transformation languages are usually untyped, hence they cannot ensure that the composition of multiple transfor-mations is safe, i. e. does not lead to a runtime error. While there is research in designing type-safe program transformation languages for specific domains like XML, the safety properties of <b>general-purpose</b> <b>program</b> transformation languages have not yet been thoroughly studied. To this end, we develop a core calculus for program transformation languages suited to formally explore the safety properties of program transformations. On top of that calculus, we design a domain-specific type system based on regular tree grammars. The idea is to use tree grammars as types describing the abstract syntax of the manipulated programs. This makes it possible to specify the input and output language of a transformation and hence to check the validity of composite transformations. We show that the type system is expressive enough {{to ensure the safety of}} program transformations in our calculus and formally prove its soundness. Furthermore, we extend our calculus and the grammar-based type system with higher-order functions and parametric types. We believe that the resulting language constitutes a solid basis for further research on program transformation languages...|$|E
40|$|Acknowledgments The {{cooperation}} and help {{of many people}} mpde this thesis egort possible. Dr. Peter Maybeck provided me invaluable guidance, and his attention to detail never failed. Major Gary Reid and Capt James Silverthorn similarly provided helpful comments on the thesis. Mr. Stan Musick, of the Reference Systems Branch of the Avionics Laboratory helped me numerous times in incorporating my software into his <b>general-purpose</b> <b>program.</b> More impor-tantly, the software he provided was in good working order when delivered. My group chief, Mr. Arthur Duke, provided the most necessary element, sufficient time in which to finish the project, and Debi Walters did an excellent and prompt job of typing. Finally, for putting up with late hours and little attention, my wife Bevie and son Joshua deserve a special thanks. ii...|$|E
5000|$|Configuration {{files are}} Python scripts, {{which means that}} user-written builds {{have access to a}} {{complete}} <b>general-purpose</b> <b>programming</b> language.|$|R
50|$|At {{least two}} {{programming}} languages {{are known as}} PL/0. One is a subset of IBM's <b>general-purpose</b> <b>programming</b> language PL/I.|$|R
25|$|Julia ({{programming}} language), a high-level, multi-paradigm, open-source, {{dynamic programming}} language primarily intended for numerical computations, {{although it is}} flexible enough for <b>general-purpose</b> <b>programming.</b>|$|R
40|$|International audienceDalton is a {{powerful}} <b>general-purpose</b> <b>program</b> system {{for the study of}} molecular electronic structure at the Hartree-Fock, Kohn-Sham, multiconfigurational self-consistent-field, Møller-Plesset, configuration-interaction, and coupled-cluster levels of theory. Apart from the total energy, a wide variety of molecular properties may be calculated using these electronic-structure models. Molecular gradients and Hessians are available for geometry optimizations, molecular dynamics, and vibrational studies, whereas magnetic resonance and optical activity can be studied in a gauge-origin-invariant manner. Frequency-dependent molecular properties can be calculated using linear, quadratic, and cubic response theory. A large number of singlet and triplet perturbation operators are available for the study of one-, two-, and three-photon processes. Environmental effects may be included using various dielectric-medium and quantum-mechanics/molecular-mechanics models. Large molecules may be studied using linear-scaling and massively parallel algorithms. Dalton is distributed at no cost from [URL] for a number of UNIX platforms...|$|E
40|$|Dalton is a {{powerful}} <b>general‐purpose</b> <b>program</b> system {{for the study of}} molecular electronic structure at the Hartree–Fock, Kohn–Sham, multiconfigurational self‐consistent‐field, Møller–Plesset, configuration‐interaction, and coupled‐cluster levels of theory. Apart from the total energy, a wide variety of molecular properties may be calculated using these electronic‐structure models. Molecular gradients and Hessians are available for geometry optimizations, molecular dynamics, and vibrational studies, whereas magnetic resonance and optical activity can be studied in a gauge‐origin‐invariant manner. Frequency‐dependent molecular properties can be calculated using linear, quadratic, and cubic response theory. A large number of singlet and triplet perturbation operators are available for the study of one‐, two‐, and three‐photon processes. Environmental effects may be included using various dielectric‐medium and quantum‐mechanics/molecular‐mechanics models. Large molecules may be studied using linear‐scaling and massively parallel algorithms. Dalton is distributed at no cost from [URL] for a number of UNIX platform...|$|E
40|$|This paper investigates a flow- and path-sensitive static {{information}} flow analysis. Compared with security type systems with fixed labels, {{it has been}} shown that flow-sensitive type systems accept more secure programs. We show that an {{information flow}} analysis with fixed labels can be both flow- and path-sensitive. The novel analysis has two major components: 1) a <b>general-purpose</b> <b>program</b> transformation that removes false dataflow dependencies in a program that confuse a fixed-label type system, and 2) a fixed-label type system that allows security types to depend on path conditions. We formally prove that the proposed analysis enforces a rigorous security property: noninterference. Moreover, we show that the analysis is strictly more precise than a classic flow-sensitive type system, and it allows sound control of information flow in the presence of mutable variables without resorting to run-time mechanisms...|$|E
50|$|NewtonScript is {{also one}} of the {{conceptual}} ancestors (together with Smalltalk, Self, Act1, Lisp and Lua) of a <b>general-purpose</b> <b>programming</b> language called Io.|$|R
5000|$|Julia ({{programming}} language), a high-level, multi-paradigm, open-source, {{dynamic programming}} language primarily intended for numerical computations, {{although it is}} flexible enough for <b>general-purpose</b> <b>programming.</b>|$|R
25|$|Due to a {{trend of}} {{increasing}} power of mobile GPUs, <b>general-purpose</b> <b>programming</b> became available {{also on the}} mobile devices running major mobile operating systems.|$|R
