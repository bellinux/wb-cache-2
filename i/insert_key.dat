43|217|Public
2500|$|The <b>Insert</b> <b>key</b> {{is mainly}} used to switch between overtype mode, {{in which the}} cursor overwrites any text that is present on and after its current location, and insert mode, where the cursor inserts a {{character}} at its current position, forcing all characters past it one position further. The Delete key discards the character ahead of the cursor's position, moving all following characters one position [...] "back" [...] towards the freed place. On many notebook computer keyboards the key labeled Delete (sometimes Delete and Backspace are printed on the same key) serves the same purpose as a Backspace key. The Backspace key deletes the preceding character.|$|E
50|$|The <b>Insert</b> <b>key</b> (often {{abbreviated}} Ins) {{is a key}} {{commonly found}} on computer keyboards.|$|E
50|$|Screen readers use the <b>insert</b> <b>key</b> for hotkeys {{for reading}} text, {{speaking}} formatting information, or opening the screen reader's configuration menu or window.|$|E
2500|$|... : PHP MarkDown {{extension}} <b>inserting</b> <b>key</b> French spacing non-breaking spaces into entered text ...|$|R
50|$|Forward {{chaining}} {{would teach}} the subject first to <b>insert</b> the <b>key.</b> Once that task is mastered, {{they are told}} to <b>insert</b> the <b>key,</b> and taught to turn it. Once that task is mastered, they are told to perform the first two, then taught to open the door. Backwards chaining would involve the teacher first inserting and turning the key, and the subject then being taught to open the door. Once that is learned, the teacher <b>inserts</b> the <b>key,</b> and the subject is taught to turn it, then opens the door as the next step. Finally, the subject is taught to <b>insert</b> the <b>key,</b> and they turn and open the door. Once {{the first step is}} mastered, the entire task has been taught. Total task chaining would involve teaching the entire task as a single series, prompting through all steps. Prompts are faded (reduced) at each step as they are mastered.|$|R
30|$|SHAM {{is created}} and {{maintained}} using three procedures. The node joining, the <b>key</b> <b>inserting,</b> and the <b>key</b> locating procedures. In this section, we describe its design and clarify the above mentioned procedures in detail.|$|R
50|$|Notably, on {{some recent}} keyboards, the <b>Insert</b> <b>key</b> is {{completely}} absent (except on the numeric keypad), its space instead {{filled with a}} double-size Delete key.|$|E
50|$|Text editors - {{typically}} are in insert mode by default {{but can be}} toggled {{in and out of}} overtype mode by pressing the <b>Insert</b> <b>key.</b>|$|E
5000|$|... (3) Insert. The <b>Insert</b> <b>key</b> {{has been}} pressed. Characters after the cursor while shift right when text is keyed. Press Insert again to cease Insert Mode.|$|E
40|$|Abstract. The main {{intention}} {{of this work}} {{is to create a}} dictionary structure which could benefit from massive parallelism of threads when performing computation on all or a selected set of elements, while hav-ing an ability to search for and <b>insert</b> <b>keys</b> very quickly, yet preserving the order of elements. So far, no such structure dedicated for GPU ex-ists. This paper presents results of the first to our knowledge B+-tree implementation in CUDA C language. ...|$|R
50|$|The problem, here, is to <b>insert</b> a <b>key</b> at an {{available}} key {{space in}} a given Hash Table using quadratic probing.|$|R
60|$|The general utility man {{tried to}} <b>insert</b> a <b>key</b> in the lock, but failed {{on account of}} the key on the inside.|$|R
50|$|The <b>Insert</b> <b>key,</b> {{when pressed}} along with Control or Shift, {{can also be}} used to copy or paste in Microsoft Windows. This {{behavior}} comes from the Common User Access standard.|$|E
50|$|The insert/overtype mode {{toggling}} is not global for {{the computer}} or even for a single application but rather local to the text input window in which the <b>Insert</b> <b>key</b> was pressed.|$|E
5000|$|A Help key, {{instead of}} an <b>Insert</b> <b>key,</b> or on the most recent {{aluminum}} keyboards, a fn key, which toggles {{the function of the}} function keys between their default functions and special functions (volume control, Exposé, etc.).|$|E
50|$|Double locks are {{generally}} disengaged by <b>inserting</b> the <b>key</b> and rotating {{it in the}} opposite direction from that used to unlock the cuff.|$|R
40|$|This paper {{describes}} algorithms for key deletion in B+-trees. There {{are published}} algorithms and pseudocode for searching and <b>inserting</b> <b>keys,</b> but deletion, {{due to its}} greater complexity and perceived lesser importance, is glossed over completely or left as an exercise to the reader. To remedy this situation, we provide a well documented flowchart, algorithm, and pseudo-code for deletion, their relation to search and insertion algorithms, and {{a reference to a}} freely available, complete B+-tree library written in the C programming language...|$|R
50|$|In user {{interface}} design, a mode {{is a distinct}} setting within a computer program or any physical machine interface, in which the same user input will produce perceived results different to those that it would in other settings. The best-known modal interface components are probably the Caps lock and <b>Insert</b> <b>keys</b> on the standard computer keyboard, both of which put the user's typing into a different mode after being pressed, then {{return it to the}} regular mode after being re-pressed.|$|R
50|$|Once {{the cursor}} has been {{positioned}} as desired, any text typed will {{appear at the}} location of the cursor, either inserting the text and pushing any subsequent text further downwards, or overwriting any existing text (a mode of operation typically toggled by the <b>Insert</b> <b>Key</b> on most computer keyboards/systems).|$|E
5000|$|Work in insert or {{overwrite}} mode, typically switched using <b>Insert</b> <b>key.</b> In {{insert mode}} {{if there is}} a character {{to the right of the}} caret, the new character will be inserted before it, while in overwrite mode typing a new character will replace (overwrite) the character to the right of the caret position.|$|E
5000|$|In a word processor, {{the status}} bar often shows cursor position, {{the number of}} pages in the document, {{and the state of}} the caps lock, num lock, and scroll lock keys. Additionally, many word {{processors}} assign the <b>insert</b> <b>key</b> a behavior similar to that of these three, to allow toggling the insertion modethe state of that is also displayed in the status bar.|$|E
3000|$|..., is {{a binary}} tree {{in which each}} node has a key value and all the keys of the left subtree are less than the key at the root, and all the keys of the right subtree are greater than the key at the root, i.e., the first key is {{associated}} with the root, the next key is placed in the left child of the root if it is smaller than the key of the root and it is sent to the right child of the root if it is larger than the key of the root. In this way, we proceed further by <b>inserting</b> <b>key</b> by key. This property holds recursively for the left and right subtrees of the tree T.|$|R
5000|$|... : - <b>insert</b> a <b>key</b> [...] {{into the}} kinetic queue {{at the current}} virtual time, whose value changes as a {{continuous}} function [...] of time [...]|$|R
60|$|Somebody was at {{the hallway}} door, trying to <b>insert</b> a <b>key</b> in the lock. But the key would not go in, because of the key already there.|$|R
5000|$|Modern word {{processing}} applications operate in insert mode by default, but {{can still be}} switched to overtype mode by pressing the <b>Insert</b> <b>key.</b> Some applications indicate overtype mode with a letter-width cursor box, {{as opposed to the}} standard narrow cursor; however, others use the narrow cursor for both modes, and indicate overtype with an [...] "OVR" [...] indicator in the status bar.|$|E
50|$|During powerup, the BIOS {{firmware}} displays an ID string in the lower-left-hand {{corner of}} the screen. This ID string comprises various pieces {{of information about the}} firmware, including when it was compiled, what configuration options were selected, the OEM license code, and the targeted chipset and motherboard. There are 3 ID string formats, the first for older AMIBIOS, and the second and third for the newer AMI Hi-Flex ("high flexibility") BIOS. These latter are displayed when the <b>Insert</b> <b>key</b> is pressed during power-on self-test.|$|E
50|$|Demos Commander is a {{text mode}} application. The main {{interface}} {{consists of two}} panels which display the file system. It is used {{in a similar way}} to many other programs run in the Unix shell. Arrow keys control file selection, the <b>insert</b> <b>key</b> is used to select files (but no directories) and the Function Keys perform operations such as renaming, editing and copying files. Unlike many full screen programs that run in console, Demos Commander is not capable of resizing itself when the console changes resolution (for example, when an xterm window is resized) nor able to support any other console resolution than 80x24.|$|E
60|$|Hal now {{thought he}} saw his way clear to escape. He bounded toward the door, and was just <b>inserting</b> the <b>key</b> into the lock when Macklin sprang up.|$|R
6000|$|... "You’ll {{find it a}} bit dull after London, I expect," [...] he remarked, as he <b>inserted</b> his <b>key</b> in {{the door}} of a small house in a quiet street.|$|R
60|$|Dora {{got down}} {{and looked through}} the keyhole. It was clear and she quickly <b>inserted</b> the <b>key</b> taken from the hook. It fitted perfectly, and in a second more the door was unlocked.|$|R
50|$|Midnight Commander is a console {{application}} with a text user interface. The main interface {{consists of two}} panels which display the file system. File selection is done using arrow keys, the <b>insert</b> <b>key</b> is used to select files and the function keys perform operations such as renaming, editing and copying files. Later versions of the Midnight Commander additionally have mouse support. Such versions are aware of GPM and X terminal emulators (such as GNOME Terminal or xterm) which support mouse reporting. When running inside an X terminal, these versions can update {{the name of the}} window in which Midnight Commander runs (if allowed by the terminal emulator).|$|E
5000|$|The Thinkpad X240 {{replaced}} the earlier X230. Compared to the X230, the X240 {{changed from the}} higher wattage Intel Core CPUs labelled as [...] "Mobile class", to the lower wattage CPUs labelled [...] "ultrabook class". Depending on the CPU model, the change resulted in a 10-20% reduction in CPU performance compared to the older, but higher wattage Ivy Bridge generation CPUs. This was the first X series laptop to forgo the classic trackpoint buttons in favour of a touchpad that can also be pushed. The X240 reduced the maximum physical memory to 8 GB, with only one memory slot, making Dual-Channel unavailable (compared to 16 GB Dual-Channel, in two memory slots, on the X230), lost the dedicated <b>Insert</b> <b>key,</b> and lost the dedicated Volume Up and Volume Down keys.|$|E
5000|$|... (Insert) {{originally}} toggled between {{text insertion}} and overwrite modes. Importantly, it is involved along with Ctrl and Shift keys in keyboard shortcuts for copy (Ctrl+Insert) and paste (Shift+Insert) {{according to the}} IBM CUA user interface guidelines; the IBM CUA shortcuts are still widely supported by most current PC operating systems, and many PC users who learned those shortcuts between the late 1980s and the early 1990s may still find them more natural, convenient, or ergonomic than their [...] "modern" [...] Ctrl+X/C/V counterparts, given the close proximity of the Ctrl, Shift and Insert keys to the cursor movement keys. This particular role of the <b>Insert</b> <b>key</b> is often overlooked by modern-times documentation, if not hardware design, which tend to attribute to [...] "Insert" [...] only its more obvious, but much less frequently used and somewhat obsolete, original function.|$|E
50|$|The Net Jet {{system is}} played by <b>inserting</b> a <b>key</b> into the controller. It came with a free demo key. The demo key allowed a user to try each of the Net Jet games for 30 minutes. Players would then have to {{purchase}} one of twelve different game keys in order to unlock each individual game already on the computer. Despite the actual games being stored on the computer's hard drive, without a <b>key</b> <b>inserted</b> the game system would not function.|$|R
60|$|Up {{the stairs}} bounded Dick and Tom. They found Mrs. Sobber {{in a corner}} of the hallway, the lighted candle on a dusty stand. At a nearby door Sam was <b>inserting</b> a <b>key</b> in the lock.|$|R
5000|$|If a new key, {{other than}} the null string, is {{inserted}} into a leaf node of the trie, then the computer {{can go to the}} last preceding node where there was a key or a bifurcation to perform a depth-first search to find the lexicographic successor or predecessor of the <b>inserted</b> <b>key</b> for the purpose of splicing the new key into the circularly linked list. The last preceding node where there was a key or a bifurcation, a fork in the path, is a parent node in the type of trie shown here, where only unique string prefixes are represented as paths in the trie. If there is already a key associated with the parent node that would have been visited during a movement away from the root during a right-hand, forward-moving, depth-first traversal, then that immediately ends the depth-first search, as that key is the predecessor of the <b>inserted</b> <b>key.</b> For example, if Bashful is inserted into the trie, then the predecessor is the null string in the parent node, which is the root node in this case. In other words, if the key that is being inserted is on the leftmost branch of the parent node, then any string contained in the parent node is the lexicographic predecessor of the key that is being inserted, else the lexicographic predecessor of the key that is being inserted exists down the parent node's branch that is immediately {{to the left of the}} branch where the new <b>key</b> is being <b>inserted.</b> For example, if Grumpy were the last <b>key</b> <b>inserted</b> into the trie, then the computer would have a choice of trying to find either the predecessor, Dopey, or the successor, Happy, with a depth-first search starting from the parent node of Grumpy. With no additional information to indicate which path is longer, the computer might traverse the longer path, D, O, P. If Dopey were the last <b>key</b> <b>inserted</b> into the trie, then the depth-first search starting from the parent node of Dopey would soon find the predecessor, [...] "Doc", because that would be the only choice.|$|R
