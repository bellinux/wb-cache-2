1098|455|Public
25|$|In {{the classic}} Mac OS, however, {{encoding}} of the <b>filename</b> was stored with the <b>filename</b> attributes.|$|E
25|$|This {{property}} {{was used by}} the move command algorithm that first creates a second <b>filename</b> and then only removes the first <b>filename.</b>|$|E
25|$|<b>Filename</b> {{searches}} {{are implemented}} using keywords. The <b>filename</b> {{is divided into}} its constituent words. Each of these keywords is hashed and stored in the network, together with the corresponding <b>filename</b> and file hash. A search involves choosing one of the keywords, contacting the node with an ID closest to that keyword hash, and retrieving the list of filenames that contain the keyword. Since every <b>filename</b> in the list has its hash attached, the chosen file can then be obtained in the normal way.|$|E
50|$|Due to encryption, the <b>filenames</b> for {{encrypted}} files {{produced by}} EncFS are {{longer than the}} original <b>filenames.</b> Therefore, <b>filenames</b> whose length {{is close to the}} maximum supported by the filesystem cannot be stored by EncFS, since they will exceed the length limit after encryption. Most filesystems limit <b>filenames</b> to 255 bytes; in that case, EncFS only supports <b>filenames</b> up to 190 bytes.|$|R
5000|$|... use {{the native}} ASCII {{character}} set in <b>filenames,</b> precluding {{the use of}} multi-lingual <b>filenames.</b> Now many Unix systems run in UTF-8, and CVS on such systems handles UTF-8 multi-lingual <b>filenames</b> natively.|$|R
50|$|As with {{previous}} file systems, {{the design of}} the FAT32 file system does not include direct built-in support for long <b>filenames,</b> but FAT32 volumes can optionally hold VFAT long <b>filenames</b> in addition to short <b>filenames</b> {{in exactly the same way}} as VFAT long <b>filenames</b> have been optionally implemented for FAT12 and FAT16 volumes.|$|R
25|$|A <b>filename</b> {{could be}} stored using {{different}} byte strings in distinct systems {{within a single}} country, such as if one used Japanese Shift JIS encoding and another Japanese EUC encoding. Conversion was not possible as most systems did not expose {{a description of the}} encoding used for a <b>filename</b> as part of the extended file information. This forced costly <b>filename</b> encoding guessing with each file access.|$|E
25|$|A <b>filename</b> (also {{written as}} two words, file name) {{is a name}} used to uniquely {{identify}} a computer file stored in a file system. Different file systems impose different restrictions on <b>filename</b> lengths and the allowed characters within filenames.|$|E
25|$|On Linux, {{this means}} the <b>filename</b> {{is not enough to}} open a file: additionally, the exact byte {{representation}} of the <b>filename</b> on the storage device is needed. This can be solved at the application level, with some tricky normalization calls.|$|E
5000|$|Mac OS using PC Exchange stores {{its various}} dates, file {{attributes}} and long <b>filenames</b> in a hidden file called [...] "", and resource forks (a common Mac OS ADS) in a subdirectory called [...] "", in every directory {{where they are}} used. From PC Exchange 2.1 onwards, they store the Mac OS long <b>filenames</b> as standard FAT long <b>filenames</b> and convert FAT <b>filenames</b> longer than 31 characters to unique 31-character <b>filenames,</b> which can then be made visible to Macintosh applications.|$|R
25|$|BSD ar stores <b>filenames</b> right-padded with ASCII spaces. This causes {{issues with}} spaces inside <b>filenames.</b>|$|R
2500|$|... {{check for}} {{canonical}} equivalence among <b>filenames,</b> to avoid two canonically equivalent <b>filenames</b> {{in the same}} directory.|$|R
25|$|Dynamic-link {{libraries}} {{usually have}} the suffix *.DLL, <b>filename</b> extensions.|$|E
25|$|File {{systems have}} not always {{provided}} the same character set for composing a <b>filename.</b> Before Unicode became a de facto standard, file systems mostly used a locale-dependent character set. By contrast, some new systems permit a <b>filename</b> to be composed of almost any character of the Unicode repertoire, and even some non-Unicode byte sequences. Limitations may be imposed by the file system, operating system, application, or requirements for interoperability with other systems.|$|E
25|$|The {{components}} {{required to}} identify a file varies across operating systems, as does the syntax and format for a valid <b>filename.</b>|$|E
5000|$|GP32 Renamer: a Windows utilitiy that {{converts}} long <b>filenames</b> to 8.3 <b>filenames</b> for the GamePark 32 handheld console.|$|R
50|$|The ISO 9660 {{file system}} (mainly used on compact discs) has similar {{limitations}} {{at the most}} basic Level 1, with the additional restriction that directory names cannot contain extensions and that some characters (notably hyphens) are not allowed in <b>filenames.</b> Level 2 allows <b>filenames</b> of up to 31 characters, more compatible with classic Mac OS <b>filenames.</b>|$|R
50|$|In {{order to}} support Java applications, the FlexOS-based IBM 4690 OS version 2 {{introduced}} its own virtual file system (VFS) architecture to store long <b>filenames</b> in the FAT file system in a backwards compatible fashion. If enabled, the virtual <b>filenames</b> (VFN) are available under separate logical drive letters, whereas the real <b>filenames</b> (RFN) remain available under the original drive letters.|$|R
25|$|Many file systems, {{including}} FAT, NTFS, and VMS systems, allow a <b>filename</b> extension {{that consists}} {{of one or more}} characters following the last period in the <b>filename,</b> dividing the <b>filename</b> into two parts: a base name or stem and an extension or suffix used by some applications to indicate the file type. Multiple output files created by an application use the same basename and various extensions. For example, a compiler might use the extension FOR for source input file (for Fortran code), OBJ for the object output and LST for the listing. Although there are some common extensions, they are arbitrary and a different application might use REL and RPT. On filesystems that do not segregate the extension, files will often have a longer extension such as html.|$|E
25|$|Other filesystems, by design, {{provide only}} one <b>filename</b> per file, which {{guarantees}} that alteration of one filename's file does {{not alter the}} other filename's file.|$|E
25|$|Under Multiuser DOS and REAL/32, the {{exclamation mark}} (!) {{is not a}} valid <b>filename</b> {{character}} since {{it is used to}} separate multiple commands in a single command line.|$|E
50|$|GNU/Linux {{provides}} a VFAT filesystem driver {{to work with}} FAT volumes with VFAT long <b>filenames.</b> For some while, a UVFAT driver was available to provide combined support for UMSDOS-style permissions with VFAT long <b>filenames.</b>|$|R
50|$|If {{you will}} be {{executing}} over many results, it is more efficient to use {{a variant of the}} exec primary that collects <b>filenames</b> up to ARG_MAX and then executes COMMAND with a list of <b>filenames.</b>|$|R
50|$|Human68K {{does not}} support the VFAT long <b>filenames</b> {{standard}} of modern Windows systems, but it supports 18.3 character <b>filenames</b> instead of the 8.3 character <b>filenames</b> allowed in the FAT filesystem. Human68K is case sensitive and allows lower case and Shift JIS encoded Kanji characters in <b>filenames,</b> both of which cause serious problems when a DOS system tries to read such a directory. If a X68000 user restricts himself to use only <b>filenames</b> according to the 8.3 characters scheme of DOS, using only Latin upper case characters, then a disk written on the X68000 is fully compatible with other Japanese standard platforms like e.g. the NEC PC-9800, the Fujitsu FMR and FM Towns computers. The Japanese standard disk format used by the X68000 is: 77 tracks, 2 heads, 8 sectors, 1024 bytes per sector, 360 rpm (1232 KiB).|$|R
25|$|The {{character}} 0xE5 was {{not allowed}} as the first letter in a <b>filename</b> under 86-DOS and MS-DOS/PC DOS 1.x-2.x, but {{can be used in}} later versions.|$|E
25|$|In Windows utilities, {{the space}} and the period are not allowed as the final {{character}} of a <b>filename.</b> The period is allowed as the first character, but some Windows applications, such as Windows Explorer, forbid creating or renaming such files (despite this convention being used in Unix-like systems to describe hidden files and directories). Workarounds include appending a dot when renaming the file (that is then automatically removed afterwards), using alternative file managers, or saving a file with the desired <b>filename</b> from within an application.|$|E
25|$|Around {{this same}} time {{appeared}} the dot (period or full-stop) as a <b>filename</b> extension separator, and the limit to three letter extensions {{might have come}} from RAD50 16-bit limits.|$|E
50|$|Joliet accomplishes this by {{supplying}} an additional set of <b>filenames</b> that are encoded in UCS-2BE. These <b>filenames</b> {{are stored in}} a special supplementary volume descriptor, that is safely ignored by ISO 9660-compliant software, thus preserving backward compatibility.|$|R
5000|$|In Windows NT-based {{operating}} systems, {{command prompt}} (...) applets accept long <b>filenames</b> with wildcard characters (question sign '?' and asterisk '*'); long <b>filenames</b> with spaces in them {{need to be}} escaped (i.e. enclosed in single or double quotes).|$|R
25|$|Traditionally, <b>filenames</b> allowed any {{character}} in their <b>filenames</b> {{as long as}} they were file system safe. Although this permitted the use of any encoding, and thus allowed the representation of any local text on any local system, it caused many interoperability issues.|$|R
25|$|For floppy disks, FAT {{has been}} {{standardized}} as ECMA-107 and ISO/IEC9293:1994 (superseding ISO9293:1987). These standards cover FAT12 and FAT16 with only short 8.3 <b>filename</b> support; long filenames with VFAT are partially patented.|$|E
25|$|In {{the early}} years of the web, all content was static, and thus all hyperlinks pointed at a <b>filename.</b> Soon, though, many web pages became dynamic, and many URLs began to include query terms.|$|E
25|$|The {{initiating}} host A sends an RRQ (read request) or WRQ (write request) packet to host S at {{port number}} 69, containing the <b>filename,</b> transfer mode, and optionally any negotiated option {{under the terms}} of RFC 2347.|$|E
50|$|DOS\7: Long <b>filenames</b> for FFS (FFS-LNFS).|$|R
5000|$|The {{specification}} only allows <b>filenames</b> {{to be up}} to 64 Unicode {{characters in}} length. However, the documentation for mkisofs states <b>filenames</b> up to 103 characters in length do not appear to cause problems. Microsoft has documented it [...] "can use up to 110 characters." ...|$|R
40|$|Text and {{software}} files from "Chamorro-English Dictionary (PALI Language Texts: Micronesia) " by Donald M. Topping, Pedro M. Ogo, and Bernadita C. Dungca, published in 1975 by University of Hawai'i Press. Contains 6 text files of dictionary entries formatted for printing; a directory containing 3 program files (with <b>filenames</b> ending. SPT), 6 files containing alphabetized lists of words (with <b>filenames</b> ending. FIL) and 6 files containing alphabetized lists of words with their morphological breakdown (with <b>filenames</b> ending. SRT). The programs {{were written by}} Robert Hsu. Gua...|$|R
