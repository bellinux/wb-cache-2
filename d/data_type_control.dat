1|10000|Public
40|$|Graduation date: 1983 Very High Level Languages (VHLL) provide {{higher level}} abstractions and more {{powerful}} primitives than high level languages (HLL). A programmer uses these abstractions {{to solve a problem}} by specifying "what" is to be done rather than "how" it is to be done. This research work reports the design and development of Bagit, a new VHLL for application programminq. Bagit provides 1) an encapsulation mechanism (bag) and, 2) an information hiding mechanism (filter) which are used in a consistent manner to support <b>data,</b> <b>type,</b> <b>control,</b> functional, and access abstraction. A data abstraction (ADT) in Bagit is defined by a bag which encapsulates the representation and valid operations on a type, and a filter which defines the interface to the abstraction. A type abstraction is a data abstraction which has two or more filters, each filter defining a new type. A zero type is a type or data abstraction where all its attributes are of type function. Functional abstraction in Bagit is provided via functions which can return bags. Furthurmore, these functions mav be used in conjunction with loop constructs and bag expressions, providing control abstractions. In this case they are generators of bags. Finally, associative referencing is supported by labelled bags. By hiding the irrelevant information of how an object is accessed, and only specifying what the object is, access abstraction is achieved. The significant contributions to the field of programming languages are, 1) Realization of an information hiding mechanism as a language design principle in addition to an encapsulation mechanism, 2) Attemptinq to provide a bridae between the areas of programming lanauages and database systems, 3) Treating various forms of abstraction using a single abstraction mechanism in a consistent and uniform manner, 4) Solving the problems of zero types and more than one type, and 5) Improving functional and control abstraction...|$|E
5000|$|A {{wide range}} of {{computational}} <b>data</b> <b>types,</b> program <b>control</b> <b>data</b> <b>types,</b> and forms of <b>data</b> structure (strong <b>typing).</b>|$|R
40|$|Programming Languages] Language Classifications — {{object-oriented}} languages; D. 3. 3 [Programming Languages] Language Constructs and Features — abstract <b>data</b> <b>types,</b> <b>control</b> structures, procedures, functions, and subroutines; D. 3. m [Programming Languages] Miscellaneous — multimethods, generic functions, single dispatch, multiple dispatch, type systems; F. 3. 3 [Logics and Meanings of Programs] Studies of Program Constructs — <b>control</b> primitives, <b>type</b> structure...|$|R
40|$|This {{syllabus}} {{was submitted}} to the Rhodes College Office of Academic Affairs by the course instructorIn this course, you will learn the fundamental concepts of procedural programming. Algorithmic design and problem solving strategies will be emphasized as well as basic syntax of the C++ programming language. Topics to be covered include <b>data</b> <b>types,</b> <b>control</b> structures, functions, arrays, files, and the mechanics of running, testing, and debugging programs. The course also includes {{an introduction to the}} historical and social context of computing and an overview of computer science as a discipline...|$|R
40|$|An {{efficient}} program, {{which runs}} {{on a personal}} computer, for the storage, retrieval, and processing of chemical information, is presented. The program can work both as a stand-alone application or {{in conjunction with a}} specifically written Web server application or with some standard SQL servers, e. g., Oracle, Interbase, and MS SQL. New <b>types</b> of <b>data</b> fields are introduced, e. g., arrays for spectral information storage, HTML and database links, and user-defined functions. CheD has an open architecture; thus, custom <b>data</b> <b>types,</b> <b>controls,</b> and services may be added. A WWW server application for chemical data retrieval features an easy and user-friendly installation on Windows NT or 95 platforms. 1...|$|R
40|$|A shading {{language}} {{provides a}} means to extend the shading and lighting formulae used by a rendering system. This paper discusses {{the design of a}} new shading language based on previous work of Cook and Perlin. This language has various types of shaders for light sources and surface reflectances, point and color <b>data</b> <b>types,</b> <b>control</b> flow constructs that support the casting of outgoing and the integration of incident light, a clearly specified interface to the rendering system using global state variables, and a host of useful built-in functions. The design issues and their impact on the implementation are also discussed. CR Categories: 1. 3. 3 [Computer Graphics] Picture/Image Generation- Display algorithms; 1. 3. 5 [Computer Graphics...|$|R
40|$|Abstract—We {{incorporate}} body-wave {{arrival time}} and surface-wave dispersion data into a joint inversion for three-dimensional P-wave and S-wave velocity {{structure of the}} crust surrounding {{the site of the}} San Andreas Fault Observatory at Depth. The contri-butions of the two <b>data</b> <b>types</b> to the inversion are controlled by the relative weighting of the respective equations. We find that the trade-off between fitting the two <b>data</b> <b>types,</b> <b>controlled</b> by the weighting, defines a clear optimal solution. Varying the weighting away from the optimal point leads to sharp increases in misfit for one <b>data</b> <b>type</b> with only modest reduction in misfit for the other <b>data</b> <b>type.</b> All the acceptable solutions yield structures with similar primary features, but the smaller-scale features change substan-tially. When there is a lower relative weight on the surface-wave data, it appears that the solution over-fits the body-wave data, leading to a relatively rough Vs model, whereas for the optimal weighting, we obtain a relatively smooth model that is able to fit both the body-wave and surface-wave observations adequately...|$|R
50|$|In {{computer}} science, a semaphore is {{a variable}} or abstract <b>data</b> <b>type</b> used to <b>control</b> {{access to a}} common resource by multiple processes in a concurrent system such as a multiprogramming operating system.|$|R
40|$|In this paper, we {{describe}} a new algorithm that consists in combining an eye-tracker for minimizing the fatigue of a user during {{the evaluation process}} of Interactive Evolutionary Computation. The approach is then applied to the Interactive One-Max optimization problem. Categories and Subject Descriptors D. 3. 3 [Programming Languages]: Language Contructs and Features – abstract <b>data</b> <b>types,</b> polymorphism, <b>control</b> structures...|$|R
40|$|In {{this note}} we discuss {{strategies}} that would enhance modern {{modeling and simulation}} software (MSS) with reliable routines using validated <b>data</b> <b>types,</b> <b>controlled</b> rounding, algorithmic differentiation and interval equation or initial value problem solver. Several target systems are highlighted. In stochastic traffic modeling, the computation of workload distributions plays a prominent role since they influence the quality of service parameters. INoWaTIV is a workload analysis tool that uses two different techniques: the polynomial factorization approach and the Wiener-Hopf factorization to determine the work-load distributions of GI/GI/ 1 and SMP/GI/ 1 service systems accurately. Two extensions of a multibody modeling and simulation software were developed to model kinematic and dynamic properties of multibody systems in a validated way. Furthermore, an interface was created that allows the computation of convex hulls and reliable lower bounds for the distances between subpav-ing-encoded objects constructed with SIVIA (Set Inverter Via Interval Analysis) ...|$|R
40|$|In {{the context}} of steeply declining enrollments in US Computer Science {{education}} [7], our group is developing curricular modules for Introduction to Computer Science (CS 1) classes in which robots are used as educational tools to motivate students about applications of Computing. The CS 1 class is traditionally taught in the United States as an in-depth introduction {{to the art of}} programming from primitive <b>data</b> <b>types</b> through <b>control</b> structures and objects, endin...|$|R
50|$|Data {{communications}} can {{be especially}} important for artillery because by using structured messages and defined <b>data</b> <b>types</b> fire <b>control</b> messages can be automatically routed and processed by computers. For example, a target acquisition element can send a message with target details which is automatically routed through the tactical and technical fire control elements to deliver firing data to the gun's laying system and the gun automatically laid. As tactical data networks become pervasive, they will provide any connected soldier with a means for reporting target information and requesting artillery fire.|$|R
40|$|Artificial {{intelligence}} {{techniques have}} found a number of applications in hypermedia, mostly in two specific areas, user interface, particularly adaptive ones and information search and retrieval. There have been fewer cases of application of these techniques to aid the authoring process. This paper studies the applicability of some AI techniques to the authoring process, in particular, helping designers understand and control {{the structure of a}} presentation. Categories and Subject Descriptors D. 3. 3 [Programming Languages]: Language Constructs and Features – abstract <b>data</b> <b>types,</b> polymorphism, <b>control</b> structures. This is just an example, please use the correc...|$|R
40|$|Compared to the {{proprietary}} programming {{languages of}} systems like ILOG Solver, SICStus Prolog and Mozart Oz, constraint modelling languages offer {{a lot of}} benefits, such as usability and portability. This report presents the design and a prototype implementation of the “Tiny Constraint Modelling Language ” (TCML). The <b>data</b> <b>types</b> and <b>control</b> structures of TCML {{have been designed to}} make the modelling of constraint problems intuitive and declarative; they include powerful iterators and arrays of dynamic size. The prototype implementation currently includes backends for Mozart Oz and ILOG solver...|$|R
40|$|In this {{workshop}} we {{will explore}} the multi-disciplinary research topics of whole body interaction. Generally {{interaction design is}} considered as a non-integrated collection of physical behaviour by users. However as technology advances we can integrate the behaviour of the whole body at multiple levels. In this workshop we will explore these levels and recommend some directions for future research. Categories and Subject Descriptors D. 3. 3 [Programming Languages]: Language Contructs and Features – abstract <b>data</b> <b>types,</b> polymorphism, <b>control</b> structures. This is just an example, please use the correc...|$|R
40|$|In this paper, {{we report}} {{preliminary}} findings from an experimental {{study in which}} twenty-eight users answered questions by performing strategic information searches on web pages. Pages, which varied in length from 100 to 850 words, were displayed on either a standard, desktop monitor (full-sized) or a palm handheld interface (small-screen). Overall, users took more time to perform the tasks {{on the small screen}} interface, with the break in efficacy appearing between 225 and 350 word-lengths. Finally, contrary to our hypothesis, participants were similarly accurate across conditions. Categories and Subject Descriptors Language Contructs and Features – abstract <b>data</b> <b>types,</b> polymorphism, <b>control</b> structure...|$|R
40|$|In this course, {{you will}} be {{introduced}} to general principles underlying the practice of objectoriented programming in C++ environment. You will learn principles of program design and algorithm development strategies as well as classes, abstract <b>data</b> <b>types,</b> arrays, flow <b>control,</b> methods, overloading, exception handling, debugging, and I/O. Fundamental programming techniques such as object design, implementation of inheritance and/or interfaces, and polymorphism are also discussed...|$|R
40|$|We {{present a}} non-oblivious, {{extremely}} robust watermarking scheme for audio signals. The watermarking algorithm {{is based on}} the SVD of the spectrogram of the signal. The SVD of the spectrogram is modified adaptively according to the information to be watermarked. The algorithm is tested for inaudibility performance with audio quality measures and robustness tests with audio Stirmark benchmark tool, which have a variety of common signal processing distortions. The comparison with a DCT based non-oblivious based method shows that the proposed SVD based method performs very satisfactorily. Categories and Subject Descriptors D. 3. 3 [Programming Languages]: Language Contructs and Features – abstract <b>data</b> <b>types,</b> polymorphism, <b>control</b> structures...|$|R
40|$|The idea of {{time has}} been always {{associated}} with biographies and narratives. Life events are tightly bound to a time frame, which gives the reader a point of reference. However, this chronological reference that facilitates scholars in many ways also hinders {{the study of the}} hidden relationships between events. I propose the study of a document collection from multiple perspectives by eliminating the chronological aspect behind it. For this purpose, I have developed Lotus Leaf: a hypertext system that allows fluid comparisons between a collection of documents. Categories and Subject Descriptors D. 3. 3 [Programming Languages]: Language Contructs and Features – abstract <b>data</b> <b>types,</b> polymorphism, <b>control</b> structures...|$|R
40|$|In {{this paper}} {{we show that}} {{programming}} languages can be translated into recurrent (analog, rational weighted) neural nets. Implementation of programming languages in neural nets turns {{to be not only}} theoretical exciting, but has also some practical implications in the recent efforts to merge symbolic and subsymbolic computation. To be of some use, it should be carried in a context of bounded resources. Herein, we show how to use resource bounds to speed up computations over neural nets, through suitable <b>data</b> <b>type</b> coding like in the usual programming languages. We introduce <b>data</b> <b>types</b> and show how to code and keep them inside the information flow of neural nets. <b>Data</b> <b>types</b> and <b>control</b> structures are part of a suitable programming language called NETDEF. Each NETDEF program has a specific neural net that computes it. These nets have a strong modular structure and a synchronization mechanism allowing sequential or parallel execution of subnets, despite the massive parallel f [...] ...|$|R
40|$|In {{a recent}} paper [Neto et al. 97] {{we showed that}} {{programming}} languages can be translated on recurrent (analog, rational weighted) neural nets. The goal was not efficiency but simplicity. Indeed we used a number-theoretic approach to machine programming, where (integer) numbers were coded in a unary fashion, introducing a exponential slow down in the computations, {{with respect to a}} two-symbol tape Turing machine. Implementation of programming languages in neural nets turns to be not only theoretical exciting, but has also some practical implications in the recent efforts to merge symbolic and subsymbolic computation. To be of some use, it should be carried in a context of bounded resources. Herein, we show how to use resource boundedness to speed up computations over neural nets, through suitable <b>data</b> <b>type</b> coding like in the usual programming languages. We introduce <b>data</b> <b>types</b> and show how to code and keep them inside the information flow of neural nets. <b>Data</b> <b>types</b> and <b>control</b> struct [...] ...|$|R
40|$|Abstract. With the {{introduction}} of UML 2. 0, many improvements to diagrams have been incorporated into the language. Some of the major changes were applied to sequence diagrams, which were enhanced {{with most of the}} concepts from ITU-T’s Message Sequence Charts, and more. In this paper, we introduce a formal semantics for most concepts of sequence diagrams by means of Petri nets as a formal model. Thus, we are able to express the partially ordered and concurrent behaviour of the diagrams natively within the model. Moreover, the use of coloured high-level Petri nets allows a comprehensive and efficient structure for <b>data</b> <b>types</b> and <b>control</b> elements. The proposed semantics is defined compositionally, based on basic Petri net composition operations. ...|$|R
40|$|At present, {{the use of}} the {{relational}} model in the engineering design support domain is restricted due to the following: lack of ability to handle complex objects, no support for Abstract <b>Data</b> <b>Types,</b> inappropriate concurrency <b>control</b> for long transactions, no support for versioning and update propagation, poor efficiency, and insufficient design rule checking and consistency contraints enforcement. A simple relational database management system is designed and implemented under the UNIX operating system to incorporate two major extensions: support of user-defined Abstract <b>Data</b> <b>Types</b> and operators, and built-in Design Data Versioning. The design, implementation, and possible extensions to these new facilities are described...|$|R
40|$|An {{integrated}} {{switch to}} control electrical stimuli in implantable medical devices {{is presented in}} this work. First a self-biased protection mechanism to avoid VGS reaching maximum rated value is presented. Then, using a HV-CMOS technology this technique is incorporated in a fully integrated switch, to control 0 to 16 V, and 0 to 30 mA, pulses for implantable stimulators. Because of the low supply voltage VCC between 2 to 5 V, and safety considerations in implantable devices, special level shifters, drivers, and a voltage multiplier, that drive a large 40000 µm/ 3 µm dual PMOS switch, were necessary for the circuit. Categories and Subject Descriptors D. 3. 3 [Programming Languages]: Language Contructs and Features – abstract <b>data</b> <b>types,</b> polymorphism, <b>control</b> structures...|$|R
40|$|The {{increasing}} {{popularity of}} Agile approaches to software development forces {{an increasing number}} of organizations to deal with issues of Agile adoption (and adaptation). This paper lays some groundwork for a pattern language that will facilitate the transition to agility. We introduce patterns that focus on the dynamics of adoption rather than the structure that results from adoption. To establish the desired foundation it is necessary to “push the pattern envelope ” in terms of traditional pattern documentation format and relationships among patterns that form a pattern language. Categories and Subject Descriptors D. 3. 3 [Programming Languages]: Language Contructs and Features – abstract <b>data</b> <b>types,</b> polymorphism, <b>control</b> structures. This is just an example, please use the correct category and subject descriptors for your submission. The ACM Computin...|$|R
40|$|Although {{most popular}} object {{oriented}} languages use single dispatch, multiple dispatch programming languages offer more expressiveness over single dispatch languages. We developed an interpreter for a multimethod object-oriented language, TSTBC, {{to study the}} expressiveness of these languages. Compared with other multimethod languages, TSTBC features: objects that can act as classes, instances, and first-class generic functions, as well as method update. TSTBC has scoped inheritance, and the inheritance relation of an object is set {{at the time of}} its creation. The generic functions can be extended in the scope they are declared in, but only way to extend a generic function in a nested scope is to create a new generic function, assign the old generic function 2 ̆ 7 s methods to the new generic function and extend the new generic function. Keywords: Multimethods, generic functions, object-oriented programming languages, encapsulation, information hiding, block structure, subtyping, inheritance, TSTBC language. 1994 CR Categories: D. 3. 1 [Programming Languages] Formal Definitions and Theory [...] - semantics; D. 3. 2 [Programming Languages] Language Classifications [...] - object-oriented languages; D. 3. 3 [Programming Languages] Language Constructs and Features [...] - abstract <b>data</b> <b>types,</b> <b>control</b> structures, procedures, functions, and subroutines; D. 3. m [Programming Languages] Miscellaneous [...] - multimethods, generic functions; F. 3. 2 [Logics and Meanings of Programs] Semantics of Programming Languages [...] - operational semantics; F. 3. 3 [Logics and Meanings of Programs] Studies of Program Constructs [...] - control primitives...|$|R
40|$|As We May Think ” {{introduced}} {{information overload}} {{as a real}} problem. This problem has become more serious {{in the years after}} the publication of the article: people have little time to think and reflect on the stream of information they are receiving. I propose to design, implement, and evaluate interfaces that will support users to engage in creative processes as they work to analyze and understand a collection of documents. More importantly, the system will encourage its users to engage in creative thinking. To this day, two diverse research groups have expressed interest in this project, which will allow me to provide a tool that {{that can be used in}} several disciplines. Categories and Subject Descriptors D. 3. 3 [Programming Languages]: Language Contructs and Features – abstract <b>data</b> <b>types,</b> polymorphism, <b>control</b> structures...|$|R
40|$|By {{equipping}} {{a mobile}} device with distance sensing capabilities, {{we aim to}} expand the interaction possibilities of mobile and wearable devices {{beyond the confines of}} the physical device itself to include the space immediately around it. Our prototype, an Apple iPhone equipped with six IR distance sensors, allows for rich 3 D input, comprising coarse movement-based hand gestures, as well as static position-based gestures. A demonstration application, HoverFlow, illustrates the use of coarse hand gestures for interaction with mobile applications. This type of interaction, which we call Around-Device Interaction (ADI) has the potential to help to solve occlusion problems on small-screen mobile devices and scales well to small device sizes. Categories and Subject Descriptors D. 3. 3 [Programming Languages]: Language Contructs and Features – abstract <b>data</b> <b>types,</b> polymorphism, <b>control</b> structures...|$|R
40|$|Abstract. In {{this paper}} {{we show that}} {{programming}} languages can be translated on recurrent (analog, rational weighted) neural nets. Implementation of programming languages in neural nets turns {{to be not only}} theoretical exciting, but has also some practical implications in the recent efforts to merge symbolic and subsymbolic computation. To be of some use, it should be carried in a context of bounded resources. Herein, we show how to use resource bounds to speed up computations over neural nets, through suitable <b>data</b> <b>type</b> coding like in the usual programming languages. We introduce <b>data</b> <b>types</b> and show how to code and keep them inside the information flow of neural nets. <b>Data</b> <b>types</b> and <b>control</b> structures are part of a suitable programming language called NETDEF. Each NETDEF program has a specific neural net that computes it. These nets have a strong modular structure and a synchronization mechanism allowing sequential or parallel execution of subnets, despite the massive parallel feature of neural nets. Each instruction denotes an independent neural net. There are constructors for assignment, conditional and loop instructions. Besides the language core, many other features are possible using the same method. There is als...|$|R
40|$|There {{are many}} visual {{programming}} languages for education {{but they are}} poorly used in German schools as most do not fit {{the requirements of the}} various curricula. This paper introduces a new visual programming language called Puck, that has been developed at the Friedrich Schiller University, Jena, in accordance with the wishes of teachers in Thuringia (a federal state of Germany). The visualisation in Puck is based on text-based programs, but syntax errors are prevented {{through the use of a}} visual system. <b>Data</b> <b>types,</b> variables, <b>control</b> structures, procedures and parameters can be taught with Puck. In addition, with code generation for Oberon- 2, Java and pseudocode, students can be prepared for textual programming. Puck combines ideas from other visual programming languages and adds new features, such as the creation of correct expressions through context menus and a complexity calculation for a program...|$|R
40|$|Abstract. Automatic {{testing of}} first order {{functions}} works fine. Testing higher order functions automatically is more troublesome, {{it is harder}} to generate the functions needed as argument automatically, and these generated functions cannot be shown when a counterexample is found. Nevertheless, higher order functions can contain errors and hence need to be tested. In this paper we present effective and efficient techniques to test higher order functions using intermediate <b>data</b> <b>types.</b> This <b>data</b> <b>type</b> mimics and <b>controls</b> the structure of the function to be generated. A simple additional function transforms this data structure to the function needed. Using the <b>data</b> <b>types</b> the test engineer can control the generation of functions and print them. We use a continuation based parser library as example. Automatic testing reveals errors is the published library that was used {{for a couple of years}} without problems. ...|$|R
40|$|Abstract Background The Minimal Information Requested In the Annotation of {{biochemical}} Models (MIRIAM) {{is a set}} {{of guidelines}} for the annotation and curation processes of computational models, in order to facilitate their exchange and reuse. An important part of the standard consists in the controlled annotation of model components, based on Uniform Resource Identifiers. In order to enable interoperability of this annotation, the community has to agree on a set of standard URIs, corresponding to recognised <b>data</b> <b>types.</b> MIRIAM Resources are being developed to support the use of those URIs. Results MIRIAM Resources are a set of on-line services created to catalogue <b>data</b> <b>types,</b> their URIs and the corresponding physical URLs (or resources), whether <b>data</b> <b>types</b> are <b>controlled</b> vocabularies or primary data resources. MIRIAM Resources are composed of several components: MIRIAM Database stores the information, MIRIAM Web Services allows to programmatically access the database, MIRIAM Library provides an access to the Web Services and MIRIAM Web Application is a way to access the data (human browsing) and also to edit or add entries. Conclusions The project MIRIAM Resources allows an easy access to MIRIAM URIs and the associated information and is therefore crucial to foster a general use of MIRIAM annotations in computational models of biological processes. </p...|$|R
40|$|More {{and more}} {{workflow}} systems are taking XML as their basic data format for workflow process definition, <b>data</b> <b>type</b> definition, and <b>control</b> information definition. For XML-based workflow systems, an XML repository {{is used to}} manage XML object resources in a safe and efficient way. RepoX, an XML repository, has been developed for the METEOR workflow system. It maps XML documents to a relational-object database and also provides extraction/retrieval, version control, check in/check out, and searching and query functions. In addition, it has support for adaptive workflows, which may need workflow definition information from the repository at runtime, in a dynamically changing environment...|$|R
40|$|Domain-Specific Modeling Languages (DSMLs) {{can offer}} {{assistance}} to domain experts, {{who may not}} be computer scientists, by providing notations and semantic constructs that align with abstractions from a particular domain. In this paper, we describe our design and application of a DSML in the area of data composition and interoperability. In particular, we introduce our recent effort to design a DSML to assist with interoperability issues across scientific software applications (e. g., composing scientific data in different file structures and integrating scientific data with data gathering devices). Currently, several different scientific data file specifications have been proposed (e. g., CID, netCDF, and HDF). Each file specification is optimized to manage a specific <b>data</b> <b>type</b> efficiently. Thus, each file specification has evolved with slightly different notions and implementation technologies. These differences led to the need for an environment that provides interoperability among the different specification formats. In this paper, we introduce our framework, supported by a DSML, that provides functionality to visually model the data composition and integration concepts independent from a particular data file specification. Categories and Subject Descriptors D. 2. 12 [Interoperability]: Data mapping – abstract <b>data</b> <b>types,</b> polymorphism, <b>control</b> structures...|$|R
40|$|The main aim of {{this article}} is to present the modern {{unmanned}} aerial vehicles (UAVs) and the possibilities for real-time remote monitoring of flight parameters and payload data. In the introduction section of the paper we briefly present the characteristics of the UAVs and which are their major application areas. Later, the main parameters and the various <b>data</b> <b>types</b> for remote <b>control</b> and monitoring of the unmanned aerial vehicles are presented and discussed. The paper continues with the methods and the technologies for transmission of these parameters and then presents a general hardware model for data transmission and a software model of a communication system suitable for UAVs...|$|R
40|$|We {{introduce}} typed combinatory process algebra, {{a system}} combining process algebra with types and combinators. We describe its syntax and semantics, and {{by way of}} example, verify within this framework the Simple Alternating Bit Protocol. Key Words & Phrases: protocol verification, process algebra, typed combinatory logic. 1991 Mathematics Subject Classification: 69 C 20, 69 M 10, 03 B 15, 03 B 40. Note: The first author acknowledges the support of ESPRIT Basic Research Action CONFER no. 6454. Contents 1 Introduction 1 2 Types and combinators 2 3 Combinatory process algebra 5 4 A working example: the Simple Alternating Bit Protocol 11 5 Semantical issues 23 6 State combinators 25 1 Introduction System specification and verification in process algebra always combines data structuring (e. g. using abstract <b>data</b> <b>types)</b> and <b>control</b> structuring which is done {{by means of the}} primitives of a suitable process algebra. There are several languages that link a notation suggested by process algebra to [...] ...|$|R
