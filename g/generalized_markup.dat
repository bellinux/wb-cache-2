160|3|Public
25|$|The {{essence of}} why {{extensible}} markup languages are necessary is explained at Markup language (for example, see Markup language § XML) and at Standard <b>Generalized</b> <b>Markup</b> Language.|$|E
25|$|While HTML, {{prior to}} HTML5, {{was defined as}} an {{application}} of Standard <b>Generalized</b> <b>Markup</b> Language (SGML), a flexible markup language framework, XHTML is an application of XML, a more restrictive subset of SGML. XHTML documents are well-formed and may therefore be parsed using standard XML parsers, unlike HTML, which requires a lenient HTML-specific parser.|$|E
25|$|The first {{language}} {{to make a}} clean distinction between structure and presentation was Scribe, developed by Brian Reid and described in his doctoral thesis in 1980. Scribe was revolutionary {{in a number of}} ways, not least that it introduced the idea of styles separated from the marked up document, and of a grammar controlling the usage of descriptive elements. Scribe influenced the development of <b>Generalized</b> <b>Markup</b> Language (later SGML) and is a direct ancestor to HTML and LaTeX.|$|E
40|$|This work {{approaches}} dynamic multi-modal application interfaces from a {{new point}} of view. The ongoing diversification of the user base and technology lays {{the foundation for the}} need of an holistic adaption infrastructure. Only designing individual adaption methods is not sufficient anymore. Providing such an infrastructure along with an open reference implementation is the objective of the Generalized Interface ToolKit (GITK) project. The software can generate, adapt and exchange interfaces at runtime. It works on various platforms and comes with several interface renderers. The solution is based on XML technology and defines an own <b>markup</b> language called <b>Generalized</b> Interface <b>Markup</b> Language (GIML) ...|$|R
40|$|This work {{introduces}} a new UIMS (User Interface Management System), {{which aims to}} solve numerous problems {{in the field of}} user-interface development arising from hard-coded use of user interface toolkits. The presented solution is a concrete system architecture based on the abstract ARCH model consisting of an interface abstraction-layer, a dialog definition language called GIML (<b>Generalized</b> Interface <b>Markup</b> Language) and pluggable interface rendering modules. These components form an interface toolkit called GITK (Generalized Interface ToolKit). With the aid of GITK (Generalized Interface ToolKit) one can build an application, without explicitly creating a concrete end-user interface. At runtime GITK can create these interfaces as needed from the abstract specification and run them. Thereby GITK is equipping one application with many interfaces, even kinds of interfaces that did not exist when the application was written. It should be noted that this work will concentrate on providing the base infrastructure for adaptive/adaptable system, and does not aim to deliver a complete solution. This work shows that the proposed solution is a fundamental concept needed to create interfaces for everyone, which can be used everywhere and at any time. This text further discusses the impact of such technology for users and on the various aspects of software systems and their development. The targeted main audience of this work are software developers or people with strong interest in software development...|$|R
40|$|Recent {{work in the}} {{semantics}} of markup languages {{may offer}} a way to achieve more reliable results for format conversion, {{or at least a}} way to state the goal more explicitly. In the work discussed, the meaning of markup in a document is taken as the set of things accepted as true because of the markup's presence, or equivalently, as the set of inferences licensed by the markup in the document. It is possible, in principle, to apply a general semantic description of a markup vocabulary to documents encoded using that vocabulary and to generate a set of inferences (typically rather large, but finite) as a result. An ideal format conversion translating a digital object from one vocabulary to another, then, can be characterized as one which neither adds nor drops any licensed inferences; it is possible to check this equivalence explicitly for a given conversion of a digital object, and possible in principle (although probably beyond current capabilities in practice) to prove that a given transformation will, if given valid and semantically correct input, always produce output that is semantically equivalent to its input. This approach is directly applicable to the XML formats frequently used for scientific and other data, but it is also easily <b>generalized</b> from SGML/XML-based <b>markup</b> languages to digital formats in general; at a high level, it is equally applicable to document markup, to database exchanges, and to ad hoc formats for high-volume scientific data. Some obvious complications and technical difficulties arising from this approach are discussed, as are some important implications. In most real-world format conversions, the source and target formats differ at least somewhat in their ontology, either in the level of detail they cover or in the way they carve reality into classes; it is thus desirable not only to define what a perfect format conversion looks like, but to quantify the loss or distortion of information resulting from the conversion. <br /...|$|R
25|$|XHTML was {{developed}} to make HTML more extensible and increase interoperability with other data formats. In addition, browsers were forgiving of errors in HTML, and most websites were displayed despite technical errors in the markup; XHTML introduced stricter error handling. HTML 4 was ostensibly an application of Standard <b>Generalized</b> <b>Markup</b> Language (SGML); however the specification for SGML was complex, and neither web browsers nor the HTML 4 Recommendation were fully conformant to it. The XML standard, approved in 1998, provided a simpler data format closer in simplicity to HTML 4. By shifting to an XML format, it was hoped HTML would become compatible with common XML tools; to work…}} servers and proxies {{would be able to}} transform content, as necessary, for constrained devices such as mobile phones.|$|E
2500|$|XML was {{compiled}} by {{a working group}} of eleven members, supported by a (roughly) 150-member Interest Group. Technical debate {{took place on the}} Interest Group mailing list and issues were resolved by consensus or, when that failed, majority vote of the Working Group. A record of design decisions and their rationales {{was compiled}} by Michael Sperberg-McQueen on December 4, 1997. James Clark served as Technical Lead of the Working Group, notably contributing the empty-element [...] "<empty/>" [...] syntax and the name [...] "XML". Other names that had been put forward for consideration included [...] "MAGMA" [...] (Minimal Architecture for <b>Generalized</b> <b>Markup</b> Applications), [...] "SLIM" [...] (Structured Language for Internet Markup) and [...] "MGML" [...] (Minimal <b>Generalized</b> <b>Markup</b> Language). The co-editors of the specification were originally Tim Bray and Michael Sperberg-McQueen. Halfway through the project Bray accepted a consulting engagement with Netscape, provoking vociferous protests from Microsoft. Bray was temporarily asked to resign the editorship. This led to intense dispute in the Working Group, eventually solved by the appointment of Microsoft's Jean Paoli as a third co-editor.|$|E
2500|$|In SGML, XML, and HTML, the {{ampersand}} is used {{to introduce}} an SGML entity. The HTML and XML encoding for the ampersand character is the entity [...] "&amp;". This can create a problem known as delimiter collision when converting text {{into one of these}} markup languages. For instance, when putting URLs or other material containing ampersands into XML format files such as RSS files the & must be replaced with &amp; or they are considered not well formed, and computers will be unable to read the files correctly. SGML derived the use from IBM <b>Generalized</b> <b>Markup</b> Language, which was one of many IBM-mainframe languages to use the ampersand to signal a text substitution, eventually going back to System/360 macro assembly language.|$|E
2500|$|A markup {{language}} is a modern system for annotating a text {{in a way that}} is syntactically distinguishable from that text. The idea and terminology evolved from the [...] "marking up" [...] of manuscripts. For example, the revision instructions by editors, traditionally written with a blue pencil on authors' manuscripts. A well-known example of a {{markup language}} in widespread use today is HyperText Markup Language (HTML), one of the key document formats of the World Wide Web. The origins of markup languages can be traced to a formatting language called RUNOFF, developed in the 1960s by Jerome H. Saltzer at the Massachusetts Institute of Technology. However, the very first markup language was called the <b>Generalized</b> <b>Markup</b> Language (GML) co-invented by IBM engineers Charles Goldfarb, Ed Mosher, and Ray Lorie.|$|E
50|$|The {{standard}} <b>generalized</b> <b>markup</b> language (SGML) {{was based}} upon IBM <b>Generalized</b> <b>Markup</b> Language (GML). GML was a set of macros on top of IBM Script.|$|E
5000|$|The Standard <b>Generalized</b> <b>Markup</b> Language (SGML; ISO 8879:1986) is a {{standard}} for defining <b>generalized</b> <b>markup</b> languages for documents. ISO 8879 Annex A.1 defines generalized markup: ...|$|E
50|$|The Standard <b>Generalized</b> <b>Markup</b> Language (SGML), an ISO-standard {{technology}} for defining <b>generalized</b> <b>markup</b> languages for documents, is descended from GML. The Extensible Markup Language (XML) was initially a streamlined and simplified development of SGML, but has outgrown its parent {{in terms of}} worldwide acceptance and support.|$|E
5000|$|ARC-SGML, by Standard <b>Generalized</b> <b>Markup</b> Language Users', 1991, C {{language}} ...|$|E
5000|$|Information {{processing}} - Text {{and office}} systems - Standard <b>Generalized</b> <b>Markup</b> Language (SGML) ...|$|E
5000|$|The SGML {{emphasis}} on validity supports {{the requirement for}} <b>generalized</b> <b>markup</b> that markup should be rigorous. (ISO 8879 A.1) ...|$|E
5000|$|The Standard <b>Generalized</b> <b>Markup</b> Language(SGML) has {{pioneered the}} concept of {{structured}} documents Multi-purpose publishing using HTML, XML, and CSS, Håkon Wium Lie & Janne Saarela ...|$|E
5000|$|SGML is an ISO standard: [...] "ISO 8879:1986 Information {{processing}} - Text {{and office}} systems - Standard <b>Generalized</b> <b>Markup</b> Language (SGML)", {{of which there}} are three versions: ...|$|E
50|$|The Standard <b>Generalized</b> <b>Markup</b> Language (SGML) is a {{descendant}} of GML. While DCF does not directly handle SGML, there is an SGML translator available as a separate product.|$|E
50|$|Charles F. Goldfarb {{is known}} as the father of Standard <b>Generalized</b> <b>Markup</b> Language (SGML) and {{grandfather}} of HTML and the World Wide Web. He co-invented the concept of markup languages.|$|E
50|$|The {{hypertext}} {{portion of}} the Web in particular has an intricate intellectual history; notable influences and precursors include Vannevar Bush's Memex, IBM's <b>Generalized</b> <b>Markup</b> Language, and Ted Nelson's Project Xanadu.|$|E
50|$|Parsed Character Data (PCDATA) is a data {{definition}} that originated in Standard <b>Generalized</b> <b>Markup</b> Language (SGML), {{and is used}} also in Extensible Markup Language (XML) Document Type Definition (DTD) to designate mixed content XML elements.|$|E
50|$|Steven J DeRose (born 1960) is a {{computer}} scientist noted for his contributions to Computational Linguistics and to key standards related to document processing, mostly around ISO's Standard <b>Generalized</b> <b>Markup</b> Language (SGML) and W3C's Extensible Markup Language (XML).|$|E
50|$|In 1969 Charles Goldfarb, {{leading a}} small team at IBM, {{developed}} the first markup language, called <b>Generalized</b> <b>Markup</b> Language, or GML. Goldfarb {{coined the term}} GML, an initialism for the three researchers, Charles Goldfarb, Ed Mosher and Ray Lorie {{who worked on the}} project.|$|E
5000|$|<b>Generalized</b> <b>Markup</b> Language (GML) {{is a set}} of macros that {{implement}} intent-based (procedural) markup tags for the IBM text formatter, SCRIPT. SCRIPT/VS is {{the main}} component of IBM's Document Composition Facility (DCF). A starter set of tags in GML is provided with the DCF product.|$|E
50|$|While HTML, {{prior to}} HTML5, {{was defined as}} an {{application}} of Standard <b>Generalized</b> <b>Markup</b> Language (SGML), a flexible markup language framework, XHTML is an application of XML, a more restrictive subset of SGML. XHTML documents are well-formed and may therefore be parsed using standard XML parsers, unlike HTML, which requires a lenient HTML-specific parser.|$|E
50|$|Scientigo is a United States {{company based}} in Charlotte, North Carolina that began asserting patent claims over XML {{technology}} in 2005. Since SGML (Standard <b>Generalized</b> <b>Markup</b> Language), from which XML (Extensible Markup Language) is derived, dates from the 1960s, and the patents were applied for in 1997, the notion that Scientigo's patents cover XML has been rejected by patent attorneys and other commentators including Microsoft.|$|E
5000|$|OASIS {{was founded}} {{under the name}} [...] "SGML Open" [...] in 1993. It began as a trade {{association}} of SGML tool vendors to cooperatively promote {{the adoption of the}} Standard <b>Generalized</b> <b>Markup</b> Language (SGML) through mainly educational activities, though some amount of technical activity was also pursued including an update of the CALS Table Model specification and specifications for fragment interchange and entity management.|$|E
50|$|<b>Generalized</b> <b>markup</b> {{is based}} on two postulates:* Markup should be declarative: it should {{describe}} a document's structure and other attributes, rather than specify the processing to be performed on it. Declarative markup {{is less likely to}} conflict with unforeseen future processing needs and techniques.* Markup should be rigorous so that the techniques available for processing rigorously-defined objects like programs and databases can be used for processing documents as well.|$|E
50|$|The {{documents}} {{have both}} logical and layout structures. Logically the text can be partitioned into chapters, footnotes and other subelements akin to HTML, and the layout fill a function similar to Cascading Style Sheets {{in the web}} world. The binary transport format for an ODA-conformant file is called Open Document Interchange Format (ODIF) {{and is based on}} the Standard <b>Generalized</b> <b>Markup</b> Language and Abstract Syntax Notation One (ASN.1).|$|E
5000|$|The first {{publicly}} available description of HTML was a document called [...] "HTML Tags", first mentioned on the Internet by Tim Berners-Lee in late 1991. It describes 18 elements comprising the initial, relatively simple design of HTML. Except for the hyperlink tag, these were {{strongly influenced by}} SGMLguid, an in-house Standard <b>Generalized</b> <b>Markup</b> Language (SGML)-based documentation format at CERN. Eleven of these elements still exist in HTML 4.|$|E
5000|$|XML was {{compiled}} by {{a working group}} of eleven members, supported by a (roughly) 150-member Interest Group. Technical debate {{took place on the}} Interest Group mailing list and issues were resolved by consensus or, when that failed, majority vote of the Working Group. A record of design decisions and their rationales {{was compiled}} by Michael Sperberg-McQueen on December 4, 1997. James Clark served as Technical Lead of the Working Group, notably contributing the empty-element [...] "" [...] syntax and the name [...] "XML". Other names that had been put forward for consideration included [...] "MAGMA" [...] (Minimal Architecture for <b>Generalized</b> <b>Markup</b> Applications), [...] "SLIM" [...] (Structured Language for Internet Markup) and [...] "MGML" [...] (Minimal <b>Generalized</b> <b>Markup</b> Language). The co-editors of the specification were originally Tim Bray and Michael Sperberg-McQueen. Halfway through the project Bray accepted a consulting engagement with Netscape, provoking vociferous protests from Microsoft. Bray was temporarily asked to resign the editorship. This led to intense dispute in the Working Group, eventually solved by the appointment of Microsoft's Jean Paoli as a third co-editor.|$|E
50|$|IBM's <b>Generalized</b> <b>Markup</b> Language (GML) Starter Set is a macro {{language}} encapsulating {{a set of}} SCRIPT commands. GML is {{a descriptive}} markup layer describing the logical structure of a document. Both SCRIPT/VS and the GML Starter Set are part of IBM's Document Composition Facility (DCF), used in the System/370 platform and successors. The tag sets of the BookMaster and BookManager BUILD/MVS products are built on a foundation of the GML Starter Set syntax and implementation.|$|E
50|$|The FPI is {{undoubtedly}} the least well-understood {{part of the}} document type declaration, an integral component of valid HTML, XML and Standard <b>Generalized</b> <b>Markup</b> Language (SGML) documents. The Formal Public Identifier's effect upon its host document is unusual in that it can depend not only upon its own syntactical correctness and the behaviour of the program parsing it, but also upon the ISO-registration status of the organisation responsible for schema referenced by the FPI.|$|E
5000|$|The {{extensible}} {{markup language}} (XML) has become a popular format for data representation in recent years. Although XML data {{can be stored in}} normal file systems, it is commonly held in relational databases to take advantage of their [...] "robust implementation verified by years of both theoretical and practical effort". As an evolution of the Standard <b>Generalized</b> <b>Markup</b> Language (SGML), XML's text-based structure offers the advantage of being both machine and human-readable.|$|E
50|$|The first {{language}} {{to make a}} clean distinction between structure and presentation was Scribe, developed by Brian Reid and described in his doctoral thesis in 1980. Scribe was revolutionary {{in a number of}} ways, not least that it introduced the idea of styles separated from the marked up document, and of a grammar controlling the usage of descriptive elements. Scribe influenced the development of <b>Generalized</b> <b>Markup</b> Language (later SGML) and is a direct ancestor to HTML and LaTeX.|$|E
