6|3|Public
50|$|IBM also {{configured}} the 7040 (or 7044) as an <b>input-output</b> <b>processor</b> {{attached to}} a 7090, in a configuration known as a directly coupled multiprocessing system. Each computer was slightly modified {{to be able to}} interrupt the other.|$|E
5000|$|Input/output is {{accomplished}} using {{a control unit}} called an IOP (<b>Input-output</b> <b>processor).</b> An IOP provides an 8-bit data path to and from memory. Systems support up to 8 IOPs, each of which can attach up to 32 device controllers.|$|E
5000|$|The AP-101B {{originally}} {{used in the}} Shuttle had core memory. The AP-101S upgrade in {{the early}} 1990s used semiconductor memory. [...] Each AP-101 on the Shuttle was coupled with an [...] <b>Input-Output</b> <b>Processor</b> (IOP), consisting of one Master Sequence Controller (MSC) and 24 Bus Control Elements (BCEs). The MSC and BCEs executed programs from the same memory system as the main CPU, offloading control the Shuttle's serial data bus system from the CPU.|$|E
5000|$|Virtualize all <b>input-output</b> and <b>processor</b> control {{instructions}} ...|$|R
40|$|Embedded systems contain {{several layers}} of target {{processing}} abstraction. These layers include electronic circuit, binary machine code, mnemonic assembly code, and high-level procedural and object-oriented abstractions. Physical and temporal constraints and artifacts within physically embedded systems {{make it impossible for}} software engineers to operate at a single layer of processor abstraction. The Luxdbg embedded system debugger exposes these layers to debugger users, and it adds an additional layer, the extension language layer, that allows users to extend both the debugger and its target processor capabilities. Tcl is Luxdbg’s extension language. Luxdbg users can apply Tcl to automate interactive debugging steps, to redirect and to interconnect target <b>processor</b> <b>input-output</b> facilities, to schedule multiple processor execution, to log and to react to target processing exceptions, to automate target system testing, and to prototype new debugging features. Inclusion of an extension language like Tcl in a debugger promises additional advantages for distributed debugging, where debuggers can pass extension language expressions across computer networks. 2 1...|$|R
40|$|Abstract—IGBT (insulated-gate bipolar transistors) {{dead-time}} compensation circuit has a {{very important}} significant for improving the output voltage waveform of the inverter, reducing the harmonic output current. Thus, many compensation strategies are reported in literatures and have been implemented in industrial drives recently. Overall, the method of dead-time compensation {{can be divided into}} hardware compensation and software compensation. Hardware compensation method needs additional hardware circuits, which means additional space and cost. Still more, the additional circuit is easy to interfere with others, which can reduce the compensation accuracy. While the software compensation method takes up a lot of memory space and additional <b>input-output</b> ports of <b>processor,</b> which often result to the added operation and heat dissipation of controller. In this paper, CPLD (complex programmable logic device) -based circuit design of dead-time compensation is presented to solve these existed drawbacks. It is verified that not only can the circuit simplify existed inverter dead-time compensation design, but also it has the advantages of small volume, strong anti-interference ability, and high compensation precision. The simulation results validate that this method is feasible and effective. Keywords—Dead-time compensation; inverter; compensation method; circuit design; CPLD; IGBT I...|$|R
50|$|Each CM-1 {{microprocessor}} {{has its own}} 4 kilobits of random-access memory (RAM), and the hypercube-based {{array of}} them was designed to perform the same operation on multiple data points simultaneously, i.e., to execute tasks in single instruction, multiple data (SIMD) fashion. The CM-1, depending on the configuration, has as many as 65,536 individual processors, each extremely simple, processing one bit at a time. CM-1 and its successor CM-2 {{take the form of}} a cube 1.5 meters on a side, divided equally into eight smaller cubes. Each subcube contains 16 printed circuit boards and a main processor called a sequencer. Each circuit board contains 32 chips. Each chip contains a router, 16 processors, and 16 RAMs. The CM-1 as a whole has a 20-dimensional hypercube-based routing network, a main RAM, and an <b>input-output</b> <b>processor</b> (a channel controller). Each router contains 5 buffers to store the data being transmitted when a clear channel isn't available. The engineers had originally calculated that 7 buffers per chip would be needed, but this made the chip slightly too large to build. Nobel Prize winning physicist Richard Feynman had previously calculated that 5 buffers would be enough, using a differential equation involving the average number of 1 bits in an address. They resubmitted the design of the chip with only 5 buffers, and when they put the machine together, it worked fine. Each chip is connected to a switching device called a nexus. The CM-1 uses Feynman's algorithm for computing logarithms that he had developed at Los Alamos National Laboratory for the Manhattan Project. It is well suited to the CM-1, using as it did, only shifting and adding, with a small table shared by all the processors. Feynman also discovered that the CM-1 would compute the Feynman diagrams for quantum chromodynamics (QCD) calculations faster than an expensive special purpose machine developed at Caltech.|$|E
40|$|Includes bibliographical {{references}} (page 34) This project {{attempts to}} extend the capabilities of input processors for digital computers by adding an additional set of specialized registers specifically for block transfers of data between the <b>input-output</b> <b>processor</b> and peripheral devices. The specialized registers are initially conditioned by inputs from the <b>input-output</b> <b>processor</b> by using conventional computer output techniques. Several different control modes can be commanded depending upon the application. The new structure allows for synchronization to the incoming data stream and automatic control {{of the number of}} words to be assembled for input to the digital computer. An extension of the structure of input-output processors to simplify the connection of the processor to many different peripheral devices is provided by special interrupt controls and automatic address space switching...|$|E
40|$|The NOVA/IOPS (<b>Input-Output</b> <b>Processor</b> Simulator) is used {{to control}} all {{interface}} testing of the MDM (Multiplexer Demultiplexer) Breadboard S 10 10 M (serial input-output-input module) and the Matra Space Lab Inerface Unit (SL/BIU). The software handles bookkeeping such as word error rates, types of errors, display of error buffers, data display and test identification...|$|E

