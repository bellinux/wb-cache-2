65|75|Public
50|$|In 1954 Hermes {{produced}} an <b>informal</b> <b>proof,</b> that {{the possibilities of}} programmable eigenvalues include the predictable functions , so the calculating machines have the same cardinality as Turing machines re: Turing completeness.|$|E
50|$|Formal proofs are {{constructed}} {{with the help}} of computers in interactive theorem proving. Significantly, these proofs can be checked automatically, also by computer. Checking formal proofs is usually simple, whereas finding proofs (automated theorem proving) is generally hard. An <b>informal</b> <b>proof</b> in the mathematics literature, by contrast, requires weeks of peer review to be checked, and may still contain errors.|$|E
50|$|The {{fact that}} there exist {{increasing}} sequences without least upper bounds may seem strange to those accustomed to thinking about the semantics of sequential programs. It may help {{to point out that}} the increasing sequences produced by sequential programs all have least upper bounds. Indeed, the partial computations that can be produced by sequential computation form an ω-complete subdomain of the domain of Actor computations Diagrams. An <b>informal</b> <b>proof</b> follows.|$|E
40|$|Barendregt’s {{variable}} convention simplifies many <b>informal</b> <b>proofs</b> in the λ-calculus {{by allowing}} the consideration of only those bound variables that have been suitably chosen. Barendregt does not give a formal justification for the variable convention, which {{makes it hard to}} formalise such <b>informal</b> <b>proofs.</b> In this paper we show how a form of the variable convention can be built into the reasoning principles for rule inductions. We give two examples explaining our technique...|$|R
40|$|When {{designing}} a cryptographic protocol or explaining it, one often uses arguments such as "since this message {{was signed by}} machine B, machine A can be sure it came from B" in <b>informal</b> <b>proofs</b> justifying how the protocol works. Since it is, in such <b>informal</b> <b>proofs,</b> often easy to overlook an essential assumption, such as a trust relation or the belief that a message is not a replay from a previous session, it seems desirable to write such proofs in a formal system. While such logics do not replace the recent techniques of automatic proofs of safety properties, they help in pointing the weaknesses of the system...|$|R
40|$|Abstract Barendregt's {{variable}} convention simplifies many informalproofs in the *-calculus {{by allowing}} the consideration ofonly those bound variables that have been suitably chosen. Barendregt does not give a formal justification for the vari-able convention, which {{makes it hard to}} formalise such <b>informal</b> <b>proofs.</b> In this paper we show how a form of the variableconvention can be built into the reasoning principles for rule inductions. We give two examples explaining our technique. Categories and Subject Descriptors F. 4. 1 [MathematicalLogic]: Lambda-calculus and related systems; I. 2. 3 [Deduction and Theorem Proving]: Deduction General Terms Theory, Verification Keywords Lambda-calculus, nominal logic, POPLmarkchallenge 1. Introduction In <b>informal</b> <b>proofs</b> about languages that feature bound vari-ables, one often assumes (explicitly or implicitly) rather convenient conventions about those bound variables. For exam-ple, in Barendregt's seminal book [2] about th...|$|R
5000|$|Basically da Costa and Doria {{define a}} formal {{sentence}} = NP' {{which is the}} same as P = NP in the standard model for arithmetic; however, because = NP' by its very definition includes a disjunct that is not refutable in ZFC, = NP' is not refutable in ZFC, so ZFC + = NP' is consistent (assuming that ZFC is). The paper then continues by an <b>informal</b> <b>proof</b> of the implication ...|$|E
5000|$|They {{also have}} some {{additional}} interesting properties. For example, no two coherent states are orthogonal. In fact, if |α 〉 and |β 〉 are a pair of coherent states, thenNote that these states are, however, correctly normalized with 〈α|α〉 = 1. Owing to the completeness of the basis of Fock states, {{the choice of the}} basis of coherent states must be overcomplete. [...] Click to show an <b>informal</b> <b>proof.</b>|$|E
50|$|Although Gödel's theorems {{are usually}} {{studied in the}} context of {{classical}} logic, they also have a role in the study of paraconsistent logic and of inherently contradictory statements (dialetheia). Graham Priest (1984, 2006) argues that replacing the notion of formal proof in Gödel's theorem with the usual notion of <b>informal</b> <b>proof</b> can be used to show that naive mathematics is inconsistent, and uses this as evidence for dialetheism. The cause of this inconsistency is the inclusion of a truth predicate for a system within the language of the system (Priest 2006:47). Stewart Shapiro (2002) gives a more mixed appraisal of the applications of Gödel's theorems to dialetheism.|$|E
50|$|The <b>informal</b> <b>proofs</b> of {{everyday}} mathematical practice are unlike the formal proofs of proof theory. They are rather like high-level sketches {{that would allow}} an expert to reconstruct a formal proof at least in principle, given enough time and patience. For most mathematicians, writing a fully formal proof is too pedantic and long-winded to be in common use.|$|R
40|$|This {{paper is}} {{concerned}} with real proofs as opposed to formal proofs, and specifically with the ultimate reason of real proofs (‘Why Proof?’) and {{with the notion of}} real proof (‘What is a Proof?’). Several people believed and still believe that real proofs can be represented by formal proofs. A recent example is provided by Macintyre who claims that “one could go on to translate ” all “classical <b>informal</b> <b>proofs</b> into formal proofs of some accepted formal system”, where such translations “do map <b>informal</b> <b>proofs</b> to formal proofs ” (Macintyre 2005, p. 2420). This view is to a certain extent implicit in Frege – to a certain extent only, because according to Frege in a sense “every inference is non-formal in that the premises as well as the conclusions have their thought-contents which occur in this particular manner of connection only in that inference ” (Frege 1984, p. 318). Anyway, the view that real proofs can be represented by formal proofs is explicitly stated by Hilbert and Gentzen...|$|R
40|$|This {{document}} is the Accepted Manuscript {{version of the}} following article: Brendan Larvor, ???How to think about <b>informal</b> <b>proofs???,</b> Synthese, Vol. 187 (2) : 715 - 730, first published online 9 September 2011. The final publication is available at Springer via doi: 10. 1007 /s 11229 - 011 - 0007 - 5 It is argued {{in this study that}} (i) progress in the philosophy of mathematical practice requires a general positive account of informal proof; (ii) the best candidate is to think of <b>informal</b> <b>proofs</b> as arguments that depend on their matter as well as their logical form; (iii) articulating the dependency of informal inferences on their content requires a redefinition of logic as the general study of inferential actions; (iv) it is a decisive advantage of this conception of logic that it accommodates the many mathematical proofs that include actions on objects other than propositions; (v) this conception of logic permits the articulation of project-sized tasks for the philosophy of mathematical practice, thereby supplying a partial characterisation of normal research in the fiel...|$|R
50|$|There are hybrid {{theorem proving}} systems which use model {{checking}} as an inference rule. There are also programs which were written {{to prove a}} particular theorem, with a (usually <b>informal)</b> <b>proof</b> that if the program finishes with a certain result, then the theorem is true. A {{good example of this}} was the machine-aided proof of the four color theorem, which was very controversial as the first claimed mathematical proof which was essentially impossible to verify by humans due to the enormous size of the program's calculation (such proofs are called non-surveyable proofs). Another example of a program-assisted proof is the one that shows that the game of Connect Four can always be won by first player.|$|E
40|$|A {{formal proof}} sketch {{is a way}} to present a formal proof in a style that is close to an <b>informal</b> <b>proof,</b> but which also is a {{skeleton}} of the full formal proof (this makes it easy to relate the presentation to the detailed formalization.) Recently to us every <b>informal</b> <b>proof</b> has started to feel like a challenge, to write down the corresponding formal proof sketch. We take on this challenge for the <b>informal</b> <b>proof</b> of Newman's lemma from Henk Barendregt's book about -calculus. The speci c diculty of that proof is its main part, which just is a pair of diagrams without any explanation. ...|$|E
40|$|Consider the {{following}} algorithm for a process Pi {{in a set}} of processes P 1, [...] ., Pn: turn: = 0 ∀ i ∈ 1, [...] ., n : claimed [i]: = false Pi claimed [i]: = true 2 while ∃ j ∈ 1, [...] ., n i : claimed [j] = true loop claimed [i]: = false 4 await (turn = 0 or turn = i) turn: = i 6 claimed [i]: = true end 8 critical section claimed [i]: = false 10 turn: = 0 non-critical section 1. 2 Task Answer {{the following}} questions: 1. Does the algorithm enforce mutual exclusion? If so, justify your answer with an <b>informal</b> <b>proof.</b> If not, provide a sequence of actions to illustrate how mutual exclusion could be violated. 2. Does the algorithm guarantee the absence of deadlocks? If so, justify your answer with an <b>informal</b> <b>proof.</b> If not, provide a sequence of actions to illustrate how a deadlock could occur. 3. Does the algorithm guarantee the absence of starvation? If so, justify your answer with an <b>informal</b> <b>proof.</b> If not, provide a sequence of actions to illustrate how starvation could occur...|$|E
40|$|The {{problem of}} {{computing}} whether any formula of propositional logic is satisfiable {{is not in}} P. Therefore, P is not equal to NP. The proofs are informal about formal proofs in a first-order theory B axiomatizing Turing’s theory of computing. However, the <b>informal</b> <b>proofs</b> can be converted into formal proofs in Hilbert’s proof theory, and proved using a theorem prover. This report is {{an updated version of}} a report with the same title published in 2008. (See [URL]...|$|R
40|$|The {{inductive}} assertion {{method is}} generalized to permit formal, machine-verifiable proofs of correctness for multiprocess programs. Individual processes are represented by ordinary flowcharts, and no special synchronization mechanisms are assumed, so the method {{can be applied to}} a large class of multiprocess programs. A correctness proof can be designed together with the program by a hierarchical process of stepwise refinement, making the method practical for larger programs. The resulting proofs tend to be natural formalizations of the <b>informal</b> <b>proofs</b> that are now used...|$|R
40|$|International audienceThis paper {{describes}} the mechanization of the proofs {{of the first}} height chapters of Schwabäuser, Szmielew and Tarski's book: Metamathematische Methoden in der Geometrie. The goal of this development is to provide foundations for other formalizations of geometry and implementations of decision procedures. We compare the mechanized <b>proofs</b> with the <b>informal</b> <b>proofs.</b> We also compare this piece of formalization with the previous work done about Hilbert's Gründlagen der Geometrie. We analyze {{the differences between the}} two axiom systems from the formalization point of view...|$|R
40|$|We {{present the}} {{formalization}} of Specker's "local" {{version of the}} claim that the Generalized Continuum Hypothesis implies the Axiom of Choice, with particular attention to some extra complications which were glossed over in the original <b>informal</b> <b>proof,</b> specifically for "canonical" constructions and Cantor's normal form. Comment: 4 pages, submitted to FMM 201...|$|E
40|$|ABSTRACT: ŁΠω is a {{deductive}} first-order theory {{over the}} fuzzy logic ŁΠ, which axiomatically captures Zadeh’s notion of fuzzy set and aims at giving a unified formal framework {{for a large}} part of fuzzy mathematics. An overview of the concepts expressible in the theory is given and <b>informal</b> <b>proof</b> methods for doing fuzzy mathematics in ŁΠω are sketched...|$|E
40|$|We {{present a}} {{detailed}} description of a machine-assisted verification of an algorithm for self-stabilizing mutual exclusion that is due to Dijkstra [Dij 74]. This verification was constructed using PVS. We compare the mechanical verification to the <b>informal</b> <b>proof</b> sketch on which it is based. This comparison yields several observations regarding the challenges of formalizing and mechanically verifying distributed algorithms in general...|$|E
40|$|Abstract. This paper {{describes}} the mechanization of the proofs {{of the first}} height chapters of Schwabäuser, Szmielew and Tarski’s book: Metamathematische Methoden in der Geometrie. The proofs are checked formally using the Coq proof assistant. The goal of this development is to provide foundations for other formalizations of geometry and implementations of decision procedures. We compare the mechanized <b>proofs</b> with the <b>informal</b> <b>proofs.</b> We also compare this piece of formalization with the previous work done about Hilbert’s Grundlagen der Geometrie. We analyze {{the differences between the}} two axiom systems from the formalization point of view. ...|$|R
40|$|CERES, HLK and ProofTool form {{together}} {{a system for}} the computer-aided analysis of mathematical proofs. This analysis {{is based on a}} proof transformation known as cut-elimination, which corresponds to the elimination of lemmas in the corresponding <b>informal</b> <b>proofs.</b> Consequently, the resulting formal proof in atomic-cut normal form corresponds to a direct, i. e. without lemmas, <b>informal</b> mathematical <b>proof</b> of the given theorem. In this paper, we firstly describe the current status of the whole system {{from the point of view}} of its usage. Subsequently, we discuss each component in more detail, briefly explaining the formal calculi (LK and LKDe) used, the intermediary language HandyLK, the CERES method of cut-elimination by resolution and the extraction of Herbrand sequents. Three suc-cessful cases of application of the system to mathematical proofs are then summarized. And finally we discuss extensions of the system that are currently under development or that are planned for the short-term future. ...|$|R
40|$|It {{has long}} been {{commonly}} assumed that geometric diagrams can only be used as aids to human intuition and cannot be used in rigorous proofs of theorems of Euclidean geometry. This work gives a formal system FG whose basic syntactic objects are geometric diagrams and which {{is strong enough to}} formalize most if not all of what is contained in the first several books of Euclid’s Elements. Thisformal system is much more natural than other formalizations of geometry have been. Most correct <b>informal</b> geometric <b>proofs</b> using diagrams can be translated fairly easily into this system, and formal proofs in this system are not significantly harder to understand than the corresponding <b>informal</b> <b>proofs.</b> It has also been adapted into a computer system called CDEG (Computerized Diagrammatic Euclidean Geometry) for giving formal geometric proofs using diagrams. The formal system FG is used here to prove meta-mathematical and complexity theoretic results about the logical structure of Euclidean geometry and the uses of diagrams in geometry...|$|R
40|$|This chapter {{complements}} the chapters on technical reviews and software reliability engineering in Volume 1 of the handbook. It is {{primarily concerned with}} the verification of code by means of testing, but {{an example of an}} <b>informal</b> <b>proof</b> of a program is also given. A practitioner's view of testing is taken throughout, including an overview of how testing is done at Microsoft...|$|E
40|$|Abstract. Powerful proof techniques, such as logical {{relation}} arguments, {{have been developed}} for establishing the strong normalisation property of termrewriting systems. The first author used such a {{logical relation}} argument to establish strong normalising for a cut-elimination procedure in classical logic. He presented a rather complicated, but <b>informal,</b> <b>proof</b> establishing this property. The difficulties in this proof arise from a quite subtle substitution operation, which implements proof transformation that permute cuts over other inference rules. We have formalised this proof in the theorem prover Isabelle/HOL using the Nominal Datatype Package, closely following the <b>informal</b> <b>proof</b> given by the first author in his PhD-thesis. In the process, we identified and resolved a gap in one central lemma and a number of smaller problems in others. We also needed to make one informal definition rigorous. We thus show that the original proof is indeed a proof and that present automated proving technology is adequate for formalising such difficult proofs. ...|$|E
40|$|We compare {{informal}} proofs with formal proofs {{and discuss}} {{a selection of}} problems that one faces when transforming an <b>informal</b> <b>proof</b> into a formal one, i. e., constructing the semantics of a mathematical discourse. Keywords: Proof Checking, Discourse Understanding, Applicability of Discourse Representation Theory. 1 Introduction The goal {{is to build a}} machine that verifies the correctness of a given informal mathematical argument. This task is a Discourse Understanding and Automated Reasoning task. Formal proofs vs. informal proofs. (1) A formal proof is written in a formal language, the latter can be easily described in less than one page. An <b>informal</b> <b>proof</b> is written in an informal language, say English, enriched with terms and formulae. The syntactic constructions one encounters in proofs are relatively easy and stylised 1. (2) Finding proofs (informal and formal) is not trivial. (3) Machines are good to verify formal proofs, but (currently) cannot check informal proofs. Huma [...] ...|$|E
40|$|This {{thesis is}} {{about the nature of}} proofs in {{mathematics}} as it is practiced, contrasting the <b>informal</b> <b>proofs</b> found in practice with formal proofs in formal systems. In the first chapter I present a new argument against the Formalist-Reductionist view that <b>informal</b> <b>proofs</b> are justified as rigorous and correct by corresponding to formal counterparts. The second chapter builds on this to reject arguments from Gödel's paradox and incompleteness theorems to the claim that mathematics is inherently inconsistent, basing my objections on the complexities of the process of formalisation. Chapter 3 looks into the relationship between proofs and the development of the mathematical concepts that feature in them. I deploy Waismann's notion of open texture in the case of mathematical concepts, and discuss both Lakatos and Kneebone's dialectical philosophies of mathematics. I then argue that we can apply work from conceptual engineering to the relationship between formal and informal mathematics. The fourth chapter argues for the importance of mathematical knowledge-how and emphasises the primary role of the activity of proving in securing mathematical knowledge. In the final chapter I develop an account of mathematical knowledge based on virtue epistemology, which I argue provides a better view of proofs and mathematical rigour. Funded by the Caroline Elder PG Scholarship and a SASP scholarship, and with travel funded by the Indo-European Research Training Network in Logic and the Arché Travel Fund...|$|R
25|$|Proofs employ logic {{but usually}} include some amount of natural {{language}} which usually admits some ambiguity. In fact, {{the vast majority}} of proofs in written mathematics can be considered as applications of rigorous informal logic. Purely formal proofs, written in symbolic language instead of natural language, are considered in proof theory. The distinction between formal and <b>informal</b> <b>proofs</b> has led to much examination of current and historical mathematical practice, quasi-empiricism in mathematics, and so-called folk mathematics (in both senses of that term). The philosophy of mathematics is concerned with the role of language and logic in proofs, and mathematics as a language.|$|R
40|$|Models of the {{external}} system interface of a computer have been successfully used to describe confidentiality requirements. This paper discusses {{the use of an}} external-interfa,ce model t 1 la. t supports {{the external}} consistency objective of Cla. rk and +Ylson as well as internal structura. 1 constra. int,s needed t,o meet identified externa. l-int. erface requirementSs. These internal constraints identify a. vendor-supplied “Integrity Trusted Computing Base” tl 1 a. t handles <b>informal</b> <b>proofs</b> called “pedigrees. ” The increa. sing use of external-interface models, which this work illust,ra. tes, represents a paradigm shift in t#he construction of security models...|$|R
40|$|This article formalizes {{the proof}} of Niven’s theorem [12] which states that if x/π and sin(x) are both rational, then the sine takes values 0, ± 1 / 2, and ± 1. The {{main part of the}} {{formalization}} follows the <b>informal</b> <b>proof</b> presented at Pr∞fWiki ([URL] For this proof, we have also formalized the rational and integral root theorems setting constraints on solutions of polynomial equations with integer coefficients [8, 9]...|$|E
40|$|We give a detailed, <b>informal</b> <b>proof</b> of the Church-Rosser {{property}} for the untyped lambda-calculus and show its representation in LF. The proof {{is due to}} Tait and Martin-Löf {{and is based on}} the notion of parallel reduction. The representation employs higher-order abstract syntax and the judgments-as-types principle and takes advantage of term reconstruction as it is provided in the Elf implementation of LF. Proofs of meta-theorems are represented as higher-level judgments which relate sequences of reductions and conversions...|$|E
40|$|The {{background}} for {{this paper is}} twofold: Oneisthedefinition of a caching protocol for shared memory parallel computers called SCI, andthe other is the usage of rewritingtechniques in program verification. The paper concentrates on a linked list system, which is a central aspect of thecaching protocol. Wefirstdescribe an <b>informal</b> <b>proof</b> of this system, includingarather large invariant. Thereafter weshowhowthe list system andtheinvariant can both be described in the formalism of rewriting logic, andweusethis to carry through {{a significant part of}} theverification mechanically,usingtheOBJ 3 interpreter...|$|E
50|$|Proofs employ logic {{but usually}} include some amount of natural {{language}} which usually admits some ambiguity. In fact, {{the vast majority}} of proofs in written mathematics can be considered as applications of rigorous informal logic. Purely formal proofs, written in symbolic language instead of natural language, are considered in proof theory. The distinction between formal and <b>informal</b> <b>proofs</b> has led to much examination of current and historical mathematical practice, quasi-empiricism in mathematics, and so-called folk mathematics (in both senses of that term). The philosophy of mathematics is concerned with the role of language and logic in proofs, and mathematics as a language.|$|R
40|$|Increases {{in the use}} of {{automated}} theorem-provers have renewed {{focus on}} the relationship between the <b>informal</b> <b>proofs</b> normally found in mathematical research and fully formalised derivations. Whereas some claim that any correct proof will be underwritten by a fully formal proof, sceptics demur. In this paper I look at the relevance of these issues for formalism, construed as an anti-platonistic metaphysical doctrine. I argue that there are strong reasons to doubt that all proofs are fully formalisable, if formal proofs are required to be finitary, but that, on a proper view {{of the way in which}} formal proofs idealise actual practice, this restriction is unjustified and formalism is not threatened...|$|R
40|$|Often {{debates about}} {{pros and cons}} of various {{techniques}} for formalising lambda-calculi rely on subjective arguments, such as de Bruijn indices are hard to read for humans or nominal approaches come close to the style of reasoning employed in <b>informal</b> <b>proofs.</b> In this paper we will compare four formalisations based on de Bruijn indices and on names from the nominal logic work, thus providing some hard facts about the {{pros and cons of}} these two formalisation techniques. We conclude that the relative merits of the different approaches, as usual, depend on what task one has at hand and which goals one pursues with a formalisation...|$|R
