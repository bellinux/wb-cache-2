21|90|Public
5000|$|Sequential <b>Formula</b> <b>Translation,</b> Klaus Samelson, Friedrich L. Bauer, Communications of the ACM 3(2): 76-83, 1960 ...|$|E
5000|$|<b>FORmula</b> <b>TRANslation</b> (FORTRAN) using {{mathematical}} language terminology, it {{was developed}} mainly for scientific and engineering problems.|$|E
5000|$|Klaus Samelson, Friedrich L. Bauer, Sequential <b>Formula</b> <b>Translation,</b> (Reprint). Communications of the ACM 26(1): 9-13 (1983) ...|$|E
2500|$|However, {{the issue}} is subtler {{when it comes to}} open <b>formulas.</b> <b>Translations</b> between IF logic and {{dependence}} logic formulas, and vice versa, exist as long as the domain of the team is fixed: in other words, for all sets of variables [...] and all IF logic formulas [...] with free variables in [...] there exists a dependence logic formula [...] such that ...|$|R
500|$|... {{with many}} scenes and their <b>formula</b> English <b>translations,</b> from the copy {{now in the}} British Museum ...|$|R
40|$|We {{announce}} {{an interactive}} website for exploring logic {{with the help}} of Lorenzen dialogue games. The site allows one to play dialogue games and computes winning plays and winning strategies from initial segments of such games. A variety of dialogue rule sets are available, allowing one to investigate different logics. We have also implemented several <b>formula</b> <b>translations,</b> so that one can learn how dialogue games vary as one changes their initial formulas. We discuss some heuristics for computing winning plays and winning strategies. ...|$|R
5000|$|The {{interpretation}} has two {{components: a}} <b>formula</b> <b>translation</b> and a proof translation. The <b>formula</b> <b>translation</b> describes how each formula [...] of Heyting arithmetic is mapped to a quantifier-free formula [...] {{of the system}} T, where [...] and [...] are tuples of fresh variables (not appearing free in [...] ). Intuitively, [...] is interpreted as [...] The proof translation shows how a proof of [...] has enough information to witness the interpretation of , i.e. the proof of [...] can be converted into a closed term [...] and a proof of [...] in the system T.|$|E
50|$|Klaus Samelson (December 21, 1918 - May 25, 1980) was a German mathematician, physicist, and {{computer}} {{pioneer in the}} area of programming language translation and push-pop stack algorithms for sequential <b>formula</b> <b>translation</b> on computers.|$|E
50|$|The first ALGOL 58 {{compiler}} {{was completed}} {{by the end of}} 1958 by Friedrich L. Bauer, Hermann Bottenbruch, Heinz Rutishauser, and Klaus Samelson for the Z22 computer. Bauer et al. had been working on compiler technology for the Sequentielle Formelübersetzung (i.e. sequential <b>formula</b> <b>translation)</b> in the previous years.|$|E
50|$|Jens Carsten Jantzen (born 18 October 1948, Störtewerkerkoog, Nordfriesland) is a {{mathematician}} working on representation theory and algebraic groups, who introduced the Jantzen filtration, the Jantzen sum <b>formula,</b> and <b>translation</b> functors.|$|R
5000|$|Let A be a propositional <b>formula.</b> The Gödel-Tarski <b>translation</b> of A {{is defined}} recursively as follows: ...|$|R
5000|$|However, {{the issue}} is subtler {{when it comes to}} open <b>formulas.</b> <b>Translations</b> between IF logic and {{dependence}} logic formulas, and vice versa, exist as long as the domain of the team is fixed: in other words, for all sets of variables [...] and all IF logic formulas [...] with free variables in [...] there exists a dependence logic formula [...] such that for all structures [...] and for all teams [...] with domain , and conversely, for every dependence logic formula [...] with free variables in [...] there exists an IF logic formula [...] such that for all structures [...] and for all teams [...] with domain [...] These translations cannot be compositional.|$|R
50|$|Machine code {{programs}} {{are written in}} an octal/decimal representation exemplified in the Example Program above, and loaded by a rudimentary assembler known as the Translation Input Routine. It has no symbolic addressing facilities, but instead allows the source to be broken into blocks which can be manually relocated {{to allow for the}} expansion or contraction of a previous block in development. There is also an Autocode for simple programming tasks, allowing faster program development without the need for a knowledge of machine code. This has no <b>formula</b> <b>translation</b> facilities and requires all calculations to be reduced to a series of assignments with no more than a single operator on the right hand side.|$|E
40|$|Abstract. The {{purpose of}} this article is to present a parametrised {{functional}} interpretation. Depending on the choice of the parameter relations one obtains well-known functional interpretations, such as Gödel’s Dialectica interpretation, Diller-Nahm’s variant of the Dialectica interpretation, Kohlenbach’s monotone interpretations, Kreisel’s modified realizability and Stein’s family of functional interpretations. A functional interpretation consists of a <b>formula</b> <b>translation</b> and a proof translation. We show that all these interpretation only differ on two choices: firstly, on “how much ” of the counterexamples for A became witnesses for ¬A when defining the <b>formula</b> <b>translation,</b> and, secondly, “how much ” of the witnesses of A one is interested in when defining the proof translation...|$|E
40|$|Fortran (<b>FORmula</b> <b>TRANslation)</b> was {{introduced}} in 1957 and remains the language of choice for most scientific programming. The latest standard, Fortran 90, includes extensions that are familiar to users of C. Some {{of the most important}} features of Fortran 90 include recursive subroutines, dynamic storage allocation and pointers, user defined data structures, modules, and the ability t...|$|E
40|$|Overview {{of methods}} to design wave run-up and {{overtopping}} for dikes and other sloping structures for regular and irregular breaking waves. Summary of experimental data {{and suggestions for}} design <b>formulae.</b> English <b>translation</b> of: Golfoploop en golfoverslag - [URL] EngineeringCivil Engineering and Geoscience...|$|R
50|$|Sir Douglas Andrew Kilgour Black (1913-2002) was a Scottish {{physician}} and medical scientist {{who played a}} key role in the development of the National Health Service. He conducted research in the field of public health and was famous as the author of the Black Report. He was also known for the Black <b>Formula,</b> a <b>translation</b> of the Pignet formula to British measurements.|$|R
5000|$|In {{mathematical}} logic, cointerpretability is {{a binary}} relation on formal theories: a formal theory T is cointerpretable in another such theory S, when {{the language of}} S can be translated into the language of T {{in such a way}} that S proves every <b>formula</b> whose <b>translation</b> is a theorem of T. The [...] "translation" [...] here is required to preserve the logical structure of formulas.|$|R
40|$|EXTENT {{stands for}} an EXpert system for TENsor product <b>formula</b> <b>Translation.</b> In this paper, we {{describe}} the development of programs for fast Fourier transforms (FFT) for vector multiprocessors and distributed-memory machines using the EXTENT system for <b>formula</b> <b>translation.</b> Several forms of the FFT have been presented in the literature. Each form has different characteristics and is best suited for good performance on a particular architecture. The tensor product {{has been shown to}} be a uniform representation for all of these forms. We augment the tensor product representation of the FFT to include a mixed radix and two-level representation. The code generation methodology, including the generation of the complicated indexing code, characteristic of FFT programs, is described. Extensions of the code generation for the FFT forms on vector multiprocessor and distributed-memory machines are described. Performance results for the automatically generated FFT codes on the Cray Y-MP and Intel iPS [...] ...|$|E
40|$|Computer {{science has}} {{experienced}} an evolution in program-ming languages and systems from the crude assembly and machine codes {{of the earliest}} computers through concepts such as <b>formula</b> <b>translation,</b> procedural programming, struc-tured programming, functional programming, logic pro-gramming, and programming with abstract data types. Each of these steps in programming technology has advanced our ability to achieve clear separation of con-cerns at the source code level...|$|E
40|$|EXTENT is an EXpert {{system for}} TENsor product <b>formula</b> <b>Translation.</b> In this paper {{we present a}} {{programming}} environment for automatic generation of parallel/vector programs from tensor product formulas. A tensor (Kronecker) product based programming methodology is used for designing high performance programs on various architectures. In this programming methodology, block recursive algorithms such as the fast Fourier transform and Strassen's matrix multiplication algorithm are expressed as tensor product formulas involving tensor product and other matrix operations. A tensor product formula can be systematically translated to parallel and/or vector code for various parallel architectures. A prototype system which generates programs for the Cray Y-MP, Cray T 3 D, and Intel Paragon has been developed. Performance results for some generated programs are presented. Keywords: Parallel programming environment, Tensor (Kronecker) product, Block recursive algorithm, Parallel program synthesis. 1 [...] ...|$|E
5000|$|The <b>formula</b> {{defines a}} <b>translation</b> if {{and only if}} A is the {{identity}} matrix. The transformation is a rotation around some point {{if and only if}} A is a rotation matrix, meaning that ...|$|R
50|$|In modal logic, {{standard}} {{translation is}} a way of transforming formulas of modal logic into formulas of first-order logic which capture the meaning of the modal <b>formulas.</b> Standard <b>translation</b> is defined inductively on the structure of the formula. In short, atomic formulas are mapped onto unary predicates and the objects in the first-order language are the accessible worlds. The logical connectives from propositional logic remain untouched and the modal operators are transformed into first-order formulas according to their semantics.|$|R
40|$|In {{this article}} we study {{analytic}} properties of the multiple Dirichlet series associated to additive and Dirichlet characters. For the multiple Dirichlet series associated to additive characters, the meromorphic continuation is established via obtaining <b>translation</b> <b>formulas</b> satisfied by these multiple Dirichlet series. While it seems difficult to obtain such a <b>translation</b> <b>formula</b> for the multiple Dirichlet series associated to Dirichlet characters, we rely on their intrinsic connection with the multiple Dirichlet series associated to additive characters in order to investigate their analytic characteristics. We are also able to determine the exact set of singularities of the multiple Dirichlet series associated to additive characters. Comment: This paper grew out of Chapter 5 of my Ph. D. thesis (2016). My thesis {{can be found in}} [URL]...|$|R
40|$|This paper {{presents}} a 2 D numerical technique {{based on the}} boundary element method (BEM) {{for the analysis of}} linear elastic fracture mechanics (LEFM) problems on stress intensity factors (SIFs) involving anisotropic bimaterials. The most outstanding feature of this analysis {{is that it is a}} singledomain method, yet it is very accurate, efficient, and versatile (i. e., the material properties of the medium can be anisotropic as well as isotropic). A computer program using the BEM <b>formula</b> <b>translation</b> (FORTRAN 90) code was developed to effectively calculate the stress intensity factors (SIFs) in an anisotropic bi-material. This BEM program has been verified and showed good accuracy compared with the previous studies. Numerical examples of stress intensity factor calculation for a straight crack with various locations in both finite and infinite bimaterials are presented. It was found that very accurate results can be obtained using the proposed method, even with relatively simple discretization. The results of the numerical analysis also show that material anisotropy can greatly affect the stress intensity factor...|$|E
40|$|The aim of {{this work}} is to combine {{advantageously}} the two existing approaches for theorem proving in non classical logics: proving in the considered non classical logic (called here the direct approach) and proving in classical logic by way of translation-called here the translation approach. Some results in propositional S 5 show evidence of the relevance of this approach. We assume a translation from S 5 into first-order logic and then we define a partial inverse <b>formula</b> <b>translation</b> from firstorder classical logic into S 5. Semantic relations are proved to hold between the backward translated formulas. We answer positively (for S 5) to one conjecture stated in a previous work by the authors. An Interpolation Theorem stating a property stronger than refutational completeness is also proved. A plausible conjecture stronger than the Interpolation Theorem is proposed. These results are interpreted {{in the framework of}} a slight variant of an existing resolution calculus for S 5. We illustrate our method on a simple example. Future work includes applications of the approach to other modal logics...|$|E
40|$|Abstract—Due to the {{widespread}} {{adoption of the}} Model Driven Engineering paradigm, models have become cornerstone compo-nents in the software development process. This fact requires ver-ifying such models ’ correctness {{in order to ensure}} the quality of the final product. In this context, the Unified Modeling Language (UML) and the Object Constraint Language (OCL) constitute two of the most commonly used modeling languages. We have defined an overall framework to reason about UML/OCL models based on Constraint Logic programming (CLP). In particular, as model finding and design space exploration tool, we use Formula. We show how to translate a UML model into a CLP program following a Meta–Object Facility (MOF) like frame-work. Furthermore, we enhance our proposal by identifying an expressive fragment of OCL, which guarantees finite satisfiability and we show its translation to Formula. We also complete our approach by developing the CD 2 Formula Eclipse plug–in, which implements, following a Model Driven Architecture (MDA) approach, our UML model to <b>Formula</b> <b>translation</b> proposal. The proposed framework can be used to reason, validate and verify UML software designs by checking correctness properties and generating model instances using the model exploration tool Formula...|$|E
40|$|AbstractA Steiner type <b>formula</b> for {{continuous}} <b>translation</b> invariant Minkowski valuations is established. In combination {{with a recent}} result on the symmetry of rigid motion invariant homogeneous bivaluations, this new Steiner type formula is used to obtain a family of Brunn–Minkowski type inequalities for rigid motion intertwining Minkowski valuations...|$|R
5000|$|Heaviside went further, {{and defined}} {{fractional}} power of , thus establishing a connectionbetween operational calculus and fractional calculus. [...] Using the Taylor expansion, {{one can also}} verify the Lagrange-Boole <b>translation</b> <b>formula,</b> , so the operationalcalculus is also applicable to finite difference equations and to electrical engineering problems with delayed signals.|$|R
40|$|We {{present a}} {{technique}} that efficiently translates propositional intuitionistic formulae into classical propositional logic. This technique allows the use of arbitrary classical theorem provers for deciding the intuitionistic validity of a given propositional <b>formula.</b> The <b>translation</b> {{is based on a}} constructive description of the existence of a finite countermodel for any intuitionistic non-theorem. This enables us to replace universal quantification over all accessible worlds by a conjunction over the constructed finite set of these worlds within the encoding of a refuting Kripke-frame. This way, no additional theory handling by the theorem prover is required...|$|R
40|$|Partitioning Scheme (PS) {{is one of}} the {{strategies}} that could play a constructive role in improving the performance of conceptual rainfall–runoff (CRR) models. The main objective {{of this paper is to}} develop a Rainfall Runoff-Partitioning Scheme (RR-PS) with the ability of distinguishing different flow regimes in a basin and simulating each regime separately. The model utilizes a combination of PS and “regular” procedures and is equipped with Fuzzy C-Means (FCM) and Seasonal Partitioning (SP) to recognize different flow regimes. In addition, to avoid excessive increase of the model parameters caused by PS, sensitivity analysis is used to recognize the sensitive parameters. The PS part of integrated model is only run for the “sensitive” parameters and the “regular” part of model is implemented for the “less-sensitive” parameters. Data from three different scale basins in USA and Iran are used to evaluate the models. A HBV-Light (Hydrologiska Byråns Vattenbalansavdelning-Light model) based CRR model (Improved HBV- IHBV) is developed in FORTRAN (<b>Formula</b> <b>Translation)</b> with several modifications for testing the procedures. The results show that in all cases IHBV-based models using PS method perform better than the regular IHBV model. Overall, IHBV-SP demonstrates better performance than the other PS based models. Further improvement is reached by adopting user-defined seasons in IHBV-SP through optimization...|$|E
40|$|Abstract- Mathematics {{has been}} the basis of {{computation}} {{since the beginning of}} computer science and the algebraic expression and functional notation {{has been the}} basic model of computation. This basis in effect limits programming to a relatively few highly trained individuals. However, today computers are ubiquitous and there is a great need for allowing less trained people to program. Some of the problems with the <b>FORmula</b> <b>TRANslation</b> era are that 1) for non-technical and technical people alike, programs written in mathematical notation are hard to understand; 2) it is not particularly applicable to non-numerical applications such as bioinformatics and data bases; 3) it depends on pointers for efficient execution limiting hardware designs; 4) it is inherently sequential and handles data parallel, parallel to scalar extraction and scalar to parallel broadcasting computation poorly and 5) it can not be easily verbalized, requiring auxiliary equipment such as keyboards and mice for input, limiting its use. This paper describes how some of the features of natural language prose, such as verbs, nouns, pronouns, noun phrases, and prepositional phrases can be used for programming. This model is suitable for all types of computers, but is especially appropriate for SIMD multicore chips. A brief introduction to Plain English using the Minimal Spanning Tree algorithm is included...|$|E
40|$|Abstract: Geodesic is the {{shortest}} connection between two points on a surface. It is one of few popular concepts having geodesy in its name. A survey {{of a number of}} textbooks revealed that the geodesic is usually shown as a 2 D-curve in a particular cartographic projection, leading to wrong conclusions about its real shape. It is surprising that the geodesic has never been visualized on the World Wide Web before. Therefore, after a short programming course, our students prepared two interactive Java applets, one of them as a 3 D-interactive model, in order to show the real nature of the geodesic. We also tested a number of current and former graduate students of surveying in their knowledge about geodesic, before and after pointing them to the applets. The results show that bringing such simple geodetic problems to the Internet has several positive effects: (1) raising the level of understanding among former, current and future students, which are easily approached through the Internet, (2) enhancing the presence of geodesy on the Internet as an attractive discipline, (3) motivating the students of geodesy to adopt to the "paradigm shift "- changing the <b>FORmula</b> <b>TRANslation</b> to the platform-independent object-oriented programming for the Internet...|$|E
40|$|A fast {{recursive}} algorithm {{has been developed}} to solve for the scattering solution of a large 2 -D inhomogeneous body for TM waves. The inhomogeneous body is first divided into N subscatterers. The algorithm uses an aggregate T̄ matrix and <b>translation</b> <b>formulas</b> to solve for the solution of n + 1 subscatterers from the solution for n subscatterers. The computational complexity of the algorithm is of O(NMP 2), where NM {{is the number of}} unknowns and P is the number of harmonics required in the <b>translation</b> <b>formulas.</b> The memory requirement is proportional to the number of unknowns. The algorithm has been used to solve for the scattering solution of a 10 -λ-diameter two-dimensional scatterer with about 12, 000 unknowns, taking about 30 s on a CRAY- 2 supercomputer. link_to_subscribed_fulltex...|$|R
40|$|This paper {{proposes a}} novel {{approach}} to the formal definition of UML semantics. We distinguish descriptive semantics from functional seman-tics of modelling languages. The former defines which system is an instance of a model while the later defines the basic concepts underlying the models. In this paper, the descriptive semantics of class diagram, interaction diagram and state machine diagram are defined by first order logic <b>formulas.</b> A <b>translation</b> tool is implemented and integrated with the theorem prover SPASS to enable auto-mated reasoning about models. The formalisation and reasoning of models is then applied to model consistency checking...|$|R
40|$|Arnold Beckmann {{defined the}} uniform reduct of a propositional proof system f {{to be the}} set of those bounded arithmetical <b>formulas</b> whose propositional <b>translations</b> have {{polynomial}} size f-proofs. We prove that the uniform reduct of f + Extended Frege consists of all true bounded arithmetical formulas iff f + Extended Frege simulates every proof system...|$|R
