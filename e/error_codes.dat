153|5865|Public
2500|$|Larry Ellison co-founded Oracle Corporation in 1977 with Bob Miner and Ed Oates {{under the}} name Software Development Laboratories (SDL). Ellison took {{inspiration}} from the 1970 paper written by Edgar F. Codd on relational database management systems (RDBMS) named [...] "A Relational Model of Data for Large Shared Data Banks." [...] He heard about the IBM System R database from {{an article in the}} IBM Research Journal provided by Oates. Also derived from Codd's theories, Ellison wanted to make Oracle's product compatible with System R, but failed to do so as IBM kept the <b>error</b> <b>codes</b> for their DBMS a secret. SDL changed its name to Relational Software, Inc (RSI) in 1979, then again to Oracle Systems Corporation in 1982, to align itself more closely with its flagship product Oracle Database. At this stage Bob Miner served as the company's senior programmer. On March 12, 1986, the company had its initial public offering. In 1995, Oracle Systems Corporation changed its name to Oracle Corporation, officially named Oracle, but sometimes referred to as Oracle Corporation, the name of the holding company. Part of Oracle Corporation's early success arose from using the C programming language to implement its products. This eased porting to different operating systems (most of which support C).|$|E
5000|$|In the [...]NET Framework, HRESULT/IErrorInfo <b>error</b> <b>codes</b> are {{translated}} into CLR exceptions when transitioning from native to managed code; and CLR exceptions are translated to HRESULT/IErrorInfo <b>error</b> <b>codes</b> when transitioning from managed to native COM code.|$|E
50|$|The {{original}} purpose of HRESULTs was to formally lay out ranges of <b>error</b> <b>codes</b> for {{both public and}} Microsoft internal use {{in order to prevent}} collisions between <b>error</b> <b>codes</b> in different subsystems of the OS/2 operating system.|$|E
5000|$|... For MASM/TASM [...]MODEL SMALL [...]STACK [...]CODE main PROC NEAR MOV AH, 4Ch Service 4Ch - Terminate with <b>Error</b> <b>Code</b> MOV AL, 0 <b>Error</b> <b>code</b> INT 21h Interrupt 21h - DOS General Interrupts main ENDP END main Starts at main ...|$|R
3000|$|... 5. Hindering: the {{controller}} fails {{to return a}} correct <b>error</b> <b>code,</b> which may hinder error recovery. The difference between a silent failure and this case is that, here, an error is acknowledged by {{the controller}} but the returned <b>error</b> <b>code</b> is incorrect.|$|R
30|$|Hindering The {{returned}} <b>error</b> <b>code</b> is incorrect.|$|R
50|$|The <b>error</b> <b>codes</b> {{returned}} are AFP result codes.|$|E
5000|$|<b>Error</b> <b>codes</b> were {{displayed}} on a two-digit seven-segment display (one of the first seen, and built with lamps rather than LEDs). The range of <b>error</b> <b>codes</b> included not only decimal and hexadecimal digits (as seven-segment displays are commonly used) but also a limited set of other letters; for example, [...] "P3" [...] {{was one of several}} printer <b>error</b> <b>codes.</b> A thick manual that came with the System/3 aided the operator in interpreting the <b>error</b> <b>codes</b> and suggested recovery procedures. The System/3 had no audible warning device, so a program that was not printing, reading cards, or causing other obvious activity could halt and the operator would not know it unless he or she happened to look at the status display. Models with the Dual Program Feature had two separate status displays.|$|E
5000|$|RFC 2034, SMTP Service Extension for Returning Enhanced <b>Error</b> <b>Codes,</b> ...|$|E
50|$|<b>Error</b> <b>coding</b> can {{be chosen}} to {{be more or less}} robust.|$|R
50|$|An HRESULT value has 32 bits {{divided into}} three fields: a {{severity}} code, a facility <b>code,</b> and an <b>error</b> <b>code.</b> The severity code indicates whether the return value represents information, warning, or <b>error.</b> The facility <b>code</b> identifies {{the area of the}} system responsible for the <b>error.</b> The <b>error</b> <b>code</b> is a unique number that is assigned to represent the exception. Each exception is mapped to a distinct HRESULT.|$|R
50|$|Xbox 360 {{consoles}} {{which have}} a hardware failure will display a secondary <b>error</b> <b>code</b> by blinking a sequence of LED's when the correct button sequence is pushed. An <b>error</b> <b>code</b> of 0001 may represent a defect in the power supply, rather than the Xbox itself, or a short within the Xbox, or a blown capacitor.|$|R
5000|$|... #Subtitle level 2: Microsoft Internet Server 404 substatus <b>error</b> <b>codes</b> ...|$|E
5000|$|An XML-based {{specification}} {{format for}} projects, APIs, functions, types and <b>error</b> <b>codes</b> ...|$|E
5000|$|Check for any <b>Error</b> <b>codes</b> in the ECU {{and take}} {{corrective}} action.|$|E
5000|$|Generic error-handling code (e.g. which {{displays}} the HTTP <b>Error</b> <b>Code</b> 500 page) ...|$|R
5000|$|... <b>error</b> <b>code</b> ({{parameter}} 1, parameter 2, parameter 3, parameter 4) error name ...|$|R
5000|$|... A {{specified}} <b>error</b> <b>code</b> {{if there}} was an error invoking the method, otherwise null.|$|R
5000|$|AIS implementers {{must also}} {{ensure that they}} respect the version numbers {{provided}} by the application when the library is initialized, with regard to new or modified <b>error</b> <b>codes</b> and do not expose <b>error</b> <b>codes</b> that only apply to functions {{in the most recent}} version of the specification to applications written to an older version of the specification.|$|E
5000|$|... #Caption: An image showing various <b>error</b> <b>codes</b> of the {{original}} model Xbox 360.|$|E
5000|$|The program {{interpreter}} on {{the models}} {{did not provide}} human-readable error information. Errors encountered either in program execution or calculation evaluation would be returned as one of 9 <b>error</b> <b>codes,</b> usually indicated by replacing the display with text such as [...] "ERROR 4". On the PC-7 model the list of <b>error</b> <b>codes</b> was printed above the text keypad, and was included {{on the case of}} the PC-8, but with other models users not familiar with the meaning of each code would have to refer to the manual. Like other characteristics of this line, the meanings of the <b>error</b> <b>codes</b> were not necessarily equivalent from model to model.|$|E
40|$|In deep {{sub-micron}} ICs, growing {{amounts of}} ondie memory and scaling effects make embedded memories increasingly vulnerable to reliability and yield problems. As scaling progresses, soft and hard {{errors in the}} memory system will increase and single error events {{are more likely to}} cause large-scale multibit errors. However, conventional memory protection techniques can neither detect nor correct large-scale multi-bit errors without incurring large performance, area, and power overheads. We propose two-dimensional (2 D) <b>error</b> <b>coding</b> in embedded memories, a scalable multi-bit error protection technique to improve memory reliability and yield. The key innovation is the use of vertical <b>error</b> <b>coding</b> across words that is used only for error correction in combination with conventional per-word horizontal <b>error</b> <b>coding.</b> We evaluate this scheme in the cache hierarchies of two representative chip multiprocessor designs and show that 2 D <b>error</b> <b>coding</b> can correct clustered errors up to 32 x 32 bits with significantly smaller performance, area, and power overheads than conventional techniques. 1...|$|R
50|$|The peak {{bit rate}} of the {{standard}} is the net bit rate provided by the physical layer in the fastest transmission mode (using the fastest modulation scheme and <b>error</b> <b>code),</b> excluding forward <b>error</b> correction <b>coding</b> and other physical layer overhead.|$|R
40|$|Abstract — This paper generalizes {{parallel}} <b>error</b> correcting <b>codes</b> {{proposed by}} Alshwede et al. over {{a type of}} multiple access channels called a parallel chan-nel. The generalized parallel <b>error</b> correcting <b>codes</b> can handle with more errors compared with the orig-inal ones. We show construction methods of indepen-dent and non-independent parallel <b>error</b> correcting <b>code</b> and decoding methods. We derive some bounds {{about the size of}} respective parallel <b>error</b> correcting <b>code.</b> I...|$|R
50|$|Request sense: Returns any <b>error</b> <b>codes</b> {{from the}} {{previous}} command that returned an error status.|$|E
5000|$|A wrapper {{converting}} Linux {{calls to}} Windows {{and the other}} way round, also managing results and <b>error</b> <b>codes</b> ...|$|E
50|$|Amazon S3 {{provides}} an API for third-party developers. It describes various API operations, related request and response structures, and <b>error</b> <b>codes.</b>|$|E
40|$|We {{introduce}} {{and study}} <b>error</b> correcting <b>codes</b> for parallel synchronous communication via asymmetric channels. Constructions for <b>error</b> detecting/correcting <b>codes</b> are presented. More generally, we consider array codes for binary asymmetric channels. Index Terms – Asymmetric <b>error</b> correcting <b>codes,</b> parallel channel, asymmetric parallel channel, array code...|$|R
5000|$|The {{service is}} {{currently}} down. Both its [...] ".org" [...] website and its onion link return <b>error</b> <b>code</b> 500.|$|R
5000|$|... 550, the FTP <b>error</b> <b>code</b> meaning [...] "Requested action not taken. File {{unavailable}} (e.g., file not found, no access)." ...|$|R
50|$|HRESULT <b>error</b> <b>codes</b> {{are most}} {{commonly}} encountered in COM programming, where they {{form the basis}} for a standardized COM error handling convention.|$|E
50|$|HRESULTs are {{numerical}} <b>error</b> <b>codes.</b> Various bits {{within an}} HRESULT encode {{information about the}} nature of the error code, and where it came from.|$|E
50|$|<b>Error</b> <b>codes</b> {{are used}} in various methods of solving the semipredicate problem. They are {{generally}} similar to exception handling in programming languages that support it.|$|E
40|$|Abstract-This paper {{presents}} {{several new}} properties of D sequences that have applications to encryption and <b>error</b> <b>coding.</b> It also considers {{the problem of}} joint encryption and errorcorrection coding and proposes a solution usingD sequences. The encryption operation considered is equivalent to exponentiation, which forms the basis of several public-key schemes. An application ofD sequences to generating events with specified probabilities is also presented. Index Terms-Cryptography, data security, D sequences, <b>error</b> <b>coding,</b> public-key systems, random sequences...|$|R
50|$|ECC vs non-ECC: Modules {{that have}} <b>error</b> {{correcting}} <b>code</b> are labeled as ECC. Modules without <b>error</b> correcting <b>code</b> are labeled non-ECC.|$|R
5000|$|In the C {{programming}} language, [...] is {{a standard}} library function that terminates the current application and returns an <b>error</b> <b>code.</b>|$|R
