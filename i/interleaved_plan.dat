4|156|Public
40|$|State {{of the art}} plan {{recognition}} for use in natural language dialogue systems has progressed in coverage of discourse phenomena and plan navigation strategies. Most systems, however, su#er from several deficiencies, namely, {{they do not have}} a specific strategy for the (inevitable) case where they make an incorrect hypothesis inference and they cannot handle <b>interleaved</b> <b>plan</b> navigation, where a user jumps back and forth between several plans. In addition, most plan recognition systems cannot handle the rich variety of possible natural language utterances a dialogue system may receive as input, especially the case where a language utterance corresponds to several actions which the system considers to be atomic. We discuss previous work in plan recognition, especially in the area of dialogues systems. We then describe a plan recognition system which can recover from incorrect inferences, handles <b>interleaved</b> <b>plan</b> navigation, and handles several linguistic phenomena, including support for natural language multi-action paraphrase...|$|E
40|$|Over {{the last}} five years, and while {{developing}} an ar-chitecture for autonomous service robots in human en-vironments, we have identified several key decisional issues {{that are to be}} tackled for a cognitive robot to share space and tasks with a human. We introduce some of them here: situation assessment and mutual modelling, management and exploitation of each agent (human and robot) knowledge in separate cognitive models, natural multi-modal communication, “human-aware ” task planning, and human and robot <b>interleaved</b> <b>plan</b> achievement. As a general “take home ” message, it appears that explicit knowledge management, both symbolic and ge-ometric, proves to be a successful key while attempting to address these challenges, as it pushes for a different...|$|E
40|$|International audienceHuman-robot {{collaboration}} requires {{to equip}} the robot with explicit reasoning {{on the human}} and on its own capacities to achieve its tasks in a collaborative way with a human partner. We present a robot control system which has been especially designed for a cognitive robot which shares space and task with a human. We have adopted a constructive approach based on effective individual and collaborative skills. The system is comprehensive since it aims at dealing with {{a complete set of}} abilities articulated so that the robot controller is effectively able to conduct a collaborative task with a human partner in a flexible manner These abilities include geometric reasoning and situation assessment based essentially on perspective-taking and affor- dances, management and exploitation by the robot of each agent beliefs (human and robot) in a separate cognitive model, human-aware task planning and human and robot <b>interleaved</b> <b>plan</b> achievement...|$|E
40|$|Learning Real-Time A* (LRTA*) is {{a popular}} control method that <b>interleaves</b> <b>planning</b> and plan {{execution}} and {{has been shown to}} solve search problems in known environments efficiently. In this paper, we apply LRTA* to the problem of getting to a given goal location in an initially unknown environment. Uninformed LRTA* with maximal lookahead always moves on a shortest path to the closest unvisited state, that is, to the closest potential goal state. This was believed to be a good exploration heuristic, but we show that it does not minimize the worst-case plan-execution time compared to other uninformed exploration methods. This result is also of interest to reinforcement-learning researchers since many reinforcement learning methods use asynchronous dynamic programming, <b>interleave</b> <b>planning</b> and plan execution, and exhibit optimism in the face of uncertainty, just like LRTA*. 1 Introduction Real-time (heuristic) search methods are domain-independent control methods that <b>interleave</b> <b>planning</b> [...] ...|$|R
40|$|<b>Interleaving</b> <b>planning</b> and {{execution}} is the practical {{alternative to the}} problem of planning off-line with large state spaces. While planning via symbolic model checking has been extensively studied for off-line planning, no framework for interleaving it with execution has been ever devised. In this paper, we extend planning via symbolic model checking with the ability of <b>interleaving</b> <b>planning</b> {{and execution}} in the case of nondeterministic domains and partial observability, one of the most challenging and complex planning problems. We buil...|$|R
40|$|Learning Real-Time A * (LRTA*) is {{a popular}} control method that <b>interleaves</b> <b>planning</b> and plan {{execution}} and {{has been shown to}} solve search problems in known environments efficiently. In this paper, we apply LRTA * to the problem of getting to a given goal location in an initially unknown environment. Uninformed LRTA * with maximal lookahead always moves on a shortest path to the closest unvisited state, that is, to the closest potential goal state. This was believed to be a good exploration heuristic, but we show that it does not minimize the worst-case plan-execution time compared to other uninformed exploration methods. This result is also of interest to reinforcement-learning researchers since many reinforcement learning methods use asynchronous dynamic programming, <b>interleave</b> <b>planning</b> and plan execution, and exhibit optimism in the face of uncertainty, just like LRTA*. ...|$|R
40|$|Human-Robot {{interaction}} {{is an area}} full of challenges for artificial intelligence: dynamic, partially unknown environments that are not originally designed for autonomous machines; a large variety of situations and objects to deal with, with possibly complex semantics; physical interactions with humans that requires fine, low-latency control, representation and management of several mental models, pertinent situation assessment skills [...] . the list goes on. This article sheds light on some key decisional issues {{that are to be}} tackled for a cognitive robot to share space and tasks with a human, and present our take on these challenges. We adopt a constructive approach based on the identification and the effective implementation of individual and collaborative skills. These cognitive abilities cover geometric reasoning and situation assessment mainly based on perspective-taking and affordances, management and exploitation of each agent (human and robot) knowledge in separate cognitive models, natural multi-modal commu-nication, “human-aware ” task planning, and human and robot <b>interleaved</b> <b>plan</b> achievement. We present our design choices, the articulations between the diverse deliberative components of the robot, experi-mental results, and eventually discuss {{the strengths and weaknesses of}} our approach. It appears that explicit knowledge management, both symbolic and geometric, proves to be key as it pushes for a different, more semantic way to address the decision-making issue in human-robot interactions...|$|E
40|$|SimPlanner is an {{integrated}} tool {{for planning and}} executionmonitoring which allows to <b>interleave</b> <b>planning</b> and execution. In this paper we present the on-line planner incorporated in SimPlanner. This is a domain-independent planner for STRIPS domains. SimPlanner participated in the IPC 2002, obtaining very competitive results...|$|R
40|$|Abstract. Methods that <b>interleave</b> <b>planning</b> and {{execution}} are {{a practical solution}} to deal with complex planning problems in non-deterministic domains under partial observability. However, most of the existing approaches do not tackle in a principled way the impor-tant issue of termination of the planning-execution loop, or only do so considering specific assumptions over the domains. In this paper, we tackle the problem of <b>interleaving</b> <b>planning</b> {{and execution}} relying on a general framework, which is {{able to deal with}} nondeterministic, partially observable planning domains. We pro-pose a new, general planning algorithm that guarantees the termi-nation of the <b>interleaving</b> of <b>planning</b> and execution: either the goal is achieved, or the system detects that {{there is no longer a}} guarantee to progress toward it. Our experimental analysis shows that our algorithm can efficiently solve planning problems that cannot be tackled with a state of the art off-line planner for nondeterministic domains under partial observ-ability, MBP. Moreover, we show that our algorithm can efficiently detect situations where progress toward the goal can be no longer guaranteed. ...|$|R
40|$|Agents in a multiagent {{system may}} need to share {{information}} and services. For this, {{they need to be}} able to <b>interleave</b> deliberative <b>planning</b> with execution of actions. The deliberative planning is needed to decide which actions to perform to achieve an objective, whereas execution of some of the actions is needed to make a more informed decision on the other actions and to access services provided by other agents. HITaP is a planner that <b>interleaves</b> <b>planning</b> and execution: using HITaP an agent can, during planning, gather information by either direct inspection of the domain or by #ring queries to other agents and recording their answers. <b>Interleaving</b> <b>planning</b> and execution, as provided by HITaP, plays a crucial role in an agent's ability to construct shared plans with other agents and to manage the negotiation process that leads to agreement with the agent's teammates on these plans. HITaP is implemented and currently used as planning module for agents in the RETSINA multiagent system. These agents cooperate to solve problems in di#erent domains that range from portfolio management to command and control decision support systems. 1...|$|R
40|$|We {{present a}} formal model of agent {{collaborative}} {{problem solving and}} use it to define a novel type of dialogue model. The model provides a rich structure for tracking dialogue state and supports a wide range of dialogue, including dialogue which contributes to <b>interleaved</b> <b>planning</b> and execution of domain goals...|$|R
40|$|Classical search {{algorithms}} such as A * or IDA * {{are useful}} for computing optimal solutions in a single pass, which can then be executed. But in many domains agents either {{do not have the}} time to compute complete plans before acting, or should not spend the time to do so, due to the dynamic nature of the environment. Extensions to A * such as LRTA* address this problem by gradually learning an exact heuristic function, but the learning process is quite slow. In this paper we introduce Partial–Refinement A * (PRA*), which can fully <b>interleave</b> <b>planning</b> and acting through path abstraction and refinement. We demonstrate the effectiveness of PRA* in the domain of real–time strategy (RTS) games. In maps taken from popular RTS games, we show that PRA * is not only able to cleanly <b>interleave</b> <b>planning</b> and execution, but i...|$|R
40|$|Methods that <b>interleave</b> <b>planning</b> and {{execution}} are {{a practical solution}} to deal with complex planning problems in nondeterministic domains under partial observability. However, most of the existing approaches do not tackle in a principled way the important issue of termination of the planning-execution loop, or only do so considering specific assumptions over the domains...|$|R
40|$|In complex environments, a {{planning}} {{system may be}} faced with incomplete information about both the planning operators {{and the state of}} the world. Previous research has investigated policies for selecting the best plan to execute, given incomplete operator descriptions. This paper extends that work to support <b>interleaved</b> <b>planning</b> and execution by taking into account past and current sensor readings. ...|$|R
40|$|We {{present a}} {{temporal}} reasoning mechanism {{for an individual}} agent situated in a dynamic environment such as the web and collaborating with other agents while <b>interleaving</b> <b>planning</b> and acting. Building a collaborative agent that can flexibly achieve its goals in changing environments requires a blending of real-time computing and AI technologies. Therefore, our mechanism consists of an Artificial Intelligence (AI) plannin...|$|R
40|$|This paper chronicles {{some issues}} that arose in {{attempting}} to implement two simple planners that <b>interleave</b> <b>planning</b> and execution. (For brevity, such planners will be called IPE planners.) The IPE planners are based on UCPOP (Barrett et al. 1993), a classic operator-based planner using goal-regression. Unfortunately, while the planners succeeded on very simple problems, they failed on problems as easy as the Sussman problem. This paper describes the two IPE algorithms and discusses why they failed. Planning Technique The point of <b>interleaving</b> <b>planning</b> and execution (IPE) is to gain time by doing an incomplete job of planning before executing the first action. An IPE planner that searches forward in situation space would stop before finding a complete sequence of actions from the initial situation to the goal. A goal-regression IPE planner would stop before finding a plan in which all goals are satisfied and all threats resolved. When the planner stops, the agent executes an action, a [...] ...|$|R
40|$|The {{past five}} years have seen {{dramatic}} advances in planning algorithms, {{with an emphasis on}} propositional methods such as Graphplan and compilers that convert planning problems into propositional CNF formulae for solution via systematic or stochastic SAT methods. Related work on the Deep Space One spacecraft control algorithms advances our understanding of <b>interleaved</b> <b>planning</b> and execution. In this survey, we explain the latest techniques and suggest areas for future research...|$|R
40|$|This paper proposes an {{approach}} to <b>interleave</b> <b>planning</b> and scheduling when dealing with real-world problems in a collaborative way. Hence, the paper analyses some challenging points for this collaboration, such as mod-elling the problem in a joint way, introducing the in-tegrated architecture and, particularly, the definition of planning and scheduling conflicts {{and the way they}} are solved when both processes work together. We also in-clude an example to illustrate the interaction of both processes...|$|R
40|$|Real-time {{heuristic}} search methods <b>interleave</b> <b>planning</b> and plan executions and plan {{only in the}} part of the domain around {{the current state of the}} agents. This is the part of the domain that is immediately relevant for the agents in their current situation. So far, real-time {{heuristic search}} methods have mostly been applied to deterministic planning tasks. In this article, we argue that real-time heuristic search methods can efficiently solve nondeterministic planning tasks. Planning in nondeterministic domains can be time-consuming due to the many contingencies. However, real-time heuristic search methods allow agents to gather information early. This information can be used to resolve some of the uncertainty caused by nondeterminism and thus reduce the amount of planning done for unencountered situations. To this end, we introduce Min-Max Learning Real-Time A * (Min-Max LRTA*), a real-time heuristic search method that generalizes Korf’s LRTA * to nondeterministic domains. Min-Max LRTA * has the following advantages: First, different from the many existing ad-hoc <b>planning</b> methods that <b>interleave</b> <b>planning</b> and plan executions, it has a solid theoretical foundation and is domain independent. Second, it allows for fine-grained control over how much planning to do between plan executions. Third, it can use heuristic knowledge to guide planning which can reduce planning time without increasing the plan-execution time. Fourth, it can be interrupted at any state and resume execution at a differen...|$|R
40|$|This paper {{discusses}} a planner-based {{approach to}} automating data production tasks, such as producing fire forecasts from satellite imagery and weather station data. Since {{the set of}} available data products is large, dynamic and mostly unknown, planning techniques developed for closed worlds are unsuitable. We discuss a number of techniques we have developed to cope with data production domains, including a novel constraint propagation algorithm based on planning graphs and a constraintbased approach to <b>interleaved</b> <b>planning,</b> sensing and execution. ...|$|R
40|$|This paper {{presents}} a programmable logic-based agent control system that <b>interleaves</b> <b>planning,</b> plan execution and perception. In this system, a {{program is a}} collection of logical formulae describing the agent's relationship to its environment. Two such programs for a mobile robot are described [...] - one for navigation and one for map building [...] - that share much of their code. The map building program incorporates a rudimentary approach to the formalisation of epistemic fluents, knowledge goals, and knowledge producing actions...|$|R
40|$|In this article, we {{describe}} agent-centered search (sometimes also called real-time search or local search) and illustrate this planning paradigm with examples. Agent-centered search methods <b>interleave</b> <b>planning</b> and plan execution and restrict planning {{to the part}} of the domain around {{the current state of the}} agent, for example, the current location of a mobile robot or the current board position of a game. They can execute actions in the presence of time constraints and often have a small sum of planning and execution cost, both because they trade-off planning and execution cost and because they allow agents to gather information early in nondeterministic domains, which reduces the amount of planning they have to perform for unencountered situations. These advantages become important as more intelligent systems are interface...|$|R
50|$|The {{interpreter}} {{is responsible}} for maintaining beliefs about the world state, choosing which goals to attempt to achieve next, and choosing which knowledge area to apply in the current situation. How exactly these operations are performed might depend on domain-specific meta-level knowledge areas. Unlike traditional AI planning systems that generate a complete plan at the beginning, and replan if unexpected things happen, PRS <b>interleaves</b> <b>planning</b> and doing actions in the world. At any point, the system might only have a partially specified plan for the future.|$|R
40|$|Current {{specialized}} planners for query processing {{are designed}} to work in local, reliable, and predictable environments. However, {{a number of problems}} arise in gathering information from large networks of distributed information. In this environment, the same information may reside in multiple places, actions can be executed in parallel to exploit distributed resources, new goals come into the system during execution, actions may fail due to problems with remote databases or networks, and sensing may need to be <b>interleaved</b> with <b>planning</b> in order to formulate efficient queries. We have developed a planner called Sage that addresses the issues that arise in this environment. This system integrates previous work on planning, execution, replanning, and sensing and extends this work to support simultaneous and <b>interleaved</b> <b>planning</b> and execution. Sage has been applied to the problem of information gathering to provide a flexible and efficient system for integrating heterogeneou [...] ...|$|R
40|$|Interacting {{agents that}} <b>interleave</b> <b>planning</b> and {{execution}} must reach consensus on their commitments to each other. For domains {{with varying degrees}} of interaction and different constraints on communication and computation, agents will require different coordination protocols in order to efficiently achieve their goals. ShAC (Shared Activity Coordination) is a framework for designing coordination protocols and an algorithm for continually coordinating agents using these protocols during execution. We show how a variety of protocols can be constructed using this framework and describe how ShAC coordinates two rovers and an orbiter in a simulated Mars scenario...|$|R
40|$|AI {{planning}} and scheduling processes have been traditionally hardly {{related to each}} other. However, real-world problems require capabilities of both processes. This paper presents a description of three approaches for tackling these problems: i) temporal planning approach; ii) separate approach; and iii) integrated approach. For the last approach, we provide an efficient model, {{as part of our}} ongoing work, that <b>interleaves</b> <b>planning</b> and scheduling in a flexible and general way. We also describe the key points of this approach, which are the structure and the way the two processes interact...|$|R
40|$|Hierarchical Task Networks (HTNs) are {{a family}} of {{powerful}} planning algorithms that have been success-fully applied to many complex, real-world domains. However, they are limited to predictable domains. In this paper we present HOPPER (Hierarchical Ordered Partial-Plan Executor and Re-planner), a hierarchical planning agent that produces partial plans {{in a similar way}} to HTNs but can also han-dle unexpected events in unpredictable domains by <b>interleaving</b> <b>planning</b> and execution. HOPPER can detect and recover from unexpected events that in-validate the plan, and it can detect and exploit un-expected opportunities both serendipitously and by interleaving decompositions...|$|R
40|$|Learning {{real-time}} search, which <b>interleaves</b> <b>planning</b> and acting, allows {{agents to}} learn from multiple trials and respond quickly. Such algorithms require no prior knowledge {{of the environment and}} can be deployed without pre-processing. We introduce Prioritized-LRTA * (P-LRTA*), a learning real-time search algorithm based on Prioritized Sweeping. P-LRTA * focuses learning on important areas of the search space, where the importance of a state is determined by the magnitude of the updates made to neighboring states. Empirical tests on path-planning in commercial game maps show a substantial learning speed-up over state-of-the-art real-time search algorithms. ...|$|R
40|$|Medical {{diagnosis}} is a planning task {{in which the}} operators are actions such as asking for information and drawing an inference. Diagnosis involves <b>interleaving</b> <b>planning</b> and plan execution, since information gathered by the diagnostician may change the future course of diagnosis. In this paper we present an approach to computer-based medical diagnosis called schema-based reasoning. This approach represents the reasoner's planning knowledge as packets of procedural information called schemata; each schema {{can be applied to}} achieve a goal. Schemata are retrieved using the goals and other features of a consultation. To facilitate opportunism and reactive planning, several schemata can be active at once. The reasoner switches between them as needed, using information about the consultation and using strategies that are represented as strategic schemata. Our approach is implemented in the MEDIO program, a schema-based diagnostic reasoner whose domain is pulmonology...|$|R
40|$|Gridworlds {{are popular}} testbeds for {{planning}} with incomplete information {{but not much}} is known about their properties. We study a fundamental planning problem, localization, to investigate whether gridworlds make good testbeds for planning with incomplete information. We find empirically that greedy <b>planning</b> methods that <b>interleave</b> <b>planning</b> and plan execution can localize robots very quickly on random gridworlds or mazes. Thus, they may not provide adequately challenging testbeds. On the other hand, we show that finding localization plans that are within a log factor of optimal is NP-hard. Thus there are instances of gridworlds on which all greedy planning methods perform very poorly, and we show how to construct them. These theoretical results help empirical researchers to select appropriate planning methods for planning with incomplete information as well as testbeds to demonstrate them. Introduction Testbeds (prototypical test domains) are planning domains that allo [...] ...|$|R
40|$|Some domains, such as {{real-time}} strategy (RTS) games, pose several {{challenges to}} traditional planning and machine learning techniques. In this paper, {{we present a}} novel on-line case-based planning architecture that addresses some of these problems. Our architecture addresses is-sues of plan acquisition, on-line <b>plan</b> execution, <b>interleaved</b> <b>planning</b> and execution and on-line plan adaptation. We also introduce the Darmok system, which implements this architecture in order to play Wargus (an open source clone of the well-known RTS gameWarcraft II). We present empirical evaluation {{of the performance of}} Darmok and show that it suc-cessfully learns to play the Wargus game...|$|R
40|$|Many day-to-day {{applications}} involve autonomous agents. When designing autonomous agents, {{the problem}} of selecting actions must be considered, as it governs decision making at all times. In this paper we describe how we designed intelligent virtual cognitive agents representing operators performing tasks in a high-risk plant. They must respond to expected as well as unexpected events. The reasoning system controlling the agent behavior is designed to exhibit human behavior. Agents {{must be able to}} plan their actions according to their perception, their beliefs and their goals. We developed a <b>planning</b> system that <b>interleaves</b> <b>plan</b> construction and plan execution. The new planner, called AATP, produces a plan according to agent goal...|$|R
40|$|This paper {{presents}} an algorithm for <b>interleaved</b> <b>planning</b> and execution in uncertain environments by reusing a classical planner capable of plan cost optimization. Probabilistic {{actions in the}} initial domain are split into deterministic ones that are presented to the planner. The planner generates a plan that is optimistic {{in the sense that}} it is assumed that all possible effects of the original probabilistic action can be achieved deterministically. The cost of the deterministic actions are used to control the output plans from the planner and are dynamically updated by generating and comparing all possible optimistic plans after the first occurence of a probabilistic action...|$|R
40|$|In this paper, {{we present}} an {{approach}} to support distributed planning and scheduling, {{as well as the}} subsequent (also distributed) plan execution, in one system. The system will support the distributed planners and schedulers by providing task agendas for them, stating who needs to plan which tasks, and sending change notifications and warnings, if a planning or scheduling decision needs to be updated. The plan built using these mechanisms is then enacted by a workflow engine in the same system. This approach enables us to support <b>interleaved</b> <b>planning</b> and plan enactment, allowing the user to change the plan and schedule while the project is already under way. Deviations of the actual project enactment from the plan and schedule can automatically be detected, and necessary notifications will be sent to the concerned planner(s). This again facilitates the task of keeping the plan up to date, avoiding the complete invalidation of the plan {{as is often the case}} in conventional projects soon after enactment has started...|$|R
40|$|In this article, we {{describe}} agent-centered search and illustrate this planning paradigm with examples from robot localization and exploration. Agent-centered search methods <b>interleave</b> <b>planning</b> and plan execution and restrict planning {{to the part}} of the domain around {{the current state of the}} agent. They can execute actions in the presence of time constraints and often have a small sum of planning and plan-execution time, both because they trade-off planning and plan-execution time and because they allow agents to gather information early in nondeterministic domains, which reduces the amount of planning they have to perform for unencountered situations. These advantagesbecome important as more and more intelligent systems are interfaced with the world andhave to operate autonomouslyin complex environments. Agent-centered search methods have been applied to a variety of domains, including traditional search, STRIPStype planning, moving-target search, planning with totally and partially observable Markov decision processes models, reinforcement learning, and robot navigation. We discuss the design and properties of several agent-centered search methods, focusing on robot localization and exploration...|$|R
40|$|We study {{goal-directed}} navigation {{tasks in}} mazes, where the robots know the maze {{but do not}} know their initial pose (position and orientation). These search tasks can be modeled as planning tasks in large non-deterministic domains whose states are sets of poses. They can be solved efficiently by <b>interleaving</b> <b>planning</b> and plan execution, which can reduce the sum of planning and plan-execution time because it allows the robots to gather information early. We show how Min-Max LRTA*, a real-time heuristic search method, can solve these and other planning tasks in non-deterministic domains efficiently. It allows for fine-grained control over how much planning to do between plan executions, uses heuristic knowledge to guide planning, and improves its planexecution time as it solves similar planning tasks, until its plan-execution time is at least worst-case optimal. We also show that Min-Max LRTA * solves the goal-directed navigation tasks fast, converges quickly, and requires {{only a small amount}} of memory...|$|R
