33|10000|Public
5000|$|Induction-induction allows {{definition}} of a type and a <b>family</b> <b>of</b> <b>types</b> at the same time. So, a type [...] and a <b>family</b> <b>of</b> <b>types</b> [...]|$|E
5000|$|Induction {{induction}} [...] is {{a feature}} for declaring an inductive type and a <b>family</b> <b>of</b> <b>types</b> {{that depends on}} the inductive type.|$|E
5000|$|Loosely speaking, {{dependent}} {{types are}} similar to the type of an indexed family of sets. More formally, given a type [...] in a universe of types , one may have a <b>family</b> <b>of</b> <b>types</b> , which assigns to each term [...] a type [...] We say that the type [...] varies with [...]|$|E
40|$|We {{present some}} {{improved}} bounds on necessary conditions for separating hash <b>families</b> <b>of</b> <b>type</b> {w, w} and type {w, w âˆ’ 1 }. In particular, these bounds apply to secure frameproof codes, which are equivalent to separating hash <b>families</b> <b>of</b> <b>type</b> {w, w}. We also consider existence results for separating hash <b>families</b> <b>of</b> <b>type</b> {w 1, w 2 } {{that can be}} obtained from the probabilistic method. The asymptotic behaviour of these bounds is analyzed...|$|R
40|$|This paper {{concerns}} optimal bounds and constructions for separating hash <b>families</b> <b>of</b> <b>type</b> { 1, w} and { 2, 2 }. We first prove optimal bounds for separating hash <b>families</b> <b>of</b> <b>type</b> { 1, w} {{and show}} constructions <b>of</b> <b>families</b> achieving the bounds. As {{a by-product of}} the results we obtain a positive {{answer to a question}} put by Blackburn, Etzion, Stinson and Zaverucha recently. Next we study optimal bounds for separating hash <b>families</b> <b>of</b> <b>type</b> { 2, 2 } having a small number of symbols. We then prove new strong bounds for the general case <b>of</b> <b>type</b> { 2, 2 }. The paper exhibits a generic construction <b>of</b> separating hash <b>families</b> <b>of</b> <b>type</b> { 2, 2 } which shows the strength of the new bounds. Key words. Separating hash family, perfect hash family, frameproof code, 2 -IPP code. ...|$|R
50|$|The BAMs are {{a common}} {{platform}} {{for a variety of}} missions, used to develop whole <b>families</b> <b>of</b> <b>types</b> <b>of</b> ships that meet the diverse needs of the Navy.|$|R
5000|$|Despite {{originating}} in the nineteenth century, use of the typeface remains strong for periodicals, textbooks, and literature. The Supreme Court of the United States requires that briefs be typeset in Century family type. According to Charles Shaw, [...] "The rugged simplicity of the Century <b>family</b> <b>of</b> <b>types</b> has made it an enduring favorite of American typographers for almost one hundred years. Beginning as foundry type, Century has withstood a series of technical transformations into Linotype, Monotype, Ludlow, phototype, transfer type, digital type, and Xerox-like 'toner type'." ...|$|E
40|$|A Hindley-Milner type system such as ML's {{seems to}} {{prohibit}} typeindexed values, i. e., functions that map a <b>family</b> <b>of</b> <b>types</b> {{to a family}} of values. Such functions generally perform case analysis on the input types and return values of possibly different types. The goal of our work is to demonstrate how to program with type-indexed values within a Hindley-Milner type system...|$|E
40|$|An {{important}} feature of modern computer algebra systems is {{the support of a}} rich type system with the possibility of type inference. Basic features of such a type system are polymorphism and coercion between types. Recently the use of order-sorted rewrite systems was proposed as a general framework. We will give a quite simple example of a <b>family</b> <b>of</b> <b>types</b> arising in computer algebra whose coercion relations cannot be captured by a finite set of first-order rewrite rules...|$|E
40|$|A lambda-free logical {{framework}} takes parameterisation and cut {{as the basic}} notions to provide a schematic mechanism for specification <b>of</b> <b>type</b> theories and a definitional mechanism for their use in practice. The framework presented here, PAL +, is {{in the spirit of}} de Bruijn's PAL for Automath [dB 80]. PAL + is a {{logical framework}} for specification and implementation <b>of</b> <b>type</b> theories. As in Martin-Lof's logical framework [NPS 90], computational rules can be introduced and are used to give meanings to the declared constants. However, PAL + only allows one to talk about the concepts that are intuitively in the object type theories: types and their objects, and <b>families</b> <b>of</b> <b>types</b> and <b>families</b> <b>of</b> objects <b>of</b> <b>types.</b> In particular, in PAL +, one cannot represent <b>families</b> <b>of</b> <b>families</b> <b>of</b> entities, which could be done in other logical frameworks by means of lambda abstraction. Compared with PAL, PAL + allows one to represent parametric concepts such as <b>families</b> <b>of</b> <b>types</b> and [...] ...|$|R
5000|$|Homing endonucleases share {{structural}} motifs {{that suggest}} {{there are four}} families, whereas {{it has not been}} possible to determine simply recognisable and distinguishable <b>families</b> <b>of</b> <b>Type</b> II restriction enzymes.|$|R
40|$|Fourteen {{families}} with X-linked mental retardation (XMR) {{have been studied}} clinically and cytogenetically. All affected males failed to show a fragile site (FS) on Xq of their peripheral lymphocytes. Five families may be considered examples of Renpenning syndrome while the remaining may be divided in two groups: one <b>of</b> seven (<b>type</b> I) and one <b>of</b> two (<b>type</b> II). The seven <b>families</b> <b>of</b> <b>type</b> I had some physical features of the Martin-Bell syndrome but with normal to large sized testes whence the name of X-linked MR with slight macroorchidism (XMR +/- MO). The two <b>families</b> <b>of</b> <b>type</b> II showed unremarkable facial appearance, mild to moderate degree of MR and a certain microorchidism whence the possible name of X-linked MR with different degree of microorchidism (XMR +/- MiO...|$|R
40|$|Vaught's Conjecture {{states that}} if T is a {{complete}} First order theory in a countable language that has more than aleph_ 0 pairwise non isomorphic countable models, then T has 2 ^aleph_ 0 such models. Morley showed that if T has more than aleph_ 1 pairwise non isomorphic countable models, then it has 2 ^aleph_ 0 such models. In this paper, we First show how we can use algebraic logic, namely the representation theory of cylindric and quasi-polyadic algebras, to study Vaught's conjecture (count models), and we re-prove Morley's above mentioned theorem. Second, we show that Morley's theorem holds {{for the number of}} non isomorphic countable models omitting a countable <b>family</b> <b>of</b> <b>types.</b> We go further by giving examples showing that although this number can only take the values given by Morley's theorem, it can be different from the number of all non isomorphic countable models. Moreover, our examples show that the number of countable models omitting a <b>family</b> <b>of</b> <b>types</b> can also be either aleph_ 1 or 2 and therefore different from the possible values provided by Vaught's conjecture and by his well known theorem; in the case of aleph_ 1, however, the family is uncountable. Finally, we discuss an omitting types theorem of Shelah...|$|E
40|$|A {{model of}} strongly-typed object generators, {{in which the}} class-type {{information}} {{was attached to the}} object-information was developed. A class was defined as a family of objects that shared a similar implementation strategy, and a <b>family</b> <b>of</b> <b>types</b> shared a similar method interface. It provided a good foundation for developing further model interpretations of other object-oriented concepts such as class hierarchies, abstract classes, and interfaces. A new typed calculus was also used to present a model of strongly-typed inheritance, and a formal obligation to demonstrate that aspects of inheritance were type-sound were also fulfilled...|$|E
40|$|AbstractA {{notion of}} {{dependent}} coercion is introduced and {{studied in the}} context of dependent type theories. It extends our earlier work on coercive subtyping into a uniform framework which increases the expressive power with new applications. A dependent coercion introduces a subtyping relation between a type and a <b>family</b> <b>of</b> <b>types</b> in that an object of the type is mapped into one of the types in the family. We present the formal framework, discuss its meta-theory, and consider applications such as its use in functional programming with dependent types...|$|E
40|$|This study {{examined}} the attitudes toward divorce of Black graduate students from intact and nonintact <b>families</b> <b>of</b> origin. The study hypotheses predicted that Black adults from nonintact <b>families</b> <b>of</b> origin would hold {{more positive attitudes toward}} divorce than Black adults from intact <b>families</b> <b>of</b> origin and that gender would significantly mediate the relationship between attitude toward divorce and <b>family</b> <b>of</b> origin <b>type.</b> A nonprobability convenience sampling procedure was used and questionnaires were administered to 50 Black graduate students to assess attitude toward divorce, <b>family</b> <b>of</b> origin <b>type</b> and other descriptive information. The researcher found that Black adults from nonintact households did not hold significantly more positive attitudes toward divorce than Black adults from intact <b>families</b> <b>of</b> origin, but gender did significantly mediate the relationship between <b>family</b> <b>of</b> origin <b>type</b> and attitude toward divorce. The conclusions drawn from this study suggest that investigations using independent variables other than <b>family</b> <b>of</b> origin <b>type</b> and those that investigate the relationship between attitude toward divorce and <b>family</b> <b>of</b> origin <b>type,</b> solely for Black men would be the most helpful in providing new information to help explain the prevalence of divorce in the African American community...|$|R
50|$|In {{molecular}} biology, the BsuBI/PstI {{restriction endonuclease}} {{family is a}} <b>family</b> <b>of</b> <b>type</b> II restriction endonucleases. It includes BsuBI and PstI. The enzymes of the BsuBI restriction/modification (R/M) system recognise the target sequence 5'CTGCAG and are functionally identical {{with those of the}} PstI R/M system.|$|R
40|$|Abstract. In our {{approach}} we consider programming as logical reasoning over <b>type</b> theory <b>of</b> a given solved problem. In our paper we follow our work with describing dependent type theory categorically. We introduce dependent <b>types</b> as <b>families</b> <b>of</b> <b>types</b> indexed by terms and we provide rules <b>of</b> dependent <b>type</b> calculus. We describe indexing {{in terms of}} special functors, fibration...|$|R
40|$|Families {{of types}} are {{fundamental}} objects in Martin-LÃ¶f type theory. When extending {{the notion of}} setoid (type with an equivalence relation) to families of setoids, a choice between proof-relevant or proof-irrelevant indexing appears. It is shown that a <b>family</b> <b>of</b> <b>types</b> may be canonically extended to a proof-relevant family of setoids via the identity types, but that such a family is in general proofirrelevant if, and only if, the proof-objects of identity types are unique. A similar result is shown for fibre representations of families. The ubiquitous role of proofirrelevant families is discussed. ...|$|E
40|$|The {{notion of}} class which defines class as <b>family</b> <b>of</b> <b>types</b> which share minimum common {{structure}} is described using the Cook's F-bounded quantification. The languages such as Java and C++ adopt this simple view which {{is found to}} challenge the frequent use of type downcasting needed to overcome inadequacies of first-order type systems based on types and subtyping. The systematic modeling of polymorphism is also described which uses type parameters. The relationship between universal quantification which supports definition of generic types and F-bounded quantification which supports definition of classes are also described...|$|E
40|$|Record {{types are}} an {{important}} tool for programming and are essential in objectoriented calculi. Dependent record types are proven to be very useful for program specification and verification. Unfortunately, all known embedding of the dependent record type in the type theory had some imperfections. In this paper we present a new type constructor, dependent intersection, i. e., the intersection of two types, where the second type may depend on elements of the first one (do not confuse it with the intersection of a <b>family</b> <b>of</b> <b>types).</b> This new type constructor allows us to define dependent records in a very simple way...|$|E
5|$|Type II toxin-antitoxin {{systems are}} {{generally}} better-understood than type I. In this system a labile protein antitoxin tightly binds and inhibits {{the activity of}} a stable toxin. The largest <b>family</b> <b>of</b> <b>type</b> II toxin-antitoxin systems is vapBC, which has been found through bioinformatics searches to represent between 37 and 42% <b>of</b> all predicted <b>type</b> II loci.|$|R
40|$|The second order Killing and {{conformal}} tensors {{are analyzed}} {{in terms of}} their spectral decomposition, and some properties of the eigenvalues and the eigenspaces are shown. When the tensor is <b>of</b> <b>type</b> I with only two different eigenvalues, the condition to be a Killing or a conformal tensor is characterized in terms of its underlying almost-product structure. A canonical expression for the metrics admitting these kinds of symmetries is also presented. The space-time cases 1 + 3 and 2 + 2 are analyzed in more detail. Starting from this approach to Killing and conformal tensors a geometric interpretation of some results on quadratic first integrals of the geodesic equation in vacuum Petrov-Bel type D solutions is offered. A generalization of these results to a wider <b>family</b> <b>of</b> <b>type</b> D space-times is also obtained. A generalization of these results to a wider <b>family</b> <b>of</b> <b>type</b> D space-times is also obtained. Comment: 18 pages; v- 3 : minor change...|$|R
40|$|<b>Family</b> history <b>of</b> <b>type</b> II {{diabetes}} {{appears to}} increase the risk <b>of</b> <b>type</b> II diabetes and of coronary heart disease. The {{aim of this study}} was to evaluate the effect <b>of</b> a first-degree <b>family</b> history <b>of</b> <b>type</b> II diabetes on fasting plasma concentrations of leptin and adiponectin in an outpatient clinical setting. Methods and results The study included 46 nondiabetic premenopausal overweight and obese women, aged 22 â€“ 50 years. A total of 22 subjects had no <b>family</b> history <b>of</b> <b>type</b> II diabetes until the third generation (FHâˆ’) and 24 subjects had a <b>family</b> history <b>of</b> <b>type</b> II diabetes (FH+), defined as having one or both parents with type II diabetes. Fasting plasma leptin and adiponectin were measured by radioimmunoassay. Leptin concentrations were significantly higher (p < 0. 05) in FH+ than in FHâˆ’ subjects. Moreover, after multiple regression analyses, both leptin (positively, p < 0. 01) and adiponectin (negatively, p < 0. 05) maintained a significant association with <b>family</b> history <b>of</b> diabetes, independently of age, body mass index, insulin resistance (estimated by homeostasis model assessment, HOMAIR), glucose, lipids, and blood pressure levels. Conclusions This study indicated that a genetic predisposition to type II diabetes is associated with higher leptin concentrations and lower adiponectin levels independently of insulin resistance, blood pressure and metabolic parameters, which thus possibly contribute to the higher risk <b>of</b> <b>type</b> II diabetes and cardiovascular disease in subjects with a <b>family</b> history <b>of</b> <b>type</b> II diabetes...|$|R
40|$|Record {{types are}} an {{important}} tool for programming and dependent record types are proven to be very useful for program speci cation and veri cation. Unfortunately all known embedding of the dependent record type in the type theory had some imperfections. In this paper we present a new type constructor, dependent intersection - the intersection of two types, where the second type may depend on the fi rst type (this is not {{the intersection of the}} <b>family</b> <b>of</b> <b>types).</b> This new type constructor allows us to defi ne records that combine the most advantages of previously known approaches, while avoiding most of their disadvantages...|$|E
40|$|These {{notes are}} {{an attempt to}} {{structure}} the author's thoughts and conjectures related to higher relations and their quotients. We define {{the notion of a}} Yoneda Groupoid in HoTT, the name of which is inspired by the relation to the Yoneda lemma, and show how a weak Ï‰ groupoid structure can be extracted. 1 Introduction to the General Problem Many open problems of Homotopy Type Theory are related to the question how an (infinite) tower of coherence conditions can be stated. Assume that âˆ¼: AÃ—A â†’ U is any <b>family</b> <b>of</b> <b>types,</b> indexed twice over A, and to be read as a binary relation. A priori, âˆ¼ needs not to have the properties of an equivalenc...|$|E
40|$|We {{discuss the}} {{semantics}} of NL coordination in modern type theories (MTTs) with coercive subtyping. The issue of conjoinable types is handled {{by means of}} a type universe of linguistic types. We discuss quantifier coordination, arguing that they should be allowed in principle and that the semantic infelicity of some cases of quantifier coordination is due to the incompatible semantics of the relevant quantifiers. Non-Boolean collective readings of conjunction are also discussed and, in particular, treated as involving the vectors of type Vec(A,n), an inductive <b>family</b> <b>of</b> <b>types</b> in an MTT. Lastly, the interaction between coordination and copredication is briefly discussed, showing that the proposed account of coordination and that of copredication by means of dot-types combine consistently as expected...|$|E
50|$|Contrary {{to popular}} belief, some people having LADA do carry a <b>family</b> history <b>of</b> <b>type</b> 2 diabetes.|$|R
5000|$|... the 2007 {{finding that}} non-diabetic <b>family</b> members <b>of</b> <b>type</b> 1 diabetics had {{increased}} risk for microvascular complications , ...|$|R
50|$|Substructural type {{systems are}} a <b>family</b> <b>of</b> <b>type</b> systems {{analogous}} to substructural logics where {{one or more}} of the structural rules are absent or only allowed under controlled circumstances. Such systems are useful for constraining access to system resources such as files, locks and memory by keeping track of changes of state that occur and preventing invalid states.|$|R
40|$|A Domain Specific Language (DSL) is a {{computer}} programming language of limited expressiveness focused on a particular domain. (Martin Fowler) Nested data parallelism is our domain. The idea of nesting {{is to take a}} parallel function and apply it over multiple instances in parallel. (Guy Blelloch) A data-generic (or polytypic) function is a function that can be instantiated on many data types to obtain data type specific functionality, it works for a whole <b>family</b> <b>of</b> <b>types.</b> (Ralf Hinze) Staging is a program transformation that involves reorganizing the program's execution into stages. (JÃ¸rring, U.,Scherlis, W. L. Compilers and staging transformations. 1986, Walid Taha.) Scala is a general purpose programming language designed to express common programming patterns in a concise, elegant, and type-safe way. (scala-lang. org) Polytypic Staging is a lightweight approach to introduce staging in the context of embedded DSL with polytypic meta-level...|$|E
40|$|A type-indexed {{function}} {{is a function}} that is defined for each member of some <b>family</b> <b>of</b> <b>types.</b> Haskell's type class mechanism provides collections of open type-indexed functions, in which the indexing family can be extended by defining a new type class instance but the collection of functions is fixed. The {{purpose of this paper}} is to present TypeCase: a design pattern that allows the definition of closed type-indexed functions, in which the index family is fixed but the collection of functions is extensible. It is inspired by Cheney and Hinze's work on lightweight approaches to generic programming. We generalise their techniques as a design pattern. Furthermore, we show that type-indexed functions with typeindexed types, and consequently generic functions with generic types, can also be encoded in a lightweight manner, thereby overcoming one of the main limitations of the lightweight approaches...|$|E
40|$|A {{notion of}} {{dependent}} coercion is introduced and {{studied in the}} context of dependent type theories. It extends our earlier work on coercive subtyping into a uniform framework which increases the expressive power with new applications. A dependent coercion introduces a subtyping relation between a type and a <b>family</b> <b>of</b> <b>types</b> in that an object of the type is mapped into one of the types in the family. We present the formal framework, discuss its meta-theory, and consider applications such as its use in functional programming with dependent types. 1 Introduction Coercive subtyping, as studied in [Luo 97, Luo 99, JLS 98], represents a new general approach to subtyping and inheritance in type theory. In particular, it provides a framework in which subtyping, inheritance, and abbreviation can be understood in dependent type theories where types are understood as consisting of canonical objects. In this paper, we extend the framework of coercive subtyping to introduce a notion of dependent coer [...] ...|$|E
40|$|A new {{isomorphism}} invariant {{of certain}} measure preserving flows, using sequences of integers, is introduced. Using this invariant, {{we are able}} to construct large <b>families</b> <b>of</b> <b>type</b> III 0 systems which are not orbit equivalent. In particular we construct an uncountable <b>family</b> <b>of</b> nonsingular ergodic transformations, each having an associated flow that is approximately transitive (and therefore of zero entropy), with the property that the transformations are pairwise not orbit equivalent...|$|R
40|$|We {{construct}} a <b>typed</b> hierarchy <b>of</b> effective algebraic domains with totality of height the first recursively Mahlo ordinal. The hierarchy {{is based on}} the empty type and the domains for singleton, boolean values and natural numbers, and it is closed under dependent sums and pro-ducts <b>of</b> effectivly parameterised <b>families</b> <b>of</b> <b>types,</b> and under universes closed under a very general universe operator...|$|R
40|$|Datatype generic {{programming}} is a programming model that exploits the structural similarities <b>of</b> different <b>types</b> {{in order to}} generically define functions on <b>families</b> <b>of</b> <b>types.</b> This model demands a powerful type system so it has been seldomly used outside Haskell. This thesis attempts {{to address this problem}} by introducing a datatype generic programming for the F# language, which is a simpler functional language designed for existing. NET programmers...|$|R
