2061|441|Public
5|$|FreeBSD {{has several}} unique {{features}} related to storage. Soft updates can protect {{the consistency of}} the UFS <b>filesystem</b> (widely used on the BSDs) {{in the event of a}} system crash. <b>Filesystem</b> snapshots allow an image of a UFS <b>filesystem</b> at an instant in time to be efficiently created. Snapshots allow reliable backup of a live <b>filesystem.</b> GEOM is a modular framework that provides RAID (levels 0, 1, 3 currently), full disk encryption, journaling, concatenation, caching, and access to network-backed storage. GEOM allows building of complex storage solutions combining ("chaining") these mechanisms.|$|E
5|$|From 7.0 onward, FreeBSD {{supports}} the ZFS <b>filesystem.</b> ZFS was previously an open source <b>filesystem</b> that was first developed by Sun Microsystems, but when Oracle acquired Sun, ZFS became a proprietary product. However, the FreeBSD project is still developing and improving its ZFS implementation via the OpenZFS project.|$|E
5|$|The second idea {{means that}} {{processes}} can offer their services to other processes by providing virtual files {{that appear in}} the other processes' namespace. The client process's input/output on such a file becomes inter-process communication between the two processes. This way, Plan 9 generalizes the Unix notion of the <b>filesystem</b> as the central point of access to computing resources. It carries over Unix's idea of device files {{to provide access to}} peripheral devices (mice, removable media, etc.) and the possibility to mount filesystems residing on physically distinct filesystems into a hierarchical namespace, but adds the possibility to mount a connection to a server program that speaks a standardized protocol and treat its services as part of the namespace.|$|E
5000|$|Modern {{versions}} of MVS (e.g., z/OS) also support POSIX-compatible [...] "slash" [...] <b>filesystems</b> along with facilities for integrating the two <b>filesystems.</b> That is, the OS {{can make an}} MVS dataset appear as a file to a POSIX program or subsystem. These newer <b>filesystems</b> include Hierarchical File System (HFS) (not {{to be confused with}} Apple's Hierarchical File System) and zFS (not to be confused with Sun's ZFS).|$|R
50|$|The 14-character limit {{addresses}} {{very old}} <b>filesystems</b> which could represent filenames {{no longer than}} that. While those <b>filesystems</b> are generally obsolete, these limits were as documented from the late 1980s, and unreviewed since then.|$|R
5000|$|Some <b>filesystems</b> (including Btrfs and ZFS) provide {{internal}} data and metadata checksumming, what {{is used for}} detecting silent data corruption and improving data integrity. If a corruption is detected that way and internal RAID mechanisms provided by those <b>filesystems</b> are also used, such <b>filesystems</b> can additionally reconstruct corrupted data in a transparent way. [...] This approach allows improved data integrity protection covering the entire data paths, which is usually known as end-to-end data protection.|$|R
5|$|Media Transfer Protocol (MTP) was {{designed}} by Microsoft to give higher-level access to a device's <b>filesystem</b> than USB mass storage, {{at the level of}} files rather than disk blocks. It also has optional DRM features. MTP {{was designed}} for use with portable media players, but it has since been adopted as the primary storage access protocol of the Android operating system from the version 4.1 Jelly Bean as well as Windows Phone 8 (Windows Phone 7 devices had used the Zune protocol which was an evolution of MTP). The primary {{reason for this is that}} MTP does not require exclusive access to the storage device the way UMS does, alleviating potential problems should an Android program request the storage while it is attached to a computer. The main drawback is that MTP is not as well supported outside of Windows operating systems.|$|E
5|$|The NTFS {{file system}} used by recent {{versions}} of Windows stores the file with a UTC time stamp, but displays it corrected to local—or seasonal—time. However, the FAT <b>filesystem</b> commonly used on removable devices stores only the local time. Consequently, when a file is copied {{from the hard}} disk onto separate media, its time will be set to the current local time. If the time adjustment is changed, the timestamps of the original file and the copy will be different. The same effect can be observed when compressing and uncompressing files with some file archivers. It is the NTFS file that changes seen time. This effect {{should be kept in}} mind when trying to determine if a file is a duplicate of another, although there are other methods of comparing files for equality (such as using a checksum algorithm).|$|E
25|$|Local <b>filesystem</b> or network <b>filesystem,</b> {{accessed}} by client directly. This mode uses the file:///path access scheme.|$|E
5000|$|Quotas for XFS <b>filesystems</b> {{are turned}} on when {{initially}} mounted; this fixes a race window that is present with most other <b>filesystems</b> that first require to be mounted and where no quotas are enforced until quotaon(8) is called.|$|R
50|$|There is no {{need for}} special {{configuration}} files; the setup is as simple as one mount command (or one line in fstab). There is no specific communication protocol, at mount time the invoking parameters indicate two or more paths to directories which will be the replicated underlying <b>filesystems</b> (they must be already in sync). This allows the client to use any kind of underlying <b>filesystems</b> such as Ext3, NFS or SSHFS and even mix them. Every write in the Chiron FS mount point subtree will be echoed to the underlying <b>filesystems.</b> Any read from Chiron FS mount point subtree will be made from only one of the underlying <b>filesystems</b> using a prioritized round robin algorithm.|$|R
50|$|Which <b>filesystems</b> the {{application}} supports.|$|R
25|$|Performance {{related to}} hard-disk access is also {{slightly}} slower on a Wubi install, more {{so if the}} underlying disk image file is fragmented, as the disk image file in the Windows <b>filesystem</b> contains a Linux <b>filesystem</b> whereas without Wubi only the Linux <b>filesystem</b> is used that has direct hardware access.|$|E
25|$|One {{important}} feature of the Subversion <b>filesystem</b> is properties: simple name=value pairs of text. Properties occur on <b>filesystem</b> entries (i.e., files and directories). These are versioned just like other changes to the <b>filesystem.</b> Users can add any property they wish, and the Subversion client uses a set of properties, which it prefixes with 'svn:'.|$|E
25|$|Subversion {{often does}} not deal {{well with the}} {{filename}} normalization performed by the HFS+ <b>filesystem.</b> This can cause problems when files with accented characters in their names {{are added to the}} repository on a non-HFS+ <b>filesystem</b> and the repository is then used with HFS+.|$|E
5000|$|GPFS breaks files up {{into small}} blocks. Hadoop HDFS likes blocks of 64 MB or more, as this reduces the storage {{requirements}} of the Namenode. Small blocks or many small files fill up a <b>filesystem's</b> indices fast, so limit the <b>filesystem's</b> size.|$|R
50|$|NoSQL {{is written}} mostly in interpretive languages, slowing actual process execution, but {{its ability to}} use {{ordinary}} pipes and <b>filesystems</b> means {{that it can be}} extremely fast for many applications when using RAM <b>filesystems</b> or heavily leveraging pipes, which are mostly memory-based in many implementations.|$|R
5000|$|... '''''' is a Unix utility {{which serves}} to find files on <b>filesystems.</b> It {{searches}} through a prebuilt database of files {{generated by the}} [...] command or by a daemon and compressed using incremental encoding. It operates significantly faster than , but requires regular updating of the database. This sacrifices overall efficiency (because of the regular interrogation of <b>filesystems</b> even when no user needs information) and absolute accuracy (since the database does not update in real time) for significant speed improvements, particularly on very large <b>filesystems.</b>|$|R
25|$|IPFS − A {{peer-to-peer}} distributed <b>filesystem.</b>|$|E
25|$|File {{transfer}} protocol <b>filesystem</b> translator.|$|E
25|$|<b>Filesystem</b> {{encryption}} since Solaris 11 Express.|$|E
5|$|Binary search trees lend {{themselves}} to fast searching in external memory stored in hard disks, as binary search trees can effectively be structured in <b>filesystems.</b> The B-tree generalizes this method of tree organization; B-trees are frequently used to organize long-term storage such as databases and <b>filesystems.</b>|$|R
5000|$|... #Subtitle level 3: Implementation of single-file virtual <b>filesystems</b> ...|$|R
50|$|Traditional <b>filesystems</b> (such as FAT or ext3) are {{designed}} to be accessed by a single host, and will cause unpredictable behavior if accessed by multiple machines. Such <b>filesystems</b> may be used, and AoE provides mechanisms whereby an AoE target can be guarded against simultaneous access (see: Config String).|$|R
25|$|Transparent <b>filesystem</b> compression. Supports LZJB, gzip and LZ4.|$|E
25|$|In ZFS, <b>filesystem</b> {{manipulation}} {{within a}} storage pool {{is easier than}} volume manipulation within a traditional filesystem; {{the time and effort}} required to create or expand a ZFS <b>filesystem</b> is closer to that of making a new directory than it is to volume manipulation in some other systems.|$|E
25|$|Translator for the BSD <b>filesystem</b> of {{the same}} name, UFS.|$|E
5000|$|NTFS-3G and Captive NTFS, {{allowing}} {{access to}} NTFS <b>filesystems</b> ...|$|R
5000|$|The {{original}} BBC {{and most}} of its clones and derivatives will scan the system for recognized <b>filesystems,</b> automatically [...] "mounting" [...] these up in read-only mode. This makes <b>filesystems</b> on any local hard disks accessible while minimizing the risk of inadvertent corruption, deletion or other damage to files on local drives.|$|R
5000|$|Other <b>filesystems</b> like FAT12, FAT16, FAT32 from Windows or ext2 from Linux are {{available}} through easily installable (drag and drop) system libraries or third party modules such as FAT95 [...] (features read/write support), {{which can be found}} on the Aminet software repository. MorphOS 2 has built-in support for FAT <b>filesystems.</b>|$|R
25|$|The servers collectively {{implement}} the POSIX API, with each server implementing {{a part of}} the interface. For instance, the various <b>filesystem</b> servers each {{implement the}} <b>filesystem</b> calls. The storage server will work as a wrapping layer, similar to the block layer of Linux. The equivalent of VFS of Linux is achieved by libdiskfs and libpager libraries.|$|E
25|$|The Subversion <b>filesystem</b> uses {{transactions}} to keep changes atomic. A transaction {{operates on}} a specified {{revision of the}} <b>filesystem,</b> not necessarily the latest. The transaction has its own root, on which changes are made. It is then either committed and becomes the latest revision, or is aborted. The transaction is actually a long-lived <b>filesystem</b> object; a client {{does not need to}} commit or abort a transaction itself, rather it can also begin a transaction, exit, and then can re-open the transaction and continue using it. Potentially, multiple clients can access the same transaction and work together on an atomic change, though no existing clients expose this capability.|$|E
25|$|Content served {{from the}} server's <b>filesystem</b> {{instead of a}} {{relational}} database management system (RDBMS).|$|E
50|$|Alternative <b>filesystems</b> {{included}} AsimCDFS, AmiCDROM, CDVDFS, Allegro CDFS and CacheCDFS.|$|R
50|$|The {{following}} are not versioning <b>filesystems,</b> but allow similar functionality.|$|R
5000|$|HFS and HFS Plus Hierarchical File System Apple Macintosh <b>filesystems</b> ...|$|R
