10000|10000|Public
5|$|The new {{keyboard}} did {{not include}} the BASIC keyword markings that were found on earlier Spectrums, except for the <b>keywords</b> LOAD, CODE and RUN which were useful for loading software. This was not a major issue, as the +2 boasted a menu system, almost identical to the ZX Spectrum 128, where one could switch between 48K BASIC programming with the <b>keywords,</b> and 128K BASIC programming in which all words (<b>keywords</b> and otherwise) must be typed out in full (although the <b>keywords</b> are still stored internally as one character each). Despite these changes, the layout remained identical to that of the 128.|$|E
5|$|In {{terms of}} <b>keywords</b> and {{language}} syntax, PHP {{is similar to}} the C style syntax. if conditions, for and while loops, and function returns are similar in syntax to languages such as C, C++, C#, Java and Perl.|$|E
5|$|One major {{limitation}} to {{a forensic}} investigation {{is the use}} of encryption; this disrupts initial examination where pertinent evidence might be located using <b>keywords.</b> Laws to compel individuals to disclose encryption keys are still relatively new and controversial.|$|E
50|$|The <b>Keyword</b> Service Platform {{has defined}} {{a set of}} APIs for each class of <b>keyword</b> services. These {{interfaces}} for Web services include <b>keyword</b> extraction (ITermExtraction), <b>keyword</b> categorization (ITermCategorization), <b>keyword</b> suggestion (ITermSuggestion), <b>keyword</b> forecast (ITermForecast), <b>keyword</b> monetization (ITermMonetization), and several others. The APIs define the signatures of each Web service.|$|R
50|$|<b>Keyword</b> {{density is}} the {{percentage}} of times a <b>keyword</b> or phrase appears on a web page compared to {{the total number of}} words on the page. In the context of search engine optimization, <b>keyword</b> density can be used to determine whether a web page is relevant to a specified <b>keyword</b> or <b>keyword</b> phrase.|$|R
5000|$|Positional {{parameter}} must precede <b>keyword</b> parameters. <b>Keyword</b> parameters always assign {{values to}} a <b>keyword</b> using the equals sign (...) [...]|$|R
5|$|Python uses {{whitespace}} indentation {{to delimit}} blocks – rather than curly braces or <b>keywords.</b> An increase in indentation comes after certain statements; {{a decrease in}} indentation signifies {{the end of the}} current block. This feature is also sometimes termed the off-side rule.|$|E
5|$|Users {{can also}} search for <b>keywords</b> in {{specific}} tabs, close all tabs {{with a single}} click, and reopen recently closed tabs by long-pressing on the plus icon. Users can also search for items in the Bookmarks and Reading List.|$|E
5|$|Python is {{intended}} to be a highly readable language. It is designed to have an uncluttered visual layout, often using English <b>keywords</b> where other languages use punctuation. Python does not use curly brackets to delimit blocks, and semicolons after statements are optional, in contrast to many other programming languages. Further, Python has fewer syntactic exceptions and special cases than C or Pascal.|$|E
5000|$|Provider Plug-in Framework. System {{that allows}} {{researchers}} to incorporate new algorithms or data mining models within the Service Container. Each provider brings a specific <b>keyword</b> {{technology to the}} KSP architecture—for instance, <b>keyword</b> association, <b>keyword</b> extraction, or <b>keyword</b> classification.|$|R
50|$|The {{best ways}} to attack a <b>keyword</b> cipher without knowing the <b>keyword</b> are through known-plaintext attack, {{frequency}} analysis and discovery of the <b>keyword</b> (often a cryptanalyst will combine all three techniques). <b>Keyword</b> discovery allows immediate decryption since the table can be made immediately.|$|R
40|$|In this chapter, we {{survey methods}} that perform <b>keyword</b> search on graph data. <b>Keyword</b> search {{provides}} {{a simple but}} user-friendly interface to retrieve information from complicated data structures. Since many real life datasets are represented by trees and graphs, <b>keyword</b> search has become an attractive mechanism for data {{of a variety of}} types. In this survey, we discuss methods of <b>keyword</b> search on schema graphs, which are abstract representation for XML data and relational data, and methods of <b>keyword</b> search on schema-free graphs. In our discussion, we focus on three major challenges of <b>keyword</b> search on graphs. First, what is the semantics of <b>keyword</b> search on graphs, or, what qualifies as an answer to a <b>keyword</b> search; second, what constitutes a good answer, or, how to rank the answers; third, how to perform <b>keyword</b> search efficiently. We also discuss some unresolved challenges and propose some new research directions on this topic. ...|$|R
5|$|Python is {{a widely}} used {{high-level}} programming language for general-purpose programming, created by Guido van Rossum and first released in 1991. An interpreted language, Python has a design philosophy that emphasizes code readability (notably using whitespace indentation to delimit code blocks rather than curly brackets or <b>keywords),</b> and a syntax that allows programmers to express concepts in fewer lines of code than might be used in languages such as C++ or Java. The language provides constructs intended to enable writing clear programs on both a small and large scale.|$|E
5|$|The EMBL Nucleotide Sequence Database uses a {{flat file}} {{plaintext}} format to represent and store data which is typically {{referred to as}} EMBL-Bank format. EMBL-Bank format uses a different syntax to the records in DDBJ and GenBank, though each format uses certain standardised nomenclature, such as taxonomies {{as defined by the}} NCBI Taxon database. Each line of an EMBL-format file beings with a two-letter code, such as AC to label the accession number and KW for a list of <b>keywords</b> relevant to the record; each record ends with //.|$|E
5|$|Watson's basic working {{principle}} is to parse <b>keywords</b> in a clue while searching for related terms as responses. This gives Watson some {{advantages and disadvantages}} compared with human Jeopardy! players. Watson has deficiencies in understanding the contexts of the clues. As a result, human players usually generate responses faster than Watson, especially to short clues. Watson's programming prevents it from using the popular tactic of buzzing before it is sure of its response. Watson has consistently better reaction time on the buzzer once it has generated a response, and is immune to human players' psychological tactics, such as jumping between categories on every clue.|$|E
5000|$|The Bing Ads <b>Keyword</b> Planner {{provides}} <b>keyword</b> and ad group {{suggestions and}} shows average monthly search volume trends, relative competition and suggested bids. Features of Bing <b>Keyword</b> Planner: ...|$|R
40|$|Oblivious <b>keyword</b> search (OKS) {{allows a}} user to search and {{retrieve}} the data {{associated with a}} chosen <b>keyword</b> in an oblivious way. The database supplier issues a trapdoor (used for searching) of a specific <b>keyword</b> chosen by the user while learns nothing about this <b>keyword.</b> In this paper, we propose a new cryptographic primitive called oblivious <b>keyword</b> search with authorization (OKSA). In OKSA, the supplier is able to verify the to-be-search <b>keyword</b> belonging to the authorized <b>keyword</b> set for a user before running the OKS protocol. The proposed OKSA augments the traditional OKS by providing assurance of <b>keyword</b> authorization besides oblivious search. Then we present an OKSA protocol and formally prove its security. The proposed protocol features with one-round (two-pass) interaction and constant size communication cost between the supplier and the user in the transfer phase. Precisely, the communication cost nseeds only four group elements (three group elements for <b>keyword</b> token and proof, and one group element for assigned trapdoor), independent {{of the size of}} authorized <b>keyword</b> set...|$|R
40|$|Abstract. <b>Keyword</b> search methods {{based on}} subword lattice can exclude {{the problem of}} Out of Vocabulary Words and improve quality of <b>keyword</b> search. This paper {{describes}} the <b>keyword</b> search method based on subword lattice and a-posteriori probability. In the paper it is proposed to use wavelet-based speech feature vector {{in order to improve}} the noise robustness of <b>keyword</b> search. The experiments show good <b>keyword</b> search results in noise conditions for the developed algorithm...|$|R
25|$|Firstly, enter {{what you}} want to search into the blank on the homepages. Searching methods include <b>Keywords,</b> Symbol only, Symbol/Alias/Identifier and Symbol/Alias. The default search option is searching by <b>keywords.</b> When you search by <b>keywords,</b> MicroCard and MiniCard are shown. However, when you search by Symbol only, you’ll go {{directly}} to GeneCard.|$|E
25|$|A {{footnotes}} contain See Also <b>keywords.</b>|$|E
25|$|K {{footnotes}} contain <b>keywords</b> for the index.|$|E
30|$|Given a <b>keyword,</b> {{retrieve}} all MBPs {{that contain}} the <b>keyword.</b>|$|R
5000|$|Fortran 77: final <b>keyword</b> is [...] + initial <b>keyword</b> e.g., .....|$|R
5000|$|Ada: final <b>keyword</b> is [...] + space + initial <b>keyword</b> e.g., .....|$|R
25|$|Filename {{searches}} {{are implemented}} using <b>keywords.</b> The filename {{is divided into}} its constituent words. Each of these <b>keywords</b> is hashed and stored in the network, together with the corresponding filename and file hash. A search involves choosing one of the <b>keywords,</b> contacting the node with an ID closest to that keyword hash, and retrieving the list of filenames that contain the keyword. Since every filename in the list has its hash attached, the chosen file can then be obtained in the normal way.|$|E
25|$|In Common Lisp, the {{ampersand}} is the prefix for lambda list <b>keywords.</b>|$|E
25|$|The program {{works by}} {{preventing}} the user from accessing sites with certain <b>keywords</b> which Scientology has {{identified as being}} objectionable material for viewing by their members. This use of <b>keywords</b> functions {{as a way to}} prevent members from learning of guarded Scientology doctrine, such as Xenu, OT III, and other material relating to Space opera in Scientology scripture. Other <b>keywords</b> on notable topics which are blocked by the program include the names of several notable critics of Scientology, including Robert Vaughn Young and Keith Henson, as well as several hundred other frequent participants in the alt.religion.scientology newsgroup, together with terms like Suppressive Person, and Lisa McPherson.|$|E
25|$|As {{a general}} rule, GNU Octave recognizes as {{termination}} {{of a given}} block either the <b>keyword</b> 'end' (which {{is compatible with the}} Matlab language) or a more specific <b>keyword</b> 'end_block. As a consequence, an 'unwind_protect' block can be terminated either with the <b>keyword</b> 'end_unwind_protect' as in the example, or with the more portable <b>keyword</b> 'end'.|$|R
3000|$|The LGRs {{which will}} be {{discussed}} in this section are regular Cartesian. The appropriate <b>keyword</b> is then CARFIN (Cartesian refinement). Basically a box in the grid is replaced by another box with more cells. The <b>keyword</b> is followed by one line of data, terminated by a slash. Note that only one LGR can be defined in one CARFIN <b>keyword.</b> The <b>keyword</b> must be repeated for each new LGR. <b>Keyword</b> ENDFIN terminates current CARFIN. The syntax is then, [...]...|$|R
40|$|<b>Keyword</b> {{spotting}} is a detection task consisting in {{discovering the}} presence of specific spoken words in unconstrained speech. The majority of <b>keyword</b> spotting systems are based on generative hidden Markov models and lack discriminative capabilities. However, discriminative <b>keyword</b> spotting systems {{are based on the}} estimation of a posteriori probabilities at the frame-level, hence they make use of information from short time spans. This paper presents a discriminative <b>keyword</b> spotting system based on recurrent neural networks only, that uses information from long time spans to estimate <b>keyword</b> probabilities. In a <b>keyword</b> spotting task in a large database of unconstrained speech where an HMM-based speech recogniser achieves a word accuracy of only 65 %, the system achieved a <b>keyword</b> spotting accuracy of 84. 5 %...|$|R
25|$|This field {{specifies}} {{a string}} of search <b>keywords</b> to search for in P2P networks.|$|E
25|$|In {{addition}} to these, most implementations add their own <b>keywords</b> and symbols for system-specific enhancements or extensions.|$|E
25|$|Product vendors who use a weblog-like {{format to}} post product ads, {{meaningless}} batches of Google <b>keywords,</b> etc.|$|E
40|$|This study {{intended}} {{to investigate the}} comparative effectiveness of <b>keyword</b> and context method on immediate and delayed vocabulary retention of EFL learners. It also compared the rate of forgetting in the <b>keyword</b> and context groups. With a quasi experimental design, 40 learners from two intact classes in a language teaching institute in Khorramabad, Iran, {{were randomly assigned to}} the <b>keyword</b> and context group. The <b>keyword</b> group received the <b>keyword</b> strategy training, while the context group focused on learning vocabulary in their real context. The result indicated that learners in the <b>keyword</b> group recalled more vocabulary immediately after training and one week later. The results also indicated the rate of forgetting is more in the context group than in the <b>keyword</b> group...|$|R
40|$|Currently <b>keyword</b> {{search is}} a {{prominent}} data retrieval method for the Web because the simple and efficient {{nature of the}} <b>keyword</b> processing allows it to process {{a large amount of}} information with fast response. However, <b>keyword</b> search approaches do not formally capture the clear meaning of a <b>keyword</b> query and fail to address the semantic relationships betwee...|$|R
50|$|Moz has {{a series}} of tools in its SEO Toolbox, {{including}} Moz <b>Keyword</b> Explorer, a leading <b>keyword</b> research tool that provides <b>keyword</b> suggestions, SEO competition, opportunity, SERP features, saved lists, and accurate search volume data.|$|R
