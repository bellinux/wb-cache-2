167|619|Public
25|$|The Bishop of Almeria {{was murdered}} {{while working on}} a history of Toledo. His card <b>index</b> <b>file</b> was destroyed.|$|E
25|$|In 1994, ALIWEB, {{also used}} an <b>index</b> <b>file</b> {{to provide the}} type of {{information}} commonly found in meta keywords attributes.|$|E
25|$|In 1939, {{he became}} privatdozent for his seminal work and {{habilitation}} thesis Naujausių proistorinių tyrinėjimų duomenys (Findings of the Most Recent Archaeological Explorations). This work became a textbook on prehistory of Lithuania. It was superseded only by Lietuvos archeologijos bruožai published in 1961. Puzinas aggregated, summarized, and interpreted data from different excavations in 1928–38 {{and created a}} chronological outline of the prehistory of Lithuania. His periodization of the three ages in Lithuania is still used by modern scholars. The work featured {{a large number of}} new scientific terms in Lithuanian language that Puzinas created in collaboration with linguist Antanas Salys. To that end Puzinas created a card <b>index</b> <b>file</b> with archaeological terms in various languages (Lithuanian, Polish, German, Russian). The file, about 9,000 or 10,000 cards in total, is preserved by Martynas Mažvydas National Library of Lithuania. Among the basic terms introduced by Puzinas are radinys (find) and žalvario amžius (Bronze Age). Possibly it was an embryo of a multilingual archaeological dictionary.|$|E
50|$|Support for <b>indexed</b> <b>files</b> {{is built}} into COBOL and PL/I. Other {{languages}} with more limited I/O facilities such as C support <b>indexed</b> <b>files</b> through add-on packages in a runtime library such as C-ISAM.|$|R
5000|$|Handling {{of static}} <b>files,</b> <b>index</b> <b>files,</b> auto-indexing and content {{negotiation}} ...|$|R
5000|$|Tag <b>index</b> <b>files</b> are {{supported}} by many source code editors, including: ...|$|R
25|$|On 13 September 1984 Chikatilo was {{observed}} by an undercover detective attempting to lure young women {{away from a}} Rostov bus station. He was arrested and held. A search of his belongings revealed a knife and rope. He was also discovered to be under investigation for minor theft {{at one of his}} former employers, which gave the investigators the legal right to hold him for a prolonged period of time. Chikatilo's dubious background was uncovered, and his physical description matched the description of the man seen with Dmitry Ptashnikov in March prior to the boy's murder. A sample of Chikatilo's blood was taken; the results of which revealed his blood group to be type A, whereas semen samples found upon a total of six victims murdered by the unknown killer throughout {{the spring and summer of}} 1984 had been classified by medical examiners to be type AB. Chikatilo's name was added to the card <b>index</b> <b>file</b> used by investigators; however, the results of his blood type analysis largely discounted him as being the unknown killer.|$|E
25|$|Periodic {{explicit}} object packing: Git stores each {{newly created}} object {{as a separate}} file. Although individually compressed, this takes {{a great deal of}} space and is inefficient. This is solved by the use of packs that store a large number of objects in one file (or network byte stream) called packfile, delta-compressed among themselves. Packs are compressed using the heuristic that files with the same name are probably similar, but do not depend on it for correctness. A corresponding <b>index</b> <b>file</b> is created for each packfile, telling the offset of each object in the packfile. Newly created objects (newly added history) are still stored singly, and periodic repacking is needed to maintain space efficiency. The process of packing the repository can be very computationally costly. By allowing objects to exist in the repository in a loose, but quickly generated format, Git allows the costly pack operation to be deferred until later, when time matters less, e.g., the end of a work day. Git does periodic repacking automatically but manual repacking is also possible with the git gc command. For data integrity, both packfile and its index have SHA-1 checksum inside, and also the file name of packfile contains a SHA-1 checksum. To check integrity, run the git fsck command.|$|E
2500|$|A WinHelp file has a [...] ".hlp" [...] suffix. It can be {{accompanied}} by an optional table of contents (.cnt) file if the help developer created one. When Windows opens a WinHelp file, it creates a [...]gid file in the same directory or in [...] "%LOCALAPPDATA%\Help", containing information about the [...]hlp file such as the window size and location. If the user clicks the [...] "Find" [...] tab and enables keyword indexing, Windows creates an <b>index</b> <b>file</b> with a [...]fts (full text search) extension. Annotations and bookmarks for each Windows help file have the extension [...] ".ann" [...] and [...] ".bmk".|$|E
40|$|A {{parallel}} database {{is developed}} {{to improve the}} DR-LINK information retrieval system. DR-LINK is a system which finds the documents most relevant to a user's natural language queries. Relevant documents are found by analyzing <b>index</b> <b>files.</b> <b>Index</b> <b>files</b> contain weighted lists of key words and phrases and other characteristics of the document. The distinguishing information of the queries are matched with the <b>index</b> <b>files</b> {{in order to find}} the most relevant documents to the user. The work requires transforming the current vector-implementation of <b>index</b> <b>files</b> into a parallel database, an innovation which should have several positive effects on the system. Results include a test on performance and a test to find whether this new implementation is a better way to add new documents to the system. Future work will include testing on whether the database provides a way to detect new information about linguistic patterns...|$|R
50|$|In recent systems {{relational}} databases {{are often}} used in place of <b>indexed</b> <b>files.</b>|$|R
5000|$|The COBOL {{language}} supports <b>indexed</b> <b>files</b> {{with the}} following command in the [...] section ...|$|R
50|$|Creates an <b>index</b> <b>file,</b> sorted.bam.bai for the sorted.bam file.|$|E
5000|$|The search option {{allows a}} simple {{search of a}} central <b>INDEX</b> <b>file.</b> This <b>INDEX</b> <b>file</b> is one-line-per-resource, and is a flat file that the Hytelnet client {{searches}} directly. After entering a term, the client returns a new menu with the list of selectable items, for example this query [...] "library": ...|$|E
50|$|Creates an <b>index</b> <b>file</b> for the macOS {{built-in}} Help Viewer.|$|E
5000|$|KEYSORT, {{to reorganize}} an <b>indexed</b> <b>file,</b> {{rebuilding}} the key index area for greater efficiency.|$|R
40|$|Stackable file {{systems can}} provide {{extensible}} file system functionality with minimal performance overhead and development cost. However, previous approaches {{are limited in}} the functionality they provide. In particular, they do not support size-changing algorithms, which are important and useful for many applications, such as compression and security. We propose fast <b>index</b> <b>files,</b> a technique for efficient support of size-changing algorithms in stackable <b>file</b> systems. Fast <b>index</b> <b>files</b> provide a page mapping between file system layers {{in a way that}} can be used with any size-changing algorithm. <b>Index</b> <b>files</b> are designed to be recoverable if lost and add less than 0. 1 % disk space overhead. We have implemented fast indexing using portable stackable templates, and we have used this system to build several example file systems with size-changing algorithms. We demonstrate that fast <b>index</b> <b>files</b> have very low overhead for typical workloads, only 2. 3 % over other stacked file systems. Our system ca [...] ...|$|R
5000|$|IV A 6 (<b>Index,</b> <b>files,</b> {{protective}} custody): SS-Sturmbannführer, {{government and}} police superintendent Dr. Emil Berndorff ...|$|R
50|$|Par2 files {{generally}} {{use this}} naming/extension system: filename.vol000+01.PAR2, filename.vol001+02.PAR2, filename.vol003+04.PAR2, filename.vol007+06.PAR2, etc. The +01, +02, etc. in the filename indicates how many blocks it contains, and the vol000, vol001, vol003 etc. indicates {{the number of}} the first recovery block within the PAR2 file. If an <b>index</b> <b>file</b> of a download states that 4 blocks are missing, the easiest way to repair the files would be by downloading filename.vol003+04.PAR2. However, due to the redundancy, filename.vol007+06.PAR2 is also acceptable. There is also an <b>index</b> <b>file</b> filename.PAR2, it is identical in function to the small <b>index</b> <b>file</b> used in PAR1.|$|E
50|$|The <b>index</b> <b>file</b> {{contains}} {{the most basic}} information about a Files-11 volume set.|$|E
5000|$|...IND (Optional <b>index</b> <b>file</b> for tabular data. This {{is present}} if any columns are indexed).|$|E
50|$|Memopal has a cloud search {{functionality}} {{similar to}} Google desktop to <b>index</b> <b>files</b> with a relevance metric {{based on how}} the user interacts with <b>files.</b> It currently <b>indexes</b> only <b>file</b> metadata like path, computer and modification time. Content indexing is an optional feature.|$|R
5000|$|... old format <b>index</b> <b>files</b> {{can be used}} but {{updating}} them via the Index Wizard {{is recommended}} to add new capabilities ...|$|R
50|$|An <b>indexed</b> <b>file</b> is a {{computer}} <b>file</b> with an <b>index</b> that allows easy random access to any record given its file key.|$|R
5000|$|... 1The NAICS <b>Index</b> <b>File</b> lists 19745 rubrics {{beyond the}} 6 digits {{which are not}} {{assigned}} codes.|$|E
50|$|Sitemap files have a {{limit of}} 50,000 URLs and 50MiB per sitemap. Sitemaps can be {{compressed}} using gzip, reducing bandwidth consumption. Multiple sitemap files are supported, with a Sitemap <b>index</b> <b>file</b> serving as an entry point. Sitemap index files may not list more than 50,000 Sitemaps and must be no larger than 50MiB (52,428,800 bytes) and can be compressed. You can {{have more than one}} Sitemap <b>index</b> <b>file.</b>|$|E
5000|$|The Spatial Data File (SDF) is a single-user {{geodatabase}} {{file format}} developed by Autodesk. The file format is the native spatial data storage format for Autodesk GIS programs MapGuide and AutoCAD Map 3D. [...] SDF format version SDF3 (based on SQLite3) uses a single file. Prior {{versions of the}} format required a spatial <b>index</b> <b>file</b> (SIF), with an optional key <b>index</b> <b>file</b> (KIF) to speed access to the file.|$|E
5000|$|The {{standard}} {{does not}} specify database behavior in several important areas (e.g. <b>indexes,</b> <b>file</b> storage...), leaving implementations {{to decide how}} to behave.|$|R
50|$|CHAIN {{retrieves}} {{the record}} in the <b>indexed</b> <b>file</b> named in Factor 2 that matches the exact key specified by the value in Factor 1.|$|R
5000|$|Alternate <b>index</b> <b>files,</b> {{in which}} a {{separate}} index {{of the values of}} key fields is based on an existing sequential, direct, or keyed file.|$|R
5000|$|The Bishop of Almeria {{was murdered}} {{while working on}} a history of Toledo. His card <b>index</b> <b>file</b> was destroyed.|$|E
50|$|In 1994, ALIWEB, {{also used}} an <b>index</b> <b>file</b> {{to provide the}} type of {{information}} commonly found in meta keywords attributes.|$|E
5000|$|BAM files {{can only}} be {{uploaded}} using the URL-based approach. The <b>index</b> <b>file</b> (.bam.bai) should {{be located in the}} same webserver.|$|E
50|$|Files on the S/36 may be Sequential (S), Direct (D), or Indexed (I). An <b>indexed</b> <b>file</b> {{can have}} {{multiple}} alternate indexes (X), and in fact, a sequential file may have alternate indexes placed on it {{so there is}} no primary <b>index.</b> An <b>indexed</b> <b>file</b> contains a key, which must be contiguous and may be up to 60 characters long; however, alternate indexes may have three-part keys which are not contiguous with one another. Duplicate keys in indexed or alternate <b>index</b> <b>files</b> may be allowed or disallowed. A file with direct organization is built with all records added and cannot auto-extend. A file with sequential or indexed organization is built with no records added. An alternate index always has as many records as its parent, as opposed to a System/38-style logical file which is built with conditions to filter records from the parent.|$|R
50|$|From KDE Applications 4.13 onwards, the 'Baloo <b>file</b> <b>indexing</b> and <b>file</b> search framework' replaces NEPOMUK.|$|R
25|$|The file hash {{is usually}} {{obtained}} from a specially formed Internet magnet link found elsewhere, or included within an <b>indexing</b> <b>file</b> obtained from other sources.|$|R
