15|10000|Public
25|$|This is a 3-byte field {{indicating}} {{the length of}} the handshake data, not <b>including</b> <b>the</b> <b>header.</b>|$|E
50|$|Length.16 bits.Size of {{the packet}} <b>including</b> <b>the</b> <b>header.</b>|$|E
5000|$|Length: Total {{length of}} the message in octets, <b>including</b> <b>the</b> <b>header.</b>|$|E
50|$|The flex++ {{generated}} C++ scanner <b>includes</b> <b>the</b> <b>header</b> file , which {{defines the}} interfaces {{of the two}} C++ generated classes.|$|R
50|$|Deep Packet Inspection is {{currently}} the predominant inspection tool used to analyze data packets passing through <b>the</b> network, <b>including</b> <b>the</b> <b>headers</b> and <b>the</b> data protocol structures. These technologies scan packet streams and look for offending patterns.|$|R
50|$|Everything in the HTTPS {{message is}} encrypted, <b>including</b> <b>the</b> <b>headers,</b> and <b>the</b> request/response load. With the {{exception}} of the possible CCA cryptographic attack described in the limitations section below, the attacker can only know that a connection is taking place between the two parties and their domain names and IP addresses.|$|R
5000|$|This is a 3-byte field {{indicating}} {{the length of}} the handshake data, not <b>including</b> <b>the</b> <b>header.</b>|$|E
50|$|The Message Length field {{indicates}} {{the length of}} the Diameter message <b>including</b> <b>the</b> <b>header</b> fields and the padded AVPs.|$|E
50|$|The whole UEF file, <b>including</b> <b>the</b> <b>header,</b> may {{optionally}} be compressed in gzip format. By {{examining the}} start of the file for a gzip or UEF header, a decompression library can be invoked as appropriate.|$|E
5000|$|Key Payload Length: Contains {{the size}} of <b>the</b> payload, not <b>including</b> <b>the</b> GRE <b>header.</b>|$|R
5000|$|If so, TCP may hand to IP, {{segments}} (<b>including</b> <b>the</b> TCP <b>header)</b> up to MSDS + TCPHdrLen.|$|R
50|$|The natural {{interface}} between source files in C/C++ are header files. Each time a header file is modified, all source files that <b>include</b> <b>the</b> <b>header</b> file should recompile their code. Header files are slow {{because they are}} textual and context-dependent {{as a consequence of}} the preprocessor. C only has limited amounts of information in <b>header</b> files, <b>the</b> most important being struct declarations and function prototypes. C++ stores its classes in header files and they are not only exposing their public variables and public functions (like C with its structs and function prototypes) but also their private functions. This forces unnecessary recompiles of all source files that <b>include</b> <b>the</b> <b>header</b> file, each time when changing these private functions. This problem is magnified where the classes are written as templates, forcing all of their code into <b>the</b> slow <b>header</b> files, which is the case with the whole C++ standard library. Large C++ projects can therefore be relatively slow to compile. The problem is largely solved by precompiled header in modern compilers.|$|R
5000|$|After the header, {{the file}} is split into packets called [...] "FLV tags", which have 15-byte packet headers. The first four bytes denote {{the size of}} the {{previous}} packet/tag (<b>including</b> <b>the</b> <b>header),</b> and aid in seeking backward.|$|E
50|$|Extract all the reads aligned to {{the range}} specified, which {{are those that are}} aligned to the {{reference}} element named chr1 and cover its 10th, 11th, 12th or 13th base. The results is saved to a BAM file <b>including</b> <b>the</b> <b>header.</b> An index of the input file is required for extracting reads according to their mapping position in the reference genome, as created by samtools index.|$|E
5000|$|Accordingly, every {{fragment}} {{except the}} last must contain {{a multiple of}} 8 bytes of data. It is obvious that Fragment Offset can hold 8192 (2^13) units but the datagram can't have 8192 * 8 = 65536 bytes of data because [...] "Total Length" [...] field of IP header records the total size <b>including</b> <b>the</b> <b>header</b> and data. An IP header is at least 20 bytes long, so the maximum value for [...] "Fragment Offset" [...] is restricted to 8189, which leaves room for 3 bytes in the last fragment.|$|E
5000|$|Length (12 bits) [...] - [...] {{contains}} {{the length of}} the entire SSTP packet, <b>including</b> <b>the</b> SSTP <b>header.</b>|$|R
50|$|Also <b>included</b> in <b>the</b> <b>header</b> is <b>the</b> {{number of}} DIMMs per memory channel that the profile is {{designed}} to support; including more DIMMs may not work well.|$|R
5000|$|Length: A 16-bit {{field that}} states {{the length of}} the packet being {{encapsulated}} by GTP' (not <b>including</b> <b>the</b> GTP' <b>header</b> itself).|$|R
5000|$|Standard C (since C99) {{provides}} a boolean type, called [...] By <b>including</b> <b>the</b> <b>header</b> [...] {{one can use}} the more intuitive name [...] and the constants [...] and [...] The language guarantees that any two true values will compare equal (which was impossible to achieve before {{the introduction of the}} type). Boolean values still behave as integers, can be stored in integer variables, and used anywhere integers would be valid, including in indexing, arithmetic, parsing, and formatting. This approach (Boolean values are just integers) has been retained in all later versions of C.|$|E
50|$|TIFF is a flexible, {{adaptable}} {{file format}} for handling images and data {{within a single}} file, by <b>including</b> <b>the</b> <b>header</b> tags (size, definition, image-data arrangement, applied image compression) defining the image's geometry. A TIFF file, for example, can be a container holding JPEG (lossy) and PackBits (lossless) compressed images. A TIFF file also can include a vector-based clipping path (outlines, croppings, image frames). The ability to store image data in a lossless format makes a TIFF file a useful image archive, because, unlike standard JPEG files, a TIFF file using lossless compression (or none) may be edited and re-saved without losing image quality. This {{is not the case}} when using the TIFF as a container holding compressed JPEG. Other TIFF options are layers and pages.|$|E
40|$|Potassium ion {{conducting}} glasses, {{chemically resistant}} to potassium, potassium sulfide and sulfur, {{were made and}} their possible utility as the membrane material for a potassium/sulfur battery was evaluated. At least one satisfactory candidate was found. It possesses an electrical resistance which makes it usable as a membrane {{in the form of}} a fine hollow fiber. It's chemical and electrochemical resistances are excellent. The other aspects of the possible potassium sulfur battery utilizing such fine hollow fibers, <b>including</b> <b>the</b> <b>header</b> (or tube sheet) and a cathode current collector were studied. Several cathode materials were found to be satisfactory. None of the tube sheet materials studied possessed all the desired properties. Multi-fiber cells had very limited life-time due to physical failure of fibers at the fiber/tube sheet junctions...|$|E
5000|$|If not, TCP may hand to IP, {{segments}} (<b>including</b> <b>the</b> TCP <b>header)</b> up to <b>the</b> {{lesser of}} (MSDS + TCPHdrLen) and MDDS.|$|R
5000|$|The C++ Standard Library <b>includes</b> in <b>the</b> <b>header</b> file [...] many {{different}} predefined function objects, including arithmetic operations ( [...] , , , , , and [...] ), comparisons ( [...] , , , , , and [...] ), and logical operations ( [...] , , and [...] ).|$|R
50|$|A packet is a {{block of}} data with length that can vary between {{successive}} packets, ranging from 7to 65,542 bytes, <b>including</b> <b>the</b> packet <b>header.</b>|$|R
30|$|From Table  1, it {{is evident}} that “ 3 -d Pythocrypt” fares well against {{standard}} algorithms with 2 byte block size. However, it can outperform most algorithms as the cipher text will be too large in size and any sphere has infinite surface points with increase in block size. Further it also has infinite divergence for backtracking. A new radical approach of cryptanalysis titled “Multi agent pattern recognition” (William et al. 2013) is able to obtain parts of possible plain text after multiple iterations on a single file. This approach uses small pieces of codes called agents to try and obtain similar patterns in a packet in transit. They work independent of the source and obtain repeated patterns in the files. Since “ 3 -d Pythocrypt” uses 16 bit blocks for this experiment, in English text, if there are 3 similar 2 letter blocks appearing consecutively, they would generate same cipher text. Once the source program obtains all the repeated patterns and their locations in the cipher text, it can then run a dictionary attack (William et al. 2013, Rabin, 1976) on the patterns to generate possible sets of plain text. However this works only on unformatted English text and since “ 3 -d Pythocrypt” encrypts the entire file <b>including</b> <b>the</b> <b>header</b> block, even this form of attack can only partially succeed after multiple iterations of dictionary attack. This is because each file has parts of its own data as the key similar to OTP (Highland 1992).|$|E
40|$|A Wireless Visual Sensor Network (WVSN) {{is formed}} by {{deploying}} many Visual Sensor Nodes (VSNs) in the field. After acquiring {{an image of}} the area of interest, the VSN performs local processing on it and transmits the result using an embedded wireless transceiver. Wireless data transmission consumes a great deal of energy, where energy consumption is mainly dependent on the amount of information being transmitted. The image captured by the VSN contains a huge amount of data. For certain applications, segmentation can be performed on the captured images. The amount of information in the segmented images can be reduced by applying efficient bi-level image compression methods. In this way, the communication energy consumption of each of the VSNs can be reduced. However, the data reduction capability of bi-level image compression standards is fixed and is limited by the used compression algorithm. For applications attributing few changes in adjacent frames, change coding can be applied for further data reduction. Detecting and compressing only the Regions of Interest (ROIs) in the change frame is another possibility for further data reduction. In a communication system, where both the sender and the receiver know the employed compression standard, there is a possibility for further data reduction by not <b>including</b> <b>the</b> <b>header</b> information in the compressed bit stream of the sender. This paper summarizes different information reduction techniques such as image coding, change coding and ROI coding. The main contribution is the investigation of the combined effect of all these coding methods and their application to a few representative real life applications. This paper is intended to be a resource for researchers interested in techniques for information reduction in energy constrained embedded applications...|$|E
5000|$|ISO C99 <b>{{includes}}</b> <b>the</b> [...] <b>header</b> {{file that}} includes a number of macros for use in platform-independent [...] coding. These need to not be inside double-quotes, e.g.|$|R
50|$|Some vendors <b>include</b> <b>the</b> <b>headers</b> in <b>the</b> size {{settings}} {{while others}} do not, that is either the maximum frame size (<b>including</b> frame <b>headers)</b> or <b>the</b> maximum transfer unit/MTU (excluding frame headers = maximum layer 3 packet size). Therefore, {{you might find}} that different values must be configured in equipment from different vendors to make the settings match. A mixture of devices configured for jumbo frames and devices not configured for jumbo frames on a network {{has the potential to}} cause network performance issues.|$|R
50|$|Every μC++ {{program should}} <b>include</b> <b>the</b> uC++.h <b>header</b> file before any other header, {{although}} this is not necessary in more recent versions. uC++ is now open source, available on GitHub.|$|R
30|$|Let {{the total}} {{bandwidth}} be 20 Mbps, downlink to uplink ratio is 1 : 1 and the frame duration be 5 ms. RTPS traffic arrival rate be 100 Kbps (<b>including</b> <b>the</b> <b>headers</b> like TCP, IP, MAC <b>headers)</b> and <b>the</b> maximum delay tolerable by RTPS traffic be 100 ms. Let nRTPS arrival rate be 80 kbps. Minimum reserve traffic rate for RTPS and nRTPS be 100 kbps. Each UlmapIE {{is composed of}} the fields: cid, start time, sub channel index, uiuc, duration and mid-amble repetition index. Hence the size of UlmapIE will be nine bytes.|$|R
5000|$|Page headers {{and page}} footers, the {{contents}} of which are usually uniform across content pages and thus automatically duplicated by layout software. The page number is usually <b>included</b> in <b>the</b> <b>header</b> or footer, and software automatically increments it for each page.|$|R
50|$|UniPro short-header packets use {{a single}} header byte for L3 information. It <b>includes</b> <b>the</b> 7-bit L3 {{destination}} address. The remaining bit indicates the short-header packet format. For short-header packets, the L3 source address is not <b>included</b> in <b>the</b> <b>header</b> {{because it is}} assumed that the two communicating devices have exchanged such information beforehand (connection-oriented communication).|$|R
40|$|Abstract: This {{standard}} {{provides a}} set of minimal specifications for eye-legible information to be <b>included</b> in <b>the</b> <b>header</b> area of microfiche. <b>The</b> <b>header</b> is that area reserved for identification of {{the information on the}} microfiche. These minimal specifications <b>include</b> <b>the</b> following bibliographic elements: location, order of elements in each location, size of type, and contrast between characters and background. The standard recommends additional categories of informa-tion when they apply and space permits...|$|R
30|$|In our protocol, each station selects {{the flow}} with the maximum backlog to serve. To {{calculate}} the backlog, each station maintains a matrix that <b>includes</b> <b>the</b> approximate queue length of its neighbors. When the station receives a packet or an acknowledgement message, the corresponding queue length {{value in the}} matrix is synchronized to <b>the</b> value <b>included</b> in <b>the</b> <b>header.</b>|$|R
3000|$|... 4 Note {{that the}} {{protocol}} requires 1 extra byte for each encoded packet to be <b>included</b> in <b>the</b> packet <b>header.</b>|$|R
50|$|As {{defined in}} RFC 791, the maximum packet length of an IPv4 packet <b>including</b> <b>the</b> IP <b>header</b> is 65,535 (216 &minus; 1) bytes, a {{limitation}} {{presented by the}} use of a 16-bit wide IP header field that describes the total packet length.|$|R
