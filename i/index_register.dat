106|321|Public
25|$|Initially {{registers}} {{were limited}} to an accumulator and a multiplier register. In 1953, David Wheeler, returning from a stay at the University of Illinois, designed an <b>index</b> <b>register</b> as an extension to the original EDSAC hardware.|$|E
25|$|The early programmers had to {{make use}} of {{techniques}} frowned upon todayâ€” especially altering the code. As there was no <b>index</b> <b>register</b> until much later, the only way of accessing an array was to alter which memory location a particular instruction was referencing.|$|E
25|$|The 'Baby' had {{provided}} a feasible design and development began on a more, usable and practical {{computer in the}} Manchester Mark 1. Joined by Alan Turing, the university continued development and by October 1949, the Mark 1 was finished. The computer ran successfully, error-free, on the 16 and 17 June 1949. Thirty-five patents resulted from the computer and the successful implementation of an <b>index</b> <b>register.</b>|$|E
5000|$|An {{upgraded}} version, the IBM 7094, {{was first}} installed in September 1962. It has seven <b>index</b> <b>registers,</b> instead of {{three on the}} earlier machines. The 7094 console has a distinctive box on top that displays lights for the four new <b>index</b> <b>registers.</b> photos The 7094 introduced double-precision floating point and additional instructions, but is largely backward compatible with the 7090. Minor changes in instruction formats, particularly the way the additional <b>index</b> <b>registers</b> are addressed, sometimes cause problems. On the earlier models, when more than one bit {{is set in the}} tag field, the contents of the two or three selected <b>index</b> <b>registers</b> are ORed, not added together, before the decrement takes place. On the 7094, if the three-bit tag field is not zero, it selects just one of seven <b>index</b> <b>registers,</b> however the [...] "or" [...] behavior remains available in a [...] "multiple tag" [...] compatibility mode.|$|R
5000|$|The <b>Index</b> <b>registers</b> operate using two's {{complement}} {{format and}} when used to modify an instruction address are subtracted from the {{address in the}} instruction. On machines with three <b>index</b> <b>registers,</b> if the tag has two or three bits set (i.e. selected multiple registers) then their values are ORed together before being subtracted. The IBM 7094, with seven <b>index</b> <b>registers</b> has a [...] "compatibility" [...] mode to permit programs from earlier machines that used this trick {{to continue to be}} used.|$|R
50|$|Seven 15-bit <b>index</b> <b>registers</b> (B1 - B7).|$|R
2500|$|Register {{indirect}} with <b>index</b> <b>register</b> & 8-bit signed offset e.g. 8(A0, D0) or 8(A0, A1) ...|$|E
5000|$|PIR (sr. Punjenje Indeksnog Registra, en. Load <b>Index</b> <b>Register)</b> Loads {{the value}} into the <b>index</b> <b>register</b> ...|$|E
5000|$|Clear_accumulator Load_index 400,index2 //load 4*array size into <b>index</b> <b>register</b> 2 (index2) loop_start : Add_word_to_accumulator array_start,index2 //Add to AC {{the word}} at the address (array_start + index2) Branch_and_decrement_if_index_not_zero loop_start,4,index2 //loop decrementing by 4 until <b>index</b> <b>register</b> is zero ...|$|E
50|$|Index {{addressing}} {{was only}} possible for <b>index</b> <b>registers.</b>|$|R
50|$|The {{accumulator}} and <b>index</b> <b>registers</b> {{operate in}} sign-and-magnitude format.|$|R
5000|$|Seven B-registers (Address modifying <b>index</b> <b>registers)</b> 15 bits each ...|$|R
5000|$|The {{contents}} of an <b>index</b> <b>register</b> {{is added to}} (in some cases subtracted from) an immediate address (one {{that is part of}} the instruction itself) to form the [...] "effective" [...] address of the actual data (operand). Special instructions are typically provided to test the <b>index</b> <b>register</b> and, if the test fails, increments the <b>index</b> <b>register</b> by an immediate constant and branches, typically to the start of the loop. Some instruction sets allow more than one <b>index</b> <b>register</b> to be used; in that case additional instruction fields specify which index registers to use. While normally processors that allow an instruction to specify multiple index registers add the contents together, IBM had a line of computers in which the contents were or'd together.|$|E
5000|$|Any GPR {{can be used}} as a base {{register}}, and any GPR {{other than}} ESP {{can be used as}} an <b>index</b> <b>register,</b> in a memory reference. The <b>index</b> <b>register</b> value can be multiplied by 1, 2, 4, or 8 before being added to the base register value and displacement.|$|E
5000|$|Using the opcode 29 as an illustration, the {{assembler}} code (AD X2,X1,offset) {{causes the}} contents of the memory location 'offset(X1)' to be added to register X2. Thus, register X1 is being used as the <b>index</b> <b>register,</b> and the offset, v, is specified in the second byte of the instruction. G is a dummy <b>index</b> <b>register</b> whose value is alway zero, and hence causes the offsets to be treated as absolute addresses in the zeroth (global) segment. (Incidentally, since X3 is the standard <b>index</b> <b>register,</b> the assembler program allows ',X3,address' to be abbreviated to ',address'.) ...|$|E
5000|$|New IX and IY <b>index</b> <b>registers</b> with {{instructions}} for direct base+offset addressing ...|$|R
5000|$|... rI1, rI2, rI3, rI4, rI5, rI6: <b>Index</b> <b>registers</b> (two bytes and a sign).|$|R
5000|$|... 16-bit ALU, {{accumulator}} (A), {{stack pointer}} (SP), and <b>index</b> <b>registers</b> (X and Y).|$|R
5000|$|X (1): Stores and calculates addresses; {{known as}} the <b>index</b> <b>register.</b>|$|E
5000|$|Rx(Rn), Rx(PC): Register or PC-relative indexed. The <b>index</b> <b>register</b> was not scaled.|$|E
50|$|The CPU had 15 index registers, a four-bit field (x) allowed {{selection}} of one <b>index</b> <b>register</b> {{as the base}} register. Operand addresses were determined by adding {{the contents of the}} selected base register and the 10-bit displacement field (m). Instructions that modified or stored index registers used a four-bit field (xo) to select that <b>index</b> <b>register.</b>|$|E
5000|$|IBM 653 Storage Unit (magnetic tape, disk, core storage, <b>index</b> <b>registers,</b> {{floating}} point arithmetic) ...|$|R
5000|$|Whitespace, if {{instruction}} specifies any <b>index</b> <b>registers,</b> {{addressing mode}} or a parameter and then comma-separated: ...|$|R
50|$|Most {{instructions}} are 16 bits, although some have a 16-bit extension. The standard computer has 16 general purpose 16-bit registers (0 through 15). Registers 1 through 15 {{can be used}} as <b>index</b> <b>registers.</b> Registers 12 through 15 {{can be used as}} base registers.|$|R
50|$|The {{system had}} two {{instruction}} formats: Standard, 16-bit instructions, and Extended, 32-bit instructions. Standard instructions had a 6-bit operation code, a two-bit <b>index</b> <b>register</b> identifier, and an 8-bit PC-relative address. Extended instructions had a 6-bit operation code, a two-bit <b>index</b> <b>register</b> identifier, an 8-bit operation code modifier, and a 16-bit memory address. Indirect addressing was allowed.|$|E
5000|$|... #Caption: <b>Index</b> <b>register</b> {{display on}} an IBM 7094 {{mainframe}} {{from the early}} 1960s.|$|E
5000|$|Three four-digit index {{registers}} at addresses 8005 to 8007; drum addresses were indexed {{by adding}} 2000, 4000 or 6000 to them, core addresses were indexed by adding 0200, 0400 or 0600 to them. If the system had the 4000 word drum then indexing was by adding 4000 {{to the first}} address for <b>index</b> <b>register</b> A, adding 4000 to the second address for <b>index</b> <b>register</b> B, and by adding 4000 {{to each of the}} two addresses for <b>index</b> <b>register</b> C (the indexing for 4000-word systems only applied to the first address). The 4000-word systems required transistorized read/write circuitry for the drum memory and were available before 1963. (18 extra operation codes) ...|$|E
50|$|There were no <b>index</b> <b>registers,</b> {{to access}} {{sequential}} {{data in a}} loop you used address modification in the instructions.|$|R
50|$|The machine had no programmer-accessible registers: all {{operations}} were memory to memory (including the <b>index</b> <b>registers</b> of the 1620 II).|$|R
5000|$|<b>Index</b> <b>registers,</b> {{commonly}} known as a B-line in early British computers, were first used in the British Manchester Mark 1 computer, in 1949. In general, <b>index</b> <b>registers</b> became a standard part of computers during the technology's second generation, roughly 1954 - 1966. Most machines in the IBM 700/7000 mainframe series had them, starting with the IBM 704 in 1954, though they were optional on some smaller machines such as the IBM 650 and IBM 1401.|$|R
5000|$|A 16-bit X <b>index</b> <b>register</b> {{was also}} {{provided}} for {{modification of the}} address of operands.|$|E
5000|$|Register {{indirect}} with <b>index</b> <b>register</b> & 8-bit signed offset e.g. 8(A0, D0) or 8(A0, A1) ...|$|E
5000|$|... 4 bits (20 to 23) {{specifying the}} <b>Index</b> <b>register</b> {{to use with}} indexed {{addressing}} modes ...|$|E
5000|$|Early [...] "small machines" [...] with <b>index</b> <b>registers</b> {{include the}} AN/USQ-17, around 1960, and the {{real-time}} computers from Scientific Data Systems.|$|R
5000|$|ICR - <b>Register</b> (<b>Index</b> Control <b>Register,</b> 3 bits), also {{designated}} the [...] "B-register" ...|$|R
50|$|In {{the middle}} 3 digits of 5-digit {{addresses}} (on the 1620 II) {{they were set}} to select one of 7 <b>index</b> <b>registers.</b>|$|R
