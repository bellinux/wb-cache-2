3|114|Public
40|$|This paper {{introduces}} a comprehensive architecture that supports adapting a client device's functionality to new services it discovers {{as it moves}} into a new environment. Users wish to invoke services [...] - such as controlling the lights, printing locally, gaining access to application-specific proxies, or reconfiguring the location of DNS servers [...] - from their mobile devices. But a priori standardization of interfaces and methods for service invocation is infeasible. Thus, {{the challenge is to}} develop a new service architecture that supports heterogeneity in client devices and controlled objects while making minimal assumptions about standard interfaces and control protocols. Four capabilities are needed for a comprehensive solution to this problem: 1) allowing device mobility, 2) augmenting controllable objects to makethem network-accessible, 3) building an underlying discovery architecture, and 4) mapping between <b>exported</b> <b>object</b> interfaces and client device controls. We motivate the n [...] ...|$|E
40|$|This paper {{introduces}} {{the notion of}} “universal interaction, ” allowing a device to adapt its functionality to exploit services it discovers as it moves into a new environment. Users wish to invoke services- such as controlling the lights, printing locally, or reconfiguring the location of DNS servers-from their mobile devices. But aptiotistandardizationof interfaces and methods for service invocation is infeasible. Thus, {{the challenge is to}} develop a new service architecture that supports heterogeneity in client devices and controlled objects, and which makes minimal assumptions about standard interfaces and control protocols. There are five components o a comprehensive solution to this problem: 1) allowing device mobility, 2) augmenting controllable objects to make them network-accessible, 3) building an underlying discovery architecture, 4) mapping between <b>exported</b> <b>object</b> inter-faces and client device controls, and 5) building complex behaviors from underlying composableobjects. We motivate the need for these components by using an ex-ample scenario to derive the design requirements for our mobile services architecture. We then present aprototype implementation of elements of the architecture and some example services using it, including controls to audio/visual equipment, extensible map-ping, server autoconfiguration, location tracking, and local printer access. ...|$|E
5000|$|Suppose module M1 <b>exports</b> <b>objects</b> a, b, c, and P by {{enumerating}} its identifiers in {{an explicit}} export list ...|$|R
5000|$|... 2. produces, stocks, imports or <b>exports</b> <b>objects</b> which depict or contain such symbols for {{distribution}} or use domestically or abroad, {{in the manner}} indicated in number 1, ...|$|R
5000|$|The UNIDROIT (International Institute for the Unification of Private Law) Convention on Stolen or Illicitly <b>Exported</b> Cultural <b>Objects</b> of 1995 {{called for}} the return of {{illegally}} <b>exported</b> cultural <b>objects</b> ...|$|R
50|$|CopyBot is a {{debugging}} tool used {{to access}} the virtual world Second Life. It is able to, among other things, <b>export</b> <b>objects</b> within Second Life to an XML file, which can then later be imported {{for use in the}} game. LSL scripts cannot be copied at this time.|$|R
5000|$|The D-Bus {{specification}} also defines several standard interfaces that objects {{may want}} to implement {{in addition to its}} own interfaces. Although technically optional, most D-Bus service developers choose to support them in their <b>exported</b> <b>objects</b> since they offer important additional features to D-Bus clients, such as introspection. These standard interfaces are: ...|$|R
5000|$|... #Article: UNIDROIT Convention on Stolen or Illegally <b>Exported</b> Cultural <b>Objects</b> ...|$|R
5000|$|UNIDROIT Convention on Stolen or Illegally <b>Exported</b> Cultural <b>Objects</b> (Rome, 1995) ...|$|R
5000|$|... #Subtitle level 2: UNIDROIT Convention on Stolen or Illegally <b>Exported</b> Cultural <b>Objects</b> (1996) ...|$|R
50|$|The Agent Extensibility Protocol or AgentX is a {{computer}} networking protocol that allows management of Simple Network Management Protocol objects defined by different processes via a single master agent. Agents that <b>export</b> <b>objects</b> via AgentX to a master agent are called subagents. The AgentX standard not only defines the AgentX protocol but also the procedure by which those subagents process SNMP protocol messages.|$|R
50|$|Apache CXF {{provides}} {{integration with}} the Spring Framework for RPC-style <b>exporting</b> of <b>objects</b> on the server side.|$|R
5000|$|Design 3D CX 8.0 added a 64-bit {{renderer}} with {{expanded memory}} handling and better handling of very large renderings. Other rendering improvements included a new dialog which added control of gamma, brightness and black point {{along with the}} ability to render to High Dynamic Range images (HDRI). Other notable additions were a Publish command for <b>exporting</b> <b>objects</b> to 3D print services including Augment, Sketchfab, and iMaterialise. Lighting improvements include integration with HDR Light Studio.|$|R
50|$|Japan was {{the first}} Asiatic {{independent}} state to <b>export</b> manufactured <b>objects</b> (e.g., silks, fabrics) {{and the first to}} import machinery and raw materials.|$|R
40|$|The avant-garde of high {{performance}} computing is building petabyte storage systems. At CITI, we {{are investigating the}} use of NFSv 4 as a standard for fast and secure access to this data, both across a WAN and within a (potentially massive) cluster. An NFSv 4 server manages much state information, which hampers <b>exporting</b> <b>objects</b> via multiple servers and allows the NFSv 4 server to become a bottleneck as load increases. This paper introduces Parallel NFSv 4, extending the NFSv 4 protocol with a new server-to-server protocol and a ne...|$|R
5000|$|The University of North Texas Libraries {{uses the}} BagIt {{specification}} as an archival container format in its digital repository {{and as an}} interchange format for importing and <b>exporting</b> digital <b>objects</b> from its repository.|$|R
50|$|Versant has {{tools that}} enable the import and export of XML data. For example, batch based {{replication}} of {{data can be}} accomplished by <b>exporting</b> <b>objects</b> from the Versant database as XML, if necessary applying an XSLT transform and then importing into relational tables. The opposite direction is also possible.With Java, the most common approach using XML is to dynamically replicate information using JAXB which runtime converts objects into and out of an XML form. Using JAXB, the Versant database only needs to work with objects rather than importing an XML form. In essence, XML coming from relational databases are converted to objects at runtime using JAXB and those objects are then persisted into the Versant database.|$|R
5|$|One pendant, {{shaped like}} a lantern with a tiny Crucifixion inside, was made in 16th-century Mexico, and from {{comparison}} with other pieces may originally have included Mexican feather work, a Pre-Columbian art whose craftspeople the Spanish missionaries employed in workshops for <b>export</b> luxury <b>objects.</b>|$|R
5000|$|The Arab chronicler Ibn Hawqal visited and {{described}} the city of Algiers under the Zirid era: [...] "The city of Algiers, is built on a gulf and surrounded by a wall. It contains {{a large number of}} bazaars and a few sources of good water near the sea. It is from these sources that the inhabitants draw the water they drink. In the outbuildings of this town are very extensive countryside and mountains inhabited by several tribes of the Berbers. The chief wealth of the inhabitants consists of herds of cattle and sheep grazing in the mountains. Algiers supplies so much honey that it forms an <b>export</b> <b>object,</b> and the quantity of butter, figs and other commodities is so great that it is exported to Kairouan and elsewhere".|$|R
50|$|Qualified export avoids name clashes: For instance, {{if another}} module M3 would also <b>export</b> an <b>object</b> called P, {{then we can}} still {{distinguish}} the two objects, since M1.P differs from M3.P. Thanks to the qualified export {{it does not matter}} that both objects are called P inside their exporting modules M1 and M3.|$|R
50|$|Version 3 of the {{software}} introduced a (Perl-based) plugin architecture for importing and <b>exporting</b> data, converting <b>objects</b> (for search engine indexing) and user interface widgets.|$|R
40|$|Modern Digital Library Systems (DLSs) {{are based}} on docu- ment models which surpass the {{traditional}} payload-metadata document model to incorporate further entities involved in the research life-cycle. Such DLSs manage graphs of interconnected objects, hence oer tools for the creation, visualization and exports of such graphs. In particular, ob- jects in the graph are exported via standard OAI-ORE and OAI-PMH pro- tocols, encoded as (XML) packages of interlinked information objects", also known as compound objects. Fedora is a well-known repository plat- form, designed to support the realization of DLSs implementing modern document models. To date, Fedora does not provide tools to customize compound <b>object</b> <b>exports</b> from DLS <b>object</b> graphs. This paper presents Fedora-OAIzer, an extension of Fedora which allows DLS developers to customize the structure of compound <b>objects</b> to be <b>exported</b> from a given DLS document model { {{expressed in terms of}} Fedora Content Models { and to select the OAI protocol of preference. In order to prove the com- pleteness of the approach, Fedora-OAIzer is compared to other solutions for <b>exporting</b> compound <b>objects</b> from Fedora repositories...|$|R
50|$|<b>Export</b> {{camera and}} <b>objects.</b> This process would auto-make the stitch files for new geom and camera01.ref. The camera would retain all {{animation}} and geom in one file.|$|R
50|$|Vanguard was {{generally}} {{very similar to}} the V-System, but added support for true object oriented programming of the operating system. This meant that kernel and server interfaces were <b>exported</b> as <b>objects,</b> which could be inherited and extended in new code. This change has no real effect on the system itself, it is primarily a change in the source code that makes programming easier.|$|R
40|$|Service offers {{within a}} trader can be grouped into contexts. By associating each context with a {{membership}} rule, traders can be federated in a transparent manner without compromising heterogeneity and autonomy. In addition, context views {{can be defined}} to provide importers with an individualised view of the search offer space. Keyword Codes: C. 2. 4 Keywords: Computer-Communication Networks, Distributed Systems 1 INTRODUCTION A trader is an object to which an <b>exporting</b> <b>object</b> can advertise its services and from which an importing object can find its needs from the set of advertised service offers in a distributed environment. A service offer describes a service that is being traded. It is an assertion made by a server about a service that is offered for use by other objects at a computational interface. It consists of:. a service interface identifier (where to obtain the service),. a service type identifier (what kind of service). values of service properties (detailed description [...] ...|$|R
50|$|Fedora {{supports}} ingest and <b>export</b> {{of digital}} <b>objects</b> {{in a variety}} of XML formats. This enables interchange of objects between Fedora and other applications, as well as facilitating digital preservation and archiving.|$|R
50|$|The UNESCO Convention on the Means of Prohibiting and Preventing the Illicit Import, Export and Transfer of Ownership of Cultural Property (1970 UNESCO Convention) and the UNIDROIT Convention are {{compatible}} and complementary. As {{distinct from the}} UNESCO Convention, the UNIDROIT Convention focuses on the recovery of cultural property. The UNIDROIT Convention establishes conditions for claims of restitution/return of stolen or illegally <b>exported</b> cultural <b>objects</b> respectively.|$|R
50|$|Rottiers had {{gathered}} the first collection of antiquities during {{a stay in}} Athens. He used a network of influential diplomats to acquire and <b>export</b> the <b>objects.</b> Where he had in fact gotten them from remained vague. Rottiers himself stated that he had excavated and been rather lucky, but others claimed {{that he had not}} found anything and then simply bought the items from them.|$|R
5000|$|... rmic RmiServerNote {{that since}} version 5.0 of J2SE support for {{dynamically}} generated stub files has been added, and rmic is only provided for backwards compatibility with earlier runtimes, or for programs that don't provide an explicit port number (or zero) when <b>exporting</b> remote <b>objects,</b> which {{is required for}} generated stubs to be possible, {{as described in the}} Javadoc for UnicastRemoteObject. See the comment in the constructor above.|$|R
25|$|Legal {{basis of}} {{protection}} of cultural issues, particularly {{historical and cultural}} monuments is not only local legislative acts, but also international documents. These documents include the 1954 Hague Convention for the Protection of Cultural Property the Event of Armed Conflict, the 1970 Paris Convention on the Means of Prohibiting and Preventing the Illicit Import, Export and Transfer of Ownership of Cultural Property, the 1995 Convention on Stolen or Illegally <b>Exported</b> Cultural <b>Objects.</b>|$|R
40|$|This paper {{demonstrates}} {{that it is}} possible to build a trading remote distributed systems. This service is an extension to an maximum possible autonomy and flexibility to users yet at the same objects (resource, service) within a local distributed computer attribute names, name domains, the operations of <b>object</b> <b>export,</b> achieving <b>object</b> sharing among a number of users of independent which form together a large homogeneous distributed system. We achieved by the cooperation between traders based on attribute potential to make resource sharing effective and efficient. Key Words: Trading, Distributed Systems, Homogenous Systems * This work was partly supported by Australian Research Council A 48831034, A 49232429 and the Deakin University Research Grants 0504010151. RHODOS July 26, 1994 1 1 Introduction Homogeneous distributed systems have been developed and to share objects: computational and peripheral resources, services this paper as local distributed systems, consist of a number of ( [...] ...|$|R
5000|$|Then {{this means}} that the <b>objects</b> <b>exported</b> by module M1 to the {{universe}} of its enclosing program can now be used inside module M2. They are referenced in a qualified manner like this: M1.a, M1.b, M1.c, and M1.P. Example: ...|$|R
50|$|UNIDROIT Convention on Stolen or Illegally <b>Exported</b> Cultural <b>Objects</b> (Rome, 1995) is the {{international}} treaty {{on the subject of}} cultural property protection. It attempts to strengthen the main weaknesses of the 1970 UNESCO Convention on the Means of Prohibiting and Preventing the Illicit Import, Export and Transfer of Ownership of Cultural Property. The UNIDROIT Convention seeks to fight the illicit trafficking of cultural property by modifying the buyer's behaviour, obliging him/her to check the legitimacy of their purchase.|$|R
5000|$|London, Victoria and Albert Museum, Figures of a Crucifixion, ivory, 1664; History: de Meymard, {{parish priest}} of Saint-Germain-l'Auxerrois , 1787; Fernand Robert, sale Paris, May, 1903; purchased at this sale by Lord Astor, then {{appears in the}} sale of Hever Castle, London, Sotheby's, May 4, 1983, no  332; Acquired by a US {{collector}} who can not <b>export</b> the <b>object</b> because the object was prohibited from leaving British territory; Bought in 1983, to the American collector via Sotheby's by the Victoria and Albert museum thanks to L'Art Fund.|$|R
40|$|Prefetch Support with Object {{relation}} {{discovery in}} an OSD System Object based storage device (OSD) technology [2], built {{on top of}} SAN [6], provides solution to problems of security and scalability associated with the block level storage. An intelligent OSD device <b>exports</b> <b>object</b> interface and provides access to object data only if the requester possesses required security token. Security tokens are issued by the OSD manager. Although after getting a token from the manager, requester can store it for subsequent operations on the given object, there are still considerable overheads for getting the required security token from the OSD manager. The performance of an object access can be improved by efficient prefetching of the security tokens. In this paper, we propose a prefetching model based on relation discovery among objects. Prediction of objects required in future is done by identifying relations among objects. Relations are defined using client feedback and analysis of access history. We also discuss design and implementation of our OSD system integrated with the prefetch mechanism. Performance analysis and results show power of this model in terms of reducing network traffic and overheads of object command processing. ...|$|R
50|$|In 1961 he {{was accused}} of having stolen {{property}} in his collection. This was resolved 15 years later when he was given a short suspended sentence. He campaigned against the 1970 UNESCO and 1995 UNIDROIT conventions restricting the <b>export</b> of cultural <b>objects.</b>|$|R
