2755|10000|Public
5|$|Xerox Corp. v. Apple Computer was a 1989 {{case where}} Xerox sued Apple over its <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> copyrights. A federal {{district}} court dismissed Xerox's claims without addressing whether Apple's GUI infringed Xerox's.|$|E
5|$|Microsoft {{introduced}} Windows Server 2012 and its developer preview in the BUILD 2011 {{conference on}} September 9, 2011. However, unlike Windows 8, the developer preview of Windows Server 2012 was only {{made available to}} MSDN subscribers. It included a <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> based on Metro design language and a new Server Manager, a graphical application used for server management. On February 16, 2012, Microsoft released an update for developer preview build that extended its expiry date from April 8, 2012 to January 15, 2013.|$|E
5|$|Professional {{software}} developers {{are responsible for}} most of Folding@home's code, both for the client and server-side. The development team includes programmers from Nvidia, ATI, Sony, and Cauldron Development. Clients can be downloaded only from the official Folding@home website or its commercial partners, and will only interact with Folding@home computer files. They will upload and download data with Stanford's Folding@home data servers (over port8080, with 80 as an alternate), and the communication is verified using 2048-bit digital signatures. While the client's <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> is open-source, the client is proprietary software citing security and scientific integrity as the reasons.|$|E
5000|$|Various <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs)</b> are {{available}} for Maxima: ...|$|R
5000|$|... {{sophisticated}} <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs)</b> on Java-enabled devices (including Android-based phones).|$|R
50|$|Apache {{features}} configurable error messages, DBMS-based authentication databases, {{and content}} negotiation. It is also supported by several <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs).</b>|$|R
5|$|PHP is a {{general-purpose}} {{scripting language}} that is especially suited to server-side web development, in which case PHP generally runs on a web server. Any PHP code in a requested file is executed by the PHP runtime, usually to create dynamic web page content or dynamic images used on websites or elsewhere. It {{can also be used}} for command-line scripting and client-side <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> applications. PHP can be deployed on most web servers, many operating systems and platforms, and can be used with many relational database management systems (RDBMS). Most web hosting providers support PHP for use by their clients. It is available free of charge, and the PHP Group provides the complete source code for users to build, customize and extend for their own use.|$|E
25|$|Octave {{includes}} a <b>Graphical</b> <b>User</b> <b>Interface</b> (<b>GUI)</b> {{in addition to}} the traditional Command Line Interface (CLI); see User interfaces for details.|$|E
25|$|These basic {{elements}} provide most common <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> elements, but not all. For example, {{there are no}} equivalents to a tree view or grid view.|$|E
50|$|Qt Creator {{includes}} a code editor and integrates Qt Designer for designing and building <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs)</b> from Qt widgets.|$|R
50|$|Some {{suppliers}} of RTUs have created simple <b>graphical</b> <b>user</b> <b>interfaces</b> <b>GUI</b> to enable customers to configure their RTUs easily. In some applications dataloggers {{are used in}} similar applications.|$|R
5000|$|... {{aptitude}} {{is based}} on the ncurses computer terminal library, with which it provides an interface that incorporates some elements commonly seen in <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs)</b> (such as pull-down menus).|$|R
25|$|The Mozilla {{application}} framework (XPFE) platform, which underlies Firefox, Thunderbird, {{and some}} other Web browsers, uses JavaScript to implement the <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> of its various products.|$|E
25|$|A mouse {{typically}} {{controls the}} motion of a pointer in two dimensions in a <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI).</b> The mouse turns movements of the hand backward and forward, left and right into equivalent electronic signals that in turn are used to move the pointer.|$|E
25|$|Octave {{comes with}} an {{official}} <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> and a integrated development environment (IDE) based on Qt. It is available since Octave 3.8, and has become the default interface (over the command line interface) {{with the release of}} Octave 4.0. Several 3rd-party graphical front-ends have been developed.|$|E
50|$|SFML {{provides}} the basic functions on which higher-level software can be built. Add-on libraries exist that provide added support for <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs),</b> 2D lighting, particle systems and animation, video playback and tilemaps.|$|R
25|$|Most of {{the modern}} {{computer}} systems support <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUI),</b> and often include them. In some computer systems, such as the original implementation of the classic Mac OS, the GUI is integrated into the kernel.|$|R
40|$|This paper {{presents}} two {{well known}} design patterns {{that are appropriate}} for designing Interactive Simulation components for educational purposes. These are the Delegation Event Model, used for linking between components, and the MVC (Model-View-Controller) pattern, used for connecting the components to their visualizations and <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs).</b> Combining both architectures, we have constructed Discrete Event Simulation (DES) components for modelling queuing networks in the Flash environment. The resulting components not only help teachers with little programming skill to construct simulation models, but also allow learners to conduct various experiments through interactive <b>Graphical</b> <b>User</b> <b>Interfaces</b> (<b>GUIs)</b> and obtain feedbacks of model behaviour through a range of engaging visualizations...|$|R
25|$|Founded in 1970 as a {{division}} of Xerox Corporation, PARC has been in large part responsible for such developments as laser printing, Ethernet, the modern personal computer, <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> and desktop paradigm, object-oriented programming, ubiquitous computing, amorphous silicon (a-Si) applications, and advancing very-large-scale integration (VLSI) for semiconductors.|$|E
25|$|The Subversion {{open-source}} {{community does}} not provide binaries, but potential users can download binaries from volunteers. While the Subversion project does not include an official <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> for use with Subversion, third parties have developed {{a number of different}} GUIs, along {{with a wide variety of}} additional ancillary software.|$|E
25|$|The Workbench is a <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> and {{integrated}} development environment (IDE) for all IRI software products, built on Eclipseâ„¢. The Workbench is a free, optional place to design, run, and manage data connections, metadata, and jobs, and to use third-party plug-ins for business intelligence, data modeling, version control, etc.|$|E
5|$|<b>Graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs)</b> may be {{developed}} using Perl. For example, Perl/Tk and WxPerl {{are commonly used}} to enable user interaction with Perl scripts. Such interaction may be synchronous or asynchronous, using callbacks to update the GUI.|$|R
25|$|From 1983 onwards, various {{companies}} {{worked on}} <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs)</b> capable of running on PC hardware. However, this required duplicated effort {{and did not}} provide much consistency in interface design (even between products from the same company).|$|R
50|$|UsiXML (<b>USer</b> <b>Interface</b> eXtensible Markup Language) is an XML-based {{specification}} language for <b>user</b> <b>interface</b> design. It supports {{the description of}} UI for multiple contexts of use such as Character <b>User</b> <b>Interfaces</b> (CUIs), <b>Graphical</b> <b>User</b> <b>Interfaces</b> (<b>GUIs),</b> Auditory <b>User</b> <b>Interfaces,</b> and Multimodal <b>User</b> <b>Interfaces.</b>|$|R
25|$|Each server machine runs {{multiple}} instances of the server process. Using a proprietary form of context-switching, the servers {{keep track of}} the state of each end user, allowing consecutive interactions from a single user to be handled by different server processes. The <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> code is also proprietary.|$|E
25|$|On November 10, 1983, Microsoft {{announced}} Windows, a <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> for MS-DOS and {{a competitor}} to the Macintosh operating system. The product line eventually {{changed from a}} mere GUI for DOS into a fully complete, modern operating system over two lines of development, each with their own separate codebase.|$|E
25|$|Like most Linux distributions, openSUSE {{includes}} both a default <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> and a {{command line interface}} option. Users of openSUSE may choose several desktops environments GUIs like GNOME, KDE, Cinnamon, MATE, LXQt, Xfce. openSUSE supports thousands of software packages across {{the full range of}} free software / open source development.|$|E
40|$|The {{construction}} of application-specific <b>Graphical</b> <b>User</b> <b>Interfaces</b> (<b>GUI)</b> still needs considerable programming {{partly because the}} mapping between application data and its visual representation is complicated. This study proposes a system which generates GUIs by generalizing multiple sets of application data and its visualization examples. The most notable characteristic {{of the system is}} that programmers can interactively modify the mapping by "correcting" the system-generated visualization examples that represent the system's current notion of programmer's intentions. Conflicting mappings are automatically resolved via the use of constraint hierarchies. KEYWORDS: <b>Graphical</b> <b>User</b> <b>Interfaces,</b> Programming by Example, Visual Parsing, Visualization, Constraint Hierarchies. 1 INTRODUCTION Although <b>Graphical</b> <b>User</b> <b>Interfaces</b> (<b>GUI)</b> have become prevalent, the complexity and development cost of application-specific GUIs remain considerably high. To support such GUI programming, our previous work [...] ...|$|R
50|$|Microsoft Windows is {{the name}} of several {{families}} of computer software operating systems created by Microsoft. Microsoft first introduced an operating environment named Windows in November 1985 as an add-on to MS-DOS in response to the growing interest in <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs).</b>|$|R
50|$|The Ã…ngstrÃ¶m {{distribution}} is a Linux distribution {{for a variety}} of embedded devices. The {{distribution is}} the result of work by developers from the OpenZaurus, OpenEmbedded, and OpenSIMpad projects. The <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs)</b> available are OPIE and GPE among other options.|$|R
25|$|The user interface, {{also known}} as the shell, is either a {{command-line}} interface (CLI), a <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI),</b> or through controls attached to the associated hardware, which is common for embedded systems. For desktop systems, the default mode is usually a graphical user interface, although the CLI is commonly available through terminal emulator windows or on a separate virtual console.|$|E
25|$|User Interface: Provides the {{functions}} {{to create and}} manage screen windows and most basic controls, such as buttons and scrollbars, receive mouse and keyboard input, and other functions associated with the <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> part of Windows. This functional unit resides in user.exe on 16-bit Windows, and user32.dll on 32-bit Windows. Since Windows XP versions, the basic controls reside in comctl32.dll, together with the common controls (Common Control Library).|$|E
25|$|In computing, a skin (also {{known as}} visual styles in Windows XP) is a custom {{graphical}} appearance preset package {{achieved by the}} use of a <b>graphical</b> <b>user</b> <b>interface</b> (<b>GUI)</b> that can be applied to specific computer software, operating system, and websites to suit the purpose, topic, or tastes of different users. As such, a skin can completely change the look and feel and navigation interface of a piece of application software or operating system.|$|E
5000|$|<b>Graphical</b> <b>user</b> <b>interfaces</b> (<b>GUI)</b> accept input via {{devices such}} as a {{computer}} keyboard and mouse and provide articulated graphical output on the computer monitor. There {{are at least two}} different principles widely used in <b>GUI</b> design: Object-oriented <b>user</b> <b>interfaces</b> (OOUIs) and application oriented interfaces.|$|R
50|$|The IUP Portable <b>User</b> <b>Interface</b> is a {{computer}} software development kit that provides a portable, scriptable toolkit to build <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs)</b> using the programming languages C, Perl, Lua and Nim, among others. This allows rapid, zero-compile prototyping and refinement of deployable GUI applications.|$|R
50|$|Functional {{reactive}} programming (FRP) is a programming {{paradigm for}} reactive programming (asynchronous dataflow programming) using {{the building blocks}} of functional programming (e.g. map, reduce, filter). FRP has been used for programming <b>graphical</b> <b>user</b> <b>interfaces</b> (<b>GUIs),</b> robotics, and music, aiming to simplify these problems by explicitly modeling time.|$|R
