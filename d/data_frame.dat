639|1382|Public
50|$|The {{user can}} create {{multiple}} data frames within one table of contents. The <b>data</b> <b>frame</b> while in that view will only view a single <b>data</b> <b>frame</b> at a time.|$|E
50|$|In {{the event}} of a <b>Data</b> <b>Frame</b> and a Remote Frame with the same {{identifier}} being transmitted at the same time, the <b>Data</b> <b>Frame</b> wins arbitration due to the dominant RTR bit following the identifier.|$|E
5000|$|... “The {{format of}} a MAC <b>data</b> <b>frame</b> {{in which the}} octets of any MAC {{addresses}} conveyed in the MAC user data field have the same bit ordering as in the Hexadecimal Representation.” (See MAC <b>data</b> <b>frame,</b> MAC addresses) ...|$|E
5000|$|In {{addition}} to <b>data</b> <b>frames</b> which contain user data, L2 also transmits and receives control frames. The control frames {{can be distinguished}} from <b>data</b> <b>frames</b> by three bits in the first symbol. There {{are two types of}} control frames: ...|$|R
50|$|L2 {{clusters}} 17-bit UniPro L1.5 symbols into packet-like <b>data</b> <b>frames</b> (the term packet {{is reserved}} for L3). These <b>data</b> <b>frames</b> start with a 17-bit start-of-frame control symbol, followed by up to 288 bytes of data (144 data symbols) and followed by an end-of-frame control symbol and a checksum.|$|R
50|$|Acknowledgement of the {{connect request}} by the IO Device allows {{parameterization}} to follow. From this point forward, both the IO Device and IO Controller start exchanging cyclic process I/O <b>data</b> <b>frames.</b> The process I/O <b>data</b> <b>frames</b> don't contain valid data at this point, but they start serving as keep-alive {{to keep the}} watchdog from expiring.|$|R
50|$|Reference: Table: <b>Data</b> <b>Frame</b> Format.|$|E
5000|$|There are two {{differences}} between a <b>Data</b> <b>Frame</b> and a Remote Frame. Firstly the RTR-bit is transmitted as a dominant {{bit in the}} <b>Data</b> <b>Frame</b> and secondly in the Remote Frame there is no Data Field. The DLC field indicates the data length of the requested message (not the transmitted one) ...|$|E
5000|$|... a {{transmitted}} <b>data</b> <b>frame</b> {{will reach}} the peer's receiver (after potential retransmissions) ...|$|E
5000|$|... {{there will}} be room to {{accommodate}} received <b>data</b> <b>frames</b> (L2 flow control) ...|$|R
50|$|<b>Data</b> <b>Framing</b> - Breaking up {{the data}} stream into {{individual}} frames or packets.|$|R
5000|$|Data {{transfer}} (matrices and <b>data</b> <b>frames)</b> between R and Excel in {{both directions}} ...|$|R
50|$|The {{link control}} {{protocol}} {{is similar to}} STR. The designers attempted to protect against simple transmission errors. The protocol requires that every message be acknowledged (ACK0/ACK1) or negatively acknowledged (NAK), so transmission of small packets has high transmission overhead. The protocol can recover from a corrupted <b>data</b> <b>frame,</b> a lost <b>data</b> <b>frame,</b> and a lost acknowledgment.|$|E
5000|$|Number {{and address}} coincide: entity #x has address x in the <b>data</b> <b>frame.</b>|$|E
5000|$|... {{provides}} a protocol structure with asynchronous framing and a hierarchical <b>data</b> <b>frame</b> structure ...|$|E
5000|$|Server sends <b>DATA</b> <b>frame(s)</b> {{with the}} {{contents}} of index.html, still in stream 3.|$|R
5000|$|Server sends <b>DATA</b> <b>frames</b> for the {{contents}} of styles.css and script.js, using their respective stream numbers.|$|R
30|$|Average {{amount of}} energy {{consumed}} to transmit <b>data</b> <b>frames,</b> per sensor node over the entire simulation time.|$|R
5000|$|... a {{received}} <b>data</b> <b>frame</b> {{will contain}} the correct payload (checked using a checksum) ...|$|E
5000|$|The <b>data</b> <b>frame</b> with an 11-bit {{identifier}} is {{also called}} [...] "base frame format".|$|E
50|$|The {{maximum size}} of a {{scheduled}} or unscheduled ControlNet <b>data</b> <b>frame</b> is 510 Bytes.|$|E
5000|$|Control frames {{facilitate}} in {{the exchange}} of <b>data</b> <b>frames</b> between stations. Some common 802.11 control frames include: ...|$|R
5000|$|One type ("AFC- Acknowledgement and L2 Flow Control", 3 symbols) {{serves to}} {{acknowledge}} successfully received <b>data</b> <b>frames.</b>|$|R
5000|$|... 802.11 {{networks}} use <b>data</b> <b>frames,</b> management frames, {{and control}} <b>frames.</b> <b>Data</b> <b>frames</b> convey the real data, and {{are similar to}} those of Ethernet. Management frames maintain both network configuration and connectivity. Control frames manage access to the ether and prevent access points and clients from interfering with each other in the ether. Some information on management frames will be helpful to better understand what programs for reconnaissance do.|$|R
5000|$|The <b>data</b> <b>frame</b> is {{the only}} frame for actual data transmission. There are two message formats: ...|$|E
50|$|Any node (node C and node E) overhearing a CTS frame refrains from sending {{anything}} for the time until the <b>data</b> <b>frame</b> and ACK should have been received (solving the hidden terminal problem), plus a random time. Both the RTS and CTS frames contain information {{about the length of}} the <b>DATA</b> <b>frame.</b> Hence a node uses that information to estimate the time for the data transmission completion.|$|E
50|$|The {{internal}} {{conditions of}} a receiver, {{which requires a}} delay of the next <b>data</b> <b>frame</b> or remote frame.|$|E
40|$|An {{algorithm}} is developed for calibrating the spatial nonuniformity of image-array (CCD-type) detectors. Like other techniques this approach uses multiple, spatially displaced images. In circumstances where high-precision flat fields {{are not available}} by other means (i. e., sky flats) this technique is advantageous as it uses the <b>data</b> <b>frames</b> for gain calibration even when the array images extended, nonuniform, sources. Numerical experiments and direct observations with intrinsically uniform and quite nonuniform detectors show that this {{algorithm is}} useful when <b>data</b> <b>frames</b> are crowded with sources - circumstance where 'median filtering' flatfielding techniques often fail. The algorithm described is robust and efficiently uses information from multiple <b>data</b> <b>frames</b> to determine pixel gain variations, using visible and IR array observations of extended sources...|$|R
50|$|After the {{authentication}} and association, the pre-shared WEP key is {{also used}} for encrypting the <b>data</b> <b>frames</b> using RC4.|$|R
5000|$|... <b>data</b> <b>frames</b> {{within the}} same Traffic Class will be {{received}} and passed to the upper protocol layers in order ...|$|R
50|$|Before {{sending a}} long <b>DATA</b> <b>frame,</b> node A sends a short Data-Sending frame (DS), which {{provides}} {{information about the}} length of the <b>DATA</b> <b>frame.</b> Every station that overhears this frame knows that the RTS/CTS exchange was successful. An overhearing station (node F), which might have received RTS and DS but not CTS, defers its transmissions until after the ACK frame should have been received plus a random time.|$|E
5000|$|A 3 {{bit field}} which says if the {{datagram}} {{is a part}} of a fragmented <b>data</b> <b>frame</b> or not.|$|E
50|$|Error {{recovery}} is by retransmission of the corrupted frame. Since Bisync data packets are not serial-numbered, it's considered {{possible for a}} <b>data</b> <b>frame</b> to go missing without the receiver realizing it. Therefore, alternating ACK0s and ACK1s are deployed; if the transmitter receives the wrong ACK, it can assume a data packet (or an ACK) went missing. A potential flaw is that corruption of ACK0 into ACK1 could result in duplication of a <b>data</b> <b>frame.</b>|$|E
3000|$|... is {{the mean}} number of uplink <b>data</b> <b>frames</b> piggybacked on the ACK frames that are {{successfully}} transmitted to the AP.|$|R
50|$|The byte {{order for}} values in Modbus <b>data</b> <b>frames</b> is big-endian (MSB, most {{significant}} byte of a value received first).|$|R
50|$|This {{means that}} {{typically}} <b>data</b> <b>frames</b> pass an 802.11 (WLAN) medium {{and are being}} converted to 802.3 (Ethernet) or vice versa.|$|R
