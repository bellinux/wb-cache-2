4|9738|Public
5000|$|In a computer, it is {{the time}} {{interval}} between the instant at which an <b>instruction</b> <b>control</b> <b>unit</b> initiates a call for data or a request to store data, and the instant at which delivery of the data is completed or the storage is started.|$|E
40|$|This {{bachelor}} thesis {{deals with}} designing {{and implementation of}} sensorial equipment of a robot which travels according to set GPS. This sensorial equipment is designed with using sensors for measuring robot surroundings and robot parameters. This equipment includes an <b>instruction</b> <b>control</b> <b>unit,</b> which gains data from the sensors and transfers the data to the other systems of the robot. This sensorial equipment is designed as modular for assuring an easy expansion with other sensors...|$|E
40|$|In {{this paper}} we propose a {{fault-tolerant}} processor architecture and an associated fault-tolerant computation model capable of fault tolerance in the nanoelectronic environment that is characterized by high and time varying fault rates. The proposed fault tolerant processor architecture not only guarantees the correctness of computation but also is flexible in that it dynamically trades-off computation resources and performance. The core of the architecture is a decentralized <b>instruction</b> <b>control</b> <b>unit</b> called the voter that achieves both fault tolerance and the maximum parallel execution of instructions by exploiting the abundant computational resources provided by nanotechnologies. Although the result of each instruction needs to be confirmed by executing it on multiple computation units, multiple unconfirmed instructions can proceed as speculative branches. The voter implements a hardware-frugal computation unit allocation algorithm to organize the redundant computations and to dynamically control the growth of speculative branches. 1...|$|E
50|$|The <b>control</b> <b>unit</b> of the CPU {{contains}} circuitry {{that uses}} electrical signals {{to direct the}} entire computer system to carry out stored program <b>instructions.</b> The <b>control</b> <b>unit</b> does not execute program instructions; rather, it directs {{other parts of the}} system to do so. The <b>control</b> <b>unit</b> communicates with both the ALU and memory.|$|R
40|$|Abstract—In this paper, the <b>control</b> <b>unit</b> for the 16 -bit CPU of a {{microprocessor}} trainer is designed, implemented, and tested. The {{most important part}} of the <b>control</b> <b>unit</b> is the PIC microcontroller 18 F 452. The microprogram for the PIC was developed to execute the arithmetic and logical <b>instructions.</b> The <b>control</b> <b>unit</b> of this trainer i...|$|R
40|$|The {{design process}} {{requires}} new methods, because technological abilities of microelectronics overtake design possibilities. One {{way of the}} solution is a reuse technology. 	In the first chapter the analysis of literature has been made. Also the reuse technology object has been reviewed. According to literature the wide and narrow definitions of reuse technology are presented. Definitions of component, methods and concepts of generic components have been delivered. Overlook through the microprocessors and their architectures have been made. 	In the second chapter a microprocessor and its components are analysed. The directions of generalisation for microprocessor components are proposed. Also analysis of instruction set, <b>instruction</b> decoder and <b>control</b> <b>units</b> generalisation possibility is discussed. 	The third chapter provides generalisation results for formulated tasks. Results of generalisation and synthesis of processor components are presented. Also results of <b>instruction</b> decoder, <b>control</b> <b>units</b> generalisation and synthesis are delivered. 	Conclusions and recommendations are formulated in the fourth part...|$|R
40|$|Special purpose {{processing}} systems designed for specific applications can provide extremely high performance at moderate cost. One such processor is presented for executing graphics and image processing algorithms {{as the basis}} of a digital film printer. Pixels in the system contain four parallel components: RGB for full color and an alpha channel for retaining transparency information. The data path of the processor contains four arithmetic elements connected through a crossbar network to a tessellated scratchpad memory. The single instruction, multiple data stream (SIMD) processor executes instructions on four pixel components in parallel. The <b>instruction</b> <b>control</b> <b>unit</b> (ICU) maintains an activity stack for tracking block-structured code, using data-dependent activity flags for conditional disabling subsets of the AI~s. Nested loops and if-then-else constructs can be programmed directly, with the ICU disabling and reenabling ALUs {{on the basis of their}} individual status bits. CR Categories and Subject Descriptors: B. 2. 1 [Arithmetic and logic structures]: design styles [...] parallel; B. 3. 2 [memory structures]: design styles [...] interleaved memories; C. 1. 2 [processor architectures]: Multiple data stream architectures [...] SIMD...|$|E
40|$|This paper {{describes}} an initial design of an associative processor for implementation using field-programmable logic devices (FPLDs). The processor is based loosely on earlier {{work on the}} STARAN computer, but updated to reflect modern design practices. We also draw on {{a large body of}} research at Kent State on the ASC and MASC models of associative processing, and take advantage of an existing compiler for the ASC model. The resulting design consists of an associative array of 8 -bit RISC Processing Elements (PEs), operating in byte-serial fashion under the <b>control</b> of an <b>Instruction</b> Stream (IS) <b>Control</b> <b>Unit</b> that can execute assembly language code produced by a machine-specific back-end compiler...|$|R
40|$|Abstract: Runtime errors {{occurring}} sporadically in automotive <b>control</b> <b>units</b> {{are often}} hard to detect. A common reason for such errors are critical race conditions. The introduction of multicore hardware enables software {{to be run}} in parallel, and hence, drastically increases the vulnerability to such errors. Race conditions are difficult to discover by testing or monitoring, only. Hence, a static analysis of code is required to effectively reduce the occurrence of such errors. In this paper we introduce a new Bounded Model Checking tool, which in its core is an Interval Constraint Solver, op-erating on a machine code based model {{and is able to}} handle memory <b>instructions</b> directly. As <b>control</b> <b>units</b> are usually running on task-based operating systems like AUTOSAR or OSEK, our tool features a task model, which is able to handle sequen-tial and concurrent task scheduling. ...|$|R
40|$|With {{increase}} in population {{there is a}} significant decrease in the agricultural land in many countries, especially in a country like India. So there is a necessity to increase the rate of production in agriculture. Corporate farming technique {{is one of the most}} advanced farming in the world but its execution involves a large manpower such as collecting different parameters like temperature, soil moisture, humidity etc., we are thereby proposing some ideas concerning the sensors that could effectively collect these parameters and process them using a microcontroller (i. e. embedded systems) and it gives <b>instructions</b> to the <b>controlling</b> <b>units</b> such as heating element, exhaust fan, sprinklers, humidifier, solar shade etc., which correct them to the required level. So here we tend to create a Green House environment with the help of sensors and <b>controlling</b> <b>units.</b> Use of GSM technologies made the communication very easy and reliable. Using such methods will allow farmers to cultivate different crops irrespective of the seasons and location of cultivation...|$|R
40|$|Aim of {{this paper}} is to propose a {{high-level}} power exploration framework based on an instruction-level energy model for VLIW (Very Long InstructionWord) architectures. More specifically, the present paper deals with the reduction of the complexity of the energy model of K-issueVLIWprocessors from exponential with respect to the number of operations within the Instruction Set O(|I SA|K) to quadratic (O(K ∗ |I SA| 2)). The complexity of the energy model has been further simplified by automatically clustering the operations in the ISA with respect to their average energy. Globally, the proposed approach reduces the complexity of the characterization problem for a K-issue VLIW processor to quadratic (O(K ∗ |C| 2)) with respect to the number of operation clusters. In this way, a more efficient characterization of the VLIW core power consumption can been achieved, while preserving the accuracy of the power estimates. The proposed model has been further extended to provide early power figures and energy/performance trade-offs for multi-cluster VLIW architectures composed of multiple data-path units and a single <b>instruction</b> cache <b>control</b> <b>unit.</b> The proposed high-level power estimation methodology has been applied to the Lx 4 -issue VLIW pipelined processor provided by STMicroelectronics...|$|R
40|$|Image sensors with {{integrated}} {{signal processing}} – so called “Vision Chips” – allow for execution of computationally intensive processing steps directly after image acquisition. Programmable systems, whose functional units may be utilized in a flexible manner for various image processing tasks, require a flexible, modular toolchain. A programming environment, consisting of an assembler supporting ASIP-based (Application Specific <b>Instruction</b> Set Processor) <b>control</b> <b>units</b> and a Python translator supporting {{a subset of}} the Python programming language, will be presented. Library elements are used to further abstract the behavior of the underlying Vision-System-on-Chip (VSoC). For a concrete task, both VSoC-internal and conventional processing steps can be implemented within the same project. When combined with established libraries such as OpenCV, VSoC-internal processing close to the sensor becomes a powerful tool for holistic vision task design...|$|R
40|$|The complex {{environment}} of ruins requires {{the search and}} rescue robot has the ability of return autonomously. Based on recording and analyzing <b>control</b> <b>instructions</b> and configuration information, the method of autonomous return is introduced to endow the shape-shifting search and rescue robot with ability of return autonomously. We introduced the main process of normal motion mode and autonomous return mode. The structure of data for recording historic <b>control</b> <b>instruction</b> and configuration information is designed. The software structure of autonomous return <b>control</b> <b>unit</b> is designed...|$|R
5000|$|... 3270 {{devices are}} clustered, {{with one or}} more {{displays}} or printers connected to a <b>control</b> <b>unit</b> (the 3275 and 3276 included an integrated <b>control</b> <b>unit).</b> Originally devices were connected to the <b>control</b> <b>unit</b> over coaxial cable; later token ring, twisted pair, or Ethernet connections were available. A local <b>control</b> <b>unit</b> attaches directly to the channel of a nearby mainframe. A remote <b>control</b> <b>unit</b> is connected to a communications line by a modem. Remote 3270 controllers are frequently multi-dropped, with multiple <b>control</b> <b>units</b> on a line.|$|R
5000|$|Provisional Air Support <b>Control</b> <b>Unit</b> (PASCU)/Marine Air Support <b>Control</b> <b>Units</b> (MASCU) ...|$|R
40|$|This work {{is about}} {{development}} of a <b>control</b> <b>unit</b> {{for use in a}} production line. The <b>control</b> <b>unit</b> is implemented in an embedded device Raspberry Pi. It communicates with central administrating system, which assigns programs to particular <b>control</b> <b>units.</b> These programs describe interaction with peripherals of the <b>control</b> <b>unit</b> and with database system of traceability...|$|R
5000|$|<b>Control</b> <b>unit</b> endPoOps {{indicates}} that a previous <b>control</b> <b>unit</b> busy status has been cleared.|$|R
5000|$|In most {{mainframe}} systems a device-independent channel usually {{attaches to}} the CPU and to a controller or <b>control</b> <b>unit</b> which implements device-dependent logic for attaching specific devices. The functions performed by the <b>control</b> <b>unit</b> {{are similar to the}} functions performed by a device driver program on smaller systems. Some devices have integrated <b>control</b> <b>units,</b> which are logically discrete but are included with the device rather than requiring a separate box. Often a <b>control</b> <b>unit</b> can attach to multiple channels connected to a single or multiple systems. Some mainframe <b>control</b> <b>units</b> are: ...|$|R
5000|$|<b>Control</b> <b>units</b> were {{connected}} to the channels with [...] "bus and tag" [...] cable pairs. The bus cables carried the address and data information and the tag cables identified what data was on the bus. The general configuration of a channel was to connect the devices in a chain, like this: Mainframe—Control Unit X—Control Unit Y—Control <b>Unit</b> Z. Each <b>control</b> <b>unit</b> was assigned a [...] "capture range" [...] of addresses that it serviced. For example, <b>control</b> <b>unit</b> X might capture addresses 40-4F, <b>control</b> <b>unit</b> Y: C0-DF, and <b>control</b> <b>unit</b> Z: 80-9F. Capture ranges {{had to be a}} multiple of 8, 16, 32, 64, or 128 devices and be aligned on appropriate boundaries. Each <b>control</b> <b>unit</b> in turn had one or more devices attached to it. For example, you could have <b>control</b> <b>unit</b> Y with 6 disks, that would be addressed as C0-C5.|$|R
5000|$|... #Caption: IBM 702 system: From left to right, CRT memory, 702 CPU, 717 printer, operator's console, 757 printer <b>control</b> <b>unit,</b> 752 tape <b>control</b> <b>unit,</b> five 727 tape drives, 732 drum storage, five 727 tape drives, card reader, card punch, and reader/punch <b>control</b> <b>units.</b>|$|R
50|$|In IBM zSeries {{computers}} with two {{direct access storage device}} (DASD) <b>control</b> <b>units</b> connected through dedicated connections, PPRC is the protocol used to mirror a DASD volume in one <b>control</b> <b>unit</b> (the primary) to a DASD volume {{in the other}} <b>control</b> <b>unit</b> (the secondary).|$|R
40|$|WO 200275824 A UPAB: 20030111 NOVELTY - To {{produce an}} adaptronic micro system, {{one or more}} piezo {{electric}} fiber transducers (2) are embedded in a polymer matrix (1), {{with one or more}} <b>control</b> <b>units</b> (3) to <b>control</b> and/or carry signals. The <b>control</b> <b>units</b> are fitted into the matrix by an initial loose mounting on a surface of a transfer carrier (4). The transfer carrier is applied to the matrix, with the surface fitted with <b>control</b> <b>units</b> towards the transducers, and the transfer carrier is peeled off. DETAILED DESCRIPTION - To produce an adaptronic micro system, the transfer carrier is a film, sheet or plate, with an adhesive bond to hold the <b>control</b> <b>units</b> at a surface, with a weaker bonding than the bond between the <b>control</b> <b>units</b> and the matrix. The bonds are modified to hold the <b>control</b> <b>units</b> more strongly at the matrix. When the <b>control</b> <b>units</b> are in place at the matrix, the matrix and/or the <b>control</b> <b>units</b> are given an intermediate hardening. The <b>control</b> <b>units</b> are applied to the transfer carrier by a printing process, ink jet printing or by dispensing. The <b>control</b> <b>units</b> are electrodes, in an inter-digital array, or of an electrically conductive adhesive applied to the transfer carrier and treated with radiation or heat to give a total or partial hardening action. The transfer carrier, with the control electrodes, is pressed mechanically against the matrix, which is then wholly or partially hardened by radiation or heat. The <b>control</b> <b>units</b> can be of conductive film or foil materials, conductive lines or network or grid, or of an intrinsic or extrinsic electrically conductive material. The <b>control</b> <b>units</b> can also be light waveguides. The transducers are piezo electric, magnetostrictive, shape memory alloys or nano tubes. The <b>control</b> <b>units</b> are applied with a direct contact on the transducers. The control connectors, or connectors which can be fitted, are applied by one or more transfer carriers like the <b>control</b> <b>unit</b> application. The transfer carrier is a polymer film, a sheet of felt paper or coated paper. The <b>control</b> <b>units</b> are wholly embedded in the matrix. A number of micro systems (5) are assembled into a stack, and then fully hardened by mechanical pressure and heat. USE - The process is for the production of adaptronic micro systems. ADVANTAGE - The <b>control</b> <b>units</b> are wholly embedded in the matrix, for the production of prepreg modules...|$|R
5000|$|Engine <b>control</b> <b>unit</b> (ECU) — {{not to be}} {{confused}} with electronic <b>control</b> <b>unit,</b> the generic term for all these devices ...|$|R
40|$|Which of the {{following}} properly describes which IRMs are assigned to the RMCS rod block logic? A. IRMs A, B, E, and F are assigned to Activity <b>Control</b> <b>Unit</b> 1 B. IRMs A, B, E, and F are assigned to Activity <b>Control</b> <b>Unit</b> 2 C. IRMs A, C, E, and G are assigned to Activity <b>Control</b> <b>Unit</b> 1 D. IRMs A, C, E, and G are assigned to Activity <b>Control</b> <b>Unit</b> 2 Correct Answer A...|$|R
5000|$|Electronic <b>control</b> <b>unit</b> (ECU), {{a generic}} term for any {{embedded}} system—not {{to be confused}} with engine <b>control</b> <b>unit</b> also abbreviated, ECU ...|$|R
40|$|The device has a <b>control</b> <b>unit</b> (11) {{connected}} with an actuator, for supplying a control signal and controlling the output range of force and/or {{path of the}} actuator. The piezoresistive transducers (9) {{connected with}} <b>control</b> <b>unit,</b> detect the force received or delivered by the actuator and transmit output signal to the <b>control</b> <b>unit.</b> The <b>control</b> <b>unit</b> <b>controls</b> the actuator based on the output signal. The piezoresistive transducer layer is formed with undoped hydrocarbon or pure carbon. An independent claim is included for method for controlling actuator device...|$|R
50|$|<b>Control</b> <b>unit</b> is {{a special}} case of {{function}} <b>units</b> which <b>controls</b> execution of programs. <b>Control</b> <b>unit</b> {{has access to the}} instruction memory in order to fetch the instructions to be executed. In order to allow the executed programs to transfer the execution (jump) to an arbitrary position in the executed program, <b>control</b> <b>unit</b> provides <b>control</b> flow operations. A <b>control</b> <b>unit</b> usually has an instruction pipeline, which consists of stages for fetching, decoding and executing program instructions.|$|R
50|$|In {{order to}} bring many older model Disklaviers up to the same or similar feature set as the E3, Yamaha {{introduced}} the DKC-850 replacement <b>control</b> <b>unit</b> for Mark IIXG and Mark III Disklaviers in 2010. Outwardly, the <b>control</b> <b>unit</b> looks and functions identically to the E3 <b>control</b> <b>unit</b> and provides {{access to the same}} cloud-based services, though it does not upgrade the tone generator and has substantially fewer performance/editing features compared with the original <b>control</b> <b>units.</b> The DKC-850 can also update earlier model Disklaviers by connecting to the old <b>control</b> <b>unit</b> via MIDI cables. In this context, the DKC-850 does not support the reception of streaming performances.|$|R
5000|$|... #Caption: A Vigilant VM-1 {{fire alarm}} <b>control</b> <b>unit</b> (FACU) / {{autonomous}} <b>control</b> <b>unit</b> (ACU) with integrated voice evacuation and fire fighter telephone system.|$|R
50|$|A {{telecommunication}} <b>control</b> <b>unit</b> (TCU), line <b>control</b> <b>unit,</b> or terminal <b>control</b> <b>unit</b> (although terminal <b>control</b> <b>unit</b> {{may also}} {{refer to a}} terminal cluster controller) is a Front-end processor for mainframes and some minicomputers which supports attachment {{of one or more}} telecommunication lines. TCUs free processors from handling the data coming in and out of RS-232 ports. The TCU can support multiple terminals, sometimes hundreds. Many of these TCUs can support RS-232 when it is required, although there are other serial interfaces as well.|$|R
40|$|The {{topic of}} my bachelor´s thesis is {{to design a}} <b>control</b> <b>unit</b> of the door systems for public transport. The <b>control</b> <b>unit</b> is {{designed}} by using modern components. Their availability should be not less then ten years. The <b>unit</b> is <b>controlled</b> by a microcontroller ATMEGA and the motor is switched using the h-bridge. The <b>control</b> <b>unit</b> has ten programmable inputs and two switching outputs. PCB design is optimized for mass production. The result is a functional prototype of <b>control</b> <b>unit...</b>|$|R
5000|$|<b>Control</b> <b>units</b> are {{assigned}} an address [...] "capture" [...] range. For example, a CU might be assigned range 20-2F or 40-7F. The {{purpose of this}} is to assist with the connection and prioritization of multiple <b>control</b> <b>units</b> to a channel. For example, a channel might have three disk <b>control</b> <b>units</b> at 20-2F, 50-5F, and 80-8F. Not all of the captured addresses need to have an assigned physical device. Each <b>control</b> <b>unit</b> is also marked as High or Low priority on the channel.|$|R
40|$|The rapid {{prototype}} based {{method for}} design process of control strategy of electronic <b>control</b> <b>unit</b> for {{input and output}} driver circuit for 16 -bit Electronic <b>Control</b> <b>Unit</b> (ECU). This method saves time and cost for making of an electronic <b>control</b> <b>unit</b> board and uses the electronic <b>control</b> <b>unit</b> board having a type of microcontroller {{in which we can}} flash code many times for generation of control strategy. Based on the given circuit, development of control strategy for electronic <b>control</b> <b>unit</b> is done in microcontroller’s supported IDE. Then, test and verify the developed code with the use of given input and output driver circuits for electronic <b>control</b> <b>unit</b> on test bench with virtual engine environment setup or in an actual vehicle. The whole process is associated with development of Engine Management System. In this paper the input and output driver circuit design is given for further development of control code for four wheeler vehicles. Using this technique the validation process of electronic <b>control</b> <b>unit</b> board is done on test bench setup or in actual vehicle...|$|R
5000|$|The cable {{ordering}} of the <b>control</b> <b>units</b> on the channel was also significant. Each <b>control</b> <b>unit</b> was [...] "strapped" [...] as High or Low priority. When a device selection was sent {{out on a}} mainframe's channel, the selection was sent from X->Y->Z->Y->X. If the <b>control</b> <b>unit</b> was [...] "high" [...] then the selection was checked in the outbound direction, if [...] "low" [...] then the inbound direction. Thus, <b>control</b> <b>unit</b> X was either 1st or 5th, Y was either 2nd or 4th, and Z was 3rd in line. It was also possible to have multiple channels attached to a <b>control</b> <b>unit</b> from the same or multiple mainframes, thus providing a rich high-performance, multiple-access, and backup capability.|$|R
40|$|This {{bachelor}} thesis describes fuel <b>control</b> <b>unit</b> {{systems of}} jet turbine engines, specifically historical {{development of these}} systems including current research, operating processes {{of different types of}} fuel <b>control</b> <b>unit</b> systems and important controling quantities. The last part of the thesis describes fuel <b>control</b> <b>unit</b> system produced by Jihostroj a. s. company for M 601 engine...|$|R
50|$|In {{the field}} of {{automotive}} electronics, Door <b>Control</b> <b>Unit</b> (DCU) is a generic term for an embedded system that controls a number of electrical systems associated with an advanced motor vehicle. An advanced motor vehicle consists {{of a number of}} ECUs (Electrical <b>Control</b> <b>Units),</b> and the Door <b>Control</b> <b>Unit</b> (DCU) is an important one among them.|$|R
