15|48|Public
5000|$|<b>Front-end</b> <b>load</b> or {{sales charge}}. A <b>front-end</b> <b>load</b> or sales charge is a {{commission}} paid to a broker by {{a mutual fund}} when shares are purchased. It is expressed {{as a percentage of}} the total amount invested or the [...] "public offering price", which equals the net asset value plus the <b>front-end</b> <b>load</b> per share. The <b>front-end</b> <b>load</b> often declines as the amount invested increases, through breakpoints. The <b>front-end</b> <b>load</b> is paid by the investor; it is deducted from the amount invested.|$|E
50|$|B shares carry a {{back-end}} load, whereas A shares carry a <b>front-end</b> <b>load.</b>|$|E
5000|$|One class may be {{sold through}} a {{stockbroker}} or financial adviser {{with an initial}} commission (<b>front-end</b> <b>load)</b> and might be called retail shares.|$|E
5000|$|Phase-gate {{processes}} are often called <b>front-end</b> <b>loading</b> or big design up front.|$|R
5000|$|Net-metering, <b>front-end</b> <b>loaded</b> {{and declining}} for {{consumer}} investment {{of renewable energy}} production.|$|R
40|$|Projects {{carried out}} in the public sector of Norway are often plagued with with large budget and {{schedule}} overruns. Not only that, the sector also struggles with delivering profitable projects, while delivering on the public service required. <b>Front-end</b> <b>loading,</b> is a process designed to increase the value of an opportunity and to decrease the uncertainty that could arise during their implementation. The Norwegian public sector has incorporated this process in the early 2000 s. <b>Front-end</b> <b>loading</b> can be quite demanding, and the expenses of carrying it out can vary from 1 % to 7 % of the total project expenditures. The process is supposed to decrease the cost overruns the projects might face, but does it really deliver on this promise? Given these facts, this thesis aims to: - Review the international literature to establish an understanding of what the <b>front-end</b> <b>loading</b> - Answer {{the question of whether the}} introduction of the <b>Front-End</b> <b>loading</b> scheme really delivers on the promise of cost overrun reduction - Provide the academic community and the public sector of Norway with The process of exploring the <b>Front-End</b> <b>loading</b> related literature, yielded in the identification of the following crucial factors that are most essential for a successful FEL execution: - The use of a structured stage-gated project - Clearly defined project phases - Thorough risk and uncertainty analysis - Clearly defined decision gates - Quality assured basis for the decisions by a third party - Simplicity - Proper understanding and management of cost overrun causes: under which stage they occur and how to mitigate or eliminate their effect on the continuity of the FEL process - Standardization and common terminology In order to answer the question of whether the <b>Front-End</b> <b>loading</b> scheme has had an impact, a portfolio of 91 projects executed post the introduction of the scheme were compared to a second portfolio of projects executed pre-the introduction of the scheme. From the analysis, it appeared that some <b>front-end</b> <b>Loading</b> has had little impact on improving the cost overruns situation in the public sector of Norway. A set of projects were also reviewed individually, in order to identify the causes for cost overruns that are rooted in the <b>Front-End</b> <b>loading</b> scheme execution. Based on the insights gained during the research project, a number of recommendations is given to the academic community and public sector of Norway. To the Academic community of Norway:  Research the development of cost estimation between K 1 and K 2  Research to further document the effect of perverse incentives on the FEL practices  Improved sharing of public sector project related data between the different academic institutions of Norway  Research on how to improve the adaptation of the government FEL scheme by the different ministries, departments, municipalities and other governmental agents.  Research the effect of understanding risk on the decision-making process specifically for project in the public sector of Norway To the Public sector of Norway:  Early involvement of the external consultancy services  Increased transparency  Cost estimates based on uncertainty analysis  Improved attitude towards risk  Availability of a Database for reference projects as recommended by Merrow: reports should be easily accessible for all departments, ministries and other governmental agencies for sharing experiences...|$|R
5000|$|In the United States, a {{fund that}} calls itself [...] "no-load" [...] cannot charge a <b>front-end</b> <b>load</b> or {{back-end}} load under any circumstances and cannot charge a distribution and services fee greater than 0.25% of fund assets ...|$|E
50|$|Class A shares {{typically}} {{impose a}} front-end sales load. They {{also tend to}} have a lower 12b-1 fee and lower annual expenses than other mutual fund share classes. Be aware that some mutual funds reduce the <b>front-end</b> <b>load</b> as the size of your investment increases. If you're considering Class A shares, be sure to inquire about breakpoints.|$|E
5000|$|Back-end load. Some {{funds have}} a {{back-end}} load, which is {{paid by the}} investor when shares are redeemed. If the back-end load declines the longer the investor holds shares, it is called a contingent deferred sales charges (CDSC). Like the <b>front-end</b> <b>load,</b> the back-end load is paid by the investor; it is deducted from the redemption proceeds.|$|E
50|$|Front-End Engineering (FEE), or Front-End Engineering Design (FEED), is an {{engineering}} design approach {{used to control}} project expenses and thoroughly plan a project before a fix bid quote is submitted. It may also {{be referred to as}} Pre-project planning (PPP), <b>front-end</b> <b>loading</b> (FEL), feasibility analysis, or early project planning.|$|R
5000|$|The {{field will}} be {{developed}} by consortium of Repsol YPF (32.5%), Eni (32.5%), and PDVSA (35%). [...] The <b>front-end</b> <b>loading</b> {{will be carried out}} by Foster Wheeler. The field is expected to come onstream by the first half of 2013. [...] The development contract will be in force until 2036.|$|R
40|$|This paper {{shows how}} Mead’s theory of {{emergence}} can prove explanatory {{in how the}} theory-practice gap is co-created and sustained in <b>front-end</b> <b>loading</b> university programs. Taking teacher education as an exemplar, we argue that the trainee teacher encounters different and oft-times conflicting environmental, social and cultural conditions in the two “fields of interaction” of the training program, namely, on-campus work and in-school experience. The argument draws on interview and focus group data collected via a study of first-year graduate teachers of an Australian teacher education program. We conclude that role taking and self-regulated behaviour within the two environmental fields of interaction in <b>front-end</b> <b>loading</b> programs inhibit the trainee professional from exercising the power of agency to implement theory learned at university in practice in the workplace. Further, we propose that Mead’s theory of emergence proves effective in explaining a major limitation of front-end-loaded university programs...|$|R
5000|$|Often {{associated}} with class 'A' shares of a mutual fund. Also known as Sales Charge, {{this is a}} fee paid when shares are purchased. Also known as a [...] "front-end load," [...] this fee typically goes to the brokers that sell the fund's shares. Front-end loads {{reduce the amount of}} your investment. For example, let's say you have $1,000 and want to invest it in a mutual fund with a 5% <b>front-end</b> <b>load.</b> The $50 sales load you must pay comes off the top, and the remaining $950 will be invested in the fund. The Maximum sales load under the Investment Company Act of 1940 is 9%. The maximum sales load under NASD Rules is 8%.|$|E
40|$|Abstract—Modern {{computer}} applications, {{especially at}} enterprise-level, are commonly deployed {{with a big}} number of clustered instances to achieve a higher system performance, in which case single machine based solutions are less cost-effective. However, how to effectively manage these clustered applications has become a new challenge. A common approach is to deploy a <b>front-end</b> <b>load</b> balancer to optimise the workload distribution between each clustered application. Since then, many research efforts {{have been carried out}} to study effective load balancing algorithms which can control the workload based on various resource usages such as CPU and memory. The aim {{of this paper is to}} propose a new load balancing approach to improve the overall distributed system performance by avoiding potential performance impacts caused by Major Java Garbage Collection. The experimental results have shown that the proposed loa...|$|E
40|$|We {{argue that}} the {{purchase}} decisions of mutual fund investors are influenced by salient, attention-grabbing information. Investors are more sensitive to salient in-your-face fees, like front-end loads and commissions, than operating expenses; {{they are likely to}} buy funds that attract their attention through exceptional performance, marketing, or advertising. Our empirical analysis of mutual fund flows over the last 30 years yields strong support for our contention. We find consistently negative relations between fund flows and <b>front-end</b> <b>load</b> fees. We also document a negative relation between fund flows and commissions charged by brokerage firms. In contrast, we find no relation (or a perverse positive relation) between operating expenses and fund flows. Additional analyses indicate that mutual fund marketing and advertising, the costs of which are often We analyze the fees charged by mutual funds over the last several decades. Mutual funds have dramatically changed the way that they charge expenses. Th...|$|E
5000|$|Class A shares usually {{charge a}} <b>front-end</b> sales <b>load</b> {{together}} with a small distribution and services fee.|$|R
50|$|<b>Front-end</b> <b>loading</b> (FEL), also {{referred}} to as pre-project planning (PPP), front-end engineering design (FEED), feasibility analysis, conceptual planning, programming/schematic design and early project planning, is the process for conceptual development of projects in processing industries such as upstream, petrochemical, refining and pharmaceutical. This involves developing sufficient strategic information with which owners can address risk and make decisions to commit resources in order to maximize the potential for success.|$|R
50|$|A single {{mutual fund}} may give investors {{a choice of}} {{different}} combinations of <b>front-end</b> <b>loads,</b> back-end loads and distribution and services fee, by offering several different types of shares, known as share classes. All of them invest in the same portfolio of securities, but each has different expenses and, therefore, a different net asset value and different performance results. Some of these share classes may be available only to certain types of investors.|$|R
40|$|Today’s {{data centers}} host online {{services}} on multiple servers, with a <b>front-end</b> <b>load</b> balancer directing each client request {{to a particular}} replica. Dedicated load balancers are expensive and quickly become a {{single point of failure}} and congestion. The OpenFlow standard enables an alternative approach where the commodity network switches divide traffic over the server replicas, based on packet-handling rules installed by a separate controller. However, the simple approach of installing a separate rule for each client connection (or “microflow”) leads to a huge number of rules in the switches and a heavy load on the controller. We argue that the controller should exploit switch support for wildcard rules for a more scalable solution that directs large aggregates of client traffic to server replicas. We present algorithms that compute concise wildcard rules that achieve a target distribution of the traffic, and automatically adjust to changes in load-balancing policies without disrupting existing connections. We implement these algorithms on top of the NOX OpenFlow controller, evaluate their effectiveness, and propose several avenues for further research. ...|$|E
40|$|A Natural Experiment on Fund Flows and Performance In the 1990 s, a large {{majority}} of funds with front-end loads introduced additional share classes, which allowed investors to pay annual fees and/or back-end charges instead of frontend loads. The transition to a multiple-class structure provides a natural experiment with regard to investor clienteles and fund performance. We examine (a) whether the new fee structures increase fund cash flows by attracting investors with different investment horizons and sensitivities to performance; (b) whether changes in the volatility and level of fund flows induced by new investor clienteles affect fund performance — despite little change in fund management and investment objectives. Our finding is that the multiple-class funds, after controlling for performance and fund attributes, attract significantly more new money than the single-class funds. Consistent with the clientele hypothesis, investors in the new classes tend to have a shorter investment horizon and a greater sensitivity to fund performance than investors in the <b>front-end</b> <b>load</b> class. The downside to introducing the new classes, however, is a significant drop in fund performance, which erodes the cash flow benefit of the ne...|$|E
40|$|International audienceModern {{computer}} applications, {{especially at}} enterprise-level, are commonly deployed {{with a big}} number of clustered instances to achieve a higher system performance, in which case single machine based solutions are less cost-effective. However, how to effectively manage these clustered applications has become a new challenge. A common approach is to deploy a <b>front-end</b> <b>load</b> balancer to optimise the workload distribution between each clustered application. Since then, many research efforts {{have been carried out}} to study effective load balancing algorithms which can control the workload based on various resource usages such as CPU and memory. The aim {{of this paper is to}} propose a new load balancing approach to improve the overall distributed system performance by avoiding potential performance impacts caused by Major Java Garbage Collection. The experimental results have shown that the proposed load balancing algorithm can achieve a significant higher throughput and lower response time compared to the round-robin approach. In addition, the proposed solution only has a small overhead introduced to the distributed system, where unused resources are available to enable other load balancing algorithms together to achieve a better system performance...|$|E
40|$|This paper {{reports on}} a study into how the {{cultural}} expectations of the roles of students and teachers impact on the lived experience of higher education students. Specifically, the paper discusses ways in which academics and students perceive the theoretical and practical sides of the <b>front-end</b> <b>loading</b> programs {{in which they are}} involved. The paper takes an interdisciplinary and cross-cultural approach in drawing from data sets collected from students and staff in both a UK medicine program and also an Australian teacher education program. As such, it responds to the aim of the AARE-APERA conference to enrich global cooperation in educational research. Giddens’ (2003) sociological theory of “structuration” was selected as a framework for the study because it enables insight into how individuals make meaning and identity through their circumstances and endeavours. The theory provided useful in demonstrating how we understand, and thus educate for, the roles of professionals, including doctors and teachers, in society. The discussion and findings of the paper contribute to the international literature on professional culture and identity, work-integrated learning and the enactment of theory and practice in university <b>front-end</b> <b>loading</b> programs...|$|R
40|$|We {{investigate}} {{the relation between}} the performance and characteristics of 1, 779 domestic, actively managed retail equity mutual funds with diverse expense ratios. We show that using expense ratio standard deviation classes is an effective method for characterizing fund expenses for investors. Using various performance measures including Russell-index-adjusted returns, the results indicate that superior performance, on average, occurs among large funds with low expense ratios, low trading activity, and no or low <b>front-end</b> <b>loads.</b> Performance is invariant with respect to whether funds hav...|$|R
50|$|Mesa Petroleum {{had made}} a <b>front-end</b> <b>loaded</b> two-tiered hostile bid for Unocal Corporation in which the front end was $54 in cash, and {{the back end of}} the deal was $54 in junk bonds. Because most {{shareholders}} would prefer to receive the cash instead of the bonds, shareholders were expected to tender their shares into the deal, even if they did not think $54 was a fair price. If a shareholder declined to tender, that shareholder risked being cashed-out for $54 in risky debt instruments instead of cash.|$|R
40|$|International audienceHigh-Assurance {{applications}} usually require achieving {{fast response}} time and high throughput on a constant basis. To fulfil these stringent {{quality of service}} requirements, these applications are commonly deployed in clustered instances. However, how to effectively manage these clusters has become a new challenge. A common approach is to deploy a <b>front-end</b> <b>load</b> balancer to optimise the workload distribution among the clustered applications. Thus, researchers have been studying how to improve {{the effectiveness of a}} load balancer. Our previous work presented a novel load balancing strategy which improves the performance of a distributed Java system by avoiding the performance impacts of Major Garbage Collection, which is a common cause of performance degradation in Java applications. However, as that strategy used a static configuration, it could only improve the performance of a system if the strategy was configured with domain expert knowledge. This paper extends our previous work by presenting an adaptive GC-aware load balancing strategy which self-configures according to the GC characteristics of the application. Our results have shown that this adaptive strategy can achieve higher throughput and lower response time, compared to the round-robin load balancing,while also avoiding the burden of manual tuning...|$|E
40|$|When a user explores {{different}} {{web pages}} {{in a given}} website, the website typically sends the entire requested page even if {{only a portion of}} the page was different to the current page. That is, two pages on a given website might share elements on the page like search bar, left bar, navigation controls, advertisements, etc., but this information is retransmitted. Most of the users spent their time on the front-end while downloading all the components in the page. Nowadays, server-side caching of page elements is often done using tools like memcached. The aim of my project is to explore element web page caching on the client-side. That is, our goal is to develop a system that caches the most common html parts of web pages in the website and reuses them in the further web pages reducing the transmission data. This effect probably is currently attainable using frames or object tags; however, the actual UI meaning of these tags is different than one integrated HTML file and so could cause usability issues, therefore, we want to explore solutions which are transparent to the end user [...] the solution must behave just like a single fixed web page. In order to explore the advantage of having client-side caching and determine the effect on the response time, we made our server set-up as realistic as possible. So Squid, a <b>front-end</b> <b>load</b> balance, was used when we tested our client-side caching...|$|E
40|$|We {{argue that}} the {{purchase}} decisions of mutual fund investors are influenced by salient, attention-grabbing information. Investors are more sensitive to salient, in-your-face fees, like <b>front-end</b> <b>loads</b> and commissions, than operating expenses; they buy funds that attract their attention through exceptional performance, marketing, or advertising. We analyze mutual fund flows over the last 30 years and find negative relations between flows and front-end-load fees. In contrast, we find no relation between operating expenses and flows. Additional analyses indicate that marketing and advertising, the costs of which are often embedded in funds' operating expenses, account for this surprising result. ...|$|R
5000|$|Neither {{class of}} shares {{typically}} charges a <b>front-end</b> or back-end <b>load</b> ...|$|R
5000|$|Some {{mutual funds}} that charge <b>front-end</b> sales <b>loads</b> will charge lower sales loads for larger {{investment}}s. The investment levels required to obtain a reduced sales load are {{commonly referred to as}} [...] "breakpoints." ...|$|R
40|$|International Telemetering Conference Proceedings / September 28 - 30, 1982 / Sheraton Harbor Island Hotel and Convention Center, San Diego, CaliforniaThis paper {{deals with}} the use of preprocessors to reduce loading on {{real-time}} computers. The problem of multiplexing large amounts of data, exceeding the processing capabilities of most large-scale, real-time computers is discussed in detail. Implementation of hardware solutions to multiple Pulse Code Modulation (PCM) link multiplexing is dealt with. Use of firmware algorithms to reduce preprocessor <b>front-end</b> <b>loading,</b> as well as through-put reduction is discussed. The paper covers the different techniques used to take advantage of modern firmware preprocessor/multiplexers to select data for real-time computer processing...|$|R
5000|$|In the 1980s, SD {{became part}} of the Dempster Brothers company of the United States, and {{continued}} to trade, under the name [...] "Shelvoke Dempster", through the 1980s, although its product range diversified further into <b>front-end</b> <b>loading</b> dustcarts (based on Dempster's ubiquitous [...] "Dumpster" [...] system), as well as a licence-built version of Dempster's [...] "Routechief" [...] rear loading refuse body. The company was however plunging deeper into a financial crisis, {{and by the end of}} the 1980s, Dempster had pulled out. The remainder of the company was then absorbed into Dennis, and the [...] "Dennis-Shelvoke" [...] name continued briefly, but the company was effectively dead by 1992.|$|R
50|$|<b>Front-end</b> <b>loading</b> {{includes}} robust {{planning and}} design early in a project's lifecycle (i.e., {{the front end of}} a project), {{at a time when the}} ability to influence changes in design is relatively high and the cost to make those changes is relatively low. It typically applies to industries with highly capital intensive, long lifecycle projects (i.e., hundreds of millions or billions of dollars over several years before any revenue is produced). Though it often adds a small amount of time and cost to the early portion of a project, these costs are minor compared to the alternative of the costs and effort required to make changes at a later stage in the project.|$|R
40|$|AbstractPlanning {{a carbon}} capture and storage (CCS) project that meets {{economic}} criteria and minimizes risk requires {{a systematic analysis}} of the full-value chain, including capture, transport, storage, formation characteristics, well number and type, formation integrity, well integrity, and monitoring, as well as abandonment, government regulations, and public constraints. The complex process of planning a CCS project that meets multiple objectives and honors multiple constraints involves a large number and variety of decisions. This paper describes the use of <b>front-end</b> <b>loading</b> (FEL) and a fully-integrated asset model (IAM) to address these issues. It includes a study example of a coal-fired power plant and assessment of multiple storage sites, including saline aquifer and enhanced oil recovery candidates...|$|R
40|$|This study {{explores the}} {{mechanism}} of building an effective linkage among manufacturing practices that is a basic attribute of high performance manufacturing. High performance manufacturing companies are those that sustain high levels of performance over time. We propose a strategic management cycle, which explains how a firm establishes and maintains sustainable performance. We hypothesize and demonstrate how the cycle creates an effective linkage that integrates strategic activities and operational practices, which in turn yields high performance. We also argue and show how {{the first stage of}} the cycle, visionary planning, supported by the cross-functional culture, is a key to the high performance manufacturing company. Levered linkage of practices Strategic management cycle Cross-functional behavior <b>Front-end</b> <b>loading</b> High performance manufacturing...|$|R
50|$|Purchase Fee — A type of fee {{that some}} funds charge their {{shareholders}} when they buy shares. Unlike a <b>front-end</b> sales <b>load,</b> a purchase fee {{is paid to}} the fund (not to a Stockbroker) and is typically imposed to defray some of the fund's {{costs associated with the}} purchase.|$|R
5000|$|Simple DNS MX record based Mail Hub cluster with {{parallelism}} and <b>front-end</b> failover and <b>load</b> balancing {{is illustrated}} in the following diagram: ...|$|R
