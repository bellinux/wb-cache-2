11|43|Public
2500|$|The {{initiator}} can mark any {{data phase}} {{as the final}} one in a transaction by deasserting FRAME# {{at the same time}} as it asserts IRDY#. [...] The cycle after the target asserts TRDY#, the final data transfer is complete, both sides <b>deassert</b> their respective RDY# signals, and the bus is idle again. [...] The master may not <b>deassert</b> FRAME# before asserting IRDY#, nor may it <b>deassert</b> FRAME# while waiting, with IRDY# asserted, for the target to assert TRDY#.|$|E
2500|$|There {{will always}} be {{at least one more}} cycle after a target-initiated disconnection, to allow the master to <b>deassert</b> FRAME#. [...] There are two sub-cases, which take the same amount of time, but one {{requires}} an additional data phase: ...|$|E
2500|$|Normally, {{a target}} holds DEVSEL# {{asserted}} {{through the last}} data phase. [...] However, if a target deasserts DEVSEL# before disconnecting without data (asserting STOP#), this indicates a target abort, which is a fatal error condition. [...] The initiator may not retry, and typically treats it as a bus error. [...] Note that a target may not <b>deassert</b> DEVSEL# while waiting with TRDY# or STOP# low; it must do this {{at the beginning of}} a data phase.|$|E
5000|$|Soft-start circuit completes sequence; {{power-on}} {{reset circuit}} <b>deasserted</b> ...|$|R
50|$|A {{similar case}} can {{occur when the}} 8259 unmask and the IRQ input deassertion are not {{properly}} synchronized. In many systems, the IRQ input is <b>deasserted</b> by an I/O write, and the processor doesn't wait until the write reaches the I/O device. If the processor continues and unmasks the 8259 IRQ before the IRQ input is <b>deasserted,</b> the 8259 will assert INTR again. By the time the processor recognizes this INTR and issues an acknowledgment to read the IRQ from the 8259, the IRQ input may be <b>deasserted,</b> and the 8259 returns a spurious IRQ7.|$|R
2500|$|Due to {{the need}} for a {{turnaround}} cycle between different devices driving PCI bus signals, in general it is necessary to have an idle cycle between PCI bus transactions. [...] However, in some circumstances it is permitted to skip this idle cycle, going directly from the final cycle of one transfer (IRDY# asserted, FRAME# <b>deasserted)</b> to the first cycle of the next (FRAME# asserted, IRDY# <b>deasserted).</b>|$|R
50|$|The {{initiator}} can mark any {{data phase}} {{as the final}} one in a transaction by deasserting FRAME# {{at the same time}} as it asserts IRDY#. The cycle after the target asserts TRDY#, the final data transfer is complete, both sides <b>deassert</b> their respective RDY# signals, and the bus is idle again. The master may not <b>deassert</b> FRAME# before asserting IRDY#, nor may it <b>deassert</b> FRAME# while waiting, with IRDY# asserted, for the target to assert TRDY#.|$|E
5000|$|The {{initiator}} must <b>deassert</b> FRAME# two cycles {{before the}} end of the transaction.|$|E
5000|$|There {{will always}} be {{at least one more}} cycle after a target-initiated disconnection, to allow the master to <b>deassert</b> FRAME#. There are two sub-cases, which take the same amount of time, but one {{requires}} an additional data phase: ...|$|E
50|$|Equipment {{using this}} {{protocol}} {{must be prepared}} to buffer some extra data, since the remote system may have begun transmitting just before the local system <b>deasserts</b> RTR.|$|R
5000|$|If the {{initiator}} observes STOP# before asserting its own IRDY#, {{then it can}} end {{the burst}} by <b>deasserting</b> FRAME# {{at the end of}} the current data phase.|$|R
25|$|The REQ64# and ACK64# {{lines are}} held {{asserted}} {{for the entire}} transaction save the last data phase, and <b>deasserted</b> {{at the same time}} as FRAME# and DEVSEL#, respectively.|$|R
50|$|Modern {{communications}} environments use full-duplex (both directions simultaneously) modems. In that environment, DTEs have {{no reason}} to <b>deassert</b> RTS. However, due to the possibility of changing line quality, delays in processing of data, etc., {{there is a need for}} symmetric, bidirectional flow control.|$|E
5000|$|Given {{support of}} -before- refresh, it is {{possible}} to <b>deassert</b> [...] while holding [...] low to maintain data output. If [...] is then asserted again, this performs a CBR refresh cycle while the DRAM outputs remain valid. Because data output is not interrupted, this is known as hidden refresh.|$|E
5000|$|Normally, {{a target}} holds DEVSEL# {{asserted}} {{through the last}} data phase. However, if a target deasserts DEVSEL# before disconnecting without data (asserting STOP#), this indicates a target abort, which is a fatal error condition. The initiator may not retry, and typically treats it as a bus error. Note that a target may not <b>deassert</b> DEVSEL# while waiting with TRDY# or STOP# low; it must do this {{at the beginning of}} a data phase.|$|E
50|$|TRDY# and STOP# are <b>deasserted</b> (high) {{during the}} address phase. The {{initiator}} may assert IRDY# {{as soon as}} it is ready to transfer data, which could theoretically be as soon as clock 2.|$|R
25|$|If the {{initiator}} observes STOP# before asserting its own IRDY#, {{then it can}} end {{the burst}} by <b>deasserting</b> FRAME# {{at the same time}} as it asserts IRDY#, ending the burst after the current data phase.|$|R
25|$|A {{data phase}} with all four C/BE# lines <b>deasserted</b> is {{explicitly}} permitted by the PCI standard, {{and must have}} no effect on the target other than to advance the address in the burst access in progress.|$|R
50|$|A simple PoR {{uses the}} {{charging}} of a capacitor, {{in series with}} a resistor, to measure a time period during which {{the rest of the}} circuit is held in a reset state. A Schmitt trigger may be used to <b>deassert</b> the reset signal cleanly, once the rising voltage of the RC network passes the threshold voltage of the Schmitt trigger. The resistor and capacitor values should be determined so that the charging of the RC network takes long enough that the supply voltage will have stabilised by the time the threshold is reached.|$|E
5000|$|The {{original}} ("flat") Commodore 128 {{used the}} 8563 video controller {{to generate the}} 80 column display. The 8568 was essentially {{an updated version of}} the 8563, combining the latter's functionality with glue logic that had been implemented by discrete components in physical proximity to the 8563. Unlike the 8563, the 8568 included an unused (in the C-128) active low interrupt request line (/INTR), which was asserted when the [...] "ready" [...] bit in the 8568's status register changed from 0 to 1. Reading the control register would automatically <b>deassert</b> /INTR. Owing to differences in pin assignments and circuit interfacing, the 8563 and 8568 are not electrically interchangeable.|$|E
5000|$|To queue {{a request}} in-band, the card must request the bus using the {{standard}} PCI REQ# signal, and receive GNT# plus bus status ST2:0 equal to [...] Then the card asserts the PIPE# signal while driving the AGP command, address, and length on the C/BE3:0, AD31:3 and AD2:0 lines, respectively. (If {{the address is}} 64 bits, a dual address cycle similar to PCI is used.) For every cycle that PIPE# is asserted, the card sends another request without waiting for acknowledgement from the motherboard, up to the configured maximum queue depth. The last cycle is marked by <b>deasserting</b> REQ#, and PIPE# is <b>deasserted</b> on the following idle cycle.|$|R
50|$|At AGP 4× and 8× speeds, it is {{possible}} for a request to complete {{in the middle of a}} clock cycle. In such a case, the cycle is padded with dummy data transfers (with the C/BE# byte enable lines held <b>deasserted).</b>|$|R
50|$|By default, when a modem {{is powered}} up, the DCD signal is <b>de{{asserted}}.</b> It is not asserted until the modem either makes an outgoing call, or answers an incoming call, and then connects with a data modem {{on the other}} end. The signal is asserted {{at the same time}} the modem reports its CONNECT message, and stays asserted until the call is disconnected (either intentionally or because of a fault in the line). DCD is <b>deasserted</b> once the local modem is no longer receiving carrier from the remote modem, regardless of which side initiated the disconnect. So long as the DCD signal is high, the computer can assume that any data coming from the modem was sent from the remote side.|$|R
2500|$|If the {{initiator}} {{has already}} asserted IRDY# (without <b>deasserting</b> FRAME#) {{by the time}} it observes the target's STOP#, it is committed to an additional data phase. [...] The target must wait through an additional data phase, holding STOP# asserted without TRDY#, before the transaction can end.|$|R
50|$|The arbiter {{may also}} provide GNT# at any time, {{including}} during another master's transaction. During a transaction, either FRAME# or IRDY# or both are asserted; when both are <b>deasserted,</b> {{the bus is}} idle. A device may initiate a transaction at any time that GNT# is asserted and the bus is idle.|$|R
5000|$|The {{difference}} lies in {{the time}} needed to output the signal. When chip select is <b>deasserted,</b> the chip does not operate internally, {{and there will be a}} significant delay between providing an address and receiving the data. (An advantage of course, is that the chip consumes minimal power in this case.) ...|$|R
5000|$|The target {{requests}} the initiator end a burst {{by asserting}} STOP#. The initiator will then end the transaction by <b>deasserting</b> FRAME# {{at the next}} legal opportunity; if it wishes to transfer more data, it {{will continue in a}} separate transaction. There are several ways for the target to do this: ...|$|R
5000|$|To be precise, EDO DRAM begins {{data output}} on the falling edge of , {{but does not}} stop the output when [...] rises again. It holds the output valid (thus {{extending}} the data output time) until either [...] is <b>deasserted,</b> or a new [...] falling edge selects a different column address.|$|R
2500|$|The arbiter {{may also}} provide GNT# at any time, {{including}} during another master's transaction. During a transaction, either FRAME# or IRDY# or both are asserted; when both are <b>deasserted,</b> {{the bus is}} idle. [...] A device may initiate a transaction at any time that GNT# is asserted and the bus is idle.|$|R
2500|$|The target {{requests}} the initiator end a burst {{by asserting}} STOP#. [...] The initiator will then end the transaction by <b>deasserting</b> FRAME# {{at the next}} legal opportunity; if it wishes to transfer more data, it {{will continue in a}} separate transaction. [...] There are several ways for the target to do this: ...|$|R
5000|$|For each cycle {{when the}} GNT# is {{asserted}} {{and the status}} bits have the value , a read response of the indicated priority {{is scheduled to be}} returned. At the next available opportunity (typically the next clock cycle), the motherboard will assert TRDY# (target ready) and begin transferring the response to the oldest request in the indicated read queue. (Other PCI bus signals like FRAME#, DEVSEL# and IRDY# remain <b>deasserted.)</b> Up to four clock cycles worth of data (16 bytes at AGP 1× or 128 bytes at AGP 8×) are transferred without waiting for acknowledgement from the card. If the response is longer than that, both the card and motherboard must indicate their ability to continue on the third cycle by asserting IRDY# (initiator ready) and TRDY#, respectively. If either one does not, wait states will be inserted until two cycles after they both do. (The value of IRDY# and TRDY# at other times is irrelevant and they are usually <b>deasserted.)</b> ...|$|R
2500|$|On {{the sixth}} cycle, {{if there has}} been no response, the {{initiator}} may abort the transaction by <b>deasserting</b> FRAME#. [...] This is known as master abort termination and it is customary for PCI bus bridges to return all-ones data (0xFFFFFFFF) in this case. [...] PCI devices therefore are generally designed to avoid using the all-ones value in important status registers, so that such an error can be easily detected by software.|$|R
2500|$|For CPHA=1, the [...] "out" [...] side {{changes the}} data {{on the leading edge}} of the current clock cycle, while the [...] "in" [...] side captures {{the data on}} (or shortly after) the {{trailing}} edge of the clock cycle. [...] The out side holds the data valid until {{the leading edge of the}} following clock cycle. [...] For the last cycle, the slave holds the MISO line valid until slave select is <b>deasserted.</b>|$|R
50|$|Additional timing {{constraints}} {{may come}} from the need to turn around are the target control lines, particularly DEVSEL#. The target <b>deasserts</b> DEVSEL#, driving it high, in the cycle following the final data phase, which {{in the case of}} back-to-back transactions is the first cycle of the address phase. The second cycle of the address phase is then reserved for DEVSEL# turnaround, so if the target is different from the previous one, it must not assert DEVSEL# until the third cycle (medium DEVSEL speed).|$|R
50|$|The {{only minor}} {{exception}} {{is a master}} abort termination, when no target responds with DEVSEL#. Obviously, it is pointless to wait for TRDY# in such a case. However, even in this case, the master must assert IRDY# {{for at least one}} cycle after <b>deasserting</b> FRAME#. (Commonly, a master will assert IRDY# before receiving DEVSEL#, so it must simply hold IRDY# asserted for one cycle longer.) This is to ensure that bus turnaround timing rules are obeyed on the FRAME# line.|$|R
2500|$|Additional timing {{constraints}} {{may come}} from the need to turn around are the target control lines, particularly DEVSEL#. [...] The target <b>deasserts</b> DEVSEL#, driving it high, in the cycle following the final data phase, which {{in the case of}} back-to-back transactions is the first cycle of the address phase. [...] The second cycle of the address phase is then reserved for DEVSEL# turnaround, so if the target is different from the previous one, it must not assert DEVSEL# until the third cycle (medium DEVSEL speed).|$|R
