0|11|Public
50|$|After {{the victory}} of the Change and Reform list (led by Hamas) in the 2006 elections, many governments, {{including}} the United States, as well as the European Union, cut ties with the organs of the PLC, but not those connected to the PNA President, Mahmoud Abbas. The boycott led to the withholding of foreign aid, upon which much of the Palestinian economy is <b>dependent,</b> <b>promised</b> to the PNA. The European Union set up a mechanism to transfer some aid to PNA employees, many of whom had gone unpaid for months, that bypassed the government. After Abbas' sacking of Prime Minister Ismail Haniya as a response by Hamas' takeover of the Gaza Strip in June 2007, the boycott was lifted.|$|R
50|$|The line {{opened on}} 31 August 1840. It crossed very thinly {{populated}} moorland, {{and it was}} <b>dependent</b> on <b>promised</b> mineral extraction on its own route, but this proved disappointing, and traffic was limited by the extended route over other railways westward, and transshipment to the canal eastward. It was never successful commercially, and in 1848 it combined with other companies, forming the Monkland Railways.|$|R
40|$|The article {{examines}} different attempts to analyse the Christian men's movement, Promise Keepers, and the fatherhood responsibility movement. Complexity {{used as an}} argument to abandon {{the search for a}} gender ideology in the movements is criticized. Despite the presence of complex features, for example, regarding Promise Keepers' view on gender roles in the family, there are common assumptions of gender. These assumptions are found in the very conception of the movement: in the "society-in-a-moral-crisis" argument. Here, men are actors and women are passively <b>dependent</b> on men. <b>Promise</b> Keepers' "soft" pragmatism and use of feminist rhetoric disguise this gender politics within the movement...|$|R
50|$|On September 30, 2014, a {{press conference}} was held in Beacon Park Yard to {{announce}} that the station would be constructed {{in concert with the}} Turnpike straightening. The cost of the $25 million station will be split between Harvard University, the state, and a third party to be determined. In March 2015, the Boston Globe revealed that Boston University was to have been the final third; however, this was not finalized before Deval Patrick left office. BU's contribution would be <b>dependent</b> on a <b>promise</b> that automobile and bus traffic would not travel through BU's West Campus to reach the station, and instead use new roads being constructed during the Beacon Park project.|$|R
40|$|International audienceFull-spectrum <b>dependent</b> types <b>promise</b> {{to enable}} the {{development}} of correct-by-construction software. However, even certified software needs to interact with simply-typed or untyped programs, be it to perform system calls, or to use legacy libraries. Trading static guarantees for runtime checks, the dependent interoperability framework provides a mechanism by which simply-typed values can safely be coerced to dependent types and, conversely, dependently-typed programs can defensively be exported to a simply-typed application. In this paper, we give a semantic account of dependent interoperability. Our presentation relies on and is guided by a pervading notion of type equivalence, whose importance has been emphasized in recent work on homotopy type theory. Specifically, we develop the notion of partial type equivalences as a key foundation for dependent interoperability. Our framework is developed in Coq; it is thus constructive and verified in the strictest sense of the terms. Using our library, users can specify domain-specific partial equivalences between data structures. Our library then {{takes care of the}} (sometimes, heavy) lifting that leads to interoperable programs. It thus becomes possible, as we shall illustrate, to internalize and hand-tune the extraction of dependently-typed programs to interoperable OCaml programs within Coq itself...|$|R
40|$|In {{categorisation}} tasks, such as lexical decision, {{the standard}} dependent measure in cognitive psychology is mean reaction time (RT). While mean RTs are certainly informative, {{they are relatively}} insensitive to {{the dynamics of the}} categorisation process under investigation. To address this, some researchers have begun using reaching trajectories as their <b>dependent</b> measure. The <b>promise</b> of this continuous measure is that it can reveal effects while stimulus processing is still unfolding. In this talk I will discuss a series of experiments in which we use reaching trajectories to investigate the effects of spatial and temporal attention in two different categorisation tasks: lexical decision and face (male/female) categorisation. Replicating earlier work, our results indicate strong modulatory effects of attention on stimulus categorisation. Looking at the time course of these modulatory effects, we see that they arise very early (~ 200 ms) and that they are remarkably short-lived. 1 page(s...|$|R
40|$|My {{research}} {{focuses on}} the design of statically-typed programming languages. Static type systems are a popular, cost-effective form of lightweight program verification. They provide a tractable and modular way for programmers to express properties that can be mechanically checked by the compiler. As a result, the compiler can rule out a wide variety of errors and provide more information to refactoring and development tools. For example, systems written with type-safe languages cannot be compromised by buffer overruns if all array accesses are statically proven safe. Furthermore, programmers can modify their code with the assurance that they have not violated critical safety properties. I explore these designs in the context of functional programming languages, such as Haskell and ML. Functional programming languages are an ideal context for type system research; they excel in their capabilities for static reasoning. However, there is need for improvement. Some programming idioms must be ruled out simply because they cannot be shown to be sound by existing type systems. To overcome these limitations, my work investigates type system features in the context of both new languages and existing ones, and evaluates those designs with respect to both theory and practice. Trellys: Dependently-typed language design <b>Dependent</b> types <b>promise</b> to dramatically increase the effectiveness of static type systems. They work by allowing types to depend on program values, enabling specifications that are both more flexible and more precise. However, even though dependent type theory has been well studied as a foundation for logical reasoning, these type systems have been little used in practical programming languages...|$|R
40|$|Full-spectrum <b>dependent</b> types <b>promise</b> {{to enable}} the {{development}} of correct-by-construction software. However, even certified software needs to interact with simply-typed or untyped programs, be it to perform system calls, or to use legacy libraries. Trading static guarantees for runtime checks, the dependent interoperability framework provides a mechanism by which simply-typed values can safely be coerced to dependent types and, conversely, dependently-typed programs can defensively be exported to a simply-typed application. In this article, we give a semantic account of dependent interoperability. Our presentation relies on and is guided by a pervading notion of type equivalence, whose importance has been emphasized in recent work on homotopy type theory. Specifically, we develop the notion of type-theoretic partial Galois connections as a key foundation for dependent interoperability, which accounts for the partiality of the coercions between types. We explore the applicability of both monotone and antitone type-theoretic Galois connections {{in the setting of}} dependent interoperability. A monotone partial Galois connection enforces a translation of dependent types to runtime checks that are both sound and complete with respect to the invariants encoded by dependent types. Conversely, picking an antitone partial Galois connection instead lets us induce weaker, sound conditions that can amount to more efficient runtime checks. Our framework is developed in Coq; it is thus constructive and verified in the strictest sense of the terms. Using our library, users can specify domain-specific partial connections between data structures. Our library then takes care of the (sometimes, heavy) lifting that leads to interoperable programs. It thus becomes possible, as we shall illustrate, to internalize and hand-tune the extraction of dependently-typed programs to interoperable OCaml programs within Coq itself...|$|R
40|$|The {{present study}} was planned to explore the {{influence}} of total peripheral lymphocyte count in cancer patients and to ascertain its prognostic significance. 100 cases were divided into 2 groups: test group comprised of 75 cancerous cases and control group of 25 cases who did not suffer from any problem known to alter the immune status. After a detailed clinical history and examination, routine investigations and certain specific investigations like ultra-sonography, intravenous pyelography, computed tomography, fine needle aspiration cytology and histopathology were performed. Total Leukocyte Count (TLC) using Turk’s fluid was performed along with differential count from peripheral smear and Total Peripheral Lymphocyte Count (TPLC) was calculated by the formula: TPLC = TLC x percentage of lymphocytes in differential count. Majority of the malignant cases belonged to the fifth decade. Histologically, carcinoma was most frequent, 92. 0 % cases, followed by sarcoma, 6. 6 % and melanoma, 1. 3 % cases. The mean TPLC in the control group was 2759. 12 ± 955. 7 and it was significantly depressed in all the malignant cases. In breast carcinoma, TPLC was found to decrease with disease progression and was stage <b>dependent.</b> TPLC shows <b>promise</b> as a diagnostic and prognostic indicator of malignancy...|$|R
40|$|Programming {{languages}} {{based on}} <b>dependent</b> type theory <b>promise</b> two great advances: flexibility and security. With the type-level computation afforded by dependent types, algorithms {{can be more}} generic, as the type system can express flexible interfaces via programming. Likewise, type-level computation can also express data structure invariants, so that programs can be proved correct through type checking. Furthermore, despite these extensions, programmers already know everything. Via the Curry-Howard isomorphism, the language of type-level computation and the verification logic is the programming language itself. There are two current approaches {{to the design of}} dependently-typed languages: Coq, Epigram, Agda, which grew out of the logics of proof assistants, require that all expressions terminate. These languages provide decidable type checking and strong correctness guarantees. In contrast, functional programming languages, like Haskell and Omega, have adapted the features dependent type theories, but retain a strict division between types and programs. These languages trade termination obligations for more limited correctness assurances. In this talk, I present a work-in-progress overview of the Trellys project. Trellys is new core language, designed to provide a smooth path from functional programming to dependently-typed programming. Unlike traditional dependent type theories and functional languages, Trellys allows programmers to work with total and partial functions uniformly. The language itself is composed of two fragments that share a common syntax and overlapping semantics: a simple logical language that guarantees total correctness and an expressive call-by-value programming language that guarantees types safety but not termination. Importantly, these two fragments interact. The logical fragment may soundly reason about effectful, partial functions. Program values may be used as evidence by the logic. We call this principle freedom of speech: whereas proofs themselves must terminate, they must be allowed to reason about any function a programmer might write. To retain consistency, the Trellys type system keeps track of where potentially non-terminating computations may appear, so that it can prevent them from being used as proofs...|$|R
40|$|Metallic {{nanoparticles}} and nanostructures have exceptional magnetic, optical or catalytic size <b>dependent</b> {{properties that}} <b>promise</b> wide industrial applications [1 3]. Nanoparticles {{can be produced}} by various chemical [1] and physical [4] methods on surfaces or in {{a great variety of}} matrices. Nanoclusters grown in solution need a kind of charge or steric stabilization to avoid coalescence or agglomeration, for which, e. g., microemulsions, inverse micelles or organic layers are used. Current research is focusing on exploring the mechanisms of nanoparticle formation in solution [5 8] and in glassy matrices [9]. Glass is generally the perfect matrix for many optical devices. Outstanding future applications like cloaking devices as well as other photonic applications require precise control of the position, size and shape of metallic nanoparticles, for example, of gold in glass [10, 11]. Especially gold nanoparticles encapsulated in glass can be produced by doping the glass with Au ions first, reducing the ions to atoms and subsequent precipitation at elevated temperature. Such a procedure has been used to produce colorful glass since antiquity [10, 12]. However, it is generally not straightforward to control the size and spatial arrangement of nanoparticles in glassy matrices. The classic process of gold particle formation in glass requires elevated temperatures and annealing times of 20 or more hours. Very recently it was reported, that x ray irradiation of the glass at room temperature prior to the annealing step significantly shortens the time to 20 minutes or less necessary for the precipitation and leads to a larger number density of particles with much smaller sizes [13] down to dimers or even neutral atoms [14]. This provides a unique opportunity for additional control over the precipitation process. Applying also lithographic techniques, even patterns of areas of nanoparticles can be produced [15]. An initially supersaturated solution is unstable and separates a phase containing the solute whenever the kinetic conditions allow it. The separation proceeds by nucleation and growth processes that normally occur simultaneously at the beginning. If the growth is diffusion limited, then the average radius of the particles grows proportionally to t 1 2, with t being the time. Both, the number density of nuclei and the volume fraction increase. Usually, the nucleation rate drops fast with decreasing supersaturation, but the growth continues until the critical particle size becomes comparable with the largest clusters in the system. The equilibrium solubility of the solute with a curved surface of the newly formed phase depends on the radius of curvature; the higher the curvature the higher the solubility. This difference makes the smaller, compared to some critical cluster size, particles dissolve and the larger one s grow. The volume fraction of the precipitating phase remains constant; the average radius continues to increase while the number of nuclei decreases. This process is called Ostwald ripening. In its asymptotic stage, the average radii of the particles will increase proportionally to t 1 3 diffusional limitation. Depending on the kinetic parameters a transition period between the nucleation growth regime and the 1 3 power law may exist during which the average radius does not increase significantly and reshaping of the size distribution occurs, see Figs. 4 and 6 in Ref. [16]. Here we show that the number and size of gold nanoparticles in soda lime silicate glass can be controlled by x ray irradiation and annealing. We compare two types of glass sample irradiation treatments; preliminary x ray irradiation and subsequent annealing ex situ and x ray irradiation during annealing in situ. As a result we show that the in situ annealing process affects the growth mechanism in the ripening stage of gold cluster formation. Mobile gold atoms, generated by irr...|$|R

