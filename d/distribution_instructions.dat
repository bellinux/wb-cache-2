5|58|Public
50|$|CSIAC's library {{facilitates}} {{knowledge sharing}} between diverse groups and organizations, and all STI is readily {{accessible to the}} IA/DIO community within the classification and secondary <b>distribution</b> <b>instructions.</b>|$|E
5000|$|... "Dear Colleague" [...] letters sent through {{internal}} mail must {{be written}} on official letterhead, address official business, and be signed by a Member or officer of Congress. A cover letter must accompany the [...] "Dear Colleague" [...] letter, {{addressed to the}} deputy chief administrative officer of the House for customer solutions, with specific <b>distribution</b> <b>instructions</b> and authorization as to the number to be distributed. The deadline for morning distribution is 9:45 a.m. and for afternoon mail delivery 1:45 p.m.|$|E
5000|$|Similar to the House paper system, [...] "Dear Colleague" [...] {{letters in}} the Senate are written on {{official}} letterhead and address official business, {{but there is not}} a central distribution policy. In general, when using the paper system, Senators and chamber officers create their own [...] "Dear Colleague" [...] letters and have them reproduced at the Senate Printing Graphics and Direct Mail Division. Once reproduced, letters are delivered to the Senate Mailroom by the sending office, accompanied by a distribution form or cover letter with specific <b>distribution</b> <b>instructions.</b>|$|E
40|$|Jsim/ {{directory}} contents: Jsim_license. html - this license {{applies to}} all files in the jsim/ directory JSim_linux_ 2 _ 12. zip - binary Linux distribution JSim_macos_ 2 _ 12. zip - binary MacOS distribution JSim_src_ 2 _ 12. zip - source distribution JSim_win 32 _ 2 _ 12. zip - binary Windows distribution linux. html - Linux binary <b>distribution</b> installation <b>instructions</b> macos. html - MacOS binary <b>distribution</b> installation <b>instructions</b> source. html - Source <b>distribution</b> build <b>instructions</b> win 32. html - Windows binary <b>distribution</b> installation <b>instructions</b> models/ directory contents: BeelerReuter 77. proj - JSim project used in performance analysis section BTEX 20 simple. mod - model code BTEX 20 simple. proj - JSim project for model figure generation BTEX 30. proj - JSim project used in performance analysis section CTEX 30. proj - JSim project used in performance analysis section MM 2 irrev. mod - model code MM 2 Substrate_irrevers. proj - JSim project for model figure generation model_license. txt - this licensWinslow_Rice_Jafri 1999. proje {{applies to all}} files in the models/ directory. Winslow_Rice_Jafri 1999. proj - JSim project used in performance analysis sectio...|$|R
5000|$|In 1997, Congress voted {{unanimously}} to add an amendment to a Department of Defense spending bill (known as the Feinstien amendment) forbidding the <b>distribution</b> of <b>instructions</b> that teach [...] "the making or use of an explosive, a destructive device, or {{a weapon of mass}} destruction" [...] if those instructions are intended to assist in the actual building and use of such a device.|$|R
40|$|Solidarity caution, a {{constraint}} {{for development}} of cotton cultivation {{in the region of}} Sikasso in Mali. Accompaniment finance institutions of cotton production have claimed cotton producers cooperatives societies (CPCS) to be the credit guarantee. From this collective guarantee, will appear the weaken operators in the (CPCS). So, the inability of these producers to reimburse their credit before the income distribution day push the (CPCS) to adopt a multitude distribution approa ches of cotton profit. The consequences of these approaches on the production are very patient now. The aim of this matter is to analyse distribution approaches of (CPCS) cotton profit by demonstrating their consequences on the cotton plant culture. Fo ur i nvestigations in the field have been undertaken. They have proved the cotton activity abandon by an important portion of producers (creditors and debtors). In one’s knows, the reduction of cotton culture surfaces is made by producers (creditors and debtors) to simply maintain themselves in the cotton operators register. The revising of credit <b>distribution</b> <b>instruction</b> to producers has been planned as a solution for the cotton culture spinning...|$|R
40|$|Designing and {{maintaining}} a distributed system requires consideration of dependencies and invariants in the system's model. This paper suggests expressing distribution decisions in the system model based on the system's context. Hence, UML is enriched by two new specification techniques for planning distribution: On the one hand, `Context properties' describe dependencies on the design level between otherwise possibly unrelated model elements, which share the same context. On the other hand, `context-based distribution instructions' specify distribution decisions based on context properties. The distribution language `ConDIL' combines both techniques. It consists of four layers introduced informally via examples taken from a case study. Keywords: Designing Distributed Systems, System Evolution, Design Rationale, Resource Management Published: in Proceedings of 2 nd EDO in Davis, California in November 2000 on page 61 [...] 79 of LNCS Nr. 1999 c # Springer Verlag Renamed: In all later publications the `context-based <b>distribution</b> <b>instructions</b> ' are called `context-based distribution constraints', and `ConDIL', is called `DCL' (Distribution Constraint Lanuage). ...|$|E
5000|$|Services {{provided}} include {{oral hygiene}} <b>instruction,</b> <b>distribution</b> of free toothbrush and fluoride toothpaste, application of fluoride gel, application of sealant, screening and charting out treatment plan under a supervising dentist, scaling, filling, extraction, prescribing medicine, and free dispensing distributing medicines ...|$|R
40|$|An {{authoritative}} {{and quantitative}} approach to modern game theory with applications from diverse areas including economics, political science, military science, and finance. Explores areas {{which are not}} covered in current game theory texts, including a thorough examination of zero-sum game. Provides introductory material to game theory, including bargaining, parlour games, sport, networking games and dynamic games. Explores Bargaining models, discussing new result such as resource <b>distributions,</b> buyer-seller <b>instructions</b> and reputation in bargaining models. Theoretical results are presented alon...|$|R
50|$|Since {{the branch}} itself will {{generally}} {{not be the}} last instruction in an aligned group, instructions after the taken branch (or its delay slot) will be discarded. Once again assuming a uniform <b>distribution</b> of branch <b>instruction</b> placements, 0.5, 1.5, and 3.5 instructions fetched are discarded.|$|R
40|$|Safely meeting Worst Case Energy Consumption (WCEC) {{criteria}} requires accurate energy {{modeling of}} software. We investigate {{the impact of}} instruction operand values upon energy consumption in cacheless embedded processors. Existing instruction-level energy models typically use measurements from random input data, providing estimates unsuitable for safe WCEC analysis. We examine probabilistic energy <b>distributions</b> of <b>instructions</b> and propose a model for composing <b>instruction</b> sequences using <b>distributions,</b> enabling WCEC analysis on program basic blocks. The worst case is predicted with statistical analysis. Further, we verify that the energy of embedded benchmarks can be characterised as a distribution, and compare our proposed technique with other methods of estimating energy consumption...|$|R
40|$|MATRIX is a novel, coarse-grain, {{reconfigurable}} computing architecture {{which supports}} configurable <b>instruction</b> <b>distribution.</b> Device resources are allocated to controlling and describing the computation {{on a per}} task basis. Application-specific regularity allows us to compress the resources allocated to <b>instruction</b> control and <b>distribution,</b> in many situations yielding more resources for datapaths and computations. The adaptability is {{made possible by a}} multi-level configuration scheme, a unified configurable network supporting both datapaths and <b>instruction</b> <b>distribution,</b> and a coarse-grained building block which can serve as an instruction store, a memory element, or a computational element. In a 0. 5 CMOS process, the 8 -bit functional unit {{at the heart of the}} MATRIX architecture has a footprint of roughly 1. 5 mm 1. 2 mm, making single dies with over a hundred function units practical today. At this process point, 100 MHz operation is easily achievable, allowing MATRIX components to deliver on the order of 10 Gop/s (8 -bit ops). ...|$|R
40|$|This paper {{summarizes}} ongoing {{research on}} polymorphic viruses and their detection. Our basic {{hypothesis is that}} polymorphic viruses that use a code-substitution mutation method (e. g. the Mutation Engine), the <b>distribution</b> of various <b>instruction</b> types (moves, branches, arithmetic, etc.) changes with each succeeding generation of the virus. Hence, {{it may be possible}} to detect the existence of a polymorphic virus by detecting shifts in <b>instruction</b> <b>distributions</b> in programs stored in a computer. 1. Introduction A computer virus is a program that can replicate and infect other programs by modifying them to include a, possibly evolved, version of itself [Coh 87]. A virus infects another file by attaching a copy of itself (its replicate) onto another (uninfected) file. That replicated virus and its parent may continue to infect other files. The rate of infection may grow exponentially. A polymorphic virus employs mutation to create replicates which are different (code-wise) than itself. Virus [...] ...|$|R
40|$|Approved {{for public}} release; <b>distribution</b> unlimitedNAVMAT <b>Instruction</b> 5200. 37 of 24 September 1973 {{required}} a Management by Objectives (MBO) {{program to be}} initiated throughout the Naval Material establishment. The Pacific Missile Range (PMR) at Point Mugu, California requested assistance from the Naval Postgraduate School in establishing their MBO program. A pilot MBO program was established at PMR to determine MBO • s feasibility in a research and development (R§D) organization. Due to time constraints, the program {{was limited to the}} implementation of short range goals and objectives. Although R§D objectives for work of an innovative nature were often difficult to define and measure, preliminary results indicate that the concept of MBO can be effectively applied to an R&D activity. [URL]...|$|R
40|$|This paper {{examines}} {{a set of}} commercially representative embedded {{programs and}} compares them to an existing benchmark suite, SPEC 2000. A new version of SimpleScalar that has been adapted to the ARM instruction set is used to characterize {{the performance of the}} benchmarks using configurations similar to current and next generation embedded processors. Several characteristics distinguish the representative embedded programs from the existing SPEC benchmarks including <b>instruction</b> <b>distribution,</b> memory behavior, and available parallelism. The embedded benchmarks, called MiBench, are freely available to all researchers. 1...|$|R
40|$|While {{traditional}} {{parallel computing}} systems {{are still struggling}} to gain a wider acceptance, the largest parallel computer that has ever been available is currently growing with the communication resource Internet. Unfortunately it is also rarely used in the parallel computation eld. The reason for the rejection of parallel computers is mainly the diculty of parallel programming. In this paper we propose the Self Distributing Associative ARChitecture (SDAARC). It has been derived from the Cache Only Memory Architecture (COMA). COMAs provide a distributed shared memory (DSM) with automatic distribution of data. We show how this paradigm of data distribution can be extended to the automatic <b>distribution</b> of <b>instruction</b> sequences (microthreads). We show how microthreads can be extracted from legacy C code to produce code that can automatically be parallelized by SDAARC at run time. We also discuss how SDAARC can be implemented on a tightly coupled multiprocessor system, o [...] ...|$|R
5|$|After {{returning}} to Britain in 1883, Louise continued {{to take an}} interest in Canada. During the North-West Rebellion of 1885 she sent a certain Dr. Boyd with medical supplies and a large fund of money for <b>distribution.</b> Her express <b>instructions</b> were that assistance was to be rendered to friend and foe indiscriminately. To fulfill her wishes, Boyd accompanied the Militia Medical Staff, under Dr. Thomas Roddick to the sites of the Battle of Fish Creek and the Battle of Batoche to help give medical treatment to the wounded, including the Métis opposition.|$|R
40|$|MiBench: A free, commercially {{representative}} embedded benchmark suite This paper examines {{a set of}} commercially representative embedded {{programs and}} compares them to an existing benchmark suite, SPEC 2000. A new version of SimpleScalar that has been adapted to the ARM instruction set is used to characterize {{the performance of the}} benchmarks using configurations similar to current and next generation embedded processors. Several characteristics distinguish the representative embedded programs from the existing SPEC benchmarks including <b>instruction</b> <b>distribution,</b> memory behavior, and available parallelism. The embedded benchmarks, called MiBench, are freel...|$|R
40|$|All NASA {{management}} directives {{in force}} as of August 1, 1982 are listed by major subject headings showing number, effective data, title, responsible office, and distribution code. Delegations {{of authority in}} print by that date are listed numerically {{as well as by}} the installation or office to which special authority is assigned. Other consolidated lists show all management handbooks, directives applicable to the Jet Propulsion Laboratory, directions published in the Code of Federal Regulations, complementary manuals, and NASA safety standards. <b>Distribution</b> policies and <b>instructions</b> for ordering directives are included...|$|R
40|$|Abstract – Two {{designs for}} a dynamically-partitioned level- 1 instruction/data cache are {{proposed}} and evaluated through simulation. Each {{of the proposed}} architectures combine Instruction Cache (I-cache) and Data Cache (D-cache) into a single level- 1 memory while maintaining a physical separation between instructions and data. The first proposed architecture is a Waypartitioned cache (WP-cache) {{that is designed to}} partition each set such that some ways are dedicated to instructions and the remainder are dedicated to data. The second proposed architecture is a Set-partitioned cache (SP-cache) that is designed to allocate a certain number of sets for instructions and the remainder of the sets for data. The <b>distribution</b> of <b>instructions</b> and data in each of the proposed caches can be dynamically adjusted over time according to I-cache and D-cache miss rates. After simulating both architectures with several benchmark cache traces, the WP-cache is shown to have marginal but inconsistent performance benefits while the SP-cache is shown to have consistent performance degradation...|$|R
40|$|Introducing program {{variations}} via metamorphic transformations {{is one of}} {{the methods}} used by malware authors in order to help their programs slip past defenses. A method is presented for rapidly deciding whether or not an input program {{is likely to be a}} variant of a given metamorphic program. The method is defined for the prominent class of metamorphic engines that work by probabilistically selecting instruction-substituting program transformations. A model of the probabilistic engine is used to predict the expected <b>distribution</b> of <b>instruction</b> forms for different generations of variants. These predicted distributions form a type of “statistical signature ” for the output of the metamorphic engines. A classifier is defined based on distance between the observed and the predicted <b>instruction</b> form <b>distributions.</b> A case study using the W 32. Evol virus shows the classifier can distinguish between malicious samples from multiple generations. The classification method may be useful for practical malware detection by serving as an inexpensive filter to avoid more in-depth analyses where they are unnecessary...|$|R
50|$|A {{directed}} {{trust is}} an investment trust in which the trustee is directed {{by a number of}} other trust participants in implementing the trust's execution. That trustee is referred to as a Directed Trustee. Examples of other trust participants include a distribution committee, trust protector, or investment advisor. A directed trustee's role often includes: following <b>distribution</b> and investment <b>instructions,</b> holding legal title to the trust assets, providing fiduciary and tax accounting, coordinating trust participants and offering dispute resolution among those participants. Typically, these duties and the other participants in the trust are defined and governed by the trust document itself.|$|R
40|$|Abstract. Overcoming {{increasing}} memory latency {{is one of}} {{the main}} problems that microprocessor designers have faced over the years. The two basic techniques introduced to mitigate latencies are caches and out-of-order execution. However, neither of these solutions is adequatefor hiding off-chip memory accesses in the order of 200 cycles or more. Theoretically, increasing the size of the instruction window would allow much longer latencies to be hidden. But scaling the structures to support thousands of in-flight instructions would be prohibitively expensive. However, the <b>distribution</b> of <b>instruction</b> issue times under the presence of L 2 cache misses is highly correlated. This paper describes this phenomenon of Execution Locality and shows how it can be exploited with an inexpensive microarchitecture consisting of two linked cores. This Decoupled Kilo-Instruction Processor (D-KIP) is very effective in recovering lost potential performance. Extensive simulations show that speed-ups of up to 379 % are possible for numerical benchmarks thanks to the exploitation of impressive degrees of Memory-Level Parallelism (MLP) and the execution of independent instructions in the shadow of L 2 misses. ...|$|R
40|$|The {{great success}} of {{wearables}} and smartphone apps for provision of extensive physical workout instructions boosts a whole industry dealing with consumer oriented sensors and sports equipment. But with these opportunities {{there are also}} new challenges emerging. The unregulated <b>distribution</b> of <b>instructions</b> about ambitious exercises enables unexperienced users to undertake demanding workouts without professional supervision which may lead to suboptimal training success or even serious injuries. We believe, that automated supervision and realtime feedback during a workout may help to solve these issues. Therefore we introduce four fundamental steps for complex human motion assessment and present SensX, a sensor-based architecture for monitoring, recording, and analyzing complex and multi-dimensional motion chains. We provide {{the results of our}} preliminary study encompassing 8 different body weight exercises, 20 participants, and more than 9, 220 recorded exercise repetitions. Furthermore, insights into SensXs classification capabilities and the impact of specific sensor configurations onto the analysis process are given. Comment: Published within the Proceedings of 14 th IEEE International Conference on Networking, Sensing and Control (ICNSC), May 16 th- 18 th, 2017, Calabria Italy 6 pages, 5 figure...|$|R
40|$|Abstract. The {{explosive}} {{and robust}} {{growth of the}} Internet owes {{a lot to the}} ”end-to-end principle”, which pushes stateful operations to the end-points. The Internet grow both in traffic volume, and in the richness of the applications it supports. A whole new class of applications requires stateful processing. This paper presents the first workload characterization of stateful net-working applications. The analysis emphasizes the study of data cache behaviour. Nevertheless, we also discuss other issues, such as branch pre-diction, <b>instruction</b> <b>distribution</b> and ILP. Another important contribu-tion is the study of the state categories of the networking applications. The results show an important memory bottleneck that involves new challenges to overcome...|$|R
40|$|We {{present a}} scheme to steganographically embed {{information}} in x 86 program binaries. We define sets of functionally-equivalent instructions, and use a key-derived selection process to encode information in machine code by using the appropriate instructions from each set. Such a scheme {{can be used to}} watermark (or fingerprint) code, sign executables, or simply create a covert communication channel. We experimentally measure the capacity of the covert channel by determining the <b>distribution</b> of equivalent <b>instructions</b> in several popular operating system distributions. Our analysis shows that we can embed only a limited amount of information in each executable (approximately 110 bit encoding rate), although this amount is sufficient for some of the potential applications mentioned...|$|R
40|$|Approved {{for public}} release; <b>distribution</b> is unlimitedProgrammed <b>instruction</b> was first {{developed}} in the 1920 's and has been used quite extensively since World War II. The increasing necessity for efficient and effective utilization of men, manpower and money requires the introduction s both in civilian industry and the Navy, of any tool which will accomplish this end. The use of programmed instruction by private enterprise is increasing and shows promise of helping to further achieve the profits by which success is measured. The Navy has made several effectiveness studies of programmed instruction. However s the recent developments and available courses point out many areas in which the Navy can benefit from civilian accomplishments. [URL] Commander, United States Nav...|$|R
40|$|This paper {{provides}} a systematic comparison of various characteristics of computationally-intensive workloads. Our analysis focuses on standard HPC benchmarks and representative applications. For the selected workloads we provide {{a wide range}} of characterizations based on instruction tracing and hardware counter measurements. Each workload is analyzed at the instruction level by comparing the dynamic <b>distribution</b> of executed <b>instructions.</b> We also analyze memory access patterns including various aspects of cache utilization and locality properties of address distributions. Since prefetching {{plays an important role in}} the performance of computational workloads, we explore the prefetching potential and for parallel workloads we study the sharing properties of memory accesses. For the purpose of completeness, HPC workloads are compare...|$|R
40|$|VLIW {{architectures}} {{are popular}} in embedded systems because they offer high-performance processing at low cost and energy. The major problem with traditional VLIW designs {{is that they}} do not scale efficiently due to bottlenecks that result from centralized resources and global communication. Multicluster designs have been proposed to solve the scaling problem of VLIW datapaths, while much less work has been done on the control path. In this paper, we propose a distributed control path architecture for VLIW processors (DVLIW) to overcome the scalability problem of VLIW control paths. The architecture simplifies the dispersal of complex VLIW instructions and supports efficient <b>distribution</b> of <b>instructions</b> through a limited bandwidth interconnect, while supporting compressed instruction encodings. DVLIW employs a multicluster design where each cluster contains a local instruction memory that provides all intra-cluster control. All clusters have their own program counter and instruction sequencing capabilities, thus instruction execution is completely decentralized. The architecture executes multiple instruction streams at the same time, but these streams collectively function as a single logical instruction stream. Simulation results show that DVLIW processors reduce the number of cross-chip control signals by approximately two orders of magnitude while incurring a small performance overhead to explicitly manage the instruction streams. 1...|$|R
40|$|There {{are many}} {{definitions}} of distributive education. Lucy Crawford defines distributive education as follows: Distributive {{education is a}} vocational instructional program {{designed to meet the}} needs of persons who have entered or are preparing to enter a distributive occupation or an occupation requiring competency in one or more of the marketing functions. It offers instruction in marketing, merchandising, related management and personal development. (Crawford 2 ̆ 6 Meyer, 1972, p. 2) Crawford and Meyer call distributive education 2 ̆ 2 the people-center member of the vocational education family 2 ̆ 2 (1972, p. vii). Distributive education is a program of instruction for those who are interested in careers in the field of <b>distribution.</b> The <b>instruction</b> of the student is centered on the career objective of the student. Distributive education offers instruction for those who are already working in distributive occupations and for those who desire to enter distributive occupations. Post-secondary distributive education is designed for young and old; for those who have left high school; and for those who are enrolled as full-time students in a community college, junior college. or area vocational-technical school. The curriculum may be either a one-year or two-year design, and may be general or specialized...|$|R
40|$|Controller-in-the-loop {{experiments}} {{were conducted in}} order to assess the impact on air traffic controller activity of the delegation of spacing task to the flight deck. Three experiments involving a total of 18 European controllers during 7 weeks took place over the past two years. In addition to standard data analysis, a geographical-based analysis was introduced. It consisted in analysing the <b>distribution</b> of manoeuvring <b>instructions</b> and eye fixations as a function of their distance to the sector exit. This analysis confirmed assumptions that delegation leads to anticipate the building of the sequences, and to relieve the controller of maintaining these sequences. Although these initial results suggest a positive impact on controller activity, they still need to be complemented, typically with contextual analysis of monitoring through microscopic analysis of eye fixations...|$|R
40|$|The {{power and}} energy {{consumed}} by a chip has become the primary design constraint for embedded systems, {{which has led to}} a lot of work in hardware design techniques such as clock gating and power gating. The software can also affect the power usage of a chip, hence good software design can be used to reduce the power further. In this paper we present an instruction-level power model based on an ARM 1176 JZF-S processor to predict the power of software applications. Our model takes substantially less input data than existing high accuracy models and does not need to consider each instruction individually. We show that the power is related to both the <b>distribution</b> of <b>instruction</b> types and the operations per clock cycle (OPC) of the program. Our model does not need to consider the effect of two adjacent instructions, which saves a lot of calculation and measurements. Pipeline stall effects are also considered by OPC instead of cache miss, {{because there are a lot}} of other reasons that can cause the pipeline to stall. The model shows good performance with a maximum estimation error of - 8. 28 % and an average absolute estimation error is 4. 88 % over six benchmarks. Finally, we prove that energy per operation (EPO) decreases with increasing operations per clock cycle, and we confirm the relationship empirically...|$|R
40|$|Many {{important}} computational problems, {{including those}} of computer vision, are characterized by data-parallel, low-precision integer operations on large volumes of data. For such highly structured problems, this thesis develops Abacus, a high-speed reconfigurable SIMD (single-instruction, multiple-data) architecture that outperforms conventional microprocessors by over {{an order of magnitude}} using the same silicon resources. Earlier SIMD systems computed at relatively slow clock rates compared to their uniprocessor counterparts. The thesis discusses the problems involved in operating a large SIMD system at high clock rates, including <b>instruction</b> <b>distribution</b> and chip-to-chip communication, presents the solutions adopted by the Abacus design. Although the chip was implemented in a 1989 -era VLSI technology, it was designed to contain 1024 processing elements (PEs), operate at 125 MHz, and deliver 2 billion 16 -bit arithmetic operations per second (GOPS). The PE and chip architecture are [...] ...|$|R
40|$|Abstract — In the {{evolving}} sub-micron technology, importance of wire delays is growing, making it particularly attractive to use decentralized designs. A {{common form of}} decentralization adopted in processors is to partition the execution core into multiple clusters. Each cluster has a small instruction window, {{and a set of}} functional units. A number of algorithms have been proposed for distributing instructions among the clusters. The first part of this paper analyzes (qualitatively as well as quantitatively) the effect of various hardware parameters such as the type of cluster interconnect, the fetch size, the cluster issue width, the cluster window size, and the number of clusters on the performance of different <b>instruction</b> <b>distribution</b> algorithms. The study shows that the relative performance of the algorithms is very sensitive to these hardware parameters, and that the algorithms that perform relatively better with 4 or fewer clusters are generally not the best ones for a larger number of clusters. This is important, given that with an imminent increase in the transistor budget, more clusters are expected to be integrated on a single chip. The second part of the paper investigates alternate interconnects that provide scalable performance as the number of clusters is increased. In particular, it investigates two hierarchical interconnects — a single ring of crossbars and multiple rings of crossbars — as well as <b>instruction</b> <b>distribution</b> algorithms to take advantage of these interconnects. Our study shows that these new interconnects with the appropriate distribution techniques achieve an IPC (instructions per cycle) that is 15 - 20 % better than the most scalable existing configuration, and is within 2 % of that achieved by a hypothetical ideal processor having a 1 -cycle latency crossbar interconnect. These results confirm the utility and applicability of hierarchical interconnects and hierarchical distribution algorithms in clustered processors. Index Terms — Clustered Processor Architecture, Pipeline processors, Interconnection architectures, Load balancing and task assignment I...|$|R
40|$|Abstract — In {{this study}} we {{introduce}} NetBench, a benchmarking suite for network processors. NetBench contains a total of 9 applications that are representative of commercial applications for network processors. These applications are from all levels of packet processing; Small, low-level code fragments as well as large application level programs {{are included in the}} suite. Using SimpleScalar simulator we study the NetBench programs in detail and characterize the network processor workloads. We also compare key characteristics such as instructions per cycle, <b>instruction</b> <b>distribution,</b> branch prediction accuracy, and cache behavior with the programs from MediaBench. Although the aimed architectures are similar for MediaBench and NetBench suites, we show that these workloads have significantly different characteristics. Hence a separate benchmarking suite for network processors is a necessity. Finally, we present performance measurements from Intel IXP 1200 Network Processor to show how NetBench can be utilized. 1...|$|R
40|$|Aim In a {{disaster}} context, where risk for diarrhoeal disease is elevated, personal hygiene, i. e. handwashing with soap, is especially relevant. However, to date, {{the promotion of}} hygiene in an emergency context has not been adequately addressed in the literature. The aim {{of the present study}} is {{to evaluate the effectiveness of}} hygiene promotions in post-earthquake Haiti. Subject and Methods Cross-sectional data was collected by means of structured interviews in camps and neighbourhoods in which three affiliates of a well-known relief organisation had conducted hygiene promotions. Primary caregivers were targeted. A total sample of 811 was obtained. Data was analysed using multiple linear regression and mediation analysis. Results Analysis revealed six promotional channels with positive associations with handwashing behaviour: hygiene radio spots, radio programs with experts answering listener’s questions, material <b>distributions</b> with <b>instructions</b> for use, information from friends or neighbours, hygiene theatres, and community clubs. However, five of the promotional channels were negatively related with handwashing. Respondents who experienced a focus group, stickers, posters and paintings, hygiene songs, special hygiene days and home visits tended to wash their hands less often. Conclusions By revealing positive but also negative associations between hygiene promotions and handwashing behaviour, the study underlines the need to apply theory-driven emergency hygiene promotions which are subjected to in-depth evaluation. Only through doing this, is it ensured that effective hygiene promotions are implemented for the most vulnerable people—those affected by a humanitarian disaster...|$|R
