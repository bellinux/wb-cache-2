2|5|Public
5000|$|Either {{endpoint}} disconnects {{the call}} {{by sending a}} DRQ (<b>Disconnect</b> <b>Request)</b> to the Gatekeeper.|$|E
5000|$|RELEASE (sent in {{response}} to the <b>disconnect</b> <b>request</b> indicating that the call is to be terminated).|$|E
40|$|Abstract. Detecting {{the failure}} of a data stream is {{relatively}} easy when the stream is continually full of data. The transfer of large amounts of data allows for the simple detection of interference, whether accidental or malicious. However, during interference, data transmission can become irregular, rather than smooth. When the traffic is intermittent, it is harder to detect when failure has occurred and may lead to an application at the receiving end <b>requesting</b> retransmission or <b>disconnecting.</b> <b>Request</b> retransmission places additional load on a system and disconnection can lead to unnecessary reversion to a checkpointed database, before reconnecting and reissuing the same request or response. In this paper, we model the traffic in data streams as a set of significant events, with an arrival rate distributed with a Poisson distribution. Once an arrival rate has been determined, over-time, or lost, events can be determined with a greater chance of reliability. This model also allows for the alteration of the rate parameter to reflect changes in the system and provides support for multiple levels of data aggregation. One significant benefit of the Poisson-based model is that transmission events can be deliberately manipulated in time to provide a steganographic channel that confirms sender/receiver identity. ...|$|R
40|$|Detecting {{the failure}} of a data stream is {{relatively}} easy when the stream is continually full of data. The transfer of large amounts of data allows for the simple detection of interference, whether accidental or malicious. However, during interference, data transmission can become irregular, rather than smooth. When the traffic is intermittent, it is harder to detect when failure has occurred and may lead to an application at the receiving end <b>requesting</b> retransmission or <b>disconnecting.</b> <b>Request</b> retransmission places additional load on a system and disconnection can lead to unnecessary reversion to a checkpointed database, before reconnecting and reissuing the same request or response. In this paper, we model the traffic in data streams as a set of significant events, with an arrival rate distributed with a Poisson distribution. Once an arrival rate has been determined, over-time, or lost, events can be determined with a greater chance of reliability. This model also allows for the alteration of the rate parameter to reflect changes in the system and provides support for multiple levels of data aggregation. One significant benefit of the Poisson-based model is that transmission events can be deliberately manipulated in time to provide a steganographic channel that confirms sender/receiver identity. Nickolas J. G. Falkner and Quan Z. Shen...|$|R
50|$|Unnumbered {{frames are}} {{identified}} by the low two bits being 1. With the P/F flag, that leaves 5 bits as a frame type. Even though fewer than 32 values are in use, some types have different meanings depending on the direction they are sent: as a request or as a response. The relationship between the DISC (disconnect) command and the RD (<b>request</b> <b>disconnect)</b> response seems clear enough, but the reason for making SARM command numerically equal to the DM response is obscure.|$|R
40|$|The Rover toolkit {{combines}} relocatable dynamic {{objects and}} queued remote procedure calls to provide unique services for "roving" mobile applications. A relocatable dynamic object is an object with a well-defined interface {{that can be}} dynamically loaded into a client computer from a server computer (or vice versa) to reduce clientserver communication requirements. Queued remote procedure call is a communication system that permits applications to continue to make non-blocking remote procedure call requests even when a host is <b>disconnected,</b> with <b>requests</b> and responses being exchanged upon network reconnection. The challenges of mobile environments include intermittent connectivity, limited bandwidth, and channeluse optimization. Experimental results from a Rover-based mail reader, calendar program, and two non-blocking versions of WorldWide Web browsers show that Rover's services are a good match to these challenges. The Rover toolkit also offers advantages for workstation applications by providing a uniform distributed object architecture for code shipping, object caching, and asynchronous object invocation...|$|R
50|$|Maintaining the {{connection}} is done by tickling. DSI provides a mechanism for ensuring that client and server know that the other is still active. Every 30 seconds of inactivity, the server sends a tickle request to the client. Similarly, the client also sends its own tickle. (This is NOT a response packet.) Either the client or server can terminate the DSI session {{if they fail to}} hear from the other for 120 seconds. The client may also <b>disconnect</b> if a <b>request</b> is in flight and neither a response nor tickle is received within 60 seconds (in Mac OS X v.10.2 and later).|$|R

