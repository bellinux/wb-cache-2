1|152|Public
40|$|In this work, {{we propose}} a new mining-based file caching scheme for a hybrid storage disk system. In particular, we focus our efforts on {{reducing}} the latency of launching applications. The proposed scheme identifies the correlated file accesses in a file access sequence via sequential pattern mining algorithm. Our scheme caches corre-lated files together {{to maximize the}} caching efficiency. The correlated files are extracted from the access patterns through the proposed mining scheme, which consists of three steps: frequent pattern based file extraction, cluster moving gap based <b>file</b> <b>sort,</b> and fre-quency and size based file prioritization. The extracted correlated files are relocated to a SSD during idle time. DiskSim and NANDSim are {{used to evaluate the}} proposed scheme, called Informed Mining. The proposed scheme is compared with a disk only scheme and five other mining based file relocation schemes: Mining based file reloca-tion scheme (Miner), minimum distance based file relocation scheme (Min_Dist), fre-quency-based relocation scheme (Fre), size-based relocation scheme (Size), and one that relocates files with highest value of (file size * file access number) first to the SSD (Fr*Sz). From the simulation based experiment, launch time is reduced by about 50 % using only 10 % of sum of all file sizes accessed during a launch of an application...|$|E
5000|$|An example: To see {{the list}} of lines in a <b>file,</b> <b>sorted</b> {{by the number of}} times each occurs: ...|$|R
40|$|This bachelor's thesis {{describes}} {{main components}} of the Animator software project. Animator off ers studying of <b>file</b> <b>sorting</b> algorithms. Users can single-stop algorithms or watch tapes with sorted elements on variable oriented views. Algorithm progress may be in fluenced by changing variable values or elements placed on tapes. Users also may orient on examining algorithm efectivity using statistics collected during algorithm progress. It is possible to extend Animator by new views or <b>file</b> <b>sorting</b> algorithms...|$|R
50|$|The {{concept of}} records and fields was central in some early <b>file</b> <b>sorting</b> and tabulating utilities, such as IBM's Report Program Generator (RPG).|$|R
30|$|Definition 3 (version group). A version {{group which}} {{is a part of}} a version chain is {{composed}} of several version <b>files</b> <b>sorted</b> by the version number.|$|R
50|$|The VOS API {{allows the}} {{creation}} of multiple indexes per <b>file,</b> <b>sorting</b> according to {{the contents of a}} record, or an external key, or an internal key, or a well-defined set of multiple keys. A VOS file with one or more indexes {{can be used as a}} C-ISAM database table.|$|R
50|$|The 70/15 {{was often}} used as a {{satellite}} processor for larger systems or used as an intelligent terminal for remote job entry. Typical applications of a satellite processor would include card-to-tape conversion, card/tape-to-printer report generation, tape-to-card punching, input pre-processing and verification, or tab-shop tasks like <b>file</b> <b>sorting,</b> merge, and data selection.|$|R
40|$|Versatile command-driven data {{management}} system offers users, through simplified command language, {{a means of}} storing and searching data <b>files,</b> <b>sorting</b> data <b>files</b> into specified orders, performing simple or complex computations, effecting file updates, and printing or displaying output data. Commands are simple to use and flexible enough to meet most {{data management}} requirements...|$|R
5000|$|The [...] option {{makes the}} program sort {{according}} to numerical value. The [...] command produces output {{that starts with}} a number, the file size, so its output can be piped to [...] to produce a list of <b>files</b> <b>sorted</b> by (ascending) <b>file</b> size:$ du /bin/* | sort -n4 /bin/domainname24 /bin/ls102 /bin/sh304 /bin/csh ...|$|R
50|$|Some {{features}} {{which are}} otherwise only available in professional PDF editing software {{are provided by}} Preview: It is possible to extract single pages out of multi-page documents (e.g. PDF <b>files),</b> <b>sort</b> pages, and drag & drop single or multiple pages between several opened multi-page documents, or into other applications, such as attaching to an opened email message.|$|R
50|$|After he and Nigel {{help the}} Brigands in {{smuggling}} arms into Britain, Julian gets scared and confesses to his father, {{who is a}} judge. This leads to armed police arresting McEwen and Neil, blowing the operation and McEwen assaulting a sergeant who insulted his intelligence, resulting in McEwen being forced to six months <b>file</b> <b>sorting</b> {{in the basement of}} CHERUB's mission building.|$|R
25|$|CoSort was {{released}} for CP/M in 1978, DOS in 1980, Unix in the mid-eighties, and Windows {{in the early}} nineties, and received a readership award from DMReview magazine in 2000, CoSort was initially designed as a <b>file</b> <b>sorting</b> utility, and added interfaces to replace or convert the sort program parameters used in IBM Infosphere DataStage, Informatica, Micro Focus COBOL, JCL, NATURAL, SAS, and SyncSort Unix.|$|R
50|$|The tags <b>file</b> is <b>sorted</b> on the {tagname} field {{which allows}} for fast searching of the tags file.|$|R
50|$|In {{computer}} programming a control break {{is a change}} in the value of one of the keys on which a <b>file</b> is <b>sorted</b> which requires some extra processing. For example, with an input <b>file</b> <b>sorted</b> by post code, the number of items found in each postal district might need to be printed on a report, and a heading shown for the next district. Quite often there is a hierarchy of nested control breaks in a program, e.g. streets within districts within areas, with the need for a grand total at the end. Structured programming techniques have been developed to ensure correct processing of control breaks in languages such as COBOL and to ensure that conditions such as empty input files and sequence errors are handled properly.|$|R
40|$|Abstractâ€”In {{the first}} phase of <b>sorting</b> a large <b>file,</b> <b>sorted</b> sequences, called runs, are generated. In the second phase, the runs are merged into a <b>sorted</b> <b>file.</b> The merge time can be much greater than the runs-generation time. Generating longer runs and thus fewer runs in {{the first phase}} may greatly reduce the merge time. In this paper, we present a {{parallel}} algorithm that can utilize the broadcast capability of the IBM SP 2 to generate long runs. The new algorithm has been implemented in C and PVMe. Experimental results show that our algorithm generates longer runs than two earlier algorithms, and is more desirable...|$|R
40|$|International audienceA large {{majority}} of health care systems are still using physical patient files in order to store administrative and medical data, medical imaging files, biological analysis results, etc. Such files are required when the patient {{shows up in the}} system for any kind of medical consultation (medical consultation with a physician, long stay in the hospital, or visit in an outpatient unit). Hence patient file traceability must be managed carefully in order to avoid file loss and improve <b>file</b> <b>sorting</b> in the archive department. This paper aims at proposing a new tool for managing patient medical file traceability and improving <b>file</b> <b>sorting</b> in order to reduce delays during delivery and globally improve quality of care. This study is part of a project conducted with the Lucien Neuwirth Cancer Institute (Saint-Etienne, France). A formal modeling of medical file flows is proposed to identify risks related to lack of traceability. A discrete-event simulation model is also proposed to test various organization scenarios related to file management outside and inside the archive department of the cancer institute. New traceability software has been implemented to support the newly proposed organization...|$|R
50|$|BusyBox {{benefits}} from the single binary approach, as it reduces the overhead introduced by the executable file format (typically ELF), and it allows code to be shared between multiple applications without requiring a library. This technique is similar to what {{is provided by the}} crunchgen command in FreeBSD, the difference being that BusyBox provides simplified versions of the utilities (for example, an ls command without <b>file</b> <b>sorting</b> ability), while a crunchgen generated sum of all the utilities would offer the fully functional versions.|$|R
50|$|The Sort/Merge utility is a {{mainframe}} {{program to}} sort records in a file into a specified order, merge pre-sorted <b>files</b> into a <b>sorted</b> <b>file,</b> or copy selected records. Internally, these utilities use {{one or more}} of the standard sorting algorithms, often with proprietary fine-tuned code.|$|R
30|$|The {{system is}} {{designed}} to feed the preprocessing as the input of online dictionary learning pipeline automatically or manually after filtering the preprocessed data. For visualization purposes {{and to make the}} generated results easy to explore, both preprocessing and ODL pipelines will generate a PDF report at the end after which it will be automatically uploaded to the web interface. These reports contain generated results from the executed pipelines identified by experiment ID appended to pipeline name. For example, ODL report contains 400 png <b>files</b> <b>sorted</b> sequentially.|$|R
50|$|While the Newton offered {{handwriting}} recognition training and would clean up sketches into vector shapes, both were unreliable and required much rewriting and redrawing. The most reliable {{application of the}} Newton was collecting and organizing address and phone numbers. While handwritten messages could be stored, {{they could not be}} easily <b>filed,</b> <b>sorted</b> or searched. While the technology was a probable cause for the failure of the device (which otherwise met or exceeded expectations), the technology has been instrumental in producing the future generation of handwriting software that realizes the potential and promise that began in the development of Newton-Apple's Ink Handwriting Recognition.|$|R
50|$|After {{the initial}} distribution, an {{ordinary}} merge <b>sort</b> using 4 <b>files</b> will <b>sort</b> 16 single record runs in 4 iterations {{of the entire}} dataset, moving a total of 64 records in order to sort the dataset after the initial distribution. A polyphase merge <b>sort</b> using 4 <b>files</b> will <b>sort</b> 17 single record runs in 4 iterations, but since each iteration but the last iteration only moves {{a fraction of the}} dataset, it only moves a total of 48 records in order to sort the dataset after the initial distribution. In this case, ordinary merge sort factor is 2.0, while polyphase overall factor is ~2.73.|$|R
50|$|The MapReduce System would {{line up the}} 1100 Map processors, {{and would}} provide each with its {{corresponding}} 1 million input records. The Map step would produce 1.1 billion (Y,(N,1)) records, with Y values ranging between, say, 8 and 103. The MapReduce System would then line up the 96 Reduce processors by performing shuffling operation of the key/value pairs {{due to the fact}} that we need average per age, and provide each with its millions of corresponding input records. The Reduce step would result in the much reduced set of only 96 output records (Y,A), which would be put in the final result <b>file,</b> <b>sorted</b> by Y.|$|R
5000|$|... freedup {{is written}} in POSIX {{compliant}} C and is released under the GNU General Public License.Its complexity is O(n log n) for full file comparison. This is done for equally long <b>files</b> after <b>sorting</b> according to filesize using qsort (...) [...]|$|R
5000|$|Fear and Security {{tells about}} {{the fear of}} losing control. When photographing more objects, instead of order, she started to see the idea of chaos in things. That became a series of {{pictures}} called Fear and Security. HÃ¤nninen says that [...] "There is a great paradox because by setting up security measures you cause insecurity of something". In these images HÃ¤nninen {{has been trying to}} catch the idea of the society, which is <b>filing,</b> <b>sorting</b> and systemizing things to be more secure and organized. [...] "Her work titles- Fear and Security, Keep Under Control, Information Failure- reinforce the idea that these stage-set-like, micro-theatrical scenes are visualized thought, visual aphorisms, emblematic abstractions. In a model-like manner they represent thoughts about the world, about tensions, opposition, overload, sources of error." ...|$|R
5000|$|... #Caption: File systems allow {{users and}} {{programs}} {{to organize and}} <b>sort</b> <b>files</b> on a computer, often {{through the use of}} directories (or [...] "folders").|$|R
40|$|Data {{compression}} is {{an effective}} means for saving storage space and channel bandwidth. There are two main types of compression lossy and lossless. This paper will deal with lossless compression techniques named Huffman, Arithmetic, LZ- 78 and Golomb coding. The paper attempts to do comparative analysis {{in terms of their}} compression efficiency and speed. The test files used for this include English text <b>files,</b> Log <b>files,</b> <b>Sorted</b> word list and geometrically distributed data text file. The implementation results of these compression algorithms suggest the efficient algorithm to be used for a certain type of file to be compressed taking into consideration both the compression ratio and speed of operation. In terms of compression ratios, Golomb is best suited for very low frequency Text files, arithmetic for moderate and high frequency. Implementation is done using MATLAB software...|$|R
40|$|TR 84 - 601 In this paper, {{we propose}} a {{taxonomy}} of parallel sorting {{that includes a}} broad range of array and <b>file</b> <b>sorting</b> algorithms. We analyze the evolution of research on parallel sorting, from the earliest sorting networks to the shared memory algorithms and the VLSI sorters. In the context of sorting networks, we describe two fundamental parallel merging schemes - the odd-even and the bitonic merge. Sorting algorithms have been derived from these merging algorithms for parallel computers where processors communicate through interconnection networks such as the perfect shuffle, the mesh {{and a number of other}} sparse networks. After describing the network sorting algorithms, we show that, with a shared memory model of parallel computation, faster algorithms have been derived from parallel enumeration sorting schemes, where keys are first ranked and then rearranged according to their rank...|$|R
40|$|You are h ere! 102 4. 1 B+ trees I Here {{we review}} an index {{structure}} which especially shines {{if we need}} to support range selections (and thus <b>sorted</b> <b>file</b> scans) : B+ trees. I B+ trees refine the idea underlying binary search on a <b>sorted</b> <b>file</b> by introducing a high fan-out, multi-level path selection mechanism. I B+ trees provide a balanced index structure that is resistant to data skew and automatically adapts to dynamic inserts and deletes. nonâˆ’leaf level leaf level (sequence set...|$|R
40|$|A new hidden-line {{algorithm}} is proposed for illustrating objects consisting of plane faces. The algorithm determines the degree of edge and classifies edges and faces into contoural and non-contoural. To reduce memory requirements, sequential <b>files</b> and <b>sorting</b> are used. The {{algorithm is}} particularly intended for illustrating complex objects, such as curved surfaces approximated by plane face...|$|R
5000|$|In an {{interview}} on Loudwire, Rob Zombie denied making the album cover to provoke Gene Simmons to gain press coverage. Simmons never <b>filed</b> any <b>sort</b> of lawsuit or complaint against the band for the cover art of the album. On May 31, 2006, Zombie fronted a supergroup which performed [...] "God of Thunder" [...] at the VH1 Rock Honors.|$|R
5000|$|... sha1sum {{can only}} create {{checksums}} {{of one or}} multiple files inside a directory, but not of a directory tree, i.e. of subdirectories, sub-subdirectories, etc. and the files they contain. This is possible by using sha1sum {{in combination with the}} commands find and xargs (and optionally with sort so that the <b>files</b> are <b>sorted</b> in the checksum file).|$|R
5000|$|UEFA general {{secretary}} Gianni Infantino said, [...] "Let us be clear, {{this is not}} a new law â€¦ if anyone was thinking of <b>filing</b> some <b>sort</b> of complaint saying FFP somehow restricts European competition law they would have to file it to the Commission. This is a big milestone in the enforcement of the break-even principle" ...|$|R
50|$|File 1 just emptied {{and became}} the new output file. One run is left on each input tape, and merging those runs {{together}} will make the <b>sorted</b> <b>file.</b>|$|R
500|$|Files {{and tables}} are sorted using [...] and the [...] verb merges and <b>sorts</b> <b>files.</b> The [...] verb {{provides}} records to sort and [...] retrieves sorted records in order.|$|R
50|$|While {{the program}} offers basic image-editing tools, it gives various ways to <b>sort,</b> <b>file,</b> and {{annotate}} photos, {{as well as}} some extras like free Flickr and Fotki plug-ins and a Send-to-Mobile feature.|$|R
50|$|However, Infocom's {{use of a}} VM {{affected}} performance. For simple operations, Cornerstone's {{performance was}} fine. However, for intensive operations, such as importing text <b>files</b> and <b>sorting,</b> Cornerstone dragged, especially {{when compared to the}} dominant database available at the time of Cornerstone's release, dBase III. One review noted that after waiting over three hours for a single text file to be imported, all similar benchmark tests were abandoned.|$|R
