0|1809|Public
40|$|Bugs Fixed Certain sorting options failed on MySQL 5. 7 (# 684) Tabbing on the admin {{interface}} {{could be}} broken when loading a page with a fragment specified Unselected <b>record</b> <b>types</b> {{in the search}} settings had the wrong IDs (# 698, contributed by @paxed) Collections show pages had the wrong title The tag interface showed an incorrect number of total tags (# 708, contributed by @luku) HTML 5 video embeds could end with the wrong closing tag (# 710, contributed by @luku) The item details toggle didn't work correctly on the first click (# 715, contributed by @luku) The API results per page label {{was associated with the}} wrong control for accessibility purposes Element texts could be deleted if they were saved multiple times for the same item in a single request <b>Invalid</b> <b>record</b> <b>types</b> on sitewide search could raise a notice (# 754) Errors that occurred when uninstalling a plugin were incorrectly hidden from view (# 740) Resources loaded in a different order in background jobs than in the web interface (# 725) An error occurred when printing the maximum file upload size on the Item form with some locales (like es_CO) (# 756) Improvements Batch Edit All: Batch editing can now edit an entire search result's worth of items, even if split across several pages (contributed by @Daniel-KM) New Item Advanced Search options AND/OR support for combining multiple searches "starts with" and "ends with" search types (# 688, contributed by @luku) "matches" regular expression search type (# 695, contributed by @Daniel-KM) [No Collection] is now an option for finding items that don't belong to a collection (# 693, contributed by @Daniel-KM) (# 746) Use Square Thumbnails appearance setting: Admins can now select whether themes use square or "normal" thumbnails by default without editing the theme files (# 763) Warnings presented to users when navigating away from pages with unsaved changes (# 771, thanks also to @Daniel-KM for # 722 and @luku for # 753) Additional wider version of admin theme added (# 751, contributed by @luku) New autoloader prevents many "white-screen" errors and otherwise consumed error messages from autoloaded files Site title on login page links to public side, not admin (# 646, contributed by @miniol) Admin collections show pages now include the list of output formats Improved ARIA labels for accessibility New "display_title" property to simplify getting a title suitable for use in labels and headings User zooming is now enabled for mobile devices in the admin (# 718, contributed by @luku) The Item API now allows for simple search Administrators can now allow the id attribute in the HTML Security Settings An option to choose the admin theme is now shown if the user has installed or created an alternative admin theme New ignore_unknown option for metadata() to allow the call to fail silently if Omeka cannot find the Element Set or Element the call refers to (# 712) The delete confirmation dialog title is now translatable (# 752, contributed by @luku) Mime type detection for "text" filetypes is improved (# 757, contributed by @Daniel-KM) Improved theme selection admin page display code (# 734, contributed by @Daniel-KM) Added item_next and item_previous filters for altering Omeka's default "Next Item" and "Previous Item" links (# 743) Changes The theme configuration page now redirects back to itself on save, not to the Themes page (# 744, contributed by @luku) TinyMCE's validation has been loosened (# 727, contributed by @doana) TinyMCE's conversion of "special characters" to HTML entities is restricted to otherwise-invisible whitespace only Shell command names are escaped with escapeshellarg, not escapeshellcmd. In particular, this should improve treatment of paths containing spaces as is common on Windows "Add Input" buttons on element form are now "button" type buttons instead of "submit" type, so they no longer submit the form in the case of some scripting problem Collections no longer attempt to show the "Text" Item Type Metadata element when showing a preview of the items in the collection The red top border on admin content is now simply red instead of being made out of an image The admin record views now check for the specific "delete" privilege before showing the Delete button (this affects only users who alter the default ACL) (# 750, contributed by @luku) The installer now checks for the "dom" and "filter" extensions before allowing install (# 673) External Libraries Zend Framework 1. 12. 20 getID 3 1. 9. 12 jQuery 1. 12. 4 TinyMCE 3. 5. 12 Bundled Plugins Exhibit Builder 3. 3. 3 Simple Pages 3. 0. 8 Bundled Themes Thanks, Roy 2. 4 Berlin 2. 4 Seasons 2. ...|$|R
5000|$|André Kiesewetter - 196 m (<b>invalid</b> world <b>record</b> {{with hand}} touch) ...|$|R
40|$|Prisoners {{registration}} {{systems in}} the United States are government-controlled networks, holding public records that are critical for the safeguard liberty. The current report investigated validity, verification, and security concerns pertaining to the Los Angeles, California, online Inmate Information Center. Hundreds of entries were sampled and {{about half of the}} entries were found invalid. In particular cases, access to the arrest and booking records – public records by California law- was requested. Access was denied. Neither were <b>invalid</b> <b>records</b> corrected upon request. Therefore, it was concluded that <b>invalid</b> <b>records</b> posted online were not the outcome of inadvertent errors. Similar deficiencies were found in the prisoners registration system of Marin County, California. Solutions are proposed, based on structured programming and certified, functional logic verification, which must be mandated in such systems. Data mining will remain a civic duty – in the US and worldwide- to safeguard human rights in the digital era. Key words...|$|R
40|$|This manual {{describes}} all supported EPICS <b>record</b> <b>types.</b> The {{first chapter}} gives introduction and describes the field summary table. The second chapter describes the fields in database common, i. e. the fields that {{are present in}} every <b>record</b> <b>type.</b> The third chapter describes the input and output field that are common to many <b>record</b> <b>types</b> and have the same usage wherever they are used. Following the third chapter is a separate chapter for each <b>record</b> <b>type</b> containing a description of all the fields for that <b>record</b> <b>type</b> except those in database common...|$|R
5000|$|<b>Record</b> <b>type</b> (see <b>record</b> <b>types</b> below), two hex digits, 00 to 05, {{defining}} {{the meaning of}} the data field.|$|R
5000|$|All allowed OASIS <b>record</b> <b>types</b> {{have been}} {{categorized}} in OASIS.MASK as either Mandatory(M), Allowed(A), Ignored(I), Prohibited(X). Furthermore, the values {{assigned to each}} <b>record</b> <b>type</b> must be within a range of values established by the OASIS.MASK standard. OASIS.MASK specifies user-defined PROPERTY records that are not supported in OASIS as [...] "standard" [...] PROPERTY <b>record</b> <b>types.</b>|$|R
40|$|Abstract. <b>Record</b> <b>types</b> are an {{important}} tool for programming and dependent <b>record</b> <b>types</b> are proven to be very useful for program specification and verification. Unfortunately all known embedding of the dependent <b>record</b> <b>type</b> in the type theory had some imperfections. In this paper we present a new type constructor, dependent intersection [...] the intersection of two types, where the second type may depend on the first type (this is not {{the intersection of the}} family of types). This new type constructor allows us to define records that combine the most advantages of previously known approaches, while avoiding most of their disadvantages. 1 Introduction Over the last decade <b>record</b> <b>types</b> and especially the dependent <b>record</b> <b>types</b> (or more formally dependently <b>typed</b> <b>records)</b> proved to be an extremely useful program specifications and verification tool [7, 3, 11]. There are several approaches of defining <b>record</b> <b>types.</b> Probably the most straightforward way of adding <b>records</b> to the <b>type</b> theory is to add them as a new primitive type. This approach was taken for example in [8]. Unfortunately, if this approach is taken, the theory needs to be extended with the numerous new rules describing the properties of <b>record</b> <b>types,</b> operations on <b>record</b> <b>types,</b> properties of <b>record</b> objects, operations on record objects, etc. This creates a very complicated theory that is not very intuitive and thus hard reason in and about...|$|R
25|$|The Sender Policy Framework and DomainKeys were {{designed}} {{to take advantage of}} another DNS <b>record</b> <b>type,</b> the TXT <b>record,</b> but have since been assigned specific <b>record</b> <b>types.</b>|$|R
5000|$|Richard Skelton, Marking Time, Preservation <b>Records</b> , <b>Type</b> <b>Records</b> LP ...|$|R
5000|$|There is a {{wide variety}} of <b>record</b> <b>types</b> because of {{consolidation}} of OMF variants from several vendors, and adding such features as 32-bit code and dynamic linking, Important <b>record</b> <b>types</b> are: ...|$|R
50|$|A set {{consists}} of circular linked lists where one <b>record</b> <b>type,</b> the set owner or parent, appears once in each circle, {{and a second}} <b>record</b> <b>type,</b> the subordinate or child, may appear multiple times in each circle. In this way a hierarchy may be established between any two <b>record</b> <b>types,</b> e.g., type A {{is the owner of}} B. At the same time another set may be defined where B is the owner of A. Thus all the sets comprise a general directed graph (ownership defines a direction), or network construct. Access to records is either sequential (usually in each <b>record</b> <b>type)</b> or by navigation in the circular linked lists.|$|R
50|$|In November 2011, DNSimple {{announced}} a new proprietary DNS <b>record</b> <b>type</b> called ALIAS which provides a CNAME-like DNS record for the apex domain. DNSimple was the first DNS provider to offer this capability using a custom DNS <b>record</b> <b>type.</b>|$|R
50|$|Records that {{absolutely}} must {{be managed by}} a record locking process are those which are processor shared. In TPF, most record accesses are done by using <b>record</b> <b>type</b> and ordinal. So if you had defined a <b>record</b> <b>type</b> in the TPF system of 'FRED' and gave it 100 records or ordinals, then in a processor shared scheme, <b>record</b> <b>type</b> 'FRED' ordinal '5' would resolve to exactly the same file address on DASD — clearly necessitating {{the use of a}} record locking mechanism.|$|R
2500|$|RDATA is data of type-specific relevance, {{such as the}} IP {{address for}} address records, or the {{priority}} and hostname for MX records. Well known <b>record</b> <b>types</b> may use label compression in the RDATA field, but [...] "unknown" [...] <b>record</b> <b>types</b> must not (RFC 3597).|$|R
5000|$|Definition of an {{individual}} entity. A <b>Record</b> <b>Type</b> encapsulates one or moreFields and is analogous to a database table. <b>Record</b> <b>Types</b> can be either [...] "Stateless" [...] or [...] "State-based" [...] with the latter being able to transition between a defined set of states.|$|R
5000|$|RDATA is data of type-specific relevance, {{such as the}} IP {{address for}} address records, or the {{priority}} and hostname for MX records. Well known <b>record</b> <b>types</b> may use label compression in the RDATA field, but [...] "unknown" [...] <b>record</b> <b>types</b> must not (RFC 3597).|$|R
50|$|This {{demonstrates}} ALGOL W's <b>record</b> <b>type</b> facility.|$|R
5000|$|Each {{line of the}} OASIS {{representation}} below contains (from the left) {{a record}} number and a <b>record</b> <b>type</b> followed {{by a set of}} values that define that <b>record</b> <b>type.</b> For instance, the first RECTANGLE record below defines the following type of rectangle shape, its size and its absolute location: ...|$|R
50|$|A <b>record</b> <b>type</b> is a {{data type}} that {{describes}} such values and variables. Most modern computer languages allow the programmer to define new <b>record</b> <b>types.</b> The definition includes specifying the data type of each field and an identifier (name or label) {{by which it}} can be accessed. In type theory, product types (with no field names) are generally preferred due to their simplicity, but proper <b>record</b> <b>types</b> are studied in languages such as System F-sub. Since type-theoretical records may contain first-class function-typed fields in addition to data, they can express many features of object-oriented programming.|$|R
40|$|This paper {{presents}} a prolog {{implementation of a}} type checker for dependent <b>record</b> <b>types</b> as used for semantic analysis of natural language in [1]. A couple of functions useful for a situation-theoretical account of natural language semantics using dependent <b>record</b> <b>types</b> are also defined and implemented. Note {{that this is not}} a general type checker for dependent types, but only for dependent <b>record</b> <b>types.</b> The solution to the general problem is more complicated, and a functional programming language with dependent types is currently being developed by people at the Dept. of Computer Science in Goteborg. The choice of Prolog for this implementation (rather than a functional language) is primarily motivated by the fact that Prolog is more familiar to people working with formal semantics of natural language. 2 Dependent <b>record</b> <b>type...</b>|$|R
5000|$|... #Subtitle level 2: OASIS <b>Record</b> <b>Type</b> Restrictions in OASIS.MASK ...|$|R
40|$|We {{show the}} NP-hardness of the satisfiability problem for subtype inequalities between object types built by using {{simultaneously}} both the functional and the <b>record</b> <b>type</b> constructors, without base types. Earlier research {{concentrated on the}} complexity of subtyping either solely functional, or solely <b>record</b> <b>types.</b> In both cases deterministic cubic time algorithms are known...|$|R
50|$|A {{small number}} of <b>record</b> <b>types</b> are used to {{represent}} {{the various types of}} data. Each <b>record</b> <b>type</b> consists of a sequence of fields, which are either fixed length or delimited by a punctuation character such as a comma. For example, a link entity could be represented by a record of the form:type1,label,node1,z1,node2,z2,class,number of shape points,number of lanes,speedwhere type1 defines this as a link <b>record</b> <b>type</b> and label serves as an identifier to distinguish this link from all others. The z1 and z2 fields determine the vertical separation of this link from others sharing the corresponding nodes node1 and node2. Thus an overpass to a link, for example, can be represented as not connected to that link. Other <b>record</b> <b>types</b> are used to represent address information, shape-points for a link, cities and states, points of interest (POI’s), etc.|$|R
40|$|We {{propose a}} <b>record</b> <b>type</b> {{theoretical}} account {{of cases of}} copredication which have motivated the introduction of dot types in the Generative Lexicon (Asher and Pustejovsky, 2005). We will suggest that using <b>record</b> <b>types</b> gives us a simple and intuitive account of dot types and also makes a connection between copredication {{and the use of}} hypothetical contexts in a <b>record</b> <b>type</b> theoretic analysis of dynamic generalized quantifiers. We propose a view of lexical innovation which draws both on Pustejovsky’s original work on the Generative Lexicon (Pustejovsky, 1995) and the notion of resource present in the Grammatical Framework (Ranta, forthcoming). ...|$|R
40|$|Dependently-typed {{records have}} been studied in type theory in several {{previous}} research attempts, with applications {{to the study of}} module mechanisms for both programming and proof languages. Recently, the author has proposed an improved formulation of dependent <b>record</b> <b>types</b> in the context of studying manifest fields of module types. In this paper, we study this formulation in more details by considering universes of <b>record</b> <b>types</b> and some application examples. In particular, we show that <b>record</b> <b>types</b> provide a more powerful mechanism (than record kinds) in expressing module types and additional useful means (as compared with Σ-types) in applications. 1...|$|R
40|$|<b>Record</b> <b>types</b> are an {{important}} tool for programming and are essential in objectoriented calculi. Dependent <b>record</b> <b>types</b> are proven to be very useful for program specification and verification. Unfortunately, all known embedding of the dependent <b>record</b> <b>type</b> in the type theory had some imperfections. In this paper we present a new type constructor, dependent intersection, i. e., the intersection of two types, where the second type may depend on elements of the first one (do not confuse it with the intersection {{of a family of}} types). This new type constructor allows us to define dependent records in a very simple way...|$|R
5000|$|I32HEX files {{use only}} <b>record</b> <b>types</b> , , , and [...] (32 bit addresses) ...|$|R
50|$|NGC 1316 {{has hosted}} two <b>recorded</b> <b>Type</b> Ia supernovae: 1980N(Ia) and 1981D(Ia).|$|R
5000|$|Additionally, {{there is}} a Route 53-specific virtual <b>record</b> <b>type</b> called [...] "Alias".|$|R
5000|$|I16HEX files {{use only}} <b>record</b> <b>types</b> [...] through [...] (20 bit addresses) ...|$|R
40|$|<b>Record</b> <b>types</b> are an {{important}} tool for programming and dependent <b>record</b> <b>types</b> are proven to be very useful for program speci cation and veri cation. Unfortunately all known embedding of the dependent <b>record</b> <b>type</b> in the type theory had some imperfections. In this paper we present a new type constructor, dependent intersection - the intersection of two types, where the second type may depend on the fi rst type (this is not {{the intersection of the}} family of types). This new type constructor allows us to defi ne records that combine the most advantages of previously known approaches, while avoiding most of their disadvantages...|$|R
5000|$|In {{systems with}} record subtyping, {{operations}} on values of <b>record</b> <b>type</b> may also include: ...|$|R
50|$|A {{processor}} unique {{record is}} one that is defined such that each processor expected to be in the loosely coupled complex has a <b>record</b> <b>type</b> of 'FRED' and perhaps 100 ordinals. However, if a user on any 2 or more processors examines the file address that <b>record</b> <b>type</b> 'FRED', ordinal '5' resolves to, they will note a different physical address is used.|$|R
5000|$|... {{illustrations}} {{in articles}} frequently include maps, clickable maps, repository images, flags, and <b>record</b> <b>type</b> examples ...|$|R
50|$|On 21 March 2003 in Planica, Lindström {{became the}} first ski jumper in history to surpass the 230 metre mark, with a jump of 232.5 m. However, his jump was {{rendered}} an <b>invalid</b> world <b>record</b> due to him touching the snow with his hand.|$|R
50|$|An * {{next to the}} <b>record</b> <b>type</b> {{means that}} the record is forced to stable storage.|$|R
