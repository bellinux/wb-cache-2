1|20|Public
30|$|The final instar larva of A. quadrisculpta induced unique {{changes in}} spider web {{architecture}} {{that consisted of}} only one strong main thread, often but not always tensioned by one additional lateral thread supporting the wasp’s cocoon. Similar cocoon webs, which consisted {{of only a few}} (sometimes only two) threads, were also observed in other tetragnathid spiders: L. argyra manipulated by H. argyraphaga (Eberhard 2000 a) and L. roseosignata Mello-Leitão, 1943 manipulated by H. japi Sobczak et al., 2009 (Sobczak et al. 2009). Eberhard (2000 a) described that the construction of the cocoon web induced by H. argyraphaga was nearly identical to the early steps in one subroutine of normal orb construction of L. argyra, and the other normal orb construction behaviour patterns were mostly repressed (Eberhard 2001). The cocoon web induced had, in most cases, no true hub (with hub loops) but rather non-spiral lines at the convergence of the radius lines, no frame lines and usually no tangle; however, in extremely reduced cases, the cocoon web consisted of only a single strong line with the cocoon suspended from the central portion (Eberhard 2000 a, b, 2001; Eberhard, personal communication). These, the simplest observed cocoon webs induced by H. argyraphaga, had a general appearance similar to the cocoon web of A. quadrisculpta (one strong thread), but differed in several respects. The cocoon of A. quadrisculpta was horizontal, placed longitudinally along the horizontally oriented main thread. The main thread was present in all cocoon webs. In contrast, the cocoon of H. argyraphaga was suspended vertically on a line that was attached at the central point where the radial lines converged. The final architecture of the cocoon web induced by H. argyraphaga was more varied (Eberhard 2000 a, b, 2001). In our study, the main thread of the cocoon web appeared to be morphologically and functionally similar to the <b>frame</b> <b>thread</b> of the normal orb web; both were strong structures that supported other parts of the web, such as the sticky spiral of the capture web (Additional file 1 : Video 1, s 01) (Figure  1 c).|$|E
50|$|Lin is {{best known}} for her installations. One of her {{earliest}} works, The Proliferation of Thread Winding (1995), included 20,000 balls of thread attached with needles to a rice paper-covered iron bed. In 2012 she made a series of works using a wooden <b>frame,</b> <b>threads</b> and synthetic bones; Minty Blue (2012) and Duckling Yellow (2012) were two works in the series that explored suppression and boundaries using symbolic colors monochromatically to keep the attention on the object.|$|R
40|$|The button stool captures a {{very simple}} idea within its form; the seat {{represents}} the button, and the <b>frame,</b> the <b>thread</b> that connects the two together. They are light weight, sturdy, {{and are able to}} be picked up from the centre and stacked. 450 mm h and 650 mm h 400 mm dia seat premium grade stainless steel (satin finish) molded polyethelene plastic sea...|$|R
60|$|They {{passed a}} group of low but {{extensive}} <b>frame</b> buildings, <b>threading</b> their way between them until finally they emerged within a large open space where huge frames covered with canvas were propped up in broad daylight and apparently in great disorder. Huddled here and there were groups of people wearing Oriental costumes of the Bible days, their skins stained brown, the make-up on their faces showing hideously in the strong light. A herd of meek donkeys, bearing burdens of faggots, was tethered near by.|$|R
50|$|The {{throstle}} {{frame was}} an early method of spinning yarn, and was a direct descendant of the spinning wheel. The rovings were attenuated by rollers as in the later ring <b>frame.</b> The <b>thread</b> was collected on free spinning spindles which had a flyer above which acted as the twisting mechanism. The flyer always maintains a uniform velocity, though the bobbin retarded by friction, is pulled around the spindle by the tension of the yarn allowing the variation needed {{to account for the}} increasing diameter. It was very suited to producing high quality yarn of the coarser counts.|$|R
50|$|Most {{trailers}} have {{a separate}} axle for each wheel, like those used on a bicycle. These separate axles usually mount directly on the <b>frame</b> using either <b>threaded</b> nuts, a quick-release mechanism, or some press fit arrangement. The use of separate axles for two-wheel trailers allows the load carrying area to be between the wheels with its base below the axles, so as to keep the centre of gravity relatively low.|$|R
30|$|It {{should be}} noted that {{tracking}} and mapping (TAM) is used instead of using localization and mapping. TAM was first used in Parallel Tracking and Mapping (PTAM) [15] because localization and mapping are not simultaneously performed in a traditional way. Tracking is performed in every <b>frame</b> with one <b>thread</b> whereas mapping is performed at a certain timing with another thread. After PTAM was proposed, most of vSLAM algorithms follows the framework of TAM. Therefore, TAM is used in this paper.|$|R
40|$|Present-day {{parallel}} computers often face {{the problems of}} large software overheads for process switching and interprocessor communication. These problems are addressed by the Multi-Threaded Architecture (MTA), a multiprocessor model designed for efficient parallel execution of both numerical and non-numerical programs. We begin with a conventional processor, and add what {{we believe to be}} the minimal external hardware necessary for efficient support of multithreaded programs. The presentation begins with the top-level architecture and the program execution model. The latter includes a description of activation <b>frames</b> and <b>thread</b> synchronization. This is followed by a detailed presentation of the processor. Major features of the MTA include the RegisterUse Cache for exploiting temporal locality in multiple register set microprocessors, support for programs requiring non-determinism and speculation, and local function invocations which can utilize registers for parameter passing. 1 Introdu [...] ...|$|R
40|$|Current {{strategies}} for supporting high-performance parallel computing often face {{the problem of}} large software overheads for process switching and interprocessor communication. This document presents {{the design of the}} Multi-Threaded Architecture (MTA) model, a multiprocessor architecture designed for the efficient parallel execution of both numerical and non-numerical programs. The basic MTA design begins with a conventional processor, and adds what we believe to be minimal external hardware necessary for efficient support of multithreaded programs. The presentation begins with the basic processor design and the program execution model. The latter includes a description of activation <b>frames</b> and <b>thread</b> synchronization. This is followed by {{a detailed description of the}} instruction set. Major features of the MTA include the Register-Use Cache for exploiting temporal locality in multiple register set microprocessors more effectively, support for programs requiring nondeterminism and specul [...] ...|$|R
50|$|The modern wig {{was adopted}} by Louis XIII to cover his baldness. By the late 1600s, both wigs and {{handmade}} lace headpieces were common with European and North American upper classes as daily fashion. Wigs were made of human, horse, and yak hair and sewn onto a <b>frame</b> with silken <b>thread</b> {{were meant to be}} obvious as wigs and not the wearer's actual hair. Powdered wigs in rows of curls, known as periwigs, were adopted as court dress in many cultures with elaborate curls and style.|$|R
40|$|The electrospinning {{technology}} {{has been used to}} fabricate organic nanofibers. As the nanofibers are aligned parallel and crossed, unique electrical and photonic properties are generated. Hereby, a <b>frame</b> of copper <b>thread</b> with a diameter of 0. 8 mm was used to collect and align polymer nanofibers. SEM results showed that the nanofibers were parallel aligned between two copper threads. The crossed nanofibers arrays were obtained by layer-by-layer assembling on the parallel nanofibers. The influence factors, such as distance between two copper threads and collection time etc, were investigated...|$|R
40|$|Machine (TAM) [14] is a {{software}} {{implementation of a}} multithreaded architecture that runs on conventional distributed [...] memory computers. It executes compiler [...] generated threads in parallel and emulates I [...] structure operations for array handling. A TAM thread {{is a collection of}} sequential instructions that do not jump out of the thread and only reference data available in the current frame, though they may issue I [...] structure fetches. Results from I [...] structure fetches and data from other threads are placed into inlets in the <b>frame.</b> Each <b>thread</b> has a set of inlets that, when full, allows the thread to become enabled. Results of a thread may be sent to the inlets of other threads. Cilk [15] is another software multithreading system that uses threads specified in a modified C language. A closure, which stores the inputs of a thread, is ready to run when all its argument slots are full. Ready closures may be stolen by idle processors to balance the load. 2. 3. Thread migration Thread mig [...] ...|$|R
40|$|We {{present a}} new thread model that {{supports}} large-scale dynamic parallelism, i. e., {{the number of}} coexisting threads is large and the life-time for each thread is short. We introduce the interleaving stack (IS), which melds the <b>frames</b> of multiple <b>threads</b> into one shared stack. The pure interleaving stack is not scalable due to severe internal fragmentation. We propose and evaluate an improvement, circular interleaving stack (CIS). Our simulation shows that in the domains of large-scale dynamic parallelism, CIS performs better than the traditional one-stack-per-thread (1 SPT) mechanism with respect to memory utilization. The 1 SPT mechanism gains better memory utilization as thread life-time increases. CIS and 1 SPT show similar CPU utilization. keywords: light-weight processes, object-oriented language, concurrency. Hseush is {{supported in part by}} the Center for Telecommunications Research. Lee is supported in part by the Center for Advanced Technology. Kaiser is supported by National Scie [...] ...|$|R
40|$|We {{develop a}} new {{approach}} on the (1 + 3) threading of spacetime (M, g) {{with respect to a}} congruence of curves defined by an arbitrary timelike vector field. The study is based on spatial tensor fields and on the Riemannian spatial connection ∇^, which behave as 3 D geometric objects. We obtain new formulas for local components of the Ricci tensor field of (M, g) with respect to the <b>threading</b> <b>frame</b> field, in terms of the Ricci tensor field of ∇^ and of kinematic quantities. Also, new expressions for time covariant derivatives of kinematic quantities are stated. In particular, a new form of Raychaudhuri's equation enables us to prove Lemma 6. 2, which completes a well known lemma used in the proof of Penrose-Hawking singularity theorems. Finally, we apply the new (1 + 3) formalism {{to the study of the}} dynamics of a Kerr-Newman black hole...|$|R
40|$|This thesis studies {{efficient}} runtime {{systems for}} parallelism management (multithreading) and memory management (garbage collection) on largescale distributed-memory parallel computers. Both are fundamental primitives for implementing high-level parallel programming languages that support dynamic parallelism and dynamic data structures. A distinguishing {{feature of the}} developed multithreading system is that it tolerates {{a large number of}} threads in a single CPU while allowing direct reuse of existing sequential C compilers. In fact, it is able to turn any standard C procedure call into an asynchronous one. Having such a runtime system, the compiler of a high-level parallel programming language can fork a new thread simply by a C procedure call to a corresponding C function. A thread can block its execution by calling a library procedure that saves the stack <b>frame</b> of the <b>thread</b> and unwinds stack frames. To resume a thread, StackThreads provides another runtime routine that rebuilds the [...] ...|$|R
50|$|In {{relativistic}} cosmology {{there is a}} freedom associated with the choice of <b>threading</b> <b>frame,</b> this frame choice is distinct from choice associated with coordinates. Picking this frame is equivalent to fixing the choice of timelike world lines mapped into each other, this reduces the gauge freedom it does not fix the gauge but the theory remains gauge invariant under the remaining gauge freedoms. In order to fix the gauge a specification of correspondences between the time surfaces in the real universe (perturbed) and the background universe are required along with the correspondences between points on the initial spacelike surfaces {{in the background and}} in the real universe. This is the link between the gauge-invariant perturbation theory and the gauge-invariant covariant perturbation theory. Gauge invariance is only guaranteed if the choice of frame coincides exactly with that of the background; usually this is trivial to ensure because physical frames have this property.|$|R
40|$|This paper {{describes}} {{the development and}} evaluation of mixed reality tools for {{the early stages of}} design and engineering processing. Externalization of ideal and real scenes, scripts, or <b>frames</b> are <b>threads</b> that stir the imaginative exploration of the mind to ideate, formulate, and represent ideas, fuzzy thoughts, notions, and/or dreams. The body in the mind, embodied imagination is more important than knowledge. Current computational tools and CAD systems are not equipped or fully adapted in the ability to intuitively convey creative thoughts, closely enact or connect with users in an effective, affective, or empathic way. Man-machine interactions are often tethered, encumbered by e. g. stupefying modalities, hidden functionalities, constraint interface designs and preprogrammed interaction routes. Design games, mixed reality, ‘new’ media, and playful tools have been suggested as ways to support and enhance individual and collaborative ideation and concept design by improving communication, performance, and generation. Gamification seems to be successful especially in framing and/or blending common ground for collaborative design and co-creation processes. Playing games with cross-disciplinary design teams and future users in conjunction with tools to create stories, narratives, role-play and visual representations can be used as abstract ideation and design material in an open-ended design process. In this paper we discuss mixed reality tools based on a holistic user-centered approach within playful stochastic environments. We present preliminary findings and studies from experimentation with robust tools, prototypes, and interfaces based on our empirical research and work in progres...|$|R
40|$|Machine (TAM) TAM [Culler 93] has {{its roots}} in the {{dataflow}} model of execution, but can be understood independently of dataflow. A language called Threaded Machine Language, TL 0, was designed to permit programming using the TAM model. TAM recognizes three major storage resources [...] -codeblocks, frames, and structures [...] -and the existence of critical processor resources, such as registers. A program is represented by a collection of re-entrant code-blocks, corresponding roughly to individual functions or loop bodies in the high-level program text. A code-block comprises a collection of threads and inlets. Invoking a code-block involves allocating a frame [...] -much like a conventional call frame [...] - depositing argument values into locations within the <b>frame,</b> and enabling <b>threads</b> within the code-block for execution. Instructions may refer to registers and to slots in the current frame: the compiler statically determines the frame size for each code-block and is responsible for correctly using sl [...] ...|$|R
40|$|Machine(TAM) [7]. TAM is {{also based}} on a thread-level {{dataflow}} model, and such dataflow graphs are constructed from Id programs. The execution model of TAM {{is an extension of}} a hybrid dataflow model. Our implementation also has its origin in an optimized dataflow, but it is an original one, Datarol[4], and our intermediate DVMC can be mapped onto the Datarol-II architecture. The compiler partitions a Datarol graph at split-phase operation points, traces subgraphs along arcs in a depth-first way and rearranges nodes, in order to generate an efficient threaded code for conventional multi-processors. Since code scheduling strategy depends on the run-time costs of parallel processing of the target machine, the compiler uses machine dependent cost function to generate threaded code. 4 Implementation on a Distributed Memory Machine On a distributed-memory machine, AP 1000, an instance frame is created by using message passing. The message consists of data, PE ID, <b>frame</b> ID and <b>thread</b> ID of th [...] ...|$|R
40|$|Abstract—Pivot {{is a new}} JavaScript {{isolation}} {{framework for}} web applications. Pivot uses iframes as its low-level isolation containers, but it uses code rewriting to implement syn-chronous cross-domain interfaces atop the asynchronous cross-frame postMessage() primitive. Pivot layers a distributed scheduling abstraction across the frames, essentially treating each <b>frame</b> as a <b>thread</b> which can invoke RPCs that are serviced by external threads. By rewriting JavaScript call sites, Pivot can detect RPC invocations; Pivot exchanges RPC requests and responses via postMessage(), and it pauses and restarts frames using a novel rewriting technique that translates each frame’s JavaScript code into a restartable generator function. By leveraging both iframes and rewriting, Pivot {{does not need to}} rewrite all code, providing an order-of-magnitude performance improvement over rewriting-only solutions. Compared to iframe-only approaches, Pivot provides synchronous RPC semantics, which developers typically prefer over asynchronous RPCs. Pivot also allows developers to use the full, unrestricted JavaScript language, including powerful statements like eval(). I...|$|R
50|$|The MTA-1, -2, and -3 use no data caches. This reduces CPU {{complexity}} and avoids cache coherency problems. However, no data caching introduces two performance problems. First, the memory system must support the full data access bandwidth of all threads, even for unshared and thus cacheable data. Thus, good system performance requires very high memory bandwidth. Second, memory references take 150-170 cycles, {{a much higher}} latency than even a slow cache, thus {{increasing the number of}} runable threads required to keep the ALU busy. The MTA-4 will have a non-coherent cache, which can be used for read-only and unshared data (such as non-shared stack frames), but which requires software coherency e.g., if a thread is migrated between CPUs. Data cache competition is often a performance bottleneck for highly-concurrent processors, and sometimes even for 2-core systems; however, by using the cache for data that is either highly shared or has very high locality (stack <b>frames),</b> competition between <b>threads</b> can be kept low.|$|R

