3|1|Public
60|$|All {{that had}} been well enough. Five per cent and <b>first-class</b> <b>security</b> were, she knew, matters of business; and though Mr Rubb had winked his eye at her as he spoke of them, leaning {{forward in his chair}} and looking at her not at all as a man of business, but quite in a {{friendly}} way, yet she had felt that she was so far safe. She nodded her head also, merely intending him to understand thereby that she herself understood something about business. But when he suddenly changed the subject, and asked her how she liked Mr Stumfold's set, she drew herself up suddenly and placed herself at once upon her guard.|$|E
40|$|The {{ability of}} worms to spread at rates that {{effectively}} preclude human-directed reaction has elevated {{them to a}} <b>first-class</b> <b>security</b> threat to distributed systems. We present the first reaction mechanism that seeks to automatically patch vulnerable software. Our system employs a collection of sensors that detect and capture potential worm infection vectors. We automatically test {{the effects of these}} vectors on appropriately-instrumented sandboxed instances of the targeted application, trying to identify the exploited software weakness. Our heuristics allow us to automatically generate patches that can protect against certain classes of attack, and test the resistance of the patched application against the infection vector. We describe our system architecture, discuss the various components, and propose directions for future research...|$|E
40|$|The {{ability of}} worms to spread at rates that {{effectively}} preclude human-directed reaction has elevated {{them to a}} <b>first-class</b> <b>security</b> threat to distributed systems. We propose an architecture for automatically repairing software flaws that are exploited by network worms. Our approach relies on source code transformations to quickly apply automatically-created (and tested) localized patches to vulnerable segments of the targeted application. To determine these susceptible portions, we use a sandboxed instance of the application as a "clean room" laboratory that runs in parallel with the production system and exploit {{the fact that a}} worm must reveal its infection vector to achieve its goal (i. e., further infection). We believe our approach to be the first end-point {{solution to the problem of}} malicious self-replicating code. The primary benefits of our approach are (a) its low impact on application performance, (b) its ability to respond to attacks without human intervention, and (c) its capacity to deal with "zero-day" worms (for which no known patches exist). Furthermore, our approach does not depend on a centralized update repository, which can be the target of a concerted attack similar to the Blaster worm. Finally, our approach can also be used to protect against lower intensity attacks, such as intrusion ("hack-in") attempts. To experimentally evaluate the efficacy of our approach, we use our prototype implementation to test a number of applications with known vulnerabilities. Our preliminary results indicate a success rate of 82 %, and a maximum repair time of 8. 5 seconds...|$|E
6000|$|... "Yes, my dear friend, why not, though Barbara {{does not}} want money, for she has plenty of her own, in <b>first-class</b> <b>securities</b> that I could never persuade her to vary, for she is shrewd in that way and {{steadily}} refuses to sign anything. Also she will probably be my heiress--and, Aylward," [...] here a sickly look of alarm spread itself over his face, [...] "I don't know how long I have to live. That infernal doctor examined my heart this morning {{and told me that}} it was weak. Weak was his word, but from the tone in which he said it, I believe that he meant more. Aylward, I gather that I may die any day." ...|$|R

