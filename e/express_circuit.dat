7|70|Public
50|$|HDLs are {{standard}} text-based {{expressions of the}} structure of electronic systems and their behaviour over time. Like concurrent programming languages, HDL syntax and semantics include explicit notations for expressing concurrency. However, in contrast to most software programming languages, HDLs also include an explicit notion of time, which is a primary attribute of hardware. Languages whose only characteristic is to <b>express</b> <b>circuit</b> connectivity between a hierarchy of blocks are properly classified as netlist languages used in electric computer-aided design (CAD). HDL can be used to express designs in structural, behavioral or register-transfer-level architectures for the same circuit functionality; in the latter two cases the synthesizer decides the architecture and logic gate layout.|$|E
40|$|We {{give the}} monodromy {{representation}} and the Pfaffian system of Lauricella 2 ̆ 7 s differential equations annihilating the hypergeometric series F_D(a, b, c; x) of multivariables. Our representation spaces are twisted homology and cohomology groups associated with integrals representing solutions. Without assigning bases to these groups, we <b>express</b> <b>circuit</b> transformations and {{components of the}} connection form {{in terms of the}} intersection form of the twisted (co) homology groups. Each of them is characterized by an eigenvector of it...|$|E
40|$|Abstract — The {{hierarchical}} graph-based sizing and biasing {{method of}} analog circuits {{has been previously}} developed. Its potential application {{in the field of}} knowledge-based analog synthesis is studied. This method reduces the number of optimization variables by taking into account their circuit dependency relations. This is done by automatically generating a design plan to <b>express</b> <b>circuit</b> dependencies. The design plan is then introduced into an optimization loop. The optimization engine uses the Nelder-Mead simplex method. The whole method is successfully applied to a single-ended two-stage amplifier. It produces simulator-like quality designs in a reasonable time, thus allowing interactive design of analog circuits. I...|$|E
50|$|Source transformations are {{not limited}} to {{resistive}} circuits. They can be performed on a circuit involving capacitors and inductors as well, by <b>expressing</b> <b>circuit</b> elements as impedances and sources in the frequency domain. In general, the concept of source transformation is an application of Thévenin's theorem to a current source, or Norton's theorem to a voltage source. However, this means that source transformation is bound by the same conditions as Thevenin's theorem and Norton's theorem; namely that the load behaves linearly, and does not contain dependent voltage or current sources.|$|R
40|$|Verifying {{circuits}} {{with two}} or more closely-spaced driving frequencies is important in RF and wireless communications, e. g., {{in the design of}} down-conversion mixers. Existing steady-state calculation methods, like harmonic balance, rely on Fourier series expansions to find the difference-frequency components typically of interest. Time-domain methods are, however, better suited for circuits with strong nonlinearities such as switching. Towards this end, we present a purely time-domain method for direct computation of difference tones in closely-spaced multi-tone problems. Our approach is based on multiple artificial time scales for decoupling the tones driving the circuit. Our method relies on a novel multi-time reformulation that <b>expresses</b> <b>circuit</b> equations directly in terms of time-scales corresponding to difference tones. We apply the new technique to an RF-CMOS mixer to predict baseband bit-streams and down-conversion gain and distortion, in two orders of magnitude less CPU time than traditional time-stepping simulation...|$|R
40|$|We {{study the}} monodromy {{representation}} of the generalized hypergeometric differential equation and that of Lauricella's $F_C$ system of hypergeometric differential equations. We use fundamental systems of solutions expressed by the hypergeometric series. We <b>express</b> non-diagonal <b>circuit</b> matrices as reflections with respect to root vectors with all entries $ 1 $. We present {{a simple way to}} obtain circuit matrices. Comment: 25 page...|$|R
40|$|As we strive towards higher {{abstraction}} levels, {{the designer}} can lose control over low-level details, which eventually {{turn out to}} have significant impact on circuit performance. In particular, it is the routing wires that dominate the non-functional properties of circuits in deep sub-micron technologies. In the proposed system, called Wired, the designer can <b>express</b> <b>circuit</b> function together with detailed placement of cells and wires, in order to get more precise control over the result. The system allows direct analysis of non-functional properties, and in fact, the result of such analyses can be used to guide instantiation decisions. Case studies show that common structures, such as parallel prefix computations, and even non-trivial versions, are described efficiently in Wired...|$|E
40|$|Abstract. Routing wires are {{dominant}} performance stoppers in deep sub-micron technologies, {{and there}} is an urgent need to take them into account already at higher levels of abstraction. However, the normal design flow gives the designer only limited control over the details of the lower levels, risking the quality of the final result. We propose a language, called Wired, which lets the designer <b>express</b> <b>circuit</b> function together with layout, in order to get more precise control over the result. The complexity of larger designs is managed by using parameterised connection patterns. The resulting circuit descriptions are compact, and yet capture detailed layout, including the size and positions of wires. We are able to analyse non-functional properties of these descriptions, by “running ” them using non-standard versions of the wire and gate primitives. The language is relational, which means that we can build forwards, backwards and bi-directional analyses. Here, we show the description and analysis of various parallel prefix circuits, including a novel structure with small depth and low fanout. ...|$|E
40|$|JHDL is {{a design}} tool for {{reconfigurable}} systems that allows designers to <b>express</b> <b>circuit</b> organizations that dynamically {{change over time}} in a natural way, using only standard programming abstractions found in objectoriented languages. JHDL manages FPGA resources {{in a manner that}} is similar to the way object-oriented languages manage memory: circuits are treated as distinct objects and a circuit is configured onto a configurable computing machine (CCM) by invoking its constructor, effectively "constructing" an instance of the circuit onto the reconfigurable platform just as object instances are allocated in memory with conventional object-oriented languages. This approach of using object constructors/destructors to control the circuit lifetime on a CCM is a powerful technique that naturally leads to a dual simulation/execution environment where a designer can easily switch between either software simulation or hardware execution on a CCM with a single application description. Moreover, JHDL supports dual hardware/software execution; parts of the application described using JHDL circuit constructs can be executed on the CCM while the remainder of the application [...] the GUI for example [...] can run on the CCM host. Based on an existing programming language (Java), JHDL requires no language extensions and can be used with any standard Java 1. 1 distribution...|$|E
40|$|We {{define the}} {{ripple-carry}} and the carry-lookahead adder circuits in the powerlist notation {{and we use}} the powerlist algebra to prove that these circuits correctly implement addition for natural numbers represented as bit vectors. 0 Introduction As hardware designs increase in complexity it is less possible to reason informally about their behaviour, or to exhaustively test all possible behaviours. Several researchers have used formal systems for hardware verification, such as the Boyer-Moore logic [2], HOL [1], Nuprl [5] and Ruby [3]. We propose {{the use of a}} new data structure, the powerlist, for circuit verification. We show how powerlists may be used to <b>express</b> <b>circuits</b> and reason about their correctness. The powerlist data structure has been recently introduced by Misra [6]. It provides a notation for compactly expressing synchronous parallel computations in a functional programming style and an algebra within which properties of such computations can be proven. The notation allo [...] ...|$|R
50|$|The {{bill was}} {{introduced}} in 2005, 2007, 2008, and 2009. The 2009 bill {{was approved by the}} Senate Judiciary Committee. The Senate version is S. 657, and the House version is H.R.3054. In 2009, the Judicial Council of the 9th <b>Circuit</b> <b>expressed</b> interest in televising certain proceedings.|$|R
40|$|We {{study the}} monodromy {{representation}} of the system $E_C$ of differential equations annihilating Lauricella's hypergeometric function $F_C$ of $m$ variables. Our representation space is the twisted homology group associated with an integral representation of $F_C$. We find generators of the fundamental group of the complement of the singular locus of $E_C$, and give some relations for these generators. We <b>express</b> the <b>circuit</b> transformations along these generators, by using the intersection forms defined on the twisted homology group and its dual. Comment: 27 + 2 pages, 3 + 1 figure...|$|R
40|$|Morphine {{produces}} analgesia at {{opiate receptor}}s <b>expressed</b> in nociceptive <b>circuits.</b> μ, δ, and κ opiate receptor subtypes are <b>expressed</b> in <b>circuits</b> that can modulate nociception and receive inputs from endogenous opioid neuropeptide ligands. The roles played by each receptor subtype in nociceptive processing in drug-free and morphine-treated states {{have not been}} clear, however. We produced homologous, recombinant μ, opiate receptor, heterozygous and homozygous knockout animals that displayed ≈ 54 % and 0 % of wild-type levels of μ receptor expression, respectively. These mice expressed κ receptors and δ receptors at near wild-type levels. Untreated knockout mice displayed shorter latencies on tail flick and hot plate tests for spinal and supraspinal nociceptive responses than wild-type mice. These findings support a significant role for endogenous opioid–peptide interactions with μ opiate receptors in normal nociceptive processing. Morphine failed to significantly reduce nociceptive responses in hot plate or tail flick tests of homozygous μ receptor knockout mice, and heterozygote mice displayed right and downward shifts in morphine analgesia dose–effect relationships. These results implicate endogenous opioid–peptide actions at μ opiate receptors in several tests of nociceptive responsiveness and support μ receptor mediation of morphine-induced analgesia in tests of spinal and supraspinal analgesia...|$|R
40|$|The {{traditional}} {{input-output analysis}} {{is a relatively}} poor instrument to measure the phenomena of interdependence among sectors. These phenomena are <b>expressed</b> in <b>circuits</b> which can be better analysed thanks to the structural approach introduced by R. Lantner and J. Gazon, {{and based on the}} concept of the transmission of economic influence. Within the framework of this approach, particularly the concepts of structural circularity and feed-back, we have tried to develop appropriate measures of the interdependence among sectors (circuits of length greater than one) and also of their sufficiency as it is expressed in a special kind of circuits, i. e. these of length one. Peer reviewe...|$|R
40|$|We {{present a}} method that {{combines}} interval-arithmetic (IA) and Boolean reasoning with structural hashing for simplifying SAT problems on <b>circuits</b> <b>expressed</b> at the register-transfer level. We demonstrate that simple transformations based on interval-arithmetic operations can significantly reduce {{the complexity of the}} problem. We identify cases where the inherent over-approximations in IA operations can be reduced. We demonstrate that these techniques can significantly reduce RTL-SAT instances in size and runtime. 1...|$|R
40|$|Designing correct, robust DNA {{circuits}} {{is difficult}} because of the many possibilities for unwanted interference between molecules in the system. DNA strand displacement has been proposed as a design paradigm for DNA circuits and the DSD language {{as a means of}} formally <b>expressing</b> these <b>circuits.</b> We demonstrate the use of formal verification techniques, in particular model checking and probabilistic model checking, to analyse both the correctness and performance of such designs. We use the probabilistic model checker PRISM, in combination with DSD, to detect and fix an error in a simple strand displacement program, and to analyse the kinetics of the system. We also illustrate how similar techniques can be used on more complicated systems with potentially infinite chemical reaction networks, such as polymerizing systems. ...|$|R
40|$|Linear Circuit Transfer Functions: An {{introduction}} to Fast Analytical Techniques teaches readers how to determine transfer functions of linear passive and active circuits by applying Fast Analytical Circuits Techniques. Building on their existing knowledge of classical loop/nodal analysis, the book improves and expands their skills to unveil transfer functions in a swift and efficient manner. Starting with simple examples, the author explains step-by-step how <b>expressing</b> <b>circuits</b> time constants in different configurations leads to writing transfer functions in a compact and insightful way. By {{learning how to}} organize numerators and denominators in the fastest possible way, readers will speed-up analysis and predict the frequency resp nse of simple to complex circuits. In some cases, {{they will be able}} to derive the final expression by inspection, without writing a line of algebra. Key features: * Emphasizes analysis through employing time constant-based methods discussed in other text books but not widely used or explained. * Develops current techniques on transfer functions, to fast analytical techniques leading to low-entropy transfer functions immediately exploitable for analysis purposes. * Covers calculation techniques pertinent to different fields, electrical, electronics, signal processing etc. * Describes how a technique is applied and demonstrates this through real design examples. * All Mathcad® files used in examples and problems are freely available for download. An ideal reference for electronics or electrical engineering professionals as well as BSEE and MSEE students, this book w ll help teach them how to: become skilled in the art of determining transfer function by using less algebra and obtaining results in a more effectual way; gain insight into a circuit’s operation by understanding how time constants rule dynamic responses; apply Fast Analytical Techniques to simple and complicated circuits, passive or active and be more efficient at solving problems...|$|R
5000|$|In an AC circuit we {{have real}} power (P) {{which is a}} {{representation}} of the average power into the circuit and reactive power (Q) which indicates power flowing back and forward. We can also define the complex power S = P + jQ and the apparent power which is the magnitude of S. The power law for an AC <b>circuit</b> <b>expressed</b> in phasors is then S = VI* (where I* is the complex conjugate of I, and I and V are the RMS values of the voltage and current).|$|R
40|$|Abstract We {{consider}} {{the design of}} a circuit description library for a pure functional language where circuits are defined as functions and connected together by writing applicative expressions. Just like the return value of any other function in a functional program, the output of a circuit can be bound to a variable and referred to many times. Usually it is the programmer’s intention that such references represent sharing of a circuit’s output, implying a fanout structure. However, in a pure functional language, references are transparent and the circuit description library can only view finite graph-shaped circuit structures as infinitely expanded regular trees. To overcome this problem, we introduce expressible sharing, a technique in which the programmer expresses the fork-points present in a circuit {{in the same way that}} they <b>express</b> other <b>circuit</b> components like and-gates and or-gates. We define a library for circuit description which uses expressible sharing and demonstrate it on a small case-study...|$|R
40|$|Integer {{division}} {{is an important}} arithmetic operation on microprocessors. To derive integer division algorithms we present an unconvential approach: a derivation technique in a calculational style, that guarantees that the derived algorithms are correct. Four different algorithms are derived using this method: restoring division, non-restoring divsion, radix- 4 division and division by multiplication. We translate these to descriptions into combinatorial <b>circuits,</b> <b>expressed</b> in Verilog code. Then the circuits are compiled on a Spartan- 3 Generation FPGA. At the end, we compare the propagation delays and area requirements for these circuits. We show that the division by multiplication is much faster than the other methods, however it only works for 18 bit integers. Integer {{division is}} an important arithmetic operation on microprocessors. To derive integer division algorithms we present an unconvential approach: a derivation technique in a calculational style, that guarantees that the derived algorithms are correct. Four different algorithms are derived using this method: restoring division, non-restoring divsion, radix- 4 division and division by multiplication. We translate these to descriptions into combinatorial <b>circuits,</b> <b>expressed</b> in Verilog code. Then the circuits are compiled on a Spartan- 3 Generation FPGA. At the end, we compare the propagation delays and area requirements for these circuits. We show that the division by multiplication is much faster than the other methods, however it only works for 18 bit integers...|$|R
40|$|Abstract. It {{is shown}} {{that if a}} {{cellular}} automaton (CA) in two or more dimensions supports growing “ladders ” which can turn or block each other, then it can <b>express</b> arbitrary boolean <b>circuits.</b> Thus the problem of predicting the CA for a finite amount of time becomes P-complete, {{the question of whether}} a finite configuration grows to infinity is P-hard, and the long-term behavior of initial conditions with a periodic background is undecidable. This class includes the “Life Without Death ” rule, in which cells turn on if exactly three of their neighbors are on, and never turn off. 1...|$|R
40|$|The {{objective}} {{of this paper is}} to present a quantum computer simulator with a web interface based on the circuit model of quantum computation [3]. This is the standard model for which most quantum algorithms have been developed. Quan-tum algorithms are <b>expressed</b> as <b>circuits</b> of quantum registers (series of qubits) and quantum gates operating on them. Each quantum gate is a unitary transformation on the Hilbert space determined by the quantum register. The quantum computer simulator is developed in Python, using some extra libraries for our purposes. The fundamental library that is used is Numpy: the package for scientific computing with Python. Because of the limitations of GUI for a large number of qubits, we propose an another version of quantum computer simulator without a user interface, which could simulate quantum computations for larger inputs. The inputs of the simula-tor are the number of qubits, the number of computation steps, the initial state of quantum register and the gates that applied at each step. The outputs of the simu-lator are the quantum register state at each step (the probability of measuring eac...|$|R
2500|$|It took a {{year from}} Byrd {{for one of the}} {{circuits}} to consider one of these cases. In McMahon v. Shearson/American <b>Express,</b> the Second <b>Circuit</b> followed the Supreme Court in ordering state-law claims arbitrated and the federal ones litigated. It believed that public policy and precedent were on the side of resolving the latter judicially. [...] "Although Scherk and Byrd may cast some doubt on whether the Supreme Court, if presented with the issue, would hold [...] claims ... to be non-arbitrable," [...] wrote William Homer Timbers, [...] "it would be improvident for us to disregard clear judicial precedent in this Circuit based on mere speculation." ...|$|R
40|$|This study {{presents}} the fabrication of triple-layer piezoelectric vibrator and analyzes its electrical impedance. The {{characterization of the}} electrical impedance and equivalent circuit of the triple-layer piezoelectric element in thickness vibration mode is discussed. The dielectric, elastic, piezoelectric and electro mechanical coupling constants (kt) of the samples were evaluated from the experimental impedance data. A simple but practical equivalent <b>circuit</b> <b>expressed</b> using only the electrical parameters of triple-layer piezoelectric vibrator, was explored. Analysis based on this equivalent circuit can provide {{a good understanding of}} the behavior of triple-layer piezoelectric vibrators as a function of frequency in the thickness mode. This will in turn aid the design and analysis of piezoelectric transducers...|$|R
5000|$|It took a {{year from}} Byrd {{for one of the}} {{circuits}} to consider one of these cases. In McMahon v. Shearson/American <b>Express,</b> the Second <b>Circuit</b> followed the Supreme Court in ordering state-law claims arbitrated and the federal ones litigated. It believed that public policy and precedent were on the side of resolving the latter judicially. [...] "Although Scherk and Byrd may cast some doubt on whether the Supreme Court, if presented with the issue, would hold such claims ... to be non-arbitrable," [...] wrote William Homer Timbers, [...] "it would be improvident for us to disregard clear judicial precedent in this Circuit based on mere speculation." ...|$|R
40|$|Currents of the single-electron {{transistors}} {{driven by}} time-dependent fields via external dissipative circuits are investigated theoretically. By <b>expressing</b> the external <b>circuit</b> {{in terms of}} driven harmonic oscillators and using the reduced-density operator method, we derive time- and environment-dependent tunneling rates in the regime of sequential tunneling and present expressions for both displacement and tunneling currents with these tunneling rates. It is found that the dissipative environments affect tunneling currents in two ways; the determination of driving voltages at tunneling junctions and the depletion of particle-hole distribution functions. Considering a simple dissipative circuit, we discuss {{the effects of the}} environment on tunneling currents in both static and time-dependent cases. Comment: 9 pages, 5 figures, to be published in Phys. Rev. ...|$|R
5000|$|.....the {{extension}} {{of economic growth}} itself requires the overturning of economic principles—the overturning of the ethics that grounds them. Changing {{from the perspectives of}} restrictive economy to those of general economy actually accomplishes a Copernican transformation: a reversal of thinking—and of ethics. If a part of wealth (subject to a rough estimate) is doomed to destruction or at least to unproductive use without any possible profit, it is logical, even inescapable, to surrender commodities without return. Henceforth, leaving aside pure and simple dissipation, analogous to the construction of the Pyramids, the possibility of pursuing growth is itself subordinated to giving: The industrial development of the entire world demands of Americans that they lucidly grasp the necessity, for an economy such as theirs, of having a margin of profitless operations. An immense industrial network cannot be managed {{in the same way that}} one changes a tire... It <b>expresses</b> a <b>circuit</b> of cosmic energy on which it depends, which it cannot limit, and whose laws it cannot ignore without consequences. Woe to those who, to the very end, insist on regulating the movement that exceeds them with the narrow mind of the mechanic who changes a tire.|$|R
40|$|Verifiable {{computation}} (VC) enables {{thin clients}} to efficiently verify the computational re-sults {{produced by a}} powerful server. Although VC was initially considered to be mainly of theoretical interest, {{over the last two}} years, impressive progress has been made on implementing VC. Specifically, we now have open-source implementations of VC systems that can handle all classes of computations <b>expressed</b> either as <b>circuits</b> or in the RAM model. However, despite this very encouraging progress, new enhancements in the design and implementation of VC protocols are required in order to achieve truly practical VC for real-world applications. In this work, we show that for functionalities that can be expressed efficiently in terms of set operations (e. g., a subset of SQL queries) VC can be enhanced to become drastically more practical: We present the design and prototype implementation of a novel VC scheme that achieves orders of magnitude speed-up in comparison with the state of the art. Specifically, we build and evaluate TrueSet, a system that can verifiably compute any polynomial-time function <b>expressed</b> as a <b>circuit</b> consisting of “set gates ” such as union, intersection, difference and set cardinality. Moreover, TrueSet supports hybrid circuits consisting of both set gates and traditional arithmetic gates. Therefore, it does not lose any of the expressiveness of the previous schemes—this also allows the user to choose {{the most efficient way to}} represent different parts of a computation. By expressing set computations as polynomial operations and introducing a novel Quadratic Polynomial Program technique, TrueSet achieves prover performance speed-up ranging from 30 x to 150 x and yields up to 97 % evaluation key size reduction. ...|$|R
40|$|Martin Synthesis yields quasi [...] delay-insensitive (QDI) <b>circuits,</b> <b>expressed</b> in {{production}} [...] rule-set (PRS) form. Under an atomic circuit evaluation model, these circuits are provably correct. However, not all physical circuit implementations provide the atomic transitions needed {{to satisfy the}} atomic circuit model. This can cause operational failures in real circuits, as we illustrate. Nonetheless, circuits with non-atomic transitions can faithfully implement the atomic circuit model when combined with a few simple slewtime constraints. To generalize this, we present a non-atomic circuit model, and we prove that any non-atomic circuit satisfying the slewtime constraints implements the atomic circuit model. To synthesize correct physical circuits, therefore, one can use Martin Synthesis assuming atomicity, and then physically implement the resulting circuit using the slewtime constraints as design rules...|$|R
50|$|I {{will simply}} state, without waiting further, that the {{extension}} of economic growth itself requires the overturning of economic principles—the overturning of the ethics that grounds them. Changing {{from the perspectives of}} restrictive economy to those of general economy actually accomplishes a Copernican transformation: a reversal of thinking—and of ethics. If a part of wealth (subject to a rough estimate) is doomed to destruction or at least to unproductive use without any possible profit, it is logical, even inescapable, to surrender commodities without return. Henceforth, leaving aside pure and simple dissipation, analogous to the construction of the Pyramids, the possibility of pursuing growth is itself subordinated to giving: The industrial development of the entire world demands of Americans that they lucidly grasp the necessity, for an economy such as theirs, of having a margin of profitless operations. An immense industrial network cannot be managed {{in the same way that}} one changes a tire… It <b>expresses</b> a <b>circuit</b> of cosmic energy on which it depends, which it cannot limit, and whose laws it cannot ignore without consequences. Woe to those who, to the very end, insist on regulating the movement that exceeds them with the narrow mind of the mechanic who changes a tire.|$|R
40|$|NULL Convention Logic (NCL) is a symbolically {{complete}} logic which expresses process {{completely in}} terms of the logic itself and inherently and conveniently <b>expresses</b> asynchronous digital <b>circuits.</b> The traditional form of Boolean logic is not symbolically complete {{in the sense that it}} requires the participation of a fundamentally different form of expression, time in the form of the clock, which has to be very carefully coordinated with the logic part of the expression to completely and effectively express a process. We introduce NULL Convention Logic" in relation to Boolean logic as a four value logic, and as a three value logic and finally as two value logic quite different from traditional Boolean logic. We then show how systems can be constructed entirely {{in terms of}} NULL Convention Logic...|$|R
40|$|Functional {{decomposition}} {{seems to}} be the most effective circuit synthesis approach for look-up table (LUT) FPGAs, (C) PLDs and complex gates. In the functional decomposition that targets LUT FPGAs, the circuit is constructed by recursively decomposing a given function and its sub-functions until each of the resulting subfunctions can be directly implemented with a LUT. The choice of sub-functions constructed in this process decides the quality of the resulting multi-level <b>circuit</b> <b>expressed</b> in terms of the logic block count and speed. In this paper, we propose a new effective and efficient method for the sub-function construction, and we consider its application in our circuit synthesis tool that targets LUT-based FPGAs. The method is based on the information relationship measures. The experimental results demonstrate that the proposed approach leads to extremely fast and very small circuits. ...|$|R
40|$|We {{present an}} Attribute Based Encryption system where access {{policies}} are expressed as polynomial size arithmetic circuits. We prove security against arbitrary collusions of users {{based on the}} learning with errors problem on integer lattices. The system has two additional useful properties: first, it naturally handles arithmetic circuits with arbitrary fan-in (and fan-out) gates. Second, secret keys are much shorter than in previous schemes: secret key size {{is proportional to the}} depth of the circuit where as in previous constructions the key size was proportional to the number of gates or wires in the circuit. The system is well suited for environments where access policies are naturally <b>expressed</b> as arithmetic <b>circuits</b> as is the case when policies capture statistical properties of the data or depend on arithmetic transformations of the data. The system also provides complete key delegation capabilities. ...|$|R
40|$|SummaryOscillatory {{patterns}} {{of activity in}} various frequency ranges are ubiquitously <b>expressed</b> in cortical <b>circuits.</b> While recent studies in humans emphasized rhythmic modulations of neuronal oscillations (“second-order” rhythms), their potential involvement in information coding remains an open question. Here, we show that a rhythmic (∼ 0. 7  Hz) modulation of hippocampal theta power, unraveled by second-order spectral analysis, supports encoding of spatial and behavioral information. The phase preference of neuronal discharge within this slow rhythm significantly increases {{the amount of information}} carried by action potentials in various motor/cognitive behaviors by (1) distinguishing between the spikes fired within versus outside the place field of hippocampal place cells, (2) disambiguating place firing of neurons having multiple place fields, and (3) predicting between alternative future spatial trajectories. This finding demonstrates the relevance of second-order spectral components of brain rhythms for decoding neuronal information...|$|R
40|$|As current silicon-based {{techniques}} {{fast approach}} their practical limits, {{the investigation of}} nanoscale electronics, devices and system architectures becomes a central research priority. It is expected that nanoarchitectures will confront devices and interconnections with high inherent defect rates, which motivates the search for new architectural paradigms. In this chapter, we exam probabilistic-based design methodologies for designing nanoscale computer architectures based on Markov Random Fields (MRF) The MRF can <b>express</b> arbitrary logic <b>circuits</b> and logic operation is achieved by maximizing the probability of state configurations in the logic network. Maximizing state probability is equivalent to minimizing a form of energy that depends on neighboring nodes in the network. Once we develop a library of elementary logic components, we can link them together to build desired architectures. Overall, the probabilistic-based design can dynamically adapt to structural and signal-based faults...|$|R
50|$|The Lomira {{area has}} long been a stronghold of the Evangelical Church. While Wisconsin was still a mission of the Illinois Conference, those in the Lomira <b>Circuit</b> <b>expressed</b> a desire for a camp meeting in their area. A first camp meeting was held June 15-21, 1853. People came on foot from Menomonee Falls, about 45 mi to the south, and by ox team and wagon from Princeton, about 60 mi to the north. There was {{powerful}} preaching, ardent praying, and inspiring singing. In 1905 the camp meeting association of the Fond du Lac and Milwaukee Districts were united, with the Lomira site designated as the annual summer meeting place. Camping activities continued in Lomira for 104 years until being transferred to Lake Lucerne in Waushara County in 1957. The former summer camp meeting property then became home to the Trinity United Methodist Church.|$|R
