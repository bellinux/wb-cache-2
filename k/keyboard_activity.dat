19|28|Public
50|$|XKB allows better {{handling}} of the keyboard indicators (LEDs). In particular, XKB provides symbolic names for indicators, which allows binding indicators to <b>keyboard</b> <b>activity</b> and checking which indicators are actually present on the keyboard.|$|E
50|$|Hardware keyloggers {{are used}} for {{keystroke}} logging, a method of capturing and recording computer users' keystrokes, including sensitive passwords. They can be implemented via BIOS-level firmware, or alternatively, via a device plugged inline between a computer keyboard and a computer. They log all <b>keyboard</b> <b>activity</b> to their internal memory.|$|E
50|$|A {{hosted desktop}} {{is a product}} set within the larger cloud-computing sphere {{generally}} delivered {{using a combination of}} technologies including hardware virtualization and some form of remote connection software, Citrix XenApp or Microsoft Remote Desktop Services being two of the most common. Processing takes place within the provider's datacentre environment with traffic between the datacentre and the client being primarily : display updates, mouse movements and <b>keyboard</b> <b>activity</b> (additional traffic will be generated by audio & print jobs).|$|E
40|$|The paper {{presents}} especially developed {{software applications}} that aim {{to teach children}} with special needs how to perform common <b>keyboard</b> <b>activities.</b> These applications are successfully used in several special schools in Bulgaria. The paper also introduces the results of work with these programs, realised at the Hospital “St. Sofia ” (Specialized hospital for residential treatment of prolonged therapy and rehabilitation of children with cerebral palsy, Sofia, Bulgaria) ...|$|R
40|$|The present study, {{a part of}} the PROOF (PRedicting Occupational {{biomechanics}} in OFfice workers) study, {{aimed to}} determine whether trapezius muscle effort was different across computer activities in a field study of computer workers, and also investigated whether head and shoulder postures were different across computer activities. One hundred twenty participants were measured continuously for two hours each while performing their own computer work. <b>Keyboard</b> <b>activities</b> were associated with the highest intensity of left and right trapezius muscle efforts, and mouse activities were associated with the smallest variability in left and right trapezius muscle efforts. Corresponding trends in head and shoulder postures included that the greatest head flexion and left and right shoulder internal rotation was observed during <b>keyboard</b> <b>activities,</b> and that the smallest variability in head flexion, head lateral tilt, and right shoulder internal rotation was observed during mouse activities. Identifying which muscle efforts and postures are different across computer activities is the first essential step for developing prediction rules for muscle efforts and postures, which can be used to link muscle efforts and postures to musculoskeletal symptoms in epidemiological studies. © 2012 - IOS Press and the authors. All rights reserved...|$|R
40|$|The {{problem was}} to survey and collect {{ideas on the}} use of {{improvisation}} as a teaching and learning tool in elementary piano instruction and to prescribe activities and exercises for second through fourth grade piano classes. These areas were examined: philosophies and theories influencing traditional instruction, effects of creative <b>keyboard</b> <b>activities</b> on children's musical development, specific teaching strategies using improvisation, evaluative procedures, and suitability of materials for young children. Data collected from published and unpublished materials were classified, and presented concerning the feasibility of using keyboard improvisation with early elementary children. It was found that suitable improvisational exercises allow the child to organize his perceptions into the basic concepts of music. Recommendations for teachers and researchers were made...|$|R
50|$|Winlogon {{monitors}} {{keyboard and}} mouse activity {{to determine when}} to activate screen savers. After the screen saver is activated, Winlogon continues to monitor keyboard and mouse activity to determine when to terminate the screen saver. If the screen saver is marked as secure, Winlogon treats the workstation as locked. When there is mouse or <b>keyboard</b> <b>activity,</b> Winlogon invokes the WlxDisplayLockedNotice function of the GINA and locked workstation behavior resumes. If the screen saver is not secure, any keyboard or mouse activity terminates the screen saver without notification to the GINA.|$|E
50|$|Like the {{previously}} known cyber weapons Stuxnet and Duqu, it is employed in a targeted manner and can evade current security software through rootkit functionality. Once {{a system is}} infected, Flame can spread to other systems over a local network or via USB stick. It can record audio, screenshots, <b>keyboard</b> <b>activity</b> and network traffic. The program also records Skype conversations and can turn infected computers into Bluetooth beacons which attempt to download contact information from nearby Bluetooth enabled devices. This data, along with locally stored documents, is sent on to one of several command and control servers that are scattered around the world. The program then awaits further instructions from these servers.|$|E
5000|$|Its {{discovery}} was announced on 28 May 2012 by MAHER Center of Iranian National Computer Emergency Response Team (CERT), Kaspersky Lab and CrySyS Lab of the Budapest University of Technology and Economics. The last of these stated {{in its report}} that Flame [...] "is certainly the most sophisticated malware we encountered during our practice; arguably, {{it is the most}} complex malware ever found." [...] Flame can spread to other systems over a local network (LAN) or via USB stick. It can record audio, screenshots, <b>keyboard</b> <b>activity</b> and network traffic. The program also records Skype conversations and can turn infected computers into Bluetooth beacons which attempt to download contact information from nearby Bluetooth-enabled devices. This data, along with locally stored documents, is sent on to one of several command and control servers that are scattered around the world. The program then awaits further instructions from these servers.|$|E
40|$|Accurate gaze region {{estimation}} {{on the web}} {{is important}} for the purpose of placing marketing advertisements in web pages and monitoring authenticity of users response in web forms. To identify gaze region on the web we need cheap less technical and non-laboratory setup that minimize user interruptions. This study uses the mouse and keyboard as input devices to collect web usage data. The data collected is categorized into mouse <b>activities</b> <b>keyboard</b> <b>activities</b> and scroll activities. A regression model is then used to estimate gaze region from the categorized data. The results indicate that although mouse cursor data is generated throughout the user session the use of data from keyboard presses and scroll from both keyboard and mouse improves the accuracy of identified gaze regions in web usage data...|$|R
5000|$|Open iT UsageAnalyzer tracks each user’s <b>keyboard</b> {{and mouse}} <b>activities</b> {{enabling}} personalized user training. Some of this module’s primary functions include the following: ...|$|R
50|$|The VTech PreComputer 2000 is an {{electronic}} learning aid manufactured by VTech. It contains a dot matrix LCD, standard size <b>keyboard,</b> 33 <b>activities</b> for teaching in 4 different levels and basic computer programming for 1 or 2 players. It has an 80,000 word spell checker and a SAT word builder. It can be powered by battery or AC adapter. It is {{the successor to}} the VTech PreComputer 1000 model.|$|R
50|$|Windows GUI {{programs}} are event-driven. After starting a process, Windows maintains an individual message queue for it. Windows places messages into that queue whenever mouse activity occurs on that process's window, whenever <b>keyboard</b> <b>activity</b> occurs while that process's window has focus, {{and at other}} times. A process can also add messages to its own queue. To accept user input, and for other reasons, each process must continuously retrieve messages from its queue, and act on them. A programmer makes the process do that by writing a loop that calls GetMessage (which blocks for a message and retrieves it), and then calls DispatchMessage (which dispatches the message), and repeats indefinitely. This is the message loop. It is usually part of the main program, which runs on the main thread. Messages for every window of the process pass through its message queue, and are handled by its message loop. A message loop is one kind of event loop.|$|E
5000|$|A Regular Hardware Keylogger is {{used for}} {{keystroke}} logging {{by means of a}} hardware circuit that is attached somewhere in between the computer keyboard and the computer. It logs all <b>keyboard</b> <b>activity</b> to its internal memory which can be accessed by typing in a series of pre-defined characters. A hardware keylogger has an advantage over a software solution; because it is not dependent on the computer's operating system it will not interfere with any program running on the target machine and hence cannot be detected by any software. They are typically designed to have an innocuous appearance that blends in {{with the rest of the}} cabling or hardware, such as appearing to be an EMC Balun. They can also be installed inside a keyboard itself (as a circuit attachment or modification), or the keyboard could be manufactured with this [...] "feature". They are designed to work with legacy PS/2 keyboards, or more recently, with USB keyboards. Some variants, known as wireless hardware keyloggers, have the ability to be controlled and monitored remotely by means of a wireless communication standard.|$|E
5000|$|Keyboard hardware: Hardware keyloggers {{are used}} for {{keystroke}} logging {{by means of a}} hardware circuit that is attached somewhere in between the computer keyboard and the computer, typically inline with the keyboard's cable connector. There are also USB connectors based Hardware keyloggers as well as ones for Laptop computers (the Mini-PCI card plugs into the expansion slot of a laptop). More stealthy implementations can be installed or built into standard keyboards, so that no device is visible on the external cable. Both types log all <b>keyboard</b> <b>activity</b> to their internal memory, which can be subsequently accessed, for example, by typing in a secret key sequence. A hardware keylogger has an advantage over a software solution: it is not dependent on being installed on the target computer's operating system and therefore will not interfere with any program running on the target machine or be detected by any software. However its physical presence may be detected if, for example, it is installed outside the case as an inline device between the computer and the keyboard. Some of these implementations have the ability to be controlled and monitored remotely by means of a wireless communication standard.|$|E
40|$|Today's {{mobile phone}} users {{are faced with}} large numbers of {{notifications}} on social media, ranging from new followers on Twitter and emails to messages received from WhatsApp and Facebook. These digital alerts continuously disrupt activities through instant calls for attention. This paper examines closely the way everyday users interact with notifications and their impact on users' emotion. Fifty users were recruited to download our application NotiMind and use it over a five-week period. Users' phones collected thousands of social and system notifications along with affect data collected via self-reported PANAS tests three times a day. Results showed a noticeable correlation between positive affective measures and <b>keyboard</b> <b>activities.</b> When large numbers of Post and Remove notifications occur, a corresponding increase in negative affective measures is detected. Our predictive model has achieved a good accuracy level using three different classifiers "in the wild" (F-measure 74 - 78 % within-subject model, 72 - 76 % global model). Our findings show {{that it is possible to}} automatically predict when people are experiencing positive, neutral or negative affective states based on interactions with notifications. We also show how our findings open the door to a wide range of applications in relation to emotion awareness on social and mobile communication...|$|R
40|$|One of {{the aims}} of the Eye-to-IT project (FP 6 IST 517590) is to {{integrate}} keyboard logging and eye-tracking data to study and anticipate the behaviour of human translators. This so-called User-Activity Data (UAD) would make it possible to empirically ground cognitive models and to validate hypotheses of human processing concepts in the data. In order to thoroughly ground a cognitive model of the user in empirical observation, two conditions must be met as a minimum. All UAD data must be fully synchronised so that data relate to a common construct. Secondly, data must be represented in a queryable form so that large volumes of data can be analysed electronically. Two programs have evolved in the Eye-to-IT project: TRANSLOG is designed to register and replay keyboard logging data, while GWM is a tool to record and replay eye-movement data. This paper reports on an attempt to synchronise and integrate the representations of both software components so that sequences of keyboard and eye-movement data can be retrieved and their interaction studied. The outcome of this effort would be the possibility to correlate eye- and <b>keyboard</b> <b>activities</b> of translators (the user model) with properties of the source and target texts and thus to uncover dependencies in the UAD...|$|R
40|$|This study, {{a part of}} the PRedicting Occupational {{biomechanics}} in OFfice workers (PROOF) study, investigated {{whether there}} are differences in field-measured forces, muscle efforts, postures, velocities and accelerations across computer activities. These parameters were measured continuously for 120 office workers performing their own work for two hours each. There were differences in nearly all forces, muscle efforts, postures, velocities and accelerations across keyboard, mouse and idle <b>activities.</b> <b>Keyboard</b> <b>activities</b> showed a 50 % increase in the median right trapezius muscle effort when compared to mouse activities. Median shoulder rotation changed from 25 degrees internal rotation during keyboard use to 15 degrees external rotation during mouse use. Only keyboard use was associated with median ulnar deviations greater than 5 degrees. Idle activities led to the greatest variability observed in all muscle efforts and postures measured. In future studies, measurements of computer activities could be used to provide information on the physical exposures experienced during computer use. Practitioner Summary: Computer users may develop musculoskeletal disorders due to their force, muscle effort, posture and wrist velocity and acceleration exposures during computer use. We report that many physical exposures are different across computer activities. This information may be used to estimate physical exposures based on patterns of computer activities over time. © 2012 Copyright Taylor and Francis Group, LLC...|$|R
40|$|This paper {{presents}} {{a system that}} enables a presenter to work directly on the projection without the typical interruption of the presentation flow being caused by a mouse or <b>keyboard</b> <b>activity.</b> The lecturer simply uses his fingers as a natural and intuitive pointing device. The system consists of an LED, a standard webcam, a video projector, and a small software system running on a notebook computer. The camera is positioned such that it views the projection area. After a few calibration clicks, the mouse emulation is functional at any place of the projection area...|$|E
40|$|Abstract: This paper {{reports on}} a four-week study of the usage of myTeam, a {{prototype}} that provides availability awareness for distributed work groups {{through the use of}} sensor data. Automatically detected information such as presence or absence in office, network connection, mouse and <b>keyboard</b> <b>activity</b> is conveyed along with optional user-added information such as “gone for the day”, or “do not disturb”. The information allows visualization of the availability of colleagues, and supports selection of the best mode for communication for the given context. The results of the study are reported to inform the design of future availability awareness systems...|$|E
40|$|Help is a {{combination}} of editor, window system, shell, and user interface that provides a novel environment for the construction of textual applications such as browsers, debuggers, mailers, and so on. It combines an extremely lean user interface with some automatic heuristics and defaults to achieve significant effects with minimal mouse and <b>keyboard</b> <b>activity.</b> The user interface is driven by a file-oriented programming interface that may be controlled from programs or even shell scripts. By taking care of user interface issues in a central utility, help simplifies the job of programming applications that make use of a bitmap display and mouse...|$|E
5000|$|The Yoga 3 {{comes in}} {{versions}} with 11.6-inch and 14-inch screens, both with 1080p resolution. The screens can rotate 360 degrees {{for use as}} a laptop or tablet. The Yoga 3 can also be placed in [...] "tent mode" [...] where it acts as a stand for itself while hiding its <b>keyboard</b> for <b>activities</b> like watching movies. It uses an Intel Core M processor. The 14-inch model is offered with Core i5 and Core i7 versions. Both models can accommodate up to 8 gigabytes of memory. Configurations with up to 500 gigabytes of SSD capacity are available.|$|R
40|$|This Vocational-Technical Education Consortium of States (V-TECS) {{curriculum}} {{guide is}} designed to provide job relevant tasks,:lerformance objectives, performance guides, resources, learning activities, evaluation standards, and achievement testing in word processing. It may be used with any teaching method chosen by the instructor. The guide covers six duties of the occupation: organizing and planning, supervising and implementing, performing clerical activities, performing mail handling activities, performing transcription <b>activities,</b> and performing <b>keyboarding</b> (typewriting) <b>activities.</b> Each duty is divided into from 1 to 10 performance objectives. Noted under each performance objective are the task, conditions, standard, source for standard, performance guide, enabling objectiva(s), resources, suggested teaching activities, a criterion-referenced measure, and a checklist for performanc...|$|R
40|$|Deauthentication is an {{important}} component of any authentication system. The widespread use of computing devices in daily life has underscored the need for zero-effort deauthentication schemes. However, the quest for eliminating user effort may lead to hidden security flaws in the authentication schemes. As a case in point, we investigate a prominent zero-effort deauthentication scheme, called ZEBRA, which provides an interesting and a useful solution to a difficult problem as demonstrated in the original paper. We identify a subtle incorrect assumption in its adversary model that leads to a fundamental design flaw. We exploit this to break the scheme with a class of attacks that are much easier for a human to perform in a realistic adversary model, compared to the naïve attacks studied in the ZEBRA paper. For example, one of our main attacks, where the human attacker has to opportunistically mimic only the victim's <b>keyboard</b> typing <b>activity</b> at a nearby terminal, is significantly more successful compared to the naïve attack that requires mimicking <b>keyboard</b> and mouse <b>activities</b> as well as keyboard-mouse movements. Further, by understanding the design flaws in ZEBRA as cases of tainted input, we show that we can draw on well-understood design principles to improve ZEBRA's security...|$|R
40|$|This paper {{describes}} a small study that investigated how children perceived a Wizard of Oz experiment. Ten high school children attended two different presentations of Wizard of Oz evaluations {{and once they}} had experienced both, they were told about the wizard set up and asked some questions about their perceptions of what was happening. The results showed that {{for the majority of}} the children, the presence of the wizard went unnoticed even when the wizard was in the room. Those that noticed wizard activity were alerted to it by the sound of the <b>keyboard</b> <b>activity</b> that accompanied one of the experimental setups. This is an important result for the child computer research community, but further work needs to look at effects on different age groups and with different use contexts...|$|E
40|$|The last diagram {{needs to}} have a line {{hand-drawn}} in the margin MUSBUS [Monash University Suite for Benchmarking UNIX Systems] is a terminal emulation program to time and "stress " computer system performance. MUSBUS simulates multiple human users on an interactive computing environment executing a workload script. MUSBUS offers benchmark control and stress capabilities lacking in an environment like a bare operating system. One program simulates user <b>keyboard</b> <b>activity,</b> and another distributes resource utilization (random or not) during a benchmarking session. This report documents the qualitative experience and some results of using MUSBUS. This report discusses the needs, problems, some solutions, and the advantages to this performance measurement approach. This report is not a guide to using MUSBUS since that function is better served by MUSBUS documentation [3]. ...|$|E
40|$|Nowadays, {{university}} {{students do not}} necessarily acquire their typing skills through systematic touch-typing training, like professional typists. But then, how are the resulting typing skills structured? To reveal the composition of today’s typical typing skills, 32 {{university students}} performed on three writing tasks: copying from memory, copying from text, and generating from memory. Variables of keyboard operation that presumably reflect typing abilities and strategies, were recorded with ScriptLog, a keystroke logging software; these include typing speed, keyboard efficiency, and <b>keyboard</b> <b>activity</b> beyond keypresses that become visible in the final text. Factor analyses reveal three components of typing behavior per task. Their clearest interpretations relate to keyboard activity/efficiency and typing speed. Across tasks, typing speed is the strongest individually stable facet of keyboard operation. In summary, university students’ keyboard behavior is a multi-faceted skill rather than the mere mastery of a touch-typing method...|$|E
5000|$|The Los Angeles Times {{described}} the premiere at Zipper Hall of his Sigils for solo piano as [...] "the recital’s strongest piece. Sigils boasts a fascinating -- and somewhat split -- personality, with its mixtures of rhythmic data-dancing systems and more visceral, clustered fistfuls-of-notes, hazy <b>keyboard</b> cloud <b>activity,</b> and a deceptive 'resolving chord' (with a flatted {{second in the}} bass)". His second puppet opera, Zoophilic Follies, premiered September 2011 at REDCAT and featured Timur and the Dime Museum along with other musical guests. His first puppet opera, Le Petit Macabre, premiered in 2008 at St. Anne's Warehouse, Brooklyn {{as part of the}} Great Small Works Toy Theatre Festival. It was inspired by Gyorgy Ligeti's opera, Le Grand Macabre.|$|R
50|$|Oscar Milani {{was born}} in Rosario, Argentina, November 24, 1946, where he studied {{medicine}} and music. A Bariloche Foundation scholarship holder, he went to Buenos Aires to specialize; harpsichord, chamber music, and interpretation on early <b>keyboard</b> instruments. His <b>activities</b> as a soloist and chamber musician with the Camerata Bariloche took him to several countries of South America and also to Europe. He has made recordings for the ORF and Picks Records.|$|R
40|$|We {{explored}} {{methods of}} detecting occupancy in single-person offices using data already {{collected by the}} occupant 2 ̆ 019 s PC, or data from relatively cheap sensors added to the PC. We collected data at 15 -s intervals for up to 312 ̆ 009 days in each of 28 offices. A combination of low/no cost sensors (webcam-based motion detection, and <b>keyboard</b> and mouse <b>activity)</b> was much more accurate at detecting occupancy than a commercial ceiling-based passive infrared (PIR) sensor, and provided overall daytime accuracy > 90...|$|R
40|$|Abstract [...] The {{purpose of}} this study was to examine antiwomen attitudes and {{behaviors}} in men as a function of the use of interactive rotica, moderated by the men's initial affective disposition toward sexuality. A total of 100 first year university men were exposed to either (a) neutral, noninteractive (control) stimuli, (b) erotic, noninteractive stimuli, (c) erotic, moderately interactive stimuli, or (d) erotic, highly interactive stimuli on a personal computer. Prior to this manipulation, participants " levels of erotophobia-erotophilia were assessed. After exposure to the manipulation, participants ' attitudes toward women, rape myth acceptance, and level of aggressive behavior in response to a female confederate's provocation were assessed. In addition, participants ' <b>keyboard</b> <b>activity</b> and self-reported levels of sexual arousal were recorded and analyzed. Results howed that the erotic stimuli resulted in much interactive activity and in significant amounts of sexual arousal, but use of computer pornography by participants did not affect any of the measures of attitudes or behavior toward women in comparison with the control condition and regardless of participants' affective orientation to sexuality. Implications for theory and research on computer-mediated xposure to pornography are discussed. © 1997 Elsevie...|$|E
40|$|Anomaly {{detection}} systems largely {{depend on}} user profile {{data to be}} able to detect deviation from normal activity. Most of this profile data is based on commands executed by users on a system and may not represent user’s complete behavior which is essential for effectively detecting the anomalies in the system. Collection of user behavior data is a slow and time consuming process. In this paper, we propose a new approach to automate the generation of user data by parameterizing user behavior in terms of user intention (malicious/normal), user skill level, set of applications installed on a machine, mouse movement and <b>keyboard</b> <b>activity.</b> The user behavior parameters are used to generate templates, which can be further customized. The framework is called USim which achieves rapid generation of user behavior data based on these templates on GUI based systems. The data thus generated can be utilized for rapidly training and testing intrusion detection systems (IDSes) and improving their detection precision. This framework can also benefit research where user behavior data is utilized to improve usability and quality of software products. One such application is in the Human-Computer Interaction (HCI) domain, where the proposed technique can provide better testing capabilities. ...|$|E
40|$|The thesis {{represents}} {{the description of}} the application Nadzornik, its purpose is to monitor and supervise all user activities on a personal computer. Nadzornik consists of two parts. The client gathers the data on the user activity, and the administration application reviews and analysis the data sent from the client. The administration application is a major part of our solution. Main functions of the Client are: information collecting of process on the foreground; logging of keystrokes; blocking certain forbidden processes; relaying this data to a remote database; retrieving updates from the administration application; hiding from the user and preventing unauthorized closure of the client program. Main functions of the administration application are: representation of collected data (from the client) visually in controls Urnik (daily and weekly data) and Histogram (monthly data) or displayed as text inside table; data analysis (daily, weekly and monthly); remote user control (streaming the monitor, screen imaging and <b>keyboard</b> <b>activity</b> logs); user, administrator and process management and saving recent history of recently run analysis and their reopenings. Functions of the administration application are available to user by upgraded user interface, which allows us to set different color schemes and styles. First part of this dissertation describes the tools we used during creation of the application. The detailed description of the application Nadzornik is presented last. This part describes the most important programming solutions. In the last part we analyze our application and conclude the thesis with conclusions...|$|E
40|$|Abstract:- In the paper, {{there is}} {{proposed}} {{a concept of}} structure of an intelligent microsystem for communication with real surrounding space (in general with electrical, chemical, thermal, magnetic, mechanical domains, radiation and their mutual overlapping). Concrete model of an intelligent temperature microsystem for control purposes is designed. The model is realized in hardware. System activity is controlled by a microprocessor. Information on temperatures in separated spaces is sensed by intelligent sensor units controlled by the central unit. Radiofrequency signal performs wireless two-way data (measured and control ones) transmission between control and sensor units. Actuator serves for performing actions of the system. User communicates with the system using a <b>keyboard.</b> System <b>activity,</b> including internal (wired) and external (wireless) communication, is controlled by internal software. Presented hardware model works in temperature range from 0 o C to 50 o C with precision of 0. 2 o C, communication range is 50 m...|$|R
40|$|We present BreakOut, {{a desktop}} system that infers an individual’s posture, stress levels, and {{engagement}} with computer related tasks {{with the goal}} of recommending a break of sedentary behaviour at appropriate times. We present an Experience Sampling study that attempted to evaluate BreakOut’s ability to infer users’ posture and stress from a single webcamera as well as their engagement from <b>keyboard</b> and mouse <b>activity.</b> We conclude with the description of an ambient artistic display as well as an intuitive gestural interaction technique that enables the user to interact with BreakOut with minimal cognitive resources...|$|R
40|$|A large {{fraction}} of email spam, distributed denial-ofservice (DDoS) attacks, and click-fraud on web advertisements {{are caused by}} traffic sent from compromised machines that form botnets. This paper posits that by identifying human-generated traffic as such, one can mitigate botnet attacks, by servicing human-generated traffic with improved reliability or higher priority. The key challenge is to identify human-generated traffic {{in the absence of}} strong unique identities. We develop NAB (“Not-A-Bot”), a system to approximately identify and certify human-generated activity. NAB uses a small trusted software component called an attester, which runs on the client machine with an untrusted OS and applications. The attester tags each request with an attestation if the request is made within a small amount of time of legitimate <b>keyboard</b> or mouse <b>activity.</b> The remote entity serving the request sends the request and attestation to a verifier, which checks the attestation and implements an application-specific policy for attested requests. Our implementation of the attester is within the Xen hypervisor. By analyzing traces of <b>keyboard</b> and mouse <b>activity</b> from 328 users at Intel, together with adversarial traces of spam, DDoS, and click-fraud activity, we estimate that NAB reduces the amount of spam that currently passes through a tuned spam filter by more than 92 %, while not flagging any legitimate email as spam. NAB delivers similar benefits to legitimate requests under DDoS and click-fraud attacks. ...|$|R
