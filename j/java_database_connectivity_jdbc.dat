43|371|Public
25|$|Sun Microsystems {{used the}} ODBC system {{as the basis}} for their own open standard, <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC).</b> In most ways, JDBC can be {{considered}} a version of ODBC for the programming language Java instead of C. JDBC-to-ODBC bridges allow Java-based programs to access data sources through ODBC drivers on platforms lacking a native JDBC driver, although these are now relatively rare. Inversely, ODBC-to-JDBC bridges allow C-based programs to access data sources through JDBC drivers on platforms or from databases lacking suitable ODBC drivers.|$|E
5000|$|The <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC)</b> API for {{database}} access ...|$|E
5000|$|Integration and {{messaging}} services, including J2EE Connector Architecture (JCA), <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC),</b> and Java Message Service (JMS) ...|$|E
40|$|Performance is {{traditionally}} {{considered one of}} the most significant concerns in intensive database applications. Several architectural tactics may be taken to minimize the possibility of coming across with any performance bottleneck. One of them is the usage of Call Level Interfaces (CLI). CLI are low level API that provide a high performance environment to execute SQL statements on relational and also on some NoSQL database servers. In spite of this, CLI are not thread safe, this way preventing distinct threads from sharing datasets retrieved from databases through Select statements. Thus, in situations where two or more threads need to access datasets retrieved from the same Select statement, there is no other alternative than providing each thread with its own dataset, this way consuming important computational resources. In this paper we propose a new design for CLI to overcome the aforementioned drawback. Unlike current implementations of CLI, now they are natively thread-safe. The implementation herein presented is based on a thread safe updatable local memory structure where data retrieved from databases is kept. A proof of concept based on <b>Java</b> <b>Database</b> <b>Connectivity</b> type 4 (<b>JDBC)</b> for SQL Server 2008 is presented and also a performance assessment...|$|R
50|$|OpenOffice.org could {{interact}} with databases (local or remote) using ODBC (Open <b>Database</b> <b>Connectivity),</b> <b>JDBC</b> (<b>Java</b> <b>Database</b> <b>Connectivity)</b> or SDBC (StarOffice <b>Database</b> <b>Connectivity).</b>|$|R
40|$|The {{prototype}} is an intranet {{application for}} customer order scheduling that utilizes a front-end to access stored procedures and {{data on a}} server running Oracle 8 i database. Stored procedures and functions, developed in PL/SQL, use parameters, which are passed to the system through graphical user interface. The prototype enables user to schedule orders with three different algorithms and also {{to interact with the}} application. User interacts with a lightweight front-end client (low CPU and memory usage), running on most platforms that can connect to the Oracle server from any computer connected to the intranet. Front-end client can access the database through OBDC (Open <b>Database</b> <b>Connectivity),</b> <b>JDBC</b> (<b>Java</b> <b>Database</b> <b>Connectivity)</b> or OCI (Oracle Call Interface). Thus we can develop a front-end client containing the user interface and procedure calls outside Oracle development environment, giving us more freedom and an opportunity to utilize existing application design skills using simpler and more accessible development tools. Lessons Learned The problem of customer order scheduling can be partially solved with the usage o...|$|R
50|$|PHP 5 has {{a similar}} {{interface}} called PHP Data Objects (PDO). Java's <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC)</b> is also similar.|$|E
5000|$|Data access: {{working with}} {{relational}} database management systems on the Java platform using <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC)</b> and object-relational mapping tools and with NoSQL databases ...|$|E
50|$|MemSQL is wire-compatible with MySQL. This {{means that}} {{applications}} can connect to MemSQL through MySQL clients and drivers, {{as well as}} standard Open Database Connectivity (ODBC) and <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC)</b> connectors.|$|E
50|$|To {{connect with}} {{individual}} <b>databases,</b> <b>JDBC</b> (the <b>Java</b> <b>Database</b> <b>Connectivity</b> API) requires drivers for each database. The JDBC driver gives out {{the connection to}} the database and implements the protocol for transferring the query and result between client and database.|$|R
40|$|Computer ScienceThis thesis {{examines}} {{methods for}} accessing information {{stored in a}} relational database from a Web Page. The stateless and connectionless nature of the Web's Hypertext Transport Protocol {{as well as the}} open nature of the Internet Protocol pose problems in the areas of database concurrency, security, speed, and performance. We examined the Common Gateway Interface, Server API, Oracle's Web/database architecture, and the <b>Java</b> <b>Database</b> <b>Connectivity</b> interface in terms of performance and flexibility. Oracle's approach was found to be the most robust and best performing approach currently in use, although the <b>Java</b> <b>Database</b> <b>Connectivity</b> interface has not yet been widely implemented. Based on our research and experience implementing a prototype, we conclude that Web/ database technology is currently only appropriate for reNANaval Postgraduate School author...|$|R
40|$|Java as the Language for HPCC {{platform}} independence {{simple and}} straight forward parallelization unique included network capabilities <b>JDBC</b> (<b>Java</b> <b>Database</b> <b>Connectivity)</b> RMI (Remote Method Invocation) Secure Connections over the Inter- and Intranet easy generation of object reflecting the engineering design process,,code reusability' '- simplifies code desig...|$|R
50|$|Communication with Structured Query Language (SQL) {{databases}} {{is achieved}} through built-in support for <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC).</b> Mathematica can also install web services from a Web Services Description Language (WSDL) description. It can access HDFS data via Hadoop.|$|E
50|$|Sequerome has a three-tiered {{architecture}} that uses Java servlet and Server Page technologies with <b>Java</b> <b>database</b> <b>connectivity</b> (<b>JDBC),</b> making it both server and platform-independent. Sequerome {{is compatible with}} essentially all Java-enabled, graphical browsers but is better accessed using Internet Explorer and can be run on most operating systems equipped with a Java Virtual Machine (JVM) and Jakarta Tomcat server. End-users have to download plugins for viewing structure of molecules from the Protein Data Bank (e.g. PyMOL, Cn3D, Rasmol, SwissPDB, etc.).|$|E
50|$|<b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC)</b> is an {{application}} programming interface (API) for the programming language Java, which defines how a client may access a database. It is Java based data access technology and used for Java database connectivity. It {{is part of the}} Java Standard Edition platform, from Oracle Corporation. It provides methods to query and update data in a database, and is oriented towards relational databases. A JDBC-to-ODBC bridge enables connections to any ODBC-accessible data source in the Java virtual machine (JVM) host environment.|$|E
30|$|The Java {{language}} was chosen {{together with the}} Java SE (Standard Edition) platform (Java) with the MySQL Server Community database (MySQL), the <b>JDBC</b> (<b>Java</b> <b>Database</b> <b>Connectivity)</b> driver for MySQL library (MySQL et al. 2017) to allow connection to the database and the iText library (iText) for creating an RD in PDF format.|$|R
40|$|To be able {{to access}} and control the Industrial System {{remotely}} we are presenting here a model based on Java RMI (Remote Method Invocation). To ensure persistence of data using <b>JDBC</b> (<b>Java</b> <b>Database</b> <b>Connectivity)</b> the data are stored into a database server. The real world entities could be reflected on developed classes using the object oriented programming advantages...|$|R
40|$|Current web <b>database</b> <b>connectivity</b> {{solutions}} lack {{an object}} oriented architecture for Java applications. In particular, Java is object oriented and most legacy databases are relational. This thesis proposes a {{design and implementation}} of an object oriented <b>Java</b> <b>database</b> class hierarchy for relational database interfaces. The work reported here consists of: (1) analysis of <b>Java</b> <b>Database</b> <b>Connectivity</b> specification, (2) discussion of two-tier and three-tier architectures for database systems, (3) mapping of relation database structure to an object model, and (4) development of a Java based framework to exercise the JDBC interfaces. This work provides: (1) an object model for the relational database; (2) Integration with a middleware application for network connectivity; and (3) A Java application client to support SQL access and manipulation[URL]...|$|R
50|$|Sun Microsystems {{used the}} ODBC system {{as the basis}} for their own open standard, <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC).</b> In most ways, JDBC can be {{considered}} a version of ODBC for the programming language Java instead of C. JDBC-to-ODBC bridges allow Java-based programs to access data sources through ODBC drivers on platforms lacking a native JDBC driver, although these are now relatively rare. Inversely, ODBC-to-JDBC bridges allow C-based programs to access data sources through JDBC drivers on platforms or from databases lacking suitable ODBC drivers.|$|E
50|$|GNU Data Access (GDA) {{is a set}} of plugin APIs, {{defined as}} generic as possible, so that any kind of data source can be {{accessed}} through them, to provide uniform access to different kinds of data sources (databases, information servers, mail spools, etc.). Similar to Open Database Connectivity (ODBC) or <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC),</b> GNU Data Access is a wrapper but with more features to access several database engines. GNU Data Access has been developed as a complete architecture that provides everything required to access data sources.|$|E
5000|$|Persistence layer : The {{persistence}} layer supports database {{independence and}} scalable transaction handling. Business logic {{can be developed}} completely independent of the underlying database and operating system. Database independence is also made possible by support for open standards. The database interface ensures optimized data access from within the ABAP environment through Open SQL. SAP propagates the outstanding capabilities of Open SQL for ABAP to Open SQL for Java and {{offers a variety of}} standard Application Programming Interfaces (APIs) to application programmers, such as SQLJ. Other technologies, such as Java Data Objects (JDO) and Container-Managed Persistence (CMP) for EJB, or the direct use of the <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC)</b> API, are also supported.|$|E
40|$|Various {{programming}} languages provide application programmer’s interfaces (API) for accessing databases. Traditional APIs, however, {{require the}} developers to explicitly include Structured Query Language (SQL) statements as string literals within the source {{code of the}} host programming language. For example, <b>Java</b> <b>Database</b> <b>Connectivity,</b> a <b>database</b> access methodology of Java, requires Java programmers to embed SQL statements as string literals in the Java code. While accomplishing the integration of database access capability, the mixture of two different languages causes several difficulties, such as SQL learning cost and inconsistency. To solve these issues, we propose a programming paradigm that will let <b>Java</b> <b>database</b> application programmers concentrate solely on Java throughout the development phases, without having to write a single SQL command. [URL]...|$|R
40|$|With {{the growing}} {{popularity}} of the Internet, companies have recognized that Intranets can be a valuable tool for dispersing data to their employees. SAS Institute has provided new tools for allowing Java ™ applications access to SAS data sets. In late 1996, SAS Institute released a beta version of the <b>Java</b> <b>Database</b> <b>Connectivity</b> (JDBC™) driver that when used with SAS Share*Net ® gave users the power to extract data to their desktop. While this paper will not discuss the implementation of the JDBC driver, it will provide direction and discuss issues to keep in mind when implementing the SAS Share*Net Server...|$|R
40|$|<b>JDBC</b> [...] the <b>Java</b> <b>Database</b> <b>Connectivity</b> {{specification}} [...] is {{a complex}} set of application programming interfaces (APIs) that developers need to understand if they want their Java applications to work with databases. JDBC is so complex that even the most experienced developers need to refresh their memories from time to time on specific methods and details. But, practically speaking, who wants to stop and thumb through a weighty tutorial volume each time a question arises? The answer is the JDBC Pocket Reference, a data-packed quick reference that is both a time-saver and a lifesaver. The JDBC...|$|R
5000|$|A DataSource {{object is}} the {{representation}} of a data source in the Java programming language. In basic terms, a data source is a facility for storing data. It can be as sophisticated as a complex database for a large corporation or {{as simple as a}} file with rows and columns. A data source can reside on a remote server, or it can be on a local desktop machine. Applications access a data source using a connection, and a DataSource object {{can be thought of as}} a factory for connections to the particular data source that the DataSource instance represents. The DataSource interface provides two methods for establishing a connection with a data source.Using a DataSource object is the preferred alternative to using the DriverManager for establishing a connection to a data source. They are similar to the extent that the DriverManager class and DataSource interface both have methods for creating a connection, methods for getting and setting a timeout limit for making a connection, and methods for getting and setting a stream for logging.Their differences are more significant than their similarities, however. Unlike the DriverManager, a DataSource object has properties that identify and describe the data source it represents. Also, a DataSource object works with a Java Naming and Directory Interface (JNDI) naming service and can be created, deployed, and managed separately from the applications that use it. A driver vendor will provide a class that is a basic implementation of the DataSource interface as part of its <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC)</b> 2.0 or 3.0 driver product. What a system administrator does to register a DataSource object with a JNDI naming service and what an application does to get a connection to a data source using a DataSource object registered with a JNDI naming service are described later in this chapter.Being registered with a JNDI naming service gives a DataSource object two major advantages over the DriverManager. First, an application does not need to hardcode driver information, as it does with the DriverManager. A programmer can choose a logical name for the data source and register the logical name with a JNDI naming service. The application uses the logical name, and the JNDI naming service will supply the DataSource object associated with the logical name. The DataSource object can then be used to create a connection to the data source it represents.The second major advantage is that the DataSource facility allows developers to implement a DataSource class to take advantage of features like connection pooling and distributed transactions. Connection pooling can increase performance dramatically by reusing connections rather than creating a new physical connection each time a connection is requested. The ability to use distributed transactions enables an application to do the heavy duty database work of large enterprises.Although an application may use either the DriverManager or a DataSource object to get a connection, using a DataSource object offers significant advantages and is the recommended way to establish a connection.Since:1.4 ...|$|E
40|$|Abstract- This paper {{consist of}} <b>Java</b> <b>database</b> <b>connectivity</b> (<b>JDBC).</b> The JDBC {{consists}} {{of a set of}} interfaces and classes written in the Java programming language. This shows how the JDBC environment provides the facility to manage database for multiple applications for updating, retrieving, modify. First three steps are, Selecting the required driver for DSN, specifying the connection details for DSN and testing the creating DSN. The DSN consist of specific information for data...|$|E
40|$|In {{developing}} an on-line store {{it is vital}} that we use an application which can offer maximum efficiency regardless of the platform it uses. The applications developed for this purpose have to be as robust as possible, providing the clients with access anywhere and the site administrators with the possibility to monitor continuously the changes in the data base. This article presents the means of obtaining such an application which can be easily adapted to all needsbusiness layer, servlet, Java beans, JavaServer pages (JSP), <b>Java</b> <b>database</b> <b>connectivity</b> (<b>JDBC)</b> ...|$|E
40|$|The {{flexible}} integration {{of a range}} of disparate IT applications is a key requirement for today’s global enterprises. The virtual enterprise, formed by a collection of collaborating companies for short term, high return, one off projects provides perhaps the most extreme example of this need. It is unlikely that any collaborators in a virtual enterprise will have similar networks or software, but the requirement exists for them to inter-operate. This paper proposes the notion that Mobile Agent Technology can be a significant aid to enterprise agility, particularly where distribution of information is a feature, as in virtual enterprises. The implications of using Java and its facilities for <b>database</b> <b>connectivity</b> (<b>JDBC)</b> together with mobile agent environments are discussed before a model to fulfil the requirements of the manufacturing Sales/Order process is proposed. The model used in the process has been produced with data collected from an industrial case study. pattern for database query using agent technology. Finally, the tools required by an enterprise wishing to utilise agent technology are discussed...|$|R
40|$|Abstract—Cloud Computing has {{attracted}} {{much as an}} effective virtualization technology because of its efficiency for handling massive data and its flexibility for managing Computing and storage resources. A cloud database may be an NoSQL database, which is used by Key-Value tables in a database, or a relational database. This study proposes {{the use of a}} HadoopDB cloud relational database system to avoid changing the data structure. This architecture is a hybrid of MapReduce and relational database technologies. The HadoopDB is built in Amazon EC 2, and a database converter, called Trans 2 Cloud, is designed to execute the data migration process. Trans 2 Cloud is used for distributed the migration and verification data in the Hadoop system. Trans 2 Cloud also supports any JDBC-compliant (<b>Java</b> <b>Database</b> <b>Connectivity)</b> <b>database</b> server. HadoopDB performs data migration and query analysis in different relational databases. Performance benchmarks are used to compare data migration between the Trans 2 Cloud and Sqoop systems...|$|R
40|$|Servlets are an {{exciting}} and important technology that ties Java to the Web, allowing programmers to write Java programs that create dynamic web content. Java Servlet Programming covers everything Java developers {{need to know}} to write effective servlets. It explains the servlet lifecycle, showing how to use servlets to maintain state information effortlessly. It also describes how to serve dynamic web content, including both HTML pages and multimedia data, and explores more advanced topics like integrated session tracking, efficient <b>database</b> <b>connectivity</b> using <b>JDBC,</b> applet-servlet communica...|$|R
40|$|This paper proposes {{the system}} {{enabling}} users to use heterogeneous databases {{in an integrated}} manner without any conversion and servers. In order to treat {{a variety of sources}} in a unified manner, this system is realized by using <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC)</b> in accessing databases on the user’s computer. It also joins and/or projects them as required. The syntax identifying a kind of database or file is introduced. The system maintains data by using ArrayLists in Java. It is experimentally shown that there is no practical problem in the equijoin of three tables having 100, 000 rows in heterogeneous databases...|$|E
40|$|Abstract: This paper {{describes}} {{a technique that}} can be used to bridge the gap between HTML, the standard markup language of the Web, and SQL, the standard query language used to access relational DBMS. It proposes a flexible general approach to the generation and validation of HTML forms based on Meta information (Metadata) held in catalog tables in typical relational database systems. In principle integrity constraints and referential constraints, can be used to restrict the data values accepted into our relational database tables. Java is used and particularly <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC),</b> which provides a very general method for addressing databases and also includes Metadata features...|$|E
40|$|Emergency {{support systems}} {{have to provide}} {{information}} on environmental emergencies timely and reliable. In order to fulfil these requirements, different technical means can be used. In this paper, we describe CoDecS, the multi protocol platform for the European Commission Urgent Radiological Information Exchange (ECURIE). Technically, CoDecS {{is based on the}} programming language Java, Java Remote Method Invocation (RMI), <b>Java</b> <b>Database</b> <b>Connectivity</b> (<b>JDBC),</b> and Java Beans, ISDN as the communica-tion backbone, and Telex as the low tech backup communication means. We present the requirements, the overall approach, important aspects of the communication, and the software architecture. One of the major highlights of CoDecS is its unique combination of Java and Telex...|$|E
50|$|Oracle BI Server is a query, {{reporting}} and analysis server and provides {{services to the}} other components of the Business Intelligence suite such as Data mining, Reporting, and Analytic Applications. The Server uses ODBC 2.0 which provides a standard software API method for using database management systems and <b>JDBC</b> (<b>Java</b> <b>Database</b> <b>Connectivity)</b> which is an API for the Java programming language. The BI server compiles incoming query requests into an executable code and then execute the code. Clients of the BI Server work with a logical dataindependent of the data sources, and they submit them to the BI server. The server translates the data to some combination of physical SQL and sends them to the back-end databases.|$|R
40|$|Fuzzy {{relational}} databases {{have been}} extensively studied in recent years, resulting in several models and constructs, {{some of which}} are implemented as software layers on top of diverse existing database systems. Fuzzy extensions to query languages and end-user query interfaces have also been developed, but the design of programming interfaces has not been properly addressed. In this paper, we describe a software framework called fJdbc that extends the <b>Java</b> <b>Database</b> <b>Connectivity</b> API by allowing fuzzy queries on existing relational databases, using externally-stored metadata. Since the main design objective of this extension is usability for existing database programmers, only a restricted subset of extensions (supported also by an extended object modelling notation) has been included. The overall design of the framework and some experimental data are also described...|$|R
40|$|During {{the next}} few months more than 400 Silicon Strip Detector (SSD) modules will be tested before and after their {{installation}} on the ladders and dispatch to Brookhaven National Laboratory. The requirements for the test bench have been defined and the architectural design of all software components has been completed. The system is distributed and features a client–server architecture. Measurement program has been developed using LabVIEW ™ package. The communication server is running under Unix. MySQL ™ relational database has been chosen for data storage. Access to data is provided through a JAVA applet, making use of <b>JDBC</b> ™ (<b>JAVA</b> <b>Database</b> <b>Connectivity)</b> package. Such a solution ensures a fast remote access to data even over the Internet and is virtually independent of hardware and software platforms used. ...|$|R
