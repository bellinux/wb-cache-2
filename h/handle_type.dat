18|1935|Public
60|$|Now, {{from the}} {{province}} of Alberta to Brooklyn, U.S.A., may be three thousand miles. A great stretch of that distance is as new as the day before yesterday, and strewn with townships in every stage of growth {{from the city of}} one round house, two log huts, and a Chinese camp somewhere in the foot-hills of the Selkirks, to Winnipeg with her league-long main street and her warring newspapers. Just at present there is an epidemic of politics in Manitoba, and brass bands and notices of committee meetings are splashed about the towns. By reason of their closeness to the Stages they have caught the contagion of foul-mouthedness, and accusations of bribery, corruption, and evil-living are many. It is sweet to find a little baby-city, with only three men in it who can <b>handle</b> <b>type,</b> cursing and swearing across the illimitable levels for all the world {{as though it were a}} grown-up Christian centre.|$|E
50|$|Some of {{the options}} that may be {{considered}} are the types of wheels, stair climber, <b>handle</b> <b>type</b> and size of wheels.|$|E
5000|$|Erlang {{supports}} Dynamic Software Updating, {{though this}} is {{commonly referred to as}} [...] "hot code loading". Erlang requires no safety guarantees on updates, but Erlang culture suggests that developers write in a defensive style that will gracefully <b>handle</b> <b>type</b> errors generated by updating.|$|E
5000|$|An {{important}} {{property of}} <b>handle</b> <b>types</b> related to type casting {{is that since}} all variables of handles are just references, they can all be treated (and are treated) as integers. Each instance of a handle is assigned a unique integer value that essentially acts as an identifier for the <b>handle.</b> Therefore, <b>type</b> casting from <b>handles</b> to integers, although technically not supported by JASS, is possible in practice because implicit casting from <b>handle</b> <b>types</b> to integer can and will occur if the code is written in a certain way, for example: ...|$|R
50|$|Cassettes are {{specially}} designed {{depending on the}} cargo and <b>handling</b> <b>type.</b> The operation of a cassette system is fast and efficient, thus becoming more popular all over the world.|$|R
5000|$|All {{other types}} are {{considered}} non-native. The native types behave very similarly to primitive types in other programming languages. <b>Handle</b> <b>types,</b> however, behave more like objects. <b>Handle</b> <b>types</b> often represent an [...] "object" [...] within the game (units, players, special effects, etc.). Similarly to how Java treats Objects, all variables and parameters in JASS of <b>handle</b> <b>types</b> {{are treated as}} values, but in reality those values are nothing but references to the handle objects. This becomes important when dealing with garbage collection because handles, if not properly cleaned up, can cause significant performance issues. Additionally, local variables do not properly dereference handles when they go out of scope. If they are not nullified properly, handle indices will not be garbage collected and will eventually leak. Also, any references to handles themselves take up some memory space. Users may experience reduced performance {{if they are not}} nullified, though on a much smaller scale.|$|R
5000|$|Another {{property}} of handle types worth noting {{is that all}} handle types are treated {{as if they were}} children of the [...] "handle" [...] type. Some of these children types have their own children types, and so on. Handle variables may reference its own specific <b>handle</b> <b>type</b> or any children type. For example: ...|$|E
5000|$|Technical divers {{often use}} a Goodman type handle {{to carry a}} light {{on the back of}} the hand, so the hand can be used without {{dropping}} the light. This <b>handle</b> <b>type</b> was originally rigid, and used to carry a canister light head, but is now also used for small one piece lights. Derivatives use bungee to hold the light in place ...|$|E
5000|$|... {{function}} Trig_JASS_handle_Example_Child takes widget w, widget w2 returns nothing //do stuff endfunction [...] function handle_Example takes real x, real y returns nothing local widget w //widget is a <b>handle</b> <b>type</b> {{with children}} type unit and destructible local unit u = CreateUnit( [...] 'hfoo', x, y [...] ) local destructible d = CreateDestructible( [...] 'ATtr', x, y [...] ) [...] set w = u //acceptable call Trig_JASS_handle_Example_Child( [...] w, d [...] ) //acceptable //Don't forget to null every extends agent variable. set u = null set d = null set w = null endfunction ...|$|E
5000|$|Since patch 1.24b {{there is}} a new handle-based type called [...] "agent" [...] which has been {{introduced}} to separate <b>handle</b> <b>types</b> of which objects has to be deleted manually (Dynamic memory allocation) and <b>handle</b> <b>types</b> of which objects are deleted automatically (Stack-based memory allocation).For example, types [...] "unit", [...] "rect" [...] or [...] "destructable" [...] which refer to dynamic allocated objects do extend type [...] "agent" [...] now whereas types such as [...] "race" [...] or [...] "alliancetype" [...] which actually are only some kind of wrappers for the native type [...] "integer" [...] and can be compared to enumerated types do still extend type [...] "handle".|$|R
5000|$|Today {{there are}} many {{companies}} making rotary cutters. Cutters {{come in a variety}} of <b>handle</b> <b>types</b> and some include specialty blades to cut curved or zigzagged lines. Most have retractable blades that can be locked to prevent injury.|$|R
5000|$|The {{integrated}} report designer <b>handles</b> three <b>types</b> of reports: ...|$|R
5000|$|The handles for woks {{come in two}} styles: {{loops and}} stick. Loop handles mounted on {{opposite}} sides of the wok are typical in southern China. [...] The twin small loop handles are the most common <b>handle</b> <b>type</b> for woks of all types and materials, and are usually made of bare metal. Cooks needing to hold the wok to toss the food in cooking do so by holding a loop handle with a thick towel (though some woks have spool-shaped wooden or plastic covers over the metal of the handle). Cooking with the tossing action in loop-handled woks requires a large amount of hand, arm and wrist strength. Loop handles typically come in pairs on the wok and are riveted, welded or extended from the wok basin.|$|E
40|$|Several {{problems}} arise when parametric subtypes {{are used in}} ABEL. This paper deals with subtype parameters, the disjointness relation and the generation of profile sets, extended to <b>handle</b> <b>type</b> parameters properly. I show how more type-information can be obtained syntactically by studying the profiles of the parametric type generators...|$|E
40|$|Traumatic {{tears of}} the {{meniscus}} are well {{reported in the}} literature. Rarely, bilateral meniscal tears occur. A PubMed search found that only three cases of bilateral medial meniscus bucket <b>handle</b> <b>type</b> tears have been reported. Treatment options range from partial meniscectomy to repair of the meniscal tear. Repair {{is reported to be}} more successful in the vascular red-red or red-white zones. We present the case of a 23 -year-old female who sustained simultaneous bilateral medial meniscus bucket <b>handle</b> <b>type</b> tears in an automobile accident. She was treated in a staged fashion with knee arthroscopy. Her meniscus tears were both found to be in the vascularized zone and meniscal tear repair was conducted. At two weeks postoperatively, she had excellent resolution of her symptoms and has returned to pain-free weight-bearing. She has remained pain-free at six-month follow-up...|$|E
50|$|The airport has {{a permit}} to <b>handle</b> all <b>types</b> of helicopters.|$|R
30|$|In Q-CRQ decoding, {{we should}} <b>handle</b> two <b>types</b> of ambiguity: the {{physical}} and logical errors.|$|R
50|$|Older Esri products, {{including}} ArcView 3.x, {{worked with}} {{data in the}} shapefile format. ArcInfo Workstation handled coverages, which stored topology information about the spatial data. Coverages, which were introduced in 1981 when ArcInfo was first released, have limitations in how they <b>handle</b> <b>types</b> of features. Some features, such as roads with street intersections or overpasses and underpasses, should be handled differently from other types of features.|$|R
40|$|Extension Circular 56 - 1118 : This {{is about}} how to make {{handmade}} rugs using the toothbrush <b>handle</b> <b>type.</b> This has information like the rug must lie flat, plan the size and the shape, plan the colors, collect enough materials, prepare the materials, make the needle, start the centers strip, weaving the rug, precautions, and how to finish...|$|E
40|$|License, which permits {{unrestricted}} use, distribution, {{and reproduction}} in any medium, provided the original work is properly cited. Traumatic tears of the meniscus are well {{reported in the}} literature. Rarely, bilateral meniscal tears occur. A PubMed search found that only three cases of bilateralmedialmeniscus bucket <b>handle</b> <b>type</b> tears have been reported. Treatment options range frompartial meniscectomy to repair of the meniscal tear. Repair {{is reported to be}} more successful in the vascular red-red or red-white zones. We present the case of a 23 -year-old female who sustained simultaneous bilateral medial meniscus bucket <b>handle</b> <b>type</b> tears in an automobile accident. She was treated in a staged fashion with knee arthroscopy. Her meniscus tears were both found to be in the vascularized zone and meniscal tear repair was conducted. At two weeks postoperatively, she had excellent resolution of her symptoms and has returned to pain-free weight-bearing. She has remained pain-free at six-month follow-up. 1...|$|E
40|$|In {{this paper}} {{we present a}} modular interprocedural pointer {{analysis}} algorithm based on access-paths for C programs. We argue that access paths can reduce the overhead of representing context-sensitive transfer functions and effectively distinguish non-recursive heap objects. And when the modular analysis paradigm is used together with other techniques to <b>handle</b> <b>type</b> casts and function pointers, {{we are able to}} handle significant programs like those in the SPECcint 92 and SPECcint 95 suites. We have implemented the algorithm and tested it on a Pentium II 450 PC running Linux. The observed resource consumption and performance improvement are very encouraging...|$|E
5000|$|... #Caption: A JASDF soldier <b>handles</b> a <b>Type</b> 91 Kai MANPAD rocket {{launcher}} in Red Flag - Alaska.|$|R
2500|$|Older Esri products, {{including}} ArcView 3.x, {{worked with}} {{data in the}} shapefile format. [...] ArcInfo Workstation handled coverages, which stored topology information about the spatial data. [...] Coverages, which were introduced in 1981 when ArcInfo was first released, have limitations in how they <b>handle</b> <b>types</b> of features. [...] Some features, such as roads with street intersections or overpasses and underpasses, should be handled differently from other types of features.|$|R
25|$|There {{are several}} class D fire {{extinguisher}} agents available; some will <b>handle</b> multiple <b>types</b> of metals, others will not.|$|R
40|$|Artificial {{pancreas}} is simulated to <b>handle</b> <b>Type</b> I diabetic patients under {{intensive care}} by automatically controlling the insulin infusion rate. A Backstepping technique {{is used to}} apply the effect of PID controller to blood glucose level {{since there is no}} direct relation between insulin infusion (the manipulated variable) and glucose level in Bergmans system model subjected to an oral glucose tolerance test by applying a meal translated into a disturbance. Backstepping technique is usually recommended to stabilize and control the states of Bergman's class of nonlinear systems. The results showed a very satisfactory behavior of glucose deviation to a sudden rise represented by the meal that increase the blood glucos...|$|E
40|$|The {{stochastic}} automaton is {{a simple}} and easy to <b>handle</b> <b>type</b> of model {{that has been used}} successfully in model-based process supervision and diagnosis. For large systems the automaton has a high complexity which can be reduced by structuring this model as an automaton network. For coupled systems the automaton network is directly obtained by compositional modelling. This paper starts with a review of how the single stochastic automaton can be used for diagnosis. This method will then be extended to stochastic automata networks. It is further extended to distributed diagnosis, where the main result is a necessary and sufficient condition for a complete decomposition of the diagnostic task...|$|E
40|$|The {{fabrication}} {{and testing}} {{of a pair of}} robot fingers designed to grasp two types of Orbital Replacement Unit (ORU) interfaces, the H <b>Handle</b> <b>type</b> and the Micro Square type are discussed. A closed-form solution is given for the force inverse kinematics. A numerical solution using the Newton-Raphson Method for force forward kinematics is given. Mathematical expressions are derived to compute forces/torques applied to the finger. Suggestions are given for improving finger fabrication. The results of numerous experiments conducted to study the characteristics and feasibility of the fingers are given. The first part of the study was devoted to obtaining data on the forces applied by the finger to the interfaces under various translational and rotational misalignments; the second part was devoted to determining the maximum allowed capture angles that would insure successful mating; and the third part was devoted to the processing and interpretation of the forces/torque data...|$|E
30|$|Nevertheless, the {{experiments}} show that our approach remains tractable {{and it is}} able to <b>handle</b> such <b>types</b> of policies.|$|R
50|$|Industrial {{cassettes}} {{are typically}} equipped with optimized load supports, improving efficiency and safety when <b>handling</b> different <b>types</b> of material.|$|R
50|$|There {{are several}} class D fire {{extinguisher}} agents available; some will <b>handle</b> multiple <b>types</b> of metals, others will not.|$|R
40|$|Many {{applications}} of object-oriented systems {{benefit from the}} ability to make objects persistent. To be fully effective, this persistence must be provided {{in such a way as}} to allow both the database of persistent objects and the applications to evolve. As they evolve, upward compatibility must be maintained so that new versions of applications can continue to use existing persistent objects and vice versa. This implies that a persistent object system must be able to <b>handle</b> <b>type</b> mismatches between objects in secondary storage and objects in an application program. In this paper, we formalize some of the categories of type mismatches that can occur as a result of application program and database evolution. We show how the concept of an object manager can be used to resolve many of the mismatches in these categories. Finally, we discuss how object managers have been incorporated into a particular persistent object system under development at Rensselaer Polytechnic Institute. 1. Introduc [...] ...|$|E
40|$|Several {{problems}} arise when parametric subtypes {{are used in}} ABEL. This paper deals with subtype parameters, the disjointness relation and the generation of prole sets, extended to <b>handle</b> <b>type</b> parameters properly. I show how more type-information can be obtained syntactically by studying the proles of the parametric type generators. 1 Introduction For an introduction to ABEL (Abstraction Building Experimental Language), refer to [DO 91] and a more recent paper [DO 95]. 1. 1 Types and Subtypes Each type T in ABEL has an associated attribute V T, where V T is the value set of T. There {{are two kinds of}} subtypes in ABEL; syntactic and semantic ones. Syntactic subtypes and the main type itself are dened simultaneously. Example 1 type Int by Neg,Zero,Pos with NPos = Neg+Zero and Nat = Pos+Zero and Nzro = Neg+Pos == module func 0 : Γ! Zero - - zero func S : Nat Γ! Pos - - successor func N : Pos Γ! Neg - - negation one-one genbas 0,S,N - - generator basis endm [...] ...|$|E
40|$|The goal of {{the mission}} was to formalize and {{implement}} the integration of a frame semantics module into the XMG compiler. eXtensible MetaGrammar is a tool used for grammar engineering, which allows to reason about the language at a more abstract level. One of the main concepts of XMG {{is the concept of}} dimensions. They are used to separate the different levels of linguistic description (syntax, semantics [...] .). The purpose of the STSM was to integrate a frame semantics dimension, which would allow to generate a Tree Adjoining Grammar where each tree is paired with a frame. 2 Description of the work carried out during the STSM The extensibility of XMG allows to add new levels of linguistic representation, with dedicated description languages and compiling modules (like solvers). We were concerned with the design of a dimension for frame representations, i. e. typed feature structures. The work therefore consisted of the following steps: The first step was to choose a description language for typed feature structures, adapted to describe frame fragments like the ones proposed in [1]. The unification of two typed feature structures implies the unification of their types, according to general type constraints or a given type hierarchy. The type unification rules used in [1] are given by the means of general fea-ture structure constraints. 1 The second step was to implement these constraints into the XMG processor, compute the set of valid types, and <b>handle</b> <b>type</b> unification. The last step was to connect these compiling phases together and write a toy metagrammar to illustrate some examples of frame fragments combination, including multi word expressions. This work was done thanks to constant collaboration with Timm Lichte and regular meetings with Laura Kallmeyer and Rainer Osswald (about one meeting every two days). We also met Christof Rumpf, who gave us some useful pieces of advice about type encoding in Prolog. 3 Description of the main results obtained The main result is the integration of a set of type unification constraints and of a frame description language into XMG. Until now, these modules have been incorporated into an operative prototype which was validated on a toy metagrammar...|$|E
5000|$|... #Caption: A JASDF soldier <b>handles</b> a <b>Type</b> 91 Kai MANPADS during {{exercises}} {{as a part}} of Red Flag - Alaska.|$|R
50|$|Courts: The county {{maintains}} a Circuit Court can <b>handle</b> all <b>types</b> of cases, unless {{a particular case}} type is specifically reserved to another court. The county also maintains three Superior Courts that also <b>handle</b> all <b>types</b> of cases, and also handle the small claims and juvenile cases. The judges {{on each of the}} courts is elected to a term of four years and must {{be a member of the}} Indiana Bar Association.|$|R
50|$|Al Maktoum International Airport {{intends to}} <b>handle</b> all <b>types</b> of {{aircraft}}. Up to four aircraft {{will be able}} to land simultaneously.|$|R
