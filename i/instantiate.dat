2786|6551|Public
5|$|One {{can solve}} these problems, {{according}} to Fodor, with functionalism, a hypothesis {{which was designed}} to overcome the failings of both dualism and reductionism. What is important is the function of a mental state regardless of the physical substrate which implements it. The foundation for this view lies in the principle of the multiple realizability of the mental. Under this view, for example, I and a computer can both <b>instantiate</b> ("realize") the same functional state though we are made of completely different material stuff (see graphic at right). On this basis functionalism can be classified as a form of token materialism.|$|E
25|$|Qutb's {{political}} philosophy {{has been described}} as an attempt to <b>instantiate</b> a complex and multilayer eschatological vision, partly grounded in the counter-hegemonic re-articulation of the traditional ideal of academic jargon.|$|E
25|$|Templates are {{different}} from macros: while both of these compile-time language features enable conditional compilation, templates are not restricted to lexical substitution. Templates {{are aware of the}} semantics and type system of their companion language, as well as all compile-time type definitions, and can perform high-level operations including programmatic flow control based on evaluation of strictly type-checked parameters. Macros are capable of conditional control over compilation based on predetermined criteria, but cannot <b>instantiate</b> new types, recurse, or perform type evaluation and in effect are limited to pre-compilation text-substitution and text-inclusion/exclusion. In other words, macros can control compilation flow based on pre-defined symbols but cannot, unlike templates, independently <b>instantiate</b> new symbols. Templates are a tool for static polymorphism (see below) and generic programming.|$|E
5000|$|... {{replacing}} the <b>instantiated</b> rule's {{right hand side}} into the <b>instantiated</b> term.|$|R
5000|$|Compile-time versus execution-time {{tradeoff}} : If a {{great deal}} of template metaprogramming is used, compilation may become slow; section 14.7.1 temp.inst of the current standard defines the circumstances under which templates are implicitly <b>instantiated.</b> Defining a template does not imply that it will be <b>instantiated,</b> and <b>instantiating</b> a class template does not cause its member definitions to be <b>instantiated.</b> Depending on the style of use, templates may compile either faster or slower than hand-rolled code.|$|R
50|$|According to Plato, {{there are}} some forms that are not <b>instantiated</b> at all, but, he contends, that {{does not imply that}} the forms could not be <b>instantiated.</b> Forms are capable of being <b>instantiated</b> by many {{different}} particulars, which would result in the forms' having many copies, or inhering many particulars.|$|R
25|$|In summary, a {{template}} is a compile-time parameterized function or class written without {{knowledge of the}} specific arguments used to <b>instantiate</b> it. After instantiation, the resulting code is equivalent to code written specifically for the passed arguments. In this manner, templates provide a way to decouple generic, broadly applicable aspects of functions and classes (encoded in templates) from specific aspects (encoded in template parameters) without sacrificing performance due to abstraction.|$|E
25|$|Qutb's mature {{political}} views always centered on Islam – Islam {{as a complete}} system of morality, justice and governance, whose sharia laws and principles should be the sole basis of governance and everything else in life – though his interpretation of it varied. Qutb's political philosophy {{has been described as}} an attempt to <b>instantiate</b> a complex and multilayer eschatological vision, partly grounded in the counter-hegemonic re-articulation of the traditional ideal of Islamic universalism.|$|E
25|$|The Port Inland Distribution Network {{involves}} new or expanded {{transportation systems}} for redistribution by barge and rail for the shipped goods and containers that are delivered at area ports {{in an effort}} to curtail the use of trucks and their burden on the environment, traffic, and highway systems. The Port Authority of New York and New Jersey (PANYNJ), New Jersey Department of Transportation (NJDOT), and Delaware Valley Regional Planning Commission (DVRPC), are involved in initiatives to review and develop this network. To <b>instantiate</b> PIDN, the PANYNJ signed an agreement November 29, 2003 with the Port of Albany to provide twice weekly barge service. By 2014, the service had been discontinued.|$|E
5000|$|To {{make the}} Principle of Instantiation more {{plausible}} {{in the light}} of these examples, the existence of properties or universals is not tied to their actual existence now, but to their existence in space-time considered as a whole. Thus, any property which is <b>instantiated,</b> has been <b>instantiated,</b> or will be <b>instantiated</b> exists. The property of being red would exist even if all red things were to be destroyed, because it has been <b>instantiated.</b> This broadens the range of properties which exist if the principle is true.|$|R
5000|$|A {{class with}} a nullary {{constructor}} is subject to being <b>instantiated</b> in an invalid state. If such a class is <b>instantiated</b> manually by a developer (rather than automatically by some kind of framework), the developer might not realize that the class has been improperly <b>instantiated.</b> The compiler cannot detect such a problem, {{and even if it}} is documented, {{there is no guarantee that}} the developer will see the documentation.|$|R
5000|$|Symbolic {{structures}} are signs {{which may be}} <b>instantiated</b> by tokens. They have the property to stand for something beyond themselves. An example is the physical pattern [...] "apple", which <b>instantiates</b> the [...] "APPLE" [...] symbolic structure.|$|R
25|$|One {{can also}} use PowerShell {{embedded}} in a management application, which uses the PowerShell runtime to implement the management functionality. For this, PowerShell provides a managed hosting API. Via the APIs, the application can <b>instantiate</b> a runspace (one instantiation of the PowerShell runtime), which runs in the application's process and is exposed as a Runspace object. The state of the runspace is encased in a SessionState object. When the runspace is created, the Windows PowerShell runtime initializes the instantiation, including initializing the providers and enumerating the cmdlets, and updates the SessionState object accordingly. The Runspace then must be opened for either synchronous processing or asynchronous processing. After {{that it can be}} used to execute commands.|$|E
2500|$|Social {{networking}} services {{provide a}} virtual [...] "space" [...] for learners. James Gee (2004) suggests that affinity spaces <b>instantiate</b> participation, collaboration, distribution, dispersion of expertise, and relatedness. Registered users share {{and search for}} knowledge which contributes to informal learning.|$|E
2500|$|According to Socrates, {{physical}} {{objects and}} physical events are [...] "shadows" [...] of their ideal or perfect forms, and exist {{only to the}} extent that they <b>instantiate</b> the perfect versions of themselves. Just as shadows are temporary, inconsequential epiphenomena produced by physical objects, physical objects are themselves fleeting phenomena caused by more substantial causes, the ideals of which they are mere instances. For example, Socrates thinks that perfect justice exists (although it is not clear where) and his own trial would be a cheap copy of it.|$|E
5000|$|Instantiation phase: A {{netnography}} is <b>instantiated</b> {{in space}} and on time in a specific manner. It can {{take the form of}} one of the four ideal types (symbolic, digital, auto or humanistic) to guide the <b>instantiated</b> representation.|$|R
50|$|In {{class-based}} programming, {{objects are}} created from classes by subroutines called constructors, and destroyed by destructors. An object is {{an instance of}} a class, and may be called a class instance or class object; instantiation is then also known as construction. Not all classes can be <b>instantiated</b> abstract classes cannot be <b>instantiated,</b> while classes that can be <b>instantiated</b> are called concrete classes. In prototype-based programming, instantiation is instead done by copying (cloning) a prototype instance.|$|R
30|$|Once designed, a {{monitoring}} rule template is <b>instantiated</b> for {{a specific}} environment and the created soft sensor is added in this environment information file. Soft sensors and physical sensors are handled similarly when <b>instantiating</b> the step execution rule template.|$|R
2500|$|An {{interpretation}} (or model) of a first-order formula specifies {{what each}} predicate means and the entities that can <b>instantiate</b> the variables. These entities form {{the domain of}} discourse or universe, which is usually required to be a nonempty set. For example, in an interpretation with the domain of discourse consisting of all human beings and the predicate [...] "is a philosopher" [...] understood as [...] "was {{the author of the}} Republic", the sentence [...] "There exists a such that a is a philosopher" [...] is seen as being true, as witnessed by Plato.|$|E
2500|$|The {{rule for}} {{universal}} quantifiers [...] {{is the only}} non-deterministic rule, as it does not specify which term to <b>instantiate</b> with. [...] Moreover, while the other rules need to be applied only once for each formula and each path the formula is in, this one may require multiple applications. [...] Application of this rule can however be restricted by delaying {{the application of the}} rule until no other rule is applicable and by restricting the application of the rule to ground terms that already appear {{in the path of the}} tableau. The variant of tableaux with unification shown below aims at solving the problem of non-determinism.|$|E
2500|$|C++ {{templates}} enable generic programming. C++ supports function, class, alias {{and variable}} templates. Templates may be parameterized by types, compile-time constants, and other templates. Templates are implemented by instantiation at compile-time. To <b>instantiate</b> a template, compilers substitute specific arguments for a template's parameters {{to generate a}} concrete function or class instance. Some substitutions are not possible; these are eliminated by an overload resolution policy described by the phrase [...] "Substitution failure is not an error" [...] (SFINAE). Templates are a powerful tool {{that can be used}} for generic programming, template metaprogramming, and code optimization, but this power implies a cost. Template use may increase code size, because each template instantiation produces a copy of the template code: one for each set of template arguments, however, this is the same or smaller amount of code that would be generated if the code was written by hand. This is in contrast to run-time generics seen in other languages (e.g., Java) where at compile-time the type is erased and a single template body is preserved.|$|E
5000|$|Abstract classes {{cannot be}} <b>instantiated</b> into objects; they exist {{only for the}} purpose of {{inheritance}} into other [...] "concrete" [...] classes which can be <b>instantiated.</b> In Java, the [...] keyword can be used to prevent a class from being subclassed.|$|R
50|$|Therefore, {{the query}} engine follows a loop {{structure}} where it first <b>instantiates</b> an object with {{the existence and}} uniqueness questions, then queries about its attributes, and then the relationship questions are asked for that object with all the previously <b>instantiated</b> objects.|$|R
5000|$|... // Code somewhere// <b>instantiating</b> {{an object}} {{with the primary}} constructorlet c1 = new MyClass(42, [...] "string")// <b>instantiating</b> an object with {{additional}} constructorslet c2 = new MyClass(42)let c3 = new MyClass("string")let c4 = MyClass (...) // [...] "new" [...] keyword is optional ...|$|R
50|$|To <b>instantiate</b> {{a generic}} unit, the {{programmer}} passes actual parameters for each formal. The generic instance then behaves {{just like any}} other unit. It is possible to <b>instantiate</b> generic units at run-time, for example inside a loop.|$|E
5000|$|For other theorists (e.g., functionalists), who define mental {{states in}} terms of causal roles, any system that can <b>instantiate</b> {{the same pattern of}} causal roles, {{regardless}} of physical constitution, will <b>instantiate</b> the same mental states, including consciousness (...) [...]|$|E
5000|$|... <b>instantiate</b> a frame {{parameter}} (a construction-time expression evaluation); ...|$|E
25|$|In {{the more}} general case, where {{sub-goals}} share variables, other strategies can be used, such as choosing the subgoal that is most highly <b>instantiated</b> or that is sufficiently <b>instantiated</b> so that only one procedure applies. Such strategies are used, for example, in concurrent logic programming.|$|R
25|$|Propositional {{calculus}} restricts {{attention to}} abstract propositions, those built up from propositional variables using Boolean operations. Instantiation {{is still possible}} within propositional calculus, but only by <b>instantiating</b> propositional variables by abstract propositions, such as <b>instantiating</b> Q by Q→P in P→(Q→P) to yield the instance P→((Q→P)→P).|$|R
50|$|In {{the more}} general case, where {{sub-goals}} share variables, other strategies can be used, such as choosing the subgoal that is most highly <b>instantiated</b> or that is sufficiently <b>instantiated</b> so that only one procedure applies. Such strategies are used, for example, in concurrent logic programming.|$|R
5000|$|... // <b>Instantiate</b> {{a message}} Message msg = new MimeMessage(session); ...|$|E
5000|$|<b>Instantiate</b> a SQL {{object with}} the CreateSQL {{built-in}} function.|$|E
5000|$|... to <b>instantiate</b> the {{appropriate}} bean {{to perform the}} operation(s).|$|E
50|$|In C++, class {{declarations}} can {{be generated}} from class templates. Such class templates represent a family of classes. An actual class declaration is obtained by <b>instantiating</b> the template {{with one or more}} template arguments. A template <b>instantiated</b> with a particular set of arguments is called a template specialization.|$|R
2500|$|Replacing P by x = 3 or {{any other}} {{proposition}} is called instantiation of P by that proposition. The result of <b>instantiating</b> P in an abstract proposition is called an instance of the proposition. [...] Thus [...] "x = 3 → x = 3" [...] is a tautology {{by virtue of being}} an instance of the abstract tautology [...] "P → P". All occurrences of the <b>instantiated</b> variable must be <b>instantiated</b> with the same proposition, to avoid such nonsense as P → x = 3 or x = 3 → x = 4.|$|R
40|$|Finding {{explanations}} for queries to Description Logics (DL) theories is a non-standard reasoning service originally defined for debugging purposes but recently found useful for answering queries to probabilistic theories. In the latter case, besides the axioms {{that are used}} to entail the query, it is necessary to record also the individuals to which the axioms are applied. We refer, in this case, to <b>instantiated</b> explanations. The system BUNDLE computes the probability of queries to probabilistic ALC knowledge bases by first finding <b>instantiated</b> {{explanations for}} the query and then applying a dynamic programming algorithm. In order to apply BUNDLE to more expressive DLs, such as SHOIN(D) that is at the basis of OWL DL, <b>instantiated</b> explanations must be found. In this paper, we discuss how we extended BUNDLE in order to compute <b>instantiated</b> explanations for SHOIN(D) ...|$|R
