2|17|Public
40|$|Insulin and its {{receptor}} {{are critical}} for the regulation of metabolic functions, but the mecha-nisms underlying insulin receptor (IR) trafficking to the plasma membrane are not well understood. Here, we show that Bardet Biedl Syndrome (BBS) proteins are necessary for <b>IR</b> <b>localization</b> to the cell surface. We demonstrate that the IR interacts physically with BBS proteins, and reducing the expression of BBS proteins perturbs IR expression in the cell sur-face. We show the consequence of disrupting BBS proteins for whole body insulin action and glucose metabolism using mice lacking different BBS genes. These findings demon-strate the importance of BBS proteins in underlying IR cell surface expression. Our data identify defects in trafficking and localization of the IR as a novel mechanism accounting for the insulin resistance commonly associated with human BBS. This {{is supported by the}} reduced surface expression of the IR in fibroblasts derived from patients bearing the M 390 R mutation in the BBS 1 gene. Author Summary Amain function of the hormone insulin in the body is to regulate metabolism of glucose...|$|E
40|$|Insulin receptors (IRs) {{segregate}} on {{plasma membrane}} microvilli, but in cells devoid of microvilli, such as adipocytes, the localization of IRs {{is a matter}} of controversy. In the present study, we examined the distribution of IRs in the plasma membrane of 3 T 3 -L 1 adipocytes. Quantitative electron microscopy indicates that IRs are predominantly associated with the neck, but not the bulb, of caveolae. Caveola necks represent distinct microdomains of the plasma membrane. Indeed, as shown by freeze-fracture analysis, intramembrane particles are concentrated as necklaces around the craters of caveolae. In addition, subcellular fractionation suggests that the neck and the bulb of caveolae present a different resistance to detergent solubility. Finally, cytoskeletal components, including actin, are highly enriched in the membrane area underlying the neck part of caveolae. IRs coimmunoprecipitate with cytoskeletal components, and disruption of the actin cytoskeleton alters IRs expression, localization, and signaling, thus supporting the notion that caveola necks are involved in intracellular signaling by IRs. Together, these results suggest that cytoskeletal proteins anchor IRs to microdomains in the caveola necks of 3 T 3 -L 1 adipocytes. By homology with <b>IR</b> <b>localization</b> in other cell types, we suggest that the necks of caveolae may represent the counterpart of microvillar domains in cells poor in microvilli such as adipocytes and that they play an important role as signaling platforms...|$|E
40|$|To compare {{infrared}} (IR) optical vs. stereoscopic X-ray {{technologies for}} patient setup in image-guided stereotactic radiotherapy. METHODS AND MATERIALS: Retrospective data analysis of 233 fractions in 127 patients treated with hypofractionated stereotactic radiotherapy was performed. Patient setup at the linear accelerator {{was carried out}} by means of combined <b>IR</b> optical <b>localization</b> and stereoscopic X-ray image fusion in 6 degrees of freedom (6 D). Data were analyzed to evaluate the geometric and dosimetric discrepancy between the two patient setup strategies. RESULTS: Differences between <b>IR</b> optical <b>localization</b> and 6 D X-ray image fusion parameters were on average within the expected localization accuracy, as limited by CT image resolution (3 mm). A disagreement between the two systems below 1 mm in all directions was measured in patients treated for cranial tumors. In extracranial sites, larger discrepancies and higher variability were observed {{as a function of the}} initial patient alignment. The compensation of IR-detected rotational errors resulted in a significantly improved agreement with 6 D X-ray image fusion. On the basis of the bony anatomy registrations, the measured differences were found not to be sensitive to patient breathing. The related dosimetric analysis showed that IR-based patient setup caused limited variations in three cases, with 7 % maximum dose reduction in the clinical target volume and no dose increase in organs at risk. CONCLUSIONS: In conclusion, patient setup driven by <b>IR</b> external surrogates <b>localization</b> in 6 D featured comparable accuracy with respect to procedures based on stereoscopic X-ray imaging...|$|R
30|$|Many {{state-of-the-art}} bug localization {{techniques are}} based on information retrieval. Information retrieval (IR) consists of finding documents within a collection that match a search query (Manning et al. 2008). When applying <b>IR</b> to bug <b>localization,</b> source code files become the collection of documents, and the bug report represents the query. Then, the task of finding buggy files is reduced to the IR problem of determining the relevance of a document to a query. The relevance is determined by preprocessing the query and the set of documents and then calculating the similarity between each document and the query.|$|R
40|$|International audienceUsing a time-resolved optical {{interferometric}} technique, {{we investigate}} the ultrafast primary events following {{the interaction of}} an ultrashort laser pulse with pure water in the TW/cm 2 regime. Because our method is sensitive to the quasi-instantaneous electron energy level position, we demonstrate that {{in contrast to the}} well-known low-intensity regime, where the free electrons are instantaneously captured by pre-existing traps, in this new regime of excitation, free electrons are clearly observed, exhibiting a substantial contribution in the near <b>IR.</b> The delayed <b>localization</b> is attributed to the saturation of pre-existing cavities in the liquid by the large number of the excited electron states created...|$|R
40|$|The most {{immediate}} biological and medical advantages of therapeutic agent localization on the nanoscale {{arise from the}} increased understanding of targeted delivery, selectivity and intracellular distribution that are gained by imaging at the resolution scale of individual nanovectors and therapeutic agents themselves. This paper reports {{on the use of}} a nanoscale resolution chemical imaging method, infrared (IR) nanospectral absorption imaging, used to map the subcellular localization of a photoactive therapeutic agent - toluidine blue-conjugated gold nanoparticles (TBO) within nanoscale subsections of single colon adenocarcinoma cells. By comparison of photosensitizer distribution with diffraction limited optical imaging, the benefits of <b>IR</b> nanospectral <b>localization</b> are highlighted and the spatial and spectral accuracy of the non-destructive IR imaging method is confirmed. IR spectral ratio imaging is presented as a means to map intracellular nanoparticle density at sub 50 nm lateral resolution with IR nanospectroscopy enabling distinction of nanoparticle seeded cells from a control group with 95 % confidence. In this way we illustrate that IR absorption nanoimaging combined with IR point source data does not only yield intracellular drug detection on the order of nanometres, but also permits extension of the AFM-IR technique from subcellular analysis up to studies of cell numbers that are statistically significant...|$|R
40|$|Issue {{tracking}} systems are valuable resources during software maintenance activities and contain {{information about the}} issues faced during {{the development of a}} project as well as after its release. Many projects receive many reports of bugs and it is challenging for developers to manually debug and fix them. To mitigate this problem, past studies have proposed information retrieval (<b>IR)</b> -based bug <b>localization</b> techniques, which takes as input a textual description of a bug stored in an issue tracking system, and returns a list of potentially buggy source code files. These studies often evaluate their effectiveness on issue reports marked as bugs in issue {{tracking systems}}, using as ground truth the set of files that are modified in commits that fix each bug. However, {{there are a number of}} potentia...|$|R
40|$|Recently, many {{information}} retrieval (<b>IR)</b> based bug <b>localization</b> approaches {{have been proposed}} in the literature. These approaches use {{information retrieval}} techniques to process a textual bug report {{and a collection of}} source code files to find buggy files. They output a ranked list of files sorted by their likelihood to contain the bug. Recent approaches can achieve reasonable accuracy, however, even a state-of-the-art bug localization tool outputs many ranked lists where buggy files appear very low in the lists. This potentially causes developers to distrust bug localization tools. Parnin and Orso recently conduct a user study and highlight that developers do not find an automated debugging tool useful if they do not find the root cause of a bug early in a ranked list. To address this problem, we build an oracle that can automatically predict whether a ranked list produced by an IR-based bug localization tool is likely to be effective or not. We consider a ranked list to be effective if a buggy file appears in the top-N position of the list. If a ranked list is unlikely to be effective, developers do not need to waste time in checking the recommended files one by one. In such cases, it is better for developers to use traditional debugging methods or request for further information to localize bugs. To build this oracle, our approach extracts features that can be divided into four categories: score features, textual features, topic model features, and metadata features. We build a separate prediction model for each category, and combine them to create a composite prediction model which is used as the oracle. We name our proposed approach APRILE, which stands for Automated Prediction of IR-based Bug Localization 2 Ì† 7 s Effectiveness. We have evaluated APRILE to predict the effectiveness of three state-of-the-art <b>IR</b> based bug <b>localization</b> tools on more than three thousands bug reports from AspectJ, Eclipse, and SWT. APRILE can achieve an average precision, recall, and - -measure of at least 70. 36...|$|R
40|$|Abstractâ€”Concern {{localization}} {{refers to}} the process of locating code units that match a particular textual description. It takes as input textual documents such as bug reports and feature requests and outputs a list of candidate code units that need to be changed to address the bug reports or feature requests. Many information retrieval (<b>IR)</b> based concern <b>localization</b> techniques have been proposed in the literature. These techniques typically represent code units and textual descriptions as a bag of tokens at one level of abstraction, e. g., each token is a word, or each token is a topic. In this work, we propose multi-abstraction concern localization. A code unit and a textual description is represented at multiple abstraction levels. Similarity of a textual description and a code unit, is now made by considering all these abstraction levels. We have evaluated our solution on AspectJ bug reports and feature requests from the iBugs benchmark dataset. Th...|$|R
40|$|Concern {{localization}} {{refers to}} the process of locating code units that match a particular textual description. It takes as input textual documents such as bug reports and feature requests and outputs a list of candidate code units that need to be changed to address the bug reports or feature requests. Many information retrieval (<b>IR)</b> based concern <b>localization</b> techniques have been proposed in the literature. These techniques typically represent code units and textual descriptions as a bag of tokens at one level of abstraction, e. g., each token is a word, or each token is a topic. In this work, we propose multi-abstraction concern localization. A code unit and a textual description is represented at multiple abstraction levels. Similarity of a textual description and a code unit, is now made by considering all these abstraction levels. We have evaluated our solution on AspectJ bug reports and feature requests from the iBugs benchmark dataset. The experiment shows that our proposed approach outperforms a baseline approach, in terms of Mean Average Precision, by up to 19. 36 %...|$|R
40|$|International audienceLocalizing bugs is important, difficult, and expensive, {{especially}} for large software projects. To address this problem, information retrieval (<b>IR)</b> based bug <b>localization</b> has increasingly {{been used to}} suggest potential buggy files given a bug report. To date, researchers have proposed a number of IR techniques for bug localization and empirically evaluated them to understand their effectiveness. However, {{virtually all of the}} evaluations have been limited to the projects written in object-oriented programming languages, particularly Java. Therefore, the effectiveness of these techniques for other widely-used languages such as C is still unknown. In this paper, we create a benchmark dataset consisting of more than 7, 500 bug reports from five popular C projects and rigorously evaluate our recently introduced IR-based bug localization tool using this dataset. Our results indicate that although the IR-relevant properties of C and Java programs are different, IR-based bug localization in C software at the file level is overall as effective as in Java software. However, we also find that the recent advance of using program structure information in performing bug localization gives less of a benefit for C software than for Java software...|$|R
40|$|Abstractâ€”Localizing bugs is important, difficult, and ex-pensive, {{especially}} for large software projects. To address this problem, information retrieval (<b>IR)</b> based bug <b>localization</b> has increasingly {{been used to}} suggest potential buggy files given a bug report. To date, researchers have proposed a number of IR techniques for bug localization and empirically evaluated them to understand their effectiveness. However, {{virtually all of the}} evaluations have been limited to the projects written in object-oriented programming languages, particularly Java. Therefore, the effectiveness of these techniques for other widely-used languages such as C is still unknown. In this paper, we create a benchmark dataset consisting of more than 7, 500 bug reports from five popular C projects and rigorously evaluate our recently introduced IR-based bug localization tool using this dataset. Our results indicate that although the IR-relevant properties of C and Java programs are different, IR-based bug localization in C software at the file level is overall as effective as in Java software. However, we also find that the recent advance of using program structure information in performing bug localization gives less of a benefit for C software than for Java software. Keywordsâ€”Bug Localization, Information Retrieval, Search I...|$|R
40|$|Abstractâ€”Information Retrieval (<b>IR)</b> based bug <b>localization</b> {{techniques}} use a bug {{reports to}} query a software repository to retrieve relevant source files. These techniques index the source files {{in the software}} repository and train a model which is then queried for retrieval purposes. Much of the current research is focused on improving the retrieval effectiveness of these methods. However, little consideration {{has been given to}} the efficiency of such approaches for software repositories that are constantly evolving. As the software repository evolves, the index creation and model learning have to be repeated to ensure accuracy of retrieval for each new bug. In doing so, the query latency may be unreasonably high, and also, re-computing the index and the model for files that did not change is computationally redundant. We propose an incremental update framework to continuously update the index and the model using the changes made at each commit. We demonstrate that the same retrieval accuracy can be achieved but with a fraction of the time needed by current approaches. Our results are based on two basic IR modeling techniques- Vector Space Model (VSM) and Smoothed Unigram Model (SUM). The dataset we used in our validation experiments was created by tracking commit history of AspectJ and JodaTime software libraries over a span of 10 years. I...|$|R
40|$|Concern {{localization}} {{refers to}} the process of locating code units that match a particular textual description. It takes as input textual documents such as bug reports and feature requests and outputs a list of candidate code units that are relevant to the bug reports or feature requests. Many information retrieval (<b>IR)</b> based concern <b>localization</b> techniques have been proposed in the literature. These techniques typically represent code units and textual descriptions as a bag of tokens at one level of abstraction, e. g., each token is a word, or each token is a topic. In this work, we propose a multi-abstraction concern localization technique named MULAB. MULAB represents a code unit and a textual description at multiple abstraction levels. Similarity of a textual description and a code unit is now made by considering all these abstraction levels. We combine a vector space model and multiple topic models to compute the similarity and apply a genetic algorithm to infer semi-optimal topic model configurations. We have evaluated our solution on 136 concerns from 8 open source Java software systems. The experimental results show that MULAB outperforms the state-of-art baseline PR, which is proposed by Scanniello et al. in terms of effectiveness and rank...|$|R
40|$|Information Retrieval (<b>IR)</b> based bug <b>localization</b> {{techniques}} use a bug {{report to}} query a software repository to retrieve relevant source files. Search {{is performed using}} a query that is constructed from the bug report on an index built from the the source files in the software repository. Much of the current research is focused on improving the retrieval effectiveness of these methods. However, little consideration {{has been given to}} the efficiency of such approaches for software repositories that are constantly evolving. As a software repository evolves, the index creation and model learning have to be repeated to ensure accurate retrieval for each new bug. This amounts to redundant computations {{for the vast majority of}} the source files that remain unchanged in a single commit thereby increasing the retrieval time for a given query. To address these issues, we propose an incremental update framework that continuously updates the index and the model on the basis of just the changes made at each commit. We demonstrate the versatility of our framework using four popular text models [...] - Vector Space Model (VSM), Smoothed Unigram Model (SUM), Latent Semantic Analysis (LSA), and Latent Dirichlet Allocation (LDA). We show that the same retrieval accuracy can be achieved but with a fraction of the time needed by current approaches. We also propose strategies to identify commits where the index and the model may require to be re-computed. The dataset we used in our validation experiments was created by tracking the commit history of AspectJ and JodaTime software libraries over a span of 10 years. ...|$|R
40|$|Issue {{tracking}} systems are valuable resources during software maintenance activities and contain {{information about the}} issues faced during {{the development of a}} project as well as after its release. Many projects receive many reports of bugs and it is challenging for developers to manually debug and fix them. To mitigate this problem, past studies have proposed information retrieval (<b>IR)</b> -based bug <b>localization</b> techniques, which takes as input a textual description of a bug stored in an issue tracking system, and returns a list of potentially buggy source code files. These studies often evaluate their effectiveness on issue reports marked as bugs in issue {{tracking systems}}, using as ground truth the set of files that are modified in commits that fix each bug. However, {{there are a number of}} potential biases that can impact the validity of the results reported in these studies. First, issue reports marked as bugs might not be reports of bugs due to error in the reporting and classification process. Many issue reports are about documentation update, request for improvement, refactoring, code cleanups, etc. Second, bug reports might already explicitly specify the buggy program files and for these reports bug localization techniques are not needed. Third, files that get modified in commits that fix the bugs might not contain the bug. This study investigates the extent these potential biases affect the results of a bug localization technique and whether bug localization researchers need to consider these potential biases when evaluating their solutions. In this paper, we analyse issue reports from three different projects: HTTPClient, Jackrabbit, and Lucene-Java to examine the impact of above three biases on bug localization. Our results show that one of these biases significantly and substantially impacts bug localization results, while the other two biases have negligible or minor impact...|$|R
40|$|We have {{previously}} shown that ScN 2 a cells (scrapie-infected neuroblastoma N 2 a cells) express 2 -fold- and 4 -fold-increased levels of IR (insulin receptor) and IGF- 1 R (insulin-like growth factor- 1 receptor) respectively. In addition, the IR alpha- and beta-subunits are aberrantly processed, with apparent molecular masses of 128 and 85 kDa respectively, {{as compared with}} 136 and 95 kDa in uninfected N 2 a cells. Despite the 2 -fold increase in IR protein, the number of (125) I-insulin-binding sites was slightly decreased in ScN 2 a cells [Ostlund, Lindegren, Pettersson and Bedecs (2001) Brain Res. 97, 161 - 170]. In {{order to determine the}} cellular <b>localization</b> of <b>IR</b> in ScN 2 a cells, surface biotinylation was performed, showing a correct <b>IR</b> trafficking and <b>localization</b> to the cell surface. The present study shows {{for the first time that}} neuroblastoma N 2 a cells express significant levels of IR-IGF- 1 R hybrid receptors, and in ScN 2 a cells the number of hybrid receptors was 2 -fold higher than that found in N 2 a cells, potentially explaining the apparent loss of insulin-binding sites due to a lower affinity for insulin compared with the homotypic IR. Furthermore, the decreased molecular mass of IR subunits in ScN 2 a cells is not caused by altered phosphorylation or proteolytic processing, but rather by altered glycosylation. Enzymic deglycosylation of immunoprecipitated IR from N 2 a and ScN 2 a cells with endoglycosidase H, peptide N-glycosidase F and neuraminidase all resulted in subunits with increased electrophoretic mobility; however, the 8 - 10 kDa shift remained. Combined enzymic or chemical deglycosylation using anhydrous trifluoromethane sulphonic acid treatment ultimately showed that the IR alpha- and beta-subunits from ScN 2 a cells are aberrantly glycosylated. The increased formation of IR-IGF- 1 R hybrids in ScN 2 a cells may be part of a neuroprotective response to prion infection. The degree and functional significance of aberrantly glycosylated proteins in ScN 2 a cells remain to be determined...|$|R
40|$|Abstractâ€”Recently, many {{information}} retrieval (<b>IR)</b> based bug <b>localization</b> approaches {{have been proposed}} in the literature. These approaches use {{information retrieval}} techniques to process a textual bug report {{and a collection of}} source code files to find buggy files. They output a ranked list of files sorted by their likelihood to contain the bug. Recent approaches can achieve reasonable accuracy, however, even a state-of-the-art bug localization tool outputs many ranked lists where buggy files appear very low in the lists. This potentially causes developers to distrust bug localization tools. Parnin and Orso recently conduct a user study and highlight that developers do not find an automated debugging tool useful if they do not find the root cause of a bug early in a ranked list. To address this problem, we build an oracle that can auto-matically predict whether a ranked list produced by an IR-based bug localization tool is likely to be effective or not. We consider a ranked list to be effective if a buggy file appears in the top-N position of the list. If a ranked list is unlikely to be effective, developers do not need to waste time in checking the recommended files one by one. In such cases, it is better for developers to use traditional debugging methods or request for further information to localize bugs. To build this oracle, our approach extracts features that can be divided into four categories: score features, textual features, topic model features, and metadata features. We build a separate prediction model for each category, and combine them to create a composite prediction model which is used as the oracle. We name our proposed approach APRILE, which stands for Automated PRediction of IR-based Bug Localizationâ€™s Effectiveness. We have evaluated APRILE to predict the effectiveness of three state-of-the-art IR-based bug localization tools on more than three thousands bug reports from AspectJ, Eclipse, and SWT. APRILE can achieve an average precision, recall, and F-measure of at least 70. 36 %, 66. 94 %, and 68. 03 %, respectively. Furthermore, APRILE out-performs a baseline approach by 84. 48 %, 17. 74 %, and 31. 56 % for the AspectJ, Eclipse, and SWT bug reports, respectively...|$|R
40|$|Information {{retrieval}} (<b>IR)</b> based bug <b>localization</b> approaches {{process a}} textual bug report {{and a collection}} of source code files to find buggy files. They output a ranked list of files sorted by their likelihood to contain the bug. Recently, several IR-based bug localization tools have been proposed. However, there are no perfect tools that can successfully localize faults within a few number of most suspicious program elements for every single input bug report. Therefore, it is difficult for developers to decide which tool would be effective for a given bug report. Furthermore, for some bug reports, no bug localization tools would be useful. Even a state-of-the-art bug localization tool outputs many ranked lists where buggy files appear very low in the lists. This potentially causes developers to distrust bug localization tools. In this work, we build an oracle that can automatically predict whether a ranked list produced by an IR-based bug localization tool is likely to be effective or not. We consider a ranked list to be effective if a buggy file appears in the top-N position of the list. If a ranked list is unlikely to be effective, developers do not need to waste time in checking the recommended files one by one. In such cases, it is better for developers to use traditional debugging methods or request for further information to localize bugs. To build this oracle, our approach extracts features that can be divided into four categories: score features, textual features, topic model features, and metadata features. We build a separate prediction model for each category, and combine them to create a composite prediction model which is used as the oracle. We name this solution APRILE, which stands for Automated PRediction of IR-based Bug Localizationâ€™s Effectiveness. We further integrate APRILE with two other components that are learned using our bagging-based ensemble classification (BEC) method. We refer to the extension of APRILE as APRILE +. We have evaluated APRILE + to predict the effectiveness of three state-of-the-art IR-based bug localization tools on more than three thousands bug reports from AspectJ, Eclipse, SWT, and Tomcat. APRILE + can achieve an average precision, recall, and F-measure of 77. 61 %, 88. 94 %, and 82. 09 %, respectively. Furthermore, APRILE + outperforms a baseline approach by Le and Lo and APRILE by up to a 17. 43 % and 10. 51 % increase in F-measure respectively...|$|R

