44|125|Public
500|$|For one-page {{drawings}} of either style, {{it is important}} to keep the number of crossings small as a way of reducing the visual clutter of the drawing. Minimizing the number of crossings is NP-complete, but may be approximated with an approximation ratio of [...] where [...] is the number of vertices. Minimizing the one-page or two-page crossing number is fixed-parameter tractable when parameterized by the cyclomatic number of the given graph, or by a combination of the crossing number and the treewidth of the graph. Heuristic methods for reducing the crossing complexity have also been devised, based e.g. on a careful vertex <b>insertion</b> <b>order</b> and on local optimization.|$|E
2500|$|Although {{not as easy}} {{to analyze}} as the average path length, {{there has also been}} much {{research}} on determining the expectation (or high probability bounds) of the length of the longest path in a binary search tree generated from a random <b>insertion</b> <b>order.</b> It is now known that this length, for a tree with [...] nodes, is almost surely ...|$|E
50|$|MongoDB {{supports}} fixed-size collections called capped collections. This type {{of collection}} maintains <b>insertion</b> <b>order</b> and, once the specified size has been reached, behaves like a circular queue.|$|E
40|$|In this thesis, we {{consider}} <b>insertion</b> <b>orders</b> for incremental construction in computational geometry. Specifically, {{we focus on}} Delaunay triangulations and arrangements of line segments. The starting point {{of this research was}} the assumption that by adapting the orders to the point sets, we could speed up the point location in incremental constructions. We present new <b>insertion</b> <b>orders</b> for Delaunay triangulations based on the concepts of adap-tive curves. More specifically, we explore orders that attempt to split the point set evenly in the recursive construction of the order. Further, we explore squarified orders that are orders that try to produce subproblems without any bias to one of the coordinate axes. We pro-vide implementations for all of these orders and several existing ones. We also propose new <b>insertion</b> <b>orders</b> for arrangements of line segments. We perform an experimental evaluation of the orders for incrementally constructing Delau-nay triangulations. Our experiments show the advantages of squarifying: for a tour visiting the points in the given order, the squarified order typically produces a shorter tour than the order it is based on. This results in (slightly) faster point location. The experiments also sho...|$|R
3000|$|At the {{transmitter}} side, IFFT processing is usually {{followed by a}} cyclic prefix (CP) <b>insertion</b> in <b>order</b> to mitigate the intersymbol interference (ISI). Finally, x [...]...|$|R
40|$|Published monthly, {{issued on}} the 20 th of each month. Closing date for <b>insertion</b> <b>orders</b> and {{mechanicals}} on the 20 th {{of the preceding}} month. If new material is not received by deadline, the Publisher will use/repeat existing material on hand. All cancellations must be in writing and received by closing date. No cancellations can be accepted after closing date Employment advertising in standard display sizes accepted at regular rates. Classified advertising not accepted. Special rates and space units are available for “Professional Services ” advertis-ing. Contact Publisher for rates. Advertising orders, files, and requests for information should b...|$|R
50|$|In general, {{minimizing}} {{the number of}} crossings is NP-complete, but may be approximated with an approximation ratio of O(log2 n) where n {{is the number of}} vertices. Heuristic methods for reducing the crossing complexity have also been devised, based e.g. on a careful vertex <b>insertion</b> <b>order</b> and on local optimization.|$|E
5000|$|Round-robin {{partitioning}} : The simplest strategy, it ensures uniform data distribution. With [...] partitions, the th tuple in <b>insertion</b> <b>order</b> {{is assigned}} to partition [...] This strategy enables the sequential access to a relation {{to be done in}} parallel. However, the direct access to individual tuples, based on a predicate, requires accessing the entire relation.|$|E
5000|$|Although {{not as easy}} {{to analyze}} as the average path length, {{there has also been}} much {{research}} on determining the expectation (or high probability bounds) of the length of the longest path in a binary search tree generated from a random <b>insertion</b> <b>order.</b> It is now known that this length, for a tree with [...] nodes, is almost surelywhere [...] is the unique number in the range [...] satisfying the equation ...|$|E
50|$|He {{currently}} oversees digital magazines, emerging media technologies, the Time Inc. digital {{archive group}} (E-MaG), the Digital Development Group, the OMS Print group, Time Inc. paper and production information systems (TimeXchange) and production systems development. Peter {{is also a}} founding member of the PRISM XML standard working group and has responsibility for Time Inc.'s efforts with electronic <b>insertion</b> <b>orders</b> and the AdsML advertising specification.Peter Meirs has left time inc. and is currently running his own company DigitalFirstMediaNY.As {{a founding member of}} the IDEAlliance metadata Working Group, Peter helped develop PRISM, the industry's first magazine-based XML metadata standard. He currently serves as Chairman of the IDEAlliance nextPub/PRISM Source Vocabulary (PSV) Working Group, and was a 2012 recipient of the IDEAlliance Luminaire award.|$|R
40|$|Recently it {{was shown}} that — under {{reasonable}} as-sumptions — Voronoi diagrams and Delaunay tri-angulations of planar point sets can be computed in time o(n log n), beating the classical comparison-based lower bound. A number of increasingly faster randomized algorithms have been proposed, most re-cently a linear-time algorithm based on a randomized incremental construction that uses a combination of nearest neighbor graphs and the history structure to speed up point location. We present a simpler vari-ant of this approach relying only on nearest neigh-bor graphs. The algorithm and its analysis gener-alize to higher dimensions, with an expected perfor-mance that {{is proportional to the}} structural change of the randomized incremental construction. As a by-product, we analyze an interesting class of <b>insertion</b> <b>orders</b> for randomized incremental constructions. ...|$|R
30|$|If T_ 1 and T_ 2 add CP {{of length}} L, then the relay needs {{to carry out}} the {{operations}} of OFDM symbol timing synchronization, CP removal, and CP <b>insertion.</b> In <b>order</b> to simplify the tasks of the relay, T_ 1 and T_ 2 add CP of length 2 L.|$|R
5000|$|Since the {{division}} of the plane is decided by the order of point-insertion, the tree's height is sensitive to and dependent on <b>insertion</b> <b>order.</b> Inserting in a [...] "bad" [...] order can lead to a tree of height linear in the number of input points (at which point it becomes a linked-list). If the point-set is static, pre-processing can be done to create a tree of balanced height.|$|E
50|$|Before placing an ad, be {{sure you}} {{understand}} the terms and conditions of advertising with the publication. In many cases where {{there may be a}} conflict between the <b>insertion</b> <b>order</b> and the rate card, the rate card will be the deciding factor. This does not mean the prices on the rate card are fixed. Most retailers will find the paper's sales rep will offer special rates for first time advertisers or other discounts.|$|E
50|$|The data {{structure}} {{consists of a}} doubly linked list and a 2-4 tree {{data structure}}, each modified {{to keep track of}} its minimum-priority element.The basic operation of the structure is to keep newly inserted elements in the doubly linked list, until a deletion would remove one of the list items, at which point they are all moved into the 2-4 tree. The 2-4 tree stores its elements in <b>insertion</b> <b>order,</b> rather than the more conventional priority-sorted order.|$|E
40|$|In {{this paper}} we present an {{improved}} redesign of the R*-tree that is entirely {{suitable for running}} within a DBMS. Most importantly, an insertion is guaranteed to be restricted to a single path because re-insertion could be abandoned. We re-engineered both, subtree choice and split algorithm, to be more robust against specific data distributions and <b>insertion</b> <b>orders,</b> as well as peculiarities often found in real multidimensional data sets. This comes along with a substantial reduction in CPU-time. Our experimental setup covers {{a wide range of}} different artificial and real data sets. The experimental comparison shows that the search performance of our revised R*-tree is superior to that of its three most important competitors. In comparison to its predecessor, the original R*-tree, the creation of a tree is substantially faster, while the I/O cost required for processing queries is improved by more than 30 % on average for two- and three-dimensional data. For higher dimensional data, particularly for real data sets, much larger improvements are achieved...|$|R
40|$|Abstract:-The B+-tree and its {{variants}} {{have been}} reported as the good index structures for retrieving data. Database systems frequently establish the B+-tree style indices for fast access to data records. However, traditional B+-tree index could be a performance bottleneck because of its inflatable hierarchy. Many works focus on improving indexing techniques. In fact, the optimization of data organization inside index nodes is the most critical factor to improve retrieval quality. Some handles like pre-partition of data space, node splitting by force, node splitting with unbalanced partition, and node splitting upon overflow loading always burden index structures with plenty of storage space and building overhead. In this paper, we propose a new index scheme to highly aggregate the external structure in a B+-tree. It also adopts a better splitting policy to completely remove the suffering from data <b>insertion</b> <b>orders.</b> Our new index technique can compress data records in leaves and in turn reduce index size to improve query performance. In addition, the entire index’s space utilization is promoted to a higher level; thereby the index’s space requirement becomes smaller and easily resides in memory...|$|R
40|$|We {{comment on}} the {{algorithm}} to compute periods using hyperlogarithms, applied to massless Feynman integrals in the parametric representation. Ex-plicitly, we give results for all three-loop propagators with arbitrary <b>insertions</b> including <b>order</b> ε 4 and show examples at four and more loops. Further we prove that all coefficients of the ε-expansion of these integrals are rational linear combinations of multiple zeta values {{and in some cases}} possibly also alternating Euler sums. 1 Introduction an...|$|R
50|$|In February 1999, KATV aired {{commercials}} for the Walt Disney Pictures animated film Doug's 1st Movie during an ABC network broadcast of Disney's Doug. Nearly eight years later, in 2007, the FCC levied a $8,000 fine against KATV for violating {{a provision in}} the Children's Television Act that classifies the broadcast of a commercial that features characters from a children's program being televised as a program-length commercial. KATV appealed the fine, claiming the error was due to a last-minute <b>insertion</b> <b>order</b> from ABC. However, it lost the appeal in April 2010.|$|E
5000|$|For one-page {{drawings}} of either style, {{it is important}} to keep the number of crossings small as a way of reducing the visual clutter of the drawing. Minimizing the number of crossings is NP-complete, but may be approximated with an approximation ratio of [...] where [...] is the number of vertices. Minimizing the one-page or two-page crossing number is fixed-parameter tractable when parameterized by the cyclomatic number of the given graph, or by a combination of the crossing number and the treewidth of the graph. Heuristic methods for reducing the crossing complexity have also been devised, based e.g. on a careful vertex <b>insertion</b> <b>order</b> and on local optimization.|$|E
50|$|An {{equivalent}} way {{of describing}} the treap {{is that it}} could be formed by inserting the nodes highest-priority-first into a binary search tree without doing any rebalancing. Therefore, if the priorities are independent random numbers (from a distribution over a large enough space of possible priorities to ensure that two nodes are very unlikely to have the same priority) then the shape of a treap has the same probability distribution as the shape of a random binary search tree, a search tree formed by inserting the nodes without rebalancing in a randomly chosen <b>insertion</b> <b>order.</b> Because random binary search trees are known to have logarithmic height with high probability, {{the same is true for}} treaps.|$|E
50|$|Messiah in America is a 34 movement, 7 part oratorio {{composed}} by Dr. Brett Stewart. Its subject is Christ's visitation to the Americas, {{as depicted in}} the Book of Mormon. It is written for a choir, a children's chorus, Soprano, Alto, Tenor and Bass soloists, full orchestra and organ. The libretto was compiled by Dr. Brett Stewart and Bruce Richardson from the Book of Mormon and the Bible with no poetic <b>insertions,</b> in <b>order</b> to maintain scriptural integrity.|$|R
40|$|For {{multiple}} coupled RLC nets, we formulate the min-area simultaneous shield <b>insertion</b> and net <b>ordering</b> (SINO/NB- v) {{problem to}} satisfy the given noise bound. We develop an e#cient and conservative model to compute the peak noise, and apply the noise model to a simulated-annealing (SA) based algorithm for the SINO/NB-v problem. Extensive and accurate experiments show that the SA-based algorithm is e#cient, and always achieves solutions satisfying the given noise bound. It uses up to 71 % and 30 % fewer shields when compared to a greedy based shield insertion algorithm and a separated shield <b>insertion</b> and net <b>ordering</b> algorithm, respectively. To {{the best of our}} knowledge, it is the first work that presents an in-depth study on the min-area SINO problem under an explicit noise constraint...|$|R
40|$|In this paper, {{we study}} an {{extended}} global routing problem with RLC crosstalk constraints. Considering simultaneous shield <b>insertion</b> and net <b>ordering,</b> we propose a multiphase algorithm to synthesize a global routing solution with track assignment {{to satisfy the}} RLC crosstalk constraint at each sink. The key algorithm phase is global routing synthesis with shield reservation and minimization based on prerouting shield estimation. Experiments using large industrial benchmarks show that compared to the best alternative with postrouting shield <b>insertion</b> and net <b>ordering,</b> the proposed algorithm with shield reservation and minimization reduces the congestion by 18. 4 % with a smaller runtime. To {{the best of our}} knowledge, this is the first in-depth study on global routing synthesis with RLC crosstalk constraints...|$|R
5000|$|Java's [...] {{interface}} {{defines the}} set. A set can't have any duplicate elements in it. Additionally, the set has no set order. As such, elements can't {{be found by}} index. Set is implemented by , , and [...] HashSet uses a hash table. More specifically, it uses a [...] to store the hashes and elements and to prevent duplicates. [...] extends this by creating a doubly linked list that links all of the elements by their <b>insertion</b> <b>order.</b> This ensures that the iteration order over the set is predictable. [...] uses a red-black tree implemented by a [...] The red-black tree makes {{sure that there are}} no duplicates. Additionally, it allows TreeSet to implement [...]|$|E
50|$|One index may be {{specified}} as the clustered, or primary, index. In ESE, the clustered index must {{be unique}} and {{is referred to}} as the primary index. Other indexes are described as non-clustered, or secondary, indexes. Primary indexes are different from secondary indexes in that the index entry is the record itself, and not a logical pointer to the record. Secondary indexes have primary keys at their leaves to logically link to the record in the primary index. In other words, the table is physically clustered in primary index order. Retrieval of non-indexed record data in primary index order is generally much faster than in secondary index order. This is because a single disk access can bring into memory multiple records that will be access close together in time. The same disk access satisfies multiple record access operations. However, the insertion of a record into the middle of an index, as determined by the primary index order, may be very much slower than appending it to the end of an index. Update frequency must be carefully considered against retrieval patterns when performing table design. If no primary index is defined for a table, then an implicit primary index, called a database key (DBK) index is created. The DBK is simply a unique ascending number incremented each time a record is inserted. As a result, the physical order of records in a DBK index is chronological <b>insertion</b> <b>order,</b> and new records are always added at the end of the table. If an application wishes to cluster data on a non-unique index, this is possible by adding an autoincrement column to the end of the non-unique index definition.|$|E
30|$|<b>Insertion</b> <b>Order</b> Issue: Pattern {{of arrival}} of new {{documents}} should {{not affect the}} correctness of the clusters.|$|E
40|$|<b>Order</b> <b>insertion</b> often {{occurs in}} the {{scheduling}} process of logistics service supply chain (LSSC), which disturbs normal time scheduling especially in the environment of mass customization logistics service. This study analyses order similarity coefficient and <b>order</b> <b>insertion</b> operation process and then establishes an <b>order</b> <b>insertion</b> scheduling model of LSSC with service capacity and time factors considered. This model aims to minimize the average unit volume operation cost of logistics service integrator and maximize the average satisfaction degree of functional logistics service providers. In order to verify the viability and effectiveness of our model, a specific example is numerically analyzed. Some interesting conclusions are obtained. First, along {{with the increase of}} completion time delay coefficient permitted by customers, the possible inserting order volume first increases and then trends to be stable. Second, supply chain performance reaches the best when the volume of inserting order is equal to the surplus volume of the normal operation capacity in mass service process. Third, the larger the normal operation capacity in mass service process is, the bigger the possible inserting order’s volume will be. Moreover, compared to increasing the completion time delay coefficient, improving the normal operation capacity of mass service process is more useful...|$|R
40|$|Constructive {{heuristics}} for shop scheduling {{problems are}} {{often based on}} priority (or dispatching) rules. However, recent work has demonstrated that insertion algorithms that step by step insert operations or jobs into partial schedules usually clearly outperform priority rules. In this paper, we consider various job shop scheduling problems with setup times. For each job a specific technological route and a release data are given. Moreover, the jobs are partitioned into groups. A sequence independent setup time S_r_j is required on machine j when a job of the r-th group is processed after a job of another group. We consider differrent types of job availability, namely item and batch availability. As objective function we use both regular and nonregular criteria. For such problems we apply insertion techniques combined with beam search. Especially we consider different <b>insertion</b> <b>orders</b> of the operations or jobs. A refined variant of the insertion algorithm is presented, where several operations are inserted in parallel. The proposed variants have been tested on a large collection of test problems and compared with other constructive algorithms based on priority rules. (orig.) SIGLEAvailable from TIB Hannover: RR 4487 (1996, 4) / FIZ - Fachinformationszzentrum Karlsruhe / TIB - Technische InformationsbibliothekDeutsche Forschungsgemeinschaft (DFG), Bonn (Germany) DEGerman...|$|R
5000|$|Ordered storage {{typically}} stores {{the records}} {{in order and}} may have to rearrange or increase the file size when a new record is inserted, resulting in lower <b>insertion</b> efficiency. However, <b>ordered</b> storage provides more efficient retrieval as the records are pre-sorted, resulting in a complexity of [...]|$|R
40|$|We {{consider}} the following procedure for constructing a directed tree on n vertices: The underlying undirected tree is fixed in advance but {{the edges of the}} tree are presented in a random order (all orders are equally likely); each edge is oriented towards its endpoint that has the lower indegree {{at the time of its}} insertion. The question is what is E(M(n)), the expected maximum indegree? As we shall explain, this problem has connections with balanced allocations and with on-line load balancing. Previous results by Azar, Naor, and Rom imply that if the <b>insertion</b> <b>order</b> is arbitrary, for any tree, M(n) = O(logn) and that there are trees and insertion orders for which M(n) =ΩΓ 351 n). On the other hand, results by Azar, Broder, Karlin, and Upfal imply that if both the underlying tree and the <b>insertion</b> <b>order</b> are random, then E(M(n)) = Θ(log log n). Here we show an intermediate result: for any tree if the <b>insertion</b> <b>order</b> is random, then E(M(n)) = O(log n= log log n) and there [...] ...|$|E
40|$|Set, a {{collection}} of distinct values, is widely used in many applications. There are three applicable set classes included in the Java Collections. TreeSet produces a sorted output in ascending order whereas HashSet provides an output with random order. LinkedHashSet, a subclass of HashSet, produces an output in <b>insertion</b> <b>order,</b> but {{does not support the}} sorted output. Three algorithms are proposed in this paper to modify the existing set classes in the Java Collections so that they can provide multiple output formats for users to select from. The algorithm at application-level does not change the current configurations of the set classes, but it offers little reusability. The algorithm at method level introduces an internal method for producing sorted output into the LinkedHashTable class, in addition to its default output in <b>insertion</b> <b>order.</b> This can be achieved without change to other configurations of the class. If this method is placed in the HashSet class, users can freely choose their preferred output format from random order, <b>insertion</b> <b>order,</b> or ascending order. The algorithm at class level proposes a new LinkedTreeSet class that is implemented using both a balanced BST and a doubly linked list. The basic operations of this class may be slightly slower than that in the TreeSet class...|$|E
40|$|Randomized {{incremental}} constructions {{are widely}} used in computational geometry, but they perform very badly on large data because of their inherently random memory access patterns. We define a biased randomized <b>insertion</b> <b>order</b> which removes enough randomness to significantly improve performance, but leaves enough randomness so that the algorithms remain theoretically optimal...|$|E
50|$|For {{patients}} with localized disease, {{and who can}} tolerate a radical surgery, radiation can be given post-operatively as a consolidative treatment. The entire hemithorax is treated with radiation therapy, often given simultaneously with chemotherapy. Delivering radiation and chemotherapy after a radical surgery has led to extended life expectancy in selected patient populations. It can also induce severe side-effects, including fatal pneumonitis. As part of a curative approach to mesothelioma, radiotherapy is commonly applied to the sites of chest drain <b>insertion,</b> in <b>order</b> to prevent growth of the tumor along the track in the chest wall.|$|R
40|$|Abstract—In this paper, {{we study}} an {{extended}} global routing problem with RLC crosstalk constraints. Considering simulta-neous shield <b>insertion</b> and net <b>ordering,</b> we propose a multiphase algorithm to synthesize a global routing solution with track assignment {{to satisfy the}} RLC crosstalk constraint at each sink. The key algorithm phase is global routing synthesis with shield reservation and minimization based on prerouting shield estima-tion. Experiments using large industrial benchmarks show that compared to the best alternative with postrouting shield <b>insertion</b> and net <b>ordering,</b> the proposed algorithm with shield reservation and minimization reduces the congestion by 18. 4 % with a smaller runtime. To {{the best of our}} knowledge, this is the first in-depth study on global routing synthesis with RLC crosstalk constraints. Index Terms—Global routing, net ordering, RLC crosstalk, shielding, signal integrity. I...|$|R
50|$|Self-balancing binary trees {{solve this}} problem by {{performing}} transformations on the tree (such as tree rotations) at key <b>insertion</b> times, in <b>order</b> to keep the height proportional to log2(n). Although a certain overhead is involved, it may be justified {{in the long run}} by ensuring fast execution of later operations.|$|R
