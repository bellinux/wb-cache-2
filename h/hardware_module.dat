245|808|Public
5|$|The F-22 has {{integrated}} radio functionality, {{the signal}} processing systems are virtualized {{rather than as}} a separate <b>hardware</b> <b>module.</b> There have been several reports on the F-22's inability to communicate with other aircraft, and funding cuts have affected the integration of the Multifunction Advanced Data Link (MADL). Voice communication is possible, but not data transfer.|$|E
25|$|With wide deployment(s) of flash drives {{being used}} in various environments (secured or otherwise), the issue of data and {{information}} security remains important. The use of biometrics and encryption is becoming the norm {{with the need for}} increased security for data; on-the-fly encryption systems are particularly useful in this regard, as they can transparently encrypt large amounts of data. In some cases a secure USB drive may use a hardware-based encryption mechanism that uses a <b>hardware</b> <b>module</b> instead of software for strongly encrypting data. IEEE 1667 is an attempt to create a generic authentication platform for USB drives. It is supported in Windows 7 and Windows Vista (Service Pack 2 with a hotfix).|$|E
5000|$|... other files {{depending}} on various <b>hardware,</b> <b>module</b> configurations, and {{changes to the}} kernel.|$|E
40|$|The Toolkit is {{a family}} of <b>hardware</b> <b>modules</b> (processors, memory, interconnect, and {{input-output}} devices) {{and a collection of}} software modules (compilers, simulators, scientific libraries, and high-level front ends) from which high-performance special-purpose computers can be easily configured and programmed. The <b>hardware</b> <b>modules</b> are intended to be standard, reusable parts. These are combined by means of a user- reconfigurable, static interconnect technology. T he Toolkit's software support, based on n ovel compilation techniques, produces e xtremely high- performance numerical code from high-level language input, and will eventually automatically configure <b>hardware</b> <b>modules</b> for particular applications...|$|R
40|$|A {{suite of}} tools called NCHARGE (Networked Configurable Hardware Administrator for Reconfiguration and Governing via End-systems) has been {{developed}} to simplify the co-design of hardware and software components that process packets within a network of Field Programmable Gate Arrays (FPGAs). A key feature of NCHARGE is that it provides a high-performance packet interface to hardware and standard Application Programming Interface (API) between software and reprogrammable <b>hardware</b> <b>modules.</b> Using this API, multiple software processes can communicate {{to one or more}} <b>hardware</b> <b>modules</b> using standard TCP/IP sockets. NCHARGE also provides a Web-Based User Interface to simplify the configuration and control of an entire network switch that contains several software and <b>hardware</b> <b>modules...</b>|$|R
40|$|Abstract—One of {{the major}} impediments to {{deploying}} partially run-time reconfigurable FPGAs as hardware accelerators is the time overhead involved in loading the <b>hardware</b> <b>modules.</b> While configuration prefetching is an effective method that can be employed to reduce this overhead, mispredicted prefetches may worsen the situation by {{increasing the number of}} reconfigurations needed. In this paper, we present a static algorithm for configuration prefetching in partially reconfigurable FPGAs that minimizes the reconfiguration overhead. By making use of profiling, the interprocedural control flow graph, and the placement information of <b>hardware</b> <b>modules,</b> our algorithm predicts hardware execution and tries to prefetch <b>hardware</b> <b>modules</b> as early as possible while minimizing the risk of mis-predictions. Our experiments show that our algorithm performs significantly better than current-state-ofthe-art prefetching algorthms for control-bound applications. I...|$|R
50|$|The {{universal}} synchronous/asychrnous receive/transmit (USART) {{peripheral interface}} supports asynchronous RS-232 and synchronous SPI communication with one <b>hardware</b> <b>module.</b> The MSP430F15x/16x USART modules also support I²C, programmable baud rate, and independent interrupt capability for receive and transmit.|$|E
50|$|The F-22 has {{integrated}} radio functionality, {{the signal}} processing systems are virtualized {{rather than as}} a separate <b>hardware</b> <b>module.</b> There have been several reports on the F-22's inability to communicate with other aircraft, and funding cuts have affected the integration of the Multifunction Advanced Data Link (MADL). Voice communication is possible, but not data transfer.|$|E
5000|$|Read operands: After an {{instruction}} has been issued and correctly {{allocated to the}} required <b>hardware</b> <b>module,</b> the instruction waits until all operands become available. This procedure resolves read dependencies (RAW - Read after Write) because registers which are intended to be written by another instruction are not considered available until they are actually written.|$|E
50|$|Digital pattern {{generators}} {{are today}} available as stand-alone units, add-on <b>hardware</b> <b>modules</b> for other {{equipment such as}} a analyzer or as PC-based equipment.|$|R
40|$|This paper {{presents}} an approach for {{the integration of}} reconfigurable hardware and computer applications based {{on the concept of}} ubiquitous computing. The goal is to allow a network of reconfigurable <b>hardware</b> <b>modules</b> to be transparently accessible by client applications. The communication between them is done at the API level, and a Jini-based infrastructure is used to provide an interface for the client applications to find available reconfigurable <b>hardware</b> <b>modules</b> over the network. A DES-based cryptography system was implemented as a case study...|$|R
25|$|Other {{formulas}} {{are available}} to tune the loop according to different performance criteria. Many patented formulas are now embedded within PID tuning software and <b>hardware</b> <b>modules.</b>|$|R
5000|$|The Acorn Plus 3 was a <b>hardware</b> <b>module</b> that {{connected}} {{independently of the}} Plus 1 and provided a double-density 3½" [...] disc drive connected through a WD1770 drive controller and an ADFS ROM. There were {{two versions of the}} Plus 3 produced: A Single-sided and a Double-sided drive version. Because the WD1770 is capable of single density mode and uses the same IBM360 derived floppy disc format as the Intel 8271 found in the BBC Micro, it was also possible to run a DFS filing system with an alternate ROM, such as the P.R.E.S AP4 interface.|$|E
50|$|In {{the case}} of an {{external}} array controller setup, the array controller would be an independent <b>hardware</b> <b>module</b> connected to the network. Within the hardware array controller would be an Encryption unit for data encryption as well as a Key Management Client for authentication. Generally, there are few hardware array controllers to many host devices and storage disks. Therefore, it reduces deployment complexity to implement into fewer hardware components. Moreover, the lifecycle of an array controller is generally much longer than host computers and storage disks, therefore the encryption implementation will not need to be reimplemented as often as if encryption was done at another point in the storage network.|$|E
5000|$|Access to keys, data or {{systems is}} often {{protected}} and requires authentication by presenting a password. If the authentication mechanism is implemented in software only, the access typically {{is prone to}} [...] "dictionary attacks". Since TPM is implemented in a dedicated <b>hardware</b> <b>module,</b> a dictionary attack prevention mechanism was built in, which effectively protects against guessing or automated dictionary attacks, while still allowing the user a sufficient and reasonable number of tries. With this hardware based dictionary attack prevention, the user can opt for shorter or weaker passwords which are more memorable. Without this level of protection, only passwords with high complexity would provide sufficient protection.|$|E
50|$|An {{even higher}} {{security}} level {{can be achieved}} by protecting the private keys with a <b>hardware</b> security <b>module.</b> OpenXPKI currently supports nCipher's nShield <b>hardware</b> security <b>module.</b>|$|R
50|$|Other {{formulas}} {{are available}} to tune the loop according to different performance criteria. Many patented formulas are now embedded within PID tuning software and <b>hardware</b> <b>modules.</b>|$|R
40|$|This paper gives {{a survey}} of {{communication}} architectures which allow for dynamically exchangeable <b>hardware</b> <b>modules.</b> Four different architectures are compared in terms of reconfiguration capabilities, performance, flexibility and hardware requirements. A set of parameters for the classification of the different communication architectures is presented and the pro and cons of each architecture are elaborated. The analysis takes a minimal communication system for connecting four <b>hardware</b> <b>modules</b> as a common basis for the comparison of the diverse data given in the papers on the different architectures. 1...|$|R
50|$|With wide deployment(s) of flash drives {{being used}} in various environments (secured or otherwise), the issue of data and {{information}} security remains important. The use of biometrics and encryption is becoming the norm {{with the need for}} increased security for data; on-the-fly encryption systems are particularly useful in this regard, as they can transparently encrypt large amounts of data. In some cases a secure USB drive may use a hardware-based encryption mechanism that uses a <b>hardware</b> <b>module</b> instead of software for strongly encrypting data. IEEE 1667 is an attempt to create a generic authentication platform for USB drives. It is supported in Windows 7 and Windows Vista (Service Pack 2 with a hotfix).|$|E
50|$|The MicroBlaze has a {{versatile}} interconnect system {{to support a}} variety of embedded applications. MicroBlaze's primary I/O bus, the CoreConnect PLB bus, is a traditional system-memory mapped transaction bus with master/slave capability. A newer version of the MicroBlaze, supported in both Spartan-6 and Virtex-6 implementations, {{as well as the}} 7-Series, supports the AXI specification. The majority of vendor-supplied and third-party IP interface to PLB directly (or through a PLB to OPB bus bridge). For access to local-memory (FPGA RAM), MicroBlaze uses a dedicated LMB bus, which reduces loading on the other buses. User-defined coprocessors are supported through a dedicated FIFO-style connection called FSL (Fast Simplex Link). The coprocessor(s) interface can accelerate computationally intensive algorithms by offloading parts or the entirety of the computation to a user-designed <b>hardware</b> <b>module.</b>|$|E
30|$|The busses {{implemented}} in FPGA logic follow the IBM CoreConnect standard. It provides master and slave operation modes for any instanciated <b>hardware</b> <b>module.</b> The most important system busses are the Processor Local Bus (PLB), and the On-chip Peripheral Bus (OPB).|$|E
3000|$|... (5) The {{software}} and <b>hardware</b> <b>modules</b> {{of a system}} were gradually debugged and tested. Results showed that the self-balancing vehicle based on visual autonomous navigation worked well.|$|R
40|$|This paper {{presents}} {{the structure and}} basic elements of the Autosar software architecture. In addition, the configuration code generation options are presented for both MC-ISAR drivers and AURIX TriCore TC 277 <b>hardware</b> <b>modules</b> using EB tresos Studio. For the purpose of possible integration of the electric motor control algorithms, configurations of the GTM and VADC <b>hardware</b> <b>modules</b> have been created and described to enable the generation of PWM signals along with synchronously triggered parallel analogue-to-digital conversions. For this purpose, an application interface including the PWM driver was also developed and described...|$|R
50|$|There are {{typically}} many on-board effects and virtual signal processors available, {{eliminating the need}} for additional <b>hardware</b> <b>modules,</b> and the associated cost, size, weight, cabling, signal quality issues, etc.|$|R
40|$|This paper {{presents}} an MEMS accelerometer mostly based on gesture recognition algorithm and its applications. The <b>hardware</b> <b>module</b> {{consists of a}} triaxial mems accelerometer, microcontroller, and zigbee wireless transmission module for sensing and collecting accelerations of handwriting and hand gesture trajectories. Users will use this <b>hardware</b> <b>module</b> to write down digits, alphabets in digital kind by making four hand gestures. The accelerations of hand motions measured by the accelerometer are transmitted wirelessly to a personal computer for trajectory recognition. The trajectory algorithm composed of information assortment collection, signal preprocessing for reconstructing the trajectories to attenuate the cumulative errors caused by drift of sensors. So, by changing the position of MEMS (micro electro mechanical systems) we can able to show the alphabetical characters and numerical within the PC...|$|E
40|$|Abstract—Most of {{the studies}} on traffic {{grooming}} focus on minimizing network link capacity and providing serving-relationship between client services and link capacity. Subsequent to this step, {{it is important to}} plan for adding/dropping client services over client service ports and setting up end-to-end lightpaths over network ports, which is however seldom investigated. We call such effort node <b>hardware</b> <b>module</b> planning. This is an industrially practical problem aiming to minimize node hardware cost since hardware modules are the most expensive components in a network. Based on a link-based traffic grooming result that provides information on end-to-end capacity units incident to nodes and aggregation relationship between client services and capacity units, we develop an Integer Linear Programming (ILP) model to optimally plan hardware modules. To overcome the computation difficulty of the ILP model under large-sized planning scenarios, we also develop a fast sub-optimal heuristic for <b>hardware</b> <b>module</b> planning. Simulation studies indicate that the heuristic is efficient to achieve a design close to an optimal solution obtained by the ILP model. Also, the evaluation of the impact of switch backplane size shows that given a certain set of network modules, an optimal switch backplane size exists, which achieves the lowest hardware cost. Index Terms—Hardware module planning, switch backplane, <b>hardware</b> <b>module,</b> client service tree I...|$|E
30|$|We also {{incorporate}} MicroBlaze soft processor in {{both the}} hardware versions. For the embedded hardware, MicroBlaze is configured to have 128  KB of local on-chip memory. As illustrated in Fig.  2, our user-designed <b>hardware</b> <b>module</b> communicates with the MicroBlaze processor {{and with the other}} peripherals via AXI bus [32], through the AXI Intellectual Property Interface (IPIF) module, using a set of ports called the Intellectual Property Interconnect (IPIC). For the hardware designs, MicroBlaze processor is only employed to initiate the control cycle, to apply the control signals to the plant, and to determine the plant output signal. Conversely, the user-designed <b>hardware</b> <b>module</b> performs the whole fast-charge MPC algorithm. The execution times for the hardware as well as the software on MicroBlaze are obtained using the AXI Timer [33] running at 100  MHz.|$|E
50|$|The IMA concept proposes an {{integrated}} architecture with application software portable across an assembly of common <b>hardware</b> <b>modules.</b> An IMA architecture imposes multiple requirements on the underlying operating system.|$|R
40|$|A {{hierarchical}} {{high level}} synthesis (HHLS) system, such as AMICAL, allows the obtaining of an architecture for a circuit from its behavioral description, written as {{a hierarchy of}} procedures and function calls, proper of large circuits. When specific modules are synthesized and reused as basic <b>hardware</b> <b>modules</b> in another HLS session, the resulting architecture may be inefficient due to operations overlap among the allocated <b>hardware</b> <b>modules.</b> This paper presents {{the structure of a}} CAD system that treats this problem by generating new <b>hardware</b> <b>modules</b> through a set of transformations to be applied to existing modules in an original library. We call the procedure of generating and reusing these new modules recursive high level synthesis (RHLS) which leads to a more efficient architecture. We propose a cost function that evaluates the quality of each architecture, taking into account area and time, and we present criteria to select the most promising transformation. The methodology is applied to a motor controller example (PID), showing its feasibility...|$|R
40|$|Dynamic {{reconfiguration}} is {{a promising}} approach {{to enhance the}} resource efficiency of FPGAs beyond the current possibilities. One of the main prerequisites for its implementation is a communication infrastructure that enables data transfer between the <b>hardware</b> <b>modules</b> that are placed on the FPGA at run-time. In this paper we present a new communication macro for Xilinx FPGAs that considers the special requirements of these systems. While most solutions that were presented so far enable basic communication between a low number of <b>hardware</b> <b>modules</b> at fixed positions, our approach implements an infrastructure that allows free placement of <b>hardware</b> <b>modules</b> at run-time. Methodologies like 2 D-placement of modules, which were analyzed mainly in theory so far, can now be implemented with currently available FPGAs. A tool-flow is presented, that automatically generates the required homogeneous communication infrastructure for any FPGA of the Xilinx Virtex-E to Virtex- 5 family. Performance and area requirements are analyzed based on two typical example implementations of a Wishbone bus. 1...|$|R
40|$|We {{propose a}} new {{technique}} called Differential Cluster Analysis for side-channel key recovery attacks. This technique uses cluster analysis to detect internal collisions and it combines features from previously known collision attacks and Differential Power Analysis. It captures more general leakage features and {{can be applied to}} algorithmic collisions as well as implementation specific collisions. In addition, the concept is inherently multivariate. Various applications of the approach are possible: with and without power consumption model and single as well as multi-bit leakage can be exploited. Our findings are confirmed by practical results on two platforms: an AVR microcontroller with implemented DES algorithm and an AES <b>hardware</b> <b>module.</b> To our best knowledge, this is the first work demonstrating the feasibility of internal collision attacks on highly parallel hardware platforms. Furthermore, we present a new attack strategy for the targeted AES <b>hardware</b> <b>module...</b>|$|E
40|$|AbstractThis paper {{presents}} a <b>hardware</b> <b>module</b> {{design for the}} forward Binary Discrete Cosine Transform (BinDCT) and its implementation on a {{field programmable gate array}} device. Different architectures of the BinDCT module were explored to ensure the maximum efficiency. The elaboration of these architectures included architectural design, timing and pipeline analysis, hardware description language modeling, design synthesis, and implementation. The developed BinDCT <b>hardware</b> <b>module</b> {{presents a}} high efficiency in terms of operating frequency and hardware resources, which has made it suitable for the most recent video standards with high image resolution and refresh frequency. Additionally, the high hardware efficiency of the BinDCT would make it a very good candidate for time and resource-constrained applications. By comparison with several recent implementations of discrete cosine transform approximations, {{it has been shown that}} the proposed hardware BinDCT module presents the best performances...|$|E
40|$|International Telemetering Conference Proceedings / October 14 - 16, 1975 / Sheraton Inn, Silver Spring, MarylandThis paper postulates a {{complete}} computerized telemetry processing system which {{has only one}} basic <b>hardware</b> <b>module</b> as the system building block. A discussion of the technology incorporated {{in the system and}} its effect on systems cost and complexity is included...|$|E
30|$|As a result, {{advances}} on {{high performance}} computing {{as well as}} on specialized high performance <b>hardware</b> <b>modules</b> are necessarily required to achieve the near-real processing time performances for complex RS algorithms.|$|R
40|$|Abstract—Aggressive {{requirements}} for low power and high perfor-mance in VLSI designs {{have led to}} increased interest in approximate computation. Approximate <b>hardware</b> <b>modules</b> can achieve improved energy efficiency compared to accurate <b>hardware</b> <b>modules.</b> While a number of previous works have proposed <b>hardware</b> <b>modules</b> for approx-imate arithmetic, these works focus on solitary approximate arithmetic operations. To utilize the benefit of approximate <b>hardware</b> <b>modules,</b> CAD tools {{should be able to}} quickly and accurately estimate the output quality of composed approximate designs. A previous work [10] proposes an interval-based approach for evaluating the output quality of certain approximate arithmetic designs. However, their approach uses sampled error distributions to store the characterization data of hardware, and its accuracy is limited by the number of intervals used during characterization. In this work, we propose an approach for output quality estimation of approximate designs that is based on a lookup table technique that characterizes the statistical properties of approximate hardwares and a regression-based technique for composing statistics to formulate output quality. These two techniques improve the speed and accuracy for several error metrics over a set of multiply-accumulator testcases. Compared to the interval-based modeling approach of [10], our approach for estimating output quality of approximate designs is 3. 75 × more accurate for comparable runtime on the testcases and achieves 8. 4 × runtime reduction for the error composition flow. We also demonstrate that our approach is applicable to general testcases. Keywords—Approximate computation, error modeling I...|$|R
5000|$|A system trace {{provides}} {{visibility of}} various events/states inside the embedded system. Trace {{data can be}} generated by instrumented application code and/or by <b>hardware</b> <b>modules</b> within the SoC. A SoC may contain several system traces.|$|R
