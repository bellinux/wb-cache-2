27|168|Public
5|$|When used together, these {{features}} allow for assembling a complex distributed computing environment by reusing the existing <b>hierarchical</b> <b>name</b> system.|$|E
5000|$|Legacy DOM {{was limited}} {{in the kinds}} of {{elements}} that could be accessed. Form, link and image elements could be referenced with a <b>hierarchical</b> <b>name</b> that began with the root document object. A <b>hierarchical</b> <b>name</b> could make use of either the names or the sequential index of the traversed elements. For example, a form input element could be accessed as either [...] or [...]|$|E
50|$|When used together, these {{features}} allow for assembling a complex distributed computing environment by reusing the existing <b>hierarchical</b> <b>name</b> system.|$|E
5000|$|Most commonly, INI files have no {{hierarchy}} of sections within sections. Some files {{appear to have}} a <b>hierarchical</b> <b>naming</b> convention, however. For section A, subsection B, sub-subsection C, property P and value V, they may accept entries such as [...] and [...] (Windows' [...] ), [...] and [...] (the IBM Windows driver file [...] ), or [...] and [...] (Microsoft Visual Studio file [...] ).|$|R
5000|$|... #Caption: The <b>hierarchical</b> domain <b>name</b> system, {{organized}} into zones, each served by domain name servers.|$|R
40|$|In {{this paper}} we {{describe}} a single unifying abstraction called dynamic sets which can offer substantial benefits to search applications. These benefits include greater oppor-tunity in the I/O subsystem to aggressively exploit prefetch-ing and parallelism, {{as well as}} support for associative nam-ing to complement the <b>hierarchical</b> <b>naming</b> in typical file systems. This paper motivates dynamic sets and presents {{the design of a}} system that embodies this abstraction. ...|$|R
5000|$|OSC {{messages}} {{consist of}} an Address pattern, a Type tag string, Arguments and an optional time tag. Address patterns form a <b>hierarchical</b> <b>name</b> space, {{reminiscent of a}} Unix filesystem path, or a URL. Type tag strings are a compact string representation of the argument types. Arguments are represented in binary form with 4-byte alignment. The core types supported are ...|$|E
50|$|MHSnet was {{originally}} {{developed at the}} University of Sydney by Piers Lauder and Bob Kummerfeld and {{was originally}} known as SUN3 (Sydney University Network version 3). Technically, it is similar in concept to UUCP in that it enabled the transfer of email, Usenet, and files in an efficient manner over non-dedicated links. In addition, it supported dynamic routing and a <b>hierarchical</b> <b>name</b> space avoiding the limitations of hardwired network addresses.|$|E
50|$|ZooKeeper's {{architecture}} supports {{high availability}} through redundant services. The clients can thus ask another ZooKeeper leader {{if the first}} fails to answer. ZooKeeper nodes store their data in a <b>hierarchical</b> <b>name</b> space, much like a file system or a tree data structure. Clients can read from and write to the nodes {{and in this way}} have a shared configuration service. ZooKeeper can be viewed as an atomic broadcast system, through which updates are totally ordered. The ZooKeeper Atomic Broadcast (ZAB) protocol is the core of the system.|$|E
5000|$|... #Caption: The <b>hierarchical</b> Domain <b>Name</b> System {{for class}} Internet, {{organized}} into zones, each {{served by a}} name server ...|$|R
5000|$|... {{top level}} domain - domain {{at the highest}} level in the <b>hierarchical</b> Domain <b>Name</b> System (e.g. [...] "com") ...|$|R
40|$|DNS(DomainNameSystem域名解析系统) 是互联网的一项核心服务，它是一种分布式多层次的、为各种与互联网相关的信息资源提供网络命名服务的系统。它作为可以将域名和IP地址相互映射的一个分布式数据库，可以通过用户亲切而友好的名称代替枯燥而难记的IP地址以定位相应的计算机和相应服务，能够使人更方便的访问互联网。在Internet上，当一台主机要访问另外一台主机时，必须首先获知其地址，这就是DNS所要解决的问题。因此，要想让亲切而友好的名称能被网络所认识，则需要在名称和IP地址之间有一位“翻译官”，它能将相关的域名翻译成网络能接受的相应IP地址。在Internet上，当一台主机要访问另外一 [...] . Domain Name System is a {{core service}} of the internet, which is a {{distributed}} <b>hierarchical</b> <b>naming</b> system for computers, services, or any resource connected to the Internet. As a Distributional Database, The Domain Name System distributes the responsibility of assigning domain names and mapping those names to IP addresses by designating authoritative name servers for each domain,and this function en [...] . 学位：工程硕士院系专业：软件学院_工程硕士(软件工程) 学号：X 201023045...|$|R
50|$|The Domain Name System of the Internet {{consists}} {{of a set of}} top-level domains which constitute the root domain of the <b>hierarchical</b> <b>name</b> space and database. In the growth of the Internet, it became desirable to expand the set of initially six generic top-level domains in 1984. As a result, new top-level domain names have been proposed for implementation by ICANN. Such proposals included a variety of models ranging from adoption of policies for unrestricted gTLDs that could be registered by anyone for any purpose, to chartered gTLDs for specialized uses by specialized organizations. In October 2000, ICANN published a list of proposals for top-level domain strings it had received.|$|E
40|$|We {{present the}} design and {{evaluation}} of a fully decentralized software application discovery scheme – iDiscover, which {{is used in the}} iShare Internet-sharing system being built at Purdue University. The scheme employs a structured peer-to-peer (P 2 P) overlay routing mechanism and a <b>hierarchical</b> <b>name</b> space. The structured P 2 P routing mechanism is self-organizing and scalable. The <b>hierarchical</b> <b>name</b> space provides an effective way to describe software applications with their semantics. Measurements using a set of real software applications show that our resource discovery mechanism is efficient and scalable. ...|$|E
30|$|However, {{there has}} been little {{consideration}} for the effects due to device movement in CCN environments. Especially, content source mobility brings about big problems such as frequent routing updates and low routing aggregation. That is, a mobile content source has to update routing tables of all relevant content routers, which is very slow. Moreover, many mobile content sources would pollute the routing tables with specific prefixes, tarnishing the advantages of prefix aggregation using the <b>hierarchical</b> <b>name</b> structure.|$|E
30|$|For {{information}} naming in ICN, {{the content}} name {{is the only}} identifier for content objects, which permits either the end-user or the intermediate networking unit to locate the best content holder. Besides the fundamental property of identifying the different content, information naming is globally unique, location independent, self-defined and security intergraded. <b>Hierarchical</b> <b>naming</b> and flat naming are two categories of ICN naming structures which are mainly supported in existing ICN solutions [6].|$|R
40|$|Assembling a large {{system from}} its {{component}} elements {{is not a}} simple task. An adequate notation for specifying this task must reflect the system structure, accommodate many configurations of the system and many versions as it develops, and be a suitable input to the many tools that support software development. The language described here applies the ideas of A-abstraction, <b>hierarchical</b> <b>naming</b> and type-checking to this problem. Some preliminary experience with its use is also given. 1...|$|R
40|$|Massively {{distributed}} systems like the Internet present new challenges for scalable distributed querying {{due to their}} sheer size. Hence {{there is a need}} for new techniques to organize information and query them in a scalable fashion. We present a novel method of organizing information based on content based multicast groups which mimic a <b>hierarchical</b> <b>naming</b> scheme. The <b>hierarchical</b> <b>naming</b> enables efficient partitioning of different types of data. The corresponding structure in the multicast groups enables quick location of a subset of nodes containing certain object types. Quick location of the rendezvous point (RP) of a multicast group is obtained by storing the group names and the corresponding RP in a DHT. More sophisticated message passing primitives including k-cast and anycast are also provided so that applications can choose the appropriate method depending on their consistency requirements. We evaluate our algorithms using p 2 psim [2] and show that they provide good performance when compared to the ideal multicast trees which they approximate at worst by a factor of 3. The group formation and maintenance cost is also shown to stay constant after a certain size. Finally we provide an implementation on top of the Bamboo DHT system provided by the OpenHash [1] project. ...|$|R
40|$|This paper {{presents}} an efficient content search system, which {{is applied to}} iShare, a distributed peer-to-peer (P 2 P) Internet sharing system. iShare facilitates the sharing of diverse resources located in different administrative domains over the Internet. For efficient resource management, iShare organizes resources into a <b>hierarchical</b> <b>name</b> space, which is distributed over the underlying structured P 2 P network. However, iShare 2 ̆ 7 s search capability has a fundamental limit inherited from the underlying structured P 2 P system 2 ̆ 7 s search capability. Most existing structured P 2 P systems do not support content searches. There exists some research that provides content search functionality, but the approaches do not scale well and incur substantial overheads on data updates. To address these issues, we propose an efficient hierarchical summary system, which enables an efficient content search and semantic ranking capability over traditional structured P 2 P systems. Our system uses a <b>hierarchical</b> <b>name</b> space to implement a summary hierarchy on top of existing structured P 2 P overlay networks, and uses a Bloom Filter as a summary structure to reduce space and maintenance overhead. We implemented the proposed system in iShare, and {{the results show that}} our search system finds all relevant results regardless of summary scale and the search latency increases very slowly as the network grows...|$|E
30|$|The PlanetLab {{has three}} main roles: an owner, a user and PLC (PlanetLab Consortium). The owner (i.e., InP) supply {{physical}} nodes to create VMs. A service is installed on PlanetLab by a researcher (i.e., SeP). The PLC is a centralized entity and has mainly two functions: (a) manages physical resource and (b) maintains trust among owners and researchers. A slice {{is a collection}} of VMs. Each slice is uniquely identified by the <b>hierarchical</b> <b>name</b> where each level has the responsibility to manage and control the resources at that level. The PLC acts as slice authority and maintains state of all slices in the system.|$|E
40|$|This paper {{describes}} a workstation file system that supports {{a group of}} cooperating programmers by allowing them both to manage local naming environments and to share consistent versions of collections of software. The file system {{has access to the}} workstation's local disk and to remote fie servers, and provides a <b>hierarchical</b> <b>name</b> space that includes the files on both. Local names can refer to local files or be attached to remote files. Remote files, which also may be referred to directly, are immutable and cached on the local disk. The file system is part of the Cedar experimental programming environment at Xerox PARC and has been in use since late 1983...|$|E
40|$|Deliverable D 2. 1. 1 (WP 2) This {{deliverable}} {{presents an}} SVM-based algorithm for IE and experiments on several benchmark datasets. The {{results showed that}} our system is comparable to other state-of-the-art systems on both traditional IE and adaptive IE tasks. We investigated two feature weighting schemes, the impact of different NLP features {{on the performance of}} the learning algorithm, and the importance of the SVM parameters. Results are reported both on traditional IE tasks such as named entity recognition and slot filling, and on adaptive IE and <b>hierarchical</b> <b>named</b> entit...|$|R
50|$|The {{translation}} between {{addresses and}} domain names is {{performed by the}} Domain Name System (DNS), a <b>hierarchical,</b> distributed <b>naming</b> system which allows for subdelegation of name spaces to other DNS servers.|$|R
40|$|The early 1980 s saw the {{development}} of some rather sophisticated distributed systems. These were not merely networked file systems: rather, using remote procedure calls, <b>hierarchical</b> <b>naming,</b> and what would now be called middleware, they allowed a collection of systems to operate as a coherent whole. One such system in particular was developed at Newcastle that allowed pre-existing applications and (Unix) systems to be used, completely unchanged, as components of an apparently standard large (multiprocessor) Unix system. The Distributed Secure System (DSS) described in our 1983 paper proposed {{a new way to}} construct secure systems by exploiting the design freedo...|$|R
30|$|The global {{scalability}} problem {{behind the}} ID/Loc bindings storage/recovery is also {{addressed by the}} mentioned projects. In MOFI, a distributed global domain-based mapping system is adopted for inter-domain ID/Loc binding storage/recovery. SAIL considers the idea of <b>hierarchical</b> <b>name</b> resolution systems and provides a specific implementation for the problem: the multi-level distributed hash table (MDHT) system. Akari divides the problem in three distributed systems: IMS, NMS, and LMS. They provide dynamic local mappings among names, IDs, and locators (IMS); static global mapping between names and IMS locators (NMS); and identifier to global locators mapping (LMS). MobilityFirst DMap’s approach shares ID/Loc bindings storage responsibility among autonomous systems using current network addresses. The global scalability of these solutions still demands to be demonstrated in practice.|$|E
40|$|Developing {{applications}} to control audio/video {{equipment and the}} interface between conventional audio/video signals and Internet streaming media is difficult. Consequently, widespread deployment and use of streaming media in day-to-day activities {{has been slow to}} develop. This paper describes a middleware system and application program interface designed to solve this problem. The system, called INDIVA, provides a <b>hierarchical</b> <b>name</b> space for accessing and controlling audio/video equipment, software services for processing media streams, and conference resources. The design and implementation of the system is described and examples are presented that illustrate how {{it can be used to}} implement direct manipulation interfaces for Internet streaming media. This middleware can also be used to implement control and automation systems for Internet webcasting and distributed collaboration systems. 1...|$|E
40|$|Middleware {{systems that}} are {{distributed}} worldwide are dicult to build due {{to all kinds of}} scalability issues. Problems already start when considering how naming should be done. It is commonly thought that organizing symbolic names into a <b>hierarchical</b> <b>name</b> space, and subsequently distributing the implementation of that space in a hierarchical fashion as well, is appropriate for worldwide naming. This solution is adopted by DNS. We argue that such approaches are not suited for naming in future global middleware systems. Instead, name space implementations should make heavily use of flexible and large-scale replication in order to exploit locality as much as possible. Current systems cannot be easily adapted to this extent. We describe a novel approach to implementing naming systems in large-scale, worldwide distributed middleware...|$|E
40|$|Abstract: <b>Hierarchical</b> <b>naming,</b> while deeply {{embedded}} in our conception of file systems, is a rather weak tool for storing information about files and their relationships. A consequence is that users of today’s file systems frequently have trouble locating files. We describe {{a system in which}} a standard directory tree is extended by allowing names to contain auxiliary components representing descriptive attributes rather than directory names. This system allows files to be characterized more extensively, and lets users choose among multiple organizational structures for their stored information. A prototype has been implemented by means of a new vnode layer under SunOS 4. 1. 3. 1...|$|R
40|$|Service-Centric Networking (SCN) is {{a concept}} derived from Information-Centric Networks (ICN). In SCN, the service is {{in the center of}} the {{architectural}} design. Current efforts of SCN focus on design enhancements and the derivation of new components providing new functionality. In this article, we present session support for services in SCN. Our design makes use of existing <b>hierarchical</b> <b>naming</b> schemes to specify sessions using unique session identifiers. Sessions are established through a two-way handshake, which allows both the service consumer and provider to exchange their generated unique session identifiers. We have implemented and evaluated our SCN service session support mechanism, which provides promising results...|$|R
5000|$|Packages {{are usually}} defined using a <b>hierarchical</b> <b>naming</b> pattern, with some {{levels in the}} {{hierarchy}} separated by periods ( [...] , pronounced [...] "dot"). Although packages lower in the naming hierarchy are {{often referred to as}} [...] "subpackages" [...] of the corresponding packages higher in the hierarchy, there is almost no semantic relationship between packages. The Java Language Specification establishes package naming conventions to avoid the possibility of two published packages having the same name. The naming conventions describe how to create unique package names, so that packages that are widely distributed will have unique namespaces. This allows packages to be separately, easily and automatically installed and catalogued.|$|R
40|$|As more {{files are}} stored on today's computers, {{understanding}} file activity patterns becomes crucial for developing systems to either compress rarely used data, or store it on tertiary storage {{devices such as}} tapes and optical disks. In this paper we compare and contrast long-term file system activity between different types of computing environments. We examine three different Unix file system environments [...] - administrative, general-purpose, and that of two computer science departments [...] - for periods of 150 to 280 days. This paper focuses on basic and long-term file system activity, on finding common long-term file inter-reference patterns for both file accesses and file modifications, and on comparing the <b>hierarchical</b> <b>name</b> space view (using path and filenames to determine a file's uniqueness) and the numeric index view (using the operating system's unique index numbers). For example, we find that numeric index files have more deletions than their hierarchical counterparts; [...] ...|$|E
40|$|Workstations {{typically}} {{depend on}} remote servers accessed over a network for such services as mail, printing, storing files, booting, and time. The availability of these remote services {{has a major}} impact on the usability of the workstation. Availability can be increased by repli-cating the servers. In the Echo distributed file system at DEC SRC, two different replication techniques are employed, one at the upper levels of our <b>hierarchical</b> <b>name</b> space, the name service, and another at the lower levels of the name space, the file volume service. The two replication techniques provide different guarantees of consistency be-tween their replicas and, therefore, different levels of availability. Echo also caches data from the name service and file volume service in client machines (e. g., workstations), with the cache for each service having its own cache consistency guarantee that mimics the guarantee on the consistency of the replicas for that service. The replication and caching consistency guarantees provided by each service are appropriate for its intended use...|$|E
40|$|Abstract—We {{describe}} the design, implementation, {{and evaluation of}} Molé, a mobile organic localization engine. Unlike previous work on crowd-sourced WiFi positioning, Molé uses a <b>hierarchical</b> <b>name</b> space. By not relying on a map and by being more strict than uninterpreted names for places, Molé aims for a more flexible and scalable point in the design space of localization systems. Molé employs several new techniques, including a new statistical positioning algorithm to differentiate between neighboring places, a motion detector to reduce update lag, and a scalable “cloud”-based fingerprint distribution system. Molé’s localization algorithm, called Maximum Overlap (MAO), accounts for temporal variations in a place’s fingerprint in a principled manner. It also allows for aggregation of fingerprints from many users and is compact enough for on-device storage. We show through end-to-end experiments in two deployments that MAO is significantly more accurate than state-of-the-art Bayesian-based localizers. We also show that non-experts can use Molé to quickly survey a building, enabling room-grained location-based services for themselves and others. I...|$|E
50|$|IANA {{administers the}} data in the root nameservers, which form {{the top of the}} <b>hierarchical</b> Domain <b>name</b> system (DNS) tree. This task {{involves}} liaising with top-level domain operators, the root nameserver operators, and ICANN's policy making apparatus.|$|R
40|$|Abstract. In France Telecom {{research}} center in Lannion (France) {{we have been working}} for three years on OO modeling as a promising technology for unifying the representation of data. This has led us to develop a Model Repository Tool, which offers, as its default configuration, a full support for the UML 1. 3 metamodel. The tool enables the manipulation of models by means of a Java or Python API. It provides a rich and flexible registration capability based on an explicit identification, relying on a two-leveled <b>hierarchical</b> <b>naming</b> space. The paper focuses on the design aspects of the repository tool and highlights its similarities and differences with the design principles of OMG Meta Object Facility specification. ...|$|R
5000|$|The DNS is a <b>hierarchical</b> <b>naming</b> {{system for}} computers, services, or any {{resource}} {{participating in the}} Internet. The top of that hierarchy is the root domain. The root domain {{does not have a}} formal name and its label in the DNS hierarchy is an empty string. All fully qualified domain names (FQDNs) on the Internet can be regarded as ending with this empty string for the root domain, and therefore ending in a full stop character (the label delimiter), e.g., [...] "www.example.com.". This is generally implied rather than explicit, as modern DNS software does not actually require that the terminating dot be included when attempting to translate a domain name to an IP address.|$|R
