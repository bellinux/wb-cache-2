3|291|Public
40|$|This {{retrieval}} system builds, updates, retrieves, and performs basic statistical analyses on blood, urine, and diet parameters for the M 071 and M 073 Skylab and Apollo experiments. This system permits data entry from cards {{to build an}} <b>indexed</b> <b>sequential</b> <b>file.</b> Programs are easily modified for specialized analyses...|$|E
40|$|INTRODUCTION 3 (2) - 1 THE INDEXED-SEQUENTIAL FILE The indexed-sequential file design {{attempts}} {{to overcome the}} access problem inherent in the sequential file organization without losing all the benefits and tradition associated with sequential files. Two features {{are added to the}} organization of the sequential file to arrive at this third file organization type. One additional feature is an index to the file to provide better random access; the other is an overflow area to provide a means to handle additions to the file. Figure 3 - 6 shows a particular example of an indexed-sequential file. We find in this figure the three important components: the sequential file, the index, and the overflow area. The sketch also has a number of details which will appear in later discussions. To be expanded to 200 pt for Figure space was Fig. 3 - 1 Figure 3 (2) - 1 Components of an <b>Indexed</b> <b>Sequential</b> <b>File</b> !!new?? Sec. 3 (2) - 1 The Indexed-Sequential Fi...|$|E
40|$|Graduation date: 1973 It is {{necessary}} to evaluate and compare the characteristics of various methods of accessing data-files in order to utilize economically both the hardware and the software (Space and Time) supported by the digital on-line system. The {{purpose of this paper}} is to describe and evaluate the structure and use of four conventional methods of file organization: Sequential File, <b>Indexed</b> <b>Sequential</b> <b>File,</b> Partitioned File, and Direct File. Special attention is given to the Direct File, which possesses the fastest accessing time. Five selected Hash Coding Techniques, each associated with three methods of handling redundant keys, are simulated and examined with the use of a selected data model of 1024 random United States names, and the resulting "average number of search per record retrieval" are compared with their corresponding theoretical values. As Hash 1 has offered the best results, it has been used to evaluate the organization of the Direct File, and to compare this organization with that of the other files. The CDC- 3300 system hardware parameter, control cycle time, the internal core storage, and the auxiliary storage parameters are introduced. From these values and the average number of searches per record retrieval, an expression of logical record file size, or loading factor is developed. The file size, or loading factor varies for different methods of file structure and accessing, (based upon the selected testing program). The system characteristics consisting of the average throughput per record retrieval, achievable-throughput-rate capability and user operating cost per call (unit cost) are evaluated and compared. The file system uses the full name of the record and a fixed length numerical key. Two common internal searches, Linear search and Binary search, are evaluated and compared as the preliminary work of this investigation, as shown in Appendix B...|$|E
40|$|The {{performance}} of batched search {{when applied to}} <b>index</b> <b>sequential</b> <b>files</b> is studied. Analysis provides exact formulae {{for the cost of}} searching when batching is applied {{as a function of the}} magnitude of the query and time. The analysis takes into account (a) accesses to the overflow area only, and (b) accesses to both primary and overflow area, as well as whether the records of the query are (a) distinct, or (b) nondistinct. Batched search is compared with the simple on-line search and a proposal is stated concerning the reorganization of <b>index</b> <b>sequential</b> <b>files...</b>|$|R
5000|$|Files had various types, like text <b>files</b> and <b>index</b> <b>sequential</b> data <b>files.</b>|$|R
40|$|A {{model for}} an <b>index</b> <b>sequential</b> <b>file</b> {{employing}} multiple overflow chains per bucket is developed. This model {{is used to}} analyse the effects of insertions and deletions {{on the cost of}} successful and unsuccessful search in terms of block accesses. Numerical results are obtained illustrating the performance. The performance is also compared with that of an ISAM file using only one overflow chain per bucket...|$|R
5000|$|The {{first step}} was to create a format. This command allowed the user to type a form {{directly}} onto the screen, using fixed text for headings, and indicating where variable data fields would get populated from the data file. The format could be associated with a data file created by an existing application, or used to create a new one by entering records interactively. v1.0 supported only <b>sequential</b> <b>files,</b> but search performance was predictably terrible, and multi-key <b>indexed</b> <b>sequential</b> <b>files</b> were quickly added in v2.0. Once the format was created and associated with a file, the user employed intuitive commands such as: ...|$|R
50|$|The Distributed Network Operating System (DNOS) is {{a general}} purpose,multitasking {{operating}} system designed to operate with the Texas Instruments990/10, 990/10A and 990/12 minicomputers.DNOS includes a sophisticated file management package which provides supportfor key <b>indexed</b> <b>files,</b> <b>sequential</b> <b>files,</b> and relative record files.DNOS is a multiterminal system {{that is capable of}} making each of several usersappear to have exclusive control of the system.DNOS supports output spooling and program accessible accounting data.Job level and task level operations enable more efficient use of systemresources.|$|R
50|$|The Durango F-85 was {{an early}} {{personal}} computer introduced in September 1978 by Durango Systems Corporation, a company started in 1977 by George E. Comstock, John M. Scandalios and Charles L. Waggoner, all formerly of Diablo Systems. The F-85 could run its own multitasking operating system called DX-85M, which included an integral <b>Indexed</b> <b>Sequential</b> (ISAM) <b>file</b> system and per-task file locking, or alternatively CP/M-80. DX-85M utilized a text configuration file named CONFIG.SYS five years before this filename was used for a similar purpose under MS-DOS/PC DOS 2.0 in 1983.|$|R
40|$|Although files with {{variable}} length records are very frequent in actual databases due to {{variable length}} fields, missing attribute values, multiple values of an attribute and compression, {{little has been}} reported in the literature about file structures appropriate for variable length records. In this paper we describe and analyze several overflow handling techniques for the case when records are of variable length. We develop analytic models that take into account variable length records and study the performance in the context of <b>indexed</b> <b>sequential</b> (ISAM) <b>files.</b> We also propose a new overflow handling technique and show that it provides an incremental reorganization capability appropriate for handling variable length records. Analytic results demonstrate that its performance is better than the performance of previous methods, The overflow handling techniques and the analytic methods developed in this paper are also applicable to other file structures with variable length records that require overtlow handling...|$|R
40|$|We {{introduce}} two new hash-based index {{structures to}} index set-valued attributes. Both {{are able to}} support subset and superset queries. Analytical cost models for the new index structures {{as well as for}} the two existing <b>index</b> structures, <b>sequential</b> signature <b>file</b> and Russian Doll Tree, are presented and experimentally validated. Using the validated cost model, we express the performance of all four index structures in terms of the performance of the <b>sequential</b> signature <b>file.</b> This allows a direct analytical comparison of their performance. Last, we report on our benchmark results comparing the real performance of all four index structures. We especially investigate their performance for skewed data. 1 Introduction Since the invention of database management systems, tremendous effort has been undertaken in order to invent index structures. Historically this work was mostly carried out in the context of relational databases. The impressive results comprise very versatile index s [...] ...|$|R
5000|$|The same {{facilities}} (access methods) as DOS/360 {{for reading}} and writing <b>files</b> (<b>sequential,</b> <b>indexed</b> and direct) and for data communications (BTAM).|$|R
5000|$|A <b>sequential</b> <b>file</b> is a {{data file}} {{that can be}} linearly read from start to finish. [...] files are {{commonly}} used to store documents or text files created by a word processor or other such editor. A <b>sequential</b> <b>file</b> is analogous to a flat file in Linux or UNIX, in {{that it has no}} specialized internal structure. It is not possible to position to any arbitrary location in a <b>sequential</b> <b>file,</b> as there is no analog of the [...] kernel call found in UNIX-like operating systems.|$|R
50|$|<b>Sequential</b> <b>files</b> are {{somewhat}} more efficient {{in terms of}} space than line files and can be more efficient in terms of CPU time too when compared with large disorganized line files. But {{the main reason for}} the existence of SEQ files is that they supported long lines (up to 32767 characters) before line <b>files</b> did. <b>Sequential</b> <b>files</b> were less common once line files could support long lines. <b>Sequential</b> <b>files</b> are also used to force new lines to be appended {{to the end of the}} file without the need to give the line number range (LAST+1).|$|R
40|$|When <b>sequential</b> <b>file</b> {{structures}} must be {{used and}} binary searching is not feasible, jump searching becomes an appealing alternative. This paper explores variants of the classic jump searching scheme where the optimum jump size is the square root {{of the number of}} records. Multiple level and variable size jump strategies are explored, appropriate applications are discussed and performance is evaluated. Key Words and Phrases: jump searching, <b>sequential</b> <b>files,</b> file management, search strategies, databas...|$|R
5000|$|<b>Sequential</b> <b>files,</b> {{in which}} records {{are stored in}} {{consecutive}} slots.|$|R
50|$|<b>Sequential</b> <b>files</b> ($CREATE name TYPE=SEQ) are line-oriented files {{with the}} first line number being implicitly 1 and {{incremented}} by 1 for each line. Once written {{the length of a}} line (other than the last line of a file) can not be changed, although any line can be replaced by a line of the same length. <b>Sequential</b> <b>files</b> are generally only readable sequentially from start to end, or written by appending to the end. One can, however, request a reference for the current line of a <b>sequential</b> <b>file,</b> and use that reference to jump to that specific location again.|$|R
50|$|Full {{function}} databases can {{be accessed}} {{by a variety of}} methods, although Hierarchical Direct (HDAM) and Hierarchical Indexed Direct (HIDAM) dominate. The other formats are Simple Hierarchical <b>Indexed</b> <b>Sequential</b> (SHISAM), Hierarchical Sequential (HSAM), and Hierarchical <b>Indexed</b> <b>Sequential</b> (HISAM).|$|R
5000|$|... perform <b>sequential</b> <b>file</b> I/O (QSAM) {{operations}} from {{a script}} to a user-defined, external dataset; ...|$|R
5000|$|Data: By {{splitting}} {{a single}} <b>sequential</b> <b>file</b> into smaller data files to provide parallel access ...|$|R
5000|$|The OS 2200 {{database}} {{managers are}} all part of the Universal Data System (UDS). UDS provides a common control structure for multiple different data models. Flat <b>files</b> (<b>sequential,</b> multi-keyed <b>indexed</b> <b>sequential</b> - MSAM, and fixed-block), network (DMS), and relational (RDMS) data models all share a common locking, recovery, and clustering mechanism. OS 2200 applications can use any mixtures of these data models along with the high-volume transaction file system within the same program while retaining a single common recovery mechanism.|$|R
5000|$|Simple Hierarchical <b>Indexed</b> <b>Sequential</b> Access Method (SHISAM).|$|R
50|$|This data is then {{periodically}} dumped to <b>sequential</b> <b>files</b> (for example, tape drives) {{using the}} IFASMFDP SMF Dump Utility (or IFASMFDL when using log streams). IFASMFDP {{can also be}} used to split existing SMF <b>sequential</b> <b>files</b> and copy them to other files. The two dump programs produce the same output, so it does not involve changes in the SMF records elaboration chain, other than changing the JCL with the call of the new dump utility.|$|R
5000|$|... {{to support}} only {{selected}} commands of a manager, {{such as the}} ability to load and unload records from a <b>sequential</b> <b>file.</b>|$|R
5000|$|... {{support for}} BIL (band {{interleaved}} by line files) and BSQ (band <b>sequential</b> in one <b>file)</b> {{added to the}} individual band <b>sequential</b> <b>files</b> supported by the earlier version; all formats can be 8-16 bits per pixel including swapped word order ...|$|R
5000|$|Insert+Cat - {{it allows}} {{creating}} a text file from a diskette directory, similarly, it allows {{to make a}} list of files on cassette. Additionally, it allows to convert <b>sequential</b> [...]Q <b>files</b> into text file (.Q <b>files</b> are <b>sequential</b> <b>files</b> used by diskette units Didaktik 40 and Didaktik 80).|$|R
50|$|SAFR {{can access}} {{multiple}} types of mainframe-based data, including DB2. For example, it can read <b>sequential</b> <b>files</b> {{based on the}} input format specified, then look up certain fields in a VSAM file or in another <b>sequential</b> <b>file.</b> SAFR can produce output in yet another format with some additional calculations, as required. The entire process is called a VIEW, {{and any number of}} VIEWs can be defined. SAFR also commonly processes data from other platforms that are fed into its engine.|$|R
50|$|Sequential With Line Number files ($CREATE name TYPE=SEQWL) {{are similar}} to <b>Sequential</b> <b>Files,</b> except that their line numbers were {{explicitly}} stored. They have all the restrictions of <b>Sequential</b> <b>Files,</b> except that the line number could be specifically supplied when writing to a file (as {{long as it is}} greater than the last line number written to the file). Unlike Line Files, the first read of an SEQWL file returns the first line of the file, even if it was negative.|$|R
5000|$|MTS {{supports}} {{three types}} of <b>file,</b> line <b>files,</b> <b>sequential</b> <b>files,</b> and <b>sequential</b> with line number files, but line files were {{by far the most}} common: ...|$|R
5000|$|An undocumented {{internally}} used file type {{similar in}} structure to a <b>sequential</b> <b>file.</b> Creation of this file type must {{be accomplished by}} direct manipulation of the disk directory.|$|R
40|$|This paper {{investigates the}} most {{efficient}} way to read and write large <b>sequential</b> <b>files</b> using the Windows NT^TM 4. 0 File System. The study explores the performance of Intel Pentium Pro^TM based memory and IO subsystems, including the processor bus, the PCI bus, the SCSI bus, the disk controllers, and the disk media. We provide details of the overhead costs at various levels of the system and examine a variety of the available tuning knobs. The report shows that NTFS out-of-the box read and write performance is quite good, but overheads for small requests can be quite high. The best performance is achieved by using large requests, bypassing the file system cache, spreading the data across many disks and controllers, and using deep-asynchronous requests. Draft Sequential IO Paper 3 07 / 04 / 99 1. Introduction This paper discusses how to do high-speed <b>sequential</b> <b>file</b> access using the Windows NT^TM File System (NTFS). Highspeed <b>sequential</b> <b>file</b> access is important for bulk data operations [...] ...|$|R
50|$|IBM Informix C-ISAM (also C-ISAM or cisam) is an X/Open {{standards-compliant}} API to an <b>Indexed</b> <b>Sequential</b> Access Method or ISAM.|$|R
50|$|So that BASIC {{could be}} useful in a {{midrange}} computing environment, IBM added extensions to the language that were specific to the hardware and software conventions of the IBM System/34 Family, such as the WORKSTN file, support for <b>indexed,</b> direct, and <b>sequential</b> disk <b>files,</b> the ability to open and close multiple printer files, and LOAD/SAVE from libraries on the fixed disk.|$|R
40|$|The BNL Archive and Dissemination (BNLAD) System was {{designed}} to operate on a homogeneous distributed data base in a computer network. Its primary function is to present a uniform logical and physical view of already existing <b>sequential</b> <b>files</b> of data, so [...] . "BNL- 22612; AMD 757 R 1. ""March 1977. "Includes bibliographical references (p. 21) The BNL Archive and Dissemination (BNLAD) System {{was designed}} to operate on a homogeneous distributed data base in a computer network. Its primary function is to present a uniform logical and physical view of already existing <b>sequential</b> <b>files</b> of data, so [...] . Mode of access: Internet...|$|R
50|$|Sequential {{placement}} (not to {{be confused}} with <b>indexed</b> <b>sequential),</b> simply places each new record {{at the end of the}} area. This option is rarely used.|$|R
5000|$|In {{the example}} above, SYSIN control cards {{are coming from}} an in-stream file, but you can instead point to any <b>sequential</b> <b>file</b> or a PDS member {{containing}} control cards or a temporary data-set, if you wish.Example of using SYSIN files would be something like this: ...|$|R
